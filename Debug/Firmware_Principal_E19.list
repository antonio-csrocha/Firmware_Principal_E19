
Firmware_Principal_E19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000192ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  080194bc  080194bc  000294bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019a38  08019a38  00030198  2**0
                  CONTENTS
  4 .ARM          00000008  08019a38  08019a38  00029a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019a40  08019a40  00030198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019a40  08019a40  00029a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019a44  08019a44  00029a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  08019a48  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007294  20000198  08019be0  00030198  2**2
                  ALLOC
 10 ._user_heap_stack 00011004  2000742c  08019be0  0003742c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030198  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030a28  00000000  00000000  000301c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006b10  00000000  00000000  00060bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023c8  00000000  00000000  00067700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002098  00000000  00000000  00069ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f062  00000000  00000000  0006bb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00036e7d  00000000  00000000  0009abc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f42c1  00000000  00000000  000d1a3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c5d00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009844  00000000  00000000  001c5d50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000198 	.word	0x20000198
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080194a4 	.word	0x080194a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000019c 	.word	0x2000019c
 800020c:	080194a4 	.word	0x080194a4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <FT_CAN_FilterConfig>:
#include "ft_can.h"

static void FT_CAN_ProcessData(FT_Data* FT_Data_Struct);

HAL_StatusTypeDef FT_CAN_FilterConfig(CAN_HandleTypeDef *hcan, uint16_t FT_Product, uint8_t filter_bank_position, uint32_t Filter_FIFO)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b090      	sub	sp, #64	; 0x40
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	460b      	mov	r3, r1
 80005c0:	817b      	strh	r3, [r7, #10]
 80005c2:	4613      	mov	r3, r2
 80005c4:	727b      	strb	r3, [r7, #9]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filter_id = FT_Product << 19, mask_id = 0x1FF80000;
 80005c6:	897b      	ldrh	r3, [r7, #10]
 80005c8:	04db      	lsls	r3, r3, #19
 80005ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005cc:	4b13      	ldr	r3, [pc, #76]	; (800061c <FT_CAN_FilterConfig+0x68>)
 80005ce:	63bb      	str	r3, [r7, #56]	; 0x38

	sFilterConfig.FilterBank = filter_bank_position;
 80005d0:	7a7b      	ldrb	r3, [r7, #9]
 80005d2:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005d4:	2300      	movs	r3, #0
 80005d6:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005d8:	2301      	movs	r3, #1
 80005da:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 80005dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005de:	0b5b      	lsrs	r3, r3, #13
 80005e0:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 80005e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005e4:	00db      	lsls	r3, r3, #3
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 80005ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80005ec:	0b5b      	lsrs	r3, r3, #13
 80005ee:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 80005f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80005f2:	00db      	lsls	r3, r3, #3
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterFIFOAssignment = Filter_FIFO;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterActivation = ENABLE;
 80005fc:	2301      	movs	r3, #1
 80005fe:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.SlaveStartFilterBank = 14 + filter_bank_position;
 8000600:	7a7b      	ldrb	r3, [r7, #9]
 8000602:	330e      	adds	r3, #14
 8000604:	637b      	str	r3, [r7, #52]	; 0x34

	return HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 8000606:	f107 0310 	add.w	r3, r7, #16
 800060a:	4619      	mov	r1, r3
 800060c:	68f8      	ldr	r0, [r7, #12]
 800060e:	f007 f9e3 	bl	80079d8 <HAL_CAN_ConfigFilter>
 8000612:	4603      	mov	r3, r0
}
 8000614:	4618      	mov	r0, r3
 8000616:	3740      	adds	r7, #64	; 0x40
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	1ff80000 	.word	0x1ff80000

08000620 <FT_CAN_ReceiveData>:

void FT_CAN_ReceiveData(CAN_RxHeaderTypeDef* pRxHeader, uint8_t* pData, FT_Data* FT_Data_Struct)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
	uint8_t buffer[8];
	uint8_t DLC = pRxHeader->DLC;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	691b      	ldr	r3, [r3, #16]
 8000630:	77bb      	strb	r3, [r7, #30]
	uint32_t ExtId = pRxHeader->ExtId >> 19;
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	0cdb      	lsrs	r3, r3, #19
 8000638:	61bb      	str	r3, [r7, #24]

	if(	   (ExtId != FT_Gear_Controller)
 800063a:	69bb      	ldr	r3, [r7, #24]
 800063c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000640:	d031      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_Knock_Meter)
 8000642:	69bb      	ldr	r3, [r7, #24]
 8000644:	f240 1241 	movw	r2, #321	; 0x141
 8000648:	4293      	cmp	r3, r2
 800064a:	d02c      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_Boost_Controller2)
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 8000652:	d028      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_Injector_Driver)
 8000654:	69bb      	ldr	r3, [r7, #24]
 8000656:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 800065a:	d024      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_WBO2_Nano)
 800065c:	69bb      	ldr	r3, [r7, #24]
 800065e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8000662:	d020      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_WBO2_Slim)
 8000664:	69bb      	ldr	r3, [r7, #24]
 8000666:	f240 2241 	movw	r2, #577	; 0x241
 800066a:	4293      	cmp	r3, r2
 800066c:	d01b      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_Alcohol_O2)
 800066e:	69bb      	ldr	r3, [r7, #24]
 8000670:	f240 2242 	movw	r2, #578	; 0x242
 8000674:	4293      	cmp	r3, r2
 8000676:	d016      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FTSpark)
 8000678:	69bb      	ldr	r3, [r7, #24]
 800067a:	f240 2243 	movw	r2, #579	; 0x243
 800067e:	4293      	cmp	r3, r2
 8000680:	d011      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_Switchpad)
 8000682:	69bb      	ldr	r3, [r7, #24]
 8000684:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 8000688:	d00d      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT500)
 800068a:	69bb      	ldr	r3, [r7, #24]
 800068c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8000690:	d009      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_Power_ECU)
 8000692:	69bb      	ldr	r3, [r7, #24]
 8000694:	f240 2281 	movw	r2, #641	; 0x281
 8000698:	4293      	cmp	r3, r2
 800069a:	d004      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (pRxHeader->IDE != CAN_ID_EXT))
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	2b04      	cmp	r3, #4
 80006a2:	f040 83c4 	bne.w	8000e2e <FT_CAN_ReceiveData+0x80e>
		return;

	ExtId = pRxHeader->ExtId;
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	685b      	ldr	r3, [r3, #4]
 80006aa:	61bb      	str	r3, [r7, #24]

	for(uint8_t i = 0; i < DLC; i++)
 80006ac:	2300      	movs	r3, #0
 80006ae:	77fb      	strb	r3, [r7, #31]
 80006b0:	e00b      	b.n	80006ca <FT_CAN_ReceiveData+0xaa>
		buffer[i] = pData[i];
 80006b2:	7ffb      	ldrb	r3, [r7, #31]
 80006b4:	68ba      	ldr	r2, [r7, #8]
 80006b6:	441a      	add	r2, r3
 80006b8:	7ffb      	ldrb	r3, [r7, #31]
 80006ba:	7812      	ldrb	r2, [r2, #0]
 80006bc:	3320      	adds	r3, #32
 80006be:	443b      	add	r3, r7
 80006c0:	f803 2c10 	strb.w	r2, [r3, #-16]
	for(uint8_t i = 0; i < DLC; i++)
 80006c4:	7ffb      	ldrb	r3, [r7, #31]
 80006c6:	3301      	adds	r3, #1
 80006c8:	77fb      	strb	r3, [r7, #31]
 80006ca:	7ffa      	ldrb	r2, [r7, #31]
 80006cc:	7fbb      	ldrb	r3, [r7, #30]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d3ef      	bcc.n	80006b2 <FT_CAN_ReceiveData+0x92>

	if((((ExtId / 0x800) & 0x07) == 0x00))// || (((ExtId / 0x800) & 0x07) == 0x01))
 80006d2:	69bb      	ldr	r3, [r7, #24]
 80006d4:	0adb      	lsrs	r3, r3, #11
 80006d6:	f003 0307 	and.w	r3, r3, #7
 80006da:	2b00      	cmp	r3, #0
 80006dc:	f040 81d5 	bne.w	8000a8a <FT_CAN_ReceiveData+0x46a>
	{
		if((ExtId & 0xFFF) == 0x600)
 80006e0:	69bb      	ldr	r3, [r7, #24]
 80006e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80006e6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80006ea:	d13c      	bne.n	8000766 <FT_CAN_ReceiveData+0x146>
		{
			FT_Data_Struct->tps  = buffer[0] << 8;
 80006ec:	7c3b      	ldrb	r3, [r7, #16]
 80006ee:	021b      	lsls	r3, r3, #8
 80006f0:	b21a      	sxth	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			FT_Data_Struct->tps |= buffer[1];
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 80006fe:	7c7b      	ldrb	r3, [r7, #17]
 8000700:	b21b      	sxth	r3, r3
 8000702:	4313      	orrs	r3, r2
 8000704:	b21a      	sxth	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			FT_Data_Struct->map  = buffer[2] << 8;
 800070c:	7cbb      	ldrb	r3, [r7, #18]
 800070e:	021b      	lsls	r3, r3, #8
 8000710:	b21a      	sxth	r2, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			FT_Data_Struct->map |= buffer[3];
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 800071e:	7cfb      	ldrb	r3, [r7, #19]
 8000720:	b21b      	sxth	r3, r3
 8000722:	4313      	orrs	r3, r2
 8000724:	b21a      	sxth	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			FT_Data_Struct->iat  = buffer[4] << 8;
 800072c:	7d3b      	ldrb	r3, [r7, #20]
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	b21a      	sxth	r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	875a      	strh	r2, [r3, #58]	; 0x3a
			FT_Data_Struct->iat |= buffer[5];
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	f9b3 203a 	ldrsh.w	r2, [r3, #58]	; 0x3a
 800073c:	7d7b      	ldrb	r3, [r7, #21]
 800073e:	b21b      	sxth	r3, r3
 8000740:	4313      	orrs	r3, r2
 8000742:	b21a      	sxth	r2, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	875a      	strh	r2, [r3, #58]	; 0x3a
			FT_Data_Struct->ect  = buffer[6] << 8;
 8000748:	7dbb      	ldrb	r3, [r7, #22]
 800074a:	021b      	lsls	r3, r3, #8
 800074c:	b21a      	sxth	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	86da      	strh	r2, [r3, #54]	; 0x36
			FT_Data_Struct->ect |= buffer[7];
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	f9b3 2036 	ldrsh.w	r2, [r3, #54]	; 0x36
 8000758:	7dfb      	ldrb	r3, [r7, #23]
 800075a:	b21b      	sxth	r3, r3
 800075c:	4313      	orrs	r3, r2
 800075e:	b21a      	sxth	r2, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	86da      	strh	r2, [r3, #54]	; 0x36

			return;
 8000764:	e366      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
		}

		else if((ExtId & 0xFFF) == 0x601)
 8000766:	69bb      	ldr	r3, [r7, #24]
 8000768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800076c:	f240 6201 	movw	r2, #1537	; 0x601
 8000770:	4293      	cmp	r3, r2
 8000772:	d13c      	bne.n	80007ee <FT_CAN_ReceiveData+0x1ce>
		{
			FT_Data_Struct->oil_pressure  	  = buffer[0] << 8;
 8000774:	7c3b      	ldrb	r3, [r7, #16]
 8000776:	021b      	lsls	r3, r3, #8
 8000778:	b21a      	sxth	r2, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			FT_Data_Struct->oil_pressure 	 |= buffer[1];
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8000786:	7c7b      	ldrb	r3, [r7, #17]
 8000788:	b21b      	sxth	r3, r3
 800078a:	4313      	orrs	r3, r2
 800078c:	b21a      	sxth	r2, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			FT_Data_Struct->fuel_pressure 	  = buffer[2] << 8;
 8000794:	7cbb      	ldrb	r3, [r7, #18]
 8000796:	021b      	lsls	r3, r3, #8
 8000798:	b21a      	sxth	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	879a      	strh	r2, [r3, #60]	; 0x3c
			FT_Data_Struct->fuel_pressure 	 |= buffer[3];
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 80007a4:	7cfb      	ldrb	r3, [r7, #19]
 80007a6:	b21b      	sxth	r3, r3
 80007a8:	4313      	orrs	r3, r2
 80007aa:	b21a      	sxth	r2, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	879a      	strh	r2, [r3, #60]	; 0x3c
			FT_Data_Struct->coolant_pressure  = buffer[4] << 8;
 80007b0:	7d3b      	ldrb	r3, [r7, #20]
 80007b2:	021b      	lsls	r3, r3, #8
 80007b4:	b21a      	sxth	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	871a      	strh	r2, [r3, #56]	; 0x38
			FT_Data_Struct->coolant_pressure |= buffer[5];
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	f9b3 2038 	ldrsh.w	r2, [r3, #56]	; 0x38
 80007c0:	7d7b      	ldrb	r3, [r7, #21]
 80007c2:	b21b      	sxth	r3, r3
 80007c4:	4313      	orrs	r3, r2
 80007c6:	b21a      	sxth	r2, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	871a      	strh	r2, [r3, #56]	; 0x38
			FT_Data_Struct->gear  			  = buffer[6] << 8;
 80007cc:	7dbb      	ldrb	r3, [r7, #22]
 80007ce:	021b      	lsls	r3, r3, #8
 80007d0:	b21a      	sxth	r2, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			FT_Data_Struct->gear 			 |= buffer[7];
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
 80007de:	7dfb      	ldrb	r3, [r7, #23]
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b21a      	sxth	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			return;
 80007ec:	e322      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
		}

		else if((ExtId & 0xFFF) == 0x602)
 80007ee:	69bb      	ldr	r3, [r7, #24]
 80007f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007f4:	f240 6202 	movw	r2, #1538	; 0x602
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d140      	bne.n	800087e <FT_CAN_ReceiveData+0x25e>
		{
			FT_Data_Struct->lambda  		 = buffer[0] << 8;
 80007fc:	7c3b      	ldrb	r3, [r7, #16]
 80007fe:	021b      	lsls	r3, r3, #8
 8000800:	b21a      	sxth	r2, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			FT_Data_Struct->lambda 			|= buffer[1];
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
 800080e:	7c7b      	ldrb	r3, [r7, #17]
 8000810:	b21b      	sxth	r3, r3
 8000812:	4313      	orrs	r3, r2
 8000814:	b21a      	sxth	r2, r3
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			FT_Data_Struct->rpm  			 = buffer[2] << 8;
 800081c:	7cbb      	ldrb	r3, [r7, #18]
 800081e:	021b      	lsls	r3, r3, #8
 8000820:	b21a      	sxth	r2, r3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
			FT_Data_Struct->rpm 			|= buffer[3];
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f9b3 204e 	ldrsh.w	r2, [r3, #78]	; 0x4e
 800082e:	7cfb      	ldrb	r3, [r7, #19]
 8000830:	b21b      	sxth	r3, r3
 8000832:	4313      	orrs	r3, r2
 8000834:	b21a      	sxth	r2, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
			FT_Data_Struct->oil_temperature  = buffer[4] << 8;
 800083c:	7d3b      	ldrb	r3, [r7, #20]
 800083e:	021b      	lsls	r3, r3, #8
 8000840:	b21a      	sxth	r2, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->oil_temperature |= buffer[5];
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	f9b3 204a 	ldrsh.w	r2, [r3, #74]	; 0x4a
 800084e:	7d7b      	ldrb	r3, [r7, #21]
 8000850:	b21b      	sxth	r3, r3
 8000852:	4313      	orrs	r3, r2
 8000854:	b21a      	sxth	r2, r3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->pit_limiter  	 = buffer[6] << 8;
 800085c:	7dbb      	ldrb	r3, [r7, #22]
 800085e:	021b      	lsls	r3, r3, #8
 8000860:	b21a      	sxth	r2, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->pit_limiter 	|= buffer[7];
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f9b3 204c 	ldrsh.w	r2, [r3, #76]	; 0x4c
 800086e:	7dfb      	ldrb	r3, [r7, #23]
 8000870:	b21b      	sxth	r3, r3
 8000872:	4313      	orrs	r3, r2
 8000874:	b21a      	sxth	r2, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

			return;
 800087c:	e2da      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
		}

		else if((ExtId & 0xFFF) == 0x603)
 800087e:	69bb      	ldr	r3, [r7, #24]
 8000880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000884:	f240 6203 	movw	r2, #1539	; 0x603
 8000888:	4293      	cmp	r3, r2
 800088a:	d140      	bne.n	800090e <FT_CAN_ReceiveData+0x2ee>
		{
			FT_Data_Struct->wheel_speed_fr	 = buffer[0] << 8;
 800088c:	7c3b      	ldrb	r3, [r7, #16]
 800088e:	021b      	lsls	r3, r3, #8
 8000890:	b21a      	sxth	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			FT_Data_Struct->wheel_speed_fr	|= buffer[1];
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 800089e:	7c7b      	ldrb	r3, [r7, #17]
 80008a0:	b21b      	sxth	r3, r3
 80008a2:	4313      	orrs	r3, r2
 80008a4:	b21a      	sxth	r2, r3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			FT_Data_Struct->wheel_speed_fl	 = buffer[2] << 8;
 80008ac:	7cbb      	ldrb	r3, [r7, #18]
 80008ae:	021b      	lsls	r3, r3, #8
 80008b0:	b21a      	sxth	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
			FT_Data_Struct->wheel_speed_fl	|= buffer[3];
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f9b3 2052 	ldrsh.w	r2, [r3, #82]	; 0x52
 80008be:	7cfb      	ldrb	r3, [r7, #19]
 80008c0:	b21b      	sxth	r3, r3
 80008c2:	4313      	orrs	r3, r2
 80008c4:	b21a      	sxth	r2, r3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
			FT_Data_Struct->wheel_speed_rr	 = buffer[4] << 8;
 80008cc:	7d3b      	ldrb	r3, [r7, #20]
 80008ce:	021b      	lsls	r3, r3, #8
 80008d0:	b21a      	sxth	r2, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			FT_Data_Struct->wheel_speed_rr	|= buffer[5];
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f9b3 2058 	ldrsh.w	r2, [r3, #88]	; 0x58
 80008de:	7d7b      	ldrb	r3, [r7, #21]
 80008e0:	b21b      	sxth	r3, r3
 80008e2:	4313      	orrs	r3, r2
 80008e4:	b21a      	sxth	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			FT_Data_Struct->wheel_speed_rl 	 = buffer[6] << 8;
 80008ec:	7dbb      	ldrb	r3, [r7, #22]
 80008ee:	021b      	lsls	r3, r3, #8
 80008f0:	b21a      	sxth	r2, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
			FT_Data_Struct->wheel_speed_rl 	|= buffer[7];
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f9b3 2056 	ldrsh.w	r2, [r3, #86]	; 0x56
 80008fe:	7dfb      	ldrb	r3, [r7, #23]
 8000900:	b21b      	sxth	r3, r3
 8000902:	4313      	orrs	r3, r2
 8000904:	b21a      	sxth	r2, r3
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

			return;
 800090c:	e292      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
		}

		else if((ExtId & 0xFFF) == 0x606)
 800090e:	69bb      	ldr	r3, [r7, #24]
 8000910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000914:	f240 6206 	movw	r2, #1542	; 0x606
 8000918:	4293      	cmp	r3, r2
 800091a:	d13c      	bne.n	8000996 <FT_CAN_ReceiveData+0x376>
		{
			FT_Data_Struct->accel_long		 = buffer[0] << 8;
 800091c:	7c3b      	ldrb	r3, [r7, #16]
 800091e:	021b      	lsls	r3, r3, #8
 8000920:	b21a      	sxth	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	869a      	strh	r2, [r3, #52]	; 0x34
			FT_Data_Struct->accel_long		|= buffer[1];
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	; 0x34
 800092c:	7c7b      	ldrb	r3, [r7, #17]
 800092e:	b21b      	sxth	r3, r3
 8000930:	4313      	orrs	r3, r2
 8000932:	b21a      	sxth	r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	869a      	strh	r2, [r3, #52]	; 0x34
			FT_Data_Struct->accel_lat		 = buffer[2] << 8;
 8000938:	7cbb      	ldrb	r3, [r7, #18]
 800093a:	021b      	lsls	r3, r3, #8
 800093c:	b21a      	sxth	r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	865a      	strh	r2, [r3, #50]	; 0x32
			FT_Data_Struct->accel_lat		|= buffer[3];
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f9b3 2032 	ldrsh.w	r2, [r3, #50]	; 0x32
 8000948:	7cfb      	ldrb	r3, [r7, #19]
 800094a:	b21b      	sxth	r3, r3
 800094c:	4313      	orrs	r3, r2
 800094e:	b21a      	sxth	r2, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	865a      	strh	r2, [r3, #50]	; 0x32
			FT_Data_Struct->yaw_rate_pitch	 = buffer[4] << 8;
 8000954:	7d3b      	ldrb	r3, [r7, #20]
 8000956:	021b      	lsls	r3, r3, #8
 8000958:	b21a      	sxth	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
			FT_Data_Struct->yaw_rate_pitch	|= buffer[5];
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f9b3 205a 	ldrsh.w	r2, [r3, #90]	; 0x5a
 8000966:	7d7b      	ldrb	r3, [r7, #21]
 8000968:	b21b      	sxth	r3, r3
 800096a:	4313      	orrs	r3, r2
 800096c:	b21a      	sxth	r2, r3
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
			FT_Data_Struct->yaw_rate_roll	 = buffer[6] << 8;
 8000974:	7dbb      	ldrb	r3, [r7, #22]
 8000976:	021b      	lsls	r3, r3, #8
 8000978:	b21a      	sxth	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
			FT_Data_Struct->yaw_rate_roll	|= buffer[7];
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f9b3 205c 	ldrsh.w	r2, [r3, #92]	; 0x5c
 8000986:	7dfb      	ldrb	r3, [r7, #23]
 8000988:	b21b      	sxth	r3, r3
 800098a:	4313      	orrs	r3, r2
 800098c:	b21a      	sxth	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

			return;
 8000994:	e24e      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
		}

		else if((ExtId & 0xFFF) == 0x607)
 8000996:	69bb      	ldr	r3, [r7, #24]
 8000998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800099c:	f240 6207 	movw	r2, #1543	; 0x607
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d11e      	bne.n	80009e2 <FT_CAN_ReceiveData+0x3c2>
		{
			FT_Data_Struct->lambda_correction  = buffer[0] << 8;
 80009a4:	7c3b      	ldrb	r3, [r7, #16]
 80009a6:	021b      	lsls	r3, r3, #8
 80009a8:	b21a      	sxth	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			FT_Data_Struct->lambda_correction |= buffer[1];
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 80009b6:	7c7b      	ldrb	r3, [r7, #17]
 80009b8:	b21b      	sxth	r3, r3
 80009ba:	4313      	orrs	r3, r2
 80009bc:	b21a      	sxth	r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			FT_Data_Struct->fuel_flow_total	   = buffer[2] << 8;
 80009c4:	7cbb      	ldrb	r3, [r7, #18]
 80009c6:	021b      	lsls	r3, r3, #8
 80009c8:	b21a      	sxth	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	87da      	strh	r2, [r3, #62]	; 0x3e
			FT_Data_Struct->fuel_flow_total	  |= buffer[3];
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
 80009d4:	7cfb      	ldrb	r3, [r7, #19]
 80009d6:	b21b      	sxth	r3, r3
 80009d8:	4313      	orrs	r3, r2
 80009da:	b21a      	sxth	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	87da      	strh	r2, [r3, #62]	; 0x3e

			return;
 80009e0:	e228      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
		}

#ifndef FT_CAN_FIXED
		else if((ExtId & 0xFF) == 0xFF)
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	2bff      	cmp	r3, #255	; 0xff
 80009e8:	f040 8224 	bne.w	8000e34 <FT_CAN_ReceiveData+0x814>
		{
			FT_Data_Struct->data_id  	  = buffer[0] << 8;
 80009ec:	7c3b      	ldrb	r3, [r7, #16]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	021b      	lsls	r3, r3, #8
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
			FT_Data_Struct->data_id 	 |= buffer[1];
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000a00:	7c7b      	ldrb	r3, [r7, #17]
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	4313      	orrs	r3, r2
 8000a06:	b29a      	uxth	r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
			FT_Data_Struct->data_content  = buffer[2] << 8;
 8000a0e:	7cbb      	ldrb	r3, [r7, #18]
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	021b      	lsls	r3, r3, #8
 8000a14:	b29a      	uxth	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
			FT_Data_Struct->data_content |= buffer[3];
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000a22:	7cfb      	ldrb	r3, [r7, #19]
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	4313      	orrs	r3, r2
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

			FT_CAN_ProcessData(FT_Data_Struct);
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f000 fa03 	bl	8000e3c <FT_CAN_ProcessData>

			if(DLC == 8)
 8000a36:	7fbb      	ldrb	r3, [r7, #30]
 8000a38:	2b08      	cmp	r3, #8
 8000a3a:	f040 81fa 	bne.w	8000e32 <FT_CAN_ReceiveData+0x812>
			{
				FT_Data_Struct->data_id  	  = buffer[4] << 8;
 8000a3e:	7d3b      	ldrb	r3, [r7, #20]
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	021b      	lsls	r3, r3, #8
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				FT_Data_Struct->data_id 	 |= buffer[5];
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000a52:	7d7b      	ldrb	r3, [r7, #21]
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	4313      	orrs	r3, r2
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				FT_Data_Struct->data_content  = buffer[6] << 8;
 8000a60:	7dbb      	ldrb	r3, [r7, #22]
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	021b      	lsls	r3, r3, #8
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
				FT_Data_Struct->data_content |= buffer[7];
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000a74:	7dfb      	ldrb	r3, [r7, #23]
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

				FT_CAN_ProcessData(FT_Data_Struct);
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f000 f9da 	bl	8000e3c <FT_CAN_ProcessData>
			}

			return;
 8000a88:	e1d3      	b.n	8000e32 <FT_CAN_ReceiveData+0x812>
		}
	}

	else if((((ExtId / 0x800) & 0x07) == 0x02))// || ((((ExtId / 0x800) & 0x07) == 0x03)))
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	0adb      	lsrs	r3, r3, #11
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	f040 81ce 	bne.w	8000e34 <FT_CAN_ReceiveData+0x814>
	{
		if(buffer[0] == 0xFF)
 8000a98:	7c3b      	ldrb	r3, [r7, #16]
 8000a9a:	2bff      	cmp	r3, #255	; 0xff
 8000a9c:	d125      	bne.n	8000aea <FT_CAN_ReceiveData+0x4ca>
		{
			FT_Data_Struct->data_id  	  = buffer[1] << 8;
 8000a9e:	7c7b      	ldrb	r3, [r7, #17]
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	021b      	lsls	r3, r3, #8
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
			FT_Data_Struct->data_id 	 |= buffer[2];
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000ab2:	7cbb      	ldrb	r3, [r7, #18]
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	b29a      	uxth	r2, r3
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
			FT_Data_Struct->data_content  = buffer[3] << 8;
 8000ac0:	7cfb      	ldrb	r3, [r7, #19]
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	021b      	lsls	r3, r3, #8
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
			FT_Data_Struct->data_content |= buffer[4];
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000ad4:	7d3b      	ldrb	r3, [r7, #20]
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
			FT_CAN_ProcessData(FT_Data_Struct);
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f000 f9aa 	bl	8000e3c <FT_CAN_ProcessData>

			return;
 8000ae8:	e1a4      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>

		//Segmented Messages
		else
		{
			//First Message
			if(buffer[0] == 0)
 8000aea:	7c3b      	ldrb	r3, [r7, #16]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d141      	bne.n	8000b74 <FT_CAN_ReceiveData+0x554>
			{
				FT_Data_Struct->data_length   = buffer[1] << 8;
 8000af0:	7c7b      	ldrb	r3, [r7, #17]
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	021b      	lsls	r3, r3, #8
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
				FT_Data_Struct->data_length  |= buffer[2];
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8000b04:	7cbb      	ldrb	r3, [r7, #18]
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

				FT_Data_Struct->data_id  	  = buffer[3] << 8;
 8000b12:	7cfb      	ldrb	r3, [r7, #19]
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	021b      	lsls	r3, r3, #8
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				FT_Data_Struct->data_id 	 |= buffer[4];
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000b26:	7d3b      	ldrb	r3, [r7, #20]
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	b29a      	uxth	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				FT_Data_Struct->data_content  = buffer[5] << 8;
 8000b34:	7d7b      	ldrb	r3, [r7, #21]
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	021b      	lsls	r3, r3, #8
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
				FT_Data_Struct->data_content |= buffer[6];
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000b48:	7dbb      	ldrb	r3, [r7, #22]
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
				FT_CAN_ProcessData(FT_Data_Struct);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f000 f970 	bl	8000e3c <FT_CAN_ProcessData>

				FT_Data_Struct->data_id = buffer[7] << 8;
 8000b5c:	7dfb      	ldrb	r3, [r7, #23]
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	021b      	lsls	r3, r3, #8
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				FT_Data_Struct->data_last_seg = 0;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

				return;
 8000b72:	e15f      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
			}
			//Messages 1, 5, etc
			else if((buffer[0] % 4) == 1)
 8000b74:	7c3b      	ldrb	r3, [r7, #16]
 8000b76:	f003 0303 	and.w	r3, r3, #3
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d153      	bne.n	8000c28 <FT_CAN_ReceiveData+0x608>
			{
				if(buffer[0] == (FT_Data_Struct->data_last_seg + 1))
 8000b80:	7c3b      	ldrb	r3, [r7, #16]
 8000b82:	461a      	mov	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d11d      	bne.n	8000bcc <FT_CAN_ReceiveData+0x5ac>
				{
					FT_Data_Struct->data_id 	 |= buffer[1];
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000b96:	7c7b      	ldrb	r3, [r7, #17]
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_content  = buffer[2] << 8;
 8000ba4:	7cbb      	ldrb	r3, [r7, #18]
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	021b      	lsls	r3, r3, #8
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_Data_Struct->data_content |= buffer[3];
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000bb8:	7cfb      	ldrb	r3, [r7, #19]
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_CAN_ProcessData(FT_Data_Struct);
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f000 f938 	bl	8000e3c <FT_CAN_ProcessData>
				}

				if(DLC == 8)
 8000bcc:	7fbb      	ldrb	r3, [r7, #30]
 8000bce:	2b08      	cmp	r3, #8
 8000bd0:	d124      	bne.n	8000c1c <FT_CAN_ReceiveData+0x5fc>
				{
					FT_Data_Struct->data_id  	  = buffer[4] << 8;
 8000bd2:	7d3b      	ldrb	r3, [r7, #20]
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	021b      	lsls	r3, r3, #8
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_id 	 |= buffer[5];
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000be6:	7d7b      	ldrb	r3, [r7, #21]
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	4313      	orrs	r3, r2
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_content  = buffer[6] << 8;
 8000bf4:	7dbb      	ldrb	r3, [r7, #22]
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	021b      	lsls	r3, r3, #8
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_Data_Struct->data_content |= buffer[7];
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000c08:	7dfb      	ldrb	r3, [r7, #23]
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_CAN_ProcessData(FT_Data_Struct);
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f000 f910 	bl	8000e3c <FT_CAN_ProcessData>
				}

				FT_Data_Struct->data_last_seg = buffer[0];
 8000c1c:	7c3b      	ldrb	r3, [r7, #16]
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

				return;
 8000c26:	e105      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
			}
			//messages 2, 6, etc
			else if((buffer[0] % 4) == 2)
 8000c28:	7c3b      	ldrb	r3, [r7, #16]
 8000c2a:	f003 0303 	and.w	r3, r3, #3
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d145      	bne.n	8000cc0 <FT_CAN_ReceiveData+0x6a0>
			{
				FT_Data_Struct->data_id  	  = buffer[1] << 8;
 8000c34:	7c7b      	ldrb	r3, [r7, #17]
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	021b      	lsls	r3, r3, #8
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				FT_Data_Struct->data_id 	 |= buffer[2];
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000c48:	7cbb      	ldrb	r3, [r7, #18]
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				FT_Data_Struct->data_content  = buffer[3] << 8;
 8000c56:	7cfb      	ldrb	r3, [r7, #19]
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	021b      	lsls	r3, r3, #8
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
				FT_Data_Struct->data_content |= buffer[4];
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000c6a:	7d3b      	ldrb	r3, [r7, #20]
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
				FT_CAN_ProcessData(FT_Data_Struct);
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f000 f8df 	bl	8000e3c <FT_CAN_ProcessData>

				if(DLC == 8)
 8000c7e:	7fbb      	ldrb	r3, [r7, #30]
 8000c80:	2b08      	cmp	r3, #8
 8000c82:	d117      	bne.n	8000cb4 <FT_CAN_ReceiveData+0x694>
				{
					FT_Data_Struct->data_id  	 = buffer[5] << 8;
 8000c84:	7d7b      	ldrb	r3, [r7, #21]
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	021b      	lsls	r3, r3, #8
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_id 	|= buffer[6];
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000c98:	7dbb      	ldrb	r3, [r7, #22]
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_content = buffer[7] << 8;
 8000ca6:	7dfb      	ldrb	r3, [r7, #23]
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	021b      	lsls	r3, r3, #8
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
				}

				FT_Data_Struct->data_last_seg = buffer[0];
 8000cb4:	7c3b      	ldrb	r3, [r7, #16]
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

				return;
 8000cbe:	e0b9      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
			}
			//Messages 3, 7, etc
			else if((buffer[0] % 4) == 3)
 8000cc0:	7c3b      	ldrb	r3, [r7, #16]
 8000cc2:	f003 0303 	and.w	r3, r3, #3
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	2b03      	cmp	r3, #3
 8000cca:	d156      	bne.n	8000d7a <FT_CAN_ReceiveData+0x75a>
			{
				if(buffer[0] == (FT_Data_Struct->data_last_seg + 1))
 8000ccc:	7c3b      	ldrb	r3, [r7, #16]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d10c      	bne.n	8000cf6 <FT_CAN_ReceiveData+0x6d6>
				{
					FT_Data_Struct->data_content |= buffer[1];
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000ce2:	7c7b      	ldrb	r3, [r7, #17]
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_CAN_ProcessData(FT_Data_Struct);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f000 f8a3 	bl	8000e3c <FT_CAN_ProcessData>
				}

				if(DLC >= 6)
 8000cf6:	7fbb      	ldrb	r3, [r7, #30]
 8000cf8:	2b05      	cmp	r3, #5
 8000cfa:	d924      	bls.n	8000d46 <FT_CAN_ReceiveData+0x726>
				{
					FT_Data_Struct->data_id  	  = buffer[2] << 8;
 8000cfc:	7cbb      	ldrb	r3, [r7, #18]
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	021b      	lsls	r3, r3, #8
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_id 	 |= buffer[3];
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000d10:	7cfb      	ldrb	r3, [r7, #19]
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	4313      	orrs	r3, r2
 8000d16:	b29a      	uxth	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_content  = buffer[4] << 8;
 8000d1e:	7d3b      	ldrb	r3, [r7, #20]
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	021b      	lsls	r3, r3, #8
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_Data_Struct->data_content |= buffer[5];
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000d32:	7d7b      	ldrb	r3, [r7, #21]
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	4313      	orrs	r3, r2
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_CAN_ProcessData(FT_Data_Struct);
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f000 f87b 	bl	8000e3c <FT_CAN_ProcessData>
				}

				if(DLC == 8)
 8000d46:	7fbb      	ldrb	r3, [r7, #30]
 8000d48:	2b08      	cmp	r3, #8
 8000d4a:	d110      	bne.n	8000d6e <FT_CAN_ReceiveData+0x74e>
				{
					FT_Data_Struct->data_id  = buffer[6] << 8;
 8000d4c:	7dbb      	ldrb	r3, [r7, #22]
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	021b      	lsls	r3, r3, #8
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_id |= buffer[7];
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000d60:	7dfb      	ldrb	r3, [r7, #23]
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	4313      	orrs	r3, r2
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				}

				FT_Data_Struct->data_last_seg = buffer[0];
 8000d6e:	7c3b      	ldrb	r3, [r7, #16]
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

				return;
 8000d78:	e05c      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
			}
			//Messages 4, 8, etc
			else if((buffer[0] % 4) == 0)
 8000d7a:	7c3b      	ldrb	r3, [r7, #16]
 8000d7c:	f003 0303 	and.w	r3, r3, #3
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d156      	bne.n	8000e34 <FT_CAN_ReceiveData+0x814>
			{
				if(buffer[0] == (FT_Data_Struct->data_last_seg + 1))
 8000d86:	7c3b      	ldrb	r3, [r7, #16]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000d90:	3301      	adds	r3, #1
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d113      	bne.n	8000dbe <FT_CAN_ReceiveData+0x79e>
				{
					FT_Data_Struct->data_content  = buffer[1] << 8;
 8000d96:	7c7b      	ldrb	r3, [r7, #17]
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	021b      	lsls	r3, r3, #8
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_Data_Struct->data_content |= buffer[2];
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000daa:	7cbb      	ldrb	r3, [r7, #18]
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	4313      	orrs	r3, r2
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_CAN_ProcessData(FT_Data_Struct);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f000 f83f 	bl	8000e3c <FT_CAN_ProcessData>
				}

				if(DLC >= 7)
 8000dbe:	7fbb      	ldrb	r3, [r7, #30]
 8000dc0:	2b06      	cmp	r3, #6
 8000dc2:	d924      	bls.n	8000e0e <FT_CAN_ReceiveData+0x7ee>
				{
					FT_Data_Struct->data_id  	  = buffer[3] << 8;
 8000dc4:	7cfb      	ldrb	r3, [r7, #19]
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	021b      	lsls	r3, r3, #8
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_id 	 |= buffer[4];
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000dd8:	7d3b      	ldrb	r3, [r7, #20]
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_content  = buffer[5] << 8;
 8000de6:	7d7b      	ldrb	r3, [r7, #21]
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	021b      	lsls	r3, r3, #8
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_Data_Struct->data_content |= buffer[6];
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000dfa:	7dbb      	ldrb	r3, [r7, #22]
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_CAN_ProcessData(FT_Data_Struct);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f000 f817 	bl	8000e3c <FT_CAN_ProcessData>
				}

				if(DLC == 8)
 8000e0e:	7fbb      	ldrb	r3, [r7, #30]
 8000e10:	2b08      	cmp	r3, #8
 8000e12:	d106      	bne.n	8000e22 <FT_CAN_ReceiveData+0x802>
					FT_Data_Struct->data_id	= buffer[7] << 8;
 8000e14:	7dfb      	ldrb	r3, [r7, #23]
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

				FT_Data_Struct->data_last_seg = buffer[0];
 8000e22:	7c3b      	ldrb	r3, [r7, #16]
 8000e24:	b29a      	uxth	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

				return;
 8000e2c:	e002      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
		return;
 8000e2e:	bf00      	nop
 8000e30:	e000      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
			return;
 8000e32:	bf00      	nop
			}
		}
#endif
	}
}
 8000e34:	3720      	adds	r7, #32
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <FT_CAN_ProcessData>:

#ifndef FT_CAN_FIXED

static void FT_CAN_ProcessData(FT_Data* FT_Data_Struct)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	uint16_t id = FT_Data_Struct->data_id;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8000e4a:	81fb      	strh	r3, [r7, #14]
	uint16_t data = FT_Data_Struct->data_content;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8000e52:	81bb      	strh	r3, [r7, #12]

	if((id & 0x1) == 0x1)
 8000e54:	89fb      	ldrh	r3, [r7, #14]
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f040 825a 	bne.w	8001314 <FT_CAN_ProcessData+0x4d8>
		return;


	switch(id >> 1)
 8000e60:	89fb      	ldrh	r3, [r7, #14]
 8000e62:	085b      	lsrs	r3, r3, #1
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	2b8d      	cmp	r3, #141	; 0x8d
 8000e68:	f300 8166 	bgt.w	8001138 <FT_CAN_ProcessData+0x2fc>
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	dc41      	bgt.n	8000ef4 <FT_CAN_ProcessData+0xb8>
 8000e70:	e249      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
 8000e72:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000e76:	2b1b      	cmp	r3, #27
 8000e78:	f200 8245 	bhi.w	8001306 <FT_CAN_ProcessData+0x4ca>
 8000e7c:	a201      	add	r2, pc, #4	; (adr r2, 8000e84 <FT_CAN_ProcessData+0x48>)
 8000e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e82:	bf00      	nop
 8000e84:	080012d5 	.word	0x080012d5
 8000e88:	08001307 	.word	0x08001307
 8000e8c:	08001307 	.word	0x08001307
 8000e90:	08001307 	.word	0x08001307
 8000e94:	08001307 	.word	0x08001307
 8000e98:	08001307 	.word	0x08001307
 8000e9c:	08001307 	.word	0x08001307
 8000ea0:	08001307 	.word	0x08001307
 8000ea4:	08001307 	.word	0x08001307
 8000ea8:	08001307 	.word	0x08001307
 8000eac:	08001307 	.word	0x08001307
 8000eb0:	08001307 	.word	0x08001307
 8000eb4:	08001307 	.word	0x08001307
 8000eb8:	08001307 	.word	0x08001307
 8000ebc:	08001307 	.word	0x08001307
 8000ec0:	08001307 	.word	0x08001307
 8000ec4:	08001307 	.word	0x08001307
 8000ec8:	08001307 	.word	0x08001307
 8000ecc:	080012df 	.word	0x080012df
 8000ed0:	08001307 	.word	0x08001307
 8000ed4:	08001307 	.word	0x08001307
 8000ed8:	08001307 	.word	0x08001307
 8000edc:	08001307 	.word	0x08001307
 8000ee0:	08001307 	.word	0x08001307
 8000ee4:	080011d3 	.word	0x080011d3
 8000ee8:	080012e9 	.word	0x080012e9
 8000eec:	080012f3 	.word	0x080012f3
 8000ef0:	080012fd 	.word	0x080012fd
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	2b8c      	cmp	r3, #140	; 0x8c
 8000ef8:	f200 8205 	bhi.w	8001306 <FT_CAN_ProcessData+0x4ca>
 8000efc:	a201      	add	r2, pc, #4	; (adr r2, 8000f04 <FT_CAN_ProcessData+0xc8>)
 8000efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f02:	bf00      	nop
 8000f04:	0800114b 	.word	0x0800114b
 8000f08:	08001157 	.word	0x08001157
 8000f0c:	08001163 	.word	0x08001163
 8000f10:	0800116d 	.word	0x0800116d
 8000f14:	08001177 	.word	0x08001177
 8000f18:	08001183 	.word	0x08001183
 8000f1c:	0800118d 	.word	0x0800118d
 8000f20:	0800120f 	.word	0x0800120f
 8000f24:	08001219 	.word	0x08001219
 8000f28:	08001223 	.word	0x08001223
 8000f2c:	0800122d 	.word	0x0800122d
 8000f30:	08001237 	.word	0x08001237
 8000f34:	08001243 	.word	0x08001243
 8000f38:	0800124f 	.word	0x0800124f
 8000f3c:	0800125b 	.word	0x0800125b
 8000f40:	08001267 	.word	0x08001267
 8000f44:	08001197 	.word	0x08001197
 8000f48:	08001307 	.word	0x08001307
 8000f4c:	08001307 	.word	0x08001307
 8000f50:	08001307 	.word	0x08001307
 8000f54:	08001307 	.word	0x08001307
 8000f58:	08001307 	.word	0x08001307
 8000f5c:	08001307 	.word	0x08001307
 8000f60:	08001307 	.word	0x08001307
 8000f64:	08001307 	.word	0x08001307
 8000f68:	08001307 	.word	0x08001307
 8000f6c:	08001307 	.word	0x08001307
 8000f70:	08001307 	.word	0x08001307
 8000f74:	08001307 	.word	0x08001307
 8000f78:	08001307 	.word	0x08001307
 8000f7c:	08001307 	.word	0x08001307
 8000f80:	08001307 	.word	0x08001307
 8000f84:	08001307 	.word	0x08001307
 8000f88:	08001307 	.word	0x08001307
 8000f8c:	08001307 	.word	0x08001307
 8000f90:	08001307 	.word	0x08001307
 8000f94:	08001307 	.word	0x08001307
 8000f98:	08001307 	.word	0x08001307
 8000f9c:	080011a3 	.word	0x080011a3
 8000fa0:	08001307 	.word	0x08001307
 8000fa4:	08001307 	.word	0x08001307
 8000fa8:	08001307 	.word	0x08001307
 8000fac:	08001307 	.word	0x08001307
 8000fb0:	08001307 	.word	0x08001307
 8000fb4:	08001307 	.word	0x08001307
 8000fb8:	08001307 	.word	0x08001307
 8000fbc:	08001307 	.word	0x08001307
 8000fc0:	08001307 	.word	0x08001307
 8000fc4:	08001307 	.word	0x08001307
 8000fc8:	08001307 	.word	0x08001307
 8000fcc:	08001307 	.word	0x08001307
 8000fd0:	08001307 	.word	0x08001307
 8000fd4:	08001307 	.word	0x08001307
 8000fd8:	08001307 	.word	0x08001307
 8000fdc:	08001307 	.word	0x08001307
 8000fe0:	08001307 	.word	0x08001307
 8000fe4:	08001307 	.word	0x08001307
 8000fe8:	08001307 	.word	0x08001307
 8000fec:	08001307 	.word	0x08001307
 8000ff0:	08001307 	.word	0x08001307
 8000ff4:	08001307 	.word	0x08001307
 8000ff8:	08001307 	.word	0x08001307
 8000ffc:	08001307 	.word	0x08001307
 8001000:	08001307 	.word	0x08001307
 8001004:	08001307 	.word	0x08001307
 8001008:	080011af 	.word	0x080011af
 800100c:	080011dd 	.word	0x080011dd
 8001010:	080011e7 	.word	0x080011e7
 8001014:	080011f1 	.word	0x080011f1
 8001018:	080011fb 	.word	0x080011fb
 800101c:	08001205 	.word	0x08001205
 8001020:	08001271 	.word	0x08001271
 8001024:	0800127b 	.word	0x0800127b
 8001028:	08001285 	.word	0x08001285
 800102c:	0800128f 	.word	0x0800128f
 8001030:	08001299 	.word	0x08001299
 8001034:	080012a3 	.word	0x080012a3
 8001038:	080012ad 	.word	0x080012ad
 800103c:	080012b7 	.word	0x080012b7
 8001040:	080012c1 	.word	0x080012c1
 8001044:	080012cb 	.word	0x080012cb
 8001048:	08001307 	.word	0x08001307
 800104c:	08001307 	.word	0x08001307
 8001050:	08001307 	.word	0x08001307
 8001054:	08001307 	.word	0x08001307
 8001058:	08001307 	.word	0x08001307
 800105c:	08001307 	.word	0x08001307
 8001060:	08001307 	.word	0x08001307
 8001064:	08001307 	.word	0x08001307
 8001068:	08001307 	.word	0x08001307
 800106c:	08001307 	.word	0x08001307
 8001070:	08001307 	.word	0x08001307
 8001074:	08001307 	.word	0x08001307
 8001078:	08001307 	.word	0x08001307
 800107c:	08001307 	.word	0x08001307
 8001080:	08001307 	.word	0x08001307
 8001084:	08001307 	.word	0x08001307
 8001088:	08001307 	.word	0x08001307
 800108c:	08001307 	.word	0x08001307
 8001090:	08001307 	.word	0x08001307
 8001094:	08001307 	.word	0x08001307
 8001098:	08001307 	.word	0x08001307
 800109c:	08001307 	.word	0x08001307
 80010a0:	08001307 	.word	0x08001307
 80010a4:	08001307 	.word	0x08001307
 80010a8:	08001307 	.word	0x08001307
 80010ac:	08001307 	.word	0x08001307
 80010b0:	08001307 	.word	0x08001307
 80010b4:	08001307 	.word	0x08001307
 80010b8:	08001307 	.word	0x08001307
 80010bc:	08001307 	.word	0x08001307
 80010c0:	08001307 	.word	0x08001307
 80010c4:	08001307 	.word	0x08001307
 80010c8:	08001307 	.word	0x08001307
 80010cc:	08001307 	.word	0x08001307
 80010d0:	08001307 	.word	0x08001307
 80010d4:	08001307 	.word	0x08001307
 80010d8:	08001307 	.word	0x08001307
 80010dc:	08001307 	.word	0x08001307
 80010e0:	08001307 	.word	0x08001307
 80010e4:	08001307 	.word	0x08001307
 80010e8:	08001307 	.word	0x08001307
 80010ec:	08001307 	.word	0x08001307
 80010f0:	08001307 	.word	0x08001307
 80010f4:	08001307 	.word	0x08001307
 80010f8:	08001307 	.word	0x08001307
 80010fc:	08001307 	.word	0x08001307
 8001100:	08001307 	.word	0x08001307
 8001104:	08001307 	.word	0x08001307
 8001108:	08001307 	.word	0x08001307
 800110c:	08001307 	.word	0x08001307
 8001110:	08001307 	.word	0x08001307
 8001114:	08001307 	.word	0x08001307
 8001118:	08001307 	.word	0x08001307
 800111c:	08001307 	.word	0x08001307
 8001120:	08001307 	.word	0x08001307
 8001124:	08001307 	.word	0x08001307
 8001128:	08001307 	.word	0x08001307
 800112c:	08001307 	.word	0x08001307
 8001130:	080011bb 	.word	0x080011bb
 8001134:	080011c7 	.word	0x080011c7
 8001138:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800113c:	f280 80e3 	bge.w	8001306 <FT_CAN_ProcessData+0x4ca>
 8001140:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8001144:	f6bf ae95 	bge.w	8000e72 <FT_CAN_ProcessData+0x36>
 8001148:	e0dd      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
	{
		case 0x0001: //TPS
			FT_Data_Struct->tps = data;
 800114a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			break;
 8001154:	e0d7      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0002: //MAP
			FT_Data_Struct->map = data;
 8001156:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			break;
 8001160:	e0d1      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0003: //IAT
			FT_Data_Struct->iat = data;
 8001162:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	875a      	strh	r2, [r3, #58]	; 0x3a
			break;
 800116a:	e0cc      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0004: //ECT
			FT_Data_Struct->ect = data;
 800116c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	86da      	strh	r2, [r3, #54]	; 0x36
			break;
 8001174:	e0c7      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0005: //Oil Pressure
			FT_Data_Struct->oil_pressure = data;
 8001176:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			break;
 8001180:	e0c1      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0006: //Fuel Pressure
			FT_Data_Struct->fuel_pressure = data;
 8001182:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	879a      	strh	r2, [r3, #60]	; 0x3c
			break;
 800118a:	e0bc      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0007: //Coolant Pressure
			FT_Data_Struct->coolant_pressure = data;
 800118c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	871a      	strh	r2, [r3, #56]	; 0x38
			break;
 8001194:	e0b7      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0011: //Gear
			FT_Data_Struct->gear = data;
 8001196:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			break;
 80011a0:	e0b1      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0027: //Exhaust Lambda
			FT_Data_Struct->lambda = data;
 80011a2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			break;
 80011ac:	e0ab      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0042: //RPM
			FT_Data_Struct->rpm = data;
 80011ae:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
			break;
 80011b8:	e0a5      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x008C: //Oil Temperature
			FT_Data_Struct->oil_temperature = data;
 80011ba:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			break;
 80011c4:	e09f      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x008D: //Pit Limit Switch
			FT_Data_Struct->pit_limiter = data;
 80011c6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			break;
 80011d0:	e099      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0150: //Total Fuel Flow
			FT_Data_Struct->fuel_flow_total = data;
 80011d2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	87da      	strh	r2, [r3, #62]	; 0x3e
			break;
 80011da:	e094      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
			break;
#endif

#ifdef FT_CAN_TIMING
		case 0x0043: //Injection Bank A Timing
			FT_Data_Struct->injection_bank_a_time = data;
 80011dc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	805a      	strh	r2, [r3, #2]
			break;
 80011e4:	e08f      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0044: //Injection Bank B Timing
			FT_Data_Struct->injection_bank_b_time = data;
 80011e6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	809a      	strh	r2, [r3, #4]
			break;
 80011ee:	e08a      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0045: //Injection Bank A Duty Cycle
			FT_Data_Struct->injection_bank_a_duty_cycle = data;
 80011f0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	80da      	strh	r2, [r3, #6]
			break;
 80011f8:	e085      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0046: //Injection Bank B Duty Cycle
			FT_Data_Struct->injection_bank_b_duty_cycle = data;
 80011fa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	811a      	strh	r2, [r3, #8]
			break;
 8001202:	e080      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0047: //Ignition Advance
			FT_Data_Struct->ignition_advance = data;
 8001204:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	801a      	strh	r2, [r3, #0]
			break;
 800120c:	e07b      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
			break;
#endif

#ifdef FT_CAN_EXTRA
		case 0x0008: //Launch Mode
			FT_Data_Struct->launch_mode = data;
 800120e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	841a      	strh	r2, [r3, #32]
			break;
 8001216:	e076      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0009: //Battery Voltage
			FT_Data_Struct->battery_voltage = data;
 8001218:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	819a      	strh	r2, [r3, #12]
			break;
 8001220:	e071      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x000A: //Traction Speed
			FT_Data_Struct->traction_speed = data;
 8001222:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
 800122a:	e06c      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x000B: //Drag Speed
			FT_Data_Struct->drag_speed = data;
 800122c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	851a      	strh	r2, [r3, #40]	; 0x28
			break;
 8001234:	e067      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x000C: //Wheel Speed FL
			FT_Data_Struct->wheel_speed_fl = data;
 8001236:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
			break;
 8001240:	e061      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x000D: //Wheel Speed FR
			FT_Data_Struct->wheel_speed_fr = data;
 8001242:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			break;
 800124c:	e05b      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x000E: //Wheel Speed RL
			FT_Data_Struct->wheel_speed_rl = data;
 800124e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
			break;
 8001258:	e055      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x000F: //Wheel Speed RR
			FT_Data_Struct->wheel_speed_rr = data;
 800125a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			break;
 8001264:	e04f      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0010: //Driveshaft RPM
			FT_Data_Struct->driveshaft_rpm = data;
 8001266:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	831a      	strh	r2, [r3, #24]
			break;
 800126e:	e04a      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0048: //2-Step
			FT_Data_Struct->two_step_signal = data;
 8001270:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	849a      	strh	r2, [r3, #36]	; 0x24
			break;
 8001278:	e045      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0049: //3-Step
			FT_Data_Struct->three_step_signal = data;
 800127a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	84da      	strh	r2, [r3, #38]	; 0x26
			break;
 8001282:	e040      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x004A: //Burnout
			FT_Data_Struct->burnout_signal = data;
 8001284:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	845a      	strh	r2, [r3, #34]	; 0x22
			break;
 800128c:	e03b      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x004B: //Fuel Cut
			FT_Data_Struct->fuel_cut = data;
 800128e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	82da      	strh	r2, [r3, #22]
			break;
 8001296:	e036      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x004C: //Air Conditioning
			FT_Data_Struct->air_conditioning = data;
 8001298:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	815a      	strh	r2, [r3, #10]
			break;
 80012a0:	e031      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x004D: //ElectroFAN
			FT_Data_Struct->electro_fan = data;
 80012a2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	825a      	strh	r2, [r3, #18]
			break;
 80012aa:	e02c      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x004E: //Gear Cut
			FT_Data_Struct->gear_cut = data;
 80012ac:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	835a      	strh	r2, [r3, #26]
			break;
 80012b4:	e027      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x004F: //Gear Retard
			FT_Data_Struct->gear_retard = data;
 80012b6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	839a      	strh	r2, [r3, #28]
			break;
 80012be:	e022      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0050: //Gear Sensor Voltage
			FT_Data_Struct->gear_sensor_voltage = data;
 80012c0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	83da      	strh	r2, [r3, #30]
			break;
 80012c8:	e01d      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0051: //Lambda Meter (Average)
			FT_Data_Struct->lambda_average = data;
 80012ca:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	829a      	strh	r2, [r3, #20]
			break;
 80012d2:	e018      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0138: //Battery Temperature
			FT_Data_Struct->battery_temperature = data;
 80012d4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	81da      	strh	r2, [r3, #14]
			break;
 80012dc:	e013      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x014A: //Self Dial Time
			FT_Data_Struct->self_dial = data;
 80012de:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	861a      	strh	r2, [r3, #48]	; 0x30
			break;
 80012e6:	e00e      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0151: //Brake Pressure
			FT_Data_Struct->brake_pressure = data;
 80012e8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	821a      	strh	r2, [r3, #16]
			break;
 80012f0:	e009      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0152: //Generic Outputs State
			FT_Data_Struct->generic_outputs_state = data;
 80012f2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	85da      	strh	r2, [r3, #46]	; 0x2e
			break;
 80012fa:	e004      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0153: //Day/Night State
			FT_Data_Struct->day_night_state = data;
 80012fc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	859a      	strh	r2, [r3, #44]	; 0x2c
			break;
 8001304:	bf00      	nop
	}
#endif

	FT_CAN_ProcessCustomData(id, data);
 8001306:	89ba      	ldrh	r2, [r7, #12]
 8001308:	89fb      	ldrh	r3, [r7, #14]
 800130a:	4611      	mov	r1, r2
 800130c:	4618      	mov	r0, r3
 800130e:	f000 f805 	bl	800131c <FT_CAN_ProcessCustomData>

	return;
 8001312:	e000      	b.n	8001316 <FT_CAN_ProcessData+0x4da>
		return;
 8001314:	bf00      	nop
}
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <FT_CAN_ProcessCustomData>:

__weak void FT_CAN_ProcessCustomData(uint16_t id, uint16_t data)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	460a      	mov	r2, r1
 8001326:	80fb      	strh	r3, [r7, #6]
 8001328:	4613      	mov	r3, r2
 800132a:	80bb      	strh	r3, [r7, #4]
	UNUSED(id);
	UNUSED(data);
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800133c:	f005 fd98 	bl	8006e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001340:	f000 f8e6 	bl	8001510 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001344:	f000 f95c 	bl	8001600 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001348:	f000 fbd4 	bl	8001af4 <MX_GPIO_Init>
  MX_DMA_Init();
 800134c:	f000 fb9a 	bl	8001a84 <MX_DMA_Init>
//  MX_IWDG_Init();
  MX_SDIO_SD_Init();
 8001350:	f000 fb42 	bl	80019d8 <MX_SDIO_SD_Init>
  MX_ADC1_Init();
 8001354:	f000 f97c 	bl	8001650 <MX_ADC1_Init>
  MX_RTC_Init();
 8001358:	f000 fb0e 	bl	8001978 <MX_RTC_Init>
  MX_FATFS_Init();
 800135c:	f010 fa0c 	bl	8011778 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001360:	f016 fe82 	bl	8018068 <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 8001364:	f000 fa0c 	bl	8001780 <MX_ADC2_Init>
  MX_CAN1_Init();
 8001368:	f000 faa2 	bl	80018b0 <MX_CAN1_Init>
  MX_I2C1_Init();
 800136c:	f000 fad6 	bl	800191c <MX_I2C1_Init>
  MX_TIM7_Init();
 8001370:	f000 fb52 	bl	8001a18 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  Principal_Init(&hcan1, &hi2c1, &htim7);
 8001374:	4a5b      	ldr	r2, [pc, #364]	; (80014e4 <main+0x1ac>)
 8001376:	495c      	ldr	r1, [pc, #368]	; (80014e8 <main+0x1b0>)
 8001378:	485c      	ldr	r0, [pc, #368]	; (80014ec <main+0x1b4>)
 800137a:	f002 fb55 	bl	8003a28 <Principal_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Checks card detect pin level change for datalogger initialization or deinitialization
	  Principal_Card_Detection(&fatfsStruct, &dirStruct, &fileStruct);
 800137e:	4a5c      	ldr	r2, [pc, #368]	; (80014f0 <main+0x1b8>)
 8001380:	495c      	ldr	r1, [pc, #368]	; (80014f4 <main+0x1bc>)
 8001382:	485d      	ldr	r0, [pc, #372]	; (80014f8 <main+0x1c0>)
 8001384:	f004 ff98 	bl	80062b8 <Principal_Card_Detection>

	  //Checks if data is being saved and starts saving if conditions are met
	  if((flagDatalogger == DL_NO_SAVE) || (flagDatalogger == DL_BUT_PRESS))
 8001388:	4b5c      	ldr	r3, [pc, #368]	; (80014fc <main+0x1c4>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <main+0x60>
 8001390:	4b5a      	ldr	r3, [pc, #360]	; (80014fc <main+0x1c4>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b03      	cmp	r3, #3
 8001396:	d105      	bne.n	80013a4 <main+0x6c>
		  Principal_Datalogger_Start(dirString, logString, &dirStruct, &fileStruct);
 8001398:	4b55      	ldr	r3, [pc, #340]	; (80014f0 <main+0x1b8>)
 800139a:	4a56      	ldr	r2, [pc, #344]	; (80014f4 <main+0x1bc>)
 800139c:	4958      	ldr	r1, [pc, #352]	; (8001500 <main+0x1c8>)
 800139e:	4859      	ldr	r0, [pc, #356]	; (8001504 <main+0x1cc>)
 80013a0:	f004 fd6e 	bl	8005e80 <Principal_Datalogger_Start>

	  //Analog inputs 1-4 CAN message
	  if((accMsg[ANALOG_1_4] >= perMsg[ANALOG_1_4]) && (perMsg[ANALOG_1_4] != MSG_DISABLED))
 80013a4:	4b58      	ldr	r3, [pc, #352]	; (8001508 <main+0x1d0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a58      	ldr	r2, [pc, #352]	; (800150c <main+0x1d4>)
 80013aa:	8812      	ldrh	r2, [r2, #0]
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d30e      	bcc.n	80013ce <main+0x96>
 80013b0:	4b56      	ldr	r3, [pc, #344]	; (800150c <main+0x1d4>)
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d00a      	beq.n	80013ce <main+0x96>
	  {
		  accMsg[ANALOG_1_4] -= perMsg[ANALOG_1_4];
 80013b8:	4b53      	ldr	r3, [pc, #332]	; (8001508 <main+0x1d0>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a53      	ldr	r2, [pc, #332]	; (800150c <main+0x1d4>)
 80013be:	8812      	ldrh	r2, [r2, #0]
 80013c0:	1a9b      	subs	r3, r3, r2
 80013c2:	4a51      	ldr	r2, [pc, #324]	; (8001508 <main+0x1d0>)
 80013c4:	6013      	str	r3, [r2, #0]
		  Principal_Transmit_Msg(&hcan1, ANALOG_1_4);
 80013c6:	2100      	movs	r1, #0
 80013c8:	4848      	ldr	r0, [pc, #288]	; (80014ec <main+0x1b4>)
 80013ca:	f000 ffc5 	bl	8002358 <Principal_Transmit_Msg>
	  }

	  //Analog inputs 5-8 CAN message
	  if((accMsg[ANALOG_5_8] >= perMsg[ANALOG_5_8]) && (perMsg[ANALOG_5_8] != MSG_DISABLED))
 80013ce:	4b4e      	ldr	r3, [pc, #312]	; (8001508 <main+0x1d0>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	4a4e      	ldr	r2, [pc, #312]	; (800150c <main+0x1d4>)
 80013d4:	8852      	ldrh	r2, [r2, #2]
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d30e      	bcc.n	80013f8 <main+0xc0>
 80013da:	4b4c      	ldr	r3, [pc, #304]	; (800150c <main+0x1d4>)
 80013dc:	885b      	ldrh	r3, [r3, #2]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00a      	beq.n	80013f8 <main+0xc0>
	  {
		  accMsg[ANALOG_5_8] -= perMsg[ANALOG_5_8];
 80013e2:	4b49      	ldr	r3, [pc, #292]	; (8001508 <main+0x1d0>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	4a49      	ldr	r2, [pc, #292]	; (800150c <main+0x1d4>)
 80013e8:	8852      	ldrh	r2, [r2, #2]
 80013ea:	1a9b      	subs	r3, r3, r2
 80013ec:	4a46      	ldr	r2, [pc, #280]	; (8001508 <main+0x1d0>)
 80013ee:	6053      	str	r3, [r2, #4]
		  Principal_Transmit_Msg(&hcan1, ANALOG_5_8);
 80013f0:	2101      	movs	r1, #1
 80013f2:	483e      	ldr	r0, [pc, #248]	; (80014ec <main+0x1b4>)
 80013f4:	f000 ffb0 	bl	8002358 <Principal_Transmit_Msg>
	  }

	  //Analog inputs 9-12 CAN message
	  if((accMsg[ANALOG_9_12] >= perMsg[ANALOG_9_12]) && (perMsg[ANALOG_9_12] != MSG_DISABLED))
 80013f8:	4b43      	ldr	r3, [pc, #268]	; (8001508 <main+0x1d0>)
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	4a43      	ldr	r2, [pc, #268]	; (800150c <main+0x1d4>)
 80013fe:	8892      	ldrh	r2, [r2, #4]
 8001400:	4293      	cmp	r3, r2
 8001402:	d30e      	bcc.n	8001422 <main+0xea>
 8001404:	4b41      	ldr	r3, [pc, #260]	; (800150c <main+0x1d4>)
 8001406:	889b      	ldrh	r3, [r3, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d00a      	beq.n	8001422 <main+0xea>
	  {
		  accMsg[ANALOG_9_12] -= perMsg[ANALOG_9_12];
 800140c:	4b3e      	ldr	r3, [pc, #248]	; (8001508 <main+0x1d0>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	4a3e      	ldr	r2, [pc, #248]	; (800150c <main+0x1d4>)
 8001412:	8892      	ldrh	r2, [r2, #4]
 8001414:	1a9b      	subs	r3, r3, r2
 8001416:	4a3c      	ldr	r2, [pc, #240]	; (8001508 <main+0x1d0>)
 8001418:	6093      	str	r3, [r2, #8]
		  Principal_Transmit_Msg(&hcan1, ANALOG_9_12);
 800141a:	2102      	movs	r1, #2
 800141c:	4833      	ldr	r0, [pc, #204]	; (80014ec <main+0x1b4>)
 800141e:	f000 ff9b 	bl	8002358 <Principal_Transmit_Msg>
	  }

	  //RTC, both date and time
	  if((accMsg[RTC_MSG] >= perMsg[RTC_MSG]) && (perMsg[RTC_MSG] != MSG_DISABLED))
 8001422:	4b39      	ldr	r3, [pc, #228]	; (8001508 <main+0x1d0>)
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	4a39      	ldr	r2, [pc, #228]	; (800150c <main+0x1d4>)
 8001428:	88d2      	ldrh	r2, [r2, #6]
 800142a:	4293      	cmp	r3, r2
 800142c:	d30e      	bcc.n	800144c <main+0x114>
 800142e:	4b37      	ldr	r3, [pc, #220]	; (800150c <main+0x1d4>)
 8001430:	88db      	ldrh	r3, [r3, #6]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d00a      	beq.n	800144c <main+0x114>
	  {
		  accMsg[RTC_MSG] -= perMsg[RTC_MSG];
 8001436:	4b34      	ldr	r3, [pc, #208]	; (8001508 <main+0x1d0>)
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	4a34      	ldr	r2, [pc, #208]	; (800150c <main+0x1d4>)
 800143c:	88d2      	ldrh	r2, [r2, #6]
 800143e:	1a9b      	subs	r3, r3, r2
 8001440:	4a31      	ldr	r2, [pc, #196]	; (8001508 <main+0x1d0>)
 8001442:	60d3      	str	r3, [r2, #12]
		  Principal_Transmit_Msg(&hcan1, RTC_MSG);
 8001444:	2103      	movs	r1, #3
 8001446:	4829      	ldr	r0, [pc, #164]	; (80014ec <main+0x1b4>)
 8001448:	f000 ff86 	bl	8002358 <Principal_Transmit_Msg>
	  }

	  //Inputs and datalogger verify CAN message
	  if((accMsg[VERIFY_MSG] >= perMsg[VERIFY_MSG]) && (perMsg[VERIFY_MSG] != MSG_DISABLED))
 800144c:	4b2e      	ldr	r3, [pc, #184]	; (8001508 <main+0x1d0>)
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	4a2e      	ldr	r2, [pc, #184]	; (800150c <main+0x1d4>)
 8001452:	8912      	ldrh	r2, [r2, #8]
 8001454:	4293      	cmp	r3, r2
 8001456:	d30e      	bcc.n	8001476 <main+0x13e>
 8001458:	4b2c      	ldr	r3, [pc, #176]	; (800150c <main+0x1d4>)
 800145a:	891b      	ldrh	r3, [r3, #8]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00a      	beq.n	8001476 <main+0x13e>
	  {
		  accMsg[VERIFY_MSG] -= perMsg[VERIFY_MSG];
 8001460:	4b29      	ldr	r3, [pc, #164]	; (8001508 <main+0x1d0>)
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	4a29      	ldr	r2, [pc, #164]	; (800150c <main+0x1d4>)
 8001466:	8912      	ldrh	r2, [r2, #8]
 8001468:	1a9b      	subs	r3, r3, r2
 800146a:	4a27      	ldr	r2, [pc, #156]	; (8001508 <main+0x1d0>)
 800146c:	6113      	str	r3, [r2, #16]
		  Principal_Transmit_Msg(&hcan1, VERIFY_MSG);
 800146e:	2104      	movs	r1, #4
 8001470:	481e      	ldr	r0, [pc, #120]	; (80014ec <main+0x1b4>)
 8001472:	f000 ff71 	bl	8002358 <Principal_Transmit_Msg>
	  }

	  //ECU saved data (no transmission)
	  if((accMsg[ECU_SAVE] >= perMsg[ECU_SAVE]) && (perMsg[ECU_SAVE] != MSG_DISABLED))
 8001476:	4b24      	ldr	r3, [pc, #144]	; (8001508 <main+0x1d0>)
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	4a24      	ldr	r2, [pc, #144]	; (800150c <main+0x1d4>)
 800147c:	8992      	ldrh	r2, [r2, #12]
 800147e:	4293      	cmp	r3, r2
 8001480:	d30e      	bcc.n	80014a0 <main+0x168>
 8001482:	4b22      	ldr	r3, [pc, #136]	; (800150c <main+0x1d4>)
 8001484:	899b      	ldrh	r3, [r3, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00a      	beq.n	80014a0 <main+0x168>
	  {
		  accMsg[ECU_SAVE] -= perMsg[ECU_SAVE];
 800148a:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <main+0x1d0>)
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	4a1f      	ldr	r2, [pc, #124]	; (800150c <main+0x1d4>)
 8001490:	8992      	ldrh	r2, [r2, #12]
 8001492:	1a9b      	subs	r3, r3, r2
 8001494:	4a1c      	ldr	r2, [pc, #112]	; (8001508 <main+0x1d0>)
 8001496:	6193      	str	r3, [r2, #24]
		  Principal_Transmit_Msg(&hcan1, ECU_SAVE);
 8001498:	2106      	movs	r1, #6
 800149a:	4814      	ldr	r0, [pc, #80]	; (80014ec <main+0x1b4>)
 800149c:	f000 ff5c 	bl	8002358 <Principal_Transmit_Msg>
	  }

	  //PDM saved data (no transmission)
	  if((accMsg[PDM_SAVE] >= perMsg[PDM_SAVE]) && (perMsg[PDM_SAVE] != MSG_DISABLED))
 80014a0:	4b19      	ldr	r3, [pc, #100]	; (8001508 <main+0x1d0>)
 80014a2:	69db      	ldr	r3, [r3, #28]
 80014a4:	4a19      	ldr	r2, [pc, #100]	; (800150c <main+0x1d4>)
 80014a6:	89d2      	ldrh	r2, [r2, #14]
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d30e      	bcc.n	80014ca <main+0x192>
 80014ac:	4b17      	ldr	r3, [pc, #92]	; (800150c <main+0x1d4>)
 80014ae:	89db      	ldrh	r3, [r3, #14]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d00a      	beq.n	80014ca <main+0x192>
	  {
		  accMsg[PDM_SAVE] -= perMsg[PDM_SAVE];
 80014b4:	4b14      	ldr	r3, [pc, #80]	; (8001508 <main+0x1d0>)
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	4a14      	ldr	r2, [pc, #80]	; (800150c <main+0x1d4>)
 80014ba:	89d2      	ldrh	r2, [r2, #14]
 80014bc:	1a9b      	subs	r3, r3, r2
 80014be:	4a12      	ldr	r2, [pc, #72]	; (8001508 <main+0x1d0>)
 80014c0:	61d3      	str	r3, [r2, #28]
		  Principal_Transmit_Msg(&hcan1, PDM_SAVE);
 80014c2:	2107      	movs	r1, #7
 80014c4:	4809      	ldr	r0, [pc, #36]	; (80014ec <main+0x1b4>)
 80014c6:	f000 ff47 	bl	8002358 <Principal_Transmit_Msg>
	  }

	  if(accMsg[VERIFY_LEDS] >= MSG_FREQ_5HZ)
 80014ca:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <main+0x1d0>)
 80014cc:	6a1b      	ldr	r3, [r3, #32]
 80014ce:	2bc7      	cmp	r3, #199	; 0xc7
 80014d0:	f67f af55 	bls.w	800137e <main+0x46>
	  {
		  accMsg[VERIFY_LEDS] -= MSG_FREQ_5HZ;
 80014d4:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <main+0x1d0>)
 80014d6:	6a1b      	ldr	r3, [r3, #32]
 80014d8:	3bc8      	subs	r3, #200	; 0xc8
 80014da:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <main+0x1d0>)
 80014dc:	6213      	str	r3, [r2, #32]
		  Principal_Verify_LEDs();
 80014de:	f000 fe61 	bl	80021a4 <Principal_Verify_LEDs>
	  Principal_Card_Detection(&fatfsStruct, &dirStruct, &fileStruct);
 80014e2:	e74c      	b.n	800137e <main+0x46>
 80014e4:	200004e4 	.word	0x200004e4
 80014e8:	2000032c 	.word	0x2000032c
 80014ec:	20000304 	.word	0x20000304
 80014f0:	200056a8 	.word	0x200056a8
 80014f4:	20004640 	.word	0x20004640
 80014f8:	20004670 	.word	0x20004670
 80014fc:	200066fe 	.word	0x200066fe
 8001500:	200066e0 	.word	0x200066e0
 8001504:	200066d4 	.word	0x200066d4
 8001508:	20006760 	.word	0x20006760
 800150c:	20006728 	.word	0x20006728

08001510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b094      	sub	sp, #80	; 0x50
 8001514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	2234      	movs	r2, #52	; 0x34
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f017 fb4a 	bl	8018bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001524:	f107 0308 	add.w	r3, r7, #8
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001534:	2300      	movs	r3, #0
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	4b2f      	ldr	r3, [pc, #188]	; (80015f8 <SystemClock_Config+0xe8>)
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	4a2e      	ldr	r2, [pc, #184]	; (80015f8 <SystemClock_Config+0xe8>)
 800153e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001542:	6413      	str	r3, [r2, #64]	; 0x40
 8001544:	4b2c      	ldr	r3, [pc, #176]	; (80015f8 <SystemClock_Config+0xe8>)
 8001546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001550:	2300      	movs	r3, #0
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	4b29      	ldr	r3, [pc, #164]	; (80015fc <SystemClock_Config+0xec>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a28      	ldr	r2, [pc, #160]	; (80015fc <SystemClock_Config+0xec>)
 800155a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800155e:	6013      	str	r3, [r2, #0]
 8001560:	4b26      	ldr	r3, [pc, #152]	; (80015fc <SystemClock_Config+0xec>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001568:	603b      	str	r3, [r7, #0]
 800156a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 800156c:	230d      	movs	r3, #13
 800156e:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001570:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001574:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001576:	2301      	movs	r3, #1
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800157a:	2301      	movs	r3, #1
 800157c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800157e:	2302      	movs	r3, #2
 8001580:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001582:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001586:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001588:	2308      	movs	r3, #8
 800158a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 800158c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001590:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001592:	2302      	movs	r3, #2
 8001594:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001596:	2306      	movs	r3, #6
 8001598:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800159a:	2302      	movs	r3, #2
 800159c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800159e:	f107 031c 	add.w	r3, r7, #28
 80015a2:	4618      	mov	r0, r3
 80015a4:	f00a ffbe 	bl	800c524 <HAL_RCC_OscConfig>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80015ae:	f000 fb47 	bl	8001c40 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80015b2:	f00a f907 	bl	800b7c4 <HAL_PWREx_EnableOverDrive>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80015bc:	f000 fb40 	bl	8001c40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015c0:	230f      	movs	r3, #15
 80015c2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015c4:	2302      	movs	r3, #2
 80015c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015c8:	2300      	movs	r3, #0
 80015ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015d8:	f107 0308 	add.w	r3, r7, #8
 80015dc:	2105      	movs	r1, #5
 80015de:	4618      	mov	r0, r3
 80015e0:	f00a f940 	bl	800b864 <HAL_RCC_ClockConfig>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <SystemClock_Config+0xde>
  {
    Error_Handler();
 80015ea:	f000 fb29 	bl	8001c40 <Error_Handler>
  }
}
 80015ee:	bf00      	nop
 80015f0:	3750      	adds	r7, #80	; 0x50
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40007000 	.word	0x40007000

08001600 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b098      	sub	sp, #96	; 0x60
 8001604:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	225c      	movs	r2, #92	; 0x5c
 800160a:	2100      	movs	r1, #0
 800160c:	4618      	mov	r0, r3
 800160e:	f017 fad3 	bl	8018bb8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8001612:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001616:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 8;
 8001618:	2308      	movs	r3, #8
 800161a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800161c:	23c0      	movs	r3, #192	; 0xc0
 800161e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001620:	2302      	movs	r3, #2
 8001622:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8001624:	2304      	movs	r3, #4
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001628:	2301      	movs	r3, #1
 800162a:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 800162c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001630:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8001632:	2300      	movs	r3, #0
 8001634:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	4618      	mov	r0, r3
 800163a:	f00a fa19 	bl	800ba70 <HAL_RCCEx_PeriphCLKConfig>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <PeriphCommonClock_Config+0x48>
  {
    Error_Handler();
 8001644:	f000 fafc 	bl	8001c40 <Error_Handler>
  }
}
 8001648:	bf00      	nop
 800164a:	3760      	adds	r7, #96	; 0x60
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001656:	463b      	mov	r3, r7
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001662:	4b44      	ldr	r3, [pc, #272]	; (8001774 <MX_ADC1_Init+0x124>)
 8001664:	4a44      	ldr	r2, [pc, #272]	; (8001778 <MX_ADC1_Init+0x128>)
 8001666:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001668:	4b42      	ldr	r3, [pc, #264]	; (8001774 <MX_ADC1_Init+0x124>)
 800166a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800166e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001670:	4b40      	ldr	r3, [pc, #256]	; (8001774 <MX_ADC1_Init+0x124>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001676:	4b3f      	ldr	r3, [pc, #252]	; (8001774 <MX_ADC1_Init+0x124>)
 8001678:	2201      	movs	r2, #1
 800167a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800167c:	4b3d      	ldr	r3, [pc, #244]	; (8001774 <MX_ADC1_Init+0x124>)
 800167e:	2201      	movs	r2, #1
 8001680:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001682:	4b3c      	ldr	r3, [pc, #240]	; (8001774 <MX_ADC1_Init+0x124>)
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800168a:	4b3a      	ldr	r3, [pc, #232]	; (8001774 <MX_ADC1_Init+0x124>)
 800168c:	2200      	movs	r2, #0
 800168e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001690:	4b38      	ldr	r3, [pc, #224]	; (8001774 <MX_ADC1_Init+0x124>)
 8001692:	4a3a      	ldr	r2, [pc, #232]	; (800177c <MX_ADC1_Init+0x12c>)
 8001694:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001696:	4b37      	ldr	r3, [pc, #220]	; (8001774 <MX_ADC1_Init+0x124>)
 8001698:	2200      	movs	r2, #0
 800169a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 800169c:	4b35      	ldr	r3, [pc, #212]	; (8001774 <MX_ADC1_Init+0x124>)
 800169e:	2206      	movs	r2, #6
 80016a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80016a2:	4b34      	ldr	r3, [pc, #208]	; (8001774 <MX_ADC1_Init+0x124>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016aa:	4b32      	ldr	r3, [pc, #200]	; (8001774 <MX_ADC1_Init+0x124>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016b0:	4830      	ldr	r0, [pc, #192]	; (8001774 <MX_ADC1_Init+0x124>)
 80016b2:	f005 fc73 	bl	8006f9c <HAL_ADC_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80016bc:	f000 fac0 	bl	8001c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80016c0:	2306      	movs	r3, #6
 80016c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016c4:	2301      	movs	r3, #1
 80016c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80016c8:	2307      	movs	r3, #7
 80016ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016cc:	463b      	mov	r3, r7
 80016ce:	4619      	mov	r1, r3
 80016d0:	4828      	ldr	r0, [pc, #160]	; (8001774 <MX_ADC1_Init+0x124>)
 80016d2:	f005 fdd5 	bl	8007280 <HAL_ADC_ConfigChannel>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80016dc:	f000 fab0 	bl	8001c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80016e0:	2307      	movs	r3, #7
 80016e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80016e4:	2302      	movs	r3, #2
 80016e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016e8:	463b      	mov	r3, r7
 80016ea:	4619      	mov	r1, r3
 80016ec:	4821      	ldr	r0, [pc, #132]	; (8001774 <MX_ADC1_Init+0x124>)
 80016ee:	f005 fdc7 	bl	8007280 <HAL_ADC_ConfigChannel>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80016f8:	f000 faa2 	bl	8001c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80016fc:	230e      	movs	r3, #14
 80016fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001700:	2303      	movs	r3, #3
 8001702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001704:	463b      	mov	r3, r7
 8001706:	4619      	mov	r1, r3
 8001708:	481a      	ldr	r0, [pc, #104]	; (8001774 <MX_ADC1_Init+0x124>)
 800170a:	f005 fdb9 	bl	8007280 <HAL_ADC_ConfigChannel>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001714:	f000 fa94 	bl	8001c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001718:	230f      	movs	r3, #15
 800171a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800171c:	2304      	movs	r3, #4
 800171e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001720:	463b      	mov	r3, r7
 8001722:	4619      	mov	r1, r3
 8001724:	4813      	ldr	r0, [pc, #76]	; (8001774 <MX_ADC1_Init+0x124>)
 8001726:	f005 fdab 	bl	8007280 <HAL_ADC_ConfigChannel>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001730:	f000 fa86 	bl	8001c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001734:	2308      	movs	r3, #8
 8001736:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001738:	2305      	movs	r3, #5
 800173a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800173c:	463b      	mov	r3, r7
 800173e:	4619      	mov	r1, r3
 8001740:	480c      	ldr	r0, [pc, #48]	; (8001774 <MX_ADC1_Init+0x124>)
 8001742:	f005 fd9d 	bl	8007280 <HAL_ADC_ConfigChannel>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 800174c:	f000 fa78 	bl	8001c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001750:	2309      	movs	r3, #9
 8001752:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001754:	2306      	movs	r3, #6
 8001756:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001758:	463b      	mov	r3, r7
 800175a:	4619      	mov	r1, r3
 800175c:	4805      	ldr	r0, [pc, #20]	; (8001774 <MX_ADC1_Init+0x124>)
 800175e:	f005 fd8f 	bl	8007280 <HAL_ADC_ConfigChannel>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001768:	f000 fa6a 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800176c:	bf00      	nop
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	200001b4 	.word	0x200001b4
 8001778:	40012000 	.word	0x40012000
 800177c:	0f000001 	.word	0x0f000001

08001780 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001786:	463b      	mov	r3, r7
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001792:	4b44      	ldr	r3, [pc, #272]	; (80018a4 <MX_ADC2_Init+0x124>)
 8001794:	4a44      	ldr	r2, [pc, #272]	; (80018a8 <MX_ADC2_Init+0x128>)
 8001796:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001798:	4b42      	ldr	r3, [pc, #264]	; (80018a4 <MX_ADC2_Init+0x124>)
 800179a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800179e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80017a0:	4b40      	ldr	r3, [pc, #256]	; (80018a4 <MX_ADC2_Init+0x124>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80017a6:	4b3f      	ldr	r3, [pc, #252]	; (80018a4 <MX_ADC2_Init+0x124>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80017ac:	4b3d      	ldr	r3, [pc, #244]	; (80018a4 <MX_ADC2_Init+0x124>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80017b2:	4b3c      	ldr	r3, [pc, #240]	; (80018a4 <MX_ADC2_Init+0x124>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017ba:	4b3a      	ldr	r3, [pc, #232]	; (80018a4 <MX_ADC2_Init+0x124>)
 80017bc:	2200      	movs	r2, #0
 80017be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017c0:	4b38      	ldr	r3, [pc, #224]	; (80018a4 <MX_ADC2_Init+0x124>)
 80017c2:	4a3a      	ldr	r2, [pc, #232]	; (80018ac <MX_ADC2_Init+0x12c>)
 80017c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017c6:	4b37      	ldr	r3, [pc, #220]	; (80018a4 <MX_ADC2_Init+0x124>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 6;
 80017cc:	4b35      	ldr	r3, [pc, #212]	; (80018a4 <MX_ADC2_Init+0x124>)
 80017ce:	2206      	movs	r2, #6
 80017d0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80017d2:	4b34      	ldr	r3, [pc, #208]	; (80018a4 <MX_ADC2_Init+0x124>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017da:	4b32      	ldr	r3, [pc, #200]	; (80018a4 <MX_ADC2_Init+0x124>)
 80017dc:	2201      	movs	r2, #1
 80017de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80017e0:	4830      	ldr	r0, [pc, #192]	; (80018a4 <MX_ADC2_Init+0x124>)
 80017e2:	f005 fbdb 	bl	8006f9c <HAL_ADC_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80017ec:	f000 fa28 	bl	8001c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017f4:	2301      	movs	r3, #1
 80017f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80017f8:	2307      	movs	r3, #7
 80017fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017fc:	463b      	mov	r3, r7
 80017fe:	4619      	mov	r1, r3
 8001800:	4828      	ldr	r0, [pc, #160]	; (80018a4 <MX_ADC2_Init+0x124>)
 8001802:	f005 fd3d 	bl	8007280 <HAL_ADC_ConfigChannel>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800180c:	f000 fa18 	bl	8001c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001810:	2301      	movs	r3, #1
 8001812:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001814:	2302      	movs	r3, #2
 8001816:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001818:	463b      	mov	r3, r7
 800181a:	4619      	mov	r1, r3
 800181c:	4821      	ldr	r0, [pc, #132]	; (80018a4 <MX_ADC2_Init+0x124>)
 800181e:	f005 fd2f 	bl	8007280 <HAL_ADC_ConfigChannel>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8001828:	f000 fa0a 	bl	8001c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800182c:	2302      	movs	r3, #2
 800182e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001830:	2303      	movs	r3, #3
 8001832:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001834:	463b      	mov	r3, r7
 8001836:	4619      	mov	r1, r3
 8001838:	481a      	ldr	r0, [pc, #104]	; (80018a4 <MX_ADC2_Init+0x124>)
 800183a:	f005 fd21 	bl	8007280 <HAL_ADC_ConfigChannel>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8001844:	f000 f9fc 	bl	8001c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001848:	2303      	movs	r3, #3
 800184a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800184c:	2304      	movs	r3, #4
 800184e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001850:	463b      	mov	r3, r7
 8001852:	4619      	mov	r1, r3
 8001854:	4813      	ldr	r0, [pc, #76]	; (80018a4 <MX_ADC2_Init+0x124>)
 8001856:	f005 fd13 	bl	8007280 <HAL_ADC_ConfigChannel>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8001860:	f000 f9ee 	bl	8001c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001864:	2304      	movs	r3, #4
 8001866:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001868:	2305      	movs	r3, #5
 800186a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800186c:	463b      	mov	r3, r7
 800186e:	4619      	mov	r1, r3
 8001870:	480c      	ldr	r0, [pc, #48]	; (80018a4 <MX_ADC2_Init+0x124>)
 8001872:	f005 fd05 	bl	8007280 <HAL_ADC_ConfigChannel>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 800187c:	f000 f9e0 	bl	8001c40 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001880:	2305      	movs	r3, #5
 8001882:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001884:	2306      	movs	r3, #6
 8001886:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001888:	463b      	mov	r3, r7
 800188a:	4619      	mov	r1, r3
 800188c:	4805      	ldr	r0, [pc, #20]	; (80018a4 <MX_ADC2_Init+0x124>)
 800188e:	f005 fcf7 	bl	8007280 <HAL_ADC_ConfigChannel>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8001898:	f000 f9d2 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800189c:	bf00      	nop
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	200001fc 	.word	0x200001fc
 80018a8:	40012100 	.word	0x40012100
 80018ac:	0f000001 	.word	0x0f000001

080018b0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80018b4:	4b17      	ldr	r3, [pc, #92]	; (8001914 <MX_CAN1_Init+0x64>)
 80018b6:	4a18      	ldr	r2, [pc, #96]	; (8001918 <MX_CAN1_Init+0x68>)
 80018b8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 80018ba:	4b16      	ldr	r3, [pc, #88]	; (8001914 <MX_CAN1_Init+0x64>)
 80018bc:	2205      	movs	r2, #5
 80018be:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80018c0:	4b14      	ldr	r3, [pc, #80]	; (8001914 <MX_CAN1_Init+0x64>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80018c6:	4b13      	ldr	r3, [pc, #76]	; (8001914 <MX_CAN1_Init+0x64>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <MX_CAN1_Init+0x64>)
 80018ce:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80018d2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80018d4:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <MX_CAN1_Init+0x64>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <MX_CAN1_Init+0x64>)
 80018dc:	2200      	movs	r2, #0
 80018de:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <MX_CAN1_Init+0x64>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80018e6:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <MX_CAN1_Init+0x64>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80018ec:	4b09      	ldr	r3, [pc, #36]	; (8001914 <MX_CAN1_Init+0x64>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80018f2:	4b08      	ldr	r3, [pc, #32]	; (8001914 <MX_CAN1_Init+0x64>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80018f8:	4b06      	ldr	r3, [pc, #24]	; (8001914 <MX_CAN1_Init+0x64>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80018fe:	4805      	ldr	r0, [pc, #20]	; (8001914 <MX_CAN1_Init+0x64>)
 8001900:	f005 ff6e 	bl	80077e0 <HAL_CAN_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800190a:	f000 f999 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000304 	.word	0x20000304
 8001918:	40006400 	.word	0x40006400

0800191c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <MX_I2C1_Init+0x50>)
 8001922:	4a13      	ldr	r2, [pc, #76]	; (8001970 <MX_I2C1_Init+0x54>)
 8001924:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001926:	4b11      	ldr	r3, [pc, #68]	; (800196c <MX_I2C1_Init+0x50>)
 8001928:	4a12      	ldr	r2, [pc, #72]	; (8001974 <MX_I2C1_Init+0x58>)
 800192a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <MX_I2C1_Init+0x50>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001932:	4b0e      	ldr	r3, [pc, #56]	; (800196c <MX_I2C1_Init+0x50>)
 8001934:	2200      	movs	r2, #0
 8001936:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <MX_I2C1_Init+0x50>)
 800193a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800193e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001940:	4b0a      	ldr	r3, [pc, #40]	; (800196c <MX_I2C1_Init+0x50>)
 8001942:	2200      	movs	r2, #0
 8001944:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <MX_I2C1_Init+0x50>)
 8001948:	2200      	movs	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800194c:	4b07      	ldr	r3, [pc, #28]	; (800196c <MX_I2C1_Init+0x50>)
 800194e:	2200      	movs	r2, #0
 8001950:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <MX_I2C1_Init+0x50>)
 8001954:	2200      	movs	r2, #0
 8001956:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001958:	4804      	ldr	r0, [pc, #16]	; (800196c <MX_I2C1_Init+0x50>)
 800195a:	f007 fca7 	bl	80092ac <HAL_I2C_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001964:	f000 f96c 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}
 800196c:	2000032c 	.word	0x2000032c
 8001970:	40005400 	.word	0x40005400
 8001974:	00061a80 	.word	0x00061a80

08001978 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800198c:	2300      	movs	r3, #0
 800198e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <MX_RTC_Init+0x58>)
 8001992:	4a10      	ldr	r2, [pc, #64]	; (80019d4 <MX_RTC_Init+0x5c>)
 8001994:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <MX_RTC_Init+0x58>)
 8001998:	2200      	movs	r2, #0
 800199a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800199c:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <MX_RTC_Init+0x58>)
 800199e:	227f      	movs	r2, #127	; 0x7f
 80019a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <MX_RTC_Init+0x58>)
 80019a4:	22ff      	movs	r2, #255	; 0xff
 80019a6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <MX_RTC_Init+0x58>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80019ae:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <MX_RTC_Init+0x58>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <MX_RTC_Init+0x58>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019ba:	4805      	ldr	r0, [pc, #20]	; (80019d0 <MX_RTC_Init+0x58>)
 80019bc:	f00b f850 	bl	800ca60 <HAL_RTC_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80019c6:	f000 f93b 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000380 	.word	0x20000380
 80019d4:	40002800 	.word	0x40002800

080019d8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80019dc:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <MX_SDIO_SD_Init+0x38>)
 80019de:	4a0d      	ldr	r2, [pc, #52]	; (8001a14 <MX_SDIO_SD_Init+0x3c>)
 80019e0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80019e2:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <MX_SDIO_SD_Init+0x38>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80019e8:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <MX_SDIO_SD_Init+0x38>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80019ee:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <MX_SDIO_SD_Init+0x38>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80019f4:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <MX_SDIO_SD_Init+0x38>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80019fa:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <MX_SDIO_SD_Init+0x38>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8001a00:	4b03      	ldr	r3, [pc, #12]	; (8001a10 <MX_SDIO_SD_Init+0x38>)
 8001a02:	2202      	movs	r2, #2
 8001a04:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001a06:	bf00      	nop
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	200003a0 	.word	0x200003a0
 8001a14:	40012c00 	.word	0x40012c00

08001a18 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a1e:	463b      	mov	r3, r7
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <MX_TIM7_Init+0x64>)
 8001a28:	4a15      	ldr	r2, [pc, #84]	; (8001a80 <MX_TIM7_Init+0x68>)
 8001a2a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 89;
 8001a2c:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <MX_TIM7_Init+0x64>)
 8001a2e:	2259      	movs	r2, #89	; 0x59
 8001a30:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a32:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <MX_TIM7_Init+0x64>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8001a38:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <MX_TIM7_Init+0x64>)
 8001a3a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a3e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a40:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <MX_TIM7_Init+0x64>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001a46:	480d      	ldr	r0, [pc, #52]	; (8001a7c <MX_TIM7_Init+0x64>)
 8001a48:	f00d f9bb 	bl	800edc2 <HAL_TIM_Base_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001a52:	f000 f8f5 	bl	8001c40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a56:	2300      	movs	r3, #0
 8001a58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001a5e:	463b      	mov	r3, r7
 8001a60:	4619      	mov	r1, r3
 8001a62:	4806      	ldr	r0, [pc, #24]	; (8001a7c <MX_TIM7_Init+0x64>)
 8001a64:	f00d fc3c 	bl	800f2e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001a6e:	f000 f8e7 	bl	8001c40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200004e4 	.word	0x200004e4
 8001a80:	40001400 	.word	0x40001400

08001a84 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	607b      	str	r3, [r7, #4]
 8001a8e:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <MX_DMA_Init+0x6c>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a17      	ldr	r2, [pc, #92]	; (8001af0 <MX_DMA_Init+0x6c>)
 8001a94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <MX_DMA_Init+0x6c>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2102      	movs	r1, #2
 8001aaa:	2038      	movs	r0, #56	; 0x38
 8001aac:	f006 fe31 	bl	8008712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001ab0:	2038      	movs	r0, #56	; 0x38
 8001ab2:	f006 fe4a 	bl	800874a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 2, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2102      	movs	r1, #2
 8001aba:	203a      	movs	r0, #58	; 0x3a
 8001abc:	f006 fe29 	bl	8008712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001ac0:	203a      	movs	r0, #58	; 0x3a
 8001ac2:	f006 fe42 	bl	800874a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2100      	movs	r1, #0
 8001aca:	203b      	movs	r0, #59	; 0x3b
 8001acc:	f006 fe21 	bl	8008712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001ad0:	203b      	movs	r0, #59	; 0x3b
 8001ad2:	f006 fe3a 	bl	800874a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	2045      	movs	r0, #69	; 0x45
 8001adc:	f006 fe19 	bl	8008712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001ae0:	2045      	movs	r0, #69	; 0x45
 8001ae2:	f006 fe32 	bl	800874a <HAL_NVIC_EnableIRQ>

}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800

08001af4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08a      	sub	sp, #40	; 0x28
 8001af8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	60da      	str	r2, [r3, #12]
 8001b08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	4b49      	ldr	r3, [pc, #292]	; (8001c34 <MX_GPIO_Init+0x140>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a48      	ldr	r2, [pc, #288]	; (8001c34 <MX_GPIO_Init+0x140>)
 8001b14:	f043 0304 	orr.w	r3, r3, #4
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b46      	ldr	r3, [pc, #280]	; (8001c34 <MX_GPIO_Init+0x140>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0304 	and.w	r3, r3, #4
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	4b42      	ldr	r3, [pc, #264]	; (8001c34 <MX_GPIO_Init+0x140>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	4a41      	ldr	r2, [pc, #260]	; (8001c34 <MX_GPIO_Init+0x140>)
 8001b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b34:	6313      	str	r3, [r2, #48]	; 0x30
 8001b36:	4b3f      	ldr	r3, [pc, #252]	; (8001c34 <MX_GPIO_Init+0x140>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	4b3b      	ldr	r3, [pc, #236]	; (8001c34 <MX_GPIO_Init+0x140>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	4a3a      	ldr	r2, [pc, #232]	; (8001c34 <MX_GPIO_Init+0x140>)
 8001b4c:	f043 0301 	orr.w	r3, r3, #1
 8001b50:	6313      	str	r3, [r2, #48]	; 0x30
 8001b52:	4b38      	ldr	r3, [pc, #224]	; (8001c34 <MX_GPIO_Init+0x140>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	f003 0301 	and.w	r3, r3, #1
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	607b      	str	r3, [r7, #4]
 8001b62:	4b34      	ldr	r3, [pc, #208]	; (8001c34 <MX_GPIO_Init+0x140>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	4a33      	ldr	r2, [pc, #204]	; (8001c34 <MX_GPIO_Init+0x140>)
 8001b68:	f043 0302 	orr.w	r3, r3, #2
 8001b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b6e:	4b31      	ldr	r3, [pc, #196]	; (8001c34 <MX_GPIO_Init+0x140>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	607b      	str	r3, [r7, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	603b      	str	r3, [r7, #0]
 8001b7e:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <MX_GPIO_Init+0x140>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4a2c      	ldr	r2, [pc, #176]	; (8001c34 <MX_GPIO_Init+0x140>)
 8001b84:	f043 0308 	orr.w	r3, r3, #8
 8001b88:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8a:	4b2a      	ldr	r3, [pc, #168]	; (8001c34 <MX_GPIO_Init+0x140>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f003 0308 	and.w	r3, r3, #8
 8001b92:	603b      	str	r3, [r7, #0]
 8001b94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001b96:	2200      	movs	r2, #0
 8001b98:	210f      	movs	r1, #15
 8001b9a:	4827      	ldr	r0, [pc, #156]	; (8001c38 <MX_GPIO_Init+0x144>)
 8001b9c:	f007 fb3a 	bl	8009214 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT0_Pin|OUT1_Pin, GPIO_PIN_RESET);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001ba6:	4825      	ldr	r0, [pc, #148]	; (8001c3c <MX_GPIO_Init+0x148>)
 8001ba8:	f007 fb34 	bl	8009214 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8001bac:	230f      	movs	r3, #15
 8001bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	481d      	ldr	r0, [pc, #116]	; (8001c38 <MX_GPIO_Init+0x144>)
 8001bc4:	f007 f97a 	bl	8008ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_Pin OUT1_Pin */
  GPIO_InitStruct.Pin = OUT0_Pin|OUT1_Pin;
 8001bc8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bda:	f107 0314 	add.w	r3, r7, #20
 8001bde:	4619      	mov	r1, r3
 8001be0:	4816      	ldr	r0, [pc, #88]	; (8001c3c <MX_GPIO_Init+0x148>)
 8001be2:	f007 f96b 	bl	8008ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI0_Pin EXTI1_Pin */
  GPIO_InitStruct.Pin = EXTI0_Pin|EXTI1_Pin;
 8001be6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001bea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001bec:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf6:	f107 0314 	add.w	r3, r7, #20
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	480f      	ldr	r0, [pc, #60]	; (8001c3c <MX_GPIO_Init+0x148>)
 8001bfe:	f007 f95d 	bl	8008ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CD_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin;
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_CD_GPIO_Port, &GPIO_InitStruct);
 8001c0e:	f107 0314 	add.w	r3, r7, #20
 8001c12:	4619      	mov	r1, r3
 8001c14:	4808      	ldr	r0, [pc, #32]	; (8001c38 <MX_GPIO_Init+0x144>)
 8001c16:	f007 f951 	bl	8008ebc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	2028      	movs	r0, #40	; 0x28
 8001c20:	f006 fd77 	bl	8008712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c24:	2028      	movs	r0, #40	; 0x28
 8001c26:	f006 fd90 	bl	800874a <HAL_NVIC_EnableIRQ>

}
 8001c2a:	bf00      	nop
 8001c2c:	3728      	adds	r7, #40	; 0x28
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40020800 	.word	0x40020800
 8001c3c:	40020400 	.word	0x40020400

08001c40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c44:	b672      	cpsid	i
}
 8001c46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <Error_Handler+0x8>
	...

08001c4c <Process_Data>:
 */

#include "pdm_can.h"

static void Process_Data(uint16_t id, uint16_t data, PDM_Data* data_struct)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	603a      	str	r2, [r7, #0]
 8001c56:	80fb      	strh	r3, [r7, #6]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	80bb      	strh	r3, [r7, #4]
	switch(id >> 1){
 8001c5c:	88fb      	ldrh	r3, [r7, #6]
 8001c5e:	085b      	lsrs	r3, r3, #1
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	3b01      	subs	r3, #1
 8001c64:	2b1d      	cmp	r3, #29
 8001c66:	f200 81f9 	bhi.w	800205c <Process_Data+0x410>
 8001c6a:	a201      	add	r2, pc, #4	; (adr r2, 8001c70 <Process_Data+0x24>)
 8001c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c70:	08001ce9 	.word	0x08001ce9
 8001c74:	08001d19 	.word	0x08001d19
 8001c78:	08001d49 	.word	0x08001d49
 8001c7c:	08001d79 	.word	0x08001d79
 8001c80:	08001da9 	.word	0x08001da9
 8001c84:	08001dd9 	.word	0x08001dd9
 8001c88:	08001e09 	.word	0x08001e09
 8001c8c:	08001e39 	.word	0x08001e39
 8001c90:	08001e69 	.word	0x08001e69
 8001c94:	08001e99 	.word	0x08001e99
 8001c98:	08001ec9 	.word	0x08001ec9
 8001c9c:	08001ef9 	.word	0x08001ef9
 8001ca0:	08001f29 	.word	0x08001f29
 8001ca4:	08001f59 	.word	0x08001f59
 8001ca8:	08001f89 	.word	0x08001f89
 8001cac:	08001fb9 	.word	0x08001fb9
 8001cb0:	08001fed 	.word	0x08001fed
 8001cb4:	08001ff5 	.word	0x08001ff5
 8001cb8:	08001ffd 	.word	0x08001ffd
 8001cbc:	08002005 	.word	0x08002005
 8001cc0:	0800200d 	.word	0x0800200d
 8001cc4:	08002015 	.word	0x08002015
 8001cc8:	0800201d 	.word	0x0800201d
 8001ccc:	08002025 	.word	0x08002025
 8001cd0:	0800202d 	.word	0x0800202d
 8001cd4:	08002035 	.word	0x08002035
 8001cd8:	0800203d 	.word	0x0800203d
 8001cdc:	08002045 	.word	0x08002045
 8001ce0:	0800204d 	.word	0x0800204d
 8001ce4:	08002055 	.word	0x08002055
		case 0x0001:
			data_struct->Current_Buffer[0] = data;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	88ba      	ldrh	r2, [r7, #4]
 8001cec:	809a      	strh	r2, [r3, #4]
			if((id & 0x0001) == 1)
 8001cee:	88fb      	ldrh	r3, [r7, #6]
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d007      	beq.n	8001d08 <Process_Data+0xbc>
				data_struct->Output_Verify |= 1;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	885b      	ldrh	r3, [r3, #2]
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~1;
			break;
 8001d06:	e1aa      	b.n	800205e <Process_Data+0x412>
				data_struct->Output_Verify &= ~1;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	885b      	ldrh	r3, [r3, #2]
 8001d0c:	f023 0301 	bic.w	r3, r3, #1
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	805a      	strh	r2, [r3, #2]
			break;
 8001d16:	e1a2      	b.n	800205e <Process_Data+0x412>

		case 0x0002:
			data_struct->Current_Buffer[1] = data;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	88ba      	ldrh	r2, [r7, #4]
 8001d1c:	80da      	strh	r2, [r3, #6]
			if((id & 0x0001) == 1)
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d007      	beq.n	8001d38 <Process_Data+0xec>
				data_struct->Output_Verify |= (1 << 1);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	885b      	ldrh	r3, [r3, #2]
 8001d2c:	f043 0302 	orr.w	r3, r3, #2
 8001d30:	b29a      	uxth	r2, r3
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 1);
			break;
 8001d36:	e192      	b.n	800205e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 1);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	885b      	ldrh	r3, [r3, #2]
 8001d3c:	f023 0302 	bic.w	r3, r3, #2
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	805a      	strh	r2, [r3, #2]
			break;
 8001d46:	e18a      	b.n	800205e <Process_Data+0x412>

		case 0x0003:
			data_struct->Current_Buffer[2] = data;
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	88ba      	ldrh	r2, [r7, #4]
 8001d4c:	811a      	strh	r2, [r3, #8]
			if((id & 0x0001) == 1)
 8001d4e:	88fb      	ldrh	r3, [r7, #6]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d007      	beq.n	8001d68 <Process_Data+0x11c>
				data_struct->Output_Verify |= (1 << 2);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	885b      	ldrh	r3, [r3, #2]
 8001d5c:	f043 0304 	orr.w	r3, r3, #4
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 2);
			break;
 8001d66:	e17a      	b.n	800205e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 2);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	885b      	ldrh	r3, [r3, #2]
 8001d6c:	f023 0304 	bic.w	r3, r3, #4
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	805a      	strh	r2, [r3, #2]
			break;
 8001d76:	e172      	b.n	800205e <Process_Data+0x412>

		case 0x0004:
			data_struct->Current_Buffer[3] = data;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	88ba      	ldrh	r2, [r7, #4]
 8001d7c:	815a      	strh	r2, [r3, #10]
			if((id & 0x0001) == 1)
 8001d7e:	88fb      	ldrh	r3, [r7, #6]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d007      	beq.n	8001d98 <Process_Data+0x14c>
				data_struct->Output_Verify |= (1 << 3);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	885b      	ldrh	r3, [r3, #2]
 8001d8c:	f043 0308 	orr.w	r3, r3, #8
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 3);
			break;
 8001d96:	e162      	b.n	800205e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 3);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	885b      	ldrh	r3, [r3, #2]
 8001d9c:	f023 0308 	bic.w	r3, r3, #8
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	805a      	strh	r2, [r3, #2]
			break;
 8001da6:	e15a      	b.n	800205e <Process_Data+0x412>

		case 0x0005:
			data_struct->Current_Buffer[4] = data;
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	88ba      	ldrh	r2, [r7, #4]
 8001dac:	819a      	strh	r2, [r3, #12]
			if((id & 0x0001) == 1)
 8001dae:	88fb      	ldrh	r3, [r7, #6]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d007      	beq.n	8001dc8 <Process_Data+0x17c>
				data_struct->Output_Verify |= (1 << 4);
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	885b      	ldrh	r3, [r3, #2]
 8001dbc:	f043 0310 	orr.w	r3, r3, #16
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 4);
			break;
 8001dc6:	e14a      	b.n	800205e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 4);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	885b      	ldrh	r3, [r3, #2]
 8001dcc:	f023 0310 	bic.w	r3, r3, #16
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	805a      	strh	r2, [r3, #2]
			break;
 8001dd6:	e142      	b.n	800205e <Process_Data+0x412>

		case 0x0006:
			data_struct->Current_Buffer[5] = data;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	88ba      	ldrh	r2, [r7, #4]
 8001ddc:	81da      	strh	r2, [r3, #14]
			if((id & 0x0001) == 1)
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d007      	beq.n	8001df8 <Process_Data+0x1ac>
				data_struct->Output_Verify |= (1 << 5);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	885b      	ldrh	r3, [r3, #2]
 8001dec:	f043 0320 	orr.w	r3, r3, #32
 8001df0:	b29a      	uxth	r2, r3
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 5);
			break;
 8001df6:	e132      	b.n	800205e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 5);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	885b      	ldrh	r3, [r3, #2]
 8001dfc:	f023 0320 	bic.w	r3, r3, #32
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	805a      	strh	r2, [r3, #2]
			break;
 8001e06:	e12a      	b.n	800205e <Process_Data+0x412>

		case 0x0007:
			data_struct->Current_Buffer[6] = data;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	88ba      	ldrh	r2, [r7, #4]
 8001e0c:	821a      	strh	r2, [r3, #16]
			if((id & 0x0001) == 1)
 8001e0e:	88fb      	ldrh	r3, [r7, #6]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d007      	beq.n	8001e28 <Process_Data+0x1dc>
				data_struct->Output_Verify |= (1 << 6);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	885b      	ldrh	r3, [r3, #2]
 8001e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 6);
			break;
 8001e26:	e11a      	b.n	800205e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 6);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	885b      	ldrh	r3, [r3, #2]
 8001e2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	805a      	strh	r2, [r3, #2]
			break;
 8001e36:	e112      	b.n	800205e <Process_Data+0x412>

		case 0x0008:
			data_struct->Current_Buffer[7] = data;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	88ba      	ldrh	r2, [r7, #4]
 8001e3c:	825a      	strh	r2, [r3, #18]
			if((id & 0x0001) == 1)
 8001e3e:	88fb      	ldrh	r3, [r7, #6]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d007      	beq.n	8001e58 <Process_Data+0x20c>
				data_struct->Output_Verify |= (1 << 7);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	885b      	ldrh	r3, [r3, #2]
 8001e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 7);
			break;
 8001e56:	e102      	b.n	800205e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 7);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	885b      	ldrh	r3, [r3, #2]
 8001e5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	805a      	strh	r2, [r3, #2]
			break;
 8001e66:	e0fa      	b.n	800205e <Process_Data+0x412>

		case 0x0009:
			data_struct->Current_Buffer[8] = data;
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	88ba      	ldrh	r2, [r7, #4]
 8001e6c:	829a      	strh	r2, [r3, #20]
			if((id & 0x0001) == 1)
 8001e6e:	88fb      	ldrh	r3, [r7, #6]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d007      	beq.n	8001e88 <Process_Data+0x23c>
				data_struct->Output_Verify |= (1 << 8);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	885b      	ldrh	r3, [r3, #2]
 8001e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 8);
			break;
 8001e86:	e0ea      	b.n	800205e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 8);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	885b      	ldrh	r3, [r3, #2]
 8001e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	805a      	strh	r2, [r3, #2]
			break;
 8001e96:	e0e2      	b.n	800205e <Process_Data+0x412>

		case 0x000A:
			data_struct->Current_Buffer[9] = data;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	88ba      	ldrh	r2, [r7, #4]
 8001e9c:	82da      	strh	r2, [r3, #22]
			if((id & 0x0001) == 1)
 8001e9e:	88fb      	ldrh	r3, [r7, #6]
 8001ea0:	f003 0301 	and.w	r3, r3, #1
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d007      	beq.n	8001eb8 <Process_Data+0x26c>
				data_struct->Output_Verify |= (1 << 9);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	885b      	ldrh	r3, [r3, #2]
 8001eac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 9);
			break;
 8001eb6:	e0d2      	b.n	800205e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 9);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	885b      	ldrh	r3, [r3, #2]
 8001ebc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	805a      	strh	r2, [r3, #2]
			break;
 8001ec6:	e0ca      	b.n	800205e <Process_Data+0x412>

		case 0x000B:
			data_struct->Current_Buffer[10] = data;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	88ba      	ldrh	r2, [r7, #4]
 8001ecc:	831a      	strh	r2, [r3, #24]
			if((id & 0x0001) == 1)
 8001ece:	88fb      	ldrh	r3, [r7, #6]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d007      	beq.n	8001ee8 <Process_Data+0x29c>
				data_struct->Output_Verify |= (1 << 10);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	885b      	ldrh	r3, [r3, #2]
 8001edc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 10);
			break;
 8001ee6:	e0ba      	b.n	800205e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 10);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	885b      	ldrh	r3, [r3, #2]
 8001eec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	805a      	strh	r2, [r3, #2]
			break;
 8001ef6:	e0b2      	b.n	800205e <Process_Data+0x412>

		case 0x000C:
			data_struct->Current_Buffer[11] = data;
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	88ba      	ldrh	r2, [r7, #4]
 8001efc:	835a      	strh	r2, [r3, #26]
			if((id & 0x0001) == 1)
 8001efe:	88fb      	ldrh	r3, [r7, #6]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d007      	beq.n	8001f18 <Process_Data+0x2cc>
				data_struct->Output_Verify |= (1 << 11);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	885b      	ldrh	r3, [r3, #2]
 8001f0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 11);
			break;
 8001f16:	e0a2      	b.n	800205e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 11);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	885b      	ldrh	r3, [r3, #2]
 8001f1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	805a      	strh	r2, [r3, #2]
			break;
 8001f26:	e09a      	b.n	800205e <Process_Data+0x412>

		case 0x000D:
			data_struct->Current_Buffer[12] = data;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	88ba      	ldrh	r2, [r7, #4]
 8001f2c:	839a      	strh	r2, [r3, #28]
			if((id & 0x0001) == 1)
 8001f2e:	88fb      	ldrh	r3, [r7, #6]
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d007      	beq.n	8001f48 <Process_Data+0x2fc>
				data_struct->Output_Verify |= (1 << 12);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	885b      	ldrh	r3, [r3, #2]
 8001f3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 12);
			break;
 8001f46:	e08a      	b.n	800205e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 12);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	885b      	ldrh	r3, [r3, #2]
 8001f4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	805a      	strh	r2, [r3, #2]
			break;
 8001f56:	e082      	b.n	800205e <Process_Data+0x412>

		case 0x000E:
			data_struct->Current_Buffer[13] = data;
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	88ba      	ldrh	r2, [r7, #4]
 8001f5c:	83da      	strh	r2, [r3, #30]
			if((id & 0x0001) == 1)
 8001f5e:	88fb      	ldrh	r3, [r7, #6]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d007      	beq.n	8001f78 <Process_Data+0x32c>
				data_struct->Output_Verify |= (1 << 13);
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	885b      	ldrh	r3, [r3, #2]
 8001f6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 13);
			break;
 8001f76:	e072      	b.n	800205e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 13);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	885b      	ldrh	r3, [r3, #2]
 8001f7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	805a      	strh	r2, [r3, #2]
			break;
 8001f86:	e06a      	b.n	800205e <Process_Data+0x412>

		case 0x000F:
			data_struct->Current_Buffer[14] = data;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	88ba      	ldrh	r2, [r7, #4]
 8001f8c:	841a      	strh	r2, [r3, #32]
			if((id & 0x0001) == 1)
 8001f8e:	88fb      	ldrh	r3, [r7, #6]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d007      	beq.n	8001fa8 <Process_Data+0x35c>
				data_struct->Output_Verify |= (1 << 14);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	885b      	ldrh	r3, [r3, #2]
 8001f9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 14);
			break;
 8001fa6:	e05a      	b.n	800205e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 14);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	885b      	ldrh	r3, [r3, #2]
 8001fac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	805a      	strh	r2, [r3, #2]
			break;
 8001fb6:	e052      	b.n	800205e <Process_Data+0x412>

		case 0x0010:
			data_struct->Current_Buffer[15] = data;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	88ba      	ldrh	r2, [r7, #4]
 8001fbc:	845a      	strh	r2, [r3, #34]	; 0x22
			if((id & 0x0001) == 1)
 8001fbe:	88fb      	ldrh	r3, [r7, #6]
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d009      	beq.n	8001fdc <Process_Data+0x390>
				data_struct->Output_Verify |= (1 << 15);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	885b      	ldrh	r3, [r3, #2]
 8001fcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 15);
			break;
 8001fda:	e040      	b.n	800205e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 15);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	885b      	ldrh	r3, [r3, #2]
 8001fe0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	805a      	strh	r2, [r3, #2]
			break;
 8001fea:	e038      	b.n	800205e <Process_Data+0x412>

		case 0x0011:
			data_struct->Tempetature_Buffer[0] = data;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	88ba      	ldrh	r2, [r7, #4]
 8001ff0:	859a      	strh	r2, [r3, #44]	; 0x2c
			break;
 8001ff2:	e034      	b.n	800205e <Process_Data+0x412>

		case 0x0012:
			data_struct->Tempetature_Buffer[1] = data;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	88ba      	ldrh	r2, [r7, #4]
 8001ff8:	85da      	strh	r2, [r3, #46]	; 0x2e
			break;
 8001ffa:	e030      	b.n	800205e <Process_Data+0x412>

		case 0x0013:
			data_struct->Tempetature_Buffer[2] = data;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	88ba      	ldrh	r2, [r7, #4]
 8002000:	861a      	strh	r2, [r3, #48]	; 0x30
			break;
 8002002:	e02c      	b.n	800205e <Process_Data+0x412>

		case 0x0014:
			data_struct->Tempetature_Buffer[3] = data;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	88ba      	ldrh	r2, [r7, #4]
 8002008:	865a      	strh	r2, [r3, #50]	; 0x32
			break;
 800200a:	e028      	b.n	800205e <Process_Data+0x412>

		case 0x0015:
			data_struct->Tempetature_Buffer[4] = data;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	88ba      	ldrh	r2, [r7, #4]
 8002010:	869a      	strh	r2, [r3, #52]	; 0x34
			break;
 8002012:	e024      	b.n	800205e <Process_Data+0x412>

		case 0x0016:
			data_struct->Tempetature_Buffer[5] = data;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	88ba      	ldrh	r2, [r7, #4]
 8002018:	86da      	strh	r2, [r3, #54]	; 0x36
			break;
 800201a:	e020      	b.n	800205e <Process_Data+0x412>

		case 0x0017:
			data_struct->Tempetature_Buffer[6] = data;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	88ba      	ldrh	r2, [r7, #4]
 8002020:	871a      	strh	r2, [r3, #56]	; 0x38
			break;
 8002022:	e01c      	b.n	800205e <Process_Data+0x412>

		case 0x0018:
			data_struct->Tempetature_Buffer[7] = data;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	88ba      	ldrh	r2, [r7, #4]
 8002028:	875a      	strh	r2, [r3, #58]	; 0x3a
			break;
 800202a:	e018      	b.n	800205e <Process_Data+0x412>

		case 0x0019:
			data_struct->Tempetature_Buffer[8] = data;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	88ba      	ldrh	r2, [r7, #4]
 8002030:	879a      	strh	r2, [r3, #60]	; 0x3c
			break;
 8002032:	e014      	b.n	800205e <Process_Data+0x412>

		case 0x001A:
			data_struct->Input_Voltage = data;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	88ba      	ldrh	r2, [r7, #4]
 8002038:	801a      	strh	r2, [r3, #0]
			break;
 800203a:	e010      	b.n	800205e <Process_Data+0x412>

		case 0x001B:
			data_struct->Duty_Cycle_Buffer[0] = data;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	88ba      	ldrh	r2, [r7, #4]
 8002040:	849a      	strh	r2, [r3, #36]	; 0x24
			break;
 8002042:	e00c      	b.n	800205e <Process_Data+0x412>

		case 0x001C:
			data_struct->Duty_Cycle_Buffer[1] = data;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	88ba      	ldrh	r2, [r7, #4]
 8002048:	84da      	strh	r2, [r3, #38]	; 0x26
			break;
 800204a:	e008      	b.n	800205e <Process_Data+0x412>

		case 0x001D:
			data_struct->Duty_Cycle_Buffer[2] = data;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	88ba      	ldrh	r2, [r7, #4]
 8002050:	851a      	strh	r2, [r3, #40]	; 0x28
			break;
 8002052:	e004      	b.n	800205e <Process_Data+0x412>

		case 0x001E:
			data_struct->Duty_Cycle_Buffer[3] = data;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	88ba      	ldrh	r2, [r7, #4]
 8002058:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
 800205a:	e000      	b.n	800205e <Process_Data+0x412>

		default:
			break;
 800205c:	bf00      	nop
	}

	return;
 800205e:	bf00      	nop
}
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop

0800206c <PDM_CAN_FilterConfig>:

HAL_StatusTypeDef PDM_CAN_FilterConfig(CAN_HandleTypeDef* hcan, uint32_t bank_position, uint32_t fifo_assignment)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b090      	sub	sp, #64	; 0x40
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filterID = 0x1E35C000, filterMask = 0x1FFFF000;
 8002078:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <PDM_CAN_FilterConfig+0x5c>)
 800207a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800207c:	4b13      	ldr	r3, [pc, #76]	; (80020cc <PDM_CAN_FilterConfig+0x60>)
 800207e:	63bb      	str	r3, [r7, #56]	; 0x38

	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002080:	2300      	movs	r3, #0
 8002082:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002084:	2301      	movs	r3, #1
 8002086:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterIdHigh = filterID >> 13;
 8002088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800208a:	0b5b      	lsrs	r3, r3, #13
 800208c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow = (filterID << 3) & 0xFFF8;
 800208e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	b29b      	uxth	r3, r3
 8002094:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh = filterMask >> 13;
 8002096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002098:	0b5b      	lsrs	r3, r3, #13
 800209a:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow = (filterMask << 3) & 0xFFF8;
 800209c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterBank = bank_position;
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterFIFOAssignment = fifo_assignment;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterActivation = ENABLE;
 80020ac:	2301      	movs	r3, #1
 80020ae:	633b      	str	r3, [r7, #48]	; 0x30

	return HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 80020b0:	f107 0310 	add.w	r3, r7, #16
 80020b4:	4619      	mov	r1, r3
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f005 fc8e 	bl	80079d8 <HAL_CAN_ConfigFilter>
 80020bc:	4603      	mov	r3, r0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3740      	adds	r7, #64	; 0x40
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	1e35c000 	.word	0x1e35c000
 80020cc:	1ffff000 	.word	0x1ffff000

080020d0 <PDM_CAN_Process_Data>:

void PDM_CAN_Process_Data(CAN_RxHeaderTypeDef* rx_header, uint8_t* data_buffer, PDM_Data* data_struct)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b088      	sub	sp, #32
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
	uint8_t length = 0;
 80020dc:	2300      	movs	r3, #0
 80020de:	77bb      	strb	r3, [r7, #30]
	uint8_t buffer[8];
	uint16_t id = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	83bb      	strh	r3, [r7, #28]
	uint16_t data = 0;
 80020e4:	2300      	movs	r3, #0
 80020e6:	837b      	strh	r3, [r7, #26]

	if((rx_header->DLC != CAN_ID_EXT) && ((rx_header->ExtId & 0x1FFFF000) != 0x1E35C000))
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	2b04      	cmp	r3, #4
 80020ee:	d006      	beq.n	80020fe <PDM_CAN_Process_Data+0x2e>
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	4b29      	ldr	r3, [pc, #164]	; (800219c <PDM_CAN_Process_Data+0xcc>)
 80020f6:	4013      	ands	r3, r2
 80020f8:	4a29      	ldr	r2, [pc, #164]	; (80021a0 <PDM_CAN_Process_Data+0xd0>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d149      	bne.n	8002192 <PDM_CAN_Process_Data+0xc2>
		return;

	length = rx_header->DLC;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	77bb      	strb	r3, [r7, #30]

	for(uint8_t i = 0; i < length; i++)
 8002104:	2300      	movs	r3, #0
 8002106:	77fb      	strb	r3, [r7, #31]
 8002108:	e00b      	b.n	8002122 <PDM_CAN_Process_Data+0x52>
		buffer[i] = data_buffer[i];
 800210a:	7ffb      	ldrb	r3, [r7, #31]
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	441a      	add	r2, r3
 8002110:	7ffb      	ldrb	r3, [r7, #31]
 8002112:	7812      	ldrb	r2, [r2, #0]
 8002114:	3320      	adds	r3, #32
 8002116:	443b      	add	r3, r7
 8002118:	f803 2c10 	strb.w	r2, [r3, #-16]
	for(uint8_t i = 0; i < length; i++)
 800211c:	7ffb      	ldrb	r3, [r7, #31]
 800211e:	3301      	adds	r3, #1
 8002120:	77fb      	strb	r3, [r7, #31]
 8002122:	7ffa      	ldrb	r2, [r7, #31]
 8002124:	7fbb      	ldrb	r3, [r7, #30]
 8002126:	429a      	cmp	r2, r3
 8002128:	d3ef      	bcc.n	800210a <PDM_CAN_Process_Data+0x3a>

	id  = buffer[0] << 8;
 800212a:	7c3b      	ldrb	r3, [r7, #16]
 800212c:	b29b      	uxth	r3, r3
 800212e:	021b      	lsls	r3, r3, #8
 8002130:	83bb      	strh	r3, [r7, #28]
	id |= buffer[1] & 0xff;
 8002132:	7c7b      	ldrb	r3, [r7, #17]
 8002134:	b29a      	uxth	r2, r3
 8002136:	8bbb      	ldrh	r3, [r7, #28]
 8002138:	4313      	orrs	r3, r2
 800213a:	83bb      	strh	r3, [r7, #28]
	data  = buffer[2] << 8;
 800213c:	7cbb      	ldrb	r3, [r7, #18]
 800213e:	b29b      	uxth	r3, r3
 8002140:	021b      	lsls	r3, r3, #8
 8002142:	837b      	strh	r3, [r7, #26]
	data |= buffer[3] & 0xff;
 8002144:	7cfb      	ldrb	r3, [r7, #19]
 8002146:	b29a      	uxth	r2, r3
 8002148:	8b7b      	ldrh	r3, [r7, #26]
 800214a:	4313      	orrs	r3, r2
 800214c:	837b      	strh	r3, [r7, #26]

	Process_Data(id, data, data_struct);
 800214e:	8b79      	ldrh	r1, [r7, #26]
 8002150:	8bbb      	ldrh	r3, [r7, #28]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff fd79 	bl	8001c4c <Process_Data>

	if(length == 8)
 800215a:	7fbb      	ldrb	r3, [r7, #30]
 800215c:	2b08      	cmp	r3, #8
 800215e:	d119      	bne.n	8002194 <PDM_CAN_Process_Data+0xc4>
	{
		id  = buffer[4] << 8;
 8002160:	7d3b      	ldrb	r3, [r7, #20]
 8002162:	b29b      	uxth	r3, r3
 8002164:	021b      	lsls	r3, r3, #8
 8002166:	83bb      	strh	r3, [r7, #28]
		id |= buffer[5] & 0xff;
 8002168:	7d7b      	ldrb	r3, [r7, #21]
 800216a:	b29a      	uxth	r2, r3
 800216c:	8bbb      	ldrh	r3, [r7, #28]
 800216e:	4313      	orrs	r3, r2
 8002170:	83bb      	strh	r3, [r7, #28]
		data  = buffer[6] << 8;
 8002172:	7dbb      	ldrb	r3, [r7, #22]
 8002174:	b29b      	uxth	r3, r3
 8002176:	021b      	lsls	r3, r3, #8
 8002178:	837b      	strh	r3, [r7, #26]
		data |= buffer[7] & 0xff;
 800217a:	7dfb      	ldrb	r3, [r7, #23]
 800217c:	b29a      	uxth	r2, r3
 800217e:	8b7b      	ldrh	r3, [r7, #26]
 8002180:	4313      	orrs	r3, r2
 8002182:	837b      	strh	r3, [r7, #26]

		Process_Data(id, data, data_struct);
 8002184:	8b79      	ldrh	r1, [r7, #26]
 8002186:	8bbb      	ldrh	r3, [r7, #28]
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff fd5e 	bl	8001c4c <Process_Data>
 8002190:	e000      	b.n	8002194 <PDM_CAN_Process_Data+0xc4>
		return;
 8002192:	bf00      	nop
	}
}
 8002194:	3720      	adds	r7, #32
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	1ffff000 	.word	0x1ffff000
 80021a0:	1e35c000 	.word	0x1e35c000

080021a4 <Principal_Verify_LEDs>:
static void Tx_Beacon(CAN_HandleTypeDef* hcan);
static void Save_ECU(CAN_HandleTypeDef* hcan);
static void Save_PDM(CAN_HandleTypeDef* hcan);

void Principal_Verify_LEDs()
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
	verifyADC = 0;
 80021aa:	4b2c      	ldr	r3, [pc, #176]	; (800225c <Principal_Verify_LEDs+0xb8>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < NBR_OF_CHANNELS; i++)
 80021b0:	2300      	movs	r3, #0
 80021b2:	71fb      	strb	r3, [r7, #7]
 80021b4:	e015      	b.n	80021e2 <Principal_Verify_LEDs+0x3e>
		if(adcBuffer[i] > ADC_THRESHOLD)
 80021b6:	79fb      	ldrb	r3, [r7, #7]
 80021b8:	4a29      	ldr	r2, [pc, #164]	; (8002260 <Principal_Verify_LEDs+0xbc>)
 80021ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021be:	2b1e      	cmp	r3, #30
 80021c0:	d90c      	bls.n	80021dc <Principal_Verify_LEDs+0x38>
			verifyADC |= (1 << i);
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	2201      	movs	r2, #1
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	b21a      	sxth	r2, r3
 80021cc:	4b23      	ldr	r3, [pc, #140]	; (800225c <Principal_Verify_LEDs+0xb8>)
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	b21b      	sxth	r3, r3
 80021d2:	4313      	orrs	r3, r2
 80021d4:	b21b      	sxth	r3, r3
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	4b20      	ldr	r3, [pc, #128]	; (800225c <Principal_Verify_LEDs+0xb8>)
 80021da:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < NBR_OF_CHANNELS; i++)
 80021dc:	79fb      	ldrb	r3, [r7, #7]
 80021de:	3301      	adds	r3, #1
 80021e0:	71fb      	strb	r3, [r7, #7]
 80021e2:	79fb      	ldrb	r3, [r7, #7]
 80021e4:	2b0b      	cmp	r3, #11
 80021e6:	d9e6      	bls.n	80021b6 <Principal_Verify_LEDs+0x12>

	HAL_GPIO_TogglePin(LED_OK);
 80021e8:	2101      	movs	r1, #1
 80021ea:	481e      	ldr	r0, [pc, #120]	; (8002264 <Principal_Verify_LEDs+0xc0>)
 80021ec:	f007 f82b 	bl	8009246 <HAL_GPIO_TogglePin>

	if(flagDatalogger == DL_SAVE)
 80021f0:	4b1d      	ldr	r3, [pc, #116]	; (8002268 <Principal_Verify_LEDs+0xc4>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d105      	bne.n	8002204 <Principal_Verify_LEDs+0x60>
		HAL_GPIO_WritePin(LED_DATALOGGER, GPIO_PIN_SET);
 80021f8:	2201      	movs	r2, #1
 80021fa:	2102      	movs	r1, #2
 80021fc:	4819      	ldr	r0, [pc, #100]	; (8002264 <Principal_Verify_LEDs+0xc0>)
 80021fe:	f007 f809 	bl	8009214 <HAL_GPIO_WritePin>
 8002202:	e004      	b.n	800220e <Principal_Verify_LEDs+0x6a>
	else
		HAL_GPIO_WritePin(LED_DATALOGGER, GPIO_PIN_RESET);
 8002204:	2200      	movs	r2, #0
 8002206:	2102      	movs	r1, #2
 8002208:	4816      	ldr	r0, [pc, #88]	; (8002264 <Principal_Verify_LEDs+0xc0>)
 800220a:	f007 f803 	bl	8009214 <HAL_GPIO_WritePin>

	if((verifyCAN & 1) == 1)
 800220e:	4b17      	ldr	r3, [pc, #92]	; (800226c <Principal_Verify_LEDs+0xc8>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d005      	beq.n	8002226 <Principal_Verify_LEDs+0x82>
		HAL_GPIO_WritePin(LED_CAN_TX, GPIO_PIN_SET);
 800221a:	2201      	movs	r2, #1
 800221c:	2104      	movs	r1, #4
 800221e:	4811      	ldr	r0, [pc, #68]	; (8002264 <Principal_Verify_LEDs+0xc0>)
 8002220:	f006 fff8 	bl	8009214 <HAL_GPIO_WritePin>
 8002224:	e004      	b.n	8002230 <Principal_Verify_LEDs+0x8c>
	else
		HAL_GPIO_WritePin(LED_CAN_TX, GPIO_PIN_RESET);
 8002226:	2200      	movs	r2, #0
 8002228:	2104      	movs	r1, #4
 800222a:	480e      	ldr	r0, [pc, #56]	; (8002264 <Principal_Verify_LEDs+0xc0>)
 800222c:	f006 fff2 	bl	8009214 <HAL_GPIO_WritePin>

	if((verifyCAN & 2) == 2)
 8002230:	4b0e      	ldr	r3, [pc, #56]	; (800226c <Principal_Verify_LEDs+0xc8>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <Principal_Verify_LEDs+0xa4>
		HAL_GPIO_WritePin(LED_CAN_RX, GPIO_PIN_SET);
 800223c:	2201      	movs	r2, #1
 800223e:	2108      	movs	r1, #8
 8002240:	4808      	ldr	r0, [pc, #32]	; (8002264 <Principal_Verify_LEDs+0xc0>)
 8002242:	f006 ffe7 	bl	8009214 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_CAN_RX, GPIO_PIN_RESET);

	return;
 8002246:	e005      	b.n	8002254 <Principal_Verify_LEDs+0xb0>
		HAL_GPIO_WritePin(LED_CAN_RX, GPIO_PIN_RESET);
 8002248:	2200      	movs	r2, #0
 800224a:	2108      	movs	r1, #8
 800224c:	4805      	ldr	r0, [pc, #20]	; (8002264 <Principal_Verify_LEDs+0xc0>)
 800224e:	f006 ffe1 	bl	8009214 <HAL_GPIO_WritePin>
	return;
 8002252:	bf00      	nop
}
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	2000678a 	.word	0x2000678a
 8002260:	20000578 	.word	0x20000578
 8002264:	40020800 	.word	0x40020800
 8002268:	200066fe 	.word	0x200066fe
 800226c:	20006788 	.word	0x20006788

08002270 <Principal_CAN_Start>:

void Principal_CAN_Start(CAN_HandleTypeDef* hcan)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08e      	sub	sp, #56	; 0x38
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filter_id = 0, mask_id = 0;
 8002278:	2300      	movs	r3, #0
 800227a:	637b      	str	r3, [r7, #52]	; 0x34
 800227c:	2300      	movs	r3, #0
 800227e:	633b      	str	r3, [r7, #48]	; 0x30

	filter_id = CAN_DAQ_FILTER;
 8002280:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002284:	637b      	str	r3, [r7, #52]	; 0x34
	mask_id = CAN_DAQ_MASK;
 8002286:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800228a:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800228c:	2300      	movs	r3, #0
 800228e:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002290:	2301      	movs	r3, #1
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 8002294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002296:	0b5b      	lsrs	r3, r3, #13
 8002298:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 800229a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	b29b      	uxth	r3, r3
 80022a0:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 80022a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a4:	0b5b      	lsrs	r3, r3, #13
 80022a6:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 80022a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterActivation = ENABLE;
 80022b4:	2301      	movs	r3, #1
 80022b6:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterBank = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	61fb      	str	r3, [r7, #28]
	sFilterConfig.SlaveStartFilterBank = 14;
 80022bc:	230e      	movs	r3, #14
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 80022c0:	f107 0308 	add.w	r3, r7, #8
 80022c4:	4619      	mov	r1, r3
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f005 fb86 	bl	80079d8 <HAL_CAN_ConfigFilter>

	filter_id = CAN_CFG_FILTER;
 80022cc:	4b20      	ldr	r3, [pc, #128]	; (8002350 <Principal_CAN_Start+0xe0>)
 80022ce:	637b      	str	r3, [r7, #52]	; 0x34
	mask_id = CAN_CFG_MASK;
 80022d0:	4b20      	ldr	r3, [pc, #128]	; (8002354 <Principal_CAN_Start+0xe4>)
 80022d2:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80022d4:	2300      	movs	r3, #0
 80022d6:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80022d8:	2301      	movs	r3, #1
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 80022dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022de:	0b5b      	lsrs	r3, r3, #13
 80022e0:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 80022e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 80022ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ec:	0b5b      	lsrs	r3, r3, #13
 80022ee:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 80022f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterActivation = ENABLE;
 80022fc:	2301      	movs	r3, #1
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterBank = 1;
 8002300:	2301      	movs	r3, #1
 8002302:	61fb      	str	r3, [r7, #28]
	sFilterConfig.SlaveStartFilterBank = 15;
 8002304:	230f      	movs	r3, #15
 8002306:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 8002308:	f107 0308 	add.w	r3, r7, #8
 800230c:	4619      	mov	r1, r3
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f005 fb62 	bl	80079d8 <HAL_CAN_ConfigFilter>

	FT_CAN_FilterConfig(hcan, FT_Power_ECU, 2, CAN_RX_FIFO0);
 8002314:	2300      	movs	r3, #0
 8002316:	2202      	movs	r2, #2
 8002318:	f240 2181 	movw	r1, #641	; 0x281
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7fe f949 	bl	80005b4 <FT_CAN_FilterConfig>
	FT_CAN_FilterConfig(hcan, FT_WBO2_Nano, 3, CAN_RX_FIFO0);
 8002322:	2300      	movs	r3, #0
 8002324:	2203      	movs	r2, #3
 8002326:	f44f 7110 	mov.w	r1, #576	; 0x240
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7fe f942 	bl	80005b4 <FT_CAN_FilterConfig>
	PDM_CAN_FilterConfig(hcan, 4, CAN_RX_FIFO0);
 8002330:	2200      	movs	r2, #0
 8002332:	2104      	movs	r1, #4
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7ff fe99 	bl	800206c <PDM_CAN_FilterConfig>

	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800233a:	2102      	movs	r1, #2
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f005 fe91 	bl	8008064 <HAL_CAN_ActivateNotification>

	HAL_CAN_Start(hcan);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f005 fc28 	bl	8007b98 <HAL_CAN_Start>
}
 8002348:	bf00      	nop
 800234a:	3738      	adds	r7, #56	; 0x38
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	1e300000 	.word	0x1e300000
 8002354:	1ff80000 	.word	0x1ff80000

08002358 <Principal_Transmit_Msg>:

void Principal_Transmit_Msg(CAN_HandleTypeDef* hcan, uint8_t msg_number)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	70fb      	strb	r3, [r7, #3]
	switch(msg_number)
 8002364:	78fb      	ldrb	r3, [r7, #3]
 8002366:	2b07      	cmp	r3, #7
 8002368:	d832      	bhi.n	80023d0 <Principal_Transmit_Msg+0x78>
 800236a:	a201      	add	r2, pc, #4	; (adr r2, 8002370 <Principal_Transmit_Msg+0x18>)
 800236c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002370:	08002391 	.word	0x08002391
 8002374:	08002399 	.word	0x08002399
 8002378:	080023a1 	.word	0x080023a1
 800237c:	080023b1 	.word	0x080023b1
 8002380:	080023a9 	.word	0x080023a9
 8002384:	080023b9 	.word	0x080023b9
 8002388:	080023c1 	.word	0x080023c1
 800238c:	080023c9 	.word	0x080023c9
	{
		case ANALOG_1_4:
			Tx_Analog_1_4(hcan);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 f821 	bl	80023d8 <Tx_Analog_1_4>
			break;
 8002396:	e01c      	b.n	80023d2 <Principal_Transmit_Msg+0x7a>

		case ANALOG_5_8:
			Tx_Analog_5_8(hcan);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f8cf 	bl	800253c <Tx_Analog_5_8>
			break;
 800239e:	e018      	b.n	80023d2 <Principal_Transmit_Msg+0x7a>

		case ANALOG_9_12:
			Tx_Analog_9_12(hcan);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 f97d 	bl	80026a0 <Tx_Analog_9_12>
			break;
 80023a6:	e014      	b.n	80023d2 <Principal_Transmit_Msg+0x7a>

		case VERIFY_MSG:
			Tx_Verify(hcan);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f000 facf 	bl	800294c <Tx_Verify>
			break;
 80023ae:	e010      	b.n	80023d2 <Principal_Transmit_Msg+0x7a>

		case RTC_MSG:
			Tx_RTC(hcan);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 fa2f 	bl	8002814 <Tx_RTC>
			break;
 80023b6:	e00c      	b.n	80023d2 <Principal_Transmit_Msg+0x7a>

		case BEACON_MSG:
			Tx_Beacon(hcan);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 ffd3 	bl	8003364 <Tx_Beacon>
			break;
 80023be:	e008      	b.n	80023d2 <Principal_Transmit_Msg+0x7a>

		case ECU_SAVE:
			Save_ECU(hcan);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f001 f881 	bl	80034c8 <Save_ECU>
			break;
 80023c6:	e004      	b.n	80023d2 <Principal_Transmit_Msg+0x7a>

		case PDM_SAVE:
			Save_PDM(hcan);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f001 f9e7 	bl	800379c <Save_PDM>
			break;
 80023ce:	e000      	b.n	80023d2 <Principal_Transmit_Msg+0x7a>

		default:
			return;
 80023d0:	bf00      	nop
	}
}
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <Tx_Analog_1_4>:

static void Tx_Analog_1_4(CAN_HandleTypeDef* hcan)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af02      	add	r7, sp, #8
 80023de:	6078      	str	r0, [r7, #4]
	if((verifyADC & 0x000f) == 0x0000)
 80023e0:	4b4b      	ldr	r3, [pc, #300]	; (8002510 <Tx_Analog_1_4+0x138>)
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	f003 030f 	and.w	r3, r3, #15
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d103      	bne.n	80023f4 <Tx_Analog_1_4+0x1c>
	{
		accCAN[ANALOG_1_4] = 0;
 80023ec:	4b49      	ldr	r3, [pc, #292]	; (8002514 <Tx_Analog_1_4+0x13c>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
		return;
 80023f2:	e089      	b.n	8002508 <Tx_Analog_1_4+0x130>
	}

	txHeader.IDE = CAN_ID_STD;
 80023f4:	4b48      	ldr	r3, [pc, #288]	; (8002518 <Tx_Analog_1_4+0x140>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 80023fa:	4b47      	ldr	r3, [pc, #284]	; (8002518 <Tx_Analog_1_4+0x140>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8002400:	4b45      	ldr	r3, [pc, #276]	; (8002518 <Tx_Analog_1_4+0x140>)
 8002402:	2200      	movs	r2, #0
 8002404:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = FIRST_ID + ANALOG_1_4;
 8002406:	4b44      	ldr	r3, [pc, #272]	; (8002518 <Tx_Analog_1_4+0x140>)
 8002408:	f240 5215 	movw	r2, #1301	; 0x515
 800240c:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 8;
 800240e:	4b42      	ldr	r3, [pc, #264]	; (8002518 <Tx_Analog_1_4+0x140>)
 8002410:	2208      	movs	r2, #8
 8002412:	611a      	str	r2, [r3, #16]

	txData[0] = adcBuffer[0] >> 8;
 8002414:	4b41      	ldr	r3, [pc, #260]	; (800251c <Tx_Analog_1_4+0x144>)
 8002416:	881b      	ldrh	r3, [r3, #0]
 8002418:	0a1b      	lsrs	r3, r3, #8
 800241a:	b29b      	uxth	r3, r3
 800241c:	b2da      	uxtb	r2, r3
 800241e:	4b40      	ldr	r3, [pc, #256]	; (8002520 <Tx_Analog_1_4+0x148>)
 8002420:	701a      	strb	r2, [r3, #0]
	txData[1] = adcBuffer[0] & 0xff;
 8002422:	4b3e      	ldr	r3, [pc, #248]	; (800251c <Tx_Analog_1_4+0x144>)
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	b2da      	uxtb	r2, r3
 8002428:	4b3d      	ldr	r3, [pc, #244]	; (8002520 <Tx_Analog_1_4+0x148>)
 800242a:	705a      	strb	r2, [r3, #1]
	txData[2] = adcBuffer[1] >> 8;
 800242c:	4b3b      	ldr	r3, [pc, #236]	; (800251c <Tx_Analog_1_4+0x144>)
 800242e:	885b      	ldrh	r3, [r3, #2]
 8002430:	0a1b      	lsrs	r3, r3, #8
 8002432:	b29b      	uxth	r3, r3
 8002434:	b2da      	uxtb	r2, r3
 8002436:	4b3a      	ldr	r3, [pc, #232]	; (8002520 <Tx_Analog_1_4+0x148>)
 8002438:	709a      	strb	r2, [r3, #2]
	txData[3] = adcBuffer[1] & 0xff;
 800243a:	4b38      	ldr	r3, [pc, #224]	; (800251c <Tx_Analog_1_4+0x144>)
 800243c:	885b      	ldrh	r3, [r3, #2]
 800243e:	b2da      	uxtb	r2, r3
 8002440:	4b37      	ldr	r3, [pc, #220]	; (8002520 <Tx_Analog_1_4+0x148>)
 8002442:	70da      	strb	r2, [r3, #3]
	txData[4] = adcBuffer[2] >> 8;
 8002444:	4b35      	ldr	r3, [pc, #212]	; (800251c <Tx_Analog_1_4+0x144>)
 8002446:	889b      	ldrh	r3, [r3, #4]
 8002448:	0a1b      	lsrs	r3, r3, #8
 800244a:	b29b      	uxth	r3, r3
 800244c:	b2da      	uxtb	r2, r3
 800244e:	4b34      	ldr	r3, [pc, #208]	; (8002520 <Tx_Analog_1_4+0x148>)
 8002450:	711a      	strb	r2, [r3, #4]
	txData[5] = adcBuffer[2] & 0xff;
 8002452:	4b32      	ldr	r3, [pc, #200]	; (800251c <Tx_Analog_1_4+0x144>)
 8002454:	889b      	ldrh	r3, [r3, #4]
 8002456:	b2da      	uxtb	r2, r3
 8002458:	4b31      	ldr	r3, [pc, #196]	; (8002520 <Tx_Analog_1_4+0x148>)
 800245a:	715a      	strb	r2, [r3, #5]
	txData[6] = adcBuffer[3] >> 8;
 800245c:	4b2f      	ldr	r3, [pc, #188]	; (800251c <Tx_Analog_1_4+0x144>)
 800245e:	88db      	ldrh	r3, [r3, #6]
 8002460:	0a1b      	lsrs	r3, r3, #8
 8002462:	b29b      	uxth	r3, r3
 8002464:	b2da      	uxtb	r2, r3
 8002466:	4b2e      	ldr	r3, [pc, #184]	; (8002520 <Tx_Analog_1_4+0x148>)
 8002468:	719a      	strb	r2, [r3, #6]
	txData[7] = adcBuffer[3] & 0xff;
 800246a:	4b2c      	ldr	r3, [pc, #176]	; (800251c <Tx_Analog_1_4+0x144>)
 800246c:	88db      	ldrh	r3, [r3, #6]
 800246e:	b2da      	uxtb	r2, r3
 8002470:	4b2b      	ldr	r3, [pc, #172]	; (8002520 <Tx_Analog_1_4+0x148>)
 8002472:	71da      	strb	r2, [r3, #7]

	if(flagDatalogger == DL_SAVE)
 8002474:	4b2b      	ldr	r3, [pc, #172]	; (8002524 <Tx_Analog_1_4+0x14c>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d10c      	bne.n	8002496 <Tx_Analog_1_4+0xbe>
		Principal_Datalogger_Save_Buffer(hcan, txHeader.StdId, txHeader.DLC, txData, &dirStruct, &fileStruct);
 800247c:	4b26      	ldr	r3, [pc, #152]	; (8002518 <Tx_Analog_1_4+0x140>)
 800247e:	6819      	ldr	r1, [r3, #0]
 8002480:	4b25      	ldr	r3, [pc, #148]	; (8002518 <Tx_Analog_1_4+0x140>)
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	b2da      	uxtb	r2, r3
 8002486:	4b28      	ldr	r3, [pc, #160]	; (8002528 <Tx_Analog_1_4+0x150>)
 8002488:	9301      	str	r3, [sp, #4]
 800248a:	4b28      	ldr	r3, [pc, #160]	; (800252c <Tx_Analog_1_4+0x154>)
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	4b24      	ldr	r3, [pc, #144]	; (8002520 <Tx_Analog_1_4+0x148>)
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f003 fe1f 	bl	80060d4 <Principal_Datalogger_Save_Buffer>

	if((accCAN[ANALOG_1_4] >= perCAN[ANALOG_1_4]) && (perCAN[ANALOG_1_4] != MSG_DISABLED))
 8002496:	4b1f      	ldr	r3, [pc, #124]	; (8002514 <Tx_Analog_1_4+0x13c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a25      	ldr	r2, [pc, #148]	; (8002530 <Tx_Analog_1_4+0x158>)
 800249c:	8812      	ldrh	r2, [r2, #0]
 800249e:	4293      	cmp	r3, r2
 80024a0:	d331      	bcc.n	8002506 <Tx_Analog_1_4+0x12e>
 80024a2:	4b23      	ldr	r3, [pc, #140]	; (8002530 <Tx_Analog_1_4+0x158>)
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d02d      	beq.n	8002506 <Tx_Analog_1_4+0x12e>
	{
		accCAN[ANALOG_1_4] -= perCAN[ANALOG_1_4];
 80024aa:	4b1a      	ldr	r3, [pc, #104]	; (8002514 <Tx_Analog_1_4+0x13c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a20      	ldr	r2, [pc, #128]	; (8002530 <Tx_Analog_1_4+0x158>)
 80024b0:	8812      	ldrh	r2, [r2, #0]
 80024b2:	1a9b      	subs	r3, r3, r2
 80024b4:	4a17      	ldr	r2, [pc, #92]	; (8002514 <Tx_Analog_1_4+0x13c>)
 80024b6:	6013      	str	r3, [r2, #0]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 80024b8:	4b1e      	ldr	r3, [pc, #120]	; (8002534 <Tx_Analog_1_4+0x15c>)
 80024ba:	4a19      	ldr	r2, [pc, #100]	; (8002520 <Tx_Analog_1_4+0x148>)
 80024bc:	4916      	ldr	r1, [pc, #88]	; (8002518 <Tx_Analog_1_4+0x140>)
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f005 fbae 	bl	8007c20 <HAL_CAN_AddTxMessage>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d107      	bne.n	80024da <Tx_Analog_1_4+0x102>
			verifyCAN |= 1;
 80024ca:	4b1b      	ldr	r3, [pc, #108]	; (8002538 <Tx_Analog_1_4+0x160>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	4b18      	ldr	r3, [pc, #96]	; (8002538 <Tx_Analog_1_4+0x160>)
 80024d6:	701a      	strb	r2, [r3, #0]
 80024d8:	e006      	b.n	80024e8 <Tx_Analog_1_4+0x110>
		else
			verifyCAN &= 0x02;
 80024da:	4b17      	ldr	r3, [pc, #92]	; (8002538 <Tx_Analog_1_4+0x160>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	4b14      	ldr	r3, [pc, #80]	; (8002538 <Tx_Analog_1_4+0x160>)
 80024e6:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 80024e8:	2300      	movs	r3, #0
 80024ea:	73fb      	strb	r3, [r7, #15]
 80024ec:	e002      	b.n	80024f4 <Tx_Analog_1_4+0x11c>
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	3301      	adds	r3, #1
 80024f2:	73fb      	strb	r3, [r7, #15]
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f005 fc6e 	bl	8007dd6 <HAL_CAN_GetTxMailboxesFreeLevel>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	d002      	beq.n	8002506 <Tx_Analog_1_4+0x12e>
 8002500:	7bfb      	ldrb	r3, [r7, #15]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d9f3      	bls.n	80024ee <Tx_Analog_1_4+0x116>
	}

	return;
 8002506:	bf00      	nop
}
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	2000678a 	.word	0x2000678a
 8002514:	20006748 	.word	0x20006748
 8002518:	2000055c 	.word	0x2000055c
 800251c:	20000578 	.word	0x20000578
 8002520:	20000534 	.word	0x20000534
 8002524:	200066fe 	.word	0x200066fe
 8002528:	200056a8 	.word	0x200056a8
 800252c:	20004640 	.word	0x20004640
 8002530:	2000671c 	.word	0x2000671c
 8002534:	2000053c 	.word	0x2000053c
 8002538:	20006788 	.word	0x20006788

0800253c <Tx_Analog_5_8>:

static void Tx_Analog_5_8(CAN_HandleTypeDef* hcan)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af02      	add	r7, sp, #8
 8002542:	6078      	str	r0, [r7, #4]
	if((verifyADC & 0x00f0) == 0x0000)
 8002544:	4b4b      	ldr	r3, [pc, #300]	; (8002674 <Tx_Analog_5_8+0x138>)
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d103      	bne.n	8002558 <Tx_Analog_5_8+0x1c>
	{
		accCAN[ANALOG_5_8] = 0;
 8002550:	4b49      	ldr	r3, [pc, #292]	; (8002678 <Tx_Analog_5_8+0x13c>)
 8002552:	2200      	movs	r2, #0
 8002554:	605a      	str	r2, [r3, #4]
		return;
 8002556:	e089      	b.n	800266c <Tx_Analog_5_8+0x130>
	}

	txHeader.IDE = CAN_ID_STD;
 8002558:	4b48      	ldr	r3, [pc, #288]	; (800267c <Tx_Analog_5_8+0x140>)
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 800255e:	4b47      	ldr	r3, [pc, #284]	; (800267c <Tx_Analog_5_8+0x140>)
 8002560:	2200      	movs	r2, #0
 8002562:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8002564:	4b45      	ldr	r3, [pc, #276]	; (800267c <Tx_Analog_5_8+0x140>)
 8002566:	2200      	movs	r2, #0
 8002568:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = FIRST_ID + ANALOG_5_8;
 800256a:	4b44      	ldr	r3, [pc, #272]	; (800267c <Tx_Analog_5_8+0x140>)
 800256c:	f240 5216 	movw	r2, #1302	; 0x516
 8002570:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 8;
 8002572:	4b42      	ldr	r3, [pc, #264]	; (800267c <Tx_Analog_5_8+0x140>)
 8002574:	2208      	movs	r2, #8
 8002576:	611a      	str	r2, [r3, #16]

	txData[0] = adcBuffer[4] >> 8;
 8002578:	4b41      	ldr	r3, [pc, #260]	; (8002680 <Tx_Analog_5_8+0x144>)
 800257a:	891b      	ldrh	r3, [r3, #8]
 800257c:	0a1b      	lsrs	r3, r3, #8
 800257e:	b29b      	uxth	r3, r3
 8002580:	b2da      	uxtb	r2, r3
 8002582:	4b40      	ldr	r3, [pc, #256]	; (8002684 <Tx_Analog_5_8+0x148>)
 8002584:	701a      	strb	r2, [r3, #0]
	txData[1] = adcBuffer[4] & 0xff;
 8002586:	4b3e      	ldr	r3, [pc, #248]	; (8002680 <Tx_Analog_5_8+0x144>)
 8002588:	891b      	ldrh	r3, [r3, #8]
 800258a:	b2da      	uxtb	r2, r3
 800258c:	4b3d      	ldr	r3, [pc, #244]	; (8002684 <Tx_Analog_5_8+0x148>)
 800258e:	705a      	strb	r2, [r3, #1]
	txData[2] = adcBuffer[5] >> 8;
 8002590:	4b3b      	ldr	r3, [pc, #236]	; (8002680 <Tx_Analog_5_8+0x144>)
 8002592:	895b      	ldrh	r3, [r3, #10]
 8002594:	0a1b      	lsrs	r3, r3, #8
 8002596:	b29b      	uxth	r3, r3
 8002598:	b2da      	uxtb	r2, r3
 800259a:	4b3a      	ldr	r3, [pc, #232]	; (8002684 <Tx_Analog_5_8+0x148>)
 800259c:	709a      	strb	r2, [r3, #2]
	txData[3] = adcBuffer[5] & 0xff;
 800259e:	4b38      	ldr	r3, [pc, #224]	; (8002680 <Tx_Analog_5_8+0x144>)
 80025a0:	895b      	ldrh	r3, [r3, #10]
 80025a2:	b2da      	uxtb	r2, r3
 80025a4:	4b37      	ldr	r3, [pc, #220]	; (8002684 <Tx_Analog_5_8+0x148>)
 80025a6:	70da      	strb	r2, [r3, #3]
	txData[4] = adcBuffer[6] >> 8;
 80025a8:	4b35      	ldr	r3, [pc, #212]	; (8002680 <Tx_Analog_5_8+0x144>)
 80025aa:	899b      	ldrh	r3, [r3, #12]
 80025ac:	0a1b      	lsrs	r3, r3, #8
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	4b34      	ldr	r3, [pc, #208]	; (8002684 <Tx_Analog_5_8+0x148>)
 80025b4:	711a      	strb	r2, [r3, #4]
	txData[5] = adcBuffer[6] & 0xff;
 80025b6:	4b32      	ldr	r3, [pc, #200]	; (8002680 <Tx_Analog_5_8+0x144>)
 80025b8:	899b      	ldrh	r3, [r3, #12]
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	4b31      	ldr	r3, [pc, #196]	; (8002684 <Tx_Analog_5_8+0x148>)
 80025be:	715a      	strb	r2, [r3, #5]
	txData[6] = adcBuffer[7] >> 8;
 80025c0:	4b2f      	ldr	r3, [pc, #188]	; (8002680 <Tx_Analog_5_8+0x144>)
 80025c2:	89db      	ldrh	r3, [r3, #14]
 80025c4:	0a1b      	lsrs	r3, r3, #8
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	4b2e      	ldr	r3, [pc, #184]	; (8002684 <Tx_Analog_5_8+0x148>)
 80025cc:	719a      	strb	r2, [r3, #6]
	txData[7] = adcBuffer[7] & 0xff;
 80025ce:	4b2c      	ldr	r3, [pc, #176]	; (8002680 <Tx_Analog_5_8+0x144>)
 80025d0:	89db      	ldrh	r3, [r3, #14]
 80025d2:	b2da      	uxtb	r2, r3
 80025d4:	4b2b      	ldr	r3, [pc, #172]	; (8002684 <Tx_Analog_5_8+0x148>)
 80025d6:	71da      	strb	r2, [r3, #7]

	if(flagDatalogger == DL_SAVE)
 80025d8:	4b2b      	ldr	r3, [pc, #172]	; (8002688 <Tx_Analog_5_8+0x14c>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d10c      	bne.n	80025fa <Tx_Analog_5_8+0xbe>
		Principal_Datalogger_Save_Buffer(hcan, txHeader.StdId, txHeader.DLC, txData, &dirStruct, &fileStruct);
 80025e0:	4b26      	ldr	r3, [pc, #152]	; (800267c <Tx_Analog_5_8+0x140>)
 80025e2:	6819      	ldr	r1, [r3, #0]
 80025e4:	4b25      	ldr	r3, [pc, #148]	; (800267c <Tx_Analog_5_8+0x140>)
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	4b28      	ldr	r3, [pc, #160]	; (800268c <Tx_Analog_5_8+0x150>)
 80025ec:	9301      	str	r3, [sp, #4]
 80025ee:	4b28      	ldr	r3, [pc, #160]	; (8002690 <Tx_Analog_5_8+0x154>)
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	4b24      	ldr	r3, [pc, #144]	; (8002684 <Tx_Analog_5_8+0x148>)
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f003 fd6d 	bl	80060d4 <Principal_Datalogger_Save_Buffer>

	if((accCAN[ANALOG_5_8] >= perCAN[ANALOG_5_8]) && (perCAN[ANALOG_5_8] != MSG_DISABLED))
 80025fa:	4b1f      	ldr	r3, [pc, #124]	; (8002678 <Tx_Analog_5_8+0x13c>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	4a25      	ldr	r2, [pc, #148]	; (8002694 <Tx_Analog_5_8+0x158>)
 8002600:	8852      	ldrh	r2, [r2, #2]
 8002602:	4293      	cmp	r3, r2
 8002604:	d331      	bcc.n	800266a <Tx_Analog_5_8+0x12e>
 8002606:	4b23      	ldr	r3, [pc, #140]	; (8002694 <Tx_Analog_5_8+0x158>)
 8002608:	885b      	ldrh	r3, [r3, #2]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d02d      	beq.n	800266a <Tx_Analog_5_8+0x12e>
	{
		accCAN[ANALOG_5_8] -= perCAN[ANALOG_5_8];
 800260e:	4b1a      	ldr	r3, [pc, #104]	; (8002678 <Tx_Analog_5_8+0x13c>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	4a20      	ldr	r2, [pc, #128]	; (8002694 <Tx_Analog_5_8+0x158>)
 8002614:	8852      	ldrh	r2, [r2, #2]
 8002616:	1a9b      	subs	r3, r3, r2
 8002618:	4a17      	ldr	r2, [pc, #92]	; (8002678 <Tx_Analog_5_8+0x13c>)
 800261a:	6053      	str	r3, [r2, #4]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 800261c:	4b1e      	ldr	r3, [pc, #120]	; (8002698 <Tx_Analog_5_8+0x15c>)
 800261e:	4a19      	ldr	r2, [pc, #100]	; (8002684 <Tx_Analog_5_8+0x148>)
 8002620:	4916      	ldr	r1, [pc, #88]	; (800267c <Tx_Analog_5_8+0x140>)
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f005 fafc 	bl	8007c20 <HAL_CAN_AddTxMessage>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d107      	bne.n	800263e <Tx_Analog_5_8+0x102>
			verifyCAN |= 1;
 800262e:	4b1b      	ldr	r3, [pc, #108]	; (800269c <Tx_Analog_5_8+0x160>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	b2da      	uxtb	r2, r3
 8002638:	4b18      	ldr	r3, [pc, #96]	; (800269c <Tx_Analog_5_8+0x160>)
 800263a:	701a      	strb	r2, [r3, #0]
 800263c:	e006      	b.n	800264c <Tx_Analog_5_8+0x110>
		else
			verifyCAN &= 0x02;
 800263e:	4b17      	ldr	r3, [pc, #92]	; (800269c <Tx_Analog_5_8+0x160>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	b2da      	uxtb	r2, r3
 8002648:	4b14      	ldr	r3, [pc, #80]	; (800269c <Tx_Analog_5_8+0x160>)
 800264a:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 800264c:	2300      	movs	r3, #0
 800264e:	73fb      	strb	r3, [r7, #15]
 8002650:	e002      	b.n	8002658 <Tx_Analog_5_8+0x11c>
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	3301      	adds	r3, #1
 8002656:	73fb      	strb	r3, [r7, #15]
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f005 fbbc 	bl	8007dd6 <HAL_CAN_GetTxMailboxesFreeLevel>
 800265e:	4603      	mov	r3, r0
 8002660:	2b03      	cmp	r3, #3
 8002662:	d002      	beq.n	800266a <Tx_Analog_5_8+0x12e>
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	2b02      	cmp	r3, #2
 8002668:	d9f3      	bls.n	8002652 <Tx_Analog_5_8+0x116>
	}

	return;
 800266a:	bf00      	nop
}
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	2000678a 	.word	0x2000678a
 8002678:	20006748 	.word	0x20006748
 800267c:	2000055c 	.word	0x2000055c
 8002680:	20000578 	.word	0x20000578
 8002684:	20000534 	.word	0x20000534
 8002688:	200066fe 	.word	0x200066fe
 800268c:	200056a8 	.word	0x200056a8
 8002690:	20004640 	.word	0x20004640
 8002694:	2000671c 	.word	0x2000671c
 8002698:	2000053c 	.word	0x2000053c
 800269c:	20006788 	.word	0x20006788

080026a0 <Tx_Analog_9_12>:

static void Tx_Analog_9_12(CAN_HandleTypeDef* hcan)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b086      	sub	sp, #24
 80026a4:	af02      	add	r7, sp, #8
 80026a6:	6078      	str	r0, [r7, #4]
	if((verifyADC & 0x0f00) == 0x0000)
 80026a8:	4b4f      	ldr	r3, [pc, #316]	; (80027e8 <Tx_Analog_9_12+0x148>)
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d103      	bne.n	80026bc <Tx_Analog_9_12+0x1c>
	{
		accCAN[ANALOG_9_12] = 0;
 80026b4:	4b4d      	ldr	r3, [pc, #308]	; (80027ec <Tx_Analog_9_12+0x14c>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	609a      	str	r2, [r3, #8]
		return;
 80026ba:	e092      	b.n	80027e2 <Tx_Analog_9_12+0x142>
	}

	txHeader.IDE = CAN_ID_STD;
 80026bc:	4b4c      	ldr	r3, [pc, #304]	; (80027f0 <Tx_Analog_9_12+0x150>)
 80026be:	2200      	movs	r2, #0
 80026c0:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 80026c2:	4b4b      	ldr	r3, [pc, #300]	; (80027f0 <Tx_Analog_9_12+0x150>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 80026c8:	4b49      	ldr	r3, [pc, #292]	; (80027f0 <Tx_Analog_9_12+0x150>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = FIRST_ID + ANALOG_9_12;
 80026ce:	4b48      	ldr	r3, [pc, #288]	; (80027f0 <Tx_Analog_9_12+0x150>)
 80026d0:	f240 5217 	movw	r2, #1303	; 0x517
 80026d4:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 8;
 80026d6:	4b46      	ldr	r3, [pc, #280]	; (80027f0 <Tx_Analog_9_12+0x150>)
 80026d8:	2208      	movs	r2, #8
 80026da:	611a      	str	r2, [r3, #16]

	if((verifyADC & 0x0f00) == 0)
 80026dc:	4b42      	ldr	r3, [pc, #264]	; (80027e8 <Tx_Analog_9_12+0x148>)
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d079      	beq.n	80027dc <Tx_Analog_9_12+0x13c>
		return;

	txData[0] = adcBuffer[8] >> 8;
 80026e8:	4b42      	ldr	r3, [pc, #264]	; (80027f4 <Tx_Analog_9_12+0x154>)
 80026ea:	8a1b      	ldrh	r3, [r3, #16]
 80026ec:	0a1b      	lsrs	r3, r3, #8
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	b2da      	uxtb	r2, r3
 80026f2:	4b41      	ldr	r3, [pc, #260]	; (80027f8 <Tx_Analog_9_12+0x158>)
 80026f4:	701a      	strb	r2, [r3, #0]
	txData[1] = adcBuffer[8] & 0xff;
 80026f6:	4b3f      	ldr	r3, [pc, #252]	; (80027f4 <Tx_Analog_9_12+0x154>)
 80026f8:	8a1b      	ldrh	r3, [r3, #16]
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	4b3e      	ldr	r3, [pc, #248]	; (80027f8 <Tx_Analog_9_12+0x158>)
 80026fe:	705a      	strb	r2, [r3, #1]
	txData[2] = adcBuffer[9] >> 8;
 8002700:	4b3c      	ldr	r3, [pc, #240]	; (80027f4 <Tx_Analog_9_12+0x154>)
 8002702:	8a5b      	ldrh	r3, [r3, #18]
 8002704:	0a1b      	lsrs	r3, r3, #8
 8002706:	b29b      	uxth	r3, r3
 8002708:	b2da      	uxtb	r2, r3
 800270a:	4b3b      	ldr	r3, [pc, #236]	; (80027f8 <Tx_Analog_9_12+0x158>)
 800270c:	709a      	strb	r2, [r3, #2]
	txData[3] = adcBuffer[9] & 0xff;
 800270e:	4b39      	ldr	r3, [pc, #228]	; (80027f4 <Tx_Analog_9_12+0x154>)
 8002710:	8a5b      	ldrh	r3, [r3, #18]
 8002712:	b2da      	uxtb	r2, r3
 8002714:	4b38      	ldr	r3, [pc, #224]	; (80027f8 <Tx_Analog_9_12+0x158>)
 8002716:	70da      	strb	r2, [r3, #3]
	txData[4] = adcBuffer[10] >> 8;
 8002718:	4b36      	ldr	r3, [pc, #216]	; (80027f4 <Tx_Analog_9_12+0x154>)
 800271a:	8a9b      	ldrh	r3, [r3, #20]
 800271c:	0a1b      	lsrs	r3, r3, #8
 800271e:	b29b      	uxth	r3, r3
 8002720:	b2da      	uxtb	r2, r3
 8002722:	4b35      	ldr	r3, [pc, #212]	; (80027f8 <Tx_Analog_9_12+0x158>)
 8002724:	711a      	strb	r2, [r3, #4]
	txData[5] = adcBuffer[10] & 0xff;
 8002726:	4b33      	ldr	r3, [pc, #204]	; (80027f4 <Tx_Analog_9_12+0x154>)
 8002728:	8a9b      	ldrh	r3, [r3, #20]
 800272a:	b2da      	uxtb	r2, r3
 800272c:	4b32      	ldr	r3, [pc, #200]	; (80027f8 <Tx_Analog_9_12+0x158>)
 800272e:	715a      	strb	r2, [r3, #5]
	txData[6] = adcBuffer[11] >> 8;
 8002730:	4b30      	ldr	r3, [pc, #192]	; (80027f4 <Tx_Analog_9_12+0x154>)
 8002732:	8adb      	ldrh	r3, [r3, #22]
 8002734:	0a1b      	lsrs	r3, r3, #8
 8002736:	b29b      	uxth	r3, r3
 8002738:	b2da      	uxtb	r2, r3
 800273a:	4b2f      	ldr	r3, [pc, #188]	; (80027f8 <Tx_Analog_9_12+0x158>)
 800273c:	719a      	strb	r2, [r3, #6]
	txData[7] = adcBuffer[11] & 0xff;
 800273e:	4b2d      	ldr	r3, [pc, #180]	; (80027f4 <Tx_Analog_9_12+0x154>)
 8002740:	8adb      	ldrh	r3, [r3, #22]
 8002742:	b2da      	uxtb	r2, r3
 8002744:	4b2c      	ldr	r3, [pc, #176]	; (80027f8 <Tx_Analog_9_12+0x158>)
 8002746:	71da      	strb	r2, [r3, #7]

	if(flagDatalogger == DL_SAVE)
 8002748:	4b2c      	ldr	r3, [pc, #176]	; (80027fc <Tx_Analog_9_12+0x15c>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d10c      	bne.n	800276a <Tx_Analog_9_12+0xca>
		Principal_Datalogger_Save_Buffer(hcan, txHeader.StdId, txHeader.DLC, txData, &dirStruct, &fileStruct);
 8002750:	4b27      	ldr	r3, [pc, #156]	; (80027f0 <Tx_Analog_9_12+0x150>)
 8002752:	6819      	ldr	r1, [r3, #0]
 8002754:	4b26      	ldr	r3, [pc, #152]	; (80027f0 <Tx_Analog_9_12+0x150>)
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	b2da      	uxtb	r2, r3
 800275a:	4b29      	ldr	r3, [pc, #164]	; (8002800 <Tx_Analog_9_12+0x160>)
 800275c:	9301      	str	r3, [sp, #4]
 800275e:	4b29      	ldr	r3, [pc, #164]	; (8002804 <Tx_Analog_9_12+0x164>)
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	4b25      	ldr	r3, [pc, #148]	; (80027f8 <Tx_Analog_9_12+0x158>)
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f003 fcb5 	bl	80060d4 <Principal_Datalogger_Save_Buffer>

	if((accCAN[ANALOG_9_12] >= perCAN[ANALOG_9_12]) && (perCAN[ANALOG_9_12] != MSG_DISABLED))
 800276a:	4b20      	ldr	r3, [pc, #128]	; (80027ec <Tx_Analog_9_12+0x14c>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	4a26      	ldr	r2, [pc, #152]	; (8002808 <Tx_Analog_9_12+0x168>)
 8002770:	8892      	ldrh	r2, [r2, #4]
 8002772:	4293      	cmp	r3, r2
 8002774:	d334      	bcc.n	80027e0 <Tx_Analog_9_12+0x140>
 8002776:	4b24      	ldr	r3, [pc, #144]	; (8002808 <Tx_Analog_9_12+0x168>)
 8002778:	889b      	ldrh	r3, [r3, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d030      	beq.n	80027e0 <Tx_Analog_9_12+0x140>
	{
		accCAN[ANALOG_9_12] -= perCAN[ANALOG_9_12];
 800277e:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <Tx_Analog_9_12+0x14c>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	4a21      	ldr	r2, [pc, #132]	; (8002808 <Tx_Analog_9_12+0x168>)
 8002784:	8892      	ldrh	r2, [r2, #4]
 8002786:	1a9b      	subs	r3, r3, r2
 8002788:	4a18      	ldr	r2, [pc, #96]	; (80027ec <Tx_Analog_9_12+0x14c>)
 800278a:	6093      	str	r3, [r2, #8]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 800278c:	4b1f      	ldr	r3, [pc, #124]	; (800280c <Tx_Analog_9_12+0x16c>)
 800278e:	4a1a      	ldr	r2, [pc, #104]	; (80027f8 <Tx_Analog_9_12+0x158>)
 8002790:	4917      	ldr	r1, [pc, #92]	; (80027f0 <Tx_Analog_9_12+0x150>)
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f005 fa44 	bl	8007c20 <HAL_CAN_AddTxMessage>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d107      	bne.n	80027ae <Tx_Analog_9_12+0x10e>
			verifyCAN |= 1;
 800279e:	4b1c      	ldr	r3, [pc, #112]	; (8002810 <Tx_Analog_9_12+0x170>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	4b19      	ldr	r3, [pc, #100]	; (8002810 <Tx_Analog_9_12+0x170>)
 80027aa:	701a      	strb	r2, [r3, #0]
 80027ac:	e006      	b.n	80027bc <Tx_Analog_9_12+0x11c>
		else
			verifyCAN &= 0x02;
 80027ae:	4b18      	ldr	r3, [pc, #96]	; (8002810 <Tx_Analog_9_12+0x170>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	b2da      	uxtb	r2, r3
 80027b8:	4b15      	ldr	r3, [pc, #84]	; (8002810 <Tx_Analog_9_12+0x170>)
 80027ba:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 80027bc:	2300      	movs	r3, #0
 80027be:	73fb      	strb	r3, [r7, #15]
 80027c0:	e002      	b.n	80027c8 <Tx_Analog_9_12+0x128>
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	3301      	adds	r3, #1
 80027c6:	73fb      	strb	r3, [r7, #15]
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f005 fb04 	bl	8007dd6 <HAL_CAN_GetTxMailboxesFreeLevel>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b03      	cmp	r3, #3
 80027d2:	d005      	beq.n	80027e0 <Tx_Analog_9_12+0x140>
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d9f3      	bls.n	80027c2 <Tx_Analog_9_12+0x122>
	}

	return;
 80027da:	e001      	b.n	80027e0 <Tx_Analog_9_12+0x140>
		return;
 80027dc:	bf00      	nop
 80027de:	e000      	b.n	80027e2 <Tx_Analog_9_12+0x142>
	return;
 80027e0:	bf00      	nop
}
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	2000678a 	.word	0x2000678a
 80027ec:	20006748 	.word	0x20006748
 80027f0:	2000055c 	.word	0x2000055c
 80027f4:	20000578 	.word	0x20000578
 80027f8:	20000534 	.word	0x20000534
 80027fc:	200066fe 	.word	0x200066fe
 8002800:	200056a8 	.word	0x200056a8
 8002804:	20004640 	.word	0x20004640
 8002808:	2000671c 	.word	0x2000671c
 800280c:	2000053c 	.word	0x2000053c
 8002810:	20006788 	.word	0x20006788

08002814 <Tx_RTC>:

static void Tx_RTC(CAN_HandleTypeDef* hcan)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af02      	add	r7, sp, #8
 800281a:	6078      	str	r0, [r7, #4]
	txHeader.IDE = CAN_ID_STD;
 800281c:	4b3f      	ldr	r3, [pc, #252]	; (800291c <Tx_RTC+0x108>)
 800281e:	2200      	movs	r2, #0
 8002820:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 8002822:	4b3e      	ldr	r3, [pc, #248]	; (800291c <Tx_RTC+0x108>)
 8002824:	2200      	movs	r2, #0
 8002826:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8002828:	4b3c      	ldr	r3, [pc, #240]	; (800291c <Tx_RTC+0x108>)
 800282a:	2200      	movs	r2, #0
 800282c:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = FIRST_ID + RTC_MSG;
 800282e:	4b3b      	ldr	r3, [pc, #236]	; (800291c <Tx_RTC+0x108>)
 8002830:	f44f 62a3 	mov.w	r2, #1304	; 0x518
 8002834:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 6;
 8002836:	4b39      	ldr	r3, [pc, #228]	; (800291c <Tx_RTC+0x108>)
 8002838:	2206      	movs	r2, #6
 800283a:	611a      	str	r2, [r3, #16]

	HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 800283c:	2200      	movs	r2, #0
 800283e:	4938      	ldr	r1, [pc, #224]	; (8002920 <Tx_RTC+0x10c>)
 8002840:	4838      	ldr	r0, [pc, #224]	; (8002924 <Tx_RTC+0x110>)
 8002842:	f00a fa1d 	bl	800cc80 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 8002846:	2200      	movs	r2, #0
 8002848:	4937      	ldr	r1, [pc, #220]	; (8002928 <Tx_RTC+0x114>)
 800284a:	4836      	ldr	r0, [pc, #216]	; (8002924 <Tx_RTC+0x110>)
 800284c:	f00a fafa 	bl	800ce44 <HAL_RTC_GetDate>

	txData[0] = rtcDate.Year;
 8002850:	4b35      	ldr	r3, [pc, #212]	; (8002928 <Tx_RTC+0x114>)
 8002852:	78da      	ldrb	r2, [r3, #3]
 8002854:	4b35      	ldr	r3, [pc, #212]	; (800292c <Tx_RTC+0x118>)
 8002856:	701a      	strb	r2, [r3, #0]
	txData[1] = rtcDate.Month;
 8002858:	4b33      	ldr	r3, [pc, #204]	; (8002928 <Tx_RTC+0x114>)
 800285a:	785a      	ldrb	r2, [r3, #1]
 800285c:	4b33      	ldr	r3, [pc, #204]	; (800292c <Tx_RTC+0x118>)
 800285e:	705a      	strb	r2, [r3, #1]
	txData[2] = rtcDate.Date;
 8002860:	4b31      	ldr	r3, [pc, #196]	; (8002928 <Tx_RTC+0x114>)
 8002862:	789a      	ldrb	r2, [r3, #2]
 8002864:	4b31      	ldr	r3, [pc, #196]	; (800292c <Tx_RTC+0x118>)
 8002866:	709a      	strb	r2, [r3, #2]
	txData[3] = rtcTime.Hours;
 8002868:	4b2d      	ldr	r3, [pc, #180]	; (8002920 <Tx_RTC+0x10c>)
 800286a:	781a      	ldrb	r2, [r3, #0]
 800286c:	4b2f      	ldr	r3, [pc, #188]	; (800292c <Tx_RTC+0x118>)
 800286e:	70da      	strb	r2, [r3, #3]
	txData[4] = rtcTime.Minutes;
 8002870:	4b2b      	ldr	r3, [pc, #172]	; (8002920 <Tx_RTC+0x10c>)
 8002872:	785a      	ldrb	r2, [r3, #1]
 8002874:	4b2d      	ldr	r3, [pc, #180]	; (800292c <Tx_RTC+0x118>)
 8002876:	711a      	strb	r2, [r3, #4]
	txData[5] = rtcTime.Seconds;
 8002878:	4b29      	ldr	r3, [pc, #164]	; (8002920 <Tx_RTC+0x10c>)
 800287a:	789a      	ldrb	r2, [r3, #2]
 800287c:	4b2b      	ldr	r3, [pc, #172]	; (800292c <Tx_RTC+0x118>)
 800287e:	715a      	strb	r2, [r3, #5]


	if(flagDatalogger == DL_SAVE)
 8002880:	4b2b      	ldr	r3, [pc, #172]	; (8002930 <Tx_RTC+0x11c>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d10c      	bne.n	80028a2 <Tx_RTC+0x8e>
		Principal_Datalogger_Save_Buffer(hcan, txHeader.StdId, txHeader.DLC, txData, &dirStruct, &fileStruct);
 8002888:	4b24      	ldr	r3, [pc, #144]	; (800291c <Tx_RTC+0x108>)
 800288a:	6819      	ldr	r1, [r3, #0]
 800288c:	4b23      	ldr	r3, [pc, #140]	; (800291c <Tx_RTC+0x108>)
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	b2da      	uxtb	r2, r3
 8002892:	4b28      	ldr	r3, [pc, #160]	; (8002934 <Tx_RTC+0x120>)
 8002894:	9301      	str	r3, [sp, #4]
 8002896:	4b28      	ldr	r3, [pc, #160]	; (8002938 <Tx_RTC+0x124>)
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	4b24      	ldr	r3, [pc, #144]	; (800292c <Tx_RTC+0x118>)
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f003 fc19 	bl	80060d4 <Principal_Datalogger_Save_Buffer>

	if((accCAN[RTC_MSG] >= perCAN[RTC_MSG]) && (perCAN[RTC_MSG] != MSG_DISABLED))
 80028a2:	4b26      	ldr	r3, [pc, #152]	; (800293c <Tx_RTC+0x128>)
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	4a26      	ldr	r2, [pc, #152]	; (8002940 <Tx_RTC+0x12c>)
 80028a8:	88d2      	ldrh	r2, [r2, #6]
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d332      	bcc.n	8002914 <Tx_RTC+0x100>
 80028ae:	4b24      	ldr	r3, [pc, #144]	; (8002940 <Tx_RTC+0x12c>)
 80028b0:	88db      	ldrh	r3, [r3, #6]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d02e      	beq.n	8002914 <Tx_RTC+0x100>
	{
		accCAN[RTC_MSG] -= perCAN[RTC_MSG];
 80028b6:	4b21      	ldr	r3, [pc, #132]	; (800293c <Tx_RTC+0x128>)
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	4a21      	ldr	r2, [pc, #132]	; (8002940 <Tx_RTC+0x12c>)
 80028bc:	88d2      	ldrh	r2, [r2, #6]
 80028be:	1a9b      	subs	r3, r3, r2
 80028c0:	4a1e      	ldr	r2, [pc, #120]	; (800293c <Tx_RTC+0x128>)
 80028c2:	60d3      	str	r3, [r2, #12]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 80028c4:	4b1f      	ldr	r3, [pc, #124]	; (8002944 <Tx_RTC+0x130>)
 80028c6:	4a19      	ldr	r2, [pc, #100]	; (800292c <Tx_RTC+0x118>)
 80028c8:	4914      	ldr	r1, [pc, #80]	; (800291c <Tx_RTC+0x108>)
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f005 f9a8 	bl	8007c20 <HAL_CAN_AddTxMessage>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d107      	bne.n	80028e6 <Tx_RTC+0xd2>
			verifyCAN |= 1;
 80028d6:	4b1c      	ldr	r3, [pc, #112]	; (8002948 <Tx_RTC+0x134>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	b2da      	uxtb	r2, r3
 80028e0:	4b19      	ldr	r3, [pc, #100]	; (8002948 <Tx_RTC+0x134>)
 80028e2:	701a      	strb	r2, [r3, #0]
 80028e4:	e006      	b.n	80028f4 <Tx_RTC+0xe0>
		else
			verifyCAN &= 0x02;
 80028e6:	4b18      	ldr	r3, [pc, #96]	; (8002948 <Tx_RTC+0x134>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	4b15      	ldr	r3, [pc, #84]	; (8002948 <Tx_RTC+0x134>)
 80028f2:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 80028f4:	2300      	movs	r3, #0
 80028f6:	73fb      	strb	r3, [r7, #15]
 80028f8:	e002      	b.n	8002900 <Tx_RTC+0xec>
 80028fa:	7bfb      	ldrb	r3, [r7, #15]
 80028fc:	3301      	adds	r3, #1
 80028fe:	73fb      	strb	r3, [r7, #15]
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f005 fa68 	bl	8007dd6 <HAL_CAN_GetTxMailboxesFreeLevel>
 8002906:	4603      	mov	r3, r0
 8002908:	2b03      	cmp	r3, #3
 800290a:	d003      	beq.n	8002914 <Tx_RTC+0x100>
 800290c:	7bfb      	ldrb	r3, [r7, #15]
 800290e:	2b02      	cmp	r3, #2
 8002910:	d9f3      	bls.n	80028fa <Tx_RTC+0xe6>
	}

	return;
 8002912:	bf00      	nop
 8002914:	bf00      	nop
}
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	2000055c 	.word	0x2000055c
 8002920:	20006708 	.word	0x20006708
 8002924:	20000380 	.word	0x20000380
 8002928:	20006704 	.word	0x20006704
 800292c:	20000534 	.word	0x20000534
 8002930:	200066fe 	.word	0x200066fe
 8002934:	200056a8 	.word	0x200056a8
 8002938:	20004640 	.word	0x20004640
 800293c:	20006748 	.word	0x20006748
 8002940:	2000671c 	.word	0x2000671c
 8002944:	2000053c 	.word	0x2000053c
 8002948:	20006788 	.word	0x20006788

0800294c <Tx_Verify>:

static void Tx_Verify(CAN_HandleTypeDef* hcan)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af02      	add	r7, sp, #8
 8002952:	6078      	str	r0, [r7, #4]
	txHeader.IDE = CAN_ID_STD;
 8002954:	4bc8      	ldr	r3, [pc, #800]	; (8002c78 <Tx_Verify+0x32c>)
 8002956:	2200      	movs	r2, #0
 8002958:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 800295a:	4bc7      	ldr	r3, [pc, #796]	; (8002c78 <Tx_Verify+0x32c>)
 800295c:	2200      	movs	r2, #0
 800295e:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8002960:	4bc5      	ldr	r3, [pc, #788]	; (8002c78 <Tx_Verify+0x32c>)
 8002962:	2200      	movs	r2, #0
 8002964:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = FIRST_ID + VERIFY_MSG;
 8002966:	4bc4      	ldr	r3, [pc, #784]	; (8002c78 <Tx_Verify+0x32c>)
 8002968:	f240 5219 	movw	r2, #1305	; 0x519
 800296c:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 8;
 800296e:	4bc2      	ldr	r3, [pc, #776]	; (8002c78 <Tx_Verify+0x32c>)
 8002970:	2208      	movs	r2, #8
 8002972:	611a      	str	r2, [r3, #16]

	txData[0] = verifyADC & 0xff;
 8002974:	4bc1      	ldr	r3, [pc, #772]	; (8002c7c <Tx_Verify+0x330>)
 8002976:	881b      	ldrh	r3, [r3, #0]
 8002978:	b2da      	uxtb	r2, r3
 800297a:	4bc1      	ldr	r3, [pc, #772]	; (8002c80 <Tx_Verify+0x334>)
 800297c:	701a      	strb	r2, [r3, #0]
	txData[1] = (verifyADC >> 8) & 0x0f;
 800297e:	4bbf      	ldr	r3, [pc, #764]	; (8002c7c <Tx_Verify+0x330>)
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	0a1b      	lsrs	r3, r3, #8
 8002984:	b29b      	uxth	r3, r3
 8002986:	b2db      	uxtb	r3, r3
 8002988:	f003 030f 	and.w	r3, r3, #15
 800298c:	b2da      	uxtb	r2, r3
 800298e:	4bbc      	ldr	r3, [pc, #752]	; (8002c80 <Tx_Verify+0x334>)
 8002990:	705a      	strb	r2, [r3, #1]

	if(flagDatalogger == DL_SAVE)
 8002992:	4bbc      	ldr	r3, [pc, #752]	; (8002c84 <Tx_Verify+0x338>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d10d      	bne.n	80029b6 <Tx_Verify+0x6a>
	{
		txData[1] |= (1 << 4);
 800299a:	4bb9      	ldr	r3, [pc, #740]	; (8002c80 <Tx_Verify+0x334>)
 800299c:	785b      	ldrb	r3, [r3, #1]
 800299e:	f043 0310 	orr.w	r3, r3, #16
 80029a2:	b2da      	uxtb	r2, r3
 80029a4:	4bb6      	ldr	r3, [pc, #728]	; (8002c80 <Tx_Verify+0x334>)
 80029a6:	705a      	strb	r2, [r3, #1]
		HAL_GPIO_WritePin(OUT0_GPIO_Port, OUT0_Pin, GPIO_PIN_RESET);
 80029a8:	2200      	movs	r2, #0
 80029aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029ae:	48b6      	ldr	r0, [pc, #728]	; (8002c88 <Tx_Verify+0x33c>)
 80029b0:	f006 fc30 	bl	8009214 <HAL_GPIO_WritePin>
 80029b4:	e005      	b.n	80029c2 <Tx_Verify+0x76>
	}
	else
		HAL_GPIO_WritePin(OUT0_GPIO_Port, OUT0_Pin, GPIO_PIN_SET);
 80029b6:	2201      	movs	r2, #1
 80029b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029bc:	48b2      	ldr	r0, [pc, #712]	; (8002c88 <Tx_Verify+0x33c>)
 80029be:	f006 fc29 	bl	8009214 <HAL_GPIO_WritePin>

	if(flagRTC == RTC_OK)
 80029c2:	4bb2      	ldr	r3, [pc, #712]	; (8002c8c <Tx_Verify+0x340>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d106      	bne.n	80029d8 <Tx_Verify+0x8c>
		txData[1] |= (1 << 5);
 80029ca:	4bad      	ldr	r3, [pc, #692]	; (8002c80 <Tx_Verify+0x334>)
 80029cc:	785b      	ldrb	r3, [r3, #1]
 80029ce:	f043 0320 	orr.w	r3, r3, #32
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	4baa      	ldr	r3, [pc, #680]	; (8002c80 <Tx_Verify+0x334>)
 80029d6:	705a      	strb	r2, [r3, #1]

	__FREQ_TO_BUFFER(txData[2], perMsg[ANALOG_1_4]);
 80029d8:	4bad      	ldr	r3, [pc, #692]	; (8002c90 <Tx_Verify+0x344>)
 80029da:	881b      	ldrh	r3, [r3, #0]
 80029dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029e0:	f000 8081 	beq.w	8002ae6 <Tx_Verify+0x19a>
 80029e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029e8:	f300 80a9 	bgt.w	8002b3e <Tx_Verify+0x1f2>
 80029ec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80029f0:	d07d      	beq.n	8002aee <Tx_Verify+0x1a2>
 80029f2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80029f6:	f300 80a2 	bgt.w	8002b3e <Tx_Verify+0x1f2>
 80029fa:	2bc8      	cmp	r3, #200	; 0xc8
 80029fc:	d07b      	beq.n	8002af6 <Tx_Verify+0x1aa>
 80029fe:	2bc8      	cmp	r3, #200	; 0xc8
 8002a00:	f300 809d 	bgt.w	8002b3e <Tx_Verify+0x1f2>
 8002a04:	2b32      	cmp	r3, #50	; 0x32
 8002a06:	dc6b      	bgt.n	8002ae0 <Tx_Verify+0x194>
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	f2c0 8098 	blt.w	8002b3e <Tx_Verify+0x1f2>
 8002a0e:	3b02      	subs	r3, #2
 8002a10:	2b30      	cmp	r3, #48	; 0x30
 8002a12:	f200 8094 	bhi.w	8002b3e <Tx_Verify+0x1f2>
 8002a16:	a201      	add	r2, pc, #4	; (adr r2, 8002a1c <Tx_Verify+0xd0>)
 8002a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1c:	08002b37 	.word	0x08002b37
 8002a20:	08002b3f 	.word	0x08002b3f
 8002a24:	08002b2f 	.word	0x08002b2f
 8002a28:	08002b27 	.word	0x08002b27
 8002a2c:	08002b3f 	.word	0x08002b3f
 8002a30:	08002b3f 	.word	0x08002b3f
 8002a34:	08002b3f 	.word	0x08002b3f
 8002a38:	08002b3f 	.word	0x08002b3f
 8002a3c:	08002b1f 	.word	0x08002b1f
 8002a40:	08002b3f 	.word	0x08002b3f
 8002a44:	08002b3f 	.word	0x08002b3f
 8002a48:	08002b3f 	.word	0x08002b3f
 8002a4c:	08002b3f 	.word	0x08002b3f
 8002a50:	08002b3f 	.word	0x08002b3f
 8002a54:	08002b3f 	.word	0x08002b3f
 8002a58:	08002b3f 	.word	0x08002b3f
 8002a5c:	08002b3f 	.word	0x08002b3f
 8002a60:	08002b3f 	.word	0x08002b3f
 8002a64:	08002b17 	.word	0x08002b17
 8002a68:	08002b3f 	.word	0x08002b3f
 8002a6c:	08002b3f 	.word	0x08002b3f
 8002a70:	08002b3f 	.word	0x08002b3f
 8002a74:	08002b3f 	.word	0x08002b3f
 8002a78:	08002b3f 	.word	0x08002b3f
 8002a7c:	08002b3f 	.word	0x08002b3f
 8002a80:	08002b3f 	.word	0x08002b3f
 8002a84:	08002b3f 	.word	0x08002b3f
 8002a88:	08002b3f 	.word	0x08002b3f
 8002a8c:	08002b3f 	.word	0x08002b3f
 8002a90:	08002b3f 	.word	0x08002b3f
 8002a94:	08002b3f 	.word	0x08002b3f
 8002a98:	08002b3f 	.word	0x08002b3f
 8002a9c:	08002b3f 	.word	0x08002b3f
 8002aa0:	08002b3f 	.word	0x08002b3f
 8002aa4:	08002b3f 	.word	0x08002b3f
 8002aa8:	08002b3f 	.word	0x08002b3f
 8002aac:	08002b3f 	.word	0x08002b3f
 8002ab0:	08002b3f 	.word	0x08002b3f
 8002ab4:	08002b0f 	.word	0x08002b0f
 8002ab8:	08002b3f 	.word	0x08002b3f
 8002abc:	08002b3f 	.word	0x08002b3f
 8002ac0:	08002b3f 	.word	0x08002b3f
 8002ac4:	08002b3f 	.word	0x08002b3f
 8002ac8:	08002b3f 	.word	0x08002b3f
 8002acc:	08002b3f 	.word	0x08002b3f
 8002ad0:	08002b3f 	.word	0x08002b3f
 8002ad4:	08002b3f 	.word	0x08002b3f
 8002ad8:	08002b3f 	.word	0x08002b3f
 8002adc:	08002b07 	.word	0x08002b07
 8002ae0:	2b64      	cmp	r3, #100	; 0x64
 8002ae2:	d00c      	beq.n	8002afe <Tx_Verify+0x1b2>
 8002ae4:	e02b      	b.n	8002b3e <Tx_Verify+0x1f2>
 8002ae6:	4b66      	ldr	r3, [pc, #408]	; (8002c80 <Tx_Verify+0x334>)
 8002ae8:	2201      	movs	r2, #1
 8002aea:	709a      	strb	r2, [r3, #2]
 8002aec:	e02a      	b.n	8002b44 <Tx_Verify+0x1f8>
 8002aee:	4b64      	ldr	r3, [pc, #400]	; (8002c80 <Tx_Verify+0x334>)
 8002af0:	2202      	movs	r2, #2
 8002af2:	709a      	strb	r2, [r3, #2]
 8002af4:	e026      	b.n	8002b44 <Tx_Verify+0x1f8>
 8002af6:	4b62      	ldr	r3, [pc, #392]	; (8002c80 <Tx_Verify+0x334>)
 8002af8:	2203      	movs	r2, #3
 8002afa:	709a      	strb	r2, [r3, #2]
 8002afc:	e022      	b.n	8002b44 <Tx_Verify+0x1f8>
 8002afe:	4b60      	ldr	r3, [pc, #384]	; (8002c80 <Tx_Verify+0x334>)
 8002b00:	2204      	movs	r2, #4
 8002b02:	709a      	strb	r2, [r3, #2]
 8002b04:	e01e      	b.n	8002b44 <Tx_Verify+0x1f8>
 8002b06:	4b5e      	ldr	r3, [pc, #376]	; (8002c80 <Tx_Verify+0x334>)
 8002b08:	2205      	movs	r2, #5
 8002b0a:	709a      	strb	r2, [r3, #2]
 8002b0c:	e01a      	b.n	8002b44 <Tx_Verify+0x1f8>
 8002b0e:	4b5c      	ldr	r3, [pc, #368]	; (8002c80 <Tx_Verify+0x334>)
 8002b10:	2206      	movs	r2, #6
 8002b12:	709a      	strb	r2, [r3, #2]
 8002b14:	e016      	b.n	8002b44 <Tx_Verify+0x1f8>
 8002b16:	4b5a      	ldr	r3, [pc, #360]	; (8002c80 <Tx_Verify+0x334>)
 8002b18:	2207      	movs	r2, #7
 8002b1a:	709a      	strb	r2, [r3, #2]
 8002b1c:	e012      	b.n	8002b44 <Tx_Verify+0x1f8>
 8002b1e:	4b58      	ldr	r3, [pc, #352]	; (8002c80 <Tx_Verify+0x334>)
 8002b20:	2208      	movs	r2, #8
 8002b22:	709a      	strb	r2, [r3, #2]
 8002b24:	e00e      	b.n	8002b44 <Tx_Verify+0x1f8>
 8002b26:	4b56      	ldr	r3, [pc, #344]	; (8002c80 <Tx_Verify+0x334>)
 8002b28:	2209      	movs	r2, #9
 8002b2a:	709a      	strb	r2, [r3, #2]
 8002b2c:	e00a      	b.n	8002b44 <Tx_Verify+0x1f8>
 8002b2e:	4b54      	ldr	r3, [pc, #336]	; (8002c80 <Tx_Verify+0x334>)
 8002b30:	220a      	movs	r2, #10
 8002b32:	709a      	strb	r2, [r3, #2]
 8002b34:	e006      	b.n	8002b44 <Tx_Verify+0x1f8>
 8002b36:	4b52      	ldr	r3, [pc, #328]	; (8002c80 <Tx_Verify+0x334>)
 8002b38:	220b      	movs	r2, #11
 8002b3a:	709a      	strb	r2, [r3, #2]
 8002b3c:	e002      	b.n	8002b44 <Tx_Verify+0x1f8>
 8002b3e:	4b50      	ldr	r3, [pc, #320]	; (8002c80 <Tx_Verify+0x334>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	709a      	strb	r2, [r3, #2]
 8002b44:	bf00      	nop
	__FREQ_TO_BUFFER(txData[3], perMsg[ANALOG_5_8]);
 8002b46:	4b52      	ldr	r3, [pc, #328]	; (8002c90 <Tx_Verify+0x344>)
 8002b48:	885b      	ldrh	r3, [r3, #2]
 8002b4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b4e:	f000 8082 	beq.w	8002c56 <Tx_Verify+0x30a>
 8002b52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b56:	f300 80b9 	bgt.w	8002ccc <Tx_Verify+0x380>
 8002b5a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b5e:	d07e      	beq.n	8002c5e <Tx_Verify+0x312>
 8002b60:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b64:	f300 80b2 	bgt.w	8002ccc <Tx_Verify+0x380>
 8002b68:	2bc8      	cmp	r3, #200	; 0xc8
 8002b6a:	d07c      	beq.n	8002c66 <Tx_Verify+0x31a>
 8002b6c:	2bc8      	cmp	r3, #200	; 0xc8
 8002b6e:	f300 80ad 	bgt.w	8002ccc <Tx_Verify+0x380>
 8002b72:	2b32      	cmp	r3, #50	; 0x32
 8002b74:	dc6c      	bgt.n	8002c50 <Tx_Verify+0x304>
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	f2c0 80a8 	blt.w	8002ccc <Tx_Verify+0x380>
 8002b7c:	3b02      	subs	r3, #2
 8002b7e:	2b30      	cmp	r3, #48	; 0x30
 8002b80:	f200 80a4 	bhi.w	8002ccc <Tx_Verify+0x380>
 8002b84:	a201      	add	r2, pc, #4	; (adr r2, 8002b8c <Tx_Verify+0x240>)
 8002b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b8a:	bf00      	nop
 8002b8c:	08002cc5 	.word	0x08002cc5
 8002b90:	08002ccd 	.word	0x08002ccd
 8002b94:	08002cbd 	.word	0x08002cbd
 8002b98:	08002cb5 	.word	0x08002cb5
 8002b9c:	08002ccd 	.word	0x08002ccd
 8002ba0:	08002ccd 	.word	0x08002ccd
 8002ba4:	08002ccd 	.word	0x08002ccd
 8002ba8:	08002ccd 	.word	0x08002ccd
 8002bac:	08002cad 	.word	0x08002cad
 8002bb0:	08002ccd 	.word	0x08002ccd
 8002bb4:	08002ccd 	.word	0x08002ccd
 8002bb8:	08002ccd 	.word	0x08002ccd
 8002bbc:	08002ccd 	.word	0x08002ccd
 8002bc0:	08002ccd 	.word	0x08002ccd
 8002bc4:	08002ccd 	.word	0x08002ccd
 8002bc8:	08002ccd 	.word	0x08002ccd
 8002bcc:	08002ccd 	.word	0x08002ccd
 8002bd0:	08002ccd 	.word	0x08002ccd
 8002bd4:	08002ca5 	.word	0x08002ca5
 8002bd8:	08002ccd 	.word	0x08002ccd
 8002bdc:	08002ccd 	.word	0x08002ccd
 8002be0:	08002ccd 	.word	0x08002ccd
 8002be4:	08002ccd 	.word	0x08002ccd
 8002be8:	08002ccd 	.word	0x08002ccd
 8002bec:	08002ccd 	.word	0x08002ccd
 8002bf0:	08002ccd 	.word	0x08002ccd
 8002bf4:	08002ccd 	.word	0x08002ccd
 8002bf8:	08002ccd 	.word	0x08002ccd
 8002bfc:	08002ccd 	.word	0x08002ccd
 8002c00:	08002ccd 	.word	0x08002ccd
 8002c04:	08002ccd 	.word	0x08002ccd
 8002c08:	08002ccd 	.word	0x08002ccd
 8002c0c:	08002ccd 	.word	0x08002ccd
 8002c10:	08002ccd 	.word	0x08002ccd
 8002c14:	08002ccd 	.word	0x08002ccd
 8002c18:	08002ccd 	.word	0x08002ccd
 8002c1c:	08002ccd 	.word	0x08002ccd
 8002c20:	08002ccd 	.word	0x08002ccd
 8002c24:	08002c9d 	.word	0x08002c9d
 8002c28:	08002ccd 	.word	0x08002ccd
 8002c2c:	08002ccd 	.word	0x08002ccd
 8002c30:	08002ccd 	.word	0x08002ccd
 8002c34:	08002ccd 	.word	0x08002ccd
 8002c38:	08002ccd 	.word	0x08002ccd
 8002c3c:	08002ccd 	.word	0x08002ccd
 8002c40:	08002ccd 	.word	0x08002ccd
 8002c44:	08002ccd 	.word	0x08002ccd
 8002c48:	08002ccd 	.word	0x08002ccd
 8002c4c:	08002c95 	.word	0x08002c95
 8002c50:	2b64      	cmp	r3, #100	; 0x64
 8002c52:	d00c      	beq.n	8002c6e <Tx_Verify+0x322>
 8002c54:	e03a      	b.n	8002ccc <Tx_Verify+0x380>
 8002c56:	4b0a      	ldr	r3, [pc, #40]	; (8002c80 <Tx_Verify+0x334>)
 8002c58:	2201      	movs	r2, #1
 8002c5a:	70da      	strb	r2, [r3, #3]
 8002c5c:	e039      	b.n	8002cd2 <Tx_Verify+0x386>
 8002c5e:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <Tx_Verify+0x334>)
 8002c60:	2202      	movs	r2, #2
 8002c62:	70da      	strb	r2, [r3, #3]
 8002c64:	e035      	b.n	8002cd2 <Tx_Verify+0x386>
 8002c66:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <Tx_Verify+0x334>)
 8002c68:	2203      	movs	r2, #3
 8002c6a:	70da      	strb	r2, [r3, #3]
 8002c6c:	e031      	b.n	8002cd2 <Tx_Verify+0x386>
 8002c6e:	4b04      	ldr	r3, [pc, #16]	; (8002c80 <Tx_Verify+0x334>)
 8002c70:	2204      	movs	r2, #4
 8002c72:	70da      	strb	r2, [r3, #3]
 8002c74:	e02d      	b.n	8002cd2 <Tx_Verify+0x386>
 8002c76:	bf00      	nop
 8002c78:	2000055c 	.word	0x2000055c
 8002c7c:	2000678a 	.word	0x2000678a
 8002c80:	20000534 	.word	0x20000534
 8002c84:	200066fe 	.word	0x200066fe
 8002c88:	40020400 	.word	0x40020400
 8002c8c:	200066ff 	.word	0x200066ff
 8002c90:	20006728 	.word	0x20006728
 8002c94:	4bc5      	ldr	r3, [pc, #788]	; (8002fac <Tx_Verify+0x660>)
 8002c96:	2205      	movs	r2, #5
 8002c98:	70da      	strb	r2, [r3, #3]
 8002c9a:	e01a      	b.n	8002cd2 <Tx_Verify+0x386>
 8002c9c:	4bc3      	ldr	r3, [pc, #780]	; (8002fac <Tx_Verify+0x660>)
 8002c9e:	2206      	movs	r2, #6
 8002ca0:	70da      	strb	r2, [r3, #3]
 8002ca2:	e016      	b.n	8002cd2 <Tx_Verify+0x386>
 8002ca4:	4bc1      	ldr	r3, [pc, #772]	; (8002fac <Tx_Verify+0x660>)
 8002ca6:	2207      	movs	r2, #7
 8002ca8:	70da      	strb	r2, [r3, #3]
 8002caa:	e012      	b.n	8002cd2 <Tx_Verify+0x386>
 8002cac:	4bbf      	ldr	r3, [pc, #764]	; (8002fac <Tx_Verify+0x660>)
 8002cae:	2208      	movs	r2, #8
 8002cb0:	70da      	strb	r2, [r3, #3]
 8002cb2:	e00e      	b.n	8002cd2 <Tx_Verify+0x386>
 8002cb4:	4bbd      	ldr	r3, [pc, #756]	; (8002fac <Tx_Verify+0x660>)
 8002cb6:	2209      	movs	r2, #9
 8002cb8:	70da      	strb	r2, [r3, #3]
 8002cba:	e00a      	b.n	8002cd2 <Tx_Verify+0x386>
 8002cbc:	4bbb      	ldr	r3, [pc, #748]	; (8002fac <Tx_Verify+0x660>)
 8002cbe:	220a      	movs	r2, #10
 8002cc0:	70da      	strb	r2, [r3, #3]
 8002cc2:	e006      	b.n	8002cd2 <Tx_Verify+0x386>
 8002cc4:	4bb9      	ldr	r3, [pc, #740]	; (8002fac <Tx_Verify+0x660>)
 8002cc6:	220b      	movs	r2, #11
 8002cc8:	70da      	strb	r2, [r3, #3]
 8002cca:	e002      	b.n	8002cd2 <Tx_Verify+0x386>
 8002ccc:	4bb7      	ldr	r3, [pc, #732]	; (8002fac <Tx_Verify+0x660>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	70da      	strb	r2, [r3, #3]
 8002cd2:	bf00      	nop
	__FREQ_TO_BUFFER(txData[4], perMsg[ANALOG_9_12]);
 8002cd4:	4bb6      	ldr	r3, [pc, #728]	; (8002fb0 <Tx_Verify+0x664>)
 8002cd6:	889b      	ldrh	r3, [r3, #4]
 8002cd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cdc:	f000 8081 	beq.w	8002de2 <Tx_Verify+0x496>
 8002ce0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ce4:	f300 80a9 	bgt.w	8002e3a <Tx_Verify+0x4ee>
 8002ce8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002cec:	d07d      	beq.n	8002dea <Tx_Verify+0x49e>
 8002cee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002cf2:	f300 80a2 	bgt.w	8002e3a <Tx_Verify+0x4ee>
 8002cf6:	2bc8      	cmp	r3, #200	; 0xc8
 8002cf8:	d07b      	beq.n	8002df2 <Tx_Verify+0x4a6>
 8002cfa:	2bc8      	cmp	r3, #200	; 0xc8
 8002cfc:	f300 809d 	bgt.w	8002e3a <Tx_Verify+0x4ee>
 8002d00:	2b32      	cmp	r3, #50	; 0x32
 8002d02:	dc6b      	bgt.n	8002ddc <Tx_Verify+0x490>
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	f2c0 8098 	blt.w	8002e3a <Tx_Verify+0x4ee>
 8002d0a:	3b02      	subs	r3, #2
 8002d0c:	2b30      	cmp	r3, #48	; 0x30
 8002d0e:	f200 8094 	bhi.w	8002e3a <Tx_Verify+0x4ee>
 8002d12:	a201      	add	r2, pc, #4	; (adr r2, 8002d18 <Tx_Verify+0x3cc>)
 8002d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d18:	08002e33 	.word	0x08002e33
 8002d1c:	08002e3b 	.word	0x08002e3b
 8002d20:	08002e2b 	.word	0x08002e2b
 8002d24:	08002e23 	.word	0x08002e23
 8002d28:	08002e3b 	.word	0x08002e3b
 8002d2c:	08002e3b 	.word	0x08002e3b
 8002d30:	08002e3b 	.word	0x08002e3b
 8002d34:	08002e3b 	.word	0x08002e3b
 8002d38:	08002e1b 	.word	0x08002e1b
 8002d3c:	08002e3b 	.word	0x08002e3b
 8002d40:	08002e3b 	.word	0x08002e3b
 8002d44:	08002e3b 	.word	0x08002e3b
 8002d48:	08002e3b 	.word	0x08002e3b
 8002d4c:	08002e3b 	.word	0x08002e3b
 8002d50:	08002e3b 	.word	0x08002e3b
 8002d54:	08002e3b 	.word	0x08002e3b
 8002d58:	08002e3b 	.word	0x08002e3b
 8002d5c:	08002e3b 	.word	0x08002e3b
 8002d60:	08002e13 	.word	0x08002e13
 8002d64:	08002e3b 	.word	0x08002e3b
 8002d68:	08002e3b 	.word	0x08002e3b
 8002d6c:	08002e3b 	.word	0x08002e3b
 8002d70:	08002e3b 	.word	0x08002e3b
 8002d74:	08002e3b 	.word	0x08002e3b
 8002d78:	08002e3b 	.word	0x08002e3b
 8002d7c:	08002e3b 	.word	0x08002e3b
 8002d80:	08002e3b 	.word	0x08002e3b
 8002d84:	08002e3b 	.word	0x08002e3b
 8002d88:	08002e3b 	.word	0x08002e3b
 8002d8c:	08002e3b 	.word	0x08002e3b
 8002d90:	08002e3b 	.word	0x08002e3b
 8002d94:	08002e3b 	.word	0x08002e3b
 8002d98:	08002e3b 	.word	0x08002e3b
 8002d9c:	08002e3b 	.word	0x08002e3b
 8002da0:	08002e3b 	.word	0x08002e3b
 8002da4:	08002e3b 	.word	0x08002e3b
 8002da8:	08002e3b 	.word	0x08002e3b
 8002dac:	08002e3b 	.word	0x08002e3b
 8002db0:	08002e0b 	.word	0x08002e0b
 8002db4:	08002e3b 	.word	0x08002e3b
 8002db8:	08002e3b 	.word	0x08002e3b
 8002dbc:	08002e3b 	.word	0x08002e3b
 8002dc0:	08002e3b 	.word	0x08002e3b
 8002dc4:	08002e3b 	.word	0x08002e3b
 8002dc8:	08002e3b 	.word	0x08002e3b
 8002dcc:	08002e3b 	.word	0x08002e3b
 8002dd0:	08002e3b 	.word	0x08002e3b
 8002dd4:	08002e3b 	.word	0x08002e3b
 8002dd8:	08002e03 	.word	0x08002e03
 8002ddc:	2b64      	cmp	r3, #100	; 0x64
 8002dde:	d00c      	beq.n	8002dfa <Tx_Verify+0x4ae>
 8002de0:	e02b      	b.n	8002e3a <Tx_Verify+0x4ee>
 8002de2:	4b72      	ldr	r3, [pc, #456]	; (8002fac <Tx_Verify+0x660>)
 8002de4:	2201      	movs	r2, #1
 8002de6:	711a      	strb	r2, [r3, #4]
 8002de8:	e02a      	b.n	8002e40 <Tx_Verify+0x4f4>
 8002dea:	4b70      	ldr	r3, [pc, #448]	; (8002fac <Tx_Verify+0x660>)
 8002dec:	2202      	movs	r2, #2
 8002dee:	711a      	strb	r2, [r3, #4]
 8002df0:	e026      	b.n	8002e40 <Tx_Verify+0x4f4>
 8002df2:	4b6e      	ldr	r3, [pc, #440]	; (8002fac <Tx_Verify+0x660>)
 8002df4:	2203      	movs	r2, #3
 8002df6:	711a      	strb	r2, [r3, #4]
 8002df8:	e022      	b.n	8002e40 <Tx_Verify+0x4f4>
 8002dfa:	4b6c      	ldr	r3, [pc, #432]	; (8002fac <Tx_Verify+0x660>)
 8002dfc:	2204      	movs	r2, #4
 8002dfe:	711a      	strb	r2, [r3, #4]
 8002e00:	e01e      	b.n	8002e40 <Tx_Verify+0x4f4>
 8002e02:	4b6a      	ldr	r3, [pc, #424]	; (8002fac <Tx_Verify+0x660>)
 8002e04:	2205      	movs	r2, #5
 8002e06:	711a      	strb	r2, [r3, #4]
 8002e08:	e01a      	b.n	8002e40 <Tx_Verify+0x4f4>
 8002e0a:	4b68      	ldr	r3, [pc, #416]	; (8002fac <Tx_Verify+0x660>)
 8002e0c:	2206      	movs	r2, #6
 8002e0e:	711a      	strb	r2, [r3, #4]
 8002e10:	e016      	b.n	8002e40 <Tx_Verify+0x4f4>
 8002e12:	4b66      	ldr	r3, [pc, #408]	; (8002fac <Tx_Verify+0x660>)
 8002e14:	2207      	movs	r2, #7
 8002e16:	711a      	strb	r2, [r3, #4]
 8002e18:	e012      	b.n	8002e40 <Tx_Verify+0x4f4>
 8002e1a:	4b64      	ldr	r3, [pc, #400]	; (8002fac <Tx_Verify+0x660>)
 8002e1c:	2208      	movs	r2, #8
 8002e1e:	711a      	strb	r2, [r3, #4]
 8002e20:	e00e      	b.n	8002e40 <Tx_Verify+0x4f4>
 8002e22:	4b62      	ldr	r3, [pc, #392]	; (8002fac <Tx_Verify+0x660>)
 8002e24:	2209      	movs	r2, #9
 8002e26:	711a      	strb	r2, [r3, #4]
 8002e28:	e00a      	b.n	8002e40 <Tx_Verify+0x4f4>
 8002e2a:	4b60      	ldr	r3, [pc, #384]	; (8002fac <Tx_Verify+0x660>)
 8002e2c:	220a      	movs	r2, #10
 8002e2e:	711a      	strb	r2, [r3, #4]
 8002e30:	e006      	b.n	8002e40 <Tx_Verify+0x4f4>
 8002e32:	4b5e      	ldr	r3, [pc, #376]	; (8002fac <Tx_Verify+0x660>)
 8002e34:	220b      	movs	r2, #11
 8002e36:	711a      	strb	r2, [r3, #4]
 8002e38:	e002      	b.n	8002e40 <Tx_Verify+0x4f4>
 8002e3a:	4b5c      	ldr	r3, [pc, #368]	; (8002fac <Tx_Verify+0x660>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	711a      	strb	r2, [r3, #4]
 8002e40:	bf00      	nop
	__FREQ_TO_BUFFER(txData[5], perMsg[RTC_MSG]);
 8002e42:	4b5b      	ldr	r3, [pc, #364]	; (8002fb0 <Tx_Verify+0x664>)
 8002e44:	88db      	ldrh	r3, [r3, #6]
 8002e46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e4a:	f000 8082 	beq.w	8002f52 <Tx_Verify+0x606>
 8002e4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e52:	f300 80af 	bgt.w	8002fb4 <Tx_Verify+0x668>
 8002e56:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e5a:	d07e      	beq.n	8002f5a <Tx_Verify+0x60e>
 8002e5c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e60:	f300 80a8 	bgt.w	8002fb4 <Tx_Verify+0x668>
 8002e64:	2bc8      	cmp	r3, #200	; 0xc8
 8002e66:	d07c      	beq.n	8002f62 <Tx_Verify+0x616>
 8002e68:	2bc8      	cmp	r3, #200	; 0xc8
 8002e6a:	f300 80a3 	bgt.w	8002fb4 <Tx_Verify+0x668>
 8002e6e:	2b32      	cmp	r3, #50	; 0x32
 8002e70:	dc6c      	bgt.n	8002f4c <Tx_Verify+0x600>
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	f2c0 809e 	blt.w	8002fb4 <Tx_Verify+0x668>
 8002e78:	3b02      	subs	r3, #2
 8002e7a:	2b30      	cmp	r3, #48	; 0x30
 8002e7c:	f200 809a 	bhi.w	8002fb4 <Tx_Verify+0x668>
 8002e80:	a201      	add	r2, pc, #4	; (adr r2, 8002e88 <Tx_Verify+0x53c>)
 8002e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e86:	bf00      	nop
 8002e88:	08002fa3 	.word	0x08002fa3
 8002e8c:	08002fb5 	.word	0x08002fb5
 8002e90:	08002f9b 	.word	0x08002f9b
 8002e94:	08002f93 	.word	0x08002f93
 8002e98:	08002fb5 	.word	0x08002fb5
 8002e9c:	08002fb5 	.word	0x08002fb5
 8002ea0:	08002fb5 	.word	0x08002fb5
 8002ea4:	08002fb5 	.word	0x08002fb5
 8002ea8:	08002f8b 	.word	0x08002f8b
 8002eac:	08002fb5 	.word	0x08002fb5
 8002eb0:	08002fb5 	.word	0x08002fb5
 8002eb4:	08002fb5 	.word	0x08002fb5
 8002eb8:	08002fb5 	.word	0x08002fb5
 8002ebc:	08002fb5 	.word	0x08002fb5
 8002ec0:	08002fb5 	.word	0x08002fb5
 8002ec4:	08002fb5 	.word	0x08002fb5
 8002ec8:	08002fb5 	.word	0x08002fb5
 8002ecc:	08002fb5 	.word	0x08002fb5
 8002ed0:	08002f83 	.word	0x08002f83
 8002ed4:	08002fb5 	.word	0x08002fb5
 8002ed8:	08002fb5 	.word	0x08002fb5
 8002edc:	08002fb5 	.word	0x08002fb5
 8002ee0:	08002fb5 	.word	0x08002fb5
 8002ee4:	08002fb5 	.word	0x08002fb5
 8002ee8:	08002fb5 	.word	0x08002fb5
 8002eec:	08002fb5 	.word	0x08002fb5
 8002ef0:	08002fb5 	.word	0x08002fb5
 8002ef4:	08002fb5 	.word	0x08002fb5
 8002ef8:	08002fb5 	.word	0x08002fb5
 8002efc:	08002fb5 	.word	0x08002fb5
 8002f00:	08002fb5 	.word	0x08002fb5
 8002f04:	08002fb5 	.word	0x08002fb5
 8002f08:	08002fb5 	.word	0x08002fb5
 8002f0c:	08002fb5 	.word	0x08002fb5
 8002f10:	08002fb5 	.word	0x08002fb5
 8002f14:	08002fb5 	.word	0x08002fb5
 8002f18:	08002fb5 	.word	0x08002fb5
 8002f1c:	08002fb5 	.word	0x08002fb5
 8002f20:	08002f7b 	.word	0x08002f7b
 8002f24:	08002fb5 	.word	0x08002fb5
 8002f28:	08002fb5 	.word	0x08002fb5
 8002f2c:	08002fb5 	.word	0x08002fb5
 8002f30:	08002fb5 	.word	0x08002fb5
 8002f34:	08002fb5 	.word	0x08002fb5
 8002f38:	08002fb5 	.word	0x08002fb5
 8002f3c:	08002fb5 	.word	0x08002fb5
 8002f40:	08002fb5 	.word	0x08002fb5
 8002f44:	08002fb5 	.word	0x08002fb5
 8002f48:	08002f73 	.word	0x08002f73
 8002f4c:	2b64      	cmp	r3, #100	; 0x64
 8002f4e:	d00c      	beq.n	8002f6a <Tx_Verify+0x61e>
 8002f50:	e030      	b.n	8002fb4 <Tx_Verify+0x668>
 8002f52:	4b16      	ldr	r3, [pc, #88]	; (8002fac <Tx_Verify+0x660>)
 8002f54:	2201      	movs	r2, #1
 8002f56:	715a      	strb	r2, [r3, #5]
 8002f58:	e02f      	b.n	8002fba <Tx_Verify+0x66e>
 8002f5a:	4b14      	ldr	r3, [pc, #80]	; (8002fac <Tx_Verify+0x660>)
 8002f5c:	2202      	movs	r2, #2
 8002f5e:	715a      	strb	r2, [r3, #5]
 8002f60:	e02b      	b.n	8002fba <Tx_Verify+0x66e>
 8002f62:	4b12      	ldr	r3, [pc, #72]	; (8002fac <Tx_Verify+0x660>)
 8002f64:	2203      	movs	r2, #3
 8002f66:	715a      	strb	r2, [r3, #5]
 8002f68:	e027      	b.n	8002fba <Tx_Verify+0x66e>
 8002f6a:	4b10      	ldr	r3, [pc, #64]	; (8002fac <Tx_Verify+0x660>)
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	715a      	strb	r2, [r3, #5]
 8002f70:	e023      	b.n	8002fba <Tx_Verify+0x66e>
 8002f72:	4b0e      	ldr	r3, [pc, #56]	; (8002fac <Tx_Verify+0x660>)
 8002f74:	2205      	movs	r2, #5
 8002f76:	715a      	strb	r2, [r3, #5]
 8002f78:	e01f      	b.n	8002fba <Tx_Verify+0x66e>
 8002f7a:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <Tx_Verify+0x660>)
 8002f7c:	2206      	movs	r2, #6
 8002f7e:	715a      	strb	r2, [r3, #5]
 8002f80:	e01b      	b.n	8002fba <Tx_Verify+0x66e>
 8002f82:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <Tx_Verify+0x660>)
 8002f84:	2207      	movs	r2, #7
 8002f86:	715a      	strb	r2, [r3, #5]
 8002f88:	e017      	b.n	8002fba <Tx_Verify+0x66e>
 8002f8a:	4b08      	ldr	r3, [pc, #32]	; (8002fac <Tx_Verify+0x660>)
 8002f8c:	2208      	movs	r2, #8
 8002f8e:	715a      	strb	r2, [r3, #5]
 8002f90:	e013      	b.n	8002fba <Tx_Verify+0x66e>
 8002f92:	4b06      	ldr	r3, [pc, #24]	; (8002fac <Tx_Verify+0x660>)
 8002f94:	2209      	movs	r2, #9
 8002f96:	715a      	strb	r2, [r3, #5]
 8002f98:	e00f      	b.n	8002fba <Tx_Verify+0x66e>
 8002f9a:	4b04      	ldr	r3, [pc, #16]	; (8002fac <Tx_Verify+0x660>)
 8002f9c:	220a      	movs	r2, #10
 8002f9e:	715a      	strb	r2, [r3, #5]
 8002fa0:	e00b      	b.n	8002fba <Tx_Verify+0x66e>
 8002fa2:	4b02      	ldr	r3, [pc, #8]	; (8002fac <Tx_Verify+0x660>)
 8002fa4:	220b      	movs	r2, #11
 8002fa6:	715a      	strb	r2, [r3, #5]
 8002fa8:	e007      	b.n	8002fba <Tx_Verify+0x66e>
 8002faa:	bf00      	nop
 8002fac:	20000534 	.word	0x20000534
 8002fb0:	20006728 	.word	0x20006728
 8002fb4:	4bb7      	ldr	r3, [pc, #732]	; (8003294 <Tx_Verify+0x948>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	715a      	strb	r2, [r3, #5]
 8002fba:	bf00      	nop
	__FREQ_TO_BUFFER(txData[6], perMsg[PDM_SAVE]);
 8002fbc:	4bb6      	ldr	r3, [pc, #728]	; (8003298 <Tx_Verify+0x94c>)
 8002fbe:	89db      	ldrh	r3, [r3, #14]
 8002fc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fc4:	f000 8081 	beq.w	80030ca <Tx_Verify+0x77e>
 8002fc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fcc:	f300 80a9 	bgt.w	8003122 <Tx_Verify+0x7d6>
 8002fd0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002fd4:	d07d      	beq.n	80030d2 <Tx_Verify+0x786>
 8002fd6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002fda:	f300 80a2 	bgt.w	8003122 <Tx_Verify+0x7d6>
 8002fde:	2bc8      	cmp	r3, #200	; 0xc8
 8002fe0:	d07b      	beq.n	80030da <Tx_Verify+0x78e>
 8002fe2:	2bc8      	cmp	r3, #200	; 0xc8
 8002fe4:	f300 809d 	bgt.w	8003122 <Tx_Verify+0x7d6>
 8002fe8:	2b32      	cmp	r3, #50	; 0x32
 8002fea:	dc6b      	bgt.n	80030c4 <Tx_Verify+0x778>
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	f2c0 8098 	blt.w	8003122 <Tx_Verify+0x7d6>
 8002ff2:	3b02      	subs	r3, #2
 8002ff4:	2b30      	cmp	r3, #48	; 0x30
 8002ff6:	f200 8094 	bhi.w	8003122 <Tx_Verify+0x7d6>
 8002ffa:	a201      	add	r2, pc, #4	; (adr r2, 8003000 <Tx_Verify+0x6b4>)
 8002ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003000:	0800311b 	.word	0x0800311b
 8003004:	08003123 	.word	0x08003123
 8003008:	08003113 	.word	0x08003113
 800300c:	0800310b 	.word	0x0800310b
 8003010:	08003123 	.word	0x08003123
 8003014:	08003123 	.word	0x08003123
 8003018:	08003123 	.word	0x08003123
 800301c:	08003123 	.word	0x08003123
 8003020:	08003103 	.word	0x08003103
 8003024:	08003123 	.word	0x08003123
 8003028:	08003123 	.word	0x08003123
 800302c:	08003123 	.word	0x08003123
 8003030:	08003123 	.word	0x08003123
 8003034:	08003123 	.word	0x08003123
 8003038:	08003123 	.word	0x08003123
 800303c:	08003123 	.word	0x08003123
 8003040:	08003123 	.word	0x08003123
 8003044:	08003123 	.word	0x08003123
 8003048:	080030fb 	.word	0x080030fb
 800304c:	08003123 	.word	0x08003123
 8003050:	08003123 	.word	0x08003123
 8003054:	08003123 	.word	0x08003123
 8003058:	08003123 	.word	0x08003123
 800305c:	08003123 	.word	0x08003123
 8003060:	08003123 	.word	0x08003123
 8003064:	08003123 	.word	0x08003123
 8003068:	08003123 	.word	0x08003123
 800306c:	08003123 	.word	0x08003123
 8003070:	08003123 	.word	0x08003123
 8003074:	08003123 	.word	0x08003123
 8003078:	08003123 	.word	0x08003123
 800307c:	08003123 	.word	0x08003123
 8003080:	08003123 	.word	0x08003123
 8003084:	08003123 	.word	0x08003123
 8003088:	08003123 	.word	0x08003123
 800308c:	08003123 	.word	0x08003123
 8003090:	08003123 	.word	0x08003123
 8003094:	08003123 	.word	0x08003123
 8003098:	080030f3 	.word	0x080030f3
 800309c:	08003123 	.word	0x08003123
 80030a0:	08003123 	.word	0x08003123
 80030a4:	08003123 	.word	0x08003123
 80030a8:	08003123 	.word	0x08003123
 80030ac:	08003123 	.word	0x08003123
 80030b0:	08003123 	.word	0x08003123
 80030b4:	08003123 	.word	0x08003123
 80030b8:	08003123 	.word	0x08003123
 80030bc:	08003123 	.word	0x08003123
 80030c0:	080030eb 	.word	0x080030eb
 80030c4:	2b64      	cmp	r3, #100	; 0x64
 80030c6:	d00c      	beq.n	80030e2 <Tx_Verify+0x796>
 80030c8:	e02b      	b.n	8003122 <Tx_Verify+0x7d6>
 80030ca:	4b72      	ldr	r3, [pc, #456]	; (8003294 <Tx_Verify+0x948>)
 80030cc:	2201      	movs	r2, #1
 80030ce:	719a      	strb	r2, [r3, #6]
 80030d0:	e02a      	b.n	8003128 <Tx_Verify+0x7dc>
 80030d2:	4b70      	ldr	r3, [pc, #448]	; (8003294 <Tx_Verify+0x948>)
 80030d4:	2202      	movs	r2, #2
 80030d6:	719a      	strb	r2, [r3, #6]
 80030d8:	e026      	b.n	8003128 <Tx_Verify+0x7dc>
 80030da:	4b6e      	ldr	r3, [pc, #440]	; (8003294 <Tx_Verify+0x948>)
 80030dc:	2203      	movs	r2, #3
 80030de:	719a      	strb	r2, [r3, #6]
 80030e0:	e022      	b.n	8003128 <Tx_Verify+0x7dc>
 80030e2:	4b6c      	ldr	r3, [pc, #432]	; (8003294 <Tx_Verify+0x948>)
 80030e4:	2204      	movs	r2, #4
 80030e6:	719a      	strb	r2, [r3, #6]
 80030e8:	e01e      	b.n	8003128 <Tx_Verify+0x7dc>
 80030ea:	4b6a      	ldr	r3, [pc, #424]	; (8003294 <Tx_Verify+0x948>)
 80030ec:	2205      	movs	r2, #5
 80030ee:	719a      	strb	r2, [r3, #6]
 80030f0:	e01a      	b.n	8003128 <Tx_Verify+0x7dc>
 80030f2:	4b68      	ldr	r3, [pc, #416]	; (8003294 <Tx_Verify+0x948>)
 80030f4:	2206      	movs	r2, #6
 80030f6:	719a      	strb	r2, [r3, #6]
 80030f8:	e016      	b.n	8003128 <Tx_Verify+0x7dc>
 80030fa:	4b66      	ldr	r3, [pc, #408]	; (8003294 <Tx_Verify+0x948>)
 80030fc:	2207      	movs	r2, #7
 80030fe:	719a      	strb	r2, [r3, #6]
 8003100:	e012      	b.n	8003128 <Tx_Verify+0x7dc>
 8003102:	4b64      	ldr	r3, [pc, #400]	; (8003294 <Tx_Verify+0x948>)
 8003104:	2208      	movs	r2, #8
 8003106:	719a      	strb	r2, [r3, #6]
 8003108:	e00e      	b.n	8003128 <Tx_Verify+0x7dc>
 800310a:	4b62      	ldr	r3, [pc, #392]	; (8003294 <Tx_Verify+0x948>)
 800310c:	2209      	movs	r2, #9
 800310e:	719a      	strb	r2, [r3, #6]
 8003110:	e00a      	b.n	8003128 <Tx_Verify+0x7dc>
 8003112:	4b60      	ldr	r3, [pc, #384]	; (8003294 <Tx_Verify+0x948>)
 8003114:	220a      	movs	r2, #10
 8003116:	719a      	strb	r2, [r3, #6]
 8003118:	e006      	b.n	8003128 <Tx_Verify+0x7dc>
 800311a:	4b5e      	ldr	r3, [pc, #376]	; (8003294 <Tx_Verify+0x948>)
 800311c:	220b      	movs	r2, #11
 800311e:	719a      	strb	r2, [r3, #6]
 8003120:	e002      	b.n	8003128 <Tx_Verify+0x7dc>
 8003122:	4b5c      	ldr	r3, [pc, #368]	; (8003294 <Tx_Verify+0x948>)
 8003124:	2200      	movs	r2, #0
 8003126:	719a      	strb	r2, [r3, #6]
 8003128:	bf00      	nop
	__FREQ_TO_BUFFER(txData[7], perMsg[ECU_SAVE]);
 800312a:	4b5b      	ldr	r3, [pc, #364]	; (8003298 <Tx_Verify+0x94c>)
 800312c:	899b      	ldrh	r3, [r3, #12]
 800312e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003132:	f000 8082 	beq.w	800323a <Tx_Verify+0x8ee>
 8003136:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800313a:	f300 80af 	bgt.w	800329c <Tx_Verify+0x950>
 800313e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003142:	d07e      	beq.n	8003242 <Tx_Verify+0x8f6>
 8003144:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003148:	f300 80a8 	bgt.w	800329c <Tx_Verify+0x950>
 800314c:	2bc8      	cmp	r3, #200	; 0xc8
 800314e:	d07c      	beq.n	800324a <Tx_Verify+0x8fe>
 8003150:	2bc8      	cmp	r3, #200	; 0xc8
 8003152:	f300 80a3 	bgt.w	800329c <Tx_Verify+0x950>
 8003156:	2b32      	cmp	r3, #50	; 0x32
 8003158:	dc6c      	bgt.n	8003234 <Tx_Verify+0x8e8>
 800315a:	2b02      	cmp	r3, #2
 800315c:	f2c0 809e 	blt.w	800329c <Tx_Verify+0x950>
 8003160:	3b02      	subs	r3, #2
 8003162:	2b30      	cmp	r3, #48	; 0x30
 8003164:	f200 809a 	bhi.w	800329c <Tx_Verify+0x950>
 8003168:	a201      	add	r2, pc, #4	; (adr r2, 8003170 <Tx_Verify+0x824>)
 800316a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316e:	bf00      	nop
 8003170:	0800328b 	.word	0x0800328b
 8003174:	0800329d 	.word	0x0800329d
 8003178:	08003283 	.word	0x08003283
 800317c:	0800327b 	.word	0x0800327b
 8003180:	0800329d 	.word	0x0800329d
 8003184:	0800329d 	.word	0x0800329d
 8003188:	0800329d 	.word	0x0800329d
 800318c:	0800329d 	.word	0x0800329d
 8003190:	08003273 	.word	0x08003273
 8003194:	0800329d 	.word	0x0800329d
 8003198:	0800329d 	.word	0x0800329d
 800319c:	0800329d 	.word	0x0800329d
 80031a0:	0800329d 	.word	0x0800329d
 80031a4:	0800329d 	.word	0x0800329d
 80031a8:	0800329d 	.word	0x0800329d
 80031ac:	0800329d 	.word	0x0800329d
 80031b0:	0800329d 	.word	0x0800329d
 80031b4:	0800329d 	.word	0x0800329d
 80031b8:	0800326b 	.word	0x0800326b
 80031bc:	0800329d 	.word	0x0800329d
 80031c0:	0800329d 	.word	0x0800329d
 80031c4:	0800329d 	.word	0x0800329d
 80031c8:	0800329d 	.word	0x0800329d
 80031cc:	0800329d 	.word	0x0800329d
 80031d0:	0800329d 	.word	0x0800329d
 80031d4:	0800329d 	.word	0x0800329d
 80031d8:	0800329d 	.word	0x0800329d
 80031dc:	0800329d 	.word	0x0800329d
 80031e0:	0800329d 	.word	0x0800329d
 80031e4:	0800329d 	.word	0x0800329d
 80031e8:	0800329d 	.word	0x0800329d
 80031ec:	0800329d 	.word	0x0800329d
 80031f0:	0800329d 	.word	0x0800329d
 80031f4:	0800329d 	.word	0x0800329d
 80031f8:	0800329d 	.word	0x0800329d
 80031fc:	0800329d 	.word	0x0800329d
 8003200:	0800329d 	.word	0x0800329d
 8003204:	0800329d 	.word	0x0800329d
 8003208:	08003263 	.word	0x08003263
 800320c:	0800329d 	.word	0x0800329d
 8003210:	0800329d 	.word	0x0800329d
 8003214:	0800329d 	.word	0x0800329d
 8003218:	0800329d 	.word	0x0800329d
 800321c:	0800329d 	.word	0x0800329d
 8003220:	0800329d 	.word	0x0800329d
 8003224:	0800329d 	.word	0x0800329d
 8003228:	0800329d 	.word	0x0800329d
 800322c:	0800329d 	.word	0x0800329d
 8003230:	0800325b 	.word	0x0800325b
 8003234:	2b64      	cmp	r3, #100	; 0x64
 8003236:	d00c      	beq.n	8003252 <Tx_Verify+0x906>
 8003238:	e030      	b.n	800329c <Tx_Verify+0x950>
 800323a:	4b16      	ldr	r3, [pc, #88]	; (8003294 <Tx_Verify+0x948>)
 800323c:	2201      	movs	r2, #1
 800323e:	71da      	strb	r2, [r3, #7]
 8003240:	e02f      	b.n	80032a2 <Tx_Verify+0x956>
 8003242:	4b14      	ldr	r3, [pc, #80]	; (8003294 <Tx_Verify+0x948>)
 8003244:	2202      	movs	r2, #2
 8003246:	71da      	strb	r2, [r3, #7]
 8003248:	e02b      	b.n	80032a2 <Tx_Verify+0x956>
 800324a:	4b12      	ldr	r3, [pc, #72]	; (8003294 <Tx_Verify+0x948>)
 800324c:	2203      	movs	r2, #3
 800324e:	71da      	strb	r2, [r3, #7]
 8003250:	e027      	b.n	80032a2 <Tx_Verify+0x956>
 8003252:	4b10      	ldr	r3, [pc, #64]	; (8003294 <Tx_Verify+0x948>)
 8003254:	2204      	movs	r2, #4
 8003256:	71da      	strb	r2, [r3, #7]
 8003258:	e023      	b.n	80032a2 <Tx_Verify+0x956>
 800325a:	4b0e      	ldr	r3, [pc, #56]	; (8003294 <Tx_Verify+0x948>)
 800325c:	2205      	movs	r2, #5
 800325e:	71da      	strb	r2, [r3, #7]
 8003260:	e01f      	b.n	80032a2 <Tx_Verify+0x956>
 8003262:	4b0c      	ldr	r3, [pc, #48]	; (8003294 <Tx_Verify+0x948>)
 8003264:	2206      	movs	r2, #6
 8003266:	71da      	strb	r2, [r3, #7]
 8003268:	e01b      	b.n	80032a2 <Tx_Verify+0x956>
 800326a:	4b0a      	ldr	r3, [pc, #40]	; (8003294 <Tx_Verify+0x948>)
 800326c:	2207      	movs	r2, #7
 800326e:	71da      	strb	r2, [r3, #7]
 8003270:	e017      	b.n	80032a2 <Tx_Verify+0x956>
 8003272:	4b08      	ldr	r3, [pc, #32]	; (8003294 <Tx_Verify+0x948>)
 8003274:	2208      	movs	r2, #8
 8003276:	71da      	strb	r2, [r3, #7]
 8003278:	e013      	b.n	80032a2 <Tx_Verify+0x956>
 800327a:	4b06      	ldr	r3, [pc, #24]	; (8003294 <Tx_Verify+0x948>)
 800327c:	2209      	movs	r2, #9
 800327e:	71da      	strb	r2, [r3, #7]
 8003280:	e00f      	b.n	80032a2 <Tx_Verify+0x956>
 8003282:	4b04      	ldr	r3, [pc, #16]	; (8003294 <Tx_Verify+0x948>)
 8003284:	220a      	movs	r2, #10
 8003286:	71da      	strb	r2, [r3, #7]
 8003288:	e00b      	b.n	80032a2 <Tx_Verify+0x956>
 800328a:	4b02      	ldr	r3, [pc, #8]	; (8003294 <Tx_Verify+0x948>)
 800328c:	220b      	movs	r2, #11
 800328e:	71da      	strb	r2, [r3, #7]
 8003290:	e007      	b.n	80032a2 <Tx_Verify+0x956>
 8003292:	bf00      	nop
 8003294:	20000534 	.word	0x20000534
 8003298:	20006728 	.word	0x20006728
 800329c:	4b28      	ldr	r3, [pc, #160]	; (8003340 <Tx_Verify+0x9f4>)
 800329e:	2200      	movs	r2, #0
 80032a0:	71da      	strb	r2, [r3, #7]
 80032a2:	bf00      	nop

	if(flagDatalogger == DL_SAVE)
 80032a4:	4b27      	ldr	r3, [pc, #156]	; (8003344 <Tx_Verify+0x9f8>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d10c      	bne.n	80032c6 <Tx_Verify+0x97a>
		Principal_Datalogger_Save_Buffer(hcan, txHeader.StdId, txHeader.DLC, txData, &dirStruct, &fileStruct);
 80032ac:	4b26      	ldr	r3, [pc, #152]	; (8003348 <Tx_Verify+0x9fc>)
 80032ae:	6819      	ldr	r1, [r3, #0]
 80032b0:	4b25      	ldr	r3, [pc, #148]	; (8003348 <Tx_Verify+0x9fc>)
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	4b25      	ldr	r3, [pc, #148]	; (800334c <Tx_Verify+0xa00>)
 80032b8:	9301      	str	r3, [sp, #4]
 80032ba:	4b25      	ldr	r3, [pc, #148]	; (8003350 <Tx_Verify+0xa04>)
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	4b20      	ldr	r3, [pc, #128]	; (8003340 <Tx_Verify+0x9f4>)
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f002 ff07 	bl	80060d4 <Principal_Datalogger_Save_Buffer>

	if((accCAN[VERIFY_MSG] >= perCAN[VERIFY_MSG]) && (perCAN[VERIFY_MSG] != MSG_DISABLED))
 80032c6:	4b23      	ldr	r3, [pc, #140]	; (8003354 <Tx_Verify+0xa08>)
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	4a23      	ldr	r2, [pc, #140]	; (8003358 <Tx_Verify+0xa0c>)
 80032cc:	8912      	ldrh	r2, [r2, #8]
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d332      	bcc.n	8003338 <Tx_Verify+0x9ec>
 80032d2:	4b21      	ldr	r3, [pc, #132]	; (8003358 <Tx_Verify+0xa0c>)
 80032d4:	891b      	ldrh	r3, [r3, #8]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d02e      	beq.n	8003338 <Tx_Verify+0x9ec>
	{
		accCAN[VERIFY_MSG] -= perCAN[VERIFY_MSG];
 80032da:	4b1e      	ldr	r3, [pc, #120]	; (8003354 <Tx_Verify+0xa08>)
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	4a1e      	ldr	r2, [pc, #120]	; (8003358 <Tx_Verify+0xa0c>)
 80032e0:	8912      	ldrh	r2, [r2, #8]
 80032e2:	1a9b      	subs	r3, r3, r2
 80032e4:	4a1b      	ldr	r2, [pc, #108]	; (8003354 <Tx_Verify+0xa08>)
 80032e6:	6113      	str	r3, [r2, #16]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 80032e8:	4b1c      	ldr	r3, [pc, #112]	; (800335c <Tx_Verify+0xa10>)
 80032ea:	4a15      	ldr	r2, [pc, #84]	; (8003340 <Tx_Verify+0x9f4>)
 80032ec:	4916      	ldr	r1, [pc, #88]	; (8003348 <Tx_Verify+0x9fc>)
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f004 fc96 	bl	8007c20 <HAL_CAN_AddTxMessage>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d107      	bne.n	800330a <Tx_Verify+0x9be>
			verifyCAN |= 1;
 80032fa:	4b19      	ldr	r3, [pc, #100]	; (8003360 <Tx_Verify+0xa14>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	f043 0301 	orr.w	r3, r3, #1
 8003302:	b2da      	uxtb	r2, r3
 8003304:	4b16      	ldr	r3, [pc, #88]	; (8003360 <Tx_Verify+0xa14>)
 8003306:	701a      	strb	r2, [r3, #0]
 8003308:	e006      	b.n	8003318 <Tx_Verify+0x9cc>
		else
			verifyCAN &= 0x02;
 800330a:	4b15      	ldr	r3, [pc, #84]	; (8003360 <Tx_Verify+0xa14>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	b2da      	uxtb	r2, r3
 8003314:	4b12      	ldr	r3, [pc, #72]	; (8003360 <Tx_Verify+0xa14>)
 8003316:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8003318:	2300      	movs	r3, #0
 800331a:	73fb      	strb	r3, [r7, #15]
 800331c:	e002      	b.n	8003324 <Tx_Verify+0x9d8>
 800331e:	7bfb      	ldrb	r3, [r7, #15]
 8003320:	3301      	adds	r3, #1
 8003322:	73fb      	strb	r3, [r7, #15]
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f004 fd56 	bl	8007dd6 <HAL_CAN_GetTxMailboxesFreeLevel>
 800332a:	4603      	mov	r3, r0
 800332c:	2b03      	cmp	r3, #3
 800332e:	d003      	beq.n	8003338 <Tx_Verify+0x9ec>
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d9f3      	bls.n	800331e <Tx_Verify+0x9d2>
	}

	return;
 8003336:	bf00      	nop
 8003338:	bf00      	nop
}
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	20000534 	.word	0x20000534
 8003344:	200066fe 	.word	0x200066fe
 8003348:	2000055c 	.word	0x2000055c
 800334c:	200056a8 	.word	0x200056a8
 8003350:	20004640 	.word	0x20004640
 8003354:	20006748 	.word	0x20006748
 8003358:	2000671c 	.word	0x2000671c
 800335c:	2000053c 	.word	0x2000053c
 8003360:	20006788 	.word	0x20006788

08003364 <Tx_Beacon>:

static void Tx_Beacon(CAN_HandleTypeDef* hcan)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af02      	add	r7, sp, #8
 800336a:	6078      	str	r0, [r7, #4]
	uint16_t buffer[3];

	txHeader.IDE = CAN_ID_STD;
 800336c:	4b49      	ldr	r3, [pc, #292]	; (8003494 <Tx_Beacon+0x130>)
 800336e:	2200      	movs	r2, #0
 8003370:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 8003372:	4b48      	ldr	r3, [pc, #288]	; (8003494 <Tx_Beacon+0x130>)
 8003374:	2200      	movs	r2, #0
 8003376:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8003378:	4b46      	ldr	r3, [pc, #280]	; (8003494 <Tx_Beacon+0x130>)
 800337a:	2200      	movs	r2, #0
 800337c:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = BEACON_ID;
 800337e:	4b45      	ldr	r3, [pc, #276]	; (8003494 <Tx_Beacon+0x130>)
 8003380:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003384:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 5;
 8003386:	4b43      	ldr	r3, [pc, #268]	; (8003494 <Tx_Beacon+0x130>)
 8003388:	2205      	movs	r2, #5
 800338a:	611a      	str	r2, [r3, #16]

	buffer[0] = accLap / 60000;
 800338c:	4b42      	ldr	r3, [pc, #264]	; (8003498 <Tx_Beacon+0x134>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a42      	ldr	r2, [pc, #264]	; (800349c <Tx_Beacon+0x138>)
 8003392:	fba2 2303 	umull	r2, r3, r2, r3
 8003396:	0b9b      	lsrs	r3, r3, #14
 8003398:	b29b      	uxth	r3, r3
 800339a:	813b      	strh	r3, [r7, #8]
	buffer[1] = accLap / 1000;
 800339c:	4b3e      	ldr	r3, [pc, #248]	; (8003498 <Tx_Beacon+0x134>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a3f      	ldr	r2, [pc, #252]	; (80034a0 <Tx_Beacon+0x13c>)
 80033a2:	fba2 2303 	umull	r2, r3, r2, r3
 80033a6:	099b      	lsrs	r3, r3, #6
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	817b      	strh	r3, [r7, #10]
	buffer[2] = accLap % 1000;
 80033ac:	4b3a      	ldr	r3, [pc, #232]	; (8003498 <Tx_Beacon+0x134>)
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	4b3b      	ldr	r3, [pc, #236]	; (80034a0 <Tx_Beacon+0x13c>)
 80033b2:	fba3 1302 	umull	r1, r3, r3, r2
 80033b6:	099b      	lsrs	r3, r3, #6
 80033b8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80033bc:	fb01 f303 	mul.w	r3, r1, r3
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	81bb      	strh	r3, [r7, #12]

	accLap = 0;
 80033c6:	4b34      	ldr	r3, [pc, #208]	; (8003498 <Tx_Beacon+0x134>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]

	txData[0] = lapNumber;
 80033cc:	4b35      	ldr	r3, [pc, #212]	; (80034a4 <Tx_Beacon+0x140>)
 80033ce:	781a      	ldrb	r2, [r3, #0]
 80033d0:	4b35      	ldr	r3, [pc, #212]	; (80034a8 <Tx_Beacon+0x144>)
 80033d2:	701a      	strb	r2, [r3, #0]
	txData[1] = buffer[0] & 0xff;
 80033d4:	893b      	ldrh	r3, [r7, #8]
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	4b33      	ldr	r3, [pc, #204]	; (80034a8 <Tx_Beacon+0x144>)
 80033da:	705a      	strb	r2, [r3, #1]
	txData[2] = buffer[1] & 0xff;
 80033dc:	897b      	ldrh	r3, [r7, #10]
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	4b31      	ldr	r3, [pc, #196]	; (80034a8 <Tx_Beacon+0x144>)
 80033e2:	709a      	strb	r2, [r3, #2]
	txData[3] = buffer[2] >> 8;
 80033e4:	89bb      	ldrh	r3, [r7, #12]
 80033e6:	0a1b      	lsrs	r3, r3, #8
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	4b2e      	ldr	r3, [pc, #184]	; (80034a8 <Tx_Beacon+0x144>)
 80033ee:	70da      	strb	r2, [r3, #3]
	txData[4] = buffer[2] & 0xff;
 80033f0:	89bb      	ldrh	r3, [r7, #12]
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	4b2c      	ldr	r3, [pc, #176]	; (80034a8 <Tx_Beacon+0x144>)
 80033f6:	711a      	strb	r2, [r3, #4]

	if(flagDatalogger == DL_SAVE)
 80033f8:	4b2c      	ldr	r3, [pc, #176]	; (80034ac <Tx_Beacon+0x148>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d10c      	bne.n	800341a <Tx_Beacon+0xb6>
		Principal_Datalogger_Save_Buffer(hcan, txHeader.StdId, txHeader.DLC, txData, &dirStruct, &fileStruct);
 8003400:	4b24      	ldr	r3, [pc, #144]	; (8003494 <Tx_Beacon+0x130>)
 8003402:	6819      	ldr	r1, [r3, #0]
 8003404:	4b23      	ldr	r3, [pc, #140]	; (8003494 <Tx_Beacon+0x130>)
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	b2da      	uxtb	r2, r3
 800340a:	4b29      	ldr	r3, [pc, #164]	; (80034b0 <Tx_Beacon+0x14c>)
 800340c:	9301      	str	r3, [sp, #4]
 800340e:	4b29      	ldr	r3, [pc, #164]	; (80034b4 <Tx_Beacon+0x150>)
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	4b25      	ldr	r3, [pc, #148]	; (80034a8 <Tx_Beacon+0x144>)
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f002 fe5d 	bl	80060d4 <Principal_Datalogger_Save_Buffer>

	if((accCAN[BEACON_MSG] >= perCAN[BEACON_MSG]) && (perCAN[BEACON_MSG] != MSG_DISABLED))
 800341a:	4b27      	ldr	r3, [pc, #156]	; (80034b8 <Tx_Beacon+0x154>)
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	4a27      	ldr	r2, [pc, #156]	; (80034bc <Tx_Beacon+0x158>)
 8003420:	8952      	ldrh	r2, [r2, #10]
 8003422:	4293      	cmp	r3, r2
 8003424:	d332      	bcc.n	800348c <Tx_Beacon+0x128>
 8003426:	4b25      	ldr	r3, [pc, #148]	; (80034bc <Tx_Beacon+0x158>)
 8003428:	895b      	ldrh	r3, [r3, #10]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d02e      	beq.n	800348c <Tx_Beacon+0x128>
	{
		accCAN[BEACON_MSG] -= perCAN[BEACON_MSG];
 800342e:	4b22      	ldr	r3, [pc, #136]	; (80034b8 <Tx_Beacon+0x154>)
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	4a22      	ldr	r2, [pc, #136]	; (80034bc <Tx_Beacon+0x158>)
 8003434:	8952      	ldrh	r2, [r2, #10]
 8003436:	1a9b      	subs	r3, r3, r2
 8003438:	4a1f      	ldr	r2, [pc, #124]	; (80034b8 <Tx_Beacon+0x154>)
 800343a:	6153      	str	r3, [r2, #20]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 800343c:	4b20      	ldr	r3, [pc, #128]	; (80034c0 <Tx_Beacon+0x15c>)
 800343e:	4a1a      	ldr	r2, [pc, #104]	; (80034a8 <Tx_Beacon+0x144>)
 8003440:	4914      	ldr	r1, [pc, #80]	; (8003494 <Tx_Beacon+0x130>)
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f004 fbec 	bl	8007c20 <HAL_CAN_AddTxMessage>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d107      	bne.n	800345e <Tx_Beacon+0xfa>
			verifyCAN |= 1;
 800344e:	4b1d      	ldr	r3, [pc, #116]	; (80034c4 <Tx_Beacon+0x160>)
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	f043 0301 	orr.w	r3, r3, #1
 8003456:	b2da      	uxtb	r2, r3
 8003458:	4b1a      	ldr	r3, [pc, #104]	; (80034c4 <Tx_Beacon+0x160>)
 800345a:	701a      	strb	r2, [r3, #0]
 800345c:	e006      	b.n	800346c <Tx_Beacon+0x108>
		else
			verifyCAN &= 0x02;
 800345e:	4b19      	ldr	r3, [pc, #100]	; (80034c4 <Tx_Beacon+0x160>)
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	b2da      	uxtb	r2, r3
 8003468:	4b16      	ldr	r3, [pc, #88]	; (80034c4 <Tx_Beacon+0x160>)
 800346a:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 800346c:	2300      	movs	r3, #0
 800346e:	73fb      	strb	r3, [r7, #15]
 8003470:	e002      	b.n	8003478 <Tx_Beacon+0x114>
 8003472:	7bfb      	ldrb	r3, [r7, #15]
 8003474:	3301      	adds	r3, #1
 8003476:	73fb      	strb	r3, [r7, #15]
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	f004 fcac 	bl	8007dd6 <HAL_CAN_GetTxMailboxesFreeLevel>
 800347e:	4603      	mov	r3, r0
 8003480:	2b03      	cmp	r3, #3
 8003482:	d003      	beq.n	800348c <Tx_Beacon+0x128>
 8003484:	7bfb      	ldrb	r3, [r7, #15]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d9f3      	bls.n	8003472 <Tx_Beacon+0x10e>
	}

	return;
 800348a:	bf00      	nop
 800348c:	bf00      	nop
}
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	2000055c 	.word	0x2000055c
 8003498:	20006784 	.word	0x20006784
 800349c:	45e7b273 	.word	0x45e7b273
 80034a0:	10624dd3 	.word	0x10624dd3
 80034a4:	20000574 	.word	0x20000574
 80034a8:	20000534 	.word	0x20000534
 80034ac:	200066fe 	.word	0x200066fe
 80034b0:	200056a8 	.word	0x200056a8
 80034b4:	20004640 	.word	0x20004640
 80034b8:	20006748 	.word	0x20006748
 80034bc:	2000671c 	.word	0x2000671c
 80034c0:	2000053c 	.word	0x2000053c
 80034c4:	20006788 	.word	0x20006788

080034c8 <Save_ECU>:

static void Save_ECU(CAN_HandleTypeDef* hcan)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af02      	add	r7, sp, #8
 80034ce:	6078      	str	r0, [r7, #4]
	uint8_t id = 0;
 80034d0:	2300      	movs	r3, #0
 80034d2:	75fb      	strb	r3, [r7, #23]
	uint8_t length = 0;
 80034d4:	2300      	movs	r3, #0
 80034d6:	75bb      	strb	r3, [r7, #22]
	uint8_t buffer[8];

	if(flagDatalogger != DL_SAVE)
 80034d8:	4bac      	ldr	r3, [pc, #688]	; (800378c <Save_ECU+0x2c4>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	f040 8151 	bne.w	8003784 <Save_ECU+0x2bc>
		return;

	id = ECU_FIRST_ID;
 80034e2:	2301      	movs	r3, #1
 80034e4:	75fb      	strb	r3, [r7, #23]
	length = 8;
 80034e6:	2308      	movs	r3, #8
 80034e8:	75bb      	strb	r3, [r7, #22]

	buffer[0] = ecuData.rpm >> 8;
 80034ea:	4ba9      	ldr	r3, [pc, #676]	; (8003790 <Save_ECU+0x2c8>)
 80034ec:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
 80034f0:	121b      	asrs	r3, r3, #8
 80034f2:	b21b      	sxth	r3, r3
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	733b      	strb	r3, [r7, #12]
	buffer[1] = ecuData.rpm & 0xff;
 80034f8:	4ba5      	ldr	r3, [pc, #660]	; (8003790 <Save_ECU+0x2c8>)
 80034fa:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	737b      	strb	r3, [r7, #13]
	buffer[2] = ecuData.tps >> 8;
 8003502:	4ba3      	ldr	r3, [pc, #652]	; (8003790 <Save_ECU+0x2c8>)
 8003504:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8003508:	121b      	asrs	r3, r3, #8
 800350a:	b21b      	sxth	r3, r3
 800350c:	b2db      	uxtb	r3, r3
 800350e:	73bb      	strb	r3, [r7, #14]
	buffer[3] = ecuData.tps & 0xff;
 8003510:	4b9f      	ldr	r3, [pc, #636]	; (8003790 <Save_ECU+0x2c8>)
 8003512:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8003516:	b2db      	uxtb	r3, r3
 8003518:	73fb      	strb	r3, [r7, #15]
	buffer[4] = ecuData.iat >> 8;
 800351a:	4b9d      	ldr	r3, [pc, #628]	; (8003790 <Save_ECU+0x2c8>)
 800351c:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8003520:	121b      	asrs	r3, r3, #8
 8003522:	b21b      	sxth	r3, r3
 8003524:	b2db      	uxtb	r3, r3
 8003526:	743b      	strb	r3, [r7, #16]
	buffer[5] = ecuData.iat & 0xff;
 8003528:	4b99      	ldr	r3, [pc, #612]	; (8003790 <Save_ECU+0x2c8>)
 800352a:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800352e:	b2db      	uxtb	r3, r3
 8003530:	747b      	strb	r3, [r7, #17]
	buffer[6] = ecuData.ect >> 8;
 8003532:	4b97      	ldr	r3, [pc, #604]	; (8003790 <Save_ECU+0x2c8>)
 8003534:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8003538:	121b      	asrs	r3, r3, #8
 800353a:	b21b      	sxth	r3, r3
 800353c:	b2db      	uxtb	r3, r3
 800353e:	74bb      	strb	r3, [r7, #18]
	buffer[7] = ecuData.ect & 0xff;
 8003540:	4b93      	ldr	r3, [pc, #588]	; (8003790 <Save_ECU+0x2c8>)
 8003542:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8003546:	b2db      	uxtb	r3, r3
 8003548:	74fb      	strb	r3, [r7, #19]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer, &dirStruct, &fileStruct);
 800354a:	7df9      	ldrb	r1, [r7, #23]
 800354c:	f107 030c 	add.w	r3, r7, #12
 8003550:	7dba      	ldrb	r2, [r7, #22]
 8003552:	4890      	ldr	r0, [pc, #576]	; (8003794 <Save_ECU+0x2cc>)
 8003554:	9001      	str	r0, [sp, #4]
 8003556:	4890      	ldr	r0, [pc, #576]	; (8003798 <Save_ECU+0x2d0>)
 8003558:	9000      	str	r0, [sp, #0]
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f002 fdba 	bl	80060d4 <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 1;
 8003560:	2302      	movs	r3, #2
 8003562:	75fb      	strb	r3, [r7, #23]
	length = 8;
 8003564:	2308      	movs	r3, #8
 8003566:	75bb      	strb	r3, [r7, #22]

	buffer[0] = ecuData.map >> 8;
 8003568:	4b89      	ldr	r3, [pc, #548]	; (8003790 <Save_ECU+0x2c8>)
 800356a:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800356e:	121b      	asrs	r3, r3, #8
 8003570:	b21b      	sxth	r3, r3
 8003572:	b2db      	uxtb	r3, r3
 8003574:	733b      	strb	r3, [r7, #12]
	buffer[1] = ecuData.map & 0xff;
 8003576:	4b86      	ldr	r3, [pc, #536]	; (8003790 <Save_ECU+0x2c8>)
 8003578:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800357c:	b2db      	uxtb	r3, r3
 800357e:	737b      	strb	r3, [r7, #13]
	buffer[2] = ecuData.fuel_pressure >> 8;
 8003580:	4b83      	ldr	r3, [pc, #524]	; (8003790 <Save_ECU+0x2c8>)
 8003582:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8003586:	121b      	asrs	r3, r3, #8
 8003588:	b21b      	sxth	r3, r3
 800358a:	b2db      	uxtb	r3, r3
 800358c:	73bb      	strb	r3, [r7, #14]
	buffer[3] = ecuData.fuel_pressure & 0xff;
 800358e:	4b80      	ldr	r3, [pc, #512]	; (8003790 <Save_ECU+0x2c8>)
 8003590:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8003594:	b2db      	uxtb	r3, r3
 8003596:	73fb      	strb	r3, [r7, #15]
	buffer[4] = ecuData.oil_pressure >> 8;
 8003598:	4b7d      	ldr	r3, [pc, #500]	; (8003790 <Save_ECU+0x2c8>)
 800359a:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800359e:	121b      	asrs	r3, r3, #8
 80035a0:	b21b      	sxth	r3, r3
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	743b      	strb	r3, [r7, #16]
	buffer[5] = ecuData.oil_pressure & 0xff;
 80035a6:	4b7a      	ldr	r3, [pc, #488]	; (8003790 <Save_ECU+0x2c8>)
 80035a8:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	747b      	strb	r3, [r7, #17]
	buffer[6] = ecuData.coolant_pressure >> 8;
 80035b0:	4b77      	ldr	r3, [pc, #476]	; (8003790 <Save_ECU+0x2c8>)
 80035b2:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 80035b6:	121b      	asrs	r3, r3, #8
 80035b8:	b21b      	sxth	r3, r3
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	74bb      	strb	r3, [r7, #18]
	buffer[7] = ecuData.coolant_pressure & 0xff;
 80035be:	4b74      	ldr	r3, [pc, #464]	; (8003790 <Save_ECU+0x2c8>)
 80035c0:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	74fb      	strb	r3, [r7, #19]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer, &dirStruct, &fileStruct);
 80035c8:	7df9      	ldrb	r1, [r7, #23]
 80035ca:	f107 030c 	add.w	r3, r7, #12
 80035ce:	7dba      	ldrb	r2, [r7, #22]
 80035d0:	4870      	ldr	r0, [pc, #448]	; (8003794 <Save_ECU+0x2cc>)
 80035d2:	9001      	str	r0, [sp, #4]
 80035d4:	4870      	ldr	r0, [pc, #448]	; (8003798 <Save_ECU+0x2d0>)
 80035d6:	9000      	str	r0, [sp, #0]
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f002 fd7b 	bl	80060d4 <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 2;
 80035de:	2303      	movs	r3, #3
 80035e0:	75fb      	strb	r3, [r7, #23]
	length = 8;
 80035e2:	2308      	movs	r3, #8
 80035e4:	75bb      	strb	r3, [r7, #22]

	buffer[0] = ecuData.lambda >> 8;
 80035e6:	4b6a      	ldr	r3, [pc, #424]	; (8003790 <Save_ECU+0x2c8>)
 80035e8:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 80035ec:	121b      	asrs	r3, r3, #8
 80035ee:	b21b      	sxth	r3, r3
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	733b      	strb	r3, [r7, #12]
	buffer[1] = ecuData.lambda & 0xff;
 80035f4:	4b66      	ldr	r3, [pc, #408]	; (8003790 <Save_ECU+0x2c8>)
 80035f6:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	737b      	strb	r3, [r7, #13]
	buffer[2] = ecuData.oil_temperature >> 8;
 80035fe:	4b64      	ldr	r3, [pc, #400]	; (8003790 <Save_ECU+0x2c8>)
 8003600:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8003604:	121b      	asrs	r3, r3, #8
 8003606:	b21b      	sxth	r3, r3
 8003608:	b2db      	uxtb	r3, r3
 800360a:	73bb      	strb	r3, [r7, #14]
	buffer[3] = ecuData.oil_temperature & 0xff;
 800360c:	4b60      	ldr	r3, [pc, #384]	; (8003790 <Save_ECU+0x2c8>)
 800360e:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8003612:	b2db      	uxtb	r3, r3
 8003614:	73fb      	strb	r3, [r7, #15]
	buffer[4] = ecuData.wheel_speed_fl;
 8003616:	4b5e      	ldr	r3, [pc, #376]	; (8003790 <Save_ECU+0x2c8>)
 8003618:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800361c:	b2db      	uxtb	r3, r3
 800361e:	743b      	strb	r3, [r7, #16]
	buffer[5] = ecuData.wheel_speed_fr;
 8003620:	4b5b      	ldr	r3, [pc, #364]	; (8003790 <Save_ECU+0x2c8>)
 8003622:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8003626:	b2db      	uxtb	r3, r3
 8003628:	747b      	strb	r3, [r7, #17]
	buffer[6] = ecuData.wheel_speed_rl;
 800362a:	4b59      	ldr	r3, [pc, #356]	; (8003790 <Save_ECU+0x2c8>)
 800362c:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 8003630:	b2db      	uxtb	r3, r3
 8003632:	74bb      	strb	r3, [r7, #18]
	buffer[7] = ecuData.wheel_speed_rr;
 8003634:	4b56      	ldr	r3, [pc, #344]	; (8003790 <Save_ECU+0x2c8>)
 8003636:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 800363a:	b2db      	uxtb	r3, r3
 800363c:	74fb      	strb	r3, [r7, #19]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer, &dirStruct, &fileStruct);
 800363e:	7df9      	ldrb	r1, [r7, #23]
 8003640:	f107 030c 	add.w	r3, r7, #12
 8003644:	7dba      	ldrb	r2, [r7, #22]
 8003646:	4853      	ldr	r0, [pc, #332]	; (8003794 <Save_ECU+0x2cc>)
 8003648:	9001      	str	r0, [sp, #4]
 800364a:	4853      	ldr	r0, [pc, #332]	; (8003798 <Save_ECU+0x2d0>)
 800364c:	9000      	str	r0, [sp, #0]
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f002 fd40 	bl	80060d4 <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 3;
 8003654:	2304      	movs	r3, #4
 8003656:	75fb      	strb	r3, [r7, #23]
	length = 8;
 8003658:	2308      	movs	r3, #8
 800365a:	75bb      	strb	r3, [r7, #22]

	buffer[0] = ecuData.battery_voltage >> 8;
 800365c:	4b4c      	ldr	r3, [pc, #304]	; (8003790 <Save_ECU+0x2c8>)
 800365e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003662:	121b      	asrs	r3, r3, #8
 8003664:	b21b      	sxth	r3, r3
 8003666:	b2db      	uxtb	r3, r3
 8003668:	733b      	strb	r3, [r7, #12]
	buffer[1] = ecuData.battery_voltage & 0xff;
 800366a:	4b49      	ldr	r3, [pc, #292]	; (8003790 <Save_ECU+0x2c8>)
 800366c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003670:	b2db      	uxtb	r3, r3
 8003672:	737b      	strb	r3, [r7, #13]
	buffer[2] = ecuData.fuel_flow_total >> 8;
 8003674:	4b46      	ldr	r3, [pc, #280]	; (8003790 <Save_ECU+0x2c8>)
 8003676:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800367a:	121b      	asrs	r3, r3, #8
 800367c:	b21b      	sxth	r3, r3
 800367e:	b2db      	uxtb	r3, r3
 8003680:	73bb      	strb	r3, [r7, #14]
	buffer[3] = ecuData.fuel_flow_total & 0xff;
 8003682:	4b43      	ldr	r3, [pc, #268]	; (8003790 <Save_ECU+0x2c8>)
 8003684:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8003688:	b2db      	uxtb	r3, r3
 800368a:	73fb      	strb	r3, [r7, #15]
	buffer[4] = ecuData.gear & 0xff;
 800368c:	4b40      	ldr	r3, [pc, #256]	; (8003790 <Save_ECU+0x2c8>)
 800368e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8003692:	b2db      	uxtb	r3, r3
 8003694:	743b      	strb	r3, [r7, #16]
	buffer[5] = ecuData.electro_fan & 0xff;
 8003696:	4b3e      	ldr	r3, [pc, #248]	; (8003790 <Save_ECU+0x2c8>)
 8003698:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800369c:	b2db      	uxtb	r3, r3
 800369e:	747b      	strb	r3, [r7, #17]
	buffer[6] = ecuData.injection_bank_a_time >> 8;
 80036a0:	4b3b      	ldr	r3, [pc, #236]	; (8003790 <Save_ECU+0x2c8>)
 80036a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80036a6:	121b      	asrs	r3, r3, #8
 80036a8:	b21b      	sxth	r3, r3
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	74bb      	strb	r3, [r7, #18]
	buffer[7] = ecuData.injection_bank_a_time & 0xff;
 80036ae:	4b38      	ldr	r3, [pc, #224]	; (8003790 <Save_ECU+0x2c8>)
 80036b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	74fb      	strb	r3, [r7, #19]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer, &dirStruct, &fileStruct);
 80036b8:	7df9      	ldrb	r1, [r7, #23]
 80036ba:	f107 030c 	add.w	r3, r7, #12
 80036be:	7dba      	ldrb	r2, [r7, #22]
 80036c0:	4834      	ldr	r0, [pc, #208]	; (8003794 <Save_ECU+0x2cc>)
 80036c2:	9001      	str	r0, [sp, #4]
 80036c4:	4834      	ldr	r0, [pc, #208]	; (8003798 <Save_ECU+0x2d0>)
 80036c6:	9000      	str	r0, [sp, #0]
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f002 fd03 	bl	80060d4 <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 4;
 80036ce:	2305      	movs	r3, #5
 80036d0:	75fb      	strb	r3, [r7, #23]
	length = 2;
 80036d2:	2302      	movs	r3, #2
 80036d4:	75bb      	strb	r3, [r7, #22]

	buffer[0] = ecuData.lambda_correction >> 8;
 80036d6:	4b2e      	ldr	r3, [pc, #184]	; (8003790 <Save_ECU+0x2c8>)
 80036d8:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80036dc:	121b      	asrs	r3, r3, #8
 80036de:	b21b      	sxth	r3, r3
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	733b      	strb	r3, [r7, #12]
	buffer[1] = ecuData.lambda_correction & 0xff;
 80036e4:	4b2a      	ldr	r3, [pc, #168]	; (8003790 <Save_ECU+0x2c8>)
 80036e6:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	737b      	strb	r3, [r7, #13]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer, &dirStruct, &fileStruct);
 80036ee:	7df9      	ldrb	r1, [r7, #23]
 80036f0:	f107 030c 	add.w	r3, r7, #12
 80036f4:	7dba      	ldrb	r2, [r7, #22]
 80036f6:	4827      	ldr	r0, [pc, #156]	; (8003794 <Save_ECU+0x2cc>)
 80036f8:	9001      	str	r0, [sp, #4]
 80036fa:	4827      	ldr	r0, [pc, #156]	; (8003798 <Save_ECU+0x2d0>)
 80036fc:	9000      	str	r0, [sp, #0]
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f002 fce8 	bl	80060d4 <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 5;
 8003704:	2306      	movs	r3, #6
 8003706:	75fb      	strb	r3, [r7, #23]
	length = 8;
 8003708:	2308      	movs	r3, #8
 800370a:	75bb      	strb	r3, [r7, #22]

	buffer[0] = ecuData.accel_long >> 8;
 800370c:	4b20      	ldr	r3, [pc, #128]	; (8003790 <Save_ECU+0x2c8>)
 800370e:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8003712:	121b      	asrs	r3, r3, #8
 8003714:	b21b      	sxth	r3, r3
 8003716:	b2db      	uxtb	r3, r3
 8003718:	733b      	strb	r3, [r7, #12]
	buffer[1] = ecuData.accel_long & 0xff;
 800371a:	4b1d      	ldr	r3, [pc, #116]	; (8003790 <Save_ECU+0x2c8>)
 800371c:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8003720:	b2db      	uxtb	r3, r3
 8003722:	737b      	strb	r3, [r7, #13]
	buffer[2] = ecuData.accel_lat >> 8;
 8003724:	4b1a      	ldr	r3, [pc, #104]	; (8003790 <Save_ECU+0x2c8>)
 8003726:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800372a:	121b      	asrs	r3, r3, #8
 800372c:	b21b      	sxth	r3, r3
 800372e:	b2db      	uxtb	r3, r3
 8003730:	73bb      	strb	r3, [r7, #14]
	buffer[3] = ecuData.accel_lat & 0xff;
 8003732:	4b17      	ldr	r3, [pc, #92]	; (8003790 <Save_ECU+0x2c8>)
 8003734:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8003738:	b2db      	uxtb	r3, r3
 800373a:	73fb      	strb	r3, [r7, #15]
	buffer[4] = ecuData.yaw_rate_pitch >> 8;
 800373c:	4b14      	ldr	r3, [pc, #80]	; (8003790 <Save_ECU+0x2c8>)
 800373e:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 8003742:	121b      	asrs	r3, r3, #8
 8003744:	b21b      	sxth	r3, r3
 8003746:	b2db      	uxtb	r3, r3
 8003748:	743b      	strb	r3, [r7, #16]
	buffer[5] = ecuData.yaw_rate_pitch & 0xff;
 800374a:	4b11      	ldr	r3, [pc, #68]	; (8003790 <Save_ECU+0x2c8>)
 800374c:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 8003750:	b2db      	uxtb	r3, r3
 8003752:	747b      	strb	r3, [r7, #17]
	buffer[6] = ecuData.yaw_rate_roll >> 8;
 8003754:	4b0e      	ldr	r3, [pc, #56]	; (8003790 <Save_ECU+0x2c8>)
 8003756:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 800375a:	121b      	asrs	r3, r3, #8
 800375c:	b21b      	sxth	r3, r3
 800375e:	b2db      	uxtb	r3, r3
 8003760:	74bb      	strb	r3, [r7, #18]
	buffer[7] = ecuData.yaw_rate_roll & 0xff;
 8003762:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <Save_ECU+0x2c8>)
 8003764:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8003768:	b2db      	uxtb	r3, r3
 800376a:	74fb      	strb	r3, [r7, #19]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer, &dirStruct, &fileStruct);
 800376c:	7df9      	ldrb	r1, [r7, #23]
 800376e:	f107 030c 	add.w	r3, r7, #12
 8003772:	7dba      	ldrb	r2, [r7, #22]
 8003774:	4807      	ldr	r0, [pc, #28]	; (8003794 <Save_ECU+0x2cc>)
 8003776:	9001      	str	r0, [sp, #4]
 8003778:	4807      	ldr	r0, [pc, #28]	; (8003798 <Save_ECU+0x2d0>)
 800377a:	9000      	str	r0, [sp, #0]
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f002 fca9 	bl	80060d4 <Principal_Datalogger_Save_Buffer>

	return;
 8003782:	e000      	b.n	8003786 <Save_ECU+0x2be>
		return;
 8003784:	bf00      	nop
}
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	200066fe 	.word	0x200066fe
 8003790:	20000590 	.word	0x20000590
 8003794:	200056a8 	.word	0x200056a8
 8003798:	20004640 	.word	0x20004640

0800379c <Save_PDM>:

static void Save_PDM(CAN_HandleTypeDef* hcan)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b088      	sub	sp, #32
 80037a0:	af02      	add	r7, sp, #8
 80037a2:	6078      	str	r0, [r7, #4]
	uint8_t id = 0, length = 0, buffer[8];
 80037a4:	2300      	movs	r3, #0
 80037a6:	75fb      	strb	r3, [r7, #23]
 80037a8:	2300      	movs	r3, #0
 80037aa:	75bb      	strb	r3, [r7, #22]

	if(flagDatalogger != DL_SAVE)
 80037ac:	4b9a      	ldr	r3, [pc, #616]	; (8003a18 <Save_PDM+0x27c>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	f040 812d 	bne.w	8003a10 <Save_PDM+0x274>
		return;

	id = PDM_FIRST_ID;
 80037b6:	230a      	movs	r3, #10
 80037b8:	75fb      	strb	r3, [r7, #23]
	length = 8;
 80037ba:	2308      	movs	r3, #8
 80037bc:	75bb      	strb	r3, [r7, #22]

	buffer[0] = pdmReadings.Current_Buffer[0] << 8;
 80037be:	2300      	movs	r3, #0
 80037c0:	733b      	strb	r3, [r7, #12]
	buffer[1] = pdmReadings.Current_Buffer[0] & 0xff;
 80037c2:	4b96      	ldr	r3, [pc, #600]	; (8003a1c <Save_PDM+0x280>)
 80037c4:	889b      	ldrh	r3, [r3, #4]
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	737b      	strb	r3, [r7, #13]
	buffer[2] = pdmReadings.Current_Buffer[1] << 8;
 80037ca:	2300      	movs	r3, #0
 80037cc:	73bb      	strb	r3, [r7, #14]
	buffer[3] = pdmReadings.Current_Buffer[1] & 0xff;
 80037ce:	4b93      	ldr	r3, [pc, #588]	; (8003a1c <Save_PDM+0x280>)
 80037d0:	88db      	ldrh	r3, [r3, #6]
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pdmReadings.Current_Buffer[2] << 8;
 80037d6:	2300      	movs	r3, #0
 80037d8:	743b      	strb	r3, [r7, #16]
	buffer[5] = pdmReadings.Current_Buffer[2] & 0xff;
 80037da:	4b90      	ldr	r3, [pc, #576]	; (8003a1c <Save_PDM+0x280>)
 80037dc:	891b      	ldrh	r3, [r3, #8]
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	747b      	strb	r3, [r7, #17]
	buffer[6] = pdmReadings.Current_Buffer[3] << 8;
 80037e2:	2300      	movs	r3, #0
 80037e4:	74bb      	strb	r3, [r7, #18]
	buffer[7] = pdmReadings.Current_Buffer[3] & 0xff;
 80037e6:	4b8d      	ldr	r3, [pc, #564]	; (8003a1c <Save_PDM+0x280>)
 80037e8:	895b      	ldrh	r3, [r3, #10]
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	74fb      	strb	r3, [r7, #19]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer, &dirStruct, &fileStruct);
 80037ee:	7df9      	ldrb	r1, [r7, #23]
 80037f0:	f107 030c 	add.w	r3, r7, #12
 80037f4:	7dba      	ldrb	r2, [r7, #22]
 80037f6:	488a      	ldr	r0, [pc, #552]	; (8003a20 <Save_PDM+0x284>)
 80037f8:	9001      	str	r0, [sp, #4]
 80037fa:	488a      	ldr	r0, [pc, #552]	; (8003a24 <Save_PDM+0x288>)
 80037fc:	9000      	str	r0, [sp, #0]
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f002 fc68 	bl	80060d4 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 1;
 8003804:	230b      	movs	r3, #11
 8003806:	75fb      	strb	r3, [r7, #23]
	length = 8;
 8003808:	2308      	movs	r3, #8
 800380a:	75bb      	strb	r3, [r7, #22]

	buffer[0] = pdmReadings.Current_Buffer[4] << 8;
 800380c:	2300      	movs	r3, #0
 800380e:	733b      	strb	r3, [r7, #12]
	buffer[1] = pdmReadings.Current_Buffer[4] & 0xff;
 8003810:	4b82      	ldr	r3, [pc, #520]	; (8003a1c <Save_PDM+0x280>)
 8003812:	899b      	ldrh	r3, [r3, #12]
 8003814:	b2db      	uxtb	r3, r3
 8003816:	737b      	strb	r3, [r7, #13]
	buffer[2] = pdmReadings.Current_Buffer[5] << 8;
 8003818:	2300      	movs	r3, #0
 800381a:	73bb      	strb	r3, [r7, #14]
	buffer[3] = pdmReadings.Current_Buffer[5] & 0xff;
 800381c:	4b7f      	ldr	r3, [pc, #508]	; (8003a1c <Save_PDM+0x280>)
 800381e:	89db      	ldrh	r3, [r3, #14]
 8003820:	b2db      	uxtb	r3, r3
 8003822:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pdmReadings.Current_Buffer[6] << 8;
 8003824:	2300      	movs	r3, #0
 8003826:	743b      	strb	r3, [r7, #16]
	buffer[5] = pdmReadings.Current_Buffer[6] & 0xff;
 8003828:	4b7c      	ldr	r3, [pc, #496]	; (8003a1c <Save_PDM+0x280>)
 800382a:	8a1b      	ldrh	r3, [r3, #16]
 800382c:	b2db      	uxtb	r3, r3
 800382e:	747b      	strb	r3, [r7, #17]
	buffer[6] = pdmReadings.Current_Buffer[7] << 8;
 8003830:	2300      	movs	r3, #0
 8003832:	74bb      	strb	r3, [r7, #18]
	buffer[7] = pdmReadings.Current_Buffer[7] & 0xff;
 8003834:	4b79      	ldr	r3, [pc, #484]	; (8003a1c <Save_PDM+0x280>)
 8003836:	8a5b      	ldrh	r3, [r3, #18]
 8003838:	b2db      	uxtb	r3, r3
 800383a:	74fb      	strb	r3, [r7, #19]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer, &dirStruct, &fileStruct);
 800383c:	7df9      	ldrb	r1, [r7, #23]
 800383e:	f107 030c 	add.w	r3, r7, #12
 8003842:	7dba      	ldrb	r2, [r7, #22]
 8003844:	4876      	ldr	r0, [pc, #472]	; (8003a20 <Save_PDM+0x284>)
 8003846:	9001      	str	r0, [sp, #4]
 8003848:	4876      	ldr	r0, [pc, #472]	; (8003a24 <Save_PDM+0x288>)
 800384a:	9000      	str	r0, [sp, #0]
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f002 fc41 	bl	80060d4 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 2;
 8003852:	230c      	movs	r3, #12
 8003854:	75fb      	strb	r3, [r7, #23]
	length = 8;
 8003856:	2308      	movs	r3, #8
 8003858:	75bb      	strb	r3, [r7, #22]

	buffer[0] = pdmReadings.Current_Buffer[8] << 8;
 800385a:	2300      	movs	r3, #0
 800385c:	733b      	strb	r3, [r7, #12]
	buffer[1] = pdmReadings.Current_Buffer[8] & 0xff;
 800385e:	4b6f      	ldr	r3, [pc, #444]	; (8003a1c <Save_PDM+0x280>)
 8003860:	8a9b      	ldrh	r3, [r3, #20]
 8003862:	b2db      	uxtb	r3, r3
 8003864:	737b      	strb	r3, [r7, #13]
	buffer[2] = pdmReadings.Current_Buffer[9] << 8;
 8003866:	2300      	movs	r3, #0
 8003868:	73bb      	strb	r3, [r7, #14]
	buffer[3] = pdmReadings.Current_Buffer[9] & 0xff;
 800386a:	4b6c      	ldr	r3, [pc, #432]	; (8003a1c <Save_PDM+0x280>)
 800386c:	8adb      	ldrh	r3, [r3, #22]
 800386e:	b2db      	uxtb	r3, r3
 8003870:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pdmReadings.Current_Buffer[10] << 8;
 8003872:	2300      	movs	r3, #0
 8003874:	743b      	strb	r3, [r7, #16]
	buffer[5] = pdmReadings.Current_Buffer[10] & 0xff;
 8003876:	4b69      	ldr	r3, [pc, #420]	; (8003a1c <Save_PDM+0x280>)
 8003878:	8b1b      	ldrh	r3, [r3, #24]
 800387a:	b2db      	uxtb	r3, r3
 800387c:	747b      	strb	r3, [r7, #17]
	buffer[6] = pdmReadings.Current_Buffer[11] << 8;
 800387e:	2300      	movs	r3, #0
 8003880:	74bb      	strb	r3, [r7, #18]
	buffer[7] = pdmReadings.Current_Buffer[11] & 0xff;
 8003882:	4b66      	ldr	r3, [pc, #408]	; (8003a1c <Save_PDM+0x280>)
 8003884:	8b5b      	ldrh	r3, [r3, #26]
 8003886:	b2db      	uxtb	r3, r3
 8003888:	74fb      	strb	r3, [r7, #19]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer, &dirStruct, &fileStruct);
 800388a:	7df9      	ldrb	r1, [r7, #23]
 800388c:	f107 030c 	add.w	r3, r7, #12
 8003890:	7dba      	ldrb	r2, [r7, #22]
 8003892:	4863      	ldr	r0, [pc, #396]	; (8003a20 <Save_PDM+0x284>)
 8003894:	9001      	str	r0, [sp, #4]
 8003896:	4863      	ldr	r0, [pc, #396]	; (8003a24 <Save_PDM+0x288>)
 8003898:	9000      	str	r0, [sp, #0]
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f002 fc1a 	bl	80060d4 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 3;
 80038a0:	230d      	movs	r3, #13
 80038a2:	75fb      	strb	r3, [r7, #23]
	length = 8;
 80038a4:	2308      	movs	r3, #8
 80038a6:	75bb      	strb	r3, [r7, #22]

	buffer[0] = pdmReadings.Current_Buffer[12] << 8;
 80038a8:	2300      	movs	r3, #0
 80038aa:	733b      	strb	r3, [r7, #12]
	buffer[1] = pdmReadings.Current_Buffer[12] & 0xff;
 80038ac:	4b5b      	ldr	r3, [pc, #364]	; (8003a1c <Save_PDM+0x280>)
 80038ae:	8b9b      	ldrh	r3, [r3, #28]
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	737b      	strb	r3, [r7, #13]
	buffer[2] = pdmReadings.Current_Buffer[13] << 8;
 80038b4:	2300      	movs	r3, #0
 80038b6:	73bb      	strb	r3, [r7, #14]
	buffer[3] = pdmReadings.Current_Buffer[13] & 0xff;
 80038b8:	4b58      	ldr	r3, [pc, #352]	; (8003a1c <Save_PDM+0x280>)
 80038ba:	8bdb      	ldrh	r3, [r3, #30]
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pdmReadings.Current_Buffer[14] << 8;
 80038c0:	2300      	movs	r3, #0
 80038c2:	743b      	strb	r3, [r7, #16]
	buffer[5] = pdmReadings.Current_Buffer[14] & 0xff;
 80038c4:	4b55      	ldr	r3, [pc, #340]	; (8003a1c <Save_PDM+0x280>)
 80038c6:	8c1b      	ldrh	r3, [r3, #32]
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	747b      	strb	r3, [r7, #17]
	buffer[6] = pdmReadings.Current_Buffer[15] << 8;
 80038cc:	2300      	movs	r3, #0
 80038ce:	74bb      	strb	r3, [r7, #18]
	buffer[7] = pdmReadings.Current_Buffer[15] & 0xff;
 80038d0:	4b52      	ldr	r3, [pc, #328]	; (8003a1c <Save_PDM+0x280>)
 80038d2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	74fb      	strb	r3, [r7, #19]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer, &dirStruct, &fileStruct);
 80038d8:	7df9      	ldrb	r1, [r7, #23]
 80038da:	f107 030c 	add.w	r3, r7, #12
 80038de:	7dba      	ldrb	r2, [r7, #22]
 80038e0:	484f      	ldr	r0, [pc, #316]	; (8003a20 <Save_PDM+0x284>)
 80038e2:	9001      	str	r0, [sp, #4]
 80038e4:	484f      	ldr	r0, [pc, #316]	; (8003a24 <Save_PDM+0x288>)
 80038e6:	9000      	str	r0, [sp, #0]
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f002 fbf3 	bl	80060d4 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 4;
 80038ee:	230e      	movs	r3, #14
 80038f0:	75fb      	strb	r3, [r7, #23]
	length = 8;
 80038f2:	2308      	movs	r3, #8
 80038f4:	75bb      	strb	r3, [r7, #22]

	buffer[0] = pdmReadings.Tempetature_Buffer[0] << 8;
 80038f6:	2300      	movs	r3, #0
 80038f8:	733b      	strb	r3, [r7, #12]
	buffer[1] = pdmReadings.Tempetature_Buffer[0] & 0xff;
 80038fa:	4b48      	ldr	r3, [pc, #288]	; (8003a1c <Save_PDM+0x280>)
 80038fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	737b      	strb	r3, [r7, #13]
	buffer[2] = pdmReadings.Tempetature_Buffer[1] << 8;
 8003902:	2300      	movs	r3, #0
 8003904:	73bb      	strb	r3, [r7, #14]
	buffer[3] = pdmReadings.Tempetature_Buffer[1] & 0xff;
 8003906:	4b45      	ldr	r3, [pc, #276]	; (8003a1c <Save_PDM+0x280>)
 8003908:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800390a:	b2db      	uxtb	r3, r3
 800390c:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pdmReadings.Tempetature_Buffer[2] << 8;
 800390e:	2300      	movs	r3, #0
 8003910:	743b      	strb	r3, [r7, #16]
	buffer[5] = pdmReadings.Tempetature_Buffer[2] & 0xff;
 8003912:	4b42      	ldr	r3, [pc, #264]	; (8003a1c <Save_PDM+0x280>)
 8003914:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003916:	b2db      	uxtb	r3, r3
 8003918:	747b      	strb	r3, [r7, #17]
	buffer[6] = pdmReadings.Tempetature_Buffer[3] << 8;
 800391a:	2300      	movs	r3, #0
 800391c:	74bb      	strb	r3, [r7, #18]
	buffer[7] = pdmReadings.Tempetature_Buffer[3] & 0xff;
 800391e:	4b3f      	ldr	r3, [pc, #252]	; (8003a1c <Save_PDM+0x280>)
 8003920:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003922:	b2db      	uxtb	r3, r3
 8003924:	74fb      	strb	r3, [r7, #19]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer, &dirStruct, &fileStruct);
 8003926:	7df9      	ldrb	r1, [r7, #23]
 8003928:	f107 030c 	add.w	r3, r7, #12
 800392c:	7dba      	ldrb	r2, [r7, #22]
 800392e:	483c      	ldr	r0, [pc, #240]	; (8003a20 <Save_PDM+0x284>)
 8003930:	9001      	str	r0, [sp, #4]
 8003932:	483c      	ldr	r0, [pc, #240]	; (8003a24 <Save_PDM+0x288>)
 8003934:	9000      	str	r0, [sp, #0]
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f002 fbcc 	bl	80060d4 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 5;
 800393c:	230f      	movs	r3, #15
 800393e:	75fb      	strb	r3, [r7, #23]
	length = 8;
 8003940:	2308      	movs	r3, #8
 8003942:	75bb      	strb	r3, [r7, #22]

	buffer[0] = pdmReadings.Tempetature_Buffer[4] << 8;
 8003944:	2300      	movs	r3, #0
 8003946:	733b      	strb	r3, [r7, #12]
	buffer[1] = pdmReadings.Tempetature_Buffer[4] & 0xff;
 8003948:	4b34      	ldr	r3, [pc, #208]	; (8003a1c <Save_PDM+0x280>)
 800394a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800394c:	b2db      	uxtb	r3, r3
 800394e:	737b      	strb	r3, [r7, #13]
	buffer[2] = pdmReadings.Tempetature_Buffer[5] << 8;
 8003950:	2300      	movs	r3, #0
 8003952:	73bb      	strb	r3, [r7, #14]
	buffer[3] = pdmReadings.Tempetature_Buffer[5] & 0xff;
 8003954:	4b31      	ldr	r3, [pc, #196]	; (8003a1c <Save_PDM+0x280>)
 8003956:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003958:	b2db      	uxtb	r3, r3
 800395a:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pdmReadings.Tempetature_Buffer[6] << 8;
 800395c:	2300      	movs	r3, #0
 800395e:	743b      	strb	r3, [r7, #16]
	buffer[5] = pdmReadings.Tempetature_Buffer[6] & 0xff;
 8003960:	4b2e      	ldr	r3, [pc, #184]	; (8003a1c <Save_PDM+0x280>)
 8003962:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003964:	b2db      	uxtb	r3, r3
 8003966:	747b      	strb	r3, [r7, #17]
	buffer[6] = pdmReadings.Tempetature_Buffer[7] << 8;
 8003968:	2300      	movs	r3, #0
 800396a:	74bb      	strb	r3, [r7, #18]
	buffer[7] = pdmReadings.Tempetature_Buffer[7] & 0xff;
 800396c:	4b2b      	ldr	r3, [pc, #172]	; (8003a1c <Save_PDM+0x280>)
 800396e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8003970:	b2db      	uxtb	r3, r3
 8003972:	74fb      	strb	r3, [r7, #19]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer, &dirStruct, &fileStruct);
 8003974:	7df9      	ldrb	r1, [r7, #23]
 8003976:	f107 030c 	add.w	r3, r7, #12
 800397a:	7dba      	ldrb	r2, [r7, #22]
 800397c:	4828      	ldr	r0, [pc, #160]	; (8003a20 <Save_PDM+0x284>)
 800397e:	9001      	str	r0, [sp, #4]
 8003980:	4828      	ldr	r0, [pc, #160]	; (8003a24 <Save_PDM+0x288>)
 8003982:	9000      	str	r0, [sp, #0]
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f002 fba5 	bl	80060d4 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 6;
 800398a:	2310      	movs	r3, #16
 800398c:	75fb      	strb	r3, [r7, #23]
	length = 8;
 800398e:	2308      	movs	r3, #8
 8003990:	75bb      	strb	r3, [r7, #22]

	buffer[0] = pdmReadings.Duty_Cycle_Buffer[0] << 8;
 8003992:	2300      	movs	r3, #0
 8003994:	733b      	strb	r3, [r7, #12]
	buffer[1] = pdmReadings.Duty_Cycle_Buffer[0] & 0xff;
 8003996:	4b21      	ldr	r3, [pc, #132]	; (8003a1c <Save_PDM+0x280>)
 8003998:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800399a:	b2db      	uxtb	r3, r3
 800399c:	737b      	strb	r3, [r7, #13]
	buffer[2] = pdmReadings.Duty_Cycle_Buffer[1] << 8;
 800399e:	2300      	movs	r3, #0
 80039a0:	73bb      	strb	r3, [r7, #14]
	buffer[3] = pdmReadings.Duty_Cycle_Buffer[1] & 0xff;
 80039a2:	4b1e      	ldr	r3, [pc, #120]	; (8003a1c <Save_PDM+0x280>)
 80039a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pdmReadings.Duty_Cycle_Buffer[2] << 8;
 80039aa:	2300      	movs	r3, #0
 80039ac:	743b      	strb	r3, [r7, #16]
	buffer[5] = pdmReadings.Duty_Cycle_Buffer[2] & 0xff;
 80039ae:	4b1b      	ldr	r3, [pc, #108]	; (8003a1c <Save_PDM+0x280>)
 80039b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	747b      	strb	r3, [r7, #17]
	buffer[6] = pdmReadings.Duty_Cycle_Buffer[3] << 8;
 80039b6:	2300      	movs	r3, #0
 80039b8:	74bb      	strb	r3, [r7, #18]
	buffer[7] = pdmReadings.Duty_Cycle_Buffer[3] & 0xff;
 80039ba:	4b18      	ldr	r3, [pc, #96]	; (8003a1c <Save_PDM+0x280>)
 80039bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	74fb      	strb	r3, [r7, #19]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer, &dirStruct, &fileStruct);
 80039c2:	7df9      	ldrb	r1, [r7, #23]
 80039c4:	f107 030c 	add.w	r3, r7, #12
 80039c8:	7dba      	ldrb	r2, [r7, #22]
 80039ca:	4815      	ldr	r0, [pc, #84]	; (8003a20 <Save_PDM+0x284>)
 80039cc:	9001      	str	r0, [sp, #4]
 80039ce:	4815      	ldr	r0, [pc, #84]	; (8003a24 <Save_PDM+0x288>)
 80039d0:	9000      	str	r0, [sp, #0]
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f002 fb7e 	bl	80060d4 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 7;
 80039d8:	2311      	movs	r3, #17
 80039da:	75fb      	strb	r3, [r7, #23]
	length = 4;
 80039dc:	2304      	movs	r3, #4
 80039de:	75bb      	strb	r3, [r7, #22]

	buffer[0] = pdmReadings.Input_Voltage << 8;
 80039e0:	2300      	movs	r3, #0
 80039e2:	733b      	strb	r3, [r7, #12]
	buffer[1] = pdmReadings.Input_Voltage & 0xff;
 80039e4:	4b0d      	ldr	r3, [pc, #52]	; (8003a1c <Save_PDM+0x280>)
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	737b      	strb	r3, [r7, #13]
	buffer[2] = pdmReadings.Output_Verify << 8;
 80039ec:	2300      	movs	r3, #0
 80039ee:	73bb      	strb	r3, [r7, #14]
	buffer[3] = pdmReadings.Output_Verify & 0xff;
 80039f0:	4b0a      	ldr	r3, [pc, #40]	; (8003a1c <Save_PDM+0x280>)
 80039f2:	885b      	ldrh	r3, [r3, #2]
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	73fb      	strb	r3, [r7, #15]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer, &dirStruct, &fileStruct);
 80039f8:	7df9      	ldrb	r1, [r7, #23]
 80039fa:	f107 030c 	add.w	r3, r7, #12
 80039fe:	7dba      	ldrb	r2, [r7, #22]
 8003a00:	4807      	ldr	r0, [pc, #28]	; (8003a20 <Save_PDM+0x284>)
 8003a02:	9001      	str	r0, [sp, #4]
 8003a04:	4807      	ldr	r0, [pc, #28]	; (8003a24 <Save_PDM+0x288>)
 8003a06:	9000      	str	r0, [sp, #0]
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f002 fb63 	bl	80060d4 <Principal_Datalogger_Save_Buffer>

	return;
 8003a0e:	e000      	b.n	8003a12 <Save_PDM+0x276>
		return;
 8003a10:	bf00      	nop
}
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	200066fe 	.word	0x200066fe
 8003a1c:	200005f8 	.word	0x200005f8
 8003a20:	200056a8 	.word	0x200056a8
 8003a24:	20004640 	.word	0x20004640

08003a28 <Principal_Init>:

static HAL_StatusTypeDef Load_EEPROM(I2C_HandleTypeDef* hi2c);
static HAL_StatusTypeDef Save_EEPROM(I2C_HandleTypeDef* hi2c);

void Principal_Init(CAN_HandleTypeDef* hcan, I2C_HandleTypeDef* hi2c, TIM_HandleTypeDef* htim)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]
	if(Load_EEPROM(hi2c) != HAL_OK)
 8003a34:	68b8      	ldr	r0, [r7, #8]
 8003a36:	f000 fd33 	bl	80044a0 <Load_EEPROM>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <Principal_Init+0x1c>
		Principal_Hard_Code_Config();
 8003a40:	f000 fcde 	bl	8004400 <Principal_Hard_Code_Config>
//	HAL_RTCEx_SetCoarseCalib(&hrtc, RTC_CALIBSIGN_NEGATIVE, 55);
//	HAL_RTC_SetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
//	HAL_RTC_SetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
//	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, RTC_STORE_DATA);

	if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) == RTC_STORE_DATA)
 8003a44:	2101      	movs	r1, #1
 8003a46:	4813      	ldr	r0, [pc, #76]	; (8003a94 <Principal_Init+0x6c>)
 8003a48:	f009 fb22 	bl	800d090 <HAL_RTCEx_BKUPRead>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	f24e 325c 	movw	r2, #58204	; 0xe35c
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d103      	bne.n	8003a5e <Principal_Init+0x36>
		flagRTC = RTC_OK;
 8003a56:	4b10      	ldr	r3, [pc, #64]	; (8003a98 <Principal_Init+0x70>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	701a      	strb	r2, [r3, #0]
 8003a5c:	e002      	b.n	8003a64 <Principal_Init+0x3c>
	else
		flagRTC = RTC_LOST;
 8003a5e:	4b0e      	ldr	r3, [pc, #56]	; (8003a98 <Principal_Init+0x70>)
 8003a60:	2201      	movs	r2, #1
 8003a62:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adcBuffer[6], 6);
 8003a64:	2206      	movs	r2, #6
 8003a66:	490d      	ldr	r1, [pc, #52]	; (8003a9c <Principal_Init+0x74>)
 8003a68:	480d      	ldr	r0, [pc, #52]	; (8003aa0 <Principal_Init+0x78>)
 8003a6a:	f003 fadb 	bl	8007024 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) &adcBuffer[0], 6);
 8003a6e:	2206      	movs	r2, #6
 8003a70:	490c      	ldr	r1, [pc, #48]	; (8003aa4 <Principal_Init+0x7c>)
 8003a72:	480d      	ldr	r0, [pc, #52]	; (8003aa8 <Principal_Init+0x80>)
 8003a74:	f003 fad6 	bl	8007024 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(htim);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f00b f9f1 	bl	800ee60 <HAL_TIM_Base_Start_IT>

	Principal_Datalogger_Init(&fatfsStruct);
 8003a7e:	480b      	ldr	r0, [pc, #44]	; (8003aac <Principal_Init+0x84>)
 8003a80:	f002 f9b8 	bl	8005df4 <Principal_Datalogger_Init>

	Principal_CAN_Start(hcan);
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f7fe fbf3 	bl	8002270 <Principal_CAN_Start>
}
 8003a8a:	bf00      	nop
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	20000380 	.word	0x20000380
 8003a98:	200066ff 	.word	0x200066ff
 8003a9c:	20000584 	.word	0x20000584
 8003aa0:	200001b4 	.word	0x200001b4
 8003aa4:	20000578 	.word	0x20000578
 8003aa8:	200001fc 	.word	0x200001fc
 8003aac:	20004670 	.word	0x20004670

08003ab0 <Principal_Receive_Config>:

HAL_StatusTypeDef Principal_Receive_Config(I2C_HandleTypeDef* hi2c, uint8_t* data, uint32_t length)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
	HAL_SD_StateTypeDef retVal = HAL_OK;
 8003abc:	2300      	movs	r3, #0
 8003abe:	75fb      	strb	r3, [r7, #23]

	switch(data[0])
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	2b03      	cmp	r3, #3
 8003ac6:	f200 847e 	bhi.w	80043c6 <Principal_Receive_Config+0x916>
 8003aca:	a201      	add	r2, pc, #4	; (adr r2, 8003ad0 <Principal_Receive_Config+0x20>)
 8003acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad0:	08003ae1 	.word	0x08003ae1
 8003ad4:	08003f75 	.word	0x08003f75
 8003ad8:	080042d5 	.word	0x080042d5
 8003adc:	08004353 	.word	0x08004353
	{
		case 0:
			if(length != 8)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	f040 8471 	bne.w	80043ca <Principal_Receive_Config+0x91a>
				break;

			__BUFFER_TO_FREQ(data[1], perMsg[ANALOG_1_4]);
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	3301      	adds	r3, #1
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	3b01      	subs	r3, #1
 8003af0:	2b0a      	cmp	r3, #10
 8003af2:	d847      	bhi.n	8003b84 <Principal_Receive_Config+0xd4>
 8003af4:	a201      	add	r2, pc, #4	; (adr r2, 8003afc <Principal_Receive_Config+0x4c>)
 8003af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003afa:	bf00      	nop
 8003afc:	08003b29 	.word	0x08003b29
 8003b00:	08003b33 	.word	0x08003b33
 8003b04:	08003b3d 	.word	0x08003b3d
 8003b08:	08003b45 	.word	0x08003b45
 8003b0c:	08003b4d 	.word	0x08003b4d
 8003b10:	08003b55 	.word	0x08003b55
 8003b14:	08003b5d 	.word	0x08003b5d
 8003b18:	08003b65 	.word	0x08003b65
 8003b1c:	08003b6d 	.word	0x08003b6d
 8003b20:	08003b75 	.word	0x08003b75
 8003b24:	08003b7d 	.word	0x08003b7d
 8003b28:	4ba8      	ldr	r3, [pc, #672]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003b2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b2e:	801a      	strh	r2, [r3, #0]
 8003b30:	e02b      	b.n	8003b8a <Principal_Receive_Config+0xda>
 8003b32:	4ba6      	ldr	r3, [pc, #664]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003b34:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003b38:	801a      	strh	r2, [r3, #0]
 8003b3a:	e026      	b.n	8003b8a <Principal_Receive_Config+0xda>
 8003b3c:	4ba3      	ldr	r3, [pc, #652]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003b3e:	22c8      	movs	r2, #200	; 0xc8
 8003b40:	801a      	strh	r2, [r3, #0]
 8003b42:	e022      	b.n	8003b8a <Principal_Receive_Config+0xda>
 8003b44:	4ba1      	ldr	r3, [pc, #644]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003b46:	2264      	movs	r2, #100	; 0x64
 8003b48:	801a      	strh	r2, [r3, #0]
 8003b4a:	e01e      	b.n	8003b8a <Principal_Receive_Config+0xda>
 8003b4c:	4b9f      	ldr	r3, [pc, #636]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003b4e:	2232      	movs	r2, #50	; 0x32
 8003b50:	801a      	strh	r2, [r3, #0]
 8003b52:	e01a      	b.n	8003b8a <Principal_Receive_Config+0xda>
 8003b54:	4b9d      	ldr	r3, [pc, #628]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003b56:	2228      	movs	r2, #40	; 0x28
 8003b58:	801a      	strh	r2, [r3, #0]
 8003b5a:	e016      	b.n	8003b8a <Principal_Receive_Config+0xda>
 8003b5c:	4b9b      	ldr	r3, [pc, #620]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003b5e:	2214      	movs	r2, #20
 8003b60:	801a      	strh	r2, [r3, #0]
 8003b62:	e012      	b.n	8003b8a <Principal_Receive_Config+0xda>
 8003b64:	4b99      	ldr	r3, [pc, #612]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003b66:	220a      	movs	r2, #10
 8003b68:	801a      	strh	r2, [r3, #0]
 8003b6a:	e00e      	b.n	8003b8a <Principal_Receive_Config+0xda>
 8003b6c:	4b97      	ldr	r3, [pc, #604]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003b6e:	2205      	movs	r2, #5
 8003b70:	801a      	strh	r2, [r3, #0]
 8003b72:	e00a      	b.n	8003b8a <Principal_Receive_Config+0xda>
 8003b74:	4b95      	ldr	r3, [pc, #596]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003b76:	2204      	movs	r2, #4
 8003b78:	801a      	strh	r2, [r3, #0]
 8003b7a:	e006      	b.n	8003b8a <Principal_Receive_Config+0xda>
 8003b7c:	4b93      	ldr	r3, [pc, #588]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003b7e:	2202      	movs	r2, #2
 8003b80:	801a      	strh	r2, [r3, #0]
 8003b82:	e002      	b.n	8003b8a <Principal_Receive_Config+0xda>
 8003b84:	4b91      	ldr	r3, [pc, #580]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	801a      	strh	r2, [r3, #0]
 8003b8a:	bf00      	nop
			__BUFFER_TO_FREQ(data[2], perMsg[ANALOG_5_8]);
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	3302      	adds	r3, #2
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	3b01      	subs	r3, #1
 8003b94:	2b0a      	cmp	r3, #10
 8003b96:	d847      	bhi.n	8003c28 <Principal_Receive_Config+0x178>
 8003b98:	a201      	add	r2, pc, #4	; (adr r2, 8003ba0 <Principal_Receive_Config+0xf0>)
 8003b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9e:	bf00      	nop
 8003ba0:	08003bcd 	.word	0x08003bcd
 8003ba4:	08003bd7 	.word	0x08003bd7
 8003ba8:	08003be1 	.word	0x08003be1
 8003bac:	08003be9 	.word	0x08003be9
 8003bb0:	08003bf1 	.word	0x08003bf1
 8003bb4:	08003bf9 	.word	0x08003bf9
 8003bb8:	08003c01 	.word	0x08003c01
 8003bbc:	08003c09 	.word	0x08003c09
 8003bc0:	08003c11 	.word	0x08003c11
 8003bc4:	08003c19 	.word	0x08003c19
 8003bc8:	08003c21 	.word	0x08003c21
 8003bcc:	4b7f      	ldr	r3, [pc, #508]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003bce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003bd2:	805a      	strh	r2, [r3, #2]
 8003bd4:	e02b      	b.n	8003c2e <Principal_Receive_Config+0x17e>
 8003bd6:	4b7d      	ldr	r3, [pc, #500]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003bd8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003bdc:	805a      	strh	r2, [r3, #2]
 8003bde:	e026      	b.n	8003c2e <Principal_Receive_Config+0x17e>
 8003be0:	4b7a      	ldr	r3, [pc, #488]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003be2:	22c8      	movs	r2, #200	; 0xc8
 8003be4:	805a      	strh	r2, [r3, #2]
 8003be6:	e022      	b.n	8003c2e <Principal_Receive_Config+0x17e>
 8003be8:	4b78      	ldr	r3, [pc, #480]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003bea:	2264      	movs	r2, #100	; 0x64
 8003bec:	805a      	strh	r2, [r3, #2]
 8003bee:	e01e      	b.n	8003c2e <Principal_Receive_Config+0x17e>
 8003bf0:	4b76      	ldr	r3, [pc, #472]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003bf2:	2232      	movs	r2, #50	; 0x32
 8003bf4:	805a      	strh	r2, [r3, #2]
 8003bf6:	e01a      	b.n	8003c2e <Principal_Receive_Config+0x17e>
 8003bf8:	4b74      	ldr	r3, [pc, #464]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003bfa:	2228      	movs	r2, #40	; 0x28
 8003bfc:	805a      	strh	r2, [r3, #2]
 8003bfe:	e016      	b.n	8003c2e <Principal_Receive_Config+0x17e>
 8003c00:	4b72      	ldr	r3, [pc, #456]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003c02:	2214      	movs	r2, #20
 8003c04:	805a      	strh	r2, [r3, #2]
 8003c06:	e012      	b.n	8003c2e <Principal_Receive_Config+0x17e>
 8003c08:	4b70      	ldr	r3, [pc, #448]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003c0a:	220a      	movs	r2, #10
 8003c0c:	805a      	strh	r2, [r3, #2]
 8003c0e:	e00e      	b.n	8003c2e <Principal_Receive_Config+0x17e>
 8003c10:	4b6e      	ldr	r3, [pc, #440]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003c12:	2205      	movs	r2, #5
 8003c14:	805a      	strh	r2, [r3, #2]
 8003c16:	e00a      	b.n	8003c2e <Principal_Receive_Config+0x17e>
 8003c18:	4b6c      	ldr	r3, [pc, #432]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003c1a:	2204      	movs	r2, #4
 8003c1c:	805a      	strh	r2, [r3, #2]
 8003c1e:	e006      	b.n	8003c2e <Principal_Receive_Config+0x17e>
 8003c20:	4b6a      	ldr	r3, [pc, #424]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003c22:	2202      	movs	r2, #2
 8003c24:	805a      	strh	r2, [r3, #2]
 8003c26:	e002      	b.n	8003c2e <Principal_Receive_Config+0x17e>
 8003c28:	4b68      	ldr	r3, [pc, #416]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	805a      	strh	r2, [r3, #2]
 8003c2e:	bf00      	nop
			__BUFFER_TO_FREQ(data[3], perMsg[ANALOG_9_12]);
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	3303      	adds	r3, #3
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	3b01      	subs	r3, #1
 8003c38:	2b0a      	cmp	r3, #10
 8003c3a:	d847      	bhi.n	8003ccc <Principal_Receive_Config+0x21c>
 8003c3c:	a201      	add	r2, pc, #4	; (adr r2, 8003c44 <Principal_Receive_Config+0x194>)
 8003c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c42:	bf00      	nop
 8003c44:	08003c71 	.word	0x08003c71
 8003c48:	08003c7b 	.word	0x08003c7b
 8003c4c:	08003c85 	.word	0x08003c85
 8003c50:	08003c8d 	.word	0x08003c8d
 8003c54:	08003c95 	.word	0x08003c95
 8003c58:	08003c9d 	.word	0x08003c9d
 8003c5c:	08003ca5 	.word	0x08003ca5
 8003c60:	08003cad 	.word	0x08003cad
 8003c64:	08003cb5 	.word	0x08003cb5
 8003c68:	08003cbd 	.word	0x08003cbd
 8003c6c:	08003cc5 	.word	0x08003cc5
 8003c70:	4b56      	ldr	r3, [pc, #344]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003c72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c76:	809a      	strh	r2, [r3, #4]
 8003c78:	e02b      	b.n	8003cd2 <Principal_Receive_Config+0x222>
 8003c7a:	4b54      	ldr	r3, [pc, #336]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003c7c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003c80:	809a      	strh	r2, [r3, #4]
 8003c82:	e026      	b.n	8003cd2 <Principal_Receive_Config+0x222>
 8003c84:	4b51      	ldr	r3, [pc, #324]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003c86:	22c8      	movs	r2, #200	; 0xc8
 8003c88:	809a      	strh	r2, [r3, #4]
 8003c8a:	e022      	b.n	8003cd2 <Principal_Receive_Config+0x222>
 8003c8c:	4b4f      	ldr	r3, [pc, #316]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003c8e:	2264      	movs	r2, #100	; 0x64
 8003c90:	809a      	strh	r2, [r3, #4]
 8003c92:	e01e      	b.n	8003cd2 <Principal_Receive_Config+0x222>
 8003c94:	4b4d      	ldr	r3, [pc, #308]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003c96:	2232      	movs	r2, #50	; 0x32
 8003c98:	809a      	strh	r2, [r3, #4]
 8003c9a:	e01a      	b.n	8003cd2 <Principal_Receive_Config+0x222>
 8003c9c:	4b4b      	ldr	r3, [pc, #300]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003c9e:	2228      	movs	r2, #40	; 0x28
 8003ca0:	809a      	strh	r2, [r3, #4]
 8003ca2:	e016      	b.n	8003cd2 <Principal_Receive_Config+0x222>
 8003ca4:	4b49      	ldr	r3, [pc, #292]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003ca6:	2214      	movs	r2, #20
 8003ca8:	809a      	strh	r2, [r3, #4]
 8003caa:	e012      	b.n	8003cd2 <Principal_Receive_Config+0x222>
 8003cac:	4b47      	ldr	r3, [pc, #284]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003cae:	220a      	movs	r2, #10
 8003cb0:	809a      	strh	r2, [r3, #4]
 8003cb2:	e00e      	b.n	8003cd2 <Principal_Receive_Config+0x222>
 8003cb4:	4b45      	ldr	r3, [pc, #276]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003cb6:	2205      	movs	r2, #5
 8003cb8:	809a      	strh	r2, [r3, #4]
 8003cba:	e00a      	b.n	8003cd2 <Principal_Receive_Config+0x222>
 8003cbc:	4b43      	ldr	r3, [pc, #268]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003cbe:	2204      	movs	r2, #4
 8003cc0:	809a      	strh	r2, [r3, #4]
 8003cc2:	e006      	b.n	8003cd2 <Principal_Receive_Config+0x222>
 8003cc4:	4b41      	ldr	r3, [pc, #260]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003cc6:	2202      	movs	r2, #2
 8003cc8:	809a      	strh	r2, [r3, #4]
 8003cca:	e002      	b.n	8003cd2 <Principal_Receive_Config+0x222>
 8003ccc:	4b3f      	ldr	r3, [pc, #252]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	809a      	strh	r2, [r3, #4]
 8003cd2:	bf00      	nop
			__BUFFER_TO_FREQ(data[4], perMsg[RTC_MSG]);
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	3b01      	subs	r3, #1
 8003cdc:	2b0a      	cmp	r3, #10
 8003cde:	d847      	bhi.n	8003d70 <Principal_Receive_Config+0x2c0>
 8003ce0:	a201      	add	r2, pc, #4	; (adr r2, 8003ce8 <Principal_Receive_Config+0x238>)
 8003ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce6:	bf00      	nop
 8003ce8:	08003d15 	.word	0x08003d15
 8003cec:	08003d1f 	.word	0x08003d1f
 8003cf0:	08003d29 	.word	0x08003d29
 8003cf4:	08003d31 	.word	0x08003d31
 8003cf8:	08003d39 	.word	0x08003d39
 8003cfc:	08003d41 	.word	0x08003d41
 8003d00:	08003d49 	.word	0x08003d49
 8003d04:	08003d51 	.word	0x08003d51
 8003d08:	08003d59 	.word	0x08003d59
 8003d0c:	08003d61 	.word	0x08003d61
 8003d10:	08003d69 	.word	0x08003d69
 8003d14:	4b2d      	ldr	r3, [pc, #180]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003d16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d1a:	80da      	strh	r2, [r3, #6]
 8003d1c:	e02b      	b.n	8003d76 <Principal_Receive_Config+0x2c6>
 8003d1e:	4b2b      	ldr	r3, [pc, #172]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003d20:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003d24:	80da      	strh	r2, [r3, #6]
 8003d26:	e026      	b.n	8003d76 <Principal_Receive_Config+0x2c6>
 8003d28:	4b28      	ldr	r3, [pc, #160]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003d2a:	22c8      	movs	r2, #200	; 0xc8
 8003d2c:	80da      	strh	r2, [r3, #6]
 8003d2e:	e022      	b.n	8003d76 <Principal_Receive_Config+0x2c6>
 8003d30:	4b26      	ldr	r3, [pc, #152]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003d32:	2264      	movs	r2, #100	; 0x64
 8003d34:	80da      	strh	r2, [r3, #6]
 8003d36:	e01e      	b.n	8003d76 <Principal_Receive_Config+0x2c6>
 8003d38:	4b24      	ldr	r3, [pc, #144]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003d3a:	2232      	movs	r2, #50	; 0x32
 8003d3c:	80da      	strh	r2, [r3, #6]
 8003d3e:	e01a      	b.n	8003d76 <Principal_Receive_Config+0x2c6>
 8003d40:	4b22      	ldr	r3, [pc, #136]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003d42:	2228      	movs	r2, #40	; 0x28
 8003d44:	80da      	strh	r2, [r3, #6]
 8003d46:	e016      	b.n	8003d76 <Principal_Receive_Config+0x2c6>
 8003d48:	4b20      	ldr	r3, [pc, #128]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003d4a:	2214      	movs	r2, #20
 8003d4c:	80da      	strh	r2, [r3, #6]
 8003d4e:	e012      	b.n	8003d76 <Principal_Receive_Config+0x2c6>
 8003d50:	4b1e      	ldr	r3, [pc, #120]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003d52:	220a      	movs	r2, #10
 8003d54:	80da      	strh	r2, [r3, #6]
 8003d56:	e00e      	b.n	8003d76 <Principal_Receive_Config+0x2c6>
 8003d58:	4b1c      	ldr	r3, [pc, #112]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003d5a:	2205      	movs	r2, #5
 8003d5c:	80da      	strh	r2, [r3, #6]
 8003d5e:	e00a      	b.n	8003d76 <Principal_Receive_Config+0x2c6>
 8003d60:	4b1a      	ldr	r3, [pc, #104]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003d62:	2204      	movs	r2, #4
 8003d64:	80da      	strh	r2, [r3, #6]
 8003d66:	e006      	b.n	8003d76 <Principal_Receive_Config+0x2c6>
 8003d68:	4b18      	ldr	r3, [pc, #96]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	80da      	strh	r2, [r3, #6]
 8003d6e:	e002      	b.n	8003d76 <Principal_Receive_Config+0x2c6>
 8003d70:	4b16      	ldr	r3, [pc, #88]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	80da      	strh	r2, [r3, #6]
 8003d76:	bf00      	nop
			__BUFFER_TO_FREQ(data[5], perMsg[VERIFY_MSG]);
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	3305      	adds	r3, #5
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	2b0a      	cmp	r3, #10
 8003d82:	d849      	bhi.n	8003e18 <Principal_Receive_Config+0x368>
 8003d84:	a201      	add	r2, pc, #4	; (adr r2, 8003d8c <Principal_Receive_Config+0x2dc>)
 8003d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8a:	bf00      	nop
 8003d8c:	08003db9 	.word	0x08003db9
 8003d90:	08003dc3 	.word	0x08003dc3
 8003d94:	08003dd1 	.word	0x08003dd1
 8003d98:	08003dd9 	.word	0x08003dd9
 8003d9c:	08003de1 	.word	0x08003de1
 8003da0:	08003de9 	.word	0x08003de9
 8003da4:	08003df1 	.word	0x08003df1
 8003da8:	08003df9 	.word	0x08003df9
 8003dac:	08003e01 	.word	0x08003e01
 8003db0:	08003e09 	.word	0x08003e09
 8003db4:	08003e11 	.word	0x08003e11
 8003db8:	4b04      	ldr	r3, [pc, #16]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003dba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003dbe:	811a      	strh	r2, [r3, #8]
 8003dc0:	e02d      	b.n	8003e1e <Principal_Receive_Config+0x36e>
 8003dc2:	4b02      	ldr	r3, [pc, #8]	; (8003dcc <Principal_Receive_Config+0x31c>)
 8003dc4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003dc8:	811a      	strh	r2, [r3, #8]
 8003dca:	e028      	b.n	8003e1e <Principal_Receive_Config+0x36e>
 8003dcc:	20006728 	.word	0x20006728
 8003dd0:	4ba8      	ldr	r3, [pc, #672]	; (8004074 <Principal_Receive_Config+0x5c4>)
 8003dd2:	22c8      	movs	r2, #200	; 0xc8
 8003dd4:	811a      	strh	r2, [r3, #8]
 8003dd6:	e022      	b.n	8003e1e <Principal_Receive_Config+0x36e>
 8003dd8:	4ba6      	ldr	r3, [pc, #664]	; (8004074 <Principal_Receive_Config+0x5c4>)
 8003dda:	2264      	movs	r2, #100	; 0x64
 8003ddc:	811a      	strh	r2, [r3, #8]
 8003dde:	e01e      	b.n	8003e1e <Principal_Receive_Config+0x36e>
 8003de0:	4ba4      	ldr	r3, [pc, #656]	; (8004074 <Principal_Receive_Config+0x5c4>)
 8003de2:	2232      	movs	r2, #50	; 0x32
 8003de4:	811a      	strh	r2, [r3, #8]
 8003de6:	e01a      	b.n	8003e1e <Principal_Receive_Config+0x36e>
 8003de8:	4ba2      	ldr	r3, [pc, #648]	; (8004074 <Principal_Receive_Config+0x5c4>)
 8003dea:	2228      	movs	r2, #40	; 0x28
 8003dec:	811a      	strh	r2, [r3, #8]
 8003dee:	e016      	b.n	8003e1e <Principal_Receive_Config+0x36e>
 8003df0:	4ba0      	ldr	r3, [pc, #640]	; (8004074 <Principal_Receive_Config+0x5c4>)
 8003df2:	2214      	movs	r2, #20
 8003df4:	811a      	strh	r2, [r3, #8]
 8003df6:	e012      	b.n	8003e1e <Principal_Receive_Config+0x36e>
 8003df8:	4b9e      	ldr	r3, [pc, #632]	; (8004074 <Principal_Receive_Config+0x5c4>)
 8003dfa:	220a      	movs	r2, #10
 8003dfc:	811a      	strh	r2, [r3, #8]
 8003dfe:	e00e      	b.n	8003e1e <Principal_Receive_Config+0x36e>
 8003e00:	4b9c      	ldr	r3, [pc, #624]	; (8004074 <Principal_Receive_Config+0x5c4>)
 8003e02:	2205      	movs	r2, #5
 8003e04:	811a      	strh	r2, [r3, #8]
 8003e06:	e00a      	b.n	8003e1e <Principal_Receive_Config+0x36e>
 8003e08:	4b9a      	ldr	r3, [pc, #616]	; (8004074 <Principal_Receive_Config+0x5c4>)
 8003e0a:	2204      	movs	r2, #4
 8003e0c:	811a      	strh	r2, [r3, #8]
 8003e0e:	e006      	b.n	8003e1e <Principal_Receive_Config+0x36e>
 8003e10:	4b98      	ldr	r3, [pc, #608]	; (8004074 <Principal_Receive_Config+0x5c4>)
 8003e12:	2202      	movs	r2, #2
 8003e14:	811a      	strh	r2, [r3, #8]
 8003e16:	e002      	b.n	8003e1e <Principal_Receive_Config+0x36e>
 8003e18:	4b96      	ldr	r3, [pc, #600]	; (8004074 <Principal_Receive_Config+0x5c4>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	811a      	strh	r2, [r3, #8]
 8003e1e:	bf00      	nop
			__BUFFER_TO_FREQ(data[6], perMsg[ECU_SAVE]);
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	3306      	adds	r3, #6
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	2b0a      	cmp	r3, #10
 8003e2a:	d847      	bhi.n	8003ebc <Principal_Receive_Config+0x40c>
 8003e2c:	a201      	add	r2, pc, #4	; (adr r2, 8003e34 <Principal_Receive_Config+0x384>)
 8003e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e32:	bf00      	nop
 8003e34:	08003e61 	.word	0x08003e61
 8003e38:	08003e6b 	.word	0x08003e6b
 8003e3c:	08003e75 	.word	0x08003e75
 8003e40:	08003e7d 	.word	0x08003e7d
 8003e44:	08003e85 	.word	0x08003e85
 8003e48:	08003e8d 	.word	0x08003e8d
 8003e4c:	08003e95 	.word	0x08003e95
 8003e50:	08003e9d 	.word	0x08003e9d
 8003e54:	08003ea5 	.word	0x08003ea5
 8003e58:	08003ead 	.word	0x08003ead
 8003e5c:	08003eb5 	.word	0x08003eb5
 8003e60:	4b84      	ldr	r3, [pc, #528]	; (8004074 <Principal_Receive_Config+0x5c4>)
 8003e62:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e66:	819a      	strh	r2, [r3, #12]
 8003e68:	e02b      	b.n	8003ec2 <Principal_Receive_Config+0x412>
 8003e6a:	4b82      	ldr	r3, [pc, #520]	; (8004074 <Principal_Receive_Config+0x5c4>)
 8003e6c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003e70:	819a      	strh	r2, [r3, #12]
 8003e72:	e026      	b.n	8003ec2 <Principal_Receive_Config+0x412>
 8003e74:	4b7f      	ldr	r3, [pc, #508]	; (8004074 <Principal_Receive_Config+0x5c4>)
 8003e76:	22c8      	movs	r2, #200	; 0xc8
 8003e78:	819a      	strh	r2, [r3, #12]
 8003e7a:	e022      	b.n	8003ec2 <Principal_Receive_Config+0x412>
 8003e7c:	4b7d      	ldr	r3, [pc, #500]	; (8004074 <Principal_Receive_Config+0x5c4>)
 8003e7e:	2264      	movs	r2, #100	; 0x64
 8003e80:	819a      	strh	r2, [r3, #12]
 8003e82:	e01e      	b.n	8003ec2 <Principal_Receive_Config+0x412>
 8003e84:	4b7b      	ldr	r3, [pc, #492]	; (8004074 <Principal_Receive_Config+0x5c4>)
 8003e86:	2232      	movs	r2, #50	; 0x32
 8003e88:	819a      	strh	r2, [r3, #12]
 8003e8a:	e01a      	b.n	8003ec2 <Principal_Receive_Config+0x412>
 8003e8c:	4b79      	ldr	r3, [pc, #484]	; (8004074 <Principal_Receive_Config+0x5c4>)
 8003e8e:	2228      	movs	r2, #40	; 0x28
 8003e90:	819a      	strh	r2, [r3, #12]
 8003e92:	e016      	b.n	8003ec2 <Principal_Receive_Config+0x412>
 8003e94:	4b77      	ldr	r3, [pc, #476]	; (8004074 <Principal_Receive_Config+0x5c4>)
 8003e96:	2214      	movs	r2, #20
 8003e98:	819a      	strh	r2, [r3, #12]
 8003e9a:	e012      	b.n	8003ec2 <Principal_Receive_Config+0x412>
 8003e9c:	4b75      	ldr	r3, [pc, #468]	; (8004074 <Principal_Receive_Config+0x5c4>)
 8003e9e:	220a      	movs	r2, #10
 8003ea0:	819a      	strh	r2, [r3, #12]
 8003ea2:	e00e      	b.n	8003ec2 <Principal_Receive_Config+0x412>
 8003ea4:	4b73      	ldr	r3, [pc, #460]	; (8004074 <Principal_Receive_Config+0x5c4>)
 8003ea6:	2205      	movs	r2, #5
 8003ea8:	819a      	strh	r2, [r3, #12]
 8003eaa:	e00a      	b.n	8003ec2 <Principal_Receive_Config+0x412>
 8003eac:	4b71      	ldr	r3, [pc, #452]	; (8004074 <Principal_Receive_Config+0x5c4>)
 8003eae:	2204      	movs	r2, #4
 8003eb0:	819a      	strh	r2, [r3, #12]
 8003eb2:	e006      	b.n	8003ec2 <Principal_Receive_Config+0x412>
 8003eb4:	4b6f      	ldr	r3, [pc, #444]	; (8004074 <Principal_Receive_Config+0x5c4>)
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	819a      	strh	r2, [r3, #12]
 8003eba:	e002      	b.n	8003ec2 <Principal_Receive_Config+0x412>
 8003ebc:	4b6d      	ldr	r3, [pc, #436]	; (8004074 <Principal_Receive_Config+0x5c4>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	819a      	strh	r2, [r3, #12]
 8003ec2:	bf00      	nop
			__BUFFER_TO_FREQ(data[7], perMsg[PDM_SAVE]);
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	3307      	adds	r3, #7
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	2b0a      	cmp	r3, #10
 8003ece:	d847      	bhi.n	8003f60 <Principal_Receive_Config+0x4b0>
 8003ed0:	a201      	add	r2, pc, #4	; (adr r2, 8003ed8 <Principal_Receive_Config+0x428>)
 8003ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed6:	bf00      	nop
 8003ed8:	08003f05 	.word	0x08003f05
 8003edc:	08003f0f 	.word	0x08003f0f
 8003ee0:	08003f19 	.word	0x08003f19
 8003ee4:	08003f21 	.word	0x08003f21
 8003ee8:	08003f29 	.word	0x08003f29
 8003eec:	08003f31 	.word	0x08003f31
 8003ef0:	08003f39 	.word	0x08003f39
 8003ef4:	08003f41 	.word	0x08003f41
 8003ef8:	08003f49 	.word	0x08003f49
 8003efc:	08003f51 	.word	0x08003f51
 8003f00:	08003f59 	.word	0x08003f59
 8003f04:	4b5b      	ldr	r3, [pc, #364]	; (8004074 <Principal_Receive_Config+0x5c4>)
 8003f06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f0a:	81da      	strh	r2, [r3, #14]
 8003f0c:	e02b      	b.n	8003f66 <Principal_Receive_Config+0x4b6>
 8003f0e:	4b59      	ldr	r3, [pc, #356]	; (8004074 <Principal_Receive_Config+0x5c4>)
 8003f10:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003f14:	81da      	strh	r2, [r3, #14]
 8003f16:	e026      	b.n	8003f66 <Principal_Receive_Config+0x4b6>
 8003f18:	4b56      	ldr	r3, [pc, #344]	; (8004074 <Principal_Receive_Config+0x5c4>)
 8003f1a:	22c8      	movs	r2, #200	; 0xc8
 8003f1c:	81da      	strh	r2, [r3, #14]
 8003f1e:	e022      	b.n	8003f66 <Principal_Receive_Config+0x4b6>
 8003f20:	4b54      	ldr	r3, [pc, #336]	; (8004074 <Principal_Receive_Config+0x5c4>)
 8003f22:	2264      	movs	r2, #100	; 0x64
 8003f24:	81da      	strh	r2, [r3, #14]
 8003f26:	e01e      	b.n	8003f66 <Principal_Receive_Config+0x4b6>
 8003f28:	4b52      	ldr	r3, [pc, #328]	; (8004074 <Principal_Receive_Config+0x5c4>)
 8003f2a:	2232      	movs	r2, #50	; 0x32
 8003f2c:	81da      	strh	r2, [r3, #14]
 8003f2e:	e01a      	b.n	8003f66 <Principal_Receive_Config+0x4b6>
 8003f30:	4b50      	ldr	r3, [pc, #320]	; (8004074 <Principal_Receive_Config+0x5c4>)
 8003f32:	2228      	movs	r2, #40	; 0x28
 8003f34:	81da      	strh	r2, [r3, #14]
 8003f36:	e016      	b.n	8003f66 <Principal_Receive_Config+0x4b6>
 8003f38:	4b4e      	ldr	r3, [pc, #312]	; (8004074 <Principal_Receive_Config+0x5c4>)
 8003f3a:	2214      	movs	r2, #20
 8003f3c:	81da      	strh	r2, [r3, #14]
 8003f3e:	e012      	b.n	8003f66 <Principal_Receive_Config+0x4b6>
 8003f40:	4b4c      	ldr	r3, [pc, #304]	; (8004074 <Principal_Receive_Config+0x5c4>)
 8003f42:	220a      	movs	r2, #10
 8003f44:	81da      	strh	r2, [r3, #14]
 8003f46:	e00e      	b.n	8003f66 <Principal_Receive_Config+0x4b6>
 8003f48:	4b4a      	ldr	r3, [pc, #296]	; (8004074 <Principal_Receive_Config+0x5c4>)
 8003f4a:	2205      	movs	r2, #5
 8003f4c:	81da      	strh	r2, [r3, #14]
 8003f4e:	e00a      	b.n	8003f66 <Principal_Receive_Config+0x4b6>
 8003f50:	4b48      	ldr	r3, [pc, #288]	; (8004074 <Principal_Receive_Config+0x5c4>)
 8003f52:	2204      	movs	r2, #4
 8003f54:	81da      	strh	r2, [r3, #14]
 8003f56:	e006      	b.n	8003f66 <Principal_Receive_Config+0x4b6>
 8003f58:	4b46      	ldr	r3, [pc, #280]	; (8004074 <Principal_Receive_Config+0x5c4>)
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	81da      	strh	r2, [r3, #14]
 8003f5e:	e002      	b.n	8003f66 <Principal_Receive_Config+0x4b6>
 8003f60:	4b44      	ldr	r3, [pc, #272]	; (8004074 <Principal_Receive_Config+0x5c4>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	81da      	strh	r2, [r3, #14]
 8003f66:	bf00      	nop

			retVal = Save_EEPROM(hi2c);
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 febf 	bl	8004cec <Save_EEPROM>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	75fb      	strb	r3, [r7, #23]
			break;
 8003f72:	e231      	b.n	80043d8 <Principal_Receive_Config+0x928>

		case 1:
			if(length != 7)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b07      	cmp	r3, #7
 8003f78:	f040 8229 	bne.w	80043ce <Principal_Receive_Config+0x91e>
				break;

			__BUFFER_TO_FREQ(data[1], perCAN[ANALOG_1_4]);
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	3b01      	subs	r3, #1
 8003f84:	2b0a      	cmp	r3, #10
 8003f86:	d847      	bhi.n	8004018 <Principal_Receive_Config+0x568>
 8003f88:	a201      	add	r2, pc, #4	; (adr r2, 8003f90 <Principal_Receive_Config+0x4e0>)
 8003f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8e:	bf00      	nop
 8003f90:	08003fbd 	.word	0x08003fbd
 8003f94:	08003fc7 	.word	0x08003fc7
 8003f98:	08003fd1 	.word	0x08003fd1
 8003f9c:	08003fd9 	.word	0x08003fd9
 8003fa0:	08003fe1 	.word	0x08003fe1
 8003fa4:	08003fe9 	.word	0x08003fe9
 8003fa8:	08003ff1 	.word	0x08003ff1
 8003fac:	08003ff9 	.word	0x08003ff9
 8003fb0:	08004001 	.word	0x08004001
 8003fb4:	08004009 	.word	0x08004009
 8003fb8:	08004011 	.word	0x08004011
 8003fbc:	4b2e      	ldr	r3, [pc, #184]	; (8004078 <Principal_Receive_Config+0x5c8>)
 8003fbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003fc2:	801a      	strh	r2, [r3, #0]
 8003fc4:	e02b      	b.n	800401e <Principal_Receive_Config+0x56e>
 8003fc6:	4b2c      	ldr	r3, [pc, #176]	; (8004078 <Principal_Receive_Config+0x5c8>)
 8003fc8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003fcc:	801a      	strh	r2, [r3, #0]
 8003fce:	e026      	b.n	800401e <Principal_Receive_Config+0x56e>
 8003fd0:	4b29      	ldr	r3, [pc, #164]	; (8004078 <Principal_Receive_Config+0x5c8>)
 8003fd2:	22c8      	movs	r2, #200	; 0xc8
 8003fd4:	801a      	strh	r2, [r3, #0]
 8003fd6:	e022      	b.n	800401e <Principal_Receive_Config+0x56e>
 8003fd8:	4b27      	ldr	r3, [pc, #156]	; (8004078 <Principal_Receive_Config+0x5c8>)
 8003fda:	2264      	movs	r2, #100	; 0x64
 8003fdc:	801a      	strh	r2, [r3, #0]
 8003fde:	e01e      	b.n	800401e <Principal_Receive_Config+0x56e>
 8003fe0:	4b25      	ldr	r3, [pc, #148]	; (8004078 <Principal_Receive_Config+0x5c8>)
 8003fe2:	2232      	movs	r2, #50	; 0x32
 8003fe4:	801a      	strh	r2, [r3, #0]
 8003fe6:	e01a      	b.n	800401e <Principal_Receive_Config+0x56e>
 8003fe8:	4b23      	ldr	r3, [pc, #140]	; (8004078 <Principal_Receive_Config+0x5c8>)
 8003fea:	2228      	movs	r2, #40	; 0x28
 8003fec:	801a      	strh	r2, [r3, #0]
 8003fee:	e016      	b.n	800401e <Principal_Receive_Config+0x56e>
 8003ff0:	4b21      	ldr	r3, [pc, #132]	; (8004078 <Principal_Receive_Config+0x5c8>)
 8003ff2:	2214      	movs	r2, #20
 8003ff4:	801a      	strh	r2, [r3, #0]
 8003ff6:	e012      	b.n	800401e <Principal_Receive_Config+0x56e>
 8003ff8:	4b1f      	ldr	r3, [pc, #124]	; (8004078 <Principal_Receive_Config+0x5c8>)
 8003ffa:	220a      	movs	r2, #10
 8003ffc:	801a      	strh	r2, [r3, #0]
 8003ffe:	e00e      	b.n	800401e <Principal_Receive_Config+0x56e>
 8004000:	4b1d      	ldr	r3, [pc, #116]	; (8004078 <Principal_Receive_Config+0x5c8>)
 8004002:	2205      	movs	r2, #5
 8004004:	801a      	strh	r2, [r3, #0]
 8004006:	e00a      	b.n	800401e <Principal_Receive_Config+0x56e>
 8004008:	4b1b      	ldr	r3, [pc, #108]	; (8004078 <Principal_Receive_Config+0x5c8>)
 800400a:	2204      	movs	r2, #4
 800400c:	801a      	strh	r2, [r3, #0]
 800400e:	e006      	b.n	800401e <Principal_Receive_Config+0x56e>
 8004010:	4b19      	ldr	r3, [pc, #100]	; (8004078 <Principal_Receive_Config+0x5c8>)
 8004012:	2202      	movs	r2, #2
 8004014:	801a      	strh	r2, [r3, #0]
 8004016:	e002      	b.n	800401e <Principal_Receive_Config+0x56e>
 8004018:	4b17      	ldr	r3, [pc, #92]	; (8004078 <Principal_Receive_Config+0x5c8>)
 800401a:	2200      	movs	r2, #0
 800401c:	801a      	strh	r2, [r3, #0]
 800401e:	bf00      	nop
			__BUFFER_TO_FREQ(data[2], perCAN[ANALOG_5_8]);
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	3302      	adds	r3, #2
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	3b01      	subs	r3, #1
 8004028:	2b0a      	cmp	r3, #10
 800402a:	d84b      	bhi.n	80040c4 <Principal_Receive_Config+0x614>
 800402c:	a201      	add	r2, pc, #4	; (adr r2, 8004034 <Principal_Receive_Config+0x584>)
 800402e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004032:	bf00      	nop
 8004034:	08004061 	.word	0x08004061
 8004038:	0800406b 	.word	0x0800406b
 800403c:	0800407d 	.word	0x0800407d
 8004040:	08004085 	.word	0x08004085
 8004044:	0800408d 	.word	0x0800408d
 8004048:	08004095 	.word	0x08004095
 800404c:	0800409d 	.word	0x0800409d
 8004050:	080040a5 	.word	0x080040a5
 8004054:	080040ad 	.word	0x080040ad
 8004058:	080040b5 	.word	0x080040b5
 800405c:	080040bd 	.word	0x080040bd
 8004060:	4b05      	ldr	r3, [pc, #20]	; (8004078 <Principal_Receive_Config+0x5c8>)
 8004062:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004066:	805a      	strh	r2, [r3, #2]
 8004068:	e02f      	b.n	80040ca <Principal_Receive_Config+0x61a>
 800406a:	4b03      	ldr	r3, [pc, #12]	; (8004078 <Principal_Receive_Config+0x5c8>)
 800406c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004070:	805a      	strh	r2, [r3, #2]
 8004072:	e02a      	b.n	80040ca <Principal_Receive_Config+0x61a>
 8004074:	20006728 	.word	0x20006728
 8004078:	2000671c 	.word	0x2000671c
 800407c:	4b93      	ldr	r3, [pc, #588]	; (80042cc <Principal_Receive_Config+0x81c>)
 800407e:	22c8      	movs	r2, #200	; 0xc8
 8004080:	805a      	strh	r2, [r3, #2]
 8004082:	e022      	b.n	80040ca <Principal_Receive_Config+0x61a>
 8004084:	4b91      	ldr	r3, [pc, #580]	; (80042cc <Principal_Receive_Config+0x81c>)
 8004086:	2264      	movs	r2, #100	; 0x64
 8004088:	805a      	strh	r2, [r3, #2]
 800408a:	e01e      	b.n	80040ca <Principal_Receive_Config+0x61a>
 800408c:	4b8f      	ldr	r3, [pc, #572]	; (80042cc <Principal_Receive_Config+0x81c>)
 800408e:	2232      	movs	r2, #50	; 0x32
 8004090:	805a      	strh	r2, [r3, #2]
 8004092:	e01a      	b.n	80040ca <Principal_Receive_Config+0x61a>
 8004094:	4b8d      	ldr	r3, [pc, #564]	; (80042cc <Principal_Receive_Config+0x81c>)
 8004096:	2228      	movs	r2, #40	; 0x28
 8004098:	805a      	strh	r2, [r3, #2]
 800409a:	e016      	b.n	80040ca <Principal_Receive_Config+0x61a>
 800409c:	4b8b      	ldr	r3, [pc, #556]	; (80042cc <Principal_Receive_Config+0x81c>)
 800409e:	2214      	movs	r2, #20
 80040a0:	805a      	strh	r2, [r3, #2]
 80040a2:	e012      	b.n	80040ca <Principal_Receive_Config+0x61a>
 80040a4:	4b89      	ldr	r3, [pc, #548]	; (80042cc <Principal_Receive_Config+0x81c>)
 80040a6:	220a      	movs	r2, #10
 80040a8:	805a      	strh	r2, [r3, #2]
 80040aa:	e00e      	b.n	80040ca <Principal_Receive_Config+0x61a>
 80040ac:	4b87      	ldr	r3, [pc, #540]	; (80042cc <Principal_Receive_Config+0x81c>)
 80040ae:	2205      	movs	r2, #5
 80040b0:	805a      	strh	r2, [r3, #2]
 80040b2:	e00a      	b.n	80040ca <Principal_Receive_Config+0x61a>
 80040b4:	4b85      	ldr	r3, [pc, #532]	; (80042cc <Principal_Receive_Config+0x81c>)
 80040b6:	2204      	movs	r2, #4
 80040b8:	805a      	strh	r2, [r3, #2]
 80040ba:	e006      	b.n	80040ca <Principal_Receive_Config+0x61a>
 80040bc:	4b83      	ldr	r3, [pc, #524]	; (80042cc <Principal_Receive_Config+0x81c>)
 80040be:	2202      	movs	r2, #2
 80040c0:	805a      	strh	r2, [r3, #2]
 80040c2:	e002      	b.n	80040ca <Principal_Receive_Config+0x61a>
 80040c4:	4b81      	ldr	r3, [pc, #516]	; (80042cc <Principal_Receive_Config+0x81c>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	805a      	strh	r2, [r3, #2]
 80040ca:	bf00      	nop
			__BUFFER_TO_FREQ(data[3], perCAN[ANALOG_9_12]);
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	3303      	adds	r3, #3
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	3b01      	subs	r3, #1
 80040d4:	2b0a      	cmp	r3, #10
 80040d6:	d847      	bhi.n	8004168 <Principal_Receive_Config+0x6b8>
 80040d8:	a201      	add	r2, pc, #4	; (adr r2, 80040e0 <Principal_Receive_Config+0x630>)
 80040da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040de:	bf00      	nop
 80040e0:	0800410d 	.word	0x0800410d
 80040e4:	08004117 	.word	0x08004117
 80040e8:	08004121 	.word	0x08004121
 80040ec:	08004129 	.word	0x08004129
 80040f0:	08004131 	.word	0x08004131
 80040f4:	08004139 	.word	0x08004139
 80040f8:	08004141 	.word	0x08004141
 80040fc:	08004149 	.word	0x08004149
 8004100:	08004151 	.word	0x08004151
 8004104:	08004159 	.word	0x08004159
 8004108:	08004161 	.word	0x08004161
 800410c:	4b6f      	ldr	r3, [pc, #444]	; (80042cc <Principal_Receive_Config+0x81c>)
 800410e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004112:	809a      	strh	r2, [r3, #4]
 8004114:	e02b      	b.n	800416e <Principal_Receive_Config+0x6be>
 8004116:	4b6d      	ldr	r3, [pc, #436]	; (80042cc <Principal_Receive_Config+0x81c>)
 8004118:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800411c:	809a      	strh	r2, [r3, #4]
 800411e:	e026      	b.n	800416e <Principal_Receive_Config+0x6be>
 8004120:	4b6a      	ldr	r3, [pc, #424]	; (80042cc <Principal_Receive_Config+0x81c>)
 8004122:	22c8      	movs	r2, #200	; 0xc8
 8004124:	809a      	strh	r2, [r3, #4]
 8004126:	e022      	b.n	800416e <Principal_Receive_Config+0x6be>
 8004128:	4b68      	ldr	r3, [pc, #416]	; (80042cc <Principal_Receive_Config+0x81c>)
 800412a:	2264      	movs	r2, #100	; 0x64
 800412c:	809a      	strh	r2, [r3, #4]
 800412e:	e01e      	b.n	800416e <Principal_Receive_Config+0x6be>
 8004130:	4b66      	ldr	r3, [pc, #408]	; (80042cc <Principal_Receive_Config+0x81c>)
 8004132:	2232      	movs	r2, #50	; 0x32
 8004134:	809a      	strh	r2, [r3, #4]
 8004136:	e01a      	b.n	800416e <Principal_Receive_Config+0x6be>
 8004138:	4b64      	ldr	r3, [pc, #400]	; (80042cc <Principal_Receive_Config+0x81c>)
 800413a:	2228      	movs	r2, #40	; 0x28
 800413c:	809a      	strh	r2, [r3, #4]
 800413e:	e016      	b.n	800416e <Principal_Receive_Config+0x6be>
 8004140:	4b62      	ldr	r3, [pc, #392]	; (80042cc <Principal_Receive_Config+0x81c>)
 8004142:	2214      	movs	r2, #20
 8004144:	809a      	strh	r2, [r3, #4]
 8004146:	e012      	b.n	800416e <Principal_Receive_Config+0x6be>
 8004148:	4b60      	ldr	r3, [pc, #384]	; (80042cc <Principal_Receive_Config+0x81c>)
 800414a:	220a      	movs	r2, #10
 800414c:	809a      	strh	r2, [r3, #4]
 800414e:	e00e      	b.n	800416e <Principal_Receive_Config+0x6be>
 8004150:	4b5e      	ldr	r3, [pc, #376]	; (80042cc <Principal_Receive_Config+0x81c>)
 8004152:	2205      	movs	r2, #5
 8004154:	809a      	strh	r2, [r3, #4]
 8004156:	e00a      	b.n	800416e <Principal_Receive_Config+0x6be>
 8004158:	4b5c      	ldr	r3, [pc, #368]	; (80042cc <Principal_Receive_Config+0x81c>)
 800415a:	2204      	movs	r2, #4
 800415c:	809a      	strh	r2, [r3, #4]
 800415e:	e006      	b.n	800416e <Principal_Receive_Config+0x6be>
 8004160:	4b5a      	ldr	r3, [pc, #360]	; (80042cc <Principal_Receive_Config+0x81c>)
 8004162:	2202      	movs	r2, #2
 8004164:	809a      	strh	r2, [r3, #4]
 8004166:	e002      	b.n	800416e <Principal_Receive_Config+0x6be>
 8004168:	4b58      	ldr	r3, [pc, #352]	; (80042cc <Principal_Receive_Config+0x81c>)
 800416a:	2200      	movs	r2, #0
 800416c:	809a      	strh	r2, [r3, #4]
 800416e:	bf00      	nop
			__BUFFER_TO_FREQ(data[4], perCAN[RTC_MSG]);
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	3304      	adds	r3, #4
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	3b01      	subs	r3, #1
 8004178:	2b0a      	cmp	r3, #10
 800417a:	d847      	bhi.n	800420c <Principal_Receive_Config+0x75c>
 800417c:	a201      	add	r2, pc, #4	; (adr r2, 8004184 <Principal_Receive_Config+0x6d4>)
 800417e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004182:	bf00      	nop
 8004184:	080041b1 	.word	0x080041b1
 8004188:	080041bb 	.word	0x080041bb
 800418c:	080041c5 	.word	0x080041c5
 8004190:	080041cd 	.word	0x080041cd
 8004194:	080041d5 	.word	0x080041d5
 8004198:	080041dd 	.word	0x080041dd
 800419c:	080041e5 	.word	0x080041e5
 80041a0:	080041ed 	.word	0x080041ed
 80041a4:	080041f5 	.word	0x080041f5
 80041a8:	080041fd 	.word	0x080041fd
 80041ac:	08004205 	.word	0x08004205
 80041b0:	4b46      	ldr	r3, [pc, #280]	; (80042cc <Principal_Receive_Config+0x81c>)
 80041b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80041b6:	80da      	strh	r2, [r3, #6]
 80041b8:	e02b      	b.n	8004212 <Principal_Receive_Config+0x762>
 80041ba:	4b44      	ldr	r3, [pc, #272]	; (80042cc <Principal_Receive_Config+0x81c>)
 80041bc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80041c0:	80da      	strh	r2, [r3, #6]
 80041c2:	e026      	b.n	8004212 <Principal_Receive_Config+0x762>
 80041c4:	4b41      	ldr	r3, [pc, #260]	; (80042cc <Principal_Receive_Config+0x81c>)
 80041c6:	22c8      	movs	r2, #200	; 0xc8
 80041c8:	80da      	strh	r2, [r3, #6]
 80041ca:	e022      	b.n	8004212 <Principal_Receive_Config+0x762>
 80041cc:	4b3f      	ldr	r3, [pc, #252]	; (80042cc <Principal_Receive_Config+0x81c>)
 80041ce:	2264      	movs	r2, #100	; 0x64
 80041d0:	80da      	strh	r2, [r3, #6]
 80041d2:	e01e      	b.n	8004212 <Principal_Receive_Config+0x762>
 80041d4:	4b3d      	ldr	r3, [pc, #244]	; (80042cc <Principal_Receive_Config+0x81c>)
 80041d6:	2232      	movs	r2, #50	; 0x32
 80041d8:	80da      	strh	r2, [r3, #6]
 80041da:	e01a      	b.n	8004212 <Principal_Receive_Config+0x762>
 80041dc:	4b3b      	ldr	r3, [pc, #236]	; (80042cc <Principal_Receive_Config+0x81c>)
 80041de:	2228      	movs	r2, #40	; 0x28
 80041e0:	80da      	strh	r2, [r3, #6]
 80041e2:	e016      	b.n	8004212 <Principal_Receive_Config+0x762>
 80041e4:	4b39      	ldr	r3, [pc, #228]	; (80042cc <Principal_Receive_Config+0x81c>)
 80041e6:	2214      	movs	r2, #20
 80041e8:	80da      	strh	r2, [r3, #6]
 80041ea:	e012      	b.n	8004212 <Principal_Receive_Config+0x762>
 80041ec:	4b37      	ldr	r3, [pc, #220]	; (80042cc <Principal_Receive_Config+0x81c>)
 80041ee:	220a      	movs	r2, #10
 80041f0:	80da      	strh	r2, [r3, #6]
 80041f2:	e00e      	b.n	8004212 <Principal_Receive_Config+0x762>
 80041f4:	4b35      	ldr	r3, [pc, #212]	; (80042cc <Principal_Receive_Config+0x81c>)
 80041f6:	2205      	movs	r2, #5
 80041f8:	80da      	strh	r2, [r3, #6]
 80041fa:	e00a      	b.n	8004212 <Principal_Receive_Config+0x762>
 80041fc:	4b33      	ldr	r3, [pc, #204]	; (80042cc <Principal_Receive_Config+0x81c>)
 80041fe:	2204      	movs	r2, #4
 8004200:	80da      	strh	r2, [r3, #6]
 8004202:	e006      	b.n	8004212 <Principal_Receive_Config+0x762>
 8004204:	4b31      	ldr	r3, [pc, #196]	; (80042cc <Principal_Receive_Config+0x81c>)
 8004206:	2202      	movs	r2, #2
 8004208:	80da      	strh	r2, [r3, #6]
 800420a:	e002      	b.n	8004212 <Principal_Receive_Config+0x762>
 800420c:	4b2f      	ldr	r3, [pc, #188]	; (80042cc <Principal_Receive_Config+0x81c>)
 800420e:	2200      	movs	r2, #0
 8004210:	80da      	strh	r2, [r3, #6]
 8004212:	bf00      	nop
			__BUFFER_TO_FREQ(data[5], perCAN[VERIFY_MSG]);
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	3305      	adds	r3, #5
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	3b01      	subs	r3, #1
 800421c:	2b0a      	cmp	r3, #10
 800421e:	d847      	bhi.n	80042b0 <Principal_Receive_Config+0x800>
 8004220:	a201      	add	r2, pc, #4	; (adr r2, 8004228 <Principal_Receive_Config+0x778>)
 8004222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004226:	bf00      	nop
 8004228:	08004255 	.word	0x08004255
 800422c:	0800425f 	.word	0x0800425f
 8004230:	08004269 	.word	0x08004269
 8004234:	08004271 	.word	0x08004271
 8004238:	08004279 	.word	0x08004279
 800423c:	08004281 	.word	0x08004281
 8004240:	08004289 	.word	0x08004289
 8004244:	08004291 	.word	0x08004291
 8004248:	08004299 	.word	0x08004299
 800424c:	080042a1 	.word	0x080042a1
 8004250:	080042a9 	.word	0x080042a9
 8004254:	4b1d      	ldr	r3, [pc, #116]	; (80042cc <Principal_Receive_Config+0x81c>)
 8004256:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800425a:	811a      	strh	r2, [r3, #8]
 800425c:	e02b      	b.n	80042b6 <Principal_Receive_Config+0x806>
 800425e:	4b1b      	ldr	r3, [pc, #108]	; (80042cc <Principal_Receive_Config+0x81c>)
 8004260:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004264:	811a      	strh	r2, [r3, #8]
 8004266:	e026      	b.n	80042b6 <Principal_Receive_Config+0x806>
 8004268:	4b18      	ldr	r3, [pc, #96]	; (80042cc <Principal_Receive_Config+0x81c>)
 800426a:	22c8      	movs	r2, #200	; 0xc8
 800426c:	811a      	strh	r2, [r3, #8]
 800426e:	e022      	b.n	80042b6 <Principal_Receive_Config+0x806>
 8004270:	4b16      	ldr	r3, [pc, #88]	; (80042cc <Principal_Receive_Config+0x81c>)
 8004272:	2264      	movs	r2, #100	; 0x64
 8004274:	811a      	strh	r2, [r3, #8]
 8004276:	e01e      	b.n	80042b6 <Principal_Receive_Config+0x806>
 8004278:	4b14      	ldr	r3, [pc, #80]	; (80042cc <Principal_Receive_Config+0x81c>)
 800427a:	2232      	movs	r2, #50	; 0x32
 800427c:	811a      	strh	r2, [r3, #8]
 800427e:	e01a      	b.n	80042b6 <Principal_Receive_Config+0x806>
 8004280:	4b12      	ldr	r3, [pc, #72]	; (80042cc <Principal_Receive_Config+0x81c>)
 8004282:	2228      	movs	r2, #40	; 0x28
 8004284:	811a      	strh	r2, [r3, #8]
 8004286:	e016      	b.n	80042b6 <Principal_Receive_Config+0x806>
 8004288:	4b10      	ldr	r3, [pc, #64]	; (80042cc <Principal_Receive_Config+0x81c>)
 800428a:	2214      	movs	r2, #20
 800428c:	811a      	strh	r2, [r3, #8]
 800428e:	e012      	b.n	80042b6 <Principal_Receive_Config+0x806>
 8004290:	4b0e      	ldr	r3, [pc, #56]	; (80042cc <Principal_Receive_Config+0x81c>)
 8004292:	220a      	movs	r2, #10
 8004294:	811a      	strh	r2, [r3, #8]
 8004296:	e00e      	b.n	80042b6 <Principal_Receive_Config+0x806>
 8004298:	4b0c      	ldr	r3, [pc, #48]	; (80042cc <Principal_Receive_Config+0x81c>)
 800429a:	2205      	movs	r2, #5
 800429c:	811a      	strh	r2, [r3, #8]
 800429e:	e00a      	b.n	80042b6 <Principal_Receive_Config+0x806>
 80042a0:	4b0a      	ldr	r3, [pc, #40]	; (80042cc <Principal_Receive_Config+0x81c>)
 80042a2:	2204      	movs	r2, #4
 80042a4:	811a      	strh	r2, [r3, #8]
 80042a6:	e006      	b.n	80042b6 <Principal_Receive_Config+0x806>
 80042a8:	4b08      	ldr	r3, [pc, #32]	; (80042cc <Principal_Receive_Config+0x81c>)
 80042aa:	2202      	movs	r2, #2
 80042ac:	811a      	strh	r2, [r3, #8]
 80042ae:	e002      	b.n	80042b6 <Principal_Receive_Config+0x806>
 80042b0:	4b06      	ldr	r3, [pc, #24]	; (80042cc <Principal_Receive_Config+0x81c>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	811a      	strh	r2, [r3, #8]
 80042b6:	bf00      	nop
			inputConfig = data[6];
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	799a      	ldrb	r2, [r3, #6]
 80042bc:	4b04      	ldr	r3, [pc, #16]	; (80042d0 <Principal_Receive_Config+0x820>)
 80042be:	701a      	strb	r2, [r3, #0]

			retVal = Save_EEPROM(hi2c);
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 fd13 	bl	8004cec <Save_EEPROM>
 80042c6:	4603      	mov	r3, r0
 80042c8:	75fb      	strb	r3, [r7, #23]
			break;
 80042ca:	e085      	b.n	80043d8 <Principal_Receive_Config+0x928>
 80042cc:	2000671c 	.word	0x2000671c
 80042d0:	20006700 	.word	0x20006700

		case 2:
			if(length != 7)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b07      	cmp	r3, #7
 80042d8:	d17b      	bne.n	80043d2 <Principal_Receive_Config+0x922>
				break;

			thresholdBeacon  = data[1] << 8;
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	3301      	adds	r3, #1
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	021b      	lsls	r3, r3, #8
 80042e2:	b21a      	sxth	r2, r3
 80042e4:	4b3f      	ldr	r3, [pc, #252]	; (80043e4 <Principal_Receive_Config+0x934>)
 80042e6:	801a      	strh	r2, [r3, #0]
			thresholdBeacon |= data[2] & 0xff;
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	3302      	adds	r3, #2
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	b21a      	sxth	r2, r3
 80042f0:	4b3c      	ldr	r3, [pc, #240]	; (80043e4 <Principal_Receive_Config+0x934>)
 80042f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	b21a      	sxth	r2, r3
 80042fa:	4b3a      	ldr	r3, [pc, #232]	; (80043e4 <Principal_Receive_Config+0x934>)
 80042fc:	801a      	strh	r2, [r3, #0]
			thresholdRPM	 = data[3] << 8;
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	3303      	adds	r3, #3
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	021b      	lsls	r3, r3, #8
 8004306:	b21a      	sxth	r2, r3
 8004308:	4b37      	ldr	r3, [pc, #220]	; (80043e8 <Principal_Receive_Config+0x938>)
 800430a:	801a      	strh	r2, [r3, #0]
			thresholdRPM	|= data[4] & 0xff;
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	3304      	adds	r3, #4
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	b21a      	sxth	r2, r3
 8004314:	4b34      	ldr	r3, [pc, #208]	; (80043e8 <Principal_Receive_Config+0x938>)
 8004316:	f9b3 3000 	ldrsh.w	r3, [r3]
 800431a:	4313      	orrs	r3, r2
 800431c:	b21a      	sxth	r2, r3
 800431e:	4b32      	ldr	r3, [pc, #200]	; (80043e8 <Principal_Receive_Config+0x938>)
 8004320:	801a      	strh	r2, [r3, #0]
			thresholdSpeed	 = data[5] << 8;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	3305      	adds	r3, #5
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	021b      	lsls	r3, r3, #8
 800432a:	b21a      	sxth	r2, r3
 800432c:	4b2f      	ldr	r3, [pc, #188]	; (80043ec <Principal_Receive_Config+0x93c>)
 800432e:	801a      	strh	r2, [r3, #0]
			thresholdSpeed	|= data[6] & 0xff;
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	3306      	adds	r3, #6
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	b21a      	sxth	r2, r3
 8004338:	4b2c      	ldr	r3, [pc, #176]	; (80043ec <Principal_Receive_Config+0x93c>)
 800433a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800433e:	4313      	orrs	r3, r2
 8004340:	b21a      	sxth	r2, r3
 8004342:	4b2a      	ldr	r3, [pc, #168]	; (80043ec <Principal_Receive_Config+0x93c>)
 8004344:	801a      	strh	r2, [r3, #0]

			retVal = Save_EEPROM(hi2c);
 8004346:	68f8      	ldr	r0, [r7, #12]
 8004348:	f000 fcd0 	bl	8004cec <Save_EEPROM>
 800434c:	4603      	mov	r3, r0
 800434e:	75fb      	strb	r3, [r7, #23]
			break;
 8004350:	e042      	b.n	80043d8 <Principal_Receive_Config+0x928>

		case 3:
			if(length != 7)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b07      	cmp	r3, #7
 8004356:	d13e      	bne.n	80043d6 <Principal_Receive_Config+0x926>
				break;

			rtcDate.Year	= data[1];
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	785a      	ldrb	r2, [r3, #1]
 800435c:	4b24      	ldr	r3, [pc, #144]	; (80043f0 <Principal_Receive_Config+0x940>)
 800435e:	70da      	strb	r2, [r3, #3]
			rtcDate.Month	= data[2];
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	789a      	ldrb	r2, [r3, #2]
 8004364:	4b22      	ldr	r3, [pc, #136]	; (80043f0 <Principal_Receive_Config+0x940>)
 8004366:	705a      	strb	r2, [r3, #1]
			rtcDate.Date	= data[3];
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	78da      	ldrb	r2, [r3, #3]
 800436c:	4b20      	ldr	r3, [pc, #128]	; (80043f0 <Principal_Receive_Config+0x940>)
 800436e:	709a      	strb	r2, [r3, #2]
			rtcTime.Hours	= data[4];
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	791a      	ldrb	r2, [r3, #4]
 8004374:	4b1f      	ldr	r3, [pc, #124]	; (80043f4 <Principal_Receive_Config+0x944>)
 8004376:	701a      	strb	r2, [r3, #0]
			rtcTime.Minutes = data[5];
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	795a      	ldrb	r2, [r3, #5]
 800437c:	4b1d      	ldr	r3, [pc, #116]	; (80043f4 <Principal_Receive_Config+0x944>)
 800437e:	705a      	strb	r2, [r3, #1]
			rtcTime.Seconds = data[6];
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	799a      	ldrb	r2, [r3, #6]
 8004384:	4b1b      	ldr	r3, [pc, #108]	; (80043f4 <Principal_Receive_Config+0x944>)
 8004386:	709a      	strb	r2, [r3, #2]

			if((HAL_RTC_SetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN) == HAL_OK)
 8004388:	2200      	movs	r2, #0
 800438a:	4919      	ldr	r1, [pc, #100]	; (80043f0 <Principal_Receive_Config+0x940>)
 800438c:	481a      	ldr	r0, [pc, #104]	; (80043f8 <Principal_Receive_Config+0x948>)
 800438e:	f008 fcd5 	bl	800cd3c <HAL_RTC_SetDate>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d113      	bne.n	80043c0 <Principal_Receive_Config+0x910>
				&& (HAL_RTC_SetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN) == HAL_OK))
 8004398:	2200      	movs	r2, #0
 800439a:	4916      	ldr	r1, [pc, #88]	; (80043f4 <Principal_Receive_Config+0x944>)
 800439c:	4816      	ldr	r0, [pc, #88]	; (80043f8 <Principal_Receive_Config+0x948>)
 800439e:	f008 fbd5 	bl	800cb4c <HAL_RTC_SetTime>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10b      	bne.n	80043c0 <Principal_Receive_Config+0x910>
			{
				HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, RTC_STORE_DATA);
 80043a8:	f24e 325c 	movw	r2, #58204	; 0xe35c
 80043ac:	2101      	movs	r1, #1
 80043ae:	4812      	ldr	r0, [pc, #72]	; (80043f8 <Principal_Receive_Config+0x948>)
 80043b0:	f008 fe54 	bl	800d05c <HAL_RTCEx_BKUPWrite>
				flagRTC = RTC_OK;
 80043b4:	4b11      	ldr	r3, [pc, #68]	; (80043fc <Principal_Receive_Config+0x94c>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	701a      	strb	r2, [r3, #0]
				retVal = HAL_OK;
 80043ba:	2300      	movs	r3, #0
 80043bc:	75fb      	strb	r3, [r7, #23]
			}
			else
				retVal = HAL_ERROR;

			break;
 80043be:	e00b      	b.n	80043d8 <Principal_Receive_Config+0x928>
				retVal = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	75fb      	strb	r3, [r7, #23]
			break;
 80043c4:	e008      	b.n	80043d8 <Principal_Receive_Config+0x928>

		default:
			break;
 80043c6:	bf00      	nop
 80043c8:	e006      	b.n	80043d8 <Principal_Receive_Config+0x928>
				break;
 80043ca:	bf00      	nop
 80043cc:	e004      	b.n	80043d8 <Principal_Receive_Config+0x928>
				break;
 80043ce:	bf00      	nop
 80043d0:	e002      	b.n	80043d8 <Principal_Receive_Config+0x928>
				break;
 80043d2:	bf00      	nop
 80043d4:	e000      	b.n	80043d8 <Principal_Receive_Config+0x928>
				break;
 80043d6:	bf00      	nop
	}

	return retVal;
 80043d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	2000463a 	.word	0x2000463a
 80043e8:	2000463c 	.word	0x2000463c
 80043ec:	2000463e 	.word	0x2000463e
 80043f0:	20006704 	.word	0x20006704
 80043f4:	20006708 	.word	0x20006708
 80043f8:	20000380 	.word	0x20000380
 80043fc:	200066ff 	.word	0x200066ff

08004400 <Principal_Hard_Code_Config>:

__weak void Principal_Hard_Code_Config(){
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
	perMsg[ANALOG_1_4] = MSG_FREQ_250HZ;
 8004404:	4b1f      	ldr	r3, [pc, #124]	; (8004484 <Principal_Hard_Code_Config+0x84>)
 8004406:	2204      	movs	r2, #4
 8004408:	801a      	strh	r2, [r3, #0]
	perMsg[ANALOG_5_8] = MSG_FREQ_500HZ;
 800440a:	4b1e      	ldr	r3, [pc, #120]	; (8004484 <Principal_Hard_Code_Config+0x84>)
 800440c:	2202      	movs	r2, #2
 800440e:	805a      	strh	r2, [r3, #2]
	perMsg[ANALOG_9_12] = MSG_DISABLED;
 8004410:	4b1c      	ldr	r3, [pc, #112]	; (8004484 <Principal_Hard_Code_Config+0x84>)
 8004412:	2200      	movs	r2, #0
 8004414:	809a      	strh	r2, [r3, #4]
	perMsg[RTC_MSG] = MSG_FREQ_2HZ;
 8004416:	4b1b      	ldr	r3, [pc, #108]	; (8004484 <Principal_Hard_Code_Config+0x84>)
 8004418:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800441c:	80da      	strh	r2, [r3, #6]
	perMsg[VERIFY_MSG] = MSG_FREQ_5HZ;
 800441e:	4b19      	ldr	r3, [pc, #100]	; (8004484 <Principal_Hard_Code_Config+0x84>)
 8004420:	22c8      	movs	r2, #200	; 0xc8
 8004422:	811a      	strh	r2, [r3, #8]
	perMsg[BEACON_MSG] = MSG_FREQ_10HZ;
 8004424:	4b17      	ldr	r3, [pc, #92]	; (8004484 <Principal_Hard_Code_Config+0x84>)
 8004426:	2264      	movs	r2, #100	; 0x64
 8004428:	815a      	strh	r2, [r3, #10]
	perMsg[ECU_SAVE] = MSG_FREQ_100HZ;
 800442a:	4b16      	ldr	r3, [pc, #88]	; (8004484 <Principal_Hard_Code_Config+0x84>)
 800442c:	220a      	movs	r2, #10
 800442e:	819a      	strh	r2, [r3, #12]
	perMsg[PDM_SAVE] = MSG_FREQ_100HZ;
 8004430:	4b14      	ldr	r3, [pc, #80]	; (8004484 <Principal_Hard_Code_Config+0x84>)
 8004432:	220a      	movs	r2, #10
 8004434:	81da      	strh	r2, [r3, #14]

	perCAN[ANALOG_1_4] = MSG_FREQ_10HZ;
 8004436:	4b14      	ldr	r3, [pc, #80]	; (8004488 <Principal_Hard_Code_Config+0x88>)
 8004438:	2264      	movs	r2, #100	; 0x64
 800443a:	801a      	strh	r2, [r3, #0]
	perCAN[ANALOG_5_8] = MSG_FREQ_10HZ;
 800443c:	4b12      	ldr	r3, [pc, #72]	; (8004488 <Principal_Hard_Code_Config+0x88>)
 800443e:	2264      	movs	r2, #100	; 0x64
 8004440:	805a      	strh	r2, [r3, #2]
	perCAN[ANALOG_9_12] = MSG_DISABLED;
 8004442:	4b11      	ldr	r3, [pc, #68]	; (8004488 <Principal_Hard_Code_Config+0x88>)
 8004444:	2200      	movs	r2, #0
 8004446:	809a      	strh	r2, [r3, #4]
	perCAN[RTC_MSG] = MSG_FREQ_2HZ;
 8004448:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <Principal_Hard_Code_Config+0x88>)
 800444a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800444e:	80da      	strh	r2, [r3, #6]
	perCAN[VERIFY_MSG] = MSG_FREQ_5HZ;
 8004450:	4b0d      	ldr	r3, [pc, #52]	; (8004488 <Principal_Hard_Code_Config+0x88>)
 8004452:	22c8      	movs	r2, #200	; 0xc8
 8004454:	811a      	strh	r2, [r3, #8]
	perCAN[BEACON_MSG] = MSG_FREQ_5HZ;
 8004456:	4b0c      	ldr	r3, [pc, #48]	; (8004488 <Principal_Hard_Code_Config+0x88>)
 8004458:	22c8      	movs	r2, #200	; 0xc8
 800445a:	815a      	strh	r2, [r3, #10]

	inputConfig = INPUT_BEACON_PIN_1 | INPUT_DATALOGGER_PIN_0 | INPUT_BEACON_FALLING_EDGE | INPUT_DATALOGGER_FALLING_EDGE;
 800445c:	4b0b      	ldr	r3, [pc, #44]	; (800448c <Principal_Hard_Code_Config+0x8c>)
 800445e:	2201      	movs	r2, #1
 8004460:	701a      	strb	r2, [r3, #0]

	thresholdBeacon = 1000;
 8004462:	4b0b      	ldr	r3, [pc, #44]	; (8004490 <Principal_Hard_Code_Config+0x90>)
 8004464:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004468:	801a      	strh	r2, [r3, #0]
	thresholdRPM = 5000;
 800446a:	4b0a      	ldr	r3, [pc, #40]	; (8004494 <Principal_Hard_Code_Config+0x94>)
 800446c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004470:	801a      	strh	r2, [r3, #0]
	thresholdSpeed = 1;
 8004472:	4b09      	ldr	r3, [pc, #36]	; (8004498 <Principal_Hard_Code_Config+0x98>)
 8004474:	2201      	movs	r2, #1
 8004476:	801a      	strh	r2, [r3, #0]

	Save_EEPROM(&hi2c1);
 8004478:	4808      	ldr	r0, [pc, #32]	; (800449c <Principal_Hard_Code_Config+0x9c>)
 800447a:	f000 fc37 	bl	8004cec <Save_EEPROM>
}
 800447e:	bf00      	nop
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20006728 	.word	0x20006728
 8004488:	2000671c 	.word	0x2000671c
 800448c:	20006700 	.word	0x20006700
 8004490:	2000463a 	.word	0x2000463a
 8004494:	2000463c 	.word	0x2000463c
 8004498:	2000463e 	.word	0x2000463e
 800449c:	2000032c 	.word	0x2000032c

080044a0 <Load_EEPROM>:

static HAL_StatusTypeDef Load_EEPROM(I2C_HandleTypeDef* hi2c)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b08c      	sub	sp, #48	; 0x30
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	6078      	str	r0, [r7, #4]
	uint8_t buffer[EEPROM_BUFFER_SIZE];
	HAL_StatusTypeDef retVal = HAL_OK;
 80044a8:	2300      	movs	r3, #0
 80044aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	HAL_I2C_Master_Transmit(hi2c, EEPROM_ADDRESS_WRITE, 0x00, 1, EEPROM_WRITE_TIMEOUT);
 80044ae:	230a      	movs	r3, #10
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	2301      	movs	r3, #1
 80044b4:	2200      	movs	r2, #0
 80044b6:	21a0      	movs	r1, #160	; 0xa0
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f005 f83b 	bl	8009534 <HAL_I2C_Master_Transmit>

	retVal = HAL_I2C_Master_Receive(hi2c, EEPROM_ADDRESS_READ, buffer, sizeof(buffer), EEPROM_READ_TIMEOUT);
 80044be:	f107 020c 	add.w	r2, r7, #12
 80044c2:	2305      	movs	r3, #5
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	2318      	movs	r3, #24
 80044c8:	21a1      	movs	r1, #161	; 0xa1
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f005 f930 	bl	8009730 <HAL_I2C_Master_Receive>
 80044d0:	4603      	mov	r3, r0
 80044d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if(retVal != HAL_OK)
 80044d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <Load_EEPROM+0x44>
		return retVal;
 80044de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044e2:	e3f4      	b.n	8004cce <Load_EEPROM+0x82e>

	__BUFFER_TO_FREQ(buffer[0], perMsg[ANALOG_1_4]);
 80044e4:	7b3b      	ldrb	r3, [r7, #12]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	2b0a      	cmp	r3, #10
 80044ea:	d847      	bhi.n	800457c <Load_EEPROM+0xdc>
 80044ec:	a201      	add	r2, pc, #4	; (adr r2, 80044f4 <Load_EEPROM+0x54>)
 80044ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f2:	bf00      	nop
 80044f4:	08004521 	.word	0x08004521
 80044f8:	0800452b 	.word	0x0800452b
 80044fc:	08004535 	.word	0x08004535
 8004500:	0800453d 	.word	0x0800453d
 8004504:	08004545 	.word	0x08004545
 8004508:	0800454d 	.word	0x0800454d
 800450c:	08004555 	.word	0x08004555
 8004510:	0800455d 	.word	0x0800455d
 8004514:	08004565 	.word	0x08004565
 8004518:	0800456d 	.word	0x0800456d
 800451c:	08004575 	.word	0x08004575
 8004520:	4ba8      	ldr	r3, [pc, #672]	; (80047c4 <Load_EEPROM+0x324>)
 8004522:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004526:	801a      	strh	r2, [r3, #0]
 8004528:	e02b      	b.n	8004582 <Load_EEPROM+0xe2>
 800452a:	4ba6      	ldr	r3, [pc, #664]	; (80047c4 <Load_EEPROM+0x324>)
 800452c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004530:	801a      	strh	r2, [r3, #0]
 8004532:	e026      	b.n	8004582 <Load_EEPROM+0xe2>
 8004534:	4ba3      	ldr	r3, [pc, #652]	; (80047c4 <Load_EEPROM+0x324>)
 8004536:	22c8      	movs	r2, #200	; 0xc8
 8004538:	801a      	strh	r2, [r3, #0]
 800453a:	e022      	b.n	8004582 <Load_EEPROM+0xe2>
 800453c:	4ba1      	ldr	r3, [pc, #644]	; (80047c4 <Load_EEPROM+0x324>)
 800453e:	2264      	movs	r2, #100	; 0x64
 8004540:	801a      	strh	r2, [r3, #0]
 8004542:	e01e      	b.n	8004582 <Load_EEPROM+0xe2>
 8004544:	4b9f      	ldr	r3, [pc, #636]	; (80047c4 <Load_EEPROM+0x324>)
 8004546:	2232      	movs	r2, #50	; 0x32
 8004548:	801a      	strh	r2, [r3, #0]
 800454a:	e01a      	b.n	8004582 <Load_EEPROM+0xe2>
 800454c:	4b9d      	ldr	r3, [pc, #628]	; (80047c4 <Load_EEPROM+0x324>)
 800454e:	2228      	movs	r2, #40	; 0x28
 8004550:	801a      	strh	r2, [r3, #0]
 8004552:	e016      	b.n	8004582 <Load_EEPROM+0xe2>
 8004554:	4b9b      	ldr	r3, [pc, #620]	; (80047c4 <Load_EEPROM+0x324>)
 8004556:	2214      	movs	r2, #20
 8004558:	801a      	strh	r2, [r3, #0]
 800455a:	e012      	b.n	8004582 <Load_EEPROM+0xe2>
 800455c:	4b99      	ldr	r3, [pc, #612]	; (80047c4 <Load_EEPROM+0x324>)
 800455e:	220a      	movs	r2, #10
 8004560:	801a      	strh	r2, [r3, #0]
 8004562:	e00e      	b.n	8004582 <Load_EEPROM+0xe2>
 8004564:	4b97      	ldr	r3, [pc, #604]	; (80047c4 <Load_EEPROM+0x324>)
 8004566:	2205      	movs	r2, #5
 8004568:	801a      	strh	r2, [r3, #0]
 800456a:	e00a      	b.n	8004582 <Load_EEPROM+0xe2>
 800456c:	4b95      	ldr	r3, [pc, #596]	; (80047c4 <Load_EEPROM+0x324>)
 800456e:	2204      	movs	r2, #4
 8004570:	801a      	strh	r2, [r3, #0]
 8004572:	e006      	b.n	8004582 <Load_EEPROM+0xe2>
 8004574:	4b93      	ldr	r3, [pc, #588]	; (80047c4 <Load_EEPROM+0x324>)
 8004576:	2202      	movs	r2, #2
 8004578:	801a      	strh	r2, [r3, #0]
 800457a:	e002      	b.n	8004582 <Load_EEPROM+0xe2>
 800457c:	4b91      	ldr	r3, [pc, #580]	; (80047c4 <Load_EEPROM+0x324>)
 800457e:	2200      	movs	r2, #0
 8004580:	801a      	strh	r2, [r3, #0]
 8004582:	bf00      	nop

	__BUFFER_TO_FREQ(buffer[1], perMsg[ANALOG_5_8]);
 8004584:	7b7b      	ldrb	r3, [r7, #13]
 8004586:	3b01      	subs	r3, #1
 8004588:	2b0a      	cmp	r3, #10
 800458a:	d847      	bhi.n	800461c <Load_EEPROM+0x17c>
 800458c:	a201      	add	r2, pc, #4	; (adr r2, 8004594 <Load_EEPROM+0xf4>)
 800458e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004592:	bf00      	nop
 8004594:	080045c1 	.word	0x080045c1
 8004598:	080045cb 	.word	0x080045cb
 800459c:	080045d5 	.word	0x080045d5
 80045a0:	080045dd 	.word	0x080045dd
 80045a4:	080045e5 	.word	0x080045e5
 80045a8:	080045ed 	.word	0x080045ed
 80045ac:	080045f5 	.word	0x080045f5
 80045b0:	080045fd 	.word	0x080045fd
 80045b4:	08004605 	.word	0x08004605
 80045b8:	0800460d 	.word	0x0800460d
 80045bc:	08004615 	.word	0x08004615
 80045c0:	4b80      	ldr	r3, [pc, #512]	; (80047c4 <Load_EEPROM+0x324>)
 80045c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80045c6:	805a      	strh	r2, [r3, #2]
 80045c8:	e02b      	b.n	8004622 <Load_EEPROM+0x182>
 80045ca:	4b7e      	ldr	r3, [pc, #504]	; (80047c4 <Load_EEPROM+0x324>)
 80045cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80045d0:	805a      	strh	r2, [r3, #2]
 80045d2:	e026      	b.n	8004622 <Load_EEPROM+0x182>
 80045d4:	4b7b      	ldr	r3, [pc, #492]	; (80047c4 <Load_EEPROM+0x324>)
 80045d6:	22c8      	movs	r2, #200	; 0xc8
 80045d8:	805a      	strh	r2, [r3, #2]
 80045da:	e022      	b.n	8004622 <Load_EEPROM+0x182>
 80045dc:	4b79      	ldr	r3, [pc, #484]	; (80047c4 <Load_EEPROM+0x324>)
 80045de:	2264      	movs	r2, #100	; 0x64
 80045e0:	805a      	strh	r2, [r3, #2]
 80045e2:	e01e      	b.n	8004622 <Load_EEPROM+0x182>
 80045e4:	4b77      	ldr	r3, [pc, #476]	; (80047c4 <Load_EEPROM+0x324>)
 80045e6:	2232      	movs	r2, #50	; 0x32
 80045e8:	805a      	strh	r2, [r3, #2]
 80045ea:	e01a      	b.n	8004622 <Load_EEPROM+0x182>
 80045ec:	4b75      	ldr	r3, [pc, #468]	; (80047c4 <Load_EEPROM+0x324>)
 80045ee:	2228      	movs	r2, #40	; 0x28
 80045f0:	805a      	strh	r2, [r3, #2]
 80045f2:	e016      	b.n	8004622 <Load_EEPROM+0x182>
 80045f4:	4b73      	ldr	r3, [pc, #460]	; (80047c4 <Load_EEPROM+0x324>)
 80045f6:	2214      	movs	r2, #20
 80045f8:	805a      	strh	r2, [r3, #2]
 80045fa:	e012      	b.n	8004622 <Load_EEPROM+0x182>
 80045fc:	4b71      	ldr	r3, [pc, #452]	; (80047c4 <Load_EEPROM+0x324>)
 80045fe:	220a      	movs	r2, #10
 8004600:	805a      	strh	r2, [r3, #2]
 8004602:	e00e      	b.n	8004622 <Load_EEPROM+0x182>
 8004604:	4b6f      	ldr	r3, [pc, #444]	; (80047c4 <Load_EEPROM+0x324>)
 8004606:	2205      	movs	r2, #5
 8004608:	805a      	strh	r2, [r3, #2]
 800460a:	e00a      	b.n	8004622 <Load_EEPROM+0x182>
 800460c:	4b6d      	ldr	r3, [pc, #436]	; (80047c4 <Load_EEPROM+0x324>)
 800460e:	2204      	movs	r2, #4
 8004610:	805a      	strh	r2, [r3, #2]
 8004612:	e006      	b.n	8004622 <Load_EEPROM+0x182>
 8004614:	4b6b      	ldr	r3, [pc, #428]	; (80047c4 <Load_EEPROM+0x324>)
 8004616:	2202      	movs	r2, #2
 8004618:	805a      	strh	r2, [r3, #2]
 800461a:	e002      	b.n	8004622 <Load_EEPROM+0x182>
 800461c:	4b69      	ldr	r3, [pc, #420]	; (80047c4 <Load_EEPROM+0x324>)
 800461e:	2200      	movs	r2, #0
 8004620:	805a      	strh	r2, [r3, #2]
 8004622:	bf00      	nop

	__BUFFER_TO_FREQ(buffer[2], perMsg[ANALOG_9_12]);
 8004624:	7bbb      	ldrb	r3, [r7, #14]
 8004626:	3b01      	subs	r3, #1
 8004628:	2b0a      	cmp	r3, #10
 800462a:	d847      	bhi.n	80046bc <Load_EEPROM+0x21c>
 800462c:	a201      	add	r2, pc, #4	; (adr r2, 8004634 <Load_EEPROM+0x194>)
 800462e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004632:	bf00      	nop
 8004634:	08004661 	.word	0x08004661
 8004638:	0800466b 	.word	0x0800466b
 800463c:	08004675 	.word	0x08004675
 8004640:	0800467d 	.word	0x0800467d
 8004644:	08004685 	.word	0x08004685
 8004648:	0800468d 	.word	0x0800468d
 800464c:	08004695 	.word	0x08004695
 8004650:	0800469d 	.word	0x0800469d
 8004654:	080046a5 	.word	0x080046a5
 8004658:	080046ad 	.word	0x080046ad
 800465c:	080046b5 	.word	0x080046b5
 8004660:	4b58      	ldr	r3, [pc, #352]	; (80047c4 <Load_EEPROM+0x324>)
 8004662:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004666:	809a      	strh	r2, [r3, #4]
 8004668:	e02b      	b.n	80046c2 <Load_EEPROM+0x222>
 800466a:	4b56      	ldr	r3, [pc, #344]	; (80047c4 <Load_EEPROM+0x324>)
 800466c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004670:	809a      	strh	r2, [r3, #4]
 8004672:	e026      	b.n	80046c2 <Load_EEPROM+0x222>
 8004674:	4b53      	ldr	r3, [pc, #332]	; (80047c4 <Load_EEPROM+0x324>)
 8004676:	22c8      	movs	r2, #200	; 0xc8
 8004678:	809a      	strh	r2, [r3, #4]
 800467a:	e022      	b.n	80046c2 <Load_EEPROM+0x222>
 800467c:	4b51      	ldr	r3, [pc, #324]	; (80047c4 <Load_EEPROM+0x324>)
 800467e:	2264      	movs	r2, #100	; 0x64
 8004680:	809a      	strh	r2, [r3, #4]
 8004682:	e01e      	b.n	80046c2 <Load_EEPROM+0x222>
 8004684:	4b4f      	ldr	r3, [pc, #316]	; (80047c4 <Load_EEPROM+0x324>)
 8004686:	2232      	movs	r2, #50	; 0x32
 8004688:	809a      	strh	r2, [r3, #4]
 800468a:	e01a      	b.n	80046c2 <Load_EEPROM+0x222>
 800468c:	4b4d      	ldr	r3, [pc, #308]	; (80047c4 <Load_EEPROM+0x324>)
 800468e:	2228      	movs	r2, #40	; 0x28
 8004690:	809a      	strh	r2, [r3, #4]
 8004692:	e016      	b.n	80046c2 <Load_EEPROM+0x222>
 8004694:	4b4b      	ldr	r3, [pc, #300]	; (80047c4 <Load_EEPROM+0x324>)
 8004696:	2214      	movs	r2, #20
 8004698:	809a      	strh	r2, [r3, #4]
 800469a:	e012      	b.n	80046c2 <Load_EEPROM+0x222>
 800469c:	4b49      	ldr	r3, [pc, #292]	; (80047c4 <Load_EEPROM+0x324>)
 800469e:	220a      	movs	r2, #10
 80046a0:	809a      	strh	r2, [r3, #4]
 80046a2:	e00e      	b.n	80046c2 <Load_EEPROM+0x222>
 80046a4:	4b47      	ldr	r3, [pc, #284]	; (80047c4 <Load_EEPROM+0x324>)
 80046a6:	2205      	movs	r2, #5
 80046a8:	809a      	strh	r2, [r3, #4]
 80046aa:	e00a      	b.n	80046c2 <Load_EEPROM+0x222>
 80046ac:	4b45      	ldr	r3, [pc, #276]	; (80047c4 <Load_EEPROM+0x324>)
 80046ae:	2204      	movs	r2, #4
 80046b0:	809a      	strh	r2, [r3, #4]
 80046b2:	e006      	b.n	80046c2 <Load_EEPROM+0x222>
 80046b4:	4b43      	ldr	r3, [pc, #268]	; (80047c4 <Load_EEPROM+0x324>)
 80046b6:	2202      	movs	r2, #2
 80046b8:	809a      	strh	r2, [r3, #4]
 80046ba:	e002      	b.n	80046c2 <Load_EEPROM+0x222>
 80046bc:	4b41      	ldr	r3, [pc, #260]	; (80047c4 <Load_EEPROM+0x324>)
 80046be:	2200      	movs	r2, #0
 80046c0:	809a      	strh	r2, [r3, #4]
 80046c2:	bf00      	nop

	__BUFFER_TO_FREQ(buffer[3], perMsg[RTC_MSG]);
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
 80046c6:	3b01      	subs	r3, #1
 80046c8:	2b0a      	cmp	r3, #10
 80046ca:	d847      	bhi.n	800475c <Load_EEPROM+0x2bc>
 80046cc:	a201      	add	r2, pc, #4	; (adr r2, 80046d4 <Load_EEPROM+0x234>)
 80046ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d2:	bf00      	nop
 80046d4:	08004701 	.word	0x08004701
 80046d8:	0800470b 	.word	0x0800470b
 80046dc:	08004715 	.word	0x08004715
 80046e0:	0800471d 	.word	0x0800471d
 80046e4:	08004725 	.word	0x08004725
 80046e8:	0800472d 	.word	0x0800472d
 80046ec:	08004735 	.word	0x08004735
 80046f0:	0800473d 	.word	0x0800473d
 80046f4:	08004745 	.word	0x08004745
 80046f8:	0800474d 	.word	0x0800474d
 80046fc:	08004755 	.word	0x08004755
 8004700:	4b30      	ldr	r3, [pc, #192]	; (80047c4 <Load_EEPROM+0x324>)
 8004702:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004706:	80da      	strh	r2, [r3, #6]
 8004708:	e02b      	b.n	8004762 <Load_EEPROM+0x2c2>
 800470a:	4b2e      	ldr	r3, [pc, #184]	; (80047c4 <Load_EEPROM+0x324>)
 800470c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004710:	80da      	strh	r2, [r3, #6]
 8004712:	e026      	b.n	8004762 <Load_EEPROM+0x2c2>
 8004714:	4b2b      	ldr	r3, [pc, #172]	; (80047c4 <Load_EEPROM+0x324>)
 8004716:	22c8      	movs	r2, #200	; 0xc8
 8004718:	80da      	strh	r2, [r3, #6]
 800471a:	e022      	b.n	8004762 <Load_EEPROM+0x2c2>
 800471c:	4b29      	ldr	r3, [pc, #164]	; (80047c4 <Load_EEPROM+0x324>)
 800471e:	2264      	movs	r2, #100	; 0x64
 8004720:	80da      	strh	r2, [r3, #6]
 8004722:	e01e      	b.n	8004762 <Load_EEPROM+0x2c2>
 8004724:	4b27      	ldr	r3, [pc, #156]	; (80047c4 <Load_EEPROM+0x324>)
 8004726:	2232      	movs	r2, #50	; 0x32
 8004728:	80da      	strh	r2, [r3, #6]
 800472a:	e01a      	b.n	8004762 <Load_EEPROM+0x2c2>
 800472c:	4b25      	ldr	r3, [pc, #148]	; (80047c4 <Load_EEPROM+0x324>)
 800472e:	2228      	movs	r2, #40	; 0x28
 8004730:	80da      	strh	r2, [r3, #6]
 8004732:	e016      	b.n	8004762 <Load_EEPROM+0x2c2>
 8004734:	4b23      	ldr	r3, [pc, #140]	; (80047c4 <Load_EEPROM+0x324>)
 8004736:	2214      	movs	r2, #20
 8004738:	80da      	strh	r2, [r3, #6]
 800473a:	e012      	b.n	8004762 <Load_EEPROM+0x2c2>
 800473c:	4b21      	ldr	r3, [pc, #132]	; (80047c4 <Load_EEPROM+0x324>)
 800473e:	220a      	movs	r2, #10
 8004740:	80da      	strh	r2, [r3, #6]
 8004742:	e00e      	b.n	8004762 <Load_EEPROM+0x2c2>
 8004744:	4b1f      	ldr	r3, [pc, #124]	; (80047c4 <Load_EEPROM+0x324>)
 8004746:	2205      	movs	r2, #5
 8004748:	80da      	strh	r2, [r3, #6]
 800474a:	e00a      	b.n	8004762 <Load_EEPROM+0x2c2>
 800474c:	4b1d      	ldr	r3, [pc, #116]	; (80047c4 <Load_EEPROM+0x324>)
 800474e:	2204      	movs	r2, #4
 8004750:	80da      	strh	r2, [r3, #6]
 8004752:	e006      	b.n	8004762 <Load_EEPROM+0x2c2>
 8004754:	4b1b      	ldr	r3, [pc, #108]	; (80047c4 <Load_EEPROM+0x324>)
 8004756:	2202      	movs	r2, #2
 8004758:	80da      	strh	r2, [r3, #6]
 800475a:	e002      	b.n	8004762 <Load_EEPROM+0x2c2>
 800475c:	4b19      	ldr	r3, [pc, #100]	; (80047c4 <Load_EEPROM+0x324>)
 800475e:	2200      	movs	r2, #0
 8004760:	80da      	strh	r2, [r3, #6]
 8004762:	bf00      	nop

	__BUFFER_TO_FREQ(buffer[4], perMsg[VERIFY_MSG]);
 8004764:	7c3b      	ldrb	r3, [r7, #16]
 8004766:	3b01      	subs	r3, #1
 8004768:	2b0a      	cmp	r3, #10
 800476a:	d849      	bhi.n	8004800 <Load_EEPROM+0x360>
 800476c:	a201      	add	r2, pc, #4	; (adr r2, 8004774 <Load_EEPROM+0x2d4>)
 800476e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004772:	bf00      	nop
 8004774:	080047a1 	.word	0x080047a1
 8004778:	080047ab 	.word	0x080047ab
 800477c:	080047b5 	.word	0x080047b5
 8004780:	080047bd 	.word	0x080047bd
 8004784:	080047c9 	.word	0x080047c9
 8004788:	080047d1 	.word	0x080047d1
 800478c:	080047d9 	.word	0x080047d9
 8004790:	080047e1 	.word	0x080047e1
 8004794:	080047e9 	.word	0x080047e9
 8004798:	080047f1 	.word	0x080047f1
 800479c:	080047f9 	.word	0x080047f9
 80047a0:	4b08      	ldr	r3, [pc, #32]	; (80047c4 <Load_EEPROM+0x324>)
 80047a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047a6:	811a      	strh	r2, [r3, #8]
 80047a8:	e02d      	b.n	8004806 <Load_EEPROM+0x366>
 80047aa:	4b06      	ldr	r3, [pc, #24]	; (80047c4 <Load_EEPROM+0x324>)
 80047ac:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80047b0:	811a      	strh	r2, [r3, #8]
 80047b2:	e028      	b.n	8004806 <Load_EEPROM+0x366>
 80047b4:	4b03      	ldr	r3, [pc, #12]	; (80047c4 <Load_EEPROM+0x324>)
 80047b6:	22c8      	movs	r2, #200	; 0xc8
 80047b8:	811a      	strh	r2, [r3, #8]
 80047ba:	e024      	b.n	8004806 <Load_EEPROM+0x366>
 80047bc:	4b01      	ldr	r3, [pc, #4]	; (80047c4 <Load_EEPROM+0x324>)
 80047be:	2264      	movs	r2, #100	; 0x64
 80047c0:	811a      	strh	r2, [r3, #8]
 80047c2:	e020      	b.n	8004806 <Load_EEPROM+0x366>
 80047c4:	20006728 	.word	0x20006728
 80047c8:	4ba7      	ldr	r3, [pc, #668]	; (8004a68 <Load_EEPROM+0x5c8>)
 80047ca:	2232      	movs	r2, #50	; 0x32
 80047cc:	811a      	strh	r2, [r3, #8]
 80047ce:	e01a      	b.n	8004806 <Load_EEPROM+0x366>
 80047d0:	4ba5      	ldr	r3, [pc, #660]	; (8004a68 <Load_EEPROM+0x5c8>)
 80047d2:	2228      	movs	r2, #40	; 0x28
 80047d4:	811a      	strh	r2, [r3, #8]
 80047d6:	e016      	b.n	8004806 <Load_EEPROM+0x366>
 80047d8:	4ba3      	ldr	r3, [pc, #652]	; (8004a68 <Load_EEPROM+0x5c8>)
 80047da:	2214      	movs	r2, #20
 80047dc:	811a      	strh	r2, [r3, #8]
 80047de:	e012      	b.n	8004806 <Load_EEPROM+0x366>
 80047e0:	4ba1      	ldr	r3, [pc, #644]	; (8004a68 <Load_EEPROM+0x5c8>)
 80047e2:	220a      	movs	r2, #10
 80047e4:	811a      	strh	r2, [r3, #8]
 80047e6:	e00e      	b.n	8004806 <Load_EEPROM+0x366>
 80047e8:	4b9f      	ldr	r3, [pc, #636]	; (8004a68 <Load_EEPROM+0x5c8>)
 80047ea:	2205      	movs	r2, #5
 80047ec:	811a      	strh	r2, [r3, #8]
 80047ee:	e00a      	b.n	8004806 <Load_EEPROM+0x366>
 80047f0:	4b9d      	ldr	r3, [pc, #628]	; (8004a68 <Load_EEPROM+0x5c8>)
 80047f2:	2204      	movs	r2, #4
 80047f4:	811a      	strh	r2, [r3, #8]
 80047f6:	e006      	b.n	8004806 <Load_EEPROM+0x366>
 80047f8:	4b9b      	ldr	r3, [pc, #620]	; (8004a68 <Load_EEPROM+0x5c8>)
 80047fa:	2202      	movs	r2, #2
 80047fc:	811a      	strh	r2, [r3, #8]
 80047fe:	e002      	b.n	8004806 <Load_EEPROM+0x366>
 8004800:	4b99      	ldr	r3, [pc, #612]	; (8004a68 <Load_EEPROM+0x5c8>)
 8004802:	2200      	movs	r2, #0
 8004804:	811a      	strh	r2, [r3, #8]
 8004806:	bf00      	nop

	__BUFFER_TO_FREQ(buffer[5], perMsg[ECU_SAVE]);
 8004808:	7c7b      	ldrb	r3, [r7, #17]
 800480a:	3b01      	subs	r3, #1
 800480c:	2b0a      	cmp	r3, #10
 800480e:	d847      	bhi.n	80048a0 <Load_EEPROM+0x400>
 8004810:	a201      	add	r2, pc, #4	; (adr r2, 8004818 <Load_EEPROM+0x378>)
 8004812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004816:	bf00      	nop
 8004818:	08004845 	.word	0x08004845
 800481c:	0800484f 	.word	0x0800484f
 8004820:	08004859 	.word	0x08004859
 8004824:	08004861 	.word	0x08004861
 8004828:	08004869 	.word	0x08004869
 800482c:	08004871 	.word	0x08004871
 8004830:	08004879 	.word	0x08004879
 8004834:	08004881 	.word	0x08004881
 8004838:	08004889 	.word	0x08004889
 800483c:	08004891 	.word	0x08004891
 8004840:	08004899 	.word	0x08004899
 8004844:	4b88      	ldr	r3, [pc, #544]	; (8004a68 <Load_EEPROM+0x5c8>)
 8004846:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800484a:	819a      	strh	r2, [r3, #12]
 800484c:	e02b      	b.n	80048a6 <Load_EEPROM+0x406>
 800484e:	4b86      	ldr	r3, [pc, #536]	; (8004a68 <Load_EEPROM+0x5c8>)
 8004850:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004854:	819a      	strh	r2, [r3, #12]
 8004856:	e026      	b.n	80048a6 <Load_EEPROM+0x406>
 8004858:	4b83      	ldr	r3, [pc, #524]	; (8004a68 <Load_EEPROM+0x5c8>)
 800485a:	22c8      	movs	r2, #200	; 0xc8
 800485c:	819a      	strh	r2, [r3, #12]
 800485e:	e022      	b.n	80048a6 <Load_EEPROM+0x406>
 8004860:	4b81      	ldr	r3, [pc, #516]	; (8004a68 <Load_EEPROM+0x5c8>)
 8004862:	2264      	movs	r2, #100	; 0x64
 8004864:	819a      	strh	r2, [r3, #12]
 8004866:	e01e      	b.n	80048a6 <Load_EEPROM+0x406>
 8004868:	4b7f      	ldr	r3, [pc, #508]	; (8004a68 <Load_EEPROM+0x5c8>)
 800486a:	2232      	movs	r2, #50	; 0x32
 800486c:	819a      	strh	r2, [r3, #12]
 800486e:	e01a      	b.n	80048a6 <Load_EEPROM+0x406>
 8004870:	4b7d      	ldr	r3, [pc, #500]	; (8004a68 <Load_EEPROM+0x5c8>)
 8004872:	2228      	movs	r2, #40	; 0x28
 8004874:	819a      	strh	r2, [r3, #12]
 8004876:	e016      	b.n	80048a6 <Load_EEPROM+0x406>
 8004878:	4b7b      	ldr	r3, [pc, #492]	; (8004a68 <Load_EEPROM+0x5c8>)
 800487a:	2214      	movs	r2, #20
 800487c:	819a      	strh	r2, [r3, #12]
 800487e:	e012      	b.n	80048a6 <Load_EEPROM+0x406>
 8004880:	4b79      	ldr	r3, [pc, #484]	; (8004a68 <Load_EEPROM+0x5c8>)
 8004882:	220a      	movs	r2, #10
 8004884:	819a      	strh	r2, [r3, #12]
 8004886:	e00e      	b.n	80048a6 <Load_EEPROM+0x406>
 8004888:	4b77      	ldr	r3, [pc, #476]	; (8004a68 <Load_EEPROM+0x5c8>)
 800488a:	2205      	movs	r2, #5
 800488c:	819a      	strh	r2, [r3, #12]
 800488e:	e00a      	b.n	80048a6 <Load_EEPROM+0x406>
 8004890:	4b75      	ldr	r3, [pc, #468]	; (8004a68 <Load_EEPROM+0x5c8>)
 8004892:	2204      	movs	r2, #4
 8004894:	819a      	strh	r2, [r3, #12]
 8004896:	e006      	b.n	80048a6 <Load_EEPROM+0x406>
 8004898:	4b73      	ldr	r3, [pc, #460]	; (8004a68 <Load_EEPROM+0x5c8>)
 800489a:	2202      	movs	r2, #2
 800489c:	819a      	strh	r2, [r3, #12]
 800489e:	e002      	b.n	80048a6 <Load_EEPROM+0x406>
 80048a0:	4b71      	ldr	r3, [pc, #452]	; (8004a68 <Load_EEPROM+0x5c8>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	819a      	strh	r2, [r3, #12]
 80048a6:	bf00      	nop

	__BUFFER_TO_FREQ(buffer[6], perMsg[PDM_SAVE]);
 80048a8:	7cbb      	ldrb	r3, [r7, #18]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	2b0a      	cmp	r3, #10
 80048ae:	d847      	bhi.n	8004940 <Load_EEPROM+0x4a0>
 80048b0:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <Load_EEPROM+0x418>)
 80048b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b6:	bf00      	nop
 80048b8:	080048e5 	.word	0x080048e5
 80048bc:	080048ef 	.word	0x080048ef
 80048c0:	080048f9 	.word	0x080048f9
 80048c4:	08004901 	.word	0x08004901
 80048c8:	08004909 	.word	0x08004909
 80048cc:	08004911 	.word	0x08004911
 80048d0:	08004919 	.word	0x08004919
 80048d4:	08004921 	.word	0x08004921
 80048d8:	08004929 	.word	0x08004929
 80048dc:	08004931 	.word	0x08004931
 80048e0:	08004939 	.word	0x08004939
 80048e4:	4b60      	ldr	r3, [pc, #384]	; (8004a68 <Load_EEPROM+0x5c8>)
 80048e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048ea:	81da      	strh	r2, [r3, #14]
 80048ec:	e02b      	b.n	8004946 <Load_EEPROM+0x4a6>
 80048ee:	4b5e      	ldr	r3, [pc, #376]	; (8004a68 <Load_EEPROM+0x5c8>)
 80048f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80048f4:	81da      	strh	r2, [r3, #14]
 80048f6:	e026      	b.n	8004946 <Load_EEPROM+0x4a6>
 80048f8:	4b5b      	ldr	r3, [pc, #364]	; (8004a68 <Load_EEPROM+0x5c8>)
 80048fa:	22c8      	movs	r2, #200	; 0xc8
 80048fc:	81da      	strh	r2, [r3, #14]
 80048fe:	e022      	b.n	8004946 <Load_EEPROM+0x4a6>
 8004900:	4b59      	ldr	r3, [pc, #356]	; (8004a68 <Load_EEPROM+0x5c8>)
 8004902:	2264      	movs	r2, #100	; 0x64
 8004904:	81da      	strh	r2, [r3, #14]
 8004906:	e01e      	b.n	8004946 <Load_EEPROM+0x4a6>
 8004908:	4b57      	ldr	r3, [pc, #348]	; (8004a68 <Load_EEPROM+0x5c8>)
 800490a:	2232      	movs	r2, #50	; 0x32
 800490c:	81da      	strh	r2, [r3, #14]
 800490e:	e01a      	b.n	8004946 <Load_EEPROM+0x4a6>
 8004910:	4b55      	ldr	r3, [pc, #340]	; (8004a68 <Load_EEPROM+0x5c8>)
 8004912:	2228      	movs	r2, #40	; 0x28
 8004914:	81da      	strh	r2, [r3, #14]
 8004916:	e016      	b.n	8004946 <Load_EEPROM+0x4a6>
 8004918:	4b53      	ldr	r3, [pc, #332]	; (8004a68 <Load_EEPROM+0x5c8>)
 800491a:	2214      	movs	r2, #20
 800491c:	81da      	strh	r2, [r3, #14]
 800491e:	e012      	b.n	8004946 <Load_EEPROM+0x4a6>
 8004920:	4b51      	ldr	r3, [pc, #324]	; (8004a68 <Load_EEPROM+0x5c8>)
 8004922:	220a      	movs	r2, #10
 8004924:	81da      	strh	r2, [r3, #14]
 8004926:	e00e      	b.n	8004946 <Load_EEPROM+0x4a6>
 8004928:	4b4f      	ldr	r3, [pc, #316]	; (8004a68 <Load_EEPROM+0x5c8>)
 800492a:	2205      	movs	r2, #5
 800492c:	81da      	strh	r2, [r3, #14]
 800492e:	e00a      	b.n	8004946 <Load_EEPROM+0x4a6>
 8004930:	4b4d      	ldr	r3, [pc, #308]	; (8004a68 <Load_EEPROM+0x5c8>)
 8004932:	2204      	movs	r2, #4
 8004934:	81da      	strh	r2, [r3, #14]
 8004936:	e006      	b.n	8004946 <Load_EEPROM+0x4a6>
 8004938:	4b4b      	ldr	r3, [pc, #300]	; (8004a68 <Load_EEPROM+0x5c8>)
 800493a:	2202      	movs	r2, #2
 800493c:	81da      	strh	r2, [r3, #14]
 800493e:	e002      	b.n	8004946 <Load_EEPROM+0x4a6>
 8004940:	4b49      	ldr	r3, [pc, #292]	; (8004a68 <Load_EEPROM+0x5c8>)
 8004942:	2200      	movs	r2, #0
 8004944:	81da      	strh	r2, [r3, #14]
 8004946:	bf00      	nop

	__BUFFER_TO_FREQ(buffer[7], perCAN[ANALOG_1_4]);
 8004948:	7cfb      	ldrb	r3, [r7, #19]
 800494a:	3b01      	subs	r3, #1
 800494c:	2b0a      	cmp	r3, #10
 800494e:	d847      	bhi.n	80049e0 <Load_EEPROM+0x540>
 8004950:	a201      	add	r2, pc, #4	; (adr r2, 8004958 <Load_EEPROM+0x4b8>)
 8004952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004956:	bf00      	nop
 8004958:	08004985 	.word	0x08004985
 800495c:	0800498f 	.word	0x0800498f
 8004960:	08004999 	.word	0x08004999
 8004964:	080049a1 	.word	0x080049a1
 8004968:	080049a9 	.word	0x080049a9
 800496c:	080049b1 	.word	0x080049b1
 8004970:	080049b9 	.word	0x080049b9
 8004974:	080049c1 	.word	0x080049c1
 8004978:	080049c9 	.word	0x080049c9
 800497c:	080049d1 	.word	0x080049d1
 8004980:	080049d9 	.word	0x080049d9
 8004984:	4b39      	ldr	r3, [pc, #228]	; (8004a6c <Load_EEPROM+0x5cc>)
 8004986:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800498a:	801a      	strh	r2, [r3, #0]
 800498c:	e02b      	b.n	80049e6 <Load_EEPROM+0x546>
 800498e:	4b37      	ldr	r3, [pc, #220]	; (8004a6c <Load_EEPROM+0x5cc>)
 8004990:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004994:	801a      	strh	r2, [r3, #0]
 8004996:	e026      	b.n	80049e6 <Load_EEPROM+0x546>
 8004998:	4b34      	ldr	r3, [pc, #208]	; (8004a6c <Load_EEPROM+0x5cc>)
 800499a:	22c8      	movs	r2, #200	; 0xc8
 800499c:	801a      	strh	r2, [r3, #0]
 800499e:	e022      	b.n	80049e6 <Load_EEPROM+0x546>
 80049a0:	4b32      	ldr	r3, [pc, #200]	; (8004a6c <Load_EEPROM+0x5cc>)
 80049a2:	2264      	movs	r2, #100	; 0x64
 80049a4:	801a      	strh	r2, [r3, #0]
 80049a6:	e01e      	b.n	80049e6 <Load_EEPROM+0x546>
 80049a8:	4b30      	ldr	r3, [pc, #192]	; (8004a6c <Load_EEPROM+0x5cc>)
 80049aa:	2232      	movs	r2, #50	; 0x32
 80049ac:	801a      	strh	r2, [r3, #0]
 80049ae:	e01a      	b.n	80049e6 <Load_EEPROM+0x546>
 80049b0:	4b2e      	ldr	r3, [pc, #184]	; (8004a6c <Load_EEPROM+0x5cc>)
 80049b2:	2228      	movs	r2, #40	; 0x28
 80049b4:	801a      	strh	r2, [r3, #0]
 80049b6:	e016      	b.n	80049e6 <Load_EEPROM+0x546>
 80049b8:	4b2c      	ldr	r3, [pc, #176]	; (8004a6c <Load_EEPROM+0x5cc>)
 80049ba:	2214      	movs	r2, #20
 80049bc:	801a      	strh	r2, [r3, #0]
 80049be:	e012      	b.n	80049e6 <Load_EEPROM+0x546>
 80049c0:	4b2a      	ldr	r3, [pc, #168]	; (8004a6c <Load_EEPROM+0x5cc>)
 80049c2:	220a      	movs	r2, #10
 80049c4:	801a      	strh	r2, [r3, #0]
 80049c6:	e00e      	b.n	80049e6 <Load_EEPROM+0x546>
 80049c8:	4b28      	ldr	r3, [pc, #160]	; (8004a6c <Load_EEPROM+0x5cc>)
 80049ca:	2205      	movs	r2, #5
 80049cc:	801a      	strh	r2, [r3, #0]
 80049ce:	e00a      	b.n	80049e6 <Load_EEPROM+0x546>
 80049d0:	4b26      	ldr	r3, [pc, #152]	; (8004a6c <Load_EEPROM+0x5cc>)
 80049d2:	2204      	movs	r2, #4
 80049d4:	801a      	strh	r2, [r3, #0]
 80049d6:	e006      	b.n	80049e6 <Load_EEPROM+0x546>
 80049d8:	4b24      	ldr	r3, [pc, #144]	; (8004a6c <Load_EEPROM+0x5cc>)
 80049da:	2202      	movs	r2, #2
 80049dc:	801a      	strh	r2, [r3, #0]
 80049de:	e002      	b.n	80049e6 <Load_EEPROM+0x546>
 80049e0:	4b22      	ldr	r3, [pc, #136]	; (8004a6c <Load_EEPROM+0x5cc>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	801a      	strh	r2, [r3, #0]
 80049e6:	bf00      	nop

	__BUFFER_TO_FREQ(buffer[8], perCAN[ANALOG_5_8]);
 80049e8:	7d3b      	ldrb	r3, [r7, #20]
 80049ea:	3b01      	subs	r3, #1
 80049ec:	2b0a      	cmp	r3, #10
 80049ee:	d84b      	bhi.n	8004a88 <Load_EEPROM+0x5e8>
 80049f0:	a201      	add	r2, pc, #4	; (adr r2, 80049f8 <Load_EEPROM+0x558>)
 80049f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f6:	bf00      	nop
 80049f8:	08004a25 	.word	0x08004a25
 80049fc:	08004a2f 	.word	0x08004a2f
 8004a00:	08004a39 	.word	0x08004a39
 8004a04:	08004a41 	.word	0x08004a41
 8004a08:	08004a49 	.word	0x08004a49
 8004a0c:	08004a51 	.word	0x08004a51
 8004a10:	08004a59 	.word	0x08004a59
 8004a14:	08004a61 	.word	0x08004a61
 8004a18:	08004a71 	.word	0x08004a71
 8004a1c:	08004a79 	.word	0x08004a79
 8004a20:	08004a81 	.word	0x08004a81
 8004a24:	4b11      	ldr	r3, [pc, #68]	; (8004a6c <Load_EEPROM+0x5cc>)
 8004a26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a2a:	805a      	strh	r2, [r3, #2]
 8004a2c:	e02f      	b.n	8004a8e <Load_EEPROM+0x5ee>
 8004a2e:	4b0f      	ldr	r3, [pc, #60]	; (8004a6c <Load_EEPROM+0x5cc>)
 8004a30:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004a34:	805a      	strh	r2, [r3, #2]
 8004a36:	e02a      	b.n	8004a8e <Load_EEPROM+0x5ee>
 8004a38:	4b0c      	ldr	r3, [pc, #48]	; (8004a6c <Load_EEPROM+0x5cc>)
 8004a3a:	22c8      	movs	r2, #200	; 0xc8
 8004a3c:	805a      	strh	r2, [r3, #2]
 8004a3e:	e026      	b.n	8004a8e <Load_EEPROM+0x5ee>
 8004a40:	4b0a      	ldr	r3, [pc, #40]	; (8004a6c <Load_EEPROM+0x5cc>)
 8004a42:	2264      	movs	r2, #100	; 0x64
 8004a44:	805a      	strh	r2, [r3, #2]
 8004a46:	e022      	b.n	8004a8e <Load_EEPROM+0x5ee>
 8004a48:	4b08      	ldr	r3, [pc, #32]	; (8004a6c <Load_EEPROM+0x5cc>)
 8004a4a:	2232      	movs	r2, #50	; 0x32
 8004a4c:	805a      	strh	r2, [r3, #2]
 8004a4e:	e01e      	b.n	8004a8e <Load_EEPROM+0x5ee>
 8004a50:	4b06      	ldr	r3, [pc, #24]	; (8004a6c <Load_EEPROM+0x5cc>)
 8004a52:	2228      	movs	r2, #40	; 0x28
 8004a54:	805a      	strh	r2, [r3, #2]
 8004a56:	e01a      	b.n	8004a8e <Load_EEPROM+0x5ee>
 8004a58:	4b04      	ldr	r3, [pc, #16]	; (8004a6c <Load_EEPROM+0x5cc>)
 8004a5a:	2214      	movs	r2, #20
 8004a5c:	805a      	strh	r2, [r3, #2]
 8004a5e:	e016      	b.n	8004a8e <Load_EEPROM+0x5ee>
 8004a60:	4b02      	ldr	r3, [pc, #8]	; (8004a6c <Load_EEPROM+0x5cc>)
 8004a62:	220a      	movs	r2, #10
 8004a64:	805a      	strh	r2, [r3, #2]
 8004a66:	e012      	b.n	8004a8e <Load_EEPROM+0x5ee>
 8004a68:	20006728 	.word	0x20006728
 8004a6c:	2000671c 	.word	0x2000671c
 8004a70:	4b99      	ldr	r3, [pc, #612]	; (8004cd8 <Load_EEPROM+0x838>)
 8004a72:	2205      	movs	r2, #5
 8004a74:	805a      	strh	r2, [r3, #2]
 8004a76:	e00a      	b.n	8004a8e <Load_EEPROM+0x5ee>
 8004a78:	4b97      	ldr	r3, [pc, #604]	; (8004cd8 <Load_EEPROM+0x838>)
 8004a7a:	2204      	movs	r2, #4
 8004a7c:	805a      	strh	r2, [r3, #2]
 8004a7e:	e006      	b.n	8004a8e <Load_EEPROM+0x5ee>
 8004a80:	4b95      	ldr	r3, [pc, #596]	; (8004cd8 <Load_EEPROM+0x838>)
 8004a82:	2202      	movs	r2, #2
 8004a84:	805a      	strh	r2, [r3, #2]
 8004a86:	e002      	b.n	8004a8e <Load_EEPROM+0x5ee>
 8004a88:	4b93      	ldr	r3, [pc, #588]	; (8004cd8 <Load_EEPROM+0x838>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	805a      	strh	r2, [r3, #2]
 8004a8e:	bf00      	nop

	__BUFFER_TO_FREQ(buffer[9], perCAN[ANALOG_9_12]);
 8004a90:	7d7b      	ldrb	r3, [r7, #21]
 8004a92:	3b01      	subs	r3, #1
 8004a94:	2b0a      	cmp	r3, #10
 8004a96:	d847      	bhi.n	8004b28 <Load_EEPROM+0x688>
 8004a98:	a201      	add	r2, pc, #4	; (adr r2, 8004aa0 <Load_EEPROM+0x600>)
 8004a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9e:	bf00      	nop
 8004aa0:	08004acd 	.word	0x08004acd
 8004aa4:	08004ad7 	.word	0x08004ad7
 8004aa8:	08004ae1 	.word	0x08004ae1
 8004aac:	08004ae9 	.word	0x08004ae9
 8004ab0:	08004af1 	.word	0x08004af1
 8004ab4:	08004af9 	.word	0x08004af9
 8004ab8:	08004b01 	.word	0x08004b01
 8004abc:	08004b09 	.word	0x08004b09
 8004ac0:	08004b11 	.word	0x08004b11
 8004ac4:	08004b19 	.word	0x08004b19
 8004ac8:	08004b21 	.word	0x08004b21
 8004acc:	4b82      	ldr	r3, [pc, #520]	; (8004cd8 <Load_EEPROM+0x838>)
 8004ace:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ad2:	809a      	strh	r2, [r3, #4]
 8004ad4:	e02b      	b.n	8004b2e <Load_EEPROM+0x68e>
 8004ad6:	4b80      	ldr	r3, [pc, #512]	; (8004cd8 <Load_EEPROM+0x838>)
 8004ad8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004adc:	809a      	strh	r2, [r3, #4]
 8004ade:	e026      	b.n	8004b2e <Load_EEPROM+0x68e>
 8004ae0:	4b7d      	ldr	r3, [pc, #500]	; (8004cd8 <Load_EEPROM+0x838>)
 8004ae2:	22c8      	movs	r2, #200	; 0xc8
 8004ae4:	809a      	strh	r2, [r3, #4]
 8004ae6:	e022      	b.n	8004b2e <Load_EEPROM+0x68e>
 8004ae8:	4b7b      	ldr	r3, [pc, #492]	; (8004cd8 <Load_EEPROM+0x838>)
 8004aea:	2264      	movs	r2, #100	; 0x64
 8004aec:	809a      	strh	r2, [r3, #4]
 8004aee:	e01e      	b.n	8004b2e <Load_EEPROM+0x68e>
 8004af0:	4b79      	ldr	r3, [pc, #484]	; (8004cd8 <Load_EEPROM+0x838>)
 8004af2:	2232      	movs	r2, #50	; 0x32
 8004af4:	809a      	strh	r2, [r3, #4]
 8004af6:	e01a      	b.n	8004b2e <Load_EEPROM+0x68e>
 8004af8:	4b77      	ldr	r3, [pc, #476]	; (8004cd8 <Load_EEPROM+0x838>)
 8004afa:	2228      	movs	r2, #40	; 0x28
 8004afc:	809a      	strh	r2, [r3, #4]
 8004afe:	e016      	b.n	8004b2e <Load_EEPROM+0x68e>
 8004b00:	4b75      	ldr	r3, [pc, #468]	; (8004cd8 <Load_EEPROM+0x838>)
 8004b02:	2214      	movs	r2, #20
 8004b04:	809a      	strh	r2, [r3, #4]
 8004b06:	e012      	b.n	8004b2e <Load_EEPROM+0x68e>
 8004b08:	4b73      	ldr	r3, [pc, #460]	; (8004cd8 <Load_EEPROM+0x838>)
 8004b0a:	220a      	movs	r2, #10
 8004b0c:	809a      	strh	r2, [r3, #4]
 8004b0e:	e00e      	b.n	8004b2e <Load_EEPROM+0x68e>
 8004b10:	4b71      	ldr	r3, [pc, #452]	; (8004cd8 <Load_EEPROM+0x838>)
 8004b12:	2205      	movs	r2, #5
 8004b14:	809a      	strh	r2, [r3, #4]
 8004b16:	e00a      	b.n	8004b2e <Load_EEPROM+0x68e>
 8004b18:	4b6f      	ldr	r3, [pc, #444]	; (8004cd8 <Load_EEPROM+0x838>)
 8004b1a:	2204      	movs	r2, #4
 8004b1c:	809a      	strh	r2, [r3, #4]
 8004b1e:	e006      	b.n	8004b2e <Load_EEPROM+0x68e>
 8004b20:	4b6d      	ldr	r3, [pc, #436]	; (8004cd8 <Load_EEPROM+0x838>)
 8004b22:	2202      	movs	r2, #2
 8004b24:	809a      	strh	r2, [r3, #4]
 8004b26:	e002      	b.n	8004b2e <Load_EEPROM+0x68e>
 8004b28:	4b6b      	ldr	r3, [pc, #428]	; (8004cd8 <Load_EEPROM+0x838>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	809a      	strh	r2, [r3, #4]
 8004b2e:	bf00      	nop

	__BUFFER_TO_FREQ(buffer[10], perCAN[RTC_MSG]);
 8004b30:	7dbb      	ldrb	r3, [r7, #22]
 8004b32:	3b01      	subs	r3, #1
 8004b34:	2b0a      	cmp	r3, #10
 8004b36:	d847      	bhi.n	8004bc8 <Load_EEPROM+0x728>
 8004b38:	a201      	add	r2, pc, #4	; (adr r2, 8004b40 <Load_EEPROM+0x6a0>)
 8004b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3e:	bf00      	nop
 8004b40:	08004b6d 	.word	0x08004b6d
 8004b44:	08004b77 	.word	0x08004b77
 8004b48:	08004b81 	.word	0x08004b81
 8004b4c:	08004b89 	.word	0x08004b89
 8004b50:	08004b91 	.word	0x08004b91
 8004b54:	08004b99 	.word	0x08004b99
 8004b58:	08004ba1 	.word	0x08004ba1
 8004b5c:	08004ba9 	.word	0x08004ba9
 8004b60:	08004bb1 	.word	0x08004bb1
 8004b64:	08004bb9 	.word	0x08004bb9
 8004b68:	08004bc1 	.word	0x08004bc1
 8004b6c:	4b5a      	ldr	r3, [pc, #360]	; (8004cd8 <Load_EEPROM+0x838>)
 8004b6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b72:	80da      	strh	r2, [r3, #6]
 8004b74:	e02b      	b.n	8004bce <Load_EEPROM+0x72e>
 8004b76:	4b58      	ldr	r3, [pc, #352]	; (8004cd8 <Load_EEPROM+0x838>)
 8004b78:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004b7c:	80da      	strh	r2, [r3, #6]
 8004b7e:	e026      	b.n	8004bce <Load_EEPROM+0x72e>
 8004b80:	4b55      	ldr	r3, [pc, #340]	; (8004cd8 <Load_EEPROM+0x838>)
 8004b82:	22c8      	movs	r2, #200	; 0xc8
 8004b84:	80da      	strh	r2, [r3, #6]
 8004b86:	e022      	b.n	8004bce <Load_EEPROM+0x72e>
 8004b88:	4b53      	ldr	r3, [pc, #332]	; (8004cd8 <Load_EEPROM+0x838>)
 8004b8a:	2264      	movs	r2, #100	; 0x64
 8004b8c:	80da      	strh	r2, [r3, #6]
 8004b8e:	e01e      	b.n	8004bce <Load_EEPROM+0x72e>
 8004b90:	4b51      	ldr	r3, [pc, #324]	; (8004cd8 <Load_EEPROM+0x838>)
 8004b92:	2232      	movs	r2, #50	; 0x32
 8004b94:	80da      	strh	r2, [r3, #6]
 8004b96:	e01a      	b.n	8004bce <Load_EEPROM+0x72e>
 8004b98:	4b4f      	ldr	r3, [pc, #316]	; (8004cd8 <Load_EEPROM+0x838>)
 8004b9a:	2228      	movs	r2, #40	; 0x28
 8004b9c:	80da      	strh	r2, [r3, #6]
 8004b9e:	e016      	b.n	8004bce <Load_EEPROM+0x72e>
 8004ba0:	4b4d      	ldr	r3, [pc, #308]	; (8004cd8 <Load_EEPROM+0x838>)
 8004ba2:	2214      	movs	r2, #20
 8004ba4:	80da      	strh	r2, [r3, #6]
 8004ba6:	e012      	b.n	8004bce <Load_EEPROM+0x72e>
 8004ba8:	4b4b      	ldr	r3, [pc, #300]	; (8004cd8 <Load_EEPROM+0x838>)
 8004baa:	220a      	movs	r2, #10
 8004bac:	80da      	strh	r2, [r3, #6]
 8004bae:	e00e      	b.n	8004bce <Load_EEPROM+0x72e>
 8004bb0:	4b49      	ldr	r3, [pc, #292]	; (8004cd8 <Load_EEPROM+0x838>)
 8004bb2:	2205      	movs	r2, #5
 8004bb4:	80da      	strh	r2, [r3, #6]
 8004bb6:	e00a      	b.n	8004bce <Load_EEPROM+0x72e>
 8004bb8:	4b47      	ldr	r3, [pc, #284]	; (8004cd8 <Load_EEPROM+0x838>)
 8004bba:	2204      	movs	r2, #4
 8004bbc:	80da      	strh	r2, [r3, #6]
 8004bbe:	e006      	b.n	8004bce <Load_EEPROM+0x72e>
 8004bc0:	4b45      	ldr	r3, [pc, #276]	; (8004cd8 <Load_EEPROM+0x838>)
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	80da      	strh	r2, [r3, #6]
 8004bc6:	e002      	b.n	8004bce <Load_EEPROM+0x72e>
 8004bc8:	4b43      	ldr	r3, [pc, #268]	; (8004cd8 <Load_EEPROM+0x838>)
 8004bca:	2200      	movs	r2, #0
 8004bcc:	80da      	strh	r2, [r3, #6]
 8004bce:	bf00      	nop

	__BUFFER_TO_FREQ(buffer[11], perCAN[VERIFY_MSG]);
 8004bd0:	7dfb      	ldrb	r3, [r7, #23]
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	2b0a      	cmp	r3, #10
 8004bd6:	d847      	bhi.n	8004c68 <Load_EEPROM+0x7c8>
 8004bd8:	a201      	add	r2, pc, #4	; (adr r2, 8004be0 <Load_EEPROM+0x740>)
 8004bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bde:	bf00      	nop
 8004be0:	08004c0d 	.word	0x08004c0d
 8004be4:	08004c17 	.word	0x08004c17
 8004be8:	08004c21 	.word	0x08004c21
 8004bec:	08004c29 	.word	0x08004c29
 8004bf0:	08004c31 	.word	0x08004c31
 8004bf4:	08004c39 	.word	0x08004c39
 8004bf8:	08004c41 	.word	0x08004c41
 8004bfc:	08004c49 	.word	0x08004c49
 8004c00:	08004c51 	.word	0x08004c51
 8004c04:	08004c59 	.word	0x08004c59
 8004c08:	08004c61 	.word	0x08004c61
 8004c0c:	4b32      	ldr	r3, [pc, #200]	; (8004cd8 <Load_EEPROM+0x838>)
 8004c0e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c12:	811a      	strh	r2, [r3, #8]
 8004c14:	e02b      	b.n	8004c6e <Load_EEPROM+0x7ce>
 8004c16:	4b30      	ldr	r3, [pc, #192]	; (8004cd8 <Load_EEPROM+0x838>)
 8004c18:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004c1c:	811a      	strh	r2, [r3, #8]
 8004c1e:	e026      	b.n	8004c6e <Load_EEPROM+0x7ce>
 8004c20:	4b2d      	ldr	r3, [pc, #180]	; (8004cd8 <Load_EEPROM+0x838>)
 8004c22:	22c8      	movs	r2, #200	; 0xc8
 8004c24:	811a      	strh	r2, [r3, #8]
 8004c26:	e022      	b.n	8004c6e <Load_EEPROM+0x7ce>
 8004c28:	4b2b      	ldr	r3, [pc, #172]	; (8004cd8 <Load_EEPROM+0x838>)
 8004c2a:	2264      	movs	r2, #100	; 0x64
 8004c2c:	811a      	strh	r2, [r3, #8]
 8004c2e:	e01e      	b.n	8004c6e <Load_EEPROM+0x7ce>
 8004c30:	4b29      	ldr	r3, [pc, #164]	; (8004cd8 <Load_EEPROM+0x838>)
 8004c32:	2232      	movs	r2, #50	; 0x32
 8004c34:	811a      	strh	r2, [r3, #8]
 8004c36:	e01a      	b.n	8004c6e <Load_EEPROM+0x7ce>
 8004c38:	4b27      	ldr	r3, [pc, #156]	; (8004cd8 <Load_EEPROM+0x838>)
 8004c3a:	2228      	movs	r2, #40	; 0x28
 8004c3c:	811a      	strh	r2, [r3, #8]
 8004c3e:	e016      	b.n	8004c6e <Load_EEPROM+0x7ce>
 8004c40:	4b25      	ldr	r3, [pc, #148]	; (8004cd8 <Load_EEPROM+0x838>)
 8004c42:	2214      	movs	r2, #20
 8004c44:	811a      	strh	r2, [r3, #8]
 8004c46:	e012      	b.n	8004c6e <Load_EEPROM+0x7ce>
 8004c48:	4b23      	ldr	r3, [pc, #140]	; (8004cd8 <Load_EEPROM+0x838>)
 8004c4a:	220a      	movs	r2, #10
 8004c4c:	811a      	strh	r2, [r3, #8]
 8004c4e:	e00e      	b.n	8004c6e <Load_EEPROM+0x7ce>
 8004c50:	4b21      	ldr	r3, [pc, #132]	; (8004cd8 <Load_EEPROM+0x838>)
 8004c52:	2205      	movs	r2, #5
 8004c54:	811a      	strh	r2, [r3, #8]
 8004c56:	e00a      	b.n	8004c6e <Load_EEPROM+0x7ce>
 8004c58:	4b1f      	ldr	r3, [pc, #124]	; (8004cd8 <Load_EEPROM+0x838>)
 8004c5a:	2204      	movs	r2, #4
 8004c5c:	811a      	strh	r2, [r3, #8]
 8004c5e:	e006      	b.n	8004c6e <Load_EEPROM+0x7ce>
 8004c60:	4b1d      	ldr	r3, [pc, #116]	; (8004cd8 <Load_EEPROM+0x838>)
 8004c62:	2202      	movs	r2, #2
 8004c64:	811a      	strh	r2, [r3, #8]
 8004c66:	e002      	b.n	8004c6e <Load_EEPROM+0x7ce>
 8004c68:	4b1b      	ldr	r3, [pc, #108]	; (8004cd8 <Load_EEPROM+0x838>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	811a      	strh	r2, [r3, #8]
 8004c6e:	bf00      	nop

	inputConfig 	 = buffer[12];
 8004c70:	7e3a      	ldrb	r2, [r7, #24]
 8004c72:	4b1a      	ldr	r3, [pc, #104]	; (8004cdc <Load_EEPROM+0x83c>)
 8004c74:	701a      	strb	r2, [r3, #0]
	thresholdBeacon	 = buffer[13] << 8;
 8004c76:	7e7b      	ldrb	r3, [r7, #25]
 8004c78:	021b      	lsls	r3, r3, #8
 8004c7a:	b21a      	sxth	r2, r3
 8004c7c:	4b18      	ldr	r3, [pc, #96]	; (8004ce0 <Load_EEPROM+0x840>)
 8004c7e:	801a      	strh	r2, [r3, #0]
	thresholdBeacon |= buffer[14] & 0xff;
 8004c80:	7ebb      	ldrb	r3, [r7, #26]
 8004c82:	b21a      	sxth	r2, r3
 8004c84:	4b16      	ldr	r3, [pc, #88]	; (8004ce0 <Load_EEPROM+0x840>)
 8004c86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	b21a      	sxth	r2, r3
 8004c8e:	4b14      	ldr	r3, [pc, #80]	; (8004ce0 <Load_EEPROM+0x840>)
 8004c90:	801a      	strh	r2, [r3, #0]
	thresholdRPM	 = buffer[15] << 8;
 8004c92:	7efb      	ldrb	r3, [r7, #27]
 8004c94:	021b      	lsls	r3, r3, #8
 8004c96:	b21a      	sxth	r2, r3
 8004c98:	4b12      	ldr	r3, [pc, #72]	; (8004ce4 <Load_EEPROM+0x844>)
 8004c9a:	801a      	strh	r2, [r3, #0]
	thresholdRPM	|= buffer[16] & 0xff;
 8004c9c:	7f3b      	ldrb	r3, [r7, #28]
 8004c9e:	b21a      	sxth	r2, r3
 8004ca0:	4b10      	ldr	r3, [pc, #64]	; (8004ce4 <Load_EEPROM+0x844>)
 8004ca2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	b21a      	sxth	r2, r3
 8004caa:	4b0e      	ldr	r3, [pc, #56]	; (8004ce4 <Load_EEPROM+0x844>)
 8004cac:	801a      	strh	r2, [r3, #0]
	thresholdSpeed	 = buffer[17] << 8;
 8004cae:	7f7b      	ldrb	r3, [r7, #29]
 8004cb0:	021b      	lsls	r3, r3, #8
 8004cb2:	b21a      	sxth	r2, r3
 8004cb4:	4b0c      	ldr	r3, [pc, #48]	; (8004ce8 <Load_EEPROM+0x848>)
 8004cb6:	801a      	strh	r2, [r3, #0]
	thresholdSpeed	|= buffer[18] & 0xff;
 8004cb8:	7fbb      	ldrb	r3, [r7, #30]
 8004cba:	b21a      	sxth	r2, r3
 8004cbc:	4b0a      	ldr	r3, [pc, #40]	; (8004ce8 <Load_EEPROM+0x848>)
 8004cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	b21a      	sxth	r2, r3
 8004cc6:	4b08      	ldr	r3, [pc, #32]	; (8004ce8 <Load_EEPROM+0x848>)
 8004cc8:	801a      	strh	r2, [r3, #0]

	return retVal;
 8004cca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3728      	adds	r7, #40	; 0x28
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	2000671c 	.word	0x2000671c
 8004cdc:	20006700 	.word	0x20006700
 8004ce0:	2000463a 	.word	0x2000463a
 8004ce4:	2000463c 	.word	0x2000463c
 8004ce8:	2000463e 	.word	0x2000463e

08004cec <Save_EEPROM>:

static HAL_StatusTypeDef Save_EEPROM(I2C_HandleTypeDef* hi2c)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b08c      	sub	sp, #48	; 0x30
 8004cf0:	af02      	add	r7, sp, #8
 8004cf2:	6078      	str	r0, [r7, #4]
	uint8_t buffer[EEPROM_BUFFER_SIZE];
	HAL_StatusTypeDef retVal = HAL_OK;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	__FREQ_TO_BUFFER(buffer[0], perMsg[ANALOG_1_4]);
 8004cfa:	4baa      	ldr	r3, [pc, #680]	; (8004fa4 <Save_EEPROM+0x2b8>)
 8004cfc:	881b      	ldrh	r3, [r3, #0]
 8004cfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d02:	f000 8082 	beq.w	8004e0a <Save_EEPROM+0x11e>
 8004d06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d0a:	f300 809f 	bgt.w	8004e4c <Save_EEPROM+0x160>
 8004d0e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004d12:	d07d      	beq.n	8004e10 <Save_EEPROM+0x124>
 8004d14:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004d18:	f300 8098 	bgt.w	8004e4c <Save_EEPROM+0x160>
 8004d1c:	2bc8      	cmp	r3, #200	; 0xc8
 8004d1e:	d07a      	beq.n	8004e16 <Save_EEPROM+0x12a>
 8004d20:	2bc8      	cmp	r3, #200	; 0xc8
 8004d22:	f300 8093 	bgt.w	8004e4c <Save_EEPROM+0x160>
 8004d26:	2b32      	cmp	r3, #50	; 0x32
 8004d28:	dc6c      	bgt.n	8004e04 <Save_EEPROM+0x118>
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	f2c0 808e 	blt.w	8004e4c <Save_EEPROM+0x160>
 8004d30:	3b02      	subs	r3, #2
 8004d32:	2b30      	cmp	r3, #48	; 0x30
 8004d34:	f200 808a 	bhi.w	8004e4c <Save_EEPROM+0x160>
 8004d38:	a201      	add	r2, pc, #4	; (adr r2, 8004d40 <Save_EEPROM+0x54>)
 8004d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3e:	bf00      	nop
 8004d40:	08004e47 	.word	0x08004e47
 8004d44:	08004e4d 	.word	0x08004e4d
 8004d48:	08004e41 	.word	0x08004e41
 8004d4c:	08004e3b 	.word	0x08004e3b
 8004d50:	08004e4d 	.word	0x08004e4d
 8004d54:	08004e4d 	.word	0x08004e4d
 8004d58:	08004e4d 	.word	0x08004e4d
 8004d5c:	08004e4d 	.word	0x08004e4d
 8004d60:	08004e35 	.word	0x08004e35
 8004d64:	08004e4d 	.word	0x08004e4d
 8004d68:	08004e4d 	.word	0x08004e4d
 8004d6c:	08004e4d 	.word	0x08004e4d
 8004d70:	08004e4d 	.word	0x08004e4d
 8004d74:	08004e4d 	.word	0x08004e4d
 8004d78:	08004e4d 	.word	0x08004e4d
 8004d7c:	08004e4d 	.word	0x08004e4d
 8004d80:	08004e4d 	.word	0x08004e4d
 8004d84:	08004e4d 	.word	0x08004e4d
 8004d88:	08004e2f 	.word	0x08004e2f
 8004d8c:	08004e4d 	.word	0x08004e4d
 8004d90:	08004e4d 	.word	0x08004e4d
 8004d94:	08004e4d 	.word	0x08004e4d
 8004d98:	08004e4d 	.word	0x08004e4d
 8004d9c:	08004e4d 	.word	0x08004e4d
 8004da0:	08004e4d 	.word	0x08004e4d
 8004da4:	08004e4d 	.word	0x08004e4d
 8004da8:	08004e4d 	.word	0x08004e4d
 8004dac:	08004e4d 	.word	0x08004e4d
 8004db0:	08004e4d 	.word	0x08004e4d
 8004db4:	08004e4d 	.word	0x08004e4d
 8004db8:	08004e4d 	.word	0x08004e4d
 8004dbc:	08004e4d 	.word	0x08004e4d
 8004dc0:	08004e4d 	.word	0x08004e4d
 8004dc4:	08004e4d 	.word	0x08004e4d
 8004dc8:	08004e4d 	.word	0x08004e4d
 8004dcc:	08004e4d 	.word	0x08004e4d
 8004dd0:	08004e4d 	.word	0x08004e4d
 8004dd4:	08004e4d 	.word	0x08004e4d
 8004dd8:	08004e29 	.word	0x08004e29
 8004ddc:	08004e4d 	.word	0x08004e4d
 8004de0:	08004e4d 	.word	0x08004e4d
 8004de4:	08004e4d 	.word	0x08004e4d
 8004de8:	08004e4d 	.word	0x08004e4d
 8004dec:	08004e4d 	.word	0x08004e4d
 8004df0:	08004e4d 	.word	0x08004e4d
 8004df4:	08004e4d 	.word	0x08004e4d
 8004df8:	08004e4d 	.word	0x08004e4d
 8004dfc:	08004e4d 	.word	0x08004e4d
 8004e00:	08004e23 	.word	0x08004e23
 8004e04:	2b64      	cmp	r3, #100	; 0x64
 8004e06:	d009      	beq.n	8004e1c <Save_EEPROM+0x130>
 8004e08:	e020      	b.n	8004e4c <Save_EEPROM+0x160>
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	733b      	strb	r3, [r7, #12]
 8004e0e:	e01f      	b.n	8004e50 <Save_EEPROM+0x164>
 8004e10:	2302      	movs	r3, #2
 8004e12:	733b      	strb	r3, [r7, #12]
 8004e14:	e01c      	b.n	8004e50 <Save_EEPROM+0x164>
 8004e16:	2303      	movs	r3, #3
 8004e18:	733b      	strb	r3, [r7, #12]
 8004e1a:	e019      	b.n	8004e50 <Save_EEPROM+0x164>
 8004e1c:	2304      	movs	r3, #4
 8004e1e:	733b      	strb	r3, [r7, #12]
 8004e20:	e016      	b.n	8004e50 <Save_EEPROM+0x164>
 8004e22:	2305      	movs	r3, #5
 8004e24:	733b      	strb	r3, [r7, #12]
 8004e26:	e013      	b.n	8004e50 <Save_EEPROM+0x164>
 8004e28:	2306      	movs	r3, #6
 8004e2a:	733b      	strb	r3, [r7, #12]
 8004e2c:	e010      	b.n	8004e50 <Save_EEPROM+0x164>
 8004e2e:	2307      	movs	r3, #7
 8004e30:	733b      	strb	r3, [r7, #12]
 8004e32:	e00d      	b.n	8004e50 <Save_EEPROM+0x164>
 8004e34:	2308      	movs	r3, #8
 8004e36:	733b      	strb	r3, [r7, #12]
 8004e38:	e00a      	b.n	8004e50 <Save_EEPROM+0x164>
 8004e3a:	2309      	movs	r3, #9
 8004e3c:	733b      	strb	r3, [r7, #12]
 8004e3e:	e007      	b.n	8004e50 <Save_EEPROM+0x164>
 8004e40:	230a      	movs	r3, #10
 8004e42:	733b      	strb	r3, [r7, #12]
 8004e44:	e004      	b.n	8004e50 <Save_EEPROM+0x164>
 8004e46:	230b      	movs	r3, #11
 8004e48:	733b      	strb	r3, [r7, #12]
 8004e4a:	e001      	b.n	8004e50 <Save_EEPROM+0x164>
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	733b      	strb	r3, [r7, #12]
 8004e50:	bf00      	nop

	__FREQ_TO_BUFFER(buffer[1], perMsg[ANALOG_5_8]);
 8004e52:	4b54      	ldr	r3, [pc, #336]	; (8004fa4 <Save_EEPROM+0x2b8>)
 8004e54:	885b      	ldrh	r3, [r3, #2]
 8004e56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e5a:	f000 8082 	beq.w	8004f62 <Save_EEPROM+0x276>
 8004e5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e62:	f300 80a1 	bgt.w	8004fa8 <Save_EEPROM+0x2bc>
 8004e66:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004e6a:	d07d      	beq.n	8004f68 <Save_EEPROM+0x27c>
 8004e6c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004e70:	f300 809a 	bgt.w	8004fa8 <Save_EEPROM+0x2bc>
 8004e74:	2bc8      	cmp	r3, #200	; 0xc8
 8004e76:	d07a      	beq.n	8004f6e <Save_EEPROM+0x282>
 8004e78:	2bc8      	cmp	r3, #200	; 0xc8
 8004e7a:	f300 8095 	bgt.w	8004fa8 <Save_EEPROM+0x2bc>
 8004e7e:	2b32      	cmp	r3, #50	; 0x32
 8004e80:	dc6c      	bgt.n	8004f5c <Save_EEPROM+0x270>
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	f2c0 8090 	blt.w	8004fa8 <Save_EEPROM+0x2bc>
 8004e88:	3b02      	subs	r3, #2
 8004e8a:	2b30      	cmp	r3, #48	; 0x30
 8004e8c:	f200 808c 	bhi.w	8004fa8 <Save_EEPROM+0x2bc>
 8004e90:	a201      	add	r2, pc, #4	; (adr r2, 8004e98 <Save_EEPROM+0x1ac>)
 8004e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e96:	bf00      	nop
 8004e98:	08004f9f 	.word	0x08004f9f
 8004e9c:	08004fa9 	.word	0x08004fa9
 8004ea0:	08004f99 	.word	0x08004f99
 8004ea4:	08004f93 	.word	0x08004f93
 8004ea8:	08004fa9 	.word	0x08004fa9
 8004eac:	08004fa9 	.word	0x08004fa9
 8004eb0:	08004fa9 	.word	0x08004fa9
 8004eb4:	08004fa9 	.word	0x08004fa9
 8004eb8:	08004f8d 	.word	0x08004f8d
 8004ebc:	08004fa9 	.word	0x08004fa9
 8004ec0:	08004fa9 	.word	0x08004fa9
 8004ec4:	08004fa9 	.word	0x08004fa9
 8004ec8:	08004fa9 	.word	0x08004fa9
 8004ecc:	08004fa9 	.word	0x08004fa9
 8004ed0:	08004fa9 	.word	0x08004fa9
 8004ed4:	08004fa9 	.word	0x08004fa9
 8004ed8:	08004fa9 	.word	0x08004fa9
 8004edc:	08004fa9 	.word	0x08004fa9
 8004ee0:	08004f87 	.word	0x08004f87
 8004ee4:	08004fa9 	.word	0x08004fa9
 8004ee8:	08004fa9 	.word	0x08004fa9
 8004eec:	08004fa9 	.word	0x08004fa9
 8004ef0:	08004fa9 	.word	0x08004fa9
 8004ef4:	08004fa9 	.word	0x08004fa9
 8004ef8:	08004fa9 	.word	0x08004fa9
 8004efc:	08004fa9 	.word	0x08004fa9
 8004f00:	08004fa9 	.word	0x08004fa9
 8004f04:	08004fa9 	.word	0x08004fa9
 8004f08:	08004fa9 	.word	0x08004fa9
 8004f0c:	08004fa9 	.word	0x08004fa9
 8004f10:	08004fa9 	.word	0x08004fa9
 8004f14:	08004fa9 	.word	0x08004fa9
 8004f18:	08004fa9 	.word	0x08004fa9
 8004f1c:	08004fa9 	.word	0x08004fa9
 8004f20:	08004fa9 	.word	0x08004fa9
 8004f24:	08004fa9 	.word	0x08004fa9
 8004f28:	08004fa9 	.word	0x08004fa9
 8004f2c:	08004fa9 	.word	0x08004fa9
 8004f30:	08004f81 	.word	0x08004f81
 8004f34:	08004fa9 	.word	0x08004fa9
 8004f38:	08004fa9 	.word	0x08004fa9
 8004f3c:	08004fa9 	.word	0x08004fa9
 8004f40:	08004fa9 	.word	0x08004fa9
 8004f44:	08004fa9 	.word	0x08004fa9
 8004f48:	08004fa9 	.word	0x08004fa9
 8004f4c:	08004fa9 	.word	0x08004fa9
 8004f50:	08004fa9 	.word	0x08004fa9
 8004f54:	08004fa9 	.word	0x08004fa9
 8004f58:	08004f7b 	.word	0x08004f7b
 8004f5c:	2b64      	cmp	r3, #100	; 0x64
 8004f5e:	d009      	beq.n	8004f74 <Save_EEPROM+0x288>
 8004f60:	e022      	b.n	8004fa8 <Save_EEPROM+0x2bc>
 8004f62:	2301      	movs	r3, #1
 8004f64:	737b      	strb	r3, [r7, #13]
 8004f66:	e021      	b.n	8004fac <Save_EEPROM+0x2c0>
 8004f68:	2302      	movs	r3, #2
 8004f6a:	737b      	strb	r3, [r7, #13]
 8004f6c:	e01e      	b.n	8004fac <Save_EEPROM+0x2c0>
 8004f6e:	2303      	movs	r3, #3
 8004f70:	737b      	strb	r3, [r7, #13]
 8004f72:	e01b      	b.n	8004fac <Save_EEPROM+0x2c0>
 8004f74:	2304      	movs	r3, #4
 8004f76:	737b      	strb	r3, [r7, #13]
 8004f78:	e018      	b.n	8004fac <Save_EEPROM+0x2c0>
 8004f7a:	2305      	movs	r3, #5
 8004f7c:	737b      	strb	r3, [r7, #13]
 8004f7e:	e015      	b.n	8004fac <Save_EEPROM+0x2c0>
 8004f80:	2306      	movs	r3, #6
 8004f82:	737b      	strb	r3, [r7, #13]
 8004f84:	e012      	b.n	8004fac <Save_EEPROM+0x2c0>
 8004f86:	2307      	movs	r3, #7
 8004f88:	737b      	strb	r3, [r7, #13]
 8004f8a:	e00f      	b.n	8004fac <Save_EEPROM+0x2c0>
 8004f8c:	2308      	movs	r3, #8
 8004f8e:	737b      	strb	r3, [r7, #13]
 8004f90:	e00c      	b.n	8004fac <Save_EEPROM+0x2c0>
 8004f92:	2309      	movs	r3, #9
 8004f94:	737b      	strb	r3, [r7, #13]
 8004f96:	e009      	b.n	8004fac <Save_EEPROM+0x2c0>
 8004f98:	230a      	movs	r3, #10
 8004f9a:	737b      	strb	r3, [r7, #13]
 8004f9c:	e006      	b.n	8004fac <Save_EEPROM+0x2c0>
 8004f9e:	230b      	movs	r3, #11
 8004fa0:	737b      	strb	r3, [r7, #13]
 8004fa2:	e003      	b.n	8004fac <Save_EEPROM+0x2c0>
 8004fa4:	20006728 	.word	0x20006728
 8004fa8:	2300      	movs	r3, #0
 8004faa:	737b      	strb	r3, [r7, #13]
 8004fac:	bf00      	nop

	__FREQ_TO_BUFFER(buffer[2], perMsg[ANALOG_9_12]);
 8004fae:	4baa      	ldr	r3, [pc, #680]	; (8005258 <Save_EEPROM+0x56c>)
 8004fb0:	889b      	ldrh	r3, [r3, #4]
 8004fb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fb6:	f000 8082 	beq.w	80050be <Save_EEPROM+0x3d2>
 8004fba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fbe:	f300 809f 	bgt.w	8005100 <Save_EEPROM+0x414>
 8004fc2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004fc6:	d07d      	beq.n	80050c4 <Save_EEPROM+0x3d8>
 8004fc8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004fcc:	f300 8098 	bgt.w	8005100 <Save_EEPROM+0x414>
 8004fd0:	2bc8      	cmp	r3, #200	; 0xc8
 8004fd2:	d07a      	beq.n	80050ca <Save_EEPROM+0x3de>
 8004fd4:	2bc8      	cmp	r3, #200	; 0xc8
 8004fd6:	f300 8093 	bgt.w	8005100 <Save_EEPROM+0x414>
 8004fda:	2b32      	cmp	r3, #50	; 0x32
 8004fdc:	dc6c      	bgt.n	80050b8 <Save_EEPROM+0x3cc>
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	f2c0 808e 	blt.w	8005100 <Save_EEPROM+0x414>
 8004fe4:	3b02      	subs	r3, #2
 8004fe6:	2b30      	cmp	r3, #48	; 0x30
 8004fe8:	f200 808a 	bhi.w	8005100 <Save_EEPROM+0x414>
 8004fec:	a201      	add	r2, pc, #4	; (adr r2, 8004ff4 <Save_EEPROM+0x308>)
 8004fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff2:	bf00      	nop
 8004ff4:	080050fb 	.word	0x080050fb
 8004ff8:	08005101 	.word	0x08005101
 8004ffc:	080050f5 	.word	0x080050f5
 8005000:	080050ef 	.word	0x080050ef
 8005004:	08005101 	.word	0x08005101
 8005008:	08005101 	.word	0x08005101
 800500c:	08005101 	.word	0x08005101
 8005010:	08005101 	.word	0x08005101
 8005014:	080050e9 	.word	0x080050e9
 8005018:	08005101 	.word	0x08005101
 800501c:	08005101 	.word	0x08005101
 8005020:	08005101 	.word	0x08005101
 8005024:	08005101 	.word	0x08005101
 8005028:	08005101 	.word	0x08005101
 800502c:	08005101 	.word	0x08005101
 8005030:	08005101 	.word	0x08005101
 8005034:	08005101 	.word	0x08005101
 8005038:	08005101 	.word	0x08005101
 800503c:	080050e3 	.word	0x080050e3
 8005040:	08005101 	.word	0x08005101
 8005044:	08005101 	.word	0x08005101
 8005048:	08005101 	.word	0x08005101
 800504c:	08005101 	.word	0x08005101
 8005050:	08005101 	.word	0x08005101
 8005054:	08005101 	.word	0x08005101
 8005058:	08005101 	.word	0x08005101
 800505c:	08005101 	.word	0x08005101
 8005060:	08005101 	.word	0x08005101
 8005064:	08005101 	.word	0x08005101
 8005068:	08005101 	.word	0x08005101
 800506c:	08005101 	.word	0x08005101
 8005070:	08005101 	.word	0x08005101
 8005074:	08005101 	.word	0x08005101
 8005078:	08005101 	.word	0x08005101
 800507c:	08005101 	.word	0x08005101
 8005080:	08005101 	.word	0x08005101
 8005084:	08005101 	.word	0x08005101
 8005088:	08005101 	.word	0x08005101
 800508c:	080050dd 	.word	0x080050dd
 8005090:	08005101 	.word	0x08005101
 8005094:	08005101 	.word	0x08005101
 8005098:	08005101 	.word	0x08005101
 800509c:	08005101 	.word	0x08005101
 80050a0:	08005101 	.word	0x08005101
 80050a4:	08005101 	.word	0x08005101
 80050a8:	08005101 	.word	0x08005101
 80050ac:	08005101 	.word	0x08005101
 80050b0:	08005101 	.word	0x08005101
 80050b4:	080050d7 	.word	0x080050d7
 80050b8:	2b64      	cmp	r3, #100	; 0x64
 80050ba:	d009      	beq.n	80050d0 <Save_EEPROM+0x3e4>
 80050bc:	e020      	b.n	8005100 <Save_EEPROM+0x414>
 80050be:	2301      	movs	r3, #1
 80050c0:	73bb      	strb	r3, [r7, #14]
 80050c2:	e01f      	b.n	8005104 <Save_EEPROM+0x418>
 80050c4:	2302      	movs	r3, #2
 80050c6:	73bb      	strb	r3, [r7, #14]
 80050c8:	e01c      	b.n	8005104 <Save_EEPROM+0x418>
 80050ca:	2303      	movs	r3, #3
 80050cc:	73bb      	strb	r3, [r7, #14]
 80050ce:	e019      	b.n	8005104 <Save_EEPROM+0x418>
 80050d0:	2304      	movs	r3, #4
 80050d2:	73bb      	strb	r3, [r7, #14]
 80050d4:	e016      	b.n	8005104 <Save_EEPROM+0x418>
 80050d6:	2305      	movs	r3, #5
 80050d8:	73bb      	strb	r3, [r7, #14]
 80050da:	e013      	b.n	8005104 <Save_EEPROM+0x418>
 80050dc:	2306      	movs	r3, #6
 80050de:	73bb      	strb	r3, [r7, #14]
 80050e0:	e010      	b.n	8005104 <Save_EEPROM+0x418>
 80050e2:	2307      	movs	r3, #7
 80050e4:	73bb      	strb	r3, [r7, #14]
 80050e6:	e00d      	b.n	8005104 <Save_EEPROM+0x418>
 80050e8:	2308      	movs	r3, #8
 80050ea:	73bb      	strb	r3, [r7, #14]
 80050ec:	e00a      	b.n	8005104 <Save_EEPROM+0x418>
 80050ee:	2309      	movs	r3, #9
 80050f0:	73bb      	strb	r3, [r7, #14]
 80050f2:	e007      	b.n	8005104 <Save_EEPROM+0x418>
 80050f4:	230a      	movs	r3, #10
 80050f6:	73bb      	strb	r3, [r7, #14]
 80050f8:	e004      	b.n	8005104 <Save_EEPROM+0x418>
 80050fa:	230b      	movs	r3, #11
 80050fc:	73bb      	strb	r3, [r7, #14]
 80050fe:	e001      	b.n	8005104 <Save_EEPROM+0x418>
 8005100:	2300      	movs	r3, #0
 8005102:	73bb      	strb	r3, [r7, #14]
 8005104:	bf00      	nop

	__FREQ_TO_BUFFER(buffer[3], perMsg[RTC_MSG]);
 8005106:	4b54      	ldr	r3, [pc, #336]	; (8005258 <Save_EEPROM+0x56c>)
 8005108:	88db      	ldrh	r3, [r3, #6]
 800510a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800510e:	f000 8082 	beq.w	8005216 <Save_EEPROM+0x52a>
 8005112:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005116:	f300 80a1 	bgt.w	800525c <Save_EEPROM+0x570>
 800511a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800511e:	d07d      	beq.n	800521c <Save_EEPROM+0x530>
 8005120:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005124:	f300 809a 	bgt.w	800525c <Save_EEPROM+0x570>
 8005128:	2bc8      	cmp	r3, #200	; 0xc8
 800512a:	d07a      	beq.n	8005222 <Save_EEPROM+0x536>
 800512c:	2bc8      	cmp	r3, #200	; 0xc8
 800512e:	f300 8095 	bgt.w	800525c <Save_EEPROM+0x570>
 8005132:	2b32      	cmp	r3, #50	; 0x32
 8005134:	dc6c      	bgt.n	8005210 <Save_EEPROM+0x524>
 8005136:	2b02      	cmp	r3, #2
 8005138:	f2c0 8090 	blt.w	800525c <Save_EEPROM+0x570>
 800513c:	3b02      	subs	r3, #2
 800513e:	2b30      	cmp	r3, #48	; 0x30
 8005140:	f200 808c 	bhi.w	800525c <Save_EEPROM+0x570>
 8005144:	a201      	add	r2, pc, #4	; (adr r2, 800514c <Save_EEPROM+0x460>)
 8005146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514a:	bf00      	nop
 800514c:	08005253 	.word	0x08005253
 8005150:	0800525d 	.word	0x0800525d
 8005154:	0800524d 	.word	0x0800524d
 8005158:	08005247 	.word	0x08005247
 800515c:	0800525d 	.word	0x0800525d
 8005160:	0800525d 	.word	0x0800525d
 8005164:	0800525d 	.word	0x0800525d
 8005168:	0800525d 	.word	0x0800525d
 800516c:	08005241 	.word	0x08005241
 8005170:	0800525d 	.word	0x0800525d
 8005174:	0800525d 	.word	0x0800525d
 8005178:	0800525d 	.word	0x0800525d
 800517c:	0800525d 	.word	0x0800525d
 8005180:	0800525d 	.word	0x0800525d
 8005184:	0800525d 	.word	0x0800525d
 8005188:	0800525d 	.word	0x0800525d
 800518c:	0800525d 	.word	0x0800525d
 8005190:	0800525d 	.word	0x0800525d
 8005194:	0800523b 	.word	0x0800523b
 8005198:	0800525d 	.word	0x0800525d
 800519c:	0800525d 	.word	0x0800525d
 80051a0:	0800525d 	.word	0x0800525d
 80051a4:	0800525d 	.word	0x0800525d
 80051a8:	0800525d 	.word	0x0800525d
 80051ac:	0800525d 	.word	0x0800525d
 80051b0:	0800525d 	.word	0x0800525d
 80051b4:	0800525d 	.word	0x0800525d
 80051b8:	0800525d 	.word	0x0800525d
 80051bc:	0800525d 	.word	0x0800525d
 80051c0:	0800525d 	.word	0x0800525d
 80051c4:	0800525d 	.word	0x0800525d
 80051c8:	0800525d 	.word	0x0800525d
 80051cc:	0800525d 	.word	0x0800525d
 80051d0:	0800525d 	.word	0x0800525d
 80051d4:	0800525d 	.word	0x0800525d
 80051d8:	0800525d 	.word	0x0800525d
 80051dc:	0800525d 	.word	0x0800525d
 80051e0:	0800525d 	.word	0x0800525d
 80051e4:	08005235 	.word	0x08005235
 80051e8:	0800525d 	.word	0x0800525d
 80051ec:	0800525d 	.word	0x0800525d
 80051f0:	0800525d 	.word	0x0800525d
 80051f4:	0800525d 	.word	0x0800525d
 80051f8:	0800525d 	.word	0x0800525d
 80051fc:	0800525d 	.word	0x0800525d
 8005200:	0800525d 	.word	0x0800525d
 8005204:	0800525d 	.word	0x0800525d
 8005208:	0800525d 	.word	0x0800525d
 800520c:	0800522f 	.word	0x0800522f
 8005210:	2b64      	cmp	r3, #100	; 0x64
 8005212:	d009      	beq.n	8005228 <Save_EEPROM+0x53c>
 8005214:	e022      	b.n	800525c <Save_EEPROM+0x570>
 8005216:	2301      	movs	r3, #1
 8005218:	73fb      	strb	r3, [r7, #15]
 800521a:	e021      	b.n	8005260 <Save_EEPROM+0x574>
 800521c:	2302      	movs	r3, #2
 800521e:	73fb      	strb	r3, [r7, #15]
 8005220:	e01e      	b.n	8005260 <Save_EEPROM+0x574>
 8005222:	2303      	movs	r3, #3
 8005224:	73fb      	strb	r3, [r7, #15]
 8005226:	e01b      	b.n	8005260 <Save_EEPROM+0x574>
 8005228:	2304      	movs	r3, #4
 800522a:	73fb      	strb	r3, [r7, #15]
 800522c:	e018      	b.n	8005260 <Save_EEPROM+0x574>
 800522e:	2305      	movs	r3, #5
 8005230:	73fb      	strb	r3, [r7, #15]
 8005232:	e015      	b.n	8005260 <Save_EEPROM+0x574>
 8005234:	2306      	movs	r3, #6
 8005236:	73fb      	strb	r3, [r7, #15]
 8005238:	e012      	b.n	8005260 <Save_EEPROM+0x574>
 800523a:	2307      	movs	r3, #7
 800523c:	73fb      	strb	r3, [r7, #15]
 800523e:	e00f      	b.n	8005260 <Save_EEPROM+0x574>
 8005240:	2308      	movs	r3, #8
 8005242:	73fb      	strb	r3, [r7, #15]
 8005244:	e00c      	b.n	8005260 <Save_EEPROM+0x574>
 8005246:	2309      	movs	r3, #9
 8005248:	73fb      	strb	r3, [r7, #15]
 800524a:	e009      	b.n	8005260 <Save_EEPROM+0x574>
 800524c:	230a      	movs	r3, #10
 800524e:	73fb      	strb	r3, [r7, #15]
 8005250:	e006      	b.n	8005260 <Save_EEPROM+0x574>
 8005252:	230b      	movs	r3, #11
 8005254:	73fb      	strb	r3, [r7, #15]
 8005256:	e003      	b.n	8005260 <Save_EEPROM+0x574>
 8005258:	20006728 	.word	0x20006728
 800525c:	2300      	movs	r3, #0
 800525e:	73fb      	strb	r3, [r7, #15]
 8005260:	bf00      	nop

	__FREQ_TO_BUFFER(buffer[4], perMsg[VERIFY_MSG]);
 8005262:	4baa      	ldr	r3, [pc, #680]	; (800550c <Save_EEPROM+0x820>)
 8005264:	891b      	ldrh	r3, [r3, #8]
 8005266:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800526a:	f000 8082 	beq.w	8005372 <Save_EEPROM+0x686>
 800526e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005272:	f300 809f 	bgt.w	80053b4 <Save_EEPROM+0x6c8>
 8005276:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800527a:	d07d      	beq.n	8005378 <Save_EEPROM+0x68c>
 800527c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005280:	f300 8098 	bgt.w	80053b4 <Save_EEPROM+0x6c8>
 8005284:	2bc8      	cmp	r3, #200	; 0xc8
 8005286:	d07a      	beq.n	800537e <Save_EEPROM+0x692>
 8005288:	2bc8      	cmp	r3, #200	; 0xc8
 800528a:	f300 8093 	bgt.w	80053b4 <Save_EEPROM+0x6c8>
 800528e:	2b32      	cmp	r3, #50	; 0x32
 8005290:	dc6c      	bgt.n	800536c <Save_EEPROM+0x680>
 8005292:	2b02      	cmp	r3, #2
 8005294:	f2c0 808e 	blt.w	80053b4 <Save_EEPROM+0x6c8>
 8005298:	3b02      	subs	r3, #2
 800529a:	2b30      	cmp	r3, #48	; 0x30
 800529c:	f200 808a 	bhi.w	80053b4 <Save_EEPROM+0x6c8>
 80052a0:	a201      	add	r2, pc, #4	; (adr r2, 80052a8 <Save_EEPROM+0x5bc>)
 80052a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a6:	bf00      	nop
 80052a8:	080053af 	.word	0x080053af
 80052ac:	080053b5 	.word	0x080053b5
 80052b0:	080053a9 	.word	0x080053a9
 80052b4:	080053a3 	.word	0x080053a3
 80052b8:	080053b5 	.word	0x080053b5
 80052bc:	080053b5 	.word	0x080053b5
 80052c0:	080053b5 	.word	0x080053b5
 80052c4:	080053b5 	.word	0x080053b5
 80052c8:	0800539d 	.word	0x0800539d
 80052cc:	080053b5 	.word	0x080053b5
 80052d0:	080053b5 	.word	0x080053b5
 80052d4:	080053b5 	.word	0x080053b5
 80052d8:	080053b5 	.word	0x080053b5
 80052dc:	080053b5 	.word	0x080053b5
 80052e0:	080053b5 	.word	0x080053b5
 80052e4:	080053b5 	.word	0x080053b5
 80052e8:	080053b5 	.word	0x080053b5
 80052ec:	080053b5 	.word	0x080053b5
 80052f0:	08005397 	.word	0x08005397
 80052f4:	080053b5 	.word	0x080053b5
 80052f8:	080053b5 	.word	0x080053b5
 80052fc:	080053b5 	.word	0x080053b5
 8005300:	080053b5 	.word	0x080053b5
 8005304:	080053b5 	.word	0x080053b5
 8005308:	080053b5 	.word	0x080053b5
 800530c:	080053b5 	.word	0x080053b5
 8005310:	080053b5 	.word	0x080053b5
 8005314:	080053b5 	.word	0x080053b5
 8005318:	080053b5 	.word	0x080053b5
 800531c:	080053b5 	.word	0x080053b5
 8005320:	080053b5 	.word	0x080053b5
 8005324:	080053b5 	.word	0x080053b5
 8005328:	080053b5 	.word	0x080053b5
 800532c:	080053b5 	.word	0x080053b5
 8005330:	080053b5 	.word	0x080053b5
 8005334:	080053b5 	.word	0x080053b5
 8005338:	080053b5 	.word	0x080053b5
 800533c:	080053b5 	.word	0x080053b5
 8005340:	08005391 	.word	0x08005391
 8005344:	080053b5 	.word	0x080053b5
 8005348:	080053b5 	.word	0x080053b5
 800534c:	080053b5 	.word	0x080053b5
 8005350:	080053b5 	.word	0x080053b5
 8005354:	080053b5 	.word	0x080053b5
 8005358:	080053b5 	.word	0x080053b5
 800535c:	080053b5 	.word	0x080053b5
 8005360:	080053b5 	.word	0x080053b5
 8005364:	080053b5 	.word	0x080053b5
 8005368:	0800538b 	.word	0x0800538b
 800536c:	2b64      	cmp	r3, #100	; 0x64
 800536e:	d009      	beq.n	8005384 <Save_EEPROM+0x698>
 8005370:	e020      	b.n	80053b4 <Save_EEPROM+0x6c8>
 8005372:	2301      	movs	r3, #1
 8005374:	743b      	strb	r3, [r7, #16]
 8005376:	e01f      	b.n	80053b8 <Save_EEPROM+0x6cc>
 8005378:	2302      	movs	r3, #2
 800537a:	743b      	strb	r3, [r7, #16]
 800537c:	e01c      	b.n	80053b8 <Save_EEPROM+0x6cc>
 800537e:	2303      	movs	r3, #3
 8005380:	743b      	strb	r3, [r7, #16]
 8005382:	e019      	b.n	80053b8 <Save_EEPROM+0x6cc>
 8005384:	2304      	movs	r3, #4
 8005386:	743b      	strb	r3, [r7, #16]
 8005388:	e016      	b.n	80053b8 <Save_EEPROM+0x6cc>
 800538a:	2305      	movs	r3, #5
 800538c:	743b      	strb	r3, [r7, #16]
 800538e:	e013      	b.n	80053b8 <Save_EEPROM+0x6cc>
 8005390:	2306      	movs	r3, #6
 8005392:	743b      	strb	r3, [r7, #16]
 8005394:	e010      	b.n	80053b8 <Save_EEPROM+0x6cc>
 8005396:	2307      	movs	r3, #7
 8005398:	743b      	strb	r3, [r7, #16]
 800539a:	e00d      	b.n	80053b8 <Save_EEPROM+0x6cc>
 800539c:	2308      	movs	r3, #8
 800539e:	743b      	strb	r3, [r7, #16]
 80053a0:	e00a      	b.n	80053b8 <Save_EEPROM+0x6cc>
 80053a2:	2309      	movs	r3, #9
 80053a4:	743b      	strb	r3, [r7, #16]
 80053a6:	e007      	b.n	80053b8 <Save_EEPROM+0x6cc>
 80053a8:	230a      	movs	r3, #10
 80053aa:	743b      	strb	r3, [r7, #16]
 80053ac:	e004      	b.n	80053b8 <Save_EEPROM+0x6cc>
 80053ae:	230b      	movs	r3, #11
 80053b0:	743b      	strb	r3, [r7, #16]
 80053b2:	e001      	b.n	80053b8 <Save_EEPROM+0x6cc>
 80053b4:	2300      	movs	r3, #0
 80053b6:	743b      	strb	r3, [r7, #16]
 80053b8:	bf00      	nop

	__FREQ_TO_BUFFER(buffer[5], perMsg[ECU_SAVE]);
 80053ba:	4b54      	ldr	r3, [pc, #336]	; (800550c <Save_EEPROM+0x820>)
 80053bc:	899b      	ldrh	r3, [r3, #12]
 80053be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053c2:	f000 8082 	beq.w	80054ca <Save_EEPROM+0x7de>
 80053c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053ca:	f300 80a1 	bgt.w	8005510 <Save_EEPROM+0x824>
 80053ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80053d2:	d07d      	beq.n	80054d0 <Save_EEPROM+0x7e4>
 80053d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80053d8:	f300 809a 	bgt.w	8005510 <Save_EEPROM+0x824>
 80053dc:	2bc8      	cmp	r3, #200	; 0xc8
 80053de:	d07a      	beq.n	80054d6 <Save_EEPROM+0x7ea>
 80053e0:	2bc8      	cmp	r3, #200	; 0xc8
 80053e2:	f300 8095 	bgt.w	8005510 <Save_EEPROM+0x824>
 80053e6:	2b32      	cmp	r3, #50	; 0x32
 80053e8:	dc6c      	bgt.n	80054c4 <Save_EEPROM+0x7d8>
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	f2c0 8090 	blt.w	8005510 <Save_EEPROM+0x824>
 80053f0:	3b02      	subs	r3, #2
 80053f2:	2b30      	cmp	r3, #48	; 0x30
 80053f4:	f200 808c 	bhi.w	8005510 <Save_EEPROM+0x824>
 80053f8:	a201      	add	r2, pc, #4	; (adr r2, 8005400 <Save_EEPROM+0x714>)
 80053fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fe:	bf00      	nop
 8005400:	08005507 	.word	0x08005507
 8005404:	08005511 	.word	0x08005511
 8005408:	08005501 	.word	0x08005501
 800540c:	080054fb 	.word	0x080054fb
 8005410:	08005511 	.word	0x08005511
 8005414:	08005511 	.word	0x08005511
 8005418:	08005511 	.word	0x08005511
 800541c:	08005511 	.word	0x08005511
 8005420:	080054f5 	.word	0x080054f5
 8005424:	08005511 	.word	0x08005511
 8005428:	08005511 	.word	0x08005511
 800542c:	08005511 	.word	0x08005511
 8005430:	08005511 	.word	0x08005511
 8005434:	08005511 	.word	0x08005511
 8005438:	08005511 	.word	0x08005511
 800543c:	08005511 	.word	0x08005511
 8005440:	08005511 	.word	0x08005511
 8005444:	08005511 	.word	0x08005511
 8005448:	080054ef 	.word	0x080054ef
 800544c:	08005511 	.word	0x08005511
 8005450:	08005511 	.word	0x08005511
 8005454:	08005511 	.word	0x08005511
 8005458:	08005511 	.word	0x08005511
 800545c:	08005511 	.word	0x08005511
 8005460:	08005511 	.word	0x08005511
 8005464:	08005511 	.word	0x08005511
 8005468:	08005511 	.word	0x08005511
 800546c:	08005511 	.word	0x08005511
 8005470:	08005511 	.word	0x08005511
 8005474:	08005511 	.word	0x08005511
 8005478:	08005511 	.word	0x08005511
 800547c:	08005511 	.word	0x08005511
 8005480:	08005511 	.word	0x08005511
 8005484:	08005511 	.word	0x08005511
 8005488:	08005511 	.word	0x08005511
 800548c:	08005511 	.word	0x08005511
 8005490:	08005511 	.word	0x08005511
 8005494:	08005511 	.word	0x08005511
 8005498:	080054e9 	.word	0x080054e9
 800549c:	08005511 	.word	0x08005511
 80054a0:	08005511 	.word	0x08005511
 80054a4:	08005511 	.word	0x08005511
 80054a8:	08005511 	.word	0x08005511
 80054ac:	08005511 	.word	0x08005511
 80054b0:	08005511 	.word	0x08005511
 80054b4:	08005511 	.word	0x08005511
 80054b8:	08005511 	.word	0x08005511
 80054bc:	08005511 	.word	0x08005511
 80054c0:	080054e3 	.word	0x080054e3
 80054c4:	2b64      	cmp	r3, #100	; 0x64
 80054c6:	d009      	beq.n	80054dc <Save_EEPROM+0x7f0>
 80054c8:	e022      	b.n	8005510 <Save_EEPROM+0x824>
 80054ca:	2301      	movs	r3, #1
 80054cc:	747b      	strb	r3, [r7, #17]
 80054ce:	e021      	b.n	8005514 <Save_EEPROM+0x828>
 80054d0:	2302      	movs	r3, #2
 80054d2:	747b      	strb	r3, [r7, #17]
 80054d4:	e01e      	b.n	8005514 <Save_EEPROM+0x828>
 80054d6:	2303      	movs	r3, #3
 80054d8:	747b      	strb	r3, [r7, #17]
 80054da:	e01b      	b.n	8005514 <Save_EEPROM+0x828>
 80054dc:	2304      	movs	r3, #4
 80054de:	747b      	strb	r3, [r7, #17]
 80054e0:	e018      	b.n	8005514 <Save_EEPROM+0x828>
 80054e2:	2305      	movs	r3, #5
 80054e4:	747b      	strb	r3, [r7, #17]
 80054e6:	e015      	b.n	8005514 <Save_EEPROM+0x828>
 80054e8:	2306      	movs	r3, #6
 80054ea:	747b      	strb	r3, [r7, #17]
 80054ec:	e012      	b.n	8005514 <Save_EEPROM+0x828>
 80054ee:	2307      	movs	r3, #7
 80054f0:	747b      	strb	r3, [r7, #17]
 80054f2:	e00f      	b.n	8005514 <Save_EEPROM+0x828>
 80054f4:	2308      	movs	r3, #8
 80054f6:	747b      	strb	r3, [r7, #17]
 80054f8:	e00c      	b.n	8005514 <Save_EEPROM+0x828>
 80054fa:	2309      	movs	r3, #9
 80054fc:	747b      	strb	r3, [r7, #17]
 80054fe:	e009      	b.n	8005514 <Save_EEPROM+0x828>
 8005500:	230a      	movs	r3, #10
 8005502:	747b      	strb	r3, [r7, #17]
 8005504:	e006      	b.n	8005514 <Save_EEPROM+0x828>
 8005506:	230b      	movs	r3, #11
 8005508:	747b      	strb	r3, [r7, #17]
 800550a:	e003      	b.n	8005514 <Save_EEPROM+0x828>
 800550c:	20006728 	.word	0x20006728
 8005510:	2300      	movs	r3, #0
 8005512:	747b      	strb	r3, [r7, #17]
 8005514:	bf00      	nop

	__FREQ_TO_BUFFER(buffer[6], perMsg[PDM_SAVE]);
 8005516:	4baa      	ldr	r3, [pc, #680]	; (80057c0 <Save_EEPROM+0xad4>)
 8005518:	89db      	ldrh	r3, [r3, #14]
 800551a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800551e:	f000 8082 	beq.w	8005626 <Save_EEPROM+0x93a>
 8005522:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005526:	f300 809f 	bgt.w	8005668 <Save_EEPROM+0x97c>
 800552a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800552e:	d07d      	beq.n	800562c <Save_EEPROM+0x940>
 8005530:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005534:	f300 8098 	bgt.w	8005668 <Save_EEPROM+0x97c>
 8005538:	2bc8      	cmp	r3, #200	; 0xc8
 800553a:	d07a      	beq.n	8005632 <Save_EEPROM+0x946>
 800553c:	2bc8      	cmp	r3, #200	; 0xc8
 800553e:	f300 8093 	bgt.w	8005668 <Save_EEPROM+0x97c>
 8005542:	2b32      	cmp	r3, #50	; 0x32
 8005544:	dc6c      	bgt.n	8005620 <Save_EEPROM+0x934>
 8005546:	2b02      	cmp	r3, #2
 8005548:	f2c0 808e 	blt.w	8005668 <Save_EEPROM+0x97c>
 800554c:	3b02      	subs	r3, #2
 800554e:	2b30      	cmp	r3, #48	; 0x30
 8005550:	f200 808a 	bhi.w	8005668 <Save_EEPROM+0x97c>
 8005554:	a201      	add	r2, pc, #4	; (adr r2, 800555c <Save_EEPROM+0x870>)
 8005556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555a:	bf00      	nop
 800555c:	08005663 	.word	0x08005663
 8005560:	08005669 	.word	0x08005669
 8005564:	0800565d 	.word	0x0800565d
 8005568:	08005657 	.word	0x08005657
 800556c:	08005669 	.word	0x08005669
 8005570:	08005669 	.word	0x08005669
 8005574:	08005669 	.word	0x08005669
 8005578:	08005669 	.word	0x08005669
 800557c:	08005651 	.word	0x08005651
 8005580:	08005669 	.word	0x08005669
 8005584:	08005669 	.word	0x08005669
 8005588:	08005669 	.word	0x08005669
 800558c:	08005669 	.word	0x08005669
 8005590:	08005669 	.word	0x08005669
 8005594:	08005669 	.word	0x08005669
 8005598:	08005669 	.word	0x08005669
 800559c:	08005669 	.word	0x08005669
 80055a0:	08005669 	.word	0x08005669
 80055a4:	0800564b 	.word	0x0800564b
 80055a8:	08005669 	.word	0x08005669
 80055ac:	08005669 	.word	0x08005669
 80055b0:	08005669 	.word	0x08005669
 80055b4:	08005669 	.word	0x08005669
 80055b8:	08005669 	.word	0x08005669
 80055bc:	08005669 	.word	0x08005669
 80055c0:	08005669 	.word	0x08005669
 80055c4:	08005669 	.word	0x08005669
 80055c8:	08005669 	.word	0x08005669
 80055cc:	08005669 	.word	0x08005669
 80055d0:	08005669 	.word	0x08005669
 80055d4:	08005669 	.word	0x08005669
 80055d8:	08005669 	.word	0x08005669
 80055dc:	08005669 	.word	0x08005669
 80055e0:	08005669 	.word	0x08005669
 80055e4:	08005669 	.word	0x08005669
 80055e8:	08005669 	.word	0x08005669
 80055ec:	08005669 	.word	0x08005669
 80055f0:	08005669 	.word	0x08005669
 80055f4:	08005645 	.word	0x08005645
 80055f8:	08005669 	.word	0x08005669
 80055fc:	08005669 	.word	0x08005669
 8005600:	08005669 	.word	0x08005669
 8005604:	08005669 	.word	0x08005669
 8005608:	08005669 	.word	0x08005669
 800560c:	08005669 	.word	0x08005669
 8005610:	08005669 	.word	0x08005669
 8005614:	08005669 	.word	0x08005669
 8005618:	08005669 	.word	0x08005669
 800561c:	0800563f 	.word	0x0800563f
 8005620:	2b64      	cmp	r3, #100	; 0x64
 8005622:	d009      	beq.n	8005638 <Save_EEPROM+0x94c>
 8005624:	e020      	b.n	8005668 <Save_EEPROM+0x97c>
 8005626:	2301      	movs	r3, #1
 8005628:	74bb      	strb	r3, [r7, #18]
 800562a:	e01f      	b.n	800566c <Save_EEPROM+0x980>
 800562c:	2302      	movs	r3, #2
 800562e:	74bb      	strb	r3, [r7, #18]
 8005630:	e01c      	b.n	800566c <Save_EEPROM+0x980>
 8005632:	2303      	movs	r3, #3
 8005634:	74bb      	strb	r3, [r7, #18]
 8005636:	e019      	b.n	800566c <Save_EEPROM+0x980>
 8005638:	2304      	movs	r3, #4
 800563a:	74bb      	strb	r3, [r7, #18]
 800563c:	e016      	b.n	800566c <Save_EEPROM+0x980>
 800563e:	2305      	movs	r3, #5
 8005640:	74bb      	strb	r3, [r7, #18]
 8005642:	e013      	b.n	800566c <Save_EEPROM+0x980>
 8005644:	2306      	movs	r3, #6
 8005646:	74bb      	strb	r3, [r7, #18]
 8005648:	e010      	b.n	800566c <Save_EEPROM+0x980>
 800564a:	2307      	movs	r3, #7
 800564c:	74bb      	strb	r3, [r7, #18]
 800564e:	e00d      	b.n	800566c <Save_EEPROM+0x980>
 8005650:	2308      	movs	r3, #8
 8005652:	74bb      	strb	r3, [r7, #18]
 8005654:	e00a      	b.n	800566c <Save_EEPROM+0x980>
 8005656:	2309      	movs	r3, #9
 8005658:	74bb      	strb	r3, [r7, #18]
 800565a:	e007      	b.n	800566c <Save_EEPROM+0x980>
 800565c:	230a      	movs	r3, #10
 800565e:	74bb      	strb	r3, [r7, #18]
 8005660:	e004      	b.n	800566c <Save_EEPROM+0x980>
 8005662:	230b      	movs	r3, #11
 8005664:	74bb      	strb	r3, [r7, #18]
 8005666:	e001      	b.n	800566c <Save_EEPROM+0x980>
 8005668:	2300      	movs	r3, #0
 800566a:	74bb      	strb	r3, [r7, #18]
 800566c:	bf00      	nop

	__FREQ_TO_BUFFER(buffer[7], perCAN[ANALOG_1_4]);
 800566e:	4b55      	ldr	r3, [pc, #340]	; (80057c4 <Save_EEPROM+0xad8>)
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005676:	f000 8082 	beq.w	800577e <Save_EEPROM+0xa92>
 800567a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800567e:	f300 80a3 	bgt.w	80057c8 <Save_EEPROM+0xadc>
 8005682:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005686:	d07d      	beq.n	8005784 <Save_EEPROM+0xa98>
 8005688:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800568c:	f300 809c 	bgt.w	80057c8 <Save_EEPROM+0xadc>
 8005690:	2bc8      	cmp	r3, #200	; 0xc8
 8005692:	d07a      	beq.n	800578a <Save_EEPROM+0xa9e>
 8005694:	2bc8      	cmp	r3, #200	; 0xc8
 8005696:	f300 8097 	bgt.w	80057c8 <Save_EEPROM+0xadc>
 800569a:	2b32      	cmp	r3, #50	; 0x32
 800569c:	dc6c      	bgt.n	8005778 <Save_EEPROM+0xa8c>
 800569e:	2b02      	cmp	r3, #2
 80056a0:	f2c0 8092 	blt.w	80057c8 <Save_EEPROM+0xadc>
 80056a4:	3b02      	subs	r3, #2
 80056a6:	2b30      	cmp	r3, #48	; 0x30
 80056a8:	f200 808e 	bhi.w	80057c8 <Save_EEPROM+0xadc>
 80056ac:	a201      	add	r2, pc, #4	; (adr r2, 80056b4 <Save_EEPROM+0x9c8>)
 80056ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b2:	bf00      	nop
 80056b4:	080057bb 	.word	0x080057bb
 80056b8:	080057c9 	.word	0x080057c9
 80056bc:	080057b5 	.word	0x080057b5
 80056c0:	080057af 	.word	0x080057af
 80056c4:	080057c9 	.word	0x080057c9
 80056c8:	080057c9 	.word	0x080057c9
 80056cc:	080057c9 	.word	0x080057c9
 80056d0:	080057c9 	.word	0x080057c9
 80056d4:	080057a9 	.word	0x080057a9
 80056d8:	080057c9 	.word	0x080057c9
 80056dc:	080057c9 	.word	0x080057c9
 80056e0:	080057c9 	.word	0x080057c9
 80056e4:	080057c9 	.word	0x080057c9
 80056e8:	080057c9 	.word	0x080057c9
 80056ec:	080057c9 	.word	0x080057c9
 80056f0:	080057c9 	.word	0x080057c9
 80056f4:	080057c9 	.word	0x080057c9
 80056f8:	080057c9 	.word	0x080057c9
 80056fc:	080057a3 	.word	0x080057a3
 8005700:	080057c9 	.word	0x080057c9
 8005704:	080057c9 	.word	0x080057c9
 8005708:	080057c9 	.word	0x080057c9
 800570c:	080057c9 	.word	0x080057c9
 8005710:	080057c9 	.word	0x080057c9
 8005714:	080057c9 	.word	0x080057c9
 8005718:	080057c9 	.word	0x080057c9
 800571c:	080057c9 	.word	0x080057c9
 8005720:	080057c9 	.word	0x080057c9
 8005724:	080057c9 	.word	0x080057c9
 8005728:	080057c9 	.word	0x080057c9
 800572c:	080057c9 	.word	0x080057c9
 8005730:	080057c9 	.word	0x080057c9
 8005734:	080057c9 	.word	0x080057c9
 8005738:	080057c9 	.word	0x080057c9
 800573c:	080057c9 	.word	0x080057c9
 8005740:	080057c9 	.word	0x080057c9
 8005744:	080057c9 	.word	0x080057c9
 8005748:	080057c9 	.word	0x080057c9
 800574c:	0800579d 	.word	0x0800579d
 8005750:	080057c9 	.word	0x080057c9
 8005754:	080057c9 	.word	0x080057c9
 8005758:	080057c9 	.word	0x080057c9
 800575c:	080057c9 	.word	0x080057c9
 8005760:	080057c9 	.word	0x080057c9
 8005764:	080057c9 	.word	0x080057c9
 8005768:	080057c9 	.word	0x080057c9
 800576c:	080057c9 	.word	0x080057c9
 8005770:	080057c9 	.word	0x080057c9
 8005774:	08005797 	.word	0x08005797
 8005778:	2b64      	cmp	r3, #100	; 0x64
 800577a:	d009      	beq.n	8005790 <Save_EEPROM+0xaa4>
 800577c:	e024      	b.n	80057c8 <Save_EEPROM+0xadc>
 800577e:	2301      	movs	r3, #1
 8005780:	74fb      	strb	r3, [r7, #19]
 8005782:	e023      	b.n	80057cc <Save_EEPROM+0xae0>
 8005784:	2302      	movs	r3, #2
 8005786:	74fb      	strb	r3, [r7, #19]
 8005788:	e020      	b.n	80057cc <Save_EEPROM+0xae0>
 800578a:	2303      	movs	r3, #3
 800578c:	74fb      	strb	r3, [r7, #19]
 800578e:	e01d      	b.n	80057cc <Save_EEPROM+0xae0>
 8005790:	2304      	movs	r3, #4
 8005792:	74fb      	strb	r3, [r7, #19]
 8005794:	e01a      	b.n	80057cc <Save_EEPROM+0xae0>
 8005796:	2305      	movs	r3, #5
 8005798:	74fb      	strb	r3, [r7, #19]
 800579a:	e017      	b.n	80057cc <Save_EEPROM+0xae0>
 800579c:	2306      	movs	r3, #6
 800579e:	74fb      	strb	r3, [r7, #19]
 80057a0:	e014      	b.n	80057cc <Save_EEPROM+0xae0>
 80057a2:	2307      	movs	r3, #7
 80057a4:	74fb      	strb	r3, [r7, #19]
 80057a6:	e011      	b.n	80057cc <Save_EEPROM+0xae0>
 80057a8:	2308      	movs	r3, #8
 80057aa:	74fb      	strb	r3, [r7, #19]
 80057ac:	e00e      	b.n	80057cc <Save_EEPROM+0xae0>
 80057ae:	2309      	movs	r3, #9
 80057b0:	74fb      	strb	r3, [r7, #19]
 80057b2:	e00b      	b.n	80057cc <Save_EEPROM+0xae0>
 80057b4:	230a      	movs	r3, #10
 80057b6:	74fb      	strb	r3, [r7, #19]
 80057b8:	e008      	b.n	80057cc <Save_EEPROM+0xae0>
 80057ba:	230b      	movs	r3, #11
 80057bc:	74fb      	strb	r3, [r7, #19]
 80057be:	e005      	b.n	80057cc <Save_EEPROM+0xae0>
 80057c0:	20006728 	.word	0x20006728
 80057c4:	2000671c 	.word	0x2000671c
 80057c8:	2300      	movs	r3, #0
 80057ca:	74fb      	strb	r3, [r7, #19]
 80057cc:	bf00      	nop

	__FREQ_TO_BUFFER(buffer[8], perCAN[ANALOG_5_8]);
 80057ce:	4baa      	ldr	r3, [pc, #680]	; (8005a78 <Save_EEPROM+0xd8c>)
 80057d0:	885b      	ldrh	r3, [r3, #2]
 80057d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057d6:	f000 8082 	beq.w	80058de <Save_EEPROM+0xbf2>
 80057da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057de:	f300 809f 	bgt.w	8005920 <Save_EEPROM+0xc34>
 80057e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80057e6:	d07d      	beq.n	80058e4 <Save_EEPROM+0xbf8>
 80057e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80057ec:	f300 8098 	bgt.w	8005920 <Save_EEPROM+0xc34>
 80057f0:	2bc8      	cmp	r3, #200	; 0xc8
 80057f2:	d07a      	beq.n	80058ea <Save_EEPROM+0xbfe>
 80057f4:	2bc8      	cmp	r3, #200	; 0xc8
 80057f6:	f300 8093 	bgt.w	8005920 <Save_EEPROM+0xc34>
 80057fa:	2b32      	cmp	r3, #50	; 0x32
 80057fc:	dc6c      	bgt.n	80058d8 <Save_EEPROM+0xbec>
 80057fe:	2b02      	cmp	r3, #2
 8005800:	f2c0 808e 	blt.w	8005920 <Save_EEPROM+0xc34>
 8005804:	3b02      	subs	r3, #2
 8005806:	2b30      	cmp	r3, #48	; 0x30
 8005808:	f200 808a 	bhi.w	8005920 <Save_EEPROM+0xc34>
 800580c:	a201      	add	r2, pc, #4	; (adr r2, 8005814 <Save_EEPROM+0xb28>)
 800580e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005812:	bf00      	nop
 8005814:	0800591b 	.word	0x0800591b
 8005818:	08005921 	.word	0x08005921
 800581c:	08005915 	.word	0x08005915
 8005820:	0800590f 	.word	0x0800590f
 8005824:	08005921 	.word	0x08005921
 8005828:	08005921 	.word	0x08005921
 800582c:	08005921 	.word	0x08005921
 8005830:	08005921 	.word	0x08005921
 8005834:	08005909 	.word	0x08005909
 8005838:	08005921 	.word	0x08005921
 800583c:	08005921 	.word	0x08005921
 8005840:	08005921 	.word	0x08005921
 8005844:	08005921 	.word	0x08005921
 8005848:	08005921 	.word	0x08005921
 800584c:	08005921 	.word	0x08005921
 8005850:	08005921 	.word	0x08005921
 8005854:	08005921 	.word	0x08005921
 8005858:	08005921 	.word	0x08005921
 800585c:	08005903 	.word	0x08005903
 8005860:	08005921 	.word	0x08005921
 8005864:	08005921 	.word	0x08005921
 8005868:	08005921 	.word	0x08005921
 800586c:	08005921 	.word	0x08005921
 8005870:	08005921 	.word	0x08005921
 8005874:	08005921 	.word	0x08005921
 8005878:	08005921 	.word	0x08005921
 800587c:	08005921 	.word	0x08005921
 8005880:	08005921 	.word	0x08005921
 8005884:	08005921 	.word	0x08005921
 8005888:	08005921 	.word	0x08005921
 800588c:	08005921 	.word	0x08005921
 8005890:	08005921 	.word	0x08005921
 8005894:	08005921 	.word	0x08005921
 8005898:	08005921 	.word	0x08005921
 800589c:	08005921 	.word	0x08005921
 80058a0:	08005921 	.word	0x08005921
 80058a4:	08005921 	.word	0x08005921
 80058a8:	08005921 	.word	0x08005921
 80058ac:	080058fd 	.word	0x080058fd
 80058b0:	08005921 	.word	0x08005921
 80058b4:	08005921 	.word	0x08005921
 80058b8:	08005921 	.word	0x08005921
 80058bc:	08005921 	.word	0x08005921
 80058c0:	08005921 	.word	0x08005921
 80058c4:	08005921 	.word	0x08005921
 80058c8:	08005921 	.word	0x08005921
 80058cc:	08005921 	.word	0x08005921
 80058d0:	08005921 	.word	0x08005921
 80058d4:	080058f7 	.word	0x080058f7
 80058d8:	2b64      	cmp	r3, #100	; 0x64
 80058da:	d009      	beq.n	80058f0 <Save_EEPROM+0xc04>
 80058dc:	e020      	b.n	8005920 <Save_EEPROM+0xc34>
 80058de:	2301      	movs	r3, #1
 80058e0:	753b      	strb	r3, [r7, #20]
 80058e2:	e01f      	b.n	8005924 <Save_EEPROM+0xc38>
 80058e4:	2302      	movs	r3, #2
 80058e6:	753b      	strb	r3, [r7, #20]
 80058e8:	e01c      	b.n	8005924 <Save_EEPROM+0xc38>
 80058ea:	2303      	movs	r3, #3
 80058ec:	753b      	strb	r3, [r7, #20]
 80058ee:	e019      	b.n	8005924 <Save_EEPROM+0xc38>
 80058f0:	2304      	movs	r3, #4
 80058f2:	753b      	strb	r3, [r7, #20]
 80058f4:	e016      	b.n	8005924 <Save_EEPROM+0xc38>
 80058f6:	2305      	movs	r3, #5
 80058f8:	753b      	strb	r3, [r7, #20]
 80058fa:	e013      	b.n	8005924 <Save_EEPROM+0xc38>
 80058fc:	2306      	movs	r3, #6
 80058fe:	753b      	strb	r3, [r7, #20]
 8005900:	e010      	b.n	8005924 <Save_EEPROM+0xc38>
 8005902:	2307      	movs	r3, #7
 8005904:	753b      	strb	r3, [r7, #20]
 8005906:	e00d      	b.n	8005924 <Save_EEPROM+0xc38>
 8005908:	2308      	movs	r3, #8
 800590a:	753b      	strb	r3, [r7, #20]
 800590c:	e00a      	b.n	8005924 <Save_EEPROM+0xc38>
 800590e:	2309      	movs	r3, #9
 8005910:	753b      	strb	r3, [r7, #20]
 8005912:	e007      	b.n	8005924 <Save_EEPROM+0xc38>
 8005914:	230a      	movs	r3, #10
 8005916:	753b      	strb	r3, [r7, #20]
 8005918:	e004      	b.n	8005924 <Save_EEPROM+0xc38>
 800591a:	230b      	movs	r3, #11
 800591c:	753b      	strb	r3, [r7, #20]
 800591e:	e001      	b.n	8005924 <Save_EEPROM+0xc38>
 8005920:	2300      	movs	r3, #0
 8005922:	753b      	strb	r3, [r7, #20]
 8005924:	bf00      	nop

	__FREQ_TO_BUFFER(buffer[9], perCAN[ANALOG_9_12]);
 8005926:	4b54      	ldr	r3, [pc, #336]	; (8005a78 <Save_EEPROM+0xd8c>)
 8005928:	889b      	ldrh	r3, [r3, #4]
 800592a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800592e:	f000 8082 	beq.w	8005a36 <Save_EEPROM+0xd4a>
 8005932:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005936:	f300 80a1 	bgt.w	8005a7c <Save_EEPROM+0xd90>
 800593a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800593e:	d07d      	beq.n	8005a3c <Save_EEPROM+0xd50>
 8005940:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005944:	f300 809a 	bgt.w	8005a7c <Save_EEPROM+0xd90>
 8005948:	2bc8      	cmp	r3, #200	; 0xc8
 800594a:	d07a      	beq.n	8005a42 <Save_EEPROM+0xd56>
 800594c:	2bc8      	cmp	r3, #200	; 0xc8
 800594e:	f300 8095 	bgt.w	8005a7c <Save_EEPROM+0xd90>
 8005952:	2b32      	cmp	r3, #50	; 0x32
 8005954:	dc6c      	bgt.n	8005a30 <Save_EEPROM+0xd44>
 8005956:	2b02      	cmp	r3, #2
 8005958:	f2c0 8090 	blt.w	8005a7c <Save_EEPROM+0xd90>
 800595c:	3b02      	subs	r3, #2
 800595e:	2b30      	cmp	r3, #48	; 0x30
 8005960:	f200 808c 	bhi.w	8005a7c <Save_EEPROM+0xd90>
 8005964:	a201      	add	r2, pc, #4	; (adr r2, 800596c <Save_EEPROM+0xc80>)
 8005966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800596a:	bf00      	nop
 800596c:	08005a73 	.word	0x08005a73
 8005970:	08005a7d 	.word	0x08005a7d
 8005974:	08005a6d 	.word	0x08005a6d
 8005978:	08005a67 	.word	0x08005a67
 800597c:	08005a7d 	.word	0x08005a7d
 8005980:	08005a7d 	.word	0x08005a7d
 8005984:	08005a7d 	.word	0x08005a7d
 8005988:	08005a7d 	.word	0x08005a7d
 800598c:	08005a61 	.word	0x08005a61
 8005990:	08005a7d 	.word	0x08005a7d
 8005994:	08005a7d 	.word	0x08005a7d
 8005998:	08005a7d 	.word	0x08005a7d
 800599c:	08005a7d 	.word	0x08005a7d
 80059a0:	08005a7d 	.word	0x08005a7d
 80059a4:	08005a7d 	.word	0x08005a7d
 80059a8:	08005a7d 	.word	0x08005a7d
 80059ac:	08005a7d 	.word	0x08005a7d
 80059b0:	08005a7d 	.word	0x08005a7d
 80059b4:	08005a5b 	.word	0x08005a5b
 80059b8:	08005a7d 	.word	0x08005a7d
 80059bc:	08005a7d 	.word	0x08005a7d
 80059c0:	08005a7d 	.word	0x08005a7d
 80059c4:	08005a7d 	.word	0x08005a7d
 80059c8:	08005a7d 	.word	0x08005a7d
 80059cc:	08005a7d 	.word	0x08005a7d
 80059d0:	08005a7d 	.word	0x08005a7d
 80059d4:	08005a7d 	.word	0x08005a7d
 80059d8:	08005a7d 	.word	0x08005a7d
 80059dc:	08005a7d 	.word	0x08005a7d
 80059e0:	08005a7d 	.word	0x08005a7d
 80059e4:	08005a7d 	.word	0x08005a7d
 80059e8:	08005a7d 	.word	0x08005a7d
 80059ec:	08005a7d 	.word	0x08005a7d
 80059f0:	08005a7d 	.word	0x08005a7d
 80059f4:	08005a7d 	.word	0x08005a7d
 80059f8:	08005a7d 	.word	0x08005a7d
 80059fc:	08005a7d 	.word	0x08005a7d
 8005a00:	08005a7d 	.word	0x08005a7d
 8005a04:	08005a55 	.word	0x08005a55
 8005a08:	08005a7d 	.word	0x08005a7d
 8005a0c:	08005a7d 	.word	0x08005a7d
 8005a10:	08005a7d 	.word	0x08005a7d
 8005a14:	08005a7d 	.word	0x08005a7d
 8005a18:	08005a7d 	.word	0x08005a7d
 8005a1c:	08005a7d 	.word	0x08005a7d
 8005a20:	08005a7d 	.word	0x08005a7d
 8005a24:	08005a7d 	.word	0x08005a7d
 8005a28:	08005a7d 	.word	0x08005a7d
 8005a2c:	08005a4f 	.word	0x08005a4f
 8005a30:	2b64      	cmp	r3, #100	; 0x64
 8005a32:	d009      	beq.n	8005a48 <Save_EEPROM+0xd5c>
 8005a34:	e022      	b.n	8005a7c <Save_EEPROM+0xd90>
 8005a36:	2301      	movs	r3, #1
 8005a38:	757b      	strb	r3, [r7, #21]
 8005a3a:	e021      	b.n	8005a80 <Save_EEPROM+0xd94>
 8005a3c:	2302      	movs	r3, #2
 8005a3e:	757b      	strb	r3, [r7, #21]
 8005a40:	e01e      	b.n	8005a80 <Save_EEPROM+0xd94>
 8005a42:	2303      	movs	r3, #3
 8005a44:	757b      	strb	r3, [r7, #21]
 8005a46:	e01b      	b.n	8005a80 <Save_EEPROM+0xd94>
 8005a48:	2304      	movs	r3, #4
 8005a4a:	757b      	strb	r3, [r7, #21]
 8005a4c:	e018      	b.n	8005a80 <Save_EEPROM+0xd94>
 8005a4e:	2305      	movs	r3, #5
 8005a50:	757b      	strb	r3, [r7, #21]
 8005a52:	e015      	b.n	8005a80 <Save_EEPROM+0xd94>
 8005a54:	2306      	movs	r3, #6
 8005a56:	757b      	strb	r3, [r7, #21]
 8005a58:	e012      	b.n	8005a80 <Save_EEPROM+0xd94>
 8005a5a:	2307      	movs	r3, #7
 8005a5c:	757b      	strb	r3, [r7, #21]
 8005a5e:	e00f      	b.n	8005a80 <Save_EEPROM+0xd94>
 8005a60:	2308      	movs	r3, #8
 8005a62:	757b      	strb	r3, [r7, #21]
 8005a64:	e00c      	b.n	8005a80 <Save_EEPROM+0xd94>
 8005a66:	2309      	movs	r3, #9
 8005a68:	757b      	strb	r3, [r7, #21]
 8005a6a:	e009      	b.n	8005a80 <Save_EEPROM+0xd94>
 8005a6c:	230a      	movs	r3, #10
 8005a6e:	757b      	strb	r3, [r7, #21]
 8005a70:	e006      	b.n	8005a80 <Save_EEPROM+0xd94>
 8005a72:	230b      	movs	r3, #11
 8005a74:	757b      	strb	r3, [r7, #21]
 8005a76:	e003      	b.n	8005a80 <Save_EEPROM+0xd94>
 8005a78:	2000671c 	.word	0x2000671c
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	757b      	strb	r3, [r7, #21]
 8005a80:	bf00      	nop

	__FREQ_TO_BUFFER(buffer[10], perCAN[RTC_MSG]);
 8005a82:	4baa      	ldr	r3, [pc, #680]	; (8005d2c <Save_EEPROM+0x1040>)
 8005a84:	88db      	ldrh	r3, [r3, #6]
 8005a86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a8a:	f000 8082 	beq.w	8005b92 <Save_EEPROM+0xea6>
 8005a8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a92:	f300 809f 	bgt.w	8005bd4 <Save_EEPROM+0xee8>
 8005a96:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005a9a:	d07d      	beq.n	8005b98 <Save_EEPROM+0xeac>
 8005a9c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005aa0:	f300 8098 	bgt.w	8005bd4 <Save_EEPROM+0xee8>
 8005aa4:	2bc8      	cmp	r3, #200	; 0xc8
 8005aa6:	d07a      	beq.n	8005b9e <Save_EEPROM+0xeb2>
 8005aa8:	2bc8      	cmp	r3, #200	; 0xc8
 8005aaa:	f300 8093 	bgt.w	8005bd4 <Save_EEPROM+0xee8>
 8005aae:	2b32      	cmp	r3, #50	; 0x32
 8005ab0:	dc6c      	bgt.n	8005b8c <Save_EEPROM+0xea0>
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	f2c0 808e 	blt.w	8005bd4 <Save_EEPROM+0xee8>
 8005ab8:	3b02      	subs	r3, #2
 8005aba:	2b30      	cmp	r3, #48	; 0x30
 8005abc:	f200 808a 	bhi.w	8005bd4 <Save_EEPROM+0xee8>
 8005ac0:	a201      	add	r2, pc, #4	; (adr r2, 8005ac8 <Save_EEPROM+0xddc>)
 8005ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac6:	bf00      	nop
 8005ac8:	08005bcf 	.word	0x08005bcf
 8005acc:	08005bd5 	.word	0x08005bd5
 8005ad0:	08005bc9 	.word	0x08005bc9
 8005ad4:	08005bc3 	.word	0x08005bc3
 8005ad8:	08005bd5 	.word	0x08005bd5
 8005adc:	08005bd5 	.word	0x08005bd5
 8005ae0:	08005bd5 	.word	0x08005bd5
 8005ae4:	08005bd5 	.word	0x08005bd5
 8005ae8:	08005bbd 	.word	0x08005bbd
 8005aec:	08005bd5 	.word	0x08005bd5
 8005af0:	08005bd5 	.word	0x08005bd5
 8005af4:	08005bd5 	.word	0x08005bd5
 8005af8:	08005bd5 	.word	0x08005bd5
 8005afc:	08005bd5 	.word	0x08005bd5
 8005b00:	08005bd5 	.word	0x08005bd5
 8005b04:	08005bd5 	.word	0x08005bd5
 8005b08:	08005bd5 	.word	0x08005bd5
 8005b0c:	08005bd5 	.word	0x08005bd5
 8005b10:	08005bb7 	.word	0x08005bb7
 8005b14:	08005bd5 	.word	0x08005bd5
 8005b18:	08005bd5 	.word	0x08005bd5
 8005b1c:	08005bd5 	.word	0x08005bd5
 8005b20:	08005bd5 	.word	0x08005bd5
 8005b24:	08005bd5 	.word	0x08005bd5
 8005b28:	08005bd5 	.word	0x08005bd5
 8005b2c:	08005bd5 	.word	0x08005bd5
 8005b30:	08005bd5 	.word	0x08005bd5
 8005b34:	08005bd5 	.word	0x08005bd5
 8005b38:	08005bd5 	.word	0x08005bd5
 8005b3c:	08005bd5 	.word	0x08005bd5
 8005b40:	08005bd5 	.word	0x08005bd5
 8005b44:	08005bd5 	.word	0x08005bd5
 8005b48:	08005bd5 	.word	0x08005bd5
 8005b4c:	08005bd5 	.word	0x08005bd5
 8005b50:	08005bd5 	.word	0x08005bd5
 8005b54:	08005bd5 	.word	0x08005bd5
 8005b58:	08005bd5 	.word	0x08005bd5
 8005b5c:	08005bd5 	.word	0x08005bd5
 8005b60:	08005bb1 	.word	0x08005bb1
 8005b64:	08005bd5 	.word	0x08005bd5
 8005b68:	08005bd5 	.word	0x08005bd5
 8005b6c:	08005bd5 	.word	0x08005bd5
 8005b70:	08005bd5 	.word	0x08005bd5
 8005b74:	08005bd5 	.word	0x08005bd5
 8005b78:	08005bd5 	.word	0x08005bd5
 8005b7c:	08005bd5 	.word	0x08005bd5
 8005b80:	08005bd5 	.word	0x08005bd5
 8005b84:	08005bd5 	.word	0x08005bd5
 8005b88:	08005bab 	.word	0x08005bab
 8005b8c:	2b64      	cmp	r3, #100	; 0x64
 8005b8e:	d009      	beq.n	8005ba4 <Save_EEPROM+0xeb8>
 8005b90:	e020      	b.n	8005bd4 <Save_EEPROM+0xee8>
 8005b92:	2301      	movs	r3, #1
 8005b94:	75bb      	strb	r3, [r7, #22]
 8005b96:	e01f      	b.n	8005bd8 <Save_EEPROM+0xeec>
 8005b98:	2302      	movs	r3, #2
 8005b9a:	75bb      	strb	r3, [r7, #22]
 8005b9c:	e01c      	b.n	8005bd8 <Save_EEPROM+0xeec>
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	75bb      	strb	r3, [r7, #22]
 8005ba2:	e019      	b.n	8005bd8 <Save_EEPROM+0xeec>
 8005ba4:	2304      	movs	r3, #4
 8005ba6:	75bb      	strb	r3, [r7, #22]
 8005ba8:	e016      	b.n	8005bd8 <Save_EEPROM+0xeec>
 8005baa:	2305      	movs	r3, #5
 8005bac:	75bb      	strb	r3, [r7, #22]
 8005bae:	e013      	b.n	8005bd8 <Save_EEPROM+0xeec>
 8005bb0:	2306      	movs	r3, #6
 8005bb2:	75bb      	strb	r3, [r7, #22]
 8005bb4:	e010      	b.n	8005bd8 <Save_EEPROM+0xeec>
 8005bb6:	2307      	movs	r3, #7
 8005bb8:	75bb      	strb	r3, [r7, #22]
 8005bba:	e00d      	b.n	8005bd8 <Save_EEPROM+0xeec>
 8005bbc:	2308      	movs	r3, #8
 8005bbe:	75bb      	strb	r3, [r7, #22]
 8005bc0:	e00a      	b.n	8005bd8 <Save_EEPROM+0xeec>
 8005bc2:	2309      	movs	r3, #9
 8005bc4:	75bb      	strb	r3, [r7, #22]
 8005bc6:	e007      	b.n	8005bd8 <Save_EEPROM+0xeec>
 8005bc8:	230a      	movs	r3, #10
 8005bca:	75bb      	strb	r3, [r7, #22]
 8005bcc:	e004      	b.n	8005bd8 <Save_EEPROM+0xeec>
 8005bce:	230b      	movs	r3, #11
 8005bd0:	75bb      	strb	r3, [r7, #22]
 8005bd2:	e001      	b.n	8005bd8 <Save_EEPROM+0xeec>
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	75bb      	strb	r3, [r7, #22]
 8005bd8:	bf00      	nop

	__FREQ_TO_BUFFER(buffer[11], perCAN[VERIFY_MSG]);
 8005bda:	4b54      	ldr	r3, [pc, #336]	; (8005d2c <Save_EEPROM+0x1040>)
 8005bdc:	891b      	ldrh	r3, [r3, #8]
 8005bde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005be2:	f000 8082 	beq.w	8005cea <Save_EEPROM+0xffe>
 8005be6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bea:	f300 80a1 	bgt.w	8005d30 <Save_EEPROM+0x1044>
 8005bee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005bf2:	d07d      	beq.n	8005cf0 <Save_EEPROM+0x1004>
 8005bf4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005bf8:	f300 809a 	bgt.w	8005d30 <Save_EEPROM+0x1044>
 8005bfc:	2bc8      	cmp	r3, #200	; 0xc8
 8005bfe:	d07a      	beq.n	8005cf6 <Save_EEPROM+0x100a>
 8005c00:	2bc8      	cmp	r3, #200	; 0xc8
 8005c02:	f300 8095 	bgt.w	8005d30 <Save_EEPROM+0x1044>
 8005c06:	2b32      	cmp	r3, #50	; 0x32
 8005c08:	dc6c      	bgt.n	8005ce4 <Save_EEPROM+0xff8>
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	f2c0 8090 	blt.w	8005d30 <Save_EEPROM+0x1044>
 8005c10:	3b02      	subs	r3, #2
 8005c12:	2b30      	cmp	r3, #48	; 0x30
 8005c14:	f200 808c 	bhi.w	8005d30 <Save_EEPROM+0x1044>
 8005c18:	a201      	add	r2, pc, #4	; (adr r2, 8005c20 <Save_EEPROM+0xf34>)
 8005c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1e:	bf00      	nop
 8005c20:	08005d27 	.word	0x08005d27
 8005c24:	08005d31 	.word	0x08005d31
 8005c28:	08005d21 	.word	0x08005d21
 8005c2c:	08005d1b 	.word	0x08005d1b
 8005c30:	08005d31 	.word	0x08005d31
 8005c34:	08005d31 	.word	0x08005d31
 8005c38:	08005d31 	.word	0x08005d31
 8005c3c:	08005d31 	.word	0x08005d31
 8005c40:	08005d15 	.word	0x08005d15
 8005c44:	08005d31 	.word	0x08005d31
 8005c48:	08005d31 	.word	0x08005d31
 8005c4c:	08005d31 	.word	0x08005d31
 8005c50:	08005d31 	.word	0x08005d31
 8005c54:	08005d31 	.word	0x08005d31
 8005c58:	08005d31 	.word	0x08005d31
 8005c5c:	08005d31 	.word	0x08005d31
 8005c60:	08005d31 	.word	0x08005d31
 8005c64:	08005d31 	.word	0x08005d31
 8005c68:	08005d0f 	.word	0x08005d0f
 8005c6c:	08005d31 	.word	0x08005d31
 8005c70:	08005d31 	.word	0x08005d31
 8005c74:	08005d31 	.word	0x08005d31
 8005c78:	08005d31 	.word	0x08005d31
 8005c7c:	08005d31 	.word	0x08005d31
 8005c80:	08005d31 	.word	0x08005d31
 8005c84:	08005d31 	.word	0x08005d31
 8005c88:	08005d31 	.word	0x08005d31
 8005c8c:	08005d31 	.word	0x08005d31
 8005c90:	08005d31 	.word	0x08005d31
 8005c94:	08005d31 	.word	0x08005d31
 8005c98:	08005d31 	.word	0x08005d31
 8005c9c:	08005d31 	.word	0x08005d31
 8005ca0:	08005d31 	.word	0x08005d31
 8005ca4:	08005d31 	.word	0x08005d31
 8005ca8:	08005d31 	.word	0x08005d31
 8005cac:	08005d31 	.word	0x08005d31
 8005cb0:	08005d31 	.word	0x08005d31
 8005cb4:	08005d31 	.word	0x08005d31
 8005cb8:	08005d09 	.word	0x08005d09
 8005cbc:	08005d31 	.word	0x08005d31
 8005cc0:	08005d31 	.word	0x08005d31
 8005cc4:	08005d31 	.word	0x08005d31
 8005cc8:	08005d31 	.word	0x08005d31
 8005ccc:	08005d31 	.word	0x08005d31
 8005cd0:	08005d31 	.word	0x08005d31
 8005cd4:	08005d31 	.word	0x08005d31
 8005cd8:	08005d31 	.word	0x08005d31
 8005cdc:	08005d31 	.word	0x08005d31
 8005ce0:	08005d03 	.word	0x08005d03
 8005ce4:	2b64      	cmp	r3, #100	; 0x64
 8005ce6:	d009      	beq.n	8005cfc <Save_EEPROM+0x1010>
 8005ce8:	e022      	b.n	8005d30 <Save_EEPROM+0x1044>
 8005cea:	2301      	movs	r3, #1
 8005cec:	75fb      	strb	r3, [r7, #23]
 8005cee:	e021      	b.n	8005d34 <Save_EEPROM+0x1048>
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	75fb      	strb	r3, [r7, #23]
 8005cf4:	e01e      	b.n	8005d34 <Save_EEPROM+0x1048>
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	75fb      	strb	r3, [r7, #23]
 8005cfa:	e01b      	b.n	8005d34 <Save_EEPROM+0x1048>
 8005cfc:	2304      	movs	r3, #4
 8005cfe:	75fb      	strb	r3, [r7, #23]
 8005d00:	e018      	b.n	8005d34 <Save_EEPROM+0x1048>
 8005d02:	2305      	movs	r3, #5
 8005d04:	75fb      	strb	r3, [r7, #23]
 8005d06:	e015      	b.n	8005d34 <Save_EEPROM+0x1048>
 8005d08:	2306      	movs	r3, #6
 8005d0a:	75fb      	strb	r3, [r7, #23]
 8005d0c:	e012      	b.n	8005d34 <Save_EEPROM+0x1048>
 8005d0e:	2307      	movs	r3, #7
 8005d10:	75fb      	strb	r3, [r7, #23]
 8005d12:	e00f      	b.n	8005d34 <Save_EEPROM+0x1048>
 8005d14:	2308      	movs	r3, #8
 8005d16:	75fb      	strb	r3, [r7, #23]
 8005d18:	e00c      	b.n	8005d34 <Save_EEPROM+0x1048>
 8005d1a:	2309      	movs	r3, #9
 8005d1c:	75fb      	strb	r3, [r7, #23]
 8005d1e:	e009      	b.n	8005d34 <Save_EEPROM+0x1048>
 8005d20:	230a      	movs	r3, #10
 8005d22:	75fb      	strb	r3, [r7, #23]
 8005d24:	e006      	b.n	8005d34 <Save_EEPROM+0x1048>
 8005d26:	230b      	movs	r3, #11
 8005d28:	75fb      	strb	r3, [r7, #23]
 8005d2a:	e003      	b.n	8005d34 <Save_EEPROM+0x1048>
 8005d2c:	2000671c 	.word	0x2000671c
 8005d30:	2300      	movs	r3, #0
 8005d32:	75fb      	strb	r3, [r7, #23]
 8005d34:	bf00      	nop

	buffer[12] = inputConfig;
 8005d36:	4b2b      	ldr	r3, [pc, #172]	; (8005de4 <Save_EEPROM+0x10f8>)
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	763b      	strb	r3, [r7, #24]
	buffer[13] = thresholdBeacon >> 8;
 8005d3c:	4b2a      	ldr	r3, [pc, #168]	; (8005de8 <Save_EEPROM+0x10fc>)
 8005d3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d42:	121b      	asrs	r3, r3, #8
 8005d44:	b21b      	sxth	r3, r3
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	767b      	strb	r3, [r7, #25]
	buffer[14] = thresholdBeacon & 0xff;
 8005d4a:	4b27      	ldr	r3, [pc, #156]	; (8005de8 <Save_EEPROM+0x10fc>)
 8005d4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	76bb      	strb	r3, [r7, #26]
	buffer[15] = thresholdRPM >> 8;
 8005d54:	4b25      	ldr	r3, [pc, #148]	; (8005dec <Save_EEPROM+0x1100>)
 8005d56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d5a:	121b      	asrs	r3, r3, #8
 8005d5c:	b21b      	sxth	r3, r3
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	76fb      	strb	r3, [r7, #27]
	buffer[16] = thresholdRPM & 0xff;
 8005d62:	4b22      	ldr	r3, [pc, #136]	; (8005dec <Save_EEPROM+0x1100>)
 8005d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	773b      	strb	r3, [r7, #28]
	buffer[17] = thresholdSpeed >> 8;
 8005d6c:	4b20      	ldr	r3, [pc, #128]	; (8005df0 <Save_EEPROM+0x1104>)
 8005d6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d72:	121b      	asrs	r3, r3, #8
 8005d74:	b21b      	sxth	r3, r3
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	777b      	strb	r3, [r7, #29]
	buffer[18] = thresholdSpeed & 0xff;
 8005d7a:	4b1d      	ldr	r3, [pc, #116]	; (8005df0 <Save_EEPROM+0x1104>)
 8005d7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	77bb      	strb	r3, [r7, #30]


	HAL_I2C_Master_Transmit(hi2c, EEPROM_ADDRESS_WRITE, 0x00, 1, EEPROM_WRITE_TIMEOUT);
 8005d84:	230a      	movs	r3, #10
 8005d86:	9300      	str	r3, [sp, #0]
 8005d88:	2301      	movs	r3, #1
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	21a0      	movs	r1, #160	; 0xa0
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f003 fbd0 	bl	8009534 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(hi2c, EEPROM_ADDRESS_WRITE, &buffer[0], 8, EEPROM_WRITE_TIMEOUT);
 8005d94:	f107 020c 	add.w	r2, r7, #12
 8005d98:	230a      	movs	r3, #10
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	2308      	movs	r3, #8
 8005d9e:	21a0      	movs	r1, #160	; 0xa0
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f003 fbc7 	bl	8009534 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Transmit(hi2c, EEPROM_ADDRESS_WRITE, &buffer[8], 8, EEPROM_WRITE_TIMEOUT);
 8005da6:	f107 030c 	add.w	r3, r7, #12
 8005daa:	f103 0208 	add.w	r2, r3, #8
 8005dae:	230a      	movs	r3, #10
 8005db0:	9300      	str	r3, [sp, #0]
 8005db2:	2308      	movs	r3, #8
 8005db4:	21a0      	movs	r1, #160	; 0xa0
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f003 fbbc 	bl	8009534 <HAL_I2C_Master_Transmit>
	retVal = HAL_I2C_Master_Transmit(hi2c, EEPROM_ADDRESS_WRITE, &buffer[16], 3, EEPROM_WRITE_TIMEOUT);
 8005dbc:	f107 030c 	add.w	r3, r7, #12
 8005dc0:	f103 0210 	add.w	r2, r3, #16
 8005dc4:	230a      	movs	r3, #10
 8005dc6:	9300      	str	r3, [sp, #0]
 8005dc8:	2303      	movs	r3, #3
 8005dca:	21a0      	movs	r1, #160	; 0xa0
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f003 fbb1 	bl	8009534 <HAL_I2C_Master_Transmit>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return retVal;
 8005dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3728      	adds	r7, #40	; 0x28
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	20006700 	.word	0x20006700
 8005de8:	2000463a 	.word	0x2000463a
 8005dec:	2000463c 	.word	0x2000463c
 8005df0:	2000463e 	.word	0x2000463e

08005df4 <Principal_Datalogger_Init>:
#include "principal.h"
#include "stdio.h"
#include "string.h"

FRESULT Principal_Datalogger_Init(FATFS* fatfs_struct)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
	FRESULT retVal = FR_OK;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	73fb      	strb	r3, [r7, #15]

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 8005e00:	2180      	movs	r1, #128	; 0x80
 8005e02:	481b      	ldr	r0, [pc, #108]	; (8005e70 <Principal_Datalogger_Init+0x7c>)
 8005e04:	f003 f9ee 	bl	80091e4 <HAL_GPIO_ReadPin>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d10a      	bne.n	8005e24 <Principal_Datalogger_Init+0x30>
	{
		flagDatalogger = DL_NO_CARD;
 8005e0e:	4b19      	ldr	r3, [pc, #100]	; (8005e74 <Principal_Datalogger_Init+0x80>)
 8005e10:	2202      	movs	r2, #2
 8005e12:	701a      	strb	r2, [r3, #0]
		memset(fatfs_struct, '\0', sizeof(FATFS));
 8005e14:	f241 0238 	movw	r2, #4152	; 0x1038
 8005e18:	2100      	movs	r1, #0
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f012 fecc 	bl	8018bb8 <memset>
		return FR_DISK_ERR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e020      	b.n	8005e66 <Principal_Datalogger_Init+0x72>
	}

	BSP_SD_Init();
 8005e24:	f00b fcc2 	bl	80117ac <BSP_SD_Init>

	retVal = f_mount(fatfs_struct, SDPath, 1);
 8005e28:	2201      	movs	r2, #1
 8005e2a:	4913      	ldr	r1, [pc, #76]	; (8005e78 <Principal_Datalogger_Init+0x84>)
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f011 fa21 	bl	8017274 <f_mount>
 8005e32:	4603      	mov	r3, r0
 8005e34:	73fb      	strb	r3, [r7, #15]

	flagDatalogger = DL_NO_SAVE;
 8005e36:	4b0f      	ldr	r3, [pc, #60]	; (8005e74 <Principal_Datalogger_Init+0x80>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	701a      	strb	r2, [r3, #0]

	if(retVal != FR_OK)
 8005e3c:	7bfb      	ldrb	r3, [r7, #15]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00d      	beq.n	8005e5e <Principal_Datalogger_Init+0x6a>
	{
		flagDatalogger = DL_ERROR;
 8005e42:	4b0c      	ldr	r3, [pc, #48]	; (8005e74 <Principal_Datalogger_Init+0x80>)
 8005e44:	2204      	movs	r2, #4
 8005e46:	701a      	strb	r2, [r3, #0]
		f_mount(0, SDPath, 0);
 8005e48:	2200      	movs	r2, #0
 8005e4a:	490b      	ldr	r1, [pc, #44]	; (8005e78 <Principal_Datalogger_Init+0x84>)
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	f011 fa11 	bl	8017274 <f_mount>
		memset(fatfs_struct, '\0', sizeof(FATFS));
 8005e52:	f241 0238 	movw	r2, #4152	; 0x1038
 8005e56:	2100      	movs	r1, #0
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f012 fead 	bl	8018bb8 <memset>
	}

	accDatalogger[DL_ACC_COOLDOWN] = DATALOGGER_COOLDOWN;
 8005e5e:	4b07      	ldr	r3, [pc, #28]	; (8005e7c <Principal_Datalogger_Init+0x88>)
 8005e60:	22fa      	movs	r2, #250	; 0xfa
 8005e62:	601a      	str	r2, [r3, #0]

	return retVal;
 8005e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	40020800 	.word	0x40020800
 8005e74:	200066fe 	.word	0x200066fe
 8005e78:	20006798 	.word	0x20006798
 8005e7c:	2000673c 	.word	0x2000673c

08005e80 <Principal_Datalogger_Start>:

FRESULT Principal_Datalogger_Start(char* dir, char* file, DIR* dir_struct, FIL* file_struct)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b090      	sub	sp, #64	; 0x40
 8005e84:	af04      	add	r7, sp, #16
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
 8005e8c:	603b      	str	r3, [r7, #0]
	FRESULT retVal = FR_OK;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 8005e94:	2180      	movs	r1, #128	; 0x80
 8005e96:	485f      	ldr	r0, [pc, #380]	; (8006014 <Principal_Datalogger_Start+0x194>)
 8005e98:	f003 f9a4 	bl	80091e4 <HAL_GPIO_ReadPin>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d105      	bne.n	8005eae <Principal_Datalogger_Start+0x2e>
	{
		Principal_Datalogger_Finish(dir_struct, file_struct);
 8005ea2:	6839      	ldr	r1, [r7, #0]
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 f8cd 	bl	8006044 <Principal_Datalogger_Finish>
		return FR_OK;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	e0ae      	b.n	800600c <Principal_Datalogger_Start+0x18c>
	}

	else if((flagDatalogger == DL_BUT_PRESS) && (accDatalogger[DL_ACC_COOLDOWN] > 0))
 8005eae:	4b5a      	ldr	r3, [pc, #360]	; (8006018 <Principal_Datalogger_Start+0x198>)
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	2b03      	cmp	r3, #3
 8005eb4:	d108      	bne.n	8005ec8 <Principal_Datalogger_Start+0x48>
 8005eb6:	4b59      	ldr	r3, [pc, #356]	; (800601c <Principal_Datalogger_Start+0x19c>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d004      	beq.n	8005ec8 <Principal_Datalogger_Start+0x48>
	{
		flagDatalogger = DL_NO_SAVE;
 8005ebe:	4b56      	ldr	r3, [pc, #344]	; (8006018 <Principal_Datalogger_Start+0x198>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	e0a1      	b.n	800600c <Principal_Datalogger_Start+0x18c>
	}

	else if((HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_SET)
 8005ec8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ecc:	4854      	ldr	r0, [pc, #336]	; (8006020 <Principal_Datalogger_Start+0x1a0>)
 8005ece:	f003 f989 	bl	80091e4 <HAL_GPIO_ReadPin>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d02f      	beq.n	8005f38 <Principal_Datalogger_Start+0xb8>
			|| (flagRTC != RTC_OK)
 8005ed8:	4b52      	ldr	r3, [pc, #328]	; (8006024 <Principal_Datalogger_Start+0x1a4>)
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d12b      	bne.n	8005f38 <Principal_Datalogger_Start+0xb8>
			|| ((flagDatalogger != DL_BUT_PRESS)
 8005ee0:	4b4d      	ldr	r3, [pc, #308]	; (8006018 <Principal_Datalogger_Start+0x198>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	2b03      	cmp	r3, #3
 8005ee6:	d02c      	beq.n	8005f42 <Principal_Datalogger_Start+0xc2>
			&& (ecuData.rpm < thresholdRPM)
 8005ee8:	4b4f      	ldr	r3, [pc, #316]	; (8006028 <Principal_Datalogger_Start+0x1a8>)
 8005eea:	f9b3 204e 	ldrsh.w	r2, [r3, #78]	; 0x4e
 8005eee:	4b4f      	ldr	r3, [pc, #316]	; (800602c <Principal_Datalogger_Start+0x1ac>)
 8005ef0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	da24      	bge.n	8005f42 <Principal_Datalogger_Start+0xc2>
			&& (ecuData.wheel_speed_fl < thresholdSpeed)
 8005ef8:	4b4b      	ldr	r3, [pc, #300]	; (8006028 <Principal_Datalogger_Start+0x1a8>)
 8005efa:	f9b3 2052 	ldrsh.w	r2, [r3, #82]	; 0x52
 8005efe:	4b4c      	ldr	r3, [pc, #304]	; (8006030 <Principal_Datalogger_Start+0x1b0>)
 8005f00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	da1c      	bge.n	8005f42 <Principal_Datalogger_Start+0xc2>
			&& (ecuData.wheel_speed_fr < thresholdSpeed)
 8005f08:	4b47      	ldr	r3, [pc, #284]	; (8006028 <Principal_Datalogger_Start+0x1a8>)
 8005f0a:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 8005f0e:	4b48      	ldr	r3, [pc, #288]	; (8006030 <Principal_Datalogger_Start+0x1b0>)
 8005f10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	da14      	bge.n	8005f42 <Principal_Datalogger_Start+0xc2>
			&& (ecuData.wheel_speed_rl < thresholdSpeed)
 8005f18:	4b43      	ldr	r3, [pc, #268]	; (8006028 <Principal_Datalogger_Start+0x1a8>)
 8005f1a:	f9b3 2056 	ldrsh.w	r2, [r3, #86]	; 0x56
 8005f1e:	4b44      	ldr	r3, [pc, #272]	; (8006030 <Principal_Datalogger_Start+0x1b0>)
 8005f20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	da0c      	bge.n	8005f42 <Principal_Datalogger_Start+0xc2>
			&& (ecuData.wheel_speed_rr < thresholdSpeed)))
 8005f28:	4b3f      	ldr	r3, [pc, #252]	; (8006028 <Principal_Datalogger_Start+0x1a8>)
 8005f2a:	f9b3 2058 	ldrsh.w	r2, [r3, #88]	; 0x58
 8005f2e:	4b40      	ldr	r3, [pc, #256]	; (8006030 <Principal_Datalogger_Start+0x1b0>)
 8005f30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	da04      	bge.n	8005f42 <Principal_Datalogger_Start+0xc2>
	{
		flagDatalogger = DL_NO_SAVE;
 8005f38:	4b37      	ldr	r3, [pc, #220]	; (8006018 <Principal_Datalogger_Start+0x198>)
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	e064      	b.n	800600c <Principal_Datalogger_Start+0x18c>
	}

	RTC_DateTypeDef sDate;
	RTC_TimeTypeDef sTime;

	accDatalogger[DL_ACC_COOLDOWN] = DATALOGGER_COOLDOWN;
 8005f42:	4b36      	ldr	r3, [pc, #216]	; (800601c <Principal_Datalogger_Start+0x19c>)
 8005f44:	22fa      	movs	r2, #250	; 0xfa
 8005f46:	601a      	str	r2, [r3, #0]

	dataloggerBufferPosition = 0;
 8005f48:	4b3a      	ldr	r3, [pc, #232]	; (8006034 <Principal_Datalogger_Start+0x1b4>)
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	801a      	strh	r2, [r3, #0]

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8005f4e:	f107 0314 	add.w	r3, r7, #20
 8005f52:	2200      	movs	r2, #0
 8005f54:	4619      	mov	r1, r3
 8005f56:	4838      	ldr	r0, [pc, #224]	; (8006038 <Principal_Datalogger_Start+0x1b8>)
 8005f58:	f006 fe92 	bl	800cc80 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8005f5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f60:	2200      	movs	r2, #0
 8005f62:	4619      	mov	r1, r3
 8005f64:	4834      	ldr	r0, [pc, #208]	; (8006038 <Principal_Datalogger_Start+0x1b8>)
 8005f66:	f006 ff6d 	bl	800ce44 <HAL_RTC_GetDate>

#if _USE_LFN == 0
	sprintf(file, "%02d%02d%02d.sd", sTime.Hours, sTime.Minutes, sTime.Seconds);
#else
	sprintf(dir, "%02d-%02d-%02d", sDate.Year, sDate.Month, sDate.Date);
 8005f6a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f6e:	461a      	mov	r2, r3
 8005f70:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005f74:	4619      	mov	r1, r3
 8005f76:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005f7a:	9300      	str	r3, [sp, #0]
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	492f      	ldr	r1, [pc, #188]	; (800603c <Principal_Datalogger_Start+0x1bc>)
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f012 ff11 	bl	8018da8 <siprintf>

	sprintf(file, "%s/%s_%02d-%02d-%02d.sd", dir, dir, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8005f86:	7d3b      	ldrb	r3, [r7, #20]
 8005f88:	7d7a      	ldrb	r2, [r7, #21]
 8005f8a:	7db9      	ldrb	r1, [r7, #22]
 8005f8c:	9102      	str	r1, [sp, #8]
 8005f8e:	9201      	str	r2, [sp, #4]
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	492a      	ldr	r1, [pc, #168]	; (8006040 <Principal_Datalogger_Start+0x1c0>)
 8005f98:	68b8      	ldr	r0, [r7, #8]
 8005f9a:	f012 ff05 	bl	8018da8 <siprintf>
//	sprintf(file, "%s/%02d-%02d-%02d.sd", dir, sTime.Hours, sTime.Minutes, sTime.Seconds);

	retVal = f_mkdir(dir);
 8005f9e:	68f8      	ldr	r0, [r7, #12]
 8005fa0:	f011 fe0a 	bl	8017bb8 <f_mkdir>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if((retVal == FR_OK) || (retVal == FR_EXIST))
 8005faa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <Principal_Datalogger_Start+0x13a>
 8005fb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005fb6:	2b08      	cmp	r3, #8
 8005fb8:	d11f      	bne.n	8005ffa <Principal_Datalogger_Start+0x17a>
	{
		retVal = f_opendir(dir_struct, dir);
 8005fba:	68f9      	ldr	r1, [r7, #12]
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f011 fd78 	bl	8017ab2 <f_opendir>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		if(retVal == FR_OK)
 8005fc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d114      	bne.n	8005ffa <Principal_Datalogger_Start+0x17a>
		{
#endif
			retVal = f_open(file_struct, file, FA_WRITE | FA_CREATE_ALWAYS);
 8005fd0:	220a      	movs	r2, #10
 8005fd2:	68b9      	ldr	r1, [r7, #8]
 8005fd4:	6838      	ldr	r0, [r7, #0]
 8005fd6:	f011 f991 	bl	80172fc <f_open>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

			if(retVal == FR_OK)
 8005fe0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d108      	bne.n	8005ffa <Principal_Datalogger_Start+0x17a>
			{
				flagDatalogger = DL_SAVE;
 8005fe8:	4b0b      	ldr	r3, [pc, #44]	; (8006018 <Principal_Datalogger_Start+0x198>)
 8005fea:	2201      	movs	r2, #1
 8005fec:	701a      	strb	r2, [r3, #0]
				accDatalogger[DL_ACC_TIMING] = 0;
 8005fee:	4b0b      	ldr	r3, [pc, #44]	; (800601c <Principal_Datalogger_Start+0x19c>)
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	609a      	str	r2, [r3, #8]
				accDatalogger[DL_ACC_TIMEOUT] = 0;
 8005ff4:	4b09      	ldr	r3, [pc, #36]	; (800601c <Principal_Datalogger_Start+0x19c>)
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	605a      	str	r2, [r3, #4]
#if _USE_LFN != 0
		}
	}
#endif

	if(retVal != FR_OK)
 8005ffa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d002      	beq.n	8006008 <Principal_Datalogger_Start+0x188>
		flagDatalogger = DL_ERROR;
 8006002:	4b05      	ldr	r3, [pc, #20]	; (8006018 <Principal_Datalogger_Start+0x198>)
 8006004:	2204      	movs	r2, #4
 8006006:	701a      	strb	r2, [r3, #0]

	return retVal;
 8006008:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800600c:	4618      	mov	r0, r3
 800600e:	3730      	adds	r7, #48	; 0x30
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	40020800 	.word	0x40020800
 8006018:	200066fe 	.word	0x200066fe
 800601c:	2000673c 	.word	0x2000673c
 8006020:	40020000 	.word	0x40020000
 8006024:	200066ff 	.word	0x200066ff
 8006028:	20000590 	.word	0x20000590
 800602c:	2000463c 	.word	0x2000463c
 8006030:	2000463e 	.word	0x2000463e
 8006034:	20004638 	.word	0x20004638
 8006038:	20000380 	.word	0x20000380
 800603c:	080194bc 	.word	0x080194bc
 8006040:	080194cc 	.word	0x080194cc

08006044 <Principal_Datalogger_Finish>:

FRESULT Principal_Datalogger_Finish(DIR* dir_struct, FIL* file_struct)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
	FRESULT retVal = FR_OK;
 800604e:	2300      	movs	r3, #0
 8006050:	73fb      	strb	r3, [r7, #15]

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 8006052:	2180      	movs	r1, #128	; 0x80
 8006054:	481b      	ldr	r0, [pc, #108]	; (80060c4 <Principal_Datalogger_Finish+0x80>)
 8006056:	f003 f8c5 	bl	80091e4 <HAL_GPIO_ReadPin>
 800605a:	4603      	mov	r3, r0
 800605c:	2b01      	cmp	r3, #1
 800605e:	d116      	bne.n	800608e <Principal_Datalogger_Finish+0x4a>
	{
		retVal = FR_OK;
 8006060:	2300      	movs	r3, #0
 8006062:	73fb      	strb	r3, [r7, #15]
		memset(file_struct, '\0', sizeof(FIL));
 8006064:	f241 022c 	movw	r2, #4140	; 0x102c
 8006068:	2100      	movs	r1, #0
 800606a:	6838      	ldr	r0, [r7, #0]
 800606c:	f012 fda4 	bl	8018bb8 <memset>
		memset(dir_struct, '\0', sizeof(DIR));
 8006070:	2230      	movs	r2, #48	; 0x30
 8006072:	2100      	movs	r1, #0
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f012 fd9f 	bl	8018bb8 <memset>
		memset(&fatfsStruct, '\0', sizeof(FATFS));
 800607a:	f241 0238 	movw	r2, #4152	; 0x1038
 800607e:	2100      	movs	r1, #0
 8006080:	4811      	ldr	r0, [pc, #68]	; (80060c8 <Principal_Datalogger_Finish+0x84>)
 8006082:	f012 fd99 	bl	8018bb8 <memset>
		flagDatalogger = DL_NO_CARD;
 8006086:	4b11      	ldr	r3, [pc, #68]	; (80060cc <Principal_Datalogger_Finish+0x88>)
 8006088:	2202      	movs	r2, #2
 800608a:	701a      	strb	r2, [r3, #0]
 800608c:	e006      	b.n	800609c <Principal_Datalogger_Finish+0x58>
	}

	else if(flagDatalogger != DL_ERROR)
 800608e:	4b0f      	ldr	r3, [pc, #60]	; (80060cc <Principal_Datalogger_Finish+0x88>)
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	2b04      	cmp	r3, #4
 8006094:	d002      	beq.n	800609c <Principal_Datalogger_Finish+0x58>
		flagDatalogger = DL_NO_SAVE;
 8006096:	4b0d      	ldr	r3, [pc, #52]	; (80060cc <Principal_Datalogger_Finish+0x88>)
 8006098:	2200      	movs	r2, #0
 800609a:	701a      	strb	r2, [r3, #0]

	if(flagDatalogger != DL_NO_CARD)
 800609c:	4b0b      	ldr	r3, [pc, #44]	; (80060cc <Principal_Datalogger_Finish+0x88>)
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d007      	beq.n	80060b4 <Principal_Datalogger_Finish+0x70>
	{
		retVal = f_close(file_struct);
 80060a4:	6838      	ldr	r0, [r7, #0]
 80060a6:	f011 fce4 	bl	8017a72 <f_close>
 80060aa:	4603      	mov	r3, r0
 80060ac:	73fb      	strb	r3, [r7, #15]
		f_closedir(dir_struct);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f011 fd6a 	bl	8017b88 <f_closedir>
	}

	accDatalogger[DL_ACC_COOLDOWN] = DATALOGGER_COOLDOWN;
 80060b4:	4b06      	ldr	r3, [pc, #24]	; (80060d0 <Principal_Datalogger_Finish+0x8c>)
 80060b6:	22fa      	movs	r2, #250	; 0xfa
 80060b8:	601a      	str	r2, [r3, #0]

	return retVal;
 80060ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	40020800 	.word	0x40020800
 80060c8:	20004670 	.word	0x20004670
 80060cc:	200066fe 	.word	0x200066fe
 80060d0:	2000673c 	.word	0x2000673c

080060d4 <Principal_Datalogger_Save_Buffer>:

void Principal_Datalogger_Save_Buffer(CAN_HandleTypeDef* hcan, uint32_t data_id, uint8_t data_length, uint8_t* data_buffer, DIR* dir_struct, FIL* file_struct)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b088      	sub	sp, #32
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	603b      	str	r3, [r7, #0]
 80060e0:	4613      	mov	r3, r2
 80060e2:	71fb      	strb	r3, [r7, #7]
//	uint8_t buffer[5 + data_length];
	uint16_t index = 0;
 80060e4:	2300      	movs	r3, #0
 80060e6:	83fb      	strh	r3, [r7, #30]
	UINT writeSize = 0;
 80060e8:	2300      	movs	r3, #0
 80060ea:	61bb      	str	r3, [r7, #24]
	FRESULT verify[2];

	HAL_CAN_DeactivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80060ec:	2102      	movs	r1, #2
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f001 ffde 	bl	80080b0 <HAL_CAN_DeactivateNotification>

	if((HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 80060f4:	2180      	movs	r1, #128	; 0x80
 80060f6:	4854      	ldr	r0, [pc, #336]	; (8006248 <Principal_Datalogger_Save_Buffer+0x174>)
 80060f8:	f003 f874 	bl	80091e4 <HAL_GPIO_ReadPin>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d00b      	beq.n	800611a <Principal_Datalogger_Save_Buffer+0x46>
		|| (HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_SET)
 8006102:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006106:	4851      	ldr	r0, [pc, #324]	; (800624c <Principal_Datalogger_Save_Buffer+0x178>)
 8006108:	f003 f86c 	bl	80091e4 <HAL_GPIO_ReadPin>
 800610c:	4603      	mov	r3, r0
 800610e:	2b01      	cmp	r3, #1
 8006110:	d003      	beq.n	800611a <Principal_Datalogger_Save_Buffer+0x46>
		|| (flagDatalogger != DL_SAVE))
 8006112:	4b4f      	ldr	r3, [pc, #316]	; (8006250 <Principal_Datalogger_Save_Buffer+0x17c>)
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d008      	beq.n	800612c <Principal_Datalogger_Save_Buffer+0x58>
	{
		Principal_Datalogger_Finish(dir_struct, file_struct);
 800611a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800611c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800611e:	f7ff ff91 	bl	8006044 <Principal_Datalogger_Finish>

		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8006122:	2102      	movs	r1, #2
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f001 ff9d 	bl	8008064 <HAL_CAN_ActivateNotification>

		return;
 800612a:	e08a      	b.n	8006242 <Principal_Datalogger_Save_Buffer+0x16e>
//	for(uint8_t i = 0; i < data_length; i++)
//		buffer[5 + i] = data_buffer[i];

//	memcpy(&dataloggerBuffer[dataloggerBufferPosition], buffer, 5 + data_length);

	index = dataloggerBufferPosition;
 800612c:	4b49      	ldr	r3, [pc, #292]	; (8006254 <Principal_Datalogger_Save_Buffer+0x180>)
 800612e:	881b      	ldrh	r3, [r3, #0]
 8006130:	83fb      	strh	r3, [r7, #30]

	dataloggerBuffer[index] 	= 'D';
 8006132:	8bfb      	ldrh	r3, [r7, #30]
 8006134:	4a48      	ldr	r2, [pc, #288]	; (8006258 <Principal_Datalogger_Save_Buffer+0x184>)
 8006136:	2144      	movs	r1, #68	; 0x44
 8006138:	54d1      	strb	r1, [r2, r3]
	dataloggerBuffer[index + 1] = 'L';
 800613a:	8bfb      	ldrh	r3, [r7, #30]
 800613c:	3301      	adds	r3, #1
 800613e:	4a46      	ldr	r2, [pc, #280]	; (8006258 <Principal_Datalogger_Save_Buffer+0x184>)
 8006140:	214c      	movs	r1, #76	; 0x4c
 8006142:	54d1      	strb	r1, [r2, r3]
	dataloggerBuffer[index + 2] = data_id & 0xff;
 8006144:	8bfb      	ldrh	r3, [r7, #30]
 8006146:	3302      	adds	r3, #2
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	b2d1      	uxtb	r1, r2
 800614c:	4a42      	ldr	r2, [pc, #264]	; (8006258 <Principal_Datalogger_Save_Buffer+0x184>)
 800614e:	54d1      	strb	r1, [r2, r3]
	dataloggerBuffer[index + 3] = data_length;
 8006150:	8bfb      	ldrh	r3, [r7, #30]
 8006152:	3303      	adds	r3, #3
 8006154:	4940      	ldr	r1, [pc, #256]	; (8006258 <Principal_Datalogger_Save_Buffer+0x184>)
 8006156:	79fa      	ldrb	r2, [r7, #7]
 8006158:	54ca      	strb	r2, [r1, r3]
	dataloggerBuffer[index + 4] = accDatalogger[DL_ACC_TIMING];
 800615a:	4b40      	ldr	r3, [pc, #256]	; (800625c <Principal_Datalogger_Save_Buffer+0x188>)
 800615c:	689a      	ldr	r2, [r3, #8]
 800615e:	8bfb      	ldrh	r3, [r7, #30]
 8006160:	3304      	adds	r3, #4
 8006162:	b2d1      	uxtb	r1, r2
 8006164:	4a3c      	ldr	r2, [pc, #240]	; (8006258 <Principal_Datalogger_Save_Buffer+0x184>)
 8006166:	54d1      	strb	r1, [r2, r3]

	for(uint8_t i = 0; i < data_length; i++, index++)
 8006168:	2300      	movs	r3, #0
 800616a:	777b      	strb	r3, [r7, #29]
 800616c:	e00d      	b.n	800618a <Principal_Datalogger_Save_Buffer+0xb6>
		dataloggerBuffer[index + 5] = data_buffer[i];
 800616e:	7f7b      	ldrb	r3, [r7, #29]
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	441a      	add	r2, r3
 8006174:	8bfb      	ldrh	r3, [r7, #30]
 8006176:	3305      	adds	r3, #5
 8006178:	7811      	ldrb	r1, [r2, #0]
 800617a:	4a37      	ldr	r2, [pc, #220]	; (8006258 <Principal_Datalogger_Save_Buffer+0x184>)
 800617c:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < data_length; i++, index++)
 800617e:	7f7b      	ldrb	r3, [r7, #29]
 8006180:	3301      	adds	r3, #1
 8006182:	777b      	strb	r3, [r7, #29]
 8006184:	8bfb      	ldrh	r3, [r7, #30]
 8006186:	3301      	adds	r3, #1
 8006188:	83fb      	strh	r3, [r7, #30]
 800618a:	7f7a      	ldrb	r2, [r7, #29]
 800618c:	79fb      	ldrb	r3, [r7, #7]
 800618e:	429a      	cmp	r2, r3
 8006190:	d3ed      	bcc.n	800616e <Principal_Datalogger_Save_Buffer+0x9a>

	dataloggerBufferPosition += (5 + data_length);
 8006192:	79fb      	ldrb	r3, [r7, #7]
 8006194:	b29a      	uxth	r2, r3
 8006196:	4b2f      	ldr	r3, [pc, #188]	; (8006254 <Principal_Datalogger_Save_Buffer+0x180>)
 8006198:	881b      	ldrh	r3, [r3, #0]
 800619a:	4413      	add	r3, r2
 800619c:	b29b      	uxth	r3, r3
 800619e:	3305      	adds	r3, #5
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	4b2c      	ldr	r3, [pc, #176]	; (8006254 <Principal_Datalogger_Save_Buffer+0x180>)
 80061a4:	801a      	strh	r2, [r3, #0]

	accDatalogger[DL_ACC_TIMING] = 0;
 80061a6:	4b2d      	ldr	r3, [pc, #180]	; (800625c <Principal_Datalogger_Save_Buffer+0x188>)
 80061a8:	2200      	movs	r2, #0
 80061aa:	609a      	str	r2, [r3, #8]

	if((dataloggerBufferPosition > DATALOGGER_SAVE_THR))// || (accDatalogger[DL_ACC_TIMEOUT] > DATALOGGER_SAVE_TIME_THR))
 80061ac:	4b29      	ldr	r3, [pc, #164]	; (8006254 <Principal_Datalogger_Save_Buffer+0x180>)
 80061ae:	881b      	ldrh	r3, [r3, #0]
 80061b0:	f643 72f3 	movw	r2, #16371	; 0x3ff3
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d93f      	bls.n	8006238 <Principal_Datalogger_Save_Buffer+0x164>
	{
		dataloggerBufferPosition++;
 80061b8:	4b26      	ldr	r3, [pc, #152]	; (8006254 <Principal_Datalogger_Save_Buffer+0x180>)
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	3301      	adds	r3, #1
 80061be:	b29a      	uxth	r2, r3
 80061c0:	4b24      	ldr	r3, [pc, #144]	; (8006254 <Principal_Datalogger_Save_Buffer+0x180>)
 80061c2:	801a      	strh	r2, [r3, #0]

		for(; dataloggerBufferPosition < DATALOGGER_BUFFER_SIZE; dataloggerBufferPosition++)
 80061c4:	e00b      	b.n	80061de <Principal_Datalogger_Save_Buffer+0x10a>
			dataloggerBuffer[dataloggerBufferPosition] = 0;;
 80061c6:	4b23      	ldr	r3, [pc, #140]	; (8006254 <Principal_Datalogger_Save_Buffer+0x180>)
 80061c8:	881b      	ldrh	r3, [r3, #0]
 80061ca:	461a      	mov	r2, r3
 80061cc:	4b22      	ldr	r3, [pc, #136]	; (8006258 <Principal_Datalogger_Save_Buffer+0x184>)
 80061ce:	2100      	movs	r1, #0
 80061d0:	5499      	strb	r1, [r3, r2]
		for(; dataloggerBufferPosition < DATALOGGER_BUFFER_SIZE; dataloggerBufferPosition++)
 80061d2:	4b20      	ldr	r3, [pc, #128]	; (8006254 <Principal_Datalogger_Save_Buffer+0x180>)
 80061d4:	881b      	ldrh	r3, [r3, #0]
 80061d6:	3301      	adds	r3, #1
 80061d8:	b29a      	uxth	r2, r3
 80061da:	4b1e      	ldr	r3, [pc, #120]	; (8006254 <Principal_Datalogger_Save_Buffer+0x180>)
 80061dc:	801a      	strh	r2, [r3, #0]
 80061de:	4b1d      	ldr	r3, [pc, #116]	; (8006254 <Principal_Datalogger_Save_Buffer+0x180>)
 80061e0:	881b      	ldrh	r3, [r3, #0]
 80061e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80061e6:	d3ee      	bcc.n	80061c6 <Principal_Datalogger_Save_Buffer+0xf2>

		verify[0] = f_write(file_struct, dataloggerBuffer, (dataloggerBufferPosition + 1), &writeSize);
 80061e8:	4b1a      	ldr	r3, [pc, #104]	; (8006254 <Principal_Datalogger_Save_Buffer+0x180>)
 80061ea:	881b      	ldrh	r3, [r3, #0]
 80061ec:	3301      	adds	r3, #1
 80061ee:	461a      	mov	r2, r3
 80061f0:	f107 0318 	add.w	r3, r7, #24
 80061f4:	4918      	ldr	r1, [pc, #96]	; (8006258 <Principal_Datalogger_Save_Buffer+0x184>)
 80061f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061f8:	f011 fa29 	bl	801764e <f_write>
 80061fc:	4603      	mov	r3, r0
 80061fe:	753b      	strb	r3, [r7, #20]
		verify[1] = f_sync(file_struct);
 8006200:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006202:	f011 fbb8 	bl	8017976 <f_sync>
 8006206:	4603      	mov	r3, r0
 8006208:	757b      	strb	r3, [r7, #21]

		if((verify[0] != FR_OK) || (verify[1] != FR_OK))// || (writeSize != (dataloggerBufferPosition + 1)))
 800620a:	7d3b      	ldrb	r3, [r7, #20]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d102      	bne.n	8006216 <Principal_Datalogger_Save_Buffer+0x142>
 8006210:	7d7b      	ldrb	r3, [r7, #21]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00a      	beq.n	800622c <Principal_Datalogger_Save_Buffer+0x158>
		{
			if(flagDatalogger == DL_SAVE)
 8006216:	4b0e      	ldr	r3, [pc, #56]	; (8006250 <Principal_Datalogger_Save_Buffer+0x17c>)
 8006218:	781b      	ldrb	r3, [r3, #0]
 800621a:	2b01      	cmp	r3, #1
 800621c:	d102      	bne.n	8006224 <Principal_Datalogger_Save_Buffer+0x150>
				flagDatalogger = DL_ERROR;
 800621e:	4b0c      	ldr	r3, [pc, #48]	; (8006250 <Principal_Datalogger_Save_Buffer+0x17c>)
 8006220:	2204      	movs	r2, #4
 8006222:	701a      	strb	r2, [r3, #0]

			Principal_Datalogger_Finish(dir_struct, file_struct);
 8006224:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006226:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006228:	f7ff ff0c 	bl	8006044 <Principal_Datalogger_Finish>
		}

		dataloggerBufferPosition = 0;
 800622c:	4b09      	ldr	r3, [pc, #36]	; (8006254 <Principal_Datalogger_Save_Buffer+0x180>)
 800622e:	2200      	movs	r2, #0
 8006230:	801a      	strh	r2, [r3, #0]
		accDatalogger[DL_ACC_TIMEOUT] = 0;
 8006232:	4b0a      	ldr	r3, [pc, #40]	; (800625c <Principal_Datalogger_Save_Buffer+0x188>)
 8006234:	2200      	movs	r2, #0
 8006236:	605a      	str	r2, [r3, #4]
	}

	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8006238:	2102      	movs	r1, #2
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f001 ff12 	bl	8008064 <HAL_CAN_ActivateNotification>

	return;
 8006240:	bf00      	nop
}
 8006242:	3720      	adds	r7, #32
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	40020800 	.word	0x40020800
 800624c:	40020000 	.word	0x40020000
 8006250:	200066fe 	.word	0x200066fe
 8006254:	20004638 	.word	0x20004638
 8006258:	20000638 	.word	0x20000638
 800625c:	2000673c 	.word	0x2000673c

08006260 <Principal_Datalogger_Button>:

void Principal_Datalogger_Button(DIR* dir_struct, FIL* file_struct)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
	if(accDatalogger[DL_ACC_COOLDOWN] == 0)
 800626a:	4b10      	ldr	r3, [pc, #64]	; (80062ac <Principal_Datalogger_Button+0x4c>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d117      	bne.n	80062a2 <Principal_Datalogger_Button+0x42>
	{
		if((flagDatalogger == DL_NO_SAVE) && (HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_RESET))
 8006272:	4b0f      	ldr	r3, [pc, #60]	; (80062b0 <Principal_Datalogger_Button+0x50>)
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d10b      	bne.n	8006292 <Principal_Datalogger_Button+0x32>
 800627a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800627e:	480d      	ldr	r0, [pc, #52]	; (80062b4 <Principal_Datalogger_Button+0x54>)
 8006280:	f002 ffb0 	bl	80091e4 <HAL_GPIO_ReadPin>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d103      	bne.n	8006292 <Principal_Datalogger_Button+0x32>
			flagDatalogger = DL_BUT_PRESS;
 800628a:	4b09      	ldr	r3, [pc, #36]	; (80062b0 <Principal_Datalogger_Button+0x50>)
 800628c:	2203      	movs	r2, #3
 800628e:	701a      	strb	r2, [r3, #0]

		else if(flagDatalogger == DL_SAVE)
			Principal_Datalogger_Finish(dir_struct, file_struct);
	}
}
 8006290:	e007      	b.n	80062a2 <Principal_Datalogger_Button+0x42>
		else if(flagDatalogger == DL_SAVE)
 8006292:	4b07      	ldr	r3, [pc, #28]	; (80062b0 <Principal_Datalogger_Button+0x50>)
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d103      	bne.n	80062a2 <Principal_Datalogger_Button+0x42>
			Principal_Datalogger_Finish(dir_struct, file_struct);
 800629a:	6839      	ldr	r1, [r7, #0]
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f7ff fed1 	bl	8006044 <Principal_Datalogger_Finish>
}
 80062a2:	bf00      	nop
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	2000673c 	.word	0x2000673c
 80062b0:	200066fe 	.word	0x200066fe
 80062b4:	40020000 	.word	0x40020000

080062b8 <Principal_Card_Detection>:

void Principal_Card_Detection(FATFS* fatfs_struct, DIR* dir_struct, FIL* file_struct)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
	GPIO_PinState cd_pin = HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin);
 80062c4:	2180      	movs	r1, #128	; 0x80
 80062c6:	480f      	ldr	r0, [pc, #60]	; (8006304 <Principal_Card_Detection+0x4c>)
 80062c8:	f002 ff8c 	bl	80091e4 <HAL_GPIO_ReadPin>
 80062cc:	4603      	mov	r3, r0
 80062ce:	75fb      	strb	r3, [r7, #23]

	if((cd_pin == GPIO_PIN_SET) && (flagDatalogger != DL_NO_CARD))
 80062d0:	7dfb      	ldrb	r3, [r7, #23]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d108      	bne.n	80062e8 <Principal_Card_Detection+0x30>
 80062d6:	4b0c      	ldr	r3, [pc, #48]	; (8006308 <Principal_Card_Detection+0x50>)
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d004      	beq.n	80062e8 <Principal_Card_Detection+0x30>
		Principal_Datalogger_Finish(dir_struct, file_struct);
 80062de:	6879      	ldr	r1, [r7, #4]
 80062e0:	68b8      	ldr	r0, [r7, #8]
 80062e2:	f7ff feaf 	bl	8006044 <Principal_Datalogger_Finish>

	else if((cd_pin == GPIO_PIN_RESET) && (flagDatalogger == DL_NO_CARD))
		Principal_Datalogger_Init(fatfs_struct);
}
 80062e6:	e009      	b.n	80062fc <Principal_Card_Detection+0x44>
	else if((cd_pin == GPIO_PIN_RESET) && (flagDatalogger == DL_NO_CARD))
 80062e8:	7dfb      	ldrb	r3, [r7, #23]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d106      	bne.n	80062fc <Principal_Card_Detection+0x44>
 80062ee:	4b06      	ldr	r3, [pc, #24]	; (8006308 <Principal_Card_Detection+0x50>)
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d102      	bne.n	80062fc <Principal_Card_Detection+0x44>
		Principal_Datalogger_Init(fatfs_struct);
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f7ff fd7c 	bl	8005df4 <Principal_Datalogger_Init>
}
 80062fc:	bf00      	nop
 80062fe:	3718      	adds	r7, #24
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	40020800 	.word	0x40020800
 8006308:	200066fe 	.word	0x200066fe

0800630c <Principal_Beacon_Detect>:

void Principal_Beacon_Detect()
{
 800630c:	b580      	push	{r7, lr}
 800630e:	af00      	add	r7, sp, #0
	if(accLap < thresholdBeacon)
 8006310:	4b0a      	ldr	r3, [pc, #40]	; (800633c <Principal_Beacon_Detect+0x30>)
 8006312:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006316:	461a      	mov	r2, r3
 8006318:	4b09      	ldr	r3, [pc, #36]	; (8006340 <Principal_Beacon_Detect+0x34>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	429a      	cmp	r2, r3
 800631e:	d80a      	bhi.n	8006336 <Principal_Beacon_Detect+0x2a>
		return;

	lapNumber++;
 8006320:	4b08      	ldr	r3, [pc, #32]	; (8006344 <Principal_Beacon_Detect+0x38>)
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	3301      	adds	r3, #1
 8006326:	b2da      	uxtb	r2, r3
 8006328:	4b06      	ldr	r3, [pc, #24]	; (8006344 <Principal_Beacon_Detect+0x38>)
 800632a:	701a      	strb	r2, [r3, #0]

	Principal_Transmit_Msg(&hcan1, BEACON_MSG);
 800632c:	2105      	movs	r1, #5
 800632e:	4806      	ldr	r0, [pc, #24]	; (8006348 <Principal_Beacon_Detect+0x3c>)
 8006330:	f7fc f812 	bl	8002358 <Principal_Transmit_Msg>
 8006334:	e000      	b.n	8006338 <Principal_Beacon_Detect+0x2c>
		return;
 8006336:	bf00      	nop
}
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	2000463a 	.word	0x2000463a
 8006340:	20006784 	.word	0x20006784
 8006344:	20000574 	.word	0x20000574
 8006348:	20000304 	.word	0x20000304

0800634c <HAL_CAN_RxFifo0MsgPendingCallback>:
 */

#include "principal.h"

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af02      	add	r7, sp, #8
 8006352:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData) == HAL_OK)
 8006354:	4b2a      	ldr	r3, [pc, #168]	; (8006400 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8006356:	4a2b      	ldr	r2, [pc, #172]	; (8006404 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8006358:	2100      	movs	r1, #0
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f001 fd70 	bl	8007e40 <HAL_CAN_GetRxMessage>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d141      	bne.n	80063ea <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
	{
		verifyCAN |= 2;
 8006366:	4b28      	ldr	r3, [pc, #160]	; (8006408 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	f043 0302 	orr.w	r3, r3, #2
 800636e:	b2da      	uxtb	r2, r3
 8006370:	4b25      	ldr	r3, [pc, #148]	; (8006408 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8006372:	701a      	strb	r2, [r3, #0]

		if((rxHeader.IDE == CAN_ID_STD) && ((rxHeader.StdId & CAN_DAQ_MASK) == CAN_DAQ_FILTER) && (flagDatalogger == DL_SAVE))
 8006374:	4b23      	ldr	r3, [pc, #140]	; (8006404 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d118      	bne.n	80063ae <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
 800637c:	4b21      	ldr	r3, [pc, #132]	; (8006404 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006384:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8006388:	d111      	bne.n	80063ae <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
 800638a:	4b20      	ldr	r3, [pc, #128]	; (800640c <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 800638c:	781b      	ldrb	r3, [r3, #0]
 800638e:	2b01      	cmp	r3, #1
 8006390:	d10d      	bne.n	80063ae <HAL_CAN_RxFifo0MsgPendingCallback+0x62>
			Principal_Datalogger_Save_Buffer(hcan, rxHeader.StdId, rxHeader.DLC, rxData, &dirStruct, &fileStruct);
 8006392:	4b1c      	ldr	r3, [pc, #112]	; (8006404 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8006394:	6819      	ldr	r1, [r3, #0]
 8006396:	4b1b      	ldr	r3, [pc, #108]	; (8006404 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	b2da      	uxtb	r2, r3
 800639c:	4b1c      	ldr	r3, [pc, #112]	; (8006410 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 800639e:	9301      	str	r3, [sp, #4]
 80063a0:	4b1c      	ldr	r3, [pc, #112]	; (8006414 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 80063a2:	9300      	str	r3, [sp, #0]
 80063a4:	4b16      	ldr	r3, [pc, #88]	; (8006400 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f7ff fe94 	bl	80060d4 <Principal_Datalogger_Save_Buffer>
		}
	}

	else
		verifyCAN &= 1;
}
 80063ac:	e024      	b.n	80063f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
		else if(rxHeader.IDE == CAN_ID_EXT)
 80063ae:	4b15      	ldr	r3, [pc, #84]	; (8006404 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	2b04      	cmp	r3, #4
 80063b4:	d120      	bne.n	80063f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
			if((rxHeader.ExtId & CAN_CFG_MASK) == CAN_CFG_FILTER)
 80063b6:	4b13      	ldr	r3, [pc, #76]	; (8006404 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80063b8:	685a      	ldr	r2, [r3, #4]
 80063ba:	4b17      	ldr	r3, [pc, #92]	; (8006418 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 80063bc:	4013      	ands	r3, r2
 80063be:	4a17      	ldr	r2, [pc, #92]	; (800641c <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d107      	bne.n	80063d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>
				Principal_Receive_Config(&hi2c1, rxData, rxHeader.DLC);
 80063c4:	4b0f      	ldr	r3, [pc, #60]	; (8006404 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	461a      	mov	r2, r3
 80063ca:	490d      	ldr	r1, [pc, #52]	; (8006400 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 80063cc:	4814      	ldr	r0, [pc, #80]	; (8006420 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 80063ce:	f7fd fb6f 	bl	8003ab0 <Principal_Receive_Config>
}
 80063d2:	e011      	b.n	80063f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
				PDM_CAN_Process_Data(&rxHeader, rxData, &pdmReadings);
 80063d4:	4a13      	ldr	r2, [pc, #76]	; (8006424 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 80063d6:	490a      	ldr	r1, [pc, #40]	; (8006400 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 80063d8:	480a      	ldr	r0, [pc, #40]	; (8006404 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80063da:	f7fb fe79 	bl	80020d0 <PDM_CAN_Process_Data>
				FT_CAN_ReceiveData(&rxHeader, rxData, &ecuData);
 80063de:	4a12      	ldr	r2, [pc, #72]	; (8006428 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 80063e0:	4907      	ldr	r1, [pc, #28]	; (8006400 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 80063e2:	4808      	ldr	r0, [pc, #32]	; (8006404 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80063e4:	f7fa f91c 	bl	8000620 <FT_CAN_ReceiveData>
}
 80063e8:	e006      	b.n	80063f8 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>
		verifyCAN &= 1;
 80063ea:	4b07      	ldr	r3, [pc, #28]	; (8006408 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 80063ec:	781b      	ldrb	r3, [r3, #0]
 80063ee:	f003 0301 	and.w	r3, r3, #1
 80063f2:	b2da      	uxtb	r2, r3
 80063f4:	4b04      	ldr	r3, [pc, #16]	; (8006408 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 80063f6:	701a      	strb	r2, [r3, #0]
}
 80063f8:	bf00      	nop
 80063fa:	3708      	adds	r7, #8
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	2000052c 	.word	0x2000052c
 8006404:	20000540 	.word	0x20000540
 8006408:	20006788 	.word	0x20006788
 800640c:	200066fe 	.word	0x200066fe
 8006410:	200056a8 	.word	0x200056a8
 8006414:	20004640 	.word	0x20004640
 8006418:	1ff80000 	.word	0x1ff80000
 800641c:	1e300000 	.word	0x1e300000
 8006420:	2000032c 	.word	0x2000032c
 8006424:	200005f8 	.word	0x200005f8
 8006428:	20000590 	.word	0x20000590

0800642c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	4603      	mov	r3, r0
 8006434:	80fb      	strh	r3, [r7, #6]
	GPIO_PinState pinLevel;

	if(GPIO_Pin == EXTI0_Pin)
 8006436:	88fb      	ldrh	r3, [r7, #6]
 8006438:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800643c:	d13c      	bne.n	80064b8 <HAL_GPIO_EXTI_Callback+0x8c>
	{
		pinLevel = HAL_GPIO_ReadPin(EXTI0_GPIO_Port, EXTI0_Pin);
 800643e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006442:	4840      	ldr	r0, [pc, #256]	; (8006544 <HAL_GPIO_EXTI_Callback+0x118>)
 8006444:	f002 fece 	bl	80091e4 <HAL_GPIO_ReadPin>
 8006448:	4603      	mov	r3, r0
 800644a:	73fb      	strb	r3, [r7, #15]

		if(((inputConfig & 0x01) == INPUT_BEACON_PIN_0)
 800644c:	4b3e      	ldr	r3, [pc, #248]	; (8006548 <HAL_GPIO_EXTI_Callback+0x11c>)
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	2b00      	cmp	r3, #0
 8006456:	d113      	bne.n	8006480 <HAL_GPIO_EXTI_Callback+0x54>
				&& ((((inputConfig & 0x04) == INPUT_BEACON_FALLING_EDGE) && (pinLevel == GPIO_PIN_RESET))
 8006458:	4b3b      	ldr	r3, [pc, #236]	; (8006548 <HAL_GPIO_EXTI_Callback+0x11c>)
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	f003 0304 	and.w	r3, r3, #4
 8006460:	2b00      	cmp	r3, #0
 8006462:	d102      	bne.n	800646a <HAL_GPIO_EXTI_Callback+0x3e>
 8006464:	7bfb      	ldrb	r3, [r7, #15]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d008      	beq.n	800647c <HAL_GPIO_EXTI_Callback+0x50>
				|| (((inputConfig & 0x04) == INPUT_BEACON_RISING_EDGE) && (pinLevel == GPIO_PIN_SET))))
 800646a:	4b37      	ldr	r3, [pc, #220]	; (8006548 <HAL_GPIO_EXTI_Callback+0x11c>)
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	f003 0304 	and.w	r3, r3, #4
 8006472:	2b00      	cmp	r3, #0
 8006474:	d004      	beq.n	8006480 <HAL_GPIO_EXTI_Callback+0x54>
 8006476:	7bfb      	ldrb	r3, [r7, #15]
 8006478:	2b01      	cmp	r3, #1
 800647a:	d101      	bne.n	8006480 <HAL_GPIO_EXTI_Callback+0x54>
			Principal_Beacon_Detect();
 800647c:	f7ff ff46 	bl	800630c <Principal_Beacon_Detect>

		if(((inputConfig & 0x02) == INPUT_DATALOGGER_PIN_0)
 8006480:	4b31      	ldr	r3, [pc, #196]	; (8006548 <HAL_GPIO_EXTI_Callback+0x11c>)
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	f003 0302 	and.w	r3, r3, #2
 8006488:	2b00      	cmp	r3, #0
 800648a:	d115      	bne.n	80064b8 <HAL_GPIO_EXTI_Callback+0x8c>
				&& ((((inputConfig & 0x08) == INPUT_DATALOGGER_FALLING_EDGE) && (pinLevel == GPIO_PIN_RESET))
 800648c:	4b2e      	ldr	r3, [pc, #184]	; (8006548 <HAL_GPIO_EXTI_Callback+0x11c>)
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	f003 0308 	and.w	r3, r3, #8
 8006494:	2b00      	cmp	r3, #0
 8006496:	d102      	bne.n	800649e <HAL_GPIO_EXTI_Callback+0x72>
 8006498:	7bfb      	ldrb	r3, [r7, #15]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d008      	beq.n	80064b0 <HAL_GPIO_EXTI_Callback+0x84>
				|| (((inputConfig & 0x08) == INPUT_DATALOGGER_RISING_EDGE) && (pinLevel == GPIO_PIN_SET))))
 800649e:	4b2a      	ldr	r3, [pc, #168]	; (8006548 <HAL_GPIO_EXTI_Callback+0x11c>)
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	f003 0308 	and.w	r3, r3, #8
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d006      	beq.n	80064b8 <HAL_GPIO_EXTI_Callback+0x8c>
 80064aa:	7bfb      	ldrb	r3, [r7, #15]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d103      	bne.n	80064b8 <HAL_GPIO_EXTI_Callback+0x8c>
			Principal_Datalogger_Button(&dirStruct, &fileStruct);
 80064b0:	4926      	ldr	r1, [pc, #152]	; (800654c <HAL_GPIO_EXTI_Callback+0x120>)
 80064b2:	4827      	ldr	r0, [pc, #156]	; (8006550 <HAL_GPIO_EXTI_Callback+0x124>)
 80064b4:	f7ff fed4 	bl	8006260 <Principal_Datalogger_Button>
	}

	if(GPIO_Pin == EXTI1_Pin)
 80064b8:	88fb      	ldrh	r3, [r7, #6]
 80064ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064be:	d13c      	bne.n	800653a <HAL_GPIO_EXTI_Callback+0x10e>
	{
		pinLevel = HAL_GPIO_ReadPin(EXTI1_GPIO_Port, EXTI1_Pin);
 80064c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80064c4:	481f      	ldr	r0, [pc, #124]	; (8006544 <HAL_GPIO_EXTI_Callback+0x118>)
 80064c6:	f002 fe8d 	bl	80091e4 <HAL_GPIO_ReadPin>
 80064ca:	4603      	mov	r3, r0
 80064cc:	73fb      	strb	r3, [r7, #15]

		if(((inputConfig & 0x01) == INPUT_BEACON_PIN_1)
 80064ce:	4b1e      	ldr	r3, [pc, #120]	; (8006548 <HAL_GPIO_EXTI_Callback+0x11c>)
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d013      	beq.n	8006502 <HAL_GPIO_EXTI_Callback+0xd6>
				&& ((((inputConfig & 0x04) == INPUT_BEACON_FALLING_EDGE) && (pinLevel == GPIO_PIN_RESET))
 80064da:	4b1b      	ldr	r3, [pc, #108]	; (8006548 <HAL_GPIO_EXTI_Callback+0x11c>)
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	f003 0304 	and.w	r3, r3, #4
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d102      	bne.n	80064ec <HAL_GPIO_EXTI_Callback+0xc0>
 80064e6:	7bfb      	ldrb	r3, [r7, #15]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d008      	beq.n	80064fe <HAL_GPIO_EXTI_Callback+0xd2>
				|| (((inputConfig & 0x04) == INPUT_BEACON_RISING_EDGE) && (pinLevel == GPIO_PIN_SET))))
 80064ec:	4b16      	ldr	r3, [pc, #88]	; (8006548 <HAL_GPIO_EXTI_Callback+0x11c>)
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	f003 0304 	and.w	r3, r3, #4
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d004      	beq.n	8006502 <HAL_GPIO_EXTI_Callback+0xd6>
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d101      	bne.n	8006502 <HAL_GPIO_EXTI_Callback+0xd6>
			Principal_Beacon_Detect();
 80064fe:	f7ff ff05 	bl	800630c <Principal_Beacon_Detect>

		if(((inputConfig & 0x02) == INPUT_DATALOGGER_PIN_1)
 8006502:	4b11      	ldr	r3, [pc, #68]	; (8006548 <HAL_GPIO_EXTI_Callback+0x11c>)
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	f003 0302 	and.w	r3, r3, #2
 800650a:	2b00      	cmp	r3, #0
 800650c:	d015      	beq.n	800653a <HAL_GPIO_EXTI_Callback+0x10e>
				&& ((((inputConfig & 0x08) == INPUT_DATALOGGER_FALLING_EDGE) && (pinLevel == GPIO_PIN_RESET))
 800650e:	4b0e      	ldr	r3, [pc, #56]	; (8006548 <HAL_GPIO_EXTI_Callback+0x11c>)
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	f003 0308 	and.w	r3, r3, #8
 8006516:	2b00      	cmp	r3, #0
 8006518:	d102      	bne.n	8006520 <HAL_GPIO_EXTI_Callback+0xf4>
 800651a:	7bfb      	ldrb	r3, [r7, #15]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d008      	beq.n	8006532 <HAL_GPIO_EXTI_Callback+0x106>
				|| (((inputConfig & 0x08) == INPUT_DATALOGGER_RISING_EDGE) && (pinLevel == GPIO_PIN_SET))))
 8006520:	4b09      	ldr	r3, [pc, #36]	; (8006548 <HAL_GPIO_EXTI_Callback+0x11c>)
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	f003 0308 	and.w	r3, r3, #8
 8006528:	2b00      	cmp	r3, #0
 800652a:	d006      	beq.n	800653a <HAL_GPIO_EXTI_Callback+0x10e>
 800652c:	7bfb      	ldrb	r3, [r7, #15]
 800652e:	2b01      	cmp	r3, #1
 8006530:	d103      	bne.n	800653a <HAL_GPIO_EXTI_Callback+0x10e>
			Principal_Datalogger_Button(&dirStruct, &fileStruct);
 8006532:	4906      	ldr	r1, [pc, #24]	; (800654c <HAL_GPIO_EXTI_Callback+0x120>)
 8006534:	4806      	ldr	r0, [pc, #24]	; (8006550 <HAL_GPIO_EXTI_Callback+0x124>)
 8006536:	f7ff fe93 	bl	8006260 <Principal_Datalogger_Button>
	}
}
 800653a:	bf00      	nop
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	40020400 	.word	0x40020400
 8006548:	20006700 	.word	0x20006700
 800654c:	200056a8 	.word	0x200056a8
 8006550:	20004640 	.word	0x20004640

08006554 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a35      	ldr	r2, [pc, #212]	; (8006638 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d162      	bne.n	800662c <HAL_TIM_PeriodElapsedCallback+0xd8>
	{
		accDatalogger[DL_ACC_TIMING]++;
 8006566:	4b35      	ldr	r3, [pc, #212]	; (800663c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	3301      	adds	r3, #1
 800656c:	4a33      	ldr	r2, [pc, #204]	; (800663c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800656e:	6093      	str	r3, [r2, #8]
		accDatalogger[DL_ACC_TIMEOUT]++;
 8006570:	4b32      	ldr	r3, [pc, #200]	; (800663c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	3301      	adds	r3, #1
 8006576:	4a31      	ldr	r2, [pc, #196]	; (800663c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8006578:	6053      	str	r3, [r2, #4]
		if(accDatalogger[DL_ACC_COOLDOWN] > 0) accDatalogger[DL_ACC_COOLDOWN]--;
 800657a:	4b30      	ldr	r3, [pc, #192]	; (800663c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d004      	beq.n	800658c <HAL_TIM_PeriodElapsedCallback+0x38>
 8006582:	4b2e      	ldr	r3, [pc, #184]	; (800663c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	3b01      	subs	r3, #1
 8006588:	4a2c      	ldr	r2, [pc, #176]	; (800663c <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800658a:	6013      	str	r3, [r2, #0]

		accCAN[ANALOG_1_4]++;
 800658c:	4b2c      	ldr	r3, [pc, #176]	; (8006640 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	3301      	adds	r3, #1
 8006592:	4a2b      	ldr	r2, [pc, #172]	; (8006640 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8006594:	6013      	str	r3, [r2, #0]
		accCAN[ANALOG_5_8]++;
 8006596:	4b2a      	ldr	r3, [pc, #168]	; (8006640 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	3301      	adds	r3, #1
 800659c:	4a28      	ldr	r2, [pc, #160]	; (8006640 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800659e:	6053      	str	r3, [r2, #4]
		accCAN[ANALOG_9_12]++;
 80065a0:	4b27      	ldr	r3, [pc, #156]	; (8006640 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	3301      	adds	r3, #1
 80065a6:	4a26      	ldr	r2, [pc, #152]	; (8006640 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80065a8:	6093      	str	r3, [r2, #8]
		accCAN[RTC_MSG]++;
 80065aa:	4b25      	ldr	r3, [pc, #148]	; (8006640 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	3301      	adds	r3, #1
 80065b0:	4a23      	ldr	r2, [pc, #140]	; (8006640 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80065b2:	60d3      	str	r3, [r2, #12]
		accCAN[VERIFY_MSG]++;
 80065b4:	4b22      	ldr	r3, [pc, #136]	; (8006640 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	3301      	adds	r3, #1
 80065ba:	4a21      	ldr	r2, [pc, #132]	; (8006640 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80065bc:	6113      	str	r3, [r2, #16]
		accCAN[BEACON_MSG]++;
 80065be:	4b20      	ldr	r3, [pc, #128]	; (8006640 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	3301      	adds	r3, #1
 80065c4:	4a1e      	ldr	r2, [pc, #120]	; (8006640 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80065c6:	6153      	str	r3, [r2, #20]

		accMsg[ANALOG_1_4]++;
 80065c8:	4b1e      	ldr	r3, [pc, #120]	; (8006644 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	3301      	adds	r3, #1
 80065ce:	4a1d      	ldr	r2, [pc, #116]	; (8006644 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80065d0:	6013      	str	r3, [r2, #0]
		accMsg[ANALOG_5_8]++;
 80065d2:	4b1c      	ldr	r3, [pc, #112]	; (8006644 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	3301      	adds	r3, #1
 80065d8:	4a1a      	ldr	r2, [pc, #104]	; (8006644 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80065da:	6053      	str	r3, [r2, #4]
		accMsg[ANALOG_9_12]++;
 80065dc:	4b19      	ldr	r3, [pc, #100]	; (8006644 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	3301      	adds	r3, #1
 80065e2:	4a18      	ldr	r2, [pc, #96]	; (8006644 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80065e4:	6093      	str	r3, [r2, #8]
		accMsg[RTC_MSG]++;
 80065e6:	4b17      	ldr	r3, [pc, #92]	; (8006644 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	3301      	adds	r3, #1
 80065ec:	4a15      	ldr	r2, [pc, #84]	; (8006644 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80065ee:	60d3      	str	r3, [r2, #12]
		accMsg[VERIFY_MSG]++;
 80065f0:	4b14      	ldr	r3, [pc, #80]	; (8006644 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	3301      	adds	r3, #1
 80065f6:	4a13      	ldr	r2, [pc, #76]	; (8006644 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80065f8:	6113      	str	r3, [r2, #16]
		accMsg[BEACON_MSG]++;
 80065fa:	4b12      	ldr	r3, [pc, #72]	; (8006644 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	3301      	adds	r3, #1
 8006600:	4a10      	ldr	r2, [pc, #64]	; (8006644 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006602:	6153      	str	r3, [r2, #20]
		accMsg[ECU_SAVE]++;
 8006604:	4b0f      	ldr	r3, [pc, #60]	; (8006644 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006606:	699b      	ldr	r3, [r3, #24]
 8006608:	3301      	adds	r3, #1
 800660a:	4a0e      	ldr	r2, [pc, #56]	; (8006644 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800660c:	6193      	str	r3, [r2, #24]
		accMsg[PDM_SAVE]++;
 800660e:	4b0d      	ldr	r3, [pc, #52]	; (8006644 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006610:	69db      	ldr	r3, [r3, #28]
 8006612:	3301      	adds	r3, #1
 8006614:	4a0b      	ldr	r2, [pc, #44]	; (8006644 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006616:	61d3      	str	r3, [r2, #28]
		accMsg[VERIFY_LEDS]++;
 8006618:	4b0a      	ldr	r3, [pc, #40]	; (8006644 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800661a:	6a1b      	ldr	r3, [r3, #32]
 800661c:	3301      	adds	r3, #1
 800661e:	4a09      	ldr	r2, [pc, #36]	; (8006644 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006620:	6213      	str	r3, [r2, #32]

		accLap++;
 8006622:	4b09      	ldr	r3, [pc, #36]	; (8006648 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	3301      	adds	r3, #1
 8006628:	4a07      	ldr	r2, [pc, #28]	; (8006648 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800662a:	6013      	str	r3, [r2, #0]
	}
}
 800662c:	bf00      	nop
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr
 8006638:	40001400 	.word	0x40001400
 800663c:	2000673c 	.word	0x2000673c
 8006640:	20006748 	.word	0x20006748
 8006644:	20006760 	.word	0x20006760
 8006648:	20006784 	.word	0x20006784

0800664c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006652:	2300      	movs	r3, #0
 8006654:	607b      	str	r3, [r7, #4]
 8006656:	4b10      	ldr	r3, [pc, #64]	; (8006698 <HAL_MspInit+0x4c>)
 8006658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800665a:	4a0f      	ldr	r2, [pc, #60]	; (8006698 <HAL_MspInit+0x4c>)
 800665c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006660:	6453      	str	r3, [r2, #68]	; 0x44
 8006662:	4b0d      	ldr	r3, [pc, #52]	; (8006698 <HAL_MspInit+0x4c>)
 8006664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800666a:	607b      	str	r3, [r7, #4]
 800666c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800666e:	2300      	movs	r3, #0
 8006670:	603b      	str	r3, [r7, #0]
 8006672:	4b09      	ldr	r3, [pc, #36]	; (8006698 <HAL_MspInit+0x4c>)
 8006674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006676:	4a08      	ldr	r2, [pc, #32]	; (8006698 <HAL_MspInit+0x4c>)
 8006678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800667c:	6413      	str	r3, [r2, #64]	; 0x40
 800667e:	4b06      	ldr	r3, [pc, #24]	; (8006698 <HAL_MspInit+0x4c>)
 8006680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006686:	603b      	str	r3, [r7, #0]
 8006688:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800668a:	bf00      	nop
 800668c:	370c      	adds	r7, #12
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
 8006696:	bf00      	nop
 8006698:	40023800 	.word	0x40023800

0800669c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b08e      	sub	sp, #56	; 0x38
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066a8:	2200      	movs	r2, #0
 80066aa:	601a      	str	r2, [r3, #0]
 80066ac:	605a      	str	r2, [r3, #4]
 80066ae:	609a      	str	r2, [r3, #8]
 80066b0:	60da      	str	r2, [r3, #12]
 80066b2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a79      	ldr	r2, [pc, #484]	; (80068a0 <HAL_ADC_MspInit+0x204>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	f040 808d 	bne.w	80067da <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80066c0:	2300      	movs	r3, #0
 80066c2:	623b      	str	r3, [r7, #32]
 80066c4:	4b77      	ldr	r3, [pc, #476]	; (80068a4 <HAL_ADC_MspInit+0x208>)
 80066c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066c8:	4a76      	ldr	r2, [pc, #472]	; (80068a4 <HAL_ADC_MspInit+0x208>)
 80066ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066ce:	6453      	str	r3, [r2, #68]	; 0x44
 80066d0:	4b74      	ldr	r3, [pc, #464]	; (80068a4 <HAL_ADC_MspInit+0x208>)
 80066d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d8:	623b      	str	r3, [r7, #32]
 80066da:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066dc:	2300      	movs	r3, #0
 80066de:	61fb      	str	r3, [r7, #28]
 80066e0:	4b70      	ldr	r3, [pc, #448]	; (80068a4 <HAL_ADC_MspInit+0x208>)
 80066e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e4:	4a6f      	ldr	r2, [pc, #444]	; (80068a4 <HAL_ADC_MspInit+0x208>)
 80066e6:	f043 0301 	orr.w	r3, r3, #1
 80066ea:	6313      	str	r3, [r2, #48]	; 0x30
 80066ec:	4b6d      	ldr	r3, [pc, #436]	; (80068a4 <HAL_ADC_MspInit+0x208>)
 80066ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066f0:	f003 0301 	and.w	r3, r3, #1
 80066f4:	61fb      	str	r3, [r7, #28]
 80066f6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80066f8:	2300      	movs	r3, #0
 80066fa:	61bb      	str	r3, [r7, #24]
 80066fc:	4b69      	ldr	r3, [pc, #420]	; (80068a4 <HAL_ADC_MspInit+0x208>)
 80066fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006700:	4a68      	ldr	r2, [pc, #416]	; (80068a4 <HAL_ADC_MspInit+0x208>)
 8006702:	f043 0304 	orr.w	r3, r3, #4
 8006706:	6313      	str	r3, [r2, #48]	; 0x30
 8006708:	4b66      	ldr	r3, [pc, #408]	; (80068a4 <HAL_ADC_MspInit+0x208>)
 800670a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670c:	f003 0304 	and.w	r3, r3, #4
 8006710:	61bb      	str	r3, [r7, #24]
 8006712:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006714:	2300      	movs	r3, #0
 8006716:	617b      	str	r3, [r7, #20]
 8006718:	4b62      	ldr	r3, [pc, #392]	; (80068a4 <HAL_ADC_MspInit+0x208>)
 800671a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671c:	4a61      	ldr	r2, [pc, #388]	; (80068a4 <HAL_ADC_MspInit+0x208>)
 800671e:	f043 0302 	orr.w	r3, r3, #2
 8006722:	6313      	str	r3, [r2, #48]	; 0x30
 8006724:	4b5f      	ldr	r3, [pc, #380]	; (80068a4 <HAL_ADC_MspInit+0x208>)
 8006726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006728:	f003 0302 	and.w	r3, r3, #2
 800672c:	617b      	str	r3, [r7, #20]
 800672e:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006730:	23c0      	movs	r3, #192	; 0xc0
 8006732:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006734:	2303      	movs	r3, #3
 8006736:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006738:	2300      	movs	r3, #0
 800673a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800673c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006740:	4619      	mov	r1, r3
 8006742:	4859      	ldr	r0, [pc, #356]	; (80068a8 <HAL_ADC_MspInit+0x20c>)
 8006744:	f002 fbba 	bl	8008ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006748:	2330      	movs	r3, #48	; 0x30
 800674a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800674c:	2303      	movs	r3, #3
 800674e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006750:	2300      	movs	r3, #0
 8006752:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006758:	4619      	mov	r1, r3
 800675a:	4854      	ldr	r0, [pc, #336]	; (80068ac <HAL_ADC_MspInit+0x210>)
 800675c:	f002 fbae 	bl	8008ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006760:	2303      	movs	r3, #3
 8006762:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006764:	2303      	movs	r3, #3
 8006766:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006768:	2300      	movs	r3, #0
 800676a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800676c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006770:	4619      	mov	r1, r3
 8006772:	484f      	ldr	r0, [pc, #316]	; (80068b0 <HAL_ADC_MspInit+0x214>)
 8006774:	f002 fba2 	bl	8008ebc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8006778:	4b4e      	ldr	r3, [pc, #312]	; (80068b4 <HAL_ADC_MspInit+0x218>)
 800677a:	4a4f      	ldr	r2, [pc, #316]	; (80068b8 <HAL_ADC_MspInit+0x21c>)
 800677c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800677e:	4b4d      	ldr	r3, [pc, #308]	; (80068b4 <HAL_ADC_MspInit+0x218>)
 8006780:	2200      	movs	r2, #0
 8006782:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006784:	4b4b      	ldr	r3, [pc, #300]	; (80068b4 <HAL_ADC_MspInit+0x218>)
 8006786:	2200      	movs	r2, #0
 8006788:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800678a:	4b4a      	ldr	r3, [pc, #296]	; (80068b4 <HAL_ADC_MspInit+0x218>)
 800678c:	2200      	movs	r2, #0
 800678e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006790:	4b48      	ldr	r3, [pc, #288]	; (80068b4 <HAL_ADC_MspInit+0x218>)
 8006792:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006796:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006798:	4b46      	ldr	r3, [pc, #280]	; (80068b4 <HAL_ADC_MspInit+0x218>)
 800679a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800679e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80067a0:	4b44      	ldr	r3, [pc, #272]	; (80068b4 <HAL_ADC_MspInit+0x218>)
 80067a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80067a6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80067a8:	4b42      	ldr	r3, [pc, #264]	; (80068b4 <HAL_ADC_MspInit+0x218>)
 80067aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067ae:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80067b0:	4b40      	ldr	r3, [pc, #256]	; (80068b4 <HAL_ADC_MspInit+0x218>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80067b6:	4b3f      	ldr	r3, [pc, #252]	; (80068b4 <HAL_ADC_MspInit+0x218>)
 80067b8:	2200      	movs	r2, #0
 80067ba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80067bc:	483d      	ldr	r0, [pc, #244]	; (80068b4 <HAL_ADC_MspInit+0x218>)
 80067be:	f001 ffdf 	bl	8008780 <HAL_DMA_Init>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d001      	beq.n	80067cc <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 80067c8:	f7fb fa3a 	bl	8001c40 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a39      	ldr	r2, [pc, #228]	; (80068b4 <HAL_ADC_MspInit+0x218>)
 80067d0:	639a      	str	r2, [r3, #56]	; 0x38
 80067d2:	4a38      	ldr	r2, [pc, #224]	; (80068b4 <HAL_ADC_MspInit+0x218>)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80067d8:	e05d      	b.n	8006896 <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a37      	ldr	r2, [pc, #220]	; (80068bc <HAL_ADC_MspInit+0x220>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d158      	bne.n	8006896 <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80067e4:	2300      	movs	r3, #0
 80067e6:	613b      	str	r3, [r7, #16]
 80067e8:	4b2e      	ldr	r3, [pc, #184]	; (80068a4 <HAL_ADC_MspInit+0x208>)
 80067ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ec:	4a2d      	ldr	r2, [pc, #180]	; (80068a4 <HAL_ADC_MspInit+0x208>)
 80067ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067f2:	6453      	str	r3, [r2, #68]	; 0x44
 80067f4:	4b2b      	ldr	r3, [pc, #172]	; (80068a4 <HAL_ADC_MspInit+0x208>)
 80067f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067fc:	613b      	str	r3, [r7, #16]
 80067fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006800:	2300      	movs	r3, #0
 8006802:	60fb      	str	r3, [r7, #12]
 8006804:	4b27      	ldr	r3, [pc, #156]	; (80068a4 <HAL_ADC_MspInit+0x208>)
 8006806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006808:	4a26      	ldr	r2, [pc, #152]	; (80068a4 <HAL_ADC_MspInit+0x208>)
 800680a:	f043 0301 	orr.w	r3, r3, #1
 800680e:	6313      	str	r3, [r2, #48]	; 0x30
 8006810:	4b24      	ldr	r3, [pc, #144]	; (80068a4 <HAL_ADC_MspInit+0x208>)
 8006812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006814:	f003 0301 	and.w	r3, r3, #1
 8006818:	60fb      	str	r3, [r7, #12]
 800681a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800681c:	233f      	movs	r3, #63	; 0x3f
 800681e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006820:	2303      	movs	r3, #3
 8006822:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006824:	2300      	movs	r3, #0
 8006826:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800682c:	4619      	mov	r1, r3
 800682e:	481e      	ldr	r0, [pc, #120]	; (80068a8 <HAL_ADC_MspInit+0x20c>)
 8006830:	f002 fb44 	bl	8008ebc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8006834:	4b22      	ldr	r3, [pc, #136]	; (80068c0 <HAL_ADC_MspInit+0x224>)
 8006836:	4a23      	ldr	r2, [pc, #140]	; (80068c4 <HAL_ADC_MspInit+0x228>)
 8006838:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800683a:	4b21      	ldr	r3, [pc, #132]	; (80068c0 <HAL_ADC_MspInit+0x224>)
 800683c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006840:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006842:	4b1f      	ldr	r3, [pc, #124]	; (80068c0 <HAL_ADC_MspInit+0x224>)
 8006844:	2200      	movs	r2, #0
 8006846:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006848:	4b1d      	ldr	r3, [pc, #116]	; (80068c0 <HAL_ADC_MspInit+0x224>)
 800684a:	2200      	movs	r2, #0
 800684c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800684e:	4b1c      	ldr	r3, [pc, #112]	; (80068c0 <HAL_ADC_MspInit+0x224>)
 8006850:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006854:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006856:	4b1a      	ldr	r3, [pc, #104]	; (80068c0 <HAL_ADC_MspInit+0x224>)
 8006858:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800685c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800685e:	4b18      	ldr	r3, [pc, #96]	; (80068c0 <HAL_ADC_MspInit+0x224>)
 8006860:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006864:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006866:	4b16      	ldr	r3, [pc, #88]	; (80068c0 <HAL_ADC_MspInit+0x224>)
 8006868:	f44f 7280 	mov.w	r2, #256	; 0x100
 800686c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800686e:	4b14      	ldr	r3, [pc, #80]	; (80068c0 <HAL_ADC_MspInit+0x224>)
 8006870:	2200      	movs	r2, #0
 8006872:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006874:	4b12      	ldr	r3, [pc, #72]	; (80068c0 <HAL_ADC_MspInit+0x224>)
 8006876:	2200      	movs	r2, #0
 8006878:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800687a:	4811      	ldr	r0, [pc, #68]	; (80068c0 <HAL_ADC_MspInit+0x224>)
 800687c:	f001 ff80 	bl	8008780 <HAL_DMA_Init>
 8006880:	4603      	mov	r3, r0
 8006882:	2b00      	cmp	r3, #0
 8006884:	d001      	beq.n	800688a <HAL_ADC_MspInit+0x1ee>
      Error_Handler();
 8006886:	f7fb f9db 	bl	8001c40 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a0c      	ldr	r2, [pc, #48]	; (80068c0 <HAL_ADC_MspInit+0x224>)
 800688e:	639a      	str	r2, [r3, #56]	; 0x38
 8006890:	4a0b      	ldr	r2, [pc, #44]	; (80068c0 <HAL_ADC_MspInit+0x224>)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006896:	bf00      	nop
 8006898:	3738      	adds	r7, #56	; 0x38
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	40012000 	.word	0x40012000
 80068a4:	40023800 	.word	0x40023800
 80068a8:	40020000 	.word	0x40020000
 80068ac:	40020800 	.word	0x40020800
 80068b0:	40020400 	.word	0x40020400
 80068b4:	20000244 	.word	0x20000244
 80068b8:	40026410 	.word	0x40026410
 80068bc:	40012100 	.word	0x40012100
 80068c0:	200002a4 	.word	0x200002a4
 80068c4:	40026440 	.word	0x40026440

080068c8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b08a      	sub	sp, #40	; 0x28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068d0:	f107 0314 	add.w	r3, r7, #20
 80068d4:	2200      	movs	r2, #0
 80068d6:	601a      	str	r2, [r3, #0]
 80068d8:	605a      	str	r2, [r3, #4]
 80068da:	609a      	str	r2, [r3, #8]
 80068dc:	60da      	str	r2, [r3, #12]
 80068de:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a1d      	ldr	r2, [pc, #116]	; (800695c <HAL_CAN_MspInit+0x94>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d134      	bne.n	8006954 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80068ea:	2300      	movs	r3, #0
 80068ec:	613b      	str	r3, [r7, #16]
 80068ee:	4b1c      	ldr	r3, [pc, #112]	; (8006960 <HAL_CAN_MspInit+0x98>)
 80068f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f2:	4a1b      	ldr	r2, [pc, #108]	; (8006960 <HAL_CAN_MspInit+0x98>)
 80068f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80068f8:	6413      	str	r3, [r2, #64]	; 0x40
 80068fa:	4b19      	ldr	r3, [pc, #100]	; (8006960 <HAL_CAN_MspInit+0x98>)
 80068fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006902:	613b      	str	r3, [r7, #16]
 8006904:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006906:	2300      	movs	r3, #0
 8006908:	60fb      	str	r3, [r7, #12]
 800690a:	4b15      	ldr	r3, [pc, #84]	; (8006960 <HAL_CAN_MspInit+0x98>)
 800690c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690e:	4a14      	ldr	r2, [pc, #80]	; (8006960 <HAL_CAN_MspInit+0x98>)
 8006910:	f043 0302 	orr.w	r3, r3, #2
 8006914:	6313      	str	r3, [r2, #48]	; 0x30
 8006916:	4b12      	ldr	r3, [pc, #72]	; (8006960 <HAL_CAN_MspInit+0x98>)
 8006918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691a:	f003 0302 	and.w	r3, r3, #2
 800691e:	60fb      	str	r3, [r7, #12]
 8006920:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006922:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006928:	2302      	movs	r3, #2
 800692a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800692c:	2300      	movs	r3, #0
 800692e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006930:	2303      	movs	r3, #3
 8006932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8006934:	2309      	movs	r3, #9
 8006936:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006938:	f107 0314 	add.w	r3, r7, #20
 800693c:	4619      	mov	r1, r3
 800693e:	4809      	ldr	r0, [pc, #36]	; (8006964 <HAL_CAN_MspInit+0x9c>)
 8006940:	f002 fabc 	bl	8008ebc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 8006944:	2200      	movs	r2, #0
 8006946:	2101      	movs	r1, #1
 8006948:	2014      	movs	r0, #20
 800694a:	f001 fee2 	bl	8008712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800694e:	2014      	movs	r0, #20
 8006950:	f001 fefb 	bl	800874a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8006954:	bf00      	nop
 8006956:	3728      	adds	r7, #40	; 0x28
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	40006400 	.word	0x40006400
 8006960:	40023800 	.word	0x40023800
 8006964:	40020400 	.word	0x40020400

08006968 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b08a      	sub	sp, #40	; 0x28
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006970:	f107 0314 	add.w	r3, r7, #20
 8006974:	2200      	movs	r2, #0
 8006976:	601a      	str	r2, [r3, #0]
 8006978:	605a      	str	r2, [r3, #4]
 800697a:	609a      	str	r2, [r3, #8]
 800697c:	60da      	str	r2, [r3, #12]
 800697e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a19      	ldr	r2, [pc, #100]	; (80069ec <HAL_I2C_MspInit+0x84>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d12b      	bne.n	80069e2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800698a:	2300      	movs	r3, #0
 800698c:	613b      	str	r3, [r7, #16]
 800698e:	4b18      	ldr	r3, [pc, #96]	; (80069f0 <HAL_I2C_MspInit+0x88>)
 8006990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006992:	4a17      	ldr	r2, [pc, #92]	; (80069f0 <HAL_I2C_MspInit+0x88>)
 8006994:	f043 0302 	orr.w	r3, r3, #2
 8006998:	6313      	str	r3, [r2, #48]	; 0x30
 800699a:	4b15      	ldr	r3, [pc, #84]	; (80069f0 <HAL_I2C_MspInit+0x88>)
 800699c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	613b      	str	r3, [r7, #16]
 80069a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80069a6:	23c0      	movs	r3, #192	; 0xc0
 80069a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80069aa:	2312      	movs	r3, #18
 80069ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069ae:	2300      	movs	r3, #0
 80069b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069b2:	2303      	movs	r3, #3
 80069b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80069b6:	2304      	movs	r3, #4
 80069b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069ba:	f107 0314 	add.w	r3, r7, #20
 80069be:	4619      	mov	r1, r3
 80069c0:	480c      	ldr	r0, [pc, #48]	; (80069f4 <HAL_I2C_MspInit+0x8c>)
 80069c2:	f002 fa7b 	bl	8008ebc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80069c6:	2300      	movs	r3, #0
 80069c8:	60fb      	str	r3, [r7, #12]
 80069ca:	4b09      	ldr	r3, [pc, #36]	; (80069f0 <HAL_I2C_MspInit+0x88>)
 80069cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ce:	4a08      	ldr	r2, [pc, #32]	; (80069f0 <HAL_I2C_MspInit+0x88>)
 80069d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80069d4:	6413      	str	r3, [r2, #64]	; 0x40
 80069d6:	4b06      	ldr	r3, [pc, #24]	; (80069f0 <HAL_I2C_MspInit+0x88>)
 80069d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069de:	60fb      	str	r3, [r7, #12]
 80069e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80069e2:	bf00      	nop
 80069e4:	3728      	adds	r7, #40	; 0x28
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	40005400 	.word	0x40005400
 80069f0:	40023800 	.word	0x40023800
 80069f4:	40020400 	.word	0x40020400

080069f8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b09a      	sub	sp, #104	; 0x68
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006a00:	f107 030c 	add.w	r3, r7, #12
 8006a04:	225c      	movs	r2, #92	; 0x5c
 8006a06:	2100      	movs	r1, #0
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f012 f8d5 	bl	8018bb8 <memset>
  if(hrtc->Instance==RTC)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a0c      	ldr	r2, [pc, #48]	; (8006a44 <HAL_RTC_MspInit+0x4c>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d111      	bne.n	8006a3c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006a18:	2320      	movs	r3, #32
 8006a1a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006a1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a20:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006a22:	f107 030c 	add.w	r3, r7, #12
 8006a26:	4618      	mov	r0, r3
 8006a28:	f005 f822 	bl	800ba70 <HAL_RCCEx_PeriphCLKConfig>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d001      	beq.n	8006a36 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8006a32:	f7fb f905 	bl	8001c40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006a36:	4b04      	ldr	r3, [pc, #16]	; (8006a48 <HAL_RTC_MspInit+0x50>)
 8006a38:	2201      	movs	r2, #1
 8006a3a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006a3c:	bf00      	nop
 8006a3e:	3768      	adds	r7, #104	; 0x68
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}
 8006a44:	40002800 	.word	0x40002800
 8006a48:	42470e3c 	.word	0x42470e3c

08006a4c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b08a      	sub	sp, #40	; 0x28
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a54:	f107 0314 	add.w	r3, r7, #20
 8006a58:	2200      	movs	r2, #0
 8006a5a:	601a      	str	r2, [r3, #0]
 8006a5c:	605a      	str	r2, [r3, #4]
 8006a5e:	609a      	str	r2, [r3, #8]
 8006a60:	60da      	str	r2, [r3, #12]
 8006a62:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a69      	ldr	r2, [pc, #420]	; (8006c10 <HAL_SD_MspInit+0x1c4>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	f040 80cb 	bne.w	8006c06 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8006a70:	2300      	movs	r3, #0
 8006a72:	613b      	str	r3, [r7, #16]
 8006a74:	4b67      	ldr	r3, [pc, #412]	; (8006c14 <HAL_SD_MspInit+0x1c8>)
 8006a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a78:	4a66      	ldr	r2, [pc, #408]	; (8006c14 <HAL_SD_MspInit+0x1c8>)
 8006a7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006a7e:	6453      	str	r3, [r2, #68]	; 0x44
 8006a80:	4b64      	ldr	r3, [pc, #400]	; (8006c14 <HAL_SD_MspInit+0x1c8>)
 8006a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a88:	613b      	str	r3, [r7, #16]
 8006a8a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	60fb      	str	r3, [r7, #12]
 8006a90:	4b60      	ldr	r3, [pc, #384]	; (8006c14 <HAL_SD_MspInit+0x1c8>)
 8006a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a94:	4a5f      	ldr	r2, [pc, #380]	; (8006c14 <HAL_SD_MspInit+0x1c8>)
 8006a96:	f043 0304 	orr.w	r3, r3, #4
 8006a9a:	6313      	str	r3, [r2, #48]	; 0x30
 8006a9c:	4b5d      	ldr	r3, [pc, #372]	; (8006c14 <HAL_SD_MspInit+0x1c8>)
 8006a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa0:	f003 0304 	and.w	r3, r3, #4
 8006aa4:	60fb      	str	r3, [r7, #12]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	60bb      	str	r3, [r7, #8]
 8006aac:	4b59      	ldr	r3, [pc, #356]	; (8006c14 <HAL_SD_MspInit+0x1c8>)
 8006aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab0:	4a58      	ldr	r2, [pc, #352]	; (8006c14 <HAL_SD_MspInit+0x1c8>)
 8006ab2:	f043 0308 	orr.w	r3, r3, #8
 8006ab6:	6313      	str	r3, [r2, #48]	; 0x30
 8006ab8:	4b56      	ldr	r3, [pc, #344]	; (8006c14 <HAL_SD_MspInit+0x1c8>)
 8006aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006abc:	f003 0308 	and.w	r3, r3, #8
 8006ac0:	60bb      	str	r3, [r7, #8]
 8006ac2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006ac4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006ac8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006aca:	2302      	movs	r3, #2
 8006acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006ad6:	230c      	movs	r3, #12
 8006ad8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ada:	f107 0314 	add.w	r3, r7, #20
 8006ade:	4619      	mov	r1, r3
 8006ae0:	484d      	ldr	r0, [pc, #308]	; (8006c18 <HAL_SD_MspInit+0x1cc>)
 8006ae2:	f002 f9eb 	bl	8008ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006ae6:	2304      	movs	r3, #4
 8006ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006aea:	2302      	movs	r3, #2
 8006aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aee:	2300      	movs	r3, #0
 8006af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006af2:	2303      	movs	r3, #3
 8006af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006af6:	230c      	movs	r3, #12
 8006af8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006afa:	f107 0314 	add.w	r3, r7, #20
 8006afe:	4619      	mov	r1, r3
 8006b00:	4846      	ldr	r0, [pc, #280]	; (8006c1c <HAL_SD_MspInit+0x1d0>)
 8006b02:	f002 f9db 	bl	8008ebc <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8006b06:	4b46      	ldr	r3, [pc, #280]	; (8006c20 <HAL_SD_MspInit+0x1d4>)
 8006b08:	4a46      	ldr	r2, [pc, #280]	; (8006c24 <HAL_SD_MspInit+0x1d8>)
 8006b0a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006b0c:	4b44      	ldr	r3, [pc, #272]	; (8006c20 <HAL_SD_MspInit+0x1d4>)
 8006b0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006b12:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006b14:	4b42      	ldr	r3, [pc, #264]	; (8006c20 <HAL_SD_MspInit+0x1d4>)
 8006b16:	2200      	movs	r2, #0
 8006b18:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b1a:	4b41      	ldr	r3, [pc, #260]	; (8006c20 <HAL_SD_MspInit+0x1d4>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006b20:	4b3f      	ldr	r3, [pc, #252]	; (8006c20 <HAL_SD_MspInit+0x1d4>)
 8006b22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b26:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006b28:	4b3d      	ldr	r3, [pc, #244]	; (8006c20 <HAL_SD_MspInit+0x1d4>)
 8006b2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006b2e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006b30:	4b3b      	ldr	r3, [pc, #236]	; (8006c20 <HAL_SD_MspInit+0x1d4>)
 8006b32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006b36:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8006b38:	4b39      	ldr	r3, [pc, #228]	; (8006c20 <HAL_SD_MspInit+0x1d4>)
 8006b3a:	2220      	movs	r2, #32
 8006b3c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006b3e:	4b38      	ldr	r3, [pc, #224]	; (8006c20 <HAL_SD_MspInit+0x1d4>)
 8006b40:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006b44:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006b46:	4b36      	ldr	r3, [pc, #216]	; (8006c20 <HAL_SD_MspInit+0x1d4>)
 8006b48:	2204      	movs	r2, #4
 8006b4a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006b4c:	4b34      	ldr	r3, [pc, #208]	; (8006c20 <HAL_SD_MspInit+0x1d4>)
 8006b4e:	2203      	movs	r2, #3
 8006b50:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8006b52:	4b33      	ldr	r3, [pc, #204]	; (8006c20 <HAL_SD_MspInit+0x1d4>)
 8006b54:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006b58:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006b5a:	4b31      	ldr	r3, [pc, #196]	; (8006c20 <HAL_SD_MspInit+0x1d4>)
 8006b5c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006b60:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8006b62:	482f      	ldr	r0, [pc, #188]	; (8006c20 <HAL_SD_MspInit+0x1d4>)
 8006b64:	f001 fe0c 	bl	8008780 <HAL_DMA_Init>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d001      	beq.n	8006b72 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8006b6e:	f7fb f867 	bl	8001c40 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a2a      	ldr	r2, [pc, #168]	; (8006c20 <HAL_SD_MspInit+0x1d4>)
 8006b76:	641a      	str	r2, [r3, #64]	; 0x40
 8006b78:	4a29      	ldr	r2, [pc, #164]	; (8006c20 <HAL_SD_MspInit+0x1d4>)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8006b7e:	4b2a      	ldr	r3, [pc, #168]	; (8006c28 <HAL_SD_MspInit+0x1dc>)
 8006b80:	4a2a      	ldr	r2, [pc, #168]	; (8006c2c <HAL_SD_MspInit+0x1e0>)
 8006b82:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8006b84:	4b28      	ldr	r3, [pc, #160]	; (8006c28 <HAL_SD_MspInit+0x1dc>)
 8006b86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006b8a:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006b8c:	4b26      	ldr	r3, [pc, #152]	; (8006c28 <HAL_SD_MspInit+0x1dc>)
 8006b8e:	2240      	movs	r2, #64	; 0x40
 8006b90:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b92:	4b25      	ldr	r3, [pc, #148]	; (8006c28 <HAL_SD_MspInit+0x1dc>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006b98:	4b23      	ldr	r3, [pc, #140]	; (8006c28 <HAL_SD_MspInit+0x1dc>)
 8006b9a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b9e:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006ba0:	4b21      	ldr	r3, [pc, #132]	; (8006c28 <HAL_SD_MspInit+0x1dc>)
 8006ba2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006ba6:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006ba8:	4b1f      	ldr	r3, [pc, #124]	; (8006c28 <HAL_SD_MspInit+0x1dc>)
 8006baa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006bae:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8006bb0:	4b1d      	ldr	r3, [pc, #116]	; (8006c28 <HAL_SD_MspInit+0x1dc>)
 8006bb2:	2220      	movs	r2, #32
 8006bb4:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006bb6:	4b1c      	ldr	r3, [pc, #112]	; (8006c28 <HAL_SD_MspInit+0x1dc>)
 8006bb8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006bbc:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006bbe:	4b1a      	ldr	r3, [pc, #104]	; (8006c28 <HAL_SD_MspInit+0x1dc>)
 8006bc0:	2204      	movs	r2, #4
 8006bc2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006bc4:	4b18      	ldr	r3, [pc, #96]	; (8006c28 <HAL_SD_MspInit+0x1dc>)
 8006bc6:	2203      	movs	r2, #3
 8006bc8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006bca:	4b17      	ldr	r3, [pc, #92]	; (8006c28 <HAL_SD_MspInit+0x1dc>)
 8006bcc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006bd0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006bd2:	4b15      	ldr	r3, [pc, #84]	; (8006c28 <HAL_SD_MspInit+0x1dc>)
 8006bd4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006bd8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8006bda:	4813      	ldr	r0, [pc, #76]	; (8006c28 <HAL_SD_MspInit+0x1dc>)
 8006bdc:	f001 fdd0 	bl	8008780 <HAL_DMA_Init>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d001      	beq.n	8006bea <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8006be6:	f7fb f82b 	bl	8001c40 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a0e      	ldr	r2, [pc, #56]	; (8006c28 <HAL_SD_MspInit+0x1dc>)
 8006bee:	63da      	str	r2, [r3, #60]	; 0x3c
 8006bf0:	4a0d      	ldr	r2, [pc, #52]	; (8006c28 <HAL_SD_MspInit+0x1dc>)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	2031      	movs	r0, #49	; 0x31
 8006bfc:	f001 fd89 	bl	8008712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8006c00:	2031      	movs	r0, #49	; 0x31
 8006c02:	f001 fda2 	bl	800874a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8006c06:	bf00      	nop
 8006c08:	3728      	adds	r7, #40	; 0x28
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	40012c00 	.word	0x40012c00
 8006c14:	40023800 	.word	0x40023800
 8006c18:	40020800 	.word	0x40020800
 8006c1c:	40020c00 	.word	0x40020c00
 8006c20:	20000424 	.word	0x20000424
 8006c24:	40026458 	.word	0x40026458
 8006c28:	20000484 	.word	0x20000484
 8006c2c:	400264a0 	.word	0x400264a0

08006c30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a0e      	ldr	r2, [pc, #56]	; (8006c78 <HAL_TIM_Base_MspInit+0x48>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d115      	bne.n	8006c6e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006c42:	2300      	movs	r3, #0
 8006c44:	60fb      	str	r3, [r7, #12]
 8006c46:	4b0d      	ldr	r3, [pc, #52]	; (8006c7c <HAL_TIM_Base_MspInit+0x4c>)
 8006c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4a:	4a0c      	ldr	r2, [pc, #48]	; (8006c7c <HAL_TIM_Base_MspInit+0x4c>)
 8006c4c:	f043 0320 	orr.w	r3, r3, #32
 8006c50:	6413      	str	r3, [r2, #64]	; 0x40
 8006c52:	4b0a      	ldr	r3, [pc, #40]	; (8006c7c <HAL_TIM_Base_MspInit+0x4c>)
 8006c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c56:	f003 0320 	and.w	r3, r3, #32
 8006c5a:	60fb      	str	r3, [r7, #12]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006c5e:	2200      	movs	r2, #0
 8006c60:	2100      	movs	r1, #0
 8006c62:	2037      	movs	r0, #55	; 0x37
 8006c64:	f001 fd55 	bl	8008712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006c68:	2037      	movs	r0, #55	; 0x37
 8006c6a:	f001 fd6e 	bl	800874a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8006c6e:	bf00      	nop
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	40001400 	.word	0x40001400
 8006c7c:	40023800 	.word	0x40023800

08006c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006c80:	b480      	push	{r7}
 8006c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006c84:	e7fe      	b.n	8006c84 <NMI_Handler+0x4>

08006c86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006c86:	b480      	push	{r7}
 8006c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006c8a:	e7fe      	b.n	8006c8a <HardFault_Handler+0x4>

08006c8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006c90:	e7fe      	b.n	8006c90 <MemManage_Handler+0x4>

08006c92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006c92:	b480      	push	{r7}
 8006c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006c96:	e7fe      	b.n	8006c96 <BusFault_Handler+0x4>

08006c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006c9c:	e7fe      	b.n	8006c9c <UsageFault_Handler+0x4>

08006c9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006c9e:	b480      	push	{r7}
 8006ca0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006ca2:	bf00      	nop
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006cac:	b480      	push	{r7}
 8006cae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006cb0:	bf00      	nop
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr

08006cba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006cba:	b480      	push	{r7}
 8006cbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006cbe:	bf00      	nop
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006ccc:	f000 f922 	bl	8006f14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006cd0:	bf00      	nop
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006cd8:	4802      	ldr	r0, [pc, #8]	; (8006ce4 <CAN1_RX0_IRQHandler+0x10>)
 8006cda:	f001 fa10 	bl	80080fe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8006cde:	bf00      	nop
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	20000304 	.word	0x20000304

08006ce8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI0_Pin);
 8006cec:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006cf0:	f002 fac4 	bl	800927c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI1_Pin);
 8006cf4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006cf8:	f002 fac0 	bl	800927c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006cfc:	bf00      	nop
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8006d04:	4802      	ldr	r0, [pc, #8]	; (8006d10 <SDIO_IRQHandler+0x10>)
 8006d06:	f006 ffb1 	bl	800dc6c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8006d0a:	bf00      	nop
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	200003a0 	.word	0x200003a0

08006d14 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006d18:	4802      	ldr	r0, [pc, #8]	; (8006d24 <TIM7_IRQHandler+0x10>)
 8006d1a:	f008 f911 	bl	800ef40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006d1e:	bf00      	nop
 8006d20:	bd80      	pop	{r7, pc}
 8006d22:	bf00      	nop
 8006d24:	200004e4 	.word	0x200004e4

08006d28 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006d2c:	4802      	ldr	r0, [pc, #8]	; (8006d38 <DMA2_Stream0_IRQHandler+0x10>)
 8006d2e:	f001 fe4f 	bl	80089d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006d32:	bf00      	nop
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	20000244 	.word	0x20000244

08006d3c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8006d40:	4802      	ldr	r0, [pc, #8]	; (8006d4c <DMA2_Stream2_IRQHandler+0x10>)
 8006d42:	f001 fe45 	bl	80089d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006d46:	bf00      	nop
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	200002a4 	.word	0x200002a4

08006d50 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8006d54:	4802      	ldr	r0, [pc, #8]	; (8006d60 <DMA2_Stream3_IRQHandler+0x10>)
 8006d56:	f001 fe3b 	bl	80089d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8006d5a:	bf00      	nop
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	20000424 	.word	0x20000424

08006d64 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8006d68:	4802      	ldr	r0, [pc, #8]	; (8006d74 <OTG_FS_IRQHandler+0x10>)
 8006d6a:	f003 fb8b 	bl	800a484 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8006d6e:	bf00      	nop
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	20006c98 	.word	0x20006c98

08006d78 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8006d7c:	4802      	ldr	r0, [pc, #8]	; (8006d88 <DMA2_Stream6_IRQHandler+0x10>)
 8006d7e:	f001 fe27 	bl	80089d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8006d82:	bf00      	nop
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	20000484 	.word	0x20000484

08006d8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006d94:	4a14      	ldr	r2, [pc, #80]	; (8006de8 <_sbrk+0x5c>)
 8006d96:	4b15      	ldr	r3, [pc, #84]	; (8006dec <_sbrk+0x60>)
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006da0:	4b13      	ldr	r3, [pc, #76]	; (8006df0 <_sbrk+0x64>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d102      	bne.n	8006dae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006da8:	4b11      	ldr	r3, [pc, #68]	; (8006df0 <_sbrk+0x64>)
 8006daa:	4a12      	ldr	r2, [pc, #72]	; (8006df4 <_sbrk+0x68>)
 8006dac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006dae:	4b10      	ldr	r3, [pc, #64]	; (8006df0 <_sbrk+0x64>)
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4413      	add	r3, r2
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d207      	bcs.n	8006dcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006dbc:	f011 fec2 	bl	8018b44 <__errno>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	220c      	movs	r2, #12
 8006dc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8006dca:	e009      	b.n	8006de0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006dcc:	4b08      	ldr	r3, [pc, #32]	; (8006df0 <_sbrk+0x64>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006dd2:	4b07      	ldr	r3, [pc, #28]	; (8006df0 <_sbrk+0x64>)
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4413      	add	r3, r2
 8006dda:	4a05      	ldr	r2, [pc, #20]	; (8006df0 <_sbrk+0x64>)
 8006ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006dde:	68fb      	ldr	r3, [r7, #12]
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3718      	adds	r7, #24
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	20020000 	.word	0x20020000
 8006dec:	0000ffff 	.word	0x0000ffff
 8006df0:	2000678c 	.word	0x2000678c
 8006df4:	20007430 	.word	0x20007430

08006df8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006dfc:	4b06      	ldr	r3, [pc, #24]	; (8006e18 <SystemInit+0x20>)
 8006dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e02:	4a05      	ldr	r2, [pc, #20]	; (8006e18 <SystemInit+0x20>)
 8006e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006e0c:	bf00      	nop
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	e000ed00 	.word	0xe000ed00

08006e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006e54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006e20:	480d      	ldr	r0, [pc, #52]	; (8006e58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006e22:	490e      	ldr	r1, [pc, #56]	; (8006e5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006e24:	4a0e      	ldr	r2, [pc, #56]	; (8006e60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006e28:	e002      	b.n	8006e30 <LoopCopyDataInit>

08006e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006e2e:	3304      	adds	r3, #4

08006e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006e34:	d3f9      	bcc.n	8006e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006e36:	4a0b      	ldr	r2, [pc, #44]	; (8006e64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006e38:	4c0b      	ldr	r4, [pc, #44]	; (8006e68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006e3c:	e001      	b.n	8006e42 <LoopFillZerobss>

08006e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006e40:	3204      	adds	r2, #4

08006e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006e44:	d3fb      	bcc.n	8006e3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006e46:	f7ff ffd7 	bl	8006df8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006e4a:	f011 fe81 	bl	8018b50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006e4e:	f7fa fa73 	bl	8001338 <main>
  bx  lr    
 8006e52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006e54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006e5c:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 8006e60:	08019a48 	.word	0x08019a48
  ldr r2, =_sbss
 8006e64:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8006e68:	2000742c 	.word	0x2000742c

08006e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006e6c:	e7fe      	b.n	8006e6c <ADC_IRQHandler>
	...

08006e70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006e74:	4b0e      	ldr	r3, [pc, #56]	; (8006eb0 <HAL_Init+0x40>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a0d      	ldr	r2, [pc, #52]	; (8006eb0 <HAL_Init+0x40>)
 8006e7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006e80:	4b0b      	ldr	r3, [pc, #44]	; (8006eb0 <HAL_Init+0x40>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a0a      	ldr	r2, [pc, #40]	; (8006eb0 <HAL_Init+0x40>)
 8006e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006e8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006e8c:	4b08      	ldr	r3, [pc, #32]	; (8006eb0 <HAL_Init+0x40>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a07      	ldr	r2, [pc, #28]	; (8006eb0 <HAL_Init+0x40>)
 8006e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006e98:	2003      	movs	r0, #3
 8006e9a:	f001 fc2f 	bl	80086fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006e9e:	200f      	movs	r0, #15
 8006ea0:	f000 f808 	bl	8006eb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006ea4:	f7ff fbd2 	bl	800664c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	40023c00 	.word	0x40023c00

08006eb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006ebc:	4b12      	ldr	r3, [pc, #72]	; (8006f08 <HAL_InitTick+0x54>)
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	4b12      	ldr	r3, [pc, #72]	; (8006f0c <HAL_InitTick+0x58>)
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f001 fc47 	bl	8008766 <HAL_SYSTICK_Config>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d001      	beq.n	8006ee2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e00e      	b.n	8006f00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2b0f      	cmp	r3, #15
 8006ee6:	d80a      	bhi.n	8006efe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006ee8:	2200      	movs	r2, #0
 8006eea:	6879      	ldr	r1, [r7, #4]
 8006eec:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef0:	f001 fc0f 	bl	8008712 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006ef4:	4a06      	ldr	r2, [pc, #24]	; (8006f10 <HAL_InitTick+0x5c>)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006efa:	2300      	movs	r3, #0
 8006efc:	e000      	b.n	8006f00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	20000000 	.word	0x20000000
 8006f0c:	20000008 	.word	0x20000008
 8006f10:	20000004 	.word	0x20000004

08006f14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006f14:	b480      	push	{r7}
 8006f16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006f18:	4b06      	ldr	r3, [pc, #24]	; (8006f34 <HAL_IncTick+0x20>)
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	4b06      	ldr	r3, [pc, #24]	; (8006f38 <HAL_IncTick+0x24>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4413      	add	r3, r2
 8006f24:	4a04      	ldr	r2, [pc, #16]	; (8006f38 <HAL_IncTick+0x24>)
 8006f26:	6013      	str	r3, [r2, #0]
}
 8006f28:	bf00      	nop
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	20000008 	.word	0x20000008
 8006f38:	20006790 	.word	0x20006790

08006f3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8006f40:	4b03      	ldr	r3, [pc, #12]	; (8006f50 <HAL_GetTick+0x14>)
 8006f42:	681b      	ldr	r3, [r3, #0]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	20006790 	.word	0x20006790

08006f54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006f5c:	f7ff ffee 	bl	8006f3c <HAL_GetTick>
 8006f60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f6c:	d005      	beq.n	8006f7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006f6e:	4b0a      	ldr	r3, [pc, #40]	; (8006f98 <HAL_Delay+0x44>)
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	461a      	mov	r2, r3
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	4413      	add	r3, r2
 8006f78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006f7a:	bf00      	nop
 8006f7c:	f7ff ffde 	bl	8006f3c <HAL_GetTick>
 8006f80:	4602      	mov	r2, r0
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	68fa      	ldr	r2, [r7, #12]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d8f7      	bhi.n	8006f7c <HAL_Delay+0x28>
  {
  }
}
 8006f8c:	bf00      	nop
 8006f8e:	bf00      	nop
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	20000008 	.word	0x20000008

08006f9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006fae:	2301      	movs	r3, #1
 8006fb0:	e033      	b.n	800701a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d109      	bne.n	8006fce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f7ff fb6e 	bl	800669c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd2:	f003 0310 	and.w	r3, r3, #16
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d118      	bne.n	800700c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fde:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006fe2:	f023 0302 	bic.w	r3, r3, #2
 8006fe6:	f043 0202 	orr.w	r2, r3, #2
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 fa78 	bl	80074e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffe:	f023 0303 	bic.w	r3, r3, #3
 8007002:	f043 0201 	orr.w	r2, r3, #1
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	641a      	str	r2, [r3, #64]	; 0x40
 800700a:	e001      	b.n	8007010 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007018:	7bfb      	ldrb	r3, [r7, #15]
}
 800701a:	4618      	mov	r0, r3
 800701c:	3710      	adds	r7, #16
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
	...

08007024 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8007030:	2300      	movs	r3, #0
 8007032:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800703a:	2b01      	cmp	r3, #1
 800703c:	d101      	bne.n	8007042 <HAL_ADC_Start_DMA+0x1e>
 800703e:	2302      	movs	r3, #2
 8007040:	e0e9      	b.n	8007216 <HAL_ADC_Start_DMA+0x1f2>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2201      	movs	r2, #1
 8007046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	f003 0301 	and.w	r3, r3, #1
 8007054:	2b01      	cmp	r3, #1
 8007056:	d018      	beq.n	800708a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	689a      	ldr	r2, [r3, #8]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f042 0201 	orr.w	r2, r2, #1
 8007066:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007068:	4b6d      	ldr	r3, [pc, #436]	; (8007220 <HAL_ADC_Start_DMA+0x1fc>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a6d      	ldr	r2, [pc, #436]	; (8007224 <HAL_ADC_Start_DMA+0x200>)
 800706e:	fba2 2303 	umull	r2, r3, r2, r3
 8007072:	0c9a      	lsrs	r2, r3, #18
 8007074:	4613      	mov	r3, r2
 8007076:	005b      	lsls	r3, r3, #1
 8007078:	4413      	add	r3, r2
 800707a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800707c:	e002      	b.n	8007084 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	3b01      	subs	r3, #1
 8007082:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1f9      	bne.n	800707e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007098:	d107      	bne.n	80070aa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	689a      	ldr	r2, [r3, #8]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f003 0301 	and.w	r3, r3, #1
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	f040 80a1 	bne.w	80071fc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80070c2:	f023 0301 	bic.w	r3, r3, #1
 80070c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d007      	beq.n	80070ec <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80070e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070f8:	d106      	bne.n	8007108 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070fe:	f023 0206 	bic.w	r2, r3, #6
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	645a      	str	r2, [r3, #68]	; 0x44
 8007106:	e002      	b.n	800710e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2200      	movs	r2, #0
 800710c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007116:	4b44      	ldr	r3, [pc, #272]	; (8007228 <HAL_ADC_Start_DMA+0x204>)
 8007118:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711e:	4a43      	ldr	r2, [pc, #268]	; (800722c <HAL_ADC_Start_DMA+0x208>)
 8007120:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007126:	4a42      	ldr	r2, [pc, #264]	; (8007230 <HAL_ADC_Start_DMA+0x20c>)
 8007128:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712e:	4a41      	ldr	r2, [pc, #260]	; (8007234 <HAL_ADC_Start_DMA+0x210>)
 8007130:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800713a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	685a      	ldr	r2, [r3, #4]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800714a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	689a      	ldr	r2, [r3, #8]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800715a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	334c      	adds	r3, #76	; 0x4c
 8007166:	4619      	mov	r1, r3
 8007168:	68ba      	ldr	r2, [r7, #8]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f001 fbb6 	bl	80088dc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	f003 031f 	and.w	r3, r3, #31
 8007178:	2b00      	cmp	r3, #0
 800717a:	d12a      	bne.n	80071d2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a2d      	ldr	r2, [pc, #180]	; (8007238 <HAL_ADC_Start_DMA+0x214>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d015      	beq.n	80071b2 <HAL_ADC_Start_DMA+0x18e>
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a2c      	ldr	r2, [pc, #176]	; (800723c <HAL_ADC_Start_DMA+0x218>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d105      	bne.n	800719c <HAL_ADC_Start_DMA+0x178>
 8007190:	4b25      	ldr	r3, [pc, #148]	; (8007228 <HAL_ADC_Start_DMA+0x204>)
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f003 031f 	and.w	r3, r3, #31
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00a      	beq.n	80071b2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a27      	ldr	r2, [pc, #156]	; (8007240 <HAL_ADC_Start_DMA+0x21c>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d136      	bne.n	8007214 <HAL_ADC_Start_DMA+0x1f0>
 80071a6:	4b20      	ldr	r3, [pc, #128]	; (8007228 <HAL_ADC_Start_DMA+0x204>)
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	f003 0310 	and.w	r3, r3, #16
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d130      	bne.n	8007214 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	689b      	ldr	r3, [r3, #8]
 80071b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d129      	bne.n	8007214 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	689a      	ldr	r2, [r3, #8]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80071ce:	609a      	str	r2, [r3, #8]
 80071d0:	e020      	b.n	8007214 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a18      	ldr	r2, [pc, #96]	; (8007238 <HAL_ADC_Start_DMA+0x214>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d11b      	bne.n	8007214 <HAL_ADC_Start_DMA+0x1f0>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d114      	bne.n	8007214 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	689a      	ldr	r2, [r3, #8]
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80071f8:	609a      	str	r2, [r3, #8]
 80071fa:	e00b      	b.n	8007214 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007200:	f043 0210 	orr.w	r2, r3, #16
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800720c:	f043 0201 	orr.w	r2, r3, #1
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3718      	adds	r7, #24
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	20000000 	.word	0x20000000
 8007224:	431bde83 	.word	0x431bde83
 8007228:	40012300 	.word	0x40012300
 800722c:	080076dd 	.word	0x080076dd
 8007230:	08007797 	.word	0x08007797
 8007234:	080077b3 	.word	0x080077b3
 8007238:	40012000 	.word	0x40012000
 800723c:	40012100 	.word	0x40012100
 8007240:	40012200 	.word	0x40012200

08007244 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800724c:	bf00      	nop
 800724e:	370c      	adds	r7, #12
 8007250:	46bd      	mov	sp, r7
 8007252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007256:	4770      	bx	lr

08007258 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8007260:	bf00      	nop
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007274:	bf00      	nop
 8007276:	370c      	adds	r7, #12
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800728a:	2300      	movs	r3, #0
 800728c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007294:	2b01      	cmp	r3, #1
 8007296:	d101      	bne.n	800729c <HAL_ADC_ConfigChannel+0x1c>
 8007298:	2302      	movs	r3, #2
 800729a:	e113      	b.n	80074c4 <HAL_ADC_ConfigChannel+0x244>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2b09      	cmp	r3, #9
 80072aa:	d925      	bls.n	80072f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68d9      	ldr	r1, [r3, #12]
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	461a      	mov	r2, r3
 80072ba:	4613      	mov	r3, r2
 80072bc:	005b      	lsls	r3, r3, #1
 80072be:	4413      	add	r3, r2
 80072c0:	3b1e      	subs	r3, #30
 80072c2:	2207      	movs	r2, #7
 80072c4:	fa02 f303 	lsl.w	r3, r2, r3
 80072c8:	43da      	mvns	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	400a      	ands	r2, r1
 80072d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68d9      	ldr	r1, [r3, #12]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	689a      	ldr	r2, [r3, #8]
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	4618      	mov	r0, r3
 80072e4:	4603      	mov	r3, r0
 80072e6:	005b      	lsls	r3, r3, #1
 80072e8:	4403      	add	r3, r0
 80072ea:	3b1e      	subs	r3, #30
 80072ec:	409a      	lsls	r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	430a      	orrs	r2, r1
 80072f4:	60da      	str	r2, [r3, #12]
 80072f6:	e022      	b.n	800733e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	6919      	ldr	r1, [r3, #16]
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	b29b      	uxth	r3, r3
 8007304:	461a      	mov	r2, r3
 8007306:	4613      	mov	r3, r2
 8007308:	005b      	lsls	r3, r3, #1
 800730a:	4413      	add	r3, r2
 800730c:	2207      	movs	r2, #7
 800730e:	fa02 f303 	lsl.w	r3, r2, r3
 8007312:	43da      	mvns	r2, r3
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	400a      	ands	r2, r1
 800731a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6919      	ldr	r1, [r3, #16]
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	689a      	ldr	r2, [r3, #8]
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	b29b      	uxth	r3, r3
 800732c:	4618      	mov	r0, r3
 800732e:	4603      	mov	r3, r0
 8007330:	005b      	lsls	r3, r3, #1
 8007332:	4403      	add	r3, r0
 8007334:	409a      	lsls	r2, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	430a      	orrs	r2, r1
 800733c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	2b06      	cmp	r3, #6
 8007344:	d824      	bhi.n	8007390 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	685a      	ldr	r2, [r3, #4]
 8007350:	4613      	mov	r3, r2
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	4413      	add	r3, r2
 8007356:	3b05      	subs	r3, #5
 8007358:	221f      	movs	r2, #31
 800735a:	fa02 f303 	lsl.w	r3, r2, r3
 800735e:	43da      	mvns	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	400a      	ands	r2, r1
 8007366:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	b29b      	uxth	r3, r3
 8007374:	4618      	mov	r0, r3
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	685a      	ldr	r2, [r3, #4]
 800737a:	4613      	mov	r3, r2
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	4413      	add	r3, r2
 8007380:	3b05      	subs	r3, #5
 8007382:	fa00 f203 	lsl.w	r2, r0, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	430a      	orrs	r2, r1
 800738c:	635a      	str	r2, [r3, #52]	; 0x34
 800738e:	e04c      	b.n	800742a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	2b0c      	cmp	r3, #12
 8007396:	d824      	bhi.n	80073e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	685a      	ldr	r2, [r3, #4]
 80073a2:	4613      	mov	r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	4413      	add	r3, r2
 80073a8:	3b23      	subs	r3, #35	; 0x23
 80073aa:	221f      	movs	r2, #31
 80073ac:	fa02 f303 	lsl.w	r3, r2, r3
 80073b0:	43da      	mvns	r2, r3
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	400a      	ands	r2, r1
 80073b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	4618      	mov	r0, r3
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	685a      	ldr	r2, [r3, #4]
 80073cc:	4613      	mov	r3, r2
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4413      	add	r3, r2
 80073d2:	3b23      	subs	r3, #35	; 0x23
 80073d4:	fa00 f203 	lsl.w	r2, r0, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	430a      	orrs	r2, r1
 80073de:	631a      	str	r2, [r3, #48]	; 0x30
 80073e0:	e023      	b.n	800742a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	685a      	ldr	r2, [r3, #4]
 80073ec:	4613      	mov	r3, r2
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	4413      	add	r3, r2
 80073f2:	3b41      	subs	r3, #65	; 0x41
 80073f4:	221f      	movs	r2, #31
 80073f6:	fa02 f303 	lsl.w	r3, r2, r3
 80073fa:	43da      	mvns	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	400a      	ands	r2, r1
 8007402:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	b29b      	uxth	r3, r3
 8007410:	4618      	mov	r0, r3
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	685a      	ldr	r2, [r3, #4]
 8007416:	4613      	mov	r3, r2
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	4413      	add	r3, r2
 800741c:	3b41      	subs	r3, #65	; 0x41
 800741e:	fa00 f203 	lsl.w	r2, r0, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	430a      	orrs	r2, r1
 8007428:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800742a:	4b29      	ldr	r3, [pc, #164]	; (80074d0 <HAL_ADC_ConfigChannel+0x250>)
 800742c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a28      	ldr	r2, [pc, #160]	; (80074d4 <HAL_ADC_ConfigChannel+0x254>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d10f      	bne.n	8007458 <HAL_ADC_ConfigChannel+0x1d8>
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2b12      	cmp	r3, #18
 800743e:	d10b      	bne.n	8007458 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a1d      	ldr	r2, [pc, #116]	; (80074d4 <HAL_ADC_ConfigChannel+0x254>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d12b      	bne.n	80074ba <HAL_ADC_ConfigChannel+0x23a>
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a1c      	ldr	r2, [pc, #112]	; (80074d8 <HAL_ADC_ConfigChannel+0x258>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d003      	beq.n	8007474 <HAL_ADC_ConfigChannel+0x1f4>
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2b11      	cmp	r3, #17
 8007472:	d122      	bne.n	80074ba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a11      	ldr	r2, [pc, #68]	; (80074d8 <HAL_ADC_ConfigChannel+0x258>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d111      	bne.n	80074ba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007496:	4b11      	ldr	r3, [pc, #68]	; (80074dc <HAL_ADC_ConfigChannel+0x25c>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a11      	ldr	r2, [pc, #68]	; (80074e0 <HAL_ADC_ConfigChannel+0x260>)
 800749c:	fba2 2303 	umull	r2, r3, r2, r3
 80074a0:	0c9a      	lsrs	r2, r3, #18
 80074a2:	4613      	mov	r3, r2
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	4413      	add	r3, r2
 80074a8:	005b      	lsls	r3, r3, #1
 80074aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80074ac:	e002      	b.n	80074b4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	3b01      	subs	r3, #1
 80074b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1f9      	bne.n	80074ae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3714      	adds	r7, #20
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	40012300 	.word	0x40012300
 80074d4:	40012000 	.word	0x40012000
 80074d8:	10000012 	.word	0x10000012
 80074dc:	20000000 	.word	0x20000000
 80074e0:	431bde83 	.word	0x431bde83

080074e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80074ec:	4b79      	ldr	r3, [pc, #484]	; (80076d4 <ADC_Init+0x1f0>)
 80074ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	685a      	ldr	r2, [r3, #4]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	431a      	orrs	r2, r3
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	685a      	ldr	r2, [r3, #4]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007518:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	6859      	ldr	r1, [r3, #4]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	021a      	lsls	r2, r3, #8
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	430a      	orrs	r2, r1
 800752c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	685a      	ldr	r2, [r3, #4]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800753c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	6859      	ldr	r1, [r3, #4]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	689a      	ldr	r2, [r3, #8]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	430a      	orrs	r2, r1
 800754e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	689a      	ldr	r2, [r3, #8]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800755e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	6899      	ldr	r1, [r3, #8]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	68da      	ldr	r2, [r3, #12]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	430a      	orrs	r2, r1
 8007570:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007576:	4a58      	ldr	r2, [pc, #352]	; (80076d8 <ADC_Init+0x1f4>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d022      	beq.n	80075c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	689a      	ldr	r2, [r3, #8]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800758a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	6899      	ldr	r1, [r3, #8]
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	430a      	orrs	r2, r1
 800759c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	689a      	ldr	r2, [r3, #8]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80075ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	6899      	ldr	r1, [r3, #8]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	430a      	orrs	r2, r1
 80075be:	609a      	str	r2, [r3, #8]
 80075c0:	e00f      	b.n	80075e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	689a      	ldr	r2, [r3, #8]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80075d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	689a      	ldr	r2, [r3, #8]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80075e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	689a      	ldr	r2, [r3, #8]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f022 0202 	bic.w	r2, r2, #2
 80075f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	6899      	ldr	r1, [r3, #8]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	7e1b      	ldrb	r3, [r3, #24]
 80075fc:	005a      	lsls	r2, r3, #1
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	430a      	orrs	r2, r1
 8007604:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 3020 	ldrb.w	r3, [r3, #32]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d01b      	beq.n	8007648 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	685a      	ldr	r2, [r3, #4]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800761e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	685a      	ldr	r2, [r3, #4]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800762e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	6859      	ldr	r1, [r3, #4]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763a:	3b01      	subs	r3, #1
 800763c:	035a      	lsls	r2, r3, #13
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	430a      	orrs	r2, r1
 8007644:	605a      	str	r2, [r3, #4]
 8007646:	e007      	b.n	8007658 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	685a      	ldr	r2, [r3, #4]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007656:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007666:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	69db      	ldr	r3, [r3, #28]
 8007672:	3b01      	subs	r3, #1
 8007674:	051a      	lsls	r2, r3, #20
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	430a      	orrs	r2, r1
 800767c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	689a      	ldr	r2, [r3, #8]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800768c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	6899      	ldr	r1, [r3, #8]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800769a:	025a      	lsls	r2, r3, #9
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	430a      	orrs	r2, r1
 80076a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	689a      	ldr	r2, [r3, #8]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	6899      	ldr	r1, [r3, #8]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	695b      	ldr	r3, [r3, #20]
 80076be:	029a      	lsls	r2, r3, #10
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	430a      	orrs	r2, r1
 80076c6:	609a      	str	r2, [r3, #8]
}
 80076c8:	bf00      	nop
 80076ca:	3714      	adds	r7, #20
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr
 80076d4:	40012300 	.word	0x40012300
 80076d8:	0f000001 	.word	0x0f000001

080076dc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d13c      	bne.n	8007770 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d12b      	bne.n	8007768 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007714:	2b00      	cmp	r3, #0
 8007716:	d127      	bne.n	8007768 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007722:	2b00      	cmp	r3, #0
 8007724:	d006      	beq.n	8007734 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007730:	2b00      	cmp	r3, #0
 8007732:	d119      	bne.n	8007768 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	685a      	ldr	r2, [r3, #4]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f022 0220 	bic.w	r2, r2, #32
 8007742:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007748:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007754:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007758:	2b00      	cmp	r3, #0
 800775a:	d105      	bne.n	8007768 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007760:	f043 0201 	orr.w	r2, r3, #1
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f7ff fd6b 	bl	8007244 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800776e:	e00e      	b.n	800778e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007774:	f003 0310 	and.w	r3, r3, #16
 8007778:	2b00      	cmp	r3, #0
 800777a:	d003      	beq.n	8007784 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800777c:	68f8      	ldr	r0, [r7, #12]
 800777e:	f7ff fd75 	bl	800726c <HAL_ADC_ErrorCallback>
}
 8007782:	e004      	b.n	800778e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	4798      	blx	r3
}
 800778e:	bf00      	nop
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b084      	sub	sp, #16
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077a2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f7ff fd57 	bl	8007258 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80077aa:	bf00      	nop
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b084      	sub	sp, #16
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077be:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2240      	movs	r2, #64	; 0x40
 80077c4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ca:	f043 0204 	orr.w	r2, r3, #4
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f7ff fd4a 	bl	800726c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80077d8:	bf00      	nop
 80077da:	3710      	adds	r7, #16
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d101      	bne.n	80077f2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80077ee:	2301      	movs	r3, #1
 80077f0:	e0ed      	b.n	80079ce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d102      	bne.n	8007804 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f7ff f862 	bl	80068c8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f042 0201 	orr.w	r2, r2, #1
 8007812:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007814:	f7ff fb92 	bl	8006f3c <HAL_GetTick>
 8007818:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800781a:	e012      	b.n	8007842 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800781c:	f7ff fb8e 	bl	8006f3c <HAL_GetTick>
 8007820:	4602      	mov	r2, r0
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	2b0a      	cmp	r3, #10
 8007828:	d90b      	bls.n	8007842 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2205      	movs	r2, #5
 800783a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e0c5      	b.n	80079ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	f003 0301 	and.w	r3, r3, #1
 800784c:	2b00      	cmp	r3, #0
 800784e:	d0e5      	beq.n	800781c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f022 0202 	bic.w	r2, r2, #2
 800785e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007860:	f7ff fb6c 	bl	8006f3c <HAL_GetTick>
 8007864:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007866:	e012      	b.n	800788e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007868:	f7ff fb68 	bl	8006f3c <HAL_GetTick>
 800786c:	4602      	mov	r2, r0
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	2b0a      	cmp	r3, #10
 8007874:	d90b      	bls.n	800788e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2205      	movs	r2, #5
 8007886:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	e09f      	b.n	80079ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	f003 0302 	and.w	r3, r3, #2
 8007898:	2b00      	cmp	r3, #0
 800789a:	d1e5      	bne.n	8007868 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	7e1b      	ldrb	r3, [r3, #24]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d108      	bne.n	80078b6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80078b2:	601a      	str	r2, [r3, #0]
 80078b4:	e007      	b.n	80078c6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80078c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	7e5b      	ldrb	r3, [r3, #25]
 80078ca:	2b01      	cmp	r3, #1
 80078cc:	d108      	bne.n	80078e0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078dc:	601a      	str	r2, [r3, #0]
 80078de:	e007      	b.n	80078f0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	681a      	ldr	r2, [r3, #0]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	7e9b      	ldrb	r3, [r3, #26]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d108      	bne.n	800790a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	681a      	ldr	r2, [r3, #0]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f042 0220 	orr.w	r2, r2, #32
 8007906:	601a      	str	r2, [r3, #0]
 8007908:	e007      	b.n	800791a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f022 0220 	bic.w	r2, r2, #32
 8007918:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	7edb      	ldrb	r3, [r3, #27]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d108      	bne.n	8007934 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f022 0210 	bic.w	r2, r2, #16
 8007930:	601a      	str	r2, [r3, #0]
 8007932:	e007      	b.n	8007944 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f042 0210 	orr.w	r2, r2, #16
 8007942:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	7f1b      	ldrb	r3, [r3, #28]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d108      	bne.n	800795e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f042 0208 	orr.w	r2, r2, #8
 800795a:	601a      	str	r2, [r3, #0]
 800795c:	e007      	b.n	800796e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f022 0208 	bic.w	r2, r2, #8
 800796c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	7f5b      	ldrb	r3, [r3, #29]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d108      	bne.n	8007988 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	681a      	ldr	r2, [r3, #0]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f042 0204 	orr.w	r2, r2, #4
 8007984:	601a      	str	r2, [r3, #0]
 8007986:	e007      	b.n	8007998 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	681a      	ldr	r2, [r3, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f022 0204 	bic.w	r2, r2, #4
 8007996:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	689a      	ldr	r2, [r3, #8]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	431a      	orrs	r2, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	431a      	orrs	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	695b      	ldr	r3, [r3, #20]
 80079ac:	ea42 0103 	orr.w	r1, r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	1e5a      	subs	r2, r3, #1
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	430a      	orrs	r2, r1
 80079bc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}
	...

080079d8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80079d8:	b480      	push	{r7}
 80079da:	b087      	sub	sp, #28
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80079ee:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80079f0:	7cfb      	ldrb	r3, [r7, #19]
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d003      	beq.n	80079fe <HAL_CAN_ConfigFilter+0x26>
 80079f6:	7cfb      	ldrb	r3, [r7, #19]
 80079f8:	2b02      	cmp	r3, #2
 80079fa:	f040 80be 	bne.w	8007b7a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80079fe:	4b65      	ldr	r3, [pc, #404]	; (8007b94 <HAL_CAN_ConfigFilter+0x1bc>)
 8007a00:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a08:	f043 0201 	orr.w	r2, r3, #1
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007a18:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2c:	021b      	lsls	r3, r3, #8
 8007a2e:	431a      	orrs	r2, r3
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	695b      	ldr	r3, [r3, #20]
 8007a3a:	f003 031f 	and.w	r3, r3, #31
 8007a3e:	2201      	movs	r2, #1
 8007a40:	fa02 f303 	lsl.w	r3, r2, r3
 8007a44:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	43db      	mvns	r3, r3
 8007a50:	401a      	ands	r2, r3
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	69db      	ldr	r3, [r3, #28]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d123      	bne.n	8007aa8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	43db      	mvns	r3, r3
 8007a6a:	401a      	ands	r2, r3
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	685b      	ldr	r3, [r3, #4]
 8007a7c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007a7e:	683a      	ldr	r2, [r7, #0]
 8007a80:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007a82:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	3248      	adds	r2, #72	; 0x48
 8007a88:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007a9c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007a9e:	6979      	ldr	r1, [r7, #20]
 8007aa0:	3348      	adds	r3, #72	; 0x48
 8007aa2:	00db      	lsls	r3, r3, #3
 8007aa4:	440b      	add	r3, r1
 8007aa6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	69db      	ldr	r3, [r3, #28]
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d122      	bne.n	8007af6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	431a      	orrs	r2, r3
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007acc:	683a      	ldr	r2, [r7, #0]
 8007ace:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007ad0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	3248      	adds	r2, #72	; 0x48
 8007ad6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007aea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007aec:	6979      	ldr	r1, [r7, #20]
 8007aee:	3348      	adds	r3, #72	; 0x48
 8007af0:	00db      	lsls	r3, r3, #3
 8007af2:	440b      	add	r3, r1
 8007af4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	699b      	ldr	r3, [r3, #24]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d109      	bne.n	8007b12 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	43db      	mvns	r3, r3
 8007b08:	401a      	ands	r2, r3
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8007b10:	e007      	b.n	8007b22 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	431a      	orrs	r2, r3
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d109      	bne.n	8007b3e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	43db      	mvns	r3, r3
 8007b34:	401a      	ands	r2, r3
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8007b3c:	e007      	b.n	8007b4e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	431a      	orrs	r2, r3
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d107      	bne.n	8007b66 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	431a      	orrs	r2, r3
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007b6c:	f023 0201 	bic.w	r2, r3, #1
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8007b76:	2300      	movs	r3, #0
 8007b78:	e006      	b.n	8007b88 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007b86:	2301      	movs	r3, #1
  }
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	371c      	adds	r7, #28
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr
 8007b94:	40006400 	.word	0x40006400

08007b98 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ba6:	b2db      	uxtb	r3, r3
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d12e      	bne.n	8007c0a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2202      	movs	r2, #2
 8007bb0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f022 0201 	bic.w	r2, r2, #1
 8007bc2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007bc4:	f7ff f9ba 	bl	8006f3c <HAL_GetTick>
 8007bc8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007bca:	e012      	b.n	8007bf2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007bcc:	f7ff f9b6 	bl	8006f3c <HAL_GetTick>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	2b0a      	cmp	r3, #10
 8007bd8:	d90b      	bls.n	8007bf2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bde:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2205      	movs	r2, #5
 8007bea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e012      	b.n	8007c18 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	f003 0301 	and.w	r3, r3, #1
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d1e5      	bne.n	8007bcc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8007c06:	2300      	movs	r3, #0
 8007c08:	e006      	b.n	8007c18 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007c16:	2301      	movs	r3, #1
  }
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3710      	adds	r7, #16
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b089      	sub	sp, #36	; 0x24
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	607a      	str	r2, [r7, #4]
 8007c2c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c34:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8007c3e:	7ffb      	ldrb	r3, [r7, #31]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d003      	beq.n	8007c4c <HAL_CAN_AddTxMessage+0x2c>
 8007c44:	7ffb      	ldrb	r3, [r7, #31]
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	f040 80b8 	bne.w	8007dbc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10a      	bne.n	8007c6c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d105      	bne.n	8007c6c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f000 80a0 	beq.w	8007dac <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	0e1b      	lsrs	r3, r3, #24
 8007c70:	f003 0303 	and.w	r3, r3, #3
 8007c74:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	2b02      	cmp	r3, #2
 8007c7a:	d907      	bls.n	8007c8c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c80:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e09e      	b.n	8007dca <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	409a      	lsls	r2, r3
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d10d      	bne.n	8007cba <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007ca8:	68f9      	ldr	r1, [r7, #12]
 8007caa:	6809      	ldr	r1, [r1, #0]
 8007cac:	431a      	orrs	r2, r3
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	3318      	adds	r3, #24
 8007cb2:	011b      	lsls	r3, r3, #4
 8007cb4:	440b      	add	r3, r1
 8007cb6:	601a      	str	r2, [r3, #0]
 8007cb8:	e00f      	b.n	8007cda <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007cc4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007cca:	68f9      	ldr	r1, [r7, #12]
 8007ccc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8007cce:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	3318      	adds	r3, #24
 8007cd4:	011b      	lsls	r3, r3, #4
 8007cd6:	440b      	add	r3, r1
 8007cd8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6819      	ldr	r1, [r3, #0]
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	691a      	ldr	r2, [r3, #16]
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	3318      	adds	r3, #24
 8007ce6:	011b      	lsls	r3, r3, #4
 8007ce8:	440b      	add	r3, r1
 8007cea:	3304      	adds	r3, #4
 8007cec:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	7d1b      	ldrb	r3, [r3, #20]
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d111      	bne.n	8007d1a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	3318      	adds	r3, #24
 8007cfe:	011b      	lsls	r3, r3, #4
 8007d00:	4413      	add	r3, r2
 8007d02:	3304      	adds	r3, #4
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68fa      	ldr	r2, [r7, #12]
 8007d08:	6811      	ldr	r1, [r2, #0]
 8007d0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	3318      	adds	r3, #24
 8007d12:	011b      	lsls	r3, r3, #4
 8007d14:	440b      	add	r3, r1
 8007d16:	3304      	adds	r3, #4
 8007d18:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	3307      	adds	r3, #7
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	061a      	lsls	r2, r3, #24
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	3306      	adds	r3, #6
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	041b      	lsls	r3, r3, #16
 8007d2a:	431a      	orrs	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	3305      	adds	r3, #5
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	021b      	lsls	r3, r3, #8
 8007d34:	4313      	orrs	r3, r2
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	3204      	adds	r2, #4
 8007d3a:	7812      	ldrb	r2, [r2, #0]
 8007d3c:	4610      	mov	r0, r2
 8007d3e:	68fa      	ldr	r2, [r7, #12]
 8007d40:	6811      	ldr	r1, [r2, #0]
 8007d42:	ea43 0200 	orr.w	r2, r3, r0
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	011b      	lsls	r3, r3, #4
 8007d4a:	440b      	add	r3, r1
 8007d4c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8007d50:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	3303      	adds	r3, #3
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	061a      	lsls	r2, r3, #24
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	3302      	adds	r3, #2
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	041b      	lsls	r3, r3, #16
 8007d62:	431a      	orrs	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	3301      	adds	r3, #1
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	021b      	lsls	r3, r3, #8
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	7812      	ldrb	r2, [r2, #0]
 8007d72:	4610      	mov	r0, r2
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	6811      	ldr	r1, [r2, #0]
 8007d78:	ea43 0200 	orr.w	r2, r3, r0
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	011b      	lsls	r3, r3, #4
 8007d80:	440b      	add	r3, r1
 8007d82:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8007d86:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	3318      	adds	r3, #24
 8007d90:	011b      	lsls	r3, r3, #4
 8007d92:	4413      	add	r3, r2
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	6811      	ldr	r1, [r2, #0]
 8007d9a:	f043 0201 	orr.w	r2, r3, #1
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	3318      	adds	r3, #24
 8007da2:	011b      	lsls	r3, r3, #4
 8007da4:	440b      	add	r3, r1
 8007da6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8007da8:	2300      	movs	r3, #0
 8007daa:	e00e      	b.n	8007dca <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8007db8:	2301      	movs	r3, #1
 8007dba:	e006      	b.n	8007dca <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
  }
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3724      	adds	r7, #36	; 0x24
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr

08007dd6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8007dd6:	b480      	push	{r7}
 8007dd8:	b085      	sub	sp, #20
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8007dde:	2300      	movs	r3, #0
 8007de0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007de8:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8007dea:	7afb      	ldrb	r3, [r7, #11]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d002      	beq.n	8007df6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8007df0:	7afb      	ldrb	r3, [r7, #11]
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d11d      	bne.n	8007e32 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d002      	beq.n	8007e0a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	3301      	adds	r3, #1
 8007e08:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d002      	beq.n	8007e1e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d002      	beq.n	8007e32 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8007e32:	68fb      	ldr	r3, [r7, #12]
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3714      	adds	r7, #20
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8007e40:	b480      	push	{r7}
 8007e42:	b087      	sub	sp, #28
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	607a      	str	r2, [r7, #4]
 8007e4c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e54:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007e56:	7dfb      	ldrb	r3, [r7, #23]
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d003      	beq.n	8007e64 <HAL_CAN_GetRxMessage+0x24>
 8007e5c:	7dfb      	ldrb	r3, [r7, #23]
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	f040 80f3 	bne.w	800804a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d10e      	bne.n	8007e88 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	f003 0303 	and.w	r3, r3, #3
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d116      	bne.n	8007ea6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	e0e7      	b.n	8008058 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	691b      	ldr	r3, [r3, #16]
 8007e8e:	f003 0303 	and.w	r3, r3, #3
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d107      	bne.n	8007ea6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e0d8      	b.n	8008058 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	331b      	adds	r3, #27
 8007eae:	011b      	lsls	r3, r3, #4
 8007eb0:	4413      	add	r3, r2
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f003 0204 	and.w	r2, r3, #4
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d10c      	bne.n	8007ede <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681a      	ldr	r2, [r3, #0]
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	331b      	adds	r3, #27
 8007ecc:	011b      	lsls	r3, r3, #4
 8007ece:	4413      	add	r3, r2
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	0d5b      	lsrs	r3, r3, #21
 8007ed4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	601a      	str	r2, [r3, #0]
 8007edc:	e00b      	b.n	8007ef6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	331b      	adds	r3, #27
 8007ee6:	011b      	lsls	r3, r3, #4
 8007ee8:	4413      	add	r3, r2
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	08db      	lsrs	r3, r3, #3
 8007eee:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	331b      	adds	r3, #27
 8007efe:	011b      	lsls	r3, r3, #4
 8007f00:	4413      	add	r3, r2
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f003 0202 	and.w	r2, r3, #2
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	331b      	adds	r3, #27
 8007f14:	011b      	lsls	r3, r3, #4
 8007f16:	4413      	add	r3, r2
 8007f18:	3304      	adds	r3, #4
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 020f 	and.w	r2, r3, #15
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	331b      	adds	r3, #27
 8007f2c:	011b      	lsls	r3, r3, #4
 8007f2e:	4413      	add	r3, r2
 8007f30:	3304      	adds	r3, #4
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	0a1b      	lsrs	r3, r3, #8
 8007f36:	b2da      	uxtb	r2, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681a      	ldr	r2, [r3, #0]
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	331b      	adds	r3, #27
 8007f44:	011b      	lsls	r3, r3, #4
 8007f46:	4413      	add	r3, r2
 8007f48:	3304      	adds	r3, #4
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	0c1b      	lsrs	r3, r3, #16
 8007f4e:	b29a      	uxth	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	011b      	lsls	r3, r3, #4
 8007f5c:	4413      	add	r3, r2
 8007f5e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	b2da      	uxtb	r2, r3
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	011b      	lsls	r3, r3, #4
 8007f72:	4413      	add	r3, r2
 8007f74:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	0a1a      	lsrs	r2, r3, #8
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	b2d2      	uxtb	r2, r2
 8007f82:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	011b      	lsls	r3, r3, #4
 8007f8c:	4413      	add	r3, r2
 8007f8e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	0c1a      	lsrs	r2, r3, #16
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	3302      	adds	r3, #2
 8007f9a:	b2d2      	uxtb	r2, r2
 8007f9c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	011b      	lsls	r3, r3, #4
 8007fa6:	4413      	add	r3, r2
 8007fa8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	0e1a      	lsrs	r2, r3, #24
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	3303      	adds	r3, #3
 8007fb4:	b2d2      	uxtb	r2, r2
 8007fb6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	011b      	lsls	r3, r3, #4
 8007fc0:	4413      	add	r3, r2
 8007fc2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	3304      	adds	r3, #4
 8007fcc:	b2d2      	uxtb	r2, r2
 8007fce:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	011b      	lsls	r3, r3, #4
 8007fd8:	4413      	add	r3, r2
 8007fda:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	0a1a      	lsrs	r2, r3, #8
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	3305      	adds	r3, #5
 8007fe6:	b2d2      	uxtb	r2, r2
 8007fe8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681a      	ldr	r2, [r3, #0]
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	011b      	lsls	r3, r3, #4
 8007ff2:	4413      	add	r3, r2
 8007ff4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	0c1a      	lsrs	r2, r3, #16
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	3306      	adds	r3, #6
 8008000:	b2d2      	uxtb	r2, r2
 8008002:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	011b      	lsls	r3, r3, #4
 800800c:	4413      	add	r3, r2
 800800e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	0e1a      	lsrs	r2, r3, #24
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	3307      	adds	r3, #7
 800801a:	b2d2      	uxtb	r2, r2
 800801c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d108      	bne.n	8008036 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68da      	ldr	r2, [r3, #12]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f042 0220 	orr.w	r2, r2, #32
 8008032:	60da      	str	r2, [r3, #12]
 8008034:	e007      	b.n	8008046 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	691a      	ldr	r2, [r3, #16]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f042 0220 	orr.w	r2, r2, #32
 8008044:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8008046:	2300      	movs	r3, #0
 8008048:	e006      	b.n	8008058 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008056:	2301      	movs	r3, #1
  }
}
 8008058:	4618      	mov	r0, r3
 800805a:	371c      	adds	r7, #28
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8008064:	b480      	push	{r7}
 8008066:	b085      	sub	sp, #20
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008074:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8008076:	7bfb      	ldrb	r3, [r7, #15]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d002      	beq.n	8008082 <HAL_CAN_ActivateNotification+0x1e>
 800807c:	7bfb      	ldrb	r3, [r7, #15]
 800807e:	2b02      	cmp	r3, #2
 8008080:	d109      	bne.n	8008096 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	6959      	ldr	r1, [r3, #20]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	683a      	ldr	r2, [r7, #0]
 800808e:	430a      	orrs	r2, r1
 8008090:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8008092:	2300      	movs	r3, #0
 8008094:	e006      	b.n	80080a4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
  }
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3714      	adds	r7, #20
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80080c0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80080c2:	7bfb      	ldrb	r3, [r7, #15]
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d002      	beq.n	80080ce <HAL_CAN_DeactivateNotification+0x1e>
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d10a      	bne.n	80080e4 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	6959      	ldr	r1, [r3, #20]
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	43da      	mvns	r2, r3
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	400a      	ands	r2, r1
 80080de:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80080e0:	2300      	movs	r3, #0
 80080e2:	e006      	b.n	80080f2 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
  }
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3714      	adds	r7, #20
 80080f6:	46bd      	mov	sp, r7
 80080f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fc:	4770      	bx	lr

080080fe <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b08a      	sub	sp, #40	; 0x28
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8008106:	2300      	movs	r3, #0
 8008108:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	695b      	ldr	r3, [r3, #20]
 8008110:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	699b      	ldr	r3, [r3, #24]
 8008138:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800813a:	6a3b      	ldr	r3, [r7, #32]
 800813c:	f003 0301 	and.w	r3, r3, #1
 8008140:	2b00      	cmp	r3, #0
 8008142:	d07c      	beq.n	800823e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	f003 0301 	and.w	r3, r3, #1
 800814a:	2b00      	cmp	r3, #0
 800814c:	d023      	beq.n	8008196 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2201      	movs	r2, #1
 8008154:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8008156:	69bb      	ldr	r3, [r7, #24]
 8008158:	f003 0302 	and.w	r3, r3, #2
 800815c:	2b00      	cmp	r3, #0
 800815e:	d003      	beq.n	8008168 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f000 f983 	bl	800846c <HAL_CAN_TxMailbox0CompleteCallback>
 8008166:	e016      	b.n	8008196 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	f003 0304 	and.w	r3, r3, #4
 800816e:	2b00      	cmp	r3, #0
 8008170:	d004      	beq.n	800817c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8008172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008174:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008178:	627b      	str	r3, [r7, #36]	; 0x24
 800817a:	e00c      	b.n	8008196 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	f003 0308 	and.w	r3, r3, #8
 8008182:	2b00      	cmp	r3, #0
 8008184:	d004      	beq.n	8008190 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8008186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008188:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800818c:	627b      	str	r3, [r7, #36]	; 0x24
 800818e:	e002      	b.n	8008196 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 f989 	bl	80084a8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800819c:	2b00      	cmp	r3, #0
 800819e:	d024      	beq.n	80081ea <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d003      	beq.n	80081bc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 f963 	bl	8008480 <HAL_CAN_TxMailbox1CompleteCallback>
 80081ba:	e016      	b.n	80081ea <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d004      	beq.n	80081d0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80081c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80081cc:	627b      	str	r3, [r7, #36]	; 0x24
 80081ce:	e00c      	b.n	80081ea <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d004      	beq.n	80081e4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80081da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80081e0:	627b      	str	r3, [r7, #36]	; 0x24
 80081e2:	e002      	b.n	80081ea <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 f969 	bl	80084bc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d024      	beq.n	800823e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80081fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008204:	2b00      	cmp	r3, #0
 8008206:	d003      	beq.n	8008210 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 f943 	bl	8008494 <HAL_CAN_TxMailbox2CompleteCallback>
 800820e:	e016      	b.n	800823e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8008210:	69bb      	ldr	r3, [r7, #24]
 8008212:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008216:	2b00      	cmp	r3, #0
 8008218:	d004      	beq.n	8008224 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800821a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008220:	627b      	str	r3, [r7, #36]	; 0x24
 8008222:	e00c      	b.n	800823e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8008224:	69bb      	ldr	r3, [r7, #24]
 8008226:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800822a:	2b00      	cmp	r3, #0
 800822c:	d004      	beq.n	8008238 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800822e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008234:	627b      	str	r3, [r7, #36]	; 0x24
 8008236:	e002      	b.n	800823e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 f949 	bl	80084d0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800823e:	6a3b      	ldr	r3, [r7, #32]
 8008240:	f003 0308 	and.w	r3, r3, #8
 8008244:	2b00      	cmp	r3, #0
 8008246:	d00c      	beq.n	8008262 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	f003 0310 	and.w	r3, r3, #16
 800824e:	2b00      	cmp	r3, #0
 8008250:	d007      	beq.n	8008262 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8008252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008254:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008258:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2210      	movs	r2, #16
 8008260:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8008262:	6a3b      	ldr	r3, [r7, #32]
 8008264:	f003 0304 	and.w	r3, r3, #4
 8008268:	2b00      	cmp	r3, #0
 800826a:	d00b      	beq.n	8008284 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	f003 0308 	and.w	r3, r3, #8
 8008272:	2b00      	cmp	r3, #0
 8008274:	d006      	beq.n	8008284 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	2208      	movs	r2, #8
 800827c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f930 	bl	80084e4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8008284:	6a3b      	ldr	r3, [r7, #32]
 8008286:	f003 0302 	and.w	r3, r3, #2
 800828a:	2b00      	cmp	r3, #0
 800828c:	d009      	beq.n	80082a2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	f003 0303 	and.w	r3, r3, #3
 8008298:	2b00      	cmp	r3, #0
 800829a:	d002      	beq.n	80082a2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f7fe f855 	bl	800634c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80082a2:	6a3b      	ldr	r3, [r7, #32]
 80082a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00c      	beq.n	80082c6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	f003 0310 	and.w	r3, r3, #16
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d007      	beq.n	80082c6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80082b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80082bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2210      	movs	r2, #16
 80082c4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80082c6:	6a3b      	ldr	r3, [r7, #32]
 80082c8:	f003 0320 	and.w	r3, r3, #32
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d00b      	beq.n	80082e8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	f003 0308 	and.w	r3, r3, #8
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d006      	beq.n	80082e8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2208      	movs	r2, #8
 80082e0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 f912 	bl	800850c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80082e8:	6a3b      	ldr	r3, [r7, #32]
 80082ea:	f003 0310 	and.w	r3, r3, #16
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d009      	beq.n	8008306 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	f003 0303 	and.w	r3, r3, #3
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d002      	beq.n	8008306 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 f8f9 	bl	80084f8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8008306:	6a3b      	ldr	r3, [r7, #32]
 8008308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800830c:	2b00      	cmp	r3, #0
 800830e:	d00b      	beq.n	8008328 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	f003 0310 	and.w	r3, r3, #16
 8008316:	2b00      	cmp	r3, #0
 8008318:	d006      	beq.n	8008328 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2210      	movs	r2, #16
 8008320:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f000 f8fc 	bl	8008520 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8008328:	6a3b      	ldr	r3, [r7, #32]
 800832a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800832e:	2b00      	cmp	r3, #0
 8008330:	d00b      	beq.n	800834a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	f003 0308 	and.w	r3, r3, #8
 8008338:	2b00      	cmp	r3, #0
 800833a:	d006      	beq.n	800834a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	2208      	movs	r2, #8
 8008342:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 f8f5 	bl	8008534 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800834a:	6a3b      	ldr	r3, [r7, #32]
 800834c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d07b      	beq.n	800844c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	f003 0304 	and.w	r3, r3, #4
 800835a:	2b00      	cmp	r3, #0
 800835c:	d072      	beq.n	8008444 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800835e:	6a3b      	ldr	r3, [r7, #32]
 8008360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008364:	2b00      	cmp	r3, #0
 8008366:	d008      	beq.n	800837a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800836e:	2b00      	cmp	r3, #0
 8008370:	d003      	beq.n	800837a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8008372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008374:	f043 0301 	orr.w	r3, r3, #1
 8008378:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800837a:	6a3b      	ldr	r3, [r7, #32]
 800837c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008380:	2b00      	cmp	r3, #0
 8008382:	d008      	beq.n	8008396 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800838a:	2b00      	cmp	r3, #0
 800838c:	d003      	beq.n	8008396 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800838e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008390:	f043 0302 	orr.w	r3, r3, #2
 8008394:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8008396:	6a3b      	ldr	r3, [r7, #32]
 8008398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800839c:	2b00      	cmp	r3, #0
 800839e:	d008      	beq.n	80083b2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d003      	beq.n	80083b2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80083aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ac:	f043 0304 	orr.w	r3, r3, #4
 80083b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80083b2:	6a3b      	ldr	r3, [r7, #32]
 80083b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d043      	beq.n	8008444 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d03e      	beq.n	8008444 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80083cc:	2b60      	cmp	r3, #96	; 0x60
 80083ce:	d02b      	beq.n	8008428 <HAL_CAN_IRQHandler+0x32a>
 80083d0:	2b60      	cmp	r3, #96	; 0x60
 80083d2:	d82e      	bhi.n	8008432 <HAL_CAN_IRQHandler+0x334>
 80083d4:	2b50      	cmp	r3, #80	; 0x50
 80083d6:	d022      	beq.n	800841e <HAL_CAN_IRQHandler+0x320>
 80083d8:	2b50      	cmp	r3, #80	; 0x50
 80083da:	d82a      	bhi.n	8008432 <HAL_CAN_IRQHandler+0x334>
 80083dc:	2b40      	cmp	r3, #64	; 0x40
 80083de:	d019      	beq.n	8008414 <HAL_CAN_IRQHandler+0x316>
 80083e0:	2b40      	cmp	r3, #64	; 0x40
 80083e2:	d826      	bhi.n	8008432 <HAL_CAN_IRQHandler+0x334>
 80083e4:	2b30      	cmp	r3, #48	; 0x30
 80083e6:	d010      	beq.n	800840a <HAL_CAN_IRQHandler+0x30c>
 80083e8:	2b30      	cmp	r3, #48	; 0x30
 80083ea:	d822      	bhi.n	8008432 <HAL_CAN_IRQHandler+0x334>
 80083ec:	2b10      	cmp	r3, #16
 80083ee:	d002      	beq.n	80083f6 <HAL_CAN_IRQHandler+0x2f8>
 80083f0:	2b20      	cmp	r3, #32
 80083f2:	d005      	beq.n	8008400 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80083f4:	e01d      	b.n	8008432 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80083f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f8:	f043 0308 	orr.w	r3, r3, #8
 80083fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80083fe:	e019      	b.n	8008434 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8008400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008402:	f043 0310 	orr.w	r3, r3, #16
 8008406:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008408:	e014      	b.n	8008434 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800840a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840c:	f043 0320 	orr.w	r3, r3, #32
 8008410:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008412:	e00f      	b.n	8008434 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8008414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800841a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800841c:	e00a      	b.n	8008434 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800841e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008424:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008426:	e005      	b.n	8008434 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8008428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800842e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008430:	e000      	b.n	8008434 <HAL_CAN_IRQHandler+0x336>
            break;
 8008432:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	699a      	ldr	r2, [r3, #24]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008442:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2204      	movs	r2, #4
 800844a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800844c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844e:	2b00      	cmp	r3, #0
 8008450:	d008      	beq.n	8008464 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008458:	431a      	orrs	r2, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f872 	bl	8008548 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8008464:	bf00      	nop
 8008466:	3728      	adds	r7, #40	; 0x28
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8008474:	bf00      	nop
 8008476:	370c      	adds	r7, #12
 8008478:	46bd      	mov	sp, r7
 800847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847e:	4770      	bx	lr

08008480 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8008488:	bf00      	nop
 800848a:	370c      	adds	r7, #12
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr

08008494 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800849c:	bf00      	nop
 800849e:	370c      	adds	r7, #12
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b083      	sub	sp, #12
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80084b0:	bf00      	nop
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80084c4:	bf00      	nop
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80084d8:	bf00      	nop
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e2:	4770      	bx	lr

080084e4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80084ec:	bf00      	nop
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8008500:	bf00      	nop
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8008514:	bf00      	nop
 8008516:	370c      	adds	r7, #12
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8008528:	bf00      	nop
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800853c:	bf00      	nop
 800853e:	370c      	adds	r7, #12
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8008550:	bf00      	nop
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800855c:	b480      	push	{r7}
 800855e:	b085      	sub	sp, #20
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f003 0307 	and.w	r3, r3, #7
 800856a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800856c:	4b0c      	ldr	r3, [pc, #48]	; (80085a0 <__NVIC_SetPriorityGrouping+0x44>)
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008572:	68ba      	ldr	r2, [r7, #8]
 8008574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008578:	4013      	ands	r3, r2
 800857a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800858c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800858e:	4a04      	ldr	r2, [pc, #16]	; (80085a0 <__NVIC_SetPriorityGrouping+0x44>)
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	60d3      	str	r3, [r2, #12]
}
 8008594:	bf00      	nop
 8008596:	3714      	adds	r7, #20
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr
 80085a0:	e000ed00 	.word	0xe000ed00

080085a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80085a4:	b480      	push	{r7}
 80085a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80085a8:	4b04      	ldr	r3, [pc, #16]	; (80085bc <__NVIC_GetPriorityGrouping+0x18>)
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	0a1b      	lsrs	r3, r3, #8
 80085ae:	f003 0307 	and.w	r3, r3, #7
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	e000ed00 	.word	0xe000ed00

080085c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	4603      	mov	r3, r0
 80085c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80085ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	db0b      	blt.n	80085ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80085d2:	79fb      	ldrb	r3, [r7, #7]
 80085d4:	f003 021f 	and.w	r2, r3, #31
 80085d8:	4907      	ldr	r1, [pc, #28]	; (80085f8 <__NVIC_EnableIRQ+0x38>)
 80085da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085de:	095b      	lsrs	r3, r3, #5
 80085e0:	2001      	movs	r0, #1
 80085e2:	fa00 f202 	lsl.w	r2, r0, r2
 80085e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80085ea:	bf00      	nop
 80085ec:	370c      	adds	r7, #12
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	e000e100 	.word	0xe000e100

080085fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	4603      	mov	r3, r0
 8008604:	6039      	str	r1, [r7, #0]
 8008606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800860c:	2b00      	cmp	r3, #0
 800860e:	db0a      	blt.n	8008626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	b2da      	uxtb	r2, r3
 8008614:	490c      	ldr	r1, [pc, #48]	; (8008648 <__NVIC_SetPriority+0x4c>)
 8008616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800861a:	0112      	lsls	r2, r2, #4
 800861c:	b2d2      	uxtb	r2, r2
 800861e:	440b      	add	r3, r1
 8008620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008624:	e00a      	b.n	800863c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	b2da      	uxtb	r2, r3
 800862a:	4908      	ldr	r1, [pc, #32]	; (800864c <__NVIC_SetPriority+0x50>)
 800862c:	79fb      	ldrb	r3, [r7, #7]
 800862e:	f003 030f 	and.w	r3, r3, #15
 8008632:	3b04      	subs	r3, #4
 8008634:	0112      	lsls	r2, r2, #4
 8008636:	b2d2      	uxtb	r2, r2
 8008638:	440b      	add	r3, r1
 800863a:	761a      	strb	r2, [r3, #24]
}
 800863c:	bf00      	nop
 800863e:	370c      	adds	r7, #12
 8008640:	46bd      	mov	sp, r7
 8008642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008646:	4770      	bx	lr
 8008648:	e000e100 	.word	0xe000e100
 800864c:	e000ed00 	.word	0xe000ed00

08008650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008650:	b480      	push	{r7}
 8008652:	b089      	sub	sp, #36	; 0x24
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f003 0307 	and.w	r3, r3, #7
 8008662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	f1c3 0307 	rsb	r3, r3, #7
 800866a:	2b04      	cmp	r3, #4
 800866c:	bf28      	it	cs
 800866e:	2304      	movcs	r3, #4
 8008670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	3304      	adds	r3, #4
 8008676:	2b06      	cmp	r3, #6
 8008678:	d902      	bls.n	8008680 <NVIC_EncodePriority+0x30>
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	3b03      	subs	r3, #3
 800867e:	e000      	b.n	8008682 <NVIC_EncodePriority+0x32>
 8008680:	2300      	movs	r3, #0
 8008682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008684:	f04f 32ff 	mov.w	r2, #4294967295
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	fa02 f303 	lsl.w	r3, r2, r3
 800868e:	43da      	mvns	r2, r3
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	401a      	ands	r2, r3
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008698:	f04f 31ff 	mov.w	r1, #4294967295
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	fa01 f303 	lsl.w	r3, r1, r3
 80086a2:	43d9      	mvns	r1, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086a8:	4313      	orrs	r3, r2
         );
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3724      	adds	r7, #36	; 0x24
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr
	...

080086b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	3b01      	subs	r3, #1
 80086c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80086c8:	d301      	bcc.n	80086ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80086ca:	2301      	movs	r3, #1
 80086cc:	e00f      	b.n	80086ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80086ce:	4a0a      	ldr	r2, [pc, #40]	; (80086f8 <SysTick_Config+0x40>)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	3b01      	subs	r3, #1
 80086d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80086d6:	210f      	movs	r1, #15
 80086d8:	f04f 30ff 	mov.w	r0, #4294967295
 80086dc:	f7ff ff8e 	bl	80085fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80086e0:	4b05      	ldr	r3, [pc, #20]	; (80086f8 <SysTick_Config+0x40>)
 80086e2:	2200      	movs	r2, #0
 80086e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80086e6:	4b04      	ldr	r3, [pc, #16]	; (80086f8 <SysTick_Config+0x40>)
 80086e8:	2207      	movs	r2, #7
 80086ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3708      	adds	r7, #8
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	e000e010 	.word	0xe000e010

080086fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f7ff ff29 	bl	800855c <__NVIC_SetPriorityGrouping>
}
 800870a:	bf00      	nop
 800870c:	3708      	adds	r7, #8
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}

08008712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008712:	b580      	push	{r7, lr}
 8008714:	b086      	sub	sp, #24
 8008716:	af00      	add	r7, sp, #0
 8008718:	4603      	mov	r3, r0
 800871a:	60b9      	str	r1, [r7, #8]
 800871c:	607a      	str	r2, [r7, #4]
 800871e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008720:	2300      	movs	r3, #0
 8008722:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008724:	f7ff ff3e 	bl	80085a4 <__NVIC_GetPriorityGrouping>
 8008728:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	68b9      	ldr	r1, [r7, #8]
 800872e:	6978      	ldr	r0, [r7, #20]
 8008730:	f7ff ff8e 	bl	8008650 <NVIC_EncodePriority>
 8008734:	4602      	mov	r2, r0
 8008736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800873a:	4611      	mov	r1, r2
 800873c:	4618      	mov	r0, r3
 800873e:	f7ff ff5d 	bl	80085fc <__NVIC_SetPriority>
}
 8008742:	bf00      	nop
 8008744:	3718      	adds	r7, #24
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b082      	sub	sp, #8
 800874e:	af00      	add	r7, sp, #0
 8008750:	4603      	mov	r3, r0
 8008752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008758:	4618      	mov	r0, r3
 800875a:	f7ff ff31 	bl	80085c0 <__NVIC_EnableIRQ>
}
 800875e:	bf00      	nop
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b082      	sub	sp, #8
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f7ff ffa2 	bl	80086b8 <SysTick_Config>
 8008774:	4603      	mov	r3, r0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3708      	adds	r7, #8
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}
	...

08008780 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008788:	2300      	movs	r3, #0
 800878a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800878c:	f7fe fbd6 	bl	8006f3c <HAL_GetTick>
 8008790:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d101      	bne.n	800879c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008798:	2301      	movs	r3, #1
 800879a:	e099      	b.n	80088d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2202      	movs	r2, #2
 80087a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f022 0201 	bic.w	r2, r2, #1
 80087ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80087bc:	e00f      	b.n	80087de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80087be:	f7fe fbbd 	bl	8006f3c <HAL_GetTick>
 80087c2:	4602      	mov	r2, r0
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	1ad3      	subs	r3, r2, r3
 80087c8:	2b05      	cmp	r3, #5
 80087ca:	d908      	bls.n	80087de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2220      	movs	r2, #32
 80087d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2203      	movs	r2, #3
 80087d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80087da:	2303      	movs	r3, #3
 80087dc:	e078      	b.n	80088d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 0301 	and.w	r3, r3, #1
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d1e8      	bne.n	80087be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80087f4:	697a      	ldr	r2, [r7, #20]
 80087f6:	4b38      	ldr	r3, [pc, #224]	; (80088d8 <HAL_DMA_Init+0x158>)
 80087f8:	4013      	ands	r3, r2
 80087fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	685a      	ldr	r2, [r3, #4]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800880a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	691b      	ldr	r3, [r3, #16]
 8008810:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008816:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	699b      	ldr	r3, [r3, #24]
 800881c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008822:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6a1b      	ldr	r3, [r3, #32]
 8008828:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800882a:	697a      	ldr	r2, [r7, #20]
 800882c:	4313      	orrs	r3, r2
 800882e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008834:	2b04      	cmp	r3, #4
 8008836:	d107      	bne.n	8008848 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008840:	4313      	orrs	r3, r2
 8008842:	697a      	ldr	r2, [r7, #20]
 8008844:	4313      	orrs	r3, r2
 8008846:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	697a      	ldr	r2, [r7, #20]
 800884e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	695b      	ldr	r3, [r3, #20]
 8008856:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	f023 0307 	bic.w	r3, r3, #7
 800885e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008864:	697a      	ldr	r2, [r7, #20]
 8008866:	4313      	orrs	r3, r2
 8008868:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886e:	2b04      	cmp	r3, #4
 8008870:	d117      	bne.n	80088a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008876:	697a      	ldr	r2, [r7, #20]
 8008878:	4313      	orrs	r3, r2
 800887a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008880:	2b00      	cmp	r3, #0
 8008882:	d00e      	beq.n	80088a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 fa9d 	bl	8008dc4 <DMA_CheckFifoParam>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d008      	beq.n	80088a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2240      	movs	r2, #64	; 0x40
 8008894:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2201      	movs	r2, #1
 800889a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800889e:	2301      	movs	r3, #1
 80088a0:	e016      	b.n	80088d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	697a      	ldr	r2, [r7, #20]
 80088a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 fa54 	bl	8008d58 <DMA_CalcBaseAndBitshift>
 80088b0:	4603      	mov	r3, r0
 80088b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088b8:	223f      	movs	r2, #63	; 0x3f
 80088ba:	409a      	lsls	r2, r3
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2201      	movs	r2, #1
 80088ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3718      	adds	r7, #24
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	f010803f 	.word	0xf010803f

080088dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b086      	sub	sp, #24
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	607a      	str	r2, [r7, #4]
 80088e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80088ea:	2300      	movs	r3, #0
 80088ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d101      	bne.n	8008902 <HAL_DMA_Start_IT+0x26>
 80088fe:	2302      	movs	r3, #2
 8008900:	e040      	b.n	8008984 <HAL_DMA_Start_IT+0xa8>
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2201      	movs	r2, #1
 8008906:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008910:	b2db      	uxtb	r3, r3
 8008912:	2b01      	cmp	r3, #1
 8008914:	d12f      	bne.n	8008976 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2202      	movs	r2, #2
 800891a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2200      	movs	r2, #0
 8008922:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	68b9      	ldr	r1, [r7, #8]
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f000 f9e6 	bl	8008cfc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008934:	223f      	movs	r2, #63	; 0x3f
 8008936:	409a      	lsls	r2, r3
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f042 0216 	orr.w	r2, r2, #22
 800894a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008950:	2b00      	cmp	r3, #0
 8008952:	d007      	beq.n	8008964 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f042 0208 	orr.w	r2, r2, #8
 8008962:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	681a      	ldr	r2, [r3, #0]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f042 0201 	orr.w	r2, r2, #1
 8008972:	601a      	str	r2, [r3, #0]
 8008974:	e005      	b.n	8008982 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2200      	movs	r2, #0
 800897a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800897e:	2302      	movs	r3, #2
 8008980:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008982:	7dfb      	ldrb	r3, [r7, #23]
}
 8008984:	4618      	mov	r0, r3
 8008986:	3718      	adds	r7, #24
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800899a:	b2db      	uxtb	r3, r3
 800899c:	2b02      	cmp	r3, #2
 800899e:	d004      	beq.n	80089aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2280      	movs	r2, #128	; 0x80
 80089a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	e00c      	b.n	80089c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2205      	movs	r2, #5
 80089ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	681a      	ldr	r2, [r3, #0]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f022 0201 	bic.w	r2, r2, #1
 80089c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b086      	sub	sp, #24
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80089d8:	2300      	movs	r3, #0
 80089da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80089dc:	4b8e      	ldr	r3, [pc, #568]	; (8008c18 <HAL_DMA_IRQHandler+0x248>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a8e      	ldr	r2, [pc, #568]	; (8008c1c <HAL_DMA_IRQHandler+0x24c>)
 80089e2:	fba2 2303 	umull	r2, r3, r2, r3
 80089e6:	0a9b      	lsrs	r3, r3, #10
 80089e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089fa:	2208      	movs	r2, #8
 80089fc:	409a      	lsls	r2, r3
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	4013      	ands	r3, r2
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d01a      	beq.n	8008a3c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f003 0304 	and.w	r3, r3, #4
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d013      	beq.n	8008a3c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f022 0204 	bic.w	r2, r2, #4
 8008a22:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a28:	2208      	movs	r2, #8
 8008a2a:	409a      	lsls	r2, r3
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a34:	f043 0201 	orr.w	r2, r3, #1
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a40:	2201      	movs	r2, #1
 8008a42:	409a      	lsls	r2, r3
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	4013      	ands	r3, r2
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d012      	beq.n	8008a72 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	695b      	ldr	r3, [r3, #20]
 8008a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d00b      	beq.n	8008a72 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a5e:	2201      	movs	r2, #1
 8008a60:	409a      	lsls	r2, r3
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a6a:	f043 0202 	orr.w	r2, r3, #2
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a76:	2204      	movs	r2, #4
 8008a78:	409a      	lsls	r2, r3
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	4013      	ands	r3, r2
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d012      	beq.n	8008aa8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f003 0302 	and.w	r3, r3, #2
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00b      	beq.n	8008aa8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a94:	2204      	movs	r2, #4
 8008a96:	409a      	lsls	r2, r3
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aa0:	f043 0204 	orr.w	r2, r3, #4
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008aac:	2210      	movs	r2, #16
 8008aae:	409a      	lsls	r2, r3
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	4013      	ands	r3, r2
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d043      	beq.n	8008b40 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f003 0308 	and.w	r3, r3, #8
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d03c      	beq.n	8008b40 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008aca:	2210      	movs	r2, #16
 8008acc:	409a      	lsls	r2, r3
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d018      	beq.n	8008b12 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d108      	bne.n	8008b00 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d024      	beq.n	8008b40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	4798      	blx	r3
 8008afe:	e01f      	b.n	8008b40 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d01b      	beq.n	8008b40 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	4798      	blx	r3
 8008b10:	e016      	b.n	8008b40 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d107      	bne.n	8008b30 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f022 0208 	bic.w	r2, r2, #8
 8008b2e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d003      	beq.n	8008b40 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b44:	2220      	movs	r2, #32
 8008b46:	409a      	lsls	r2, r3
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	f000 808f 	beq.w	8008c70 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 0310 	and.w	r3, r3, #16
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f000 8087 	beq.w	8008c70 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b66:	2220      	movs	r2, #32
 8008b68:	409a      	lsls	r2, r3
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2b05      	cmp	r3, #5
 8008b78:	d136      	bne.n	8008be8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f022 0216 	bic.w	r2, r2, #22
 8008b88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	695a      	ldr	r2, [r3, #20]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b98:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d103      	bne.n	8008baa <HAL_DMA_IRQHandler+0x1da>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d007      	beq.n	8008bba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	681a      	ldr	r2, [r3, #0]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f022 0208 	bic.w	r2, r2, #8
 8008bb8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bbe:	223f      	movs	r2, #63	; 0x3f
 8008bc0:	409a      	lsls	r2, r3
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d07e      	beq.n	8008cdc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	4798      	blx	r3
        }
        return;
 8008be6:	e079      	b.n	8008cdc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d01d      	beq.n	8008c32 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d10d      	bne.n	8008c20 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d031      	beq.n	8008c70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	4798      	blx	r3
 8008c14:	e02c      	b.n	8008c70 <HAL_DMA_IRQHandler+0x2a0>
 8008c16:	bf00      	nop
 8008c18:	20000000 	.word	0x20000000
 8008c1c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d023      	beq.n	8008c70 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	4798      	blx	r3
 8008c30:	e01e      	b.n	8008c70 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d10f      	bne.n	8008c60 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f022 0210 	bic.w	r2, r2, #16
 8008c4e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2201      	movs	r2, #1
 8008c54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d003      	beq.n	8008c70 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d032      	beq.n	8008cde <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c7c:	f003 0301 	and.w	r3, r3, #1
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d022      	beq.n	8008cca <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2205      	movs	r2, #5
 8008c88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	681a      	ldr	r2, [r3, #0]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f022 0201 	bic.w	r2, r2, #1
 8008c9a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	60bb      	str	r3, [r7, #8]
 8008ca2:	697a      	ldr	r2, [r7, #20]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d307      	bcc.n	8008cb8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f003 0301 	and.w	r3, r3, #1
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d1f2      	bne.n	8008c9c <HAL_DMA_IRQHandler+0x2cc>
 8008cb6:	e000      	b.n	8008cba <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008cb8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d005      	beq.n	8008cde <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	4798      	blx	r3
 8008cda:	e000      	b.n	8008cde <HAL_DMA_IRQHandler+0x30e>
        return;
 8008cdc:	bf00      	nop
    }
  }
}
 8008cde:	3718      	adds	r7, #24
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	607a      	str	r2, [r7, #4]
 8008d08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008d18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	683a      	ldr	r2, [r7, #0]
 8008d20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	2b40      	cmp	r3, #64	; 0x40
 8008d28:	d108      	bne.n	8008d3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	68ba      	ldr	r2, [r7, #8]
 8008d38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008d3a:	e007      	b.n	8008d4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	68ba      	ldr	r2, [r7, #8]
 8008d42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	60da      	str	r2, [r3, #12]
}
 8008d4c:	bf00      	nop
 8008d4e:	3714      	adds	r7, #20
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b085      	sub	sp, #20
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	3b10      	subs	r3, #16
 8008d68:	4a14      	ldr	r2, [pc, #80]	; (8008dbc <DMA_CalcBaseAndBitshift+0x64>)
 8008d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d6e:	091b      	lsrs	r3, r3, #4
 8008d70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008d72:	4a13      	ldr	r2, [pc, #76]	; (8008dc0 <DMA_CalcBaseAndBitshift+0x68>)
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	4413      	add	r3, r2
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2b03      	cmp	r3, #3
 8008d84:	d909      	bls.n	8008d9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008d8e:	f023 0303 	bic.w	r3, r3, #3
 8008d92:	1d1a      	adds	r2, r3, #4
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	659a      	str	r2, [r3, #88]	; 0x58
 8008d98:	e007      	b.n	8008daa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008da2:	f023 0303 	bic.w	r3, r3, #3
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3714      	adds	r7, #20
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop
 8008dbc:	aaaaaaab 	.word	0xaaaaaaab
 8008dc0:	08019584 	.word	0x08019584

08008dc4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b085      	sub	sp, #20
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	699b      	ldr	r3, [r3, #24]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d11f      	bne.n	8008e1e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	2b03      	cmp	r3, #3
 8008de2:	d856      	bhi.n	8008e92 <DMA_CheckFifoParam+0xce>
 8008de4:	a201      	add	r2, pc, #4	; (adr r2, 8008dec <DMA_CheckFifoParam+0x28>)
 8008de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dea:	bf00      	nop
 8008dec:	08008dfd 	.word	0x08008dfd
 8008df0:	08008e0f 	.word	0x08008e0f
 8008df4:	08008dfd 	.word	0x08008dfd
 8008df8:	08008e93 	.word	0x08008e93
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d046      	beq.n	8008e96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008e0c:	e043      	b.n	8008e96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e12:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008e16:	d140      	bne.n	8008e9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008e1c:	e03d      	b.n	8008e9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	699b      	ldr	r3, [r3, #24]
 8008e22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e26:	d121      	bne.n	8008e6c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	2b03      	cmp	r3, #3
 8008e2c:	d837      	bhi.n	8008e9e <DMA_CheckFifoParam+0xda>
 8008e2e:	a201      	add	r2, pc, #4	; (adr r2, 8008e34 <DMA_CheckFifoParam+0x70>)
 8008e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e34:	08008e45 	.word	0x08008e45
 8008e38:	08008e4b 	.word	0x08008e4b
 8008e3c:	08008e45 	.word	0x08008e45
 8008e40:	08008e5d 	.word	0x08008e5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	73fb      	strb	r3, [r7, #15]
      break;
 8008e48:	e030      	b.n	8008eac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d025      	beq.n	8008ea2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008e5a:	e022      	b.n	8008ea2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e60:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008e64:	d11f      	bne.n	8008ea6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008e6a:	e01c      	b.n	8008ea6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	d903      	bls.n	8008e7a <DMA_CheckFifoParam+0xb6>
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	2b03      	cmp	r3, #3
 8008e76:	d003      	beq.n	8008e80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008e78:	e018      	b.n	8008eac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	73fb      	strb	r3, [r7, #15]
      break;
 8008e7e:	e015      	b.n	8008eac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d00e      	beq.n	8008eaa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8008e90:	e00b      	b.n	8008eaa <DMA_CheckFifoParam+0xe6>
      break;
 8008e92:	bf00      	nop
 8008e94:	e00a      	b.n	8008eac <DMA_CheckFifoParam+0xe8>
      break;
 8008e96:	bf00      	nop
 8008e98:	e008      	b.n	8008eac <DMA_CheckFifoParam+0xe8>
      break;
 8008e9a:	bf00      	nop
 8008e9c:	e006      	b.n	8008eac <DMA_CheckFifoParam+0xe8>
      break;
 8008e9e:	bf00      	nop
 8008ea0:	e004      	b.n	8008eac <DMA_CheckFifoParam+0xe8>
      break;
 8008ea2:	bf00      	nop
 8008ea4:	e002      	b.n	8008eac <DMA_CheckFifoParam+0xe8>
      break;   
 8008ea6:	bf00      	nop
 8008ea8:	e000      	b.n	8008eac <DMA_CheckFifoParam+0xe8>
      break;
 8008eaa:	bf00      	nop
    }
  } 
  
  return status; 
 8008eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3714      	adds	r7, #20
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop

08008ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b089      	sub	sp, #36	; 0x24
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	61fb      	str	r3, [r7, #28]
 8008ed6:	e165      	b.n	80091a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008ed8:	2201      	movs	r2, #1
 8008eda:	69fb      	ldr	r3, [r7, #28]
 8008edc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ee0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	697a      	ldr	r2, [r7, #20]
 8008ee8:	4013      	ands	r3, r2
 8008eea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008eec:	693a      	ldr	r2, [r7, #16]
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	f040 8154 	bne.w	800919e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	f003 0303 	and.w	r3, r3, #3
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d005      	beq.n	8008f0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008f0a:	2b02      	cmp	r3, #2
 8008f0c:	d130      	bne.n	8008f70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	005b      	lsls	r3, r3, #1
 8008f18:	2203      	movs	r2, #3
 8008f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f1e:	43db      	mvns	r3, r3
 8008f20:	69ba      	ldr	r2, [r7, #24]
 8008f22:	4013      	ands	r3, r2
 8008f24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	68da      	ldr	r2, [r3, #12]
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	005b      	lsls	r3, r3, #1
 8008f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f32:	69ba      	ldr	r2, [r7, #24]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	69ba      	ldr	r2, [r7, #24]
 8008f3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008f44:	2201      	movs	r2, #1
 8008f46:	69fb      	ldr	r3, [r7, #28]
 8008f48:	fa02 f303 	lsl.w	r3, r2, r3
 8008f4c:	43db      	mvns	r3, r3
 8008f4e:	69ba      	ldr	r2, [r7, #24]
 8008f50:	4013      	ands	r3, r2
 8008f52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	091b      	lsrs	r3, r3, #4
 8008f5a:	f003 0201 	and.w	r2, r3, #1
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	fa02 f303 	lsl.w	r3, r2, r3
 8008f64:	69ba      	ldr	r2, [r7, #24]
 8008f66:	4313      	orrs	r3, r2
 8008f68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	69ba      	ldr	r2, [r7, #24]
 8008f6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	f003 0303 	and.w	r3, r3, #3
 8008f78:	2b03      	cmp	r3, #3
 8008f7a:	d017      	beq.n	8008fac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	005b      	lsls	r3, r3, #1
 8008f86:	2203      	movs	r2, #3
 8008f88:	fa02 f303 	lsl.w	r3, r2, r3
 8008f8c:	43db      	mvns	r3, r3
 8008f8e:	69ba      	ldr	r2, [r7, #24]
 8008f90:	4013      	ands	r3, r2
 8008f92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	689a      	ldr	r2, [r3, #8]
 8008f98:	69fb      	ldr	r3, [r7, #28]
 8008f9a:	005b      	lsls	r3, r3, #1
 8008f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008fa0:	69ba      	ldr	r2, [r7, #24]
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	69ba      	ldr	r2, [r7, #24]
 8008faa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	f003 0303 	and.w	r3, r3, #3
 8008fb4:	2b02      	cmp	r3, #2
 8008fb6:	d123      	bne.n	8009000 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	08da      	lsrs	r2, r3, #3
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	3208      	adds	r2, #8
 8008fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	f003 0307 	and.w	r3, r3, #7
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	220f      	movs	r2, #15
 8008fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd4:	43db      	mvns	r3, r3
 8008fd6:	69ba      	ldr	r2, [r7, #24]
 8008fd8:	4013      	ands	r3, r2
 8008fda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	691a      	ldr	r2, [r3, #16]
 8008fe0:	69fb      	ldr	r3, [r7, #28]
 8008fe2:	f003 0307 	and.w	r3, r3, #7
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8008fec:	69ba      	ldr	r2, [r7, #24]
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008ff2:	69fb      	ldr	r3, [r7, #28]
 8008ff4:	08da      	lsrs	r2, r3, #3
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	3208      	adds	r2, #8
 8008ffa:	69b9      	ldr	r1, [r7, #24]
 8008ffc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009006:	69fb      	ldr	r3, [r7, #28]
 8009008:	005b      	lsls	r3, r3, #1
 800900a:	2203      	movs	r2, #3
 800900c:	fa02 f303 	lsl.w	r3, r2, r3
 8009010:	43db      	mvns	r3, r3
 8009012:	69ba      	ldr	r2, [r7, #24]
 8009014:	4013      	ands	r3, r2
 8009016:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	f003 0203 	and.w	r2, r3, #3
 8009020:	69fb      	ldr	r3, [r7, #28]
 8009022:	005b      	lsls	r3, r3, #1
 8009024:	fa02 f303 	lsl.w	r3, r2, r3
 8009028:	69ba      	ldr	r2, [r7, #24]
 800902a:	4313      	orrs	r3, r2
 800902c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	69ba      	ldr	r2, [r7, #24]
 8009032:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800903c:	2b00      	cmp	r3, #0
 800903e:	f000 80ae 	beq.w	800919e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009042:	2300      	movs	r3, #0
 8009044:	60fb      	str	r3, [r7, #12]
 8009046:	4b5d      	ldr	r3, [pc, #372]	; (80091bc <HAL_GPIO_Init+0x300>)
 8009048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800904a:	4a5c      	ldr	r2, [pc, #368]	; (80091bc <HAL_GPIO_Init+0x300>)
 800904c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009050:	6453      	str	r3, [r2, #68]	; 0x44
 8009052:	4b5a      	ldr	r3, [pc, #360]	; (80091bc <HAL_GPIO_Init+0x300>)
 8009054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009056:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800905a:	60fb      	str	r3, [r7, #12]
 800905c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800905e:	4a58      	ldr	r2, [pc, #352]	; (80091c0 <HAL_GPIO_Init+0x304>)
 8009060:	69fb      	ldr	r3, [r7, #28]
 8009062:	089b      	lsrs	r3, r3, #2
 8009064:	3302      	adds	r3, #2
 8009066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800906a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800906c:	69fb      	ldr	r3, [r7, #28]
 800906e:	f003 0303 	and.w	r3, r3, #3
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	220f      	movs	r2, #15
 8009076:	fa02 f303 	lsl.w	r3, r2, r3
 800907a:	43db      	mvns	r3, r3
 800907c:	69ba      	ldr	r2, [r7, #24]
 800907e:	4013      	ands	r3, r2
 8009080:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4a4f      	ldr	r2, [pc, #316]	; (80091c4 <HAL_GPIO_Init+0x308>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d025      	beq.n	80090d6 <HAL_GPIO_Init+0x21a>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	4a4e      	ldr	r2, [pc, #312]	; (80091c8 <HAL_GPIO_Init+0x30c>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d01f      	beq.n	80090d2 <HAL_GPIO_Init+0x216>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	4a4d      	ldr	r2, [pc, #308]	; (80091cc <HAL_GPIO_Init+0x310>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d019      	beq.n	80090ce <HAL_GPIO_Init+0x212>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a4c      	ldr	r2, [pc, #304]	; (80091d0 <HAL_GPIO_Init+0x314>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d013      	beq.n	80090ca <HAL_GPIO_Init+0x20e>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4a4b      	ldr	r2, [pc, #300]	; (80091d4 <HAL_GPIO_Init+0x318>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d00d      	beq.n	80090c6 <HAL_GPIO_Init+0x20a>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4a4a      	ldr	r2, [pc, #296]	; (80091d8 <HAL_GPIO_Init+0x31c>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d007      	beq.n	80090c2 <HAL_GPIO_Init+0x206>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4a49      	ldr	r2, [pc, #292]	; (80091dc <HAL_GPIO_Init+0x320>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d101      	bne.n	80090be <HAL_GPIO_Init+0x202>
 80090ba:	2306      	movs	r3, #6
 80090bc:	e00c      	b.n	80090d8 <HAL_GPIO_Init+0x21c>
 80090be:	2307      	movs	r3, #7
 80090c0:	e00a      	b.n	80090d8 <HAL_GPIO_Init+0x21c>
 80090c2:	2305      	movs	r3, #5
 80090c4:	e008      	b.n	80090d8 <HAL_GPIO_Init+0x21c>
 80090c6:	2304      	movs	r3, #4
 80090c8:	e006      	b.n	80090d8 <HAL_GPIO_Init+0x21c>
 80090ca:	2303      	movs	r3, #3
 80090cc:	e004      	b.n	80090d8 <HAL_GPIO_Init+0x21c>
 80090ce:	2302      	movs	r3, #2
 80090d0:	e002      	b.n	80090d8 <HAL_GPIO_Init+0x21c>
 80090d2:	2301      	movs	r3, #1
 80090d4:	e000      	b.n	80090d8 <HAL_GPIO_Init+0x21c>
 80090d6:	2300      	movs	r3, #0
 80090d8:	69fa      	ldr	r2, [r7, #28]
 80090da:	f002 0203 	and.w	r2, r2, #3
 80090de:	0092      	lsls	r2, r2, #2
 80090e0:	4093      	lsls	r3, r2
 80090e2:	69ba      	ldr	r2, [r7, #24]
 80090e4:	4313      	orrs	r3, r2
 80090e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80090e8:	4935      	ldr	r1, [pc, #212]	; (80091c0 <HAL_GPIO_Init+0x304>)
 80090ea:	69fb      	ldr	r3, [r7, #28]
 80090ec:	089b      	lsrs	r3, r3, #2
 80090ee:	3302      	adds	r3, #2
 80090f0:	69ba      	ldr	r2, [r7, #24]
 80090f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80090f6:	4b3a      	ldr	r3, [pc, #232]	; (80091e0 <HAL_GPIO_Init+0x324>)
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	43db      	mvns	r3, r3
 8009100:	69ba      	ldr	r2, [r7, #24]
 8009102:	4013      	ands	r3, r2
 8009104:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800910e:	2b00      	cmp	r3, #0
 8009110:	d003      	beq.n	800911a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8009112:	69ba      	ldr	r2, [r7, #24]
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	4313      	orrs	r3, r2
 8009118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800911a:	4a31      	ldr	r2, [pc, #196]	; (80091e0 <HAL_GPIO_Init+0x324>)
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009120:	4b2f      	ldr	r3, [pc, #188]	; (80091e0 <HAL_GPIO_Init+0x324>)
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	43db      	mvns	r3, r3
 800912a:	69ba      	ldr	r2, [r7, #24]
 800912c:	4013      	ands	r3, r2
 800912e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009138:	2b00      	cmp	r3, #0
 800913a:	d003      	beq.n	8009144 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800913c:	69ba      	ldr	r2, [r7, #24]
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	4313      	orrs	r3, r2
 8009142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009144:	4a26      	ldr	r2, [pc, #152]	; (80091e0 <HAL_GPIO_Init+0x324>)
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800914a:	4b25      	ldr	r3, [pc, #148]	; (80091e0 <HAL_GPIO_Init+0x324>)
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	43db      	mvns	r3, r3
 8009154:	69ba      	ldr	r2, [r7, #24]
 8009156:	4013      	ands	r3, r2
 8009158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009162:	2b00      	cmp	r3, #0
 8009164:	d003      	beq.n	800916e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8009166:	69ba      	ldr	r2, [r7, #24]
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	4313      	orrs	r3, r2
 800916c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800916e:	4a1c      	ldr	r2, [pc, #112]	; (80091e0 <HAL_GPIO_Init+0x324>)
 8009170:	69bb      	ldr	r3, [r7, #24]
 8009172:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009174:	4b1a      	ldr	r3, [pc, #104]	; (80091e0 <HAL_GPIO_Init+0x324>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	43db      	mvns	r3, r3
 800917e:	69ba      	ldr	r2, [r7, #24]
 8009180:	4013      	ands	r3, r2
 8009182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800918c:	2b00      	cmp	r3, #0
 800918e:	d003      	beq.n	8009198 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8009190:	69ba      	ldr	r2, [r7, #24]
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	4313      	orrs	r3, r2
 8009196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8009198:	4a11      	ldr	r2, [pc, #68]	; (80091e0 <HAL_GPIO_Init+0x324>)
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800919e:	69fb      	ldr	r3, [r7, #28]
 80091a0:	3301      	adds	r3, #1
 80091a2:	61fb      	str	r3, [r7, #28]
 80091a4:	69fb      	ldr	r3, [r7, #28]
 80091a6:	2b0f      	cmp	r3, #15
 80091a8:	f67f ae96 	bls.w	8008ed8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80091ac:	bf00      	nop
 80091ae:	bf00      	nop
 80091b0:	3724      	adds	r7, #36	; 0x24
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr
 80091ba:	bf00      	nop
 80091bc:	40023800 	.word	0x40023800
 80091c0:	40013800 	.word	0x40013800
 80091c4:	40020000 	.word	0x40020000
 80091c8:	40020400 	.word	0x40020400
 80091cc:	40020800 	.word	0x40020800
 80091d0:	40020c00 	.word	0x40020c00
 80091d4:	40021000 	.word	0x40021000
 80091d8:	40021400 	.word	0x40021400
 80091dc:	40021800 	.word	0x40021800
 80091e0:	40013c00 	.word	0x40013c00

080091e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b085      	sub	sp, #20
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	460b      	mov	r3, r1
 80091ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	691a      	ldr	r2, [r3, #16]
 80091f4:	887b      	ldrh	r3, [r7, #2]
 80091f6:	4013      	ands	r3, r2
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d002      	beq.n	8009202 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80091fc:	2301      	movs	r3, #1
 80091fe:	73fb      	strb	r3, [r7, #15]
 8009200:	e001      	b.n	8009206 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009202:	2300      	movs	r3, #0
 8009204:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009206:	7bfb      	ldrb	r3, [r7, #15]
}
 8009208:	4618      	mov	r0, r3
 800920a:	3714      	adds	r7, #20
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	460b      	mov	r3, r1
 800921e:	807b      	strh	r3, [r7, #2]
 8009220:	4613      	mov	r3, r2
 8009222:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009224:	787b      	ldrb	r3, [r7, #1]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d003      	beq.n	8009232 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800922a:	887a      	ldrh	r2, [r7, #2]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009230:	e003      	b.n	800923a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009232:	887b      	ldrh	r3, [r7, #2]
 8009234:	041a      	lsls	r2, r3, #16
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	619a      	str	r2, [r3, #24]
}
 800923a:	bf00      	nop
 800923c:	370c      	adds	r7, #12
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr

08009246 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009246:	b480      	push	{r7}
 8009248:	b085      	sub	sp, #20
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
 800924e:	460b      	mov	r3, r1
 8009250:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	695b      	ldr	r3, [r3, #20]
 8009256:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009258:	887a      	ldrh	r2, [r7, #2]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	4013      	ands	r3, r2
 800925e:	041a      	lsls	r2, r3, #16
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	43d9      	mvns	r1, r3
 8009264:	887b      	ldrh	r3, [r7, #2]
 8009266:	400b      	ands	r3, r1
 8009268:	431a      	orrs	r2, r3
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	619a      	str	r2, [r3, #24]
}
 800926e:	bf00      	nop
 8009270:	3714      	adds	r7, #20
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr
	...

0800927c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b082      	sub	sp, #8
 8009280:	af00      	add	r7, sp, #0
 8009282:	4603      	mov	r3, r0
 8009284:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8009286:	4b08      	ldr	r3, [pc, #32]	; (80092a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009288:	695a      	ldr	r2, [r3, #20]
 800928a:	88fb      	ldrh	r3, [r7, #6]
 800928c:	4013      	ands	r3, r2
 800928e:	2b00      	cmp	r3, #0
 8009290:	d006      	beq.n	80092a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8009292:	4a05      	ldr	r2, [pc, #20]	; (80092a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009294:	88fb      	ldrh	r3, [r7, #6]
 8009296:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009298:	88fb      	ldrh	r3, [r7, #6]
 800929a:	4618      	mov	r0, r3
 800929c:	f7fd f8c6 	bl	800642c <HAL_GPIO_EXTI_Callback>
  }
}
 80092a0:	bf00      	nop
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	40013c00 	.word	0x40013c00

080092ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d101      	bne.n	80092be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80092ba:	2301      	movs	r3, #1
 80092bc:	e12b      	b.n	8009516 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d106      	bne.n	80092d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f7fd fb48 	bl	8006968 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2224      	movs	r2, #36	; 0x24
 80092dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f022 0201 	bic.w	r2, r2, #1
 80092ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	681a      	ldr	r2, [r3, #0]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80092fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800930e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009310:	f002 fb9a 	bl	800ba48 <HAL_RCC_GetPCLK1Freq>
 8009314:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	4a81      	ldr	r2, [pc, #516]	; (8009520 <HAL_I2C_Init+0x274>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d807      	bhi.n	8009330 <HAL_I2C_Init+0x84>
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	4a80      	ldr	r2, [pc, #512]	; (8009524 <HAL_I2C_Init+0x278>)
 8009324:	4293      	cmp	r3, r2
 8009326:	bf94      	ite	ls
 8009328:	2301      	movls	r3, #1
 800932a:	2300      	movhi	r3, #0
 800932c:	b2db      	uxtb	r3, r3
 800932e:	e006      	b.n	800933e <HAL_I2C_Init+0x92>
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	4a7d      	ldr	r2, [pc, #500]	; (8009528 <HAL_I2C_Init+0x27c>)
 8009334:	4293      	cmp	r3, r2
 8009336:	bf94      	ite	ls
 8009338:	2301      	movls	r3, #1
 800933a:	2300      	movhi	r3, #0
 800933c:	b2db      	uxtb	r3, r3
 800933e:	2b00      	cmp	r3, #0
 8009340:	d001      	beq.n	8009346 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009342:	2301      	movs	r3, #1
 8009344:	e0e7      	b.n	8009516 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	4a78      	ldr	r2, [pc, #480]	; (800952c <HAL_I2C_Init+0x280>)
 800934a:	fba2 2303 	umull	r2, r3, r2, r3
 800934e:	0c9b      	lsrs	r3, r3, #18
 8009350:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	68ba      	ldr	r2, [r7, #8]
 8009362:	430a      	orrs	r2, r1
 8009364:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	6a1b      	ldr	r3, [r3, #32]
 800936c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	4a6a      	ldr	r2, [pc, #424]	; (8009520 <HAL_I2C_Init+0x274>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d802      	bhi.n	8009380 <HAL_I2C_Init+0xd4>
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	3301      	adds	r3, #1
 800937e:	e009      	b.n	8009394 <HAL_I2C_Init+0xe8>
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009386:	fb02 f303 	mul.w	r3, r2, r3
 800938a:	4a69      	ldr	r2, [pc, #420]	; (8009530 <HAL_I2C_Init+0x284>)
 800938c:	fba2 2303 	umull	r2, r3, r2, r3
 8009390:	099b      	lsrs	r3, r3, #6
 8009392:	3301      	adds	r3, #1
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	6812      	ldr	r2, [r2, #0]
 8009398:	430b      	orrs	r3, r1
 800939a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	69db      	ldr	r3, [r3, #28]
 80093a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80093a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	495c      	ldr	r1, [pc, #368]	; (8009520 <HAL_I2C_Init+0x274>)
 80093b0:	428b      	cmp	r3, r1
 80093b2:	d819      	bhi.n	80093e8 <HAL_I2C_Init+0x13c>
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	1e59      	subs	r1, r3, #1
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	005b      	lsls	r3, r3, #1
 80093be:	fbb1 f3f3 	udiv	r3, r1, r3
 80093c2:	1c59      	adds	r1, r3, #1
 80093c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80093c8:	400b      	ands	r3, r1
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00a      	beq.n	80093e4 <HAL_I2C_Init+0x138>
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	1e59      	subs	r1, r3, #1
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	685b      	ldr	r3, [r3, #4]
 80093d6:	005b      	lsls	r3, r3, #1
 80093d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80093dc:	3301      	adds	r3, #1
 80093de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093e2:	e051      	b.n	8009488 <HAL_I2C_Init+0x1dc>
 80093e4:	2304      	movs	r3, #4
 80093e6:	e04f      	b.n	8009488 <HAL_I2C_Init+0x1dc>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d111      	bne.n	8009414 <HAL_I2C_Init+0x168>
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	1e58      	subs	r0, r3, #1
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6859      	ldr	r1, [r3, #4]
 80093f8:	460b      	mov	r3, r1
 80093fa:	005b      	lsls	r3, r3, #1
 80093fc:	440b      	add	r3, r1
 80093fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8009402:	3301      	adds	r3, #1
 8009404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009408:	2b00      	cmp	r3, #0
 800940a:	bf0c      	ite	eq
 800940c:	2301      	moveq	r3, #1
 800940e:	2300      	movne	r3, #0
 8009410:	b2db      	uxtb	r3, r3
 8009412:	e012      	b.n	800943a <HAL_I2C_Init+0x18e>
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	1e58      	subs	r0, r3, #1
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6859      	ldr	r1, [r3, #4]
 800941c:	460b      	mov	r3, r1
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	440b      	add	r3, r1
 8009422:	0099      	lsls	r1, r3, #2
 8009424:	440b      	add	r3, r1
 8009426:	fbb0 f3f3 	udiv	r3, r0, r3
 800942a:	3301      	adds	r3, #1
 800942c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009430:	2b00      	cmp	r3, #0
 8009432:	bf0c      	ite	eq
 8009434:	2301      	moveq	r3, #1
 8009436:	2300      	movne	r3, #0
 8009438:	b2db      	uxtb	r3, r3
 800943a:	2b00      	cmp	r3, #0
 800943c:	d001      	beq.n	8009442 <HAL_I2C_Init+0x196>
 800943e:	2301      	movs	r3, #1
 8009440:	e022      	b.n	8009488 <HAL_I2C_Init+0x1dc>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d10e      	bne.n	8009468 <HAL_I2C_Init+0x1bc>
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	1e58      	subs	r0, r3, #1
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6859      	ldr	r1, [r3, #4]
 8009452:	460b      	mov	r3, r1
 8009454:	005b      	lsls	r3, r3, #1
 8009456:	440b      	add	r3, r1
 8009458:	fbb0 f3f3 	udiv	r3, r0, r3
 800945c:	3301      	adds	r3, #1
 800945e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009466:	e00f      	b.n	8009488 <HAL_I2C_Init+0x1dc>
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	1e58      	subs	r0, r3, #1
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6859      	ldr	r1, [r3, #4]
 8009470:	460b      	mov	r3, r1
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	440b      	add	r3, r1
 8009476:	0099      	lsls	r1, r3, #2
 8009478:	440b      	add	r3, r1
 800947a:	fbb0 f3f3 	udiv	r3, r0, r3
 800947e:	3301      	adds	r3, #1
 8009480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009484:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009488:	6879      	ldr	r1, [r7, #4]
 800948a:	6809      	ldr	r1, [r1, #0]
 800948c:	4313      	orrs	r3, r2
 800948e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	69da      	ldr	r2, [r3, #28]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a1b      	ldr	r3, [r3, #32]
 80094a2:	431a      	orrs	r2, r3
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	430a      	orrs	r2, r1
 80094aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80094b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80094ba:	687a      	ldr	r2, [r7, #4]
 80094bc:	6911      	ldr	r1, [r2, #16]
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	68d2      	ldr	r2, [r2, #12]
 80094c2:	4311      	orrs	r1, r2
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	6812      	ldr	r2, [r2, #0]
 80094c8:	430b      	orrs	r3, r1
 80094ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	695a      	ldr	r2, [r3, #20]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	699b      	ldr	r3, [r3, #24]
 80094de:	431a      	orrs	r2, r3
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	430a      	orrs	r2, r1
 80094e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f042 0201 	orr.w	r2, r2, #1
 80094f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2220      	movs	r2, #32
 8009502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2200      	movs	r2, #0
 800950a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	000186a0 	.word	0x000186a0
 8009524:	001e847f 	.word	0x001e847f
 8009528:	003d08ff 	.word	0x003d08ff
 800952c:	431bde83 	.word	0x431bde83
 8009530:	10624dd3 	.word	0x10624dd3

08009534 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b088      	sub	sp, #32
 8009538:	af02      	add	r7, sp, #8
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	607a      	str	r2, [r7, #4]
 800953e:	461a      	mov	r2, r3
 8009540:	460b      	mov	r3, r1
 8009542:	817b      	strh	r3, [r7, #10]
 8009544:	4613      	mov	r3, r2
 8009546:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009548:	f7fd fcf8 	bl	8006f3c <HAL_GetTick>
 800954c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009554:	b2db      	uxtb	r3, r3
 8009556:	2b20      	cmp	r3, #32
 8009558:	f040 80e0 	bne.w	800971c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	9300      	str	r3, [sp, #0]
 8009560:	2319      	movs	r3, #25
 8009562:	2201      	movs	r2, #1
 8009564:	4970      	ldr	r1, [pc, #448]	; (8009728 <HAL_I2C_Master_Transmit+0x1f4>)
 8009566:	68f8      	ldr	r0, [r7, #12]
 8009568:	f000 fc58 	bl	8009e1c <I2C_WaitOnFlagUntilTimeout>
 800956c:	4603      	mov	r3, r0
 800956e:	2b00      	cmp	r3, #0
 8009570:	d001      	beq.n	8009576 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009572:	2302      	movs	r3, #2
 8009574:	e0d3      	b.n	800971e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800957c:	2b01      	cmp	r3, #1
 800957e:	d101      	bne.n	8009584 <HAL_I2C_Master_Transmit+0x50>
 8009580:	2302      	movs	r3, #2
 8009582:	e0cc      	b.n	800971e <HAL_I2C_Master_Transmit+0x1ea>
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2201      	movs	r2, #1
 8009588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f003 0301 	and.w	r3, r3, #1
 8009596:	2b01      	cmp	r3, #1
 8009598:	d007      	beq.n	80095aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f042 0201 	orr.w	r2, r2, #1
 80095a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80095b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2221      	movs	r2, #33	; 0x21
 80095be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2210      	movs	r2, #16
 80095c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2200      	movs	r2, #0
 80095ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	893a      	ldrh	r2, [r7, #8]
 80095da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	4a50      	ldr	r2, [pc, #320]	; (800972c <HAL_I2C_Master_Transmit+0x1f8>)
 80095ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80095ec:	8979      	ldrh	r1, [r7, #10]
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	6a3a      	ldr	r2, [r7, #32]
 80095f2:	68f8      	ldr	r0, [r7, #12]
 80095f4:	f000 fac2 	bl	8009b7c <I2C_MasterRequestWrite>
 80095f8:	4603      	mov	r3, r0
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d001      	beq.n	8009602 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80095fe:	2301      	movs	r3, #1
 8009600:	e08d      	b.n	800971e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009602:	2300      	movs	r3, #0
 8009604:	613b      	str	r3, [r7, #16]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	695b      	ldr	r3, [r3, #20]
 800960c:	613b      	str	r3, [r7, #16]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	699b      	ldr	r3, [r3, #24]
 8009614:	613b      	str	r3, [r7, #16]
 8009616:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009618:	e066      	b.n	80096e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800961a:	697a      	ldr	r2, [r7, #20]
 800961c:	6a39      	ldr	r1, [r7, #32]
 800961e:	68f8      	ldr	r0, [r7, #12]
 8009620:	f000 fcd2 	bl	8009fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d00d      	beq.n	8009646 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800962e:	2b04      	cmp	r3, #4
 8009630:	d107      	bne.n	8009642 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009640:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009642:	2301      	movs	r3, #1
 8009644:	e06b      	b.n	800971e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964a:	781a      	ldrb	r2, [r3, #0]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009656:	1c5a      	adds	r2, r3, #1
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009660:	b29b      	uxth	r3, r3
 8009662:	3b01      	subs	r3, #1
 8009664:	b29a      	uxth	r2, r3
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800966e:	3b01      	subs	r3, #1
 8009670:	b29a      	uxth	r2, r3
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	695b      	ldr	r3, [r3, #20]
 800967c:	f003 0304 	and.w	r3, r3, #4
 8009680:	2b04      	cmp	r3, #4
 8009682:	d11b      	bne.n	80096bc <HAL_I2C_Master_Transmit+0x188>
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009688:	2b00      	cmp	r3, #0
 800968a:	d017      	beq.n	80096bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009690:	781a      	ldrb	r2, [r3, #0]
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800969c:	1c5a      	adds	r2, r3, #1
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	3b01      	subs	r3, #1
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096b4:	3b01      	subs	r3, #1
 80096b6:	b29a      	uxth	r2, r3
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096bc:	697a      	ldr	r2, [r7, #20]
 80096be:	6a39      	ldr	r1, [r7, #32]
 80096c0:	68f8      	ldr	r0, [r7, #12]
 80096c2:	f000 fcc2 	bl	800a04a <I2C_WaitOnBTFFlagUntilTimeout>
 80096c6:	4603      	mov	r3, r0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d00d      	beq.n	80096e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096d0:	2b04      	cmp	r3, #4
 80096d2:	d107      	bne.n	80096e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	e01a      	b.n	800971e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d194      	bne.n	800961a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2220      	movs	r2, #32
 8009704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2200      	movs	r2, #0
 800970c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2200      	movs	r2, #0
 8009714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009718:	2300      	movs	r3, #0
 800971a:	e000      	b.n	800971e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800971c:	2302      	movs	r3, #2
  }
}
 800971e:	4618      	mov	r0, r3
 8009720:	3718      	adds	r7, #24
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	00100002 	.word	0x00100002
 800972c:	ffff0000 	.word	0xffff0000

08009730 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b08c      	sub	sp, #48	; 0x30
 8009734:	af02      	add	r7, sp, #8
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	607a      	str	r2, [r7, #4]
 800973a:	461a      	mov	r2, r3
 800973c:	460b      	mov	r3, r1
 800973e:	817b      	strh	r3, [r7, #10]
 8009740:	4613      	mov	r3, r2
 8009742:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009744:	f7fd fbfa 	bl	8006f3c <HAL_GetTick>
 8009748:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009750:	b2db      	uxtb	r3, r3
 8009752:	2b20      	cmp	r3, #32
 8009754:	f040 820b 	bne.w	8009b6e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975a:	9300      	str	r3, [sp, #0]
 800975c:	2319      	movs	r3, #25
 800975e:	2201      	movs	r2, #1
 8009760:	497c      	ldr	r1, [pc, #496]	; (8009954 <HAL_I2C_Master_Receive+0x224>)
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	f000 fb5a 	bl	8009e1c <I2C_WaitOnFlagUntilTimeout>
 8009768:	4603      	mov	r3, r0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d001      	beq.n	8009772 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800976e:	2302      	movs	r3, #2
 8009770:	e1fe      	b.n	8009b70 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009778:	2b01      	cmp	r3, #1
 800977a:	d101      	bne.n	8009780 <HAL_I2C_Master_Receive+0x50>
 800977c:	2302      	movs	r3, #2
 800977e:	e1f7      	b.n	8009b70 <HAL_I2C_Master_Receive+0x440>
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f003 0301 	and.w	r3, r3, #1
 8009792:	2b01      	cmp	r3, #1
 8009794:	d007      	beq.n	80097a6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f042 0201 	orr.w	r2, r2, #1
 80097a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80097b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	2222      	movs	r2, #34	; 0x22
 80097ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	2210      	movs	r2, #16
 80097c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2200      	movs	r2, #0
 80097ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	893a      	ldrh	r2, [r7, #8]
 80097d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097dc:	b29a      	uxth	r2, r3
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	4a5c      	ldr	r2, [pc, #368]	; (8009958 <HAL_I2C_Master_Receive+0x228>)
 80097e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80097e8:	8979      	ldrh	r1, [r7, #10]
 80097ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097ee:	68f8      	ldr	r0, [r7, #12]
 80097f0:	f000 fa46 	bl	8009c80 <I2C_MasterRequestRead>
 80097f4:	4603      	mov	r3, r0
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d001      	beq.n	80097fe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	e1b8      	b.n	8009b70 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009802:	2b00      	cmp	r3, #0
 8009804:	d113      	bne.n	800982e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009806:	2300      	movs	r3, #0
 8009808:	623b      	str	r3, [r7, #32]
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	695b      	ldr	r3, [r3, #20]
 8009810:	623b      	str	r3, [r7, #32]
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	699b      	ldr	r3, [r3, #24]
 8009818:	623b      	str	r3, [r7, #32]
 800981a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800982a:	601a      	str	r2, [r3, #0]
 800982c:	e18c      	b.n	8009b48 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009832:	2b01      	cmp	r3, #1
 8009834:	d11b      	bne.n	800986e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009844:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009846:	2300      	movs	r3, #0
 8009848:	61fb      	str	r3, [r7, #28]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	695b      	ldr	r3, [r3, #20]
 8009850:	61fb      	str	r3, [r7, #28]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	699b      	ldr	r3, [r3, #24]
 8009858:	61fb      	str	r3, [r7, #28]
 800985a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800986a:	601a      	str	r2, [r3, #0]
 800986c:	e16c      	b.n	8009b48 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009872:	2b02      	cmp	r3, #2
 8009874:	d11b      	bne.n	80098ae <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009884:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009894:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009896:	2300      	movs	r3, #0
 8009898:	61bb      	str	r3, [r7, #24]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	695b      	ldr	r3, [r3, #20]
 80098a0:	61bb      	str	r3, [r7, #24]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	699b      	ldr	r3, [r3, #24]
 80098a8:	61bb      	str	r3, [r7, #24]
 80098aa:	69bb      	ldr	r3, [r7, #24]
 80098ac:	e14c      	b.n	8009b48 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80098bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098be:	2300      	movs	r3, #0
 80098c0:	617b      	str	r3, [r7, #20]
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	695b      	ldr	r3, [r3, #20]
 80098c8:	617b      	str	r3, [r7, #20]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	699b      	ldr	r3, [r3, #24]
 80098d0:	617b      	str	r3, [r7, #20]
 80098d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80098d4:	e138      	b.n	8009b48 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098da:	2b03      	cmp	r3, #3
 80098dc:	f200 80f1 	bhi.w	8009ac2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d123      	bne.n	8009930 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f000 fbed 	bl	800a0cc <I2C_WaitOnRXNEFlagUntilTimeout>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d001      	beq.n	80098fc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80098f8:	2301      	movs	r3, #1
 80098fa:	e139      	b.n	8009b70 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	691a      	ldr	r2, [r3, #16]
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009906:	b2d2      	uxtb	r2, r2
 8009908:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990e:	1c5a      	adds	r2, r3, #1
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009918:	3b01      	subs	r3, #1
 800991a:	b29a      	uxth	r2, r3
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009924:	b29b      	uxth	r3, r3
 8009926:	3b01      	subs	r3, #1
 8009928:	b29a      	uxth	r2, r3
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800992e:	e10b      	b.n	8009b48 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009934:	2b02      	cmp	r3, #2
 8009936:	d14e      	bne.n	80099d6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993a:	9300      	str	r3, [sp, #0]
 800993c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800993e:	2200      	movs	r2, #0
 8009940:	4906      	ldr	r1, [pc, #24]	; (800995c <HAL_I2C_Master_Receive+0x22c>)
 8009942:	68f8      	ldr	r0, [r7, #12]
 8009944:	f000 fa6a 	bl	8009e1c <I2C_WaitOnFlagUntilTimeout>
 8009948:	4603      	mov	r3, r0
 800994a:	2b00      	cmp	r3, #0
 800994c:	d008      	beq.n	8009960 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	e10e      	b.n	8009b70 <HAL_I2C_Master_Receive+0x440>
 8009952:	bf00      	nop
 8009954:	00100002 	.word	0x00100002
 8009958:	ffff0000 	.word	0xffff0000
 800995c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800996e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	691a      	ldr	r2, [r3, #16]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800997a:	b2d2      	uxtb	r2, r2
 800997c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009982:	1c5a      	adds	r2, r3, #1
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800998c:	3b01      	subs	r3, #1
 800998e:	b29a      	uxth	r2, r3
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009998:	b29b      	uxth	r3, r3
 800999a:	3b01      	subs	r3, #1
 800999c:	b29a      	uxth	r2, r3
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	691a      	ldr	r2, [r3, #16]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ac:	b2d2      	uxtb	r2, r2
 80099ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b4:	1c5a      	adds	r2, r3, #1
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099be:	3b01      	subs	r3, #1
 80099c0:	b29a      	uxth	r2, r3
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	3b01      	subs	r3, #1
 80099ce:	b29a      	uxth	r2, r3
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80099d4:	e0b8      	b.n	8009b48 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80099d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d8:	9300      	str	r3, [sp, #0]
 80099da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099dc:	2200      	movs	r2, #0
 80099de:	4966      	ldr	r1, [pc, #408]	; (8009b78 <HAL_I2C_Master_Receive+0x448>)
 80099e0:	68f8      	ldr	r0, [r7, #12]
 80099e2:	f000 fa1b 	bl	8009e1c <I2C_WaitOnFlagUntilTimeout>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d001      	beq.n	80099f0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80099ec:	2301      	movs	r3, #1
 80099ee:	e0bf      	b.n	8009b70 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	681a      	ldr	r2, [r3, #0]
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	691a      	ldr	r2, [r3, #16]
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a0a:	b2d2      	uxtb	r2, r2
 8009a0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a12:	1c5a      	adds	r2, r3, #1
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	b29a      	uxth	r2, r3
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	b29a      	uxth	r2, r3
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a34:	9300      	str	r3, [sp, #0]
 8009a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a38:	2200      	movs	r2, #0
 8009a3a:	494f      	ldr	r1, [pc, #316]	; (8009b78 <HAL_I2C_Master_Receive+0x448>)
 8009a3c:	68f8      	ldr	r0, [r7, #12]
 8009a3e:	f000 f9ed 	bl	8009e1c <I2C_WaitOnFlagUntilTimeout>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d001      	beq.n	8009a4c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009a48:	2301      	movs	r3, #1
 8009a4a:	e091      	b.n	8009b70 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	691a      	ldr	r2, [r3, #16]
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a66:	b2d2      	uxtb	r2, r2
 8009a68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a6e:	1c5a      	adds	r2, r3, #1
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a78:	3b01      	subs	r3, #1
 8009a7a:	b29a      	uxth	r2, r3
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	3b01      	subs	r3, #1
 8009a88:	b29a      	uxth	r2, r3
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	691a      	ldr	r2, [r3, #16]
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a98:	b2d2      	uxtb	r2, r2
 8009a9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa0:	1c5a      	adds	r2, r3, #1
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009aaa:	3b01      	subs	r3, #1
 8009aac:	b29a      	uxth	r2, r3
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	3b01      	subs	r3, #1
 8009aba:	b29a      	uxth	r2, r3
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009ac0:	e042      	b.n	8009b48 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ac4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009ac6:	68f8      	ldr	r0, [r7, #12]
 8009ac8:	f000 fb00 	bl	800a0cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8009acc:	4603      	mov	r3, r0
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d001      	beq.n	8009ad6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e04c      	b.n	8009b70 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	691a      	ldr	r2, [r3, #16]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae0:	b2d2      	uxtb	r2, r2
 8009ae2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae8:	1c5a      	adds	r2, r3, #1
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009af2:	3b01      	subs	r3, #1
 8009af4:	b29a      	uxth	r2, r3
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009afe:	b29b      	uxth	r3, r3
 8009b00:	3b01      	subs	r3, #1
 8009b02:	b29a      	uxth	r2, r3
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	695b      	ldr	r3, [r3, #20]
 8009b0e:	f003 0304 	and.w	r3, r3, #4
 8009b12:	2b04      	cmp	r3, #4
 8009b14:	d118      	bne.n	8009b48 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	691a      	ldr	r2, [r3, #16]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b20:	b2d2      	uxtb	r2, r2
 8009b22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b28:	1c5a      	adds	r2, r3, #1
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b32:	3b01      	subs	r3, #1
 8009b34:	b29a      	uxth	r2, r3
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	3b01      	subs	r3, #1
 8009b42:	b29a      	uxth	r2, r3
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	f47f aec2 	bne.w	80098d6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2220      	movs	r2, #32
 8009b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	e000      	b.n	8009b70 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009b6e:	2302      	movs	r3, #2
  }
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3728      	adds	r7, #40	; 0x28
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	00010004 	.word	0x00010004

08009b7c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b088      	sub	sp, #32
 8009b80:	af02      	add	r7, sp, #8
 8009b82:	60f8      	str	r0, [r7, #12]
 8009b84:	607a      	str	r2, [r7, #4]
 8009b86:	603b      	str	r3, [r7, #0]
 8009b88:	460b      	mov	r3, r1
 8009b8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b90:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	2b08      	cmp	r3, #8
 8009b96:	d006      	beq.n	8009ba6 <I2C_MasterRequestWrite+0x2a>
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d003      	beq.n	8009ba6 <I2C_MasterRequestWrite+0x2a>
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009ba4:	d108      	bne.n	8009bb8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009bb4:	601a      	str	r2, [r3, #0]
 8009bb6:	e00b      	b.n	8009bd0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bbc:	2b12      	cmp	r3, #18
 8009bbe:	d107      	bne.n	8009bd0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009bce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	9300      	str	r3, [sp, #0]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009bdc:	68f8      	ldr	r0, [r7, #12]
 8009bde:	f000 f91d 	bl	8009e1c <I2C_WaitOnFlagUntilTimeout>
 8009be2:	4603      	mov	r3, r0
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d00d      	beq.n	8009c04 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bf6:	d103      	bne.n	8009c00 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009bfe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009c00:	2303      	movs	r3, #3
 8009c02:	e035      	b.n	8009c70 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	691b      	ldr	r3, [r3, #16]
 8009c08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c0c:	d108      	bne.n	8009c20 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009c0e:	897b      	ldrh	r3, [r7, #10]
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	461a      	mov	r2, r3
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009c1c:	611a      	str	r2, [r3, #16]
 8009c1e:	e01b      	b.n	8009c58 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009c20:	897b      	ldrh	r3, [r7, #10]
 8009c22:	11db      	asrs	r3, r3, #7
 8009c24:	b2db      	uxtb	r3, r3
 8009c26:	f003 0306 	and.w	r3, r3, #6
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	f063 030f 	orn	r3, r3, #15
 8009c30:	b2da      	uxtb	r2, r3
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	490e      	ldr	r1, [pc, #56]	; (8009c78 <I2C_MasterRequestWrite+0xfc>)
 8009c3e:	68f8      	ldr	r0, [r7, #12]
 8009c40:	f000 f943 	bl	8009eca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d001      	beq.n	8009c4e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	e010      	b.n	8009c70 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009c4e:	897b      	ldrh	r3, [r7, #10]
 8009c50:	b2da      	uxtb	r2, r3
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	687a      	ldr	r2, [r7, #4]
 8009c5c:	4907      	ldr	r1, [pc, #28]	; (8009c7c <I2C_MasterRequestWrite+0x100>)
 8009c5e:	68f8      	ldr	r0, [r7, #12]
 8009c60:	f000 f933 	bl	8009eca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009c64:	4603      	mov	r3, r0
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d001      	beq.n	8009c6e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e000      	b.n	8009c70 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009c6e:	2300      	movs	r3, #0
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3718      	adds	r7, #24
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}
 8009c78:	00010008 	.word	0x00010008
 8009c7c:	00010002 	.word	0x00010002

08009c80 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b088      	sub	sp, #32
 8009c84:	af02      	add	r7, sp, #8
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	607a      	str	r2, [r7, #4]
 8009c8a:	603b      	str	r3, [r7, #0]
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c94:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009ca4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	2b08      	cmp	r3, #8
 8009caa:	d006      	beq.n	8009cba <I2C_MasterRequestRead+0x3a>
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d003      	beq.n	8009cba <I2C_MasterRequestRead+0x3a>
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009cb8:	d108      	bne.n	8009ccc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009cc8:	601a      	str	r2, [r3, #0]
 8009cca:	e00b      	b.n	8009ce4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cd0:	2b11      	cmp	r3, #17
 8009cd2:	d107      	bne.n	8009ce4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ce2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	9300      	str	r3, [sp, #0]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2200      	movs	r2, #0
 8009cec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009cf0:	68f8      	ldr	r0, [r7, #12]
 8009cf2:	f000 f893 	bl	8009e1c <I2C_WaitOnFlagUntilTimeout>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d00d      	beq.n	8009d18 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d0a:	d103      	bne.n	8009d14 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009d12:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009d14:	2303      	movs	r3, #3
 8009d16:	e079      	b.n	8009e0c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	691b      	ldr	r3, [r3, #16]
 8009d1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d20:	d108      	bne.n	8009d34 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009d22:	897b      	ldrh	r3, [r7, #10]
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	f043 0301 	orr.w	r3, r3, #1
 8009d2a:	b2da      	uxtb	r2, r3
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	611a      	str	r2, [r3, #16]
 8009d32:	e05f      	b.n	8009df4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009d34:	897b      	ldrh	r3, [r7, #10]
 8009d36:	11db      	asrs	r3, r3, #7
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	f003 0306 	and.w	r3, r3, #6
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	f063 030f 	orn	r3, r3, #15
 8009d44:	b2da      	uxtb	r2, r3
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	4930      	ldr	r1, [pc, #192]	; (8009e14 <I2C_MasterRequestRead+0x194>)
 8009d52:	68f8      	ldr	r0, [r7, #12]
 8009d54:	f000 f8b9 	bl	8009eca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d001      	beq.n	8009d62 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	e054      	b.n	8009e0c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009d62:	897b      	ldrh	r3, [r7, #10]
 8009d64:	b2da      	uxtb	r2, r3
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	4929      	ldr	r1, [pc, #164]	; (8009e18 <I2C_MasterRequestRead+0x198>)
 8009d72:	68f8      	ldr	r0, [r7, #12]
 8009d74:	f000 f8a9 	bl	8009eca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d001      	beq.n	8009d82 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	e044      	b.n	8009e0c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d82:	2300      	movs	r3, #0
 8009d84:	613b      	str	r3, [r7, #16]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	695b      	ldr	r3, [r3, #20]
 8009d8c:	613b      	str	r3, [r7, #16]
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	699b      	ldr	r3, [r3, #24]
 8009d94:	613b      	str	r3, [r7, #16]
 8009d96:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009da6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	9300      	str	r3, [sp, #0]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009db4:	68f8      	ldr	r0, [r7, #12]
 8009db6:	f000 f831 	bl	8009e1c <I2C_WaitOnFlagUntilTimeout>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d00d      	beq.n	8009ddc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dce:	d103      	bne.n	8009dd8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009dd6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8009dd8:	2303      	movs	r3, #3
 8009dda:	e017      	b.n	8009e0c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009ddc:	897b      	ldrh	r3, [r7, #10]
 8009dde:	11db      	asrs	r3, r3, #7
 8009de0:	b2db      	uxtb	r3, r3
 8009de2:	f003 0306 	and.w	r3, r3, #6
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	f063 030e 	orn	r3, r3, #14
 8009dec:	b2da      	uxtb	r2, r3
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	4907      	ldr	r1, [pc, #28]	; (8009e18 <I2C_MasterRequestRead+0x198>)
 8009dfa:	68f8      	ldr	r0, [r7, #12]
 8009dfc:	f000 f865 	bl	8009eca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009e00:	4603      	mov	r3, r0
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d001      	beq.n	8009e0a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8009e06:	2301      	movs	r3, #1
 8009e08:	e000      	b.n	8009e0c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8009e0a:	2300      	movs	r3, #0
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3718      	adds	r7, #24
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}
 8009e14:	00010008 	.word	0x00010008
 8009e18:	00010002 	.word	0x00010002

08009e1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b084      	sub	sp, #16
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	603b      	str	r3, [r7, #0]
 8009e28:	4613      	mov	r3, r2
 8009e2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009e2c:	e025      	b.n	8009e7a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e34:	d021      	beq.n	8009e7a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e36:	f7fd f881 	bl	8006f3c <HAL_GetTick>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	69bb      	ldr	r3, [r7, #24]
 8009e3e:	1ad3      	subs	r3, r2, r3
 8009e40:	683a      	ldr	r2, [r7, #0]
 8009e42:	429a      	cmp	r2, r3
 8009e44:	d302      	bcc.n	8009e4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d116      	bne.n	8009e7a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2220      	movs	r2, #32
 8009e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e66:	f043 0220 	orr.w	r2, r3, #32
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	e023      	b.n	8009ec2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	0c1b      	lsrs	r3, r3, #16
 8009e7e:	b2db      	uxtb	r3, r3
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d10d      	bne.n	8009ea0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	695b      	ldr	r3, [r3, #20]
 8009e8a:	43da      	mvns	r2, r3
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	4013      	ands	r3, r2
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	bf0c      	ite	eq
 8009e96:	2301      	moveq	r3, #1
 8009e98:	2300      	movne	r3, #0
 8009e9a:	b2db      	uxtb	r3, r3
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	e00c      	b.n	8009eba <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	699b      	ldr	r3, [r3, #24]
 8009ea6:	43da      	mvns	r2, r3
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	4013      	ands	r3, r2
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	bf0c      	ite	eq
 8009eb2:	2301      	moveq	r3, #1
 8009eb4:	2300      	movne	r3, #0
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	461a      	mov	r2, r3
 8009eba:	79fb      	ldrb	r3, [r7, #7]
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d0b6      	beq.n	8009e2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b084      	sub	sp, #16
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	60f8      	str	r0, [r7, #12]
 8009ed2:	60b9      	str	r1, [r7, #8]
 8009ed4:	607a      	str	r2, [r7, #4]
 8009ed6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009ed8:	e051      	b.n	8009f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	695b      	ldr	r3, [r3, #20]
 8009ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ee4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ee8:	d123      	bne.n	8009f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	681a      	ldr	r2, [r3, #0]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ef8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009f02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2200      	movs	r2, #0
 8009f08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2220      	movs	r2, #32
 8009f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2200      	movs	r2, #0
 8009f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f1e:	f043 0204 	orr.w	r2, r3, #4
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009f2e:	2301      	movs	r3, #1
 8009f30:	e046      	b.n	8009fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f38:	d021      	beq.n	8009f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f3a:	f7fc ffff 	bl	8006f3c <HAL_GetTick>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	1ad3      	subs	r3, r2, r3
 8009f44:	687a      	ldr	r2, [r7, #4]
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d302      	bcc.n	8009f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d116      	bne.n	8009f7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	2200      	movs	r2, #0
 8009f54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2220      	movs	r2, #32
 8009f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2200      	movs	r2, #0
 8009f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f6a:	f043 0220 	orr.w	r2, r3, #32
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2200      	movs	r2, #0
 8009f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	e020      	b.n	8009fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	0c1b      	lsrs	r3, r3, #16
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d10c      	bne.n	8009fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	695b      	ldr	r3, [r3, #20]
 8009f8e:	43da      	mvns	r2, r3
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	4013      	ands	r3, r2
 8009f94:	b29b      	uxth	r3, r3
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	bf14      	ite	ne
 8009f9a:	2301      	movne	r3, #1
 8009f9c:	2300      	moveq	r3, #0
 8009f9e:	b2db      	uxtb	r3, r3
 8009fa0:	e00b      	b.n	8009fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	699b      	ldr	r3, [r3, #24]
 8009fa8:	43da      	mvns	r2, r3
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	4013      	ands	r3, r2
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	bf14      	ite	ne
 8009fb4:	2301      	movne	r3, #1
 8009fb6:	2300      	moveq	r3, #0
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d18d      	bne.n	8009eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009fbe:	2300      	movs	r3, #0
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3710      	adds	r7, #16
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}

08009fc8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b084      	sub	sp, #16
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009fd4:	e02d      	b.n	800a032 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009fd6:	68f8      	ldr	r0, [r7, #12]
 8009fd8:	f000 f8ce 	bl	800a178 <I2C_IsAcknowledgeFailed>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d001      	beq.n	8009fe6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e02d      	b.n	800a042 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fec:	d021      	beq.n	800a032 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fee:	f7fc ffa5 	bl	8006f3c <HAL_GetTick>
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	1ad3      	subs	r3, r2, r3
 8009ff8:	68ba      	ldr	r2, [r7, #8]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d302      	bcc.n	800a004 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d116      	bne.n	800a032 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2200      	movs	r2, #0
 800a008:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2220      	movs	r2, #32
 800a00e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2200      	movs	r2, #0
 800a016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a01e:	f043 0220 	orr.w	r2, r3, #32
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2200      	movs	r2, #0
 800a02a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a02e:	2301      	movs	r3, #1
 800a030:	e007      	b.n	800a042 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	695b      	ldr	r3, [r3, #20]
 800a038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a03c:	2b80      	cmp	r3, #128	; 0x80
 800a03e:	d1ca      	bne.n	8009fd6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	3710      	adds	r7, #16
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b084      	sub	sp, #16
 800a04e:	af00      	add	r7, sp, #0
 800a050:	60f8      	str	r0, [r7, #12]
 800a052:	60b9      	str	r1, [r7, #8]
 800a054:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a056:	e02d      	b.n	800a0b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a058:	68f8      	ldr	r0, [r7, #12]
 800a05a:	f000 f88d 	bl	800a178 <I2C_IsAcknowledgeFailed>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d001      	beq.n	800a068 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a064:	2301      	movs	r3, #1
 800a066:	e02d      	b.n	800a0c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a06e:	d021      	beq.n	800a0b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a070:	f7fc ff64 	bl	8006f3c <HAL_GetTick>
 800a074:	4602      	mov	r2, r0
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	1ad3      	subs	r3, r2, r3
 800a07a:	68ba      	ldr	r2, [r7, #8]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d302      	bcc.n	800a086 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d116      	bne.n	800a0b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2200      	movs	r2, #0
 800a08a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2220      	movs	r2, #32
 800a090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2200      	movs	r2, #0
 800a098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0a0:	f043 0220 	orr.w	r2, r3, #32
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	e007      	b.n	800a0c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	695b      	ldr	r3, [r3, #20]
 800a0ba:	f003 0304 	and.w	r3, r3, #4
 800a0be:	2b04      	cmp	r3, #4
 800a0c0:	d1ca      	bne.n	800a058 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a0c2:	2300      	movs	r3, #0
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3710      	adds	r7, #16
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a0d8:	e042      	b.n	800a160 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	695b      	ldr	r3, [r3, #20]
 800a0e0:	f003 0310 	and.w	r3, r3, #16
 800a0e4:	2b10      	cmp	r3, #16
 800a0e6:	d119      	bne.n	800a11c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f06f 0210 	mvn.w	r2, #16
 800a0f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2220      	movs	r2, #32
 800a0fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2200      	movs	r2, #0
 800a104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2200      	movs	r2, #0
 800a114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a118:	2301      	movs	r3, #1
 800a11a:	e029      	b.n	800a170 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a11c:	f7fc ff0e 	bl	8006f3c <HAL_GetTick>
 800a120:	4602      	mov	r2, r0
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	1ad3      	subs	r3, r2, r3
 800a126:	68ba      	ldr	r2, [r7, #8]
 800a128:	429a      	cmp	r2, r3
 800a12a:	d302      	bcc.n	800a132 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d116      	bne.n	800a160 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2200      	movs	r2, #0
 800a136:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2220      	movs	r2, #32
 800a13c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2200      	movs	r2, #0
 800a144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a14c:	f043 0220 	orr.w	r2, r3, #32
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2200      	movs	r2, #0
 800a158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a15c:	2301      	movs	r3, #1
 800a15e:	e007      	b.n	800a170 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	695b      	ldr	r3, [r3, #20]
 800a166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a16a:	2b40      	cmp	r3, #64	; 0x40
 800a16c:	d1b5      	bne.n	800a0da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a16e:	2300      	movs	r3, #0
}
 800a170:	4618      	mov	r0, r3
 800a172:	3710      	adds	r7, #16
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}

0800a178 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	695b      	ldr	r3, [r3, #20]
 800a186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a18a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a18e:	d11b      	bne.n	800a1c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a198:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2220      	movs	r2, #32
 800a1a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1b4:	f043 0204 	orr.w	r2, r3, #4
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	e000      	b.n	800a1ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a1c8:	2300      	movs	r3, #0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	370c      	adds	r7, #12
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr

0800a1d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a1d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1d8:	b08f      	sub	sp, #60	; 0x3c
 800a1da:	af0a      	add	r7, sp, #40	; 0x28
 800a1dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d101      	bne.n	800a1e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	e116      	b.n	800a416 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d106      	bne.n	800a208 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f00e f90e 	bl	8018424 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2203      	movs	r2, #3
 800a20c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d102      	bne.n	800a222 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2200      	movs	r2, #0
 800a220:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4618      	mov	r0, r3
 800a228:	f005 ff73 	bl	8010112 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	603b      	str	r3, [r7, #0]
 800a232:	687e      	ldr	r6, [r7, #4]
 800a234:	466d      	mov	r5, sp
 800a236:	f106 0410 	add.w	r4, r6, #16
 800a23a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a23c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a23e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a240:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a242:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a246:	e885 0003 	stmia.w	r5, {r0, r1}
 800a24a:	1d33      	adds	r3, r6, #4
 800a24c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a24e:	6838      	ldr	r0, [r7, #0]
 800a250:	f005 fe4a 	bl	800fee8 <USB_CoreInit>
 800a254:	4603      	mov	r3, r0
 800a256:	2b00      	cmp	r3, #0
 800a258:	d005      	beq.n	800a266 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2202      	movs	r2, #2
 800a25e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800a262:	2301      	movs	r3, #1
 800a264:	e0d7      	b.n	800a416 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	2100      	movs	r1, #0
 800a26c:	4618      	mov	r0, r3
 800a26e:	f005 ff61 	bl	8010134 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a272:	2300      	movs	r3, #0
 800a274:	73fb      	strb	r3, [r7, #15]
 800a276:	e04a      	b.n	800a30e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a278:	7bfa      	ldrb	r2, [r7, #15]
 800a27a:	6879      	ldr	r1, [r7, #4]
 800a27c:	4613      	mov	r3, r2
 800a27e:	00db      	lsls	r3, r3, #3
 800a280:	4413      	add	r3, r2
 800a282:	009b      	lsls	r3, r3, #2
 800a284:	440b      	add	r3, r1
 800a286:	333d      	adds	r3, #61	; 0x3d
 800a288:	2201      	movs	r2, #1
 800a28a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a28c:	7bfa      	ldrb	r2, [r7, #15]
 800a28e:	6879      	ldr	r1, [r7, #4]
 800a290:	4613      	mov	r3, r2
 800a292:	00db      	lsls	r3, r3, #3
 800a294:	4413      	add	r3, r2
 800a296:	009b      	lsls	r3, r3, #2
 800a298:	440b      	add	r3, r1
 800a29a:	333c      	adds	r3, #60	; 0x3c
 800a29c:	7bfa      	ldrb	r2, [r7, #15]
 800a29e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a2a0:	7bfa      	ldrb	r2, [r7, #15]
 800a2a2:	7bfb      	ldrb	r3, [r7, #15]
 800a2a4:	b298      	uxth	r0, r3
 800a2a6:	6879      	ldr	r1, [r7, #4]
 800a2a8:	4613      	mov	r3, r2
 800a2aa:	00db      	lsls	r3, r3, #3
 800a2ac:	4413      	add	r3, r2
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	440b      	add	r3, r1
 800a2b2:	3344      	adds	r3, #68	; 0x44
 800a2b4:	4602      	mov	r2, r0
 800a2b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a2b8:	7bfa      	ldrb	r2, [r7, #15]
 800a2ba:	6879      	ldr	r1, [r7, #4]
 800a2bc:	4613      	mov	r3, r2
 800a2be:	00db      	lsls	r3, r3, #3
 800a2c0:	4413      	add	r3, r2
 800a2c2:	009b      	lsls	r3, r3, #2
 800a2c4:	440b      	add	r3, r1
 800a2c6:	3340      	adds	r3, #64	; 0x40
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a2cc:	7bfa      	ldrb	r2, [r7, #15]
 800a2ce:	6879      	ldr	r1, [r7, #4]
 800a2d0:	4613      	mov	r3, r2
 800a2d2:	00db      	lsls	r3, r3, #3
 800a2d4:	4413      	add	r3, r2
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	440b      	add	r3, r1
 800a2da:	3348      	adds	r3, #72	; 0x48
 800a2dc:	2200      	movs	r2, #0
 800a2de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a2e0:	7bfa      	ldrb	r2, [r7, #15]
 800a2e2:	6879      	ldr	r1, [r7, #4]
 800a2e4:	4613      	mov	r3, r2
 800a2e6:	00db      	lsls	r3, r3, #3
 800a2e8:	4413      	add	r3, r2
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	440b      	add	r3, r1
 800a2ee:	334c      	adds	r3, #76	; 0x4c
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a2f4:	7bfa      	ldrb	r2, [r7, #15]
 800a2f6:	6879      	ldr	r1, [r7, #4]
 800a2f8:	4613      	mov	r3, r2
 800a2fa:	00db      	lsls	r3, r3, #3
 800a2fc:	4413      	add	r3, r2
 800a2fe:	009b      	lsls	r3, r3, #2
 800a300:	440b      	add	r3, r1
 800a302:	3354      	adds	r3, #84	; 0x54
 800a304:	2200      	movs	r2, #0
 800a306:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a308:	7bfb      	ldrb	r3, [r7, #15]
 800a30a:	3301      	adds	r3, #1
 800a30c:	73fb      	strb	r3, [r7, #15]
 800a30e:	7bfa      	ldrb	r2, [r7, #15]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	429a      	cmp	r2, r3
 800a316:	d3af      	bcc.n	800a278 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a318:	2300      	movs	r3, #0
 800a31a:	73fb      	strb	r3, [r7, #15]
 800a31c:	e044      	b.n	800a3a8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a31e:	7bfa      	ldrb	r2, [r7, #15]
 800a320:	6879      	ldr	r1, [r7, #4]
 800a322:	4613      	mov	r3, r2
 800a324:	00db      	lsls	r3, r3, #3
 800a326:	4413      	add	r3, r2
 800a328:	009b      	lsls	r3, r3, #2
 800a32a:	440b      	add	r3, r1
 800a32c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800a330:	2200      	movs	r2, #0
 800a332:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a334:	7bfa      	ldrb	r2, [r7, #15]
 800a336:	6879      	ldr	r1, [r7, #4]
 800a338:	4613      	mov	r3, r2
 800a33a:	00db      	lsls	r3, r3, #3
 800a33c:	4413      	add	r3, r2
 800a33e:	009b      	lsls	r3, r3, #2
 800a340:	440b      	add	r3, r1
 800a342:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800a346:	7bfa      	ldrb	r2, [r7, #15]
 800a348:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a34a:	7bfa      	ldrb	r2, [r7, #15]
 800a34c:	6879      	ldr	r1, [r7, #4]
 800a34e:	4613      	mov	r3, r2
 800a350:	00db      	lsls	r3, r3, #3
 800a352:	4413      	add	r3, r2
 800a354:	009b      	lsls	r3, r3, #2
 800a356:	440b      	add	r3, r1
 800a358:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a35c:	2200      	movs	r2, #0
 800a35e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a360:	7bfa      	ldrb	r2, [r7, #15]
 800a362:	6879      	ldr	r1, [r7, #4]
 800a364:	4613      	mov	r3, r2
 800a366:	00db      	lsls	r3, r3, #3
 800a368:	4413      	add	r3, r2
 800a36a:	009b      	lsls	r3, r3, #2
 800a36c:	440b      	add	r3, r1
 800a36e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800a372:	2200      	movs	r2, #0
 800a374:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a376:	7bfa      	ldrb	r2, [r7, #15]
 800a378:	6879      	ldr	r1, [r7, #4]
 800a37a:	4613      	mov	r3, r2
 800a37c:	00db      	lsls	r3, r3, #3
 800a37e:	4413      	add	r3, r2
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	440b      	add	r3, r1
 800a384:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a388:	2200      	movs	r2, #0
 800a38a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a38c:	7bfa      	ldrb	r2, [r7, #15]
 800a38e:	6879      	ldr	r1, [r7, #4]
 800a390:	4613      	mov	r3, r2
 800a392:	00db      	lsls	r3, r3, #3
 800a394:	4413      	add	r3, r2
 800a396:	009b      	lsls	r3, r3, #2
 800a398:	440b      	add	r3, r1
 800a39a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800a39e:	2200      	movs	r2, #0
 800a3a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a3a2:	7bfb      	ldrb	r3, [r7, #15]
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	73fb      	strb	r3, [r7, #15]
 800a3a8:	7bfa      	ldrb	r2, [r7, #15]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d3b5      	bcc.n	800a31e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	603b      	str	r3, [r7, #0]
 800a3b8:	687e      	ldr	r6, [r7, #4]
 800a3ba:	466d      	mov	r5, sp
 800a3bc:	f106 0410 	add.w	r4, r6, #16
 800a3c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a3c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a3c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a3c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a3c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a3cc:	e885 0003 	stmia.w	r5, {r0, r1}
 800a3d0:	1d33      	adds	r3, r6, #4
 800a3d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a3d4:	6838      	ldr	r0, [r7, #0]
 800a3d6:	f005 fef9 	bl	80101cc <USB_DevInit>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d005      	beq.n	800a3ec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2202      	movs	r2, #2
 800a3e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e014      	b.n	800a416 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2201      	movs	r2, #1
 800a3f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a400:	2b01      	cmp	r3, #1
 800a402:	d102      	bne.n	800a40a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f001 f9b9 	bl	800b77c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4618      	mov	r0, r3
 800a410:	f007 f83b 	bl	801148a <USB_DevDisconnect>

  return HAL_OK;
 800a414:	2300      	movs	r3, #0
}
 800a416:	4618      	mov	r0, r3
 800a418:	3714      	adds	r7, #20
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a41e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a41e:	b580      	push	{r7, lr}
 800a420:	b084      	sub	sp, #16
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a432:	2b01      	cmp	r3, #1
 800a434:	d101      	bne.n	800a43a <HAL_PCD_Start+0x1c>
 800a436:	2302      	movs	r3, #2
 800a438:	e020      	b.n	800a47c <HAL_PCD_Start+0x5e>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2201      	movs	r2, #1
 800a43e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a446:	2b01      	cmp	r3, #1
 800a448:	d109      	bne.n	800a45e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d005      	beq.n	800a45e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a456:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4618      	mov	r0, r3
 800a464:	f005 fe44 	bl	80100f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4618      	mov	r0, r3
 800a46e:	f006 ffeb 	bl	8011448 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2200      	movs	r2, #0
 800a476:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a47a:	2300      	movs	r3, #0
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3710      	adds	r7, #16
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a484:	b590      	push	{r4, r7, lr}
 800a486:	b08d      	sub	sp, #52	; 0x34
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a492:	6a3b      	ldr	r3, [r7, #32]
 800a494:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4618      	mov	r0, r3
 800a49c:	f007 f8a9 	bl	80115f2 <USB_GetMode>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	f040 84b7 	bne.w	800ae16 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f007 f80d 	bl	80114cc <USB_ReadInterrupts>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	f000 84ad 	beq.w	800ae14 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800a4ba:	69fb      	ldr	r3, [r7, #28]
 800a4bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4c0:	689b      	ldr	r3, [r3, #8]
 800a4c2:	0a1b      	lsrs	r3, r3, #8
 800a4c4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f006 fffa 	bl	80114cc <USB_ReadInterrupts>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	f003 0302 	and.w	r3, r3, #2
 800a4de:	2b02      	cmp	r3, #2
 800a4e0:	d107      	bne.n	800a4f2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	695a      	ldr	r2, [r3, #20]
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f002 0202 	and.w	r2, r2, #2
 800a4f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f006 ffe8 	bl	80114cc <USB_ReadInterrupts>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	f003 0310 	and.w	r3, r3, #16
 800a502:	2b10      	cmp	r3, #16
 800a504:	d161      	bne.n	800a5ca <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	699a      	ldr	r2, [r3, #24]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f022 0210 	bic.w	r2, r2, #16
 800a514:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800a516:	6a3b      	ldr	r3, [r7, #32]
 800a518:	6a1b      	ldr	r3, [r3, #32]
 800a51a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800a51c:	69bb      	ldr	r3, [r7, #24]
 800a51e:	f003 020f 	and.w	r2, r3, #15
 800a522:	4613      	mov	r3, r2
 800a524:	00db      	lsls	r3, r3, #3
 800a526:	4413      	add	r3, r2
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	4413      	add	r3, r2
 800a532:	3304      	adds	r3, #4
 800a534:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800a536:	69bb      	ldr	r3, [r7, #24]
 800a538:	0c5b      	lsrs	r3, r3, #17
 800a53a:	f003 030f 	and.w	r3, r3, #15
 800a53e:	2b02      	cmp	r3, #2
 800a540:	d124      	bne.n	800a58c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800a542:	69ba      	ldr	r2, [r7, #24]
 800a544:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800a548:	4013      	ands	r3, r2
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d035      	beq.n	800a5ba <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800a552:	69bb      	ldr	r3, [r7, #24]
 800a554:	091b      	lsrs	r3, r3, #4
 800a556:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a558:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	461a      	mov	r2, r3
 800a560:	6a38      	ldr	r0, [r7, #32]
 800a562:	f006 fe1f 	bl	80111a4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	691a      	ldr	r2, [r3, #16]
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	091b      	lsrs	r3, r3, #4
 800a56e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a572:	441a      	add	r2, r3
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	6a1a      	ldr	r2, [r3, #32]
 800a57c:	69bb      	ldr	r3, [r7, #24]
 800a57e:	091b      	lsrs	r3, r3, #4
 800a580:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a584:	441a      	add	r2, r3
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	621a      	str	r2, [r3, #32]
 800a58a:	e016      	b.n	800a5ba <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800a58c:	69bb      	ldr	r3, [r7, #24]
 800a58e:	0c5b      	lsrs	r3, r3, #17
 800a590:	f003 030f 	and.w	r3, r3, #15
 800a594:	2b06      	cmp	r3, #6
 800a596:	d110      	bne.n	800a5ba <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a59e:	2208      	movs	r2, #8
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	6a38      	ldr	r0, [r7, #32]
 800a5a4:	f006 fdfe 	bl	80111a4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	6a1a      	ldr	r2, [r3, #32]
 800a5ac:	69bb      	ldr	r3, [r7, #24]
 800a5ae:	091b      	lsrs	r3, r3, #4
 800a5b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a5b4:	441a      	add	r2, r3
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	699a      	ldr	r2, [r3, #24]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f042 0210 	orr.w	r2, r2, #16
 800a5c8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4618      	mov	r0, r3
 800a5d0:	f006 ff7c 	bl	80114cc <USB_ReadInterrupts>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a5da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a5de:	f040 80a7 	bne.w	800a730 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f006 ff81 	bl	80114f2 <USB_ReadDevAllOutEpInterrupt>
 800a5f0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800a5f2:	e099      	b.n	800a728 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800a5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f6:	f003 0301 	and.w	r3, r3, #1
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	f000 808e 	beq.w	800a71c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a606:	b2d2      	uxtb	r2, r2
 800a608:	4611      	mov	r1, r2
 800a60a:	4618      	mov	r0, r3
 800a60c:	f006 ffa5 	bl	801155a <USB_ReadDevOutEPInterrupt>
 800a610:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	f003 0301 	and.w	r3, r3, #1
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d00c      	beq.n	800a636 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800a61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61e:	015a      	lsls	r2, r3, #5
 800a620:	69fb      	ldr	r3, [r7, #28]
 800a622:	4413      	add	r3, r2
 800a624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a628:	461a      	mov	r2, r3
 800a62a:	2301      	movs	r3, #1
 800a62c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800a62e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 ff1d 	bl	800b470 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	f003 0308 	and.w	r3, r3, #8
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d00c      	beq.n	800a65a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a642:	015a      	lsls	r2, r3, #5
 800a644:	69fb      	ldr	r3, [r7, #28]
 800a646:	4413      	add	r3, r2
 800a648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a64c:	461a      	mov	r2, r3
 800a64e:	2308      	movs	r3, #8
 800a650:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800a652:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f000 fff3 	bl	800b640 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	f003 0310 	and.w	r3, r3, #16
 800a660:	2b00      	cmp	r3, #0
 800a662:	d008      	beq.n	800a676 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800a664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a666:	015a      	lsls	r2, r3, #5
 800a668:	69fb      	ldr	r3, [r7, #28]
 800a66a:	4413      	add	r3, r2
 800a66c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a670:	461a      	mov	r2, r3
 800a672:	2310      	movs	r3, #16
 800a674:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	f003 0302 	and.w	r3, r3, #2
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d030      	beq.n	800a6e2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800a680:	6a3b      	ldr	r3, [r7, #32]
 800a682:	695b      	ldr	r3, [r3, #20]
 800a684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a688:	2b80      	cmp	r3, #128	; 0x80
 800a68a:	d109      	bne.n	800a6a0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800a68c:	69fb      	ldr	r3, [r7, #28]
 800a68e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	69fa      	ldr	r2, [r7, #28]
 800a696:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a69a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a69e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800a6a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6a2:	4613      	mov	r3, r2
 800a6a4:	00db      	lsls	r3, r3, #3
 800a6a6:	4413      	add	r3, r2
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	4413      	add	r3, r2
 800a6b2:	3304      	adds	r3, #4
 800a6b4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	78db      	ldrb	r3, [r3, #3]
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	d108      	bne.n	800a6d0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c6:	b2db      	uxtb	r3, r3
 800a6c8:	4619      	mov	r1, r3
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f00d ffbe 	bl	801864c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800a6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d2:	015a      	lsls	r2, r3, #5
 800a6d4:	69fb      	ldr	r3, [r7, #28]
 800a6d6:	4413      	add	r3, r2
 800a6d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6dc:	461a      	mov	r2, r3
 800a6de:	2302      	movs	r3, #2
 800a6e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	f003 0320 	and.w	r3, r3, #32
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d008      	beq.n	800a6fe <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ee:	015a      	lsls	r2, r3, #5
 800a6f0:	69fb      	ldr	r3, [r7, #28]
 800a6f2:	4413      	add	r3, r2
 800a6f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	2320      	movs	r3, #32
 800a6fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a704:	2b00      	cmp	r3, #0
 800a706:	d009      	beq.n	800a71c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800a708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70a:	015a      	lsls	r2, r3, #5
 800a70c:	69fb      	ldr	r3, [r7, #28]
 800a70e:	4413      	add	r3, r2
 800a710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a714:	461a      	mov	r2, r3
 800a716:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a71a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800a71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71e:	3301      	adds	r3, #1
 800a720:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a724:	085b      	lsrs	r3, r3, #1
 800a726:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	f47f af62 	bne.w	800a5f4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4618      	mov	r0, r3
 800a736:	f006 fec9 	bl	80114cc <USB_ReadInterrupts>
 800a73a:	4603      	mov	r3, r0
 800a73c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a740:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a744:	f040 80db 	bne.w	800a8fe <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4618      	mov	r0, r3
 800a74e:	f006 feea 	bl	8011526 <USB_ReadDevAllInEpInterrupt>
 800a752:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800a754:	2300      	movs	r3, #0
 800a756:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800a758:	e0cd      	b.n	800a8f6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800a75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75c:	f003 0301 	and.w	r3, r3, #1
 800a760:	2b00      	cmp	r3, #0
 800a762:	f000 80c2 	beq.w	800a8ea <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a76c:	b2d2      	uxtb	r2, r2
 800a76e:	4611      	mov	r1, r2
 800a770:	4618      	mov	r0, r3
 800a772:	f006 ff10 	bl	8011596 <USB_ReadDevInEPInterrupt>
 800a776:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	f003 0301 	and.w	r3, r3, #1
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d057      	beq.n	800a832 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a784:	f003 030f 	and.w	r3, r3, #15
 800a788:	2201      	movs	r2, #1
 800a78a:	fa02 f303 	lsl.w	r3, r2, r3
 800a78e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a790:	69fb      	ldr	r3, [r7, #28]
 800a792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a796:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	43db      	mvns	r3, r3
 800a79c:	69f9      	ldr	r1, [r7, #28]
 800a79e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a7a2:	4013      	ands	r3, r2
 800a7a4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a8:	015a      	lsls	r2, r3, #5
 800a7aa:	69fb      	ldr	r3, [r7, #28]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	691b      	ldr	r3, [r3, #16]
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d132      	bne.n	800a826 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800a7c0:	6879      	ldr	r1, [r7, #4]
 800a7c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7c4:	4613      	mov	r3, r2
 800a7c6:	00db      	lsls	r3, r3, #3
 800a7c8:	4413      	add	r3, r2
 800a7ca:	009b      	lsls	r3, r3, #2
 800a7cc:	440b      	add	r3, r1
 800a7ce:	334c      	adds	r3, #76	; 0x4c
 800a7d0:	6819      	ldr	r1, [r3, #0]
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7d6:	4613      	mov	r3, r2
 800a7d8:	00db      	lsls	r3, r3, #3
 800a7da:	4413      	add	r3, r2
 800a7dc:	009b      	lsls	r3, r3, #2
 800a7de:	4403      	add	r3, r0
 800a7e0:	3348      	adds	r3, #72	; 0x48
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	4419      	add	r1, r3
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7ea:	4613      	mov	r3, r2
 800a7ec:	00db      	lsls	r3, r3, #3
 800a7ee:	4413      	add	r3, r2
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	4403      	add	r3, r0
 800a7f4:	334c      	adds	r3, #76	; 0x4c
 800a7f6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800a7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d113      	bne.n	800a826 <HAL_PCD_IRQHandler+0x3a2>
 800a7fe:	6879      	ldr	r1, [r7, #4]
 800a800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a802:	4613      	mov	r3, r2
 800a804:	00db      	lsls	r3, r3, #3
 800a806:	4413      	add	r3, r2
 800a808:	009b      	lsls	r3, r3, #2
 800a80a:	440b      	add	r3, r1
 800a80c:	3354      	adds	r3, #84	; 0x54
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d108      	bne.n	800a826 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6818      	ldr	r0, [r3, #0]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a81e:	461a      	mov	r2, r3
 800a820:	2101      	movs	r1, #1
 800a822:	f006 ff17 	bl	8011654 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800a826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a828:	b2db      	uxtb	r3, r3
 800a82a:	4619      	mov	r1, r3
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f00d fe88 	bl	8018542 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	f003 0308 	and.w	r3, r3, #8
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d008      	beq.n	800a84e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800a83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83e:	015a      	lsls	r2, r3, #5
 800a840:	69fb      	ldr	r3, [r7, #28]
 800a842:	4413      	add	r3, r2
 800a844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a848:	461a      	mov	r2, r3
 800a84a:	2308      	movs	r3, #8
 800a84c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	f003 0310 	and.w	r3, r3, #16
 800a854:	2b00      	cmp	r3, #0
 800a856:	d008      	beq.n	800a86a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800a858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a85a:	015a      	lsls	r2, r3, #5
 800a85c:	69fb      	ldr	r3, [r7, #28]
 800a85e:	4413      	add	r3, r2
 800a860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a864:	461a      	mov	r2, r3
 800a866:	2310      	movs	r3, #16
 800a868:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a870:	2b00      	cmp	r3, #0
 800a872:	d008      	beq.n	800a886 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800a874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a876:	015a      	lsls	r2, r3, #5
 800a878:	69fb      	ldr	r3, [r7, #28]
 800a87a:	4413      	add	r3, r2
 800a87c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a880:	461a      	mov	r2, r3
 800a882:	2340      	movs	r3, #64	; 0x40
 800a884:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	f003 0302 	and.w	r3, r3, #2
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d023      	beq.n	800a8d8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800a890:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a892:	6a38      	ldr	r0, [r7, #32]
 800a894:	f005 fdf8 	bl	8010488 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800a898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a89a:	4613      	mov	r3, r2
 800a89c:	00db      	lsls	r3, r3, #3
 800a89e:	4413      	add	r3, r2
 800a8a0:	009b      	lsls	r3, r3, #2
 800a8a2:	3338      	adds	r3, #56	; 0x38
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	4413      	add	r3, r2
 800a8a8:	3304      	adds	r3, #4
 800a8aa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a8ac:	697b      	ldr	r3, [r7, #20]
 800a8ae:	78db      	ldrb	r3, [r3, #3]
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d108      	bne.n	800a8c6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	4619      	mov	r1, r3
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f00d fed5 	bl	8018670 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c8:	015a      	lsls	r2, r3, #5
 800a8ca:	69fb      	ldr	r3, [r7, #28]
 800a8cc:	4413      	add	r3, r2
 800a8ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	2302      	movs	r3, #2
 800a8d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d003      	beq.n	800a8ea <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800a8e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 fd35 	bl	800b354 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800a8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ec:	3301      	adds	r3, #1
 800a8ee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f2:	085b      	lsrs	r3, r3, #1
 800a8f4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	f47f af2e 	bne.w	800a75a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	4618      	mov	r0, r3
 800a904:	f006 fde2 	bl	80114cc <USB_ReadInterrupts>
 800a908:	4603      	mov	r3, r0
 800a90a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a90e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a912:	d122      	bne.n	800a95a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a914:	69fb      	ldr	r3, [r7, #28]
 800a916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a91a:	685b      	ldr	r3, [r3, #4]
 800a91c:	69fa      	ldr	r2, [r7, #28]
 800a91e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a922:	f023 0301 	bic.w	r3, r3, #1
 800a926:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800a92e:	2b01      	cmp	r3, #1
 800a930:	d108      	bne.n	800a944 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2200      	movs	r2, #0
 800a936:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a93a:	2100      	movs	r1, #0
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f00e f86f 	bl	8018a20 <HAL_PCDEx_LPM_Callback>
 800a942:	e002      	b.n	800a94a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	f00d fe73 	bl	8018630 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	695a      	ldr	r2, [r3, #20]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800a958:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4618      	mov	r0, r3
 800a960:	f006 fdb4 	bl	80114cc <USB_ReadInterrupts>
 800a964:	4603      	mov	r3, r0
 800a966:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a96a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a96e:	d112      	bne.n	800a996 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a970:	69fb      	ldr	r3, [r7, #28]
 800a972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a976:	689b      	ldr	r3, [r3, #8]
 800a978:	f003 0301 	and.w	r3, r3, #1
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d102      	bne.n	800a986 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f00d fe2f 	bl	80185e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	695a      	ldr	r2, [r3, #20]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800a994:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4618      	mov	r0, r3
 800a99c:	f006 fd96 	bl	80114cc <USB_ReadInterrupts>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a9a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9aa:	d121      	bne.n	800a9f0 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	695a      	ldr	r2, [r3, #20]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800a9ba:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d111      	bne.n	800a9ea <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9d4:	089b      	lsrs	r3, r3, #2
 800a9d6:	f003 020f 	and.w	r2, r3, #15
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a9e0:	2101      	movs	r1, #1
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f00e f81c 	bl	8018a20 <HAL_PCDEx_LPM_Callback>
 800a9e8:	e002      	b.n	800a9f0 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f00d fdfa 	bl	80185e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f006 fd69 	bl	80114cc <USB_ReadInterrupts>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aa00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa04:	f040 80b7 	bne.w	800ab76 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800aa08:	69fb      	ldr	r3, [r7, #28]
 800aa0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	69fa      	ldr	r2, [r7, #28]
 800aa12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa16:	f023 0301 	bic.w	r3, r3, #1
 800aa1a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	2110      	movs	r1, #16
 800aa22:	4618      	mov	r0, r3
 800aa24:	f005 fd30 	bl	8010488 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aa28:	2300      	movs	r3, #0
 800aa2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa2c:	e046      	b.n	800aabc <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800aa2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa30:	015a      	lsls	r2, r3, #5
 800aa32:	69fb      	ldr	r3, [r7, #28]
 800aa34:	4413      	add	r3, r2
 800aa36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aa40:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800aa42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa44:	015a      	lsls	r2, r3, #5
 800aa46:	69fb      	ldr	r3, [r7, #28]
 800aa48:	4413      	add	r3, r2
 800aa4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa52:	0151      	lsls	r1, r2, #5
 800aa54:	69fa      	ldr	r2, [r7, #28]
 800aa56:	440a      	add	r2, r1
 800aa58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aa60:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800aa62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa64:	015a      	lsls	r2, r3, #5
 800aa66:	69fb      	ldr	r3, [r7, #28]
 800aa68:	4413      	add	r3, r2
 800aa6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa6e:	461a      	mov	r2, r3
 800aa70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aa74:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800aa76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa78:	015a      	lsls	r2, r3, #5
 800aa7a:	69fb      	ldr	r3, [r7, #28]
 800aa7c:	4413      	add	r3, r2
 800aa7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa86:	0151      	lsls	r1, r2, #5
 800aa88:	69fa      	ldr	r2, [r7, #28]
 800aa8a:	440a      	add	r2, r1
 800aa8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aa94:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800aa96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa98:	015a      	lsls	r2, r3, #5
 800aa9a:	69fb      	ldr	r3, [r7, #28]
 800aa9c:	4413      	add	r3, r2
 800aa9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aaa6:	0151      	lsls	r1, r2, #5
 800aaa8:	69fa      	ldr	r2, [r7, #28]
 800aaaa:	440a      	add	r2, r1
 800aaac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aab0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800aab4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab8:	3301      	adds	r3, #1
 800aaba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aac2:	429a      	cmp	r2, r3
 800aac4:	d3b3      	bcc.n	800aa2e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800aac6:	69fb      	ldr	r3, [r7, #28]
 800aac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aacc:	69db      	ldr	r3, [r3, #28]
 800aace:	69fa      	ldr	r2, [r7, #28]
 800aad0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aad4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800aad8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d016      	beq.n	800ab10 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800aae2:	69fb      	ldr	r3, [r7, #28]
 800aae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aaec:	69fa      	ldr	r2, [r7, #28]
 800aaee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aaf2:	f043 030b 	orr.w	r3, r3, #11
 800aaf6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800aafa:	69fb      	ldr	r3, [r7, #28]
 800aafc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab02:	69fa      	ldr	r2, [r7, #28]
 800ab04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab08:	f043 030b 	orr.w	r3, r3, #11
 800ab0c:	6453      	str	r3, [r2, #68]	; 0x44
 800ab0e:	e015      	b.n	800ab3c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800ab10:	69fb      	ldr	r3, [r7, #28]
 800ab12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab16:	695b      	ldr	r3, [r3, #20]
 800ab18:	69fa      	ldr	r2, [r7, #28]
 800ab1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab1e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ab22:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800ab26:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800ab28:	69fb      	ldr	r3, [r7, #28]
 800ab2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab2e:	691b      	ldr	r3, [r3, #16]
 800ab30:	69fa      	ldr	r2, [r7, #28]
 800ab32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab36:	f043 030b 	orr.w	r3, r3, #11
 800ab3a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800ab3c:	69fb      	ldr	r3, [r7, #28]
 800ab3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	69fa      	ldr	r2, [r7, #28]
 800ab46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab4a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ab4e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6818      	ldr	r0, [r3, #0]
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	691b      	ldr	r3, [r3, #16]
 800ab58:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800ab60:	461a      	mov	r2, r3
 800ab62:	f006 fd77 	bl	8011654 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	695a      	ldr	r2, [r3, #20]
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800ab74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f006 fca6 	bl	80114cc <USB_ReadInterrupts>
 800ab80:	4603      	mov	r3, r0
 800ab82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ab86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab8a:	d124      	bne.n	800abd6 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4618      	mov	r0, r3
 800ab92:	f006 fd3c 	bl	801160e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f005 fcf1 	bl	8010582 <USB_GetDevSpeed>
 800aba0:	4603      	mov	r3, r0
 800aba2:	461a      	mov	r2, r3
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681c      	ldr	r4, [r3, #0]
 800abac:	f000 ff40 	bl	800ba30 <HAL_RCC_GetHCLKFreq>
 800abb0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800abb6:	b2db      	uxtb	r3, r3
 800abb8:	461a      	mov	r2, r3
 800abba:	4620      	mov	r0, r4
 800abbc:	f005 f9f6 	bl	800ffac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f00d fce6 	bl	8018592 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	695a      	ldr	r2, [r3, #20]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800abd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4618      	mov	r0, r3
 800abdc:	f006 fc76 	bl	80114cc <USB_ReadInterrupts>
 800abe0:	4603      	mov	r3, r0
 800abe2:	f003 0308 	and.w	r3, r3, #8
 800abe6:	2b08      	cmp	r3, #8
 800abe8:	d10a      	bne.n	800ac00 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f00d fcc3 	bl	8018576 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	695a      	ldr	r2, [r3, #20]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f002 0208 	and.w	r2, r2, #8
 800abfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4618      	mov	r0, r3
 800ac06:	f006 fc61 	bl	80114cc <USB_ReadInterrupts>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac10:	2b80      	cmp	r3, #128	; 0x80
 800ac12:	d122      	bne.n	800ac5a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800ac14:	6a3b      	ldr	r3, [r7, #32]
 800ac16:	699b      	ldr	r3, [r3, #24]
 800ac18:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ac1c:	6a3b      	ldr	r3, [r7, #32]
 800ac1e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ac20:	2301      	movs	r3, #1
 800ac22:	627b      	str	r3, [r7, #36]	; 0x24
 800ac24:	e014      	b.n	800ac50 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800ac26:	6879      	ldr	r1, [r7, #4]
 800ac28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac2a:	4613      	mov	r3, r2
 800ac2c:	00db      	lsls	r3, r3, #3
 800ac2e:	4413      	add	r3, r2
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	440b      	add	r3, r1
 800ac34:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d105      	bne.n	800ac4a <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800ac3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	4619      	mov	r1, r3
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f000 fb27 	bl	800b298 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ac4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4c:	3301      	adds	r3, #1
 800ac4e:	627b      	str	r3, [r7, #36]	; 0x24
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac56:	429a      	cmp	r2, r3
 800ac58:	d3e5      	bcc.n	800ac26 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f006 fc34 	bl	80114cc <USB_ReadInterrupts>
 800ac64:	4603      	mov	r3, r0
 800ac66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ac6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ac6e:	d13b      	bne.n	800ace8 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ac70:	2301      	movs	r3, #1
 800ac72:	627b      	str	r3, [r7, #36]	; 0x24
 800ac74:	e02b      	b.n	800acce <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800ac76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac78:	015a      	lsls	r2, r3, #5
 800ac7a:	69fb      	ldr	r3, [r7, #28]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800ac86:	6879      	ldr	r1, [r7, #4]
 800ac88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac8a:	4613      	mov	r3, r2
 800ac8c:	00db      	lsls	r3, r3, #3
 800ac8e:	4413      	add	r3, r2
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	440b      	add	r3, r1
 800ac94:	3340      	adds	r3, #64	; 0x40
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d115      	bne.n	800acc8 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800ac9c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	da12      	bge.n	800acc8 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800aca2:	6879      	ldr	r1, [r7, #4]
 800aca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aca6:	4613      	mov	r3, r2
 800aca8:	00db      	lsls	r3, r3, #3
 800acaa:	4413      	add	r3, r2
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	440b      	add	r3, r1
 800acb0:	333f      	adds	r3, #63	; 0x3f
 800acb2:	2201      	movs	r2, #1
 800acb4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800acb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb8:	b2db      	uxtb	r3, r3
 800acba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800acbe:	b2db      	uxtb	r3, r3
 800acc0:	4619      	mov	r1, r3
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 fae8 	bl	800b298 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800acc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acca:	3301      	adds	r3, #1
 800accc:	627b      	str	r3, [r7, #36]	; 0x24
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	685b      	ldr	r3, [r3, #4]
 800acd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acd4:	429a      	cmp	r2, r3
 800acd6:	d3ce      	bcc.n	800ac76 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	695a      	ldr	r2, [r3, #20]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800ace6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	4618      	mov	r0, r3
 800acee:	f006 fbed 	bl	80114cc <USB_ReadInterrupts>
 800acf2:	4603      	mov	r3, r0
 800acf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800acf8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800acfc:	d155      	bne.n	800adaa <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800acfe:	2301      	movs	r3, #1
 800ad00:	627b      	str	r3, [r7, #36]	; 0x24
 800ad02:	e045      	b.n	800ad90 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800ad04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad06:	015a      	lsls	r2, r3, #5
 800ad08:	69fb      	ldr	r3, [r7, #28]
 800ad0a:	4413      	add	r3, r2
 800ad0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800ad14:	6879      	ldr	r1, [r7, #4]
 800ad16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad18:	4613      	mov	r3, r2
 800ad1a:	00db      	lsls	r3, r3, #3
 800ad1c:	4413      	add	r3, r2
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	440b      	add	r3, r1
 800ad22:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	2b01      	cmp	r3, #1
 800ad2a:	d12e      	bne.n	800ad8a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800ad2c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	da2b      	bge.n	800ad8a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800ad32:	69bb      	ldr	r3, [r7, #24]
 800ad34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800ad3e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d121      	bne.n	800ad8a <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800ad46:	6879      	ldr	r1, [r7, #4]
 800ad48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad4a:	4613      	mov	r3, r2
 800ad4c:	00db      	lsls	r3, r3, #3
 800ad4e:	4413      	add	r3, r2
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	440b      	add	r3, r1
 800ad54:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800ad58:	2201      	movs	r2, #1
 800ad5a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800ad5c:	6a3b      	ldr	r3, [r7, #32]
 800ad5e:	699b      	ldr	r3, [r3, #24]
 800ad60:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ad64:	6a3b      	ldr	r3, [r7, #32]
 800ad66:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800ad68:	6a3b      	ldr	r3, [r7, #32]
 800ad6a:	695b      	ldr	r3, [r3, #20]
 800ad6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d10a      	bne.n	800ad8a <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800ad74:	69fb      	ldr	r3, [r7, #28]
 800ad76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad7a:	685b      	ldr	r3, [r3, #4]
 800ad7c:	69fa      	ldr	r2, [r7, #28]
 800ad7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ad82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ad86:	6053      	str	r3, [r2, #4]
            break;
 800ad88:	e007      	b.n	800ad9a <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ad8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8c:	3301      	adds	r3, #1
 800ad8e:	627b      	str	r3, [r7, #36]	; 0x24
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d3b4      	bcc.n	800ad04 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	695a      	ldr	r2, [r3, #20]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800ada8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	4618      	mov	r0, r3
 800adb0:	f006 fb8c 	bl	80114cc <USB_ReadInterrupts>
 800adb4:	4603      	mov	r3, r0
 800adb6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800adba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adbe:	d10a      	bne.n	800add6 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f00d fc67 	bl	8018694 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	695a      	ldr	r2, [r3, #20]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800add4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4618      	mov	r0, r3
 800addc:	f006 fb76 	bl	80114cc <USB_ReadInterrupts>
 800ade0:	4603      	mov	r3, r0
 800ade2:	f003 0304 	and.w	r3, r3, #4
 800ade6:	2b04      	cmp	r3, #4
 800ade8:	d115      	bne.n	800ae16 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	685b      	ldr	r3, [r3, #4]
 800adf0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800adf2:	69bb      	ldr	r3, [r7, #24]
 800adf4:	f003 0304 	and.w	r3, r3, #4
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d002      	beq.n	800ae02 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f00d fc57 	bl	80186b0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	6859      	ldr	r1, [r3, #4]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	69ba      	ldr	r2, [r7, #24]
 800ae0e:	430a      	orrs	r2, r1
 800ae10:	605a      	str	r2, [r3, #4]
 800ae12:	e000      	b.n	800ae16 <HAL_PCD_IRQHandler+0x992>
      return;
 800ae14:	bf00      	nop
    }
  }
}
 800ae16:	3734      	adds	r7, #52	; 0x34
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd90      	pop	{r4, r7, pc}

0800ae1c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b082      	sub	sp, #8
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	460b      	mov	r3, r1
 800ae26:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800ae2e:	2b01      	cmp	r3, #1
 800ae30:	d101      	bne.n	800ae36 <HAL_PCD_SetAddress+0x1a>
 800ae32:	2302      	movs	r3, #2
 800ae34:	e013      	b.n	800ae5e <HAL_PCD_SetAddress+0x42>
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2201      	movs	r2, #1
 800ae3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	78fa      	ldrb	r2, [r7, #3]
 800ae42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	78fa      	ldrb	r2, [r7, #3]
 800ae4c:	4611      	mov	r1, r2
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f006 fad4 	bl	80113fc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2200      	movs	r2, #0
 800ae58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800ae5c:	2300      	movs	r3, #0
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3708      	adds	r7, #8
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}

0800ae66 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800ae66:	b580      	push	{r7, lr}
 800ae68:	b084      	sub	sp, #16
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
 800ae6e:	4608      	mov	r0, r1
 800ae70:	4611      	mov	r1, r2
 800ae72:	461a      	mov	r2, r3
 800ae74:	4603      	mov	r3, r0
 800ae76:	70fb      	strb	r3, [r7, #3]
 800ae78:	460b      	mov	r3, r1
 800ae7a:	803b      	strh	r3, [r7, #0]
 800ae7c:	4613      	mov	r3, r2
 800ae7e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800ae80:	2300      	movs	r3, #0
 800ae82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ae84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	da0f      	bge.n	800aeac <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ae8c:	78fb      	ldrb	r3, [r7, #3]
 800ae8e:	f003 020f 	and.w	r2, r3, #15
 800ae92:	4613      	mov	r3, r2
 800ae94:	00db      	lsls	r3, r3, #3
 800ae96:	4413      	add	r3, r2
 800ae98:	009b      	lsls	r3, r3, #2
 800ae9a:	3338      	adds	r3, #56	; 0x38
 800ae9c:	687a      	ldr	r2, [r7, #4]
 800ae9e:	4413      	add	r3, r2
 800aea0:	3304      	adds	r3, #4
 800aea2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2201      	movs	r2, #1
 800aea8:	705a      	strb	r2, [r3, #1]
 800aeaa:	e00f      	b.n	800aecc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800aeac:	78fb      	ldrb	r3, [r7, #3]
 800aeae:	f003 020f 	and.w	r2, r3, #15
 800aeb2:	4613      	mov	r3, r2
 800aeb4:	00db      	lsls	r3, r3, #3
 800aeb6:	4413      	add	r3, r2
 800aeb8:	009b      	lsls	r3, r3, #2
 800aeba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800aebe:	687a      	ldr	r2, [r7, #4]
 800aec0:	4413      	add	r3, r2
 800aec2:	3304      	adds	r3, #4
 800aec4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	2200      	movs	r2, #0
 800aeca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800aecc:	78fb      	ldrb	r3, [r7, #3]
 800aece:	f003 030f 	and.w	r3, r3, #15
 800aed2:	b2da      	uxtb	r2, r3
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800aed8:	883a      	ldrh	r2, [r7, #0]
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	78ba      	ldrb	r2, [r7, #2]
 800aee2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	785b      	ldrb	r3, [r3, #1]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d004      	beq.n	800aef6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	b29a      	uxth	r2, r3
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800aef6:	78bb      	ldrb	r3, [r7, #2]
 800aef8:	2b02      	cmp	r3, #2
 800aefa:	d102      	bne.n	800af02 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	2200      	movs	r2, #0
 800af00:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d101      	bne.n	800af10 <HAL_PCD_EP_Open+0xaa>
 800af0c:	2302      	movs	r3, #2
 800af0e:	e00e      	b.n	800af2e <HAL_PCD_EP_Open+0xc8>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2201      	movs	r2, #1
 800af14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	68f9      	ldr	r1, [r7, #12]
 800af1e:	4618      	mov	r0, r3
 800af20:	f005 fb54 	bl	80105cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800af2c:	7afb      	ldrb	r3, [r7, #11]
}
 800af2e:	4618      	mov	r0, r3
 800af30:	3710      	adds	r7, #16
 800af32:	46bd      	mov	sp, r7
 800af34:	bd80      	pop	{r7, pc}

0800af36 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800af36:	b580      	push	{r7, lr}
 800af38:	b084      	sub	sp, #16
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	6078      	str	r0, [r7, #4]
 800af3e:	460b      	mov	r3, r1
 800af40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800af42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af46:	2b00      	cmp	r3, #0
 800af48:	da0f      	bge.n	800af6a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800af4a:	78fb      	ldrb	r3, [r7, #3]
 800af4c:	f003 020f 	and.w	r2, r3, #15
 800af50:	4613      	mov	r3, r2
 800af52:	00db      	lsls	r3, r3, #3
 800af54:	4413      	add	r3, r2
 800af56:	009b      	lsls	r3, r3, #2
 800af58:	3338      	adds	r3, #56	; 0x38
 800af5a:	687a      	ldr	r2, [r7, #4]
 800af5c:	4413      	add	r3, r2
 800af5e:	3304      	adds	r3, #4
 800af60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	2201      	movs	r2, #1
 800af66:	705a      	strb	r2, [r3, #1]
 800af68:	e00f      	b.n	800af8a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800af6a:	78fb      	ldrb	r3, [r7, #3]
 800af6c:	f003 020f 	and.w	r2, r3, #15
 800af70:	4613      	mov	r3, r2
 800af72:	00db      	lsls	r3, r3, #3
 800af74:	4413      	add	r3, r2
 800af76:	009b      	lsls	r3, r3, #2
 800af78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800af7c:	687a      	ldr	r2, [r7, #4]
 800af7e:	4413      	add	r3, r2
 800af80:	3304      	adds	r3, #4
 800af82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2200      	movs	r2, #0
 800af88:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800af8a:	78fb      	ldrb	r3, [r7, #3]
 800af8c:	f003 030f 	and.w	r3, r3, #15
 800af90:	b2da      	uxtb	r2, r3
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d101      	bne.n	800afa4 <HAL_PCD_EP_Close+0x6e>
 800afa0:	2302      	movs	r3, #2
 800afa2:	e00e      	b.n	800afc2 <HAL_PCD_EP_Close+0x8c>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2201      	movs	r2, #1
 800afa8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	68f9      	ldr	r1, [r7, #12]
 800afb2:	4618      	mov	r0, r3
 800afb4:	f005 fb92 	bl	80106dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2200      	movs	r2, #0
 800afbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800afc0:	2300      	movs	r3, #0
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3710      	adds	r7, #16
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}

0800afca <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800afca:	b580      	push	{r7, lr}
 800afcc:	b086      	sub	sp, #24
 800afce:	af00      	add	r7, sp, #0
 800afd0:	60f8      	str	r0, [r7, #12]
 800afd2:	607a      	str	r2, [r7, #4]
 800afd4:	603b      	str	r3, [r7, #0]
 800afd6:	460b      	mov	r3, r1
 800afd8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800afda:	7afb      	ldrb	r3, [r7, #11]
 800afdc:	f003 020f 	and.w	r2, r3, #15
 800afe0:	4613      	mov	r3, r2
 800afe2:	00db      	lsls	r3, r3, #3
 800afe4:	4413      	add	r3, r2
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800afec:	68fa      	ldr	r2, [r7, #12]
 800afee:	4413      	add	r3, r2
 800aff0:	3304      	adds	r3, #4
 800aff2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	683a      	ldr	r2, [r7, #0]
 800affe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	2200      	movs	r2, #0
 800b004:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	2200      	movs	r2, #0
 800b00a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b00c:	7afb      	ldrb	r3, [r7, #11]
 800b00e:	f003 030f 	and.w	r3, r3, #15
 800b012:	b2da      	uxtb	r2, r3
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	691b      	ldr	r3, [r3, #16]
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d102      	bne.n	800b026 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b020:	687a      	ldr	r2, [r7, #4]
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b026:	7afb      	ldrb	r3, [r7, #11]
 800b028:	f003 030f 	and.w	r3, r3, #15
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d109      	bne.n	800b044 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	6818      	ldr	r0, [r3, #0]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	691b      	ldr	r3, [r3, #16]
 800b038:	b2db      	uxtb	r3, r3
 800b03a:	461a      	mov	r2, r3
 800b03c:	6979      	ldr	r1, [r7, #20]
 800b03e:	f005 fe71 	bl	8010d24 <USB_EP0StartXfer>
 800b042:	e008      	b.n	800b056 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	6818      	ldr	r0, [r3, #0]
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	691b      	ldr	r3, [r3, #16]
 800b04c:	b2db      	uxtb	r3, r3
 800b04e:	461a      	mov	r2, r3
 800b050:	6979      	ldr	r1, [r7, #20]
 800b052:	f005 fc1f 	bl	8010894 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b056:	2300      	movs	r3, #0
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3718      	adds	r7, #24
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}

0800b060 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b060:	b480      	push	{r7}
 800b062:	b083      	sub	sp, #12
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
 800b068:	460b      	mov	r3, r1
 800b06a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b06c:	78fb      	ldrb	r3, [r7, #3]
 800b06e:	f003 020f 	and.w	r2, r3, #15
 800b072:	6879      	ldr	r1, [r7, #4]
 800b074:	4613      	mov	r3, r2
 800b076:	00db      	lsls	r3, r3, #3
 800b078:	4413      	add	r3, r2
 800b07a:	009b      	lsls	r3, r3, #2
 800b07c:	440b      	add	r3, r1
 800b07e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800b082:	681b      	ldr	r3, [r3, #0]
}
 800b084:	4618      	mov	r0, r3
 800b086:	370c      	adds	r7, #12
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr

0800b090 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b086      	sub	sp, #24
 800b094:	af00      	add	r7, sp, #0
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	607a      	str	r2, [r7, #4]
 800b09a:	603b      	str	r3, [r7, #0]
 800b09c:	460b      	mov	r3, r1
 800b09e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b0a0:	7afb      	ldrb	r3, [r7, #11]
 800b0a2:	f003 020f 	and.w	r2, r3, #15
 800b0a6:	4613      	mov	r3, r2
 800b0a8:	00db      	lsls	r3, r3, #3
 800b0aa:	4413      	add	r3, r2
 800b0ac:	009b      	lsls	r3, r3, #2
 800b0ae:	3338      	adds	r3, #56	; 0x38
 800b0b0:	68fa      	ldr	r2, [r7, #12]
 800b0b2:	4413      	add	r3, r2
 800b0b4:	3304      	adds	r3, #4
 800b0b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	687a      	ldr	r2, [r7, #4]
 800b0bc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800b0be:	697b      	ldr	r3, [r7, #20]
 800b0c0:	683a      	ldr	r2, [r7, #0]
 800b0c2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b0d0:	7afb      	ldrb	r3, [r7, #11]
 800b0d2:	f003 030f 	and.w	r3, r3, #15
 800b0d6:	b2da      	uxtb	r2, r3
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	691b      	ldr	r3, [r3, #16]
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	d102      	bne.n	800b0ea <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b0e4:	687a      	ldr	r2, [r7, #4]
 800b0e6:	697b      	ldr	r3, [r7, #20]
 800b0e8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b0ea:	7afb      	ldrb	r3, [r7, #11]
 800b0ec:	f003 030f 	and.w	r3, r3, #15
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d109      	bne.n	800b108 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	6818      	ldr	r0, [r3, #0]
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	691b      	ldr	r3, [r3, #16]
 800b0fc:	b2db      	uxtb	r3, r3
 800b0fe:	461a      	mov	r2, r3
 800b100:	6979      	ldr	r1, [r7, #20]
 800b102:	f005 fe0f 	bl	8010d24 <USB_EP0StartXfer>
 800b106:	e008      	b.n	800b11a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	6818      	ldr	r0, [r3, #0]
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	691b      	ldr	r3, [r3, #16]
 800b110:	b2db      	uxtb	r3, r3
 800b112:	461a      	mov	r2, r3
 800b114:	6979      	ldr	r1, [r7, #20]
 800b116:	f005 fbbd 	bl	8010894 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b11a:	2300      	movs	r3, #0
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3718      	adds	r7, #24
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}

0800b124 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b084      	sub	sp, #16
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	460b      	mov	r3, r1
 800b12e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b130:	78fb      	ldrb	r3, [r7, #3]
 800b132:	f003 020f 	and.w	r2, r3, #15
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d901      	bls.n	800b142 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b13e:	2301      	movs	r3, #1
 800b140:	e050      	b.n	800b1e4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b142:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b146:	2b00      	cmp	r3, #0
 800b148:	da0f      	bge.n	800b16a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b14a:	78fb      	ldrb	r3, [r7, #3]
 800b14c:	f003 020f 	and.w	r2, r3, #15
 800b150:	4613      	mov	r3, r2
 800b152:	00db      	lsls	r3, r3, #3
 800b154:	4413      	add	r3, r2
 800b156:	009b      	lsls	r3, r3, #2
 800b158:	3338      	adds	r3, #56	; 0x38
 800b15a:	687a      	ldr	r2, [r7, #4]
 800b15c:	4413      	add	r3, r2
 800b15e:	3304      	adds	r3, #4
 800b160:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	2201      	movs	r2, #1
 800b166:	705a      	strb	r2, [r3, #1]
 800b168:	e00d      	b.n	800b186 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b16a:	78fa      	ldrb	r2, [r7, #3]
 800b16c:	4613      	mov	r3, r2
 800b16e:	00db      	lsls	r3, r3, #3
 800b170:	4413      	add	r3, r2
 800b172:	009b      	lsls	r3, r3, #2
 800b174:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	4413      	add	r3, r2
 800b17c:	3304      	adds	r3, #4
 800b17e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2200      	movs	r2, #0
 800b184:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2201      	movs	r2, #1
 800b18a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b18c:	78fb      	ldrb	r3, [r7, #3]
 800b18e:	f003 030f 	and.w	r3, r3, #15
 800b192:	b2da      	uxtb	r2, r3
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b19e:	2b01      	cmp	r3, #1
 800b1a0:	d101      	bne.n	800b1a6 <HAL_PCD_EP_SetStall+0x82>
 800b1a2:	2302      	movs	r3, #2
 800b1a4:	e01e      	b.n	800b1e4 <HAL_PCD_EP_SetStall+0xc0>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	68f9      	ldr	r1, [r7, #12]
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f006 f84d 	bl	8011254 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b1ba:	78fb      	ldrb	r3, [r7, #3]
 800b1bc:	f003 030f 	and.w	r3, r3, #15
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d10a      	bne.n	800b1da <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6818      	ldr	r0, [r3, #0]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	691b      	ldr	r3, [r3, #16]
 800b1cc:	b2d9      	uxtb	r1, r3
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b1d4:	461a      	mov	r2, r3
 800b1d6:	f006 fa3d 	bl	8011654 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800b1e2:	2300      	movs	r3, #0
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3710      	adds	r7, #16
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b084      	sub	sp, #16
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b1f8:	78fb      	ldrb	r3, [r7, #3]
 800b1fa:	f003 020f 	and.w	r2, r3, #15
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	429a      	cmp	r2, r3
 800b204:	d901      	bls.n	800b20a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b206:	2301      	movs	r3, #1
 800b208:	e042      	b.n	800b290 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b20a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	da0f      	bge.n	800b232 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b212:	78fb      	ldrb	r3, [r7, #3]
 800b214:	f003 020f 	and.w	r2, r3, #15
 800b218:	4613      	mov	r3, r2
 800b21a:	00db      	lsls	r3, r3, #3
 800b21c:	4413      	add	r3, r2
 800b21e:	009b      	lsls	r3, r3, #2
 800b220:	3338      	adds	r3, #56	; 0x38
 800b222:	687a      	ldr	r2, [r7, #4]
 800b224:	4413      	add	r3, r2
 800b226:	3304      	adds	r3, #4
 800b228:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	2201      	movs	r2, #1
 800b22e:	705a      	strb	r2, [r3, #1]
 800b230:	e00f      	b.n	800b252 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b232:	78fb      	ldrb	r3, [r7, #3]
 800b234:	f003 020f 	and.w	r2, r3, #15
 800b238:	4613      	mov	r3, r2
 800b23a:	00db      	lsls	r3, r3, #3
 800b23c:	4413      	add	r3, r2
 800b23e:	009b      	lsls	r3, r3, #2
 800b240:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b244:	687a      	ldr	r2, [r7, #4]
 800b246:	4413      	add	r3, r2
 800b248:	3304      	adds	r3, #4
 800b24a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2200      	movs	r2, #0
 800b250:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	2200      	movs	r2, #0
 800b256:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b258:	78fb      	ldrb	r3, [r7, #3]
 800b25a:	f003 030f 	and.w	r3, r3, #15
 800b25e:	b2da      	uxtb	r2, r3
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b26a:	2b01      	cmp	r3, #1
 800b26c:	d101      	bne.n	800b272 <HAL_PCD_EP_ClrStall+0x86>
 800b26e:	2302      	movs	r3, #2
 800b270:	e00e      	b.n	800b290 <HAL_PCD_EP_ClrStall+0xa4>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2201      	movs	r2, #1
 800b276:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	68f9      	ldr	r1, [r7, #12]
 800b280:	4618      	mov	r0, r3
 800b282:	f006 f855 	bl	8011330 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2200      	movs	r2, #0
 800b28a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800b28e:	2300      	movs	r3, #0
}
 800b290:	4618      	mov	r0, r3
 800b292:	3710      	adds	r7, #16
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}

0800b298 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	460b      	mov	r3, r1
 800b2a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800b2a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	da0c      	bge.n	800b2c6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b2ac:	78fb      	ldrb	r3, [r7, #3]
 800b2ae:	f003 020f 	and.w	r2, r3, #15
 800b2b2:	4613      	mov	r3, r2
 800b2b4:	00db      	lsls	r3, r3, #3
 800b2b6:	4413      	add	r3, r2
 800b2b8:	009b      	lsls	r3, r3, #2
 800b2ba:	3338      	adds	r3, #56	; 0x38
 800b2bc:	687a      	ldr	r2, [r7, #4]
 800b2be:	4413      	add	r3, r2
 800b2c0:	3304      	adds	r3, #4
 800b2c2:	60fb      	str	r3, [r7, #12]
 800b2c4:	e00c      	b.n	800b2e0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b2c6:	78fb      	ldrb	r3, [r7, #3]
 800b2c8:	f003 020f 	and.w	r2, r3, #15
 800b2cc:	4613      	mov	r3, r2
 800b2ce:	00db      	lsls	r3, r3, #3
 800b2d0:	4413      	add	r3, r2
 800b2d2:	009b      	lsls	r3, r3, #2
 800b2d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	4413      	add	r3, r2
 800b2dc:	3304      	adds	r3, #4
 800b2de:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	68f9      	ldr	r1, [r7, #12]
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f005 fe74 	bl	8010fd4 <USB_EPStopXfer>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	72fb      	strb	r3, [r7, #11]

  return ret;
 800b2f0:	7afb      	ldrb	r3, [r7, #11]
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3710      	adds	r7, #16
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}

0800b2fa <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b2fa:	b580      	push	{r7, lr}
 800b2fc:	b082      	sub	sp, #8
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	6078      	str	r0, [r7, #4]
 800b302:	460b      	mov	r3, r1
 800b304:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	d101      	bne.n	800b314 <HAL_PCD_EP_Flush+0x1a>
 800b310:	2302      	movs	r3, #2
 800b312:	e01b      	b.n	800b34c <HAL_PCD_EP_Flush+0x52>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2201      	movs	r2, #1
 800b318:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 800b31c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b320:	2b00      	cmp	r3, #0
 800b322:	da09      	bge.n	800b338 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	78fb      	ldrb	r3, [r7, #3]
 800b32a:	f003 030f 	and.w	r3, r3, #15
 800b32e:	4619      	mov	r1, r3
 800b330:	4610      	mov	r0, r2
 800b332:	f005 f8a9 	bl	8010488 <USB_FlushTxFifo>
 800b336:	e004      	b.n	800b342 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4618      	mov	r0, r3
 800b33e:	f005 f8d7 	bl	80104f0 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800b34a:	2300      	movs	r3, #0
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3708      	adds	r7, #8
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b08a      	sub	sp, #40	; 0x28
 800b358:	af02      	add	r7, sp, #8
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800b368:	683a      	ldr	r2, [r7, #0]
 800b36a:	4613      	mov	r3, r2
 800b36c:	00db      	lsls	r3, r3, #3
 800b36e:	4413      	add	r3, r2
 800b370:	009b      	lsls	r3, r3, #2
 800b372:	3338      	adds	r3, #56	; 0x38
 800b374:	687a      	ldr	r2, [r7, #4]
 800b376:	4413      	add	r3, r2
 800b378:	3304      	adds	r3, #4
 800b37a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	6a1a      	ldr	r2, [r3, #32]
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	699b      	ldr	r3, [r3, #24]
 800b384:	429a      	cmp	r2, r3
 800b386:	d901      	bls.n	800b38c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800b388:	2301      	movs	r3, #1
 800b38a:	e06c      	b.n	800b466 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	699a      	ldr	r2, [r3, #24]
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	6a1b      	ldr	r3, [r3, #32]
 800b394:	1ad3      	subs	r3, r2, r3
 800b396:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	68db      	ldr	r3, [r3, #12]
 800b39c:	69fa      	ldr	r2, [r7, #28]
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	d902      	bls.n	800b3a8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	68db      	ldr	r3, [r3, #12]
 800b3a6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800b3a8:	69fb      	ldr	r3, [r7, #28]
 800b3aa:	3303      	adds	r3, #3
 800b3ac:	089b      	lsrs	r3, r3, #2
 800b3ae:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b3b0:	e02b      	b.n	800b40a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	699a      	ldr	r2, [r3, #24]
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	6a1b      	ldr	r3, [r3, #32]
 800b3ba:	1ad3      	subs	r3, r2, r3
 800b3bc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	68db      	ldr	r3, [r3, #12]
 800b3c2:	69fa      	ldr	r2, [r7, #28]
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d902      	bls.n	800b3ce <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	68db      	ldr	r3, [r3, #12]
 800b3cc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800b3ce:	69fb      	ldr	r3, [r7, #28]
 800b3d0:	3303      	adds	r3, #3
 800b3d2:	089b      	lsrs	r3, r3, #2
 800b3d4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	6919      	ldr	r1, [r3, #16]
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	b2da      	uxtb	r2, r3
 800b3de:	69fb      	ldr	r3, [r7, #28]
 800b3e0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b3e6:	b2db      	uxtb	r3, r3
 800b3e8:	9300      	str	r3, [sp, #0]
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	6978      	ldr	r0, [r7, #20]
 800b3ee:	f005 fe9b 	bl	8011128 <USB_WritePacket>

    ep->xfer_buff  += len;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	691a      	ldr	r2, [r3, #16]
 800b3f6:	69fb      	ldr	r3, [r7, #28]
 800b3f8:	441a      	add	r2, r3
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	6a1a      	ldr	r2, [r3, #32]
 800b402:	69fb      	ldr	r3, [r7, #28]
 800b404:	441a      	add	r2, r3
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	015a      	lsls	r2, r3, #5
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	4413      	add	r3, r2
 800b412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b416:	699b      	ldr	r3, [r3, #24]
 800b418:	b29b      	uxth	r3, r3
 800b41a:	69ba      	ldr	r2, [r7, #24]
 800b41c:	429a      	cmp	r2, r3
 800b41e:	d809      	bhi.n	800b434 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	6a1a      	ldr	r2, [r3, #32]
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b428:	429a      	cmp	r2, r3
 800b42a:	d203      	bcs.n	800b434 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	699b      	ldr	r3, [r3, #24]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d1be      	bne.n	800b3b2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	699a      	ldr	r2, [r3, #24]
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	6a1b      	ldr	r3, [r3, #32]
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d811      	bhi.n	800b464 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	f003 030f 	and.w	r3, r3, #15
 800b446:	2201      	movs	r2, #1
 800b448:	fa02 f303 	lsl.w	r3, r2, r3
 800b44c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b454:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	43db      	mvns	r3, r3
 800b45a:	6939      	ldr	r1, [r7, #16]
 800b45c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b460:	4013      	ands	r3, r2
 800b462:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800b464:	2300      	movs	r3, #0
}
 800b466:	4618      	mov	r0, r3
 800b468:	3720      	adds	r7, #32
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
	...

0800b470 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b088      	sub	sp, #32
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b480:	69fb      	ldr	r3, [r7, #28]
 800b482:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b484:	69fb      	ldr	r3, [r7, #28]
 800b486:	333c      	adds	r3, #60	; 0x3c
 800b488:	3304      	adds	r3, #4
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	015a      	lsls	r2, r3, #5
 800b492:	69bb      	ldr	r3, [r7, #24]
 800b494:	4413      	add	r3, r2
 800b496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b49a:	689b      	ldr	r3, [r3, #8]
 800b49c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	691b      	ldr	r3, [r3, #16]
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d17b      	bne.n	800b59e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800b4a6:	693b      	ldr	r3, [r7, #16]
 800b4a8:	f003 0308 	and.w	r3, r3, #8
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d015      	beq.n	800b4dc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	4a61      	ldr	r2, [pc, #388]	; (800b638 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	f240 80b9 	bls.w	800b62c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b4ba:	693b      	ldr	r3, [r7, #16]
 800b4bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	f000 80b3 	beq.w	800b62c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	015a      	lsls	r2, r3, #5
 800b4ca:	69bb      	ldr	r3, [r7, #24]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b4d8:	6093      	str	r3, [r2, #8]
 800b4da:	e0a7      	b.n	800b62c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	f003 0320 	and.w	r3, r3, #32
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d009      	beq.n	800b4fa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	015a      	lsls	r2, r3, #5
 800b4ea:	69bb      	ldr	r3, [r7, #24]
 800b4ec:	4413      	add	r3, r2
 800b4ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	2320      	movs	r3, #32
 800b4f6:	6093      	str	r3, [r2, #8]
 800b4f8:	e098      	b.n	800b62c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b500:	2b00      	cmp	r3, #0
 800b502:	f040 8093 	bne.w	800b62c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	4a4b      	ldr	r2, [pc, #300]	; (800b638 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d90f      	bls.n	800b52e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b514:	2b00      	cmp	r3, #0
 800b516:	d00a      	beq.n	800b52e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	015a      	lsls	r2, r3, #5
 800b51c:	69bb      	ldr	r3, [r7, #24]
 800b51e:	4413      	add	r3, r2
 800b520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b524:	461a      	mov	r2, r3
 800b526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b52a:	6093      	str	r3, [r2, #8]
 800b52c:	e07e      	b.n	800b62c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800b52e:	683a      	ldr	r2, [r7, #0]
 800b530:	4613      	mov	r3, r2
 800b532:	00db      	lsls	r3, r3, #3
 800b534:	4413      	add	r3, r2
 800b536:	009b      	lsls	r3, r3, #2
 800b538:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b53c:	687a      	ldr	r2, [r7, #4]
 800b53e:	4413      	add	r3, r2
 800b540:	3304      	adds	r3, #4
 800b542:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	69da      	ldr	r2, [r3, #28]
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	0159      	lsls	r1, r3, #5
 800b54c:	69bb      	ldr	r3, [r7, #24]
 800b54e:	440b      	add	r3, r1
 800b550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b554:	691b      	ldr	r3, [r3, #16]
 800b556:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b55a:	1ad2      	subs	r2, r2, r3
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d114      	bne.n	800b590 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	699b      	ldr	r3, [r3, #24]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d109      	bne.n	800b582 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6818      	ldr	r0, [r3, #0]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b578:	461a      	mov	r2, r3
 800b57a:	2101      	movs	r1, #1
 800b57c:	f006 f86a 	bl	8011654 <USB_EP0_OutStart>
 800b580:	e006      	b.n	800b590 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	691a      	ldr	r2, [r3, #16]
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	6a1b      	ldr	r3, [r3, #32]
 800b58a:	441a      	add	r2, r3
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	b2db      	uxtb	r3, r3
 800b594:	4619      	mov	r1, r3
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f00c ffb8 	bl	801850c <HAL_PCD_DataOutStageCallback>
 800b59c:	e046      	b.n	800b62c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800b59e:	697b      	ldr	r3, [r7, #20]
 800b5a0:	4a26      	ldr	r2, [pc, #152]	; (800b63c <PCD_EP_OutXfrComplete_int+0x1cc>)
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d124      	bne.n	800b5f0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d00a      	beq.n	800b5c6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	015a      	lsls	r2, r3, #5
 800b5b4:	69bb      	ldr	r3, [r7, #24]
 800b5b6:	4413      	add	r3, r2
 800b5b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5bc:	461a      	mov	r2, r3
 800b5be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5c2:	6093      	str	r3, [r2, #8]
 800b5c4:	e032      	b.n	800b62c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	f003 0320 	and.w	r3, r3, #32
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d008      	beq.n	800b5e2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	015a      	lsls	r2, r3, #5
 800b5d4:	69bb      	ldr	r3, [r7, #24]
 800b5d6:	4413      	add	r3, r2
 800b5d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5dc:	461a      	mov	r2, r3
 800b5de:	2320      	movs	r3, #32
 800b5e0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	b2db      	uxtb	r3, r3
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f00c ff8f 	bl	801850c <HAL_PCD_DataOutStageCallback>
 800b5ee:	e01d      	b.n	800b62c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d114      	bne.n	800b620 <PCD_EP_OutXfrComplete_int+0x1b0>
 800b5f6:	6879      	ldr	r1, [r7, #4]
 800b5f8:	683a      	ldr	r2, [r7, #0]
 800b5fa:	4613      	mov	r3, r2
 800b5fc:	00db      	lsls	r3, r3, #3
 800b5fe:	4413      	add	r3, r2
 800b600:	009b      	lsls	r3, r3, #2
 800b602:	440b      	add	r3, r1
 800b604:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d108      	bne.n	800b620 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6818      	ldr	r0, [r3, #0]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b618:	461a      	mov	r2, r3
 800b61a:	2100      	movs	r1, #0
 800b61c:	f006 f81a 	bl	8011654 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	b2db      	uxtb	r3, r3
 800b624:	4619      	mov	r1, r3
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f00c ff70 	bl	801850c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800b62c:	2300      	movs	r3, #0
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3720      	adds	r7, #32
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
 800b636:	bf00      	nop
 800b638:	4f54300a 	.word	0x4f54300a
 800b63c:	4f54310a 	.word	0x4f54310a

0800b640 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b086      	sub	sp, #24
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b650:	697b      	ldr	r3, [r7, #20]
 800b652:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	333c      	adds	r3, #60	; 0x3c
 800b658:	3304      	adds	r3, #4
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	015a      	lsls	r2, r3, #5
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	4413      	add	r3, r2
 800b666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b66a:	689b      	ldr	r3, [r3, #8]
 800b66c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	4a15      	ldr	r2, [pc, #84]	; (800b6c8 <PCD_EP_OutSetupPacket_int+0x88>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d90e      	bls.n	800b694 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d009      	beq.n	800b694 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	015a      	lsls	r2, r3, #5
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	4413      	add	r3, r2
 800b688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b68c:	461a      	mov	r2, r3
 800b68e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b692:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f00c ff27 	bl	80184e8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	4a0a      	ldr	r2, [pc, #40]	; (800b6c8 <PCD_EP_OutSetupPacket_int+0x88>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d90c      	bls.n	800b6bc <PCD_EP_OutSetupPacket_int+0x7c>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	691b      	ldr	r3, [r3, #16]
 800b6a6:	2b01      	cmp	r3, #1
 800b6a8:	d108      	bne.n	800b6bc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6818      	ldr	r0, [r3, #0]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b6b4:	461a      	mov	r2, r3
 800b6b6:	2101      	movs	r1, #1
 800b6b8:	f005 ffcc 	bl	8011654 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800b6bc:	2300      	movs	r3, #0
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3718      	adds	r7, #24
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	bd80      	pop	{r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	4f54300a 	.word	0x4f54300a

0800b6cc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b085      	sub	sp, #20
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	70fb      	strb	r3, [r7, #3]
 800b6d8:	4613      	mov	r3, r2
 800b6da:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6e2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800b6e4:	78fb      	ldrb	r3, [r7, #3]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d107      	bne.n	800b6fa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800b6ea:	883b      	ldrh	r3, [r7, #0]
 800b6ec:	0419      	lsls	r1, r3, #16
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	68ba      	ldr	r2, [r7, #8]
 800b6f4:	430a      	orrs	r2, r1
 800b6f6:	629a      	str	r2, [r3, #40]	; 0x28
 800b6f8:	e028      	b.n	800b74c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b700:	0c1b      	lsrs	r3, r3, #16
 800b702:	68ba      	ldr	r2, [r7, #8]
 800b704:	4413      	add	r3, r2
 800b706:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b708:	2300      	movs	r3, #0
 800b70a:	73fb      	strb	r3, [r7, #15]
 800b70c:	e00d      	b.n	800b72a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	7bfb      	ldrb	r3, [r7, #15]
 800b714:	3340      	adds	r3, #64	; 0x40
 800b716:	009b      	lsls	r3, r3, #2
 800b718:	4413      	add	r3, r2
 800b71a:	685b      	ldr	r3, [r3, #4]
 800b71c:	0c1b      	lsrs	r3, r3, #16
 800b71e:	68ba      	ldr	r2, [r7, #8]
 800b720:	4413      	add	r3, r2
 800b722:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b724:	7bfb      	ldrb	r3, [r7, #15]
 800b726:	3301      	adds	r3, #1
 800b728:	73fb      	strb	r3, [r7, #15]
 800b72a:	7bfa      	ldrb	r2, [r7, #15]
 800b72c:	78fb      	ldrb	r3, [r7, #3]
 800b72e:	3b01      	subs	r3, #1
 800b730:	429a      	cmp	r2, r3
 800b732:	d3ec      	bcc.n	800b70e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800b734:	883b      	ldrh	r3, [r7, #0]
 800b736:	0418      	lsls	r0, r3, #16
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	6819      	ldr	r1, [r3, #0]
 800b73c:	78fb      	ldrb	r3, [r7, #3]
 800b73e:	3b01      	subs	r3, #1
 800b740:	68ba      	ldr	r2, [r7, #8]
 800b742:	4302      	orrs	r2, r0
 800b744:	3340      	adds	r3, #64	; 0x40
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	440b      	add	r3, r1
 800b74a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800b74c:	2300      	movs	r3, #0
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3714      	adds	r7, #20
 800b752:	46bd      	mov	sp, r7
 800b754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b758:	4770      	bx	lr

0800b75a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800b75a:	b480      	push	{r7}
 800b75c:	b083      	sub	sp, #12
 800b75e:	af00      	add	r7, sp, #0
 800b760:	6078      	str	r0, [r7, #4]
 800b762:	460b      	mov	r3, r1
 800b764:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	887a      	ldrh	r2, [r7, #2]
 800b76c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b76e:	2300      	movs	r3, #0
}
 800b770:	4618      	mov	r0, r3
 800b772:	370c      	adds	r7, #12
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr

0800b77c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b085      	sub	sp, #20
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2201      	movs	r2, #1
 800b78e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2200      	movs	r2, #0
 800b796:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	699b      	ldr	r3, [r3, #24]
 800b79e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7ae:	f043 0303 	orr.w	r3, r3, #3
 800b7b2:	68fa      	ldr	r2, [r7, #12]
 800b7b4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800b7b6:	2300      	movs	r3, #0
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3714      	adds	r7, #20
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr

0800b7c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b082      	sub	sp, #8
 800b7c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	603b      	str	r3, [r7, #0]
 800b7d2:	4b20      	ldr	r3, [pc, #128]	; (800b854 <HAL_PWREx_EnableOverDrive+0x90>)
 800b7d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7d6:	4a1f      	ldr	r2, [pc, #124]	; (800b854 <HAL_PWREx_EnableOverDrive+0x90>)
 800b7d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7dc:	6413      	str	r3, [r2, #64]	; 0x40
 800b7de:	4b1d      	ldr	r3, [pc, #116]	; (800b854 <HAL_PWREx_EnableOverDrive+0x90>)
 800b7e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7e6:	603b      	str	r3, [r7, #0]
 800b7e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b7ea:	4b1b      	ldr	r3, [pc, #108]	; (800b858 <HAL_PWREx_EnableOverDrive+0x94>)
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b7f0:	f7fb fba4 	bl	8006f3c <HAL_GetTick>
 800b7f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b7f6:	e009      	b.n	800b80c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b7f8:	f7fb fba0 	bl	8006f3c <HAL_GetTick>
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	1ad3      	subs	r3, r2, r3
 800b802:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b806:	d901      	bls.n	800b80c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800b808:	2303      	movs	r3, #3
 800b80a:	e01f      	b.n	800b84c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b80c:	4b13      	ldr	r3, [pc, #76]	; (800b85c <HAL_PWREx_EnableOverDrive+0x98>)
 800b80e:	685b      	ldr	r3, [r3, #4]
 800b810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b818:	d1ee      	bne.n	800b7f8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b81a:	4b11      	ldr	r3, [pc, #68]	; (800b860 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b81c:	2201      	movs	r2, #1
 800b81e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b820:	f7fb fb8c 	bl	8006f3c <HAL_GetTick>
 800b824:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b826:	e009      	b.n	800b83c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b828:	f7fb fb88 	bl	8006f3c <HAL_GetTick>
 800b82c:	4602      	mov	r2, r0
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	1ad3      	subs	r3, r2, r3
 800b832:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b836:	d901      	bls.n	800b83c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800b838:	2303      	movs	r3, #3
 800b83a:	e007      	b.n	800b84c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b83c:	4b07      	ldr	r3, [pc, #28]	; (800b85c <HAL_PWREx_EnableOverDrive+0x98>)
 800b83e:	685b      	ldr	r3, [r3, #4]
 800b840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b844:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b848:	d1ee      	bne.n	800b828 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800b84a:	2300      	movs	r3, #0
}
 800b84c:	4618      	mov	r0, r3
 800b84e:	3708      	adds	r7, #8
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}
 800b854:	40023800 	.word	0x40023800
 800b858:	420e0040 	.word	0x420e0040
 800b85c:	40007000 	.word	0x40007000
 800b860:	420e0044 	.word	0x420e0044

0800b864 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b084      	sub	sp, #16
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d101      	bne.n	800b878 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b874:	2301      	movs	r3, #1
 800b876:	e0cc      	b.n	800ba12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b878:	4b68      	ldr	r3, [pc, #416]	; (800ba1c <HAL_RCC_ClockConfig+0x1b8>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f003 030f 	and.w	r3, r3, #15
 800b880:	683a      	ldr	r2, [r7, #0]
 800b882:	429a      	cmp	r2, r3
 800b884:	d90c      	bls.n	800b8a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b886:	4b65      	ldr	r3, [pc, #404]	; (800ba1c <HAL_RCC_ClockConfig+0x1b8>)
 800b888:	683a      	ldr	r2, [r7, #0]
 800b88a:	b2d2      	uxtb	r2, r2
 800b88c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b88e:	4b63      	ldr	r3, [pc, #396]	; (800ba1c <HAL_RCC_ClockConfig+0x1b8>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f003 030f 	and.w	r3, r3, #15
 800b896:	683a      	ldr	r2, [r7, #0]
 800b898:	429a      	cmp	r2, r3
 800b89a:	d001      	beq.n	800b8a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b89c:	2301      	movs	r3, #1
 800b89e:	e0b8      	b.n	800ba12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f003 0302 	and.w	r3, r3, #2
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d020      	beq.n	800b8ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f003 0304 	and.w	r3, r3, #4
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d005      	beq.n	800b8c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b8b8:	4b59      	ldr	r3, [pc, #356]	; (800ba20 <HAL_RCC_ClockConfig+0x1bc>)
 800b8ba:	689b      	ldr	r3, [r3, #8]
 800b8bc:	4a58      	ldr	r2, [pc, #352]	; (800ba20 <HAL_RCC_ClockConfig+0x1bc>)
 800b8be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b8c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f003 0308 	and.w	r3, r3, #8
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d005      	beq.n	800b8dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b8d0:	4b53      	ldr	r3, [pc, #332]	; (800ba20 <HAL_RCC_ClockConfig+0x1bc>)
 800b8d2:	689b      	ldr	r3, [r3, #8]
 800b8d4:	4a52      	ldr	r2, [pc, #328]	; (800ba20 <HAL_RCC_ClockConfig+0x1bc>)
 800b8d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b8da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b8dc:	4b50      	ldr	r3, [pc, #320]	; (800ba20 <HAL_RCC_ClockConfig+0x1bc>)
 800b8de:	689b      	ldr	r3, [r3, #8]
 800b8e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	689b      	ldr	r3, [r3, #8]
 800b8e8:	494d      	ldr	r1, [pc, #308]	; (800ba20 <HAL_RCC_ClockConfig+0x1bc>)
 800b8ea:	4313      	orrs	r3, r2
 800b8ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f003 0301 	and.w	r3, r3, #1
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d044      	beq.n	800b984 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	685b      	ldr	r3, [r3, #4]
 800b8fe:	2b01      	cmp	r3, #1
 800b900:	d107      	bne.n	800b912 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b902:	4b47      	ldr	r3, [pc, #284]	; (800ba20 <HAL_RCC_ClockConfig+0x1bc>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d119      	bne.n	800b942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b90e:	2301      	movs	r3, #1
 800b910:	e07f      	b.n	800ba12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	2b02      	cmp	r3, #2
 800b918:	d003      	beq.n	800b922 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b91e:	2b03      	cmp	r3, #3
 800b920:	d107      	bne.n	800b932 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b922:	4b3f      	ldr	r3, [pc, #252]	; (800ba20 <HAL_RCC_ClockConfig+0x1bc>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d109      	bne.n	800b942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b92e:	2301      	movs	r3, #1
 800b930:	e06f      	b.n	800ba12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b932:	4b3b      	ldr	r3, [pc, #236]	; (800ba20 <HAL_RCC_ClockConfig+0x1bc>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f003 0302 	and.w	r3, r3, #2
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d101      	bne.n	800b942 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b93e:	2301      	movs	r3, #1
 800b940:	e067      	b.n	800ba12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b942:	4b37      	ldr	r3, [pc, #220]	; (800ba20 <HAL_RCC_ClockConfig+0x1bc>)
 800b944:	689b      	ldr	r3, [r3, #8]
 800b946:	f023 0203 	bic.w	r2, r3, #3
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	4934      	ldr	r1, [pc, #208]	; (800ba20 <HAL_RCC_ClockConfig+0x1bc>)
 800b950:	4313      	orrs	r3, r2
 800b952:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b954:	f7fb faf2 	bl	8006f3c <HAL_GetTick>
 800b958:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b95a:	e00a      	b.n	800b972 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b95c:	f7fb faee 	bl	8006f3c <HAL_GetTick>
 800b960:	4602      	mov	r2, r0
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	1ad3      	subs	r3, r2, r3
 800b966:	f241 3288 	movw	r2, #5000	; 0x1388
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d901      	bls.n	800b972 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b96e:	2303      	movs	r3, #3
 800b970:	e04f      	b.n	800ba12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b972:	4b2b      	ldr	r3, [pc, #172]	; (800ba20 <HAL_RCC_ClockConfig+0x1bc>)
 800b974:	689b      	ldr	r3, [r3, #8]
 800b976:	f003 020c 	and.w	r2, r3, #12
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	685b      	ldr	r3, [r3, #4]
 800b97e:	009b      	lsls	r3, r3, #2
 800b980:	429a      	cmp	r2, r3
 800b982:	d1eb      	bne.n	800b95c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b984:	4b25      	ldr	r3, [pc, #148]	; (800ba1c <HAL_RCC_ClockConfig+0x1b8>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f003 030f 	and.w	r3, r3, #15
 800b98c:	683a      	ldr	r2, [r7, #0]
 800b98e:	429a      	cmp	r2, r3
 800b990:	d20c      	bcs.n	800b9ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b992:	4b22      	ldr	r3, [pc, #136]	; (800ba1c <HAL_RCC_ClockConfig+0x1b8>)
 800b994:	683a      	ldr	r2, [r7, #0]
 800b996:	b2d2      	uxtb	r2, r2
 800b998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b99a:	4b20      	ldr	r3, [pc, #128]	; (800ba1c <HAL_RCC_ClockConfig+0x1b8>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	f003 030f 	and.w	r3, r3, #15
 800b9a2:	683a      	ldr	r2, [r7, #0]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d001      	beq.n	800b9ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	e032      	b.n	800ba12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f003 0304 	and.w	r3, r3, #4
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d008      	beq.n	800b9ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b9b8:	4b19      	ldr	r3, [pc, #100]	; (800ba20 <HAL_RCC_ClockConfig+0x1bc>)
 800b9ba:	689b      	ldr	r3, [r3, #8]
 800b9bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	68db      	ldr	r3, [r3, #12]
 800b9c4:	4916      	ldr	r1, [pc, #88]	; (800ba20 <HAL_RCC_ClockConfig+0x1bc>)
 800b9c6:	4313      	orrs	r3, r2
 800b9c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f003 0308 	and.w	r3, r3, #8
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d009      	beq.n	800b9ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b9d6:	4b12      	ldr	r3, [pc, #72]	; (800ba20 <HAL_RCC_ClockConfig+0x1bc>)
 800b9d8:	689b      	ldr	r3, [r3, #8]
 800b9da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	691b      	ldr	r3, [r3, #16]
 800b9e2:	00db      	lsls	r3, r3, #3
 800b9e4:	490e      	ldr	r1, [pc, #56]	; (800ba20 <HAL_RCC_ClockConfig+0x1bc>)
 800b9e6:	4313      	orrs	r3, r2
 800b9e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b9ea:	f000 fb6b 	bl	800c0c4 <HAL_RCC_GetSysClockFreq>
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	4b0b      	ldr	r3, [pc, #44]	; (800ba20 <HAL_RCC_ClockConfig+0x1bc>)
 800b9f2:	689b      	ldr	r3, [r3, #8]
 800b9f4:	091b      	lsrs	r3, r3, #4
 800b9f6:	f003 030f 	and.w	r3, r3, #15
 800b9fa:	490a      	ldr	r1, [pc, #40]	; (800ba24 <HAL_RCC_ClockConfig+0x1c0>)
 800b9fc:	5ccb      	ldrb	r3, [r1, r3]
 800b9fe:	fa22 f303 	lsr.w	r3, r2, r3
 800ba02:	4a09      	ldr	r2, [pc, #36]	; (800ba28 <HAL_RCC_ClockConfig+0x1c4>)
 800ba04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ba06:	4b09      	ldr	r3, [pc, #36]	; (800ba2c <HAL_RCC_ClockConfig+0x1c8>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7fb fa52 	bl	8006eb4 <HAL_InitTick>

  return HAL_OK;
 800ba10:	2300      	movs	r3, #0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3710      	adds	r7, #16
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	40023c00 	.word	0x40023c00
 800ba20:	40023800 	.word	0x40023800
 800ba24:	0801956c 	.word	0x0801956c
 800ba28:	20000000 	.word	0x20000000
 800ba2c:	20000004 	.word	0x20000004

0800ba30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ba30:	b480      	push	{r7}
 800ba32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ba34:	4b03      	ldr	r3, [pc, #12]	; (800ba44 <HAL_RCC_GetHCLKFreq+0x14>)
 800ba36:	681b      	ldr	r3, [r3, #0]
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba40:	4770      	bx	lr
 800ba42:	bf00      	nop
 800ba44:	20000000 	.word	0x20000000

0800ba48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ba4c:	f7ff fff0 	bl	800ba30 <HAL_RCC_GetHCLKFreq>
 800ba50:	4602      	mov	r2, r0
 800ba52:	4b05      	ldr	r3, [pc, #20]	; (800ba68 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ba54:	689b      	ldr	r3, [r3, #8]
 800ba56:	0a9b      	lsrs	r3, r3, #10
 800ba58:	f003 0307 	and.w	r3, r3, #7
 800ba5c:	4903      	ldr	r1, [pc, #12]	; (800ba6c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ba5e:	5ccb      	ldrb	r3, [r1, r3]
 800ba60:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	bd80      	pop	{r7, pc}
 800ba68:	40023800 	.word	0x40023800
 800ba6c:	0801957c 	.word	0x0801957c

0800ba70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b08c      	sub	sp, #48	; 0x30
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800ba80:	2300      	movs	r3, #0
 800ba82:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800ba84:	2300      	movs	r3, #0
 800ba86:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800ba90:	2300      	movs	r3, #0
 800ba92:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800ba94:	2300      	movs	r3, #0
 800ba96:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	f003 0301 	and.w	r3, r3, #1
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d010      	beq.n	800baca <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800baa8:	4b6f      	ldr	r3, [pc, #444]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800baaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800baae:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bab6:	496c      	ldr	r1, [pc, #432]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800bab8:	4313      	orrs	r3, r2
 800baba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d101      	bne.n	800baca <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800bac6:	2301      	movs	r3, #1
 800bac8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f003 0302 	and.w	r3, r3, #2
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d010      	beq.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800bad6:	4b64      	ldr	r3, [pc, #400]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800bad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800badc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bae4:	4960      	ldr	r1, [pc, #384]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800bae6:	4313      	orrs	r3, r2
 800bae8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d101      	bne.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800baf4:	2301      	movs	r3, #1
 800baf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f003 0304 	and.w	r3, r3, #4
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d017      	beq.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bb04:	4b58      	ldr	r3, [pc, #352]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800bb06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb12:	4955      	ldr	r1, [pc, #340]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800bb14:	4313      	orrs	r3, r2
 800bb16:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb22:	d101      	bne.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800bb24:	2301      	movs	r3, #1
 800bb26:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d101      	bne.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800bb30:	2301      	movs	r3, #1
 800bb32:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f003 0308 	and.w	r3, r3, #8
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d017      	beq.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800bb40:	4b49      	ldr	r3, [pc, #292]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800bb42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb4e:	4946      	ldr	r1, [pc, #280]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800bb50:	4313      	orrs	r3, r2
 800bb52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bb5e:	d101      	bne.n	800bb64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800bb60:	2301      	movs	r3, #1
 800bb62:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d101      	bne.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f003 0320 	and.w	r3, r3, #32
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	f000 808a 	beq.w	800bc92 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800bb7e:	2300      	movs	r3, #0
 800bb80:	60bb      	str	r3, [r7, #8]
 800bb82:	4b39      	ldr	r3, [pc, #228]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800bb84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb86:	4a38      	ldr	r2, [pc, #224]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800bb88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb8c:	6413      	str	r3, [r2, #64]	; 0x40
 800bb8e:	4b36      	ldr	r3, [pc, #216]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800bb90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb96:	60bb      	str	r3, [r7, #8]
 800bb98:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800bb9a:	4b34      	ldr	r3, [pc, #208]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	4a33      	ldr	r2, [pc, #204]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800bba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bba4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bba6:	f7fb f9c9 	bl	8006f3c <HAL_GetTick>
 800bbaa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800bbac:	e008      	b.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800bbae:	f7fb f9c5 	bl	8006f3c <HAL_GetTick>
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb6:	1ad3      	subs	r3, r2, r3
 800bbb8:	2b02      	cmp	r3, #2
 800bbba:	d901      	bls.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800bbbc:	2303      	movs	r3, #3
 800bbbe:	e278      	b.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800bbc0:	4b2a      	ldr	r3, [pc, #168]	; (800bc6c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d0f0      	beq.n	800bbae <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800bbcc:	4b26      	ldr	r3, [pc, #152]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800bbce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bbd4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800bbd6:	6a3b      	ldr	r3, [r7, #32]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d02f      	beq.n	800bc3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbe0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bbe4:	6a3a      	ldr	r2, [r7, #32]
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d028      	beq.n	800bc3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bbea:	4b1f      	ldr	r3, [pc, #124]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800bbec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bbf2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800bbf4:	4b1e      	ldr	r3, [pc, #120]	; (800bc70 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800bbfa:	4b1d      	ldr	r3, [pc, #116]	; (800bc70 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800bc00:	4a19      	ldr	r2, [pc, #100]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800bc02:	6a3b      	ldr	r3, [r7, #32]
 800bc04:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800bc06:	4b18      	ldr	r3, [pc, #96]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800bc08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc0a:	f003 0301 	and.w	r3, r3, #1
 800bc0e:	2b01      	cmp	r3, #1
 800bc10:	d114      	bne.n	800bc3c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800bc12:	f7fb f993 	bl	8006f3c <HAL_GetTick>
 800bc16:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bc18:	e00a      	b.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bc1a:	f7fb f98f 	bl	8006f3c <HAL_GetTick>
 800bc1e:	4602      	mov	r2, r0
 800bc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc22:	1ad3      	subs	r3, r2, r3
 800bc24:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	d901      	bls.n	800bc30 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800bc2c:	2303      	movs	r3, #3
 800bc2e:	e240      	b.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bc30:	4b0d      	ldr	r3, [pc, #52]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800bc32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc34:	f003 0302 	and.w	r3, r3, #2
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d0ee      	beq.n	800bc1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bc44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bc48:	d114      	bne.n	800bc74 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800bc4a:	4b07      	ldr	r3, [pc, #28]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800bc4c:	689b      	ldr	r3, [r3, #8]
 800bc4e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc56:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bc5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc5e:	4902      	ldr	r1, [pc, #8]	; (800bc68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800bc60:	4313      	orrs	r3, r2
 800bc62:	608b      	str	r3, [r1, #8]
 800bc64:	e00c      	b.n	800bc80 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800bc66:	bf00      	nop
 800bc68:	40023800 	.word	0x40023800
 800bc6c:	40007000 	.word	0x40007000
 800bc70:	42470e40 	.word	0x42470e40
 800bc74:	4b4a      	ldr	r3, [pc, #296]	; (800bda0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bc76:	689b      	ldr	r3, [r3, #8]
 800bc78:	4a49      	ldr	r2, [pc, #292]	; (800bda0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bc7a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800bc7e:	6093      	str	r3, [r2, #8]
 800bc80:	4b47      	ldr	r3, [pc, #284]	; (800bda0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bc82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bc8c:	4944      	ldr	r1, [pc, #272]	; (800bda0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bc8e:	4313      	orrs	r3, r2
 800bc90:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f003 0310 	and.w	r3, r3, #16
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d004      	beq.n	800bca8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800bca4:	4b3f      	ldr	r3, [pc, #252]	; (800bda4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800bca6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d00a      	beq.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800bcb4:	4b3a      	ldr	r3, [pc, #232]	; (800bda0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bcb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bcba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcc2:	4937      	ldr	r1, [pc, #220]	; (800bda0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bcc4:	4313      	orrs	r3, r2
 800bcc6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d00a      	beq.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bcd6:	4b32      	ldr	r3, [pc, #200]	; (800bda0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bcd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bcdc:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bce4:	492e      	ldr	r1, [pc, #184]	; (800bda0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bce6:	4313      	orrs	r3, r2
 800bce8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d011      	beq.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800bcf8:	4b29      	ldr	r3, [pc, #164]	; (800bda0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bcfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bcfe:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd06:	4926      	ldr	r1, [pc, #152]	; (800bda0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd16:	d101      	bne.n	800bd1c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800bd18:	2301      	movs	r3, #1
 800bd1a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d00a      	beq.n	800bd3e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800bd28:	4b1d      	ldr	r3, [pc, #116]	; (800bda0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bd2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bd2e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd36:	491a      	ldr	r1, [pc, #104]	; (800bda0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bd38:	4313      	orrs	r3, r2
 800bd3a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d011      	beq.n	800bd6e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800bd4a:	4b15      	ldr	r3, [pc, #84]	; (800bda0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bd4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bd50:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd58:	4911      	ldr	r1, [pc, #68]	; (800bda0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd68:	d101      	bne.n	800bd6e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800bd6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd70:	2b01      	cmp	r3, #1
 800bd72:	d005      	beq.n	800bd80 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bd7c:	f040 80ff 	bne.w	800bf7e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800bd80:	4b09      	ldr	r3, [pc, #36]	; (800bda8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bd82:	2200      	movs	r2, #0
 800bd84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bd86:	f7fb f8d9 	bl	8006f3c <HAL_GetTick>
 800bd8a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bd8c:	e00e      	b.n	800bdac <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800bd8e:	f7fb f8d5 	bl	8006f3c <HAL_GetTick>
 800bd92:	4602      	mov	r2, r0
 800bd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd96:	1ad3      	subs	r3, r2, r3
 800bd98:	2b02      	cmp	r3, #2
 800bd9a:	d907      	bls.n	800bdac <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bd9c:	2303      	movs	r3, #3
 800bd9e:	e188      	b.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800bda0:	40023800 	.word	0x40023800
 800bda4:	424711e0 	.word	0x424711e0
 800bda8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bdac:	4b7e      	ldr	r3, [pc, #504]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d1ea      	bne.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	f003 0301 	and.w	r3, r3, #1
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d003      	beq.n	800bdcc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d009      	beq.n	800bde0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d028      	beq.n	800be2a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d124      	bne.n	800be2a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800bde0:	4b71      	ldr	r3, [pc, #452]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bde2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bde6:	0c1b      	lsrs	r3, r3, #16
 800bde8:	f003 0303 	and.w	r3, r3, #3
 800bdec:	3301      	adds	r3, #1
 800bdee:	005b      	lsls	r3, r3, #1
 800bdf0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800bdf2:	4b6d      	ldr	r3, [pc, #436]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bdf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdf8:	0e1b      	lsrs	r3, r3, #24
 800bdfa:	f003 030f 	and.w	r3, r3, #15
 800bdfe:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	685a      	ldr	r2, [r3, #4]
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	689b      	ldr	r3, [r3, #8]
 800be08:	019b      	lsls	r3, r3, #6
 800be0a:	431a      	orrs	r2, r3
 800be0c:	69fb      	ldr	r3, [r7, #28]
 800be0e:	085b      	lsrs	r3, r3, #1
 800be10:	3b01      	subs	r3, #1
 800be12:	041b      	lsls	r3, r3, #16
 800be14:	431a      	orrs	r2, r3
 800be16:	69bb      	ldr	r3, [r7, #24]
 800be18:	061b      	lsls	r3, r3, #24
 800be1a:	431a      	orrs	r2, r3
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	695b      	ldr	r3, [r3, #20]
 800be20:	071b      	lsls	r3, r3, #28
 800be22:	4961      	ldr	r1, [pc, #388]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800be24:	4313      	orrs	r3, r2
 800be26:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f003 0304 	and.w	r3, r3, #4
 800be32:	2b00      	cmp	r3, #0
 800be34:	d004      	beq.n	800be40 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be3e:	d00a      	beq.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d035      	beq.n	800beb8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800be54:	d130      	bne.n	800beb8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800be56:	4b54      	ldr	r3, [pc, #336]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800be58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be5c:	0c1b      	lsrs	r3, r3, #16
 800be5e:	f003 0303 	and.w	r3, r3, #3
 800be62:	3301      	adds	r3, #1
 800be64:	005b      	lsls	r3, r3, #1
 800be66:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800be68:	4b4f      	ldr	r3, [pc, #316]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800be6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be6e:	0f1b      	lsrs	r3, r3, #28
 800be70:	f003 0307 	and.w	r3, r3, #7
 800be74:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	685a      	ldr	r2, [r3, #4]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	689b      	ldr	r3, [r3, #8]
 800be7e:	019b      	lsls	r3, r3, #6
 800be80:	431a      	orrs	r2, r3
 800be82:	69fb      	ldr	r3, [r7, #28]
 800be84:	085b      	lsrs	r3, r3, #1
 800be86:	3b01      	subs	r3, #1
 800be88:	041b      	lsls	r3, r3, #16
 800be8a:	431a      	orrs	r2, r3
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	691b      	ldr	r3, [r3, #16]
 800be90:	061b      	lsls	r3, r3, #24
 800be92:	431a      	orrs	r2, r3
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	071b      	lsls	r3, r3, #28
 800be98:	4943      	ldr	r1, [pc, #268]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800be9a:	4313      	orrs	r3, r2
 800be9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800bea0:	4b41      	ldr	r3, [pc, #260]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bea2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bea6:	f023 021f 	bic.w	r2, r3, #31
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beae:	3b01      	subs	r3, #1
 800beb0:	493d      	ldr	r1, [pc, #244]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800beb2:	4313      	orrs	r3, r2
 800beb4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d029      	beq.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bec8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800becc:	d124      	bne.n	800bf18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800bece:	4b36      	ldr	r3, [pc, #216]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bed0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bed4:	0c1b      	lsrs	r3, r3, #16
 800bed6:	f003 0303 	and.w	r3, r3, #3
 800beda:	3301      	adds	r3, #1
 800bedc:	005b      	lsls	r3, r3, #1
 800bede:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bee0:	4b31      	ldr	r3, [pc, #196]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bee6:	0f1b      	lsrs	r3, r3, #28
 800bee8:	f003 0307 	and.w	r3, r3, #7
 800beec:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	685a      	ldr	r2, [r3, #4]
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	689b      	ldr	r3, [r3, #8]
 800bef6:	019b      	lsls	r3, r3, #6
 800bef8:	431a      	orrs	r2, r3
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	68db      	ldr	r3, [r3, #12]
 800befe:	085b      	lsrs	r3, r3, #1
 800bf00:	3b01      	subs	r3, #1
 800bf02:	041b      	lsls	r3, r3, #16
 800bf04:	431a      	orrs	r2, r3
 800bf06:	69bb      	ldr	r3, [r7, #24]
 800bf08:	061b      	lsls	r3, r3, #24
 800bf0a:	431a      	orrs	r2, r3
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	071b      	lsls	r3, r3, #28
 800bf10:	4925      	ldr	r1, [pc, #148]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bf12:	4313      	orrs	r3, r2
 800bf14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d016      	beq.n	800bf52 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	685a      	ldr	r2, [r3, #4]
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	689b      	ldr	r3, [r3, #8]
 800bf2c:	019b      	lsls	r3, r3, #6
 800bf2e:	431a      	orrs	r2, r3
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	68db      	ldr	r3, [r3, #12]
 800bf34:	085b      	lsrs	r3, r3, #1
 800bf36:	3b01      	subs	r3, #1
 800bf38:	041b      	lsls	r3, r3, #16
 800bf3a:	431a      	orrs	r2, r3
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	691b      	ldr	r3, [r3, #16]
 800bf40:	061b      	lsls	r3, r3, #24
 800bf42:	431a      	orrs	r2, r3
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	695b      	ldr	r3, [r3, #20]
 800bf48:	071b      	lsls	r3, r3, #28
 800bf4a:	4917      	ldr	r1, [pc, #92]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800bf52:	4b16      	ldr	r3, [pc, #88]	; (800bfac <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800bf54:	2201      	movs	r2, #1
 800bf56:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bf58:	f7fa fff0 	bl	8006f3c <HAL_GetTick>
 800bf5c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bf5e:	e008      	b.n	800bf72 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800bf60:	f7fa ffec 	bl	8006f3c <HAL_GetTick>
 800bf64:	4602      	mov	r2, r0
 800bf66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf68:	1ad3      	subs	r3, r2, r3
 800bf6a:	2b02      	cmp	r3, #2
 800bf6c:	d901      	bls.n	800bf72 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bf6e:	2303      	movs	r3, #3
 800bf70:	e09f      	b.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bf72:	4b0d      	ldr	r3, [pc, #52]	; (800bfa8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d0f0      	beq.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800bf7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	f040 8095 	bne.w	800c0b0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800bf86:	4b0a      	ldr	r3, [pc, #40]	; (800bfb0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800bf88:	2200      	movs	r2, #0
 800bf8a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bf8c:	f7fa ffd6 	bl	8006f3c <HAL_GetTick>
 800bf90:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bf92:	e00f      	b.n	800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800bf94:	f7fa ffd2 	bl	8006f3c <HAL_GetTick>
 800bf98:	4602      	mov	r2, r0
 800bf9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf9c:	1ad3      	subs	r3, r2, r3
 800bf9e:	2b02      	cmp	r3, #2
 800bfa0:	d908      	bls.n	800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bfa2:	2303      	movs	r3, #3
 800bfa4:	e085      	b.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800bfa6:	bf00      	nop
 800bfa8:	40023800 	.word	0x40023800
 800bfac:	42470068 	.word	0x42470068
 800bfb0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bfb4:	4b41      	ldr	r3, [pc, #260]	; (800c0bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bfbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfc0:	d0e8      	beq.n	800bf94 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	f003 0304 	and.w	r3, r3, #4
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d003      	beq.n	800bfd6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d009      	beq.n	800bfea <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d02b      	beq.n	800c03a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d127      	bne.n	800c03a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800bfea:	4b34      	ldr	r3, [pc, #208]	; (800c0bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bfec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bff0:	0c1b      	lsrs	r3, r3, #16
 800bff2:	f003 0303 	and.w	r3, r3, #3
 800bff6:	3301      	adds	r3, #1
 800bff8:	005b      	lsls	r3, r3, #1
 800bffa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	699a      	ldr	r2, [r3, #24]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	69db      	ldr	r3, [r3, #28]
 800c004:	019b      	lsls	r3, r3, #6
 800c006:	431a      	orrs	r2, r3
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	085b      	lsrs	r3, r3, #1
 800c00c:	3b01      	subs	r3, #1
 800c00e:	041b      	lsls	r3, r3, #16
 800c010:	431a      	orrs	r2, r3
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c016:	061b      	lsls	r3, r3, #24
 800c018:	4928      	ldr	r1, [pc, #160]	; (800c0bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800c01a:	4313      	orrs	r3, r2
 800c01c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c020:	4b26      	ldr	r3, [pc, #152]	; (800c0bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800c022:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c026:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c02e:	3b01      	subs	r3, #1
 800c030:	021b      	lsls	r3, r3, #8
 800c032:	4922      	ldr	r1, [pc, #136]	; (800c0bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800c034:	4313      	orrs	r3, r2
 800c036:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c042:	2b00      	cmp	r3, #0
 800c044:	d01d      	beq.n	800c082 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c04a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c04e:	d118      	bne.n	800c082 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c050:	4b1a      	ldr	r3, [pc, #104]	; (800c0bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800c052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c056:	0e1b      	lsrs	r3, r3, #24
 800c058:	f003 030f 	and.w	r3, r3, #15
 800c05c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	699a      	ldr	r2, [r3, #24]
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	69db      	ldr	r3, [r3, #28]
 800c066:	019b      	lsls	r3, r3, #6
 800c068:	431a      	orrs	r2, r3
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	6a1b      	ldr	r3, [r3, #32]
 800c06e:	085b      	lsrs	r3, r3, #1
 800c070:	3b01      	subs	r3, #1
 800c072:	041b      	lsls	r3, r3, #16
 800c074:	431a      	orrs	r2, r3
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	061b      	lsls	r3, r3, #24
 800c07a:	4910      	ldr	r1, [pc, #64]	; (800c0bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800c07c:	4313      	orrs	r3, r2
 800c07e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c082:	4b0f      	ldr	r3, [pc, #60]	; (800c0c0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800c084:	2201      	movs	r2, #1
 800c086:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c088:	f7fa ff58 	bl	8006f3c <HAL_GetTick>
 800c08c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c08e:	e008      	b.n	800c0a2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c090:	f7fa ff54 	bl	8006f3c <HAL_GetTick>
 800c094:	4602      	mov	r2, r0
 800c096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c098:	1ad3      	subs	r3, r2, r3
 800c09a:	2b02      	cmp	r3, #2
 800c09c:	d901      	bls.n	800c0a2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c09e:	2303      	movs	r3, #3
 800c0a0:	e007      	b.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c0a2:	4b06      	ldr	r3, [pc, #24]	; (800c0bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c0aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0ae:	d1ef      	bne.n	800c090 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800c0b0:	2300      	movs	r3, #0
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3730      	adds	r7, #48	; 0x30
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	40023800 	.word	0x40023800
 800c0c0:	42470070 	.word	0x42470070

0800c0c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c0c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c0c8:	b0ae      	sub	sp, #184	; 0xb8
 800c0ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c0ea:	4bcb      	ldr	r3, [pc, #812]	; (800c418 <HAL_RCC_GetSysClockFreq+0x354>)
 800c0ec:	689b      	ldr	r3, [r3, #8]
 800c0ee:	f003 030c 	and.w	r3, r3, #12
 800c0f2:	2b0c      	cmp	r3, #12
 800c0f4:	f200 8206 	bhi.w	800c504 <HAL_RCC_GetSysClockFreq+0x440>
 800c0f8:	a201      	add	r2, pc, #4	; (adr r2, 800c100 <HAL_RCC_GetSysClockFreq+0x3c>)
 800c0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0fe:	bf00      	nop
 800c100:	0800c135 	.word	0x0800c135
 800c104:	0800c505 	.word	0x0800c505
 800c108:	0800c505 	.word	0x0800c505
 800c10c:	0800c505 	.word	0x0800c505
 800c110:	0800c13d 	.word	0x0800c13d
 800c114:	0800c505 	.word	0x0800c505
 800c118:	0800c505 	.word	0x0800c505
 800c11c:	0800c505 	.word	0x0800c505
 800c120:	0800c145 	.word	0x0800c145
 800c124:	0800c505 	.word	0x0800c505
 800c128:	0800c505 	.word	0x0800c505
 800c12c:	0800c505 	.word	0x0800c505
 800c130:	0800c335 	.word	0x0800c335
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c134:	4bb9      	ldr	r3, [pc, #740]	; (800c41c <HAL_RCC_GetSysClockFreq+0x358>)
 800c136:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800c13a:	e1e7      	b.n	800c50c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c13c:	4bb8      	ldr	r3, [pc, #736]	; (800c420 <HAL_RCC_GetSysClockFreq+0x35c>)
 800c13e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800c142:	e1e3      	b.n	800c50c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c144:	4bb4      	ldr	r3, [pc, #720]	; (800c418 <HAL_RCC_GetSysClockFreq+0x354>)
 800c146:	685b      	ldr	r3, [r3, #4]
 800c148:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c14c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c150:	4bb1      	ldr	r3, [pc, #708]	; (800c418 <HAL_RCC_GetSysClockFreq+0x354>)
 800c152:	685b      	ldr	r3, [r3, #4]
 800c154:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d071      	beq.n	800c240 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c15c:	4bae      	ldr	r3, [pc, #696]	; (800c418 <HAL_RCC_GetSysClockFreq+0x354>)
 800c15e:	685b      	ldr	r3, [r3, #4]
 800c160:	099b      	lsrs	r3, r3, #6
 800c162:	2200      	movs	r2, #0
 800c164:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c168:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800c16c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c174:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c178:	2300      	movs	r3, #0
 800c17a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c17e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c182:	4622      	mov	r2, r4
 800c184:	462b      	mov	r3, r5
 800c186:	f04f 0000 	mov.w	r0, #0
 800c18a:	f04f 0100 	mov.w	r1, #0
 800c18e:	0159      	lsls	r1, r3, #5
 800c190:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c194:	0150      	lsls	r0, r2, #5
 800c196:	4602      	mov	r2, r0
 800c198:	460b      	mov	r3, r1
 800c19a:	4621      	mov	r1, r4
 800c19c:	1a51      	subs	r1, r2, r1
 800c19e:	6439      	str	r1, [r7, #64]	; 0x40
 800c1a0:	4629      	mov	r1, r5
 800c1a2:	eb63 0301 	sbc.w	r3, r3, r1
 800c1a6:	647b      	str	r3, [r7, #68]	; 0x44
 800c1a8:	f04f 0200 	mov.w	r2, #0
 800c1ac:	f04f 0300 	mov.w	r3, #0
 800c1b0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800c1b4:	4649      	mov	r1, r9
 800c1b6:	018b      	lsls	r3, r1, #6
 800c1b8:	4641      	mov	r1, r8
 800c1ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c1be:	4641      	mov	r1, r8
 800c1c0:	018a      	lsls	r2, r1, #6
 800c1c2:	4641      	mov	r1, r8
 800c1c4:	1a51      	subs	r1, r2, r1
 800c1c6:	63b9      	str	r1, [r7, #56]	; 0x38
 800c1c8:	4649      	mov	r1, r9
 800c1ca:	eb63 0301 	sbc.w	r3, r3, r1
 800c1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1d0:	f04f 0200 	mov.w	r2, #0
 800c1d4:	f04f 0300 	mov.w	r3, #0
 800c1d8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800c1dc:	4649      	mov	r1, r9
 800c1de:	00cb      	lsls	r3, r1, #3
 800c1e0:	4641      	mov	r1, r8
 800c1e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c1e6:	4641      	mov	r1, r8
 800c1e8:	00ca      	lsls	r2, r1, #3
 800c1ea:	4610      	mov	r0, r2
 800c1ec:	4619      	mov	r1, r3
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	4622      	mov	r2, r4
 800c1f2:	189b      	adds	r3, r3, r2
 800c1f4:	633b      	str	r3, [r7, #48]	; 0x30
 800c1f6:	462b      	mov	r3, r5
 800c1f8:	460a      	mov	r2, r1
 800c1fa:	eb42 0303 	adc.w	r3, r2, r3
 800c1fe:	637b      	str	r3, [r7, #52]	; 0x34
 800c200:	f04f 0200 	mov.w	r2, #0
 800c204:	f04f 0300 	mov.w	r3, #0
 800c208:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800c20c:	4629      	mov	r1, r5
 800c20e:	024b      	lsls	r3, r1, #9
 800c210:	4621      	mov	r1, r4
 800c212:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c216:	4621      	mov	r1, r4
 800c218:	024a      	lsls	r2, r1, #9
 800c21a:	4610      	mov	r0, r2
 800c21c:	4619      	mov	r1, r3
 800c21e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c222:	2200      	movs	r2, #0
 800c224:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c228:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c22c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800c230:	f7f4 f83e 	bl	80002b0 <__aeabi_uldivmod>
 800c234:	4602      	mov	r2, r0
 800c236:	460b      	mov	r3, r1
 800c238:	4613      	mov	r3, r2
 800c23a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c23e:	e067      	b.n	800c310 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c240:	4b75      	ldr	r3, [pc, #468]	; (800c418 <HAL_RCC_GetSysClockFreq+0x354>)
 800c242:	685b      	ldr	r3, [r3, #4]
 800c244:	099b      	lsrs	r3, r3, #6
 800c246:	2200      	movs	r2, #0
 800c248:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c24c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800c250:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c258:	67bb      	str	r3, [r7, #120]	; 0x78
 800c25a:	2300      	movs	r3, #0
 800c25c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c25e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800c262:	4622      	mov	r2, r4
 800c264:	462b      	mov	r3, r5
 800c266:	f04f 0000 	mov.w	r0, #0
 800c26a:	f04f 0100 	mov.w	r1, #0
 800c26e:	0159      	lsls	r1, r3, #5
 800c270:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c274:	0150      	lsls	r0, r2, #5
 800c276:	4602      	mov	r2, r0
 800c278:	460b      	mov	r3, r1
 800c27a:	4621      	mov	r1, r4
 800c27c:	1a51      	subs	r1, r2, r1
 800c27e:	62b9      	str	r1, [r7, #40]	; 0x28
 800c280:	4629      	mov	r1, r5
 800c282:	eb63 0301 	sbc.w	r3, r3, r1
 800c286:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c288:	f04f 0200 	mov.w	r2, #0
 800c28c:	f04f 0300 	mov.w	r3, #0
 800c290:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800c294:	4649      	mov	r1, r9
 800c296:	018b      	lsls	r3, r1, #6
 800c298:	4641      	mov	r1, r8
 800c29a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c29e:	4641      	mov	r1, r8
 800c2a0:	018a      	lsls	r2, r1, #6
 800c2a2:	4641      	mov	r1, r8
 800c2a4:	ebb2 0a01 	subs.w	sl, r2, r1
 800c2a8:	4649      	mov	r1, r9
 800c2aa:	eb63 0b01 	sbc.w	fp, r3, r1
 800c2ae:	f04f 0200 	mov.w	r2, #0
 800c2b2:	f04f 0300 	mov.w	r3, #0
 800c2b6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c2ba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c2be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c2c2:	4692      	mov	sl, r2
 800c2c4:	469b      	mov	fp, r3
 800c2c6:	4623      	mov	r3, r4
 800c2c8:	eb1a 0303 	adds.w	r3, sl, r3
 800c2cc:	623b      	str	r3, [r7, #32]
 800c2ce:	462b      	mov	r3, r5
 800c2d0:	eb4b 0303 	adc.w	r3, fp, r3
 800c2d4:	627b      	str	r3, [r7, #36]	; 0x24
 800c2d6:	f04f 0200 	mov.w	r2, #0
 800c2da:	f04f 0300 	mov.w	r3, #0
 800c2de:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800c2e2:	4629      	mov	r1, r5
 800c2e4:	028b      	lsls	r3, r1, #10
 800c2e6:	4621      	mov	r1, r4
 800c2e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c2ec:	4621      	mov	r1, r4
 800c2ee:	028a      	lsls	r2, r1, #10
 800c2f0:	4610      	mov	r0, r2
 800c2f2:	4619      	mov	r1, r3
 800c2f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	673b      	str	r3, [r7, #112]	; 0x70
 800c2fc:	677a      	str	r2, [r7, #116]	; 0x74
 800c2fe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800c302:	f7f3 ffd5 	bl	80002b0 <__aeabi_uldivmod>
 800c306:	4602      	mov	r2, r0
 800c308:	460b      	mov	r3, r1
 800c30a:	4613      	mov	r3, r2
 800c30c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c310:	4b41      	ldr	r3, [pc, #260]	; (800c418 <HAL_RCC_GetSysClockFreq+0x354>)
 800c312:	685b      	ldr	r3, [r3, #4]
 800c314:	0c1b      	lsrs	r3, r3, #16
 800c316:	f003 0303 	and.w	r3, r3, #3
 800c31a:	3301      	adds	r3, #1
 800c31c:	005b      	lsls	r3, r3, #1
 800c31e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800c322:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c326:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c32a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c32e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800c332:	e0eb      	b.n	800c50c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c334:	4b38      	ldr	r3, [pc, #224]	; (800c418 <HAL_RCC_GetSysClockFreq+0x354>)
 800c336:	685b      	ldr	r3, [r3, #4]
 800c338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c33c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c340:	4b35      	ldr	r3, [pc, #212]	; (800c418 <HAL_RCC_GetSysClockFreq+0x354>)
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d06b      	beq.n	800c424 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c34c:	4b32      	ldr	r3, [pc, #200]	; (800c418 <HAL_RCC_GetSysClockFreq+0x354>)
 800c34e:	685b      	ldr	r3, [r3, #4]
 800c350:	099b      	lsrs	r3, r3, #6
 800c352:	2200      	movs	r2, #0
 800c354:	66bb      	str	r3, [r7, #104]	; 0x68
 800c356:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c358:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c35a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c35e:	663b      	str	r3, [r7, #96]	; 0x60
 800c360:	2300      	movs	r3, #0
 800c362:	667b      	str	r3, [r7, #100]	; 0x64
 800c364:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800c368:	4622      	mov	r2, r4
 800c36a:	462b      	mov	r3, r5
 800c36c:	f04f 0000 	mov.w	r0, #0
 800c370:	f04f 0100 	mov.w	r1, #0
 800c374:	0159      	lsls	r1, r3, #5
 800c376:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c37a:	0150      	lsls	r0, r2, #5
 800c37c:	4602      	mov	r2, r0
 800c37e:	460b      	mov	r3, r1
 800c380:	4621      	mov	r1, r4
 800c382:	1a51      	subs	r1, r2, r1
 800c384:	61b9      	str	r1, [r7, #24]
 800c386:	4629      	mov	r1, r5
 800c388:	eb63 0301 	sbc.w	r3, r3, r1
 800c38c:	61fb      	str	r3, [r7, #28]
 800c38e:	f04f 0200 	mov.w	r2, #0
 800c392:	f04f 0300 	mov.w	r3, #0
 800c396:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800c39a:	4659      	mov	r1, fp
 800c39c:	018b      	lsls	r3, r1, #6
 800c39e:	4651      	mov	r1, sl
 800c3a0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c3a4:	4651      	mov	r1, sl
 800c3a6:	018a      	lsls	r2, r1, #6
 800c3a8:	4651      	mov	r1, sl
 800c3aa:	ebb2 0801 	subs.w	r8, r2, r1
 800c3ae:	4659      	mov	r1, fp
 800c3b0:	eb63 0901 	sbc.w	r9, r3, r1
 800c3b4:	f04f 0200 	mov.w	r2, #0
 800c3b8:	f04f 0300 	mov.w	r3, #0
 800c3bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c3c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c3c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c3c8:	4690      	mov	r8, r2
 800c3ca:	4699      	mov	r9, r3
 800c3cc:	4623      	mov	r3, r4
 800c3ce:	eb18 0303 	adds.w	r3, r8, r3
 800c3d2:	613b      	str	r3, [r7, #16]
 800c3d4:	462b      	mov	r3, r5
 800c3d6:	eb49 0303 	adc.w	r3, r9, r3
 800c3da:	617b      	str	r3, [r7, #20]
 800c3dc:	f04f 0200 	mov.w	r2, #0
 800c3e0:	f04f 0300 	mov.w	r3, #0
 800c3e4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800c3e8:	4629      	mov	r1, r5
 800c3ea:	024b      	lsls	r3, r1, #9
 800c3ec:	4621      	mov	r1, r4
 800c3ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c3f2:	4621      	mov	r1, r4
 800c3f4:	024a      	lsls	r2, r1, #9
 800c3f6:	4610      	mov	r0, r2
 800c3f8:	4619      	mov	r1, r3
 800c3fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c3fe:	2200      	movs	r2, #0
 800c400:	65bb      	str	r3, [r7, #88]	; 0x58
 800c402:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c404:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c408:	f7f3 ff52 	bl	80002b0 <__aeabi_uldivmod>
 800c40c:	4602      	mov	r2, r0
 800c40e:	460b      	mov	r3, r1
 800c410:	4613      	mov	r3, r2
 800c412:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c416:	e065      	b.n	800c4e4 <HAL_RCC_GetSysClockFreq+0x420>
 800c418:	40023800 	.word	0x40023800
 800c41c:	00f42400 	.word	0x00f42400
 800c420:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c424:	4b3d      	ldr	r3, [pc, #244]	; (800c51c <HAL_RCC_GetSysClockFreq+0x458>)
 800c426:	685b      	ldr	r3, [r3, #4]
 800c428:	099b      	lsrs	r3, r3, #6
 800c42a:	2200      	movs	r2, #0
 800c42c:	4618      	mov	r0, r3
 800c42e:	4611      	mov	r1, r2
 800c430:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800c434:	653b      	str	r3, [r7, #80]	; 0x50
 800c436:	2300      	movs	r3, #0
 800c438:	657b      	str	r3, [r7, #84]	; 0x54
 800c43a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800c43e:	4642      	mov	r2, r8
 800c440:	464b      	mov	r3, r9
 800c442:	f04f 0000 	mov.w	r0, #0
 800c446:	f04f 0100 	mov.w	r1, #0
 800c44a:	0159      	lsls	r1, r3, #5
 800c44c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c450:	0150      	lsls	r0, r2, #5
 800c452:	4602      	mov	r2, r0
 800c454:	460b      	mov	r3, r1
 800c456:	4641      	mov	r1, r8
 800c458:	1a51      	subs	r1, r2, r1
 800c45a:	60b9      	str	r1, [r7, #8]
 800c45c:	4649      	mov	r1, r9
 800c45e:	eb63 0301 	sbc.w	r3, r3, r1
 800c462:	60fb      	str	r3, [r7, #12]
 800c464:	f04f 0200 	mov.w	r2, #0
 800c468:	f04f 0300 	mov.w	r3, #0
 800c46c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800c470:	4659      	mov	r1, fp
 800c472:	018b      	lsls	r3, r1, #6
 800c474:	4651      	mov	r1, sl
 800c476:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c47a:	4651      	mov	r1, sl
 800c47c:	018a      	lsls	r2, r1, #6
 800c47e:	4651      	mov	r1, sl
 800c480:	1a54      	subs	r4, r2, r1
 800c482:	4659      	mov	r1, fp
 800c484:	eb63 0501 	sbc.w	r5, r3, r1
 800c488:	f04f 0200 	mov.w	r2, #0
 800c48c:	f04f 0300 	mov.w	r3, #0
 800c490:	00eb      	lsls	r3, r5, #3
 800c492:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c496:	00e2      	lsls	r2, r4, #3
 800c498:	4614      	mov	r4, r2
 800c49a:	461d      	mov	r5, r3
 800c49c:	4643      	mov	r3, r8
 800c49e:	18e3      	adds	r3, r4, r3
 800c4a0:	603b      	str	r3, [r7, #0]
 800c4a2:	464b      	mov	r3, r9
 800c4a4:	eb45 0303 	adc.w	r3, r5, r3
 800c4a8:	607b      	str	r3, [r7, #4]
 800c4aa:	f04f 0200 	mov.w	r2, #0
 800c4ae:	f04f 0300 	mov.w	r3, #0
 800c4b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c4b6:	4629      	mov	r1, r5
 800c4b8:	028b      	lsls	r3, r1, #10
 800c4ba:	4621      	mov	r1, r4
 800c4bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c4c0:	4621      	mov	r1, r4
 800c4c2:	028a      	lsls	r2, r1, #10
 800c4c4:	4610      	mov	r0, r2
 800c4c6:	4619      	mov	r1, r3
 800c4c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4d0:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c4d2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c4d6:	f7f3 feeb 	bl	80002b0 <__aeabi_uldivmod>
 800c4da:	4602      	mov	r2, r0
 800c4dc:	460b      	mov	r3, r1
 800c4de:	4613      	mov	r3, r2
 800c4e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800c4e4:	4b0d      	ldr	r3, [pc, #52]	; (800c51c <HAL_RCC_GetSysClockFreq+0x458>)
 800c4e6:	685b      	ldr	r3, [r3, #4]
 800c4e8:	0f1b      	lsrs	r3, r3, #28
 800c4ea:	f003 0307 	and.w	r3, r3, #7
 800c4ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800c4f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c4f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c4fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800c502:	e003      	b.n	800c50c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c504:	4b06      	ldr	r3, [pc, #24]	; (800c520 <HAL_RCC_GetSysClockFreq+0x45c>)
 800c506:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800c50a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c50c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800c510:	4618      	mov	r0, r3
 800c512:	37b8      	adds	r7, #184	; 0xb8
 800c514:	46bd      	mov	sp, r7
 800c516:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c51a:	bf00      	nop
 800c51c:	40023800 	.word	0x40023800
 800c520:	00f42400 	.word	0x00f42400

0800c524 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b086      	sub	sp, #24
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d101      	bne.n	800c536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c532:	2301      	movs	r3, #1
 800c534:	e28d      	b.n	800ca52 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	f003 0301 	and.w	r3, r3, #1
 800c53e:	2b00      	cmp	r3, #0
 800c540:	f000 8083 	beq.w	800c64a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c544:	4b94      	ldr	r3, [pc, #592]	; (800c798 <HAL_RCC_OscConfig+0x274>)
 800c546:	689b      	ldr	r3, [r3, #8]
 800c548:	f003 030c 	and.w	r3, r3, #12
 800c54c:	2b04      	cmp	r3, #4
 800c54e:	d019      	beq.n	800c584 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c550:	4b91      	ldr	r3, [pc, #580]	; (800c798 <HAL_RCC_OscConfig+0x274>)
 800c552:	689b      	ldr	r3, [r3, #8]
 800c554:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c558:	2b08      	cmp	r3, #8
 800c55a:	d106      	bne.n	800c56a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c55c:	4b8e      	ldr	r3, [pc, #568]	; (800c798 <HAL_RCC_OscConfig+0x274>)
 800c55e:	685b      	ldr	r3, [r3, #4]
 800c560:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c564:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c568:	d00c      	beq.n	800c584 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c56a:	4b8b      	ldr	r3, [pc, #556]	; (800c798 <HAL_RCC_OscConfig+0x274>)
 800c56c:	689b      	ldr	r3, [r3, #8]
 800c56e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c572:	2b0c      	cmp	r3, #12
 800c574:	d112      	bne.n	800c59c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c576:	4b88      	ldr	r3, [pc, #544]	; (800c798 <HAL_RCC_OscConfig+0x274>)
 800c578:	685b      	ldr	r3, [r3, #4]
 800c57a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c57e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c582:	d10b      	bne.n	800c59c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c584:	4b84      	ldr	r3, [pc, #528]	; (800c798 <HAL_RCC_OscConfig+0x274>)
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d05b      	beq.n	800c648 <HAL_RCC_OscConfig+0x124>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	685b      	ldr	r3, [r3, #4]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d157      	bne.n	800c648 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800c598:	2301      	movs	r3, #1
 800c59a:	e25a      	b.n	800ca52 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	685b      	ldr	r3, [r3, #4]
 800c5a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5a4:	d106      	bne.n	800c5b4 <HAL_RCC_OscConfig+0x90>
 800c5a6:	4b7c      	ldr	r3, [pc, #496]	; (800c798 <HAL_RCC_OscConfig+0x274>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4a7b      	ldr	r2, [pc, #492]	; (800c798 <HAL_RCC_OscConfig+0x274>)
 800c5ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c5b0:	6013      	str	r3, [r2, #0]
 800c5b2:	e01d      	b.n	800c5f0 <HAL_RCC_OscConfig+0xcc>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	685b      	ldr	r3, [r3, #4]
 800c5b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c5bc:	d10c      	bne.n	800c5d8 <HAL_RCC_OscConfig+0xb4>
 800c5be:	4b76      	ldr	r3, [pc, #472]	; (800c798 <HAL_RCC_OscConfig+0x274>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	4a75      	ldr	r2, [pc, #468]	; (800c798 <HAL_RCC_OscConfig+0x274>)
 800c5c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c5c8:	6013      	str	r3, [r2, #0]
 800c5ca:	4b73      	ldr	r3, [pc, #460]	; (800c798 <HAL_RCC_OscConfig+0x274>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	4a72      	ldr	r2, [pc, #456]	; (800c798 <HAL_RCC_OscConfig+0x274>)
 800c5d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c5d4:	6013      	str	r3, [r2, #0]
 800c5d6:	e00b      	b.n	800c5f0 <HAL_RCC_OscConfig+0xcc>
 800c5d8:	4b6f      	ldr	r3, [pc, #444]	; (800c798 <HAL_RCC_OscConfig+0x274>)
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	4a6e      	ldr	r2, [pc, #440]	; (800c798 <HAL_RCC_OscConfig+0x274>)
 800c5de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c5e2:	6013      	str	r3, [r2, #0]
 800c5e4:	4b6c      	ldr	r3, [pc, #432]	; (800c798 <HAL_RCC_OscConfig+0x274>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	4a6b      	ldr	r2, [pc, #428]	; (800c798 <HAL_RCC_OscConfig+0x274>)
 800c5ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c5ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	685b      	ldr	r3, [r3, #4]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d013      	beq.n	800c620 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5f8:	f7fa fca0 	bl	8006f3c <HAL_GetTick>
 800c5fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c5fe:	e008      	b.n	800c612 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c600:	f7fa fc9c 	bl	8006f3c <HAL_GetTick>
 800c604:	4602      	mov	r2, r0
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	1ad3      	subs	r3, r2, r3
 800c60a:	2b64      	cmp	r3, #100	; 0x64
 800c60c:	d901      	bls.n	800c612 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800c60e:	2303      	movs	r3, #3
 800c610:	e21f      	b.n	800ca52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c612:	4b61      	ldr	r3, [pc, #388]	; (800c798 <HAL_RCC_OscConfig+0x274>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d0f0      	beq.n	800c600 <HAL_RCC_OscConfig+0xdc>
 800c61e:	e014      	b.n	800c64a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c620:	f7fa fc8c 	bl	8006f3c <HAL_GetTick>
 800c624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c626:	e008      	b.n	800c63a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c628:	f7fa fc88 	bl	8006f3c <HAL_GetTick>
 800c62c:	4602      	mov	r2, r0
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	1ad3      	subs	r3, r2, r3
 800c632:	2b64      	cmp	r3, #100	; 0x64
 800c634:	d901      	bls.n	800c63a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800c636:	2303      	movs	r3, #3
 800c638:	e20b      	b.n	800ca52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c63a:	4b57      	ldr	r3, [pc, #348]	; (800c798 <HAL_RCC_OscConfig+0x274>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c642:	2b00      	cmp	r3, #0
 800c644:	d1f0      	bne.n	800c628 <HAL_RCC_OscConfig+0x104>
 800c646:	e000      	b.n	800c64a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f003 0302 	and.w	r3, r3, #2
 800c652:	2b00      	cmp	r3, #0
 800c654:	d06f      	beq.n	800c736 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c656:	4b50      	ldr	r3, [pc, #320]	; (800c798 <HAL_RCC_OscConfig+0x274>)
 800c658:	689b      	ldr	r3, [r3, #8]
 800c65a:	f003 030c 	and.w	r3, r3, #12
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d017      	beq.n	800c692 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800c662:	4b4d      	ldr	r3, [pc, #308]	; (800c798 <HAL_RCC_OscConfig+0x274>)
 800c664:	689b      	ldr	r3, [r3, #8]
 800c666:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c66a:	2b08      	cmp	r3, #8
 800c66c:	d105      	bne.n	800c67a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800c66e:	4b4a      	ldr	r3, [pc, #296]	; (800c798 <HAL_RCC_OscConfig+0x274>)
 800c670:	685b      	ldr	r3, [r3, #4]
 800c672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c676:	2b00      	cmp	r3, #0
 800c678:	d00b      	beq.n	800c692 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c67a:	4b47      	ldr	r3, [pc, #284]	; (800c798 <HAL_RCC_OscConfig+0x274>)
 800c67c:	689b      	ldr	r3, [r3, #8]
 800c67e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800c682:	2b0c      	cmp	r3, #12
 800c684:	d11c      	bne.n	800c6c0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c686:	4b44      	ldr	r3, [pc, #272]	; (800c798 <HAL_RCC_OscConfig+0x274>)
 800c688:	685b      	ldr	r3, [r3, #4]
 800c68a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d116      	bne.n	800c6c0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c692:	4b41      	ldr	r3, [pc, #260]	; (800c798 <HAL_RCC_OscConfig+0x274>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f003 0302 	and.w	r3, r3, #2
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d005      	beq.n	800c6aa <HAL_RCC_OscConfig+0x186>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	68db      	ldr	r3, [r3, #12]
 800c6a2:	2b01      	cmp	r3, #1
 800c6a4:	d001      	beq.n	800c6aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	e1d3      	b.n	800ca52 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c6aa:	4b3b      	ldr	r3, [pc, #236]	; (800c798 <HAL_RCC_OscConfig+0x274>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	691b      	ldr	r3, [r3, #16]
 800c6b6:	00db      	lsls	r3, r3, #3
 800c6b8:	4937      	ldr	r1, [pc, #220]	; (800c798 <HAL_RCC_OscConfig+0x274>)
 800c6ba:	4313      	orrs	r3, r2
 800c6bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c6be:	e03a      	b.n	800c736 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	68db      	ldr	r3, [r3, #12]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d020      	beq.n	800c70a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c6c8:	4b34      	ldr	r3, [pc, #208]	; (800c79c <HAL_RCC_OscConfig+0x278>)
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6ce:	f7fa fc35 	bl	8006f3c <HAL_GetTick>
 800c6d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c6d4:	e008      	b.n	800c6e8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c6d6:	f7fa fc31 	bl	8006f3c <HAL_GetTick>
 800c6da:	4602      	mov	r2, r0
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	1ad3      	subs	r3, r2, r3
 800c6e0:	2b02      	cmp	r3, #2
 800c6e2:	d901      	bls.n	800c6e8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800c6e4:	2303      	movs	r3, #3
 800c6e6:	e1b4      	b.n	800ca52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c6e8:	4b2b      	ldr	r3, [pc, #172]	; (800c798 <HAL_RCC_OscConfig+0x274>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f003 0302 	and.w	r3, r3, #2
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d0f0      	beq.n	800c6d6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c6f4:	4b28      	ldr	r3, [pc, #160]	; (800c798 <HAL_RCC_OscConfig+0x274>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	691b      	ldr	r3, [r3, #16]
 800c700:	00db      	lsls	r3, r3, #3
 800c702:	4925      	ldr	r1, [pc, #148]	; (800c798 <HAL_RCC_OscConfig+0x274>)
 800c704:	4313      	orrs	r3, r2
 800c706:	600b      	str	r3, [r1, #0]
 800c708:	e015      	b.n	800c736 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c70a:	4b24      	ldr	r3, [pc, #144]	; (800c79c <HAL_RCC_OscConfig+0x278>)
 800c70c:	2200      	movs	r2, #0
 800c70e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c710:	f7fa fc14 	bl	8006f3c <HAL_GetTick>
 800c714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c716:	e008      	b.n	800c72a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c718:	f7fa fc10 	bl	8006f3c <HAL_GetTick>
 800c71c:	4602      	mov	r2, r0
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	1ad3      	subs	r3, r2, r3
 800c722:	2b02      	cmp	r3, #2
 800c724:	d901      	bls.n	800c72a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c726:	2303      	movs	r3, #3
 800c728:	e193      	b.n	800ca52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c72a:	4b1b      	ldr	r3, [pc, #108]	; (800c798 <HAL_RCC_OscConfig+0x274>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f003 0302 	and.w	r3, r3, #2
 800c732:	2b00      	cmp	r3, #0
 800c734:	d1f0      	bne.n	800c718 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f003 0308 	and.w	r3, r3, #8
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d036      	beq.n	800c7b0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	695b      	ldr	r3, [r3, #20]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d016      	beq.n	800c778 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c74a:	4b15      	ldr	r3, [pc, #84]	; (800c7a0 <HAL_RCC_OscConfig+0x27c>)
 800c74c:	2201      	movs	r2, #1
 800c74e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c750:	f7fa fbf4 	bl	8006f3c <HAL_GetTick>
 800c754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c756:	e008      	b.n	800c76a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c758:	f7fa fbf0 	bl	8006f3c <HAL_GetTick>
 800c75c:	4602      	mov	r2, r0
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	1ad3      	subs	r3, r2, r3
 800c762:	2b02      	cmp	r3, #2
 800c764:	d901      	bls.n	800c76a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800c766:	2303      	movs	r3, #3
 800c768:	e173      	b.n	800ca52 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c76a:	4b0b      	ldr	r3, [pc, #44]	; (800c798 <HAL_RCC_OscConfig+0x274>)
 800c76c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c76e:	f003 0302 	and.w	r3, r3, #2
 800c772:	2b00      	cmp	r3, #0
 800c774:	d0f0      	beq.n	800c758 <HAL_RCC_OscConfig+0x234>
 800c776:	e01b      	b.n	800c7b0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c778:	4b09      	ldr	r3, [pc, #36]	; (800c7a0 <HAL_RCC_OscConfig+0x27c>)
 800c77a:	2200      	movs	r2, #0
 800c77c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c77e:	f7fa fbdd 	bl	8006f3c <HAL_GetTick>
 800c782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c784:	e00e      	b.n	800c7a4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c786:	f7fa fbd9 	bl	8006f3c <HAL_GetTick>
 800c78a:	4602      	mov	r2, r0
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	1ad3      	subs	r3, r2, r3
 800c790:	2b02      	cmp	r3, #2
 800c792:	d907      	bls.n	800c7a4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800c794:	2303      	movs	r3, #3
 800c796:	e15c      	b.n	800ca52 <HAL_RCC_OscConfig+0x52e>
 800c798:	40023800 	.word	0x40023800
 800c79c:	42470000 	.word	0x42470000
 800c7a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c7a4:	4b8a      	ldr	r3, [pc, #552]	; (800c9d0 <HAL_RCC_OscConfig+0x4ac>)
 800c7a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7a8:	f003 0302 	and.w	r3, r3, #2
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d1ea      	bne.n	800c786 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	f003 0304 	and.w	r3, r3, #4
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	f000 8097 	beq.w	800c8ec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c7c2:	4b83      	ldr	r3, [pc, #524]	; (800c9d0 <HAL_RCC_OscConfig+0x4ac>)
 800c7c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d10f      	bne.n	800c7ee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	60bb      	str	r3, [r7, #8]
 800c7d2:	4b7f      	ldr	r3, [pc, #508]	; (800c9d0 <HAL_RCC_OscConfig+0x4ac>)
 800c7d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7d6:	4a7e      	ldr	r2, [pc, #504]	; (800c9d0 <HAL_RCC_OscConfig+0x4ac>)
 800c7d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c7dc:	6413      	str	r3, [r2, #64]	; 0x40
 800c7de:	4b7c      	ldr	r3, [pc, #496]	; (800c9d0 <HAL_RCC_OscConfig+0x4ac>)
 800c7e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c7e6:	60bb      	str	r3, [r7, #8]
 800c7e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c7ee:	4b79      	ldr	r3, [pc, #484]	; (800c9d4 <HAL_RCC_OscConfig+0x4b0>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d118      	bne.n	800c82c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c7fa:	4b76      	ldr	r3, [pc, #472]	; (800c9d4 <HAL_RCC_OscConfig+0x4b0>)
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	4a75      	ldr	r2, [pc, #468]	; (800c9d4 <HAL_RCC_OscConfig+0x4b0>)
 800c800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c806:	f7fa fb99 	bl	8006f3c <HAL_GetTick>
 800c80a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c80c:	e008      	b.n	800c820 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c80e:	f7fa fb95 	bl	8006f3c <HAL_GetTick>
 800c812:	4602      	mov	r2, r0
 800c814:	693b      	ldr	r3, [r7, #16]
 800c816:	1ad3      	subs	r3, r2, r3
 800c818:	2b02      	cmp	r3, #2
 800c81a:	d901      	bls.n	800c820 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800c81c:	2303      	movs	r3, #3
 800c81e:	e118      	b.n	800ca52 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c820:	4b6c      	ldr	r3, [pc, #432]	; (800c9d4 <HAL_RCC_OscConfig+0x4b0>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d0f0      	beq.n	800c80e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	689b      	ldr	r3, [r3, #8]
 800c830:	2b01      	cmp	r3, #1
 800c832:	d106      	bne.n	800c842 <HAL_RCC_OscConfig+0x31e>
 800c834:	4b66      	ldr	r3, [pc, #408]	; (800c9d0 <HAL_RCC_OscConfig+0x4ac>)
 800c836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c838:	4a65      	ldr	r2, [pc, #404]	; (800c9d0 <HAL_RCC_OscConfig+0x4ac>)
 800c83a:	f043 0301 	orr.w	r3, r3, #1
 800c83e:	6713      	str	r3, [r2, #112]	; 0x70
 800c840:	e01c      	b.n	800c87c <HAL_RCC_OscConfig+0x358>
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	689b      	ldr	r3, [r3, #8]
 800c846:	2b05      	cmp	r3, #5
 800c848:	d10c      	bne.n	800c864 <HAL_RCC_OscConfig+0x340>
 800c84a:	4b61      	ldr	r3, [pc, #388]	; (800c9d0 <HAL_RCC_OscConfig+0x4ac>)
 800c84c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c84e:	4a60      	ldr	r2, [pc, #384]	; (800c9d0 <HAL_RCC_OscConfig+0x4ac>)
 800c850:	f043 0304 	orr.w	r3, r3, #4
 800c854:	6713      	str	r3, [r2, #112]	; 0x70
 800c856:	4b5e      	ldr	r3, [pc, #376]	; (800c9d0 <HAL_RCC_OscConfig+0x4ac>)
 800c858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c85a:	4a5d      	ldr	r2, [pc, #372]	; (800c9d0 <HAL_RCC_OscConfig+0x4ac>)
 800c85c:	f043 0301 	orr.w	r3, r3, #1
 800c860:	6713      	str	r3, [r2, #112]	; 0x70
 800c862:	e00b      	b.n	800c87c <HAL_RCC_OscConfig+0x358>
 800c864:	4b5a      	ldr	r3, [pc, #360]	; (800c9d0 <HAL_RCC_OscConfig+0x4ac>)
 800c866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c868:	4a59      	ldr	r2, [pc, #356]	; (800c9d0 <HAL_RCC_OscConfig+0x4ac>)
 800c86a:	f023 0301 	bic.w	r3, r3, #1
 800c86e:	6713      	str	r3, [r2, #112]	; 0x70
 800c870:	4b57      	ldr	r3, [pc, #348]	; (800c9d0 <HAL_RCC_OscConfig+0x4ac>)
 800c872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c874:	4a56      	ldr	r2, [pc, #344]	; (800c9d0 <HAL_RCC_OscConfig+0x4ac>)
 800c876:	f023 0304 	bic.w	r3, r3, #4
 800c87a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	689b      	ldr	r3, [r3, #8]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d015      	beq.n	800c8b0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c884:	f7fa fb5a 	bl	8006f3c <HAL_GetTick>
 800c888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c88a:	e00a      	b.n	800c8a2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c88c:	f7fa fb56 	bl	8006f3c <HAL_GetTick>
 800c890:	4602      	mov	r2, r0
 800c892:	693b      	ldr	r3, [r7, #16]
 800c894:	1ad3      	subs	r3, r2, r3
 800c896:	f241 3288 	movw	r2, #5000	; 0x1388
 800c89a:	4293      	cmp	r3, r2
 800c89c:	d901      	bls.n	800c8a2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800c89e:	2303      	movs	r3, #3
 800c8a0:	e0d7      	b.n	800ca52 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c8a2:	4b4b      	ldr	r3, [pc, #300]	; (800c9d0 <HAL_RCC_OscConfig+0x4ac>)
 800c8a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8a6:	f003 0302 	and.w	r3, r3, #2
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d0ee      	beq.n	800c88c <HAL_RCC_OscConfig+0x368>
 800c8ae:	e014      	b.n	800c8da <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c8b0:	f7fa fb44 	bl	8006f3c <HAL_GetTick>
 800c8b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c8b6:	e00a      	b.n	800c8ce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c8b8:	f7fa fb40 	bl	8006f3c <HAL_GetTick>
 800c8bc:	4602      	mov	r2, r0
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	1ad3      	subs	r3, r2, r3
 800c8c2:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8c6:	4293      	cmp	r3, r2
 800c8c8:	d901      	bls.n	800c8ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800c8ca:	2303      	movs	r3, #3
 800c8cc:	e0c1      	b.n	800ca52 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c8ce:	4b40      	ldr	r3, [pc, #256]	; (800c9d0 <HAL_RCC_OscConfig+0x4ac>)
 800c8d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8d2:	f003 0302 	and.w	r3, r3, #2
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d1ee      	bne.n	800c8b8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c8da:	7dfb      	ldrb	r3, [r7, #23]
 800c8dc:	2b01      	cmp	r3, #1
 800c8de:	d105      	bne.n	800c8ec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c8e0:	4b3b      	ldr	r3, [pc, #236]	; (800c9d0 <HAL_RCC_OscConfig+0x4ac>)
 800c8e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8e4:	4a3a      	ldr	r2, [pc, #232]	; (800c9d0 <HAL_RCC_OscConfig+0x4ac>)
 800c8e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c8ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	699b      	ldr	r3, [r3, #24]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	f000 80ad 	beq.w	800ca50 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c8f6:	4b36      	ldr	r3, [pc, #216]	; (800c9d0 <HAL_RCC_OscConfig+0x4ac>)
 800c8f8:	689b      	ldr	r3, [r3, #8]
 800c8fa:	f003 030c 	and.w	r3, r3, #12
 800c8fe:	2b08      	cmp	r3, #8
 800c900:	d060      	beq.n	800c9c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	699b      	ldr	r3, [r3, #24]
 800c906:	2b02      	cmp	r3, #2
 800c908:	d145      	bne.n	800c996 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c90a:	4b33      	ldr	r3, [pc, #204]	; (800c9d8 <HAL_RCC_OscConfig+0x4b4>)
 800c90c:	2200      	movs	r2, #0
 800c90e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c910:	f7fa fb14 	bl	8006f3c <HAL_GetTick>
 800c914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c916:	e008      	b.n	800c92a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c918:	f7fa fb10 	bl	8006f3c <HAL_GetTick>
 800c91c:	4602      	mov	r2, r0
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	1ad3      	subs	r3, r2, r3
 800c922:	2b02      	cmp	r3, #2
 800c924:	d901      	bls.n	800c92a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800c926:	2303      	movs	r3, #3
 800c928:	e093      	b.n	800ca52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c92a:	4b29      	ldr	r3, [pc, #164]	; (800c9d0 <HAL_RCC_OscConfig+0x4ac>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c932:	2b00      	cmp	r3, #0
 800c934:	d1f0      	bne.n	800c918 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	69da      	ldr	r2, [r3, #28]
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6a1b      	ldr	r3, [r3, #32]
 800c93e:	431a      	orrs	r2, r3
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c944:	019b      	lsls	r3, r3, #6
 800c946:	431a      	orrs	r2, r3
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c94c:	085b      	lsrs	r3, r3, #1
 800c94e:	3b01      	subs	r3, #1
 800c950:	041b      	lsls	r3, r3, #16
 800c952:	431a      	orrs	r2, r3
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c958:	061b      	lsls	r3, r3, #24
 800c95a:	431a      	orrs	r2, r3
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c960:	071b      	lsls	r3, r3, #28
 800c962:	491b      	ldr	r1, [pc, #108]	; (800c9d0 <HAL_RCC_OscConfig+0x4ac>)
 800c964:	4313      	orrs	r3, r2
 800c966:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c968:	4b1b      	ldr	r3, [pc, #108]	; (800c9d8 <HAL_RCC_OscConfig+0x4b4>)
 800c96a:	2201      	movs	r2, #1
 800c96c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c96e:	f7fa fae5 	bl	8006f3c <HAL_GetTick>
 800c972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c974:	e008      	b.n	800c988 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c976:	f7fa fae1 	bl	8006f3c <HAL_GetTick>
 800c97a:	4602      	mov	r2, r0
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	1ad3      	subs	r3, r2, r3
 800c980:	2b02      	cmp	r3, #2
 800c982:	d901      	bls.n	800c988 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800c984:	2303      	movs	r3, #3
 800c986:	e064      	b.n	800ca52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c988:	4b11      	ldr	r3, [pc, #68]	; (800c9d0 <HAL_RCC_OscConfig+0x4ac>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c990:	2b00      	cmp	r3, #0
 800c992:	d0f0      	beq.n	800c976 <HAL_RCC_OscConfig+0x452>
 800c994:	e05c      	b.n	800ca50 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c996:	4b10      	ldr	r3, [pc, #64]	; (800c9d8 <HAL_RCC_OscConfig+0x4b4>)
 800c998:	2200      	movs	r2, #0
 800c99a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c99c:	f7fa face 	bl	8006f3c <HAL_GetTick>
 800c9a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c9a2:	e008      	b.n	800c9b6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c9a4:	f7fa faca 	bl	8006f3c <HAL_GetTick>
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	693b      	ldr	r3, [r7, #16]
 800c9ac:	1ad3      	subs	r3, r2, r3
 800c9ae:	2b02      	cmp	r3, #2
 800c9b0:	d901      	bls.n	800c9b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800c9b2:	2303      	movs	r3, #3
 800c9b4:	e04d      	b.n	800ca52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c9b6:	4b06      	ldr	r3, [pc, #24]	; (800c9d0 <HAL_RCC_OscConfig+0x4ac>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d1f0      	bne.n	800c9a4 <HAL_RCC_OscConfig+0x480>
 800c9c2:	e045      	b.n	800ca50 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	699b      	ldr	r3, [r3, #24]
 800c9c8:	2b01      	cmp	r3, #1
 800c9ca:	d107      	bne.n	800c9dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	e040      	b.n	800ca52 <HAL_RCC_OscConfig+0x52e>
 800c9d0:	40023800 	.word	0x40023800
 800c9d4:	40007000 	.word	0x40007000
 800c9d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c9dc:	4b1f      	ldr	r3, [pc, #124]	; (800ca5c <HAL_RCC_OscConfig+0x538>)
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	699b      	ldr	r3, [r3, #24]
 800c9e6:	2b01      	cmp	r3, #1
 800c9e8:	d030      	beq.n	800ca4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	d129      	bne.n	800ca4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ca02:	429a      	cmp	r2, r3
 800ca04:	d122      	bne.n	800ca4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ca06:	68fa      	ldr	r2, [r7, #12]
 800ca08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ca0c:	4013      	ands	r3, r2
 800ca0e:	687a      	ldr	r2, [r7, #4]
 800ca10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ca12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ca14:	4293      	cmp	r3, r2
 800ca16:	d119      	bne.n	800ca4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca22:	085b      	lsrs	r3, r3, #1
 800ca24:	3b01      	subs	r3, #1
 800ca26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ca28:	429a      	cmp	r2, r3
 800ca2a:	d10f      	bne.n	800ca4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d107      	bne.n	800ca4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca46:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	d001      	beq.n	800ca50 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	e000      	b.n	800ca52 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800ca50:	2300      	movs	r3, #0
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	3718      	adds	r7, #24
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd80      	pop	{r7, pc}
 800ca5a:	bf00      	nop
 800ca5c:	40023800 	.word	0x40023800

0800ca60 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b084      	sub	sp, #16
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ca68:	2301      	movs	r3, #1
 800ca6a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d101      	bne.n	800ca76 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800ca72:	2301      	movs	r3, #1
 800ca74:	e066      	b.n	800cb44 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	7f5b      	ldrb	r3, [r3, #29]
 800ca7a:	b2db      	uxtb	r3, r3
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d105      	bne.n	800ca8c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2200      	movs	r2, #0
 800ca84:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f7f9 ffb6 	bl	80069f8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2202      	movs	r2, #2
 800ca90:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	22ca      	movs	r2, #202	; 0xca
 800ca98:	625a      	str	r2, [r3, #36]	; 0x24
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	2253      	movs	r2, #83	; 0x53
 800caa0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800caa2:	6878      	ldr	r0, [r7, #4]
 800caa4:	f000 fa45 	bl	800cf32 <RTC_EnterInitMode>
 800caa8:	4603      	mov	r3, r0
 800caaa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800caac:	7bfb      	ldrb	r3, [r7, #15]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d12c      	bne.n	800cb0c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	689b      	ldr	r3, [r3, #8]
 800cab8:	687a      	ldr	r2, [r7, #4]
 800caba:	6812      	ldr	r2, [r2, #0]
 800cabc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cac0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cac4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	6899      	ldr	r1, [r3, #8]
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	685a      	ldr	r2, [r3, #4]
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	691b      	ldr	r3, [r3, #16]
 800cad4:	431a      	orrs	r2, r3
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	695b      	ldr	r3, [r3, #20]
 800cada:	431a      	orrs	r2, r3
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	430a      	orrs	r2, r1
 800cae2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	687a      	ldr	r2, [r7, #4]
 800caea:	68d2      	ldr	r2, [r2, #12]
 800caec:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	6919      	ldr	r1, [r3, #16]
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	689b      	ldr	r3, [r3, #8]
 800caf8:	041a      	lsls	r2, r3, #16
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	430a      	orrs	r2, r1
 800cb00:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f000 fa4c 	bl	800cfa0 <RTC_ExitInitMode>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800cb0c:	7bfb      	ldrb	r3, [r7, #15]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d113      	bne.n	800cb3a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800cb20:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	699a      	ldr	r2, [r3, #24]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	430a      	orrs	r2, r1
 800cb32:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2201      	movs	r2, #1
 800cb38:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	22ff      	movs	r2, #255	; 0xff
 800cb40:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800cb42:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3710      	adds	r7, #16
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}

0800cb4c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800cb4c:	b590      	push	{r4, r7, lr}
 800cb4e:	b087      	sub	sp, #28
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	60f8      	str	r0, [r7, #12]
 800cb54:	60b9      	str	r1, [r7, #8]
 800cb56:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	7f1b      	ldrb	r3, [r3, #28]
 800cb60:	2b01      	cmp	r3, #1
 800cb62:	d101      	bne.n	800cb68 <HAL_RTC_SetTime+0x1c>
 800cb64:	2302      	movs	r3, #2
 800cb66:	e087      	b.n	800cc78 <HAL_RTC_SetTime+0x12c>
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	2202      	movs	r2, #2
 800cb72:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d126      	bne.n	800cbc8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	689b      	ldr	r3, [r3, #8]
 800cb80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d102      	bne.n	800cb8e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	781b      	ldrb	r3, [r3, #0]
 800cb92:	4618      	mov	r0, r3
 800cb94:	f000 fa29 	bl	800cfea <RTC_ByteToBcd2>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800cb9c:	68bb      	ldr	r3, [r7, #8]
 800cb9e:	785b      	ldrb	r3, [r3, #1]
 800cba0:	4618      	mov	r0, r3
 800cba2:	f000 fa22 	bl	800cfea <RTC_ByteToBcd2>
 800cba6:	4603      	mov	r3, r0
 800cba8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800cbaa:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	789b      	ldrb	r3, [r3, #2]
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f000 fa1a 	bl	800cfea <RTC_ByteToBcd2>
 800cbb6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800cbb8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800cbbc:	68bb      	ldr	r3, [r7, #8]
 800cbbe:	78db      	ldrb	r3, [r3, #3]
 800cbc0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800cbc2:	4313      	orrs	r3, r2
 800cbc4:	617b      	str	r3, [r7, #20]
 800cbc6:	e018      	b.n	800cbfa <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	689b      	ldr	r3, [r3, #8]
 800cbce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d102      	bne.n	800cbdc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800cbd6:	68bb      	ldr	r3, [r7, #8]
 800cbd8:	2200      	movs	r2, #0
 800cbda:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800cbe2:	68bb      	ldr	r3, [r7, #8]
 800cbe4:	785b      	ldrb	r3, [r3, #1]
 800cbe6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800cbe8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800cbea:	68ba      	ldr	r2, [r7, #8]
 800cbec:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800cbee:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	78db      	ldrb	r3, [r3, #3]
 800cbf4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800cbf6:	4313      	orrs	r3, r2
 800cbf8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	22ca      	movs	r2, #202	; 0xca
 800cc00:	625a      	str	r2, [r3, #36]	; 0x24
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	2253      	movs	r2, #83	; 0x53
 800cc08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800cc0a:	68f8      	ldr	r0, [r7, #12]
 800cc0c:	f000 f991 	bl	800cf32 <RTC_EnterInitMode>
 800cc10:	4603      	mov	r3, r0
 800cc12:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800cc14:	7cfb      	ldrb	r3, [r7, #19]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d120      	bne.n	800cc5c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	681a      	ldr	r2, [r3, #0]
 800cc1e:	697b      	ldr	r3, [r7, #20]
 800cc20:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800cc24:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800cc28:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	689a      	ldr	r2, [r3, #8]
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800cc38:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	6899      	ldr	r1, [r3, #8]
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	68da      	ldr	r2, [r3, #12]
 800cc44:	68bb      	ldr	r3, [r7, #8]
 800cc46:	691b      	ldr	r3, [r3, #16]
 800cc48:	431a      	orrs	r2, r3
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	430a      	orrs	r2, r1
 800cc50:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800cc52:	68f8      	ldr	r0, [r7, #12]
 800cc54:	f000 f9a4 	bl	800cfa0 <RTC_ExitInitMode>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800cc5c:	7cfb      	ldrb	r3, [r7, #19]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d102      	bne.n	800cc68 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2201      	movs	r2, #1
 800cc66:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	22ff      	movs	r2, #255	; 0xff
 800cc6e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	2200      	movs	r2, #0
 800cc74:	771a      	strb	r2, [r3, #28]

  return status;
 800cc76:	7cfb      	ldrb	r3, [r7, #19]
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	371c      	adds	r7, #28
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd90      	pop	{r4, r7, pc}

0800cc80 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b086      	sub	sp, #24
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	60f8      	str	r0, [r7, #12]
 800cc88:	60b9      	str	r1, [r7, #8]
 800cc8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	691b      	ldr	r3, [r3, #16]
 800cca0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800cca4:	68bb      	ldr	r3, [r7, #8]
 800cca6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800ccb2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ccb6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	0c1b      	lsrs	r3, r3, #16
 800ccbc:	b2db      	uxtb	r3, r3
 800ccbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ccc2:	b2da      	uxtb	r2, r3
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	0a1b      	lsrs	r3, r3, #8
 800cccc:	b2db      	uxtb	r3, r3
 800ccce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccd2:	b2da      	uxtb	r2, r3
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	b2db      	uxtb	r3, r3
 800ccdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cce0:	b2da      	uxtb	r2, r3
 800cce2:	68bb      	ldr	r3, [r7, #8]
 800cce4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800cce6:	697b      	ldr	r3, [r7, #20]
 800cce8:	0d9b      	lsrs	r3, r3, #22
 800ccea:	b2db      	uxtb	r3, r3
 800ccec:	f003 0301 	and.w	r3, r3, #1
 800ccf0:	b2da      	uxtb	r2, r3
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d11a      	bne.n	800cd32 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	781b      	ldrb	r3, [r3, #0]
 800cd00:	4618      	mov	r0, r3
 800cd02:	f000 f98f 	bl	800d024 <RTC_Bcd2ToByte>
 800cd06:	4603      	mov	r3, r0
 800cd08:	461a      	mov	r2, r3
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	785b      	ldrb	r3, [r3, #1]
 800cd12:	4618      	mov	r0, r3
 800cd14:	f000 f986 	bl	800d024 <RTC_Bcd2ToByte>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	461a      	mov	r2, r3
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	789b      	ldrb	r3, [r3, #2]
 800cd24:	4618      	mov	r0, r3
 800cd26:	f000 f97d 	bl	800d024 <RTC_Bcd2ToByte>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	461a      	mov	r2, r3
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800cd32:	2300      	movs	r3, #0
}
 800cd34:	4618      	mov	r0, r3
 800cd36:	3718      	adds	r7, #24
 800cd38:	46bd      	mov	sp, r7
 800cd3a:	bd80      	pop	{r7, pc}

0800cd3c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cd3c:	b590      	push	{r4, r7, lr}
 800cd3e:	b087      	sub	sp, #28
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	60f8      	str	r0, [r7, #12]
 800cd44:	60b9      	str	r1, [r7, #8]
 800cd46:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	7f1b      	ldrb	r3, [r3, #28]
 800cd50:	2b01      	cmp	r3, #1
 800cd52:	d101      	bne.n	800cd58 <HAL_RTC_SetDate+0x1c>
 800cd54:	2302      	movs	r3, #2
 800cd56:	e071      	b.n	800ce3c <HAL_RTC_SetDate+0x100>
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	2201      	movs	r2, #1
 800cd5c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	2202      	movs	r2, #2
 800cd62:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d10e      	bne.n	800cd88 <HAL_RTC_SetDate+0x4c>
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	785b      	ldrb	r3, [r3, #1]
 800cd6e:	f003 0310 	and.w	r3, r3, #16
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d008      	beq.n	800cd88 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800cd76:	68bb      	ldr	r3, [r7, #8]
 800cd78:	785b      	ldrb	r3, [r3, #1]
 800cd7a:	f023 0310 	bic.w	r3, r3, #16
 800cd7e:	b2db      	uxtb	r3, r3
 800cd80:	330a      	adds	r3, #10
 800cd82:	b2da      	uxtb	r2, r3
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d11c      	bne.n	800cdc8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	78db      	ldrb	r3, [r3, #3]
 800cd92:	4618      	mov	r0, r3
 800cd94:	f000 f929 	bl	800cfea <RTC_ByteToBcd2>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800cd9c:	68bb      	ldr	r3, [r7, #8]
 800cd9e:	785b      	ldrb	r3, [r3, #1]
 800cda0:	4618      	mov	r0, r3
 800cda2:	f000 f922 	bl	800cfea <RTC_ByteToBcd2>
 800cda6:	4603      	mov	r3, r0
 800cda8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800cdaa:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800cdac:	68bb      	ldr	r3, [r7, #8]
 800cdae:	789b      	ldrb	r3, [r3, #2]
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	f000 f91a 	bl	800cfea <RTC_ByteToBcd2>
 800cdb6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800cdb8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	781b      	ldrb	r3, [r3, #0]
 800cdc0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800cdc2:	4313      	orrs	r3, r2
 800cdc4:	617b      	str	r3, [r7, #20]
 800cdc6:	e00e      	b.n	800cde6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	78db      	ldrb	r3, [r3, #3]
 800cdcc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	785b      	ldrb	r3, [r3, #1]
 800cdd2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800cdd4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800cdd6:	68ba      	ldr	r2, [r7, #8]
 800cdd8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800cdda:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	781b      	ldrb	r3, [r3, #0]
 800cde0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800cde2:	4313      	orrs	r3, r2
 800cde4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	22ca      	movs	r2, #202	; 0xca
 800cdec:	625a      	str	r2, [r3, #36]	; 0x24
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	2253      	movs	r2, #83	; 0x53
 800cdf4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800cdf6:	68f8      	ldr	r0, [r7, #12]
 800cdf8:	f000 f89b 	bl	800cf32 <RTC_EnterInitMode>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800ce00:	7cfb      	ldrb	r3, [r7, #19]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d10c      	bne.n	800ce20 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	681a      	ldr	r2, [r3, #0]
 800ce0a:	697b      	ldr	r3, [r7, #20]
 800ce0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ce10:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ce14:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ce16:	68f8      	ldr	r0, [r7, #12]
 800ce18:	f000 f8c2 	bl	800cfa0 <RTC_ExitInitMode>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800ce20:	7cfb      	ldrb	r3, [r7, #19]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d102      	bne.n	800ce2c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	2201      	movs	r2, #1
 800ce2a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	22ff      	movs	r2, #255	; 0xff
 800ce32:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	2200      	movs	r2, #0
 800ce38:	771a      	strb	r2, [r3, #28]

  return status;
 800ce3a:	7cfb      	ldrb	r3, [r7, #19]
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	371c      	adds	r7, #28
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd90      	pop	{r4, r7, pc}

0800ce44 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b086      	sub	sp, #24
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	60f8      	str	r0, [r7, #12]
 800ce4c:	60b9      	str	r1, [r7, #8]
 800ce4e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800ce50:	2300      	movs	r3, #0
 800ce52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	685b      	ldr	r3, [r3, #4]
 800ce5a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ce5e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ce62:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	0c1b      	lsrs	r3, r3, #16
 800ce68:	b2da      	uxtb	r2, r3
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	0a1b      	lsrs	r3, r3, #8
 800ce72:	b2db      	uxtb	r3, r3
 800ce74:	f003 031f 	and.w	r3, r3, #31
 800ce78:	b2da      	uxtb	r2, r3
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	b2db      	uxtb	r3, r3
 800ce82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce86:	b2da      	uxtb	r2, r3
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	0b5b      	lsrs	r3, r3, #13
 800ce90:	b2db      	uxtb	r3, r3
 800ce92:	f003 0307 	and.w	r3, r3, #7
 800ce96:	b2da      	uxtb	r2, r3
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d11a      	bne.n	800ced8 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	78db      	ldrb	r3, [r3, #3]
 800cea6:	4618      	mov	r0, r3
 800cea8:	f000 f8bc 	bl	800d024 <RTC_Bcd2ToByte>
 800ceac:	4603      	mov	r3, r0
 800ceae:	461a      	mov	r2, r3
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	785b      	ldrb	r3, [r3, #1]
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f000 f8b3 	bl	800d024 <RTC_Bcd2ToByte>
 800cebe:	4603      	mov	r3, r0
 800cec0:	461a      	mov	r2, r3
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	789b      	ldrb	r3, [r3, #2]
 800ceca:	4618      	mov	r0, r3
 800cecc:	f000 f8aa 	bl	800d024 <RTC_Bcd2ToByte>
 800ced0:	4603      	mov	r3, r0
 800ced2:	461a      	mov	r2, r3
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800ced8:	2300      	movs	r3, #0
}
 800ceda:	4618      	mov	r0, r3
 800cedc:	3718      	adds	r7, #24
 800cede:	46bd      	mov	sp, r7
 800cee0:	bd80      	pop	{r7, pc}

0800cee2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800cee2:	b580      	push	{r7, lr}
 800cee4:	b084      	sub	sp, #16
 800cee6:	af00      	add	r7, sp, #0
 800cee8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ceea:	2300      	movs	r3, #0
 800ceec:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	68da      	ldr	r2, [r3, #12]
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800cefc:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cefe:	f7fa f81d 	bl	8006f3c <HAL_GetTick>
 800cf02:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cf04:	e009      	b.n	800cf1a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cf06:	f7fa f819 	bl	8006f3c <HAL_GetTick>
 800cf0a:	4602      	mov	r2, r0
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	1ad3      	subs	r3, r2, r3
 800cf10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cf14:	d901      	bls.n	800cf1a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800cf16:	2303      	movs	r3, #3
 800cf18:	e007      	b.n	800cf2a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	68db      	ldr	r3, [r3, #12]
 800cf20:	f003 0320 	and.w	r3, r3, #32
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d0ee      	beq.n	800cf06 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800cf28:	2300      	movs	r3, #0
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3710      	adds	r7, #16
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}

0800cf32 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800cf32:	b580      	push	{r7, lr}
 800cf34:	b084      	sub	sp, #16
 800cf36:	af00      	add	r7, sp, #0
 800cf38:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	68db      	ldr	r3, [r3, #12]
 800cf48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d122      	bne.n	800cf96 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	68da      	ldr	r2, [r3, #12]
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cf5e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cf60:	f7f9 ffec 	bl	8006f3c <HAL_GetTick>
 800cf64:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800cf66:	e00c      	b.n	800cf82 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cf68:	f7f9 ffe8 	bl	8006f3c <HAL_GetTick>
 800cf6c:	4602      	mov	r2, r0
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	1ad3      	subs	r3, r2, r3
 800cf72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cf76:	d904      	bls.n	800cf82 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	2204      	movs	r2, #4
 800cf7c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800cf7e:	2301      	movs	r3, #1
 800cf80:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	68db      	ldr	r3, [r3, #12]
 800cf88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d102      	bne.n	800cf96 <RTC_EnterInitMode+0x64>
 800cf90:	7bfb      	ldrb	r3, [r7, #15]
 800cf92:	2b01      	cmp	r3, #1
 800cf94:	d1e8      	bne.n	800cf68 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800cf96:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	3710      	adds	r7, #16
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}

0800cfa0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b084      	sub	sp, #16
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	68da      	ldr	r2, [r3, #12]
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cfba:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	689b      	ldr	r3, [r3, #8]
 800cfc2:	f003 0320 	and.w	r3, r3, #32
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d10a      	bne.n	800cfe0 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cfca:	6878      	ldr	r0, [r7, #4]
 800cfcc:	f7ff ff89 	bl	800cee2 <HAL_RTC_WaitForSynchro>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d004      	beq.n	800cfe0 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2204      	movs	r2, #4
 800cfda:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800cfdc:	2301      	movs	r3, #1
 800cfde:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800cfe0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfe2:	4618      	mov	r0, r3
 800cfe4:	3710      	adds	r7, #16
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}

0800cfea <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800cfea:	b480      	push	{r7}
 800cfec:	b085      	sub	sp, #20
 800cfee:	af00      	add	r7, sp, #0
 800cff0:	4603      	mov	r3, r0
 800cff2:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800cff4:	2300      	movs	r3, #0
 800cff6:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800cff8:	e005      	b.n	800d006 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800cffa:	7bfb      	ldrb	r3, [r7, #15]
 800cffc:	3301      	adds	r3, #1
 800cffe:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800d000:	79fb      	ldrb	r3, [r7, #7]
 800d002:	3b0a      	subs	r3, #10
 800d004:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800d006:	79fb      	ldrb	r3, [r7, #7]
 800d008:	2b09      	cmp	r3, #9
 800d00a:	d8f6      	bhi.n	800cffa <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800d00c:	7bfb      	ldrb	r3, [r7, #15]
 800d00e:	011b      	lsls	r3, r3, #4
 800d010:	b2da      	uxtb	r2, r3
 800d012:	79fb      	ldrb	r3, [r7, #7]
 800d014:	4313      	orrs	r3, r2
 800d016:	b2db      	uxtb	r3, r3
}
 800d018:	4618      	mov	r0, r3
 800d01a:	3714      	adds	r7, #20
 800d01c:	46bd      	mov	sp, r7
 800d01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d022:	4770      	bx	lr

0800d024 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800d024:	b480      	push	{r7}
 800d026:	b085      	sub	sp, #20
 800d028:	af00      	add	r7, sp, #0
 800d02a:	4603      	mov	r3, r0
 800d02c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800d02e:	2300      	movs	r3, #0
 800d030:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800d032:	79fb      	ldrb	r3, [r7, #7]
 800d034:	091b      	lsrs	r3, r3, #4
 800d036:	b2db      	uxtb	r3, r3
 800d038:	461a      	mov	r2, r3
 800d03a:	0092      	lsls	r2, r2, #2
 800d03c:	4413      	add	r3, r2
 800d03e:	005b      	lsls	r3, r3, #1
 800d040:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800d042:	79fb      	ldrb	r3, [r7, #7]
 800d044:	f003 030f 	and.w	r3, r3, #15
 800d048:	b2da      	uxtb	r2, r3
 800d04a:	7bfb      	ldrb	r3, [r7, #15]
 800d04c:	4413      	add	r3, r2
 800d04e:	b2db      	uxtb	r3, r3
}
 800d050:	4618      	mov	r0, r3
 800d052:	3714      	adds	r7, #20
 800d054:	46bd      	mov	sp, r7
 800d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05a:	4770      	bx	lr

0800d05c <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800d05c:	b480      	push	{r7}
 800d05e:	b087      	sub	sp, #28
 800d060:	af00      	add	r7, sp, #0
 800d062:	60f8      	str	r0, [r7, #12]
 800d064:	60b9      	str	r1, [r7, #8]
 800d066:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800d068:	2300      	movs	r3, #0
 800d06a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	3350      	adds	r3, #80	; 0x50
 800d072:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	009b      	lsls	r3, r3, #2
 800d078:	697a      	ldr	r2, [r7, #20]
 800d07a:	4413      	add	r3, r2
 800d07c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	687a      	ldr	r2, [r7, #4]
 800d082:	601a      	str	r2, [r3, #0]
}
 800d084:	bf00      	nop
 800d086:	371c      	adds	r7, #28
 800d088:	46bd      	mov	sp, r7
 800d08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08e:	4770      	bx	lr

0800d090 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800d090:	b480      	push	{r7}
 800d092:	b085      	sub	sp, #20
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
 800d098:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800d09a:	2300      	movs	r3, #0
 800d09c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	3350      	adds	r3, #80	; 0x50
 800d0a4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	009b      	lsls	r3, r3, #2
 800d0aa:	68fa      	ldr	r2, [r7, #12]
 800d0ac:	4413      	add	r3, r2
 800d0ae:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	681b      	ldr	r3, [r3, #0]
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3714      	adds	r7, #20
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0be:	4770      	bx	lr

0800d0c0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b082      	sub	sp, #8
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d101      	bne.n	800d0d2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	e022      	b.n	800d118 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d0d8:	b2db      	uxtb	r3, r3
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d105      	bne.n	800d0ea <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f7f9 fcb1 	bl	8006a4c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2203      	movs	r2, #3
 800d0ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f000 f814 	bl	800d120 <HAL_SD_InitCard>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d001      	beq.n	800d102 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d0fe:	2301      	movs	r3, #1
 800d100:	e00a      	b.n	800d118 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2200      	movs	r2, #0
 800d106:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2200      	movs	r2, #0
 800d10c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2201      	movs	r2, #1
 800d112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d116:	2300      	movs	r3, #0
}
 800d118:	4618      	mov	r0, r3
 800d11a:	3708      	adds	r7, #8
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}

0800d120 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d120:	b5b0      	push	{r4, r5, r7, lr}
 800d122:	b08e      	sub	sp, #56	; 0x38
 800d124:	af04      	add	r7, sp, #16
 800d126:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800d128:	2300      	movs	r3, #0
 800d12a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800d12c:	2300      	movs	r3, #0
 800d12e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800d130:	2300      	movs	r3, #0
 800d132:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800d134:	2300      	movs	r3, #0
 800d136:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800d138:	2300      	movs	r3, #0
 800d13a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800d13c:	2376      	movs	r3, #118	; 0x76
 800d13e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681d      	ldr	r5, [r3, #0]
 800d144:	466c      	mov	r4, sp
 800d146:	f107 0314 	add.w	r3, r7, #20
 800d14a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d14e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d152:	f107 0308 	add.w	r3, r7, #8
 800d156:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d158:	4628      	mov	r0, r5
 800d15a:	f002 f951 	bl	800f400 <SDIO_Init>
 800d15e:	4603      	mov	r3, r0
 800d160:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800d164:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d001      	beq.n	800d170 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800d16c:	2301      	movs	r3, #1
 800d16e:	e04f      	b.n	800d210 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800d170:	4b29      	ldr	r3, [pc, #164]	; (800d218 <HAL_SD_InitCard+0xf8>)
 800d172:	2200      	movs	r2, #0
 800d174:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	4618      	mov	r0, r3
 800d17c:	f002 f989 	bl	800f492 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800d180:	4b25      	ldr	r3, [pc, #148]	; (800d218 <HAL_SD_InitCard+0xf8>)
 800d182:	2201      	movs	r2, #1
 800d184:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800d186:	2002      	movs	r0, #2
 800d188:	f7f9 fee4 	bl	8006f54 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f001 fb53 	bl	800e838 <SD_PowerON>
 800d192:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d194:	6a3b      	ldr	r3, [r7, #32]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d00b      	beq.n	800d1b2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	2201      	movs	r2, #1
 800d19e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1a6:	6a3b      	ldr	r3, [r7, #32]
 800d1a8:	431a      	orrs	r2, r3
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d1ae:	2301      	movs	r3, #1
 800d1b0:	e02e      	b.n	800d210 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f001 fa72 	bl	800e69c <SD_InitCard>
 800d1b8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d1ba:	6a3b      	ldr	r3, [r7, #32]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d00b      	beq.n	800d1d8 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2201      	movs	r2, #1
 800d1c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1cc:	6a3b      	ldr	r3, [r7, #32]
 800d1ce:	431a      	orrs	r2, r3
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	e01b      	b.n	800d210 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f002 f9e8 	bl	800f5b6 <SDMMC_CmdBlockLength>
 800d1e6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d1e8:	6a3b      	ldr	r3, [r7, #32]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d00f      	beq.n	800d20e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	4a0a      	ldr	r2, [pc, #40]	; (800d21c <HAL_SD_InitCard+0xfc>)
 800d1f4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1fa:	6a3b      	ldr	r3, [r7, #32]
 800d1fc:	431a      	orrs	r2, r3
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	2201      	movs	r2, #1
 800d206:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d20a:	2301      	movs	r3, #1
 800d20c:	e000      	b.n	800d210 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800d20e:	2300      	movs	r3, #0
}
 800d210:	4618      	mov	r0, r3
 800d212:	3728      	adds	r7, #40	; 0x28
 800d214:	46bd      	mov	sp, r7
 800d216:	bdb0      	pop	{r4, r5, r7, pc}
 800d218:	422580a0 	.word	0x422580a0
 800d21c:	004005ff 	.word	0x004005ff

0800d220 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b092      	sub	sp, #72	; 0x48
 800d224:	af00      	add	r7, sp, #0
 800d226:	60f8      	str	r0, [r7, #12]
 800d228:	60b9      	str	r1, [r7, #8]
 800d22a:	607a      	str	r2, [r7, #4]
 800d22c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d22e:	f7f9 fe85 	bl	8006f3c <HAL_GetTick>
 800d232:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800d238:	68bb      	ldr	r3, [r7, #8]
 800d23a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d107      	bne.n	800d252 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d246:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d24e:	2301      	movs	r3, #1
 800d250:	e1bd      	b.n	800d5ce <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d258:	b2db      	uxtb	r3, r3
 800d25a:	2b01      	cmp	r3, #1
 800d25c:	f040 81b0 	bne.w	800d5c0 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	2200      	movs	r2, #0
 800d264:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d266:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	441a      	add	r2, r3
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d270:	429a      	cmp	r2, r3
 800d272:	d907      	bls.n	800d284 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d278:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d280:	2301      	movs	r3, #1
 800d282:	e1a4      	b.n	800d5ce <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	2203      	movs	r2, #3
 800d288:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	2200      	movs	r2, #0
 800d292:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d298:	2b01      	cmp	r3, #1
 800d29a:	d002      	beq.n	800d2a2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800d29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d29e:	025b      	lsls	r3, r3, #9
 800d2a0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d2a2:	f04f 33ff 	mov.w	r3, #4294967295
 800d2a6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	025b      	lsls	r3, r3, #9
 800d2ac:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d2ae:	2390      	movs	r3, #144	; 0x90
 800d2b0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d2b2:	2302      	movs	r3, #2
 800d2b4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	f107 0214 	add.w	r2, r7, #20
 800d2c6:	4611      	mov	r1, r2
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f002 f948 	bl	800f55e <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	2b01      	cmp	r3, #1
 800d2d2:	d90a      	bls.n	800d2ea <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	2202      	movs	r2, #2
 800d2d8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f002 f9ac 	bl	800f63e <SDMMC_CmdReadMultiBlock>
 800d2e6:	6478      	str	r0, [r7, #68]	; 0x44
 800d2e8:	e009      	b.n	800d2fe <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	2201      	movs	r2, #1
 800d2ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f002 f97f 	bl	800f5fa <SDMMC_CmdReadSingleBlock>
 800d2fc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d2fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d300:	2b00      	cmp	r3, #0
 800d302:	d012      	beq.n	800d32a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	4a7a      	ldr	r2, [pc, #488]	; (800d4f4 <HAL_SD_ReadBlocks+0x2d4>)
 800d30a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d312:	431a      	orrs	r2, r3
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	2201      	movs	r2, #1
 800d31c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	2200      	movs	r2, #0
 800d324:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d326:	2301      	movs	r3, #1
 800d328:	e151      	b.n	800d5ce <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800d32a:	69bb      	ldr	r3, [r7, #24]
 800d32c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800d32e:	e061      	b.n	800d3f4 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d336:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d03c      	beq.n	800d3b8 <HAL_SD_ReadBlocks+0x198>
 800d33e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d340:	2b00      	cmp	r3, #0
 800d342:	d039      	beq.n	800d3b8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800d344:	2300      	movs	r3, #0
 800d346:	643b      	str	r3, [r7, #64]	; 0x40
 800d348:	e033      	b.n	800d3b2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	4618      	mov	r0, r3
 800d350:	f002 f881 	bl	800f456 <SDIO_ReadFIFO>
 800d354:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800d356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d358:	b2da      	uxtb	r2, r3
 800d35a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d35c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d35e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d360:	3301      	adds	r3, #1
 800d362:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d366:	3b01      	subs	r3, #1
 800d368:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800d36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d36c:	0a1b      	lsrs	r3, r3, #8
 800d36e:	b2da      	uxtb	r2, r3
 800d370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d372:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d376:	3301      	adds	r3, #1
 800d378:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d37a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d37c:	3b01      	subs	r3, #1
 800d37e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800d380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d382:	0c1b      	lsrs	r3, r3, #16
 800d384:	b2da      	uxtb	r2, r3
 800d386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d388:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d38a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d38c:	3301      	adds	r3, #1
 800d38e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d392:	3b01      	subs	r3, #1
 800d394:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800d396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d398:	0e1b      	lsrs	r3, r3, #24
 800d39a:	b2da      	uxtb	r2, r3
 800d39c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d39e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d3a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3a2:	3301      	adds	r3, #1
 800d3a4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d3a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3a8:	3b01      	subs	r3, #1
 800d3aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800d3ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3ae:	3301      	adds	r3, #1
 800d3b0:	643b      	str	r3, [r7, #64]	; 0x40
 800d3b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3b4:	2b07      	cmp	r3, #7
 800d3b6:	d9c8      	bls.n	800d34a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d3b8:	f7f9 fdc0 	bl	8006f3c <HAL_GetTick>
 800d3bc:	4602      	mov	r2, r0
 800d3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c0:	1ad3      	subs	r3, r2, r3
 800d3c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d3c4:	429a      	cmp	r2, r3
 800d3c6:	d902      	bls.n	800d3ce <HAL_SD_ReadBlocks+0x1ae>
 800d3c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d112      	bne.n	800d3f4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	4a48      	ldr	r2, [pc, #288]	; (800d4f4 <HAL_SD_ReadBlocks+0x2d4>)
 800d3d4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3da:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	2201      	movs	r2, #1
 800d3e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800d3f0:	2303      	movs	r3, #3
 800d3f2:	e0ec      	b.n	800d5ce <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3fa:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d096      	beq.n	800d330 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d022      	beq.n	800d456 <HAL_SD_ReadBlocks+0x236>
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	2b01      	cmp	r3, #1
 800d414:	d91f      	bls.n	800d456 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d41a:	2b03      	cmp	r3, #3
 800d41c:	d01b      	beq.n	800d456 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	4618      	mov	r0, r3
 800d424:	f002 f972 	bl	800f70c <SDMMC_CmdStopTransfer>
 800d428:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d42a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d012      	beq.n	800d456 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	4a2f      	ldr	r2, [pc, #188]	; (800d4f4 <HAL_SD_ReadBlocks+0x2d4>)
 800d436:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d43c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d43e:	431a      	orrs	r2, r3
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	2201      	movs	r2, #1
 800d448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	2200      	movs	r2, #0
 800d450:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800d452:	2301      	movs	r3, #1
 800d454:	e0bb      	b.n	800d5ce <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d45c:	f003 0308 	and.w	r3, r3, #8
 800d460:	2b00      	cmp	r3, #0
 800d462:	d012      	beq.n	800d48a <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	4a22      	ldr	r2, [pc, #136]	; (800d4f4 <HAL_SD_ReadBlocks+0x2d4>)
 800d46a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d470:	f043 0208 	orr.w	r2, r3, #8
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	2201      	movs	r2, #1
 800d47c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	2200      	movs	r2, #0
 800d484:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d486:	2301      	movs	r3, #1
 800d488:	e0a1      	b.n	800d5ce <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d490:	f003 0302 	and.w	r3, r3, #2
 800d494:	2b00      	cmp	r3, #0
 800d496:	d012      	beq.n	800d4be <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	4a15      	ldr	r2, [pc, #84]	; (800d4f4 <HAL_SD_ReadBlocks+0x2d4>)
 800d49e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4a4:	f043 0202 	orr.w	r2, r3, #2
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	2201      	movs	r2, #1
 800d4b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	e087      	b.n	800d5ce <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4c4:	f003 0320 	and.w	r3, r3, #32
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d064      	beq.n	800d596 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	4a08      	ldr	r2, [pc, #32]	; (800d4f4 <HAL_SD_ReadBlocks+0x2d4>)
 800d4d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4d8:	f043 0220 	orr.w	r2, r3, #32
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	2201      	movs	r2, #1
 800d4e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	e06d      	b.n	800d5ce <HAL_SD_ReadBlocks+0x3ae>
 800d4f2:	bf00      	nop
 800d4f4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f001 ffaa 	bl	800f456 <SDIO_ReadFIFO>
 800d502:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800d504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d506:	b2da      	uxtb	r2, r3
 800d508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d50a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d50c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d50e:	3301      	adds	r3, #1
 800d510:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800d512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d514:	3b01      	subs	r3, #1
 800d516:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800d518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d51a:	0a1b      	lsrs	r3, r3, #8
 800d51c:	b2da      	uxtb	r2, r3
 800d51e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d520:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d524:	3301      	adds	r3, #1
 800d526:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800d528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d52a:	3b01      	subs	r3, #1
 800d52c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800d52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d530:	0c1b      	lsrs	r3, r3, #16
 800d532:	b2da      	uxtb	r2, r3
 800d534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d536:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d53a:	3301      	adds	r3, #1
 800d53c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800d53e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d540:	3b01      	subs	r3, #1
 800d542:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800d544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d546:	0e1b      	lsrs	r3, r3, #24
 800d548:	b2da      	uxtb	r2, r3
 800d54a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d54c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d54e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d550:	3301      	adds	r3, #1
 800d552:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800d554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d556:	3b01      	subs	r3, #1
 800d558:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d55a:	f7f9 fcef 	bl	8006f3c <HAL_GetTick>
 800d55e:	4602      	mov	r2, r0
 800d560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d562:	1ad3      	subs	r3, r2, r3
 800d564:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d566:	429a      	cmp	r2, r3
 800d568:	d902      	bls.n	800d570 <HAL_SD_ReadBlocks+0x350>
 800d56a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d112      	bne.n	800d596 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	4a18      	ldr	r2, [pc, #96]	; (800d5d8 <HAL_SD_ReadBlocks+0x3b8>)
 800d576:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d57c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	2201      	movs	r2, #1
 800d588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	2200      	movs	r2, #0
 800d590:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d592:	2301      	movs	r3, #1
 800d594:	e01b      	b.n	800d5ce <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d59c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d002      	beq.n	800d5aa <HAL_SD_ReadBlocks+0x38a>
 800d5a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d1a6      	bne.n	800d4f8 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	f240 523a 	movw	r2, #1338	; 0x53a
 800d5b2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	2201      	movs	r2, #1
 800d5b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800d5bc:	2300      	movs	r3, #0
 800d5be:	e006      	b.n	800d5ce <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5c4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d5cc:	2301      	movs	r3, #1
  }
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	3748      	adds	r7, #72	; 0x48
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}
 800d5d6:	bf00      	nop
 800d5d8:	004005ff 	.word	0x004005ff

0800d5dc <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b092      	sub	sp, #72	; 0x48
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	60f8      	str	r0, [r7, #12]
 800d5e4:	60b9      	str	r1, [r7, #8]
 800d5e6:	607a      	str	r2, [r7, #4]
 800d5e8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d5ea:	f7f9 fca7 	bl	8006f3c <HAL_GetTick>
 800d5ee:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d107      	bne.n	800d60e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d602:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d60a:	2301      	movs	r3, #1
 800d60c:	e165      	b.n	800d8da <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d614:	b2db      	uxtb	r3, r3
 800d616:	2b01      	cmp	r3, #1
 800d618:	f040 8158 	bne.w	800d8cc <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	2200      	movs	r2, #0
 800d620:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d622:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	441a      	add	r2, r3
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d62c:	429a      	cmp	r2, r3
 800d62e:	d907      	bls.n	800d640 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d634:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d63c:	2301      	movs	r3, #1
 800d63e:	e14c      	b.n	800d8da <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	2203      	movs	r2, #3
 800d644:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	2200      	movs	r2, #0
 800d64e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d654:	2b01      	cmp	r3, #1
 800d656:	d002      	beq.n	800d65e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800d658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d65a:	025b      	lsls	r3, r3, #9
 800d65c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d65e:	f04f 33ff 	mov.w	r3, #4294967295
 800d662:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	025b      	lsls	r3, r3, #9
 800d668:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d66a:	2390      	movs	r3, #144	; 0x90
 800d66c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d66e:	2300      	movs	r3, #0
 800d670:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d672:	2300      	movs	r3, #0
 800d674:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800d676:	2301      	movs	r3, #1
 800d678:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	f107 0218 	add.w	r2, r7, #24
 800d682:	4611      	mov	r1, r2
 800d684:	4618      	mov	r0, r3
 800d686:	f001 ff6a 	bl	800f55e <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	d90a      	bls.n	800d6a6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	2220      	movs	r2, #32
 800d694:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d69c:	4618      	mov	r0, r3
 800d69e:	f002 f812 	bl	800f6c6 <SDMMC_CmdWriteMultiBlock>
 800d6a2:	6478      	str	r0, [r7, #68]	; 0x44
 800d6a4:	e009      	b.n	800d6ba <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	2210      	movs	r2, #16
 800d6aa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	f001 ffe5 	bl	800f682 <SDMMC_CmdWriteSingleBlock>
 800d6b8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d6ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d012      	beq.n	800d6e6 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	4a87      	ldr	r2, [pc, #540]	; (800d8e4 <HAL_SD_WriteBlocks+0x308>)
 800d6c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6ce:	431a      	orrs	r2, r3
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	2201      	movs	r2, #1
 800d6d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	e0f9      	b.n	800d8da <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800d6e6:	69fb      	ldr	r3, [r7, #28]
 800d6e8:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800d6ea:	e065      	b.n	800d7b8 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d040      	beq.n	800d77c <HAL_SD_WriteBlocks+0x1a0>
 800d6fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d03d      	beq.n	800d77c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800d700:	2300      	movs	r3, #0
 800d702:	643b      	str	r3, [r7, #64]	; 0x40
 800d704:	e037      	b.n	800d776 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800d706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d708:	781b      	ldrb	r3, [r3, #0]
 800d70a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d70c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d70e:	3301      	adds	r3, #1
 800d710:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d714:	3b01      	subs	r3, #1
 800d716:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800d718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d71a:	781b      	ldrb	r3, [r3, #0]
 800d71c:	021a      	lsls	r2, r3, #8
 800d71e:	697b      	ldr	r3, [r7, #20]
 800d720:	4313      	orrs	r3, r2
 800d722:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d726:	3301      	adds	r3, #1
 800d728:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d72a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d72c:	3b01      	subs	r3, #1
 800d72e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800d730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	041a      	lsls	r2, r3, #16
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	4313      	orrs	r3, r2
 800d73a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d73c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d73e:	3301      	adds	r3, #1
 800d740:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d744:	3b01      	subs	r3, #1
 800d746:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800d748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d74a:	781b      	ldrb	r3, [r3, #0]
 800d74c:	061a      	lsls	r2, r3, #24
 800d74e:	697b      	ldr	r3, [r7, #20]
 800d750:	4313      	orrs	r3, r2
 800d752:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d756:	3301      	adds	r3, #1
 800d758:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d75a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d75c:	3b01      	subs	r3, #1
 800d75e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	f107 0214 	add.w	r2, r7, #20
 800d768:	4611      	mov	r1, r2
 800d76a:	4618      	mov	r0, r3
 800d76c:	f001 fe80 	bl	800f470 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800d770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d772:	3301      	adds	r3, #1
 800d774:	643b      	str	r3, [r7, #64]	; 0x40
 800d776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d778:	2b07      	cmp	r3, #7
 800d77a:	d9c4      	bls.n	800d706 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d77c:	f7f9 fbde 	bl	8006f3c <HAL_GetTick>
 800d780:	4602      	mov	r2, r0
 800d782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d784:	1ad3      	subs	r3, r2, r3
 800d786:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d788:	429a      	cmp	r2, r3
 800d78a:	d902      	bls.n	800d792 <HAL_SD_WriteBlocks+0x1b6>
 800d78c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d112      	bne.n	800d7b8 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	4a53      	ldr	r2, [pc, #332]	; (800d8e4 <HAL_SD_WriteBlocks+0x308>)
 800d798:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d79e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7a0:	431a      	orrs	r2, r3
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	2201      	movs	r2, #1
 800d7aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800d7b4:	2303      	movs	r3, #3
 800d7b6:	e090      	b.n	800d8da <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7be:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d092      	beq.n	800d6ec <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d022      	beq.n	800d81a <HAL_SD_WriteBlocks+0x23e>
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	2b01      	cmp	r3, #1
 800d7d8:	d91f      	bls.n	800d81a <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7de:	2b03      	cmp	r3, #3
 800d7e0:	d01b      	beq.n	800d81a <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	f001 ff90 	bl	800f70c <SDMMC_CmdStopTransfer>
 800d7ec:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d7ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d012      	beq.n	800d81a <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	4a3a      	ldr	r2, [pc, #232]	; (800d8e4 <HAL_SD_WriteBlocks+0x308>)
 800d7fa:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d802:	431a      	orrs	r2, r3
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	2201      	movs	r2, #1
 800d80c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	2200      	movs	r2, #0
 800d814:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800d816:	2301      	movs	r3, #1
 800d818:	e05f      	b.n	800d8da <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d820:	f003 0308 	and.w	r3, r3, #8
 800d824:	2b00      	cmp	r3, #0
 800d826:	d012      	beq.n	800d84e <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	4a2d      	ldr	r2, [pc, #180]	; (800d8e4 <HAL_SD_WriteBlocks+0x308>)
 800d82e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d834:	f043 0208 	orr.w	r2, r3, #8
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	2201      	movs	r2, #1
 800d840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	2200      	movs	r2, #0
 800d848:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d84a:	2301      	movs	r3, #1
 800d84c:	e045      	b.n	800d8da <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d854:	f003 0302 	and.w	r3, r3, #2
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d012      	beq.n	800d882 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	4a20      	ldr	r2, [pc, #128]	; (800d8e4 <HAL_SD_WriteBlocks+0x308>)
 800d862:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d868:	f043 0202 	orr.w	r2, r3, #2
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	2201      	movs	r2, #1
 800d874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	2200      	movs	r2, #0
 800d87c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d87e:	2301      	movs	r3, #1
 800d880:	e02b      	b.n	800d8da <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d888:	f003 0310 	and.w	r3, r3, #16
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d012      	beq.n	800d8b6 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	4a13      	ldr	r2, [pc, #76]	; (800d8e4 <HAL_SD_WriteBlocks+0x308>)
 800d896:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d89c:	f043 0210 	orr.w	r2, r3, #16
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	2201      	movs	r2, #1
 800d8a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d8b2:	2301      	movs	r3, #1
 800d8b4:	e011      	b.n	800d8da <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	f240 523a 	movw	r2, #1338	; 0x53a
 800d8be:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	2201      	movs	r2, #1
 800d8c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	e006      	b.n	800d8da <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d8d8:	2301      	movs	r3, #1
  }
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3748      	adds	r7, #72	; 0x48
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
 800d8e2:	bf00      	nop
 800d8e4:	004005ff 	.word	0x004005ff

0800d8e8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b08c      	sub	sp, #48	; 0x30
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	60f8      	str	r0, [r7, #12]
 800d8f0:	60b9      	str	r1, [r7, #8]
 800d8f2:	607a      	str	r2, [r7, #4]
 800d8f4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d107      	bne.n	800d910 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d904:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d90c:	2301      	movs	r3, #1
 800d90e:	e0be      	b.n	800da8e <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d916:	b2db      	uxtb	r3, r3
 800d918:	2b01      	cmp	r3, #1
 800d91a:	f040 80b7 	bne.w	800da8c <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	2200      	movs	r2, #0
 800d922:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d924:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	441a      	add	r2, r3
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d92e:	429a      	cmp	r2, r3
 800d930:	d907      	bls.n	800d942 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d936:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d93e:	2301      	movs	r3, #1
 800d940:	e0a5      	b.n	800da8e <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	2203      	movs	r2, #3
 800d946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	2200      	movs	r2, #0
 800d950:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d960:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d966:	4a4c      	ldr	r2, [pc, #304]	; (800da98 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 800d968:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d96e:	4a4b      	ldr	r2, [pc, #300]	; (800da9c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800d970:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d976:	2200      	movs	r2, #0
 800d978:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d97e:	2200      	movs	r2, #0
 800d980:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d992:	689a      	ldr	r2, [r3, #8]
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	430a      	orrs	r2, r1
 800d99c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	3380      	adds	r3, #128	; 0x80
 800d9a8:	4619      	mov	r1, r3
 800d9aa:	68ba      	ldr	r2, [r7, #8]
 800d9ac:	683b      	ldr	r3, [r7, #0]
 800d9ae:	025b      	lsls	r3, r3, #9
 800d9b0:	089b      	lsrs	r3, r3, #2
 800d9b2:	f7fa ff93 	bl	80088dc <HAL_DMA_Start_IT>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d017      	beq.n	800d9ec <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	681b      	ldr	r3, [r3, #0]
 800d9c6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800d9ca:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	4a33      	ldr	r2, [pc, #204]	; (800daa0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800d9d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	2201      	movs	r2, #1
 800d9e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	e050      	b.n	800da8e <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800d9ec:	4b2d      	ldr	r3, [pc, #180]	; (800daa4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800d9ee:	2201      	movs	r2, #1
 800d9f0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9f6:	2b01      	cmp	r3, #1
 800d9f8:	d002      	beq.n	800da00 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 800d9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9fc:	025b      	lsls	r3, r3, #9
 800d9fe:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800da00:	f04f 33ff 	mov.w	r3, #4294967295
 800da04:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	025b      	lsls	r3, r3, #9
 800da0a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800da0c:	2390      	movs	r3, #144	; 0x90
 800da0e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800da10:	2302      	movs	r3, #2
 800da12:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800da14:	2300      	movs	r3, #0
 800da16:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800da18:	2301      	movs	r3, #1
 800da1a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	f107 0210 	add.w	r2, r7, #16
 800da24:	4611      	mov	r1, r2
 800da26:	4618      	mov	r0, r3
 800da28:	f001 fd99 	bl	800f55e <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	2b01      	cmp	r3, #1
 800da30:	d90a      	bls.n	800da48 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	2282      	movs	r2, #130	; 0x82
 800da36:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800da3e:	4618      	mov	r0, r3
 800da40:	f001 fdfd 	bl	800f63e <SDMMC_CmdReadMultiBlock>
 800da44:	62f8      	str	r0, [r7, #44]	; 0x2c
 800da46:	e009      	b.n	800da5c <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	2281      	movs	r2, #129	; 0x81
 800da4c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800da54:	4618      	mov	r0, r3
 800da56:	f001 fdd0 	bl	800f5fa <SDMMC_CmdReadSingleBlock>
 800da5a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800da5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d012      	beq.n	800da88 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	4a0e      	ldr	r2, [pc, #56]	; (800daa0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800da68:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da70:	431a      	orrs	r2, r3
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	2201      	movs	r2, #1
 800da7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	2200      	movs	r2, #0
 800da82:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800da84:	2301      	movs	r3, #1
 800da86:	e002      	b.n	800da8e <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 800da88:	2300      	movs	r3, #0
 800da8a:	e000      	b.n	800da8e <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 800da8c:	2302      	movs	r3, #2
  }
}
 800da8e:	4618      	mov	r0, r3
 800da90:	3730      	adds	r7, #48	; 0x30
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}
 800da96:	bf00      	nop
 800da98:	0800e4ab 	.word	0x0800e4ab
 800da9c:	0800e51d 	.word	0x0800e51d
 800daa0:	004005ff 	.word	0x004005ff
 800daa4:	4225858c 	.word	0x4225858c

0800daa8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b08c      	sub	sp, #48	; 0x30
 800daac:	af00      	add	r7, sp, #0
 800daae:	60f8      	str	r0, [r7, #12]
 800dab0:	60b9      	str	r1, [r7, #8]
 800dab2:	607a      	str	r2, [r7, #4]
 800dab4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800daba:	68bb      	ldr	r3, [r7, #8]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d107      	bne.n	800dad0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dac4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800dacc:	2301      	movs	r3, #1
 800dace:	e0c1      	b.n	800dc54 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dad6:	b2db      	uxtb	r3, r3
 800dad8:	2b01      	cmp	r3, #1
 800dada:	f040 80ba 	bne.w	800dc52 <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	2200      	movs	r2, #0
 800dae2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800dae4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	441a      	add	r2, r3
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800daee:	429a      	cmp	r2, r3
 800daf0:	d907      	bls.n	800db02 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daf6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800dafe:	2301      	movs	r3, #1
 800db00:	e0a8      	b.n	800dc54 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	2203      	movs	r2, #3
 800db06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	2200      	movs	r2, #0
 800db10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	f042 021a 	orr.w	r2, r2, #26
 800db20:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db26:	4a4d      	ldr	r2, [pc, #308]	; (800dc5c <HAL_SD_WriteBlocks_DMA+0x1b4>)
 800db28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db2e:	4a4c      	ldr	r2, [pc, #304]	; (800dc60 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 800db30:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db36:	2200      	movs	r2, #0
 800db38:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db3e:	2b01      	cmp	r3, #1
 800db40:	d002      	beq.n	800db48 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800db42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db44:	025b      	lsls	r3, r3, #9
 800db46:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	2b01      	cmp	r3, #1
 800db4c:	d90a      	bls.n	800db64 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	22a0      	movs	r2, #160	; 0xa0
 800db52:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800db5a:	4618      	mov	r0, r3
 800db5c:	f001 fdb3 	bl	800f6c6 <SDMMC_CmdWriteMultiBlock>
 800db60:	62f8      	str	r0, [r7, #44]	; 0x2c
 800db62:	e009      	b.n	800db78 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	2290      	movs	r2, #144	; 0x90
 800db68:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800db70:	4618      	mov	r0, r3
 800db72:	f001 fd86 	bl	800f682 <SDMMC_CmdWriteSingleBlock>
 800db76:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800db78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d012      	beq.n	800dba4 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	4a38      	ldr	r2, [pc, #224]	; (800dc64 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800db84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db8c:	431a      	orrs	r2, r3
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	2201      	movs	r2, #1
 800db96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	2200      	movs	r2, #0
 800db9e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800dba0:	2301      	movs	r3, #1
 800dba2:	e057      	b.n	800dc54 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800dba4:	4b30      	ldr	r3, [pc, #192]	; (800dc68 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800dba6:	2201      	movs	r2, #1
 800dba8:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbae:	2240      	movs	r2, #64	; 0x40
 800dbb0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbc2:	689a      	ldr	r2, [r3, #8]
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	430a      	orrs	r2, r1
 800dbcc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800dbd2:	68b9      	ldr	r1, [r7, #8]
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	3380      	adds	r3, #128	; 0x80
 800dbda:	461a      	mov	r2, r3
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	025b      	lsls	r3, r3, #9
 800dbe0:	089b      	lsrs	r3, r3, #2
 800dbe2:	f7fa fe7b 	bl	80088dc <HAL_DMA_Start_IT>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d01a      	beq.n	800dc22 <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	f022 021a 	bic.w	r2, r2, #26
 800dbfa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	4a18      	ldr	r2, [pc, #96]	; (800dc64 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800dc02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	2201      	movs	r2, #1
 800dc14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800dc1e:	2301      	movs	r3, #1
 800dc20:	e018      	b.n	800dc54 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dc22:	f04f 33ff 	mov.w	r3, #4294967295
 800dc26:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	025b      	lsls	r3, r3, #9
 800dc2c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800dc2e:	2390      	movs	r3, #144	; 0x90
 800dc30:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800dc32:	2300      	movs	r3, #0
 800dc34:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800dc36:	2300      	movs	r3, #0
 800dc38:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	f107 0210 	add.w	r2, r7, #16
 800dc46:	4611      	mov	r1, r2
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f001 fc88 	bl	800f55e <SDIO_ConfigData>

      return HAL_OK;
 800dc4e:	2300      	movs	r3, #0
 800dc50:	e000      	b.n	800dc54 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 800dc52:	2302      	movs	r3, #2
  }
}
 800dc54:	4618      	mov	r0, r3
 800dc56:	3730      	adds	r7, #48	; 0x30
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}
 800dc5c:	0800e481 	.word	0x0800e481
 800dc60:	0800e51d 	.word	0x0800e51d
 800dc64:	004005ff 	.word	0x004005ff
 800dc68:	4225858c 	.word	0x4225858c

0800dc6c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b084      	sub	sp, #16
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc78:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d008      	beq.n	800dc9a <HAL_SD_IRQHandler+0x2e>
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	f003 0308 	and.w	r3, r3, #8
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d003      	beq.n	800dc9a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f000 ffef 	bl	800ec76 <SD_Read_IT>
 800dc98:	e155      	b.n	800df46 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	f000 808f 	beq.w	800ddc8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dcb2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcba:	687a      	ldr	r2, [r7, #4]
 800dcbc:	6812      	ldr	r2, [r2, #0]
 800dcbe:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800dcc2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800dcc6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	f022 0201 	bic.w	r2, r2, #1
 800dcd6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	f003 0308 	and.w	r3, r3, #8
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d039      	beq.n	800dd56 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	f003 0302 	and.w	r3, r3, #2
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d104      	bne.n	800dcf6 <HAL_SD_IRQHandler+0x8a>
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	f003 0320 	and.w	r3, r3, #32
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d011      	beq.n	800dd1a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	f001 fd06 	bl	800f70c <SDMMC_CmdStopTransfer>
 800dd00:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d008      	beq.n	800dd1a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	431a      	orrs	r2, r3
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800dd14:	6878      	ldr	r0, [r7, #4]
 800dd16:	f000 f91f 	bl	800df58 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	f240 523a 	movw	r2, #1338	; 0x53a
 800dd22:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2201      	movs	r2, #1
 800dd28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2200      	movs	r2, #0
 800dd30:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	f003 0301 	and.w	r3, r3, #1
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d104      	bne.n	800dd46 <HAL_SD_IRQHandler+0xda>
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	f003 0302 	and.w	r3, r3, #2
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d003      	beq.n	800dd4e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800dd46:	6878      	ldr	r0, [r7, #4]
 800dd48:	f003 fdbc 	bl	80118c4 <HAL_SD_RxCpltCallback>
 800dd4c:	e0fb      	b.n	800df46 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f003 fdae 	bl	80118b0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800dd54:	e0f7      	b.n	800df46 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	f000 80f2 	beq.w	800df46 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	f003 0320 	and.w	r3, r3, #32
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d011      	beq.n	800dd90 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	4618      	mov	r0, r3
 800dd72:	f001 fccb 	bl	800f70c <SDMMC_CmdStopTransfer>
 800dd76:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800dd78:	68bb      	ldr	r3, [r7, #8]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d008      	beq.n	800dd90 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd82:	68bb      	ldr	r3, [r7, #8]
 800dd84:	431a      	orrs	r2, r3
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800dd8a:	6878      	ldr	r0, [r7, #4]
 800dd8c:	f000 f8e4 	bl	800df58 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	f003 0301 	and.w	r3, r3, #1
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	f040 80d5 	bne.w	800df46 <HAL_SD_IRQHandler+0x2da>
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	f003 0302 	and.w	r3, r3, #2
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	f040 80cf 	bne.w	800df46 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	f022 0208 	bic.w	r2, r2, #8
 800ddb6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2201      	movs	r2, #1
 800ddbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800ddc0:	6878      	ldr	r0, [r7, #4]
 800ddc2:	f003 fd75 	bl	80118b0 <HAL_SD_TxCpltCallback>
}
 800ddc6:	e0be      	b.n	800df46 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d008      	beq.n	800dde8 <HAL_SD_IRQHandler+0x17c>
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	f003 0308 	and.w	r3, r3, #8
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d003      	beq.n	800dde8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f000 ff99 	bl	800ed18 <SD_Write_IT>
 800dde6:	e0ae      	b.n	800df46 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddee:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	f000 80a7 	beq.w	800df46 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddfe:	f003 0302 	and.w	r3, r3, #2
 800de02:	2b00      	cmp	r3, #0
 800de04:	d005      	beq.n	800de12 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de0a:	f043 0202 	orr.w	r2, r3, #2
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de18:	f003 0308 	and.w	r3, r3, #8
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d005      	beq.n	800de2c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de24:	f043 0208 	orr.w	r2, r3, #8
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de32:	f003 0320 	and.w	r3, r3, #32
 800de36:	2b00      	cmp	r3, #0
 800de38:	d005      	beq.n	800de46 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de3e:	f043 0220 	orr.w	r2, r3, #32
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de4c:	f003 0310 	and.w	r3, r3, #16
 800de50:	2b00      	cmp	r3, #0
 800de52:	d005      	beq.n	800de60 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de58:	f043 0210 	orr.w	r2, r3, #16
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	f240 523a 	movw	r2, #1338	; 0x53a
 800de68:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800de78:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	4618      	mov	r0, r3
 800de80:	f001 fc44 	bl	800f70c <SDMMC_CmdStopTransfer>
 800de84:	4602      	mov	r2, r0
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de8a:	431a      	orrs	r2, r3
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	f003 0308 	and.w	r3, r3, #8
 800de96:	2b00      	cmp	r3, #0
 800de98:	d00a      	beq.n	800deb0 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2201      	movs	r2, #1
 800de9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	2200      	movs	r2, #0
 800dea6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f000 f855 	bl	800df58 <HAL_SD_ErrorCallback>
}
 800deae:	e04a      	b.n	800df46 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d045      	beq.n	800df46 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	f003 0310 	and.w	r3, r3, #16
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d104      	bne.n	800dece <HAL_SD_IRQHandler+0x262>
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	f003 0320 	and.w	r3, r3, #32
 800deca:	2b00      	cmp	r3, #0
 800decc:	d011      	beq.n	800def2 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ded2:	4a1f      	ldr	r2, [pc, #124]	; (800df50 <HAL_SD_IRQHandler+0x2e4>)
 800ded4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800deda:	4618      	mov	r0, r3
 800dedc:	f7fa fd56 	bl	800898c <HAL_DMA_Abort_IT>
 800dee0:	4603      	mov	r3, r0
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d02f      	beq.n	800df46 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800deea:	4618      	mov	r0, r3
 800deec:	f000 fb68 	bl	800e5c0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800def0:	e029      	b.n	800df46 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	f003 0301 	and.w	r3, r3, #1
 800def8:	2b00      	cmp	r3, #0
 800defa:	d104      	bne.n	800df06 <HAL_SD_IRQHandler+0x29a>
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	f003 0302 	and.w	r3, r3, #2
 800df02:	2b00      	cmp	r3, #0
 800df04:	d011      	beq.n	800df2a <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df0a:	4a12      	ldr	r2, [pc, #72]	; (800df54 <HAL_SD_IRQHandler+0x2e8>)
 800df0c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df12:	4618      	mov	r0, r3
 800df14:	f7fa fd3a 	bl	800898c <HAL_DMA_Abort_IT>
 800df18:	4603      	mov	r3, r0
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d013      	beq.n	800df46 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df22:	4618      	mov	r0, r3
 800df24:	f000 fb83 	bl	800e62e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800df28:	e00d      	b.n	800df46 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2200      	movs	r2, #0
 800df2e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2201      	movs	r2, #1
 800df34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2200      	movs	r2, #0
 800df3c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f003 fcac 	bl	801189c <HAL_SD_AbortCallback>
}
 800df44:	e7ff      	b.n	800df46 <HAL_SD_IRQHandler+0x2da>
 800df46:	bf00      	nop
 800df48:	3710      	adds	r7, #16
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}
 800df4e:	bf00      	nop
 800df50:	0800e5c1 	.word	0x0800e5c1
 800df54:	0800e62f 	.word	0x0800e62f

0800df58 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800df58:	b480      	push	{r7}
 800df5a:	b083      	sub	sp, #12
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800df60:	bf00      	nop
 800df62:	370c      	adds	r7, #12
 800df64:	46bd      	mov	sp, r7
 800df66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6a:	4770      	bx	lr

0800df6c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800df6c:	b480      	push	{r7}
 800df6e:	b083      	sub	sp, #12
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
 800df74:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df7a:	0f9b      	lsrs	r3, r3, #30
 800df7c:	b2da      	uxtb	r2, r3
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df86:	0e9b      	lsrs	r3, r3, #26
 800df88:	b2db      	uxtb	r3, r3
 800df8a:	f003 030f 	and.w	r3, r3, #15
 800df8e:	b2da      	uxtb	r2, r3
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df98:	0e1b      	lsrs	r3, r3, #24
 800df9a:	b2db      	uxtb	r3, r3
 800df9c:	f003 0303 	and.w	r3, r3, #3
 800dfa0:	b2da      	uxtb	r2, r3
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfaa:	0c1b      	lsrs	r3, r3, #16
 800dfac:	b2da      	uxtb	r2, r3
 800dfae:	683b      	ldr	r3, [r7, #0]
 800dfb0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfb6:	0a1b      	lsrs	r3, r3, #8
 800dfb8:	b2da      	uxtb	r2, r3
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfc2:	b2da      	uxtb	r2, r3
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dfcc:	0d1b      	lsrs	r3, r3, #20
 800dfce:	b29a      	uxth	r2, r3
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dfd8:	0c1b      	lsrs	r3, r3, #16
 800dfda:	b2db      	uxtb	r3, r3
 800dfdc:	f003 030f 	and.w	r3, r3, #15
 800dfe0:	b2da      	uxtb	r2, r3
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dfea:	0bdb      	lsrs	r3, r3, #15
 800dfec:	b2db      	uxtb	r3, r3
 800dfee:	f003 0301 	and.w	r3, r3, #1
 800dff2:	b2da      	uxtb	r2, r3
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dffc:	0b9b      	lsrs	r3, r3, #14
 800dffe:	b2db      	uxtb	r3, r3
 800e000:	f003 0301 	and.w	r3, r3, #1
 800e004:	b2da      	uxtb	r2, r3
 800e006:	683b      	ldr	r3, [r7, #0]
 800e008:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e00e:	0b5b      	lsrs	r3, r3, #13
 800e010:	b2db      	uxtb	r3, r3
 800e012:	f003 0301 	and.w	r3, r3, #1
 800e016:	b2da      	uxtb	r2, r3
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e020:	0b1b      	lsrs	r3, r3, #12
 800e022:	b2db      	uxtb	r3, r3
 800e024:	f003 0301 	and.w	r3, r3, #1
 800e028:	b2da      	uxtb	r2, r3
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	2200      	movs	r2, #0
 800e032:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d163      	bne.n	800e104 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e040:	009a      	lsls	r2, r3, #2
 800e042:	f640 73fc 	movw	r3, #4092	; 0xffc
 800e046:	4013      	ands	r3, r2
 800e048:	687a      	ldr	r2, [r7, #4]
 800e04a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800e04c:	0f92      	lsrs	r2, r2, #30
 800e04e:	431a      	orrs	r2, r3
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e058:	0edb      	lsrs	r3, r3, #27
 800e05a:	b2db      	uxtb	r3, r3
 800e05c:	f003 0307 	and.w	r3, r3, #7
 800e060:	b2da      	uxtb	r2, r3
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e06a:	0e1b      	lsrs	r3, r3, #24
 800e06c:	b2db      	uxtb	r3, r3
 800e06e:	f003 0307 	and.w	r3, r3, #7
 800e072:	b2da      	uxtb	r2, r3
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e07c:	0d5b      	lsrs	r3, r3, #21
 800e07e:	b2db      	uxtb	r3, r3
 800e080:	f003 0307 	and.w	r3, r3, #7
 800e084:	b2da      	uxtb	r2, r3
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e08e:	0c9b      	lsrs	r3, r3, #18
 800e090:	b2db      	uxtb	r3, r3
 800e092:	f003 0307 	and.w	r3, r3, #7
 800e096:	b2da      	uxtb	r2, r3
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0a0:	0bdb      	lsrs	r3, r3, #15
 800e0a2:	b2db      	uxtb	r3, r3
 800e0a4:	f003 0307 	and.w	r3, r3, #7
 800e0a8:	b2da      	uxtb	r2, r3
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	691b      	ldr	r3, [r3, #16]
 800e0b2:	1c5a      	adds	r2, r3, #1
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	7e1b      	ldrb	r3, [r3, #24]
 800e0bc:	b2db      	uxtb	r3, r3
 800e0be:	f003 0307 	and.w	r3, r3, #7
 800e0c2:	3302      	adds	r3, #2
 800e0c4:	2201      	movs	r2, #1
 800e0c6:	fa02 f303 	lsl.w	r3, r2, r3
 800e0ca:	687a      	ldr	r2, [r7, #4]
 800e0cc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800e0ce:	fb03 f202 	mul.w	r2, r3, r2
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	7a1b      	ldrb	r3, [r3, #8]
 800e0da:	b2db      	uxtb	r3, r3
 800e0dc:	f003 030f 	and.w	r3, r3, #15
 800e0e0:	2201      	movs	r2, #1
 800e0e2:	409a      	lsls	r2, r3
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0ec:	687a      	ldr	r2, [r7, #4]
 800e0ee:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800e0f0:	0a52      	lsrs	r2, r2, #9
 800e0f2:	fb03 f202 	mul.w	r2, r3, r2
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e100:	661a      	str	r2, [r3, #96]	; 0x60
 800e102:	e031      	b.n	800e168 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e108:	2b01      	cmp	r3, #1
 800e10a:	d11d      	bne.n	800e148 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e110:	041b      	lsls	r3, r3, #16
 800e112:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e11a:	0c1b      	lsrs	r3, r3, #16
 800e11c:	431a      	orrs	r2, r3
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	691b      	ldr	r3, [r3, #16]
 800e126:	3301      	adds	r3, #1
 800e128:	029a      	lsls	r2, r3, #10
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e13c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	661a      	str	r2, [r3, #96]	; 0x60
 800e146:	e00f      	b.n	800e168 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	4a58      	ldr	r2, [pc, #352]	; (800e2b0 <HAL_SD_GetCardCSD+0x344>)
 800e14e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e154:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2201      	movs	r2, #1
 800e160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e164:	2301      	movs	r3, #1
 800e166:	e09d      	b.n	800e2a4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e16c:	0b9b      	lsrs	r3, r3, #14
 800e16e:	b2db      	uxtb	r3, r3
 800e170:	f003 0301 	and.w	r3, r3, #1
 800e174:	b2da      	uxtb	r2, r3
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e17e:	09db      	lsrs	r3, r3, #7
 800e180:	b2db      	uxtb	r3, r3
 800e182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e186:	b2da      	uxtb	r2, r3
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e190:	b2db      	uxtb	r3, r3
 800e192:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e196:	b2da      	uxtb	r2, r3
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1a0:	0fdb      	lsrs	r3, r3, #31
 800e1a2:	b2da      	uxtb	r2, r3
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1ac:	0f5b      	lsrs	r3, r3, #29
 800e1ae:	b2db      	uxtb	r3, r3
 800e1b0:	f003 0303 	and.w	r3, r3, #3
 800e1b4:	b2da      	uxtb	r2, r3
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1be:	0e9b      	lsrs	r3, r3, #26
 800e1c0:	b2db      	uxtb	r3, r3
 800e1c2:	f003 0307 	and.w	r3, r3, #7
 800e1c6:	b2da      	uxtb	r2, r3
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1d0:	0d9b      	lsrs	r3, r3, #22
 800e1d2:	b2db      	uxtb	r3, r3
 800e1d4:	f003 030f 	and.w	r3, r3, #15
 800e1d8:	b2da      	uxtb	r2, r3
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1e2:	0d5b      	lsrs	r3, r3, #21
 800e1e4:	b2db      	uxtb	r3, r3
 800e1e6:	f003 0301 	and.w	r3, r3, #1
 800e1ea:	b2da      	uxtb	r2, r3
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e1f2:	683b      	ldr	r3, [r7, #0]
 800e1f4:	2200      	movs	r2, #0
 800e1f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1fe:	0c1b      	lsrs	r3, r3, #16
 800e200:	b2db      	uxtb	r3, r3
 800e202:	f003 0301 	and.w	r3, r3, #1
 800e206:	b2da      	uxtb	r2, r3
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e212:	0bdb      	lsrs	r3, r3, #15
 800e214:	b2db      	uxtb	r3, r3
 800e216:	f003 0301 	and.w	r3, r3, #1
 800e21a:	b2da      	uxtb	r2, r3
 800e21c:	683b      	ldr	r3, [r7, #0]
 800e21e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e226:	0b9b      	lsrs	r3, r3, #14
 800e228:	b2db      	uxtb	r3, r3
 800e22a:	f003 0301 	and.w	r3, r3, #1
 800e22e:	b2da      	uxtb	r2, r3
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e23a:	0b5b      	lsrs	r3, r3, #13
 800e23c:	b2db      	uxtb	r3, r3
 800e23e:	f003 0301 	and.w	r3, r3, #1
 800e242:	b2da      	uxtb	r2, r3
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e24e:	0b1b      	lsrs	r3, r3, #12
 800e250:	b2db      	uxtb	r3, r3
 800e252:	f003 0301 	and.w	r3, r3, #1
 800e256:	b2da      	uxtb	r2, r3
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e262:	0a9b      	lsrs	r3, r3, #10
 800e264:	b2db      	uxtb	r3, r3
 800e266:	f003 0303 	and.w	r3, r3, #3
 800e26a:	b2da      	uxtb	r2, r3
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e276:	0a1b      	lsrs	r3, r3, #8
 800e278:	b2db      	uxtb	r3, r3
 800e27a:	f003 0303 	and.w	r3, r3, #3
 800e27e:	b2da      	uxtb	r2, r3
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e28a:	085b      	lsrs	r3, r3, #1
 800e28c:	b2db      	uxtb	r3, r3
 800e28e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e292:	b2da      	uxtb	r2, r3
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	2201      	movs	r2, #1
 800e29e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e2a2:	2300      	movs	r3, #0
}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	370c      	adds	r7, #12
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ae:	4770      	bx	lr
 800e2b0:	004005ff 	.word	0x004005ff

0800e2b4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800e2b4:	b480      	push	{r7}
 800e2b6:	b083      	sub	sp, #12
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
 800e2bc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e2c2:	683b      	ldr	r3, [r7, #0]
 800e2c4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e2ea:	683b      	ldr	r3, [r7, #0]
 800e2ec:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e2fe:	2300      	movs	r3, #0
}
 800e300:	4618      	mov	r0, r3
 800e302:	370c      	adds	r7, #12
 800e304:	46bd      	mov	sp, r7
 800e306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30a:	4770      	bx	lr

0800e30c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e30c:	b5b0      	push	{r4, r5, r7, lr}
 800e30e:	b08e      	sub	sp, #56	; 0x38
 800e310:	af04      	add	r7, sp, #16
 800e312:	6078      	str	r0, [r7, #4]
 800e314:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e316:	2300      	movs	r3, #0
 800e318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	2203      	movs	r2, #3
 800e320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e328:	2b03      	cmp	r3, #3
 800e32a:	d02e      	beq.n	800e38a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800e32c:	683b      	ldr	r3, [r7, #0]
 800e32e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e332:	d106      	bne.n	800e342 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e338:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	639a      	str	r2, [r3, #56]	; 0x38
 800e340:	e029      	b.n	800e396 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800e342:	683b      	ldr	r3, [r7, #0]
 800e344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e348:	d10a      	bne.n	800e360 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f000 fb2a 	bl	800e9a4 <SD_WideBus_Enable>
 800e350:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e356:	6a3b      	ldr	r3, [r7, #32]
 800e358:	431a      	orrs	r2, r3
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	639a      	str	r2, [r3, #56]	; 0x38
 800e35e:	e01a      	b.n	800e396 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d10a      	bne.n	800e37c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e366:	6878      	ldr	r0, [r7, #4]
 800e368:	f000 fb67 	bl	800ea3a <SD_WideBus_Disable>
 800e36c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e372:	6a3b      	ldr	r3, [r7, #32]
 800e374:	431a      	orrs	r2, r3
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	639a      	str	r2, [r3, #56]	; 0x38
 800e37a:	e00c      	b.n	800e396 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e380:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	639a      	str	r2, [r3, #56]	; 0x38
 800e388:	e005      	b.n	800e396 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e38e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d00b      	beq.n	800e3b6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	4a26      	ldr	r2, [pc, #152]	; (800e43c <HAL_SD_ConfigWideBusOperation+0x130>)
 800e3a4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	2201      	movs	r2, #1
 800e3aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e3ae:	2301      	movs	r3, #1
 800e3b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e3b4:	e01f      	b.n	800e3f6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	685b      	ldr	r3, [r3, #4]
 800e3ba:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	689b      	ldr	r3, [r3, #8]
 800e3c0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	68db      	ldr	r3, [r3, #12]
 800e3c6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	695b      	ldr	r3, [r3, #20]
 800e3d0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	699b      	ldr	r3, [r3, #24]
 800e3d6:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681d      	ldr	r5, [r3, #0]
 800e3dc:	466c      	mov	r4, sp
 800e3de:	f107 0314 	add.w	r3, r7, #20
 800e3e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e3e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e3ea:	f107 0308 	add.w	r3, r7, #8
 800e3ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e3f0:	4628      	mov	r0, r5
 800e3f2:	f001 f805 	bl	800f400 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e3fe:	4618      	mov	r0, r3
 800e400:	f001 f8d9 	bl	800f5b6 <SDMMC_CmdBlockLength>
 800e404:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e406:	6a3b      	ldr	r3, [r7, #32]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d00c      	beq.n	800e426 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	4a0a      	ldr	r2, [pc, #40]	; (800e43c <HAL_SD_ConfigWideBusOperation+0x130>)
 800e412:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e418:	6a3b      	ldr	r3, [r7, #32]
 800e41a:	431a      	orrs	r2, r3
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e420:	2301      	movs	r3, #1
 800e422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2201      	movs	r2, #1
 800e42a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800e42e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e432:	4618      	mov	r0, r3
 800e434:	3728      	adds	r7, #40	; 0x28
 800e436:	46bd      	mov	sp, r7
 800e438:	bdb0      	pop	{r4, r5, r7, pc}
 800e43a:	bf00      	nop
 800e43c:	004005ff 	.word	0x004005ff

0800e440 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b086      	sub	sp, #24
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e448:	2300      	movs	r3, #0
 800e44a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e44c:	f107 030c 	add.w	r3, r7, #12
 800e450:	4619      	mov	r1, r3
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f000 fa7e 	bl	800e954 <SD_SendStatus>
 800e458:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d005      	beq.n	800e46c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e464:	697b      	ldr	r3, [r7, #20]
 800e466:	431a      	orrs	r2, r3
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	0a5b      	lsrs	r3, r3, #9
 800e470:	f003 030f 	and.w	r3, r3, #15
 800e474:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e476:	693b      	ldr	r3, [r7, #16]
}
 800e478:	4618      	mov	r0, r3
 800e47a:	3718      	adds	r7, #24
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}

0800e480 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e480:	b480      	push	{r7}
 800e482:	b085      	sub	sp, #20
 800e484:	af00      	add	r7, sp, #0
 800e486:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e48c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e49c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800e49e:	bf00      	nop
 800e4a0:	3714      	adds	r7, #20
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a8:	4770      	bx	lr

0800e4aa <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e4aa:	b580      	push	{r7, lr}
 800e4ac:	b084      	sub	sp, #16
 800e4ae:	af00      	add	r7, sp, #0
 800e4b0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4b6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4bc:	2b82      	cmp	r3, #130	; 0x82
 800e4be:	d111      	bne.n	800e4e4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f001 f921 	bl	800f70c <SDMMC_CmdStopTransfer>
 800e4ca:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e4cc:	68bb      	ldr	r3, [r7, #8]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d008      	beq.n	800e4e4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4d6:	68bb      	ldr	r3, [r7, #8]
 800e4d8:	431a      	orrs	r2, r3
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800e4de:	68f8      	ldr	r0, [r7, #12]
 800e4e0:	f7ff fd3a 	bl	800df58 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	f022 0208 	bic.w	r2, r2, #8
 800e4f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	f240 523a 	movw	r2, #1338	; 0x53a
 800e4fc:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	2201      	movs	r2, #1
 800e502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	2200      	movs	r2, #0
 800e50a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800e50c:	68f8      	ldr	r0, [r7, #12]
 800e50e:	f003 f9d9 	bl	80118c4 <HAL_SD_RxCpltCallback>
#endif
}
 800e512:	bf00      	nop
 800e514:	3710      	adds	r7, #16
 800e516:	46bd      	mov	sp, r7
 800e518:	bd80      	pop	{r7, pc}
	...

0800e51c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b086      	sub	sp, #24
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e528:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800e52a:	6878      	ldr	r0, [r7, #4]
 800e52c:	f7fa fbda 	bl	8008ce4 <HAL_DMA_GetError>
 800e530:	4603      	mov	r3, r0
 800e532:	2b02      	cmp	r3, #2
 800e534:	d03e      	beq.n	800e5b4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e53a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e53c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800e53e:	697b      	ldr	r3, [r7, #20]
 800e540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e544:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800e546:	693b      	ldr	r3, [r7, #16]
 800e548:	2b01      	cmp	r3, #1
 800e54a:	d002      	beq.n	800e552 <SD_DMAError+0x36>
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	2b01      	cmp	r3, #1
 800e550:	d12d      	bne.n	800e5ae <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	4a19      	ldr	r2, [pc, #100]	; (800e5bc <SD_DMAError+0xa0>)
 800e558:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e560:	697b      	ldr	r3, [r7, #20]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800e568:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e56e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800e576:	6978      	ldr	r0, [r7, #20]
 800e578:	f7ff ff62 	bl	800e440 <HAL_SD_GetCardState>
 800e57c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e57e:	68bb      	ldr	r3, [r7, #8]
 800e580:	2b06      	cmp	r3, #6
 800e582:	d002      	beq.n	800e58a <SD_DMAError+0x6e>
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	2b05      	cmp	r3, #5
 800e588:	d10a      	bne.n	800e5a0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e58a:	697b      	ldr	r3, [r7, #20]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	4618      	mov	r0, r3
 800e590:	f001 f8bc 	bl	800f70c <SDMMC_CmdStopTransfer>
 800e594:	4602      	mov	r2, r0
 800e596:	697b      	ldr	r3, [r7, #20]
 800e598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e59a:	431a      	orrs	r2, r3
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800e5a0:	697b      	ldr	r3, [r7, #20]
 800e5a2:	2201      	movs	r2, #1
 800e5a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e5a8:	697b      	ldr	r3, [r7, #20]
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800e5ae:	6978      	ldr	r0, [r7, #20]
 800e5b0:	f7ff fcd2 	bl	800df58 <HAL_SD_ErrorCallback>
#endif
  }
}
 800e5b4:	bf00      	nop
 800e5b6:	3718      	adds	r7, #24
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}
 800e5bc:	004005ff 	.word	0x004005ff

0800e5c0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b084      	sub	sp, #16
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5cc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	f240 523a 	movw	r2, #1338	; 0x53a
 800e5d6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800e5d8:	68f8      	ldr	r0, [r7, #12]
 800e5da:	f7ff ff31 	bl	800e440 <HAL_SD_GetCardState>
 800e5de:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	2201      	movs	r2, #1
 800e5e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e5ee:	68bb      	ldr	r3, [r7, #8]
 800e5f0:	2b06      	cmp	r3, #6
 800e5f2:	d002      	beq.n	800e5fa <SD_DMATxAbort+0x3a>
 800e5f4:	68bb      	ldr	r3, [r7, #8]
 800e5f6:	2b05      	cmp	r3, #5
 800e5f8:	d10a      	bne.n	800e610 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	4618      	mov	r0, r3
 800e600:	f001 f884 	bl	800f70c <SDMMC_CmdStopTransfer>
 800e604:	4602      	mov	r2, r0
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e60a:	431a      	orrs	r2, r3
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e614:	2b00      	cmp	r3, #0
 800e616:	d103      	bne.n	800e620 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800e618:	68f8      	ldr	r0, [r7, #12]
 800e61a:	f003 f93f 	bl	801189c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800e61e:	e002      	b.n	800e626 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800e620:	68f8      	ldr	r0, [r7, #12]
 800e622:	f7ff fc99 	bl	800df58 <HAL_SD_ErrorCallback>
}
 800e626:	bf00      	nop
 800e628:	3710      	adds	r7, #16
 800e62a:	46bd      	mov	sp, r7
 800e62c:	bd80      	pop	{r7, pc}

0800e62e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800e62e:	b580      	push	{r7, lr}
 800e630:	b084      	sub	sp, #16
 800e632:	af00      	add	r7, sp, #0
 800e634:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e63a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	f240 523a 	movw	r2, #1338	; 0x53a
 800e644:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800e646:	68f8      	ldr	r0, [r7, #12]
 800e648:	f7ff fefa 	bl	800e440 <HAL_SD_GetCardState>
 800e64c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	2201      	movs	r2, #1
 800e652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	2200      	movs	r2, #0
 800e65a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e65c:	68bb      	ldr	r3, [r7, #8]
 800e65e:	2b06      	cmp	r3, #6
 800e660:	d002      	beq.n	800e668 <SD_DMARxAbort+0x3a>
 800e662:	68bb      	ldr	r3, [r7, #8]
 800e664:	2b05      	cmp	r3, #5
 800e666:	d10a      	bne.n	800e67e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	4618      	mov	r0, r3
 800e66e:	f001 f84d 	bl	800f70c <SDMMC_CmdStopTransfer>
 800e672:	4602      	mov	r2, r0
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e678:	431a      	orrs	r2, r3
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e682:	2b00      	cmp	r3, #0
 800e684:	d103      	bne.n	800e68e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800e686:	68f8      	ldr	r0, [r7, #12]
 800e688:	f003 f908 	bl	801189c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800e68c:	e002      	b.n	800e694 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800e68e:	68f8      	ldr	r0, [r7, #12]
 800e690:	f7ff fc62 	bl	800df58 <HAL_SD_ErrorCallback>
}
 800e694:	bf00      	nop
 800e696:	3710      	adds	r7, #16
 800e698:	46bd      	mov	sp, r7
 800e69a:	bd80      	pop	{r7, pc}

0800e69c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e69c:	b5b0      	push	{r4, r5, r7, lr}
 800e69e:	b094      	sub	sp, #80	; 0x50
 800e6a0:	af04      	add	r7, sp, #16
 800e6a2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800e6a4:	2301      	movs	r3, #1
 800e6a6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f000 fefe 	bl	800f4ae <SDIO_GetPowerState>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d102      	bne.n	800e6be <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e6b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e6bc:	e0b8      	b.n	800e830 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6c2:	2b03      	cmp	r3, #3
 800e6c4:	d02f      	beq.n	800e726 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f001 f928 	bl	800f920 <SDMMC_CmdSendCID>
 800e6d0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e6d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d001      	beq.n	800e6dc <SD_InitCard+0x40>
    {
      return errorstate;
 800e6d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6da:	e0a9      	b.n	800e830 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	2100      	movs	r1, #0
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f000 ff28 	bl	800f538 <SDIO_GetResponse>
 800e6e8:	4602      	mov	r2, r0
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	2104      	movs	r1, #4
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f000 ff1f 	bl	800f538 <SDIO_GetResponse>
 800e6fa:	4602      	mov	r2, r0
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	2108      	movs	r1, #8
 800e706:	4618      	mov	r0, r3
 800e708:	f000 ff16 	bl	800f538 <SDIO_GetResponse>
 800e70c:	4602      	mov	r2, r0
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	210c      	movs	r1, #12
 800e718:	4618      	mov	r0, r3
 800e71a:	f000 ff0d 	bl	800f538 <SDIO_GetResponse>
 800e71e:	4602      	mov	r2, r0
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e72a:	2b03      	cmp	r3, #3
 800e72c:	d00d      	beq.n	800e74a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	f107 020e 	add.w	r2, r7, #14
 800e736:	4611      	mov	r1, r2
 800e738:	4618      	mov	r0, r3
 800e73a:	f001 f92e 	bl	800f99a <SDMMC_CmdSetRelAdd>
 800e73e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e740:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e742:	2b00      	cmp	r3, #0
 800e744:	d001      	beq.n	800e74a <SD_InitCard+0xae>
    {
      return errorstate;
 800e746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e748:	e072      	b.n	800e830 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e74e:	2b03      	cmp	r3, #3
 800e750:	d036      	beq.n	800e7c0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e752:	89fb      	ldrh	r3, [r7, #14]
 800e754:	461a      	mov	r2, r3
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681a      	ldr	r2, [r3, #0]
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e762:	041b      	lsls	r3, r3, #16
 800e764:	4619      	mov	r1, r3
 800e766:	4610      	mov	r0, r2
 800e768:	f001 f8f8 	bl	800f95c <SDMMC_CmdSendCSD>
 800e76c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e76e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e770:	2b00      	cmp	r3, #0
 800e772:	d001      	beq.n	800e778 <SD_InitCard+0xdc>
    {
      return errorstate;
 800e774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e776:	e05b      	b.n	800e830 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	2100      	movs	r1, #0
 800e77e:	4618      	mov	r0, r3
 800e780:	f000 feda 	bl	800f538 <SDIO_GetResponse>
 800e784:	4602      	mov	r2, r0
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	2104      	movs	r1, #4
 800e790:	4618      	mov	r0, r3
 800e792:	f000 fed1 	bl	800f538 <SDIO_GetResponse>
 800e796:	4602      	mov	r2, r0
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	2108      	movs	r1, #8
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	f000 fec8 	bl	800f538 <SDIO_GetResponse>
 800e7a8:	4602      	mov	r2, r0
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	210c      	movs	r1, #12
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	f000 febf 	bl	800f538 <SDIO_GetResponse>
 800e7ba:	4602      	mov	r2, r0
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	2104      	movs	r1, #4
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	f000 feb6 	bl	800f538 <SDIO_GetResponse>
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	0d1a      	lsrs	r2, r3, #20
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e7d4:	f107 0310 	add.w	r3, r7, #16
 800e7d8:	4619      	mov	r1, r3
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f7ff fbc6 	bl	800df6c <HAL_SD_GetCardCSD>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d002      	beq.n	800e7ec <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e7e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e7ea:	e021      	b.n	800e830 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	6819      	ldr	r1, [r3, #0]
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e7f4:	041b      	lsls	r3, r3, #16
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	461c      	mov	r4, r3
 800e7fa:	4615      	mov	r5, r2
 800e7fc:	4622      	mov	r2, r4
 800e7fe:	462b      	mov	r3, r5
 800e800:	4608      	mov	r0, r1
 800e802:	f000 ffa5 	bl	800f750 <SDMMC_CmdSelDesel>
 800e806:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d001      	beq.n	800e812 <SD_InitCard+0x176>
  {
    return errorstate;
 800e80e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e810:	e00e      	b.n	800e830 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681d      	ldr	r5, [r3, #0]
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	466c      	mov	r4, sp
 800e81a:	f103 0210 	add.w	r2, r3, #16
 800e81e:	ca07      	ldmia	r2, {r0, r1, r2}
 800e820:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e824:	3304      	adds	r3, #4
 800e826:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e828:	4628      	mov	r0, r5
 800e82a:	f000 fde9 	bl	800f400 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e82e:	2300      	movs	r3, #0
}
 800e830:	4618      	mov	r0, r3
 800e832:	3740      	adds	r7, #64	; 0x40
 800e834:	46bd      	mov	sp, r7
 800e836:	bdb0      	pop	{r4, r5, r7, pc}

0800e838 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b086      	sub	sp, #24
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e840:	2300      	movs	r3, #0
 800e842:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800e844:	2300      	movs	r3, #0
 800e846:	617b      	str	r3, [r7, #20]
 800e848:	2300      	movs	r3, #0
 800e84a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	4618      	mov	r0, r3
 800e852:	f000 ffa0 	bl	800f796 <SDMMC_CmdGoIdleState>
 800e856:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d001      	beq.n	800e862 <SD_PowerON+0x2a>
  {
    return errorstate;
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	e072      	b.n	800e948 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	4618      	mov	r0, r3
 800e868:	f000 ffb3 	bl	800f7d2 <SDMMC_CmdOperCond>
 800e86c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d00d      	beq.n	800e890 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	2200      	movs	r2, #0
 800e878:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	4618      	mov	r0, r3
 800e880:	f000 ff89 	bl	800f796 <SDMMC_CmdGoIdleState>
 800e884:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d004      	beq.n	800e896 <SD_PowerON+0x5e>
    {
      return errorstate;
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	e05b      	b.n	800e948 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2201      	movs	r2, #1
 800e894:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e89a:	2b01      	cmp	r3, #1
 800e89c:	d137      	bne.n	800e90e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	2100      	movs	r1, #0
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f000 ffb3 	bl	800f810 <SDMMC_CmdAppCommand>
 800e8aa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d02d      	beq.n	800e90e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e8b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e8b6:	e047      	b.n	800e948 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	2100      	movs	r1, #0
 800e8be:	4618      	mov	r0, r3
 800e8c0:	f000 ffa6 	bl	800f810 <SDMMC_CmdAppCommand>
 800e8c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d001      	beq.n	800e8d0 <SD_PowerON+0x98>
    {
      return errorstate;
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	e03b      	b.n	800e948 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	491e      	ldr	r1, [pc, #120]	; (800e950 <SD_PowerON+0x118>)
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f000 ffbc 	bl	800f854 <SDMMC_CmdAppOperCommand>
 800e8dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d002      	beq.n	800e8ea <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e8e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e8e8:	e02e      	b.n	800e948 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	2100      	movs	r1, #0
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	f000 fe21 	bl	800f538 <SDIO_GetResponse>
 800e8f6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e8f8:	697b      	ldr	r3, [r7, #20]
 800e8fa:	0fdb      	lsrs	r3, r3, #31
 800e8fc:	2b01      	cmp	r3, #1
 800e8fe:	d101      	bne.n	800e904 <SD_PowerON+0xcc>
 800e900:	2301      	movs	r3, #1
 800e902:	e000      	b.n	800e906 <SD_PowerON+0xce>
 800e904:	2300      	movs	r3, #0
 800e906:	613b      	str	r3, [r7, #16]

    count++;
 800e908:	68bb      	ldr	r3, [r7, #8]
 800e90a:	3301      	adds	r3, #1
 800e90c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e90e:	68bb      	ldr	r3, [r7, #8]
 800e910:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e914:	4293      	cmp	r3, r2
 800e916:	d802      	bhi.n	800e91e <SD_PowerON+0xe6>
 800e918:	693b      	ldr	r3, [r7, #16]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d0cc      	beq.n	800e8b8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e91e:	68bb      	ldr	r3, [r7, #8]
 800e920:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e924:	4293      	cmp	r3, r2
 800e926:	d902      	bls.n	800e92e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e928:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e92c:	e00c      	b.n	800e948 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e92e:	697b      	ldr	r3, [r7, #20]
 800e930:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e934:	2b00      	cmp	r3, #0
 800e936:	d003      	beq.n	800e940 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2201      	movs	r2, #1
 800e93c:	645a      	str	r2, [r3, #68]	; 0x44
 800e93e:	e002      	b.n	800e946 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2200      	movs	r2, #0
 800e944:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e946:	2300      	movs	r3, #0
}
 800e948:	4618      	mov	r0, r3
 800e94a:	3718      	adds	r7, #24
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd80      	pop	{r7, pc}
 800e950:	c1100000 	.word	0xc1100000

0800e954 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b084      	sub	sp, #16
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
 800e95c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d102      	bne.n	800e96a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e964:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e968:	e018      	b.n	800e99c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681a      	ldr	r2, [r3, #0]
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e972:	041b      	lsls	r3, r3, #16
 800e974:	4619      	mov	r1, r3
 800e976:	4610      	mov	r0, r2
 800e978:	f001 f830 	bl	800f9dc <SDMMC_CmdSendStatus>
 800e97c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d001      	beq.n	800e988 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	e009      	b.n	800e99c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	2100      	movs	r1, #0
 800e98e:	4618      	mov	r0, r3
 800e990:	f000 fdd2 	bl	800f538 <SDIO_GetResponse>
 800e994:	4602      	mov	r2, r0
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e99a:	2300      	movs	r3, #0
}
 800e99c:	4618      	mov	r0, r3
 800e99e:	3710      	adds	r7, #16
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	bd80      	pop	{r7, pc}

0800e9a4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b086      	sub	sp, #24
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	60fb      	str	r3, [r7, #12]
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	2100      	movs	r1, #0
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f000 fdbc 	bl	800f538 <SDIO_GetResponse>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e9c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e9ca:	d102      	bne.n	800e9d2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e9cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e9d0:	e02f      	b.n	800ea32 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e9d2:	f107 030c 	add.w	r3, r7, #12
 800e9d6:	4619      	mov	r1, r3
 800e9d8:	6878      	ldr	r0, [r7, #4]
 800e9da:	f000 f879 	bl	800ead0 <SD_FindSCR>
 800e9de:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e9e0:	697b      	ldr	r3, [r7, #20]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d001      	beq.n	800e9ea <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e9e6:	697b      	ldr	r3, [r7, #20]
 800e9e8:	e023      	b.n	800ea32 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e9ea:	693b      	ldr	r3, [r7, #16]
 800e9ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d01c      	beq.n	800ea2e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681a      	ldr	r2, [r3, #0]
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e9fc:	041b      	lsls	r3, r3, #16
 800e9fe:	4619      	mov	r1, r3
 800ea00:	4610      	mov	r0, r2
 800ea02:	f000 ff05 	bl	800f810 <SDMMC_CmdAppCommand>
 800ea06:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ea08:	697b      	ldr	r3, [r7, #20]
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d001      	beq.n	800ea12 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ea0e:	697b      	ldr	r3, [r7, #20]
 800ea10:	e00f      	b.n	800ea32 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	2102      	movs	r1, #2
 800ea18:	4618      	mov	r0, r3
 800ea1a:	f000 ff3e 	bl	800f89a <SDMMC_CmdBusWidth>
 800ea1e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ea20:	697b      	ldr	r3, [r7, #20]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d001      	beq.n	800ea2a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800ea26:	697b      	ldr	r3, [r7, #20]
 800ea28:	e003      	b.n	800ea32 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	e001      	b.n	800ea32 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ea2e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ea32:	4618      	mov	r0, r3
 800ea34:	3718      	adds	r7, #24
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd80      	pop	{r7, pc}

0800ea3a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800ea3a:	b580      	push	{r7, lr}
 800ea3c:	b086      	sub	sp, #24
 800ea3e:	af00      	add	r7, sp, #0
 800ea40:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800ea42:	2300      	movs	r3, #0
 800ea44:	60fb      	str	r3, [r7, #12]
 800ea46:	2300      	movs	r3, #0
 800ea48:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	2100      	movs	r1, #0
 800ea50:	4618      	mov	r0, r3
 800ea52:	f000 fd71 	bl	800f538 <SDIO_GetResponse>
 800ea56:	4603      	mov	r3, r0
 800ea58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ea60:	d102      	bne.n	800ea68 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ea62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ea66:	e02f      	b.n	800eac8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ea68:	f107 030c 	add.w	r3, r7, #12
 800ea6c:	4619      	mov	r1, r3
 800ea6e:	6878      	ldr	r0, [r7, #4]
 800ea70:	f000 f82e 	bl	800ead0 <SD_FindSCR>
 800ea74:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ea76:	697b      	ldr	r3, [r7, #20]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d001      	beq.n	800ea80 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800ea7c:	697b      	ldr	r3, [r7, #20]
 800ea7e:	e023      	b.n	800eac8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ea80:	693b      	ldr	r3, [r7, #16]
 800ea82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d01c      	beq.n	800eac4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681a      	ldr	r2, [r3, #0]
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea92:	041b      	lsls	r3, r3, #16
 800ea94:	4619      	mov	r1, r3
 800ea96:	4610      	mov	r0, r2
 800ea98:	f000 feba 	bl	800f810 <SDMMC_CmdAppCommand>
 800ea9c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ea9e:	697b      	ldr	r3, [r7, #20]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d001      	beq.n	800eaa8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800eaa4:	697b      	ldr	r3, [r7, #20]
 800eaa6:	e00f      	b.n	800eac8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	2100      	movs	r1, #0
 800eaae:	4618      	mov	r0, r3
 800eab0:	f000 fef3 	bl	800f89a <SDMMC_CmdBusWidth>
 800eab4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800eab6:	697b      	ldr	r3, [r7, #20]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d001      	beq.n	800eac0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	e003      	b.n	800eac8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800eac0:	2300      	movs	r3, #0
 800eac2:	e001      	b.n	800eac8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800eac4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	3718      	adds	r7, #24
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}

0800ead0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ead0:	b590      	push	{r4, r7, lr}
 800ead2:	b08f      	sub	sp, #60	; 0x3c
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800eada:	f7f8 fa2f 	bl	8006f3c <HAL_GetTick>
 800eade:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800eae0:	2300      	movs	r3, #0
 800eae2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800eae4:	2300      	movs	r3, #0
 800eae6:	60bb      	str	r3, [r7, #8]
 800eae8:	2300      	movs	r3, #0
 800eaea:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	2108      	movs	r1, #8
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	f000 fd5d 	bl	800f5b6 <SDMMC_CmdBlockLength>
 800eafc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800eafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d001      	beq.n	800eb08 <SD_FindSCR+0x38>
  {
    return errorstate;
 800eb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb06:	e0b2      	b.n	800ec6e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681a      	ldr	r2, [r3, #0]
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eb10:	041b      	lsls	r3, r3, #16
 800eb12:	4619      	mov	r1, r3
 800eb14:	4610      	mov	r0, r2
 800eb16:	f000 fe7b 	bl	800f810 <SDMMC_CmdAppCommand>
 800eb1a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800eb1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d001      	beq.n	800eb26 <SD_FindSCR+0x56>
  {
    return errorstate;
 800eb22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb24:	e0a3      	b.n	800ec6e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800eb26:	f04f 33ff 	mov.w	r3, #4294967295
 800eb2a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800eb2c:	2308      	movs	r3, #8
 800eb2e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800eb30:	2330      	movs	r3, #48	; 0x30
 800eb32:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800eb34:	2302      	movs	r3, #2
 800eb36:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800eb38:	2300      	movs	r3, #0
 800eb3a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800eb3c:	2301      	movs	r3, #1
 800eb3e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	f107 0210 	add.w	r2, r7, #16
 800eb48:	4611      	mov	r1, r2
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f000 fd07 	bl	800f55e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	4618      	mov	r0, r3
 800eb56:	f000 fec2 	bl	800f8de <SDMMC_CmdSendSCR>
 800eb5a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800eb5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d02a      	beq.n	800ebb8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800eb62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb64:	e083      	b.n	800ec6e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d00f      	beq.n	800eb94 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	6819      	ldr	r1, [r3, #0]
 800eb78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb7a:	009b      	lsls	r3, r3, #2
 800eb7c:	f107 0208 	add.w	r2, r7, #8
 800eb80:	18d4      	adds	r4, r2, r3
 800eb82:	4608      	mov	r0, r1
 800eb84:	f000 fc67 	bl	800f456 <SDIO_ReadFIFO>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	6023      	str	r3, [r4, #0]
      index++;
 800eb8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb8e:	3301      	adds	r3, #1
 800eb90:	637b      	str	r3, [r7, #52]	; 0x34
 800eb92:	e006      	b.n	800eba2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d012      	beq.n	800ebc8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800eba2:	f7f8 f9cb 	bl	8006f3c <HAL_GetTick>
 800eba6:	4602      	mov	r2, r0
 800eba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebaa:	1ad3      	subs	r3, r2, r3
 800ebac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebb0:	d102      	bne.n	800ebb8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ebb2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ebb6:	e05a      	b.n	800ec6e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebbe:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d0cf      	beq.n	800eb66 <SD_FindSCR+0x96>
 800ebc6:	e000      	b.n	800ebca <SD_FindSCR+0xfa>
      break;
 800ebc8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebd0:	f003 0308 	and.w	r3, r3, #8
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d005      	beq.n	800ebe4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	2208      	movs	r2, #8
 800ebde:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ebe0:	2308      	movs	r3, #8
 800ebe2:	e044      	b.n	800ec6e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebea:	f003 0302 	and.w	r3, r3, #2
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d005      	beq.n	800ebfe <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	2202      	movs	r2, #2
 800ebf8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ebfa:	2302      	movs	r3, #2
 800ebfc:	e037      	b.n	800ec6e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec04:	f003 0320 	and.w	r3, r3, #32
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d005      	beq.n	800ec18 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	2220      	movs	r2, #32
 800ec12:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ec14:	2320      	movs	r3, #32
 800ec16:	e02a      	b.n	800ec6e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	f240 523a 	movw	r2, #1338	; 0x53a
 800ec20:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	061a      	lsls	r2, r3, #24
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	021b      	lsls	r3, r3, #8
 800ec2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ec2e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	0a1b      	lsrs	r3, r3, #8
 800ec34:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ec38:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	0e1b      	lsrs	r3, r3, #24
 800ec3e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ec40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec42:	601a      	str	r2, [r3, #0]
    scr++;
 800ec44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec46:	3304      	adds	r3, #4
 800ec48:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ec4a:	68bb      	ldr	r3, [r7, #8]
 800ec4c:	061a      	lsls	r2, r3, #24
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	021b      	lsls	r3, r3, #8
 800ec52:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ec56:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ec58:	68bb      	ldr	r3, [r7, #8]
 800ec5a:	0a1b      	lsrs	r3, r3, #8
 800ec5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ec60:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ec62:	68bb      	ldr	r3, [r7, #8]
 800ec64:	0e1b      	lsrs	r3, r3, #24
 800ec66:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ec68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec6a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ec6c:	2300      	movs	r3, #0
}
 800ec6e:	4618      	mov	r0, r3
 800ec70:	373c      	adds	r7, #60	; 0x3c
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd90      	pop	{r4, r7, pc}

0800ec76 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ec76:	b580      	push	{r7, lr}
 800ec78:	b086      	sub	sp, #24
 800ec7a:	af00      	add	r7, sp, #0
 800ec7c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec82:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec88:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800ec8a:	693b      	ldr	r3, [r7, #16]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d03f      	beq.n	800ed10 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800ec90:	2300      	movs	r3, #0
 800ec92:	617b      	str	r3, [r7, #20]
 800ec94:	e033      	b.n	800ecfe <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	f000 fbdb 	bl	800f456 <SDIO_ReadFIFO>
 800eca0:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	b2da      	uxtb	r2, r3
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	3301      	adds	r3, #1
 800ecae:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	3b01      	subs	r3, #1
 800ecb4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ecb6:	68bb      	ldr	r3, [r7, #8]
 800ecb8:	0a1b      	lsrs	r3, r3, #8
 800ecba:	b2da      	uxtb	r2, r3
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	3301      	adds	r3, #1
 800ecc4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ecc6:	693b      	ldr	r3, [r7, #16]
 800ecc8:	3b01      	subs	r3, #1
 800ecca:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800eccc:	68bb      	ldr	r3, [r7, #8]
 800ecce:	0c1b      	lsrs	r3, r3, #16
 800ecd0:	b2da      	uxtb	r2, r3
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	3301      	adds	r3, #1
 800ecda:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ecdc:	693b      	ldr	r3, [r7, #16]
 800ecde:	3b01      	subs	r3, #1
 800ece0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ece2:	68bb      	ldr	r3, [r7, #8]
 800ece4:	0e1b      	lsrs	r3, r3, #24
 800ece6:	b2da      	uxtb	r2, r3
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	3301      	adds	r3, #1
 800ecf0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ecf2:	693b      	ldr	r3, [r7, #16]
 800ecf4:	3b01      	subs	r3, #1
 800ecf6:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800ecf8:	697b      	ldr	r3, [r7, #20]
 800ecfa:	3301      	adds	r3, #1
 800ecfc:	617b      	str	r3, [r7, #20]
 800ecfe:	697b      	ldr	r3, [r7, #20]
 800ed00:	2b07      	cmp	r3, #7
 800ed02:	d9c8      	bls.n	800ec96 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	68fa      	ldr	r2, [r7, #12]
 800ed08:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	693a      	ldr	r2, [r7, #16]
 800ed0e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800ed10:	bf00      	nop
 800ed12:	3718      	adds	r7, #24
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bd80      	pop	{r7, pc}

0800ed18 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b086      	sub	sp, #24
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	6a1b      	ldr	r3, [r3, #32]
 800ed24:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed2a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800ed2c:	693b      	ldr	r3, [r7, #16]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d043      	beq.n	800edba <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800ed32:	2300      	movs	r3, #0
 800ed34:	617b      	str	r3, [r7, #20]
 800ed36:	e037      	b.n	800eda8 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	781b      	ldrb	r3, [r3, #0]
 800ed3c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	3301      	adds	r3, #1
 800ed42:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ed44:	693b      	ldr	r3, [r7, #16]
 800ed46:	3b01      	subs	r3, #1
 800ed48:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	781b      	ldrb	r3, [r3, #0]
 800ed4e:	021a      	lsls	r2, r3, #8
 800ed50:	68bb      	ldr	r3, [r7, #8]
 800ed52:	4313      	orrs	r3, r2
 800ed54:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	3301      	adds	r3, #1
 800ed5a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ed5c:	693b      	ldr	r3, [r7, #16]
 800ed5e:	3b01      	subs	r3, #1
 800ed60:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	781b      	ldrb	r3, [r3, #0]
 800ed66:	041a      	lsls	r2, r3, #16
 800ed68:	68bb      	ldr	r3, [r7, #8]
 800ed6a:	4313      	orrs	r3, r2
 800ed6c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	3301      	adds	r3, #1
 800ed72:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	3b01      	subs	r3, #1
 800ed78:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	781b      	ldrb	r3, [r3, #0]
 800ed7e:	061a      	lsls	r2, r3, #24
 800ed80:	68bb      	ldr	r3, [r7, #8]
 800ed82:	4313      	orrs	r3, r2
 800ed84:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	3301      	adds	r3, #1
 800ed8a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ed8c:	693b      	ldr	r3, [r7, #16]
 800ed8e:	3b01      	subs	r3, #1
 800ed90:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	f107 0208 	add.w	r2, r7, #8
 800ed9a:	4611      	mov	r1, r2
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	f000 fb67 	bl	800f470 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800eda2:	697b      	ldr	r3, [r7, #20]
 800eda4:	3301      	adds	r3, #1
 800eda6:	617b      	str	r3, [r7, #20]
 800eda8:	697b      	ldr	r3, [r7, #20]
 800edaa:	2b07      	cmp	r3, #7
 800edac:	d9c4      	bls.n	800ed38 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	68fa      	ldr	r2, [r7, #12]
 800edb2:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	693a      	ldr	r2, [r7, #16]
 800edb8:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800edba:	bf00      	nop
 800edbc:	3718      	adds	r7, #24
 800edbe:	46bd      	mov	sp, r7
 800edc0:	bd80      	pop	{r7, pc}

0800edc2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800edc2:	b580      	push	{r7, lr}
 800edc4:	b082      	sub	sp, #8
 800edc6:	af00      	add	r7, sp, #0
 800edc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d101      	bne.n	800edd4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800edd0:	2301      	movs	r3, #1
 800edd2:	e041      	b.n	800ee58 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800edda:	b2db      	uxtb	r3, r3
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d106      	bne.n	800edee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	2200      	movs	r2, #0
 800ede4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ede8:	6878      	ldr	r0, [r7, #4]
 800edea:	f7f7 ff21 	bl	8006c30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	2202      	movs	r2, #2
 800edf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681a      	ldr	r2, [r3, #0]
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	3304      	adds	r3, #4
 800edfe:	4619      	mov	r1, r3
 800ee00:	4610      	mov	r0, r2
 800ee02:	f000 f9cd 	bl	800f1a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	2201      	movs	r2, #1
 800ee0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	2201      	movs	r2, #1
 800ee12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	2201      	movs	r2, #1
 800ee1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	2201      	movs	r2, #1
 800ee22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	2201      	movs	r2, #1
 800ee2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	2201      	movs	r2, #1
 800ee32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	2201      	movs	r2, #1
 800ee3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	2201      	movs	r2, #1
 800ee42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2201      	movs	r2, #1
 800ee4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	2201      	movs	r2, #1
 800ee52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ee56:	2300      	movs	r3, #0
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3708      	adds	r7, #8
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}

0800ee60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ee60:	b480      	push	{r7}
 800ee62:	b085      	sub	sp, #20
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ee6e:	b2db      	uxtb	r3, r3
 800ee70:	2b01      	cmp	r3, #1
 800ee72:	d001      	beq.n	800ee78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ee74:	2301      	movs	r3, #1
 800ee76:	e04e      	b.n	800ef16 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2202      	movs	r2, #2
 800ee7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	68da      	ldr	r2, [r3, #12]
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	f042 0201 	orr.w	r2, r2, #1
 800ee8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	4a23      	ldr	r2, [pc, #140]	; (800ef24 <HAL_TIM_Base_Start_IT+0xc4>)
 800ee96:	4293      	cmp	r3, r2
 800ee98:	d022      	beq.n	800eee0 <HAL_TIM_Base_Start_IT+0x80>
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eea2:	d01d      	beq.n	800eee0 <HAL_TIM_Base_Start_IT+0x80>
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	4a1f      	ldr	r2, [pc, #124]	; (800ef28 <HAL_TIM_Base_Start_IT+0xc8>)
 800eeaa:	4293      	cmp	r3, r2
 800eeac:	d018      	beq.n	800eee0 <HAL_TIM_Base_Start_IT+0x80>
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	4a1e      	ldr	r2, [pc, #120]	; (800ef2c <HAL_TIM_Base_Start_IT+0xcc>)
 800eeb4:	4293      	cmp	r3, r2
 800eeb6:	d013      	beq.n	800eee0 <HAL_TIM_Base_Start_IT+0x80>
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	4a1c      	ldr	r2, [pc, #112]	; (800ef30 <HAL_TIM_Base_Start_IT+0xd0>)
 800eebe:	4293      	cmp	r3, r2
 800eec0:	d00e      	beq.n	800eee0 <HAL_TIM_Base_Start_IT+0x80>
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	4a1b      	ldr	r2, [pc, #108]	; (800ef34 <HAL_TIM_Base_Start_IT+0xd4>)
 800eec8:	4293      	cmp	r3, r2
 800eeca:	d009      	beq.n	800eee0 <HAL_TIM_Base_Start_IT+0x80>
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	4a19      	ldr	r2, [pc, #100]	; (800ef38 <HAL_TIM_Base_Start_IT+0xd8>)
 800eed2:	4293      	cmp	r3, r2
 800eed4:	d004      	beq.n	800eee0 <HAL_TIM_Base_Start_IT+0x80>
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	4a18      	ldr	r2, [pc, #96]	; (800ef3c <HAL_TIM_Base_Start_IT+0xdc>)
 800eedc:	4293      	cmp	r3, r2
 800eede:	d111      	bne.n	800ef04 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	689b      	ldr	r3, [r3, #8]
 800eee6:	f003 0307 	and.w	r3, r3, #7
 800eeea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	2b06      	cmp	r3, #6
 800eef0:	d010      	beq.n	800ef14 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	681a      	ldr	r2, [r3, #0]
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	f042 0201 	orr.w	r2, r2, #1
 800ef00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef02:	e007      	b.n	800ef14 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	681a      	ldr	r2, [r3, #0]
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	f042 0201 	orr.w	r2, r2, #1
 800ef12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ef14:	2300      	movs	r3, #0
}
 800ef16:	4618      	mov	r0, r3
 800ef18:	3714      	adds	r7, #20
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef20:	4770      	bx	lr
 800ef22:	bf00      	nop
 800ef24:	40010000 	.word	0x40010000
 800ef28:	40000400 	.word	0x40000400
 800ef2c:	40000800 	.word	0x40000800
 800ef30:	40000c00 	.word	0x40000c00
 800ef34:	40010400 	.word	0x40010400
 800ef38:	40014000 	.word	0x40014000
 800ef3c:	40001800 	.word	0x40001800

0800ef40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b082      	sub	sp, #8
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	691b      	ldr	r3, [r3, #16]
 800ef4e:	f003 0302 	and.w	r3, r3, #2
 800ef52:	2b02      	cmp	r3, #2
 800ef54:	d122      	bne.n	800ef9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	68db      	ldr	r3, [r3, #12]
 800ef5c:	f003 0302 	and.w	r3, r3, #2
 800ef60:	2b02      	cmp	r3, #2
 800ef62:	d11b      	bne.n	800ef9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	f06f 0202 	mvn.w	r2, #2
 800ef6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	2201      	movs	r2, #1
 800ef72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	699b      	ldr	r3, [r3, #24]
 800ef7a:	f003 0303 	and.w	r3, r3, #3
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d003      	beq.n	800ef8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ef82:	6878      	ldr	r0, [r7, #4]
 800ef84:	f000 f8ee 	bl	800f164 <HAL_TIM_IC_CaptureCallback>
 800ef88:	e005      	b.n	800ef96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef8a:	6878      	ldr	r0, [r7, #4]
 800ef8c:	f000 f8e0 	bl	800f150 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	f000 f8f1 	bl	800f178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	2200      	movs	r2, #0
 800ef9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	691b      	ldr	r3, [r3, #16]
 800efa2:	f003 0304 	and.w	r3, r3, #4
 800efa6:	2b04      	cmp	r3, #4
 800efa8:	d122      	bne.n	800eff0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	68db      	ldr	r3, [r3, #12]
 800efb0:	f003 0304 	and.w	r3, r3, #4
 800efb4:	2b04      	cmp	r3, #4
 800efb6:	d11b      	bne.n	800eff0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	f06f 0204 	mvn.w	r2, #4
 800efc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	2202      	movs	r2, #2
 800efc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	699b      	ldr	r3, [r3, #24]
 800efce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d003      	beq.n	800efde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800efd6:	6878      	ldr	r0, [r7, #4]
 800efd8:	f000 f8c4 	bl	800f164 <HAL_TIM_IC_CaptureCallback>
 800efdc:	e005      	b.n	800efea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800efde:	6878      	ldr	r0, [r7, #4]
 800efe0:	f000 f8b6 	bl	800f150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800efe4:	6878      	ldr	r0, [r7, #4]
 800efe6:	f000 f8c7 	bl	800f178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	2200      	movs	r2, #0
 800efee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	681b      	ldr	r3, [r3, #0]
 800eff4:	691b      	ldr	r3, [r3, #16]
 800eff6:	f003 0308 	and.w	r3, r3, #8
 800effa:	2b08      	cmp	r3, #8
 800effc:	d122      	bne.n	800f044 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	68db      	ldr	r3, [r3, #12]
 800f004:	f003 0308 	and.w	r3, r3, #8
 800f008:	2b08      	cmp	r3, #8
 800f00a:	d11b      	bne.n	800f044 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	f06f 0208 	mvn.w	r2, #8
 800f014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	2204      	movs	r2, #4
 800f01a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	69db      	ldr	r3, [r3, #28]
 800f022:	f003 0303 	and.w	r3, r3, #3
 800f026:	2b00      	cmp	r3, #0
 800f028:	d003      	beq.n	800f032 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f02a:	6878      	ldr	r0, [r7, #4]
 800f02c:	f000 f89a 	bl	800f164 <HAL_TIM_IC_CaptureCallback>
 800f030:	e005      	b.n	800f03e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f032:	6878      	ldr	r0, [r7, #4]
 800f034:	f000 f88c 	bl	800f150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f038:	6878      	ldr	r0, [r7, #4]
 800f03a:	f000 f89d 	bl	800f178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	2200      	movs	r2, #0
 800f042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	691b      	ldr	r3, [r3, #16]
 800f04a:	f003 0310 	and.w	r3, r3, #16
 800f04e:	2b10      	cmp	r3, #16
 800f050:	d122      	bne.n	800f098 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	68db      	ldr	r3, [r3, #12]
 800f058:	f003 0310 	and.w	r3, r3, #16
 800f05c:	2b10      	cmp	r3, #16
 800f05e:	d11b      	bne.n	800f098 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	f06f 0210 	mvn.w	r2, #16
 800f068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	2208      	movs	r2, #8
 800f06e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	69db      	ldr	r3, [r3, #28]
 800f076:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d003      	beq.n	800f086 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f07e:	6878      	ldr	r0, [r7, #4]
 800f080:	f000 f870 	bl	800f164 <HAL_TIM_IC_CaptureCallback>
 800f084:	e005      	b.n	800f092 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f086:	6878      	ldr	r0, [r7, #4]
 800f088:	f000 f862 	bl	800f150 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f08c:	6878      	ldr	r0, [r7, #4]
 800f08e:	f000 f873 	bl	800f178 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	2200      	movs	r2, #0
 800f096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	691b      	ldr	r3, [r3, #16]
 800f09e:	f003 0301 	and.w	r3, r3, #1
 800f0a2:	2b01      	cmp	r3, #1
 800f0a4:	d10e      	bne.n	800f0c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	681b      	ldr	r3, [r3, #0]
 800f0aa:	68db      	ldr	r3, [r3, #12]
 800f0ac:	f003 0301 	and.w	r3, r3, #1
 800f0b0:	2b01      	cmp	r3, #1
 800f0b2:	d107      	bne.n	800f0c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	f06f 0201 	mvn.w	r2, #1
 800f0bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f0be:	6878      	ldr	r0, [r7, #4]
 800f0c0:	f7f7 fa48 	bl	8006554 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	691b      	ldr	r3, [r3, #16]
 800f0ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0ce:	2b80      	cmp	r3, #128	; 0x80
 800f0d0:	d10e      	bne.n	800f0f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	68db      	ldr	r3, [r3, #12]
 800f0d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0dc:	2b80      	cmp	r3, #128	; 0x80
 800f0de:	d107      	bne.n	800f0f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f0e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	f000 f97e 	bl	800f3ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	691b      	ldr	r3, [r3, #16]
 800f0f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0fa:	2b40      	cmp	r3, #64	; 0x40
 800f0fc:	d10e      	bne.n	800f11c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	68db      	ldr	r3, [r3, #12]
 800f104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f108:	2b40      	cmp	r3, #64	; 0x40
 800f10a:	d107      	bne.n	800f11c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f116:	6878      	ldr	r0, [r7, #4]
 800f118:	f000 f838 	bl	800f18c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	691b      	ldr	r3, [r3, #16]
 800f122:	f003 0320 	and.w	r3, r3, #32
 800f126:	2b20      	cmp	r3, #32
 800f128:	d10e      	bne.n	800f148 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	68db      	ldr	r3, [r3, #12]
 800f130:	f003 0320 	and.w	r3, r3, #32
 800f134:	2b20      	cmp	r3, #32
 800f136:	d107      	bne.n	800f148 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	f06f 0220 	mvn.w	r2, #32
 800f140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f142:	6878      	ldr	r0, [r7, #4]
 800f144:	f000 f948 	bl	800f3d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f148:	bf00      	nop
 800f14a:	3708      	adds	r7, #8
 800f14c:	46bd      	mov	sp, r7
 800f14e:	bd80      	pop	{r7, pc}

0800f150 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f150:	b480      	push	{r7}
 800f152:	b083      	sub	sp, #12
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f158:	bf00      	nop
 800f15a:	370c      	adds	r7, #12
 800f15c:	46bd      	mov	sp, r7
 800f15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f162:	4770      	bx	lr

0800f164 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f164:	b480      	push	{r7}
 800f166:	b083      	sub	sp, #12
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f16c:	bf00      	nop
 800f16e:	370c      	adds	r7, #12
 800f170:	46bd      	mov	sp, r7
 800f172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f176:	4770      	bx	lr

0800f178 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f178:	b480      	push	{r7}
 800f17a:	b083      	sub	sp, #12
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f180:	bf00      	nop
 800f182:	370c      	adds	r7, #12
 800f184:	46bd      	mov	sp, r7
 800f186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18a:	4770      	bx	lr

0800f18c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f18c:	b480      	push	{r7}
 800f18e:	b083      	sub	sp, #12
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f194:	bf00      	nop
 800f196:	370c      	adds	r7, #12
 800f198:	46bd      	mov	sp, r7
 800f19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19e:	4770      	bx	lr

0800f1a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f1a0:	b480      	push	{r7}
 800f1a2:	b085      	sub	sp, #20
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
 800f1a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	4a40      	ldr	r2, [pc, #256]	; (800f2b4 <TIM_Base_SetConfig+0x114>)
 800f1b4:	4293      	cmp	r3, r2
 800f1b6:	d013      	beq.n	800f1e0 <TIM_Base_SetConfig+0x40>
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f1be:	d00f      	beq.n	800f1e0 <TIM_Base_SetConfig+0x40>
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	4a3d      	ldr	r2, [pc, #244]	; (800f2b8 <TIM_Base_SetConfig+0x118>)
 800f1c4:	4293      	cmp	r3, r2
 800f1c6:	d00b      	beq.n	800f1e0 <TIM_Base_SetConfig+0x40>
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	4a3c      	ldr	r2, [pc, #240]	; (800f2bc <TIM_Base_SetConfig+0x11c>)
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	d007      	beq.n	800f1e0 <TIM_Base_SetConfig+0x40>
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	4a3b      	ldr	r2, [pc, #236]	; (800f2c0 <TIM_Base_SetConfig+0x120>)
 800f1d4:	4293      	cmp	r3, r2
 800f1d6:	d003      	beq.n	800f1e0 <TIM_Base_SetConfig+0x40>
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	4a3a      	ldr	r2, [pc, #232]	; (800f2c4 <TIM_Base_SetConfig+0x124>)
 800f1dc:	4293      	cmp	r3, r2
 800f1de:	d108      	bne.n	800f1f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f1e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f1e8:	683b      	ldr	r3, [r7, #0]
 800f1ea:	685b      	ldr	r3, [r3, #4]
 800f1ec:	68fa      	ldr	r2, [r7, #12]
 800f1ee:	4313      	orrs	r3, r2
 800f1f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	4a2f      	ldr	r2, [pc, #188]	; (800f2b4 <TIM_Base_SetConfig+0x114>)
 800f1f6:	4293      	cmp	r3, r2
 800f1f8:	d02b      	beq.n	800f252 <TIM_Base_SetConfig+0xb2>
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f200:	d027      	beq.n	800f252 <TIM_Base_SetConfig+0xb2>
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	4a2c      	ldr	r2, [pc, #176]	; (800f2b8 <TIM_Base_SetConfig+0x118>)
 800f206:	4293      	cmp	r3, r2
 800f208:	d023      	beq.n	800f252 <TIM_Base_SetConfig+0xb2>
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	4a2b      	ldr	r2, [pc, #172]	; (800f2bc <TIM_Base_SetConfig+0x11c>)
 800f20e:	4293      	cmp	r3, r2
 800f210:	d01f      	beq.n	800f252 <TIM_Base_SetConfig+0xb2>
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	4a2a      	ldr	r2, [pc, #168]	; (800f2c0 <TIM_Base_SetConfig+0x120>)
 800f216:	4293      	cmp	r3, r2
 800f218:	d01b      	beq.n	800f252 <TIM_Base_SetConfig+0xb2>
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	4a29      	ldr	r2, [pc, #164]	; (800f2c4 <TIM_Base_SetConfig+0x124>)
 800f21e:	4293      	cmp	r3, r2
 800f220:	d017      	beq.n	800f252 <TIM_Base_SetConfig+0xb2>
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	4a28      	ldr	r2, [pc, #160]	; (800f2c8 <TIM_Base_SetConfig+0x128>)
 800f226:	4293      	cmp	r3, r2
 800f228:	d013      	beq.n	800f252 <TIM_Base_SetConfig+0xb2>
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	4a27      	ldr	r2, [pc, #156]	; (800f2cc <TIM_Base_SetConfig+0x12c>)
 800f22e:	4293      	cmp	r3, r2
 800f230:	d00f      	beq.n	800f252 <TIM_Base_SetConfig+0xb2>
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	4a26      	ldr	r2, [pc, #152]	; (800f2d0 <TIM_Base_SetConfig+0x130>)
 800f236:	4293      	cmp	r3, r2
 800f238:	d00b      	beq.n	800f252 <TIM_Base_SetConfig+0xb2>
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	4a25      	ldr	r2, [pc, #148]	; (800f2d4 <TIM_Base_SetConfig+0x134>)
 800f23e:	4293      	cmp	r3, r2
 800f240:	d007      	beq.n	800f252 <TIM_Base_SetConfig+0xb2>
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	4a24      	ldr	r2, [pc, #144]	; (800f2d8 <TIM_Base_SetConfig+0x138>)
 800f246:	4293      	cmp	r3, r2
 800f248:	d003      	beq.n	800f252 <TIM_Base_SetConfig+0xb2>
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	4a23      	ldr	r2, [pc, #140]	; (800f2dc <TIM_Base_SetConfig+0x13c>)
 800f24e:	4293      	cmp	r3, r2
 800f250:	d108      	bne.n	800f264 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	68db      	ldr	r3, [r3, #12]
 800f25e:	68fa      	ldr	r2, [r7, #12]
 800f260:	4313      	orrs	r3, r2
 800f262:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f26a:	683b      	ldr	r3, [r7, #0]
 800f26c:	695b      	ldr	r3, [r3, #20]
 800f26e:	4313      	orrs	r3, r2
 800f270:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	68fa      	ldr	r2, [r7, #12]
 800f276:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f278:	683b      	ldr	r3, [r7, #0]
 800f27a:	689a      	ldr	r2, [r3, #8]
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	681a      	ldr	r2, [r3, #0]
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	4a0a      	ldr	r2, [pc, #40]	; (800f2b4 <TIM_Base_SetConfig+0x114>)
 800f28c:	4293      	cmp	r3, r2
 800f28e:	d003      	beq.n	800f298 <TIM_Base_SetConfig+0xf8>
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	4a0c      	ldr	r2, [pc, #48]	; (800f2c4 <TIM_Base_SetConfig+0x124>)
 800f294:	4293      	cmp	r3, r2
 800f296:	d103      	bne.n	800f2a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	691a      	ldr	r2, [r3, #16]
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	2201      	movs	r2, #1
 800f2a4:	615a      	str	r2, [r3, #20]
}
 800f2a6:	bf00      	nop
 800f2a8:	3714      	adds	r7, #20
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b0:	4770      	bx	lr
 800f2b2:	bf00      	nop
 800f2b4:	40010000 	.word	0x40010000
 800f2b8:	40000400 	.word	0x40000400
 800f2bc:	40000800 	.word	0x40000800
 800f2c0:	40000c00 	.word	0x40000c00
 800f2c4:	40010400 	.word	0x40010400
 800f2c8:	40014000 	.word	0x40014000
 800f2cc:	40014400 	.word	0x40014400
 800f2d0:	40014800 	.word	0x40014800
 800f2d4:	40001800 	.word	0x40001800
 800f2d8:	40001c00 	.word	0x40001c00
 800f2dc:	40002000 	.word	0x40002000

0800f2e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f2e0:	b480      	push	{r7}
 800f2e2:	b085      	sub	sp, #20
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	6078      	str	r0, [r7, #4]
 800f2e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f2f0:	2b01      	cmp	r3, #1
 800f2f2:	d101      	bne.n	800f2f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f2f4:	2302      	movs	r3, #2
 800f2f6:	e05a      	b.n	800f3ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	2201      	movs	r2, #1
 800f2fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	2202      	movs	r2, #2
 800f304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	685b      	ldr	r3, [r3, #4]
 800f30e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	689b      	ldr	r3, [r3, #8]
 800f316:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f31e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	68fa      	ldr	r2, [r7, #12]
 800f326:	4313      	orrs	r3, r2
 800f328:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	68fa      	ldr	r2, [r7, #12]
 800f330:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	4a21      	ldr	r2, [pc, #132]	; (800f3bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f338:	4293      	cmp	r3, r2
 800f33a:	d022      	beq.n	800f382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f344:	d01d      	beq.n	800f382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	4a1d      	ldr	r2, [pc, #116]	; (800f3c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f34c:	4293      	cmp	r3, r2
 800f34e:	d018      	beq.n	800f382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	4a1b      	ldr	r2, [pc, #108]	; (800f3c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f356:	4293      	cmp	r3, r2
 800f358:	d013      	beq.n	800f382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	4a1a      	ldr	r2, [pc, #104]	; (800f3c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f360:	4293      	cmp	r3, r2
 800f362:	d00e      	beq.n	800f382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	4a18      	ldr	r2, [pc, #96]	; (800f3cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f36a:	4293      	cmp	r3, r2
 800f36c:	d009      	beq.n	800f382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	4a17      	ldr	r2, [pc, #92]	; (800f3d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f374:	4293      	cmp	r3, r2
 800f376:	d004      	beq.n	800f382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	4a15      	ldr	r2, [pc, #84]	; (800f3d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f37e:	4293      	cmp	r3, r2
 800f380:	d10c      	bne.n	800f39c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f382:	68bb      	ldr	r3, [r7, #8]
 800f384:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f388:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	685b      	ldr	r3, [r3, #4]
 800f38e:	68ba      	ldr	r2, [r7, #8]
 800f390:	4313      	orrs	r3, r2
 800f392:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	68ba      	ldr	r2, [r7, #8]
 800f39a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	2201      	movs	r2, #1
 800f3a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f3ac:	2300      	movs	r3, #0
}
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	3714      	adds	r7, #20
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b8:	4770      	bx	lr
 800f3ba:	bf00      	nop
 800f3bc:	40010000 	.word	0x40010000
 800f3c0:	40000400 	.word	0x40000400
 800f3c4:	40000800 	.word	0x40000800
 800f3c8:	40000c00 	.word	0x40000c00
 800f3cc:	40010400 	.word	0x40010400
 800f3d0:	40014000 	.word	0x40014000
 800f3d4:	40001800 	.word	0x40001800

0800f3d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f3d8:	b480      	push	{r7}
 800f3da:	b083      	sub	sp, #12
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f3e0:	bf00      	nop
 800f3e2:	370c      	adds	r7, #12
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ea:	4770      	bx	lr

0800f3ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f3ec:	b480      	push	{r7}
 800f3ee:	b083      	sub	sp, #12
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f3f4:	bf00      	nop
 800f3f6:	370c      	adds	r7, #12
 800f3f8:	46bd      	mov	sp, r7
 800f3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fe:	4770      	bx	lr

0800f400 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800f400:	b084      	sub	sp, #16
 800f402:	b480      	push	{r7}
 800f404:	b085      	sub	sp, #20
 800f406:	af00      	add	r7, sp, #0
 800f408:	6078      	str	r0, [r7, #4]
 800f40a:	f107 001c 	add.w	r0, r7, #28
 800f40e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800f412:	2300      	movs	r3, #0
 800f414:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800f416:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800f418:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800f41a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800f41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800f41e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800f420:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800f422:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800f424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800f426:	431a      	orrs	r2, r3
             Init.ClockDiv
 800f428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800f42a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800f42c:	68fa      	ldr	r2, [r7, #12]
 800f42e:	4313      	orrs	r3, r2
 800f430:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	685b      	ldr	r3, [r3, #4]
 800f436:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800f43a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f43e:	68fa      	ldr	r2, [r7, #12]
 800f440:	431a      	orrs	r2, r3
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f446:	2300      	movs	r3, #0
}
 800f448:	4618      	mov	r0, r3
 800f44a:	3714      	adds	r7, #20
 800f44c:	46bd      	mov	sp, r7
 800f44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f452:	b004      	add	sp, #16
 800f454:	4770      	bx	lr

0800f456 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800f456:	b480      	push	{r7}
 800f458:	b083      	sub	sp, #12
 800f45a:	af00      	add	r7, sp, #0
 800f45c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800f464:	4618      	mov	r0, r3
 800f466:	370c      	adds	r7, #12
 800f468:	46bd      	mov	sp, r7
 800f46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46e:	4770      	bx	lr

0800f470 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800f470:	b480      	push	{r7}
 800f472:	b083      	sub	sp, #12
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
 800f478:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	681a      	ldr	r2, [r3, #0]
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f484:	2300      	movs	r3, #0
}
 800f486:	4618      	mov	r0, r3
 800f488:	370c      	adds	r7, #12
 800f48a:	46bd      	mov	sp, r7
 800f48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f490:	4770      	bx	lr

0800f492 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800f492:	b480      	push	{r7}
 800f494:	b083      	sub	sp, #12
 800f496:	af00      	add	r7, sp, #0
 800f498:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	2203      	movs	r2, #3
 800f49e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800f4a0:	2300      	movs	r3, #0
}
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	370c      	adds	r7, #12
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ac:	4770      	bx	lr

0800f4ae <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800f4ae:	b480      	push	{r7}
 800f4b0:	b083      	sub	sp, #12
 800f4b2:	af00      	add	r7, sp, #0
 800f4b4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	f003 0303 	and.w	r3, r3, #3
}
 800f4be:	4618      	mov	r0, r3
 800f4c0:	370c      	adds	r7, #12
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c8:	4770      	bx	lr

0800f4ca <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800f4ca:	b480      	push	{r7}
 800f4cc:	b085      	sub	sp, #20
 800f4ce:	af00      	add	r7, sp, #0
 800f4d0:	6078      	str	r0, [r7, #4]
 800f4d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800f4d8:	683b      	ldr	r3, [r7, #0]
 800f4da:	681a      	ldr	r2, [r3, #0]
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f4e0:	683b      	ldr	r3, [r7, #0]
 800f4e2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f4e8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800f4ea:	683b      	ldr	r3, [r7, #0]
 800f4ec:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800f4ee:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800f4f4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f4f6:	68fa      	ldr	r2, [r7, #12]
 800f4f8:	4313      	orrs	r3, r2
 800f4fa:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	68db      	ldr	r3, [r3, #12]
 800f500:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f504:	f023 030f 	bic.w	r3, r3, #15
 800f508:	68fa      	ldr	r2, [r7, #12]
 800f50a:	431a      	orrs	r2, r3
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800f510:	2300      	movs	r3, #0
}
 800f512:	4618      	mov	r0, r3
 800f514:	3714      	adds	r7, #20
 800f516:	46bd      	mov	sp, r7
 800f518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51c:	4770      	bx	lr

0800f51e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800f51e:	b480      	push	{r7}
 800f520:	b083      	sub	sp, #12
 800f522:	af00      	add	r7, sp, #0
 800f524:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	691b      	ldr	r3, [r3, #16]
 800f52a:	b2db      	uxtb	r3, r3
}
 800f52c:	4618      	mov	r0, r3
 800f52e:	370c      	adds	r7, #12
 800f530:	46bd      	mov	sp, r7
 800f532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f536:	4770      	bx	lr

0800f538 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800f538:	b480      	push	{r7}
 800f53a:	b085      	sub	sp, #20
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
 800f540:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	3314      	adds	r3, #20
 800f546:	461a      	mov	r2, r3
 800f548:	683b      	ldr	r3, [r7, #0]
 800f54a:	4413      	add	r3, r2
 800f54c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	681b      	ldr	r3, [r3, #0]
}  
 800f552:	4618      	mov	r0, r3
 800f554:	3714      	adds	r7, #20
 800f556:	46bd      	mov	sp, r7
 800f558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55c:	4770      	bx	lr

0800f55e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800f55e:	b480      	push	{r7}
 800f560:	b085      	sub	sp, #20
 800f562:	af00      	add	r7, sp, #0
 800f564:	6078      	str	r0, [r7, #4]
 800f566:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f568:	2300      	movs	r3, #0
 800f56a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800f56c:	683b      	ldr	r3, [r7, #0]
 800f56e:	681a      	ldr	r2, [r3, #0]
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800f574:	683b      	ldr	r3, [r7, #0]
 800f576:	685a      	ldr	r2, [r3, #4]
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f584:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800f586:	683b      	ldr	r3, [r7, #0]
 800f588:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800f58a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800f58c:	683b      	ldr	r3, [r7, #0]
 800f58e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800f590:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f592:	68fa      	ldr	r2, [r7, #12]
 800f594:	4313      	orrs	r3, r2
 800f596:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f59c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	431a      	orrs	r2, r3
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800f5a8:	2300      	movs	r3, #0

}
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	3714      	adds	r7, #20
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b4:	4770      	bx	lr

0800f5b6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800f5b6:	b580      	push	{r7, lr}
 800f5b8:	b088      	sub	sp, #32
 800f5ba:	af00      	add	r7, sp, #0
 800f5bc:	6078      	str	r0, [r7, #4]
 800f5be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800f5c4:	2310      	movs	r3, #16
 800f5c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f5c8:	2340      	movs	r3, #64	; 0x40
 800f5ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f5d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f5d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f5d6:	f107 0308 	add.w	r3, r7, #8
 800f5da:	4619      	mov	r1, r3
 800f5dc:	6878      	ldr	r0, [r7, #4]
 800f5de:	f7ff ff74 	bl	800f4ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800f5e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800f5e6:	2110      	movs	r1, #16
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f000 fa19 	bl	800fa20 <SDMMC_GetCmdResp1>
 800f5ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f5f0:	69fb      	ldr	r3, [r7, #28]
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	3720      	adds	r7, #32
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd80      	pop	{r7, pc}

0800f5fa <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800f5fa:	b580      	push	{r7, lr}
 800f5fc:	b088      	sub	sp, #32
 800f5fe:	af00      	add	r7, sp, #0
 800f600:	6078      	str	r0, [r7, #4]
 800f602:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f604:	683b      	ldr	r3, [r7, #0]
 800f606:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800f608:	2311      	movs	r3, #17
 800f60a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f60c:	2340      	movs	r3, #64	; 0x40
 800f60e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f610:	2300      	movs	r3, #0
 800f612:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f618:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f61a:	f107 0308 	add.w	r3, r7, #8
 800f61e:	4619      	mov	r1, r3
 800f620:	6878      	ldr	r0, [r7, #4]
 800f622:	f7ff ff52 	bl	800f4ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800f626:	f241 3288 	movw	r2, #5000	; 0x1388
 800f62a:	2111      	movs	r1, #17
 800f62c:	6878      	ldr	r0, [r7, #4]
 800f62e:	f000 f9f7 	bl	800fa20 <SDMMC_GetCmdResp1>
 800f632:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f634:	69fb      	ldr	r3, [r7, #28]
}
 800f636:	4618      	mov	r0, r3
 800f638:	3720      	adds	r7, #32
 800f63a:	46bd      	mov	sp, r7
 800f63c:	bd80      	pop	{r7, pc}

0800f63e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800f63e:	b580      	push	{r7, lr}
 800f640:	b088      	sub	sp, #32
 800f642:	af00      	add	r7, sp, #0
 800f644:	6078      	str	r0, [r7, #4]
 800f646:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800f64c:	2312      	movs	r3, #18
 800f64e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f650:	2340      	movs	r3, #64	; 0x40
 800f652:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f654:	2300      	movs	r3, #0
 800f656:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f658:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f65c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f65e:	f107 0308 	add.w	r3, r7, #8
 800f662:	4619      	mov	r1, r3
 800f664:	6878      	ldr	r0, [r7, #4]
 800f666:	f7ff ff30 	bl	800f4ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800f66a:	f241 3288 	movw	r2, #5000	; 0x1388
 800f66e:	2112      	movs	r1, #18
 800f670:	6878      	ldr	r0, [r7, #4]
 800f672:	f000 f9d5 	bl	800fa20 <SDMMC_GetCmdResp1>
 800f676:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f678:	69fb      	ldr	r3, [r7, #28]
}
 800f67a:	4618      	mov	r0, r3
 800f67c:	3720      	adds	r7, #32
 800f67e:	46bd      	mov	sp, r7
 800f680:	bd80      	pop	{r7, pc}

0800f682 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800f682:	b580      	push	{r7, lr}
 800f684:	b088      	sub	sp, #32
 800f686:	af00      	add	r7, sp, #0
 800f688:	6078      	str	r0, [r7, #4]
 800f68a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800f690:	2318      	movs	r3, #24
 800f692:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f694:	2340      	movs	r3, #64	; 0x40
 800f696:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f698:	2300      	movs	r3, #0
 800f69a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f69c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f6a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f6a2:	f107 0308 	add.w	r3, r7, #8
 800f6a6:	4619      	mov	r1, r3
 800f6a8:	6878      	ldr	r0, [r7, #4]
 800f6aa:	f7ff ff0e 	bl	800f4ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800f6ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800f6b2:	2118      	movs	r1, #24
 800f6b4:	6878      	ldr	r0, [r7, #4]
 800f6b6:	f000 f9b3 	bl	800fa20 <SDMMC_GetCmdResp1>
 800f6ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f6bc:	69fb      	ldr	r3, [r7, #28]
}
 800f6be:	4618      	mov	r0, r3
 800f6c0:	3720      	adds	r7, #32
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	bd80      	pop	{r7, pc}

0800f6c6 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800f6c6:	b580      	push	{r7, lr}
 800f6c8:	b088      	sub	sp, #32
 800f6ca:	af00      	add	r7, sp, #0
 800f6cc:	6078      	str	r0, [r7, #4]
 800f6ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f6d0:	683b      	ldr	r3, [r7, #0]
 800f6d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800f6d4:	2319      	movs	r3, #25
 800f6d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f6d8:	2340      	movs	r3, #64	; 0x40
 800f6da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f6dc:	2300      	movs	r3, #0
 800f6de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f6e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f6e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f6e6:	f107 0308 	add.w	r3, r7, #8
 800f6ea:	4619      	mov	r1, r3
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	f7ff feec 	bl	800f4ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800f6f2:	f241 3288 	movw	r2, #5000	; 0x1388
 800f6f6:	2119      	movs	r1, #25
 800f6f8:	6878      	ldr	r0, [r7, #4]
 800f6fa:	f000 f991 	bl	800fa20 <SDMMC_GetCmdResp1>
 800f6fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f700:	69fb      	ldr	r3, [r7, #28]
}
 800f702:	4618      	mov	r0, r3
 800f704:	3720      	adds	r7, #32
 800f706:	46bd      	mov	sp, r7
 800f708:	bd80      	pop	{r7, pc}
	...

0800f70c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b088      	sub	sp, #32
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800f714:	2300      	movs	r3, #0
 800f716:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800f718:	230c      	movs	r3, #12
 800f71a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f71c:	2340      	movs	r3, #64	; 0x40
 800f71e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f720:	2300      	movs	r3, #0
 800f722:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f724:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f728:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f72a:	f107 0308 	add.w	r3, r7, #8
 800f72e:	4619      	mov	r1, r3
 800f730:	6878      	ldr	r0, [r7, #4]
 800f732:	f7ff feca 	bl	800f4ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800f736:	4a05      	ldr	r2, [pc, #20]	; (800f74c <SDMMC_CmdStopTransfer+0x40>)
 800f738:	210c      	movs	r1, #12
 800f73a:	6878      	ldr	r0, [r7, #4]
 800f73c:	f000 f970 	bl	800fa20 <SDMMC_GetCmdResp1>
 800f740:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f742:	69fb      	ldr	r3, [r7, #28]
}
 800f744:	4618      	mov	r0, r3
 800f746:	3720      	adds	r7, #32
 800f748:	46bd      	mov	sp, r7
 800f74a:	bd80      	pop	{r7, pc}
 800f74c:	05f5e100 	.word	0x05f5e100

0800f750 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b08a      	sub	sp, #40	; 0x28
 800f754:	af00      	add	r7, sp, #0
 800f756:	60f8      	str	r0, [r7, #12]
 800f758:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800f75c:	683b      	ldr	r3, [r7, #0]
 800f75e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800f760:	2307      	movs	r3, #7
 800f762:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f764:	2340      	movs	r3, #64	; 0x40
 800f766:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f768:	2300      	movs	r3, #0
 800f76a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f76c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f770:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f772:	f107 0310 	add.w	r3, r7, #16
 800f776:	4619      	mov	r1, r3
 800f778:	68f8      	ldr	r0, [r7, #12]
 800f77a:	f7ff fea6 	bl	800f4ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800f77e:	f241 3288 	movw	r2, #5000	; 0x1388
 800f782:	2107      	movs	r1, #7
 800f784:	68f8      	ldr	r0, [r7, #12]
 800f786:	f000 f94b 	bl	800fa20 <SDMMC_GetCmdResp1>
 800f78a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800f78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f78e:	4618      	mov	r0, r3
 800f790:	3728      	adds	r7, #40	; 0x28
 800f792:	46bd      	mov	sp, r7
 800f794:	bd80      	pop	{r7, pc}

0800f796 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800f796:	b580      	push	{r7, lr}
 800f798:	b088      	sub	sp, #32
 800f79a:	af00      	add	r7, sp, #0
 800f79c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800f79e:	2300      	movs	r3, #0
 800f7a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f7ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f7b4:	f107 0308 	add.w	r3, r7, #8
 800f7b8:	4619      	mov	r1, r3
 800f7ba:	6878      	ldr	r0, [r7, #4]
 800f7bc:	f7ff fe85 	bl	800f4ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800f7c0:	6878      	ldr	r0, [r7, #4]
 800f7c2:	f000 fb65 	bl	800fe90 <SDMMC_GetCmdError>
 800f7c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f7c8:	69fb      	ldr	r3, [r7, #28]
}
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	3720      	adds	r7, #32
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}

0800f7d2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800f7d2:	b580      	push	{r7, lr}
 800f7d4:	b088      	sub	sp, #32
 800f7d6:	af00      	add	r7, sp, #0
 800f7d8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800f7da:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800f7de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800f7e0:	2308      	movs	r3, #8
 800f7e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f7e4:	2340      	movs	r3, #64	; 0x40
 800f7e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f7ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f7f2:	f107 0308 	add.w	r3, r7, #8
 800f7f6:	4619      	mov	r1, r3
 800f7f8:	6878      	ldr	r0, [r7, #4]
 800f7fa:	f7ff fe66 	bl	800f4ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800f7fe:	6878      	ldr	r0, [r7, #4]
 800f800:	f000 faf8 	bl	800fdf4 <SDMMC_GetCmdResp7>
 800f804:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f806:	69fb      	ldr	r3, [r7, #28]
}
 800f808:	4618      	mov	r0, r3
 800f80a:	3720      	adds	r7, #32
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}

0800f810 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b088      	sub	sp, #32
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
 800f818:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800f81a:	683b      	ldr	r3, [r7, #0]
 800f81c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800f81e:	2337      	movs	r3, #55	; 0x37
 800f820:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f822:	2340      	movs	r3, #64	; 0x40
 800f824:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f826:	2300      	movs	r3, #0
 800f828:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f82a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f82e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f830:	f107 0308 	add.w	r3, r7, #8
 800f834:	4619      	mov	r1, r3
 800f836:	6878      	ldr	r0, [r7, #4]
 800f838:	f7ff fe47 	bl	800f4ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800f83c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f840:	2137      	movs	r1, #55	; 0x37
 800f842:	6878      	ldr	r0, [r7, #4]
 800f844:	f000 f8ec 	bl	800fa20 <SDMMC_GetCmdResp1>
 800f848:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f84a:	69fb      	ldr	r3, [r7, #28]
}
 800f84c:	4618      	mov	r0, r3
 800f84e:	3720      	adds	r7, #32
 800f850:	46bd      	mov	sp, r7
 800f852:	bd80      	pop	{r7, pc}

0800f854 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b088      	sub	sp, #32
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
 800f85c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800f85e:	683b      	ldr	r3, [r7, #0]
 800f860:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f864:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f868:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800f86a:	2329      	movs	r3, #41	; 0x29
 800f86c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f86e:	2340      	movs	r3, #64	; 0x40
 800f870:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f872:	2300      	movs	r3, #0
 800f874:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f876:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f87a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f87c:	f107 0308 	add.w	r3, r7, #8
 800f880:	4619      	mov	r1, r3
 800f882:	6878      	ldr	r0, [r7, #4]
 800f884:	f7ff fe21 	bl	800f4ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800f888:	6878      	ldr	r0, [r7, #4]
 800f88a:	f000 f9ff 	bl	800fc8c <SDMMC_GetCmdResp3>
 800f88e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f890:	69fb      	ldr	r3, [r7, #28]
}
 800f892:	4618      	mov	r0, r3
 800f894:	3720      	adds	r7, #32
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}

0800f89a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800f89a:	b580      	push	{r7, lr}
 800f89c:	b088      	sub	sp, #32
 800f89e:	af00      	add	r7, sp, #0
 800f8a0:	6078      	str	r0, [r7, #4]
 800f8a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800f8a4:	683b      	ldr	r3, [r7, #0]
 800f8a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800f8a8:	2306      	movs	r3, #6
 800f8aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f8ac:	2340      	movs	r3, #64	; 0x40
 800f8ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f8b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f8b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f8ba:	f107 0308 	add.w	r3, r7, #8
 800f8be:	4619      	mov	r1, r3
 800f8c0:	6878      	ldr	r0, [r7, #4]
 800f8c2:	f7ff fe02 	bl	800f4ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800f8c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800f8ca:	2106      	movs	r1, #6
 800f8cc:	6878      	ldr	r0, [r7, #4]
 800f8ce:	f000 f8a7 	bl	800fa20 <SDMMC_GetCmdResp1>
 800f8d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f8d4:	69fb      	ldr	r3, [r7, #28]
}
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	3720      	adds	r7, #32
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	bd80      	pop	{r7, pc}

0800f8de <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800f8de:	b580      	push	{r7, lr}
 800f8e0:	b088      	sub	sp, #32
 800f8e2:	af00      	add	r7, sp, #0
 800f8e4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800f8ea:	2333      	movs	r3, #51	; 0x33
 800f8ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f8ee:	2340      	movs	r3, #64	; 0x40
 800f8f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f8f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f8fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f8fc:	f107 0308 	add.w	r3, r7, #8
 800f900:	4619      	mov	r1, r3
 800f902:	6878      	ldr	r0, [r7, #4]
 800f904:	f7ff fde1 	bl	800f4ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800f908:	f241 3288 	movw	r2, #5000	; 0x1388
 800f90c:	2133      	movs	r1, #51	; 0x33
 800f90e:	6878      	ldr	r0, [r7, #4]
 800f910:	f000 f886 	bl	800fa20 <SDMMC_GetCmdResp1>
 800f914:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f916:	69fb      	ldr	r3, [r7, #28]
}
 800f918:	4618      	mov	r0, r3
 800f91a:	3720      	adds	r7, #32
 800f91c:	46bd      	mov	sp, r7
 800f91e:	bd80      	pop	{r7, pc}

0800f920 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b088      	sub	sp, #32
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800f928:	2300      	movs	r3, #0
 800f92a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800f92c:	2302      	movs	r3, #2
 800f92e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800f930:	23c0      	movs	r3, #192	; 0xc0
 800f932:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f934:	2300      	movs	r3, #0
 800f936:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f938:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f93c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f93e:	f107 0308 	add.w	r3, r7, #8
 800f942:	4619      	mov	r1, r3
 800f944:	6878      	ldr	r0, [r7, #4]
 800f946:	f7ff fdc0 	bl	800f4ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800f94a:	6878      	ldr	r0, [r7, #4]
 800f94c:	f000 f956 	bl	800fbfc <SDMMC_GetCmdResp2>
 800f950:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f952:	69fb      	ldr	r3, [r7, #28]
}
 800f954:	4618      	mov	r0, r3
 800f956:	3720      	adds	r7, #32
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd80      	pop	{r7, pc}

0800f95c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b088      	sub	sp, #32
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
 800f964:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800f966:	683b      	ldr	r3, [r7, #0]
 800f968:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800f96a:	2309      	movs	r3, #9
 800f96c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800f96e:	23c0      	movs	r3, #192	; 0xc0
 800f970:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f972:	2300      	movs	r3, #0
 800f974:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f97a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f97c:	f107 0308 	add.w	r3, r7, #8
 800f980:	4619      	mov	r1, r3
 800f982:	6878      	ldr	r0, [r7, #4]
 800f984:	f7ff fda1 	bl	800f4ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800f988:	6878      	ldr	r0, [r7, #4]
 800f98a:	f000 f937 	bl	800fbfc <SDMMC_GetCmdResp2>
 800f98e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f990:	69fb      	ldr	r3, [r7, #28]
}
 800f992:	4618      	mov	r0, r3
 800f994:	3720      	adds	r7, #32
 800f996:	46bd      	mov	sp, r7
 800f998:	bd80      	pop	{r7, pc}

0800f99a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800f99a:	b580      	push	{r7, lr}
 800f99c:	b088      	sub	sp, #32
 800f99e:	af00      	add	r7, sp, #0
 800f9a0:	6078      	str	r0, [r7, #4]
 800f9a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800f9a8:	2303      	movs	r3, #3
 800f9aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f9ac:	2340      	movs	r3, #64	; 0x40
 800f9ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f9b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f9b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f9ba:	f107 0308 	add.w	r3, r7, #8
 800f9be:	4619      	mov	r1, r3
 800f9c0:	6878      	ldr	r0, [r7, #4]
 800f9c2:	f7ff fd82 	bl	800f4ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800f9c6:	683a      	ldr	r2, [r7, #0]
 800f9c8:	2103      	movs	r1, #3
 800f9ca:	6878      	ldr	r0, [r7, #4]
 800f9cc:	f000 f99c 	bl	800fd08 <SDMMC_GetCmdResp6>
 800f9d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f9d2:	69fb      	ldr	r3, [r7, #28]
}
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	3720      	adds	r7, #32
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	bd80      	pop	{r7, pc}

0800f9dc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b088      	sub	sp, #32
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
 800f9e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800f9ea:	230d      	movs	r3, #13
 800f9ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f9ee:	2340      	movs	r3, #64	; 0x40
 800f9f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f9f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f9fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f9fc:	f107 0308 	add.w	r3, r7, #8
 800fa00:	4619      	mov	r1, r3
 800fa02:	6878      	ldr	r0, [r7, #4]
 800fa04:	f7ff fd61 	bl	800f4ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800fa08:	f241 3288 	movw	r2, #5000	; 0x1388
 800fa0c:	210d      	movs	r1, #13
 800fa0e:	6878      	ldr	r0, [r7, #4]
 800fa10:	f000 f806 	bl	800fa20 <SDMMC_GetCmdResp1>
 800fa14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fa16:	69fb      	ldr	r3, [r7, #28]
}
 800fa18:	4618      	mov	r0, r3
 800fa1a:	3720      	adds	r7, #32
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	bd80      	pop	{r7, pc}

0800fa20 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b088      	sub	sp, #32
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	60f8      	str	r0, [r7, #12]
 800fa28:	460b      	mov	r3, r1
 800fa2a:	607a      	str	r2, [r7, #4]
 800fa2c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800fa2e:	4b70      	ldr	r3, [pc, #448]	; (800fbf0 <SDMMC_GetCmdResp1+0x1d0>)
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	4a70      	ldr	r2, [pc, #448]	; (800fbf4 <SDMMC_GetCmdResp1+0x1d4>)
 800fa34:	fba2 2303 	umull	r2, r3, r2, r3
 800fa38:	0a5a      	lsrs	r2, r3, #9
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	fb02 f303 	mul.w	r3, r2, r3
 800fa40:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800fa42:	69fb      	ldr	r3, [r7, #28]
 800fa44:	1e5a      	subs	r2, r3, #1
 800fa46:	61fa      	str	r2, [r7, #28]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d102      	bne.n	800fa52 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fa4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fa50:	e0c9      	b.n	800fbe6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa56:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fa58:	69bb      	ldr	r3, [r7, #24]
 800fa5a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d0ef      	beq.n	800fa42 <SDMMC_GetCmdResp1+0x22>
 800fa62:	69bb      	ldr	r3, [r7, #24]
 800fa64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d1ea      	bne.n	800fa42 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa70:	f003 0304 	and.w	r3, r3, #4
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d004      	beq.n	800fa82 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	2204      	movs	r2, #4
 800fa7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fa7e:	2304      	movs	r3, #4
 800fa80:	e0b1      	b.n	800fbe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa86:	f003 0301 	and.w	r3, r3, #1
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d004      	beq.n	800fa98 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	2201      	movs	r2, #1
 800fa92:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fa94:	2301      	movs	r3, #1
 800fa96:	e0a6      	b.n	800fbe6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	22c5      	movs	r2, #197	; 0xc5
 800fa9c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800fa9e:	68f8      	ldr	r0, [r7, #12]
 800faa0:	f7ff fd3d 	bl	800f51e <SDIO_GetCommandResponse>
 800faa4:	4603      	mov	r3, r0
 800faa6:	461a      	mov	r2, r3
 800faa8:	7afb      	ldrb	r3, [r7, #11]
 800faaa:	4293      	cmp	r3, r2
 800faac:	d001      	beq.n	800fab2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800faae:	2301      	movs	r3, #1
 800fab0:	e099      	b.n	800fbe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800fab2:	2100      	movs	r1, #0
 800fab4:	68f8      	ldr	r0, [r7, #12]
 800fab6:	f7ff fd3f 	bl	800f538 <SDIO_GetResponse>
 800faba:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800fabc:	697a      	ldr	r2, [r7, #20]
 800fabe:	4b4e      	ldr	r3, [pc, #312]	; (800fbf8 <SDMMC_GetCmdResp1+0x1d8>)
 800fac0:	4013      	ands	r3, r2
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d101      	bne.n	800faca <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800fac6:	2300      	movs	r3, #0
 800fac8:	e08d      	b.n	800fbe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800faca:	697b      	ldr	r3, [r7, #20]
 800facc:	2b00      	cmp	r3, #0
 800face:	da02      	bge.n	800fad6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800fad0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800fad4:	e087      	b.n	800fbe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800fad6:	697b      	ldr	r3, [r7, #20]
 800fad8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fadc:	2b00      	cmp	r3, #0
 800fade:	d001      	beq.n	800fae4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800fae0:	2340      	movs	r3, #64	; 0x40
 800fae2:	e080      	b.n	800fbe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800fae4:	697b      	ldr	r3, [r7, #20]
 800fae6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800faea:	2b00      	cmp	r3, #0
 800faec:	d001      	beq.n	800faf2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800faee:	2380      	movs	r3, #128	; 0x80
 800faf0:	e079      	b.n	800fbe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800faf2:	697b      	ldr	r3, [r7, #20]
 800faf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d002      	beq.n	800fb02 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800fafc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fb00:	e071      	b.n	800fbe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800fb02:	697b      	ldr	r3, [r7, #20]
 800fb04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d002      	beq.n	800fb12 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800fb0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fb10:	e069      	b.n	800fbe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d002      	beq.n	800fb22 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800fb1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb20:	e061      	b.n	800fbe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800fb22:	697b      	ldr	r3, [r7, #20]
 800fb24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d002      	beq.n	800fb32 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800fb2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fb30:	e059      	b.n	800fbe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800fb32:	697b      	ldr	r3, [r7, #20]
 800fb34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d002      	beq.n	800fb42 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fb3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fb40:	e051      	b.n	800fbe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800fb42:	697b      	ldr	r3, [r7, #20]
 800fb44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d002      	beq.n	800fb52 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fb4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fb50:	e049      	b.n	800fbe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800fb52:	697b      	ldr	r3, [r7, #20]
 800fb54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d002      	beq.n	800fb62 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800fb5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fb60:	e041      	b.n	800fbe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800fb62:	697b      	ldr	r3, [r7, #20]
 800fb64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d002      	beq.n	800fb72 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800fb6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fb70:	e039      	b.n	800fbe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800fb72:	697b      	ldr	r3, [r7, #20]
 800fb74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d002      	beq.n	800fb82 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800fb7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800fb80:	e031      	b.n	800fbe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800fb82:	697b      	ldr	r3, [r7, #20]
 800fb84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d002      	beq.n	800fb92 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800fb8c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800fb90:	e029      	b.n	800fbe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800fb92:	697b      	ldr	r3, [r7, #20]
 800fb94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d002      	beq.n	800fba2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800fb9c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fba0:	e021      	b.n	800fbe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800fba2:	697b      	ldr	r3, [r7, #20]
 800fba4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d002      	beq.n	800fbb2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800fbac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800fbb0:	e019      	b.n	800fbe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800fbb2:	697b      	ldr	r3, [r7, #20]
 800fbb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d002      	beq.n	800fbc2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800fbbc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800fbc0:	e011      	b.n	800fbe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800fbc2:	697b      	ldr	r3, [r7, #20]
 800fbc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d002      	beq.n	800fbd2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800fbcc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800fbd0:	e009      	b.n	800fbe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800fbd2:	697b      	ldr	r3, [r7, #20]
 800fbd4:	f003 0308 	and.w	r3, r3, #8
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d002      	beq.n	800fbe2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800fbdc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800fbe0:	e001      	b.n	800fbe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fbe2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	3720      	adds	r7, #32
 800fbea:	46bd      	mov	sp, r7
 800fbec:	bd80      	pop	{r7, pc}
 800fbee:	bf00      	nop
 800fbf0:	20000000 	.word	0x20000000
 800fbf4:	10624dd3 	.word	0x10624dd3
 800fbf8:	fdffe008 	.word	0xfdffe008

0800fbfc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800fbfc:	b480      	push	{r7}
 800fbfe:	b085      	sub	sp, #20
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fc04:	4b1f      	ldr	r3, [pc, #124]	; (800fc84 <SDMMC_GetCmdResp2+0x88>)
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	4a1f      	ldr	r2, [pc, #124]	; (800fc88 <SDMMC_GetCmdResp2+0x8c>)
 800fc0a:	fba2 2303 	umull	r2, r3, r2, r3
 800fc0e:	0a5b      	lsrs	r3, r3, #9
 800fc10:	f241 3288 	movw	r2, #5000	; 0x1388
 800fc14:	fb02 f303 	mul.w	r3, r2, r3
 800fc18:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	1e5a      	subs	r2, r3, #1
 800fc1e:	60fa      	str	r2, [r7, #12]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d102      	bne.n	800fc2a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fc24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fc28:	e026      	b.n	800fc78 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc2e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fc30:	68bb      	ldr	r3, [r7, #8]
 800fc32:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d0ef      	beq.n	800fc1a <SDMMC_GetCmdResp2+0x1e>
 800fc3a:	68bb      	ldr	r3, [r7, #8]
 800fc3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d1ea      	bne.n	800fc1a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc48:	f003 0304 	and.w	r3, r3, #4
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d004      	beq.n	800fc5a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2204      	movs	r2, #4
 800fc54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fc56:	2304      	movs	r3, #4
 800fc58:	e00e      	b.n	800fc78 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc5e:	f003 0301 	and.w	r3, r3, #1
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d004      	beq.n	800fc70 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	2201      	movs	r2, #1
 800fc6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fc6c:	2301      	movs	r3, #1
 800fc6e:	e003      	b.n	800fc78 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	22c5      	movs	r2, #197	; 0xc5
 800fc74:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800fc76:	2300      	movs	r3, #0
}
 800fc78:	4618      	mov	r0, r3
 800fc7a:	3714      	adds	r7, #20
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc82:	4770      	bx	lr
 800fc84:	20000000 	.word	0x20000000
 800fc88:	10624dd3 	.word	0x10624dd3

0800fc8c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800fc8c:	b480      	push	{r7}
 800fc8e:	b085      	sub	sp, #20
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fc94:	4b1a      	ldr	r3, [pc, #104]	; (800fd00 <SDMMC_GetCmdResp3+0x74>)
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	4a1a      	ldr	r2, [pc, #104]	; (800fd04 <SDMMC_GetCmdResp3+0x78>)
 800fc9a:	fba2 2303 	umull	r2, r3, r2, r3
 800fc9e:	0a5b      	lsrs	r3, r3, #9
 800fca0:	f241 3288 	movw	r2, #5000	; 0x1388
 800fca4:	fb02 f303 	mul.w	r3, r2, r3
 800fca8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	1e5a      	subs	r2, r3, #1
 800fcae:	60fa      	str	r2, [r7, #12]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d102      	bne.n	800fcba <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fcb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fcb8:	e01b      	b.n	800fcf2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fcbe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fcc0:	68bb      	ldr	r3, [r7, #8]
 800fcc2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d0ef      	beq.n	800fcaa <SDMMC_GetCmdResp3+0x1e>
 800fcca:	68bb      	ldr	r3, [r7, #8]
 800fccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d1ea      	bne.n	800fcaa <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fcd8:	f003 0304 	and.w	r3, r3, #4
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d004      	beq.n	800fcea <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	2204      	movs	r2, #4
 800fce4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fce6:	2304      	movs	r3, #4
 800fce8:	e003      	b.n	800fcf2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	22c5      	movs	r2, #197	; 0xc5
 800fcee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800fcf0:	2300      	movs	r3, #0
}
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	3714      	adds	r7, #20
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfc:	4770      	bx	lr
 800fcfe:	bf00      	nop
 800fd00:	20000000 	.word	0x20000000
 800fd04:	10624dd3 	.word	0x10624dd3

0800fd08 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b088      	sub	sp, #32
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	60f8      	str	r0, [r7, #12]
 800fd10:	460b      	mov	r3, r1
 800fd12:	607a      	str	r2, [r7, #4]
 800fd14:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fd16:	4b35      	ldr	r3, [pc, #212]	; (800fdec <SDMMC_GetCmdResp6+0xe4>)
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	4a35      	ldr	r2, [pc, #212]	; (800fdf0 <SDMMC_GetCmdResp6+0xe8>)
 800fd1c:	fba2 2303 	umull	r2, r3, r2, r3
 800fd20:	0a5b      	lsrs	r3, r3, #9
 800fd22:	f241 3288 	movw	r2, #5000	; 0x1388
 800fd26:	fb02 f303 	mul.w	r3, r2, r3
 800fd2a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800fd2c:	69fb      	ldr	r3, [r7, #28]
 800fd2e:	1e5a      	subs	r2, r3, #1
 800fd30:	61fa      	str	r2, [r7, #28]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d102      	bne.n	800fd3c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fd36:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fd3a:	e052      	b.n	800fde2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd40:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fd42:	69bb      	ldr	r3, [r7, #24]
 800fd44:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d0ef      	beq.n	800fd2c <SDMMC_GetCmdResp6+0x24>
 800fd4c:	69bb      	ldr	r3, [r7, #24]
 800fd4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d1ea      	bne.n	800fd2c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd5a:	f003 0304 	and.w	r3, r3, #4
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d004      	beq.n	800fd6c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	2204      	movs	r2, #4
 800fd66:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fd68:	2304      	movs	r3, #4
 800fd6a:	e03a      	b.n	800fde2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd70:	f003 0301 	and.w	r3, r3, #1
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d004      	beq.n	800fd82 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	2201      	movs	r2, #1
 800fd7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fd7e:	2301      	movs	r3, #1
 800fd80:	e02f      	b.n	800fde2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800fd82:	68f8      	ldr	r0, [r7, #12]
 800fd84:	f7ff fbcb 	bl	800f51e <SDIO_GetCommandResponse>
 800fd88:	4603      	mov	r3, r0
 800fd8a:	461a      	mov	r2, r3
 800fd8c:	7afb      	ldrb	r3, [r7, #11]
 800fd8e:	4293      	cmp	r3, r2
 800fd90:	d001      	beq.n	800fd96 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fd92:	2301      	movs	r3, #1
 800fd94:	e025      	b.n	800fde2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	22c5      	movs	r2, #197	; 0xc5
 800fd9a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800fd9c:	2100      	movs	r1, #0
 800fd9e:	68f8      	ldr	r0, [r7, #12]
 800fda0:	f7ff fbca 	bl	800f538 <SDIO_GetResponse>
 800fda4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800fda6:	697b      	ldr	r3, [r7, #20]
 800fda8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d106      	bne.n	800fdbe <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800fdb0:	697b      	ldr	r3, [r7, #20]
 800fdb2:	0c1b      	lsrs	r3, r3, #16
 800fdb4:	b29a      	uxth	r2, r3
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800fdba:	2300      	movs	r3, #0
 800fdbc:	e011      	b.n	800fde2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800fdbe:	697b      	ldr	r3, [r7, #20]
 800fdc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d002      	beq.n	800fdce <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fdc8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fdcc:	e009      	b.n	800fde2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800fdce:	697b      	ldr	r3, [r7, #20]
 800fdd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d002      	beq.n	800fdde <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fdd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fddc:	e001      	b.n	800fde2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fdde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800fde2:	4618      	mov	r0, r3
 800fde4:	3720      	adds	r7, #32
 800fde6:	46bd      	mov	sp, r7
 800fde8:	bd80      	pop	{r7, pc}
 800fdea:	bf00      	nop
 800fdec:	20000000 	.word	0x20000000
 800fdf0:	10624dd3 	.word	0x10624dd3

0800fdf4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800fdf4:	b480      	push	{r7}
 800fdf6:	b085      	sub	sp, #20
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fdfc:	4b22      	ldr	r3, [pc, #136]	; (800fe88 <SDMMC_GetCmdResp7+0x94>)
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	4a22      	ldr	r2, [pc, #136]	; (800fe8c <SDMMC_GetCmdResp7+0x98>)
 800fe02:	fba2 2303 	umull	r2, r3, r2, r3
 800fe06:	0a5b      	lsrs	r3, r3, #9
 800fe08:	f241 3288 	movw	r2, #5000	; 0x1388
 800fe0c:	fb02 f303 	mul.w	r3, r2, r3
 800fe10:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	1e5a      	subs	r2, r3, #1
 800fe16:	60fa      	str	r2, [r7, #12]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d102      	bne.n	800fe22 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fe1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fe20:	e02c      	b.n	800fe7c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe26:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fe28:	68bb      	ldr	r3, [r7, #8]
 800fe2a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d0ef      	beq.n	800fe12 <SDMMC_GetCmdResp7+0x1e>
 800fe32:	68bb      	ldr	r3, [r7, #8]
 800fe34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d1ea      	bne.n	800fe12 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe40:	f003 0304 	and.w	r3, r3, #4
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d004      	beq.n	800fe52 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	2204      	movs	r2, #4
 800fe4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fe4e:	2304      	movs	r3, #4
 800fe50:	e014      	b.n	800fe7c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe56:	f003 0301 	and.w	r3, r3, #1
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d004      	beq.n	800fe68 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	2201      	movs	r2, #1
 800fe62:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fe64:	2301      	movs	r3, #1
 800fe66:	e009      	b.n	800fe7c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d002      	beq.n	800fe7a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	2240      	movs	r2, #64	; 0x40
 800fe78:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800fe7a:	2300      	movs	r3, #0
  
}
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	3714      	adds	r7, #20
 800fe80:	46bd      	mov	sp, r7
 800fe82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe86:	4770      	bx	lr
 800fe88:	20000000 	.word	0x20000000
 800fe8c:	10624dd3 	.word	0x10624dd3

0800fe90 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800fe90:	b480      	push	{r7}
 800fe92:	b085      	sub	sp, #20
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fe98:	4b11      	ldr	r3, [pc, #68]	; (800fee0 <SDMMC_GetCmdError+0x50>)
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	4a11      	ldr	r2, [pc, #68]	; (800fee4 <SDMMC_GetCmdError+0x54>)
 800fe9e:	fba2 2303 	umull	r2, r3, r2, r3
 800fea2:	0a5b      	lsrs	r3, r3, #9
 800fea4:	f241 3288 	movw	r2, #5000	; 0x1388
 800fea8:	fb02 f303 	mul.w	r3, r2, r3
 800feac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	1e5a      	subs	r2, r3, #1
 800feb2:	60fa      	str	r2, [r7, #12]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d102      	bne.n	800febe <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800feb8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800febc:	e009      	b.n	800fed2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d0f1      	beq.n	800feae <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	22c5      	movs	r2, #197	; 0xc5
 800fece:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800fed0:	2300      	movs	r3, #0
}
 800fed2:	4618      	mov	r0, r3
 800fed4:	3714      	adds	r7, #20
 800fed6:	46bd      	mov	sp, r7
 800fed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fedc:	4770      	bx	lr
 800fede:	bf00      	nop
 800fee0:	20000000 	.word	0x20000000
 800fee4:	10624dd3 	.word	0x10624dd3

0800fee8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fee8:	b084      	sub	sp, #16
 800feea:	b580      	push	{r7, lr}
 800feec:	b084      	sub	sp, #16
 800feee:	af00      	add	r7, sp, #0
 800fef0:	6078      	str	r0, [r7, #4]
 800fef2:	f107 001c 	add.w	r0, r7, #28
 800fef6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fefc:	2b01      	cmp	r3, #1
 800fefe:	d122      	bne.n	800ff46 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	68db      	ldr	r3, [r3, #12]
 800ff10:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800ff14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff18:	687a      	ldr	r2, [r7, #4]
 800ff1a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	68db      	ldr	r3, [r3, #12]
 800ff20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ff28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff2a:	2b01      	cmp	r3, #1
 800ff2c:	d105      	bne.n	800ff3a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	68db      	ldr	r3, [r3, #12]
 800ff32:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ff3a:	6878      	ldr	r0, [r7, #4]
 800ff3c:	f001 fbe8 	bl	8011710 <USB_CoreReset>
 800ff40:	4603      	mov	r3, r0
 800ff42:	73fb      	strb	r3, [r7, #15]
 800ff44:	e01a      	b.n	800ff7c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	68db      	ldr	r3, [r3, #12]
 800ff4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ff52:	6878      	ldr	r0, [r7, #4]
 800ff54:	f001 fbdc 	bl	8011710 <USB_CoreReset>
 800ff58:	4603      	mov	r3, r0
 800ff5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ff5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d106      	bne.n	800ff70 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff66:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	639a      	str	r2, [r3, #56]	; 0x38
 800ff6e:	e005      	b.n	800ff7c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ff7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff7e:	2b01      	cmp	r3, #1
 800ff80:	d10b      	bne.n	800ff9a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	689b      	ldr	r3, [r3, #8]
 800ff86:	f043 0206 	orr.w	r2, r3, #6
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	689b      	ldr	r3, [r3, #8]
 800ff92:	f043 0220 	orr.w	r2, r3, #32
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ff9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	3710      	adds	r7, #16
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ffa6:	b004      	add	sp, #16
 800ffa8:	4770      	bx	lr
	...

0800ffac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ffac:	b480      	push	{r7}
 800ffae:	b087      	sub	sp, #28
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	60f8      	str	r0, [r7, #12]
 800ffb4:	60b9      	str	r1, [r7, #8]
 800ffb6:	4613      	mov	r3, r2
 800ffb8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ffba:	79fb      	ldrb	r3, [r7, #7]
 800ffbc:	2b02      	cmp	r3, #2
 800ffbe:	d165      	bne.n	801008c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ffc0:	68bb      	ldr	r3, [r7, #8]
 800ffc2:	4a41      	ldr	r2, [pc, #260]	; (80100c8 <USB_SetTurnaroundTime+0x11c>)
 800ffc4:	4293      	cmp	r3, r2
 800ffc6:	d906      	bls.n	800ffd6 <USB_SetTurnaroundTime+0x2a>
 800ffc8:	68bb      	ldr	r3, [r7, #8]
 800ffca:	4a40      	ldr	r2, [pc, #256]	; (80100cc <USB_SetTurnaroundTime+0x120>)
 800ffcc:	4293      	cmp	r3, r2
 800ffce:	d202      	bcs.n	800ffd6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ffd0:	230f      	movs	r3, #15
 800ffd2:	617b      	str	r3, [r7, #20]
 800ffd4:	e062      	b.n	801009c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	4a3c      	ldr	r2, [pc, #240]	; (80100cc <USB_SetTurnaroundTime+0x120>)
 800ffda:	4293      	cmp	r3, r2
 800ffdc:	d306      	bcc.n	800ffec <USB_SetTurnaroundTime+0x40>
 800ffde:	68bb      	ldr	r3, [r7, #8]
 800ffe0:	4a3b      	ldr	r2, [pc, #236]	; (80100d0 <USB_SetTurnaroundTime+0x124>)
 800ffe2:	4293      	cmp	r3, r2
 800ffe4:	d202      	bcs.n	800ffec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ffe6:	230e      	movs	r3, #14
 800ffe8:	617b      	str	r3, [r7, #20]
 800ffea:	e057      	b.n	801009c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ffec:	68bb      	ldr	r3, [r7, #8]
 800ffee:	4a38      	ldr	r2, [pc, #224]	; (80100d0 <USB_SetTurnaroundTime+0x124>)
 800fff0:	4293      	cmp	r3, r2
 800fff2:	d306      	bcc.n	8010002 <USB_SetTurnaroundTime+0x56>
 800fff4:	68bb      	ldr	r3, [r7, #8]
 800fff6:	4a37      	ldr	r2, [pc, #220]	; (80100d4 <USB_SetTurnaroundTime+0x128>)
 800fff8:	4293      	cmp	r3, r2
 800fffa:	d202      	bcs.n	8010002 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800fffc:	230d      	movs	r3, #13
 800fffe:	617b      	str	r3, [r7, #20]
 8010000:	e04c      	b.n	801009c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8010002:	68bb      	ldr	r3, [r7, #8]
 8010004:	4a33      	ldr	r2, [pc, #204]	; (80100d4 <USB_SetTurnaroundTime+0x128>)
 8010006:	4293      	cmp	r3, r2
 8010008:	d306      	bcc.n	8010018 <USB_SetTurnaroundTime+0x6c>
 801000a:	68bb      	ldr	r3, [r7, #8]
 801000c:	4a32      	ldr	r2, [pc, #200]	; (80100d8 <USB_SetTurnaroundTime+0x12c>)
 801000e:	4293      	cmp	r3, r2
 8010010:	d802      	bhi.n	8010018 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8010012:	230c      	movs	r3, #12
 8010014:	617b      	str	r3, [r7, #20]
 8010016:	e041      	b.n	801009c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	4a2f      	ldr	r2, [pc, #188]	; (80100d8 <USB_SetTurnaroundTime+0x12c>)
 801001c:	4293      	cmp	r3, r2
 801001e:	d906      	bls.n	801002e <USB_SetTurnaroundTime+0x82>
 8010020:	68bb      	ldr	r3, [r7, #8]
 8010022:	4a2e      	ldr	r2, [pc, #184]	; (80100dc <USB_SetTurnaroundTime+0x130>)
 8010024:	4293      	cmp	r3, r2
 8010026:	d802      	bhi.n	801002e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8010028:	230b      	movs	r3, #11
 801002a:	617b      	str	r3, [r7, #20]
 801002c:	e036      	b.n	801009c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801002e:	68bb      	ldr	r3, [r7, #8]
 8010030:	4a2a      	ldr	r2, [pc, #168]	; (80100dc <USB_SetTurnaroundTime+0x130>)
 8010032:	4293      	cmp	r3, r2
 8010034:	d906      	bls.n	8010044 <USB_SetTurnaroundTime+0x98>
 8010036:	68bb      	ldr	r3, [r7, #8]
 8010038:	4a29      	ldr	r2, [pc, #164]	; (80100e0 <USB_SetTurnaroundTime+0x134>)
 801003a:	4293      	cmp	r3, r2
 801003c:	d802      	bhi.n	8010044 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801003e:	230a      	movs	r3, #10
 8010040:	617b      	str	r3, [r7, #20]
 8010042:	e02b      	b.n	801009c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010044:	68bb      	ldr	r3, [r7, #8]
 8010046:	4a26      	ldr	r2, [pc, #152]	; (80100e0 <USB_SetTurnaroundTime+0x134>)
 8010048:	4293      	cmp	r3, r2
 801004a:	d906      	bls.n	801005a <USB_SetTurnaroundTime+0xae>
 801004c:	68bb      	ldr	r3, [r7, #8]
 801004e:	4a25      	ldr	r2, [pc, #148]	; (80100e4 <USB_SetTurnaroundTime+0x138>)
 8010050:	4293      	cmp	r3, r2
 8010052:	d202      	bcs.n	801005a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010054:	2309      	movs	r3, #9
 8010056:	617b      	str	r3, [r7, #20]
 8010058:	e020      	b.n	801009c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801005a:	68bb      	ldr	r3, [r7, #8]
 801005c:	4a21      	ldr	r2, [pc, #132]	; (80100e4 <USB_SetTurnaroundTime+0x138>)
 801005e:	4293      	cmp	r3, r2
 8010060:	d306      	bcc.n	8010070 <USB_SetTurnaroundTime+0xc4>
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	4a20      	ldr	r2, [pc, #128]	; (80100e8 <USB_SetTurnaroundTime+0x13c>)
 8010066:	4293      	cmp	r3, r2
 8010068:	d802      	bhi.n	8010070 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801006a:	2308      	movs	r3, #8
 801006c:	617b      	str	r3, [r7, #20]
 801006e:	e015      	b.n	801009c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	4a1d      	ldr	r2, [pc, #116]	; (80100e8 <USB_SetTurnaroundTime+0x13c>)
 8010074:	4293      	cmp	r3, r2
 8010076:	d906      	bls.n	8010086 <USB_SetTurnaroundTime+0xda>
 8010078:	68bb      	ldr	r3, [r7, #8]
 801007a:	4a1c      	ldr	r2, [pc, #112]	; (80100ec <USB_SetTurnaroundTime+0x140>)
 801007c:	4293      	cmp	r3, r2
 801007e:	d202      	bcs.n	8010086 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8010080:	2307      	movs	r3, #7
 8010082:	617b      	str	r3, [r7, #20]
 8010084:	e00a      	b.n	801009c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8010086:	2306      	movs	r3, #6
 8010088:	617b      	str	r3, [r7, #20]
 801008a:	e007      	b.n	801009c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801008c:	79fb      	ldrb	r3, [r7, #7]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d102      	bne.n	8010098 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8010092:	2309      	movs	r3, #9
 8010094:	617b      	str	r3, [r7, #20]
 8010096:	e001      	b.n	801009c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8010098:	2309      	movs	r3, #9
 801009a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	68db      	ldr	r3, [r3, #12]
 80100a0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	68da      	ldr	r2, [r3, #12]
 80100ac:	697b      	ldr	r3, [r7, #20]
 80100ae:	029b      	lsls	r3, r3, #10
 80100b0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80100b4:	431a      	orrs	r2, r3
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80100ba:	2300      	movs	r3, #0
}
 80100bc:	4618      	mov	r0, r3
 80100be:	371c      	adds	r7, #28
 80100c0:	46bd      	mov	sp, r7
 80100c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c6:	4770      	bx	lr
 80100c8:	00d8acbf 	.word	0x00d8acbf
 80100cc:	00e4e1c0 	.word	0x00e4e1c0
 80100d0:	00f42400 	.word	0x00f42400
 80100d4:	01067380 	.word	0x01067380
 80100d8:	011a499f 	.word	0x011a499f
 80100dc:	01312cff 	.word	0x01312cff
 80100e0:	014ca43f 	.word	0x014ca43f
 80100e4:	016e3600 	.word	0x016e3600
 80100e8:	01a6ab1f 	.word	0x01a6ab1f
 80100ec:	01e84800 	.word	0x01e84800

080100f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80100f0:	b480      	push	{r7}
 80100f2:	b083      	sub	sp, #12
 80100f4:	af00      	add	r7, sp, #0
 80100f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	689b      	ldr	r3, [r3, #8]
 80100fc:	f043 0201 	orr.w	r2, r3, #1
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010104:	2300      	movs	r3, #0
}
 8010106:	4618      	mov	r0, r3
 8010108:	370c      	adds	r7, #12
 801010a:	46bd      	mov	sp, r7
 801010c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010110:	4770      	bx	lr

08010112 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010112:	b480      	push	{r7}
 8010114:	b083      	sub	sp, #12
 8010116:	af00      	add	r7, sp, #0
 8010118:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	689b      	ldr	r3, [r3, #8]
 801011e:	f023 0201 	bic.w	r2, r3, #1
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010126:	2300      	movs	r3, #0
}
 8010128:	4618      	mov	r0, r3
 801012a:	370c      	adds	r7, #12
 801012c:	46bd      	mov	sp, r7
 801012e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010132:	4770      	bx	lr

08010134 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010134:	b580      	push	{r7, lr}
 8010136:	b084      	sub	sp, #16
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
 801013c:	460b      	mov	r3, r1
 801013e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010140:	2300      	movs	r3, #0
 8010142:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	68db      	ldr	r3, [r3, #12]
 8010148:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010150:	78fb      	ldrb	r3, [r7, #3]
 8010152:	2b01      	cmp	r3, #1
 8010154:	d115      	bne.n	8010182 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	68db      	ldr	r3, [r3, #12]
 801015a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8010162:	2001      	movs	r0, #1
 8010164:	f7f6 fef6 	bl	8006f54 <HAL_Delay>
      ms++;
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	3301      	adds	r3, #1
 801016c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801016e:	6878      	ldr	r0, [r7, #4]
 8010170:	f001 fa3f 	bl	80115f2 <USB_GetMode>
 8010174:	4603      	mov	r3, r0
 8010176:	2b01      	cmp	r3, #1
 8010178:	d01e      	beq.n	80101b8 <USB_SetCurrentMode+0x84>
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	2b31      	cmp	r3, #49	; 0x31
 801017e:	d9f0      	bls.n	8010162 <USB_SetCurrentMode+0x2e>
 8010180:	e01a      	b.n	80101b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8010182:	78fb      	ldrb	r3, [r7, #3]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d115      	bne.n	80101b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	68db      	ldr	r3, [r3, #12]
 801018c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8010194:	2001      	movs	r0, #1
 8010196:	f7f6 fedd 	bl	8006f54 <HAL_Delay>
      ms++;
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	3301      	adds	r3, #1
 801019e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80101a0:	6878      	ldr	r0, [r7, #4]
 80101a2:	f001 fa26 	bl	80115f2 <USB_GetMode>
 80101a6:	4603      	mov	r3, r0
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d005      	beq.n	80101b8 <USB_SetCurrentMode+0x84>
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	2b31      	cmp	r3, #49	; 0x31
 80101b0:	d9f0      	bls.n	8010194 <USB_SetCurrentMode+0x60>
 80101b2:	e001      	b.n	80101b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80101b4:	2301      	movs	r3, #1
 80101b6:	e005      	b.n	80101c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	2b32      	cmp	r3, #50	; 0x32
 80101bc:	d101      	bne.n	80101c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80101be:	2301      	movs	r3, #1
 80101c0:	e000      	b.n	80101c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80101c2:	2300      	movs	r3, #0
}
 80101c4:	4618      	mov	r0, r3
 80101c6:	3710      	adds	r7, #16
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd80      	pop	{r7, pc}

080101cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80101cc:	b084      	sub	sp, #16
 80101ce:	b580      	push	{r7, lr}
 80101d0:	b086      	sub	sp, #24
 80101d2:	af00      	add	r7, sp, #0
 80101d4:	6078      	str	r0, [r7, #4]
 80101d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80101da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80101de:	2300      	movs	r3, #0
 80101e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80101e6:	2300      	movs	r3, #0
 80101e8:	613b      	str	r3, [r7, #16]
 80101ea:	e009      	b.n	8010200 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80101ec:	687a      	ldr	r2, [r7, #4]
 80101ee:	693b      	ldr	r3, [r7, #16]
 80101f0:	3340      	adds	r3, #64	; 0x40
 80101f2:	009b      	lsls	r3, r3, #2
 80101f4:	4413      	add	r3, r2
 80101f6:	2200      	movs	r2, #0
 80101f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80101fa:	693b      	ldr	r3, [r7, #16]
 80101fc:	3301      	adds	r3, #1
 80101fe:	613b      	str	r3, [r7, #16]
 8010200:	693b      	ldr	r3, [r7, #16]
 8010202:	2b0e      	cmp	r3, #14
 8010204:	d9f2      	bls.n	80101ec <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010208:	2b00      	cmp	r3, #0
 801020a:	d11c      	bne.n	8010246 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010212:	685b      	ldr	r3, [r3, #4]
 8010214:	68fa      	ldr	r2, [r7, #12]
 8010216:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801021a:	f043 0302 	orr.w	r3, r3, #2
 801021e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010224:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	601a      	str	r2, [r3, #0]
 8010244:	e005      	b.n	8010252 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801024a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010258:	461a      	mov	r2, r3
 801025a:	2300      	movs	r3, #0
 801025c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010264:	4619      	mov	r1, r3
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801026c:	461a      	mov	r2, r3
 801026e:	680b      	ldr	r3, [r1, #0]
 8010270:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010274:	2b01      	cmp	r3, #1
 8010276:	d10c      	bne.n	8010292 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801027a:	2b00      	cmp	r3, #0
 801027c:	d104      	bne.n	8010288 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801027e:	2100      	movs	r1, #0
 8010280:	6878      	ldr	r0, [r7, #4]
 8010282:	f000 f965 	bl	8010550 <USB_SetDevSpeed>
 8010286:	e008      	b.n	801029a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010288:	2101      	movs	r1, #1
 801028a:	6878      	ldr	r0, [r7, #4]
 801028c:	f000 f960 	bl	8010550 <USB_SetDevSpeed>
 8010290:	e003      	b.n	801029a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010292:	2103      	movs	r1, #3
 8010294:	6878      	ldr	r0, [r7, #4]
 8010296:	f000 f95b 	bl	8010550 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801029a:	2110      	movs	r1, #16
 801029c:	6878      	ldr	r0, [r7, #4]
 801029e:	f000 f8f3 	bl	8010488 <USB_FlushTxFifo>
 80102a2:	4603      	mov	r3, r0
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d001      	beq.n	80102ac <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80102a8:	2301      	movs	r3, #1
 80102aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80102ac:	6878      	ldr	r0, [r7, #4]
 80102ae:	f000 f91f 	bl	80104f0 <USB_FlushRxFifo>
 80102b2:	4603      	mov	r3, r0
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d001      	beq.n	80102bc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80102b8:	2301      	movs	r3, #1
 80102ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102c2:	461a      	mov	r2, r3
 80102c4:	2300      	movs	r3, #0
 80102c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102ce:	461a      	mov	r2, r3
 80102d0:	2300      	movs	r3, #0
 80102d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102da:	461a      	mov	r2, r3
 80102dc:	2300      	movs	r3, #0
 80102de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80102e0:	2300      	movs	r3, #0
 80102e2:	613b      	str	r3, [r7, #16]
 80102e4:	e043      	b.n	801036e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80102e6:	693b      	ldr	r3, [r7, #16]
 80102e8:	015a      	lsls	r2, r3, #5
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	4413      	add	r3, r2
 80102ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80102f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80102fc:	d118      	bne.n	8010330 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80102fe:	693b      	ldr	r3, [r7, #16]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d10a      	bne.n	801031a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010304:	693b      	ldr	r3, [r7, #16]
 8010306:	015a      	lsls	r2, r3, #5
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	4413      	add	r3, r2
 801030c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010310:	461a      	mov	r2, r3
 8010312:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010316:	6013      	str	r3, [r2, #0]
 8010318:	e013      	b.n	8010342 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801031a:	693b      	ldr	r3, [r7, #16]
 801031c:	015a      	lsls	r2, r3, #5
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	4413      	add	r3, r2
 8010322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010326:	461a      	mov	r2, r3
 8010328:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801032c:	6013      	str	r3, [r2, #0]
 801032e:	e008      	b.n	8010342 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010330:	693b      	ldr	r3, [r7, #16]
 8010332:	015a      	lsls	r2, r3, #5
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	4413      	add	r3, r2
 8010338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801033c:	461a      	mov	r2, r3
 801033e:	2300      	movs	r3, #0
 8010340:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010342:	693b      	ldr	r3, [r7, #16]
 8010344:	015a      	lsls	r2, r3, #5
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	4413      	add	r3, r2
 801034a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801034e:	461a      	mov	r2, r3
 8010350:	2300      	movs	r3, #0
 8010352:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010354:	693b      	ldr	r3, [r7, #16]
 8010356:	015a      	lsls	r2, r3, #5
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	4413      	add	r3, r2
 801035c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010360:	461a      	mov	r2, r3
 8010362:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010366:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010368:	693b      	ldr	r3, [r7, #16]
 801036a:	3301      	adds	r3, #1
 801036c:	613b      	str	r3, [r7, #16]
 801036e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010370:	693a      	ldr	r2, [r7, #16]
 8010372:	429a      	cmp	r2, r3
 8010374:	d3b7      	bcc.n	80102e6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010376:	2300      	movs	r3, #0
 8010378:	613b      	str	r3, [r7, #16]
 801037a:	e043      	b.n	8010404 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801037c:	693b      	ldr	r3, [r7, #16]
 801037e:	015a      	lsls	r2, r3, #5
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	4413      	add	r3, r2
 8010384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801038e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010392:	d118      	bne.n	80103c6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8010394:	693b      	ldr	r3, [r7, #16]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d10a      	bne.n	80103b0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801039a:	693b      	ldr	r3, [r7, #16]
 801039c:	015a      	lsls	r2, r3, #5
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	4413      	add	r3, r2
 80103a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103a6:	461a      	mov	r2, r3
 80103a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80103ac:	6013      	str	r3, [r2, #0]
 80103ae:	e013      	b.n	80103d8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80103b0:	693b      	ldr	r3, [r7, #16]
 80103b2:	015a      	lsls	r2, r3, #5
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	4413      	add	r3, r2
 80103b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103bc:	461a      	mov	r2, r3
 80103be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80103c2:	6013      	str	r3, [r2, #0]
 80103c4:	e008      	b.n	80103d8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80103c6:	693b      	ldr	r3, [r7, #16]
 80103c8:	015a      	lsls	r2, r3, #5
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	4413      	add	r3, r2
 80103ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103d2:	461a      	mov	r2, r3
 80103d4:	2300      	movs	r3, #0
 80103d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80103d8:	693b      	ldr	r3, [r7, #16]
 80103da:	015a      	lsls	r2, r3, #5
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	4413      	add	r3, r2
 80103e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103e4:	461a      	mov	r2, r3
 80103e6:	2300      	movs	r3, #0
 80103e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80103ea:	693b      	ldr	r3, [r7, #16]
 80103ec:	015a      	lsls	r2, r3, #5
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	4413      	add	r3, r2
 80103f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103f6:	461a      	mov	r2, r3
 80103f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80103fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80103fe:	693b      	ldr	r3, [r7, #16]
 8010400:	3301      	adds	r3, #1
 8010402:	613b      	str	r3, [r7, #16]
 8010404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010406:	693a      	ldr	r2, [r7, #16]
 8010408:	429a      	cmp	r2, r3
 801040a:	d3b7      	bcc.n	801037c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010412:	691b      	ldr	r3, [r3, #16]
 8010414:	68fa      	ldr	r2, [r7, #12]
 8010416:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801041a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801041e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	2200      	movs	r2, #0
 8010424:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801042c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801042e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010430:	2b00      	cmp	r3, #0
 8010432:	d105      	bne.n	8010440 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	699b      	ldr	r3, [r3, #24]
 8010438:	f043 0210 	orr.w	r2, r3, #16
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	699a      	ldr	r2, [r3, #24]
 8010444:	4b0f      	ldr	r3, [pc, #60]	; (8010484 <USB_DevInit+0x2b8>)
 8010446:	4313      	orrs	r3, r2
 8010448:	687a      	ldr	r2, [r7, #4]
 801044a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801044c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801044e:	2b00      	cmp	r3, #0
 8010450:	d005      	beq.n	801045e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	699b      	ldr	r3, [r3, #24]
 8010456:	f043 0208 	orr.w	r2, r3, #8
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801045e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010460:	2b01      	cmp	r3, #1
 8010462:	d107      	bne.n	8010474 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	699b      	ldr	r3, [r3, #24]
 8010468:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801046c:	f043 0304 	orr.w	r3, r3, #4
 8010470:	687a      	ldr	r2, [r7, #4]
 8010472:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010474:	7dfb      	ldrb	r3, [r7, #23]
}
 8010476:	4618      	mov	r0, r3
 8010478:	3718      	adds	r7, #24
 801047a:	46bd      	mov	sp, r7
 801047c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010480:	b004      	add	sp, #16
 8010482:	4770      	bx	lr
 8010484:	803c3800 	.word	0x803c3800

08010488 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010488:	b480      	push	{r7}
 801048a:	b085      	sub	sp, #20
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
 8010490:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010492:	2300      	movs	r3, #0
 8010494:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	3301      	adds	r3, #1
 801049a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	4a13      	ldr	r2, [pc, #76]	; (80104ec <USB_FlushTxFifo+0x64>)
 80104a0:	4293      	cmp	r3, r2
 80104a2:	d901      	bls.n	80104a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80104a4:	2303      	movs	r3, #3
 80104a6:	e01b      	b.n	80104e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	691b      	ldr	r3, [r3, #16]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	daf2      	bge.n	8010496 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80104b0:	2300      	movs	r3, #0
 80104b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80104b4:	683b      	ldr	r3, [r7, #0]
 80104b6:	019b      	lsls	r3, r3, #6
 80104b8:	f043 0220 	orr.w	r2, r3, #32
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	3301      	adds	r3, #1
 80104c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	4a08      	ldr	r2, [pc, #32]	; (80104ec <USB_FlushTxFifo+0x64>)
 80104ca:	4293      	cmp	r3, r2
 80104cc:	d901      	bls.n	80104d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80104ce:	2303      	movs	r3, #3
 80104d0:	e006      	b.n	80104e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	691b      	ldr	r3, [r3, #16]
 80104d6:	f003 0320 	and.w	r3, r3, #32
 80104da:	2b20      	cmp	r3, #32
 80104dc:	d0f0      	beq.n	80104c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80104de:	2300      	movs	r3, #0
}
 80104e0:	4618      	mov	r0, r3
 80104e2:	3714      	adds	r7, #20
 80104e4:	46bd      	mov	sp, r7
 80104e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ea:	4770      	bx	lr
 80104ec:	00030d40 	.word	0x00030d40

080104f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80104f0:	b480      	push	{r7}
 80104f2:	b085      	sub	sp, #20
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80104f8:	2300      	movs	r3, #0
 80104fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	3301      	adds	r3, #1
 8010500:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	4a11      	ldr	r2, [pc, #68]	; (801054c <USB_FlushRxFifo+0x5c>)
 8010506:	4293      	cmp	r3, r2
 8010508:	d901      	bls.n	801050e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801050a:	2303      	movs	r3, #3
 801050c:	e018      	b.n	8010540 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	691b      	ldr	r3, [r3, #16]
 8010512:	2b00      	cmp	r3, #0
 8010514:	daf2      	bge.n	80104fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8010516:	2300      	movs	r3, #0
 8010518:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	2210      	movs	r2, #16
 801051e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	3301      	adds	r3, #1
 8010524:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	4a08      	ldr	r2, [pc, #32]	; (801054c <USB_FlushRxFifo+0x5c>)
 801052a:	4293      	cmp	r3, r2
 801052c:	d901      	bls.n	8010532 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801052e:	2303      	movs	r3, #3
 8010530:	e006      	b.n	8010540 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	691b      	ldr	r3, [r3, #16]
 8010536:	f003 0310 	and.w	r3, r3, #16
 801053a:	2b10      	cmp	r3, #16
 801053c:	d0f0      	beq.n	8010520 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801053e:	2300      	movs	r3, #0
}
 8010540:	4618      	mov	r0, r3
 8010542:	3714      	adds	r7, #20
 8010544:	46bd      	mov	sp, r7
 8010546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054a:	4770      	bx	lr
 801054c:	00030d40 	.word	0x00030d40

08010550 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010550:	b480      	push	{r7}
 8010552:	b085      	sub	sp, #20
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
 8010558:	460b      	mov	r3, r1
 801055a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010566:	681a      	ldr	r2, [r3, #0]
 8010568:	78fb      	ldrb	r3, [r7, #3]
 801056a:	68f9      	ldr	r1, [r7, #12]
 801056c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010570:	4313      	orrs	r3, r2
 8010572:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010574:	2300      	movs	r3, #0
}
 8010576:	4618      	mov	r0, r3
 8010578:	3714      	adds	r7, #20
 801057a:	46bd      	mov	sp, r7
 801057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010580:	4770      	bx	lr

08010582 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8010582:	b480      	push	{r7}
 8010584:	b087      	sub	sp, #28
 8010586:	af00      	add	r7, sp, #0
 8010588:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801058e:	693b      	ldr	r3, [r7, #16]
 8010590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010594:	689b      	ldr	r3, [r3, #8]
 8010596:	f003 0306 	and.w	r3, r3, #6
 801059a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d102      	bne.n	80105a8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80105a2:	2300      	movs	r3, #0
 80105a4:	75fb      	strb	r3, [r7, #23]
 80105a6:	e00a      	b.n	80105be <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	2b02      	cmp	r3, #2
 80105ac:	d002      	beq.n	80105b4 <USB_GetDevSpeed+0x32>
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	2b06      	cmp	r3, #6
 80105b2:	d102      	bne.n	80105ba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80105b4:	2302      	movs	r3, #2
 80105b6:	75fb      	strb	r3, [r7, #23]
 80105b8:	e001      	b.n	80105be <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80105ba:	230f      	movs	r3, #15
 80105bc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80105be:	7dfb      	ldrb	r3, [r7, #23]
}
 80105c0:	4618      	mov	r0, r3
 80105c2:	371c      	adds	r7, #28
 80105c4:	46bd      	mov	sp, r7
 80105c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ca:	4770      	bx	lr

080105cc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80105cc:	b480      	push	{r7}
 80105ce:	b085      	sub	sp, #20
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
 80105d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80105da:	683b      	ldr	r3, [r7, #0]
 80105dc:	781b      	ldrb	r3, [r3, #0]
 80105de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80105e0:	683b      	ldr	r3, [r7, #0]
 80105e2:	785b      	ldrb	r3, [r3, #1]
 80105e4:	2b01      	cmp	r3, #1
 80105e6:	d13a      	bne.n	801065e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80105ee:	69da      	ldr	r2, [r3, #28]
 80105f0:	683b      	ldr	r3, [r7, #0]
 80105f2:	781b      	ldrb	r3, [r3, #0]
 80105f4:	f003 030f 	and.w	r3, r3, #15
 80105f8:	2101      	movs	r1, #1
 80105fa:	fa01 f303 	lsl.w	r3, r1, r3
 80105fe:	b29b      	uxth	r3, r3
 8010600:	68f9      	ldr	r1, [r7, #12]
 8010602:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010606:	4313      	orrs	r3, r2
 8010608:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801060a:	68bb      	ldr	r3, [r7, #8]
 801060c:	015a      	lsls	r2, r3, #5
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	4413      	add	r3, r2
 8010612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801061c:	2b00      	cmp	r3, #0
 801061e:	d155      	bne.n	80106cc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010620:	68bb      	ldr	r3, [r7, #8]
 8010622:	015a      	lsls	r2, r3, #5
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	4413      	add	r3, r2
 8010628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801062c:	681a      	ldr	r2, [r3, #0]
 801062e:	683b      	ldr	r3, [r7, #0]
 8010630:	68db      	ldr	r3, [r3, #12]
 8010632:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010636:	683b      	ldr	r3, [r7, #0]
 8010638:	791b      	ldrb	r3, [r3, #4]
 801063a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801063c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801063e:	68bb      	ldr	r3, [r7, #8]
 8010640:	059b      	lsls	r3, r3, #22
 8010642:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010644:	4313      	orrs	r3, r2
 8010646:	68ba      	ldr	r2, [r7, #8]
 8010648:	0151      	lsls	r1, r2, #5
 801064a:	68fa      	ldr	r2, [r7, #12]
 801064c:	440a      	add	r2, r1
 801064e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801065a:	6013      	str	r3, [r2, #0]
 801065c:	e036      	b.n	80106cc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010664:	69da      	ldr	r2, [r3, #28]
 8010666:	683b      	ldr	r3, [r7, #0]
 8010668:	781b      	ldrb	r3, [r3, #0]
 801066a:	f003 030f 	and.w	r3, r3, #15
 801066e:	2101      	movs	r1, #1
 8010670:	fa01 f303 	lsl.w	r3, r1, r3
 8010674:	041b      	lsls	r3, r3, #16
 8010676:	68f9      	ldr	r1, [r7, #12]
 8010678:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801067c:	4313      	orrs	r3, r2
 801067e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8010680:	68bb      	ldr	r3, [r7, #8]
 8010682:	015a      	lsls	r2, r3, #5
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	4413      	add	r3, r2
 8010688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010692:	2b00      	cmp	r3, #0
 8010694:	d11a      	bne.n	80106cc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010696:	68bb      	ldr	r3, [r7, #8]
 8010698:	015a      	lsls	r2, r3, #5
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	4413      	add	r3, r2
 801069e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106a2:	681a      	ldr	r2, [r3, #0]
 80106a4:	683b      	ldr	r3, [r7, #0]
 80106a6:	68db      	ldr	r3, [r3, #12]
 80106a8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80106ac:	683b      	ldr	r3, [r7, #0]
 80106ae:	791b      	ldrb	r3, [r3, #4]
 80106b0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80106b2:	430b      	orrs	r3, r1
 80106b4:	4313      	orrs	r3, r2
 80106b6:	68ba      	ldr	r2, [r7, #8]
 80106b8:	0151      	lsls	r1, r2, #5
 80106ba:	68fa      	ldr	r2, [r7, #12]
 80106bc:	440a      	add	r2, r1
 80106be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80106c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80106c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80106ca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80106cc:	2300      	movs	r3, #0
}
 80106ce:	4618      	mov	r0, r3
 80106d0:	3714      	adds	r7, #20
 80106d2:	46bd      	mov	sp, r7
 80106d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d8:	4770      	bx	lr
	...

080106dc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80106dc:	b480      	push	{r7}
 80106de:	b085      	sub	sp, #20
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
 80106e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80106ea:	683b      	ldr	r3, [r7, #0]
 80106ec:	781b      	ldrb	r3, [r3, #0]
 80106ee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80106f0:	683b      	ldr	r3, [r7, #0]
 80106f2:	785b      	ldrb	r3, [r3, #1]
 80106f4:	2b01      	cmp	r3, #1
 80106f6:	d161      	bne.n	80107bc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80106f8:	68bb      	ldr	r3, [r7, #8]
 80106fa:	015a      	lsls	r2, r3, #5
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	4413      	add	r3, r2
 8010700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801070a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801070e:	d11f      	bne.n	8010750 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8010710:	68bb      	ldr	r3, [r7, #8]
 8010712:	015a      	lsls	r2, r3, #5
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	4413      	add	r3, r2
 8010718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	68ba      	ldr	r2, [r7, #8]
 8010720:	0151      	lsls	r1, r2, #5
 8010722:	68fa      	ldr	r2, [r7, #12]
 8010724:	440a      	add	r2, r1
 8010726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801072a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801072e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8010730:	68bb      	ldr	r3, [r7, #8]
 8010732:	015a      	lsls	r2, r3, #5
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	4413      	add	r3, r2
 8010738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	68ba      	ldr	r2, [r7, #8]
 8010740:	0151      	lsls	r1, r2, #5
 8010742:	68fa      	ldr	r2, [r7, #12]
 8010744:	440a      	add	r2, r1
 8010746:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801074a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801074e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010756:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010758:	683b      	ldr	r3, [r7, #0]
 801075a:	781b      	ldrb	r3, [r3, #0]
 801075c:	f003 030f 	and.w	r3, r3, #15
 8010760:	2101      	movs	r1, #1
 8010762:	fa01 f303 	lsl.w	r3, r1, r3
 8010766:	b29b      	uxth	r3, r3
 8010768:	43db      	mvns	r3, r3
 801076a:	68f9      	ldr	r1, [r7, #12]
 801076c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010770:	4013      	ands	r3, r2
 8010772:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801077a:	69da      	ldr	r2, [r3, #28]
 801077c:	683b      	ldr	r3, [r7, #0]
 801077e:	781b      	ldrb	r3, [r3, #0]
 8010780:	f003 030f 	and.w	r3, r3, #15
 8010784:	2101      	movs	r1, #1
 8010786:	fa01 f303 	lsl.w	r3, r1, r3
 801078a:	b29b      	uxth	r3, r3
 801078c:	43db      	mvns	r3, r3
 801078e:	68f9      	ldr	r1, [r7, #12]
 8010790:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010794:	4013      	ands	r3, r2
 8010796:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8010798:	68bb      	ldr	r3, [r7, #8]
 801079a:	015a      	lsls	r2, r3, #5
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	4413      	add	r3, r2
 80107a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107a4:	681a      	ldr	r2, [r3, #0]
 80107a6:	68bb      	ldr	r3, [r7, #8]
 80107a8:	0159      	lsls	r1, r3, #5
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	440b      	add	r3, r1
 80107ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107b2:	4619      	mov	r1, r3
 80107b4:	4b35      	ldr	r3, [pc, #212]	; (801088c <USB_DeactivateEndpoint+0x1b0>)
 80107b6:	4013      	ands	r3, r2
 80107b8:	600b      	str	r3, [r1, #0]
 80107ba:	e060      	b.n	801087e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80107bc:	68bb      	ldr	r3, [r7, #8]
 80107be:	015a      	lsls	r2, r3, #5
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	4413      	add	r3, r2
 80107c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80107ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80107d2:	d11f      	bne.n	8010814 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80107d4:	68bb      	ldr	r3, [r7, #8]
 80107d6:	015a      	lsls	r2, r3, #5
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	4413      	add	r3, r2
 80107dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	68ba      	ldr	r2, [r7, #8]
 80107e4:	0151      	lsls	r1, r2, #5
 80107e6:	68fa      	ldr	r2, [r7, #12]
 80107e8:	440a      	add	r2, r1
 80107ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80107ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80107f2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80107f4:	68bb      	ldr	r3, [r7, #8]
 80107f6:	015a      	lsls	r2, r3, #5
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	4413      	add	r3, r2
 80107fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	68ba      	ldr	r2, [r7, #8]
 8010804:	0151      	lsls	r1, r2, #5
 8010806:	68fa      	ldr	r2, [r7, #12]
 8010808:	440a      	add	r2, r1
 801080a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801080e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010812:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801081a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801081c:	683b      	ldr	r3, [r7, #0]
 801081e:	781b      	ldrb	r3, [r3, #0]
 8010820:	f003 030f 	and.w	r3, r3, #15
 8010824:	2101      	movs	r1, #1
 8010826:	fa01 f303 	lsl.w	r3, r1, r3
 801082a:	041b      	lsls	r3, r3, #16
 801082c:	43db      	mvns	r3, r3
 801082e:	68f9      	ldr	r1, [r7, #12]
 8010830:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010834:	4013      	ands	r3, r2
 8010836:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801083e:	69da      	ldr	r2, [r3, #28]
 8010840:	683b      	ldr	r3, [r7, #0]
 8010842:	781b      	ldrb	r3, [r3, #0]
 8010844:	f003 030f 	and.w	r3, r3, #15
 8010848:	2101      	movs	r1, #1
 801084a:	fa01 f303 	lsl.w	r3, r1, r3
 801084e:	041b      	lsls	r3, r3, #16
 8010850:	43db      	mvns	r3, r3
 8010852:	68f9      	ldr	r1, [r7, #12]
 8010854:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010858:	4013      	ands	r3, r2
 801085a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801085c:	68bb      	ldr	r3, [r7, #8]
 801085e:	015a      	lsls	r2, r3, #5
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	4413      	add	r3, r2
 8010864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010868:	681a      	ldr	r2, [r3, #0]
 801086a:	68bb      	ldr	r3, [r7, #8]
 801086c:	0159      	lsls	r1, r3, #5
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	440b      	add	r3, r1
 8010872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010876:	4619      	mov	r1, r3
 8010878:	4b05      	ldr	r3, [pc, #20]	; (8010890 <USB_DeactivateEndpoint+0x1b4>)
 801087a:	4013      	ands	r3, r2
 801087c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801087e:	2300      	movs	r3, #0
}
 8010880:	4618      	mov	r0, r3
 8010882:	3714      	adds	r7, #20
 8010884:	46bd      	mov	sp, r7
 8010886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088a:	4770      	bx	lr
 801088c:	ec337800 	.word	0xec337800
 8010890:	eff37800 	.word	0xeff37800

08010894 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010894:	b580      	push	{r7, lr}
 8010896:	b08a      	sub	sp, #40	; 0x28
 8010898:	af02      	add	r7, sp, #8
 801089a:	60f8      	str	r0, [r7, #12]
 801089c:	60b9      	str	r1, [r7, #8]
 801089e:	4613      	mov	r3, r2
 80108a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80108a6:	68bb      	ldr	r3, [r7, #8]
 80108a8:	781b      	ldrb	r3, [r3, #0]
 80108aa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80108ac:	68bb      	ldr	r3, [r7, #8]
 80108ae:	785b      	ldrb	r3, [r3, #1]
 80108b0:	2b01      	cmp	r3, #1
 80108b2:	f040 815c 	bne.w	8010b6e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80108b6:	68bb      	ldr	r3, [r7, #8]
 80108b8:	699b      	ldr	r3, [r3, #24]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d132      	bne.n	8010924 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80108be:	69bb      	ldr	r3, [r7, #24]
 80108c0:	015a      	lsls	r2, r3, #5
 80108c2:	69fb      	ldr	r3, [r7, #28]
 80108c4:	4413      	add	r3, r2
 80108c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108ca:	691b      	ldr	r3, [r3, #16]
 80108cc:	69ba      	ldr	r2, [r7, #24]
 80108ce:	0151      	lsls	r1, r2, #5
 80108d0:	69fa      	ldr	r2, [r7, #28]
 80108d2:	440a      	add	r2, r1
 80108d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80108d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80108dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80108e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80108e2:	69bb      	ldr	r3, [r7, #24]
 80108e4:	015a      	lsls	r2, r3, #5
 80108e6:	69fb      	ldr	r3, [r7, #28]
 80108e8:	4413      	add	r3, r2
 80108ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108ee:	691b      	ldr	r3, [r3, #16]
 80108f0:	69ba      	ldr	r2, [r7, #24]
 80108f2:	0151      	lsls	r1, r2, #5
 80108f4:	69fa      	ldr	r2, [r7, #28]
 80108f6:	440a      	add	r2, r1
 80108f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80108fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010900:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010902:	69bb      	ldr	r3, [r7, #24]
 8010904:	015a      	lsls	r2, r3, #5
 8010906:	69fb      	ldr	r3, [r7, #28]
 8010908:	4413      	add	r3, r2
 801090a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801090e:	691b      	ldr	r3, [r3, #16]
 8010910:	69ba      	ldr	r2, [r7, #24]
 8010912:	0151      	lsls	r1, r2, #5
 8010914:	69fa      	ldr	r2, [r7, #28]
 8010916:	440a      	add	r2, r1
 8010918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801091c:	0cdb      	lsrs	r3, r3, #19
 801091e:	04db      	lsls	r3, r3, #19
 8010920:	6113      	str	r3, [r2, #16]
 8010922:	e074      	b.n	8010a0e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010924:	69bb      	ldr	r3, [r7, #24]
 8010926:	015a      	lsls	r2, r3, #5
 8010928:	69fb      	ldr	r3, [r7, #28]
 801092a:	4413      	add	r3, r2
 801092c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010930:	691b      	ldr	r3, [r3, #16]
 8010932:	69ba      	ldr	r2, [r7, #24]
 8010934:	0151      	lsls	r1, r2, #5
 8010936:	69fa      	ldr	r2, [r7, #28]
 8010938:	440a      	add	r2, r1
 801093a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801093e:	0cdb      	lsrs	r3, r3, #19
 8010940:	04db      	lsls	r3, r3, #19
 8010942:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010944:	69bb      	ldr	r3, [r7, #24]
 8010946:	015a      	lsls	r2, r3, #5
 8010948:	69fb      	ldr	r3, [r7, #28]
 801094a:	4413      	add	r3, r2
 801094c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010950:	691b      	ldr	r3, [r3, #16]
 8010952:	69ba      	ldr	r2, [r7, #24]
 8010954:	0151      	lsls	r1, r2, #5
 8010956:	69fa      	ldr	r2, [r7, #28]
 8010958:	440a      	add	r2, r1
 801095a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801095e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010962:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010966:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8010968:	69bb      	ldr	r3, [r7, #24]
 801096a:	015a      	lsls	r2, r3, #5
 801096c:	69fb      	ldr	r3, [r7, #28]
 801096e:	4413      	add	r3, r2
 8010970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010974:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8010976:	68bb      	ldr	r3, [r7, #8]
 8010978:	6999      	ldr	r1, [r3, #24]
 801097a:	68bb      	ldr	r3, [r7, #8]
 801097c:	68db      	ldr	r3, [r3, #12]
 801097e:	440b      	add	r3, r1
 8010980:	1e59      	subs	r1, r3, #1
 8010982:	68bb      	ldr	r3, [r7, #8]
 8010984:	68db      	ldr	r3, [r3, #12]
 8010986:	fbb1 f3f3 	udiv	r3, r1, r3
 801098a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801098c:	4b9d      	ldr	r3, [pc, #628]	; (8010c04 <USB_EPStartXfer+0x370>)
 801098e:	400b      	ands	r3, r1
 8010990:	69b9      	ldr	r1, [r7, #24]
 8010992:	0148      	lsls	r0, r1, #5
 8010994:	69f9      	ldr	r1, [r7, #28]
 8010996:	4401      	add	r1, r0
 8010998:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801099c:	4313      	orrs	r3, r2
 801099e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80109a0:	69bb      	ldr	r3, [r7, #24]
 80109a2:	015a      	lsls	r2, r3, #5
 80109a4:	69fb      	ldr	r3, [r7, #28]
 80109a6:	4413      	add	r3, r2
 80109a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109ac:	691a      	ldr	r2, [r3, #16]
 80109ae:	68bb      	ldr	r3, [r7, #8]
 80109b0:	699b      	ldr	r3, [r3, #24]
 80109b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80109b6:	69b9      	ldr	r1, [r7, #24]
 80109b8:	0148      	lsls	r0, r1, #5
 80109ba:	69f9      	ldr	r1, [r7, #28]
 80109bc:	4401      	add	r1, r0
 80109be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80109c2:	4313      	orrs	r3, r2
 80109c4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80109c6:	68bb      	ldr	r3, [r7, #8]
 80109c8:	791b      	ldrb	r3, [r3, #4]
 80109ca:	2b01      	cmp	r3, #1
 80109cc:	d11f      	bne.n	8010a0e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80109ce:	69bb      	ldr	r3, [r7, #24]
 80109d0:	015a      	lsls	r2, r3, #5
 80109d2:	69fb      	ldr	r3, [r7, #28]
 80109d4:	4413      	add	r3, r2
 80109d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109da:	691b      	ldr	r3, [r3, #16]
 80109dc:	69ba      	ldr	r2, [r7, #24]
 80109de:	0151      	lsls	r1, r2, #5
 80109e0:	69fa      	ldr	r2, [r7, #28]
 80109e2:	440a      	add	r2, r1
 80109e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80109e8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80109ec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80109ee:	69bb      	ldr	r3, [r7, #24]
 80109f0:	015a      	lsls	r2, r3, #5
 80109f2:	69fb      	ldr	r3, [r7, #28]
 80109f4:	4413      	add	r3, r2
 80109f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109fa:	691b      	ldr	r3, [r3, #16]
 80109fc:	69ba      	ldr	r2, [r7, #24]
 80109fe:	0151      	lsls	r1, r2, #5
 8010a00:	69fa      	ldr	r2, [r7, #28]
 8010a02:	440a      	add	r2, r1
 8010a04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010a0c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8010a0e:	79fb      	ldrb	r3, [r7, #7]
 8010a10:	2b01      	cmp	r3, #1
 8010a12:	d14b      	bne.n	8010aac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010a14:	68bb      	ldr	r3, [r7, #8]
 8010a16:	695b      	ldr	r3, [r3, #20]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d009      	beq.n	8010a30 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010a1c:	69bb      	ldr	r3, [r7, #24]
 8010a1e:	015a      	lsls	r2, r3, #5
 8010a20:	69fb      	ldr	r3, [r7, #28]
 8010a22:	4413      	add	r3, r2
 8010a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a28:	461a      	mov	r2, r3
 8010a2a:	68bb      	ldr	r3, [r7, #8]
 8010a2c:	695b      	ldr	r3, [r3, #20]
 8010a2e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8010a30:	68bb      	ldr	r3, [r7, #8]
 8010a32:	791b      	ldrb	r3, [r3, #4]
 8010a34:	2b01      	cmp	r3, #1
 8010a36:	d128      	bne.n	8010a8a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010a38:	69fb      	ldr	r3, [r7, #28]
 8010a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a3e:	689b      	ldr	r3, [r3, #8]
 8010a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d110      	bne.n	8010a6a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010a48:	69bb      	ldr	r3, [r7, #24]
 8010a4a:	015a      	lsls	r2, r3, #5
 8010a4c:	69fb      	ldr	r3, [r7, #28]
 8010a4e:	4413      	add	r3, r2
 8010a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	69ba      	ldr	r2, [r7, #24]
 8010a58:	0151      	lsls	r1, r2, #5
 8010a5a:	69fa      	ldr	r2, [r7, #28]
 8010a5c:	440a      	add	r2, r1
 8010a5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010a66:	6013      	str	r3, [r2, #0]
 8010a68:	e00f      	b.n	8010a8a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010a6a:	69bb      	ldr	r3, [r7, #24]
 8010a6c:	015a      	lsls	r2, r3, #5
 8010a6e:	69fb      	ldr	r3, [r7, #28]
 8010a70:	4413      	add	r3, r2
 8010a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a76:	681b      	ldr	r3, [r3, #0]
 8010a78:	69ba      	ldr	r2, [r7, #24]
 8010a7a:	0151      	lsls	r1, r2, #5
 8010a7c:	69fa      	ldr	r2, [r7, #28]
 8010a7e:	440a      	add	r2, r1
 8010a80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010a88:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010a8a:	69bb      	ldr	r3, [r7, #24]
 8010a8c:	015a      	lsls	r2, r3, #5
 8010a8e:	69fb      	ldr	r3, [r7, #28]
 8010a90:	4413      	add	r3, r2
 8010a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	69ba      	ldr	r2, [r7, #24]
 8010a9a:	0151      	lsls	r1, r2, #5
 8010a9c:	69fa      	ldr	r2, [r7, #28]
 8010a9e:	440a      	add	r2, r1
 8010aa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010aa4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010aa8:	6013      	str	r3, [r2, #0]
 8010aaa:	e133      	b.n	8010d14 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010aac:	69bb      	ldr	r3, [r7, #24]
 8010aae:	015a      	lsls	r2, r3, #5
 8010ab0:	69fb      	ldr	r3, [r7, #28]
 8010ab2:	4413      	add	r3, r2
 8010ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	69ba      	ldr	r2, [r7, #24]
 8010abc:	0151      	lsls	r1, r2, #5
 8010abe:	69fa      	ldr	r2, [r7, #28]
 8010ac0:	440a      	add	r2, r1
 8010ac2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010ac6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010aca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010acc:	68bb      	ldr	r3, [r7, #8]
 8010ace:	791b      	ldrb	r3, [r3, #4]
 8010ad0:	2b01      	cmp	r3, #1
 8010ad2:	d015      	beq.n	8010b00 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8010ad4:	68bb      	ldr	r3, [r7, #8]
 8010ad6:	699b      	ldr	r3, [r3, #24]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	f000 811b 	beq.w	8010d14 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010ade:	69fb      	ldr	r3, [r7, #28]
 8010ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ae4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010ae6:	68bb      	ldr	r3, [r7, #8]
 8010ae8:	781b      	ldrb	r3, [r3, #0]
 8010aea:	f003 030f 	and.w	r3, r3, #15
 8010aee:	2101      	movs	r1, #1
 8010af0:	fa01 f303 	lsl.w	r3, r1, r3
 8010af4:	69f9      	ldr	r1, [r7, #28]
 8010af6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010afa:	4313      	orrs	r3, r2
 8010afc:	634b      	str	r3, [r1, #52]	; 0x34
 8010afe:	e109      	b.n	8010d14 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010b00:	69fb      	ldr	r3, [r7, #28]
 8010b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b06:	689b      	ldr	r3, [r3, #8]
 8010b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d110      	bne.n	8010b32 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010b10:	69bb      	ldr	r3, [r7, #24]
 8010b12:	015a      	lsls	r2, r3, #5
 8010b14:	69fb      	ldr	r3, [r7, #28]
 8010b16:	4413      	add	r3, r2
 8010b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	69ba      	ldr	r2, [r7, #24]
 8010b20:	0151      	lsls	r1, r2, #5
 8010b22:	69fa      	ldr	r2, [r7, #28]
 8010b24:	440a      	add	r2, r1
 8010b26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010b2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010b2e:	6013      	str	r3, [r2, #0]
 8010b30:	e00f      	b.n	8010b52 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010b32:	69bb      	ldr	r3, [r7, #24]
 8010b34:	015a      	lsls	r2, r3, #5
 8010b36:	69fb      	ldr	r3, [r7, #28]
 8010b38:	4413      	add	r3, r2
 8010b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	69ba      	ldr	r2, [r7, #24]
 8010b42:	0151      	lsls	r1, r2, #5
 8010b44:	69fa      	ldr	r2, [r7, #28]
 8010b46:	440a      	add	r2, r1
 8010b48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010b50:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8010b52:	68bb      	ldr	r3, [r7, #8]
 8010b54:	6919      	ldr	r1, [r3, #16]
 8010b56:	68bb      	ldr	r3, [r7, #8]
 8010b58:	781a      	ldrb	r2, [r3, #0]
 8010b5a:	68bb      	ldr	r3, [r7, #8]
 8010b5c:	699b      	ldr	r3, [r3, #24]
 8010b5e:	b298      	uxth	r0, r3
 8010b60:	79fb      	ldrb	r3, [r7, #7]
 8010b62:	9300      	str	r3, [sp, #0]
 8010b64:	4603      	mov	r3, r0
 8010b66:	68f8      	ldr	r0, [r7, #12]
 8010b68:	f000 fade 	bl	8011128 <USB_WritePacket>
 8010b6c:	e0d2      	b.n	8010d14 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010b6e:	69bb      	ldr	r3, [r7, #24]
 8010b70:	015a      	lsls	r2, r3, #5
 8010b72:	69fb      	ldr	r3, [r7, #28]
 8010b74:	4413      	add	r3, r2
 8010b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b7a:	691b      	ldr	r3, [r3, #16]
 8010b7c:	69ba      	ldr	r2, [r7, #24]
 8010b7e:	0151      	lsls	r1, r2, #5
 8010b80:	69fa      	ldr	r2, [r7, #28]
 8010b82:	440a      	add	r2, r1
 8010b84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b88:	0cdb      	lsrs	r3, r3, #19
 8010b8a:	04db      	lsls	r3, r3, #19
 8010b8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010b8e:	69bb      	ldr	r3, [r7, #24]
 8010b90:	015a      	lsls	r2, r3, #5
 8010b92:	69fb      	ldr	r3, [r7, #28]
 8010b94:	4413      	add	r3, r2
 8010b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b9a:	691b      	ldr	r3, [r3, #16]
 8010b9c:	69ba      	ldr	r2, [r7, #24]
 8010b9e:	0151      	lsls	r1, r2, #5
 8010ba0:	69fa      	ldr	r2, [r7, #28]
 8010ba2:	440a      	add	r2, r1
 8010ba4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010ba8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010bac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010bb0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8010bb2:	68bb      	ldr	r3, [r7, #8]
 8010bb4:	699b      	ldr	r3, [r3, #24]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d126      	bne.n	8010c08 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8010bba:	69bb      	ldr	r3, [r7, #24]
 8010bbc:	015a      	lsls	r2, r3, #5
 8010bbe:	69fb      	ldr	r3, [r7, #28]
 8010bc0:	4413      	add	r3, r2
 8010bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bc6:	691a      	ldr	r2, [r3, #16]
 8010bc8:	68bb      	ldr	r3, [r7, #8]
 8010bca:	68db      	ldr	r3, [r3, #12]
 8010bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010bd0:	69b9      	ldr	r1, [r7, #24]
 8010bd2:	0148      	lsls	r0, r1, #5
 8010bd4:	69f9      	ldr	r1, [r7, #28]
 8010bd6:	4401      	add	r1, r0
 8010bd8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010bdc:	4313      	orrs	r3, r2
 8010bde:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010be0:	69bb      	ldr	r3, [r7, #24]
 8010be2:	015a      	lsls	r2, r3, #5
 8010be4:	69fb      	ldr	r3, [r7, #28]
 8010be6:	4413      	add	r3, r2
 8010be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bec:	691b      	ldr	r3, [r3, #16]
 8010bee:	69ba      	ldr	r2, [r7, #24]
 8010bf0:	0151      	lsls	r1, r2, #5
 8010bf2:	69fa      	ldr	r2, [r7, #28]
 8010bf4:	440a      	add	r2, r1
 8010bf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010bfa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010bfe:	6113      	str	r3, [r2, #16]
 8010c00:	e03a      	b.n	8010c78 <USB_EPStartXfer+0x3e4>
 8010c02:	bf00      	nop
 8010c04:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010c08:	68bb      	ldr	r3, [r7, #8]
 8010c0a:	699a      	ldr	r2, [r3, #24]
 8010c0c:	68bb      	ldr	r3, [r7, #8]
 8010c0e:	68db      	ldr	r3, [r3, #12]
 8010c10:	4413      	add	r3, r2
 8010c12:	1e5a      	subs	r2, r3, #1
 8010c14:	68bb      	ldr	r3, [r7, #8]
 8010c16:	68db      	ldr	r3, [r3, #12]
 8010c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8010c1c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8010c1e:	68bb      	ldr	r3, [r7, #8]
 8010c20:	68db      	ldr	r3, [r3, #12]
 8010c22:	8afa      	ldrh	r2, [r7, #22]
 8010c24:	fb03 f202 	mul.w	r2, r3, r2
 8010c28:	68bb      	ldr	r3, [r7, #8]
 8010c2a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010c2c:	69bb      	ldr	r3, [r7, #24]
 8010c2e:	015a      	lsls	r2, r3, #5
 8010c30:	69fb      	ldr	r3, [r7, #28]
 8010c32:	4413      	add	r3, r2
 8010c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c38:	691a      	ldr	r2, [r3, #16]
 8010c3a:	8afb      	ldrh	r3, [r7, #22]
 8010c3c:	04d9      	lsls	r1, r3, #19
 8010c3e:	4b38      	ldr	r3, [pc, #224]	; (8010d20 <USB_EPStartXfer+0x48c>)
 8010c40:	400b      	ands	r3, r1
 8010c42:	69b9      	ldr	r1, [r7, #24]
 8010c44:	0148      	lsls	r0, r1, #5
 8010c46:	69f9      	ldr	r1, [r7, #28]
 8010c48:	4401      	add	r1, r0
 8010c4a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010c4e:	4313      	orrs	r3, r2
 8010c50:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8010c52:	69bb      	ldr	r3, [r7, #24]
 8010c54:	015a      	lsls	r2, r3, #5
 8010c56:	69fb      	ldr	r3, [r7, #28]
 8010c58:	4413      	add	r3, r2
 8010c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c5e:	691a      	ldr	r2, [r3, #16]
 8010c60:	68bb      	ldr	r3, [r7, #8]
 8010c62:	69db      	ldr	r3, [r3, #28]
 8010c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010c68:	69b9      	ldr	r1, [r7, #24]
 8010c6a:	0148      	lsls	r0, r1, #5
 8010c6c:	69f9      	ldr	r1, [r7, #28]
 8010c6e:	4401      	add	r1, r0
 8010c70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010c74:	4313      	orrs	r3, r2
 8010c76:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010c78:	79fb      	ldrb	r3, [r7, #7]
 8010c7a:	2b01      	cmp	r3, #1
 8010c7c:	d10d      	bne.n	8010c9a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010c7e:	68bb      	ldr	r3, [r7, #8]
 8010c80:	691b      	ldr	r3, [r3, #16]
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	d009      	beq.n	8010c9a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010c86:	68bb      	ldr	r3, [r7, #8]
 8010c88:	6919      	ldr	r1, [r3, #16]
 8010c8a:	69bb      	ldr	r3, [r7, #24]
 8010c8c:	015a      	lsls	r2, r3, #5
 8010c8e:	69fb      	ldr	r3, [r7, #28]
 8010c90:	4413      	add	r3, r2
 8010c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c96:	460a      	mov	r2, r1
 8010c98:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8010c9a:	68bb      	ldr	r3, [r7, #8]
 8010c9c:	791b      	ldrb	r3, [r3, #4]
 8010c9e:	2b01      	cmp	r3, #1
 8010ca0:	d128      	bne.n	8010cf4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010ca2:	69fb      	ldr	r3, [r7, #28]
 8010ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ca8:	689b      	ldr	r3, [r3, #8]
 8010caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d110      	bne.n	8010cd4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8010cb2:	69bb      	ldr	r3, [r7, #24]
 8010cb4:	015a      	lsls	r2, r3, #5
 8010cb6:	69fb      	ldr	r3, [r7, #28]
 8010cb8:	4413      	add	r3, r2
 8010cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	69ba      	ldr	r2, [r7, #24]
 8010cc2:	0151      	lsls	r1, r2, #5
 8010cc4:	69fa      	ldr	r2, [r7, #28]
 8010cc6:	440a      	add	r2, r1
 8010cc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010ccc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010cd0:	6013      	str	r3, [r2, #0]
 8010cd2:	e00f      	b.n	8010cf4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010cd4:	69bb      	ldr	r3, [r7, #24]
 8010cd6:	015a      	lsls	r2, r3, #5
 8010cd8:	69fb      	ldr	r3, [r7, #28]
 8010cda:	4413      	add	r3, r2
 8010cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	69ba      	ldr	r2, [r7, #24]
 8010ce4:	0151      	lsls	r1, r2, #5
 8010ce6:	69fa      	ldr	r2, [r7, #28]
 8010ce8:	440a      	add	r2, r1
 8010cea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010cf2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010cf4:	69bb      	ldr	r3, [r7, #24]
 8010cf6:	015a      	lsls	r2, r3, #5
 8010cf8:	69fb      	ldr	r3, [r7, #28]
 8010cfa:	4413      	add	r3, r2
 8010cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	69ba      	ldr	r2, [r7, #24]
 8010d04:	0151      	lsls	r1, r2, #5
 8010d06:	69fa      	ldr	r2, [r7, #28]
 8010d08:	440a      	add	r2, r1
 8010d0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010d0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010d12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010d14:	2300      	movs	r3, #0
}
 8010d16:	4618      	mov	r0, r3
 8010d18:	3720      	adds	r7, #32
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	bd80      	pop	{r7, pc}
 8010d1e:	bf00      	nop
 8010d20:	1ff80000 	.word	0x1ff80000

08010d24 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010d24:	b480      	push	{r7}
 8010d26:	b087      	sub	sp, #28
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	60f8      	str	r0, [r7, #12]
 8010d2c:	60b9      	str	r1, [r7, #8]
 8010d2e:	4613      	mov	r3, r2
 8010d30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8010d36:	68bb      	ldr	r3, [r7, #8]
 8010d38:	781b      	ldrb	r3, [r3, #0]
 8010d3a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010d3c:	68bb      	ldr	r3, [r7, #8]
 8010d3e:	785b      	ldrb	r3, [r3, #1]
 8010d40:	2b01      	cmp	r3, #1
 8010d42:	f040 80ce 	bne.w	8010ee2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010d46:	68bb      	ldr	r3, [r7, #8]
 8010d48:	699b      	ldr	r3, [r3, #24]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d132      	bne.n	8010db4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010d4e:	693b      	ldr	r3, [r7, #16]
 8010d50:	015a      	lsls	r2, r3, #5
 8010d52:	697b      	ldr	r3, [r7, #20]
 8010d54:	4413      	add	r3, r2
 8010d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d5a:	691b      	ldr	r3, [r3, #16]
 8010d5c:	693a      	ldr	r2, [r7, #16]
 8010d5e:	0151      	lsls	r1, r2, #5
 8010d60:	697a      	ldr	r2, [r7, #20]
 8010d62:	440a      	add	r2, r1
 8010d64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010d68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010d6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010d70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010d72:	693b      	ldr	r3, [r7, #16]
 8010d74:	015a      	lsls	r2, r3, #5
 8010d76:	697b      	ldr	r3, [r7, #20]
 8010d78:	4413      	add	r3, r2
 8010d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d7e:	691b      	ldr	r3, [r3, #16]
 8010d80:	693a      	ldr	r2, [r7, #16]
 8010d82:	0151      	lsls	r1, r2, #5
 8010d84:	697a      	ldr	r2, [r7, #20]
 8010d86:	440a      	add	r2, r1
 8010d88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010d8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010d90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010d92:	693b      	ldr	r3, [r7, #16]
 8010d94:	015a      	lsls	r2, r3, #5
 8010d96:	697b      	ldr	r3, [r7, #20]
 8010d98:	4413      	add	r3, r2
 8010d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d9e:	691b      	ldr	r3, [r3, #16]
 8010da0:	693a      	ldr	r2, [r7, #16]
 8010da2:	0151      	lsls	r1, r2, #5
 8010da4:	697a      	ldr	r2, [r7, #20]
 8010da6:	440a      	add	r2, r1
 8010da8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010dac:	0cdb      	lsrs	r3, r3, #19
 8010dae:	04db      	lsls	r3, r3, #19
 8010db0:	6113      	str	r3, [r2, #16]
 8010db2:	e04e      	b.n	8010e52 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010db4:	693b      	ldr	r3, [r7, #16]
 8010db6:	015a      	lsls	r2, r3, #5
 8010db8:	697b      	ldr	r3, [r7, #20]
 8010dba:	4413      	add	r3, r2
 8010dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010dc0:	691b      	ldr	r3, [r3, #16]
 8010dc2:	693a      	ldr	r2, [r7, #16]
 8010dc4:	0151      	lsls	r1, r2, #5
 8010dc6:	697a      	ldr	r2, [r7, #20]
 8010dc8:	440a      	add	r2, r1
 8010dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010dce:	0cdb      	lsrs	r3, r3, #19
 8010dd0:	04db      	lsls	r3, r3, #19
 8010dd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010dd4:	693b      	ldr	r3, [r7, #16]
 8010dd6:	015a      	lsls	r2, r3, #5
 8010dd8:	697b      	ldr	r3, [r7, #20]
 8010dda:	4413      	add	r3, r2
 8010ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010de0:	691b      	ldr	r3, [r3, #16]
 8010de2:	693a      	ldr	r2, [r7, #16]
 8010de4:	0151      	lsls	r1, r2, #5
 8010de6:	697a      	ldr	r2, [r7, #20]
 8010de8:	440a      	add	r2, r1
 8010dea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010dee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010df2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010df6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8010df8:	68bb      	ldr	r3, [r7, #8]
 8010dfa:	699a      	ldr	r2, [r3, #24]
 8010dfc:	68bb      	ldr	r3, [r7, #8]
 8010dfe:	68db      	ldr	r3, [r3, #12]
 8010e00:	429a      	cmp	r2, r3
 8010e02:	d903      	bls.n	8010e0c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8010e04:	68bb      	ldr	r3, [r7, #8]
 8010e06:	68da      	ldr	r2, [r3, #12]
 8010e08:	68bb      	ldr	r3, [r7, #8]
 8010e0a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010e0c:	693b      	ldr	r3, [r7, #16]
 8010e0e:	015a      	lsls	r2, r3, #5
 8010e10:	697b      	ldr	r3, [r7, #20]
 8010e12:	4413      	add	r3, r2
 8010e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e18:	691b      	ldr	r3, [r3, #16]
 8010e1a:	693a      	ldr	r2, [r7, #16]
 8010e1c:	0151      	lsls	r1, r2, #5
 8010e1e:	697a      	ldr	r2, [r7, #20]
 8010e20:	440a      	add	r2, r1
 8010e22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010e26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010e2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010e2c:	693b      	ldr	r3, [r7, #16]
 8010e2e:	015a      	lsls	r2, r3, #5
 8010e30:	697b      	ldr	r3, [r7, #20]
 8010e32:	4413      	add	r3, r2
 8010e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e38:	691a      	ldr	r2, [r3, #16]
 8010e3a:	68bb      	ldr	r3, [r7, #8]
 8010e3c:	699b      	ldr	r3, [r3, #24]
 8010e3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010e42:	6939      	ldr	r1, [r7, #16]
 8010e44:	0148      	lsls	r0, r1, #5
 8010e46:	6979      	ldr	r1, [r7, #20]
 8010e48:	4401      	add	r1, r0
 8010e4a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010e4e:	4313      	orrs	r3, r2
 8010e50:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010e52:	79fb      	ldrb	r3, [r7, #7]
 8010e54:	2b01      	cmp	r3, #1
 8010e56:	d11e      	bne.n	8010e96 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010e58:	68bb      	ldr	r3, [r7, #8]
 8010e5a:	695b      	ldr	r3, [r3, #20]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d009      	beq.n	8010e74 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010e60:	693b      	ldr	r3, [r7, #16]
 8010e62:	015a      	lsls	r2, r3, #5
 8010e64:	697b      	ldr	r3, [r7, #20]
 8010e66:	4413      	add	r3, r2
 8010e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e6c:	461a      	mov	r2, r3
 8010e6e:	68bb      	ldr	r3, [r7, #8]
 8010e70:	695b      	ldr	r3, [r3, #20]
 8010e72:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010e74:	693b      	ldr	r3, [r7, #16]
 8010e76:	015a      	lsls	r2, r3, #5
 8010e78:	697b      	ldr	r3, [r7, #20]
 8010e7a:	4413      	add	r3, r2
 8010e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	693a      	ldr	r2, [r7, #16]
 8010e84:	0151      	lsls	r1, r2, #5
 8010e86:	697a      	ldr	r2, [r7, #20]
 8010e88:	440a      	add	r2, r1
 8010e8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010e8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010e92:	6013      	str	r3, [r2, #0]
 8010e94:	e097      	b.n	8010fc6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010e96:	693b      	ldr	r3, [r7, #16]
 8010e98:	015a      	lsls	r2, r3, #5
 8010e9a:	697b      	ldr	r3, [r7, #20]
 8010e9c:	4413      	add	r3, r2
 8010e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	693a      	ldr	r2, [r7, #16]
 8010ea6:	0151      	lsls	r1, r2, #5
 8010ea8:	697a      	ldr	r2, [r7, #20]
 8010eaa:	440a      	add	r2, r1
 8010eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010eb0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010eb4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8010eb6:	68bb      	ldr	r3, [r7, #8]
 8010eb8:	699b      	ldr	r3, [r3, #24]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	f000 8083 	beq.w	8010fc6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010ec0:	697b      	ldr	r3, [r7, #20]
 8010ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ec6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010ec8:	68bb      	ldr	r3, [r7, #8]
 8010eca:	781b      	ldrb	r3, [r3, #0]
 8010ecc:	f003 030f 	and.w	r3, r3, #15
 8010ed0:	2101      	movs	r1, #1
 8010ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8010ed6:	6979      	ldr	r1, [r7, #20]
 8010ed8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010edc:	4313      	orrs	r3, r2
 8010ede:	634b      	str	r3, [r1, #52]	; 0x34
 8010ee0:	e071      	b.n	8010fc6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010ee2:	693b      	ldr	r3, [r7, #16]
 8010ee4:	015a      	lsls	r2, r3, #5
 8010ee6:	697b      	ldr	r3, [r7, #20]
 8010ee8:	4413      	add	r3, r2
 8010eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010eee:	691b      	ldr	r3, [r3, #16]
 8010ef0:	693a      	ldr	r2, [r7, #16]
 8010ef2:	0151      	lsls	r1, r2, #5
 8010ef4:	697a      	ldr	r2, [r7, #20]
 8010ef6:	440a      	add	r2, r1
 8010ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010efc:	0cdb      	lsrs	r3, r3, #19
 8010efe:	04db      	lsls	r3, r3, #19
 8010f00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010f02:	693b      	ldr	r3, [r7, #16]
 8010f04:	015a      	lsls	r2, r3, #5
 8010f06:	697b      	ldr	r3, [r7, #20]
 8010f08:	4413      	add	r3, r2
 8010f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f0e:	691b      	ldr	r3, [r3, #16]
 8010f10:	693a      	ldr	r2, [r7, #16]
 8010f12:	0151      	lsls	r1, r2, #5
 8010f14:	697a      	ldr	r2, [r7, #20]
 8010f16:	440a      	add	r2, r1
 8010f18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010f1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010f20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010f24:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8010f26:	68bb      	ldr	r3, [r7, #8]
 8010f28:	699b      	ldr	r3, [r3, #24]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d003      	beq.n	8010f36 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8010f2e:	68bb      	ldr	r3, [r7, #8]
 8010f30:	68da      	ldr	r2, [r3, #12]
 8010f32:	68bb      	ldr	r3, [r7, #8]
 8010f34:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8010f36:	68bb      	ldr	r3, [r7, #8]
 8010f38:	68da      	ldr	r2, [r3, #12]
 8010f3a:	68bb      	ldr	r3, [r7, #8]
 8010f3c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010f3e:	693b      	ldr	r3, [r7, #16]
 8010f40:	015a      	lsls	r2, r3, #5
 8010f42:	697b      	ldr	r3, [r7, #20]
 8010f44:	4413      	add	r3, r2
 8010f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f4a:	691b      	ldr	r3, [r3, #16]
 8010f4c:	693a      	ldr	r2, [r7, #16]
 8010f4e:	0151      	lsls	r1, r2, #5
 8010f50:	697a      	ldr	r2, [r7, #20]
 8010f52:	440a      	add	r2, r1
 8010f54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010f58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010f5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8010f5e:	693b      	ldr	r3, [r7, #16]
 8010f60:	015a      	lsls	r2, r3, #5
 8010f62:	697b      	ldr	r3, [r7, #20]
 8010f64:	4413      	add	r3, r2
 8010f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f6a:	691a      	ldr	r2, [r3, #16]
 8010f6c:	68bb      	ldr	r3, [r7, #8]
 8010f6e:	69db      	ldr	r3, [r3, #28]
 8010f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010f74:	6939      	ldr	r1, [r7, #16]
 8010f76:	0148      	lsls	r0, r1, #5
 8010f78:	6979      	ldr	r1, [r7, #20]
 8010f7a:	4401      	add	r1, r0
 8010f7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010f80:	4313      	orrs	r3, r2
 8010f82:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8010f84:	79fb      	ldrb	r3, [r7, #7]
 8010f86:	2b01      	cmp	r3, #1
 8010f88:	d10d      	bne.n	8010fa6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010f8a:	68bb      	ldr	r3, [r7, #8]
 8010f8c:	691b      	ldr	r3, [r3, #16]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d009      	beq.n	8010fa6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010f92:	68bb      	ldr	r3, [r7, #8]
 8010f94:	6919      	ldr	r1, [r3, #16]
 8010f96:	693b      	ldr	r3, [r7, #16]
 8010f98:	015a      	lsls	r2, r3, #5
 8010f9a:	697b      	ldr	r3, [r7, #20]
 8010f9c:	4413      	add	r3, r2
 8010f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010fa2:	460a      	mov	r2, r1
 8010fa4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010fa6:	693b      	ldr	r3, [r7, #16]
 8010fa8:	015a      	lsls	r2, r3, #5
 8010faa:	697b      	ldr	r3, [r7, #20]
 8010fac:	4413      	add	r3, r2
 8010fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	693a      	ldr	r2, [r7, #16]
 8010fb6:	0151      	lsls	r1, r2, #5
 8010fb8:	697a      	ldr	r2, [r7, #20]
 8010fba:	440a      	add	r2, r1
 8010fbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010fc0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010fc4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010fc6:	2300      	movs	r3, #0
}
 8010fc8:	4618      	mov	r0, r3
 8010fca:	371c      	adds	r7, #28
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd2:	4770      	bx	lr

08010fd4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010fd4:	b480      	push	{r7}
 8010fd6:	b087      	sub	sp, #28
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
 8010fdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010fde:	2300      	movs	r3, #0
 8010fe0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010fea:	683b      	ldr	r3, [r7, #0]
 8010fec:	785b      	ldrb	r3, [r3, #1]
 8010fee:	2b01      	cmp	r3, #1
 8010ff0:	d14a      	bne.n	8011088 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010ff2:	683b      	ldr	r3, [r7, #0]
 8010ff4:	781b      	ldrb	r3, [r3, #0]
 8010ff6:	015a      	lsls	r2, r3, #5
 8010ff8:	693b      	ldr	r3, [r7, #16]
 8010ffa:	4413      	add	r3, r2
 8010ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011006:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801100a:	f040 8086 	bne.w	801111a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801100e:	683b      	ldr	r3, [r7, #0]
 8011010:	781b      	ldrb	r3, [r3, #0]
 8011012:	015a      	lsls	r2, r3, #5
 8011014:	693b      	ldr	r3, [r7, #16]
 8011016:	4413      	add	r3, r2
 8011018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	683a      	ldr	r2, [r7, #0]
 8011020:	7812      	ldrb	r2, [r2, #0]
 8011022:	0151      	lsls	r1, r2, #5
 8011024:	693a      	ldr	r2, [r7, #16]
 8011026:	440a      	add	r2, r1
 8011028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801102c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011030:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8011032:	683b      	ldr	r3, [r7, #0]
 8011034:	781b      	ldrb	r3, [r3, #0]
 8011036:	015a      	lsls	r2, r3, #5
 8011038:	693b      	ldr	r3, [r7, #16]
 801103a:	4413      	add	r3, r2
 801103c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011040:	681b      	ldr	r3, [r3, #0]
 8011042:	683a      	ldr	r2, [r7, #0]
 8011044:	7812      	ldrb	r2, [r2, #0]
 8011046:	0151      	lsls	r1, r2, #5
 8011048:	693a      	ldr	r2, [r7, #16]
 801104a:	440a      	add	r2, r1
 801104c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011050:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011054:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	3301      	adds	r3, #1
 801105a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	f242 7210 	movw	r2, #10000	; 0x2710
 8011062:	4293      	cmp	r3, r2
 8011064:	d902      	bls.n	801106c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8011066:	2301      	movs	r3, #1
 8011068:	75fb      	strb	r3, [r7, #23]
          break;
 801106a:	e056      	b.n	801111a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 801106c:	683b      	ldr	r3, [r7, #0]
 801106e:	781b      	ldrb	r3, [r3, #0]
 8011070:	015a      	lsls	r2, r3, #5
 8011072:	693b      	ldr	r3, [r7, #16]
 8011074:	4413      	add	r3, r2
 8011076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011080:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011084:	d0e7      	beq.n	8011056 <USB_EPStopXfer+0x82>
 8011086:	e048      	b.n	801111a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011088:	683b      	ldr	r3, [r7, #0]
 801108a:	781b      	ldrb	r3, [r3, #0]
 801108c:	015a      	lsls	r2, r3, #5
 801108e:	693b      	ldr	r3, [r7, #16]
 8011090:	4413      	add	r3, r2
 8011092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801109c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80110a0:	d13b      	bne.n	801111a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80110a2:	683b      	ldr	r3, [r7, #0]
 80110a4:	781b      	ldrb	r3, [r3, #0]
 80110a6:	015a      	lsls	r2, r3, #5
 80110a8:	693b      	ldr	r3, [r7, #16]
 80110aa:	4413      	add	r3, r2
 80110ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	683a      	ldr	r2, [r7, #0]
 80110b4:	7812      	ldrb	r2, [r2, #0]
 80110b6:	0151      	lsls	r1, r2, #5
 80110b8:	693a      	ldr	r2, [r7, #16]
 80110ba:	440a      	add	r2, r1
 80110bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80110c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80110c4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80110c6:	683b      	ldr	r3, [r7, #0]
 80110c8:	781b      	ldrb	r3, [r3, #0]
 80110ca:	015a      	lsls	r2, r3, #5
 80110cc:	693b      	ldr	r3, [r7, #16]
 80110ce:	4413      	add	r3, r2
 80110d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	683a      	ldr	r2, [r7, #0]
 80110d8:	7812      	ldrb	r2, [r2, #0]
 80110da:	0151      	lsls	r1, r2, #5
 80110dc:	693a      	ldr	r2, [r7, #16]
 80110de:	440a      	add	r2, r1
 80110e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80110e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80110e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	3301      	adds	r3, #1
 80110ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80110f6:	4293      	cmp	r3, r2
 80110f8:	d902      	bls.n	8011100 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80110fa:	2301      	movs	r3, #1
 80110fc:	75fb      	strb	r3, [r7, #23]
          break;
 80110fe:	e00c      	b.n	801111a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8011100:	683b      	ldr	r3, [r7, #0]
 8011102:	781b      	ldrb	r3, [r3, #0]
 8011104:	015a      	lsls	r2, r3, #5
 8011106:	693b      	ldr	r3, [r7, #16]
 8011108:	4413      	add	r3, r2
 801110a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011114:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011118:	d0e7      	beq.n	80110ea <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801111a:	7dfb      	ldrb	r3, [r7, #23]
}
 801111c:	4618      	mov	r0, r3
 801111e:	371c      	adds	r7, #28
 8011120:	46bd      	mov	sp, r7
 8011122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011126:	4770      	bx	lr

08011128 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8011128:	b480      	push	{r7}
 801112a:	b089      	sub	sp, #36	; 0x24
 801112c:	af00      	add	r7, sp, #0
 801112e:	60f8      	str	r0, [r7, #12]
 8011130:	60b9      	str	r1, [r7, #8]
 8011132:	4611      	mov	r1, r2
 8011134:	461a      	mov	r2, r3
 8011136:	460b      	mov	r3, r1
 8011138:	71fb      	strb	r3, [r7, #7]
 801113a:	4613      	mov	r3, r2
 801113c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8011142:	68bb      	ldr	r3, [r7, #8]
 8011144:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8011146:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801114a:	2b00      	cmp	r3, #0
 801114c:	d123      	bne.n	8011196 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801114e:	88bb      	ldrh	r3, [r7, #4]
 8011150:	3303      	adds	r3, #3
 8011152:	089b      	lsrs	r3, r3, #2
 8011154:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8011156:	2300      	movs	r3, #0
 8011158:	61bb      	str	r3, [r7, #24]
 801115a:	e018      	b.n	801118e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801115c:	79fb      	ldrb	r3, [r7, #7]
 801115e:	031a      	lsls	r2, r3, #12
 8011160:	697b      	ldr	r3, [r7, #20]
 8011162:	4413      	add	r3, r2
 8011164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011168:	461a      	mov	r2, r3
 801116a:	69fb      	ldr	r3, [r7, #28]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8011170:	69fb      	ldr	r3, [r7, #28]
 8011172:	3301      	adds	r3, #1
 8011174:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011176:	69fb      	ldr	r3, [r7, #28]
 8011178:	3301      	adds	r3, #1
 801117a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801117c:	69fb      	ldr	r3, [r7, #28]
 801117e:	3301      	adds	r3, #1
 8011180:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011182:	69fb      	ldr	r3, [r7, #28]
 8011184:	3301      	adds	r3, #1
 8011186:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8011188:	69bb      	ldr	r3, [r7, #24]
 801118a:	3301      	adds	r3, #1
 801118c:	61bb      	str	r3, [r7, #24]
 801118e:	69ba      	ldr	r2, [r7, #24]
 8011190:	693b      	ldr	r3, [r7, #16]
 8011192:	429a      	cmp	r2, r3
 8011194:	d3e2      	bcc.n	801115c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8011196:	2300      	movs	r3, #0
}
 8011198:	4618      	mov	r0, r3
 801119a:	3724      	adds	r7, #36	; 0x24
 801119c:	46bd      	mov	sp, r7
 801119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a2:	4770      	bx	lr

080111a4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80111a4:	b480      	push	{r7}
 80111a6:	b08b      	sub	sp, #44	; 0x2c
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	60f8      	str	r0, [r7, #12]
 80111ac:	60b9      	str	r1, [r7, #8]
 80111ae:	4613      	mov	r3, r2
 80111b0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80111b6:	68bb      	ldr	r3, [r7, #8]
 80111b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80111ba:	88fb      	ldrh	r3, [r7, #6]
 80111bc:	089b      	lsrs	r3, r3, #2
 80111be:	b29b      	uxth	r3, r3
 80111c0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80111c2:	88fb      	ldrh	r3, [r7, #6]
 80111c4:	f003 0303 	and.w	r3, r3, #3
 80111c8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80111ca:	2300      	movs	r3, #0
 80111cc:	623b      	str	r3, [r7, #32]
 80111ce:	e014      	b.n	80111fa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80111d0:	69bb      	ldr	r3, [r7, #24]
 80111d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80111d6:	681a      	ldr	r2, [r3, #0]
 80111d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111da:	601a      	str	r2, [r3, #0]
    pDest++;
 80111dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111de:	3301      	adds	r3, #1
 80111e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80111e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111e4:	3301      	adds	r3, #1
 80111e6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80111e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ea:	3301      	adds	r3, #1
 80111ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80111ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111f0:	3301      	adds	r3, #1
 80111f2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80111f4:	6a3b      	ldr	r3, [r7, #32]
 80111f6:	3301      	adds	r3, #1
 80111f8:	623b      	str	r3, [r7, #32]
 80111fa:	6a3a      	ldr	r2, [r7, #32]
 80111fc:	697b      	ldr	r3, [r7, #20]
 80111fe:	429a      	cmp	r2, r3
 8011200:	d3e6      	bcc.n	80111d0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8011202:	8bfb      	ldrh	r3, [r7, #30]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d01e      	beq.n	8011246 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8011208:	2300      	movs	r3, #0
 801120a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801120c:	69bb      	ldr	r3, [r7, #24]
 801120e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011212:	461a      	mov	r2, r3
 8011214:	f107 0310 	add.w	r3, r7, #16
 8011218:	6812      	ldr	r2, [r2, #0]
 801121a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801121c:	693a      	ldr	r2, [r7, #16]
 801121e:	6a3b      	ldr	r3, [r7, #32]
 8011220:	b2db      	uxtb	r3, r3
 8011222:	00db      	lsls	r3, r3, #3
 8011224:	fa22 f303 	lsr.w	r3, r2, r3
 8011228:	b2da      	uxtb	r2, r3
 801122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801122c:	701a      	strb	r2, [r3, #0]
      i++;
 801122e:	6a3b      	ldr	r3, [r7, #32]
 8011230:	3301      	adds	r3, #1
 8011232:	623b      	str	r3, [r7, #32]
      pDest++;
 8011234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011236:	3301      	adds	r3, #1
 8011238:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801123a:	8bfb      	ldrh	r3, [r7, #30]
 801123c:	3b01      	subs	r3, #1
 801123e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8011240:	8bfb      	ldrh	r3, [r7, #30]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d1ea      	bne.n	801121c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8011246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011248:	4618      	mov	r0, r3
 801124a:	372c      	adds	r7, #44	; 0x2c
 801124c:	46bd      	mov	sp, r7
 801124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011252:	4770      	bx	lr

08011254 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011254:	b480      	push	{r7}
 8011256:	b085      	sub	sp, #20
 8011258:	af00      	add	r7, sp, #0
 801125a:	6078      	str	r0, [r7, #4]
 801125c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011262:	683b      	ldr	r3, [r7, #0]
 8011264:	781b      	ldrb	r3, [r3, #0]
 8011266:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011268:	683b      	ldr	r3, [r7, #0]
 801126a:	785b      	ldrb	r3, [r3, #1]
 801126c:	2b01      	cmp	r3, #1
 801126e:	d12c      	bne.n	80112ca <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011270:	68bb      	ldr	r3, [r7, #8]
 8011272:	015a      	lsls	r2, r3, #5
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	4413      	add	r3, r2
 8011278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	2b00      	cmp	r3, #0
 8011280:	db12      	blt.n	80112a8 <USB_EPSetStall+0x54>
 8011282:	68bb      	ldr	r3, [r7, #8]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d00f      	beq.n	80112a8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8011288:	68bb      	ldr	r3, [r7, #8]
 801128a:	015a      	lsls	r2, r3, #5
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	4413      	add	r3, r2
 8011290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	68ba      	ldr	r2, [r7, #8]
 8011298:	0151      	lsls	r1, r2, #5
 801129a:	68fa      	ldr	r2, [r7, #12]
 801129c:	440a      	add	r2, r1
 801129e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80112a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80112a6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80112a8:	68bb      	ldr	r3, [r7, #8]
 80112aa:	015a      	lsls	r2, r3, #5
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	4413      	add	r3, r2
 80112b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	68ba      	ldr	r2, [r7, #8]
 80112b8:	0151      	lsls	r1, r2, #5
 80112ba:	68fa      	ldr	r2, [r7, #12]
 80112bc:	440a      	add	r2, r1
 80112be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80112c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80112c6:	6013      	str	r3, [r2, #0]
 80112c8:	e02b      	b.n	8011322 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80112ca:	68bb      	ldr	r3, [r7, #8]
 80112cc:	015a      	lsls	r2, r3, #5
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	4413      	add	r3, r2
 80112d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	2b00      	cmp	r3, #0
 80112da:	db12      	blt.n	8011302 <USB_EPSetStall+0xae>
 80112dc:	68bb      	ldr	r3, [r7, #8]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d00f      	beq.n	8011302 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80112e2:	68bb      	ldr	r3, [r7, #8]
 80112e4:	015a      	lsls	r2, r3, #5
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	4413      	add	r3, r2
 80112ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	68ba      	ldr	r2, [r7, #8]
 80112f2:	0151      	lsls	r1, r2, #5
 80112f4:	68fa      	ldr	r2, [r7, #12]
 80112f6:	440a      	add	r2, r1
 80112f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80112fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011300:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011302:	68bb      	ldr	r3, [r7, #8]
 8011304:	015a      	lsls	r2, r3, #5
 8011306:	68fb      	ldr	r3, [r7, #12]
 8011308:	4413      	add	r3, r2
 801130a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	68ba      	ldr	r2, [r7, #8]
 8011312:	0151      	lsls	r1, r2, #5
 8011314:	68fa      	ldr	r2, [r7, #12]
 8011316:	440a      	add	r2, r1
 8011318:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801131c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011320:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011322:	2300      	movs	r3, #0
}
 8011324:	4618      	mov	r0, r3
 8011326:	3714      	adds	r7, #20
 8011328:	46bd      	mov	sp, r7
 801132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801132e:	4770      	bx	lr

08011330 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011330:	b480      	push	{r7}
 8011332:	b085      	sub	sp, #20
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
 8011338:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801133e:	683b      	ldr	r3, [r7, #0]
 8011340:	781b      	ldrb	r3, [r3, #0]
 8011342:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011344:	683b      	ldr	r3, [r7, #0]
 8011346:	785b      	ldrb	r3, [r3, #1]
 8011348:	2b01      	cmp	r3, #1
 801134a:	d128      	bne.n	801139e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801134c:	68bb      	ldr	r3, [r7, #8]
 801134e:	015a      	lsls	r2, r3, #5
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	4413      	add	r3, r2
 8011354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	68ba      	ldr	r2, [r7, #8]
 801135c:	0151      	lsls	r1, r2, #5
 801135e:	68fa      	ldr	r2, [r7, #12]
 8011360:	440a      	add	r2, r1
 8011362:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011366:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801136a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801136c:	683b      	ldr	r3, [r7, #0]
 801136e:	791b      	ldrb	r3, [r3, #4]
 8011370:	2b03      	cmp	r3, #3
 8011372:	d003      	beq.n	801137c <USB_EPClearStall+0x4c>
 8011374:	683b      	ldr	r3, [r7, #0]
 8011376:	791b      	ldrb	r3, [r3, #4]
 8011378:	2b02      	cmp	r3, #2
 801137a:	d138      	bne.n	80113ee <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801137c:	68bb      	ldr	r3, [r7, #8]
 801137e:	015a      	lsls	r2, r3, #5
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	4413      	add	r3, r2
 8011384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	68ba      	ldr	r2, [r7, #8]
 801138c:	0151      	lsls	r1, r2, #5
 801138e:	68fa      	ldr	r2, [r7, #12]
 8011390:	440a      	add	r2, r1
 8011392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801139a:	6013      	str	r3, [r2, #0]
 801139c:	e027      	b.n	80113ee <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801139e:	68bb      	ldr	r3, [r7, #8]
 80113a0:	015a      	lsls	r2, r3, #5
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	4413      	add	r3, r2
 80113a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80113aa:	681b      	ldr	r3, [r3, #0]
 80113ac:	68ba      	ldr	r2, [r7, #8]
 80113ae:	0151      	lsls	r1, r2, #5
 80113b0:	68fa      	ldr	r2, [r7, #12]
 80113b2:	440a      	add	r2, r1
 80113b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80113b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80113bc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80113be:	683b      	ldr	r3, [r7, #0]
 80113c0:	791b      	ldrb	r3, [r3, #4]
 80113c2:	2b03      	cmp	r3, #3
 80113c4:	d003      	beq.n	80113ce <USB_EPClearStall+0x9e>
 80113c6:	683b      	ldr	r3, [r7, #0]
 80113c8:	791b      	ldrb	r3, [r3, #4]
 80113ca:	2b02      	cmp	r3, #2
 80113cc:	d10f      	bne.n	80113ee <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80113ce:	68bb      	ldr	r3, [r7, #8]
 80113d0:	015a      	lsls	r2, r3, #5
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	4413      	add	r3, r2
 80113d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	68ba      	ldr	r2, [r7, #8]
 80113de:	0151      	lsls	r1, r2, #5
 80113e0:	68fa      	ldr	r2, [r7, #12]
 80113e2:	440a      	add	r2, r1
 80113e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80113e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80113ec:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80113ee:	2300      	movs	r3, #0
}
 80113f0:	4618      	mov	r0, r3
 80113f2:	3714      	adds	r7, #20
 80113f4:	46bd      	mov	sp, r7
 80113f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fa:	4770      	bx	lr

080113fc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80113fc:	b480      	push	{r7}
 80113fe:	b085      	sub	sp, #20
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
 8011404:	460b      	mov	r3, r1
 8011406:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	68fa      	ldr	r2, [r7, #12]
 8011416:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801141a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801141e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011426:	681a      	ldr	r2, [r3, #0]
 8011428:	78fb      	ldrb	r3, [r7, #3]
 801142a:	011b      	lsls	r3, r3, #4
 801142c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8011430:	68f9      	ldr	r1, [r7, #12]
 8011432:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011436:	4313      	orrs	r3, r2
 8011438:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801143a:	2300      	movs	r3, #0
}
 801143c:	4618      	mov	r0, r3
 801143e:	3714      	adds	r7, #20
 8011440:	46bd      	mov	sp, r7
 8011442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011446:	4770      	bx	lr

08011448 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011448:	b480      	push	{r7}
 801144a:	b085      	sub	sp, #20
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	68fa      	ldr	r2, [r7, #12]
 801145e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011462:	f023 0303 	bic.w	r3, r3, #3
 8011466:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801146e:	685b      	ldr	r3, [r3, #4]
 8011470:	68fa      	ldr	r2, [r7, #12]
 8011472:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011476:	f023 0302 	bic.w	r3, r3, #2
 801147a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801147c:	2300      	movs	r3, #0
}
 801147e:	4618      	mov	r0, r3
 8011480:	3714      	adds	r7, #20
 8011482:	46bd      	mov	sp, r7
 8011484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011488:	4770      	bx	lr

0801148a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801148a:	b480      	push	{r7}
 801148c:	b085      	sub	sp, #20
 801148e:	af00      	add	r7, sp, #0
 8011490:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	68fa      	ldr	r2, [r7, #12]
 80114a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80114a4:	f023 0303 	bic.w	r3, r3, #3
 80114a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80114b0:	685b      	ldr	r3, [r3, #4]
 80114b2:	68fa      	ldr	r2, [r7, #12]
 80114b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80114b8:	f043 0302 	orr.w	r3, r3, #2
 80114bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80114be:	2300      	movs	r3, #0
}
 80114c0:	4618      	mov	r0, r3
 80114c2:	3714      	adds	r7, #20
 80114c4:	46bd      	mov	sp, r7
 80114c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ca:	4770      	bx	lr

080114cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80114cc:	b480      	push	{r7}
 80114ce:	b085      	sub	sp, #20
 80114d0:	af00      	add	r7, sp, #0
 80114d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	695b      	ldr	r3, [r3, #20]
 80114d8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	699b      	ldr	r3, [r3, #24]
 80114de:	68fa      	ldr	r2, [r7, #12]
 80114e0:	4013      	ands	r3, r2
 80114e2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80114e4:	68fb      	ldr	r3, [r7, #12]
}
 80114e6:	4618      	mov	r0, r3
 80114e8:	3714      	adds	r7, #20
 80114ea:	46bd      	mov	sp, r7
 80114ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f0:	4770      	bx	lr

080114f2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80114f2:	b480      	push	{r7}
 80114f4:	b085      	sub	sp, #20
 80114f6:	af00      	add	r7, sp, #0
 80114f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011504:	699b      	ldr	r3, [r3, #24]
 8011506:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801150e:	69db      	ldr	r3, [r3, #28]
 8011510:	68ba      	ldr	r2, [r7, #8]
 8011512:	4013      	ands	r3, r2
 8011514:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8011516:	68bb      	ldr	r3, [r7, #8]
 8011518:	0c1b      	lsrs	r3, r3, #16
}
 801151a:	4618      	mov	r0, r3
 801151c:	3714      	adds	r7, #20
 801151e:	46bd      	mov	sp, r7
 8011520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011524:	4770      	bx	lr

08011526 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011526:	b480      	push	{r7}
 8011528:	b085      	sub	sp, #20
 801152a:	af00      	add	r7, sp, #0
 801152c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011538:	699b      	ldr	r3, [r3, #24]
 801153a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011542:	69db      	ldr	r3, [r3, #28]
 8011544:	68ba      	ldr	r2, [r7, #8]
 8011546:	4013      	ands	r3, r2
 8011548:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801154a:	68bb      	ldr	r3, [r7, #8]
 801154c:	b29b      	uxth	r3, r3
}
 801154e:	4618      	mov	r0, r3
 8011550:	3714      	adds	r7, #20
 8011552:	46bd      	mov	sp, r7
 8011554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011558:	4770      	bx	lr

0801155a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801155a:	b480      	push	{r7}
 801155c:	b085      	sub	sp, #20
 801155e:	af00      	add	r7, sp, #0
 8011560:	6078      	str	r0, [r7, #4]
 8011562:	460b      	mov	r3, r1
 8011564:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801156a:	78fb      	ldrb	r3, [r7, #3]
 801156c:	015a      	lsls	r2, r3, #5
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	4413      	add	r3, r2
 8011572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011576:	689b      	ldr	r3, [r3, #8]
 8011578:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011580:	695b      	ldr	r3, [r3, #20]
 8011582:	68ba      	ldr	r2, [r7, #8]
 8011584:	4013      	ands	r3, r2
 8011586:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011588:	68bb      	ldr	r3, [r7, #8]
}
 801158a:	4618      	mov	r0, r3
 801158c:	3714      	adds	r7, #20
 801158e:	46bd      	mov	sp, r7
 8011590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011594:	4770      	bx	lr

08011596 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011596:	b480      	push	{r7}
 8011598:	b087      	sub	sp, #28
 801159a:	af00      	add	r7, sp, #0
 801159c:	6078      	str	r0, [r7, #4]
 801159e:	460b      	mov	r3, r1
 80115a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80115a6:	697b      	ldr	r3, [r7, #20]
 80115a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80115ac:	691b      	ldr	r3, [r3, #16]
 80115ae:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80115b0:	697b      	ldr	r3, [r7, #20]
 80115b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80115b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80115b8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80115ba:	78fb      	ldrb	r3, [r7, #3]
 80115bc:	f003 030f 	and.w	r3, r3, #15
 80115c0:	68fa      	ldr	r2, [r7, #12]
 80115c2:	fa22 f303 	lsr.w	r3, r2, r3
 80115c6:	01db      	lsls	r3, r3, #7
 80115c8:	b2db      	uxtb	r3, r3
 80115ca:	693a      	ldr	r2, [r7, #16]
 80115cc:	4313      	orrs	r3, r2
 80115ce:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80115d0:	78fb      	ldrb	r3, [r7, #3]
 80115d2:	015a      	lsls	r2, r3, #5
 80115d4:	697b      	ldr	r3, [r7, #20]
 80115d6:	4413      	add	r3, r2
 80115d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80115dc:	689b      	ldr	r3, [r3, #8]
 80115de:	693a      	ldr	r2, [r7, #16]
 80115e0:	4013      	ands	r3, r2
 80115e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80115e4:	68bb      	ldr	r3, [r7, #8]
}
 80115e6:	4618      	mov	r0, r3
 80115e8:	371c      	adds	r7, #28
 80115ea:	46bd      	mov	sp, r7
 80115ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f0:	4770      	bx	lr

080115f2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80115f2:	b480      	push	{r7}
 80115f4:	b083      	sub	sp, #12
 80115f6:	af00      	add	r7, sp, #0
 80115f8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	695b      	ldr	r3, [r3, #20]
 80115fe:	f003 0301 	and.w	r3, r3, #1
}
 8011602:	4618      	mov	r0, r3
 8011604:	370c      	adds	r7, #12
 8011606:	46bd      	mov	sp, r7
 8011608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801160c:	4770      	bx	lr

0801160e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801160e:	b480      	push	{r7}
 8011610:	b085      	sub	sp, #20
 8011612:	af00      	add	r7, sp, #0
 8011614:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	68fa      	ldr	r2, [r7, #12]
 8011624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011628:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801162c:	f023 0307 	bic.w	r3, r3, #7
 8011630:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011638:	685b      	ldr	r3, [r3, #4]
 801163a:	68fa      	ldr	r2, [r7, #12]
 801163c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011644:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011646:	2300      	movs	r3, #0
}
 8011648:	4618      	mov	r0, r3
 801164a:	3714      	adds	r7, #20
 801164c:	46bd      	mov	sp, r7
 801164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011652:	4770      	bx	lr

08011654 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8011654:	b480      	push	{r7}
 8011656:	b087      	sub	sp, #28
 8011658:	af00      	add	r7, sp, #0
 801165a:	60f8      	str	r0, [r7, #12]
 801165c:	460b      	mov	r3, r1
 801165e:	607a      	str	r2, [r7, #4]
 8011660:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	333c      	adds	r3, #60	; 0x3c
 801166a:	3304      	adds	r3, #4
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8011670:	693b      	ldr	r3, [r7, #16]
 8011672:	4a26      	ldr	r2, [pc, #152]	; (801170c <USB_EP0_OutStart+0xb8>)
 8011674:	4293      	cmp	r3, r2
 8011676:	d90a      	bls.n	801168e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011678:	697b      	ldr	r3, [r7, #20]
 801167a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011684:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011688:	d101      	bne.n	801168e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801168a:	2300      	movs	r3, #0
 801168c:	e037      	b.n	80116fe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801168e:	697b      	ldr	r3, [r7, #20]
 8011690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011694:	461a      	mov	r2, r3
 8011696:	2300      	movs	r3, #0
 8011698:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801169a:	697b      	ldr	r3, [r7, #20]
 801169c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116a0:	691b      	ldr	r3, [r3, #16]
 80116a2:	697a      	ldr	r2, [r7, #20]
 80116a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80116a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80116ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80116ae:	697b      	ldr	r3, [r7, #20]
 80116b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116b4:	691b      	ldr	r3, [r3, #16]
 80116b6:	697a      	ldr	r2, [r7, #20]
 80116b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80116bc:	f043 0318 	orr.w	r3, r3, #24
 80116c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80116c2:	697b      	ldr	r3, [r7, #20]
 80116c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116c8:	691b      	ldr	r3, [r3, #16]
 80116ca:	697a      	ldr	r2, [r7, #20]
 80116cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80116d0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80116d4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80116d6:	7afb      	ldrb	r3, [r7, #11]
 80116d8:	2b01      	cmp	r3, #1
 80116da:	d10f      	bne.n	80116fc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80116dc:	697b      	ldr	r3, [r7, #20]
 80116de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116e2:	461a      	mov	r2, r3
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80116e8:	697b      	ldr	r3, [r7, #20]
 80116ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	697a      	ldr	r2, [r7, #20]
 80116f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80116f6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80116fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80116fc:	2300      	movs	r3, #0
}
 80116fe:	4618      	mov	r0, r3
 8011700:	371c      	adds	r7, #28
 8011702:	46bd      	mov	sp, r7
 8011704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011708:	4770      	bx	lr
 801170a:	bf00      	nop
 801170c:	4f54300a 	.word	0x4f54300a

08011710 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011710:	b480      	push	{r7}
 8011712:	b085      	sub	sp, #20
 8011714:	af00      	add	r7, sp, #0
 8011716:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011718:	2300      	movs	r3, #0
 801171a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	3301      	adds	r3, #1
 8011720:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	4a13      	ldr	r2, [pc, #76]	; (8011774 <USB_CoreReset+0x64>)
 8011726:	4293      	cmp	r3, r2
 8011728:	d901      	bls.n	801172e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801172a:	2303      	movs	r3, #3
 801172c:	e01b      	b.n	8011766 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	691b      	ldr	r3, [r3, #16]
 8011732:	2b00      	cmp	r3, #0
 8011734:	daf2      	bge.n	801171c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8011736:	2300      	movs	r3, #0
 8011738:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	691b      	ldr	r3, [r3, #16]
 801173e:	f043 0201 	orr.w	r2, r3, #1
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	3301      	adds	r3, #1
 801174a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	4a09      	ldr	r2, [pc, #36]	; (8011774 <USB_CoreReset+0x64>)
 8011750:	4293      	cmp	r3, r2
 8011752:	d901      	bls.n	8011758 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011754:	2303      	movs	r3, #3
 8011756:	e006      	b.n	8011766 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	691b      	ldr	r3, [r3, #16]
 801175c:	f003 0301 	and.w	r3, r3, #1
 8011760:	2b01      	cmp	r3, #1
 8011762:	d0f0      	beq.n	8011746 <USB_CoreReset+0x36>

  return HAL_OK;
 8011764:	2300      	movs	r3, #0
}
 8011766:	4618      	mov	r0, r3
 8011768:	3714      	adds	r7, #20
 801176a:	46bd      	mov	sp, r7
 801176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011770:	4770      	bx	lr
 8011772:	bf00      	nop
 8011774:	00030d40 	.word	0x00030d40

08011778 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011778:	b580      	push	{r7, lr}
 801177a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801177c:	4904      	ldr	r1, [pc, #16]	; (8011790 <MX_FATFS_Init+0x18>)
 801177e:	4805      	ldr	r0, [pc, #20]	; (8011794 <MX_FATFS_Init+0x1c>)
 8011780:	f006 fb84 	bl	8017e8c <FATFS_LinkDriver>
 8011784:	4603      	mov	r3, r0
 8011786:	461a      	mov	r2, r3
 8011788:	4b03      	ldr	r3, [pc, #12]	; (8011798 <MX_FATFS_Init+0x20>)
 801178a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 801178c:	bf00      	nop
 801178e:	bd80      	pop	{r7, pc}
 8011790:	20006798 	.word	0x20006798
 8011794:	0801958c 	.word	0x0801958c
 8011798:	20006794 	.word	0x20006794

0801179c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 801179c:	b480      	push	{r7}
 801179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80117a0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80117a2:	4618      	mov	r0, r3
 80117a4:	46bd      	mov	sp, r7
 80117a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117aa:	4770      	bx	lr

080117ac <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80117ac:	b580      	push	{r7, lr}
 80117ae:	b082      	sub	sp, #8
 80117b0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80117b2:	2300      	movs	r3, #0
 80117b4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80117b6:	f000 f896 	bl	80118e6 <BSP_SD_IsDetected>
 80117ba:	4603      	mov	r3, r0
 80117bc:	2b01      	cmp	r3, #1
 80117be:	d001      	beq.n	80117c4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80117c0:	2301      	movs	r3, #1
 80117c2:	e012      	b.n	80117ea <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80117c4:	480b      	ldr	r0, [pc, #44]	; (80117f4 <BSP_SD_Init+0x48>)
 80117c6:	f7fb fc7b 	bl	800d0c0 <HAL_SD_Init>
 80117ca:	4603      	mov	r3, r0
 80117cc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80117ce:	79fb      	ldrb	r3, [r7, #7]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d109      	bne.n	80117e8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80117d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80117d8:	4806      	ldr	r0, [pc, #24]	; (80117f4 <BSP_SD_Init+0x48>)
 80117da:	f7fc fd97 	bl	800e30c <HAL_SD_ConfigWideBusOperation>
 80117de:	4603      	mov	r3, r0
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d001      	beq.n	80117e8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80117e4:	2301      	movs	r3, #1
 80117e6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80117e8:	79fb      	ldrb	r3, [r7, #7]
}
 80117ea:	4618      	mov	r0, r3
 80117ec:	3708      	adds	r7, #8
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bd80      	pop	{r7, pc}
 80117f2:	bf00      	nop
 80117f4:	200003a0 	.word	0x200003a0

080117f8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80117f8:	b580      	push	{r7, lr}
 80117fa:	b086      	sub	sp, #24
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	60f8      	str	r0, [r7, #12]
 8011800:	60b9      	str	r1, [r7, #8]
 8011802:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011804:	2300      	movs	r3, #0
 8011806:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	68ba      	ldr	r2, [r7, #8]
 801180c:	68f9      	ldr	r1, [r7, #12]
 801180e:	4806      	ldr	r0, [pc, #24]	; (8011828 <BSP_SD_ReadBlocks_DMA+0x30>)
 8011810:	f7fc f86a 	bl	800d8e8 <HAL_SD_ReadBlocks_DMA>
 8011814:	4603      	mov	r3, r0
 8011816:	2b00      	cmp	r3, #0
 8011818:	d001      	beq.n	801181e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801181a:	2301      	movs	r3, #1
 801181c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801181e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011820:	4618      	mov	r0, r3
 8011822:	3718      	adds	r7, #24
 8011824:	46bd      	mov	sp, r7
 8011826:	bd80      	pop	{r7, pc}
 8011828:	200003a0 	.word	0x200003a0

0801182c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801182c:	b580      	push	{r7, lr}
 801182e:	b086      	sub	sp, #24
 8011830:	af00      	add	r7, sp, #0
 8011832:	60f8      	str	r0, [r7, #12]
 8011834:	60b9      	str	r1, [r7, #8]
 8011836:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011838:	2300      	movs	r3, #0
 801183a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	68ba      	ldr	r2, [r7, #8]
 8011840:	68f9      	ldr	r1, [r7, #12]
 8011842:	4806      	ldr	r0, [pc, #24]	; (801185c <BSP_SD_WriteBlocks_DMA+0x30>)
 8011844:	f7fc f930 	bl	800daa8 <HAL_SD_WriteBlocks_DMA>
 8011848:	4603      	mov	r3, r0
 801184a:	2b00      	cmp	r3, #0
 801184c:	d001      	beq.n	8011852 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801184e:	2301      	movs	r3, #1
 8011850:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011852:	7dfb      	ldrb	r3, [r7, #23]
}
 8011854:	4618      	mov	r0, r3
 8011856:	3718      	adds	r7, #24
 8011858:	46bd      	mov	sp, r7
 801185a:	bd80      	pop	{r7, pc}
 801185c:	200003a0 	.word	0x200003a0

08011860 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011864:	4805      	ldr	r0, [pc, #20]	; (801187c <BSP_SD_GetCardState+0x1c>)
 8011866:	f7fc fdeb 	bl	800e440 <HAL_SD_GetCardState>
 801186a:	4603      	mov	r3, r0
 801186c:	2b04      	cmp	r3, #4
 801186e:	bf14      	ite	ne
 8011870:	2301      	movne	r3, #1
 8011872:	2300      	moveq	r3, #0
 8011874:	b2db      	uxtb	r3, r3
}
 8011876:	4618      	mov	r0, r3
 8011878:	bd80      	pop	{r7, pc}
 801187a:	bf00      	nop
 801187c:	200003a0 	.word	0x200003a0

08011880 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011880:	b580      	push	{r7, lr}
 8011882:	b082      	sub	sp, #8
 8011884:	af00      	add	r7, sp, #0
 8011886:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8011888:	6879      	ldr	r1, [r7, #4]
 801188a:	4803      	ldr	r0, [pc, #12]	; (8011898 <BSP_SD_GetCardInfo+0x18>)
 801188c:	f7fc fd12 	bl	800e2b4 <HAL_SD_GetCardInfo>
}
 8011890:	bf00      	nop
 8011892:	3708      	adds	r7, #8
 8011894:	46bd      	mov	sp, r7
 8011896:	bd80      	pop	{r7, pc}
 8011898:	200003a0 	.word	0x200003a0

0801189c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 801189c:	b580      	push	{r7, lr}
 801189e:	b082      	sub	sp, #8
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80118a4:	f000 f818 	bl	80118d8 <BSP_SD_AbortCallback>
}
 80118a8:	bf00      	nop
 80118aa:	3708      	adds	r7, #8
 80118ac:	46bd      	mov	sp, r7
 80118ae:	bd80      	pop	{r7, pc}

080118b0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80118b0:	b580      	push	{r7, lr}
 80118b2:	b082      	sub	sp, #8
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80118b8:	f000 f9a8 	bl	8011c0c <BSP_SD_WriteCpltCallback>
}
 80118bc:	bf00      	nop
 80118be:	3708      	adds	r7, #8
 80118c0:	46bd      	mov	sp, r7
 80118c2:	bd80      	pop	{r7, pc}

080118c4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80118c4:	b580      	push	{r7, lr}
 80118c6:	b082      	sub	sp, #8
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80118cc:	f000 f9aa 	bl	8011c24 <BSP_SD_ReadCpltCallback>
}
 80118d0:	bf00      	nop
 80118d2:	3708      	adds	r7, #8
 80118d4:	46bd      	mov	sp, r7
 80118d6:	bd80      	pop	{r7, pc}

080118d8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80118d8:	b480      	push	{r7}
 80118da:	af00      	add	r7, sp, #0

}
 80118dc:	bf00      	nop
 80118de:	46bd      	mov	sp, r7
 80118e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e4:	4770      	bx	lr

080118e6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80118e6:	b580      	push	{r7, lr}
 80118e8:	b082      	sub	sp, #8
 80118ea:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80118ec:	2301      	movs	r3, #1
 80118ee:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80118f0:	f000 f80c 	bl	801190c <BSP_PlatformIsDetected>
 80118f4:	4603      	mov	r3, r0
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d101      	bne.n	80118fe <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80118fa:	2300      	movs	r3, #0
 80118fc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80118fe:	79fb      	ldrb	r3, [r7, #7]
 8011900:	b2db      	uxtb	r3, r3
}
 8011902:	4618      	mov	r0, r3
 8011904:	3708      	adds	r7, #8
 8011906:	46bd      	mov	sp, r7
 8011908:	bd80      	pop	{r7, pc}
	...

0801190c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 801190c:	b580      	push	{r7, lr}
 801190e:	b082      	sub	sp, #8
 8011910:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8011912:	2301      	movs	r3, #1
 8011914:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8011916:	2180      	movs	r1, #128	; 0x80
 8011918:	4806      	ldr	r0, [pc, #24]	; (8011934 <BSP_PlatformIsDetected+0x28>)
 801191a:	f7f7 fc63 	bl	80091e4 <HAL_GPIO_ReadPin>
 801191e:	4603      	mov	r3, r0
 8011920:	2b00      	cmp	r3, #0
 8011922:	d001      	beq.n	8011928 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8011924:	2300      	movs	r3, #0
 8011926:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8011928:	79fb      	ldrb	r3, [r7, #7]
}
 801192a:	4618      	mov	r0, r3
 801192c:	3708      	adds	r7, #8
 801192e:	46bd      	mov	sp, r7
 8011930:	bd80      	pop	{r7, pc}
 8011932:	bf00      	nop
 8011934:	40020800 	.word	0x40020800

08011938 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b084      	sub	sp, #16
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8011940:	f7f5 fafc 	bl	8006f3c <HAL_GetTick>
 8011944:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8011946:	e006      	b.n	8011956 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011948:	f7ff ff8a 	bl	8011860 <BSP_SD_GetCardState>
 801194c:	4603      	mov	r3, r0
 801194e:	2b00      	cmp	r3, #0
 8011950:	d101      	bne.n	8011956 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8011952:	2300      	movs	r3, #0
 8011954:	e009      	b.n	801196a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8011956:	f7f5 faf1 	bl	8006f3c <HAL_GetTick>
 801195a:	4602      	mov	r2, r0
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	1ad3      	subs	r3, r2, r3
 8011960:	687a      	ldr	r2, [r7, #4]
 8011962:	429a      	cmp	r2, r3
 8011964:	d8f0      	bhi.n	8011948 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011966:	f04f 33ff 	mov.w	r3, #4294967295
}
 801196a:	4618      	mov	r0, r3
 801196c:	3710      	adds	r7, #16
 801196e:	46bd      	mov	sp, r7
 8011970:	bd80      	pop	{r7, pc}
	...

08011974 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011974:	b580      	push	{r7, lr}
 8011976:	b082      	sub	sp, #8
 8011978:	af00      	add	r7, sp, #0
 801197a:	4603      	mov	r3, r0
 801197c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801197e:	4b0b      	ldr	r3, [pc, #44]	; (80119ac <SD_CheckStatus+0x38>)
 8011980:	2201      	movs	r2, #1
 8011982:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8011984:	f7ff ff6c 	bl	8011860 <BSP_SD_GetCardState>
 8011988:	4603      	mov	r3, r0
 801198a:	2b00      	cmp	r3, #0
 801198c:	d107      	bne.n	801199e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801198e:	4b07      	ldr	r3, [pc, #28]	; (80119ac <SD_CheckStatus+0x38>)
 8011990:	781b      	ldrb	r3, [r3, #0]
 8011992:	b2db      	uxtb	r3, r3
 8011994:	f023 0301 	bic.w	r3, r3, #1
 8011998:	b2da      	uxtb	r2, r3
 801199a:	4b04      	ldr	r3, [pc, #16]	; (80119ac <SD_CheckStatus+0x38>)
 801199c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801199e:	4b03      	ldr	r3, [pc, #12]	; (80119ac <SD_CheckStatus+0x38>)
 80119a0:	781b      	ldrb	r3, [r3, #0]
 80119a2:	b2db      	uxtb	r3, r3
}
 80119a4:	4618      	mov	r0, r3
 80119a6:	3708      	adds	r7, #8
 80119a8:	46bd      	mov	sp, r7
 80119aa:	bd80      	pop	{r7, pc}
 80119ac:	20000009 	.word	0x20000009

080119b0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b082      	sub	sp, #8
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	4603      	mov	r3, r0
 80119b8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80119ba:	f7ff fef7 	bl	80117ac <BSP_SD_Init>
 80119be:	4603      	mov	r3, r0
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d107      	bne.n	80119d4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80119c4:	79fb      	ldrb	r3, [r7, #7]
 80119c6:	4618      	mov	r0, r3
 80119c8:	f7ff ffd4 	bl	8011974 <SD_CheckStatus>
 80119cc:	4603      	mov	r3, r0
 80119ce:	461a      	mov	r2, r3
 80119d0:	4b04      	ldr	r3, [pc, #16]	; (80119e4 <SD_initialize+0x34>)
 80119d2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80119d4:	4b03      	ldr	r3, [pc, #12]	; (80119e4 <SD_initialize+0x34>)
 80119d6:	781b      	ldrb	r3, [r3, #0]
 80119d8:	b2db      	uxtb	r3, r3
}
 80119da:	4618      	mov	r0, r3
 80119dc:	3708      	adds	r7, #8
 80119de:	46bd      	mov	sp, r7
 80119e0:	bd80      	pop	{r7, pc}
 80119e2:	bf00      	nop
 80119e4:	20000009 	.word	0x20000009

080119e8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80119e8:	b580      	push	{r7, lr}
 80119ea:	b082      	sub	sp, #8
 80119ec:	af00      	add	r7, sp, #0
 80119ee:	4603      	mov	r3, r0
 80119f0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80119f2:	79fb      	ldrb	r3, [r7, #7]
 80119f4:	4618      	mov	r0, r3
 80119f6:	f7ff ffbd 	bl	8011974 <SD_CheckStatus>
 80119fa:	4603      	mov	r3, r0
}
 80119fc:	4618      	mov	r0, r3
 80119fe:	3708      	adds	r7, #8
 8011a00:	46bd      	mov	sp, r7
 8011a02:	bd80      	pop	{r7, pc}

08011a04 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b086      	sub	sp, #24
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	60b9      	str	r1, [r7, #8]
 8011a0c:	607a      	str	r2, [r7, #4]
 8011a0e:	603b      	str	r3, [r7, #0]
 8011a10:	4603      	mov	r3, r0
 8011a12:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011a14:	2301      	movs	r3, #1
 8011a16:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011a18:	f247 5030 	movw	r0, #30000	; 0x7530
 8011a1c:	f7ff ff8c 	bl	8011938 <SD_CheckStatusWithTimeout>
 8011a20:	4603      	mov	r3, r0
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	da01      	bge.n	8011a2a <SD_read+0x26>
  {
    return res;
 8011a26:	7dfb      	ldrb	r3, [r7, #23]
 8011a28:	e03b      	b.n	8011aa2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8011a2a:	683a      	ldr	r2, [r7, #0]
 8011a2c:	6879      	ldr	r1, [r7, #4]
 8011a2e:	68b8      	ldr	r0, [r7, #8]
 8011a30:	f7ff fee2 	bl	80117f8 <BSP_SD_ReadBlocks_DMA>
 8011a34:	4603      	mov	r3, r0
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d132      	bne.n	8011aa0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8011a3a:	4b1c      	ldr	r3, [pc, #112]	; (8011aac <SD_read+0xa8>)
 8011a3c:	2200      	movs	r2, #0
 8011a3e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8011a40:	f7f5 fa7c 	bl	8006f3c <HAL_GetTick>
 8011a44:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8011a46:	bf00      	nop
 8011a48:	4b18      	ldr	r3, [pc, #96]	; (8011aac <SD_read+0xa8>)
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d108      	bne.n	8011a62 <SD_read+0x5e>
 8011a50:	f7f5 fa74 	bl	8006f3c <HAL_GetTick>
 8011a54:	4602      	mov	r2, r0
 8011a56:	693b      	ldr	r3, [r7, #16]
 8011a58:	1ad3      	subs	r3, r2, r3
 8011a5a:	f247 522f 	movw	r2, #29999	; 0x752f
 8011a5e:	4293      	cmp	r3, r2
 8011a60:	d9f2      	bls.n	8011a48 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8011a62:	4b12      	ldr	r3, [pc, #72]	; (8011aac <SD_read+0xa8>)
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d102      	bne.n	8011a70 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8011a6a:	2301      	movs	r3, #1
 8011a6c:	75fb      	strb	r3, [r7, #23]
 8011a6e:	e017      	b.n	8011aa0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8011a70:	4b0e      	ldr	r3, [pc, #56]	; (8011aac <SD_read+0xa8>)
 8011a72:	2200      	movs	r2, #0
 8011a74:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8011a76:	f7f5 fa61 	bl	8006f3c <HAL_GetTick>
 8011a7a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011a7c:	e007      	b.n	8011a8e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011a7e:	f7ff feef 	bl	8011860 <BSP_SD_GetCardState>
 8011a82:	4603      	mov	r3, r0
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d102      	bne.n	8011a8e <SD_read+0x8a>
          {
            res = RES_OK;
 8011a88:	2300      	movs	r3, #0
 8011a8a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8011a8c:	e008      	b.n	8011aa0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011a8e:	f7f5 fa55 	bl	8006f3c <HAL_GetTick>
 8011a92:	4602      	mov	r2, r0
 8011a94:	693b      	ldr	r3, [r7, #16]
 8011a96:	1ad3      	subs	r3, r2, r3
 8011a98:	f247 522f 	movw	r2, #29999	; 0x752f
 8011a9c:	4293      	cmp	r3, r2
 8011a9e:	d9ee      	bls.n	8011a7e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8011aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	3718      	adds	r7, #24
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bd80      	pop	{r7, pc}
 8011aaa:	bf00      	nop
 8011aac:	200067a0 	.word	0x200067a0

08011ab0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b086      	sub	sp, #24
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	60b9      	str	r1, [r7, #8]
 8011ab8:	607a      	str	r2, [r7, #4]
 8011aba:	603b      	str	r3, [r7, #0]
 8011abc:	4603      	mov	r3, r0
 8011abe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011ac0:	2301      	movs	r3, #1
 8011ac2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8011ac4:	4b24      	ldr	r3, [pc, #144]	; (8011b58 <SD_write+0xa8>)
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011aca:	f247 5030 	movw	r0, #30000	; 0x7530
 8011ace:	f7ff ff33 	bl	8011938 <SD_CheckStatusWithTimeout>
 8011ad2:	4603      	mov	r3, r0
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	da01      	bge.n	8011adc <SD_write+0x2c>
  {
    return res;
 8011ad8:	7dfb      	ldrb	r3, [r7, #23]
 8011ada:	e038      	b.n	8011b4e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8011adc:	683a      	ldr	r2, [r7, #0]
 8011ade:	6879      	ldr	r1, [r7, #4]
 8011ae0:	68b8      	ldr	r0, [r7, #8]
 8011ae2:	f7ff fea3 	bl	801182c <BSP_SD_WriteBlocks_DMA>
 8011ae6:	4603      	mov	r3, r0
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d12f      	bne.n	8011b4c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8011aec:	f7f5 fa26 	bl	8006f3c <HAL_GetTick>
 8011af0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8011af2:	bf00      	nop
 8011af4:	4b18      	ldr	r3, [pc, #96]	; (8011b58 <SD_write+0xa8>)
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d108      	bne.n	8011b0e <SD_write+0x5e>
 8011afc:	f7f5 fa1e 	bl	8006f3c <HAL_GetTick>
 8011b00:	4602      	mov	r2, r0
 8011b02:	693b      	ldr	r3, [r7, #16]
 8011b04:	1ad3      	subs	r3, r2, r3
 8011b06:	f247 522f 	movw	r2, #29999	; 0x752f
 8011b0a:	4293      	cmp	r3, r2
 8011b0c:	d9f2      	bls.n	8011af4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8011b0e:	4b12      	ldr	r3, [pc, #72]	; (8011b58 <SD_write+0xa8>)
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d102      	bne.n	8011b1c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8011b16:	2301      	movs	r3, #1
 8011b18:	75fb      	strb	r3, [r7, #23]
 8011b1a:	e017      	b.n	8011b4c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8011b1c:	4b0e      	ldr	r3, [pc, #56]	; (8011b58 <SD_write+0xa8>)
 8011b1e:	2200      	movs	r2, #0
 8011b20:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8011b22:	f7f5 fa0b 	bl	8006f3c <HAL_GetTick>
 8011b26:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011b28:	e007      	b.n	8011b3a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011b2a:	f7ff fe99 	bl	8011860 <BSP_SD_GetCardState>
 8011b2e:	4603      	mov	r3, r0
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d102      	bne.n	8011b3a <SD_write+0x8a>
          {
            res = RES_OK;
 8011b34:	2300      	movs	r3, #0
 8011b36:	75fb      	strb	r3, [r7, #23]
            break;
 8011b38:	e008      	b.n	8011b4c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011b3a:	f7f5 f9ff 	bl	8006f3c <HAL_GetTick>
 8011b3e:	4602      	mov	r2, r0
 8011b40:	693b      	ldr	r3, [r7, #16]
 8011b42:	1ad3      	subs	r3, r2, r3
 8011b44:	f247 522f 	movw	r2, #29999	; 0x752f
 8011b48:	4293      	cmp	r3, r2
 8011b4a:	d9ee      	bls.n	8011b2a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8011b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011b4e:	4618      	mov	r0, r3
 8011b50:	3718      	adds	r7, #24
 8011b52:	46bd      	mov	sp, r7
 8011b54:	bd80      	pop	{r7, pc}
 8011b56:	bf00      	nop
 8011b58:	2000679c 	.word	0x2000679c

08011b5c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b08c      	sub	sp, #48	; 0x30
 8011b60:	af00      	add	r7, sp, #0
 8011b62:	4603      	mov	r3, r0
 8011b64:	603a      	str	r2, [r7, #0]
 8011b66:	71fb      	strb	r3, [r7, #7]
 8011b68:	460b      	mov	r3, r1
 8011b6a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011b6c:	2301      	movs	r3, #1
 8011b6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011b72:	4b25      	ldr	r3, [pc, #148]	; (8011c08 <SD_ioctl+0xac>)
 8011b74:	781b      	ldrb	r3, [r3, #0]
 8011b76:	b2db      	uxtb	r3, r3
 8011b78:	f003 0301 	and.w	r3, r3, #1
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d001      	beq.n	8011b84 <SD_ioctl+0x28>
 8011b80:	2303      	movs	r3, #3
 8011b82:	e03c      	b.n	8011bfe <SD_ioctl+0xa2>

  switch (cmd)
 8011b84:	79bb      	ldrb	r3, [r7, #6]
 8011b86:	2b03      	cmp	r3, #3
 8011b88:	d834      	bhi.n	8011bf4 <SD_ioctl+0x98>
 8011b8a:	a201      	add	r2, pc, #4	; (adr r2, 8011b90 <SD_ioctl+0x34>)
 8011b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b90:	08011ba1 	.word	0x08011ba1
 8011b94:	08011ba9 	.word	0x08011ba9
 8011b98:	08011bc1 	.word	0x08011bc1
 8011b9c:	08011bdb 	.word	0x08011bdb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011ba6:	e028      	b.n	8011bfa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011ba8:	f107 030c 	add.w	r3, r7, #12
 8011bac:	4618      	mov	r0, r3
 8011bae:	f7ff fe67 	bl	8011880 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011bb4:	683b      	ldr	r3, [r7, #0]
 8011bb6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011bb8:	2300      	movs	r3, #0
 8011bba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011bbe:	e01c      	b.n	8011bfa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011bc0:	f107 030c 	add.w	r3, r7, #12
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	f7ff fe5b 	bl	8011880 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bcc:	b29a      	uxth	r2, r3
 8011bce:	683b      	ldr	r3, [r7, #0]
 8011bd0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8011bd2:	2300      	movs	r3, #0
 8011bd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011bd8:	e00f      	b.n	8011bfa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011bda:	f107 030c 	add.w	r3, r7, #12
 8011bde:	4618      	mov	r0, r3
 8011be0:	f7ff fe4e 	bl	8011880 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011be6:	0a5a      	lsrs	r2, r3, #9
 8011be8:	683b      	ldr	r3, [r7, #0]
 8011bea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011bec:	2300      	movs	r3, #0
 8011bee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011bf2:	e002      	b.n	8011bfa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011bf4:	2304      	movs	r3, #4
 8011bf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8011bfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011bfe:	4618      	mov	r0, r3
 8011c00:	3730      	adds	r7, #48	; 0x30
 8011c02:	46bd      	mov	sp, r7
 8011c04:	bd80      	pop	{r7, pc}
 8011c06:	bf00      	nop
 8011c08:	20000009 	.word	0x20000009

08011c0c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8011c0c:	b480      	push	{r7}
 8011c0e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8011c10:	4b03      	ldr	r3, [pc, #12]	; (8011c20 <BSP_SD_WriteCpltCallback+0x14>)
 8011c12:	2201      	movs	r2, #1
 8011c14:	601a      	str	r2, [r3, #0]
}
 8011c16:	bf00      	nop
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c1e:	4770      	bx	lr
 8011c20:	2000679c 	.word	0x2000679c

08011c24 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8011c24:	b480      	push	{r7}
 8011c26:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8011c28:	4b03      	ldr	r3, [pc, #12]	; (8011c38 <BSP_SD_ReadCpltCallback+0x14>)
 8011c2a:	2201      	movs	r2, #1
 8011c2c:	601a      	str	r2, [r3, #0]
}
 8011c2e:	bf00      	nop
 8011c30:	46bd      	mov	sp, r7
 8011c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c36:	4770      	bx	lr
 8011c38:	200067a0 	.word	0x200067a0

08011c3c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011c3c:	b580      	push	{r7, lr}
 8011c3e:	b084      	sub	sp, #16
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	6078      	str	r0, [r7, #4]
 8011c44:	460b      	mov	r3, r1
 8011c46:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8011c48:	f44f 701d 	mov.w	r0, #628	; 0x274
 8011c4c:	f006 ff36 	bl	8018abc <USBD_static_malloc>
 8011c50:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d109      	bne.n	8011c6c <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	32b0      	adds	r2, #176	; 0xb0
 8011c62:	2100      	movs	r1, #0
 8011c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8011c68:	2302      	movs	r3, #2
 8011c6a:	e06e      	b.n	8011d4a <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	32b0      	adds	r2, #176	; 0xb0
 8011c76:	68f9      	ldr	r1, [r7, #12]
 8011c78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	32b0      	adds	r2, #176	; 0xb0
 8011c86:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	7c1b      	ldrb	r3, [r3, #16]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d12b      	bne.n	8011cf0 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8011c98:	4b2e      	ldr	r3, [pc, #184]	; (8011d54 <USBD_MSC_Init+0x118>)
 8011c9a:	7819      	ldrb	r1, [r3, #0]
 8011c9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011ca0:	2202      	movs	r2, #2
 8011ca2:	6878      	ldr	r0, [r7, #4]
 8011ca4:	f006 fd79 	bl	801879a <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8011ca8:	4b2a      	ldr	r3, [pc, #168]	; (8011d54 <USBD_MSC_Init+0x118>)
 8011caa:	781b      	ldrb	r3, [r3, #0]
 8011cac:	f003 020f 	and.w	r2, r3, #15
 8011cb0:	6879      	ldr	r1, [r7, #4]
 8011cb2:	4613      	mov	r3, r2
 8011cb4:	009b      	lsls	r3, r3, #2
 8011cb6:	4413      	add	r3, r2
 8011cb8:	009b      	lsls	r3, r3, #2
 8011cba:	440b      	add	r3, r1
 8011cbc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011cc0:	2201      	movs	r2, #1
 8011cc2:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8011cc4:	4b24      	ldr	r3, [pc, #144]	; (8011d58 <USBD_MSC_Init+0x11c>)
 8011cc6:	7819      	ldrb	r1, [r3, #0]
 8011cc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011ccc:	2202      	movs	r2, #2
 8011cce:	6878      	ldr	r0, [r7, #4]
 8011cd0:	f006 fd63 	bl	801879a <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8011cd4:	4b20      	ldr	r3, [pc, #128]	; (8011d58 <USBD_MSC_Init+0x11c>)
 8011cd6:	781b      	ldrb	r3, [r3, #0]
 8011cd8:	f003 020f 	and.w	r2, r3, #15
 8011cdc:	6879      	ldr	r1, [r7, #4]
 8011cde:	4613      	mov	r3, r2
 8011ce0:	009b      	lsls	r3, r3, #2
 8011ce2:	4413      	add	r3, r2
 8011ce4:	009b      	lsls	r3, r3, #2
 8011ce6:	440b      	add	r3, r1
 8011ce8:	3324      	adds	r3, #36	; 0x24
 8011cea:	2201      	movs	r2, #1
 8011cec:	801a      	strh	r2, [r3, #0]
 8011cee:	e028      	b.n	8011d42 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8011cf0:	4b18      	ldr	r3, [pc, #96]	; (8011d54 <USBD_MSC_Init+0x118>)
 8011cf2:	7819      	ldrb	r1, [r3, #0]
 8011cf4:	2340      	movs	r3, #64	; 0x40
 8011cf6:	2202      	movs	r2, #2
 8011cf8:	6878      	ldr	r0, [r7, #4]
 8011cfa:	f006 fd4e 	bl	801879a <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8011cfe:	4b15      	ldr	r3, [pc, #84]	; (8011d54 <USBD_MSC_Init+0x118>)
 8011d00:	781b      	ldrb	r3, [r3, #0]
 8011d02:	f003 020f 	and.w	r2, r3, #15
 8011d06:	6879      	ldr	r1, [r7, #4]
 8011d08:	4613      	mov	r3, r2
 8011d0a:	009b      	lsls	r3, r3, #2
 8011d0c:	4413      	add	r3, r2
 8011d0e:	009b      	lsls	r3, r3, #2
 8011d10:	440b      	add	r3, r1
 8011d12:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011d16:	2201      	movs	r2, #1
 8011d18:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8011d1a:	4b0f      	ldr	r3, [pc, #60]	; (8011d58 <USBD_MSC_Init+0x11c>)
 8011d1c:	7819      	ldrb	r1, [r3, #0]
 8011d1e:	2340      	movs	r3, #64	; 0x40
 8011d20:	2202      	movs	r2, #2
 8011d22:	6878      	ldr	r0, [r7, #4]
 8011d24:	f006 fd39 	bl	801879a <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8011d28:	4b0b      	ldr	r3, [pc, #44]	; (8011d58 <USBD_MSC_Init+0x11c>)
 8011d2a:	781b      	ldrb	r3, [r3, #0]
 8011d2c:	f003 020f 	and.w	r2, r3, #15
 8011d30:	6879      	ldr	r1, [r7, #4]
 8011d32:	4613      	mov	r3, r2
 8011d34:	009b      	lsls	r3, r3, #2
 8011d36:	4413      	add	r3, r2
 8011d38:	009b      	lsls	r3, r3, #2
 8011d3a:	440b      	add	r3, r1
 8011d3c:	3324      	adds	r3, #36	; 0x24
 8011d3e:	2201      	movs	r2, #1
 8011d40:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8011d42:	6878      	ldr	r0, [r7, #4]
 8011d44:	f000 fa2c 	bl	80121a0 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8011d48:	2300      	movs	r3, #0
}
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	3710      	adds	r7, #16
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	bd80      	pop	{r7, pc}
 8011d52:	bf00      	nop
 8011d54:	2000006f 	.word	0x2000006f
 8011d58:	2000006e 	.word	0x2000006e

08011d5c <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011d5c:	b580      	push	{r7, lr}
 8011d5e:	b082      	sub	sp, #8
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	6078      	str	r0, [r7, #4]
 8011d64:	460b      	mov	r3, r1
 8011d66:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8011d68:	4b26      	ldr	r3, [pc, #152]	; (8011e04 <USBD_MSC_DeInit+0xa8>)
 8011d6a:	781b      	ldrb	r3, [r3, #0]
 8011d6c:	4619      	mov	r1, r3
 8011d6e:	6878      	ldr	r0, [r7, #4]
 8011d70:	f006 fd39 	bl	80187e6 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8011d74:	4b23      	ldr	r3, [pc, #140]	; (8011e04 <USBD_MSC_DeInit+0xa8>)
 8011d76:	781b      	ldrb	r3, [r3, #0]
 8011d78:	f003 020f 	and.w	r2, r3, #15
 8011d7c:	6879      	ldr	r1, [r7, #4]
 8011d7e:	4613      	mov	r3, r2
 8011d80:	009b      	lsls	r3, r3, #2
 8011d82:	4413      	add	r3, r2
 8011d84:	009b      	lsls	r3, r3, #2
 8011d86:	440b      	add	r3, r1
 8011d88:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8011d90:	4b1d      	ldr	r3, [pc, #116]	; (8011e08 <USBD_MSC_DeInit+0xac>)
 8011d92:	781b      	ldrb	r3, [r3, #0]
 8011d94:	4619      	mov	r1, r3
 8011d96:	6878      	ldr	r0, [r7, #4]
 8011d98:	f006 fd25 	bl	80187e6 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8011d9c:	4b1a      	ldr	r3, [pc, #104]	; (8011e08 <USBD_MSC_DeInit+0xac>)
 8011d9e:	781b      	ldrb	r3, [r3, #0]
 8011da0:	f003 020f 	and.w	r2, r3, #15
 8011da4:	6879      	ldr	r1, [r7, #4]
 8011da6:	4613      	mov	r3, r2
 8011da8:	009b      	lsls	r3, r3, #2
 8011daa:	4413      	add	r3, r2
 8011dac:	009b      	lsls	r3, r3, #2
 8011dae:	440b      	add	r3, r1
 8011db0:	3324      	adds	r3, #36	; 0x24
 8011db2:	2200      	movs	r2, #0
 8011db4:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	32b0      	adds	r2, #176	; 0xb0
 8011dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d018      	beq.n	8011dfa <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8011dc8:	6878      	ldr	r0, [r7, #4]
 8011dca:	f000 fa67 	bl	801229c <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	32b0      	adds	r2, #176	; 0xb0
 8011dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ddc:	4618      	mov	r0, r3
 8011dde:	f006 fe7b 	bl	8018ad8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	32b0      	adds	r2, #176	; 0xb0
 8011dec:	2100      	movs	r1, #0
 8011dee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	2200      	movs	r2, #0
 8011df6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8011dfa:	2300      	movs	r3, #0
}
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	3708      	adds	r7, #8
 8011e00:	46bd      	mov	sp, r7
 8011e02:	bd80      	pop	{r7, pc}
 8011e04:	2000006f 	.word	0x2000006f
 8011e08:	2000006e 	.word	0x2000006e

08011e0c <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b086      	sub	sp, #24
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
 8011e14:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	32b0      	adds	r2, #176	; 0xb0
 8011e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e24:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8011e26:	2300      	movs	r3, #0
 8011e28:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8011e2e:	693b      	ldr	r3, [r7, #16]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d101      	bne.n	8011e38 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8011e34:	2303      	movs	r3, #3
 8011e36:	e0e1      	b.n	8011ffc <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011e38:	683b      	ldr	r3, [r7, #0]
 8011e3a:	781b      	ldrb	r3, [r3, #0]
 8011e3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d053      	beq.n	8011eec <USBD_MSC_Setup+0xe0>
 8011e44:	2b20      	cmp	r3, #32
 8011e46:	f040 80d1 	bne.w	8011fec <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8011e4a:	683b      	ldr	r3, [r7, #0]
 8011e4c:	785b      	ldrb	r3, [r3, #1]
 8011e4e:	2bfe      	cmp	r3, #254	; 0xfe
 8011e50:	d002      	beq.n	8011e58 <USBD_MSC_Setup+0x4c>
 8011e52:	2bff      	cmp	r3, #255	; 0xff
 8011e54:	d02a      	beq.n	8011eac <USBD_MSC_Setup+0xa0>
 8011e56:	e041      	b.n	8011edc <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8011e58:	683b      	ldr	r3, [r7, #0]
 8011e5a:	885b      	ldrh	r3, [r3, #2]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d11e      	bne.n	8011e9e <USBD_MSC_Setup+0x92>
 8011e60:	683b      	ldr	r3, [r7, #0]
 8011e62:	88db      	ldrh	r3, [r3, #6]
 8011e64:	2b01      	cmp	r3, #1
 8011e66:	d11a      	bne.n	8011e9e <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8011e68:	683b      	ldr	r3, [r7, #0]
 8011e6a:	781b      	ldrb	r3, [r3, #0]
 8011e6c:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	da15      	bge.n	8011e9e <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011e78:	687a      	ldr	r2, [r7, #4]
 8011e7a:	33b0      	adds	r3, #176	; 0xb0
 8011e7c:	009b      	lsls	r3, r3, #2
 8011e7e:	4413      	add	r3, r2
 8011e80:	685b      	ldr	r3, [r3, #4]
 8011e82:	699b      	ldr	r3, [r3, #24]
 8011e84:	4798      	blx	r3
 8011e86:	4603      	mov	r3, r0
 8011e88:	461a      	mov	r2, r3
 8011e8a:	693b      	ldr	r3, [r7, #16]
 8011e8c:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8011e8e:	693b      	ldr	r3, [r7, #16]
 8011e90:	2201      	movs	r2, #1
 8011e92:	4619      	mov	r1, r3
 8011e94:	6878      	ldr	r0, [r7, #4]
 8011e96:	f003 f923 	bl	80150e0 <USBD_CtlSendData>
 8011e9a:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011e9c:	e025      	b.n	8011eea <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8011e9e:	6839      	ldr	r1, [r7, #0]
 8011ea0:	6878      	ldr	r0, [r7, #4]
 8011ea2:	f003 f8ac 	bl	8014ffe <USBD_CtlError>
            ret = USBD_FAIL;
 8011ea6:	2303      	movs	r3, #3
 8011ea8:	75fb      	strb	r3, [r7, #23]
          break;
 8011eaa:	e01e      	b.n	8011eea <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8011eac:	683b      	ldr	r3, [r7, #0]
 8011eae:	885b      	ldrh	r3, [r3, #2]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d10c      	bne.n	8011ece <USBD_MSC_Setup+0xc2>
 8011eb4:	683b      	ldr	r3, [r7, #0]
 8011eb6:	88db      	ldrh	r3, [r3, #6]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d108      	bne.n	8011ece <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8011ebc:	683b      	ldr	r3, [r7, #0]
 8011ebe:	781b      	ldrb	r3, [r3, #0]
 8011ec0:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	db03      	blt.n	8011ece <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8011ec6:	6878      	ldr	r0, [r7, #4]
 8011ec8:	f000 f9b4 	bl	8012234 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011ecc:	e00d      	b.n	8011eea <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8011ece:	6839      	ldr	r1, [r7, #0]
 8011ed0:	6878      	ldr	r0, [r7, #4]
 8011ed2:	f003 f894 	bl	8014ffe <USBD_CtlError>
            ret = USBD_FAIL;
 8011ed6:	2303      	movs	r3, #3
 8011ed8:	75fb      	strb	r3, [r7, #23]
          break;
 8011eda:	e006      	b.n	8011eea <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8011edc:	6839      	ldr	r1, [r7, #0]
 8011ede:	6878      	ldr	r0, [r7, #4]
 8011ee0:	f003 f88d 	bl	8014ffe <USBD_CtlError>
          ret = USBD_FAIL;
 8011ee4:	2303      	movs	r3, #3
 8011ee6:	75fb      	strb	r3, [r7, #23]
          break;
 8011ee8:	bf00      	nop
      }
      break;
 8011eea:	e086      	b.n	8011ffa <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011eec:	683b      	ldr	r3, [r7, #0]
 8011eee:	785b      	ldrb	r3, [r3, #1]
 8011ef0:	2b0b      	cmp	r3, #11
 8011ef2:	d872      	bhi.n	8011fda <USBD_MSC_Setup+0x1ce>
 8011ef4:	a201      	add	r2, pc, #4	; (adr r2, 8011efc <USBD_MSC_Setup+0xf0>)
 8011ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011efa:	bf00      	nop
 8011efc:	08011f2d 	.word	0x08011f2d
 8011f00:	08011fa9 	.word	0x08011fa9
 8011f04:	08011fdb 	.word	0x08011fdb
 8011f08:	08011fdb 	.word	0x08011fdb
 8011f0c:	08011fdb 	.word	0x08011fdb
 8011f10:	08011fdb 	.word	0x08011fdb
 8011f14:	08011fdb 	.word	0x08011fdb
 8011f18:	08011fdb 	.word	0x08011fdb
 8011f1c:	08011fdb 	.word	0x08011fdb
 8011f20:	08011fdb 	.word	0x08011fdb
 8011f24:	08011f57 	.word	0x08011f57
 8011f28:	08011f81 	.word	0x08011f81
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f32:	b2db      	uxtb	r3, r3
 8011f34:	2b03      	cmp	r3, #3
 8011f36:	d107      	bne.n	8011f48 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011f38:	f107 030e 	add.w	r3, r7, #14
 8011f3c:	2202      	movs	r2, #2
 8011f3e:	4619      	mov	r1, r3
 8011f40:	6878      	ldr	r0, [r7, #4]
 8011f42:	f003 f8cd 	bl	80150e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011f46:	e050      	b.n	8011fea <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8011f48:	6839      	ldr	r1, [r7, #0]
 8011f4a:	6878      	ldr	r0, [r7, #4]
 8011f4c:	f003 f857 	bl	8014ffe <USBD_CtlError>
            ret = USBD_FAIL;
 8011f50:	2303      	movs	r3, #3
 8011f52:	75fb      	strb	r3, [r7, #23]
          break;
 8011f54:	e049      	b.n	8011fea <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f5c:	b2db      	uxtb	r3, r3
 8011f5e:	2b03      	cmp	r3, #3
 8011f60:	d107      	bne.n	8011f72 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8011f62:	693b      	ldr	r3, [r7, #16]
 8011f64:	3304      	adds	r3, #4
 8011f66:	2201      	movs	r2, #1
 8011f68:	4619      	mov	r1, r3
 8011f6a:	6878      	ldr	r0, [r7, #4]
 8011f6c:	f003 f8b8 	bl	80150e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011f70:	e03b      	b.n	8011fea <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8011f72:	6839      	ldr	r1, [r7, #0]
 8011f74:	6878      	ldr	r0, [r7, #4]
 8011f76:	f003 f842 	bl	8014ffe <USBD_CtlError>
            ret = USBD_FAIL;
 8011f7a:	2303      	movs	r3, #3
 8011f7c:	75fb      	strb	r3, [r7, #23]
          break;
 8011f7e:	e034      	b.n	8011fea <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f86:	b2db      	uxtb	r3, r3
 8011f88:	2b03      	cmp	r3, #3
 8011f8a:	d106      	bne.n	8011f9a <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8011f8c:	683b      	ldr	r3, [r7, #0]
 8011f8e:	885b      	ldrh	r3, [r3, #2]
 8011f90:	b2db      	uxtb	r3, r3
 8011f92:	461a      	mov	r2, r3
 8011f94:	693b      	ldr	r3, [r7, #16]
 8011f96:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011f98:	e027      	b.n	8011fea <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8011f9a:	6839      	ldr	r1, [r7, #0]
 8011f9c:	6878      	ldr	r0, [r7, #4]
 8011f9e:	f003 f82e 	bl	8014ffe <USBD_CtlError>
            ret = USBD_FAIL;
 8011fa2:	2303      	movs	r3, #3
 8011fa4:	75fb      	strb	r3, [r7, #23]
          break;
 8011fa6:	e020      	b.n	8011fea <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011fae:	b2db      	uxtb	r3, r3
 8011fb0:	2b03      	cmp	r3, #3
 8011fb2:	d119      	bne.n	8011fe8 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8011fb4:	683b      	ldr	r3, [r7, #0]
 8011fb6:	885b      	ldrh	r3, [r3, #2]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d115      	bne.n	8011fe8 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8011fbc:	683b      	ldr	r3, [r7, #0]
 8011fbe:	889b      	ldrh	r3, [r3, #4]
 8011fc0:	b2db      	uxtb	r3, r3
 8011fc2:	4619      	mov	r1, r3
 8011fc4:	6878      	ldr	r0, [r7, #4]
 8011fc6:	f006 fc2d 	bl	8018824 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8011fca:	683b      	ldr	r3, [r7, #0]
 8011fcc:	889b      	ldrh	r3, [r3, #4]
 8011fce:	b2db      	uxtb	r3, r3
 8011fd0:	4619      	mov	r1, r3
 8011fd2:	6878      	ldr	r0, [r7, #4]
 8011fd4:	f000 fb2e 	bl	8012634 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8011fd8:	e006      	b.n	8011fe8 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8011fda:	6839      	ldr	r1, [r7, #0]
 8011fdc:	6878      	ldr	r0, [r7, #4]
 8011fde:	f003 f80e 	bl	8014ffe <USBD_CtlError>
          ret = USBD_FAIL;
 8011fe2:	2303      	movs	r3, #3
 8011fe4:	75fb      	strb	r3, [r7, #23]
          break;
 8011fe6:	e000      	b.n	8011fea <USBD_MSC_Setup+0x1de>
          break;
 8011fe8:	bf00      	nop
      }
      break;
 8011fea:	e006      	b.n	8011ffa <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8011fec:	6839      	ldr	r1, [r7, #0]
 8011fee:	6878      	ldr	r0, [r7, #4]
 8011ff0:	f003 f805 	bl	8014ffe <USBD_CtlError>
      ret = USBD_FAIL;
 8011ff4:	2303      	movs	r3, #3
 8011ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8011ff8:	bf00      	nop
  }

  return (uint8_t)ret;
 8011ffa:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	3718      	adds	r7, #24
 8012000:	46bd      	mov	sp, r7
 8012002:	bd80      	pop	{r7, pc}

08012004 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012004:	b580      	push	{r7, lr}
 8012006:	b082      	sub	sp, #8
 8012008:	af00      	add	r7, sp, #0
 801200a:	6078      	str	r0, [r7, #4]
 801200c:	460b      	mov	r3, r1
 801200e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8012010:	78fb      	ldrb	r3, [r7, #3]
 8012012:	4619      	mov	r1, r3
 8012014:	6878      	ldr	r0, [r7, #4]
 8012016:	f000 f959 	bl	80122cc <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 801201a:	2300      	movs	r3, #0
}
 801201c:	4618      	mov	r0, r3
 801201e:	3708      	adds	r7, #8
 8012020:	46bd      	mov	sp, r7
 8012022:	bd80      	pop	{r7, pc}

08012024 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012024:	b580      	push	{r7, lr}
 8012026:	b082      	sub	sp, #8
 8012028:	af00      	add	r7, sp, #0
 801202a:	6078      	str	r0, [r7, #4]
 801202c:	460b      	mov	r3, r1
 801202e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8012030:	78fb      	ldrb	r3, [r7, #3]
 8012032:	4619      	mov	r1, r3
 8012034:	6878      	ldr	r0, [r7, #4]
 8012036:	f000 f983 	bl	8012340 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 801203a:	2300      	movs	r3, #0
}
 801203c:	4618      	mov	r0, r3
 801203e:	3708      	adds	r7, #8
 8012040:	46bd      	mov	sp, r7
 8012042:	bd80      	pop	{r7, pc}

08012044 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8012044:	b580      	push	{r7, lr}
 8012046:	b084      	sub	sp, #16
 8012048:	af00      	add	r7, sp, #0
 801204a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 801204c:	2181      	movs	r1, #129	; 0x81
 801204e:	4812      	ldr	r0, [pc, #72]	; (8012098 <USBD_MSC_GetHSCfgDesc+0x54>)
 8012050:	f002 f972 	bl	8014338 <USBD_GetEpDesc>
 8012054:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8012056:	2101      	movs	r1, #1
 8012058:	480f      	ldr	r0, [pc, #60]	; (8012098 <USBD_MSC_GetHSCfgDesc+0x54>)
 801205a:	f002 f96d 	bl	8014338 <USBD_GetEpDesc>
 801205e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d006      	beq.n	8012074 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	2200      	movs	r2, #0
 801206a:	711a      	strb	r2, [r3, #4]
 801206c:	2200      	movs	r2, #0
 801206e:	f042 0202 	orr.w	r2, r2, #2
 8012072:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8012074:	68bb      	ldr	r3, [r7, #8]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d006      	beq.n	8012088 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 801207a:	68bb      	ldr	r3, [r7, #8]
 801207c:	2200      	movs	r2, #0
 801207e:	711a      	strb	r2, [r3, #4]
 8012080:	2200      	movs	r2, #0
 8012082:	f042 0202 	orr.w	r2, r2, #2
 8012086:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	2220      	movs	r2, #32
 801208c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 801208e:	4b02      	ldr	r3, [pc, #8]	; (8012098 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8012090:	4618      	mov	r0, r3
 8012092:	3710      	adds	r7, #16
 8012094:	46bd      	mov	sp, r7
 8012096:	bd80      	pop	{r7, pc}
 8012098:	20000044 	.word	0x20000044

0801209c <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 801209c:	b580      	push	{r7, lr}
 801209e:	b084      	sub	sp, #16
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80120a4:	2181      	movs	r1, #129	; 0x81
 80120a6:	4812      	ldr	r0, [pc, #72]	; (80120f0 <USBD_MSC_GetFSCfgDesc+0x54>)
 80120a8:	f002 f946 	bl	8014338 <USBD_GetEpDesc>
 80120ac:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80120ae:	2101      	movs	r1, #1
 80120b0:	480f      	ldr	r0, [pc, #60]	; (80120f0 <USBD_MSC_GetFSCfgDesc+0x54>)
 80120b2:	f002 f941 	bl	8014338 <USBD_GetEpDesc>
 80120b6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d006      	beq.n	80120cc <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80120be:	68fb      	ldr	r3, [r7, #12]
 80120c0:	2200      	movs	r2, #0
 80120c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80120c6:	711a      	strb	r2, [r3, #4]
 80120c8:	2200      	movs	r2, #0
 80120ca:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80120cc:	68bb      	ldr	r3, [r7, #8]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d006      	beq.n	80120e0 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80120d2:	68bb      	ldr	r3, [r7, #8]
 80120d4:	2200      	movs	r2, #0
 80120d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80120da:	711a      	strb	r2, [r3, #4]
 80120dc:	2200      	movs	r2, #0
 80120de:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	2220      	movs	r2, #32
 80120e4:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80120e6:	4b02      	ldr	r3, [pc, #8]	; (80120f0 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 80120e8:	4618      	mov	r0, r3
 80120ea:	3710      	adds	r7, #16
 80120ec:	46bd      	mov	sp, r7
 80120ee:	bd80      	pop	{r7, pc}
 80120f0:	20000044 	.word	0x20000044

080120f4 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80120f4:	b580      	push	{r7, lr}
 80120f6:	b084      	sub	sp, #16
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80120fc:	2181      	movs	r1, #129	; 0x81
 80120fe:	4812      	ldr	r0, [pc, #72]	; (8012148 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8012100:	f002 f91a 	bl	8014338 <USBD_GetEpDesc>
 8012104:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8012106:	2101      	movs	r1, #1
 8012108:	480f      	ldr	r0, [pc, #60]	; (8012148 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 801210a:	f002 f915 	bl	8014338 <USBD_GetEpDesc>
 801210e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d006      	beq.n	8012124 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	2200      	movs	r2, #0
 801211a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801211e:	711a      	strb	r2, [r3, #4]
 8012120:	2200      	movs	r2, #0
 8012122:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8012124:	68bb      	ldr	r3, [r7, #8]
 8012126:	2b00      	cmp	r3, #0
 8012128:	d006      	beq.n	8012138 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 801212a:	68bb      	ldr	r3, [r7, #8]
 801212c:	2200      	movs	r2, #0
 801212e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012132:	711a      	strb	r2, [r3, #4]
 8012134:	2200      	movs	r2, #0
 8012136:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	2220      	movs	r2, #32
 801213c:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 801213e:	4b02      	ldr	r3, [pc, #8]	; (8012148 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8012140:	4618      	mov	r0, r3
 8012142:	3710      	adds	r7, #16
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}
 8012148:	20000044 	.word	0x20000044

0801214c <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801214c:	b480      	push	{r7}
 801214e:	b083      	sub	sp, #12
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	220a      	movs	r2, #10
 8012158:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 801215a:	4b03      	ldr	r3, [pc, #12]	; (8012168 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 801215c:	4618      	mov	r0, r3
 801215e:	370c      	adds	r7, #12
 8012160:	46bd      	mov	sp, r7
 8012162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012166:	4770      	bx	lr
 8012168:	20000064 	.word	0x20000064

0801216c <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 801216c:	b480      	push	{r7}
 801216e:	b083      	sub	sp, #12
 8012170:	af00      	add	r7, sp, #0
 8012172:	6078      	str	r0, [r7, #4]
 8012174:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8012176:	683b      	ldr	r3, [r7, #0]
 8012178:	2b00      	cmp	r3, #0
 801217a:	d101      	bne.n	8012180 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801217c:	2303      	movs	r3, #3
 801217e:	e009      	b.n	8012194 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012186:	687a      	ldr	r2, [r7, #4]
 8012188:	33b0      	adds	r3, #176	; 0xb0
 801218a:	009b      	lsls	r3, r3, #2
 801218c:	4413      	add	r3, r2
 801218e:	683a      	ldr	r2, [r7, #0]
 8012190:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8012192:	2300      	movs	r3, #0
}
 8012194:	4618      	mov	r0, r3
 8012196:	370c      	adds	r7, #12
 8012198:	46bd      	mov	sp, r7
 801219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801219e:	4770      	bx	lr

080121a0 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b084      	sub	sp, #16
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	32b0      	adds	r2, #176	; 0xb0
 80121b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80121b6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d032      	beq.n	8012224 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	2200      	movs	r2, #0
 80121c2:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	2200      	movs	r2, #0
 80121c8:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	2200      	movs	r2, #0
 80121ce:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	2200      	movs	r2, #0
 80121d6:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	2200      	movs	r2, #0
 80121de:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80121e8:	687a      	ldr	r2, [r7, #4]
 80121ea:	33b0      	adds	r3, #176	; 0xb0
 80121ec:	009b      	lsls	r3, r3, #2
 80121ee:	4413      	add	r3, r2
 80121f0:	685b      	ldr	r3, [r3, #4]
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	2000      	movs	r0, #0
 80121f6:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 80121f8:	4b0c      	ldr	r3, [pc, #48]	; (801222c <MSC_BOT_Init+0x8c>)
 80121fa:	781b      	ldrb	r3, [r3, #0]
 80121fc:	4619      	mov	r1, r3
 80121fe:	6878      	ldr	r0, [r7, #4]
 8012200:	f006 fb10 	bl	8018824 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8012204:	4b0a      	ldr	r3, [pc, #40]	; (8012230 <MSC_BOT_Init+0x90>)
 8012206:	781b      	ldrb	r3, [r3, #0]
 8012208:	4619      	mov	r1, r3
 801220a:	6878      	ldr	r0, [r7, #4]
 801220c:	f006 fb0a 	bl	8018824 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8012210:	4b06      	ldr	r3, [pc, #24]	; (801222c <MSC_BOT_Init+0x8c>)
 8012212:	7819      	ldrb	r1, [r3, #0]
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801221a:	231f      	movs	r3, #31
 801221c:	6878      	ldr	r0, [r7, #4]
 801221e:	f006 fbca 	bl	80189b6 <USBD_LL_PrepareReceive>
 8012222:	e000      	b.n	8012226 <MSC_BOT_Init+0x86>
    return;
 8012224:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8012226:	3710      	adds	r7, #16
 8012228:	46bd      	mov	sp, r7
 801222a:	bd80      	pop	{r7, pc}
 801222c:	2000006f 	.word	0x2000006f
 8012230:	2000006e 	.word	0x2000006e

08012234 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8012234:	b580      	push	{r7, lr}
 8012236:	b084      	sub	sp, #16
 8012238:	af00      	add	r7, sp, #0
 801223a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	32b0      	adds	r2, #176	; 0xb0
 8012246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801224a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	2b00      	cmp	r3, #0
 8012250:	d01b      	beq.n	801228a <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	2200      	movs	r2, #0
 8012256:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	2201      	movs	r2, #1
 801225c:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 801225e:	4b0d      	ldr	r3, [pc, #52]	; (8012294 <MSC_BOT_Reset+0x60>)
 8012260:	781b      	ldrb	r3, [r3, #0]
 8012262:	4619      	mov	r1, r3
 8012264:	6878      	ldr	r0, [r7, #4]
 8012266:	f006 fb1b 	bl	80188a0 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 801226a:	4b0b      	ldr	r3, [pc, #44]	; (8012298 <MSC_BOT_Reset+0x64>)
 801226c:	781b      	ldrb	r3, [r3, #0]
 801226e:	4619      	mov	r1, r3
 8012270:	6878      	ldr	r0, [r7, #4]
 8012272:	f006 fb15 	bl	80188a0 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8012276:	4b08      	ldr	r3, [pc, #32]	; (8012298 <MSC_BOT_Reset+0x64>)
 8012278:	7819      	ldrb	r1, [r3, #0]
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8012280:	231f      	movs	r3, #31
 8012282:	6878      	ldr	r0, [r7, #4]
 8012284:	f006 fb97 	bl	80189b6 <USBD_LL_PrepareReceive>
 8012288:	e000      	b.n	801228c <MSC_BOT_Reset+0x58>
    return;
 801228a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801228c:	3710      	adds	r7, #16
 801228e:	46bd      	mov	sp, r7
 8012290:	bd80      	pop	{r7, pc}
 8012292:	bf00      	nop
 8012294:	2000006e 	.word	0x2000006e
 8012298:	2000006f 	.word	0x2000006f

0801229c <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 801229c:	b480      	push	{r7}
 801229e:	b085      	sub	sp, #20
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	32b0      	adds	r2, #176	; 0xb0
 80122ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80122b2:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d002      	beq.n	80122c0 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	2200      	movs	r2, #0
 80122be:	721a      	strb	r2, [r3, #8]
  }
}
 80122c0:	bf00      	nop
 80122c2:	3714      	adds	r7, #20
 80122c4:	46bd      	mov	sp, r7
 80122c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ca:	4770      	bx	lr

080122cc <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80122cc:	b580      	push	{r7, lr}
 80122ce:	b084      	sub	sp, #16
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
 80122d4:	460b      	mov	r3, r1
 80122d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	32b0      	adds	r2, #176	; 0xb0
 80122e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80122e6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d020      	beq.n	8012330 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	7a1b      	ldrb	r3, [r3, #8]
 80122f2:	2b02      	cmp	r3, #2
 80122f4:	d005      	beq.n	8012302 <MSC_BOT_DataIn+0x36>
 80122f6:	2b02      	cmp	r3, #2
 80122f8:	db1c      	blt.n	8012334 <MSC_BOT_DataIn+0x68>
 80122fa:	3b03      	subs	r3, #3
 80122fc:	2b01      	cmp	r3, #1
 80122fe:	d819      	bhi.n	8012334 <MSC_BOT_DataIn+0x68>
 8012300:	e011      	b.n	8012326 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801230e:	461a      	mov	r2, r3
 8012310:	6878      	ldr	r0, [r7, #4]
 8012312:	f000 f9c9 	bl	80126a8 <SCSI_ProcessCmd>
 8012316:	4603      	mov	r3, r0
 8012318:	2b00      	cmp	r3, #0
 801231a:	da0d      	bge.n	8012338 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801231c:	2101      	movs	r1, #1
 801231e:	6878      	ldr	r0, [r7, #4]
 8012320:	f000 f90c 	bl	801253c <MSC_BOT_SendCSW>
      }
      break;
 8012324:	e008      	b.n	8012338 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8012326:	2100      	movs	r1, #0
 8012328:	6878      	ldr	r0, [r7, #4]
 801232a:	f000 f907 	bl	801253c <MSC_BOT_SendCSW>
      break;
 801232e:	e004      	b.n	801233a <MSC_BOT_DataIn+0x6e>
    return;
 8012330:	bf00      	nop
 8012332:	e002      	b.n	801233a <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8012334:	bf00      	nop
 8012336:	e000      	b.n	801233a <MSC_BOT_DataIn+0x6e>
      break;
 8012338:	bf00      	nop
  }
}
 801233a:	3710      	adds	r7, #16
 801233c:	46bd      	mov	sp, r7
 801233e:	bd80      	pop	{r7, pc}

08012340 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012340:	b580      	push	{r7, lr}
 8012342:	b084      	sub	sp, #16
 8012344:	af00      	add	r7, sp, #0
 8012346:	6078      	str	r0, [r7, #4]
 8012348:	460b      	mov	r3, r1
 801234a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	32b0      	adds	r2, #176	; 0xb0
 8012356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801235a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d01c      	beq.n	801239c <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	7a1b      	ldrb	r3, [r3, #8]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d002      	beq.n	8012370 <MSC_BOT_DataOut+0x30>
 801236a:	2b01      	cmp	r3, #1
 801236c:	d004      	beq.n	8012378 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 801236e:	e018      	b.n	80123a2 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 8012370:	6878      	ldr	r0, [r7, #4]
 8012372:	f000 f819 	bl	80123a8 <MSC_BOT_CBW_Decode>
      break;
 8012376:	e014      	b.n	80123a2 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8012384:	461a      	mov	r2, r3
 8012386:	6878      	ldr	r0, [r7, #4]
 8012388:	f000 f98e 	bl	80126a8 <SCSI_ProcessCmd>
 801238c:	4603      	mov	r3, r0
 801238e:	2b00      	cmp	r3, #0
 8012390:	da06      	bge.n	80123a0 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012392:	2101      	movs	r1, #1
 8012394:	6878      	ldr	r0, [r7, #4]
 8012396:	f000 f8d1 	bl	801253c <MSC_BOT_SendCSW>
      break;
 801239a:	e001      	b.n	80123a0 <MSC_BOT_DataOut+0x60>
    return;
 801239c:	bf00      	nop
 801239e:	e000      	b.n	80123a2 <MSC_BOT_DataOut+0x62>
      break;
 80123a0:	bf00      	nop
  }
}
 80123a2:	3710      	adds	r7, #16
 80123a4:	46bd      	mov	sp, r7
 80123a6:	bd80      	pop	{r7, pc}

080123a8 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b084      	sub	sp, #16
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	32b0      	adds	r2, #176	; 0xb0
 80123ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123be:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d079      	beq.n	80124ba <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80123de:	4b3a      	ldr	r3, [pc, #232]	; (80124c8 <MSC_BOT_CBW_Decode+0x120>)
 80123e0:	781b      	ldrb	r3, [r3, #0]
 80123e2:	4619      	mov	r1, r3
 80123e4:	6878      	ldr	r0, [r7, #4]
 80123e6:	f006 fb07 	bl	80189f8 <USBD_LL_GetRxDataSize>
 80123ea:	4603      	mov	r3, r0
 80123ec:	2b1f      	cmp	r3, #31
 80123ee:	d114      	bne.n	801241a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80123f6:	4a35      	ldr	r2, [pc, #212]	; (80124cc <MSC_BOT_CBW_Decode+0x124>)
 80123f8:	4293      	cmp	r3, r2
 80123fa:	d10e      	bne.n	801241a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8012402:	2b01      	cmp	r3, #1
 8012404:	d809      	bhi.n	801241a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 801240c:	2b00      	cmp	r3, #0
 801240e:	d004      	beq.n	801241a <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8012416:	2b10      	cmp	r3, #16
 8012418:	d90e      	bls.n	8012438 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012420:	2320      	movs	r3, #32
 8012422:	2205      	movs	r2, #5
 8012424:	6878      	ldr	r0, [r7, #4]
 8012426:	f000 fe28 	bl	801307a <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	2202      	movs	r2, #2
 801242e:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8012430:	6878      	ldr	r0, [r7, #4]
 8012432:	f000 f8bd 	bl	80125b0 <MSC_BOT_Abort>
 8012436:	e043      	b.n	80124c0 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8012444:	461a      	mov	r2, r3
 8012446:	6878      	ldr	r0, [r7, #4]
 8012448:	f000 f92e 	bl	80126a8 <SCSI_ProcessCmd>
 801244c:	4603      	mov	r3, r0
 801244e:	2b00      	cmp	r3, #0
 8012450:	da0c      	bge.n	801246c <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	7a1b      	ldrb	r3, [r3, #8]
 8012456:	2b05      	cmp	r3, #5
 8012458:	d104      	bne.n	8012464 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801245a:	2101      	movs	r1, #1
 801245c:	6878      	ldr	r0, [r7, #4]
 801245e:	f000 f86d 	bl	801253c <MSC_BOT_SendCSW>
 8012462:	e02d      	b.n	80124c0 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8012464:	6878      	ldr	r0, [r7, #4]
 8012466:	f000 f8a3 	bl	80125b0 <MSC_BOT_Abort>
 801246a:	e029      	b.n	80124c0 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	7a1b      	ldrb	r3, [r3, #8]
 8012470:	2b02      	cmp	r3, #2
 8012472:	d024      	beq.n	80124be <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8012478:	2b01      	cmp	r3, #1
 801247a:	d020      	beq.n	80124be <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8012480:	2b03      	cmp	r3, #3
 8012482:	d01c      	beq.n	80124be <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	68db      	ldr	r3, [r3, #12]
 8012488:	2b00      	cmp	r3, #0
 801248a:	d009      	beq.n	80124a0 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	f103 0110 	add.w	r1, r3, #16
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	68db      	ldr	r3, [r3, #12]
 8012496:	461a      	mov	r2, r3
 8012498:	6878      	ldr	r0, [r7, #4]
 801249a:	f000 f819 	bl	80124d0 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 801249e:	e00f      	b.n	80124c0 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	68db      	ldr	r3, [r3, #12]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d104      	bne.n	80124b2 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80124a8:	2100      	movs	r1, #0
 80124aa:	6878      	ldr	r0, [r7, #4]
 80124ac:	f000 f846 	bl	801253c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80124b0:	e006      	b.n	80124c0 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80124b2:	6878      	ldr	r0, [r7, #4]
 80124b4:	f000 f87c 	bl	80125b0 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80124b8:	e002      	b.n	80124c0 <MSC_BOT_CBW_Decode+0x118>
    return;
 80124ba:	bf00      	nop
 80124bc:	e000      	b.n	80124c0 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 80124be:	bf00      	nop
    }
  }
}
 80124c0:	3710      	adds	r7, #16
 80124c2:	46bd      	mov	sp, r7
 80124c4:	bd80      	pop	{r7, pc}
 80124c6:	bf00      	nop
 80124c8:	2000006f 	.word	0x2000006f
 80124cc:	43425355 	.word	0x43425355

080124d0 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b086      	sub	sp, #24
 80124d4:	af00      	add	r7, sp, #0
 80124d6:	60f8      	str	r0, [r7, #12]
 80124d8:	60b9      	str	r1, [r7, #8]
 80124da:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	32b0      	adds	r2, #176	; 0xb0
 80124e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80124ea:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80124ec:	697b      	ldr	r3, [r7, #20]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d01e      	beq.n	8012530 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 80124f2:	697b      	ldr	r3, [r7, #20]
 80124f4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80124f8:	687a      	ldr	r2, [r7, #4]
 80124fa:	4293      	cmp	r3, r2
 80124fc:	bf28      	it	cs
 80124fe:	4613      	movcs	r3, r2
 8012500:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8012502:	697b      	ldr	r3, [r7, #20]
 8012504:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	1ad2      	subs	r2, r2, r3
 801250c:	697b      	ldr	r3, [r7, #20]
 801250e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8012512:	697b      	ldr	r3, [r7, #20]
 8012514:	2200      	movs	r2, #0
 8012516:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 801251a:	697b      	ldr	r3, [r7, #20]
 801251c:	2204      	movs	r2, #4
 801251e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8012520:	4b05      	ldr	r3, [pc, #20]	; (8012538 <MSC_BOT_SendData+0x68>)
 8012522:	7819      	ldrb	r1, [r3, #0]
 8012524:	693b      	ldr	r3, [r7, #16]
 8012526:	68ba      	ldr	r2, [r7, #8]
 8012528:	68f8      	ldr	r0, [r7, #12]
 801252a:	f006 fa23 	bl	8018974 <USBD_LL_Transmit>
 801252e:	e000      	b.n	8012532 <MSC_BOT_SendData+0x62>
    return;
 8012530:	bf00      	nop
}
 8012532:	3718      	adds	r7, #24
 8012534:	46bd      	mov	sp, r7
 8012536:	bd80      	pop	{r7, pc}
 8012538:	2000006e 	.word	0x2000006e

0801253c <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 801253c:	b580      	push	{r7, lr}
 801253e:	b084      	sub	sp, #16
 8012540:	af00      	add	r7, sp, #0
 8012542:	6078      	str	r0, [r7, #4]
 8012544:	460b      	mov	r3, r1
 8012546:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	32b0      	adds	r2, #176	; 0xb0
 8012552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012556:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d01d      	beq.n	801259a <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	4a10      	ldr	r2, [pc, #64]	; (80125a4 <MSC_BOT_SendCSW+0x68>)
 8012562:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	78fa      	ldrb	r2, [r7, #3]
 801256a:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	2200      	movs	r2, #0
 8012572:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8012574:	4b0c      	ldr	r3, [pc, #48]	; (80125a8 <MSC_BOT_SendCSW+0x6c>)
 8012576:	7819      	ldrb	r1, [r3, #0]
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	f503 720c 	add.w	r2, r3, #560	; 0x230
 801257e:	230d      	movs	r3, #13
 8012580:	6878      	ldr	r0, [r7, #4]
 8012582:	f006 f9f7 	bl	8018974 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8012586:	4b09      	ldr	r3, [pc, #36]	; (80125ac <MSC_BOT_SendCSW+0x70>)
 8012588:	7819      	ldrb	r1, [r3, #0]
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8012590:	231f      	movs	r3, #31
 8012592:	6878      	ldr	r0, [r7, #4]
 8012594:	f006 fa0f 	bl	80189b6 <USBD_LL_PrepareReceive>
 8012598:	e000      	b.n	801259c <MSC_BOT_SendCSW+0x60>
    return;
 801259a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801259c:	3710      	adds	r7, #16
 801259e:	46bd      	mov	sp, r7
 80125a0:	bd80      	pop	{r7, pc}
 80125a2:	bf00      	nop
 80125a4:	53425355 	.word	0x53425355
 80125a8:	2000006e 	.word	0x2000006e
 80125ac:	2000006f 	.word	0x2000006f

080125b0 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80125b0:	b580      	push	{r7, lr}
 80125b2:	b084      	sub	sp, #16
 80125b4:	af00      	add	r7, sp, #0
 80125b6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	32b0      	adds	r2, #176	; 0xb0
 80125c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80125c6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d02a      	beq.n	8012624 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d10e      	bne.n	80125f6 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d009      	beq.n	80125f6 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d105      	bne.n	80125f6 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80125ea:	4b10      	ldr	r3, [pc, #64]	; (801262c <MSC_BOT_Abort+0x7c>)
 80125ec:	781b      	ldrb	r3, [r3, #0]
 80125ee:	4619      	mov	r1, r3
 80125f0:	6878      	ldr	r0, [r7, #4]
 80125f2:	f006 f936 	bl	8018862 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80125f6:	4b0e      	ldr	r3, [pc, #56]	; (8012630 <MSC_BOT_Abort+0x80>)
 80125f8:	781b      	ldrb	r3, [r3, #0]
 80125fa:	4619      	mov	r1, r3
 80125fc:	6878      	ldr	r0, [r7, #4]
 80125fe:	f006 f930 	bl	8018862 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	7a5b      	ldrb	r3, [r3, #9]
 8012606:	2b02      	cmp	r3, #2
 8012608:	d10d      	bne.n	8012626 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 801260a:	4b09      	ldr	r3, [pc, #36]	; (8012630 <MSC_BOT_Abort+0x80>)
 801260c:	781b      	ldrb	r3, [r3, #0]
 801260e:	4619      	mov	r1, r3
 8012610:	6878      	ldr	r0, [r7, #4]
 8012612:	f006 f926 	bl	8018862 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8012616:	4b05      	ldr	r3, [pc, #20]	; (801262c <MSC_BOT_Abort+0x7c>)
 8012618:	781b      	ldrb	r3, [r3, #0]
 801261a:	4619      	mov	r1, r3
 801261c:	6878      	ldr	r0, [r7, #4]
 801261e:	f006 f920 	bl	8018862 <USBD_LL_StallEP>
 8012622:	e000      	b.n	8012626 <MSC_BOT_Abort+0x76>
    return;
 8012624:	bf00      	nop
  }
}
 8012626:	3710      	adds	r7, #16
 8012628:	46bd      	mov	sp, r7
 801262a:	bd80      	pop	{r7, pc}
 801262c:	2000006f 	.word	0x2000006f
 8012630:	2000006e 	.word	0x2000006e

08012634 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012634:	b580      	push	{r7, lr}
 8012636:	b084      	sub	sp, #16
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]
 801263c:	460b      	mov	r3, r1
 801263e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	32b0      	adds	r2, #176	; 0xb0
 801264a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801264e:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d01d      	beq.n	8012692 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	7a5b      	ldrb	r3, [r3, #9]
 801265a:	2b02      	cmp	r3, #2
 801265c:	d10c      	bne.n	8012678 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 801265e:	4b10      	ldr	r3, [pc, #64]	; (80126a0 <MSC_BOT_CplClrFeature+0x6c>)
 8012660:	781b      	ldrb	r3, [r3, #0]
 8012662:	4619      	mov	r1, r3
 8012664:	6878      	ldr	r0, [r7, #4]
 8012666:	f006 f8fc 	bl	8018862 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 801266a:	4b0e      	ldr	r3, [pc, #56]	; (80126a4 <MSC_BOT_CplClrFeature+0x70>)
 801266c:	781b      	ldrb	r3, [r3, #0]
 801266e:	4619      	mov	r1, r3
 8012670:	6878      	ldr	r0, [r7, #4]
 8012672:	f006 f8f6 	bl	8018862 <USBD_LL_StallEP>
 8012676:	e00f      	b.n	8012698 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8012678:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801267c:	2b00      	cmp	r3, #0
 801267e:	da0a      	bge.n	8012696 <MSC_BOT_CplClrFeature+0x62>
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	7a5b      	ldrb	r3, [r3, #9]
 8012684:	2b01      	cmp	r3, #1
 8012686:	d006      	beq.n	8012696 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012688:	2101      	movs	r1, #1
 801268a:	6878      	ldr	r0, [r7, #4]
 801268c:	f7ff ff56 	bl	801253c <MSC_BOT_SendCSW>
 8012690:	e002      	b.n	8012698 <MSC_BOT_CplClrFeature+0x64>
    return;
 8012692:	bf00      	nop
 8012694:	e000      	b.n	8012698 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8012696:	bf00      	nop
  }
}
 8012698:	3710      	adds	r7, #16
 801269a:	46bd      	mov	sp, r7
 801269c:	bd80      	pop	{r7, pc}
 801269e:	bf00      	nop
 80126a0:	2000006e 	.word	0x2000006e
 80126a4:	2000006f 	.word	0x2000006f

080126a8 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b086      	sub	sp, #24
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	60f8      	str	r0, [r7, #12]
 80126b0:	460b      	mov	r3, r1
 80126b2:	607a      	str	r2, [r7, #4]
 80126b4:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	32b0      	adds	r2, #176	; 0xb0
 80126c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80126c4:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80126c6:	693b      	ldr	r3, [r7, #16]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d102      	bne.n	80126d2 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 80126cc:	f04f 33ff 	mov.w	r3, #4294967295
 80126d0:	e168      	b.n	80129a4 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	781b      	ldrb	r3, [r3, #0]
 80126d6:	2baa      	cmp	r3, #170	; 0xaa
 80126d8:	f000 8144 	beq.w	8012964 <SCSI_ProcessCmd+0x2bc>
 80126dc:	2baa      	cmp	r3, #170	; 0xaa
 80126de:	f300 8153 	bgt.w	8012988 <SCSI_ProcessCmd+0x2e0>
 80126e2:	2ba8      	cmp	r3, #168	; 0xa8
 80126e4:	f000 812c 	beq.w	8012940 <SCSI_ProcessCmd+0x298>
 80126e8:	2ba8      	cmp	r3, #168	; 0xa8
 80126ea:	f300 814d 	bgt.w	8012988 <SCSI_ProcessCmd+0x2e0>
 80126ee:	2b5a      	cmp	r3, #90	; 0x5a
 80126f0:	f300 80c0 	bgt.w	8012874 <SCSI_ProcessCmd+0x1cc>
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	f2c0 8147 	blt.w	8012988 <SCSI_ProcessCmd+0x2e0>
 80126fa:	2b5a      	cmp	r3, #90	; 0x5a
 80126fc:	f200 8144 	bhi.w	8012988 <SCSI_ProcessCmd+0x2e0>
 8012700:	a201      	add	r2, pc, #4	; (adr r2, 8012708 <SCSI_ProcessCmd+0x60>)
 8012702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012706:	bf00      	nop
 8012708:	0801287b 	.word	0x0801287b
 801270c:	08012989 	.word	0x08012989
 8012710:	08012989 	.word	0x08012989
 8012714:	0801288d 	.word	0x0801288d
 8012718:	08012989 	.word	0x08012989
 801271c:	08012989 	.word	0x08012989
 8012720:	08012989 	.word	0x08012989
 8012724:	08012989 	.word	0x08012989
 8012728:	08012989 	.word	0x08012989
 801272c:	08012989 	.word	0x08012989
 8012730:	08012989 	.word	0x08012989
 8012734:	08012989 	.word	0x08012989
 8012738:	08012989 	.word	0x08012989
 801273c:	08012989 	.word	0x08012989
 8012740:	08012989 	.word	0x08012989
 8012744:	08012989 	.word	0x08012989
 8012748:	08012989 	.word	0x08012989
 801274c:	08012989 	.word	0x08012989
 8012750:	0801289f 	.word	0x0801289f
 8012754:	08012989 	.word	0x08012989
 8012758:	08012989 	.word	0x08012989
 801275c:	08012989 	.word	0x08012989
 8012760:	08012989 	.word	0x08012989
 8012764:	08012989 	.word	0x08012989
 8012768:	08012989 	.word	0x08012989
 801276c:	08012989 	.word	0x08012989
 8012770:	080128d5 	.word	0x080128d5
 8012774:	080128b1 	.word	0x080128b1
 8012778:	08012989 	.word	0x08012989
 801277c:	08012989 	.word	0x08012989
 8012780:	080128c3 	.word	0x080128c3
 8012784:	08012989 	.word	0x08012989
 8012788:	08012989 	.word	0x08012989
 801278c:	08012989 	.word	0x08012989
 8012790:	08012989 	.word	0x08012989
 8012794:	080128f9 	.word	0x080128f9
 8012798:	08012989 	.word	0x08012989
 801279c:	0801290b 	.word	0x0801290b
 80127a0:	08012989 	.word	0x08012989
 80127a4:	08012989 	.word	0x08012989
 80127a8:	0801292f 	.word	0x0801292f
 80127ac:	08012989 	.word	0x08012989
 80127b0:	08012953 	.word	0x08012953
 80127b4:	08012989 	.word	0x08012989
 80127b8:	08012989 	.word	0x08012989
 80127bc:	08012989 	.word	0x08012989
 80127c0:	08012989 	.word	0x08012989
 80127c4:	08012977 	.word	0x08012977
 80127c8:	08012989 	.word	0x08012989
 80127cc:	08012989 	.word	0x08012989
 80127d0:	08012989 	.word	0x08012989
 80127d4:	08012989 	.word	0x08012989
 80127d8:	08012989 	.word	0x08012989
 80127dc:	08012989 	.word	0x08012989
 80127e0:	08012989 	.word	0x08012989
 80127e4:	08012989 	.word	0x08012989
 80127e8:	08012989 	.word	0x08012989
 80127ec:	08012989 	.word	0x08012989
 80127f0:	08012989 	.word	0x08012989
 80127f4:	08012989 	.word	0x08012989
 80127f8:	08012989 	.word	0x08012989
 80127fc:	08012989 	.word	0x08012989
 8012800:	08012989 	.word	0x08012989
 8012804:	08012989 	.word	0x08012989
 8012808:	08012989 	.word	0x08012989
 801280c:	08012989 	.word	0x08012989
 8012810:	08012989 	.word	0x08012989
 8012814:	08012989 	.word	0x08012989
 8012818:	08012989 	.word	0x08012989
 801281c:	08012989 	.word	0x08012989
 8012820:	08012989 	.word	0x08012989
 8012824:	08012989 	.word	0x08012989
 8012828:	08012989 	.word	0x08012989
 801282c:	08012989 	.word	0x08012989
 8012830:	08012989 	.word	0x08012989
 8012834:	08012989 	.word	0x08012989
 8012838:	08012989 	.word	0x08012989
 801283c:	08012989 	.word	0x08012989
 8012840:	08012989 	.word	0x08012989
 8012844:	08012989 	.word	0x08012989
 8012848:	08012989 	.word	0x08012989
 801284c:	08012989 	.word	0x08012989
 8012850:	08012989 	.word	0x08012989
 8012854:	08012989 	.word	0x08012989
 8012858:	08012989 	.word	0x08012989
 801285c:	08012989 	.word	0x08012989
 8012860:	08012989 	.word	0x08012989
 8012864:	08012989 	.word	0x08012989
 8012868:	08012989 	.word	0x08012989
 801286c:	08012989 	.word	0x08012989
 8012870:	080128e7 	.word	0x080128e7
 8012874:	2b9e      	cmp	r3, #158	; 0x9e
 8012876:	d051      	beq.n	801291c <SCSI_ProcessCmd+0x274>
 8012878:	e086      	b.n	8012988 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 801287a:	7afb      	ldrb	r3, [r7, #11]
 801287c:	687a      	ldr	r2, [r7, #4]
 801287e:	4619      	mov	r1, r3
 8012880:	68f8      	ldr	r0, [r7, #12]
 8012882:	f000 f893 	bl	80129ac <SCSI_TestUnitReady>
 8012886:	4603      	mov	r3, r0
 8012888:	75fb      	strb	r3, [r7, #23]
      break;
 801288a:	e089      	b.n	80129a0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 801288c:	7afb      	ldrb	r3, [r7, #11]
 801288e:	687a      	ldr	r2, [r7, #4]
 8012890:	4619      	mov	r1, r3
 8012892:	68f8      	ldr	r0, [r7, #12]
 8012894:	f000 fb6e 	bl	8012f74 <SCSI_RequestSense>
 8012898:	4603      	mov	r3, r0
 801289a:	75fb      	strb	r3, [r7, #23]
      break;
 801289c:	e080      	b.n	80129a0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 801289e:	7afb      	ldrb	r3, [r7, #11]
 80128a0:	687a      	ldr	r2, [r7, #4]
 80128a2:	4619      	mov	r1, r3
 80128a4:	68f8      	ldr	r0, [r7, #12]
 80128a6:	f000 f8db 	bl	8012a60 <SCSI_Inquiry>
 80128aa:	4603      	mov	r3, r0
 80128ac:	75fb      	strb	r3, [r7, #23]
      break;
 80128ae:	e077      	b.n	80129a0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 80128b0:	7afb      	ldrb	r3, [r7, #11]
 80128b2:	687a      	ldr	r2, [r7, #4]
 80128b4:	4619      	mov	r1, r3
 80128b6:	68f8      	ldr	r0, [r7, #12]
 80128b8:	f000 fc2a 	bl	8013110 <SCSI_StartStopUnit>
 80128bc:	4603      	mov	r3, r0
 80128be:	75fb      	strb	r3, [r7, #23]
      break;
 80128c0:	e06e      	b.n	80129a0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 80128c2:	7afb      	ldrb	r3, [r7, #11]
 80128c4:	687a      	ldr	r2, [r7, #4]
 80128c6:	4619      	mov	r1, r3
 80128c8:	68f8      	ldr	r0, [r7, #12]
 80128ca:	f000 fc76 	bl	80131ba <SCSI_AllowPreventRemovable>
 80128ce:	4603      	mov	r3, r0
 80128d0:	75fb      	strb	r3, [r7, #23]
      break;
 80128d2:	e065      	b.n	80129a0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 80128d4:	7afb      	ldrb	r3, [r7, #11]
 80128d6:	687a      	ldr	r2, [r7, #4]
 80128d8:	4619      	mov	r1, r3
 80128da:	68f8      	ldr	r0, [r7, #12]
 80128dc:	f000 faea 	bl	8012eb4 <SCSI_ModeSense6>
 80128e0:	4603      	mov	r3, r0
 80128e2:	75fb      	strb	r3, [r7, #23]
      break;
 80128e4:	e05c      	b.n	80129a0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 80128e6:	7afb      	ldrb	r3, [r7, #11]
 80128e8:	687a      	ldr	r2, [r7, #4]
 80128ea:	4619      	mov	r1, r3
 80128ec:	68f8      	ldr	r0, [r7, #12]
 80128ee:	f000 fb11 	bl	8012f14 <SCSI_ModeSense10>
 80128f2:	4603      	mov	r3, r0
 80128f4:	75fb      	strb	r3, [r7, #23]
      break;
 80128f6:	e053      	b.n	80129a0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 80128f8:	7afb      	ldrb	r3, [r7, #11]
 80128fa:	687a      	ldr	r2, [r7, #4]
 80128fc:	4619      	mov	r1, r3
 80128fe:	68f8      	ldr	r0, [r7, #12]
 8012900:	f000 fa5d 	bl	8012dbe <SCSI_ReadFormatCapacity>
 8012904:	4603      	mov	r3, r0
 8012906:	75fb      	strb	r3, [r7, #23]
      break;
 8012908:	e04a      	b.n	80129a0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 801290a:	7afb      	ldrb	r3, [r7, #11]
 801290c:	687a      	ldr	r2, [r7, #4]
 801290e:	4619      	mov	r1, r3
 8012910:	68f8      	ldr	r0, [r7, #12]
 8012912:	f000 f923 	bl	8012b5c <SCSI_ReadCapacity10>
 8012916:	4603      	mov	r3, r0
 8012918:	75fb      	strb	r3, [r7, #23]
      break;
 801291a:	e041      	b.n	80129a0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 801291c:	7afb      	ldrb	r3, [r7, #11]
 801291e:	687a      	ldr	r2, [r7, #4]
 8012920:	4619      	mov	r1, r3
 8012922:	68f8      	ldr	r0, [r7, #12]
 8012924:	f000 f998 	bl	8012c58 <SCSI_ReadCapacity16>
 8012928:	4603      	mov	r3, r0
 801292a:	75fb      	strb	r3, [r7, #23]
      break;
 801292c:	e038      	b.n	80129a0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 801292e:	7afb      	ldrb	r3, [r7, #11]
 8012930:	687a      	ldr	r2, [r7, #4]
 8012932:	4619      	mov	r1, r3
 8012934:	68f8      	ldr	r0, [r7, #12]
 8012936:	f000 fc6d 	bl	8013214 <SCSI_Read10>
 801293a:	4603      	mov	r3, r0
 801293c:	75fb      	strb	r3, [r7, #23]
      break;
 801293e:	e02f      	b.n	80129a0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8012940:	7afb      	ldrb	r3, [r7, #11]
 8012942:	687a      	ldr	r2, [r7, #4]
 8012944:	4619      	mov	r1, r3
 8012946:	68f8      	ldr	r0, [r7, #12]
 8012948:	f000 fd0e 	bl	8013368 <SCSI_Read12>
 801294c:	4603      	mov	r3, r0
 801294e:	75fb      	strb	r3, [r7, #23]
      break;
 8012950:	e026      	b.n	80129a0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8012952:	7afb      	ldrb	r3, [r7, #11]
 8012954:	687a      	ldr	r2, [r7, #4]
 8012956:	4619      	mov	r1, r3
 8012958:	68f8      	ldr	r0, [r7, #12]
 801295a:	f000 fdb9 	bl	80134d0 <SCSI_Write10>
 801295e:	4603      	mov	r3, r0
 8012960:	75fb      	strb	r3, [r7, #23]
      break;
 8012962:	e01d      	b.n	80129a0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8012964:	7afb      	ldrb	r3, [r7, #11]
 8012966:	687a      	ldr	r2, [r7, #4]
 8012968:	4619      	mov	r1, r3
 801296a:	68f8      	ldr	r0, [r7, #12]
 801296c:	f000 fe86 	bl	801367c <SCSI_Write12>
 8012970:	4603      	mov	r3, r0
 8012972:	75fb      	strb	r3, [r7, #23]
      break;
 8012974:	e014      	b.n	80129a0 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8012976:	7afb      	ldrb	r3, [r7, #11]
 8012978:	687a      	ldr	r2, [r7, #4]
 801297a:	4619      	mov	r1, r3
 801297c:	68f8      	ldr	r0, [r7, #12]
 801297e:	f000 ff63 	bl	8013848 <SCSI_Verify10>
 8012982:	4603      	mov	r3, r0
 8012984:	75fb      	strb	r3, [r7, #23]
      break;
 8012986:	e00b      	b.n	80129a0 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8012988:	7af9      	ldrb	r1, [r7, #11]
 801298a:	2320      	movs	r3, #32
 801298c:	2205      	movs	r2, #5
 801298e:	68f8      	ldr	r0, [r7, #12]
 8012990:	f000 fb73 	bl	801307a <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8012994:	693b      	ldr	r3, [r7, #16]
 8012996:	2202      	movs	r2, #2
 8012998:	725a      	strb	r2, [r3, #9]
      ret = -1;
 801299a:	23ff      	movs	r3, #255	; 0xff
 801299c:	75fb      	strb	r3, [r7, #23]
      break;
 801299e:	bf00      	nop
  }

  return ret;
 80129a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80129a4:	4618      	mov	r0, r3
 80129a6:	3718      	adds	r7, #24
 80129a8:	46bd      	mov	sp, r7
 80129aa:	bd80      	pop	{r7, pc}

080129ac <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80129ac:	b580      	push	{r7, lr}
 80129ae:	b086      	sub	sp, #24
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	60f8      	str	r0, [r7, #12]
 80129b4:	460b      	mov	r3, r1
 80129b6:	607a      	str	r2, [r7, #4]
 80129b8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	32b0      	adds	r2, #176	; 0xb0
 80129c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129c8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80129ca:	697b      	ldr	r3, [r7, #20]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d102      	bne.n	80129d6 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 80129d0:	f04f 33ff 	mov.w	r3, #4294967295
 80129d4:	e03f      	b.n	8012a56 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 80129d6:	697b      	ldr	r3, [r7, #20]
 80129d8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d00a      	beq.n	80129f6 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80129e0:	697b      	ldr	r3, [r7, #20]
 80129e2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80129e6:	2320      	movs	r3, #32
 80129e8:	2205      	movs	r2, #5
 80129ea:	68f8      	ldr	r0, [r7, #12]
 80129ec:	f000 fb45 	bl	801307a <SCSI_SenseCode>

    return -1;
 80129f0:	f04f 33ff 	mov.w	r3, #4294967295
 80129f4:	e02f      	b.n	8012a56 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80129f6:	697b      	ldr	r3, [r7, #20]
 80129f8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80129fc:	2b02      	cmp	r3, #2
 80129fe:	d10b      	bne.n	8012a18 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012a00:	7af9      	ldrb	r1, [r7, #11]
 8012a02:	233a      	movs	r3, #58	; 0x3a
 8012a04:	2202      	movs	r2, #2
 8012a06:	68f8      	ldr	r0, [r7, #12]
 8012a08:	f000 fb37 	bl	801307a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8012a0c:	697b      	ldr	r3, [r7, #20]
 8012a0e:	2205      	movs	r2, #5
 8012a10:	721a      	strb	r2, [r3, #8]
    return -1;
 8012a12:	f04f 33ff 	mov.w	r3, #4294967295
 8012a16:	e01e      	b.n	8012a56 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012a1e:	68fa      	ldr	r2, [r7, #12]
 8012a20:	33b0      	adds	r3, #176	; 0xb0
 8012a22:	009b      	lsls	r3, r3, #2
 8012a24:	4413      	add	r3, r2
 8012a26:	685b      	ldr	r3, [r3, #4]
 8012a28:	689b      	ldr	r3, [r3, #8]
 8012a2a:	7afa      	ldrb	r2, [r7, #11]
 8012a2c:	4610      	mov	r0, r2
 8012a2e:	4798      	blx	r3
 8012a30:	4603      	mov	r3, r0
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d00b      	beq.n	8012a4e <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012a36:	7af9      	ldrb	r1, [r7, #11]
 8012a38:	233a      	movs	r3, #58	; 0x3a
 8012a3a:	2202      	movs	r2, #2
 8012a3c:	68f8      	ldr	r0, [r7, #12]
 8012a3e:	f000 fb1c 	bl	801307a <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8012a42:	697b      	ldr	r3, [r7, #20]
 8012a44:	2205      	movs	r2, #5
 8012a46:	721a      	strb	r2, [r3, #8]

    return -1;
 8012a48:	f04f 33ff 	mov.w	r3, #4294967295
 8012a4c:	e003      	b.n	8012a56 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 8012a4e:	697b      	ldr	r3, [r7, #20]
 8012a50:	2200      	movs	r2, #0
 8012a52:	60da      	str	r2, [r3, #12]

  return 0;
 8012a54:	2300      	movs	r3, #0
}
 8012a56:	4618      	mov	r0, r3
 8012a58:	3718      	adds	r7, #24
 8012a5a:	46bd      	mov	sp, r7
 8012a5c:	bd80      	pop	{r7, pc}
	...

08012a60 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012a60:	b580      	push	{r7, lr}
 8012a62:	b088      	sub	sp, #32
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	60f8      	str	r0, [r7, #12]
 8012a68:	460b      	mov	r3, r1
 8012a6a:	607a      	str	r2, [r7, #4]
 8012a6c:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	32b0      	adds	r2, #176	; 0xb0
 8012a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a7c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8012a7e:	69bb      	ldr	r3, [r7, #24]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d102      	bne.n	8012a8a <SCSI_Inquiry+0x2a>
  {
    return -1;
 8012a84:	f04f 33ff 	mov.w	r3, #4294967295
 8012a88:	e05f      	b.n	8012b4a <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8012a8a:	69bb      	ldr	r3, [r7, #24]
 8012a8c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d10a      	bne.n	8012aaa <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012a94:	69bb      	ldr	r3, [r7, #24]
 8012a96:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012a9a:	2320      	movs	r3, #32
 8012a9c:	2205      	movs	r2, #5
 8012a9e:	68f8      	ldr	r0, [r7, #12]
 8012aa0:	f000 faeb 	bl	801307a <SCSI_SenseCode>
    return -1;
 8012aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8012aa8:	e04f      	b.n	8012b4a <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	3301      	adds	r3, #1
 8012aae:	781b      	ldrb	r3, [r3, #0]
 8012ab0:	f003 0301 	and.w	r3, r3, #1
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d020      	beq.n	8012afa <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	3302      	adds	r3, #2
 8012abc:	781b      	ldrb	r3, [r3, #0]
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d105      	bne.n	8012ace <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8012ac2:	2206      	movs	r2, #6
 8012ac4:	4923      	ldr	r1, [pc, #140]	; (8012b54 <SCSI_Inquiry+0xf4>)
 8012ac6:	69b8      	ldr	r0, [r7, #24]
 8012ac8:	f001 f844 	bl	8013b54 <SCSI_UpdateBotData>
 8012acc:	e03c      	b.n	8012b48 <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	3302      	adds	r3, #2
 8012ad2:	781b      	ldrb	r3, [r3, #0]
 8012ad4:	2b80      	cmp	r3, #128	; 0x80
 8012ad6:	d105      	bne.n	8012ae4 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8012ad8:	2208      	movs	r2, #8
 8012ada:	491f      	ldr	r1, [pc, #124]	; (8012b58 <SCSI_Inquiry+0xf8>)
 8012adc:	69b8      	ldr	r0, [r7, #24]
 8012ade:	f001 f839 	bl	8013b54 <SCSI_UpdateBotData>
 8012ae2:	e031      	b.n	8012b48 <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8012ae4:	69bb      	ldr	r3, [r7, #24]
 8012ae6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012aea:	2324      	movs	r3, #36	; 0x24
 8012aec:	2205      	movs	r2, #5
 8012aee:	68f8      	ldr	r0, [r7, #12]
 8012af0:	f000 fac3 	bl	801307a <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8012af4:	f04f 33ff 	mov.w	r3, #4294967295
 8012af8:	e027      	b.n	8012b4a <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012b00:	68fa      	ldr	r2, [r7, #12]
 8012b02:	33b0      	adds	r3, #176	; 0xb0
 8012b04:	009b      	lsls	r3, r3, #2
 8012b06:	4413      	add	r3, r2
 8012b08:	685b      	ldr	r3, [r3, #4]
 8012b0a:	69d9      	ldr	r1, [r3, #28]
 8012b0c:	7afa      	ldrb	r2, [r7, #11]
 8012b0e:	4613      	mov	r3, r2
 8012b10:	00db      	lsls	r3, r3, #3
 8012b12:	4413      	add	r3, r2
 8012b14:	009b      	lsls	r3, r3, #2
 8012b16:	440b      	add	r3, r1
 8012b18:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8012b1a:	697b      	ldr	r3, [r7, #20]
 8012b1c:	3304      	adds	r3, #4
 8012b1e:	781b      	ldrb	r3, [r3, #0]
 8012b20:	b29b      	uxth	r3, r3
 8012b22:	3305      	adds	r3, #5
 8012b24:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	3304      	adds	r3, #4
 8012b2a:	781b      	ldrb	r3, [r3, #0]
 8012b2c:	b29b      	uxth	r3, r3
 8012b2e:	8bfa      	ldrh	r2, [r7, #30]
 8012b30:	429a      	cmp	r2, r3
 8012b32:	d303      	bcc.n	8012b3c <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	3304      	adds	r3, #4
 8012b38:	781b      	ldrb	r3, [r3, #0]
 8012b3a:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8012b3c:	8bfb      	ldrh	r3, [r7, #30]
 8012b3e:	461a      	mov	r2, r3
 8012b40:	6979      	ldr	r1, [r7, #20]
 8012b42:	69b8      	ldr	r0, [r7, #24]
 8012b44:	f001 f806 	bl	8013b54 <SCSI_UpdateBotData>
  }

  return 0;
 8012b48:	2300      	movs	r3, #0
}
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	3720      	adds	r7, #32
 8012b4e:	46bd      	mov	sp, r7
 8012b50:	bd80      	pop	{r7, pc}
 8012b52:	bf00      	nop
 8012b54:	20000070 	.word	0x20000070
 8012b58:	20000078 	.word	0x20000078

08012b5c <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	b086      	sub	sp, #24
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	60f8      	str	r0, [r7, #12]
 8012b64:	460b      	mov	r3, r1
 8012b66:	607a      	str	r2, [r7, #4]
 8012b68:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	32b0      	adds	r2, #176	; 0xb0
 8012b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b78:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8012b7a:	697b      	ldr	r3, [r7, #20]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d102      	bne.n	8012b86 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8012b80:	f04f 33ff 	mov.w	r3, #4294967295
 8012b84:	e064      	b.n	8012c50 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012b8c:	68fa      	ldr	r2, [r7, #12]
 8012b8e:	33b0      	adds	r3, #176	; 0xb0
 8012b90:	009b      	lsls	r3, r3, #2
 8012b92:	4413      	add	r3, r2
 8012b94:	685b      	ldr	r3, [r3, #4]
 8012b96:	685b      	ldr	r3, [r3, #4]
 8012b98:	697a      	ldr	r2, [r7, #20]
 8012b9a:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8012b9e:	697a      	ldr	r2, [r7, #20]
 8012ba0:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8012ba4:	7af8      	ldrb	r0, [r7, #11]
 8012ba6:	4798      	blx	r3
 8012ba8:	4603      	mov	r3, r0
 8012baa:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8012bac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d104      	bne.n	8012bbe <SCSI_ReadCapacity10+0x62>
 8012bb4:	697b      	ldr	r3, [r7, #20]
 8012bb6:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8012bba:	2b02      	cmp	r3, #2
 8012bbc:	d108      	bne.n	8012bd0 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012bbe:	7af9      	ldrb	r1, [r7, #11]
 8012bc0:	233a      	movs	r3, #58	; 0x3a
 8012bc2:	2202      	movs	r2, #2
 8012bc4:	68f8      	ldr	r0, [r7, #12]
 8012bc6:	f000 fa58 	bl	801307a <SCSI_SenseCode>
    return -1;
 8012bca:	f04f 33ff 	mov.w	r3, #4294967295
 8012bce:	e03f      	b.n	8012c50 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8012bd0:	697b      	ldr	r3, [r7, #20]
 8012bd2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012bd6:	3b01      	subs	r3, #1
 8012bd8:	0e1b      	lsrs	r3, r3, #24
 8012bda:	b2da      	uxtb	r2, r3
 8012bdc:	697b      	ldr	r3, [r7, #20]
 8012bde:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8012be0:	697b      	ldr	r3, [r7, #20]
 8012be2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012be6:	3b01      	subs	r3, #1
 8012be8:	0c1b      	lsrs	r3, r3, #16
 8012bea:	b2da      	uxtb	r2, r3
 8012bec:	697b      	ldr	r3, [r7, #20]
 8012bee:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8012bf0:	697b      	ldr	r3, [r7, #20]
 8012bf2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012bf6:	3b01      	subs	r3, #1
 8012bf8:	0a1b      	lsrs	r3, r3, #8
 8012bfa:	b2da      	uxtb	r2, r3
 8012bfc:	697b      	ldr	r3, [r7, #20]
 8012bfe:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8012c00:	697b      	ldr	r3, [r7, #20]
 8012c02:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012c06:	b2db      	uxtb	r3, r3
 8012c08:	3b01      	subs	r3, #1
 8012c0a:	b2da      	uxtb	r2, r3
 8012c0c:	697b      	ldr	r3, [r7, #20]
 8012c0e:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8012c10:	697b      	ldr	r3, [r7, #20]
 8012c12:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012c16:	161b      	asrs	r3, r3, #24
 8012c18:	b2da      	uxtb	r2, r3
 8012c1a:	697b      	ldr	r3, [r7, #20]
 8012c1c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8012c1e:	697b      	ldr	r3, [r7, #20]
 8012c20:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012c24:	141b      	asrs	r3, r3, #16
 8012c26:	b2da      	uxtb	r2, r3
 8012c28:	697b      	ldr	r3, [r7, #20]
 8012c2a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8012c2c:	697b      	ldr	r3, [r7, #20]
 8012c2e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012c32:	0a1b      	lsrs	r3, r3, #8
 8012c34:	b29b      	uxth	r3, r3
 8012c36:	b2da      	uxtb	r2, r3
 8012c38:	697b      	ldr	r3, [r7, #20]
 8012c3a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8012c3c:	697b      	ldr	r3, [r7, #20]
 8012c3e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012c42:	b2da      	uxtb	r2, r3
 8012c44:	697b      	ldr	r3, [r7, #20]
 8012c46:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8012c48:	697b      	ldr	r3, [r7, #20]
 8012c4a:	2208      	movs	r2, #8
 8012c4c:	60da      	str	r2, [r3, #12]

  return 0;
 8012c4e:	2300      	movs	r3, #0

}
 8012c50:	4618      	mov	r0, r3
 8012c52:	3718      	adds	r7, #24
 8012c54:	46bd      	mov	sp, r7
 8012c56:	bd80      	pop	{r7, pc}

08012c58 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012c58:	b580      	push	{r7, lr}
 8012c5a:	b088      	sub	sp, #32
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	60f8      	str	r0, [r7, #12]
 8012c60:	460b      	mov	r3, r1
 8012c62:	607a      	str	r2, [r7, #4]
 8012c64:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	32b0      	adds	r2, #176	; 0xb0
 8012c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c74:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8012c76:	69bb      	ldr	r3, [r7, #24]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d102      	bne.n	8012c82 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8012c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8012c80:	e099      	b.n	8012db6 <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012c88:	68fa      	ldr	r2, [r7, #12]
 8012c8a:	33b0      	adds	r3, #176	; 0xb0
 8012c8c:	009b      	lsls	r3, r3, #2
 8012c8e:	4413      	add	r3, r2
 8012c90:	685b      	ldr	r3, [r3, #4]
 8012c92:	685b      	ldr	r3, [r3, #4]
 8012c94:	69ba      	ldr	r2, [r7, #24]
 8012c96:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8012c9a:	69ba      	ldr	r2, [r7, #24]
 8012c9c:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8012ca0:	7af8      	ldrb	r0, [r7, #11]
 8012ca2:	4798      	blx	r3
 8012ca4:	4603      	mov	r3, r0
 8012ca6:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8012ca8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d104      	bne.n	8012cba <SCSI_ReadCapacity16+0x62>
 8012cb0:	69bb      	ldr	r3, [r7, #24]
 8012cb2:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8012cb6:	2b02      	cmp	r3, #2
 8012cb8:	d108      	bne.n	8012ccc <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012cba:	7af9      	ldrb	r1, [r7, #11]
 8012cbc:	233a      	movs	r3, #58	; 0x3a
 8012cbe:	2202      	movs	r2, #2
 8012cc0:	68f8      	ldr	r0, [r7, #12]
 8012cc2:	f000 f9da 	bl	801307a <SCSI_SenseCode>
    return -1;
 8012cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8012cca:	e074      	b.n	8012db6 <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	330a      	adds	r3, #10
 8012cd0:	781b      	ldrb	r3, [r3, #0]
 8012cd2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	330b      	adds	r3, #11
 8012cd8:	781b      	ldrb	r3, [r3, #0]
 8012cda:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012cdc:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	330c      	adds	r3, #12
 8012ce2:	781b      	ldrb	r3, [r3, #0]
 8012ce4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8012ce6:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8012ce8:	687a      	ldr	r2, [r7, #4]
 8012cea:	320d      	adds	r2, #13
 8012cec:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8012cee:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012cf0:	69bb      	ldr	r3, [r7, #24]
 8012cf2:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	77fb      	strb	r3, [r7, #31]
 8012cf8:	e007      	b.n	8012d0a <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 8012cfa:	7ffb      	ldrb	r3, [r7, #31]
 8012cfc:	69ba      	ldr	r2, [r7, #24]
 8012cfe:	4413      	add	r3, r2
 8012d00:	2200      	movs	r2, #0
 8012d02:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8012d04:	7ffb      	ldrb	r3, [r7, #31]
 8012d06:	3301      	adds	r3, #1
 8012d08:	77fb      	strb	r3, [r7, #31]
 8012d0a:	7ffa      	ldrb	r2, [r7, #31]
 8012d0c:	69bb      	ldr	r3, [r7, #24]
 8012d0e:	68db      	ldr	r3, [r3, #12]
 8012d10:	429a      	cmp	r2, r3
 8012d12:	d3f2      	bcc.n	8012cfa <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8012d14:	69bb      	ldr	r3, [r7, #24]
 8012d16:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012d1a:	3b01      	subs	r3, #1
 8012d1c:	0e1b      	lsrs	r3, r3, #24
 8012d1e:	b2da      	uxtb	r2, r3
 8012d20:	69bb      	ldr	r3, [r7, #24]
 8012d22:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8012d24:	69bb      	ldr	r3, [r7, #24]
 8012d26:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012d2a:	3b01      	subs	r3, #1
 8012d2c:	0c1b      	lsrs	r3, r3, #16
 8012d2e:	b2da      	uxtb	r2, r3
 8012d30:	69bb      	ldr	r3, [r7, #24]
 8012d32:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8012d34:	69bb      	ldr	r3, [r7, #24]
 8012d36:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012d3a:	3b01      	subs	r3, #1
 8012d3c:	0a1b      	lsrs	r3, r3, #8
 8012d3e:	b2da      	uxtb	r2, r3
 8012d40:	69bb      	ldr	r3, [r7, #24]
 8012d42:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8012d44:	69bb      	ldr	r3, [r7, #24]
 8012d46:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012d4a:	b2db      	uxtb	r3, r3
 8012d4c:	3b01      	subs	r3, #1
 8012d4e:	b2da      	uxtb	r2, r3
 8012d50:	69bb      	ldr	r3, [r7, #24]
 8012d52:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8012d54:	69bb      	ldr	r3, [r7, #24]
 8012d56:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012d5a:	161b      	asrs	r3, r3, #24
 8012d5c:	b2da      	uxtb	r2, r3
 8012d5e:	69bb      	ldr	r3, [r7, #24]
 8012d60:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8012d62:	69bb      	ldr	r3, [r7, #24]
 8012d64:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012d68:	141b      	asrs	r3, r3, #16
 8012d6a:	b2da      	uxtb	r2, r3
 8012d6c:	69bb      	ldr	r3, [r7, #24]
 8012d6e:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8012d70:	69bb      	ldr	r3, [r7, #24]
 8012d72:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012d76:	0a1b      	lsrs	r3, r3, #8
 8012d78:	b29b      	uxth	r3, r3
 8012d7a:	b2da      	uxtb	r2, r3
 8012d7c:	69bb      	ldr	r3, [r7, #24]
 8012d7e:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8012d80:	69bb      	ldr	r3, [r7, #24]
 8012d82:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012d86:	b2da      	uxtb	r2, r3
 8012d88:	69bb      	ldr	r3, [r7, #24]
 8012d8a:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	330a      	adds	r3, #10
 8012d90:	781b      	ldrb	r3, [r3, #0]
 8012d92:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	330b      	adds	r3, #11
 8012d98:	781b      	ldrb	r3, [r3, #0]
 8012d9a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012d9c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	330c      	adds	r3, #12
 8012da2:	781b      	ldrb	r3, [r3, #0]
 8012da4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8012da6:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8012da8:	687a      	ldr	r2, [r7, #4]
 8012daa:	320d      	adds	r2, #13
 8012dac:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8012dae:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012db0:	69bb      	ldr	r3, [r7, #24]
 8012db2:	60da      	str	r2, [r3, #12]

  return 0;
 8012db4:	2300      	movs	r3, #0
}
 8012db6:	4618      	mov	r0, r3
 8012db8:	3720      	adds	r7, #32
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	bd80      	pop	{r7, pc}

08012dbe <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012dbe:	b580      	push	{r7, lr}
 8012dc0:	b088      	sub	sp, #32
 8012dc2:	af00      	add	r7, sp, #0
 8012dc4:	60f8      	str	r0, [r7, #12]
 8012dc6:	460b      	mov	r3, r1
 8012dc8:	607a      	str	r2, [r7, #4]
 8012dca:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	32b0      	adds	r2, #176	; 0xb0
 8012dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012dda:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8012ddc:	69bb      	ldr	r3, [r7, #24]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d102      	bne.n	8012de8 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8012de2:	f04f 33ff 	mov.w	r3, #4294967295
 8012de6:	e061      	b.n	8012eac <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012dee:	68fa      	ldr	r2, [r7, #12]
 8012df0:	33b0      	adds	r3, #176	; 0xb0
 8012df2:	009b      	lsls	r3, r3, #2
 8012df4:	4413      	add	r3, r2
 8012df6:	685b      	ldr	r3, [r3, #4]
 8012df8:	685b      	ldr	r3, [r3, #4]
 8012dfa:	f107 0214 	add.w	r2, r7, #20
 8012dfe:	f107 0110 	add.w	r1, r7, #16
 8012e02:	7af8      	ldrb	r0, [r7, #11]
 8012e04:	4798      	blx	r3
 8012e06:	4603      	mov	r3, r0
 8012e08:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8012e0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d104      	bne.n	8012e1c <SCSI_ReadFormatCapacity+0x5e>
 8012e12:	69bb      	ldr	r3, [r7, #24]
 8012e14:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8012e18:	2b02      	cmp	r3, #2
 8012e1a:	d108      	bne.n	8012e2e <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012e1c:	7af9      	ldrb	r1, [r7, #11]
 8012e1e:	233a      	movs	r3, #58	; 0x3a
 8012e20:	2202      	movs	r2, #2
 8012e22:	68f8      	ldr	r0, [r7, #12]
 8012e24:	f000 f929 	bl	801307a <SCSI_SenseCode>
    return -1;
 8012e28:	f04f 33ff 	mov.w	r3, #4294967295
 8012e2c:	e03e      	b.n	8012eac <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 8012e2e:	2300      	movs	r3, #0
 8012e30:	83fb      	strh	r3, [r7, #30]
 8012e32:	e007      	b.n	8012e44 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8012e34:	8bfb      	ldrh	r3, [r7, #30]
 8012e36:	69ba      	ldr	r2, [r7, #24]
 8012e38:	4413      	add	r3, r2
 8012e3a:	2200      	movs	r2, #0
 8012e3c:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8012e3e:	8bfb      	ldrh	r3, [r7, #30]
 8012e40:	3301      	adds	r3, #1
 8012e42:	83fb      	strh	r3, [r7, #30]
 8012e44:	8bfb      	ldrh	r3, [r7, #30]
 8012e46:	2b0b      	cmp	r3, #11
 8012e48:	d9f4      	bls.n	8012e34 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8012e4a:	69bb      	ldr	r3, [r7, #24]
 8012e4c:	2208      	movs	r2, #8
 8012e4e:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8012e50:	693b      	ldr	r3, [r7, #16]
 8012e52:	3b01      	subs	r3, #1
 8012e54:	0e1b      	lsrs	r3, r3, #24
 8012e56:	b2da      	uxtb	r2, r3
 8012e58:	69bb      	ldr	r3, [r7, #24]
 8012e5a:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8012e5c:	693b      	ldr	r3, [r7, #16]
 8012e5e:	3b01      	subs	r3, #1
 8012e60:	0c1b      	lsrs	r3, r3, #16
 8012e62:	b2da      	uxtb	r2, r3
 8012e64:	69bb      	ldr	r3, [r7, #24]
 8012e66:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8012e68:	693b      	ldr	r3, [r7, #16]
 8012e6a:	3b01      	subs	r3, #1
 8012e6c:	0a1b      	lsrs	r3, r3, #8
 8012e6e:	b2da      	uxtb	r2, r3
 8012e70:	69bb      	ldr	r3, [r7, #24]
 8012e72:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8012e74:	693b      	ldr	r3, [r7, #16]
 8012e76:	b2db      	uxtb	r3, r3
 8012e78:	3b01      	subs	r3, #1
 8012e7a:	b2da      	uxtb	r2, r3
 8012e7c:	69bb      	ldr	r3, [r7, #24]
 8012e7e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8012e80:	69bb      	ldr	r3, [r7, #24]
 8012e82:	2202      	movs	r2, #2
 8012e84:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8012e86:	8abb      	ldrh	r3, [r7, #20]
 8012e88:	141b      	asrs	r3, r3, #16
 8012e8a:	b2da      	uxtb	r2, r3
 8012e8c:	69bb      	ldr	r3, [r7, #24]
 8012e8e:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8012e90:	8abb      	ldrh	r3, [r7, #20]
 8012e92:	0a1b      	lsrs	r3, r3, #8
 8012e94:	b29b      	uxth	r3, r3
 8012e96:	b2da      	uxtb	r2, r3
 8012e98:	69bb      	ldr	r3, [r7, #24]
 8012e9a:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8012e9c:	8abb      	ldrh	r3, [r7, #20]
 8012e9e:	b2da      	uxtb	r2, r3
 8012ea0:	69bb      	ldr	r3, [r7, #24]
 8012ea2:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8012ea4:	69bb      	ldr	r3, [r7, #24]
 8012ea6:	220c      	movs	r2, #12
 8012ea8:	60da      	str	r2, [r3, #12]

  return 0;
 8012eaa:	2300      	movs	r3, #0
}
 8012eac:	4618      	mov	r0, r3
 8012eae:	3720      	adds	r7, #32
 8012eb0:	46bd      	mov	sp, r7
 8012eb2:	bd80      	pop	{r7, pc}

08012eb4 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b086      	sub	sp, #24
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	60f8      	str	r0, [r7, #12]
 8012ebc:	460b      	mov	r3, r1
 8012ebe:	607a      	str	r2, [r7, #4]
 8012ec0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	32b0      	adds	r2, #176	; 0xb0
 8012ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ed0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8012ed2:	2317      	movs	r3, #23
 8012ed4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8012ed6:	693b      	ldr	r3, [r7, #16]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d102      	bne.n	8012ee2 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8012edc:	f04f 33ff 	mov.w	r3, #4294967295
 8012ee0:	e011      	b.n	8012f06 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	3304      	adds	r3, #4
 8012ee6:	781b      	ldrb	r3, [r3, #0]
 8012ee8:	b29b      	uxth	r3, r3
 8012eea:	8afa      	ldrh	r2, [r7, #22]
 8012eec:	429a      	cmp	r2, r3
 8012eee:	d303      	bcc.n	8012ef8 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	3304      	adds	r3, #4
 8012ef4:	781b      	ldrb	r3, [r3, #0]
 8012ef6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8012ef8:	8afb      	ldrh	r3, [r7, #22]
 8012efa:	461a      	mov	r2, r3
 8012efc:	4904      	ldr	r1, [pc, #16]	; (8012f10 <SCSI_ModeSense6+0x5c>)
 8012efe:	6938      	ldr	r0, [r7, #16]
 8012f00:	f000 fe28 	bl	8013b54 <SCSI_UpdateBotData>

  return 0;
 8012f04:	2300      	movs	r3, #0
}
 8012f06:	4618      	mov	r0, r3
 8012f08:	3718      	adds	r7, #24
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	bd80      	pop	{r7, pc}
 8012f0e:	bf00      	nop
 8012f10:	20000080 	.word	0x20000080

08012f14 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012f14:	b580      	push	{r7, lr}
 8012f16:	b086      	sub	sp, #24
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	60f8      	str	r0, [r7, #12]
 8012f1c:	460b      	mov	r3, r1
 8012f1e:	607a      	str	r2, [r7, #4]
 8012f20:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	32b0      	adds	r2, #176	; 0xb0
 8012f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f30:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8012f32:	231b      	movs	r3, #27
 8012f34:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8012f36:	693b      	ldr	r3, [r7, #16]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d102      	bne.n	8012f42 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8012f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8012f40:	e011      	b.n	8012f66 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	3308      	adds	r3, #8
 8012f46:	781b      	ldrb	r3, [r3, #0]
 8012f48:	b29b      	uxth	r3, r3
 8012f4a:	8afa      	ldrh	r2, [r7, #22]
 8012f4c:	429a      	cmp	r2, r3
 8012f4e:	d303      	bcc.n	8012f58 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	3308      	adds	r3, #8
 8012f54:	781b      	ldrb	r3, [r3, #0]
 8012f56:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8012f58:	8afb      	ldrh	r3, [r7, #22]
 8012f5a:	461a      	mov	r2, r3
 8012f5c:	4904      	ldr	r1, [pc, #16]	; (8012f70 <SCSI_ModeSense10+0x5c>)
 8012f5e:	6938      	ldr	r0, [r7, #16]
 8012f60:	f000 fdf8 	bl	8013b54 <SCSI_UpdateBotData>

  return 0;
 8012f64:	2300      	movs	r3, #0
}
 8012f66:	4618      	mov	r0, r3
 8012f68:	3718      	adds	r7, #24
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	bd80      	pop	{r7, pc}
 8012f6e:	bf00      	nop
 8012f70:	20000098 	.word	0x20000098

08012f74 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012f74:	b580      	push	{r7, lr}
 8012f76:	b086      	sub	sp, #24
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	60f8      	str	r0, [r7, #12]
 8012f7c:	460b      	mov	r3, r1
 8012f7e:	607a      	str	r2, [r7, #4]
 8012f80:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	32b0      	adds	r2, #176	; 0xb0
 8012f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f90:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8012f92:	693b      	ldr	r3, [r7, #16]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d102      	bne.n	8012f9e <SCSI_RequestSense+0x2a>
  {
    return -1;
 8012f98:	f04f 33ff 	mov.w	r3, #4294967295
 8012f9c:	e069      	b.n	8013072 <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8012f9e:	693b      	ldr	r3, [r7, #16]
 8012fa0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d10a      	bne.n	8012fbe <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012fa8:	693b      	ldr	r3, [r7, #16]
 8012faa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012fae:	2320      	movs	r3, #32
 8012fb0:	2205      	movs	r2, #5
 8012fb2:	68f8      	ldr	r0, [r7, #12]
 8012fb4:	f000 f861 	bl	801307a <SCSI_SenseCode>
    return -1;
 8012fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8012fbc:	e059      	b.n	8013072 <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	75fb      	strb	r3, [r7, #23]
 8012fc2:	e007      	b.n	8012fd4 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8012fc4:	7dfb      	ldrb	r3, [r7, #23]
 8012fc6:	693a      	ldr	r2, [r7, #16]
 8012fc8:	4413      	add	r3, r2
 8012fca:	2200      	movs	r2, #0
 8012fcc:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8012fce:	7dfb      	ldrb	r3, [r7, #23]
 8012fd0:	3301      	adds	r3, #1
 8012fd2:	75fb      	strb	r3, [r7, #23]
 8012fd4:	7dfb      	ldrb	r3, [r7, #23]
 8012fd6:	2b11      	cmp	r3, #17
 8012fd8:	d9f4      	bls.n	8012fc4 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 8012fda:	693b      	ldr	r3, [r7, #16]
 8012fdc:	2270      	movs	r2, #112	; 0x70
 8012fde:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8012fe0:	693b      	ldr	r3, [r7, #16]
 8012fe2:	220c      	movs	r2, #12
 8012fe4:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8012fe6:	693b      	ldr	r3, [r7, #16]
 8012fe8:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8012fec:	693b      	ldr	r3, [r7, #16]
 8012fee:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8012ff2:	429a      	cmp	r2, r3
 8012ff4:	d02e      	beq.n	8013054 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8012ff6:	693b      	ldr	r3, [r7, #16]
 8012ff8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8012ffc:	461a      	mov	r2, r3
 8012ffe:	693b      	ldr	r3, [r7, #16]
 8013000:	3248      	adds	r2, #72	; 0x48
 8013002:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8013006:	693b      	ldr	r3, [r7, #16]
 8013008:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 801300a:	693b      	ldr	r3, [r7, #16]
 801300c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8013010:	693a      	ldr	r2, [r7, #16]
 8013012:	3348      	adds	r3, #72	; 0x48
 8013014:	00db      	lsls	r3, r3, #3
 8013016:	4413      	add	r3, r2
 8013018:	791a      	ldrb	r2, [r3, #4]
 801301a:	693b      	ldr	r3, [r7, #16]
 801301c:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 801301e:	693b      	ldr	r3, [r7, #16]
 8013020:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8013024:	693a      	ldr	r2, [r7, #16]
 8013026:	3348      	adds	r3, #72	; 0x48
 8013028:	00db      	lsls	r3, r3, #3
 801302a:	4413      	add	r3, r2
 801302c:	795a      	ldrb	r2, [r3, #5]
 801302e:	693b      	ldr	r3, [r7, #16]
 8013030:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8013032:	693b      	ldr	r3, [r7, #16]
 8013034:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8013038:	3301      	adds	r3, #1
 801303a:	b2da      	uxtb	r2, r3
 801303c:	693b      	ldr	r3, [r7, #16]
 801303e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8013042:	693b      	ldr	r3, [r7, #16]
 8013044:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8013048:	2b04      	cmp	r3, #4
 801304a:	d103      	bne.n	8013054 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 801304c:	693b      	ldr	r3, [r7, #16]
 801304e:	2200      	movs	r2, #0
 8013050:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8013054:	693b      	ldr	r3, [r7, #16]
 8013056:	2212      	movs	r2, #18
 8013058:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	3304      	adds	r3, #4
 801305e:	781b      	ldrb	r3, [r3, #0]
 8013060:	2b12      	cmp	r3, #18
 8013062:	d805      	bhi.n	8013070 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	3304      	adds	r3, #4
 8013068:	781b      	ldrb	r3, [r3, #0]
 801306a:	461a      	mov	r2, r3
 801306c:	693b      	ldr	r3, [r7, #16]
 801306e:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8013070:	2300      	movs	r3, #0
}
 8013072:	4618      	mov	r0, r3
 8013074:	3718      	adds	r7, #24
 8013076:	46bd      	mov	sp, r7
 8013078:	bd80      	pop	{r7, pc}

0801307a <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 801307a:	b480      	push	{r7}
 801307c:	b085      	sub	sp, #20
 801307e:	af00      	add	r7, sp, #0
 8013080:	6078      	str	r0, [r7, #4]
 8013082:	4608      	mov	r0, r1
 8013084:	4611      	mov	r1, r2
 8013086:	461a      	mov	r2, r3
 8013088:	4603      	mov	r3, r0
 801308a:	70fb      	strb	r3, [r7, #3]
 801308c:	460b      	mov	r3, r1
 801308e:	70bb      	strb	r3, [r7, #2]
 8013090:	4613      	mov	r3, r2
 8013092:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	32b0      	adds	r2, #176	; 0xb0
 801309e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80130a2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d02c      	beq.n	8013104 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80130b0:	461a      	mov	r2, r3
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	3248      	adds	r2, #72	; 0x48
 80130b6:	78b9      	ldrb	r1, [r7, #2]
 80130b8:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80130c2:	68fa      	ldr	r2, [r7, #12]
 80130c4:	3348      	adds	r3, #72	; 0x48
 80130c6:	00db      	lsls	r3, r3, #3
 80130c8:	4413      	add	r3, r2
 80130ca:	787a      	ldrb	r2, [r7, #1]
 80130cc:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80130d4:	68fa      	ldr	r2, [r7, #12]
 80130d6:	3348      	adds	r3, #72	; 0x48
 80130d8:	00db      	lsls	r3, r3, #3
 80130da:	4413      	add	r3, r2
 80130dc:	2200      	movs	r2, #0
 80130de:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80130e6:	3301      	adds	r3, #1
 80130e8:	b2da      	uxtb	r2, r3
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80130f6:	2b04      	cmp	r3, #4
 80130f8:	d105      	bne.n	8013106 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 80130fa:	68fb      	ldr	r3, [r7, #12]
 80130fc:	2200      	movs	r2, #0
 80130fe:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8013102:	e000      	b.n	8013106 <SCSI_SenseCode+0x8c>
    return;
 8013104:	bf00      	nop
  }
}
 8013106:	3714      	adds	r7, #20
 8013108:	46bd      	mov	sp, r7
 801310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801310e:	4770      	bx	lr

08013110 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013110:	b580      	push	{r7, lr}
 8013112:	b086      	sub	sp, #24
 8013114:	af00      	add	r7, sp, #0
 8013116:	60f8      	str	r0, [r7, #12]
 8013118:	460b      	mov	r3, r1
 801311a:	607a      	str	r2, [r7, #4]
 801311c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	32b0      	adds	r2, #176	; 0xb0
 8013128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801312c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801312e:	697b      	ldr	r3, [r7, #20]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d102      	bne.n	801313a <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8013134:	f04f 33ff 	mov.w	r3, #4294967295
 8013138:	e03b      	b.n	80131b2 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 801313a:	697b      	ldr	r3, [r7, #20]
 801313c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8013140:	2b01      	cmp	r3, #1
 8013142:	d10f      	bne.n	8013164 <SCSI_StartStopUnit+0x54>
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	3304      	adds	r3, #4
 8013148:	781b      	ldrb	r3, [r3, #0]
 801314a:	f003 0303 	and.w	r3, r3, #3
 801314e:	2b02      	cmp	r3, #2
 8013150:	d108      	bne.n	8013164 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8013152:	7af9      	ldrb	r1, [r7, #11]
 8013154:	2324      	movs	r3, #36	; 0x24
 8013156:	2205      	movs	r2, #5
 8013158:	68f8      	ldr	r0, [r7, #12]
 801315a:	f7ff ff8e 	bl	801307a <SCSI_SenseCode>

    return -1;
 801315e:	f04f 33ff 	mov.w	r3, #4294967295
 8013162:	e026      	b.n	80131b2 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	3304      	adds	r3, #4
 8013168:	781b      	ldrb	r3, [r3, #0]
 801316a:	f003 0303 	and.w	r3, r3, #3
 801316e:	2b01      	cmp	r3, #1
 8013170:	d104      	bne.n	801317c <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8013172:	697b      	ldr	r3, [r7, #20]
 8013174:	2200      	movs	r2, #0
 8013176:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 801317a:	e016      	b.n	80131aa <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	3304      	adds	r3, #4
 8013180:	781b      	ldrb	r3, [r3, #0]
 8013182:	f003 0303 	and.w	r3, r3, #3
 8013186:	2b02      	cmp	r3, #2
 8013188:	d104      	bne.n	8013194 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 801318a:	697b      	ldr	r3, [r7, #20]
 801318c:	2202      	movs	r2, #2
 801318e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8013192:	e00a      	b.n	80131aa <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	3304      	adds	r3, #4
 8013198:	781b      	ldrb	r3, [r3, #0]
 801319a:	f003 0303 	and.w	r3, r3, #3
 801319e:	2b03      	cmp	r3, #3
 80131a0:	d103      	bne.n	80131aa <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80131a2:	697b      	ldr	r3, [r7, #20]
 80131a4:	2200      	movs	r2, #0
 80131a6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80131aa:	697b      	ldr	r3, [r7, #20]
 80131ac:	2200      	movs	r2, #0
 80131ae:	60da      	str	r2, [r3, #12]

  return 0;
 80131b0:	2300      	movs	r3, #0
}
 80131b2:	4618      	mov	r0, r3
 80131b4:	3718      	adds	r7, #24
 80131b6:	46bd      	mov	sp, r7
 80131b8:	bd80      	pop	{r7, pc}

080131ba <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80131ba:	b480      	push	{r7}
 80131bc:	b087      	sub	sp, #28
 80131be:	af00      	add	r7, sp, #0
 80131c0:	60f8      	str	r0, [r7, #12]
 80131c2:	460b      	mov	r3, r1
 80131c4:	607a      	str	r2, [r7, #4]
 80131c6:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	32b0      	adds	r2, #176	; 0xb0
 80131d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80131d6:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80131d8:	697b      	ldr	r3, [r7, #20]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d102      	bne.n	80131e4 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 80131de:	f04f 33ff 	mov.w	r3, #4294967295
 80131e2:	e011      	b.n	8013208 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	3304      	adds	r3, #4
 80131e8:	781b      	ldrb	r3, [r3, #0]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d104      	bne.n	80131f8 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80131ee:	697b      	ldr	r3, [r7, #20]
 80131f0:	2200      	movs	r2, #0
 80131f2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80131f6:	e003      	b.n	8013200 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 80131f8:	697b      	ldr	r3, [r7, #20]
 80131fa:	2201      	movs	r2, #1
 80131fc:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8013200:	697b      	ldr	r3, [r7, #20]
 8013202:	2200      	movs	r2, #0
 8013204:	60da      	str	r2, [r3, #12]

  return 0;
 8013206:	2300      	movs	r3, #0
}
 8013208:	4618      	mov	r0, r3
 801320a:	371c      	adds	r7, #28
 801320c:	46bd      	mov	sp, r7
 801320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013212:	4770      	bx	lr

08013214 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013214:	b580      	push	{r7, lr}
 8013216:	b086      	sub	sp, #24
 8013218:	af00      	add	r7, sp, #0
 801321a:	60f8      	str	r0, [r7, #12]
 801321c:	460b      	mov	r3, r1
 801321e:	607a      	str	r2, [r7, #4]
 8013220:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013228:	68fb      	ldr	r3, [r7, #12]
 801322a:	32b0      	adds	r2, #176	; 0xb0
 801322c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013230:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8013232:	697b      	ldr	r3, [r7, #20]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d102      	bne.n	801323e <SCSI_Read10+0x2a>
  {
    return -1;
 8013238:	f04f 33ff 	mov.w	r3, #4294967295
 801323c:	e090      	b.n	8013360 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801323e:	697b      	ldr	r3, [r7, #20]
 8013240:	7a1b      	ldrb	r3, [r3, #8]
 8013242:	2b00      	cmp	r3, #0
 8013244:	f040 8082 	bne.w	801334c <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8013248:	697b      	ldr	r3, [r7, #20]
 801324a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801324e:	b25b      	sxtb	r3, r3
 8013250:	2b00      	cmp	r3, #0
 8013252:	db0a      	blt.n	801326a <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013254:	697b      	ldr	r3, [r7, #20]
 8013256:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801325a:	2320      	movs	r3, #32
 801325c:	2205      	movs	r2, #5
 801325e:	68f8      	ldr	r0, [r7, #12]
 8013260:	f7ff ff0b 	bl	801307a <SCSI_SenseCode>
      return -1;
 8013264:	f04f 33ff 	mov.w	r3, #4294967295
 8013268:	e07a      	b.n	8013360 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801326a:	697b      	ldr	r3, [r7, #20]
 801326c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8013270:	2b02      	cmp	r3, #2
 8013272:	d108      	bne.n	8013286 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013274:	7af9      	ldrb	r1, [r7, #11]
 8013276:	233a      	movs	r3, #58	; 0x3a
 8013278:	2202      	movs	r2, #2
 801327a:	68f8      	ldr	r0, [r7, #12]
 801327c:	f7ff fefd 	bl	801307a <SCSI_SenseCode>

      return -1;
 8013280:	f04f 33ff 	mov.w	r3, #4294967295
 8013284:	e06c      	b.n	8013360 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801328c:	68fa      	ldr	r2, [r7, #12]
 801328e:	33b0      	adds	r3, #176	; 0xb0
 8013290:	009b      	lsls	r3, r3, #2
 8013292:	4413      	add	r3, r2
 8013294:	685b      	ldr	r3, [r3, #4]
 8013296:	689b      	ldr	r3, [r3, #8]
 8013298:	7afa      	ldrb	r2, [r7, #11]
 801329a:	4610      	mov	r0, r2
 801329c:	4798      	blx	r3
 801329e:	4603      	mov	r3, r0
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d008      	beq.n	80132b6 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80132a4:	7af9      	ldrb	r1, [r7, #11]
 80132a6:	233a      	movs	r3, #58	; 0x3a
 80132a8:	2202      	movs	r2, #2
 80132aa:	68f8      	ldr	r0, [r7, #12]
 80132ac:	f7ff fee5 	bl	801307a <SCSI_SenseCode>
      return -1;
 80132b0:	f04f 33ff 	mov.w	r3, #4294967295
 80132b4:	e054      	b.n	8013360 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	3302      	adds	r3, #2
 80132ba:	781b      	ldrb	r3, [r3, #0]
 80132bc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	3303      	adds	r3, #3
 80132c2:	781b      	ldrb	r3, [r3, #0]
 80132c4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80132c6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	3304      	adds	r3, #4
 80132cc:	781b      	ldrb	r3, [r3, #0]
 80132ce:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80132d0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80132d2:	687a      	ldr	r2, [r7, #4]
 80132d4:	3205      	adds	r2, #5
 80132d6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80132d8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80132da:	697b      	ldr	r3, [r7, #20]
 80132dc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	3307      	adds	r3, #7
 80132e4:	781b      	ldrb	r3, [r3, #0]
 80132e6:	021b      	lsls	r3, r3, #8
 80132e8:	687a      	ldr	r2, [r7, #4]
 80132ea:	3208      	adds	r2, #8
 80132ec:	7812      	ldrb	r2, [r2, #0]
 80132ee:	431a      	orrs	r2, r3
 80132f0:	697b      	ldr	r3, [r7, #20]
 80132f2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80132f6:	697b      	ldr	r3, [r7, #20]
 80132f8:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80132fc:	697b      	ldr	r3, [r7, #20]
 80132fe:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8013302:	7af9      	ldrb	r1, [r7, #11]
 8013304:	68f8      	ldr	r0, [r7, #12]
 8013306:	f000 fadc 	bl	80138c2 <SCSI_CheckAddressRange>
 801330a:	4603      	mov	r3, r0
 801330c:	2b00      	cmp	r3, #0
 801330e:	da02      	bge.n	8013316 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8013310:	f04f 33ff 	mov.w	r3, #4294967295
 8013314:	e024      	b.n	8013360 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8013316:	697b      	ldr	r3, [r7, #20]
 8013318:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801331c:	697b      	ldr	r3, [r7, #20]
 801331e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8013322:	6979      	ldr	r1, [r7, #20]
 8013324:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8013328:	fb01 f303 	mul.w	r3, r1, r3
 801332c:	429a      	cmp	r2, r3
 801332e:	d00a      	beq.n	8013346 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013330:	697b      	ldr	r3, [r7, #20]
 8013332:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8013336:	2320      	movs	r3, #32
 8013338:	2205      	movs	r2, #5
 801333a:	68f8      	ldr	r0, [r7, #12]
 801333c:	f7ff fe9d 	bl	801307a <SCSI_SenseCode>
      return -1;
 8013340:	f04f 33ff 	mov.w	r3, #4294967295
 8013344:	e00c      	b.n	8013360 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8013346:	697b      	ldr	r3, [r7, #20]
 8013348:	2202      	movs	r2, #2
 801334a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 801334c:	697b      	ldr	r3, [r7, #20]
 801334e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013352:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8013354:	7afb      	ldrb	r3, [r7, #11]
 8013356:	4619      	mov	r1, r3
 8013358:	68f8      	ldr	r0, [r7, #12]
 801335a:	f000 fadf 	bl	801391c <SCSI_ProcessRead>
 801335e:	4603      	mov	r3, r0
}
 8013360:	4618      	mov	r0, r3
 8013362:	3718      	adds	r7, #24
 8013364:	46bd      	mov	sp, r7
 8013366:	bd80      	pop	{r7, pc}

08013368 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013368:	b580      	push	{r7, lr}
 801336a:	b086      	sub	sp, #24
 801336c:	af00      	add	r7, sp, #0
 801336e:	60f8      	str	r0, [r7, #12]
 8013370:	460b      	mov	r3, r1
 8013372:	607a      	str	r2, [r7, #4]
 8013374:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013376:	68fb      	ldr	r3, [r7, #12]
 8013378:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	32b0      	adds	r2, #176	; 0xb0
 8013380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013384:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8013386:	697b      	ldr	r3, [r7, #20]
 8013388:	2b00      	cmp	r3, #0
 801338a:	d102      	bne.n	8013392 <SCSI_Read12+0x2a>
  {
    return -1;
 801338c:	f04f 33ff 	mov.w	r3, #4294967295
 8013390:	e09a      	b.n	80134c8 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8013392:	697b      	ldr	r3, [r7, #20]
 8013394:	7a1b      	ldrb	r3, [r3, #8]
 8013396:	2b00      	cmp	r3, #0
 8013398:	f040 808c 	bne.w	80134b4 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 801339c:	697b      	ldr	r3, [r7, #20]
 801339e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80133a2:	b25b      	sxtb	r3, r3
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	db0a      	blt.n	80133be <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80133a8:	697b      	ldr	r3, [r7, #20]
 80133aa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80133ae:	2320      	movs	r3, #32
 80133b0:	2205      	movs	r2, #5
 80133b2:	68f8      	ldr	r0, [r7, #12]
 80133b4:	f7ff fe61 	bl	801307a <SCSI_SenseCode>
      return -1;
 80133b8:	f04f 33ff 	mov.w	r3, #4294967295
 80133bc:	e084      	b.n	80134c8 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80133be:	697b      	ldr	r3, [r7, #20]
 80133c0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80133c4:	2b02      	cmp	r3, #2
 80133c6:	d108      	bne.n	80133da <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80133c8:	7af9      	ldrb	r1, [r7, #11]
 80133ca:	233a      	movs	r3, #58	; 0x3a
 80133cc:	2202      	movs	r2, #2
 80133ce:	68f8      	ldr	r0, [r7, #12]
 80133d0:	f7ff fe53 	bl	801307a <SCSI_SenseCode>
      return -1;
 80133d4:	f04f 33ff 	mov.w	r3, #4294967295
 80133d8:	e076      	b.n	80134c8 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80133e0:	68fa      	ldr	r2, [r7, #12]
 80133e2:	33b0      	adds	r3, #176	; 0xb0
 80133e4:	009b      	lsls	r3, r3, #2
 80133e6:	4413      	add	r3, r2
 80133e8:	685b      	ldr	r3, [r3, #4]
 80133ea:	689b      	ldr	r3, [r3, #8]
 80133ec:	7afa      	ldrb	r2, [r7, #11]
 80133ee:	4610      	mov	r0, r2
 80133f0:	4798      	blx	r3
 80133f2:	4603      	mov	r3, r0
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d008      	beq.n	801340a <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80133f8:	7af9      	ldrb	r1, [r7, #11]
 80133fa:	233a      	movs	r3, #58	; 0x3a
 80133fc:	2202      	movs	r2, #2
 80133fe:	68f8      	ldr	r0, [r7, #12]
 8013400:	f7ff fe3b 	bl	801307a <SCSI_SenseCode>
      return -1;
 8013404:	f04f 33ff 	mov.w	r3, #4294967295
 8013408:	e05e      	b.n	80134c8 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	3302      	adds	r3, #2
 801340e:	781b      	ldrb	r3, [r3, #0]
 8013410:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	3303      	adds	r3, #3
 8013416:	781b      	ldrb	r3, [r3, #0]
 8013418:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801341a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	3304      	adds	r3, #4
 8013420:	781b      	ldrb	r3, [r3, #0]
 8013422:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8013424:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8013426:	687a      	ldr	r2, [r7, #4]
 8013428:	3205      	adds	r2, #5
 801342a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 801342c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801342e:	697b      	ldr	r3, [r7, #20]
 8013430:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	3306      	adds	r3, #6
 8013438:	781b      	ldrb	r3, [r3, #0]
 801343a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	3307      	adds	r3, #7
 8013440:	781b      	ldrb	r3, [r3, #0]
 8013442:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013444:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	3308      	adds	r3, #8
 801344a:	781b      	ldrb	r3, [r3, #0]
 801344c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 801344e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8013450:	687a      	ldr	r2, [r7, #4]
 8013452:	3209      	adds	r2, #9
 8013454:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8013456:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013458:	697b      	ldr	r3, [r7, #20]
 801345a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801345e:	697b      	ldr	r3, [r7, #20]
 8013460:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8013464:	697b      	ldr	r3, [r7, #20]
 8013466:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801346a:	7af9      	ldrb	r1, [r7, #11]
 801346c:	68f8      	ldr	r0, [r7, #12]
 801346e:	f000 fa28 	bl	80138c2 <SCSI_CheckAddressRange>
 8013472:	4603      	mov	r3, r0
 8013474:	2b00      	cmp	r3, #0
 8013476:	da02      	bge.n	801347e <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8013478:	f04f 33ff 	mov.w	r3, #4294967295
 801347c:	e024      	b.n	80134c8 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 801347e:	697b      	ldr	r3, [r7, #20]
 8013480:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8013484:	697b      	ldr	r3, [r7, #20]
 8013486:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801348a:	6979      	ldr	r1, [r7, #20]
 801348c:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8013490:	fb01 f303 	mul.w	r3, r1, r3
 8013494:	429a      	cmp	r2, r3
 8013496:	d00a      	beq.n	80134ae <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013498:	697b      	ldr	r3, [r7, #20]
 801349a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801349e:	2320      	movs	r3, #32
 80134a0:	2205      	movs	r2, #5
 80134a2:	68f8      	ldr	r0, [r7, #12]
 80134a4:	f7ff fde9 	bl	801307a <SCSI_SenseCode>
      return -1;
 80134a8:	f04f 33ff 	mov.w	r3, #4294967295
 80134ac:	e00c      	b.n	80134c8 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80134ae:	697b      	ldr	r3, [r7, #20]
 80134b0:	2202      	movs	r2, #2
 80134b2:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80134b4:	697b      	ldr	r3, [r7, #20]
 80134b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80134ba:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80134bc:	7afb      	ldrb	r3, [r7, #11]
 80134be:	4619      	mov	r1, r3
 80134c0:	68f8      	ldr	r0, [r7, #12]
 80134c2:	f000 fa2b 	bl	801391c <SCSI_ProcessRead>
 80134c6:	4603      	mov	r3, r0
}
 80134c8:	4618      	mov	r0, r3
 80134ca:	3718      	adds	r7, #24
 80134cc:	46bd      	mov	sp, r7
 80134ce:	bd80      	pop	{r7, pc}

080134d0 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80134d0:	b580      	push	{r7, lr}
 80134d2:	b086      	sub	sp, #24
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	60f8      	str	r0, [r7, #12]
 80134d8:	460b      	mov	r3, r1
 80134da:	607a      	str	r2, [r7, #4]
 80134dc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	32b0      	adds	r2, #176	; 0xb0
 80134e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80134ec:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80134ee:	697b      	ldr	r3, [r7, #20]
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d102      	bne.n	80134fa <SCSI_Write10+0x2a>
  {
    return -1;
 80134f4:	f04f 33ff 	mov.w	r3, #4294967295
 80134f8:	e0ba      	b.n	8013670 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80134fa:	697b      	ldr	r3, [r7, #20]
 80134fc:	7a1b      	ldrb	r3, [r3, #8]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	f040 80b0 	bne.w	8013664 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8013504:	697b      	ldr	r3, [r7, #20]
 8013506:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801350a:	2b00      	cmp	r3, #0
 801350c:	d10a      	bne.n	8013524 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801350e:	697b      	ldr	r3, [r7, #20]
 8013510:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8013514:	2320      	movs	r3, #32
 8013516:	2205      	movs	r2, #5
 8013518:	68f8      	ldr	r0, [r7, #12]
 801351a:	f7ff fdae 	bl	801307a <SCSI_SenseCode>
      return -1;
 801351e:	f04f 33ff 	mov.w	r3, #4294967295
 8013522:	e0a5      	b.n	8013670 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8013524:	697b      	ldr	r3, [r7, #20]
 8013526:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801352a:	b25b      	sxtb	r3, r3
 801352c:	2b00      	cmp	r3, #0
 801352e:	da0a      	bge.n	8013546 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013530:	697b      	ldr	r3, [r7, #20]
 8013532:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8013536:	2320      	movs	r3, #32
 8013538:	2205      	movs	r2, #5
 801353a:	68f8      	ldr	r0, [r7, #12]
 801353c:	f7ff fd9d 	bl	801307a <SCSI_SenseCode>
      return -1;
 8013540:	f04f 33ff 	mov.w	r3, #4294967295
 8013544:	e094      	b.n	8013670 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801354c:	68fa      	ldr	r2, [r7, #12]
 801354e:	33b0      	adds	r3, #176	; 0xb0
 8013550:	009b      	lsls	r3, r3, #2
 8013552:	4413      	add	r3, r2
 8013554:	685b      	ldr	r3, [r3, #4]
 8013556:	689b      	ldr	r3, [r3, #8]
 8013558:	7afa      	ldrb	r2, [r7, #11]
 801355a:	4610      	mov	r0, r2
 801355c:	4798      	blx	r3
 801355e:	4603      	mov	r3, r0
 8013560:	2b00      	cmp	r3, #0
 8013562:	d008      	beq.n	8013576 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013564:	7af9      	ldrb	r1, [r7, #11]
 8013566:	233a      	movs	r3, #58	; 0x3a
 8013568:	2202      	movs	r2, #2
 801356a:	68f8      	ldr	r0, [r7, #12]
 801356c:	f7ff fd85 	bl	801307a <SCSI_SenseCode>
      return -1;
 8013570:	f04f 33ff 	mov.w	r3, #4294967295
 8013574:	e07c      	b.n	8013670 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801357c:	68fa      	ldr	r2, [r7, #12]
 801357e:	33b0      	adds	r3, #176	; 0xb0
 8013580:	009b      	lsls	r3, r3, #2
 8013582:	4413      	add	r3, r2
 8013584:	685b      	ldr	r3, [r3, #4]
 8013586:	68db      	ldr	r3, [r3, #12]
 8013588:	7afa      	ldrb	r2, [r7, #11]
 801358a:	4610      	mov	r0, r2
 801358c:	4798      	blx	r3
 801358e:	4603      	mov	r3, r0
 8013590:	2b00      	cmp	r3, #0
 8013592:	d008      	beq.n	80135a6 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8013594:	7af9      	ldrb	r1, [r7, #11]
 8013596:	2327      	movs	r3, #39	; 0x27
 8013598:	2202      	movs	r2, #2
 801359a:	68f8      	ldr	r0, [r7, #12]
 801359c:	f7ff fd6d 	bl	801307a <SCSI_SenseCode>
      return -1;
 80135a0:	f04f 33ff 	mov.w	r3, #4294967295
 80135a4:	e064      	b.n	8013670 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	3302      	adds	r3, #2
 80135aa:	781b      	ldrb	r3, [r3, #0]
 80135ac:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	3303      	adds	r3, #3
 80135b2:	781b      	ldrb	r3, [r3, #0]
 80135b4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80135b6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	3304      	adds	r3, #4
 80135bc:	781b      	ldrb	r3, [r3, #0]
 80135be:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80135c0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80135c2:	687a      	ldr	r2, [r7, #4]
 80135c4:	3205      	adds	r2, #5
 80135c6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80135c8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80135ca:	697b      	ldr	r3, [r7, #20]
 80135cc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	3307      	adds	r3, #7
 80135d4:	781b      	ldrb	r3, [r3, #0]
 80135d6:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80135d8:	687a      	ldr	r2, [r7, #4]
 80135da:	3208      	adds	r2, #8
 80135dc:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80135de:	431a      	orrs	r2, r3
 80135e0:	697b      	ldr	r3, [r7, #20]
 80135e2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80135e6:	697b      	ldr	r3, [r7, #20]
 80135e8:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80135ec:	697b      	ldr	r3, [r7, #20]
 80135ee:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80135f2:	7af9      	ldrb	r1, [r7, #11]
 80135f4:	68f8      	ldr	r0, [r7, #12]
 80135f6:	f000 f964 	bl	80138c2 <SCSI_CheckAddressRange>
 80135fa:	4603      	mov	r3, r0
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	da02      	bge.n	8013606 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8013600:	f04f 33ff 	mov.w	r3, #4294967295
 8013604:	e034      	b.n	8013670 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013606:	697b      	ldr	r3, [r7, #20]
 8013608:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801360c:	697a      	ldr	r2, [r7, #20]
 801360e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8013612:	fb02 f303 	mul.w	r3, r2, r3
 8013616:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8013618:	697b      	ldr	r3, [r7, #20]
 801361a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801361e:	693a      	ldr	r2, [r7, #16]
 8013620:	429a      	cmp	r2, r3
 8013622:	d00a      	beq.n	801363a <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013624:	697b      	ldr	r3, [r7, #20]
 8013626:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801362a:	2320      	movs	r3, #32
 801362c:	2205      	movs	r2, #5
 801362e:	68f8      	ldr	r0, [r7, #12]
 8013630:	f7ff fd23 	bl	801307a <SCSI_SenseCode>
      return -1;
 8013634:	f04f 33ff 	mov.w	r3, #4294967295
 8013638:	e01a      	b.n	8013670 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 801363a:	693b      	ldr	r3, [r7, #16]
 801363c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013640:	bf28      	it	cs
 8013642:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8013646:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8013648:	697b      	ldr	r3, [r7, #20]
 801364a:	2201      	movs	r2, #1
 801364c:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 801364e:	4b0a      	ldr	r3, [pc, #40]	; (8013678 <SCSI_Write10+0x1a8>)
 8013650:	7819      	ldrb	r1, [r3, #0]
 8013652:	697b      	ldr	r3, [r7, #20]
 8013654:	f103 0210 	add.w	r2, r3, #16
 8013658:	693b      	ldr	r3, [r7, #16]
 801365a:	68f8      	ldr	r0, [r7, #12]
 801365c:	f005 f9ab 	bl	80189b6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8013660:	2300      	movs	r3, #0
 8013662:	e005      	b.n	8013670 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 8013664:	7afb      	ldrb	r3, [r7, #11]
 8013666:	4619      	mov	r1, r3
 8013668:	68f8      	ldr	r0, [r7, #12]
 801366a:	f000 f9dd 	bl	8013a28 <SCSI_ProcessWrite>
 801366e:	4603      	mov	r3, r0
}
 8013670:	4618      	mov	r0, r3
 8013672:	3718      	adds	r7, #24
 8013674:	46bd      	mov	sp, r7
 8013676:	bd80      	pop	{r7, pc}
 8013678:	2000006f 	.word	0x2000006f

0801367c <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801367c:	b580      	push	{r7, lr}
 801367e:	b086      	sub	sp, #24
 8013680:	af00      	add	r7, sp, #0
 8013682:	60f8      	str	r0, [r7, #12]
 8013684:	460b      	mov	r3, r1
 8013686:	607a      	str	r2, [r7, #4]
 8013688:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	32b0      	adds	r2, #176	; 0xb0
 8013694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013698:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 801369a:	697b      	ldr	r3, [r7, #20]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d102      	bne.n	80136a6 <SCSI_Write12+0x2a>
  {
    return -1;
 80136a0:	f04f 33ff 	mov.w	r3, #4294967295
 80136a4:	e0ca      	b.n	801383c <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80136a6:	697b      	ldr	r3, [r7, #20]
 80136a8:	7a1b      	ldrb	r3, [r3, #8]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	f040 80c0 	bne.w	8013830 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80136b0:	697b      	ldr	r3, [r7, #20]
 80136b2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d10a      	bne.n	80136d0 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80136ba:	697b      	ldr	r3, [r7, #20]
 80136bc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80136c0:	2320      	movs	r3, #32
 80136c2:	2205      	movs	r2, #5
 80136c4:	68f8      	ldr	r0, [r7, #12]
 80136c6:	f7ff fcd8 	bl	801307a <SCSI_SenseCode>
      return -1;
 80136ca:	f04f 33ff 	mov.w	r3, #4294967295
 80136ce:	e0b5      	b.n	801383c <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80136d0:	697b      	ldr	r3, [r7, #20]
 80136d2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80136d6:	b25b      	sxtb	r3, r3
 80136d8:	2b00      	cmp	r3, #0
 80136da:	da0a      	bge.n	80136f2 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80136dc:	697b      	ldr	r3, [r7, #20]
 80136de:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80136e2:	2320      	movs	r3, #32
 80136e4:	2205      	movs	r2, #5
 80136e6:	68f8      	ldr	r0, [r7, #12]
 80136e8:	f7ff fcc7 	bl	801307a <SCSI_SenseCode>
      return -1;
 80136ec:	f04f 33ff 	mov.w	r3, #4294967295
 80136f0:	e0a4      	b.n	801383c <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80136f8:	68fa      	ldr	r2, [r7, #12]
 80136fa:	33b0      	adds	r3, #176	; 0xb0
 80136fc:	009b      	lsls	r3, r3, #2
 80136fe:	4413      	add	r3, r2
 8013700:	685b      	ldr	r3, [r3, #4]
 8013702:	689b      	ldr	r3, [r3, #8]
 8013704:	7afa      	ldrb	r2, [r7, #11]
 8013706:	4610      	mov	r0, r2
 8013708:	4798      	blx	r3
 801370a:	4603      	mov	r3, r0
 801370c:	2b00      	cmp	r3, #0
 801370e:	d00b      	beq.n	8013728 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013710:	7af9      	ldrb	r1, [r7, #11]
 8013712:	233a      	movs	r3, #58	; 0x3a
 8013714:	2202      	movs	r2, #2
 8013716:	68f8      	ldr	r0, [r7, #12]
 8013718:	f7ff fcaf 	bl	801307a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 801371c:	697b      	ldr	r3, [r7, #20]
 801371e:	2205      	movs	r2, #5
 8013720:	721a      	strb	r2, [r3, #8]
      return -1;
 8013722:	f04f 33ff 	mov.w	r3, #4294967295
 8013726:	e089      	b.n	801383c <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801372e:	68fa      	ldr	r2, [r7, #12]
 8013730:	33b0      	adds	r3, #176	; 0xb0
 8013732:	009b      	lsls	r3, r3, #2
 8013734:	4413      	add	r3, r2
 8013736:	685b      	ldr	r3, [r3, #4]
 8013738:	68db      	ldr	r3, [r3, #12]
 801373a:	7afa      	ldrb	r2, [r7, #11]
 801373c:	4610      	mov	r0, r2
 801373e:	4798      	blx	r3
 8013740:	4603      	mov	r3, r0
 8013742:	2b00      	cmp	r3, #0
 8013744:	d00b      	beq.n	801375e <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8013746:	7af9      	ldrb	r1, [r7, #11]
 8013748:	2327      	movs	r3, #39	; 0x27
 801374a:	2202      	movs	r2, #2
 801374c:	68f8      	ldr	r0, [r7, #12]
 801374e:	f7ff fc94 	bl	801307a <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8013752:	697b      	ldr	r3, [r7, #20]
 8013754:	2205      	movs	r2, #5
 8013756:	721a      	strb	r2, [r3, #8]
      return -1;
 8013758:	f04f 33ff 	mov.w	r3, #4294967295
 801375c:	e06e      	b.n	801383c <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	3302      	adds	r3, #2
 8013762:	781b      	ldrb	r3, [r3, #0]
 8013764:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	3303      	adds	r3, #3
 801376a:	781b      	ldrb	r3, [r3, #0]
 801376c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801376e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	3304      	adds	r3, #4
 8013774:	781b      	ldrb	r3, [r3, #0]
 8013776:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8013778:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801377a:	687a      	ldr	r2, [r7, #4]
 801377c:	3205      	adds	r2, #5
 801377e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8013780:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013782:	697b      	ldr	r3, [r7, #20]
 8013784:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	3306      	adds	r3, #6
 801378c:	781b      	ldrb	r3, [r3, #0]
 801378e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	3307      	adds	r3, #7
 8013794:	781b      	ldrb	r3, [r3, #0]
 8013796:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013798:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	3308      	adds	r3, #8
 801379e:	781b      	ldrb	r3, [r3, #0]
 80137a0:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80137a2:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80137a4:	687a      	ldr	r2, [r7, #4]
 80137a6:	3209      	adds	r2, #9
 80137a8:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80137aa:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80137ac:	697b      	ldr	r3, [r7, #20]
 80137ae:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80137b2:	697b      	ldr	r3, [r7, #20]
 80137b4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80137b8:	697b      	ldr	r3, [r7, #20]
 80137ba:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80137be:	7af9      	ldrb	r1, [r7, #11]
 80137c0:	68f8      	ldr	r0, [r7, #12]
 80137c2:	f000 f87e 	bl	80138c2 <SCSI_CheckAddressRange>
 80137c6:	4603      	mov	r3, r0
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	da02      	bge.n	80137d2 <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80137cc:	f04f 33ff 	mov.w	r3, #4294967295
 80137d0:	e034      	b.n	801383c <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80137d2:	697b      	ldr	r3, [r7, #20]
 80137d4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80137d8:	697a      	ldr	r2, [r7, #20]
 80137da:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80137de:	fb02 f303 	mul.w	r3, r2, r3
 80137e2:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80137e4:	697b      	ldr	r3, [r7, #20]
 80137e6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80137ea:	693a      	ldr	r2, [r7, #16]
 80137ec:	429a      	cmp	r2, r3
 80137ee:	d00a      	beq.n	8013806 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80137f0:	697b      	ldr	r3, [r7, #20]
 80137f2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80137f6:	2320      	movs	r3, #32
 80137f8:	2205      	movs	r2, #5
 80137fa:	68f8      	ldr	r0, [r7, #12]
 80137fc:	f7ff fc3d 	bl	801307a <SCSI_SenseCode>
      return -1;
 8013800:	f04f 33ff 	mov.w	r3, #4294967295
 8013804:	e01a      	b.n	801383c <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8013806:	693b      	ldr	r3, [r7, #16]
 8013808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801380c:	bf28      	it	cs
 801380e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8013812:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8013814:	697b      	ldr	r3, [r7, #20]
 8013816:	2201      	movs	r2, #1
 8013818:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 801381a:	4b0a      	ldr	r3, [pc, #40]	; (8013844 <SCSI_Write12+0x1c8>)
 801381c:	7819      	ldrb	r1, [r3, #0]
 801381e:	697b      	ldr	r3, [r7, #20]
 8013820:	f103 0210 	add.w	r2, r3, #16
 8013824:	693b      	ldr	r3, [r7, #16]
 8013826:	68f8      	ldr	r0, [r7, #12]
 8013828:	f005 f8c5 	bl	80189b6 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 801382c:	2300      	movs	r3, #0
 801382e:	e005      	b.n	801383c <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 8013830:	7afb      	ldrb	r3, [r7, #11]
 8013832:	4619      	mov	r1, r3
 8013834:	68f8      	ldr	r0, [r7, #12]
 8013836:	f000 f8f7 	bl	8013a28 <SCSI_ProcessWrite>
 801383a:	4603      	mov	r3, r0
}
 801383c:	4618      	mov	r0, r3
 801383e:	3718      	adds	r7, #24
 8013840:	46bd      	mov	sp, r7
 8013842:	bd80      	pop	{r7, pc}
 8013844:	2000006f 	.word	0x2000006f

08013848 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013848:	b580      	push	{r7, lr}
 801384a:	b086      	sub	sp, #24
 801384c:	af00      	add	r7, sp, #0
 801384e:	60f8      	str	r0, [r7, #12]
 8013850:	460b      	mov	r3, r1
 8013852:	607a      	str	r2, [r7, #4]
 8013854:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	32b0      	adds	r2, #176	; 0xb0
 8013860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013864:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8013866:	697b      	ldr	r3, [r7, #20]
 8013868:	2b00      	cmp	r3, #0
 801386a:	d102      	bne.n	8013872 <SCSI_Verify10+0x2a>
  {
    return -1;
 801386c:	f04f 33ff 	mov.w	r3, #4294967295
 8013870:	e023      	b.n	80138ba <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	3301      	adds	r3, #1
 8013876:	781b      	ldrb	r3, [r3, #0]
 8013878:	f003 0302 	and.w	r3, r3, #2
 801387c:	2b00      	cmp	r3, #0
 801387e:	d008      	beq.n	8013892 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8013880:	7af9      	ldrb	r1, [r7, #11]
 8013882:	2324      	movs	r3, #36	; 0x24
 8013884:	2205      	movs	r2, #5
 8013886:	68f8      	ldr	r0, [r7, #12]
 8013888:	f7ff fbf7 	bl	801307a <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 801388c:	f04f 33ff 	mov.w	r3, #4294967295
 8013890:	e013      	b.n	80138ba <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8013892:	697b      	ldr	r3, [r7, #20]
 8013894:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8013898:	697b      	ldr	r3, [r7, #20]
 801389a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801389e:	7af9      	ldrb	r1, [r7, #11]
 80138a0:	68f8      	ldr	r0, [r7, #12]
 80138a2:	f000 f80e 	bl	80138c2 <SCSI_CheckAddressRange>
 80138a6:	4603      	mov	r3, r0
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	da02      	bge.n	80138b2 <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 80138ac:	f04f 33ff 	mov.w	r3, #4294967295
 80138b0:	e003      	b.n	80138ba <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 80138b2:	697b      	ldr	r3, [r7, #20]
 80138b4:	2200      	movs	r2, #0
 80138b6:	60da      	str	r2, [r3, #12]

  return 0;
 80138b8:	2300      	movs	r3, #0
}
 80138ba:	4618      	mov	r0, r3
 80138bc:	3718      	adds	r7, #24
 80138be:	46bd      	mov	sp, r7
 80138c0:	bd80      	pop	{r7, pc}

080138c2 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 80138c2:	b580      	push	{r7, lr}
 80138c4:	b086      	sub	sp, #24
 80138c6:	af00      	add	r7, sp, #0
 80138c8:	60f8      	str	r0, [r7, #12]
 80138ca:	607a      	str	r2, [r7, #4]
 80138cc:	603b      	str	r3, [r7, #0]
 80138ce:	460b      	mov	r3, r1
 80138d0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	32b0      	adds	r2, #176	; 0xb0
 80138dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138e0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80138e2:	697b      	ldr	r3, [r7, #20]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d102      	bne.n	80138ee <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 80138e8:	f04f 33ff 	mov.w	r3, #4294967295
 80138ec:	e011      	b.n	8013912 <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80138ee:	687a      	ldr	r2, [r7, #4]
 80138f0:	683b      	ldr	r3, [r7, #0]
 80138f2:	441a      	add	r2, r3
 80138f4:	697b      	ldr	r3, [r7, #20]
 80138f6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80138fa:	429a      	cmp	r2, r3
 80138fc:	d908      	bls.n	8013910 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 80138fe:	7af9      	ldrb	r1, [r7, #11]
 8013900:	2321      	movs	r3, #33	; 0x21
 8013902:	2205      	movs	r2, #5
 8013904:	68f8      	ldr	r0, [r7, #12]
 8013906:	f7ff fbb8 	bl	801307a <SCSI_SenseCode>
    return -1;
 801390a:	f04f 33ff 	mov.w	r3, #4294967295
 801390e:	e000      	b.n	8013912 <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 8013910:	2300      	movs	r3, #0
}
 8013912:	4618      	mov	r0, r3
 8013914:	3718      	adds	r7, #24
 8013916:	46bd      	mov	sp, r7
 8013918:	bd80      	pop	{r7, pc}
	...

0801391c <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 801391c:	b590      	push	{r4, r7, lr}
 801391e:	b085      	sub	sp, #20
 8013920:	af00      	add	r7, sp, #0
 8013922:	6078      	str	r0, [r7, #4]
 8013924:	460b      	mov	r3, r1
 8013926:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	32b0      	adds	r2, #176	; 0xb0
 8013932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013936:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d102      	bne.n	8013944 <SCSI_ProcessRead+0x28>
  {
    return -1;
 801393e:	f04f 33ff 	mov.w	r3, #4294967295
 8013942:	e06a      	b.n	8013a1a <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801394a:	68fa      	ldr	r2, [r7, #12]
 801394c:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8013950:	fb02 f303 	mul.w	r3, r2, r3
 8013954:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8013956:	68bb      	ldr	r3, [r7, #8]
 8013958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801395c:	bf28      	it	cs
 801395e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8013962:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801396a:	687a      	ldr	r2, [r7, #4]
 801396c:	33b0      	adds	r3, #176	; 0xb0
 801396e:	009b      	lsls	r3, r3, #2
 8013970:	4413      	add	r3, r2
 8013972:	685b      	ldr	r3, [r3, #4]
 8013974:	691c      	ldr	r4, [r3, #16]
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	f103 0110 	add.w	r1, r3, #16
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8013988:	4618      	mov	r0, r3
 801398a:	68bb      	ldr	r3, [r7, #8]
 801398c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8013990:	b29b      	uxth	r3, r3
 8013992:	78f8      	ldrb	r0, [r7, #3]
 8013994:	47a0      	blx	r4
 8013996:	4603      	mov	r3, r0
 8013998:	2b00      	cmp	r3, #0
 801399a:	da08      	bge.n	80139ae <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 801399c:	78f9      	ldrb	r1, [r7, #3]
 801399e:	2311      	movs	r3, #17
 80139a0:	2204      	movs	r2, #4
 80139a2:	6878      	ldr	r0, [r7, #4]
 80139a4:	f7ff fb69 	bl	801307a <SCSI_SenseCode>
    return -1;
 80139a8:	f04f 33ff 	mov.w	r3, #4294967295
 80139ac:	e035      	b.n	8013a1a <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 80139ae:	4b1d      	ldr	r3, [pc, #116]	; (8013a24 <SCSI_ProcessRead+0x108>)
 80139b0:	7819      	ldrb	r1, [r3, #0]
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	f103 0210 	add.w	r2, r3, #16
 80139b8:	68bb      	ldr	r3, [r7, #8]
 80139ba:	6878      	ldr	r0, [r7, #4]
 80139bc:	f004 ffda 	bl	8018974 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80139cc:	4619      	mov	r1, r3
 80139ce:	68bb      	ldr	r3, [r7, #8]
 80139d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80139d4:	441a      	add	r2, r3
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80139e8:	4619      	mov	r1, r3
 80139ea:	68bb      	ldr	r3, [r7, #8]
 80139ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80139f0:	1ad2      	subs	r2, r2, r3
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 80139fe:	68bb      	ldr	r3, [r7, #8]
 8013a00:	1ad2      	subs	r2, r2, r3
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d102      	bne.n	8013a18 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	2203      	movs	r2, #3
 8013a16:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8013a18:	2300      	movs	r3, #0
}
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	3714      	adds	r7, #20
 8013a1e:	46bd      	mov	sp, r7
 8013a20:	bd90      	pop	{r4, r7, pc}
 8013a22:	bf00      	nop
 8013a24:	2000006e 	.word	0x2000006e

08013a28 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8013a28:	b590      	push	{r4, r7, lr}
 8013a2a:	b085      	sub	sp, #20
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	6078      	str	r0, [r7, #4]
 8013a30:	460b      	mov	r3, r1
 8013a32:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	32b0      	adds	r2, #176	; 0xb0
 8013a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a42:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d102      	bne.n	8013a50 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 8013a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8013a4e:	e07a      	b.n	8013b46 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8013a56:	68fa      	ldr	r2, [r7, #12]
 8013a58:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8013a5c:	fb02 f303 	mul.w	r3, r2, r3
 8013a60:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8013a62:	68bb      	ldr	r3, [r7, #8]
 8013a64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013a68:	bf28      	it	cs
 8013a6a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8013a6e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013a76:	687a      	ldr	r2, [r7, #4]
 8013a78:	33b0      	adds	r3, #176	; 0xb0
 8013a7a:	009b      	lsls	r3, r3, #2
 8013a7c:	4413      	add	r3, r2
 8013a7e:	685b      	ldr	r3, [r3, #4]
 8013a80:	695c      	ldr	r4, [r3, #20]
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	f103 0110 	add.w	r1, r3, #16
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 8013a8e:	68fb      	ldr	r3, [r7, #12]
 8013a90:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8013a94:	4618      	mov	r0, r3
 8013a96:	68bb      	ldr	r3, [r7, #8]
 8013a98:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8013a9c:	b29b      	uxth	r3, r3
 8013a9e:	78f8      	ldrb	r0, [r7, #3]
 8013aa0:	47a0      	blx	r4
 8013aa2:	4603      	mov	r3, r0
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	da08      	bge.n	8013aba <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8013aa8:	78f9      	ldrb	r1, [r7, #3]
 8013aaa:	2303      	movs	r3, #3
 8013aac:	2204      	movs	r2, #4
 8013aae:	6878      	ldr	r0, [r7, #4]
 8013ab0:	f7ff fae3 	bl	801307a <SCSI_SenseCode>
    return -1;
 8013ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8013ab8:	e045      	b.n	8013b46 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8013ac6:	4619      	mov	r1, r3
 8013ac8:	68bb      	ldr	r3, [r7, #8]
 8013aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8013ace:	441a      	add	r2, r3
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8013ad6:	68fb      	ldr	r3, [r7, #12]
 8013ad8:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8013ae2:	4619      	mov	r1, r3
 8013ae4:	68bb      	ldr	r3, [r7, #8]
 8013ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8013aea:	1ad2      	subs	r2, r2, r3
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8013af8:	68bb      	ldr	r3, [r7, #8]
 8013afa:	1ad2      	subs	r2, r2, r3
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d104      	bne.n	8013b16 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013b0c:	2100      	movs	r1, #0
 8013b0e:	6878      	ldr	r0, [r7, #4]
 8013b10:	f7fe fd14 	bl	801253c <MSC_BOT_SendCSW>
 8013b14:	e016      	b.n	8013b44 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8013b1c:	68fa      	ldr	r2, [r7, #12]
 8013b1e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8013b22:	fb02 f303 	mul.w	r3, r2, r3
 8013b26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013b2a:	bf28      	it	cs
 8013b2c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8013b30:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8013b32:	4b07      	ldr	r3, [pc, #28]	; (8013b50 <SCSI_ProcessWrite+0x128>)
 8013b34:	7819      	ldrb	r1, [r3, #0]
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	f103 0210 	add.w	r2, r3, #16
 8013b3c:	68bb      	ldr	r3, [r7, #8]
 8013b3e:	6878      	ldr	r0, [r7, #4]
 8013b40:	f004 ff39 	bl	80189b6 <USBD_LL_PrepareReceive>
  }

  return 0;
 8013b44:	2300      	movs	r3, #0
}
 8013b46:	4618      	mov	r0, r3
 8013b48:	3714      	adds	r7, #20
 8013b4a:	46bd      	mov	sp, r7
 8013b4c:	bd90      	pop	{r4, r7, pc}
 8013b4e:	bf00      	nop
 8013b50:	2000006f 	.word	0x2000006f

08013b54 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8013b54:	b480      	push	{r7}
 8013b56:	b087      	sub	sp, #28
 8013b58:	af00      	add	r7, sp, #0
 8013b5a:	60f8      	str	r0, [r7, #12]
 8013b5c:	60b9      	str	r1, [r7, #8]
 8013b5e:	4613      	mov	r3, r2
 8013b60:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8013b62:	88fb      	ldrh	r3, [r7, #6]
 8013b64:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d102      	bne.n	8013b72 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8013b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8013b70:	e013      	b.n	8013b9a <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8013b72:	8afa      	ldrh	r2, [r7, #22]
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8013b78:	e00b      	b.n	8013b92 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8013b7a:	8afb      	ldrh	r3, [r7, #22]
 8013b7c:	3b01      	subs	r3, #1
 8013b7e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8013b80:	8afb      	ldrh	r3, [r7, #22]
 8013b82:	68ba      	ldr	r2, [r7, #8]
 8013b84:	441a      	add	r2, r3
 8013b86:	8afb      	ldrh	r3, [r7, #22]
 8013b88:	7811      	ldrb	r1, [r2, #0]
 8013b8a:	68fa      	ldr	r2, [r7, #12]
 8013b8c:	4413      	add	r3, r2
 8013b8e:	460a      	mov	r2, r1
 8013b90:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8013b92:	8afb      	ldrh	r3, [r7, #22]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d1f0      	bne.n	8013b7a <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8013b98:	2300      	movs	r3, #0
}
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	371c      	adds	r7, #28
 8013b9e:	46bd      	mov	sp, r7
 8013ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ba4:	4770      	bx	lr

08013ba6 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013ba6:	b580      	push	{r7, lr}
 8013ba8:	b086      	sub	sp, #24
 8013baa:	af00      	add	r7, sp, #0
 8013bac:	60f8      	str	r0, [r7, #12]
 8013bae:	60b9      	str	r1, [r7, #8]
 8013bb0:	4613      	mov	r3, r2
 8013bb2:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d101      	bne.n	8013bbe <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013bba:	2303      	movs	r3, #3
 8013bbc:	e01f      	b.n	8013bfe <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	2200      	movs	r2, #0
 8013bc2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	2200      	movs	r2, #0
 8013bca:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	2200      	movs	r2, #0
 8013bd2:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013bd6:	68bb      	ldr	r3, [r7, #8]
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d003      	beq.n	8013be4 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	68ba      	ldr	r2, [r7, #8]
 8013be0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	2201      	movs	r2, #1
 8013be8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	79fa      	ldrb	r2, [r7, #7]
 8013bf0:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013bf2:	68f8      	ldr	r0, [r7, #12]
 8013bf4:	f004 fd6a 	bl	80186cc <USBD_LL_Init>
 8013bf8:	4603      	mov	r3, r0
 8013bfa:	75fb      	strb	r3, [r7, #23]

  return ret;
 8013bfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8013bfe:	4618      	mov	r0, r3
 8013c00:	3718      	adds	r7, #24
 8013c02:	46bd      	mov	sp, r7
 8013c04:	bd80      	pop	{r7, pc}

08013c06 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013c06:	b580      	push	{r7, lr}
 8013c08:	b084      	sub	sp, #16
 8013c0a:	af00      	add	r7, sp, #0
 8013c0c:	6078      	str	r0, [r7, #4]
 8013c0e:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013c10:	2300      	movs	r3, #0
 8013c12:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013c14:	683b      	ldr	r3, [r7, #0]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d101      	bne.n	8013c1e <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013c1a:	2303      	movs	r3, #3
 8013c1c:	e025      	b.n	8013c6a <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	683a      	ldr	r2, [r7, #0]
 8013c22:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	32ae      	adds	r2, #174	; 0xae
 8013c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d00f      	beq.n	8013c5a <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	32ae      	adds	r2, #174	; 0xae
 8013c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c4a:	f107 020e 	add.w	r2, r7, #14
 8013c4e:	4610      	mov	r0, r2
 8013c50:	4798      	blx	r3
 8013c52:	4602      	mov	r2, r0
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8013c60:	1c5a      	adds	r2, r3, #1
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8013c68:	2300      	movs	r3, #0
}
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	3710      	adds	r7, #16
 8013c6e:	46bd      	mov	sp, r7
 8013c70:	bd80      	pop	{r7, pc}

08013c72 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013c72:	b580      	push	{r7, lr}
 8013c74:	b082      	sub	sp, #8
 8013c76:	af00      	add	r7, sp, #0
 8013c78:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013c7a:	6878      	ldr	r0, [r7, #4]
 8013c7c:	f004 fd72 	bl	8018764 <USBD_LL_Start>
 8013c80:	4603      	mov	r3, r0
}
 8013c82:	4618      	mov	r0, r3
 8013c84:	3708      	adds	r7, #8
 8013c86:	46bd      	mov	sp, r7
 8013c88:	bd80      	pop	{r7, pc}

08013c8a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8013c8a:	b480      	push	{r7}
 8013c8c:	b083      	sub	sp, #12
 8013c8e:	af00      	add	r7, sp, #0
 8013c90:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013c92:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8013c94:	4618      	mov	r0, r3
 8013c96:	370c      	adds	r7, #12
 8013c98:	46bd      	mov	sp, r7
 8013c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c9e:	4770      	bx	lr

08013ca0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b084      	sub	sp, #16
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	6078      	str	r0, [r7, #4]
 8013ca8:	460b      	mov	r3, r1
 8013caa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013cac:	2300      	movs	r3, #0
 8013cae:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d009      	beq.n	8013cce <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	78fa      	ldrb	r2, [r7, #3]
 8013cc4:	4611      	mov	r1, r2
 8013cc6:	6878      	ldr	r0, [r7, #4]
 8013cc8:	4798      	blx	r3
 8013cca:	4603      	mov	r3, r0
 8013ccc:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	3710      	adds	r7, #16
 8013cd4:	46bd      	mov	sp, r7
 8013cd6:	bd80      	pop	{r7, pc}

08013cd8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	b084      	sub	sp, #16
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	6078      	str	r0, [r7, #4]
 8013ce0:	460b      	mov	r3, r1
 8013ce2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013ce4:	2300      	movs	r3, #0
 8013ce6:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013cee:	685b      	ldr	r3, [r3, #4]
 8013cf0:	78fa      	ldrb	r2, [r7, #3]
 8013cf2:	4611      	mov	r1, r2
 8013cf4:	6878      	ldr	r0, [r7, #4]
 8013cf6:	4798      	blx	r3
 8013cf8:	4603      	mov	r3, r0
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d001      	beq.n	8013d02 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8013cfe:	2303      	movs	r3, #3
 8013d00:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d04:	4618      	mov	r0, r3
 8013d06:	3710      	adds	r7, #16
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	bd80      	pop	{r7, pc}

08013d0c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013d0c:	b580      	push	{r7, lr}
 8013d0e:	b084      	sub	sp, #16
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	6078      	str	r0, [r7, #4]
 8013d14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013d1c:	6839      	ldr	r1, [r7, #0]
 8013d1e:	4618      	mov	r0, r3
 8013d20:	f001 f933 	bl	8014f8a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	2201      	movs	r2, #1
 8013d28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8013d32:	461a      	mov	r2, r3
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013d40:	f003 031f 	and.w	r3, r3, #31
 8013d44:	2b02      	cmp	r3, #2
 8013d46:	d01a      	beq.n	8013d7e <USBD_LL_SetupStage+0x72>
 8013d48:	2b02      	cmp	r3, #2
 8013d4a:	d822      	bhi.n	8013d92 <USBD_LL_SetupStage+0x86>
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d002      	beq.n	8013d56 <USBD_LL_SetupStage+0x4a>
 8013d50:	2b01      	cmp	r3, #1
 8013d52:	d00a      	beq.n	8013d6a <USBD_LL_SetupStage+0x5e>
 8013d54:	e01d      	b.n	8013d92 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013d5c:	4619      	mov	r1, r3
 8013d5e:	6878      	ldr	r0, [r7, #4]
 8013d60:	f000 fb60 	bl	8014424 <USBD_StdDevReq>
 8013d64:	4603      	mov	r3, r0
 8013d66:	73fb      	strb	r3, [r7, #15]
      break;
 8013d68:	e020      	b.n	8013dac <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013d70:	4619      	mov	r1, r3
 8013d72:	6878      	ldr	r0, [r7, #4]
 8013d74:	f000 fbc8 	bl	8014508 <USBD_StdItfReq>
 8013d78:	4603      	mov	r3, r0
 8013d7a:	73fb      	strb	r3, [r7, #15]
      break;
 8013d7c:	e016      	b.n	8013dac <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013d84:	4619      	mov	r1, r3
 8013d86:	6878      	ldr	r0, [r7, #4]
 8013d88:	f000 fc2a 	bl	80145e0 <USBD_StdEPReq>
 8013d8c:	4603      	mov	r3, r0
 8013d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8013d90:	e00c      	b.n	8013dac <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013d98:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013d9c:	b2db      	uxtb	r3, r3
 8013d9e:	4619      	mov	r1, r3
 8013da0:	6878      	ldr	r0, [r7, #4]
 8013da2:	f004 fd5e 	bl	8018862 <USBD_LL_StallEP>
 8013da6:	4603      	mov	r3, r0
 8013da8:	73fb      	strb	r3, [r7, #15]
      break;
 8013daa:	bf00      	nop
  }

  return ret;
 8013dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8013dae:	4618      	mov	r0, r3
 8013db0:	3710      	adds	r7, #16
 8013db2:	46bd      	mov	sp, r7
 8013db4:	bd80      	pop	{r7, pc}

08013db6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013db6:	b580      	push	{r7, lr}
 8013db8:	b086      	sub	sp, #24
 8013dba:	af00      	add	r7, sp, #0
 8013dbc:	60f8      	str	r0, [r7, #12]
 8013dbe:	460b      	mov	r3, r1
 8013dc0:	607a      	str	r2, [r7, #4]
 8013dc2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8013dc4:	2300      	movs	r3, #0
 8013dc6:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8013dc8:	7afb      	ldrb	r3, [r7, #11]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	d16e      	bne.n	8013eac <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8013dd4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013ddc:	2b03      	cmp	r3, #3
 8013dde:	f040 8098 	bne.w	8013f12 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8013de2:	693b      	ldr	r3, [r7, #16]
 8013de4:	689a      	ldr	r2, [r3, #8]
 8013de6:	693b      	ldr	r3, [r7, #16]
 8013de8:	68db      	ldr	r3, [r3, #12]
 8013dea:	429a      	cmp	r2, r3
 8013dec:	d913      	bls.n	8013e16 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8013dee:	693b      	ldr	r3, [r7, #16]
 8013df0:	689a      	ldr	r2, [r3, #8]
 8013df2:	693b      	ldr	r3, [r7, #16]
 8013df4:	68db      	ldr	r3, [r3, #12]
 8013df6:	1ad2      	subs	r2, r2, r3
 8013df8:	693b      	ldr	r3, [r7, #16]
 8013dfa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013dfc:	693b      	ldr	r3, [r7, #16]
 8013dfe:	68da      	ldr	r2, [r3, #12]
 8013e00:	693b      	ldr	r3, [r7, #16]
 8013e02:	689b      	ldr	r3, [r3, #8]
 8013e04:	4293      	cmp	r3, r2
 8013e06:	bf28      	it	cs
 8013e08:	4613      	movcs	r3, r2
 8013e0a:	461a      	mov	r2, r3
 8013e0c:	6879      	ldr	r1, [r7, #4]
 8013e0e:	68f8      	ldr	r0, [r7, #12]
 8013e10:	f001 f992 	bl	8015138 <USBD_CtlContinueRx>
 8013e14:	e07d      	b.n	8013f12 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013e1c:	f003 031f 	and.w	r3, r3, #31
 8013e20:	2b02      	cmp	r3, #2
 8013e22:	d014      	beq.n	8013e4e <USBD_LL_DataOutStage+0x98>
 8013e24:	2b02      	cmp	r3, #2
 8013e26:	d81d      	bhi.n	8013e64 <USBD_LL_DataOutStage+0xae>
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d002      	beq.n	8013e32 <USBD_LL_DataOutStage+0x7c>
 8013e2c:	2b01      	cmp	r3, #1
 8013e2e:	d003      	beq.n	8013e38 <USBD_LL_DataOutStage+0x82>
 8013e30:	e018      	b.n	8013e64 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8013e32:	2300      	movs	r3, #0
 8013e34:	75bb      	strb	r3, [r7, #22]
            break;
 8013e36:	e018      	b.n	8013e6a <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8013e3e:	b2db      	uxtb	r3, r3
 8013e40:	4619      	mov	r1, r3
 8013e42:	68f8      	ldr	r0, [r7, #12]
 8013e44:	f000 fa5e 	bl	8014304 <USBD_CoreFindIF>
 8013e48:	4603      	mov	r3, r0
 8013e4a:	75bb      	strb	r3, [r7, #22]
            break;
 8013e4c:	e00d      	b.n	8013e6a <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8013e4e:	68fb      	ldr	r3, [r7, #12]
 8013e50:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8013e54:	b2db      	uxtb	r3, r3
 8013e56:	4619      	mov	r1, r3
 8013e58:	68f8      	ldr	r0, [r7, #12]
 8013e5a:	f000 fa60 	bl	801431e <USBD_CoreFindEP>
 8013e5e:	4603      	mov	r3, r0
 8013e60:	75bb      	strb	r3, [r7, #22]
            break;
 8013e62:	e002      	b.n	8013e6a <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8013e64:	2300      	movs	r3, #0
 8013e66:	75bb      	strb	r3, [r7, #22]
            break;
 8013e68:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8013e6a:	7dbb      	ldrb	r3, [r7, #22]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d119      	bne.n	8013ea4 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e70:	68fb      	ldr	r3, [r7, #12]
 8013e72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013e76:	b2db      	uxtb	r3, r3
 8013e78:	2b03      	cmp	r3, #3
 8013e7a:	d113      	bne.n	8013ea4 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8013e7c:	7dba      	ldrb	r2, [r7, #22]
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	32ae      	adds	r2, #174	; 0xae
 8013e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e86:	691b      	ldr	r3, [r3, #16]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d00b      	beq.n	8013ea4 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8013e8c:	7dba      	ldrb	r2, [r7, #22]
 8013e8e:	68fb      	ldr	r3, [r7, #12]
 8013e90:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8013e94:	7dba      	ldrb	r2, [r7, #22]
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	32ae      	adds	r2, #174	; 0xae
 8013e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e9e:	691b      	ldr	r3, [r3, #16]
 8013ea0:	68f8      	ldr	r0, [r7, #12]
 8013ea2:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013ea4:	68f8      	ldr	r0, [r7, #12]
 8013ea6:	f001 f958 	bl	801515a <USBD_CtlSendStatus>
 8013eaa:	e032      	b.n	8013f12 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8013eac:	7afb      	ldrb	r3, [r7, #11]
 8013eae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013eb2:	b2db      	uxtb	r3, r3
 8013eb4:	4619      	mov	r1, r3
 8013eb6:	68f8      	ldr	r0, [r7, #12]
 8013eb8:	f000 fa31 	bl	801431e <USBD_CoreFindEP>
 8013ebc:	4603      	mov	r3, r0
 8013ebe:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013ec0:	7dbb      	ldrb	r3, [r7, #22]
 8013ec2:	2bff      	cmp	r3, #255	; 0xff
 8013ec4:	d025      	beq.n	8013f12 <USBD_LL_DataOutStage+0x15c>
 8013ec6:	7dbb      	ldrb	r3, [r7, #22]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d122      	bne.n	8013f12 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013ed2:	b2db      	uxtb	r3, r3
 8013ed4:	2b03      	cmp	r3, #3
 8013ed6:	d117      	bne.n	8013f08 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8013ed8:	7dba      	ldrb	r2, [r7, #22]
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	32ae      	adds	r2, #174	; 0xae
 8013ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ee2:	699b      	ldr	r3, [r3, #24]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d00f      	beq.n	8013f08 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8013ee8:	7dba      	ldrb	r2, [r7, #22]
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8013ef0:	7dba      	ldrb	r2, [r7, #22]
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	32ae      	adds	r2, #174	; 0xae
 8013ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013efa:	699b      	ldr	r3, [r3, #24]
 8013efc:	7afa      	ldrb	r2, [r7, #11]
 8013efe:	4611      	mov	r1, r2
 8013f00:	68f8      	ldr	r0, [r7, #12]
 8013f02:	4798      	blx	r3
 8013f04:	4603      	mov	r3, r0
 8013f06:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8013f08:	7dfb      	ldrb	r3, [r7, #23]
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d001      	beq.n	8013f12 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8013f0e:	7dfb      	ldrb	r3, [r7, #23]
 8013f10:	e000      	b.n	8013f14 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8013f12:	2300      	movs	r3, #0
}
 8013f14:	4618      	mov	r0, r3
 8013f16:	3718      	adds	r7, #24
 8013f18:	46bd      	mov	sp, r7
 8013f1a:	bd80      	pop	{r7, pc}

08013f1c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013f1c:	b580      	push	{r7, lr}
 8013f1e:	b086      	sub	sp, #24
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	60f8      	str	r0, [r7, #12]
 8013f24:	460b      	mov	r3, r1
 8013f26:	607a      	str	r2, [r7, #4]
 8013f28:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8013f2a:	7afb      	ldrb	r3, [r7, #11]
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	d16f      	bne.n	8014010 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	3314      	adds	r3, #20
 8013f34:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013f3c:	2b02      	cmp	r3, #2
 8013f3e:	d15a      	bne.n	8013ff6 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8013f40:	693b      	ldr	r3, [r7, #16]
 8013f42:	689a      	ldr	r2, [r3, #8]
 8013f44:	693b      	ldr	r3, [r7, #16]
 8013f46:	68db      	ldr	r3, [r3, #12]
 8013f48:	429a      	cmp	r2, r3
 8013f4a:	d914      	bls.n	8013f76 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013f4c:	693b      	ldr	r3, [r7, #16]
 8013f4e:	689a      	ldr	r2, [r3, #8]
 8013f50:	693b      	ldr	r3, [r7, #16]
 8013f52:	68db      	ldr	r3, [r3, #12]
 8013f54:	1ad2      	subs	r2, r2, r3
 8013f56:	693b      	ldr	r3, [r7, #16]
 8013f58:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013f5a:	693b      	ldr	r3, [r7, #16]
 8013f5c:	689b      	ldr	r3, [r3, #8]
 8013f5e:	461a      	mov	r2, r3
 8013f60:	6879      	ldr	r1, [r7, #4]
 8013f62:	68f8      	ldr	r0, [r7, #12]
 8013f64:	f001 f8d7 	bl	8015116 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013f68:	2300      	movs	r3, #0
 8013f6a:	2200      	movs	r2, #0
 8013f6c:	2100      	movs	r1, #0
 8013f6e:	68f8      	ldr	r0, [r7, #12]
 8013f70:	f004 fd21 	bl	80189b6 <USBD_LL_PrepareReceive>
 8013f74:	e03f      	b.n	8013ff6 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013f76:	693b      	ldr	r3, [r7, #16]
 8013f78:	68da      	ldr	r2, [r3, #12]
 8013f7a:	693b      	ldr	r3, [r7, #16]
 8013f7c:	689b      	ldr	r3, [r3, #8]
 8013f7e:	429a      	cmp	r2, r3
 8013f80:	d11c      	bne.n	8013fbc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013f82:	693b      	ldr	r3, [r7, #16]
 8013f84:	685a      	ldr	r2, [r3, #4]
 8013f86:	693b      	ldr	r3, [r7, #16]
 8013f88:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013f8a:	429a      	cmp	r2, r3
 8013f8c:	d316      	bcc.n	8013fbc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013f8e:	693b      	ldr	r3, [r7, #16]
 8013f90:	685a      	ldr	r2, [r3, #4]
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013f98:	429a      	cmp	r2, r3
 8013f9a:	d20f      	bcs.n	8013fbc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013f9c:	2200      	movs	r2, #0
 8013f9e:	2100      	movs	r1, #0
 8013fa0:	68f8      	ldr	r0, [r7, #12]
 8013fa2:	f001 f8b8 	bl	8015116 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	2200      	movs	r2, #0
 8013faa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013fae:	2300      	movs	r3, #0
 8013fb0:	2200      	movs	r2, #0
 8013fb2:	2100      	movs	r1, #0
 8013fb4:	68f8      	ldr	r0, [r7, #12]
 8013fb6:	f004 fcfe 	bl	80189b6 <USBD_LL_PrepareReceive>
 8013fba:	e01c      	b.n	8013ff6 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013fc2:	b2db      	uxtb	r3, r3
 8013fc4:	2b03      	cmp	r3, #3
 8013fc6:	d10f      	bne.n	8013fe8 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013fce:	68db      	ldr	r3, [r3, #12]
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d009      	beq.n	8013fe8 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	2200      	movs	r2, #0
 8013fd8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013fe2:	68db      	ldr	r3, [r3, #12]
 8013fe4:	68f8      	ldr	r0, [r7, #12]
 8013fe6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013fe8:	2180      	movs	r1, #128	; 0x80
 8013fea:	68f8      	ldr	r0, [r7, #12]
 8013fec:	f004 fc39 	bl	8018862 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013ff0:	68f8      	ldr	r0, [r7, #12]
 8013ff2:	f001 f8c5 	bl	8015180 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8013ffc:	2b00      	cmp	r3, #0
 8013ffe:	d03a      	beq.n	8014076 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8014000:	68f8      	ldr	r0, [r7, #12]
 8014002:	f7ff fe42 	bl	8013c8a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8014006:	68fb      	ldr	r3, [r7, #12]
 8014008:	2200      	movs	r2, #0
 801400a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801400e:	e032      	b.n	8014076 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8014010:	7afb      	ldrb	r3, [r7, #11]
 8014012:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014016:	b2db      	uxtb	r3, r3
 8014018:	4619      	mov	r1, r3
 801401a:	68f8      	ldr	r0, [r7, #12]
 801401c:	f000 f97f 	bl	801431e <USBD_CoreFindEP>
 8014020:	4603      	mov	r3, r0
 8014022:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014024:	7dfb      	ldrb	r3, [r7, #23]
 8014026:	2bff      	cmp	r3, #255	; 0xff
 8014028:	d025      	beq.n	8014076 <USBD_LL_DataInStage+0x15a>
 801402a:	7dfb      	ldrb	r3, [r7, #23]
 801402c:	2b00      	cmp	r3, #0
 801402e:	d122      	bne.n	8014076 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014036:	b2db      	uxtb	r3, r3
 8014038:	2b03      	cmp	r3, #3
 801403a:	d11c      	bne.n	8014076 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801403c:	7dfa      	ldrb	r2, [r7, #23]
 801403e:	68fb      	ldr	r3, [r7, #12]
 8014040:	32ae      	adds	r2, #174	; 0xae
 8014042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014046:	695b      	ldr	r3, [r3, #20]
 8014048:	2b00      	cmp	r3, #0
 801404a:	d014      	beq.n	8014076 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801404c:	7dfa      	ldrb	r2, [r7, #23]
 801404e:	68fb      	ldr	r3, [r7, #12]
 8014050:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8014054:	7dfa      	ldrb	r2, [r7, #23]
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	32ae      	adds	r2, #174	; 0xae
 801405a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801405e:	695b      	ldr	r3, [r3, #20]
 8014060:	7afa      	ldrb	r2, [r7, #11]
 8014062:	4611      	mov	r1, r2
 8014064:	68f8      	ldr	r0, [r7, #12]
 8014066:	4798      	blx	r3
 8014068:	4603      	mov	r3, r0
 801406a:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801406c:	7dbb      	ldrb	r3, [r7, #22]
 801406e:	2b00      	cmp	r3, #0
 8014070:	d001      	beq.n	8014076 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8014072:	7dbb      	ldrb	r3, [r7, #22]
 8014074:	e000      	b.n	8014078 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8014076:	2300      	movs	r3, #0
}
 8014078:	4618      	mov	r0, r3
 801407a:	3718      	adds	r7, #24
 801407c:	46bd      	mov	sp, r7
 801407e:	bd80      	pop	{r7, pc}

08014080 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014080:	b580      	push	{r7, lr}
 8014082:	b084      	sub	sp, #16
 8014084:	af00      	add	r7, sp, #0
 8014086:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8014088:	2300      	movs	r3, #0
 801408a:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	2201      	movs	r2, #1
 8014090:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	2200      	movs	r2, #0
 8014098:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	2200      	movs	r2, #0
 80140a0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	2200      	movs	r2, #0
 80140a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	2200      	movs	r2, #0
 80140ae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d014      	beq.n	80140e6 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80140c2:	685b      	ldr	r3, [r3, #4]
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d00e      	beq.n	80140e6 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80140ce:	685b      	ldr	r3, [r3, #4]
 80140d0:	687a      	ldr	r2, [r7, #4]
 80140d2:	6852      	ldr	r2, [r2, #4]
 80140d4:	b2d2      	uxtb	r2, r2
 80140d6:	4611      	mov	r1, r2
 80140d8:	6878      	ldr	r0, [r7, #4]
 80140da:	4798      	blx	r3
 80140dc:	4603      	mov	r3, r0
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d001      	beq.n	80140e6 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80140e2:	2303      	movs	r3, #3
 80140e4:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80140e6:	2340      	movs	r3, #64	; 0x40
 80140e8:	2200      	movs	r2, #0
 80140ea:	2100      	movs	r1, #0
 80140ec:	6878      	ldr	r0, [r7, #4]
 80140ee:	f004 fb54 	bl	801879a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	2201      	movs	r2, #1
 80140f6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	2240      	movs	r2, #64	; 0x40
 80140fe:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014102:	2340      	movs	r3, #64	; 0x40
 8014104:	2200      	movs	r2, #0
 8014106:	2180      	movs	r1, #128	; 0x80
 8014108:	6878      	ldr	r0, [r7, #4]
 801410a:	f004 fb46 	bl	801879a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	2201      	movs	r2, #1
 8014112:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	2240      	movs	r2, #64	; 0x40
 8014118:	621a      	str	r2, [r3, #32]

  return ret;
 801411a:	7bfb      	ldrb	r3, [r7, #15]
}
 801411c:	4618      	mov	r0, r3
 801411e:	3710      	adds	r7, #16
 8014120:	46bd      	mov	sp, r7
 8014122:	bd80      	pop	{r7, pc}

08014124 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8014124:	b480      	push	{r7}
 8014126:	b083      	sub	sp, #12
 8014128:	af00      	add	r7, sp, #0
 801412a:	6078      	str	r0, [r7, #4]
 801412c:	460b      	mov	r3, r1
 801412e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	78fa      	ldrb	r2, [r7, #3]
 8014134:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8014136:	2300      	movs	r3, #0
}
 8014138:	4618      	mov	r0, r3
 801413a:	370c      	adds	r7, #12
 801413c:	46bd      	mov	sp, r7
 801413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014142:	4770      	bx	lr

08014144 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8014144:	b480      	push	{r7}
 8014146:	b083      	sub	sp, #12
 8014148:	af00      	add	r7, sp, #0
 801414a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014152:	b2da      	uxtb	r2, r3
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	2204      	movs	r2, #4
 801415e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8014162:	2300      	movs	r3, #0
}
 8014164:	4618      	mov	r0, r3
 8014166:	370c      	adds	r7, #12
 8014168:	46bd      	mov	sp, r7
 801416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801416e:	4770      	bx	lr

08014170 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8014170:	b480      	push	{r7}
 8014172:	b083      	sub	sp, #12
 8014174:	af00      	add	r7, sp, #0
 8014176:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801417e:	b2db      	uxtb	r3, r3
 8014180:	2b04      	cmp	r3, #4
 8014182:	d106      	bne.n	8014192 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801418a:	b2da      	uxtb	r2, r3
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8014192:	2300      	movs	r3, #0
}
 8014194:	4618      	mov	r0, r3
 8014196:	370c      	adds	r7, #12
 8014198:	46bd      	mov	sp, r7
 801419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801419e:	4770      	bx	lr

080141a0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b082      	sub	sp, #8
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80141ae:	b2db      	uxtb	r3, r3
 80141b0:	2b03      	cmp	r3, #3
 80141b2:	d110      	bne.n	80141d6 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d00b      	beq.n	80141d6 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80141c4:	69db      	ldr	r3, [r3, #28]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d005      	beq.n	80141d6 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80141d0:	69db      	ldr	r3, [r3, #28]
 80141d2:	6878      	ldr	r0, [r7, #4]
 80141d4:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80141d6:	2300      	movs	r3, #0
}
 80141d8:	4618      	mov	r0, r3
 80141da:	3708      	adds	r7, #8
 80141dc:	46bd      	mov	sp, r7
 80141de:	bd80      	pop	{r7, pc}

080141e0 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80141e0:	b580      	push	{r7, lr}
 80141e2:	b082      	sub	sp, #8
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	6078      	str	r0, [r7, #4]
 80141e8:	460b      	mov	r3, r1
 80141ea:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	32ae      	adds	r2, #174	; 0xae
 80141f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d101      	bne.n	8014202 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80141fe:	2303      	movs	r3, #3
 8014200:	e01c      	b.n	801423c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014208:	b2db      	uxtb	r3, r3
 801420a:	2b03      	cmp	r3, #3
 801420c:	d115      	bne.n	801423a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	32ae      	adds	r2, #174	; 0xae
 8014218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801421c:	6a1b      	ldr	r3, [r3, #32]
 801421e:	2b00      	cmp	r3, #0
 8014220:	d00b      	beq.n	801423a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	32ae      	adds	r2, #174	; 0xae
 801422c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014230:	6a1b      	ldr	r3, [r3, #32]
 8014232:	78fa      	ldrb	r2, [r7, #3]
 8014234:	4611      	mov	r1, r2
 8014236:	6878      	ldr	r0, [r7, #4]
 8014238:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801423a:	2300      	movs	r3, #0
}
 801423c:	4618      	mov	r0, r3
 801423e:	3708      	adds	r7, #8
 8014240:	46bd      	mov	sp, r7
 8014242:	bd80      	pop	{r7, pc}

08014244 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8014244:	b580      	push	{r7, lr}
 8014246:	b082      	sub	sp, #8
 8014248:	af00      	add	r7, sp, #0
 801424a:	6078      	str	r0, [r7, #4]
 801424c:	460b      	mov	r3, r1
 801424e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	32ae      	adds	r2, #174	; 0xae
 801425a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801425e:	2b00      	cmp	r3, #0
 8014260:	d101      	bne.n	8014266 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8014262:	2303      	movs	r3, #3
 8014264:	e01c      	b.n	80142a0 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801426c:	b2db      	uxtb	r3, r3
 801426e:	2b03      	cmp	r3, #3
 8014270:	d115      	bne.n	801429e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	32ae      	adds	r2, #174	; 0xae
 801427c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014282:	2b00      	cmp	r3, #0
 8014284:	d00b      	beq.n	801429e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	32ae      	adds	r2, #174	; 0xae
 8014290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014296:	78fa      	ldrb	r2, [r7, #3]
 8014298:	4611      	mov	r1, r2
 801429a:	6878      	ldr	r0, [r7, #4]
 801429c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801429e:	2300      	movs	r3, #0
}
 80142a0:	4618      	mov	r0, r3
 80142a2:	3708      	adds	r7, #8
 80142a4:	46bd      	mov	sp, r7
 80142a6:	bd80      	pop	{r7, pc}

080142a8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80142a8:	b480      	push	{r7}
 80142aa:	b083      	sub	sp, #12
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80142b0:	2300      	movs	r3, #0
}
 80142b2:	4618      	mov	r0, r3
 80142b4:	370c      	adds	r7, #12
 80142b6:	46bd      	mov	sp, r7
 80142b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142bc:	4770      	bx	lr

080142be <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80142be:	b580      	push	{r7, lr}
 80142c0:	b084      	sub	sp, #16
 80142c2:	af00      	add	r7, sp, #0
 80142c4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80142c6:	2300      	movs	r3, #0
 80142c8:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	2201      	movs	r2, #1
 80142ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d00e      	beq.n	80142fa <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80142e2:	685b      	ldr	r3, [r3, #4]
 80142e4:	687a      	ldr	r2, [r7, #4]
 80142e6:	6852      	ldr	r2, [r2, #4]
 80142e8:	b2d2      	uxtb	r2, r2
 80142ea:	4611      	mov	r1, r2
 80142ec:	6878      	ldr	r0, [r7, #4]
 80142ee:	4798      	blx	r3
 80142f0:	4603      	mov	r3, r0
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d001      	beq.n	80142fa <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80142f6:	2303      	movs	r3, #3
 80142f8:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80142fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80142fc:	4618      	mov	r0, r3
 80142fe:	3710      	adds	r7, #16
 8014300:	46bd      	mov	sp, r7
 8014302:	bd80      	pop	{r7, pc}

08014304 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8014304:	b480      	push	{r7}
 8014306:	b083      	sub	sp, #12
 8014308:	af00      	add	r7, sp, #0
 801430a:	6078      	str	r0, [r7, #4]
 801430c:	460b      	mov	r3, r1
 801430e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8014310:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8014312:	4618      	mov	r0, r3
 8014314:	370c      	adds	r7, #12
 8014316:	46bd      	mov	sp, r7
 8014318:	f85d 7b04 	ldr.w	r7, [sp], #4
 801431c:	4770      	bx	lr

0801431e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801431e:	b480      	push	{r7}
 8014320:	b083      	sub	sp, #12
 8014322:	af00      	add	r7, sp, #0
 8014324:	6078      	str	r0, [r7, #4]
 8014326:	460b      	mov	r3, r1
 8014328:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801432a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801432c:	4618      	mov	r0, r3
 801432e:	370c      	adds	r7, #12
 8014330:	46bd      	mov	sp, r7
 8014332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014336:	4770      	bx	lr

08014338 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8014338:	b580      	push	{r7, lr}
 801433a:	b086      	sub	sp, #24
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]
 8014340:	460b      	mov	r3, r1
 8014342:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801434c:	2300      	movs	r3, #0
 801434e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	885b      	ldrh	r3, [r3, #2]
 8014354:	b29a      	uxth	r2, r3
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	781b      	ldrb	r3, [r3, #0]
 801435a:	b29b      	uxth	r3, r3
 801435c:	429a      	cmp	r2, r3
 801435e:	d920      	bls.n	80143a2 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	781b      	ldrb	r3, [r3, #0]
 8014364:	b29b      	uxth	r3, r3
 8014366:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8014368:	e013      	b.n	8014392 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801436a:	f107 030a 	add.w	r3, r7, #10
 801436e:	4619      	mov	r1, r3
 8014370:	6978      	ldr	r0, [r7, #20]
 8014372:	f000 f81b 	bl	80143ac <USBD_GetNextDesc>
 8014376:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8014378:	697b      	ldr	r3, [r7, #20]
 801437a:	785b      	ldrb	r3, [r3, #1]
 801437c:	2b05      	cmp	r3, #5
 801437e:	d108      	bne.n	8014392 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8014380:	697b      	ldr	r3, [r7, #20]
 8014382:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8014384:	693b      	ldr	r3, [r7, #16]
 8014386:	789b      	ldrb	r3, [r3, #2]
 8014388:	78fa      	ldrb	r2, [r7, #3]
 801438a:	429a      	cmp	r2, r3
 801438c:	d008      	beq.n	80143a0 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801438e:	2300      	movs	r3, #0
 8014390:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	885b      	ldrh	r3, [r3, #2]
 8014396:	b29a      	uxth	r2, r3
 8014398:	897b      	ldrh	r3, [r7, #10]
 801439a:	429a      	cmp	r2, r3
 801439c:	d8e5      	bhi.n	801436a <USBD_GetEpDesc+0x32>
 801439e:	e000      	b.n	80143a2 <USBD_GetEpDesc+0x6a>
          break;
 80143a0:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80143a2:	693b      	ldr	r3, [r7, #16]
}
 80143a4:	4618      	mov	r0, r3
 80143a6:	3718      	adds	r7, #24
 80143a8:	46bd      	mov	sp, r7
 80143aa:	bd80      	pop	{r7, pc}

080143ac <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80143ac:	b480      	push	{r7}
 80143ae:	b085      	sub	sp, #20
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	6078      	str	r0, [r7, #4]
 80143b4:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80143ba:	683b      	ldr	r3, [r7, #0]
 80143bc:	881a      	ldrh	r2, [r3, #0]
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	781b      	ldrb	r3, [r3, #0]
 80143c2:	b29b      	uxth	r3, r3
 80143c4:	4413      	add	r3, r2
 80143c6:	b29a      	uxth	r2, r3
 80143c8:	683b      	ldr	r3, [r7, #0]
 80143ca:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80143cc:	68fb      	ldr	r3, [r7, #12]
 80143ce:	781b      	ldrb	r3, [r3, #0]
 80143d0:	461a      	mov	r2, r3
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	4413      	add	r3, r2
 80143d6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80143d8:	68fb      	ldr	r3, [r7, #12]
}
 80143da:	4618      	mov	r0, r3
 80143dc:	3714      	adds	r7, #20
 80143de:	46bd      	mov	sp, r7
 80143e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143e4:	4770      	bx	lr

080143e6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80143e6:	b480      	push	{r7}
 80143e8:	b087      	sub	sp, #28
 80143ea:	af00      	add	r7, sp, #0
 80143ec:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80143f2:	697b      	ldr	r3, [r7, #20]
 80143f4:	781b      	ldrb	r3, [r3, #0]
 80143f6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80143f8:	697b      	ldr	r3, [r7, #20]
 80143fa:	3301      	adds	r3, #1
 80143fc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80143fe:	697b      	ldr	r3, [r7, #20]
 8014400:	781b      	ldrb	r3, [r3, #0]
 8014402:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8014404:	8a3b      	ldrh	r3, [r7, #16]
 8014406:	021b      	lsls	r3, r3, #8
 8014408:	b21a      	sxth	r2, r3
 801440a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801440e:	4313      	orrs	r3, r2
 8014410:	b21b      	sxth	r3, r3
 8014412:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8014414:	89fb      	ldrh	r3, [r7, #14]
}
 8014416:	4618      	mov	r0, r3
 8014418:	371c      	adds	r7, #28
 801441a:	46bd      	mov	sp, r7
 801441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014420:	4770      	bx	lr
	...

08014424 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014424:	b580      	push	{r7, lr}
 8014426:	b084      	sub	sp, #16
 8014428:	af00      	add	r7, sp, #0
 801442a:	6078      	str	r0, [r7, #4]
 801442c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801442e:	2300      	movs	r3, #0
 8014430:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014432:	683b      	ldr	r3, [r7, #0]
 8014434:	781b      	ldrb	r3, [r3, #0]
 8014436:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801443a:	2b40      	cmp	r3, #64	; 0x40
 801443c:	d005      	beq.n	801444a <USBD_StdDevReq+0x26>
 801443e:	2b40      	cmp	r3, #64	; 0x40
 8014440:	d857      	bhi.n	80144f2 <USBD_StdDevReq+0xce>
 8014442:	2b00      	cmp	r3, #0
 8014444:	d00f      	beq.n	8014466 <USBD_StdDevReq+0x42>
 8014446:	2b20      	cmp	r3, #32
 8014448:	d153      	bne.n	80144f2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	32ae      	adds	r2, #174	; 0xae
 8014454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014458:	689b      	ldr	r3, [r3, #8]
 801445a:	6839      	ldr	r1, [r7, #0]
 801445c:	6878      	ldr	r0, [r7, #4]
 801445e:	4798      	blx	r3
 8014460:	4603      	mov	r3, r0
 8014462:	73fb      	strb	r3, [r7, #15]
      break;
 8014464:	e04a      	b.n	80144fc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014466:	683b      	ldr	r3, [r7, #0]
 8014468:	785b      	ldrb	r3, [r3, #1]
 801446a:	2b09      	cmp	r3, #9
 801446c:	d83b      	bhi.n	80144e6 <USBD_StdDevReq+0xc2>
 801446e:	a201      	add	r2, pc, #4	; (adr r2, 8014474 <USBD_StdDevReq+0x50>)
 8014470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014474:	080144c9 	.word	0x080144c9
 8014478:	080144dd 	.word	0x080144dd
 801447c:	080144e7 	.word	0x080144e7
 8014480:	080144d3 	.word	0x080144d3
 8014484:	080144e7 	.word	0x080144e7
 8014488:	080144a7 	.word	0x080144a7
 801448c:	0801449d 	.word	0x0801449d
 8014490:	080144e7 	.word	0x080144e7
 8014494:	080144bf 	.word	0x080144bf
 8014498:	080144b1 	.word	0x080144b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801449c:	6839      	ldr	r1, [r7, #0]
 801449e:	6878      	ldr	r0, [r7, #4]
 80144a0:	f000 fa3c 	bl	801491c <USBD_GetDescriptor>
          break;
 80144a4:	e024      	b.n	80144f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80144a6:	6839      	ldr	r1, [r7, #0]
 80144a8:	6878      	ldr	r0, [r7, #4]
 80144aa:	f000 fbcb 	bl	8014c44 <USBD_SetAddress>
          break;
 80144ae:	e01f      	b.n	80144f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80144b0:	6839      	ldr	r1, [r7, #0]
 80144b2:	6878      	ldr	r0, [r7, #4]
 80144b4:	f000 fc0a 	bl	8014ccc <USBD_SetConfig>
 80144b8:	4603      	mov	r3, r0
 80144ba:	73fb      	strb	r3, [r7, #15]
          break;
 80144bc:	e018      	b.n	80144f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80144be:	6839      	ldr	r1, [r7, #0]
 80144c0:	6878      	ldr	r0, [r7, #4]
 80144c2:	f000 fcad 	bl	8014e20 <USBD_GetConfig>
          break;
 80144c6:	e013      	b.n	80144f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80144c8:	6839      	ldr	r1, [r7, #0]
 80144ca:	6878      	ldr	r0, [r7, #4]
 80144cc:	f000 fcde 	bl	8014e8c <USBD_GetStatus>
          break;
 80144d0:	e00e      	b.n	80144f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80144d2:	6839      	ldr	r1, [r7, #0]
 80144d4:	6878      	ldr	r0, [r7, #4]
 80144d6:	f000 fd0d 	bl	8014ef4 <USBD_SetFeature>
          break;
 80144da:	e009      	b.n	80144f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80144dc:	6839      	ldr	r1, [r7, #0]
 80144de:	6878      	ldr	r0, [r7, #4]
 80144e0:	f000 fd31 	bl	8014f46 <USBD_ClrFeature>
          break;
 80144e4:	e004      	b.n	80144f0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80144e6:	6839      	ldr	r1, [r7, #0]
 80144e8:	6878      	ldr	r0, [r7, #4]
 80144ea:	f000 fd88 	bl	8014ffe <USBD_CtlError>
          break;
 80144ee:	bf00      	nop
      }
      break;
 80144f0:	e004      	b.n	80144fc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80144f2:	6839      	ldr	r1, [r7, #0]
 80144f4:	6878      	ldr	r0, [r7, #4]
 80144f6:	f000 fd82 	bl	8014ffe <USBD_CtlError>
      break;
 80144fa:	bf00      	nop
  }

  return ret;
 80144fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80144fe:	4618      	mov	r0, r3
 8014500:	3710      	adds	r7, #16
 8014502:	46bd      	mov	sp, r7
 8014504:	bd80      	pop	{r7, pc}
 8014506:	bf00      	nop

08014508 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014508:	b580      	push	{r7, lr}
 801450a:	b084      	sub	sp, #16
 801450c:	af00      	add	r7, sp, #0
 801450e:	6078      	str	r0, [r7, #4]
 8014510:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014512:	2300      	movs	r3, #0
 8014514:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014516:	683b      	ldr	r3, [r7, #0]
 8014518:	781b      	ldrb	r3, [r3, #0]
 801451a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801451e:	2b40      	cmp	r3, #64	; 0x40
 8014520:	d005      	beq.n	801452e <USBD_StdItfReq+0x26>
 8014522:	2b40      	cmp	r3, #64	; 0x40
 8014524:	d852      	bhi.n	80145cc <USBD_StdItfReq+0xc4>
 8014526:	2b00      	cmp	r3, #0
 8014528:	d001      	beq.n	801452e <USBD_StdItfReq+0x26>
 801452a:	2b20      	cmp	r3, #32
 801452c:	d14e      	bne.n	80145cc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014534:	b2db      	uxtb	r3, r3
 8014536:	3b01      	subs	r3, #1
 8014538:	2b02      	cmp	r3, #2
 801453a:	d840      	bhi.n	80145be <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801453c:	683b      	ldr	r3, [r7, #0]
 801453e:	889b      	ldrh	r3, [r3, #4]
 8014540:	b2db      	uxtb	r3, r3
 8014542:	2b01      	cmp	r3, #1
 8014544:	d836      	bhi.n	80145b4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8014546:	683b      	ldr	r3, [r7, #0]
 8014548:	889b      	ldrh	r3, [r3, #4]
 801454a:	b2db      	uxtb	r3, r3
 801454c:	4619      	mov	r1, r3
 801454e:	6878      	ldr	r0, [r7, #4]
 8014550:	f7ff fed8 	bl	8014304 <USBD_CoreFindIF>
 8014554:	4603      	mov	r3, r0
 8014556:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014558:	7bbb      	ldrb	r3, [r7, #14]
 801455a:	2bff      	cmp	r3, #255	; 0xff
 801455c:	d01d      	beq.n	801459a <USBD_StdItfReq+0x92>
 801455e:	7bbb      	ldrb	r3, [r7, #14]
 8014560:	2b00      	cmp	r3, #0
 8014562:	d11a      	bne.n	801459a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8014564:	7bba      	ldrb	r2, [r7, #14]
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	32ae      	adds	r2, #174	; 0xae
 801456a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801456e:	689b      	ldr	r3, [r3, #8]
 8014570:	2b00      	cmp	r3, #0
 8014572:	d00f      	beq.n	8014594 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8014574:	7bba      	ldrb	r2, [r7, #14]
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801457c:	7bba      	ldrb	r2, [r7, #14]
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	32ae      	adds	r2, #174	; 0xae
 8014582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014586:	689b      	ldr	r3, [r3, #8]
 8014588:	6839      	ldr	r1, [r7, #0]
 801458a:	6878      	ldr	r0, [r7, #4]
 801458c:	4798      	blx	r3
 801458e:	4603      	mov	r3, r0
 8014590:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014592:	e004      	b.n	801459e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8014594:	2303      	movs	r3, #3
 8014596:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014598:	e001      	b.n	801459e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801459a:	2303      	movs	r3, #3
 801459c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801459e:	683b      	ldr	r3, [r7, #0]
 80145a0:	88db      	ldrh	r3, [r3, #6]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d110      	bne.n	80145c8 <USBD_StdItfReq+0xc0>
 80145a6:	7bfb      	ldrb	r3, [r7, #15]
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d10d      	bne.n	80145c8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80145ac:	6878      	ldr	r0, [r7, #4]
 80145ae:	f000 fdd4 	bl	801515a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80145b2:	e009      	b.n	80145c8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80145b4:	6839      	ldr	r1, [r7, #0]
 80145b6:	6878      	ldr	r0, [r7, #4]
 80145b8:	f000 fd21 	bl	8014ffe <USBD_CtlError>
          break;
 80145bc:	e004      	b.n	80145c8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80145be:	6839      	ldr	r1, [r7, #0]
 80145c0:	6878      	ldr	r0, [r7, #4]
 80145c2:	f000 fd1c 	bl	8014ffe <USBD_CtlError>
          break;
 80145c6:	e000      	b.n	80145ca <USBD_StdItfReq+0xc2>
          break;
 80145c8:	bf00      	nop
      }
      break;
 80145ca:	e004      	b.n	80145d6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80145cc:	6839      	ldr	r1, [r7, #0]
 80145ce:	6878      	ldr	r0, [r7, #4]
 80145d0:	f000 fd15 	bl	8014ffe <USBD_CtlError>
      break;
 80145d4:	bf00      	nop
  }

  return ret;
 80145d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80145d8:	4618      	mov	r0, r3
 80145da:	3710      	adds	r7, #16
 80145dc:	46bd      	mov	sp, r7
 80145de:	bd80      	pop	{r7, pc}

080145e0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80145e0:	b580      	push	{r7, lr}
 80145e2:	b084      	sub	sp, #16
 80145e4:	af00      	add	r7, sp, #0
 80145e6:	6078      	str	r0, [r7, #4]
 80145e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80145ea:	2300      	movs	r3, #0
 80145ec:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80145ee:	683b      	ldr	r3, [r7, #0]
 80145f0:	889b      	ldrh	r3, [r3, #4]
 80145f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80145f4:	683b      	ldr	r3, [r7, #0]
 80145f6:	781b      	ldrb	r3, [r3, #0]
 80145f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80145fc:	2b40      	cmp	r3, #64	; 0x40
 80145fe:	d007      	beq.n	8014610 <USBD_StdEPReq+0x30>
 8014600:	2b40      	cmp	r3, #64	; 0x40
 8014602:	f200 817f 	bhi.w	8014904 <USBD_StdEPReq+0x324>
 8014606:	2b00      	cmp	r3, #0
 8014608:	d02a      	beq.n	8014660 <USBD_StdEPReq+0x80>
 801460a:	2b20      	cmp	r3, #32
 801460c:	f040 817a 	bne.w	8014904 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8014610:	7bbb      	ldrb	r3, [r7, #14]
 8014612:	4619      	mov	r1, r3
 8014614:	6878      	ldr	r0, [r7, #4]
 8014616:	f7ff fe82 	bl	801431e <USBD_CoreFindEP>
 801461a:	4603      	mov	r3, r0
 801461c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801461e:	7b7b      	ldrb	r3, [r7, #13]
 8014620:	2bff      	cmp	r3, #255	; 0xff
 8014622:	f000 8174 	beq.w	801490e <USBD_StdEPReq+0x32e>
 8014626:	7b7b      	ldrb	r3, [r7, #13]
 8014628:	2b00      	cmp	r3, #0
 801462a:	f040 8170 	bne.w	801490e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801462e:	7b7a      	ldrb	r2, [r7, #13]
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8014636:	7b7a      	ldrb	r2, [r7, #13]
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	32ae      	adds	r2, #174	; 0xae
 801463c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014640:	689b      	ldr	r3, [r3, #8]
 8014642:	2b00      	cmp	r3, #0
 8014644:	f000 8163 	beq.w	801490e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8014648:	7b7a      	ldrb	r2, [r7, #13]
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	32ae      	adds	r2, #174	; 0xae
 801464e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014652:	689b      	ldr	r3, [r3, #8]
 8014654:	6839      	ldr	r1, [r7, #0]
 8014656:	6878      	ldr	r0, [r7, #4]
 8014658:	4798      	blx	r3
 801465a:	4603      	mov	r3, r0
 801465c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801465e:	e156      	b.n	801490e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014660:	683b      	ldr	r3, [r7, #0]
 8014662:	785b      	ldrb	r3, [r3, #1]
 8014664:	2b03      	cmp	r3, #3
 8014666:	d008      	beq.n	801467a <USBD_StdEPReq+0x9a>
 8014668:	2b03      	cmp	r3, #3
 801466a:	f300 8145 	bgt.w	80148f8 <USBD_StdEPReq+0x318>
 801466e:	2b00      	cmp	r3, #0
 8014670:	f000 809b 	beq.w	80147aa <USBD_StdEPReq+0x1ca>
 8014674:	2b01      	cmp	r3, #1
 8014676:	d03c      	beq.n	80146f2 <USBD_StdEPReq+0x112>
 8014678:	e13e      	b.n	80148f8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014680:	b2db      	uxtb	r3, r3
 8014682:	2b02      	cmp	r3, #2
 8014684:	d002      	beq.n	801468c <USBD_StdEPReq+0xac>
 8014686:	2b03      	cmp	r3, #3
 8014688:	d016      	beq.n	80146b8 <USBD_StdEPReq+0xd8>
 801468a:	e02c      	b.n	80146e6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801468c:	7bbb      	ldrb	r3, [r7, #14]
 801468e:	2b00      	cmp	r3, #0
 8014690:	d00d      	beq.n	80146ae <USBD_StdEPReq+0xce>
 8014692:	7bbb      	ldrb	r3, [r7, #14]
 8014694:	2b80      	cmp	r3, #128	; 0x80
 8014696:	d00a      	beq.n	80146ae <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014698:	7bbb      	ldrb	r3, [r7, #14]
 801469a:	4619      	mov	r1, r3
 801469c:	6878      	ldr	r0, [r7, #4]
 801469e:	f004 f8e0 	bl	8018862 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80146a2:	2180      	movs	r1, #128	; 0x80
 80146a4:	6878      	ldr	r0, [r7, #4]
 80146a6:	f004 f8dc 	bl	8018862 <USBD_LL_StallEP>
 80146aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80146ac:	e020      	b.n	80146f0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80146ae:	6839      	ldr	r1, [r7, #0]
 80146b0:	6878      	ldr	r0, [r7, #4]
 80146b2:	f000 fca4 	bl	8014ffe <USBD_CtlError>
              break;
 80146b6:	e01b      	b.n	80146f0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80146b8:	683b      	ldr	r3, [r7, #0]
 80146ba:	885b      	ldrh	r3, [r3, #2]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d10e      	bne.n	80146de <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80146c0:	7bbb      	ldrb	r3, [r7, #14]
 80146c2:	2b00      	cmp	r3, #0
 80146c4:	d00b      	beq.n	80146de <USBD_StdEPReq+0xfe>
 80146c6:	7bbb      	ldrb	r3, [r7, #14]
 80146c8:	2b80      	cmp	r3, #128	; 0x80
 80146ca:	d008      	beq.n	80146de <USBD_StdEPReq+0xfe>
 80146cc:	683b      	ldr	r3, [r7, #0]
 80146ce:	88db      	ldrh	r3, [r3, #6]
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d104      	bne.n	80146de <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80146d4:	7bbb      	ldrb	r3, [r7, #14]
 80146d6:	4619      	mov	r1, r3
 80146d8:	6878      	ldr	r0, [r7, #4]
 80146da:	f004 f8c2 	bl	8018862 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80146de:	6878      	ldr	r0, [r7, #4]
 80146e0:	f000 fd3b 	bl	801515a <USBD_CtlSendStatus>

              break;
 80146e4:	e004      	b.n	80146f0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80146e6:	6839      	ldr	r1, [r7, #0]
 80146e8:	6878      	ldr	r0, [r7, #4]
 80146ea:	f000 fc88 	bl	8014ffe <USBD_CtlError>
              break;
 80146ee:	bf00      	nop
          }
          break;
 80146f0:	e107      	b.n	8014902 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80146f8:	b2db      	uxtb	r3, r3
 80146fa:	2b02      	cmp	r3, #2
 80146fc:	d002      	beq.n	8014704 <USBD_StdEPReq+0x124>
 80146fe:	2b03      	cmp	r3, #3
 8014700:	d016      	beq.n	8014730 <USBD_StdEPReq+0x150>
 8014702:	e04b      	b.n	801479c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014704:	7bbb      	ldrb	r3, [r7, #14]
 8014706:	2b00      	cmp	r3, #0
 8014708:	d00d      	beq.n	8014726 <USBD_StdEPReq+0x146>
 801470a:	7bbb      	ldrb	r3, [r7, #14]
 801470c:	2b80      	cmp	r3, #128	; 0x80
 801470e:	d00a      	beq.n	8014726 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014710:	7bbb      	ldrb	r3, [r7, #14]
 8014712:	4619      	mov	r1, r3
 8014714:	6878      	ldr	r0, [r7, #4]
 8014716:	f004 f8a4 	bl	8018862 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801471a:	2180      	movs	r1, #128	; 0x80
 801471c:	6878      	ldr	r0, [r7, #4]
 801471e:	f004 f8a0 	bl	8018862 <USBD_LL_StallEP>
 8014722:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014724:	e040      	b.n	80147a8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8014726:	6839      	ldr	r1, [r7, #0]
 8014728:	6878      	ldr	r0, [r7, #4]
 801472a:	f000 fc68 	bl	8014ffe <USBD_CtlError>
              break;
 801472e:	e03b      	b.n	80147a8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014730:	683b      	ldr	r3, [r7, #0]
 8014732:	885b      	ldrh	r3, [r3, #2]
 8014734:	2b00      	cmp	r3, #0
 8014736:	d136      	bne.n	80147a6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014738:	7bbb      	ldrb	r3, [r7, #14]
 801473a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801473e:	2b00      	cmp	r3, #0
 8014740:	d004      	beq.n	801474c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014742:	7bbb      	ldrb	r3, [r7, #14]
 8014744:	4619      	mov	r1, r3
 8014746:	6878      	ldr	r0, [r7, #4]
 8014748:	f004 f8aa 	bl	80188a0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801474c:	6878      	ldr	r0, [r7, #4]
 801474e:	f000 fd04 	bl	801515a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8014752:	7bbb      	ldrb	r3, [r7, #14]
 8014754:	4619      	mov	r1, r3
 8014756:	6878      	ldr	r0, [r7, #4]
 8014758:	f7ff fde1 	bl	801431e <USBD_CoreFindEP>
 801475c:	4603      	mov	r3, r0
 801475e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014760:	7b7b      	ldrb	r3, [r7, #13]
 8014762:	2bff      	cmp	r3, #255	; 0xff
 8014764:	d01f      	beq.n	80147a6 <USBD_StdEPReq+0x1c6>
 8014766:	7b7b      	ldrb	r3, [r7, #13]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d11c      	bne.n	80147a6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801476c:	7b7a      	ldrb	r2, [r7, #13]
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8014774:	7b7a      	ldrb	r2, [r7, #13]
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	32ae      	adds	r2, #174	; 0xae
 801477a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801477e:	689b      	ldr	r3, [r3, #8]
 8014780:	2b00      	cmp	r3, #0
 8014782:	d010      	beq.n	80147a6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014784:	7b7a      	ldrb	r2, [r7, #13]
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	32ae      	adds	r2, #174	; 0xae
 801478a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801478e:	689b      	ldr	r3, [r3, #8]
 8014790:	6839      	ldr	r1, [r7, #0]
 8014792:	6878      	ldr	r0, [r7, #4]
 8014794:	4798      	blx	r3
 8014796:	4603      	mov	r3, r0
 8014798:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801479a:	e004      	b.n	80147a6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801479c:	6839      	ldr	r1, [r7, #0]
 801479e:	6878      	ldr	r0, [r7, #4]
 80147a0:	f000 fc2d 	bl	8014ffe <USBD_CtlError>
              break;
 80147a4:	e000      	b.n	80147a8 <USBD_StdEPReq+0x1c8>
              break;
 80147a6:	bf00      	nop
          }
          break;
 80147a8:	e0ab      	b.n	8014902 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80147b0:	b2db      	uxtb	r3, r3
 80147b2:	2b02      	cmp	r3, #2
 80147b4:	d002      	beq.n	80147bc <USBD_StdEPReq+0x1dc>
 80147b6:	2b03      	cmp	r3, #3
 80147b8:	d032      	beq.n	8014820 <USBD_StdEPReq+0x240>
 80147ba:	e097      	b.n	80148ec <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80147bc:	7bbb      	ldrb	r3, [r7, #14]
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d007      	beq.n	80147d2 <USBD_StdEPReq+0x1f2>
 80147c2:	7bbb      	ldrb	r3, [r7, #14]
 80147c4:	2b80      	cmp	r3, #128	; 0x80
 80147c6:	d004      	beq.n	80147d2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80147c8:	6839      	ldr	r1, [r7, #0]
 80147ca:	6878      	ldr	r0, [r7, #4]
 80147cc:	f000 fc17 	bl	8014ffe <USBD_CtlError>
                break;
 80147d0:	e091      	b.n	80148f6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80147d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	da0b      	bge.n	80147f2 <USBD_StdEPReq+0x212>
 80147da:	7bbb      	ldrb	r3, [r7, #14]
 80147dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80147e0:	4613      	mov	r3, r2
 80147e2:	009b      	lsls	r3, r3, #2
 80147e4:	4413      	add	r3, r2
 80147e6:	009b      	lsls	r3, r3, #2
 80147e8:	3310      	adds	r3, #16
 80147ea:	687a      	ldr	r2, [r7, #4]
 80147ec:	4413      	add	r3, r2
 80147ee:	3304      	adds	r3, #4
 80147f0:	e00b      	b.n	801480a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80147f2:	7bbb      	ldrb	r3, [r7, #14]
 80147f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80147f8:	4613      	mov	r3, r2
 80147fa:	009b      	lsls	r3, r3, #2
 80147fc:	4413      	add	r3, r2
 80147fe:	009b      	lsls	r3, r3, #2
 8014800:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014804:	687a      	ldr	r2, [r7, #4]
 8014806:	4413      	add	r3, r2
 8014808:	3304      	adds	r3, #4
 801480a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801480c:	68bb      	ldr	r3, [r7, #8]
 801480e:	2200      	movs	r2, #0
 8014810:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014812:	68bb      	ldr	r3, [r7, #8]
 8014814:	2202      	movs	r2, #2
 8014816:	4619      	mov	r1, r3
 8014818:	6878      	ldr	r0, [r7, #4]
 801481a:	f000 fc61 	bl	80150e0 <USBD_CtlSendData>
              break;
 801481e:	e06a      	b.n	80148f6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014820:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014824:	2b00      	cmp	r3, #0
 8014826:	da11      	bge.n	801484c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014828:	7bbb      	ldrb	r3, [r7, #14]
 801482a:	f003 020f 	and.w	r2, r3, #15
 801482e:	6879      	ldr	r1, [r7, #4]
 8014830:	4613      	mov	r3, r2
 8014832:	009b      	lsls	r3, r3, #2
 8014834:	4413      	add	r3, r2
 8014836:	009b      	lsls	r3, r3, #2
 8014838:	440b      	add	r3, r1
 801483a:	3324      	adds	r3, #36	; 0x24
 801483c:	881b      	ldrh	r3, [r3, #0]
 801483e:	2b00      	cmp	r3, #0
 8014840:	d117      	bne.n	8014872 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014842:	6839      	ldr	r1, [r7, #0]
 8014844:	6878      	ldr	r0, [r7, #4]
 8014846:	f000 fbda 	bl	8014ffe <USBD_CtlError>
                  break;
 801484a:	e054      	b.n	80148f6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801484c:	7bbb      	ldrb	r3, [r7, #14]
 801484e:	f003 020f 	and.w	r2, r3, #15
 8014852:	6879      	ldr	r1, [r7, #4]
 8014854:	4613      	mov	r3, r2
 8014856:	009b      	lsls	r3, r3, #2
 8014858:	4413      	add	r3, r2
 801485a:	009b      	lsls	r3, r3, #2
 801485c:	440b      	add	r3, r1
 801485e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014862:	881b      	ldrh	r3, [r3, #0]
 8014864:	2b00      	cmp	r3, #0
 8014866:	d104      	bne.n	8014872 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014868:	6839      	ldr	r1, [r7, #0]
 801486a:	6878      	ldr	r0, [r7, #4]
 801486c:	f000 fbc7 	bl	8014ffe <USBD_CtlError>
                  break;
 8014870:	e041      	b.n	80148f6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014872:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014876:	2b00      	cmp	r3, #0
 8014878:	da0b      	bge.n	8014892 <USBD_StdEPReq+0x2b2>
 801487a:	7bbb      	ldrb	r3, [r7, #14]
 801487c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014880:	4613      	mov	r3, r2
 8014882:	009b      	lsls	r3, r3, #2
 8014884:	4413      	add	r3, r2
 8014886:	009b      	lsls	r3, r3, #2
 8014888:	3310      	adds	r3, #16
 801488a:	687a      	ldr	r2, [r7, #4]
 801488c:	4413      	add	r3, r2
 801488e:	3304      	adds	r3, #4
 8014890:	e00b      	b.n	80148aa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014892:	7bbb      	ldrb	r3, [r7, #14]
 8014894:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014898:	4613      	mov	r3, r2
 801489a:	009b      	lsls	r3, r3, #2
 801489c:	4413      	add	r3, r2
 801489e:	009b      	lsls	r3, r3, #2
 80148a0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80148a4:	687a      	ldr	r2, [r7, #4]
 80148a6:	4413      	add	r3, r2
 80148a8:	3304      	adds	r3, #4
 80148aa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80148ac:	7bbb      	ldrb	r3, [r7, #14]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d002      	beq.n	80148b8 <USBD_StdEPReq+0x2d8>
 80148b2:	7bbb      	ldrb	r3, [r7, #14]
 80148b4:	2b80      	cmp	r3, #128	; 0x80
 80148b6:	d103      	bne.n	80148c0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80148b8:	68bb      	ldr	r3, [r7, #8]
 80148ba:	2200      	movs	r2, #0
 80148bc:	601a      	str	r2, [r3, #0]
 80148be:	e00e      	b.n	80148de <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80148c0:	7bbb      	ldrb	r3, [r7, #14]
 80148c2:	4619      	mov	r1, r3
 80148c4:	6878      	ldr	r0, [r7, #4]
 80148c6:	f004 f80a 	bl	80188de <USBD_LL_IsStallEP>
 80148ca:	4603      	mov	r3, r0
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d003      	beq.n	80148d8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80148d0:	68bb      	ldr	r3, [r7, #8]
 80148d2:	2201      	movs	r2, #1
 80148d4:	601a      	str	r2, [r3, #0]
 80148d6:	e002      	b.n	80148de <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80148d8:	68bb      	ldr	r3, [r7, #8]
 80148da:	2200      	movs	r2, #0
 80148dc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80148de:	68bb      	ldr	r3, [r7, #8]
 80148e0:	2202      	movs	r2, #2
 80148e2:	4619      	mov	r1, r3
 80148e4:	6878      	ldr	r0, [r7, #4]
 80148e6:	f000 fbfb 	bl	80150e0 <USBD_CtlSendData>
              break;
 80148ea:	e004      	b.n	80148f6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80148ec:	6839      	ldr	r1, [r7, #0]
 80148ee:	6878      	ldr	r0, [r7, #4]
 80148f0:	f000 fb85 	bl	8014ffe <USBD_CtlError>
              break;
 80148f4:	bf00      	nop
          }
          break;
 80148f6:	e004      	b.n	8014902 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80148f8:	6839      	ldr	r1, [r7, #0]
 80148fa:	6878      	ldr	r0, [r7, #4]
 80148fc:	f000 fb7f 	bl	8014ffe <USBD_CtlError>
          break;
 8014900:	bf00      	nop
      }
      break;
 8014902:	e005      	b.n	8014910 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8014904:	6839      	ldr	r1, [r7, #0]
 8014906:	6878      	ldr	r0, [r7, #4]
 8014908:	f000 fb79 	bl	8014ffe <USBD_CtlError>
      break;
 801490c:	e000      	b.n	8014910 <USBD_StdEPReq+0x330>
      break;
 801490e:	bf00      	nop
  }

  return ret;
 8014910:	7bfb      	ldrb	r3, [r7, #15]
}
 8014912:	4618      	mov	r0, r3
 8014914:	3710      	adds	r7, #16
 8014916:	46bd      	mov	sp, r7
 8014918:	bd80      	pop	{r7, pc}
	...

0801491c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801491c:	b580      	push	{r7, lr}
 801491e:	b084      	sub	sp, #16
 8014920:	af00      	add	r7, sp, #0
 8014922:	6078      	str	r0, [r7, #4]
 8014924:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014926:	2300      	movs	r3, #0
 8014928:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801492a:	2300      	movs	r3, #0
 801492c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801492e:	2300      	movs	r3, #0
 8014930:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014932:	683b      	ldr	r3, [r7, #0]
 8014934:	885b      	ldrh	r3, [r3, #2]
 8014936:	0a1b      	lsrs	r3, r3, #8
 8014938:	b29b      	uxth	r3, r3
 801493a:	3b01      	subs	r3, #1
 801493c:	2b0e      	cmp	r3, #14
 801493e:	f200 8152 	bhi.w	8014be6 <USBD_GetDescriptor+0x2ca>
 8014942:	a201      	add	r2, pc, #4	; (adr r2, 8014948 <USBD_GetDescriptor+0x2c>)
 8014944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014948:	080149b9 	.word	0x080149b9
 801494c:	080149d1 	.word	0x080149d1
 8014950:	08014a11 	.word	0x08014a11
 8014954:	08014be7 	.word	0x08014be7
 8014958:	08014be7 	.word	0x08014be7
 801495c:	08014b87 	.word	0x08014b87
 8014960:	08014bb3 	.word	0x08014bb3
 8014964:	08014be7 	.word	0x08014be7
 8014968:	08014be7 	.word	0x08014be7
 801496c:	08014be7 	.word	0x08014be7
 8014970:	08014be7 	.word	0x08014be7
 8014974:	08014be7 	.word	0x08014be7
 8014978:	08014be7 	.word	0x08014be7
 801497c:	08014be7 	.word	0x08014be7
 8014980:	08014985 	.word	0x08014985
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801498a:	69db      	ldr	r3, [r3, #28]
 801498c:	2b00      	cmp	r3, #0
 801498e:	d00b      	beq.n	80149a8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014996:	69db      	ldr	r3, [r3, #28]
 8014998:	687a      	ldr	r2, [r7, #4]
 801499a:	7c12      	ldrb	r2, [r2, #16]
 801499c:	f107 0108 	add.w	r1, r7, #8
 80149a0:	4610      	mov	r0, r2
 80149a2:	4798      	blx	r3
 80149a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80149a6:	e126      	b.n	8014bf6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80149a8:	6839      	ldr	r1, [r7, #0]
 80149aa:	6878      	ldr	r0, [r7, #4]
 80149ac:	f000 fb27 	bl	8014ffe <USBD_CtlError>
        err++;
 80149b0:	7afb      	ldrb	r3, [r7, #11]
 80149b2:	3301      	adds	r3, #1
 80149b4:	72fb      	strb	r3, [r7, #11]
      break;
 80149b6:	e11e      	b.n	8014bf6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80149be:	681b      	ldr	r3, [r3, #0]
 80149c0:	687a      	ldr	r2, [r7, #4]
 80149c2:	7c12      	ldrb	r2, [r2, #16]
 80149c4:	f107 0108 	add.w	r1, r7, #8
 80149c8:	4610      	mov	r0, r2
 80149ca:	4798      	blx	r3
 80149cc:	60f8      	str	r0, [r7, #12]
      break;
 80149ce:	e112      	b.n	8014bf6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	7c1b      	ldrb	r3, [r3, #16]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d10d      	bne.n	80149f4 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80149de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80149e0:	f107 0208 	add.w	r2, r7, #8
 80149e4:	4610      	mov	r0, r2
 80149e6:	4798      	blx	r3
 80149e8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	3301      	adds	r3, #1
 80149ee:	2202      	movs	r2, #2
 80149f0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80149f2:	e100      	b.n	8014bf6 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80149fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149fc:	f107 0208 	add.w	r2, r7, #8
 8014a00:	4610      	mov	r0, r2
 8014a02:	4798      	blx	r3
 8014a04:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	3301      	adds	r3, #1
 8014a0a:	2202      	movs	r2, #2
 8014a0c:	701a      	strb	r2, [r3, #0]
      break;
 8014a0e:	e0f2      	b.n	8014bf6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014a10:	683b      	ldr	r3, [r7, #0]
 8014a12:	885b      	ldrh	r3, [r3, #2]
 8014a14:	b2db      	uxtb	r3, r3
 8014a16:	2b05      	cmp	r3, #5
 8014a18:	f200 80ac 	bhi.w	8014b74 <USBD_GetDescriptor+0x258>
 8014a1c:	a201      	add	r2, pc, #4	; (adr r2, 8014a24 <USBD_GetDescriptor+0x108>)
 8014a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a22:	bf00      	nop
 8014a24:	08014a3d 	.word	0x08014a3d
 8014a28:	08014a71 	.word	0x08014a71
 8014a2c:	08014aa5 	.word	0x08014aa5
 8014a30:	08014ad9 	.word	0x08014ad9
 8014a34:	08014b0d 	.word	0x08014b0d
 8014a38:	08014b41 	.word	0x08014b41
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014a42:	685b      	ldr	r3, [r3, #4]
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d00b      	beq.n	8014a60 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014a4e:	685b      	ldr	r3, [r3, #4]
 8014a50:	687a      	ldr	r2, [r7, #4]
 8014a52:	7c12      	ldrb	r2, [r2, #16]
 8014a54:	f107 0108 	add.w	r1, r7, #8
 8014a58:	4610      	mov	r0, r2
 8014a5a:	4798      	blx	r3
 8014a5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014a5e:	e091      	b.n	8014b84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014a60:	6839      	ldr	r1, [r7, #0]
 8014a62:	6878      	ldr	r0, [r7, #4]
 8014a64:	f000 facb 	bl	8014ffe <USBD_CtlError>
            err++;
 8014a68:	7afb      	ldrb	r3, [r7, #11]
 8014a6a:	3301      	adds	r3, #1
 8014a6c:	72fb      	strb	r3, [r7, #11]
          break;
 8014a6e:	e089      	b.n	8014b84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014a76:	689b      	ldr	r3, [r3, #8]
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d00b      	beq.n	8014a94 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014a82:	689b      	ldr	r3, [r3, #8]
 8014a84:	687a      	ldr	r2, [r7, #4]
 8014a86:	7c12      	ldrb	r2, [r2, #16]
 8014a88:	f107 0108 	add.w	r1, r7, #8
 8014a8c:	4610      	mov	r0, r2
 8014a8e:	4798      	blx	r3
 8014a90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014a92:	e077      	b.n	8014b84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014a94:	6839      	ldr	r1, [r7, #0]
 8014a96:	6878      	ldr	r0, [r7, #4]
 8014a98:	f000 fab1 	bl	8014ffe <USBD_CtlError>
            err++;
 8014a9c:	7afb      	ldrb	r3, [r7, #11]
 8014a9e:	3301      	adds	r3, #1
 8014aa0:	72fb      	strb	r3, [r7, #11]
          break;
 8014aa2:	e06f      	b.n	8014b84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014aaa:	68db      	ldr	r3, [r3, #12]
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d00b      	beq.n	8014ac8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014ab6:	68db      	ldr	r3, [r3, #12]
 8014ab8:	687a      	ldr	r2, [r7, #4]
 8014aba:	7c12      	ldrb	r2, [r2, #16]
 8014abc:	f107 0108 	add.w	r1, r7, #8
 8014ac0:	4610      	mov	r0, r2
 8014ac2:	4798      	blx	r3
 8014ac4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014ac6:	e05d      	b.n	8014b84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014ac8:	6839      	ldr	r1, [r7, #0]
 8014aca:	6878      	ldr	r0, [r7, #4]
 8014acc:	f000 fa97 	bl	8014ffe <USBD_CtlError>
            err++;
 8014ad0:	7afb      	ldrb	r3, [r7, #11]
 8014ad2:	3301      	adds	r3, #1
 8014ad4:	72fb      	strb	r3, [r7, #11]
          break;
 8014ad6:	e055      	b.n	8014b84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014ade:	691b      	ldr	r3, [r3, #16]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d00b      	beq.n	8014afc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014aea:	691b      	ldr	r3, [r3, #16]
 8014aec:	687a      	ldr	r2, [r7, #4]
 8014aee:	7c12      	ldrb	r2, [r2, #16]
 8014af0:	f107 0108 	add.w	r1, r7, #8
 8014af4:	4610      	mov	r0, r2
 8014af6:	4798      	blx	r3
 8014af8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014afa:	e043      	b.n	8014b84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014afc:	6839      	ldr	r1, [r7, #0]
 8014afe:	6878      	ldr	r0, [r7, #4]
 8014b00:	f000 fa7d 	bl	8014ffe <USBD_CtlError>
            err++;
 8014b04:	7afb      	ldrb	r3, [r7, #11]
 8014b06:	3301      	adds	r3, #1
 8014b08:	72fb      	strb	r3, [r7, #11]
          break;
 8014b0a:	e03b      	b.n	8014b84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014b12:	695b      	ldr	r3, [r3, #20]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d00b      	beq.n	8014b30 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014b1e:	695b      	ldr	r3, [r3, #20]
 8014b20:	687a      	ldr	r2, [r7, #4]
 8014b22:	7c12      	ldrb	r2, [r2, #16]
 8014b24:	f107 0108 	add.w	r1, r7, #8
 8014b28:	4610      	mov	r0, r2
 8014b2a:	4798      	blx	r3
 8014b2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014b2e:	e029      	b.n	8014b84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014b30:	6839      	ldr	r1, [r7, #0]
 8014b32:	6878      	ldr	r0, [r7, #4]
 8014b34:	f000 fa63 	bl	8014ffe <USBD_CtlError>
            err++;
 8014b38:	7afb      	ldrb	r3, [r7, #11]
 8014b3a:	3301      	adds	r3, #1
 8014b3c:	72fb      	strb	r3, [r7, #11]
          break;
 8014b3e:	e021      	b.n	8014b84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014b46:	699b      	ldr	r3, [r3, #24]
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d00b      	beq.n	8014b64 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014b52:	699b      	ldr	r3, [r3, #24]
 8014b54:	687a      	ldr	r2, [r7, #4]
 8014b56:	7c12      	ldrb	r2, [r2, #16]
 8014b58:	f107 0108 	add.w	r1, r7, #8
 8014b5c:	4610      	mov	r0, r2
 8014b5e:	4798      	blx	r3
 8014b60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014b62:	e00f      	b.n	8014b84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014b64:	6839      	ldr	r1, [r7, #0]
 8014b66:	6878      	ldr	r0, [r7, #4]
 8014b68:	f000 fa49 	bl	8014ffe <USBD_CtlError>
            err++;
 8014b6c:	7afb      	ldrb	r3, [r7, #11]
 8014b6e:	3301      	adds	r3, #1
 8014b70:	72fb      	strb	r3, [r7, #11]
          break;
 8014b72:	e007      	b.n	8014b84 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014b74:	6839      	ldr	r1, [r7, #0]
 8014b76:	6878      	ldr	r0, [r7, #4]
 8014b78:	f000 fa41 	bl	8014ffe <USBD_CtlError>
          err++;
 8014b7c:	7afb      	ldrb	r3, [r7, #11]
 8014b7e:	3301      	adds	r3, #1
 8014b80:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8014b82:	bf00      	nop
      }
      break;
 8014b84:	e037      	b.n	8014bf6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	7c1b      	ldrb	r3, [r3, #16]
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d109      	bne.n	8014ba2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014b96:	f107 0208 	add.w	r2, r7, #8
 8014b9a:	4610      	mov	r0, r2
 8014b9c:	4798      	blx	r3
 8014b9e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014ba0:	e029      	b.n	8014bf6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014ba2:	6839      	ldr	r1, [r7, #0]
 8014ba4:	6878      	ldr	r0, [r7, #4]
 8014ba6:	f000 fa2a 	bl	8014ffe <USBD_CtlError>
        err++;
 8014baa:	7afb      	ldrb	r3, [r7, #11]
 8014bac:	3301      	adds	r3, #1
 8014bae:	72fb      	strb	r3, [r7, #11]
      break;
 8014bb0:	e021      	b.n	8014bf6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	7c1b      	ldrb	r3, [r3, #16]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d10d      	bne.n	8014bd6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014bc2:	f107 0208 	add.w	r2, r7, #8
 8014bc6:	4610      	mov	r0, r2
 8014bc8:	4798      	blx	r3
 8014bca:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	3301      	adds	r3, #1
 8014bd0:	2207      	movs	r2, #7
 8014bd2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014bd4:	e00f      	b.n	8014bf6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014bd6:	6839      	ldr	r1, [r7, #0]
 8014bd8:	6878      	ldr	r0, [r7, #4]
 8014bda:	f000 fa10 	bl	8014ffe <USBD_CtlError>
        err++;
 8014bde:	7afb      	ldrb	r3, [r7, #11]
 8014be0:	3301      	adds	r3, #1
 8014be2:	72fb      	strb	r3, [r7, #11]
      break;
 8014be4:	e007      	b.n	8014bf6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8014be6:	6839      	ldr	r1, [r7, #0]
 8014be8:	6878      	ldr	r0, [r7, #4]
 8014bea:	f000 fa08 	bl	8014ffe <USBD_CtlError>
      err++;
 8014bee:	7afb      	ldrb	r3, [r7, #11]
 8014bf0:	3301      	adds	r3, #1
 8014bf2:	72fb      	strb	r3, [r7, #11]
      break;
 8014bf4:	bf00      	nop
  }

  if (err != 0U)
 8014bf6:	7afb      	ldrb	r3, [r7, #11]
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d11e      	bne.n	8014c3a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8014bfc:	683b      	ldr	r3, [r7, #0]
 8014bfe:	88db      	ldrh	r3, [r3, #6]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d016      	beq.n	8014c32 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8014c04:	893b      	ldrh	r3, [r7, #8]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d00e      	beq.n	8014c28 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8014c0a:	683b      	ldr	r3, [r7, #0]
 8014c0c:	88da      	ldrh	r2, [r3, #6]
 8014c0e:	893b      	ldrh	r3, [r7, #8]
 8014c10:	4293      	cmp	r3, r2
 8014c12:	bf28      	it	cs
 8014c14:	4613      	movcs	r3, r2
 8014c16:	b29b      	uxth	r3, r3
 8014c18:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014c1a:	893b      	ldrh	r3, [r7, #8]
 8014c1c:	461a      	mov	r2, r3
 8014c1e:	68f9      	ldr	r1, [r7, #12]
 8014c20:	6878      	ldr	r0, [r7, #4]
 8014c22:	f000 fa5d 	bl	80150e0 <USBD_CtlSendData>
 8014c26:	e009      	b.n	8014c3c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014c28:	6839      	ldr	r1, [r7, #0]
 8014c2a:	6878      	ldr	r0, [r7, #4]
 8014c2c:	f000 f9e7 	bl	8014ffe <USBD_CtlError>
 8014c30:	e004      	b.n	8014c3c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8014c32:	6878      	ldr	r0, [r7, #4]
 8014c34:	f000 fa91 	bl	801515a <USBD_CtlSendStatus>
 8014c38:	e000      	b.n	8014c3c <USBD_GetDescriptor+0x320>
    return;
 8014c3a:	bf00      	nop
  }
}
 8014c3c:	3710      	adds	r7, #16
 8014c3e:	46bd      	mov	sp, r7
 8014c40:	bd80      	pop	{r7, pc}
 8014c42:	bf00      	nop

08014c44 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014c44:	b580      	push	{r7, lr}
 8014c46:	b084      	sub	sp, #16
 8014c48:	af00      	add	r7, sp, #0
 8014c4a:	6078      	str	r0, [r7, #4]
 8014c4c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014c4e:	683b      	ldr	r3, [r7, #0]
 8014c50:	889b      	ldrh	r3, [r3, #4]
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d131      	bne.n	8014cba <USBD_SetAddress+0x76>
 8014c56:	683b      	ldr	r3, [r7, #0]
 8014c58:	88db      	ldrh	r3, [r3, #6]
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	d12d      	bne.n	8014cba <USBD_SetAddress+0x76>
 8014c5e:	683b      	ldr	r3, [r7, #0]
 8014c60:	885b      	ldrh	r3, [r3, #2]
 8014c62:	2b7f      	cmp	r3, #127	; 0x7f
 8014c64:	d829      	bhi.n	8014cba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014c66:	683b      	ldr	r3, [r7, #0]
 8014c68:	885b      	ldrh	r3, [r3, #2]
 8014c6a:	b2db      	uxtb	r3, r3
 8014c6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014c70:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014c78:	b2db      	uxtb	r3, r3
 8014c7a:	2b03      	cmp	r3, #3
 8014c7c:	d104      	bne.n	8014c88 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8014c7e:	6839      	ldr	r1, [r7, #0]
 8014c80:	6878      	ldr	r0, [r7, #4]
 8014c82:	f000 f9bc 	bl	8014ffe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014c86:	e01d      	b.n	8014cc4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	7bfa      	ldrb	r2, [r7, #15]
 8014c8c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014c90:	7bfb      	ldrb	r3, [r7, #15]
 8014c92:	4619      	mov	r1, r3
 8014c94:	6878      	ldr	r0, [r7, #4]
 8014c96:	f003 fe4e 	bl	8018936 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014c9a:	6878      	ldr	r0, [r7, #4]
 8014c9c:	f000 fa5d 	bl	801515a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014ca0:	7bfb      	ldrb	r3, [r7, #15]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d004      	beq.n	8014cb0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	2202      	movs	r2, #2
 8014caa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014cae:	e009      	b.n	8014cc4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	2201      	movs	r2, #1
 8014cb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014cb8:	e004      	b.n	8014cc4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014cba:	6839      	ldr	r1, [r7, #0]
 8014cbc:	6878      	ldr	r0, [r7, #4]
 8014cbe:	f000 f99e 	bl	8014ffe <USBD_CtlError>
  }
}
 8014cc2:	bf00      	nop
 8014cc4:	bf00      	nop
 8014cc6:	3710      	adds	r7, #16
 8014cc8:	46bd      	mov	sp, r7
 8014cca:	bd80      	pop	{r7, pc}

08014ccc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014ccc:	b580      	push	{r7, lr}
 8014cce:	b084      	sub	sp, #16
 8014cd0:	af00      	add	r7, sp, #0
 8014cd2:	6078      	str	r0, [r7, #4]
 8014cd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014cd6:	2300      	movs	r3, #0
 8014cd8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014cda:	683b      	ldr	r3, [r7, #0]
 8014cdc:	885b      	ldrh	r3, [r3, #2]
 8014cde:	b2da      	uxtb	r2, r3
 8014ce0:	4b4e      	ldr	r3, [pc, #312]	; (8014e1c <USBD_SetConfig+0x150>)
 8014ce2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014ce4:	4b4d      	ldr	r3, [pc, #308]	; (8014e1c <USBD_SetConfig+0x150>)
 8014ce6:	781b      	ldrb	r3, [r3, #0]
 8014ce8:	2b01      	cmp	r3, #1
 8014cea:	d905      	bls.n	8014cf8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014cec:	6839      	ldr	r1, [r7, #0]
 8014cee:	6878      	ldr	r0, [r7, #4]
 8014cf0:	f000 f985 	bl	8014ffe <USBD_CtlError>
    return USBD_FAIL;
 8014cf4:	2303      	movs	r3, #3
 8014cf6:	e08c      	b.n	8014e12 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014cfe:	b2db      	uxtb	r3, r3
 8014d00:	2b02      	cmp	r3, #2
 8014d02:	d002      	beq.n	8014d0a <USBD_SetConfig+0x3e>
 8014d04:	2b03      	cmp	r3, #3
 8014d06:	d029      	beq.n	8014d5c <USBD_SetConfig+0x90>
 8014d08:	e075      	b.n	8014df6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8014d0a:	4b44      	ldr	r3, [pc, #272]	; (8014e1c <USBD_SetConfig+0x150>)
 8014d0c:	781b      	ldrb	r3, [r3, #0]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d020      	beq.n	8014d54 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8014d12:	4b42      	ldr	r3, [pc, #264]	; (8014e1c <USBD_SetConfig+0x150>)
 8014d14:	781b      	ldrb	r3, [r3, #0]
 8014d16:	461a      	mov	r2, r3
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014d1c:	4b3f      	ldr	r3, [pc, #252]	; (8014e1c <USBD_SetConfig+0x150>)
 8014d1e:	781b      	ldrb	r3, [r3, #0]
 8014d20:	4619      	mov	r1, r3
 8014d22:	6878      	ldr	r0, [r7, #4]
 8014d24:	f7fe ffbc 	bl	8013ca0 <USBD_SetClassConfig>
 8014d28:	4603      	mov	r3, r0
 8014d2a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014d2c:	7bfb      	ldrb	r3, [r7, #15]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d008      	beq.n	8014d44 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8014d32:	6839      	ldr	r1, [r7, #0]
 8014d34:	6878      	ldr	r0, [r7, #4]
 8014d36:	f000 f962 	bl	8014ffe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	2202      	movs	r2, #2
 8014d3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014d42:	e065      	b.n	8014e10 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014d44:	6878      	ldr	r0, [r7, #4]
 8014d46:	f000 fa08 	bl	801515a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	2203      	movs	r2, #3
 8014d4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014d52:	e05d      	b.n	8014e10 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014d54:	6878      	ldr	r0, [r7, #4]
 8014d56:	f000 fa00 	bl	801515a <USBD_CtlSendStatus>
      break;
 8014d5a:	e059      	b.n	8014e10 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014d5c:	4b2f      	ldr	r3, [pc, #188]	; (8014e1c <USBD_SetConfig+0x150>)
 8014d5e:	781b      	ldrb	r3, [r3, #0]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d112      	bne.n	8014d8a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	2202      	movs	r2, #2
 8014d68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8014d6c:	4b2b      	ldr	r3, [pc, #172]	; (8014e1c <USBD_SetConfig+0x150>)
 8014d6e:	781b      	ldrb	r3, [r3, #0]
 8014d70:	461a      	mov	r2, r3
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014d76:	4b29      	ldr	r3, [pc, #164]	; (8014e1c <USBD_SetConfig+0x150>)
 8014d78:	781b      	ldrb	r3, [r3, #0]
 8014d7a:	4619      	mov	r1, r3
 8014d7c:	6878      	ldr	r0, [r7, #4]
 8014d7e:	f7fe ffab 	bl	8013cd8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014d82:	6878      	ldr	r0, [r7, #4]
 8014d84:	f000 f9e9 	bl	801515a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014d88:	e042      	b.n	8014e10 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8014d8a:	4b24      	ldr	r3, [pc, #144]	; (8014e1c <USBD_SetConfig+0x150>)
 8014d8c:	781b      	ldrb	r3, [r3, #0]
 8014d8e:	461a      	mov	r2, r3
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	685b      	ldr	r3, [r3, #4]
 8014d94:	429a      	cmp	r2, r3
 8014d96:	d02a      	beq.n	8014dee <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	685b      	ldr	r3, [r3, #4]
 8014d9c:	b2db      	uxtb	r3, r3
 8014d9e:	4619      	mov	r1, r3
 8014da0:	6878      	ldr	r0, [r7, #4]
 8014da2:	f7fe ff99 	bl	8013cd8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014da6:	4b1d      	ldr	r3, [pc, #116]	; (8014e1c <USBD_SetConfig+0x150>)
 8014da8:	781b      	ldrb	r3, [r3, #0]
 8014daa:	461a      	mov	r2, r3
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014db0:	4b1a      	ldr	r3, [pc, #104]	; (8014e1c <USBD_SetConfig+0x150>)
 8014db2:	781b      	ldrb	r3, [r3, #0]
 8014db4:	4619      	mov	r1, r3
 8014db6:	6878      	ldr	r0, [r7, #4]
 8014db8:	f7fe ff72 	bl	8013ca0 <USBD_SetClassConfig>
 8014dbc:	4603      	mov	r3, r0
 8014dbe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014dc0:	7bfb      	ldrb	r3, [r7, #15]
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d00f      	beq.n	8014de6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8014dc6:	6839      	ldr	r1, [r7, #0]
 8014dc8:	6878      	ldr	r0, [r7, #4]
 8014dca:	f000 f918 	bl	8014ffe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	685b      	ldr	r3, [r3, #4]
 8014dd2:	b2db      	uxtb	r3, r3
 8014dd4:	4619      	mov	r1, r3
 8014dd6:	6878      	ldr	r0, [r7, #4]
 8014dd8:	f7fe ff7e 	bl	8013cd8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	2202      	movs	r2, #2
 8014de0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014de4:	e014      	b.n	8014e10 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014de6:	6878      	ldr	r0, [r7, #4]
 8014de8:	f000 f9b7 	bl	801515a <USBD_CtlSendStatus>
      break;
 8014dec:	e010      	b.n	8014e10 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014dee:	6878      	ldr	r0, [r7, #4]
 8014df0:	f000 f9b3 	bl	801515a <USBD_CtlSendStatus>
      break;
 8014df4:	e00c      	b.n	8014e10 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8014df6:	6839      	ldr	r1, [r7, #0]
 8014df8:	6878      	ldr	r0, [r7, #4]
 8014dfa:	f000 f900 	bl	8014ffe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014dfe:	4b07      	ldr	r3, [pc, #28]	; (8014e1c <USBD_SetConfig+0x150>)
 8014e00:	781b      	ldrb	r3, [r3, #0]
 8014e02:	4619      	mov	r1, r3
 8014e04:	6878      	ldr	r0, [r7, #4]
 8014e06:	f7fe ff67 	bl	8013cd8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014e0a:	2303      	movs	r3, #3
 8014e0c:	73fb      	strb	r3, [r7, #15]
      break;
 8014e0e:	bf00      	nop
  }

  return ret;
 8014e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e12:	4618      	mov	r0, r3
 8014e14:	3710      	adds	r7, #16
 8014e16:	46bd      	mov	sp, r7
 8014e18:	bd80      	pop	{r7, pc}
 8014e1a:	bf00      	nop
 8014e1c:	200067a4 	.word	0x200067a4

08014e20 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014e20:	b580      	push	{r7, lr}
 8014e22:	b082      	sub	sp, #8
 8014e24:	af00      	add	r7, sp, #0
 8014e26:	6078      	str	r0, [r7, #4]
 8014e28:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014e2a:	683b      	ldr	r3, [r7, #0]
 8014e2c:	88db      	ldrh	r3, [r3, #6]
 8014e2e:	2b01      	cmp	r3, #1
 8014e30:	d004      	beq.n	8014e3c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014e32:	6839      	ldr	r1, [r7, #0]
 8014e34:	6878      	ldr	r0, [r7, #4]
 8014e36:	f000 f8e2 	bl	8014ffe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014e3a:	e023      	b.n	8014e84 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014e42:	b2db      	uxtb	r3, r3
 8014e44:	2b02      	cmp	r3, #2
 8014e46:	dc02      	bgt.n	8014e4e <USBD_GetConfig+0x2e>
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	dc03      	bgt.n	8014e54 <USBD_GetConfig+0x34>
 8014e4c:	e015      	b.n	8014e7a <USBD_GetConfig+0x5a>
 8014e4e:	2b03      	cmp	r3, #3
 8014e50:	d00b      	beq.n	8014e6a <USBD_GetConfig+0x4a>
 8014e52:	e012      	b.n	8014e7a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	2200      	movs	r2, #0
 8014e58:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	3308      	adds	r3, #8
 8014e5e:	2201      	movs	r2, #1
 8014e60:	4619      	mov	r1, r3
 8014e62:	6878      	ldr	r0, [r7, #4]
 8014e64:	f000 f93c 	bl	80150e0 <USBD_CtlSendData>
        break;
 8014e68:	e00c      	b.n	8014e84 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	3304      	adds	r3, #4
 8014e6e:	2201      	movs	r2, #1
 8014e70:	4619      	mov	r1, r3
 8014e72:	6878      	ldr	r0, [r7, #4]
 8014e74:	f000 f934 	bl	80150e0 <USBD_CtlSendData>
        break;
 8014e78:	e004      	b.n	8014e84 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8014e7a:	6839      	ldr	r1, [r7, #0]
 8014e7c:	6878      	ldr	r0, [r7, #4]
 8014e7e:	f000 f8be 	bl	8014ffe <USBD_CtlError>
        break;
 8014e82:	bf00      	nop
}
 8014e84:	bf00      	nop
 8014e86:	3708      	adds	r7, #8
 8014e88:	46bd      	mov	sp, r7
 8014e8a:	bd80      	pop	{r7, pc}

08014e8c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014e8c:	b580      	push	{r7, lr}
 8014e8e:	b082      	sub	sp, #8
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	6078      	str	r0, [r7, #4]
 8014e94:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014e9c:	b2db      	uxtb	r3, r3
 8014e9e:	3b01      	subs	r3, #1
 8014ea0:	2b02      	cmp	r3, #2
 8014ea2:	d81e      	bhi.n	8014ee2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014ea4:	683b      	ldr	r3, [r7, #0]
 8014ea6:	88db      	ldrh	r3, [r3, #6]
 8014ea8:	2b02      	cmp	r3, #2
 8014eaa:	d004      	beq.n	8014eb6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014eac:	6839      	ldr	r1, [r7, #0]
 8014eae:	6878      	ldr	r0, [r7, #4]
 8014eb0:	f000 f8a5 	bl	8014ffe <USBD_CtlError>
        break;
 8014eb4:	e01a      	b.n	8014eec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	2201      	movs	r2, #1
 8014eba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d005      	beq.n	8014ed2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	68db      	ldr	r3, [r3, #12]
 8014eca:	f043 0202 	orr.w	r2, r3, #2
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	330c      	adds	r3, #12
 8014ed6:	2202      	movs	r2, #2
 8014ed8:	4619      	mov	r1, r3
 8014eda:	6878      	ldr	r0, [r7, #4]
 8014edc:	f000 f900 	bl	80150e0 <USBD_CtlSendData>
      break;
 8014ee0:	e004      	b.n	8014eec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014ee2:	6839      	ldr	r1, [r7, #0]
 8014ee4:	6878      	ldr	r0, [r7, #4]
 8014ee6:	f000 f88a 	bl	8014ffe <USBD_CtlError>
      break;
 8014eea:	bf00      	nop
  }
}
 8014eec:	bf00      	nop
 8014eee:	3708      	adds	r7, #8
 8014ef0:	46bd      	mov	sp, r7
 8014ef2:	bd80      	pop	{r7, pc}

08014ef4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014ef4:	b580      	push	{r7, lr}
 8014ef6:	b082      	sub	sp, #8
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	6078      	str	r0, [r7, #4]
 8014efc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014efe:	683b      	ldr	r3, [r7, #0]
 8014f00:	885b      	ldrh	r3, [r3, #2]
 8014f02:	2b01      	cmp	r3, #1
 8014f04:	d107      	bne.n	8014f16 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	2201      	movs	r2, #1
 8014f0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014f0e:	6878      	ldr	r0, [r7, #4]
 8014f10:	f000 f923 	bl	801515a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8014f14:	e013      	b.n	8014f3e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8014f16:	683b      	ldr	r3, [r7, #0]
 8014f18:	885b      	ldrh	r3, [r3, #2]
 8014f1a:	2b02      	cmp	r3, #2
 8014f1c:	d10b      	bne.n	8014f36 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8014f1e:	683b      	ldr	r3, [r7, #0]
 8014f20:	889b      	ldrh	r3, [r3, #4]
 8014f22:	0a1b      	lsrs	r3, r3, #8
 8014f24:	b29b      	uxth	r3, r3
 8014f26:	b2da      	uxtb	r2, r3
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8014f2e:	6878      	ldr	r0, [r7, #4]
 8014f30:	f000 f913 	bl	801515a <USBD_CtlSendStatus>
}
 8014f34:	e003      	b.n	8014f3e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8014f36:	6839      	ldr	r1, [r7, #0]
 8014f38:	6878      	ldr	r0, [r7, #4]
 8014f3a:	f000 f860 	bl	8014ffe <USBD_CtlError>
}
 8014f3e:	bf00      	nop
 8014f40:	3708      	adds	r7, #8
 8014f42:	46bd      	mov	sp, r7
 8014f44:	bd80      	pop	{r7, pc}

08014f46 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014f46:	b580      	push	{r7, lr}
 8014f48:	b082      	sub	sp, #8
 8014f4a:	af00      	add	r7, sp, #0
 8014f4c:	6078      	str	r0, [r7, #4]
 8014f4e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f56:	b2db      	uxtb	r3, r3
 8014f58:	3b01      	subs	r3, #1
 8014f5a:	2b02      	cmp	r3, #2
 8014f5c:	d80b      	bhi.n	8014f76 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014f5e:	683b      	ldr	r3, [r7, #0]
 8014f60:	885b      	ldrh	r3, [r3, #2]
 8014f62:	2b01      	cmp	r3, #1
 8014f64:	d10c      	bne.n	8014f80 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	2200      	movs	r2, #0
 8014f6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014f6e:	6878      	ldr	r0, [r7, #4]
 8014f70:	f000 f8f3 	bl	801515a <USBD_CtlSendStatus>
      }
      break;
 8014f74:	e004      	b.n	8014f80 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014f76:	6839      	ldr	r1, [r7, #0]
 8014f78:	6878      	ldr	r0, [r7, #4]
 8014f7a:	f000 f840 	bl	8014ffe <USBD_CtlError>
      break;
 8014f7e:	e000      	b.n	8014f82 <USBD_ClrFeature+0x3c>
      break;
 8014f80:	bf00      	nop
  }
}
 8014f82:	bf00      	nop
 8014f84:	3708      	adds	r7, #8
 8014f86:	46bd      	mov	sp, r7
 8014f88:	bd80      	pop	{r7, pc}

08014f8a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014f8a:	b580      	push	{r7, lr}
 8014f8c:	b084      	sub	sp, #16
 8014f8e:	af00      	add	r7, sp, #0
 8014f90:	6078      	str	r0, [r7, #4]
 8014f92:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014f94:	683b      	ldr	r3, [r7, #0]
 8014f96:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	781a      	ldrb	r2, [r3, #0]
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	3301      	adds	r3, #1
 8014fa4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	781a      	ldrb	r2, [r3, #0]
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	3301      	adds	r3, #1
 8014fb2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014fb4:	68f8      	ldr	r0, [r7, #12]
 8014fb6:	f7ff fa16 	bl	80143e6 <SWAPBYTE>
 8014fba:	4603      	mov	r3, r0
 8014fbc:	461a      	mov	r2, r3
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	3301      	adds	r3, #1
 8014fc6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	3301      	adds	r3, #1
 8014fcc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014fce:	68f8      	ldr	r0, [r7, #12]
 8014fd0:	f7ff fa09 	bl	80143e6 <SWAPBYTE>
 8014fd4:	4603      	mov	r3, r0
 8014fd6:	461a      	mov	r2, r3
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014fdc:	68fb      	ldr	r3, [r7, #12]
 8014fde:	3301      	adds	r3, #1
 8014fe0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014fe2:	68fb      	ldr	r3, [r7, #12]
 8014fe4:	3301      	adds	r3, #1
 8014fe6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014fe8:	68f8      	ldr	r0, [r7, #12]
 8014fea:	f7ff f9fc 	bl	80143e6 <SWAPBYTE>
 8014fee:	4603      	mov	r3, r0
 8014ff0:	461a      	mov	r2, r3
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	80da      	strh	r2, [r3, #6]
}
 8014ff6:	bf00      	nop
 8014ff8:	3710      	adds	r7, #16
 8014ffa:	46bd      	mov	sp, r7
 8014ffc:	bd80      	pop	{r7, pc}

08014ffe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014ffe:	b580      	push	{r7, lr}
 8015000:	b082      	sub	sp, #8
 8015002:	af00      	add	r7, sp, #0
 8015004:	6078      	str	r0, [r7, #4]
 8015006:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015008:	2180      	movs	r1, #128	; 0x80
 801500a:	6878      	ldr	r0, [r7, #4]
 801500c:	f003 fc29 	bl	8018862 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015010:	2100      	movs	r1, #0
 8015012:	6878      	ldr	r0, [r7, #4]
 8015014:	f003 fc25 	bl	8018862 <USBD_LL_StallEP>
}
 8015018:	bf00      	nop
 801501a:	3708      	adds	r7, #8
 801501c:	46bd      	mov	sp, r7
 801501e:	bd80      	pop	{r7, pc}

08015020 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015020:	b580      	push	{r7, lr}
 8015022:	b086      	sub	sp, #24
 8015024:	af00      	add	r7, sp, #0
 8015026:	60f8      	str	r0, [r7, #12]
 8015028:	60b9      	str	r1, [r7, #8]
 801502a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801502c:	2300      	movs	r3, #0
 801502e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8015030:	68fb      	ldr	r3, [r7, #12]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d036      	beq.n	80150a4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801503a:	6938      	ldr	r0, [r7, #16]
 801503c:	f000 f836 	bl	80150ac <USBD_GetLen>
 8015040:	4603      	mov	r3, r0
 8015042:	3301      	adds	r3, #1
 8015044:	b29b      	uxth	r3, r3
 8015046:	005b      	lsls	r3, r3, #1
 8015048:	b29a      	uxth	r2, r3
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801504e:	7dfb      	ldrb	r3, [r7, #23]
 8015050:	68ba      	ldr	r2, [r7, #8]
 8015052:	4413      	add	r3, r2
 8015054:	687a      	ldr	r2, [r7, #4]
 8015056:	7812      	ldrb	r2, [r2, #0]
 8015058:	701a      	strb	r2, [r3, #0]
  idx++;
 801505a:	7dfb      	ldrb	r3, [r7, #23]
 801505c:	3301      	adds	r3, #1
 801505e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8015060:	7dfb      	ldrb	r3, [r7, #23]
 8015062:	68ba      	ldr	r2, [r7, #8]
 8015064:	4413      	add	r3, r2
 8015066:	2203      	movs	r2, #3
 8015068:	701a      	strb	r2, [r3, #0]
  idx++;
 801506a:	7dfb      	ldrb	r3, [r7, #23]
 801506c:	3301      	adds	r3, #1
 801506e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8015070:	e013      	b.n	801509a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8015072:	7dfb      	ldrb	r3, [r7, #23]
 8015074:	68ba      	ldr	r2, [r7, #8]
 8015076:	4413      	add	r3, r2
 8015078:	693a      	ldr	r2, [r7, #16]
 801507a:	7812      	ldrb	r2, [r2, #0]
 801507c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801507e:	693b      	ldr	r3, [r7, #16]
 8015080:	3301      	adds	r3, #1
 8015082:	613b      	str	r3, [r7, #16]
    idx++;
 8015084:	7dfb      	ldrb	r3, [r7, #23]
 8015086:	3301      	adds	r3, #1
 8015088:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801508a:	7dfb      	ldrb	r3, [r7, #23]
 801508c:	68ba      	ldr	r2, [r7, #8]
 801508e:	4413      	add	r3, r2
 8015090:	2200      	movs	r2, #0
 8015092:	701a      	strb	r2, [r3, #0]
    idx++;
 8015094:	7dfb      	ldrb	r3, [r7, #23]
 8015096:	3301      	adds	r3, #1
 8015098:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801509a:	693b      	ldr	r3, [r7, #16]
 801509c:	781b      	ldrb	r3, [r3, #0]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d1e7      	bne.n	8015072 <USBD_GetString+0x52>
 80150a2:	e000      	b.n	80150a6 <USBD_GetString+0x86>
    return;
 80150a4:	bf00      	nop
  }
}
 80150a6:	3718      	adds	r7, #24
 80150a8:	46bd      	mov	sp, r7
 80150aa:	bd80      	pop	{r7, pc}

080150ac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80150ac:	b480      	push	{r7}
 80150ae:	b085      	sub	sp, #20
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80150b4:	2300      	movs	r3, #0
 80150b6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80150bc:	e005      	b.n	80150ca <USBD_GetLen+0x1e>
  {
    len++;
 80150be:	7bfb      	ldrb	r3, [r7, #15]
 80150c0:	3301      	adds	r3, #1
 80150c2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80150c4:	68bb      	ldr	r3, [r7, #8]
 80150c6:	3301      	adds	r3, #1
 80150c8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80150ca:	68bb      	ldr	r3, [r7, #8]
 80150cc:	781b      	ldrb	r3, [r3, #0]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d1f5      	bne.n	80150be <USBD_GetLen+0x12>
  }

  return len;
 80150d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80150d4:	4618      	mov	r0, r3
 80150d6:	3714      	adds	r7, #20
 80150d8:	46bd      	mov	sp, r7
 80150da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150de:	4770      	bx	lr

080150e0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80150e0:	b580      	push	{r7, lr}
 80150e2:	b084      	sub	sp, #16
 80150e4:	af00      	add	r7, sp, #0
 80150e6:	60f8      	str	r0, [r7, #12]
 80150e8:	60b9      	str	r1, [r7, #8]
 80150ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	2202      	movs	r2, #2
 80150f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	687a      	ldr	r2, [r7, #4]
 80150f8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	687a      	ldr	r2, [r7, #4]
 80150fe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	68ba      	ldr	r2, [r7, #8]
 8015104:	2100      	movs	r1, #0
 8015106:	68f8      	ldr	r0, [r7, #12]
 8015108:	f003 fc34 	bl	8018974 <USBD_LL_Transmit>

  return USBD_OK;
 801510c:	2300      	movs	r3, #0
}
 801510e:	4618      	mov	r0, r3
 8015110:	3710      	adds	r7, #16
 8015112:	46bd      	mov	sp, r7
 8015114:	bd80      	pop	{r7, pc}

08015116 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8015116:	b580      	push	{r7, lr}
 8015118:	b084      	sub	sp, #16
 801511a:	af00      	add	r7, sp, #0
 801511c:	60f8      	str	r0, [r7, #12]
 801511e:	60b9      	str	r1, [r7, #8]
 8015120:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	68ba      	ldr	r2, [r7, #8]
 8015126:	2100      	movs	r1, #0
 8015128:	68f8      	ldr	r0, [r7, #12]
 801512a:	f003 fc23 	bl	8018974 <USBD_LL_Transmit>

  return USBD_OK;
 801512e:	2300      	movs	r3, #0
}
 8015130:	4618      	mov	r0, r3
 8015132:	3710      	adds	r7, #16
 8015134:	46bd      	mov	sp, r7
 8015136:	bd80      	pop	{r7, pc}

08015138 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8015138:	b580      	push	{r7, lr}
 801513a:	b084      	sub	sp, #16
 801513c:	af00      	add	r7, sp, #0
 801513e:	60f8      	str	r0, [r7, #12]
 8015140:	60b9      	str	r1, [r7, #8]
 8015142:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	68ba      	ldr	r2, [r7, #8]
 8015148:	2100      	movs	r1, #0
 801514a:	68f8      	ldr	r0, [r7, #12]
 801514c:	f003 fc33 	bl	80189b6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015150:	2300      	movs	r3, #0
}
 8015152:	4618      	mov	r0, r3
 8015154:	3710      	adds	r7, #16
 8015156:	46bd      	mov	sp, r7
 8015158:	bd80      	pop	{r7, pc}

0801515a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801515a:	b580      	push	{r7, lr}
 801515c:	b082      	sub	sp, #8
 801515e:	af00      	add	r7, sp, #0
 8015160:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	2204      	movs	r2, #4
 8015166:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801516a:	2300      	movs	r3, #0
 801516c:	2200      	movs	r2, #0
 801516e:	2100      	movs	r1, #0
 8015170:	6878      	ldr	r0, [r7, #4]
 8015172:	f003 fbff 	bl	8018974 <USBD_LL_Transmit>

  return USBD_OK;
 8015176:	2300      	movs	r3, #0
}
 8015178:	4618      	mov	r0, r3
 801517a:	3708      	adds	r7, #8
 801517c:	46bd      	mov	sp, r7
 801517e:	bd80      	pop	{r7, pc}

08015180 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8015180:	b580      	push	{r7, lr}
 8015182:	b082      	sub	sp, #8
 8015184:	af00      	add	r7, sp, #0
 8015186:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	2205      	movs	r2, #5
 801518c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015190:	2300      	movs	r3, #0
 8015192:	2200      	movs	r2, #0
 8015194:	2100      	movs	r1, #0
 8015196:	6878      	ldr	r0, [r7, #4]
 8015198:	f003 fc0d 	bl	80189b6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801519c:	2300      	movs	r3, #0
}
 801519e:	4618      	mov	r0, r3
 80151a0:	3708      	adds	r7, #8
 80151a2:	46bd      	mov	sp, r7
 80151a4:	bd80      	pop	{r7, pc}
	...

080151a8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80151a8:	b580      	push	{r7, lr}
 80151aa:	b084      	sub	sp, #16
 80151ac:	af00      	add	r7, sp, #0
 80151ae:	4603      	mov	r3, r0
 80151b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80151b2:	79fb      	ldrb	r3, [r7, #7]
 80151b4:	4a08      	ldr	r2, [pc, #32]	; (80151d8 <disk_status+0x30>)
 80151b6:	009b      	lsls	r3, r3, #2
 80151b8:	4413      	add	r3, r2
 80151ba:	685b      	ldr	r3, [r3, #4]
 80151bc:	685b      	ldr	r3, [r3, #4]
 80151be:	79fa      	ldrb	r2, [r7, #7]
 80151c0:	4905      	ldr	r1, [pc, #20]	; (80151d8 <disk_status+0x30>)
 80151c2:	440a      	add	r2, r1
 80151c4:	7a12      	ldrb	r2, [r2, #8]
 80151c6:	4610      	mov	r0, r2
 80151c8:	4798      	blx	r3
 80151ca:	4603      	mov	r3, r0
 80151cc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80151ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80151d0:	4618      	mov	r0, r3
 80151d2:	3710      	adds	r7, #16
 80151d4:	46bd      	mov	sp, r7
 80151d6:	bd80      	pop	{r7, pc}
 80151d8:	200067b0 	.word	0x200067b0

080151dc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80151dc:	b580      	push	{r7, lr}
 80151de:	b084      	sub	sp, #16
 80151e0:	af00      	add	r7, sp, #0
 80151e2:	4603      	mov	r3, r0
 80151e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80151e6:	2300      	movs	r3, #0
 80151e8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80151ea:	79fb      	ldrb	r3, [r7, #7]
 80151ec:	4a0d      	ldr	r2, [pc, #52]	; (8015224 <disk_initialize+0x48>)
 80151ee:	5cd3      	ldrb	r3, [r2, r3]
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d111      	bne.n	8015218 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80151f4:	79fb      	ldrb	r3, [r7, #7]
 80151f6:	4a0b      	ldr	r2, [pc, #44]	; (8015224 <disk_initialize+0x48>)
 80151f8:	2101      	movs	r1, #1
 80151fa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80151fc:	79fb      	ldrb	r3, [r7, #7]
 80151fe:	4a09      	ldr	r2, [pc, #36]	; (8015224 <disk_initialize+0x48>)
 8015200:	009b      	lsls	r3, r3, #2
 8015202:	4413      	add	r3, r2
 8015204:	685b      	ldr	r3, [r3, #4]
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	79fa      	ldrb	r2, [r7, #7]
 801520a:	4906      	ldr	r1, [pc, #24]	; (8015224 <disk_initialize+0x48>)
 801520c:	440a      	add	r2, r1
 801520e:	7a12      	ldrb	r2, [r2, #8]
 8015210:	4610      	mov	r0, r2
 8015212:	4798      	blx	r3
 8015214:	4603      	mov	r3, r0
 8015216:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8015218:	7bfb      	ldrb	r3, [r7, #15]
}
 801521a:	4618      	mov	r0, r3
 801521c:	3710      	adds	r7, #16
 801521e:	46bd      	mov	sp, r7
 8015220:	bd80      	pop	{r7, pc}
 8015222:	bf00      	nop
 8015224:	200067b0 	.word	0x200067b0

08015228 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8015228:	b590      	push	{r4, r7, lr}
 801522a:	b087      	sub	sp, #28
 801522c:	af00      	add	r7, sp, #0
 801522e:	60b9      	str	r1, [r7, #8]
 8015230:	607a      	str	r2, [r7, #4]
 8015232:	603b      	str	r3, [r7, #0]
 8015234:	4603      	mov	r3, r0
 8015236:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8015238:	7bfb      	ldrb	r3, [r7, #15]
 801523a:	4a0a      	ldr	r2, [pc, #40]	; (8015264 <disk_read+0x3c>)
 801523c:	009b      	lsls	r3, r3, #2
 801523e:	4413      	add	r3, r2
 8015240:	685b      	ldr	r3, [r3, #4]
 8015242:	689c      	ldr	r4, [r3, #8]
 8015244:	7bfb      	ldrb	r3, [r7, #15]
 8015246:	4a07      	ldr	r2, [pc, #28]	; (8015264 <disk_read+0x3c>)
 8015248:	4413      	add	r3, r2
 801524a:	7a18      	ldrb	r0, [r3, #8]
 801524c:	683b      	ldr	r3, [r7, #0]
 801524e:	687a      	ldr	r2, [r7, #4]
 8015250:	68b9      	ldr	r1, [r7, #8]
 8015252:	47a0      	blx	r4
 8015254:	4603      	mov	r3, r0
 8015256:	75fb      	strb	r3, [r7, #23]
  return res;
 8015258:	7dfb      	ldrb	r3, [r7, #23]
}
 801525a:	4618      	mov	r0, r3
 801525c:	371c      	adds	r7, #28
 801525e:	46bd      	mov	sp, r7
 8015260:	bd90      	pop	{r4, r7, pc}
 8015262:	bf00      	nop
 8015264:	200067b0 	.word	0x200067b0

08015268 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8015268:	b590      	push	{r4, r7, lr}
 801526a:	b087      	sub	sp, #28
 801526c:	af00      	add	r7, sp, #0
 801526e:	60b9      	str	r1, [r7, #8]
 8015270:	607a      	str	r2, [r7, #4]
 8015272:	603b      	str	r3, [r7, #0]
 8015274:	4603      	mov	r3, r0
 8015276:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8015278:	7bfb      	ldrb	r3, [r7, #15]
 801527a:	4a0a      	ldr	r2, [pc, #40]	; (80152a4 <disk_write+0x3c>)
 801527c:	009b      	lsls	r3, r3, #2
 801527e:	4413      	add	r3, r2
 8015280:	685b      	ldr	r3, [r3, #4]
 8015282:	68dc      	ldr	r4, [r3, #12]
 8015284:	7bfb      	ldrb	r3, [r7, #15]
 8015286:	4a07      	ldr	r2, [pc, #28]	; (80152a4 <disk_write+0x3c>)
 8015288:	4413      	add	r3, r2
 801528a:	7a18      	ldrb	r0, [r3, #8]
 801528c:	683b      	ldr	r3, [r7, #0]
 801528e:	687a      	ldr	r2, [r7, #4]
 8015290:	68b9      	ldr	r1, [r7, #8]
 8015292:	47a0      	blx	r4
 8015294:	4603      	mov	r3, r0
 8015296:	75fb      	strb	r3, [r7, #23]
  return res;
 8015298:	7dfb      	ldrb	r3, [r7, #23]
}
 801529a:	4618      	mov	r0, r3
 801529c:	371c      	adds	r7, #28
 801529e:	46bd      	mov	sp, r7
 80152a0:	bd90      	pop	{r4, r7, pc}
 80152a2:	bf00      	nop
 80152a4:	200067b0 	.word	0x200067b0

080152a8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80152a8:	b580      	push	{r7, lr}
 80152aa:	b084      	sub	sp, #16
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	4603      	mov	r3, r0
 80152b0:	603a      	str	r2, [r7, #0]
 80152b2:	71fb      	strb	r3, [r7, #7]
 80152b4:	460b      	mov	r3, r1
 80152b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80152b8:	79fb      	ldrb	r3, [r7, #7]
 80152ba:	4a09      	ldr	r2, [pc, #36]	; (80152e0 <disk_ioctl+0x38>)
 80152bc:	009b      	lsls	r3, r3, #2
 80152be:	4413      	add	r3, r2
 80152c0:	685b      	ldr	r3, [r3, #4]
 80152c2:	691b      	ldr	r3, [r3, #16]
 80152c4:	79fa      	ldrb	r2, [r7, #7]
 80152c6:	4906      	ldr	r1, [pc, #24]	; (80152e0 <disk_ioctl+0x38>)
 80152c8:	440a      	add	r2, r1
 80152ca:	7a10      	ldrb	r0, [r2, #8]
 80152cc:	79b9      	ldrb	r1, [r7, #6]
 80152ce:	683a      	ldr	r2, [r7, #0]
 80152d0:	4798      	blx	r3
 80152d2:	4603      	mov	r3, r0
 80152d4:	73fb      	strb	r3, [r7, #15]
  return res;
 80152d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80152d8:	4618      	mov	r0, r3
 80152da:	3710      	adds	r7, #16
 80152dc:	46bd      	mov	sp, r7
 80152de:	bd80      	pop	{r7, pc}
 80152e0:	200067b0 	.word	0x200067b0

080152e4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80152e4:	b480      	push	{r7}
 80152e6:	b085      	sub	sp, #20
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	3301      	adds	r3, #1
 80152f0:	781b      	ldrb	r3, [r3, #0]
 80152f2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80152f4:	89fb      	ldrh	r3, [r7, #14]
 80152f6:	021b      	lsls	r3, r3, #8
 80152f8:	b21a      	sxth	r2, r3
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	781b      	ldrb	r3, [r3, #0]
 80152fe:	b21b      	sxth	r3, r3
 8015300:	4313      	orrs	r3, r2
 8015302:	b21b      	sxth	r3, r3
 8015304:	81fb      	strh	r3, [r7, #14]
	return rv;
 8015306:	89fb      	ldrh	r3, [r7, #14]
}
 8015308:	4618      	mov	r0, r3
 801530a:	3714      	adds	r7, #20
 801530c:	46bd      	mov	sp, r7
 801530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015312:	4770      	bx	lr

08015314 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8015314:	b480      	push	{r7}
 8015316:	b085      	sub	sp, #20
 8015318:	af00      	add	r7, sp, #0
 801531a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	3303      	adds	r3, #3
 8015320:	781b      	ldrb	r3, [r3, #0]
 8015322:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	021b      	lsls	r3, r3, #8
 8015328:	687a      	ldr	r2, [r7, #4]
 801532a:	3202      	adds	r2, #2
 801532c:	7812      	ldrb	r2, [r2, #0]
 801532e:	4313      	orrs	r3, r2
 8015330:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	021b      	lsls	r3, r3, #8
 8015336:	687a      	ldr	r2, [r7, #4]
 8015338:	3201      	adds	r2, #1
 801533a:	7812      	ldrb	r2, [r2, #0]
 801533c:	4313      	orrs	r3, r2
 801533e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	021b      	lsls	r3, r3, #8
 8015344:	687a      	ldr	r2, [r7, #4]
 8015346:	7812      	ldrb	r2, [r2, #0]
 8015348:	4313      	orrs	r3, r2
 801534a:	60fb      	str	r3, [r7, #12]
	return rv;
 801534c:	68fb      	ldr	r3, [r7, #12]
}
 801534e:	4618      	mov	r0, r3
 8015350:	3714      	adds	r7, #20
 8015352:	46bd      	mov	sp, r7
 8015354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015358:	4770      	bx	lr

0801535a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801535a:	b480      	push	{r7}
 801535c:	b083      	sub	sp, #12
 801535e:	af00      	add	r7, sp, #0
 8015360:	6078      	str	r0, [r7, #4]
 8015362:	460b      	mov	r3, r1
 8015364:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	1c5a      	adds	r2, r3, #1
 801536a:	607a      	str	r2, [r7, #4]
 801536c:	887a      	ldrh	r2, [r7, #2]
 801536e:	b2d2      	uxtb	r2, r2
 8015370:	701a      	strb	r2, [r3, #0]
 8015372:	887b      	ldrh	r3, [r7, #2]
 8015374:	0a1b      	lsrs	r3, r3, #8
 8015376:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	1c5a      	adds	r2, r3, #1
 801537c:	607a      	str	r2, [r7, #4]
 801537e:	887a      	ldrh	r2, [r7, #2]
 8015380:	b2d2      	uxtb	r2, r2
 8015382:	701a      	strb	r2, [r3, #0]
}
 8015384:	bf00      	nop
 8015386:	370c      	adds	r7, #12
 8015388:	46bd      	mov	sp, r7
 801538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801538e:	4770      	bx	lr

08015390 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8015390:	b480      	push	{r7}
 8015392:	b083      	sub	sp, #12
 8015394:	af00      	add	r7, sp, #0
 8015396:	6078      	str	r0, [r7, #4]
 8015398:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	1c5a      	adds	r2, r3, #1
 801539e:	607a      	str	r2, [r7, #4]
 80153a0:	683a      	ldr	r2, [r7, #0]
 80153a2:	b2d2      	uxtb	r2, r2
 80153a4:	701a      	strb	r2, [r3, #0]
 80153a6:	683b      	ldr	r3, [r7, #0]
 80153a8:	0a1b      	lsrs	r3, r3, #8
 80153aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	1c5a      	adds	r2, r3, #1
 80153b0:	607a      	str	r2, [r7, #4]
 80153b2:	683a      	ldr	r2, [r7, #0]
 80153b4:	b2d2      	uxtb	r2, r2
 80153b6:	701a      	strb	r2, [r3, #0]
 80153b8:	683b      	ldr	r3, [r7, #0]
 80153ba:	0a1b      	lsrs	r3, r3, #8
 80153bc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	1c5a      	adds	r2, r3, #1
 80153c2:	607a      	str	r2, [r7, #4]
 80153c4:	683a      	ldr	r2, [r7, #0]
 80153c6:	b2d2      	uxtb	r2, r2
 80153c8:	701a      	strb	r2, [r3, #0]
 80153ca:	683b      	ldr	r3, [r7, #0]
 80153cc:	0a1b      	lsrs	r3, r3, #8
 80153ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	1c5a      	adds	r2, r3, #1
 80153d4:	607a      	str	r2, [r7, #4]
 80153d6:	683a      	ldr	r2, [r7, #0]
 80153d8:	b2d2      	uxtb	r2, r2
 80153da:	701a      	strb	r2, [r3, #0]
}
 80153dc:	bf00      	nop
 80153de:	370c      	adds	r7, #12
 80153e0:	46bd      	mov	sp, r7
 80153e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e6:	4770      	bx	lr

080153e8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80153e8:	b480      	push	{r7}
 80153ea:	b087      	sub	sp, #28
 80153ec:	af00      	add	r7, sp, #0
 80153ee:	60f8      	str	r0, [r7, #12]
 80153f0:	60b9      	str	r1, [r7, #8]
 80153f2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80153f8:	68bb      	ldr	r3, [r7, #8]
 80153fa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d00d      	beq.n	801541e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8015402:	693a      	ldr	r2, [r7, #16]
 8015404:	1c53      	adds	r3, r2, #1
 8015406:	613b      	str	r3, [r7, #16]
 8015408:	697b      	ldr	r3, [r7, #20]
 801540a:	1c59      	adds	r1, r3, #1
 801540c:	6179      	str	r1, [r7, #20]
 801540e:	7812      	ldrb	r2, [r2, #0]
 8015410:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	3b01      	subs	r3, #1
 8015416:	607b      	str	r3, [r7, #4]
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	2b00      	cmp	r3, #0
 801541c:	d1f1      	bne.n	8015402 <mem_cpy+0x1a>
	}
}
 801541e:	bf00      	nop
 8015420:	371c      	adds	r7, #28
 8015422:	46bd      	mov	sp, r7
 8015424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015428:	4770      	bx	lr

0801542a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801542a:	b480      	push	{r7}
 801542c:	b087      	sub	sp, #28
 801542e:	af00      	add	r7, sp, #0
 8015430:	60f8      	str	r0, [r7, #12]
 8015432:	60b9      	str	r1, [r7, #8]
 8015434:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801543a:	697b      	ldr	r3, [r7, #20]
 801543c:	1c5a      	adds	r2, r3, #1
 801543e:	617a      	str	r2, [r7, #20]
 8015440:	68ba      	ldr	r2, [r7, #8]
 8015442:	b2d2      	uxtb	r2, r2
 8015444:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	3b01      	subs	r3, #1
 801544a:	607b      	str	r3, [r7, #4]
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	2b00      	cmp	r3, #0
 8015450:	d1f3      	bne.n	801543a <mem_set+0x10>
}
 8015452:	bf00      	nop
 8015454:	bf00      	nop
 8015456:	371c      	adds	r7, #28
 8015458:	46bd      	mov	sp, r7
 801545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801545e:	4770      	bx	lr

08015460 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8015460:	b480      	push	{r7}
 8015462:	b089      	sub	sp, #36	; 0x24
 8015464:	af00      	add	r7, sp, #0
 8015466:	60f8      	str	r0, [r7, #12]
 8015468:	60b9      	str	r1, [r7, #8]
 801546a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	61fb      	str	r3, [r7, #28]
 8015470:	68bb      	ldr	r3, [r7, #8]
 8015472:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8015474:	2300      	movs	r3, #0
 8015476:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8015478:	69fb      	ldr	r3, [r7, #28]
 801547a:	1c5a      	adds	r2, r3, #1
 801547c:	61fa      	str	r2, [r7, #28]
 801547e:	781b      	ldrb	r3, [r3, #0]
 8015480:	4619      	mov	r1, r3
 8015482:	69bb      	ldr	r3, [r7, #24]
 8015484:	1c5a      	adds	r2, r3, #1
 8015486:	61ba      	str	r2, [r7, #24]
 8015488:	781b      	ldrb	r3, [r3, #0]
 801548a:	1acb      	subs	r3, r1, r3
 801548c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	3b01      	subs	r3, #1
 8015492:	607b      	str	r3, [r7, #4]
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	2b00      	cmp	r3, #0
 8015498:	d002      	beq.n	80154a0 <mem_cmp+0x40>
 801549a:	697b      	ldr	r3, [r7, #20]
 801549c:	2b00      	cmp	r3, #0
 801549e:	d0eb      	beq.n	8015478 <mem_cmp+0x18>

	return r;
 80154a0:	697b      	ldr	r3, [r7, #20]
}
 80154a2:	4618      	mov	r0, r3
 80154a4:	3724      	adds	r7, #36	; 0x24
 80154a6:	46bd      	mov	sp, r7
 80154a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ac:	4770      	bx	lr

080154ae <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80154ae:	b480      	push	{r7}
 80154b0:	b083      	sub	sp, #12
 80154b2:	af00      	add	r7, sp, #0
 80154b4:	6078      	str	r0, [r7, #4]
 80154b6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80154b8:	e002      	b.n	80154c0 <chk_chr+0x12>
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	3301      	adds	r3, #1
 80154be:	607b      	str	r3, [r7, #4]
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	781b      	ldrb	r3, [r3, #0]
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d005      	beq.n	80154d4 <chk_chr+0x26>
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	781b      	ldrb	r3, [r3, #0]
 80154cc:	461a      	mov	r2, r3
 80154ce:	683b      	ldr	r3, [r7, #0]
 80154d0:	4293      	cmp	r3, r2
 80154d2:	d1f2      	bne.n	80154ba <chk_chr+0xc>
	return *str;
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	781b      	ldrb	r3, [r3, #0]
}
 80154d8:	4618      	mov	r0, r3
 80154da:	370c      	adds	r7, #12
 80154dc:	46bd      	mov	sp, r7
 80154de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e2:	4770      	bx	lr

080154e4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80154e4:	b580      	push	{r7, lr}
 80154e6:	b086      	sub	sp, #24
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80154ec:	2300      	movs	r3, #0
 80154ee:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	78db      	ldrb	r3, [r3, #3]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d034      	beq.n	8015562 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80154fc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	7858      	ldrb	r0, [r3, #1]
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015508:	2301      	movs	r3, #1
 801550a:	697a      	ldr	r2, [r7, #20]
 801550c:	f7ff feac 	bl	8015268 <disk_write>
 8015510:	4603      	mov	r3, r0
 8015512:	2b00      	cmp	r3, #0
 8015514:	d002      	beq.n	801551c <sync_window+0x38>
			res = FR_DISK_ERR;
 8015516:	2301      	movs	r3, #1
 8015518:	73fb      	strb	r3, [r7, #15]
 801551a:	e022      	b.n	8015562 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	2200      	movs	r2, #0
 8015520:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015526:	697a      	ldr	r2, [r7, #20]
 8015528:	1ad2      	subs	r2, r2, r3
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	6a1b      	ldr	r3, [r3, #32]
 801552e:	429a      	cmp	r2, r3
 8015530:	d217      	bcs.n	8015562 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	789b      	ldrb	r3, [r3, #2]
 8015536:	613b      	str	r3, [r7, #16]
 8015538:	e010      	b.n	801555c <sync_window+0x78>
					wsect += fs->fsize;
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	6a1b      	ldr	r3, [r3, #32]
 801553e:	697a      	ldr	r2, [r7, #20]
 8015540:	4413      	add	r3, r2
 8015542:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	7858      	ldrb	r0, [r3, #1]
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801554e:	2301      	movs	r3, #1
 8015550:	697a      	ldr	r2, [r7, #20]
 8015552:	f7ff fe89 	bl	8015268 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015556:	693b      	ldr	r3, [r7, #16]
 8015558:	3b01      	subs	r3, #1
 801555a:	613b      	str	r3, [r7, #16]
 801555c:	693b      	ldr	r3, [r7, #16]
 801555e:	2b01      	cmp	r3, #1
 8015560:	d8eb      	bhi.n	801553a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8015562:	7bfb      	ldrb	r3, [r7, #15]
}
 8015564:	4618      	mov	r0, r3
 8015566:	3718      	adds	r7, #24
 8015568:	46bd      	mov	sp, r7
 801556a:	bd80      	pop	{r7, pc}

0801556c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 801556c:	b580      	push	{r7, lr}
 801556e:	b084      	sub	sp, #16
 8015570:	af00      	add	r7, sp, #0
 8015572:	6078      	str	r0, [r7, #4]
 8015574:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8015576:	2300      	movs	r3, #0
 8015578:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801557e:	683a      	ldr	r2, [r7, #0]
 8015580:	429a      	cmp	r2, r3
 8015582:	d01b      	beq.n	80155bc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8015584:	6878      	ldr	r0, [r7, #4]
 8015586:	f7ff ffad 	bl	80154e4 <sync_window>
 801558a:	4603      	mov	r3, r0
 801558c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801558e:	7bfb      	ldrb	r3, [r7, #15]
 8015590:	2b00      	cmp	r3, #0
 8015592:	d113      	bne.n	80155bc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	7858      	ldrb	r0, [r3, #1]
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801559e:	2301      	movs	r3, #1
 80155a0:	683a      	ldr	r2, [r7, #0]
 80155a2:	f7ff fe41 	bl	8015228 <disk_read>
 80155a6:	4603      	mov	r3, r0
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d004      	beq.n	80155b6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80155ac:	f04f 33ff 	mov.w	r3, #4294967295
 80155b0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80155b2:	2301      	movs	r3, #1
 80155b4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	683a      	ldr	r2, [r7, #0]
 80155ba:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80155bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80155be:	4618      	mov	r0, r3
 80155c0:	3710      	adds	r7, #16
 80155c2:	46bd      	mov	sp, r7
 80155c4:	bd80      	pop	{r7, pc}
	...

080155c8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80155c8:	b580      	push	{r7, lr}
 80155ca:	b084      	sub	sp, #16
 80155cc:	af00      	add	r7, sp, #0
 80155ce:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80155d0:	6878      	ldr	r0, [r7, #4]
 80155d2:	f7ff ff87 	bl	80154e4 <sync_window>
 80155d6:	4603      	mov	r3, r0
 80155d8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80155da:	7bfb      	ldrb	r3, [r7, #15]
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d159      	bne.n	8015694 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	781b      	ldrb	r3, [r3, #0]
 80155e4:	2b03      	cmp	r3, #3
 80155e6:	d149      	bne.n	801567c <sync_fs+0xb4>
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	791b      	ldrb	r3, [r3, #4]
 80155ec:	2b01      	cmp	r3, #1
 80155ee:	d145      	bne.n	801567c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	899b      	ldrh	r3, [r3, #12]
 80155fa:	461a      	mov	r2, r3
 80155fc:	2100      	movs	r1, #0
 80155fe:	f7ff ff14 	bl	801542a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	3338      	adds	r3, #56	; 0x38
 8015606:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801560a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801560e:	4618      	mov	r0, r3
 8015610:	f7ff fea3 	bl	801535a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	3338      	adds	r3, #56	; 0x38
 8015618:	4921      	ldr	r1, [pc, #132]	; (80156a0 <sync_fs+0xd8>)
 801561a:	4618      	mov	r0, r3
 801561c:	f7ff feb8 	bl	8015390 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	3338      	adds	r3, #56	; 0x38
 8015624:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8015628:	491e      	ldr	r1, [pc, #120]	; (80156a4 <sync_fs+0xdc>)
 801562a:	4618      	mov	r0, r3
 801562c:	f7ff feb0 	bl	8015390 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	3338      	adds	r3, #56	; 0x38
 8015634:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	699b      	ldr	r3, [r3, #24]
 801563c:	4619      	mov	r1, r3
 801563e:	4610      	mov	r0, r2
 8015640:	f7ff fea6 	bl	8015390 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	3338      	adds	r3, #56	; 0x38
 8015648:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	695b      	ldr	r3, [r3, #20]
 8015650:	4619      	mov	r1, r3
 8015652:	4610      	mov	r0, r2
 8015654:	f7ff fe9c 	bl	8015390 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801565c:	1c5a      	adds	r2, r3, #1
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	7858      	ldrb	r0, [r3, #1]
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015670:	2301      	movs	r3, #1
 8015672:	f7ff fdf9 	bl	8015268 <disk_write>
			fs->fsi_flag = 0;
 8015676:	687b      	ldr	r3, [r7, #4]
 8015678:	2200      	movs	r2, #0
 801567a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	785b      	ldrb	r3, [r3, #1]
 8015680:	2200      	movs	r2, #0
 8015682:	2100      	movs	r1, #0
 8015684:	4618      	mov	r0, r3
 8015686:	f7ff fe0f 	bl	80152a8 <disk_ioctl>
 801568a:	4603      	mov	r3, r0
 801568c:	2b00      	cmp	r3, #0
 801568e:	d001      	beq.n	8015694 <sync_fs+0xcc>
 8015690:	2301      	movs	r3, #1
 8015692:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8015694:	7bfb      	ldrb	r3, [r7, #15]
}
 8015696:	4618      	mov	r0, r3
 8015698:	3710      	adds	r7, #16
 801569a:	46bd      	mov	sp, r7
 801569c:	bd80      	pop	{r7, pc}
 801569e:	bf00      	nop
 80156a0:	41615252 	.word	0x41615252
 80156a4:	61417272 	.word	0x61417272

080156a8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80156a8:	b480      	push	{r7}
 80156aa:	b083      	sub	sp, #12
 80156ac:	af00      	add	r7, sp, #0
 80156ae:	6078      	str	r0, [r7, #4]
 80156b0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80156b2:	683b      	ldr	r3, [r7, #0]
 80156b4:	3b02      	subs	r3, #2
 80156b6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	69db      	ldr	r3, [r3, #28]
 80156bc:	3b02      	subs	r3, #2
 80156be:	683a      	ldr	r2, [r7, #0]
 80156c0:	429a      	cmp	r2, r3
 80156c2:	d301      	bcc.n	80156c8 <clust2sect+0x20>
 80156c4:	2300      	movs	r3, #0
 80156c6:	e008      	b.n	80156da <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	895b      	ldrh	r3, [r3, #10]
 80156cc:	461a      	mov	r2, r3
 80156ce:	683b      	ldr	r3, [r7, #0]
 80156d0:	fb03 f202 	mul.w	r2, r3, r2
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80156d8:	4413      	add	r3, r2
}
 80156da:	4618      	mov	r0, r3
 80156dc:	370c      	adds	r7, #12
 80156de:	46bd      	mov	sp, r7
 80156e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156e4:	4770      	bx	lr

080156e6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80156e6:	b580      	push	{r7, lr}
 80156e8:	b086      	sub	sp, #24
 80156ea:	af00      	add	r7, sp, #0
 80156ec:	6078      	str	r0, [r7, #4]
 80156ee:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	681b      	ldr	r3, [r3, #0]
 80156f4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80156f6:	683b      	ldr	r3, [r7, #0]
 80156f8:	2b01      	cmp	r3, #1
 80156fa:	d904      	bls.n	8015706 <get_fat+0x20>
 80156fc:	693b      	ldr	r3, [r7, #16]
 80156fe:	69db      	ldr	r3, [r3, #28]
 8015700:	683a      	ldr	r2, [r7, #0]
 8015702:	429a      	cmp	r2, r3
 8015704:	d302      	bcc.n	801570c <get_fat+0x26>
		val = 1;	/* Internal error */
 8015706:	2301      	movs	r3, #1
 8015708:	617b      	str	r3, [r7, #20]
 801570a:	e0bb      	b.n	8015884 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801570c:	f04f 33ff 	mov.w	r3, #4294967295
 8015710:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8015712:	693b      	ldr	r3, [r7, #16]
 8015714:	781b      	ldrb	r3, [r3, #0]
 8015716:	2b03      	cmp	r3, #3
 8015718:	f000 8083 	beq.w	8015822 <get_fat+0x13c>
 801571c:	2b03      	cmp	r3, #3
 801571e:	f300 80a7 	bgt.w	8015870 <get_fat+0x18a>
 8015722:	2b01      	cmp	r3, #1
 8015724:	d002      	beq.n	801572c <get_fat+0x46>
 8015726:	2b02      	cmp	r3, #2
 8015728:	d056      	beq.n	80157d8 <get_fat+0xf2>
 801572a:	e0a1      	b.n	8015870 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801572c:	683b      	ldr	r3, [r7, #0]
 801572e:	60fb      	str	r3, [r7, #12]
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	085b      	lsrs	r3, r3, #1
 8015734:	68fa      	ldr	r2, [r7, #12]
 8015736:	4413      	add	r3, r2
 8015738:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801573a:	693b      	ldr	r3, [r7, #16]
 801573c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801573e:	693b      	ldr	r3, [r7, #16]
 8015740:	899b      	ldrh	r3, [r3, #12]
 8015742:	4619      	mov	r1, r3
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	fbb3 f3f1 	udiv	r3, r3, r1
 801574a:	4413      	add	r3, r2
 801574c:	4619      	mov	r1, r3
 801574e:	6938      	ldr	r0, [r7, #16]
 8015750:	f7ff ff0c 	bl	801556c <move_window>
 8015754:	4603      	mov	r3, r0
 8015756:	2b00      	cmp	r3, #0
 8015758:	f040 808d 	bne.w	8015876 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	1c5a      	adds	r2, r3, #1
 8015760:	60fa      	str	r2, [r7, #12]
 8015762:	693a      	ldr	r2, [r7, #16]
 8015764:	8992      	ldrh	r2, [r2, #12]
 8015766:	fbb3 f1f2 	udiv	r1, r3, r2
 801576a:	fb01 f202 	mul.w	r2, r1, r2
 801576e:	1a9b      	subs	r3, r3, r2
 8015770:	693a      	ldr	r2, [r7, #16]
 8015772:	4413      	add	r3, r2
 8015774:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015778:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801577a:	693b      	ldr	r3, [r7, #16]
 801577c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801577e:	693b      	ldr	r3, [r7, #16]
 8015780:	899b      	ldrh	r3, [r3, #12]
 8015782:	4619      	mov	r1, r3
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	fbb3 f3f1 	udiv	r3, r3, r1
 801578a:	4413      	add	r3, r2
 801578c:	4619      	mov	r1, r3
 801578e:	6938      	ldr	r0, [r7, #16]
 8015790:	f7ff feec 	bl	801556c <move_window>
 8015794:	4603      	mov	r3, r0
 8015796:	2b00      	cmp	r3, #0
 8015798:	d16f      	bne.n	801587a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 801579a:	693b      	ldr	r3, [r7, #16]
 801579c:	899b      	ldrh	r3, [r3, #12]
 801579e:	461a      	mov	r2, r3
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80157a6:	fb01 f202 	mul.w	r2, r1, r2
 80157aa:	1a9b      	subs	r3, r3, r2
 80157ac:	693a      	ldr	r2, [r7, #16]
 80157ae:	4413      	add	r3, r2
 80157b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80157b4:	021b      	lsls	r3, r3, #8
 80157b6:	461a      	mov	r2, r3
 80157b8:	68bb      	ldr	r3, [r7, #8]
 80157ba:	4313      	orrs	r3, r2
 80157bc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80157be:	683b      	ldr	r3, [r7, #0]
 80157c0:	f003 0301 	and.w	r3, r3, #1
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d002      	beq.n	80157ce <get_fat+0xe8>
 80157c8:	68bb      	ldr	r3, [r7, #8]
 80157ca:	091b      	lsrs	r3, r3, #4
 80157cc:	e002      	b.n	80157d4 <get_fat+0xee>
 80157ce:	68bb      	ldr	r3, [r7, #8]
 80157d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80157d4:	617b      	str	r3, [r7, #20]
			break;
 80157d6:	e055      	b.n	8015884 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80157d8:	693b      	ldr	r3, [r7, #16]
 80157da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80157dc:	693b      	ldr	r3, [r7, #16]
 80157de:	899b      	ldrh	r3, [r3, #12]
 80157e0:	085b      	lsrs	r3, r3, #1
 80157e2:	b29b      	uxth	r3, r3
 80157e4:	4619      	mov	r1, r3
 80157e6:	683b      	ldr	r3, [r7, #0]
 80157e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80157ec:	4413      	add	r3, r2
 80157ee:	4619      	mov	r1, r3
 80157f0:	6938      	ldr	r0, [r7, #16]
 80157f2:	f7ff febb 	bl	801556c <move_window>
 80157f6:	4603      	mov	r3, r0
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d140      	bne.n	801587e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80157fc:	693b      	ldr	r3, [r7, #16]
 80157fe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015802:	683b      	ldr	r3, [r7, #0]
 8015804:	005b      	lsls	r3, r3, #1
 8015806:	693a      	ldr	r2, [r7, #16]
 8015808:	8992      	ldrh	r2, [r2, #12]
 801580a:	fbb3 f0f2 	udiv	r0, r3, r2
 801580e:	fb00 f202 	mul.w	r2, r0, r2
 8015812:	1a9b      	subs	r3, r3, r2
 8015814:	440b      	add	r3, r1
 8015816:	4618      	mov	r0, r3
 8015818:	f7ff fd64 	bl	80152e4 <ld_word>
 801581c:	4603      	mov	r3, r0
 801581e:	617b      	str	r3, [r7, #20]
			break;
 8015820:	e030      	b.n	8015884 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015822:	693b      	ldr	r3, [r7, #16]
 8015824:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015826:	693b      	ldr	r3, [r7, #16]
 8015828:	899b      	ldrh	r3, [r3, #12]
 801582a:	089b      	lsrs	r3, r3, #2
 801582c:	b29b      	uxth	r3, r3
 801582e:	4619      	mov	r1, r3
 8015830:	683b      	ldr	r3, [r7, #0]
 8015832:	fbb3 f3f1 	udiv	r3, r3, r1
 8015836:	4413      	add	r3, r2
 8015838:	4619      	mov	r1, r3
 801583a:	6938      	ldr	r0, [r7, #16]
 801583c:	f7ff fe96 	bl	801556c <move_window>
 8015840:	4603      	mov	r3, r0
 8015842:	2b00      	cmp	r3, #0
 8015844:	d11d      	bne.n	8015882 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8015846:	693b      	ldr	r3, [r7, #16]
 8015848:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801584c:	683b      	ldr	r3, [r7, #0]
 801584e:	009b      	lsls	r3, r3, #2
 8015850:	693a      	ldr	r2, [r7, #16]
 8015852:	8992      	ldrh	r2, [r2, #12]
 8015854:	fbb3 f0f2 	udiv	r0, r3, r2
 8015858:	fb00 f202 	mul.w	r2, r0, r2
 801585c:	1a9b      	subs	r3, r3, r2
 801585e:	440b      	add	r3, r1
 8015860:	4618      	mov	r0, r3
 8015862:	f7ff fd57 	bl	8015314 <ld_dword>
 8015866:	4603      	mov	r3, r0
 8015868:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801586c:	617b      	str	r3, [r7, #20]
			break;
 801586e:	e009      	b.n	8015884 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8015870:	2301      	movs	r3, #1
 8015872:	617b      	str	r3, [r7, #20]
 8015874:	e006      	b.n	8015884 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015876:	bf00      	nop
 8015878:	e004      	b.n	8015884 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801587a:	bf00      	nop
 801587c:	e002      	b.n	8015884 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801587e:	bf00      	nop
 8015880:	e000      	b.n	8015884 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8015882:	bf00      	nop
		}
	}

	return val;
 8015884:	697b      	ldr	r3, [r7, #20]
}
 8015886:	4618      	mov	r0, r3
 8015888:	3718      	adds	r7, #24
 801588a:	46bd      	mov	sp, r7
 801588c:	bd80      	pop	{r7, pc}

0801588e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801588e:	b590      	push	{r4, r7, lr}
 8015890:	b089      	sub	sp, #36	; 0x24
 8015892:	af00      	add	r7, sp, #0
 8015894:	60f8      	str	r0, [r7, #12]
 8015896:	60b9      	str	r1, [r7, #8]
 8015898:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801589a:	2302      	movs	r3, #2
 801589c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801589e:	68bb      	ldr	r3, [r7, #8]
 80158a0:	2b01      	cmp	r3, #1
 80158a2:	f240 8102 	bls.w	8015aaa <put_fat+0x21c>
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	69db      	ldr	r3, [r3, #28]
 80158aa:	68ba      	ldr	r2, [r7, #8]
 80158ac:	429a      	cmp	r2, r3
 80158ae:	f080 80fc 	bcs.w	8015aaa <put_fat+0x21c>
		switch (fs->fs_type) {
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	781b      	ldrb	r3, [r3, #0]
 80158b6:	2b03      	cmp	r3, #3
 80158b8:	f000 80b6 	beq.w	8015a28 <put_fat+0x19a>
 80158bc:	2b03      	cmp	r3, #3
 80158be:	f300 80fd 	bgt.w	8015abc <put_fat+0x22e>
 80158c2:	2b01      	cmp	r3, #1
 80158c4:	d003      	beq.n	80158ce <put_fat+0x40>
 80158c6:	2b02      	cmp	r3, #2
 80158c8:	f000 8083 	beq.w	80159d2 <put_fat+0x144>
 80158cc:	e0f6      	b.n	8015abc <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80158ce:	68bb      	ldr	r3, [r7, #8]
 80158d0:	61bb      	str	r3, [r7, #24]
 80158d2:	69bb      	ldr	r3, [r7, #24]
 80158d4:	085b      	lsrs	r3, r3, #1
 80158d6:	69ba      	ldr	r2, [r7, #24]
 80158d8:	4413      	add	r3, r2
 80158da:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	899b      	ldrh	r3, [r3, #12]
 80158e4:	4619      	mov	r1, r3
 80158e6:	69bb      	ldr	r3, [r7, #24]
 80158e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80158ec:	4413      	add	r3, r2
 80158ee:	4619      	mov	r1, r3
 80158f0:	68f8      	ldr	r0, [r7, #12]
 80158f2:	f7ff fe3b 	bl	801556c <move_window>
 80158f6:	4603      	mov	r3, r0
 80158f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80158fa:	7ffb      	ldrb	r3, [r7, #31]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	f040 80d6 	bne.w	8015aae <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015908:	69bb      	ldr	r3, [r7, #24]
 801590a:	1c5a      	adds	r2, r3, #1
 801590c:	61ba      	str	r2, [r7, #24]
 801590e:	68fa      	ldr	r2, [r7, #12]
 8015910:	8992      	ldrh	r2, [r2, #12]
 8015912:	fbb3 f0f2 	udiv	r0, r3, r2
 8015916:	fb00 f202 	mul.w	r2, r0, r2
 801591a:	1a9b      	subs	r3, r3, r2
 801591c:	440b      	add	r3, r1
 801591e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8015920:	68bb      	ldr	r3, [r7, #8]
 8015922:	f003 0301 	and.w	r3, r3, #1
 8015926:	2b00      	cmp	r3, #0
 8015928:	d00d      	beq.n	8015946 <put_fat+0xb8>
 801592a:	697b      	ldr	r3, [r7, #20]
 801592c:	781b      	ldrb	r3, [r3, #0]
 801592e:	b25b      	sxtb	r3, r3
 8015930:	f003 030f 	and.w	r3, r3, #15
 8015934:	b25a      	sxtb	r2, r3
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	b2db      	uxtb	r3, r3
 801593a:	011b      	lsls	r3, r3, #4
 801593c:	b25b      	sxtb	r3, r3
 801593e:	4313      	orrs	r3, r2
 8015940:	b25b      	sxtb	r3, r3
 8015942:	b2db      	uxtb	r3, r3
 8015944:	e001      	b.n	801594a <put_fat+0xbc>
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	b2db      	uxtb	r3, r3
 801594a:	697a      	ldr	r2, [r7, #20]
 801594c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	2201      	movs	r2, #1
 8015952:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015954:	68fb      	ldr	r3, [r7, #12]
 8015956:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	899b      	ldrh	r3, [r3, #12]
 801595c:	4619      	mov	r1, r3
 801595e:	69bb      	ldr	r3, [r7, #24]
 8015960:	fbb3 f3f1 	udiv	r3, r3, r1
 8015964:	4413      	add	r3, r2
 8015966:	4619      	mov	r1, r3
 8015968:	68f8      	ldr	r0, [r7, #12]
 801596a:	f7ff fdff 	bl	801556c <move_window>
 801596e:	4603      	mov	r3, r0
 8015970:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015972:	7ffb      	ldrb	r3, [r7, #31]
 8015974:	2b00      	cmp	r3, #0
 8015976:	f040 809c 	bne.w	8015ab2 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	899b      	ldrh	r3, [r3, #12]
 8015984:	461a      	mov	r2, r3
 8015986:	69bb      	ldr	r3, [r7, #24]
 8015988:	fbb3 f0f2 	udiv	r0, r3, r2
 801598c:	fb00 f202 	mul.w	r2, r0, r2
 8015990:	1a9b      	subs	r3, r3, r2
 8015992:	440b      	add	r3, r1
 8015994:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8015996:	68bb      	ldr	r3, [r7, #8]
 8015998:	f003 0301 	and.w	r3, r3, #1
 801599c:	2b00      	cmp	r3, #0
 801599e:	d003      	beq.n	80159a8 <put_fat+0x11a>
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	091b      	lsrs	r3, r3, #4
 80159a4:	b2db      	uxtb	r3, r3
 80159a6:	e00e      	b.n	80159c6 <put_fat+0x138>
 80159a8:	697b      	ldr	r3, [r7, #20]
 80159aa:	781b      	ldrb	r3, [r3, #0]
 80159ac:	b25b      	sxtb	r3, r3
 80159ae:	f023 030f 	bic.w	r3, r3, #15
 80159b2:	b25a      	sxtb	r2, r3
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	0a1b      	lsrs	r3, r3, #8
 80159b8:	b25b      	sxtb	r3, r3
 80159ba:	f003 030f 	and.w	r3, r3, #15
 80159be:	b25b      	sxtb	r3, r3
 80159c0:	4313      	orrs	r3, r2
 80159c2:	b25b      	sxtb	r3, r3
 80159c4:	b2db      	uxtb	r3, r3
 80159c6:	697a      	ldr	r2, [r7, #20]
 80159c8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	2201      	movs	r2, #1
 80159ce:	70da      	strb	r2, [r3, #3]
			break;
 80159d0:	e074      	b.n	8015abc <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	899b      	ldrh	r3, [r3, #12]
 80159da:	085b      	lsrs	r3, r3, #1
 80159dc:	b29b      	uxth	r3, r3
 80159de:	4619      	mov	r1, r3
 80159e0:	68bb      	ldr	r3, [r7, #8]
 80159e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80159e6:	4413      	add	r3, r2
 80159e8:	4619      	mov	r1, r3
 80159ea:	68f8      	ldr	r0, [r7, #12]
 80159ec:	f7ff fdbe 	bl	801556c <move_window>
 80159f0:	4603      	mov	r3, r0
 80159f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80159f4:	7ffb      	ldrb	r3, [r7, #31]
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d15d      	bne.n	8015ab6 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015a00:	68bb      	ldr	r3, [r7, #8]
 8015a02:	005b      	lsls	r3, r3, #1
 8015a04:	68fa      	ldr	r2, [r7, #12]
 8015a06:	8992      	ldrh	r2, [r2, #12]
 8015a08:	fbb3 f0f2 	udiv	r0, r3, r2
 8015a0c:	fb00 f202 	mul.w	r2, r0, r2
 8015a10:	1a9b      	subs	r3, r3, r2
 8015a12:	440b      	add	r3, r1
 8015a14:	687a      	ldr	r2, [r7, #4]
 8015a16:	b292      	uxth	r2, r2
 8015a18:	4611      	mov	r1, r2
 8015a1a:	4618      	mov	r0, r3
 8015a1c:	f7ff fc9d 	bl	801535a <st_word>
			fs->wflag = 1;
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	2201      	movs	r2, #1
 8015a24:	70da      	strb	r2, [r3, #3]
			break;
 8015a26:	e049      	b.n	8015abc <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8015a28:	68fb      	ldr	r3, [r7, #12]
 8015a2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	899b      	ldrh	r3, [r3, #12]
 8015a30:	089b      	lsrs	r3, r3, #2
 8015a32:	b29b      	uxth	r3, r3
 8015a34:	4619      	mov	r1, r3
 8015a36:	68bb      	ldr	r3, [r7, #8]
 8015a38:	fbb3 f3f1 	udiv	r3, r3, r1
 8015a3c:	4413      	add	r3, r2
 8015a3e:	4619      	mov	r1, r3
 8015a40:	68f8      	ldr	r0, [r7, #12]
 8015a42:	f7ff fd93 	bl	801556c <move_window>
 8015a46:	4603      	mov	r3, r0
 8015a48:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015a4a:	7ffb      	ldrb	r3, [r7, #31]
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d134      	bne.n	8015aba <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8015a56:	68fb      	ldr	r3, [r7, #12]
 8015a58:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015a5c:	68bb      	ldr	r3, [r7, #8]
 8015a5e:	009b      	lsls	r3, r3, #2
 8015a60:	68fa      	ldr	r2, [r7, #12]
 8015a62:	8992      	ldrh	r2, [r2, #12]
 8015a64:	fbb3 f0f2 	udiv	r0, r3, r2
 8015a68:	fb00 f202 	mul.w	r2, r0, r2
 8015a6c:	1a9b      	subs	r3, r3, r2
 8015a6e:	440b      	add	r3, r1
 8015a70:	4618      	mov	r0, r3
 8015a72:	f7ff fc4f 	bl	8015314 <ld_dword>
 8015a76:	4603      	mov	r3, r0
 8015a78:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8015a7c:	4323      	orrs	r3, r4
 8015a7e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015a86:	68bb      	ldr	r3, [r7, #8]
 8015a88:	009b      	lsls	r3, r3, #2
 8015a8a:	68fa      	ldr	r2, [r7, #12]
 8015a8c:	8992      	ldrh	r2, [r2, #12]
 8015a8e:	fbb3 f0f2 	udiv	r0, r3, r2
 8015a92:	fb00 f202 	mul.w	r2, r0, r2
 8015a96:	1a9b      	subs	r3, r3, r2
 8015a98:	440b      	add	r3, r1
 8015a9a:	6879      	ldr	r1, [r7, #4]
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	f7ff fc77 	bl	8015390 <st_dword>
			fs->wflag = 1;
 8015aa2:	68fb      	ldr	r3, [r7, #12]
 8015aa4:	2201      	movs	r2, #1
 8015aa6:	70da      	strb	r2, [r3, #3]
			break;
 8015aa8:	e008      	b.n	8015abc <put_fat+0x22e>
		}
	}
 8015aaa:	bf00      	nop
 8015aac:	e006      	b.n	8015abc <put_fat+0x22e>
			if (res != FR_OK) break;
 8015aae:	bf00      	nop
 8015ab0:	e004      	b.n	8015abc <put_fat+0x22e>
			if (res != FR_OK) break;
 8015ab2:	bf00      	nop
 8015ab4:	e002      	b.n	8015abc <put_fat+0x22e>
			if (res != FR_OK) break;
 8015ab6:	bf00      	nop
 8015ab8:	e000      	b.n	8015abc <put_fat+0x22e>
			if (res != FR_OK) break;
 8015aba:	bf00      	nop
	return res;
 8015abc:	7ffb      	ldrb	r3, [r7, #31]
}
 8015abe:	4618      	mov	r0, r3
 8015ac0:	3724      	adds	r7, #36	; 0x24
 8015ac2:	46bd      	mov	sp, r7
 8015ac4:	bd90      	pop	{r4, r7, pc}

08015ac6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8015ac6:	b580      	push	{r7, lr}
 8015ac8:	b088      	sub	sp, #32
 8015aca:	af00      	add	r7, sp, #0
 8015acc:	60f8      	str	r0, [r7, #12]
 8015ace:	60b9      	str	r1, [r7, #8]
 8015ad0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8015ad2:	2300      	movs	r3, #0
 8015ad4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8015ad6:	68fb      	ldr	r3, [r7, #12]
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8015adc:	68bb      	ldr	r3, [r7, #8]
 8015ade:	2b01      	cmp	r3, #1
 8015ae0:	d904      	bls.n	8015aec <remove_chain+0x26>
 8015ae2:	69bb      	ldr	r3, [r7, #24]
 8015ae4:	69db      	ldr	r3, [r3, #28]
 8015ae6:	68ba      	ldr	r2, [r7, #8]
 8015ae8:	429a      	cmp	r2, r3
 8015aea:	d301      	bcc.n	8015af0 <remove_chain+0x2a>
 8015aec:	2302      	movs	r3, #2
 8015aee:	e04b      	b.n	8015b88 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d00c      	beq.n	8015b10 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8015af6:	f04f 32ff 	mov.w	r2, #4294967295
 8015afa:	6879      	ldr	r1, [r7, #4]
 8015afc:	69b8      	ldr	r0, [r7, #24]
 8015afe:	f7ff fec6 	bl	801588e <put_fat>
 8015b02:	4603      	mov	r3, r0
 8015b04:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8015b06:	7ffb      	ldrb	r3, [r7, #31]
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d001      	beq.n	8015b10 <remove_chain+0x4a>
 8015b0c:	7ffb      	ldrb	r3, [r7, #31]
 8015b0e:	e03b      	b.n	8015b88 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8015b10:	68b9      	ldr	r1, [r7, #8]
 8015b12:	68f8      	ldr	r0, [r7, #12]
 8015b14:	f7ff fde7 	bl	80156e6 <get_fat>
 8015b18:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8015b1a:	697b      	ldr	r3, [r7, #20]
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d031      	beq.n	8015b84 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8015b20:	697b      	ldr	r3, [r7, #20]
 8015b22:	2b01      	cmp	r3, #1
 8015b24:	d101      	bne.n	8015b2a <remove_chain+0x64>
 8015b26:	2302      	movs	r3, #2
 8015b28:	e02e      	b.n	8015b88 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8015b2a:	697b      	ldr	r3, [r7, #20]
 8015b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b30:	d101      	bne.n	8015b36 <remove_chain+0x70>
 8015b32:	2301      	movs	r3, #1
 8015b34:	e028      	b.n	8015b88 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8015b36:	2200      	movs	r2, #0
 8015b38:	68b9      	ldr	r1, [r7, #8]
 8015b3a:	69b8      	ldr	r0, [r7, #24]
 8015b3c:	f7ff fea7 	bl	801588e <put_fat>
 8015b40:	4603      	mov	r3, r0
 8015b42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8015b44:	7ffb      	ldrb	r3, [r7, #31]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d001      	beq.n	8015b4e <remove_chain+0x88>
 8015b4a:	7ffb      	ldrb	r3, [r7, #31]
 8015b4c:	e01c      	b.n	8015b88 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8015b4e:	69bb      	ldr	r3, [r7, #24]
 8015b50:	699a      	ldr	r2, [r3, #24]
 8015b52:	69bb      	ldr	r3, [r7, #24]
 8015b54:	69db      	ldr	r3, [r3, #28]
 8015b56:	3b02      	subs	r3, #2
 8015b58:	429a      	cmp	r2, r3
 8015b5a:	d20b      	bcs.n	8015b74 <remove_chain+0xae>
			fs->free_clst++;
 8015b5c:	69bb      	ldr	r3, [r7, #24]
 8015b5e:	699b      	ldr	r3, [r3, #24]
 8015b60:	1c5a      	adds	r2, r3, #1
 8015b62:	69bb      	ldr	r3, [r7, #24]
 8015b64:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8015b66:	69bb      	ldr	r3, [r7, #24]
 8015b68:	791b      	ldrb	r3, [r3, #4]
 8015b6a:	f043 0301 	orr.w	r3, r3, #1
 8015b6e:	b2da      	uxtb	r2, r3
 8015b70:	69bb      	ldr	r3, [r7, #24]
 8015b72:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8015b74:	697b      	ldr	r3, [r7, #20]
 8015b76:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8015b78:	69bb      	ldr	r3, [r7, #24]
 8015b7a:	69db      	ldr	r3, [r3, #28]
 8015b7c:	68ba      	ldr	r2, [r7, #8]
 8015b7e:	429a      	cmp	r2, r3
 8015b80:	d3c6      	bcc.n	8015b10 <remove_chain+0x4a>
 8015b82:	e000      	b.n	8015b86 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8015b84:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8015b86:	2300      	movs	r3, #0
}
 8015b88:	4618      	mov	r0, r3
 8015b8a:	3720      	adds	r7, #32
 8015b8c:	46bd      	mov	sp, r7
 8015b8e:	bd80      	pop	{r7, pc}

08015b90 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8015b90:	b580      	push	{r7, lr}
 8015b92:	b088      	sub	sp, #32
 8015b94:	af00      	add	r7, sp, #0
 8015b96:	6078      	str	r0, [r7, #4]
 8015b98:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	681b      	ldr	r3, [r3, #0]
 8015b9e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8015ba0:	683b      	ldr	r3, [r7, #0]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d10d      	bne.n	8015bc2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8015ba6:	693b      	ldr	r3, [r7, #16]
 8015ba8:	695b      	ldr	r3, [r3, #20]
 8015baa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8015bac:	69bb      	ldr	r3, [r7, #24]
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d004      	beq.n	8015bbc <create_chain+0x2c>
 8015bb2:	693b      	ldr	r3, [r7, #16]
 8015bb4:	69db      	ldr	r3, [r3, #28]
 8015bb6:	69ba      	ldr	r2, [r7, #24]
 8015bb8:	429a      	cmp	r2, r3
 8015bba:	d31b      	bcc.n	8015bf4 <create_chain+0x64>
 8015bbc:	2301      	movs	r3, #1
 8015bbe:	61bb      	str	r3, [r7, #24]
 8015bc0:	e018      	b.n	8015bf4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8015bc2:	6839      	ldr	r1, [r7, #0]
 8015bc4:	6878      	ldr	r0, [r7, #4]
 8015bc6:	f7ff fd8e 	bl	80156e6 <get_fat>
 8015bca:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8015bcc:	68fb      	ldr	r3, [r7, #12]
 8015bce:	2b01      	cmp	r3, #1
 8015bd0:	d801      	bhi.n	8015bd6 <create_chain+0x46>
 8015bd2:	2301      	movs	r3, #1
 8015bd4:	e070      	b.n	8015cb8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8015bd6:	68fb      	ldr	r3, [r7, #12]
 8015bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015bdc:	d101      	bne.n	8015be2 <create_chain+0x52>
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	e06a      	b.n	8015cb8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8015be2:	693b      	ldr	r3, [r7, #16]
 8015be4:	69db      	ldr	r3, [r3, #28]
 8015be6:	68fa      	ldr	r2, [r7, #12]
 8015be8:	429a      	cmp	r2, r3
 8015bea:	d201      	bcs.n	8015bf0 <create_chain+0x60>
 8015bec:	68fb      	ldr	r3, [r7, #12]
 8015bee:	e063      	b.n	8015cb8 <create_chain+0x128>
		scl = clst;
 8015bf0:	683b      	ldr	r3, [r7, #0]
 8015bf2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8015bf4:	69bb      	ldr	r3, [r7, #24]
 8015bf6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8015bf8:	69fb      	ldr	r3, [r7, #28]
 8015bfa:	3301      	adds	r3, #1
 8015bfc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8015bfe:	693b      	ldr	r3, [r7, #16]
 8015c00:	69db      	ldr	r3, [r3, #28]
 8015c02:	69fa      	ldr	r2, [r7, #28]
 8015c04:	429a      	cmp	r2, r3
 8015c06:	d307      	bcc.n	8015c18 <create_chain+0x88>
				ncl = 2;
 8015c08:	2302      	movs	r3, #2
 8015c0a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8015c0c:	69fa      	ldr	r2, [r7, #28]
 8015c0e:	69bb      	ldr	r3, [r7, #24]
 8015c10:	429a      	cmp	r2, r3
 8015c12:	d901      	bls.n	8015c18 <create_chain+0x88>
 8015c14:	2300      	movs	r3, #0
 8015c16:	e04f      	b.n	8015cb8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8015c18:	69f9      	ldr	r1, [r7, #28]
 8015c1a:	6878      	ldr	r0, [r7, #4]
 8015c1c:	f7ff fd63 	bl	80156e6 <get_fat>
 8015c20:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	d00e      	beq.n	8015c46 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8015c28:	68fb      	ldr	r3, [r7, #12]
 8015c2a:	2b01      	cmp	r3, #1
 8015c2c:	d003      	beq.n	8015c36 <create_chain+0xa6>
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c34:	d101      	bne.n	8015c3a <create_chain+0xaa>
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	e03e      	b.n	8015cb8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8015c3a:	69fa      	ldr	r2, [r7, #28]
 8015c3c:	69bb      	ldr	r3, [r7, #24]
 8015c3e:	429a      	cmp	r2, r3
 8015c40:	d1da      	bne.n	8015bf8 <create_chain+0x68>
 8015c42:	2300      	movs	r3, #0
 8015c44:	e038      	b.n	8015cb8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8015c46:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8015c48:	f04f 32ff 	mov.w	r2, #4294967295
 8015c4c:	69f9      	ldr	r1, [r7, #28]
 8015c4e:	6938      	ldr	r0, [r7, #16]
 8015c50:	f7ff fe1d 	bl	801588e <put_fat>
 8015c54:	4603      	mov	r3, r0
 8015c56:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8015c58:	7dfb      	ldrb	r3, [r7, #23]
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d109      	bne.n	8015c72 <create_chain+0xe2>
 8015c5e:	683b      	ldr	r3, [r7, #0]
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d006      	beq.n	8015c72 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8015c64:	69fa      	ldr	r2, [r7, #28]
 8015c66:	6839      	ldr	r1, [r7, #0]
 8015c68:	6938      	ldr	r0, [r7, #16]
 8015c6a:	f7ff fe10 	bl	801588e <put_fat>
 8015c6e:	4603      	mov	r3, r0
 8015c70:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8015c72:	7dfb      	ldrb	r3, [r7, #23]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d116      	bne.n	8015ca6 <create_chain+0x116>
		fs->last_clst = ncl;
 8015c78:	693b      	ldr	r3, [r7, #16]
 8015c7a:	69fa      	ldr	r2, [r7, #28]
 8015c7c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8015c7e:	693b      	ldr	r3, [r7, #16]
 8015c80:	699a      	ldr	r2, [r3, #24]
 8015c82:	693b      	ldr	r3, [r7, #16]
 8015c84:	69db      	ldr	r3, [r3, #28]
 8015c86:	3b02      	subs	r3, #2
 8015c88:	429a      	cmp	r2, r3
 8015c8a:	d804      	bhi.n	8015c96 <create_chain+0x106>
 8015c8c:	693b      	ldr	r3, [r7, #16]
 8015c8e:	699b      	ldr	r3, [r3, #24]
 8015c90:	1e5a      	subs	r2, r3, #1
 8015c92:	693b      	ldr	r3, [r7, #16]
 8015c94:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8015c96:	693b      	ldr	r3, [r7, #16]
 8015c98:	791b      	ldrb	r3, [r3, #4]
 8015c9a:	f043 0301 	orr.w	r3, r3, #1
 8015c9e:	b2da      	uxtb	r2, r3
 8015ca0:	693b      	ldr	r3, [r7, #16]
 8015ca2:	711a      	strb	r2, [r3, #4]
 8015ca4:	e007      	b.n	8015cb6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8015ca6:	7dfb      	ldrb	r3, [r7, #23]
 8015ca8:	2b01      	cmp	r3, #1
 8015caa:	d102      	bne.n	8015cb2 <create_chain+0x122>
 8015cac:	f04f 33ff 	mov.w	r3, #4294967295
 8015cb0:	e000      	b.n	8015cb4 <create_chain+0x124>
 8015cb2:	2301      	movs	r3, #1
 8015cb4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8015cb6:	69fb      	ldr	r3, [r7, #28]
}
 8015cb8:	4618      	mov	r0, r3
 8015cba:	3720      	adds	r7, #32
 8015cbc:	46bd      	mov	sp, r7
 8015cbe:	bd80      	pop	{r7, pc}

08015cc0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8015cc0:	b480      	push	{r7}
 8015cc2:	b087      	sub	sp, #28
 8015cc4:	af00      	add	r7, sp, #0
 8015cc6:	6078      	str	r0, [r7, #4]
 8015cc8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	681b      	ldr	r3, [r3, #0]
 8015cce:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015cd4:	3304      	adds	r3, #4
 8015cd6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	899b      	ldrh	r3, [r3, #12]
 8015cdc:	461a      	mov	r2, r3
 8015cde:	683b      	ldr	r3, [r7, #0]
 8015ce0:	fbb3 f3f2 	udiv	r3, r3, r2
 8015ce4:	68fa      	ldr	r2, [r7, #12]
 8015ce6:	8952      	ldrh	r2, [r2, #10]
 8015ce8:	fbb3 f3f2 	udiv	r3, r3, r2
 8015cec:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8015cee:	693b      	ldr	r3, [r7, #16]
 8015cf0:	1d1a      	adds	r2, r3, #4
 8015cf2:	613a      	str	r2, [r7, #16]
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8015cf8:	68bb      	ldr	r3, [r7, #8]
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d101      	bne.n	8015d02 <clmt_clust+0x42>
 8015cfe:	2300      	movs	r3, #0
 8015d00:	e010      	b.n	8015d24 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8015d02:	697a      	ldr	r2, [r7, #20]
 8015d04:	68bb      	ldr	r3, [r7, #8]
 8015d06:	429a      	cmp	r2, r3
 8015d08:	d307      	bcc.n	8015d1a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8015d0a:	697a      	ldr	r2, [r7, #20]
 8015d0c:	68bb      	ldr	r3, [r7, #8]
 8015d0e:	1ad3      	subs	r3, r2, r3
 8015d10:	617b      	str	r3, [r7, #20]
 8015d12:	693b      	ldr	r3, [r7, #16]
 8015d14:	3304      	adds	r3, #4
 8015d16:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8015d18:	e7e9      	b.n	8015cee <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8015d1a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8015d1c:	693b      	ldr	r3, [r7, #16]
 8015d1e:	681a      	ldr	r2, [r3, #0]
 8015d20:	697b      	ldr	r3, [r7, #20]
 8015d22:	4413      	add	r3, r2
}
 8015d24:	4618      	mov	r0, r3
 8015d26:	371c      	adds	r7, #28
 8015d28:	46bd      	mov	sp, r7
 8015d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d2e:	4770      	bx	lr

08015d30 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8015d30:	b580      	push	{r7, lr}
 8015d32:	b086      	sub	sp, #24
 8015d34:	af00      	add	r7, sp, #0
 8015d36:	6078      	str	r0, [r7, #4]
 8015d38:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	681b      	ldr	r3, [r3, #0]
 8015d3e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8015d40:	683b      	ldr	r3, [r7, #0]
 8015d42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015d46:	d204      	bcs.n	8015d52 <dir_sdi+0x22>
 8015d48:	683b      	ldr	r3, [r7, #0]
 8015d4a:	f003 031f 	and.w	r3, r3, #31
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d001      	beq.n	8015d56 <dir_sdi+0x26>
		return FR_INT_ERR;
 8015d52:	2302      	movs	r3, #2
 8015d54:	e071      	b.n	8015e3a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	683a      	ldr	r2, [r7, #0]
 8015d5a:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	689b      	ldr	r3, [r3, #8]
 8015d60:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8015d62:	697b      	ldr	r3, [r7, #20]
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d106      	bne.n	8015d76 <dir_sdi+0x46>
 8015d68:	693b      	ldr	r3, [r7, #16]
 8015d6a:	781b      	ldrb	r3, [r3, #0]
 8015d6c:	2b02      	cmp	r3, #2
 8015d6e:	d902      	bls.n	8015d76 <dir_sdi+0x46>
		clst = fs->dirbase;
 8015d70:	693b      	ldr	r3, [r7, #16]
 8015d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d74:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8015d76:	697b      	ldr	r3, [r7, #20]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d10c      	bne.n	8015d96 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8015d7c:	683b      	ldr	r3, [r7, #0]
 8015d7e:	095b      	lsrs	r3, r3, #5
 8015d80:	693a      	ldr	r2, [r7, #16]
 8015d82:	8912      	ldrh	r2, [r2, #8]
 8015d84:	4293      	cmp	r3, r2
 8015d86:	d301      	bcc.n	8015d8c <dir_sdi+0x5c>
 8015d88:	2302      	movs	r3, #2
 8015d8a:	e056      	b.n	8015e3a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8015d8c:	693b      	ldr	r3, [r7, #16]
 8015d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	619a      	str	r2, [r3, #24]
 8015d94:	e02d      	b.n	8015df2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8015d96:	693b      	ldr	r3, [r7, #16]
 8015d98:	895b      	ldrh	r3, [r3, #10]
 8015d9a:	461a      	mov	r2, r3
 8015d9c:	693b      	ldr	r3, [r7, #16]
 8015d9e:	899b      	ldrh	r3, [r3, #12]
 8015da0:	fb02 f303 	mul.w	r3, r2, r3
 8015da4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8015da6:	e019      	b.n	8015ddc <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	6979      	ldr	r1, [r7, #20]
 8015dac:	4618      	mov	r0, r3
 8015dae:	f7ff fc9a 	bl	80156e6 <get_fat>
 8015db2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015db4:	697b      	ldr	r3, [r7, #20]
 8015db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015dba:	d101      	bne.n	8015dc0 <dir_sdi+0x90>
 8015dbc:	2301      	movs	r3, #1
 8015dbe:	e03c      	b.n	8015e3a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8015dc0:	697b      	ldr	r3, [r7, #20]
 8015dc2:	2b01      	cmp	r3, #1
 8015dc4:	d904      	bls.n	8015dd0 <dir_sdi+0xa0>
 8015dc6:	693b      	ldr	r3, [r7, #16]
 8015dc8:	69db      	ldr	r3, [r3, #28]
 8015dca:	697a      	ldr	r2, [r7, #20]
 8015dcc:	429a      	cmp	r2, r3
 8015dce:	d301      	bcc.n	8015dd4 <dir_sdi+0xa4>
 8015dd0:	2302      	movs	r3, #2
 8015dd2:	e032      	b.n	8015e3a <dir_sdi+0x10a>
			ofs -= csz;
 8015dd4:	683a      	ldr	r2, [r7, #0]
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	1ad3      	subs	r3, r2, r3
 8015dda:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8015ddc:	683a      	ldr	r2, [r7, #0]
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	429a      	cmp	r2, r3
 8015de2:	d2e1      	bcs.n	8015da8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8015de4:	6979      	ldr	r1, [r7, #20]
 8015de6:	6938      	ldr	r0, [r7, #16]
 8015de8:	f7ff fc5e 	bl	80156a8 <clust2sect>
 8015dec:	4602      	mov	r2, r0
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	697a      	ldr	r2, [r7, #20]
 8015df6:	615a      	str	r2, [r3, #20]
	if (!dp->sect) return FR_INT_ERR;
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	699b      	ldr	r3, [r3, #24]
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d101      	bne.n	8015e04 <dir_sdi+0xd4>
 8015e00:	2302      	movs	r3, #2
 8015e02:	e01a      	b.n	8015e3a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	699a      	ldr	r2, [r3, #24]
 8015e08:	693b      	ldr	r3, [r7, #16]
 8015e0a:	899b      	ldrh	r3, [r3, #12]
 8015e0c:	4619      	mov	r1, r3
 8015e0e:	683b      	ldr	r3, [r7, #0]
 8015e10:	fbb3 f3f1 	udiv	r3, r3, r1
 8015e14:	441a      	add	r2, r3
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8015e1a:	693b      	ldr	r3, [r7, #16]
 8015e1c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015e20:	693b      	ldr	r3, [r7, #16]
 8015e22:	899b      	ldrh	r3, [r3, #12]
 8015e24:	461a      	mov	r2, r3
 8015e26:	683b      	ldr	r3, [r7, #0]
 8015e28:	fbb3 f0f2 	udiv	r0, r3, r2
 8015e2c:	fb00 f202 	mul.w	r2, r0, r2
 8015e30:	1a9b      	subs	r3, r3, r2
 8015e32:	18ca      	adds	r2, r1, r3
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8015e38:	2300      	movs	r3, #0
}
 8015e3a:	4618      	mov	r0, r3
 8015e3c:	3718      	adds	r7, #24
 8015e3e:	46bd      	mov	sp, r7
 8015e40:	bd80      	pop	{r7, pc}

08015e42 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8015e42:	b580      	push	{r7, lr}
 8015e44:	b086      	sub	sp, #24
 8015e46:	af00      	add	r7, sp, #0
 8015e48:	6078      	str	r0, [r7, #4]
 8015e4a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	691b      	ldr	r3, [r3, #16]
 8015e56:	3320      	adds	r3, #32
 8015e58:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	699b      	ldr	r3, [r3, #24]
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d003      	beq.n	8015e6a <dir_next+0x28>
 8015e62:	68bb      	ldr	r3, [r7, #8]
 8015e64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015e68:	d301      	bcc.n	8015e6e <dir_next+0x2c>
 8015e6a:	2304      	movs	r3, #4
 8015e6c:	e0bb      	b.n	8015fe6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	899b      	ldrh	r3, [r3, #12]
 8015e72:	461a      	mov	r2, r3
 8015e74:	68bb      	ldr	r3, [r7, #8]
 8015e76:	fbb3 f1f2 	udiv	r1, r3, r2
 8015e7a:	fb01 f202 	mul.w	r2, r1, r2
 8015e7e:	1a9b      	subs	r3, r3, r2
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	f040 809d 	bne.w	8015fc0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8015e86:	687b      	ldr	r3, [r7, #4]
 8015e88:	699b      	ldr	r3, [r3, #24]
 8015e8a:	1c5a      	adds	r2, r3, #1
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	619a      	str	r2, [r3, #24]

		if (!dp->clust) {		/* Static table */
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	695b      	ldr	r3, [r3, #20]
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d10b      	bne.n	8015eb0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8015e98:	68bb      	ldr	r3, [r7, #8]
 8015e9a:	095b      	lsrs	r3, r3, #5
 8015e9c:	68fa      	ldr	r2, [r7, #12]
 8015e9e:	8912      	ldrh	r2, [r2, #8]
 8015ea0:	4293      	cmp	r3, r2
 8015ea2:	f0c0 808d 	bcc.w	8015fc0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	2200      	movs	r2, #0
 8015eaa:	619a      	str	r2, [r3, #24]
 8015eac:	2304      	movs	r3, #4
 8015eae:	e09a      	b.n	8015fe6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8015eb0:	68fb      	ldr	r3, [r7, #12]
 8015eb2:	899b      	ldrh	r3, [r3, #12]
 8015eb4:	461a      	mov	r2, r3
 8015eb6:	68bb      	ldr	r3, [r7, #8]
 8015eb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8015ebc:	68fa      	ldr	r2, [r7, #12]
 8015ebe:	8952      	ldrh	r2, [r2, #10]
 8015ec0:	3a01      	subs	r2, #1
 8015ec2:	4013      	ands	r3, r2
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d17b      	bne.n	8015fc0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8015ec8:	687a      	ldr	r2, [r7, #4]
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	695b      	ldr	r3, [r3, #20]
 8015ece:	4619      	mov	r1, r3
 8015ed0:	4610      	mov	r0, r2
 8015ed2:	f7ff fc08 	bl	80156e6 <get_fat>
 8015ed6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8015ed8:	697b      	ldr	r3, [r7, #20]
 8015eda:	2b01      	cmp	r3, #1
 8015edc:	d801      	bhi.n	8015ee2 <dir_next+0xa0>
 8015ede:	2302      	movs	r3, #2
 8015ee0:	e081      	b.n	8015fe6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8015ee2:	697b      	ldr	r3, [r7, #20]
 8015ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ee8:	d101      	bne.n	8015eee <dir_next+0xac>
 8015eea:	2301      	movs	r3, #1
 8015eec:	e07b      	b.n	8015fe6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	69db      	ldr	r3, [r3, #28]
 8015ef2:	697a      	ldr	r2, [r7, #20]
 8015ef4:	429a      	cmp	r2, r3
 8015ef6:	d359      	bcc.n	8015fac <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8015ef8:	683b      	ldr	r3, [r7, #0]
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d104      	bne.n	8015f08 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	2200      	movs	r2, #0
 8015f02:	619a      	str	r2, [r3, #24]
 8015f04:	2304      	movs	r3, #4
 8015f06:	e06e      	b.n	8015fe6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8015f08:	687a      	ldr	r2, [r7, #4]
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	695b      	ldr	r3, [r3, #20]
 8015f0e:	4619      	mov	r1, r3
 8015f10:	4610      	mov	r0, r2
 8015f12:	f7ff fe3d 	bl	8015b90 <create_chain>
 8015f16:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8015f18:	697b      	ldr	r3, [r7, #20]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d101      	bne.n	8015f22 <dir_next+0xe0>
 8015f1e:	2307      	movs	r3, #7
 8015f20:	e061      	b.n	8015fe6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8015f22:	697b      	ldr	r3, [r7, #20]
 8015f24:	2b01      	cmp	r3, #1
 8015f26:	d101      	bne.n	8015f2c <dir_next+0xea>
 8015f28:	2302      	movs	r3, #2
 8015f2a:	e05c      	b.n	8015fe6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015f2c:	697b      	ldr	r3, [r7, #20]
 8015f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f32:	d101      	bne.n	8015f38 <dir_next+0xf6>
 8015f34:	2301      	movs	r3, #1
 8015f36:	e056      	b.n	8015fe6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8015f38:	68f8      	ldr	r0, [r7, #12]
 8015f3a:	f7ff fad3 	bl	80154e4 <sync_window>
 8015f3e:	4603      	mov	r3, r0
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d001      	beq.n	8015f48 <dir_next+0x106>
 8015f44:	2301      	movs	r3, #1
 8015f46:	e04e      	b.n	8015fe6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8015f48:	68fb      	ldr	r3, [r7, #12]
 8015f4a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	899b      	ldrh	r3, [r3, #12]
 8015f52:	461a      	mov	r2, r3
 8015f54:	2100      	movs	r1, #0
 8015f56:	f7ff fa68 	bl	801542a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015f5a:	2300      	movs	r3, #0
 8015f5c:	613b      	str	r3, [r7, #16]
 8015f5e:	6979      	ldr	r1, [r7, #20]
 8015f60:	68f8      	ldr	r0, [r7, #12]
 8015f62:	f7ff fba1 	bl	80156a8 <clust2sect>
 8015f66:	4602      	mov	r2, r0
 8015f68:	68fb      	ldr	r3, [r7, #12]
 8015f6a:	635a      	str	r2, [r3, #52]	; 0x34
 8015f6c:	e012      	b.n	8015f94 <dir_next+0x152>
						fs->wflag = 1;
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	2201      	movs	r2, #1
 8015f72:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8015f74:	68f8      	ldr	r0, [r7, #12]
 8015f76:	f7ff fab5 	bl	80154e4 <sync_window>
 8015f7a:	4603      	mov	r3, r0
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d001      	beq.n	8015f84 <dir_next+0x142>
 8015f80:	2301      	movs	r3, #1
 8015f82:	e030      	b.n	8015fe6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015f84:	693b      	ldr	r3, [r7, #16]
 8015f86:	3301      	adds	r3, #1
 8015f88:	613b      	str	r3, [r7, #16]
 8015f8a:	68fb      	ldr	r3, [r7, #12]
 8015f8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015f8e:	1c5a      	adds	r2, r3, #1
 8015f90:	68fb      	ldr	r3, [r7, #12]
 8015f92:	635a      	str	r2, [r3, #52]	; 0x34
 8015f94:	68fb      	ldr	r3, [r7, #12]
 8015f96:	895b      	ldrh	r3, [r3, #10]
 8015f98:	461a      	mov	r2, r3
 8015f9a:	693b      	ldr	r3, [r7, #16]
 8015f9c:	4293      	cmp	r3, r2
 8015f9e:	d3e6      	bcc.n	8015f6e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8015fa0:	68fb      	ldr	r3, [r7, #12]
 8015fa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015fa4:	693b      	ldr	r3, [r7, #16]
 8015fa6:	1ad2      	subs	r2, r2, r3
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	697a      	ldr	r2, [r7, #20]
 8015fb0:	615a      	str	r2, [r3, #20]
				dp->sect = clust2sect(fs, clst);
 8015fb2:	6979      	ldr	r1, [r7, #20]
 8015fb4:	68f8      	ldr	r0, [r7, #12]
 8015fb6:	f7ff fb77 	bl	80156a8 <clust2sect>
 8015fba:	4602      	mov	r2, r0
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	68ba      	ldr	r2, [r7, #8]
 8015fc4:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	899b      	ldrh	r3, [r3, #12]
 8015fd0:	461a      	mov	r2, r3
 8015fd2:	68bb      	ldr	r3, [r7, #8]
 8015fd4:	fbb3 f0f2 	udiv	r0, r3, r2
 8015fd8:	fb00 f202 	mul.w	r2, r0, r2
 8015fdc:	1a9b      	subs	r3, r3, r2
 8015fde:	18ca      	adds	r2, r1, r3
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8015fe4:	2300      	movs	r3, #0
}
 8015fe6:	4618      	mov	r0, r3
 8015fe8:	3718      	adds	r7, #24
 8015fea:	46bd      	mov	sp, r7
 8015fec:	bd80      	pop	{r7, pc}

08015fee <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8015fee:	b580      	push	{r7, lr}
 8015ff0:	b086      	sub	sp, #24
 8015ff2:	af00      	add	r7, sp, #0
 8015ff4:	6078      	str	r0, [r7, #4]
 8015ff6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8015ffe:	2100      	movs	r1, #0
 8016000:	6878      	ldr	r0, [r7, #4]
 8016002:	f7ff fe95 	bl	8015d30 <dir_sdi>
 8016006:	4603      	mov	r3, r0
 8016008:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801600a:	7dfb      	ldrb	r3, [r7, #23]
 801600c:	2b00      	cmp	r3, #0
 801600e:	d12b      	bne.n	8016068 <dir_alloc+0x7a>
		n = 0;
 8016010:	2300      	movs	r3, #0
 8016012:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	699b      	ldr	r3, [r3, #24]
 8016018:	4619      	mov	r1, r3
 801601a:	68f8      	ldr	r0, [r7, #12]
 801601c:	f7ff faa6 	bl	801556c <move_window>
 8016020:	4603      	mov	r3, r0
 8016022:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8016024:	7dfb      	ldrb	r3, [r7, #23]
 8016026:	2b00      	cmp	r3, #0
 8016028:	d11d      	bne.n	8016066 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	69db      	ldr	r3, [r3, #28]
 801602e:	781b      	ldrb	r3, [r3, #0]
 8016030:	2be5      	cmp	r3, #229	; 0xe5
 8016032:	d004      	beq.n	801603e <dir_alloc+0x50>
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	69db      	ldr	r3, [r3, #28]
 8016038:	781b      	ldrb	r3, [r3, #0]
 801603a:	2b00      	cmp	r3, #0
 801603c:	d107      	bne.n	801604e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801603e:	693b      	ldr	r3, [r7, #16]
 8016040:	3301      	adds	r3, #1
 8016042:	613b      	str	r3, [r7, #16]
 8016044:	693a      	ldr	r2, [r7, #16]
 8016046:	683b      	ldr	r3, [r7, #0]
 8016048:	429a      	cmp	r2, r3
 801604a:	d102      	bne.n	8016052 <dir_alloc+0x64>
 801604c:	e00c      	b.n	8016068 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801604e:	2300      	movs	r3, #0
 8016050:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8016052:	2101      	movs	r1, #1
 8016054:	6878      	ldr	r0, [r7, #4]
 8016056:	f7ff fef4 	bl	8015e42 <dir_next>
 801605a:	4603      	mov	r3, r0
 801605c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801605e:	7dfb      	ldrb	r3, [r7, #23]
 8016060:	2b00      	cmp	r3, #0
 8016062:	d0d7      	beq.n	8016014 <dir_alloc+0x26>
 8016064:	e000      	b.n	8016068 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8016066:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8016068:	7dfb      	ldrb	r3, [r7, #23]
 801606a:	2b04      	cmp	r3, #4
 801606c:	d101      	bne.n	8016072 <dir_alloc+0x84>
 801606e:	2307      	movs	r3, #7
 8016070:	75fb      	strb	r3, [r7, #23]
	return res;
 8016072:	7dfb      	ldrb	r3, [r7, #23]
}
 8016074:	4618      	mov	r0, r3
 8016076:	3718      	adds	r7, #24
 8016078:	46bd      	mov	sp, r7
 801607a:	bd80      	pop	{r7, pc}

0801607c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801607c:	b580      	push	{r7, lr}
 801607e:	b084      	sub	sp, #16
 8016080:	af00      	add	r7, sp, #0
 8016082:	6078      	str	r0, [r7, #4]
 8016084:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8016086:	683b      	ldr	r3, [r7, #0]
 8016088:	331a      	adds	r3, #26
 801608a:	4618      	mov	r0, r3
 801608c:	f7ff f92a 	bl	80152e4 <ld_word>
 8016090:	4603      	mov	r3, r0
 8016092:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	781b      	ldrb	r3, [r3, #0]
 8016098:	2b03      	cmp	r3, #3
 801609a:	d109      	bne.n	80160b0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801609c:	683b      	ldr	r3, [r7, #0]
 801609e:	3314      	adds	r3, #20
 80160a0:	4618      	mov	r0, r3
 80160a2:	f7ff f91f 	bl	80152e4 <ld_word>
 80160a6:	4603      	mov	r3, r0
 80160a8:	041b      	lsls	r3, r3, #16
 80160aa:	68fa      	ldr	r2, [r7, #12]
 80160ac:	4313      	orrs	r3, r2
 80160ae:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80160b0:	68fb      	ldr	r3, [r7, #12]
}
 80160b2:	4618      	mov	r0, r3
 80160b4:	3710      	adds	r7, #16
 80160b6:	46bd      	mov	sp, r7
 80160b8:	bd80      	pop	{r7, pc}

080160ba <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80160ba:	b580      	push	{r7, lr}
 80160bc:	b084      	sub	sp, #16
 80160be:	af00      	add	r7, sp, #0
 80160c0:	60f8      	str	r0, [r7, #12]
 80160c2:	60b9      	str	r1, [r7, #8]
 80160c4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80160c6:	68bb      	ldr	r3, [r7, #8]
 80160c8:	331a      	adds	r3, #26
 80160ca:	687a      	ldr	r2, [r7, #4]
 80160cc:	b292      	uxth	r2, r2
 80160ce:	4611      	mov	r1, r2
 80160d0:	4618      	mov	r0, r3
 80160d2:	f7ff f942 	bl	801535a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	781b      	ldrb	r3, [r3, #0]
 80160da:	2b03      	cmp	r3, #3
 80160dc:	d109      	bne.n	80160f2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80160de:	68bb      	ldr	r3, [r7, #8]
 80160e0:	f103 0214 	add.w	r2, r3, #20
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	0c1b      	lsrs	r3, r3, #16
 80160e8:	b29b      	uxth	r3, r3
 80160ea:	4619      	mov	r1, r3
 80160ec:	4610      	mov	r0, r2
 80160ee:	f7ff f934 	bl	801535a <st_word>
	}
}
 80160f2:	bf00      	nop
 80160f4:	3710      	adds	r7, #16
 80160f6:	46bd      	mov	sp, r7
 80160f8:	bd80      	pop	{r7, pc}
	...

080160fc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80160fc:	b590      	push	{r4, r7, lr}
 80160fe:	b087      	sub	sp, #28
 8016100:	af00      	add	r7, sp, #0
 8016102:	6078      	str	r0, [r7, #4]
 8016104:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8016106:	683b      	ldr	r3, [r7, #0]
 8016108:	331a      	adds	r3, #26
 801610a:	4618      	mov	r0, r3
 801610c:	f7ff f8ea 	bl	80152e4 <ld_word>
 8016110:	4603      	mov	r3, r0
 8016112:	2b00      	cmp	r3, #0
 8016114:	d001      	beq.n	801611a <cmp_lfn+0x1e>
 8016116:	2300      	movs	r3, #0
 8016118:	e059      	b.n	80161ce <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801611a:	683b      	ldr	r3, [r7, #0]
 801611c:	781b      	ldrb	r3, [r3, #0]
 801611e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016122:	1e5a      	subs	r2, r3, #1
 8016124:	4613      	mov	r3, r2
 8016126:	005b      	lsls	r3, r3, #1
 8016128:	4413      	add	r3, r2
 801612a:	009b      	lsls	r3, r3, #2
 801612c:	4413      	add	r3, r2
 801612e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8016130:	2301      	movs	r3, #1
 8016132:	81fb      	strh	r3, [r7, #14]
 8016134:	2300      	movs	r3, #0
 8016136:	613b      	str	r3, [r7, #16]
 8016138:	e033      	b.n	80161a2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801613a:	4a27      	ldr	r2, [pc, #156]	; (80161d8 <cmp_lfn+0xdc>)
 801613c:	693b      	ldr	r3, [r7, #16]
 801613e:	4413      	add	r3, r2
 8016140:	781b      	ldrb	r3, [r3, #0]
 8016142:	461a      	mov	r2, r3
 8016144:	683b      	ldr	r3, [r7, #0]
 8016146:	4413      	add	r3, r2
 8016148:	4618      	mov	r0, r3
 801614a:	f7ff f8cb 	bl	80152e4 <ld_word>
 801614e:	4603      	mov	r3, r0
 8016150:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8016152:	89fb      	ldrh	r3, [r7, #14]
 8016154:	2b00      	cmp	r3, #0
 8016156:	d01a      	beq.n	801618e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8016158:	697b      	ldr	r3, [r7, #20]
 801615a:	2bfe      	cmp	r3, #254	; 0xfe
 801615c:	d812      	bhi.n	8016184 <cmp_lfn+0x88>
 801615e:	89bb      	ldrh	r3, [r7, #12]
 8016160:	4618      	mov	r0, r3
 8016162:	f001 fedf 	bl	8017f24 <ff_wtoupper>
 8016166:	4603      	mov	r3, r0
 8016168:	461c      	mov	r4, r3
 801616a:	697b      	ldr	r3, [r7, #20]
 801616c:	1c5a      	adds	r2, r3, #1
 801616e:	617a      	str	r2, [r7, #20]
 8016170:	005b      	lsls	r3, r3, #1
 8016172:	687a      	ldr	r2, [r7, #4]
 8016174:	4413      	add	r3, r2
 8016176:	881b      	ldrh	r3, [r3, #0]
 8016178:	4618      	mov	r0, r3
 801617a:	f001 fed3 	bl	8017f24 <ff_wtoupper>
 801617e:	4603      	mov	r3, r0
 8016180:	429c      	cmp	r4, r3
 8016182:	d001      	beq.n	8016188 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8016184:	2300      	movs	r3, #0
 8016186:	e022      	b.n	80161ce <cmp_lfn+0xd2>
			}
			wc = uc;
 8016188:	89bb      	ldrh	r3, [r7, #12]
 801618a:	81fb      	strh	r3, [r7, #14]
 801618c:	e006      	b.n	801619c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801618e:	89bb      	ldrh	r3, [r7, #12]
 8016190:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016194:	4293      	cmp	r3, r2
 8016196:	d001      	beq.n	801619c <cmp_lfn+0xa0>
 8016198:	2300      	movs	r3, #0
 801619a:	e018      	b.n	80161ce <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801619c:	693b      	ldr	r3, [r7, #16]
 801619e:	3301      	adds	r3, #1
 80161a0:	613b      	str	r3, [r7, #16]
 80161a2:	693b      	ldr	r3, [r7, #16]
 80161a4:	2b0c      	cmp	r3, #12
 80161a6:	d9c8      	bls.n	801613a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80161a8:	683b      	ldr	r3, [r7, #0]
 80161aa:	781b      	ldrb	r3, [r3, #0]
 80161ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d00b      	beq.n	80161cc <cmp_lfn+0xd0>
 80161b4:	89fb      	ldrh	r3, [r7, #14]
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d008      	beq.n	80161cc <cmp_lfn+0xd0>
 80161ba:	697b      	ldr	r3, [r7, #20]
 80161bc:	005b      	lsls	r3, r3, #1
 80161be:	687a      	ldr	r2, [r7, #4]
 80161c0:	4413      	add	r3, r2
 80161c2:	881b      	ldrh	r3, [r3, #0]
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d001      	beq.n	80161cc <cmp_lfn+0xd0>
 80161c8:	2300      	movs	r3, #0
 80161ca:	e000      	b.n	80161ce <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80161cc:	2301      	movs	r3, #1
}
 80161ce:	4618      	mov	r0, r3
 80161d0:	371c      	adds	r7, #28
 80161d2:	46bd      	mov	sp, r7
 80161d4:	bd90      	pop	{r4, r7, pc}
 80161d6:	bf00      	nop
 80161d8:	08019620 	.word	0x08019620

080161dc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80161dc:	b580      	push	{r7, lr}
 80161de:	b088      	sub	sp, #32
 80161e0:	af00      	add	r7, sp, #0
 80161e2:	60f8      	str	r0, [r7, #12]
 80161e4:	60b9      	str	r1, [r7, #8]
 80161e6:	4611      	mov	r1, r2
 80161e8:	461a      	mov	r2, r3
 80161ea:	460b      	mov	r3, r1
 80161ec:	71fb      	strb	r3, [r7, #7]
 80161ee:	4613      	mov	r3, r2
 80161f0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80161f2:	68bb      	ldr	r3, [r7, #8]
 80161f4:	330d      	adds	r3, #13
 80161f6:	79ba      	ldrb	r2, [r7, #6]
 80161f8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80161fa:	68bb      	ldr	r3, [r7, #8]
 80161fc:	330b      	adds	r3, #11
 80161fe:	220f      	movs	r2, #15
 8016200:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8016202:	68bb      	ldr	r3, [r7, #8]
 8016204:	330c      	adds	r3, #12
 8016206:	2200      	movs	r2, #0
 8016208:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801620a:	68bb      	ldr	r3, [r7, #8]
 801620c:	331a      	adds	r3, #26
 801620e:	2100      	movs	r1, #0
 8016210:	4618      	mov	r0, r3
 8016212:	f7ff f8a2 	bl	801535a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8016216:	79fb      	ldrb	r3, [r7, #7]
 8016218:	1e5a      	subs	r2, r3, #1
 801621a:	4613      	mov	r3, r2
 801621c:	005b      	lsls	r3, r3, #1
 801621e:	4413      	add	r3, r2
 8016220:	009b      	lsls	r3, r3, #2
 8016222:	4413      	add	r3, r2
 8016224:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8016226:	2300      	movs	r3, #0
 8016228:	82fb      	strh	r3, [r7, #22]
 801622a:	2300      	movs	r3, #0
 801622c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801622e:	8afb      	ldrh	r3, [r7, #22]
 8016230:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016234:	4293      	cmp	r3, r2
 8016236:	d007      	beq.n	8016248 <put_lfn+0x6c>
 8016238:	69fb      	ldr	r3, [r7, #28]
 801623a:	1c5a      	adds	r2, r3, #1
 801623c:	61fa      	str	r2, [r7, #28]
 801623e:	005b      	lsls	r3, r3, #1
 8016240:	68fa      	ldr	r2, [r7, #12]
 8016242:	4413      	add	r3, r2
 8016244:	881b      	ldrh	r3, [r3, #0]
 8016246:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8016248:	4a17      	ldr	r2, [pc, #92]	; (80162a8 <put_lfn+0xcc>)
 801624a:	69bb      	ldr	r3, [r7, #24]
 801624c:	4413      	add	r3, r2
 801624e:	781b      	ldrb	r3, [r3, #0]
 8016250:	461a      	mov	r2, r3
 8016252:	68bb      	ldr	r3, [r7, #8]
 8016254:	4413      	add	r3, r2
 8016256:	8afa      	ldrh	r2, [r7, #22]
 8016258:	4611      	mov	r1, r2
 801625a:	4618      	mov	r0, r3
 801625c:	f7ff f87d 	bl	801535a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8016260:	8afb      	ldrh	r3, [r7, #22]
 8016262:	2b00      	cmp	r3, #0
 8016264:	d102      	bne.n	801626c <put_lfn+0x90>
 8016266:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801626a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 801626c:	69bb      	ldr	r3, [r7, #24]
 801626e:	3301      	adds	r3, #1
 8016270:	61bb      	str	r3, [r7, #24]
 8016272:	69bb      	ldr	r3, [r7, #24]
 8016274:	2b0c      	cmp	r3, #12
 8016276:	d9da      	bls.n	801622e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8016278:	8afb      	ldrh	r3, [r7, #22]
 801627a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801627e:	4293      	cmp	r3, r2
 8016280:	d006      	beq.n	8016290 <put_lfn+0xb4>
 8016282:	69fb      	ldr	r3, [r7, #28]
 8016284:	005b      	lsls	r3, r3, #1
 8016286:	68fa      	ldr	r2, [r7, #12]
 8016288:	4413      	add	r3, r2
 801628a:	881b      	ldrh	r3, [r3, #0]
 801628c:	2b00      	cmp	r3, #0
 801628e:	d103      	bne.n	8016298 <put_lfn+0xbc>
 8016290:	79fb      	ldrb	r3, [r7, #7]
 8016292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016296:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8016298:	68bb      	ldr	r3, [r7, #8]
 801629a:	79fa      	ldrb	r2, [r7, #7]
 801629c:	701a      	strb	r2, [r3, #0]
}
 801629e:	bf00      	nop
 80162a0:	3720      	adds	r7, #32
 80162a2:	46bd      	mov	sp, r7
 80162a4:	bd80      	pop	{r7, pc}
 80162a6:	bf00      	nop
 80162a8:	08019620 	.word	0x08019620

080162ac <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b08c      	sub	sp, #48	; 0x30
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	60f8      	str	r0, [r7, #12]
 80162b4:	60b9      	str	r1, [r7, #8]
 80162b6:	607a      	str	r2, [r7, #4]
 80162b8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80162ba:	220b      	movs	r2, #11
 80162bc:	68b9      	ldr	r1, [r7, #8]
 80162be:	68f8      	ldr	r0, [r7, #12]
 80162c0:	f7ff f892 	bl	80153e8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80162c4:	683b      	ldr	r3, [r7, #0]
 80162c6:	2b05      	cmp	r3, #5
 80162c8:	d92b      	bls.n	8016322 <gen_numname+0x76>
		sr = seq;
 80162ca:	683b      	ldr	r3, [r7, #0]
 80162cc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80162ce:	e022      	b.n	8016316 <gen_numname+0x6a>
			wc = *lfn++;
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	1c9a      	adds	r2, r3, #2
 80162d4:	607a      	str	r2, [r7, #4]
 80162d6:	881b      	ldrh	r3, [r3, #0]
 80162d8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80162da:	2300      	movs	r3, #0
 80162dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80162de:	e017      	b.n	8016310 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80162e0:	69fb      	ldr	r3, [r7, #28]
 80162e2:	005a      	lsls	r2, r3, #1
 80162e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80162e6:	f003 0301 	and.w	r3, r3, #1
 80162ea:	4413      	add	r3, r2
 80162ec:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80162ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80162f0:	085b      	lsrs	r3, r3, #1
 80162f2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80162f4:	69fb      	ldr	r3, [r7, #28]
 80162f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d005      	beq.n	801630a <gen_numname+0x5e>
 80162fe:	69fb      	ldr	r3, [r7, #28]
 8016300:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8016304:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8016308:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801630a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801630c:	3301      	adds	r3, #1
 801630e:	62bb      	str	r3, [r7, #40]	; 0x28
 8016310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016312:	2b0f      	cmp	r3, #15
 8016314:	d9e4      	bls.n	80162e0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	881b      	ldrh	r3, [r3, #0]
 801631a:	2b00      	cmp	r3, #0
 801631c:	d1d8      	bne.n	80162d0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801631e:	69fb      	ldr	r3, [r7, #28]
 8016320:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8016322:	2307      	movs	r3, #7
 8016324:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8016326:	683b      	ldr	r3, [r7, #0]
 8016328:	b2db      	uxtb	r3, r3
 801632a:	f003 030f 	and.w	r3, r3, #15
 801632e:	b2db      	uxtb	r3, r3
 8016330:	3330      	adds	r3, #48	; 0x30
 8016332:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8016336:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801633a:	2b39      	cmp	r3, #57	; 0x39
 801633c:	d904      	bls.n	8016348 <gen_numname+0x9c>
 801633e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016342:	3307      	adds	r3, #7
 8016344:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8016348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801634a:	1e5a      	subs	r2, r3, #1
 801634c:	62ba      	str	r2, [r7, #40]	; 0x28
 801634e:	3330      	adds	r3, #48	; 0x30
 8016350:	443b      	add	r3, r7
 8016352:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8016356:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801635a:	683b      	ldr	r3, [r7, #0]
 801635c:	091b      	lsrs	r3, r3, #4
 801635e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8016360:	683b      	ldr	r3, [r7, #0]
 8016362:	2b00      	cmp	r3, #0
 8016364:	d1df      	bne.n	8016326 <gen_numname+0x7a>
	ns[i] = '~';
 8016366:	f107 0214 	add.w	r2, r7, #20
 801636a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801636c:	4413      	add	r3, r2
 801636e:	227e      	movs	r2, #126	; 0x7e
 8016370:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8016372:	2300      	movs	r3, #0
 8016374:	627b      	str	r3, [r7, #36]	; 0x24
 8016376:	e002      	b.n	801637e <gen_numname+0xd2>
 8016378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801637a:	3301      	adds	r3, #1
 801637c:	627b      	str	r3, [r7, #36]	; 0x24
 801637e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016382:	429a      	cmp	r2, r3
 8016384:	d205      	bcs.n	8016392 <gen_numname+0xe6>
 8016386:	68fa      	ldr	r2, [r7, #12]
 8016388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801638a:	4413      	add	r3, r2
 801638c:	781b      	ldrb	r3, [r3, #0]
 801638e:	2b20      	cmp	r3, #32
 8016390:	d1f2      	bne.n	8016378 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8016392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016394:	2b07      	cmp	r3, #7
 8016396:	d807      	bhi.n	80163a8 <gen_numname+0xfc>
 8016398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801639a:	1c5a      	adds	r2, r3, #1
 801639c:	62ba      	str	r2, [r7, #40]	; 0x28
 801639e:	3330      	adds	r3, #48	; 0x30
 80163a0:	443b      	add	r3, r7
 80163a2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80163a6:	e000      	b.n	80163aa <gen_numname+0xfe>
 80163a8:	2120      	movs	r1, #32
 80163aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163ac:	1c5a      	adds	r2, r3, #1
 80163ae:	627a      	str	r2, [r7, #36]	; 0x24
 80163b0:	68fa      	ldr	r2, [r7, #12]
 80163b2:	4413      	add	r3, r2
 80163b4:	460a      	mov	r2, r1
 80163b6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80163b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163ba:	2b07      	cmp	r3, #7
 80163bc:	d9e9      	bls.n	8016392 <gen_numname+0xe6>
}
 80163be:	bf00      	nop
 80163c0:	bf00      	nop
 80163c2:	3730      	adds	r7, #48	; 0x30
 80163c4:	46bd      	mov	sp, r7
 80163c6:	bd80      	pop	{r7, pc}

080163c8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80163c8:	b480      	push	{r7}
 80163ca:	b085      	sub	sp, #20
 80163cc:	af00      	add	r7, sp, #0
 80163ce:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80163d0:	2300      	movs	r3, #0
 80163d2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80163d4:	230b      	movs	r3, #11
 80163d6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80163d8:	7bfb      	ldrb	r3, [r7, #15]
 80163da:	b2da      	uxtb	r2, r3
 80163dc:	0852      	lsrs	r2, r2, #1
 80163de:	01db      	lsls	r3, r3, #7
 80163e0:	4313      	orrs	r3, r2
 80163e2:	b2da      	uxtb	r2, r3
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	1c59      	adds	r1, r3, #1
 80163e8:	6079      	str	r1, [r7, #4]
 80163ea:	781b      	ldrb	r3, [r3, #0]
 80163ec:	4413      	add	r3, r2
 80163ee:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80163f0:	68bb      	ldr	r3, [r7, #8]
 80163f2:	3b01      	subs	r3, #1
 80163f4:	60bb      	str	r3, [r7, #8]
 80163f6:	68bb      	ldr	r3, [r7, #8]
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d1ed      	bne.n	80163d8 <sum_sfn+0x10>
	return sum;
 80163fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80163fe:	4618      	mov	r0, r3
 8016400:	3714      	adds	r7, #20
 8016402:	46bd      	mov	sp, r7
 8016404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016408:	4770      	bx	lr

0801640a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801640a:	b580      	push	{r7, lr}
 801640c:	b086      	sub	sp, #24
 801640e:	af00      	add	r7, sp, #0
 8016410:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	681b      	ldr	r3, [r3, #0]
 8016416:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8016418:	2100      	movs	r1, #0
 801641a:	6878      	ldr	r0, [r7, #4]
 801641c:	f7ff fc88 	bl	8015d30 <dir_sdi>
 8016420:	4603      	mov	r3, r0
 8016422:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8016424:	7dfb      	ldrb	r3, [r7, #23]
 8016426:	2b00      	cmp	r3, #0
 8016428:	d001      	beq.n	801642e <dir_find+0x24>
 801642a:	7dfb      	ldrb	r3, [r7, #23]
 801642c:	e0a9      	b.n	8016582 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801642e:	23ff      	movs	r3, #255	; 0xff
 8016430:	753b      	strb	r3, [r7, #20]
 8016432:	7d3b      	ldrb	r3, [r7, #20]
 8016434:	757b      	strb	r3, [r7, #21]
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	f04f 32ff 	mov.w	r2, #4294967295
 801643c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
	do {
		res = move_window(fs, dp->sect);
 801643e:	687b      	ldr	r3, [r7, #4]
 8016440:	699b      	ldr	r3, [r3, #24]
 8016442:	4619      	mov	r1, r3
 8016444:	6938      	ldr	r0, [r7, #16]
 8016446:	f7ff f891 	bl	801556c <move_window>
 801644a:	4603      	mov	r3, r0
 801644c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801644e:	7dfb      	ldrb	r3, [r7, #23]
 8016450:	2b00      	cmp	r3, #0
 8016452:	f040 8090 	bne.w	8016576 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	69db      	ldr	r3, [r3, #28]
 801645a:	781b      	ldrb	r3, [r3, #0]
 801645c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801645e:	7dbb      	ldrb	r3, [r7, #22]
 8016460:	2b00      	cmp	r3, #0
 8016462:	d102      	bne.n	801646a <dir_find+0x60>
 8016464:	2304      	movs	r3, #4
 8016466:	75fb      	strb	r3, [r7, #23]
 8016468:	e08a      	b.n	8016580 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801646a:	687b      	ldr	r3, [r7, #4]
 801646c:	69db      	ldr	r3, [r3, #28]
 801646e:	330b      	adds	r3, #11
 8016470:	781b      	ldrb	r3, [r3, #0]
 8016472:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016476:	73fb      	strb	r3, [r7, #15]
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	7bfa      	ldrb	r2, [r7, #15]
 801647c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801647e:	7dbb      	ldrb	r3, [r7, #22]
 8016480:	2be5      	cmp	r3, #229	; 0xe5
 8016482:	d007      	beq.n	8016494 <dir_find+0x8a>
 8016484:	7bfb      	ldrb	r3, [r7, #15]
 8016486:	f003 0308 	and.w	r3, r3, #8
 801648a:	2b00      	cmp	r3, #0
 801648c:	d009      	beq.n	80164a2 <dir_find+0x98>
 801648e:	7bfb      	ldrb	r3, [r7, #15]
 8016490:	2b0f      	cmp	r3, #15
 8016492:	d006      	beq.n	80164a2 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8016494:	23ff      	movs	r3, #255	; 0xff
 8016496:	757b      	strb	r3, [r7, #21]
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	f04f 32ff 	mov.w	r2, #4294967295
 801649e:	62da      	str	r2, [r3, #44]	; 0x2c
 80164a0:	e05e      	b.n	8016560 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80164a2:	7bfb      	ldrb	r3, [r7, #15]
 80164a4:	2b0f      	cmp	r3, #15
 80164a6:	d136      	bne.n	8016516 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80164ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d154      	bne.n	8016560 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80164b6:	7dbb      	ldrb	r3, [r7, #22]
 80164b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d00d      	beq.n	80164dc <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	69db      	ldr	r3, [r3, #28]
 80164c4:	7b5b      	ldrb	r3, [r3, #13]
 80164c6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80164c8:	7dbb      	ldrb	r3, [r7, #22]
 80164ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80164ce:	75bb      	strb	r3, [r7, #22]
 80164d0:	7dbb      	ldrb	r3, [r7, #22]
 80164d2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	691a      	ldr	r2, [r3, #16]
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	62da      	str	r2, [r3, #44]	; 0x2c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80164dc:	7dba      	ldrb	r2, [r7, #22]
 80164de:	7d7b      	ldrb	r3, [r7, #21]
 80164e0:	429a      	cmp	r2, r3
 80164e2:	d115      	bne.n	8016510 <dir_find+0x106>
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	69db      	ldr	r3, [r3, #28]
 80164e8:	330d      	adds	r3, #13
 80164ea:	781b      	ldrb	r3, [r3, #0]
 80164ec:	7d3a      	ldrb	r2, [r7, #20]
 80164ee:	429a      	cmp	r2, r3
 80164f0:	d10e      	bne.n	8016510 <dir_find+0x106>
 80164f2:	693b      	ldr	r3, [r7, #16]
 80164f4:	691a      	ldr	r2, [r3, #16]
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	69db      	ldr	r3, [r3, #28]
 80164fa:	4619      	mov	r1, r3
 80164fc:	4610      	mov	r0, r2
 80164fe:	f7ff fdfd 	bl	80160fc <cmp_lfn>
 8016502:	4603      	mov	r3, r0
 8016504:	2b00      	cmp	r3, #0
 8016506:	d003      	beq.n	8016510 <dir_find+0x106>
 8016508:	7d7b      	ldrb	r3, [r7, #21]
 801650a:	3b01      	subs	r3, #1
 801650c:	b2db      	uxtb	r3, r3
 801650e:	e000      	b.n	8016512 <dir_find+0x108>
 8016510:	23ff      	movs	r3, #255	; 0xff
 8016512:	757b      	strb	r3, [r7, #21]
 8016514:	e024      	b.n	8016560 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8016516:	7d7b      	ldrb	r3, [r7, #21]
 8016518:	2b00      	cmp	r3, #0
 801651a:	d109      	bne.n	8016530 <dir_find+0x126>
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	69db      	ldr	r3, [r3, #28]
 8016520:	4618      	mov	r0, r3
 8016522:	f7ff ff51 	bl	80163c8 <sum_sfn>
 8016526:	4603      	mov	r3, r0
 8016528:	461a      	mov	r2, r3
 801652a:	7d3b      	ldrb	r3, [r7, #20]
 801652c:	4293      	cmp	r3, r2
 801652e:	d024      	beq.n	801657a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8016536:	f003 0301 	and.w	r3, r3, #1
 801653a:	2b00      	cmp	r3, #0
 801653c:	d10a      	bne.n	8016554 <dir_find+0x14a>
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	69d8      	ldr	r0, [r3, #28]
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	3320      	adds	r3, #32
 8016546:	220b      	movs	r2, #11
 8016548:	4619      	mov	r1, r3
 801654a:	f7fe ff89 	bl	8015460 <mem_cmp>
 801654e:	4603      	mov	r3, r0
 8016550:	2b00      	cmp	r3, #0
 8016552:	d014      	beq.n	801657e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8016554:	23ff      	movs	r3, #255	; 0xff
 8016556:	757b      	strb	r3, [r7, #21]
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	f04f 32ff 	mov.w	r2, #4294967295
 801655e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8016560:	2100      	movs	r1, #0
 8016562:	6878      	ldr	r0, [r7, #4]
 8016564:	f7ff fc6d 	bl	8015e42 <dir_next>
 8016568:	4603      	mov	r3, r0
 801656a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801656c:	7dfb      	ldrb	r3, [r7, #23]
 801656e:	2b00      	cmp	r3, #0
 8016570:	f43f af65 	beq.w	801643e <dir_find+0x34>
 8016574:	e004      	b.n	8016580 <dir_find+0x176>
		if (res != FR_OK) break;
 8016576:	bf00      	nop
 8016578:	e002      	b.n	8016580 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801657a:	bf00      	nop
 801657c:	e000      	b.n	8016580 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801657e:	bf00      	nop

	return res;
 8016580:	7dfb      	ldrb	r3, [r7, #23]
}
 8016582:	4618      	mov	r0, r3
 8016584:	3718      	adds	r7, #24
 8016586:	46bd      	mov	sp, r7
 8016588:	bd80      	pop	{r7, pc}
	...

0801658c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801658c:	b580      	push	{r7, lr}
 801658e:	b08c      	sub	sp, #48	; 0x30
 8016590:	af00      	add	r7, sp, #0
 8016592:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8016594:	687b      	ldr	r3, [r7, #4]
 8016596:	681b      	ldr	r3, [r3, #0]
 8016598:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80165a0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	d001      	beq.n	80165ac <dir_register+0x20>
 80165a8:	2306      	movs	r3, #6
 80165aa:	e0e0      	b.n	801676e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80165ac:	2300      	movs	r3, #0
 80165ae:	627b      	str	r3, [r7, #36]	; 0x24
 80165b0:	e002      	b.n	80165b8 <dir_register+0x2c>
 80165b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165b4:	3301      	adds	r3, #1
 80165b6:	627b      	str	r3, [r7, #36]	; 0x24
 80165b8:	69fb      	ldr	r3, [r7, #28]
 80165ba:	691a      	ldr	r2, [r3, #16]
 80165bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165be:	005b      	lsls	r3, r3, #1
 80165c0:	4413      	add	r3, r2
 80165c2:	881b      	ldrh	r3, [r3, #0]
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d1f4      	bne.n	80165b2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	f103 0120 	add.w	r1, r3, #32
 80165ce:	f107 030c 	add.w	r3, r7, #12
 80165d2:	220c      	movs	r2, #12
 80165d4:	4618      	mov	r0, r3
 80165d6:	f7fe ff07 	bl	80153e8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80165da:	7dfb      	ldrb	r3, [r7, #23]
 80165dc:	f003 0301 	and.w	r3, r3, #1
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	d032      	beq.n	801664a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	2240      	movs	r2, #64	; 0x40
 80165e8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		for (n = 1; n < 100; n++) {
 80165ec:	2301      	movs	r3, #1
 80165ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80165f0:	e016      	b.n	8016620 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	f103 0020 	add.w	r0, r3, #32
 80165f8:	69fb      	ldr	r3, [r7, #28]
 80165fa:	691a      	ldr	r2, [r3, #16]
 80165fc:	f107 010c 	add.w	r1, r7, #12
 8016600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016602:	f7ff fe53 	bl	80162ac <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8016606:	6878      	ldr	r0, [r7, #4]
 8016608:	f7ff feff 	bl	801640a <dir_find>
 801660c:	4603      	mov	r3, r0
 801660e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8016612:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016616:	2b00      	cmp	r3, #0
 8016618:	d106      	bne.n	8016628 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801661a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801661c:	3301      	adds	r3, #1
 801661e:	62bb      	str	r3, [r7, #40]	; 0x28
 8016620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016622:	2b63      	cmp	r3, #99	; 0x63
 8016624:	d9e5      	bls.n	80165f2 <dir_register+0x66>
 8016626:	e000      	b.n	801662a <dir_register+0x9e>
			if (res != FR_OK) break;
 8016628:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 801662a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801662c:	2b64      	cmp	r3, #100	; 0x64
 801662e:	d101      	bne.n	8016634 <dir_register+0xa8>
 8016630:	2307      	movs	r3, #7
 8016632:	e09c      	b.n	801676e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8016634:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016638:	2b04      	cmp	r3, #4
 801663a:	d002      	beq.n	8016642 <dir_register+0xb6>
 801663c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016640:	e095      	b.n	801676e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8016642:	7dfa      	ldrb	r2, [r7, #23]
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801664a:	7dfb      	ldrb	r3, [r7, #23]
 801664c:	f003 0302 	and.w	r3, r3, #2
 8016650:	2b00      	cmp	r3, #0
 8016652:	d007      	beq.n	8016664 <dir_register+0xd8>
 8016654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016656:	330c      	adds	r3, #12
 8016658:	4a47      	ldr	r2, [pc, #284]	; (8016778 <dir_register+0x1ec>)
 801665a:	fba2 2303 	umull	r2, r3, r2, r3
 801665e:	089b      	lsrs	r3, r3, #2
 8016660:	3301      	adds	r3, #1
 8016662:	e000      	b.n	8016666 <dir_register+0xda>
 8016664:	2301      	movs	r3, #1
 8016666:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8016668:	6a39      	ldr	r1, [r7, #32]
 801666a:	6878      	ldr	r0, [r7, #4]
 801666c:	f7ff fcbf 	bl	8015fee <dir_alloc>
 8016670:	4603      	mov	r3, r0
 8016672:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8016676:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801667a:	2b00      	cmp	r3, #0
 801667c:	d148      	bne.n	8016710 <dir_register+0x184>
 801667e:	6a3b      	ldr	r3, [r7, #32]
 8016680:	3b01      	subs	r3, #1
 8016682:	623b      	str	r3, [r7, #32]
 8016684:	6a3b      	ldr	r3, [r7, #32]
 8016686:	2b00      	cmp	r3, #0
 8016688:	d042      	beq.n	8016710 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	691a      	ldr	r2, [r3, #16]
 801668e:	6a3b      	ldr	r3, [r7, #32]
 8016690:	015b      	lsls	r3, r3, #5
 8016692:	1ad3      	subs	r3, r2, r3
 8016694:	4619      	mov	r1, r3
 8016696:	6878      	ldr	r0, [r7, #4]
 8016698:	f7ff fb4a 	bl	8015d30 <dir_sdi>
 801669c:	4603      	mov	r3, r0
 801669e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80166a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d132      	bne.n	8016710 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	3320      	adds	r3, #32
 80166ae:	4618      	mov	r0, r3
 80166b0:	f7ff fe8a 	bl	80163c8 <sum_sfn>
 80166b4:	4603      	mov	r3, r0
 80166b6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	699b      	ldr	r3, [r3, #24]
 80166bc:	4619      	mov	r1, r3
 80166be:	69f8      	ldr	r0, [r7, #28]
 80166c0:	f7fe ff54 	bl	801556c <move_window>
 80166c4:	4603      	mov	r3, r0
 80166c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80166ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d11d      	bne.n	801670e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80166d2:	69fb      	ldr	r3, [r7, #28]
 80166d4:	6918      	ldr	r0, [r3, #16]
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	69d9      	ldr	r1, [r3, #28]
 80166da:	6a3b      	ldr	r3, [r7, #32]
 80166dc:	b2da      	uxtb	r2, r3
 80166de:	7efb      	ldrb	r3, [r7, #27]
 80166e0:	f7ff fd7c 	bl	80161dc <put_lfn>
				fs->wflag = 1;
 80166e4:	69fb      	ldr	r3, [r7, #28]
 80166e6:	2201      	movs	r2, #1
 80166e8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80166ea:	2100      	movs	r1, #0
 80166ec:	6878      	ldr	r0, [r7, #4]
 80166ee:	f7ff fba8 	bl	8015e42 <dir_next>
 80166f2:	4603      	mov	r3, r0
 80166f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80166f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d107      	bne.n	8016710 <dir_register+0x184>
 8016700:	6a3b      	ldr	r3, [r7, #32]
 8016702:	3b01      	subs	r3, #1
 8016704:	623b      	str	r3, [r7, #32]
 8016706:	6a3b      	ldr	r3, [r7, #32]
 8016708:	2b00      	cmp	r3, #0
 801670a:	d1d5      	bne.n	80166b8 <dir_register+0x12c>
 801670c:	e000      	b.n	8016710 <dir_register+0x184>
				if (res != FR_OK) break;
 801670e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8016710:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016714:	2b00      	cmp	r3, #0
 8016716:	d128      	bne.n	801676a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	699b      	ldr	r3, [r3, #24]
 801671c:	4619      	mov	r1, r3
 801671e:	69f8      	ldr	r0, [r7, #28]
 8016720:	f7fe ff24 	bl	801556c <move_window>
 8016724:	4603      	mov	r3, r0
 8016726:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801672a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801672e:	2b00      	cmp	r3, #0
 8016730:	d11b      	bne.n	801676a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	69db      	ldr	r3, [r3, #28]
 8016736:	2220      	movs	r2, #32
 8016738:	2100      	movs	r1, #0
 801673a:	4618      	mov	r0, r3
 801673c:	f7fe fe75 	bl	801542a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	69d8      	ldr	r0, [r3, #28]
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	3320      	adds	r3, #32
 8016748:	220b      	movs	r2, #11
 801674a:	4619      	mov	r1, r3
 801674c:	f7fe fe4c 	bl	80153e8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	69db      	ldr	r3, [r3, #28]
 801675a:	330c      	adds	r3, #12
 801675c:	f002 0218 	and.w	r2, r2, #24
 8016760:	b2d2      	uxtb	r2, r2
 8016762:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8016764:	69fb      	ldr	r3, [r7, #28]
 8016766:	2201      	movs	r2, #1
 8016768:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801676a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801676e:	4618      	mov	r0, r3
 8016770:	3730      	adds	r7, #48	; 0x30
 8016772:	46bd      	mov	sp, r7
 8016774:	bd80      	pop	{r7, pc}
 8016776:	bf00      	nop
 8016778:	4ec4ec4f 	.word	0x4ec4ec4f

0801677c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801677c:	b580      	push	{r7, lr}
 801677e:	b08a      	sub	sp, #40	; 0x28
 8016780:	af00      	add	r7, sp, #0
 8016782:	6078      	str	r0, [r7, #4]
 8016784:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8016786:	683b      	ldr	r3, [r7, #0]
 8016788:	681b      	ldr	r3, [r3, #0]
 801678a:	613b      	str	r3, [r7, #16]
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	691b      	ldr	r3, [r3, #16]
 8016792:	60fb      	str	r3, [r7, #12]
 8016794:	2300      	movs	r3, #0
 8016796:	617b      	str	r3, [r7, #20]
 8016798:	697b      	ldr	r3, [r7, #20]
 801679a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801679c:	69bb      	ldr	r3, [r7, #24]
 801679e:	1c5a      	adds	r2, r3, #1
 80167a0:	61ba      	str	r2, [r7, #24]
 80167a2:	693a      	ldr	r2, [r7, #16]
 80167a4:	4413      	add	r3, r2
 80167a6:	781b      	ldrb	r3, [r3, #0]
 80167a8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80167aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80167ac:	2b1f      	cmp	r3, #31
 80167ae:	d940      	bls.n	8016832 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80167b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80167b2:	2b2f      	cmp	r3, #47	; 0x2f
 80167b4:	d006      	beq.n	80167c4 <create_name+0x48>
 80167b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80167b8:	2b5c      	cmp	r3, #92	; 0x5c
 80167ba:	d110      	bne.n	80167de <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80167bc:	e002      	b.n	80167c4 <create_name+0x48>
 80167be:	69bb      	ldr	r3, [r7, #24]
 80167c0:	3301      	adds	r3, #1
 80167c2:	61bb      	str	r3, [r7, #24]
 80167c4:	693a      	ldr	r2, [r7, #16]
 80167c6:	69bb      	ldr	r3, [r7, #24]
 80167c8:	4413      	add	r3, r2
 80167ca:	781b      	ldrb	r3, [r3, #0]
 80167cc:	2b2f      	cmp	r3, #47	; 0x2f
 80167ce:	d0f6      	beq.n	80167be <create_name+0x42>
 80167d0:	693a      	ldr	r2, [r7, #16]
 80167d2:	69bb      	ldr	r3, [r7, #24]
 80167d4:	4413      	add	r3, r2
 80167d6:	781b      	ldrb	r3, [r3, #0]
 80167d8:	2b5c      	cmp	r3, #92	; 0x5c
 80167da:	d0f0      	beq.n	80167be <create_name+0x42>
			break;
 80167dc:	e02a      	b.n	8016834 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80167de:	697b      	ldr	r3, [r7, #20]
 80167e0:	2bfe      	cmp	r3, #254	; 0xfe
 80167e2:	d901      	bls.n	80167e8 <create_name+0x6c>
 80167e4:	2306      	movs	r3, #6
 80167e6:	e17d      	b.n	8016ae4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80167e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80167ea:	b2db      	uxtb	r3, r3
 80167ec:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80167ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80167f0:	2101      	movs	r1, #1
 80167f2:	4618      	mov	r0, r3
 80167f4:	f001 fb5a 	bl	8017eac <ff_convert>
 80167f8:	4603      	mov	r3, r0
 80167fa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80167fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d101      	bne.n	8016806 <create_name+0x8a>
 8016802:	2306      	movs	r3, #6
 8016804:	e16e      	b.n	8016ae4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8016806:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016808:	2b7f      	cmp	r3, #127	; 0x7f
 801680a:	d809      	bhi.n	8016820 <create_name+0xa4>
 801680c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801680e:	4619      	mov	r1, r3
 8016810:	488d      	ldr	r0, [pc, #564]	; (8016a48 <create_name+0x2cc>)
 8016812:	f7fe fe4c 	bl	80154ae <chk_chr>
 8016816:	4603      	mov	r3, r0
 8016818:	2b00      	cmp	r3, #0
 801681a:	d001      	beq.n	8016820 <create_name+0xa4>
 801681c:	2306      	movs	r3, #6
 801681e:	e161      	b.n	8016ae4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8016820:	697b      	ldr	r3, [r7, #20]
 8016822:	1c5a      	adds	r2, r3, #1
 8016824:	617a      	str	r2, [r7, #20]
 8016826:	005b      	lsls	r3, r3, #1
 8016828:	68fa      	ldr	r2, [r7, #12]
 801682a:	4413      	add	r3, r2
 801682c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801682e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8016830:	e7b4      	b.n	801679c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8016832:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8016834:	693a      	ldr	r2, [r7, #16]
 8016836:	69bb      	ldr	r3, [r7, #24]
 8016838:	441a      	add	r2, r3
 801683a:	683b      	ldr	r3, [r7, #0]
 801683c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801683e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016840:	2b1f      	cmp	r3, #31
 8016842:	d801      	bhi.n	8016848 <create_name+0xcc>
 8016844:	2304      	movs	r3, #4
 8016846:	e000      	b.n	801684a <create_name+0xce>
 8016848:	2300      	movs	r3, #0
 801684a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801684e:	e011      	b.n	8016874 <create_name+0xf8>
		w = lfn[di - 1];
 8016850:	697b      	ldr	r3, [r7, #20]
 8016852:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016856:	3b01      	subs	r3, #1
 8016858:	005b      	lsls	r3, r3, #1
 801685a:	68fa      	ldr	r2, [r7, #12]
 801685c:	4413      	add	r3, r2
 801685e:	881b      	ldrh	r3, [r3, #0]
 8016860:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8016862:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016864:	2b20      	cmp	r3, #32
 8016866:	d002      	beq.n	801686e <create_name+0xf2>
 8016868:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801686a:	2b2e      	cmp	r3, #46	; 0x2e
 801686c:	d106      	bne.n	801687c <create_name+0x100>
		di--;
 801686e:	697b      	ldr	r3, [r7, #20]
 8016870:	3b01      	subs	r3, #1
 8016872:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8016874:	697b      	ldr	r3, [r7, #20]
 8016876:	2b00      	cmp	r3, #0
 8016878:	d1ea      	bne.n	8016850 <create_name+0xd4>
 801687a:	e000      	b.n	801687e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801687c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801687e:	697b      	ldr	r3, [r7, #20]
 8016880:	005b      	lsls	r3, r3, #1
 8016882:	68fa      	ldr	r2, [r7, #12]
 8016884:	4413      	add	r3, r2
 8016886:	2200      	movs	r2, #0
 8016888:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801688a:	697b      	ldr	r3, [r7, #20]
 801688c:	2b00      	cmp	r3, #0
 801688e:	d101      	bne.n	8016894 <create_name+0x118>
 8016890:	2306      	movs	r3, #6
 8016892:	e127      	b.n	8016ae4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	3320      	adds	r3, #32
 8016898:	220b      	movs	r2, #11
 801689a:	2120      	movs	r1, #32
 801689c:	4618      	mov	r0, r3
 801689e:	f7fe fdc4 	bl	801542a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80168a2:	2300      	movs	r3, #0
 80168a4:	61bb      	str	r3, [r7, #24]
 80168a6:	e002      	b.n	80168ae <create_name+0x132>
 80168a8:	69bb      	ldr	r3, [r7, #24]
 80168aa:	3301      	adds	r3, #1
 80168ac:	61bb      	str	r3, [r7, #24]
 80168ae:	69bb      	ldr	r3, [r7, #24]
 80168b0:	005b      	lsls	r3, r3, #1
 80168b2:	68fa      	ldr	r2, [r7, #12]
 80168b4:	4413      	add	r3, r2
 80168b6:	881b      	ldrh	r3, [r3, #0]
 80168b8:	2b20      	cmp	r3, #32
 80168ba:	d0f5      	beq.n	80168a8 <create_name+0x12c>
 80168bc:	69bb      	ldr	r3, [r7, #24]
 80168be:	005b      	lsls	r3, r3, #1
 80168c0:	68fa      	ldr	r2, [r7, #12]
 80168c2:	4413      	add	r3, r2
 80168c4:	881b      	ldrh	r3, [r3, #0]
 80168c6:	2b2e      	cmp	r3, #46	; 0x2e
 80168c8:	d0ee      	beq.n	80168a8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80168ca:	69bb      	ldr	r3, [r7, #24]
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d009      	beq.n	80168e4 <create_name+0x168>
 80168d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80168d4:	f043 0303 	orr.w	r3, r3, #3
 80168d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80168dc:	e002      	b.n	80168e4 <create_name+0x168>
 80168de:	697b      	ldr	r3, [r7, #20]
 80168e0:	3b01      	subs	r3, #1
 80168e2:	617b      	str	r3, [r7, #20]
 80168e4:	697b      	ldr	r3, [r7, #20]
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	d009      	beq.n	80168fe <create_name+0x182>
 80168ea:	697b      	ldr	r3, [r7, #20]
 80168ec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80168f0:	3b01      	subs	r3, #1
 80168f2:	005b      	lsls	r3, r3, #1
 80168f4:	68fa      	ldr	r2, [r7, #12]
 80168f6:	4413      	add	r3, r2
 80168f8:	881b      	ldrh	r3, [r3, #0]
 80168fa:	2b2e      	cmp	r3, #46	; 0x2e
 80168fc:	d1ef      	bne.n	80168de <create_name+0x162>

	i = b = 0; ni = 8;
 80168fe:	2300      	movs	r3, #0
 8016900:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016904:	2300      	movs	r3, #0
 8016906:	623b      	str	r3, [r7, #32]
 8016908:	2308      	movs	r3, #8
 801690a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801690c:	69bb      	ldr	r3, [r7, #24]
 801690e:	1c5a      	adds	r2, r3, #1
 8016910:	61ba      	str	r2, [r7, #24]
 8016912:	005b      	lsls	r3, r3, #1
 8016914:	68fa      	ldr	r2, [r7, #12]
 8016916:	4413      	add	r3, r2
 8016918:	881b      	ldrh	r3, [r3, #0]
 801691a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 801691c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801691e:	2b00      	cmp	r3, #0
 8016920:	f000 8090 	beq.w	8016a44 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8016924:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016926:	2b20      	cmp	r3, #32
 8016928:	d006      	beq.n	8016938 <create_name+0x1bc>
 801692a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801692c:	2b2e      	cmp	r3, #46	; 0x2e
 801692e:	d10a      	bne.n	8016946 <create_name+0x1ca>
 8016930:	69ba      	ldr	r2, [r7, #24]
 8016932:	697b      	ldr	r3, [r7, #20]
 8016934:	429a      	cmp	r2, r3
 8016936:	d006      	beq.n	8016946 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8016938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801693c:	f043 0303 	orr.w	r3, r3, #3
 8016940:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016944:	e07d      	b.n	8016a42 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8016946:	6a3a      	ldr	r2, [r7, #32]
 8016948:	69fb      	ldr	r3, [r7, #28]
 801694a:	429a      	cmp	r2, r3
 801694c:	d203      	bcs.n	8016956 <create_name+0x1da>
 801694e:	69ba      	ldr	r2, [r7, #24]
 8016950:	697b      	ldr	r3, [r7, #20]
 8016952:	429a      	cmp	r2, r3
 8016954:	d123      	bne.n	801699e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8016956:	69fb      	ldr	r3, [r7, #28]
 8016958:	2b0b      	cmp	r3, #11
 801695a:	d106      	bne.n	801696a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801695c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016960:	f043 0303 	orr.w	r3, r3, #3
 8016964:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016968:	e075      	b.n	8016a56 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801696a:	69ba      	ldr	r2, [r7, #24]
 801696c:	697b      	ldr	r3, [r7, #20]
 801696e:	429a      	cmp	r2, r3
 8016970:	d005      	beq.n	801697e <create_name+0x202>
 8016972:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016976:	f043 0303 	orr.w	r3, r3, #3
 801697a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 801697e:	69ba      	ldr	r2, [r7, #24]
 8016980:	697b      	ldr	r3, [r7, #20]
 8016982:	429a      	cmp	r2, r3
 8016984:	d866      	bhi.n	8016a54 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8016986:	697b      	ldr	r3, [r7, #20]
 8016988:	61bb      	str	r3, [r7, #24]
 801698a:	2308      	movs	r3, #8
 801698c:	623b      	str	r3, [r7, #32]
 801698e:	230b      	movs	r3, #11
 8016990:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8016992:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016996:	009b      	lsls	r3, r3, #2
 8016998:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801699c:	e051      	b.n	8016a42 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801699e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80169a0:	2b7f      	cmp	r3, #127	; 0x7f
 80169a2:	d914      	bls.n	80169ce <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80169a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80169a6:	2100      	movs	r1, #0
 80169a8:	4618      	mov	r0, r3
 80169aa:	f001 fa7f 	bl	8017eac <ff_convert>
 80169ae:	4603      	mov	r3, r0
 80169b0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80169b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d004      	beq.n	80169c2 <create_name+0x246>
 80169b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80169ba:	3b80      	subs	r3, #128	; 0x80
 80169bc:	4a23      	ldr	r2, [pc, #140]	; (8016a4c <create_name+0x2d0>)
 80169be:	5cd3      	ldrb	r3, [r2, r3]
 80169c0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80169c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80169c6:	f043 0302 	orr.w	r3, r3, #2
 80169ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80169ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d007      	beq.n	80169e4 <create_name+0x268>
 80169d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80169d6:	4619      	mov	r1, r3
 80169d8:	481d      	ldr	r0, [pc, #116]	; (8016a50 <create_name+0x2d4>)
 80169da:	f7fe fd68 	bl	80154ae <chk_chr>
 80169de:	4603      	mov	r3, r0
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d008      	beq.n	80169f6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80169e4:	235f      	movs	r3, #95	; 0x5f
 80169e6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80169e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80169ec:	f043 0303 	orr.w	r3, r3, #3
 80169f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80169f4:	e01b      	b.n	8016a2e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80169f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80169f8:	2b40      	cmp	r3, #64	; 0x40
 80169fa:	d909      	bls.n	8016a10 <create_name+0x294>
 80169fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80169fe:	2b5a      	cmp	r3, #90	; 0x5a
 8016a00:	d806      	bhi.n	8016a10 <create_name+0x294>
					b |= 2;
 8016a02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016a06:	f043 0302 	orr.w	r3, r3, #2
 8016a0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016a0e:	e00e      	b.n	8016a2e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8016a10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016a12:	2b60      	cmp	r3, #96	; 0x60
 8016a14:	d90b      	bls.n	8016a2e <create_name+0x2b2>
 8016a16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016a18:	2b7a      	cmp	r3, #122	; 0x7a
 8016a1a:	d808      	bhi.n	8016a2e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8016a1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016a20:	f043 0301 	orr.w	r3, r3, #1
 8016a24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016a28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016a2a:	3b20      	subs	r3, #32
 8016a2c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8016a2e:	6a3b      	ldr	r3, [r7, #32]
 8016a30:	1c5a      	adds	r2, r3, #1
 8016a32:	623a      	str	r2, [r7, #32]
 8016a34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016a36:	b2d1      	uxtb	r1, r2
 8016a38:	687a      	ldr	r2, [r7, #4]
 8016a3a:	4413      	add	r3, r2
 8016a3c:	460a      	mov	r2, r1
 8016a3e:	f883 2020 	strb.w	r2, [r3, #32]
		w = lfn[si++];					/* Get an LFN character */
 8016a42:	e763      	b.n	801690c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8016a44:	bf00      	nop
 8016a46:	e006      	b.n	8016a56 <create_name+0x2da>
 8016a48:	080194e4 	.word	0x080194e4
 8016a4c:	080195a0 	.word	0x080195a0
 8016a50:	080194f0 	.word	0x080194f0
			if (si > di) break;			/* No extension */
 8016a54:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016a5c:	2be5      	cmp	r3, #229	; 0xe5
 8016a5e:	d103      	bne.n	8016a68 <create_name+0x2ec>
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	2205      	movs	r2, #5
 8016a64:	f883 2020 	strb.w	r2, [r3, #32]

	if (ni == 8) b <<= 2;
 8016a68:	69fb      	ldr	r3, [r7, #28]
 8016a6a:	2b08      	cmp	r3, #8
 8016a6c:	d104      	bne.n	8016a78 <create_name+0x2fc>
 8016a6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016a72:	009b      	lsls	r3, r3, #2
 8016a74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8016a78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016a7c:	f003 030c 	and.w	r3, r3, #12
 8016a80:	2b0c      	cmp	r3, #12
 8016a82:	d005      	beq.n	8016a90 <create_name+0x314>
 8016a84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016a88:	f003 0303 	and.w	r3, r3, #3
 8016a8c:	2b03      	cmp	r3, #3
 8016a8e:	d105      	bne.n	8016a9c <create_name+0x320>
 8016a90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016a94:	f043 0302 	orr.w	r3, r3, #2
 8016a98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8016a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016aa0:	f003 0302 	and.w	r3, r3, #2
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	d117      	bne.n	8016ad8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8016aa8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016aac:	f003 0303 	and.w	r3, r3, #3
 8016ab0:	2b01      	cmp	r3, #1
 8016ab2:	d105      	bne.n	8016ac0 <create_name+0x344>
 8016ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ab8:	f043 0310 	orr.w	r3, r3, #16
 8016abc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8016ac0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016ac4:	f003 030c 	and.w	r3, r3, #12
 8016ac8:	2b04      	cmp	r3, #4
 8016aca:	d105      	bne.n	8016ad8 <create_name+0x35c>
 8016acc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016ad0:	f043 0308 	orr.w	r3, r3, #8
 8016ad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016ade:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	return FR_OK;
 8016ae2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8016ae4:	4618      	mov	r0, r3
 8016ae6:	3728      	adds	r7, #40	; 0x28
 8016ae8:	46bd      	mov	sp, r7
 8016aea:	bd80      	pop	{r7, pc}

08016aec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8016aec:	b580      	push	{r7, lr}
 8016aee:	b086      	sub	sp, #24
 8016af0:	af00      	add	r7, sp, #0
 8016af2:	6078      	str	r0, [r7, #4]
 8016af4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8016afa:	693b      	ldr	r3, [r7, #16]
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8016b00:	e002      	b.n	8016b08 <follow_path+0x1c>
 8016b02:	683b      	ldr	r3, [r7, #0]
 8016b04:	3301      	adds	r3, #1
 8016b06:	603b      	str	r3, [r7, #0]
 8016b08:	683b      	ldr	r3, [r7, #0]
 8016b0a:	781b      	ldrb	r3, [r3, #0]
 8016b0c:	2b2f      	cmp	r3, #47	; 0x2f
 8016b0e:	d0f8      	beq.n	8016b02 <follow_path+0x16>
 8016b10:	683b      	ldr	r3, [r7, #0]
 8016b12:	781b      	ldrb	r3, [r3, #0]
 8016b14:	2b5c      	cmp	r3, #92	; 0x5c
 8016b16:	d0f4      	beq.n	8016b02 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8016b18:	693b      	ldr	r3, [r7, #16]
 8016b1a:	2200      	movs	r2, #0
 8016b1c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8016b1e:	683b      	ldr	r3, [r7, #0]
 8016b20:	781b      	ldrb	r3, [r3, #0]
 8016b22:	2b1f      	cmp	r3, #31
 8016b24:	d80a      	bhi.n	8016b3c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	2280      	movs	r2, #128	; 0x80
 8016b2a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 8016b2e:	2100      	movs	r1, #0
 8016b30:	6878      	ldr	r0, [r7, #4]
 8016b32:	f7ff f8fd 	bl	8015d30 <dir_sdi>
 8016b36:	4603      	mov	r3, r0
 8016b38:	75fb      	strb	r3, [r7, #23]
 8016b3a:	e048      	b.n	8016bce <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8016b3c:	463b      	mov	r3, r7
 8016b3e:	4619      	mov	r1, r3
 8016b40:	6878      	ldr	r0, [r7, #4]
 8016b42:	f7ff fe1b 	bl	801677c <create_name>
 8016b46:	4603      	mov	r3, r0
 8016b48:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8016b4a:	7dfb      	ldrb	r3, [r7, #23]
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d139      	bne.n	8016bc4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8016b50:	6878      	ldr	r0, [r7, #4]
 8016b52:	f7ff fc5a 	bl	801640a <dir_find>
 8016b56:	4603      	mov	r3, r0
 8016b58:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8016b60:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8016b62:	7dfb      	ldrb	r3, [r7, #23]
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d00a      	beq.n	8016b7e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8016b68:	7dfb      	ldrb	r3, [r7, #23]
 8016b6a:	2b04      	cmp	r3, #4
 8016b6c:	d12c      	bne.n	8016bc8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8016b6e:	7afb      	ldrb	r3, [r7, #11]
 8016b70:	f003 0304 	and.w	r3, r3, #4
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	d127      	bne.n	8016bc8 <follow_path+0xdc>
 8016b78:	2305      	movs	r3, #5
 8016b7a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8016b7c:	e024      	b.n	8016bc8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8016b7e:	7afb      	ldrb	r3, [r7, #11]
 8016b80:	f003 0304 	and.w	r3, r3, #4
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d121      	bne.n	8016bcc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8016b88:	693b      	ldr	r3, [r7, #16]
 8016b8a:	799b      	ldrb	r3, [r3, #6]
 8016b8c:	f003 0310 	and.w	r3, r3, #16
 8016b90:	2b00      	cmp	r3, #0
 8016b92:	d102      	bne.n	8016b9a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8016b94:	2305      	movs	r3, #5
 8016b96:	75fb      	strb	r3, [r7, #23]
 8016b98:	e019      	b.n	8016bce <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8016b9a:	68fb      	ldr	r3, [r7, #12]
 8016b9c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	691b      	ldr	r3, [r3, #16]
 8016ba4:	68fa      	ldr	r2, [r7, #12]
 8016ba6:	8992      	ldrh	r2, [r2, #12]
 8016ba8:	fbb3 f0f2 	udiv	r0, r3, r2
 8016bac:	fb00 f202 	mul.w	r2, r0, r2
 8016bb0:	1a9b      	subs	r3, r3, r2
 8016bb2:	440b      	add	r3, r1
 8016bb4:	4619      	mov	r1, r3
 8016bb6:	68f8      	ldr	r0, [r7, #12]
 8016bb8:	f7ff fa60 	bl	801607c <ld_clust>
 8016bbc:	4602      	mov	r2, r0
 8016bbe:	693b      	ldr	r3, [r7, #16]
 8016bc0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8016bc2:	e7bb      	b.n	8016b3c <follow_path+0x50>
			if (res != FR_OK) break;
 8016bc4:	bf00      	nop
 8016bc6:	e002      	b.n	8016bce <follow_path+0xe2>
				break;
 8016bc8:	bf00      	nop
 8016bca:	e000      	b.n	8016bce <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8016bcc:	bf00      	nop
			}
		}
	}

	return res;
 8016bce:	7dfb      	ldrb	r3, [r7, #23]
}
 8016bd0:	4618      	mov	r0, r3
 8016bd2:	3718      	adds	r7, #24
 8016bd4:	46bd      	mov	sp, r7
 8016bd6:	bd80      	pop	{r7, pc}

08016bd8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8016bd8:	b480      	push	{r7}
 8016bda:	b087      	sub	sp, #28
 8016bdc:	af00      	add	r7, sp, #0
 8016bde:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8016be0:	f04f 33ff 	mov.w	r3, #4294967295
 8016be4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d031      	beq.n	8016c52 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	681b      	ldr	r3, [r3, #0]
 8016bf2:	617b      	str	r3, [r7, #20]
 8016bf4:	e002      	b.n	8016bfc <get_ldnumber+0x24>
 8016bf6:	697b      	ldr	r3, [r7, #20]
 8016bf8:	3301      	adds	r3, #1
 8016bfa:	617b      	str	r3, [r7, #20]
 8016bfc:	697b      	ldr	r3, [r7, #20]
 8016bfe:	781b      	ldrb	r3, [r3, #0]
 8016c00:	2b1f      	cmp	r3, #31
 8016c02:	d903      	bls.n	8016c0c <get_ldnumber+0x34>
 8016c04:	697b      	ldr	r3, [r7, #20]
 8016c06:	781b      	ldrb	r3, [r3, #0]
 8016c08:	2b3a      	cmp	r3, #58	; 0x3a
 8016c0a:	d1f4      	bne.n	8016bf6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8016c0c:	697b      	ldr	r3, [r7, #20]
 8016c0e:	781b      	ldrb	r3, [r3, #0]
 8016c10:	2b3a      	cmp	r3, #58	; 0x3a
 8016c12:	d11c      	bne.n	8016c4e <get_ldnumber+0x76>
			tp = *path;
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	1c5a      	adds	r2, r3, #1
 8016c1e:	60fa      	str	r2, [r7, #12]
 8016c20:	781b      	ldrb	r3, [r3, #0]
 8016c22:	3b30      	subs	r3, #48	; 0x30
 8016c24:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8016c26:	68bb      	ldr	r3, [r7, #8]
 8016c28:	2b09      	cmp	r3, #9
 8016c2a:	d80e      	bhi.n	8016c4a <get_ldnumber+0x72>
 8016c2c:	68fa      	ldr	r2, [r7, #12]
 8016c2e:	697b      	ldr	r3, [r7, #20]
 8016c30:	429a      	cmp	r2, r3
 8016c32:	d10a      	bne.n	8016c4a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8016c34:	68bb      	ldr	r3, [r7, #8]
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d107      	bne.n	8016c4a <get_ldnumber+0x72>
					vol = (int)i;
 8016c3a:	68bb      	ldr	r3, [r7, #8]
 8016c3c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8016c3e:	697b      	ldr	r3, [r7, #20]
 8016c40:	3301      	adds	r3, #1
 8016c42:	617b      	str	r3, [r7, #20]
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	697a      	ldr	r2, [r7, #20]
 8016c48:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8016c4a:	693b      	ldr	r3, [r7, #16]
 8016c4c:	e002      	b.n	8016c54 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8016c4e:	2300      	movs	r3, #0
 8016c50:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8016c52:	693b      	ldr	r3, [r7, #16]
}
 8016c54:	4618      	mov	r0, r3
 8016c56:	371c      	adds	r7, #28
 8016c58:	46bd      	mov	sp, r7
 8016c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c5e:	4770      	bx	lr

08016c60 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8016c60:	b580      	push	{r7, lr}
 8016c62:	b082      	sub	sp, #8
 8016c64:	af00      	add	r7, sp, #0
 8016c66:	6078      	str	r0, [r7, #4]
 8016c68:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	2200      	movs	r2, #0
 8016c6e:	70da      	strb	r2, [r3, #3]
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	f04f 32ff 	mov.w	r2, #4294967295
 8016c76:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8016c78:	6839      	ldr	r1, [r7, #0]
 8016c7a:	6878      	ldr	r0, [r7, #4]
 8016c7c:	f7fe fc76 	bl	801556c <move_window>
 8016c80:	4603      	mov	r3, r0
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d001      	beq.n	8016c8a <check_fs+0x2a>
 8016c86:	2304      	movs	r3, #4
 8016c88:	e038      	b.n	8016cfc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	3338      	adds	r3, #56	; 0x38
 8016c8e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016c92:	4618      	mov	r0, r3
 8016c94:	f7fe fb26 	bl	80152e4 <ld_word>
 8016c98:	4603      	mov	r3, r0
 8016c9a:	461a      	mov	r2, r3
 8016c9c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016ca0:	429a      	cmp	r2, r3
 8016ca2:	d001      	beq.n	8016ca8 <check_fs+0x48>
 8016ca4:	2303      	movs	r3, #3
 8016ca6:	e029      	b.n	8016cfc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016cae:	2be9      	cmp	r3, #233	; 0xe9
 8016cb0:	d009      	beq.n	8016cc6 <check_fs+0x66>
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016cb8:	2beb      	cmp	r3, #235	; 0xeb
 8016cba:	d11e      	bne.n	8016cfa <check_fs+0x9a>
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8016cc2:	2b90      	cmp	r3, #144	; 0x90
 8016cc4:	d119      	bne.n	8016cfa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	3338      	adds	r3, #56	; 0x38
 8016cca:	3336      	adds	r3, #54	; 0x36
 8016ccc:	4618      	mov	r0, r3
 8016cce:	f7fe fb21 	bl	8015314 <ld_dword>
 8016cd2:	4603      	mov	r3, r0
 8016cd4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8016cd8:	4a0a      	ldr	r2, [pc, #40]	; (8016d04 <check_fs+0xa4>)
 8016cda:	4293      	cmp	r3, r2
 8016cdc:	d101      	bne.n	8016ce2 <check_fs+0x82>
 8016cde:	2300      	movs	r3, #0
 8016ce0:	e00c      	b.n	8016cfc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	3338      	adds	r3, #56	; 0x38
 8016ce6:	3352      	adds	r3, #82	; 0x52
 8016ce8:	4618      	mov	r0, r3
 8016cea:	f7fe fb13 	bl	8015314 <ld_dword>
 8016cee:	4603      	mov	r3, r0
 8016cf0:	4a05      	ldr	r2, [pc, #20]	; (8016d08 <check_fs+0xa8>)
 8016cf2:	4293      	cmp	r3, r2
 8016cf4:	d101      	bne.n	8016cfa <check_fs+0x9a>
 8016cf6:	2300      	movs	r3, #0
 8016cf8:	e000      	b.n	8016cfc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8016cfa:	2302      	movs	r3, #2
}
 8016cfc:	4618      	mov	r0, r3
 8016cfe:	3708      	adds	r7, #8
 8016d00:	46bd      	mov	sp, r7
 8016d02:	bd80      	pop	{r7, pc}
 8016d04:	00544146 	.word	0x00544146
 8016d08:	33544146 	.word	0x33544146

08016d0c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8016d0c:	b580      	push	{r7, lr}
 8016d0e:	b096      	sub	sp, #88	; 0x58
 8016d10:	af00      	add	r7, sp, #0
 8016d12:	60f8      	str	r0, [r7, #12]
 8016d14:	60b9      	str	r1, [r7, #8]
 8016d16:	4613      	mov	r3, r2
 8016d18:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8016d1a:	68bb      	ldr	r3, [r7, #8]
 8016d1c:	2200      	movs	r2, #0
 8016d1e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8016d20:	68f8      	ldr	r0, [r7, #12]
 8016d22:	f7ff ff59 	bl	8016bd8 <get_ldnumber>
 8016d26:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8016d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	da01      	bge.n	8016d32 <find_volume+0x26>
 8016d2e:	230b      	movs	r3, #11
 8016d30:	e25f      	b.n	80171f2 <find_volume+0x4e6>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8016d32:	4a9f      	ldr	r2, [pc, #636]	; (8016fb0 <find_volume+0x2a4>)
 8016d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016d3a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8016d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	d101      	bne.n	8016d46 <find_volume+0x3a>
 8016d42:	230c      	movs	r3, #12
 8016d44:	e255      	b.n	80171f2 <find_volume+0x4e6>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8016d46:	68bb      	ldr	r3, [r7, #8]
 8016d48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016d4a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8016d4c:	79fb      	ldrb	r3, [r7, #7]
 8016d4e:	f023 0301 	bic.w	r3, r3, #1
 8016d52:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8016d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d56:	781b      	ldrb	r3, [r3, #0]
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d01a      	beq.n	8016d92 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8016d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d5e:	785b      	ldrb	r3, [r3, #1]
 8016d60:	4618      	mov	r0, r3
 8016d62:	f7fe fa21 	bl	80151a8 <disk_status>
 8016d66:	4603      	mov	r3, r0
 8016d68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8016d6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016d70:	f003 0301 	and.w	r3, r3, #1
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d10c      	bne.n	8016d92 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8016d78:	79fb      	ldrb	r3, [r7, #7]
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d007      	beq.n	8016d8e <find_volume+0x82>
 8016d7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016d82:	f003 0304 	and.w	r3, r3, #4
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d001      	beq.n	8016d8e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8016d8a:	230a      	movs	r3, #10
 8016d8c:	e231      	b.n	80171f2 <find_volume+0x4e6>
			}
			return FR_OK;				/* The file system object is valid */
 8016d8e:	2300      	movs	r3, #0
 8016d90:	e22f      	b.n	80171f2 <find_volume+0x4e6>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8016d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d94:	2200      	movs	r2, #0
 8016d96:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8016d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d9a:	b2da      	uxtb	r2, r3
 8016d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d9e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8016da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016da2:	785b      	ldrb	r3, [r3, #1]
 8016da4:	4618      	mov	r0, r3
 8016da6:	f7fe fa19 	bl	80151dc <disk_initialize>
 8016daa:	4603      	mov	r3, r0
 8016dac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8016db0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016db4:	f003 0301 	and.w	r3, r3, #1
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d001      	beq.n	8016dc0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8016dbc:	2303      	movs	r3, #3
 8016dbe:	e218      	b.n	80171f2 <find_volume+0x4e6>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8016dc0:	79fb      	ldrb	r3, [r7, #7]
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d007      	beq.n	8016dd6 <find_volume+0xca>
 8016dc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016dca:	f003 0304 	and.w	r3, r3, #4
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	d001      	beq.n	8016dd6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8016dd2:	230a      	movs	r3, #10
 8016dd4:	e20d      	b.n	80171f2 <find_volume+0x4e6>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8016dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016dd8:	7858      	ldrb	r0, [r3, #1]
 8016dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ddc:	330c      	adds	r3, #12
 8016dde:	461a      	mov	r2, r3
 8016de0:	2102      	movs	r1, #2
 8016de2:	f7fe fa61 	bl	80152a8 <disk_ioctl>
 8016de6:	4603      	mov	r3, r0
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d001      	beq.n	8016df0 <find_volume+0xe4>
 8016dec:	2301      	movs	r3, #1
 8016dee:	e200      	b.n	80171f2 <find_volume+0x4e6>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8016df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016df2:	899b      	ldrh	r3, [r3, #12]
 8016df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016df8:	d80d      	bhi.n	8016e16 <find_volume+0x10a>
 8016dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016dfc:	899b      	ldrh	r3, [r3, #12]
 8016dfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016e02:	d308      	bcc.n	8016e16 <find_volume+0x10a>
 8016e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e06:	899b      	ldrh	r3, [r3, #12]
 8016e08:	461a      	mov	r2, r3
 8016e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e0c:	899b      	ldrh	r3, [r3, #12]
 8016e0e:	3b01      	subs	r3, #1
 8016e10:	4013      	ands	r3, r2
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d001      	beq.n	8016e1a <find_volume+0x10e>
 8016e16:	2301      	movs	r3, #1
 8016e18:	e1eb      	b.n	80171f2 <find_volume+0x4e6>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8016e1a:	2300      	movs	r3, #0
 8016e1c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8016e1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016e20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016e22:	f7ff ff1d 	bl	8016c60 <check_fs>
 8016e26:	4603      	mov	r3, r0
 8016e28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8016e2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016e30:	2b02      	cmp	r3, #2
 8016e32:	d149      	bne.n	8016ec8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016e34:	2300      	movs	r3, #0
 8016e36:	643b      	str	r3, [r7, #64]	; 0x40
 8016e38:	e01e      	b.n	8016e78 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8016e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e3c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8016e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e42:	011b      	lsls	r3, r3, #4
 8016e44:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8016e48:	4413      	add	r3, r2
 8016e4a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8016e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e4e:	3304      	adds	r3, #4
 8016e50:	781b      	ldrb	r3, [r3, #0]
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	d006      	beq.n	8016e64 <find_volume+0x158>
 8016e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e58:	3308      	adds	r3, #8
 8016e5a:	4618      	mov	r0, r3
 8016e5c:	f7fe fa5a 	bl	8015314 <ld_dword>
 8016e60:	4602      	mov	r2, r0
 8016e62:	e000      	b.n	8016e66 <find_volume+0x15a>
 8016e64:	2200      	movs	r2, #0
 8016e66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e68:	009b      	lsls	r3, r3, #2
 8016e6a:	3358      	adds	r3, #88	; 0x58
 8016e6c:	443b      	add	r3, r7
 8016e6e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e74:	3301      	adds	r3, #1
 8016e76:	643b      	str	r3, [r7, #64]	; 0x40
 8016e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e7a:	2b03      	cmp	r3, #3
 8016e7c:	d9dd      	bls.n	8016e3a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8016e7e:	2300      	movs	r3, #0
 8016e80:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8016e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d002      	beq.n	8016e8e <find_volume+0x182>
 8016e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e8a:	3b01      	subs	r3, #1
 8016e8c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8016e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016e90:	009b      	lsls	r3, r3, #2
 8016e92:	3358      	adds	r3, #88	; 0x58
 8016e94:	443b      	add	r3, r7
 8016e96:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8016e9a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8016e9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	d005      	beq.n	8016eae <find_volume+0x1a2>
 8016ea2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016ea4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016ea6:	f7ff fedb 	bl	8016c60 <check_fs>
 8016eaa:	4603      	mov	r3, r0
 8016eac:	e000      	b.n	8016eb0 <find_volume+0x1a4>
 8016eae:	2303      	movs	r3, #3
 8016eb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8016eb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016eb8:	2b01      	cmp	r3, #1
 8016eba:	d905      	bls.n	8016ec8 <find_volume+0x1bc>
 8016ebc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ebe:	3301      	adds	r3, #1
 8016ec0:	643b      	str	r3, [r7, #64]	; 0x40
 8016ec2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016ec4:	2b03      	cmp	r3, #3
 8016ec6:	d9e2      	bls.n	8016e8e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8016ec8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016ecc:	2b04      	cmp	r3, #4
 8016ece:	d101      	bne.n	8016ed4 <find_volume+0x1c8>
 8016ed0:	2301      	movs	r3, #1
 8016ed2:	e18e      	b.n	80171f2 <find_volume+0x4e6>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8016ed4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016ed8:	2b01      	cmp	r3, #1
 8016eda:	d901      	bls.n	8016ee0 <find_volume+0x1d4>
 8016edc:	230d      	movs	r3, #13
 8016ede:	e188      	b.n	80171f2 <find_volume+0x4e6>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8016ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ee2:	3338      	adds	r3, #56	; 0x38
 8016ee4:	330b      	adds	r3, #11
 8016ee6:	4618      	mov	r0, r3
 8016ee8:	f7fe f9fc 	bl	80152e4 <ld_word>
 8016eec:	4603      	mov	r3, r0
 8016eee:	461a      	mov	r2, r3
 8016ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ef2:	899b      	ldrh	r3, [r3, #12]
 8016ef4:	429a      	cmp	r2, r3
 8016ef6:	d001      	beq.n	8016efc <find_volume+0x1f0>
 8016ef8:	230d      	movs	r3, #13
 8016efa:	e17a      	b.n	80171f2 <find_volume+0x4e6>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8016efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016efe:	3338      	adds	r3, #56	; 0x38
 8016f00:	3316      	adds	r3, #22
 8016f02:	4618      	mov	r0, r3
 8016f04:	f7fe f9ee 	bl	80152e4 <ld_word>
 8016f08:	4603      	mov	r3, r0
 8016f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8016f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d106      	bne.n	8016f20 <find_volume+0x214>
 8016f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f14:	3338      	adds	r3, #56	; 0x38
 8016f16:	3324      	adds	r3, #36	; 0x24
 8016f18:	4618      	mov	r0, r3
 8016f1a:	f7fe f9fb 	bl	8015314 <ld_dword>
 8016f1e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8016f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016f24:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8016f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f28:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8016f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f2e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8016f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f32:	789b      	ldrb	r3, [r3, #2]
 8016f34:	2b01      	cmp	r3, #1
 8016f36:	d005      	beq.n	8016f44 <find_volume+0x238>
 8016f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f3a:	789b      	ldrb	r3, [r3, #2]
 8016f3c:	2b02      	cmp	r3, #2
 8016f3e:	d001      	beq.n	8016f44 <find_volume+0x238>
 8016f40:	230d      	movs	r3, #13
 8016f42:	e156      	b.n	80171f2 <find_volume+0x4e6>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8016f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f46:	789b      	ldrb	r3, [r3, #2]
 8016f48:	461a      	mov	r2, r3
 8016f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016f4c:	fb02 f303 	mul.w	r3, r2, r3
 8016f50:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8016f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016f58:	b29a      	uxth	r2, r3
 8016f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f5c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8016f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f60:	895b      	ldrh	r3, [r3, #10]
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d008      	beq.n	8016f78 <find_volume+0x26c>
 8016f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f68:	895b      	ldrh	r3, [r3, #10]
 8016f6a:	461a      	mov	r2, r3
 8016f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f6e:	895b      	ldrh	r3, [r3, #10]
 8016f70:	3b01      	subs	r3, #1
 8016f72:	4013      	ands	r3, r2
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	d001      	beq.n	8016f7c <find_volume+0x270>
 8016f78:	230d      	movs	r3, #13
 8016f7a:	e13a      	b.n	80171f2 <find_volume+0x4e6>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8016f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f7e:	3338      	adds	r3, #56	; 0x38
 8016f80:	3311      	adds	r3, #17
 8016f82:	4618      	mov	r0, r3
 8016f84:	f7fe f9ae 	bl	80152e4 <ld_word>
 8016f88:	4603      	mov	r3, r0
 8016f8a:	461a      	mov	r2, r3
 8016f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f8e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8016f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f92:	891b      	ldrh	r3, [r3, #8]
 8016f94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016f96:	8992      	ldrh	r2, [r2, #12]
 8016f98:	0952      	lsrs	r2, r2, #5
 8016f9a:	b292      	uxth	r2, r2
 8016f9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8016fa0:	fb01 f202 	mul.w	r2, r1, r2
 8016fa4:	1a9b      	subs	r3, r3, r2
 8016fa6:	b29b      	uxth	r3, r3
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d003      	beq.n	8016fb4 <find_volume+0x2a8>
 8016fac:	230d      	movs	r3, #13
 8016fae:	e120      	b.n	80171f2 <find_volume+0x4e6>
 8016fb0:	200067a8 	.word	0x200067a8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8016fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fb6:	3338      	adds	r3, #56	; 0x38
 8016fb8:	3313      	adds	r3, #19
 8016fba:	4618      	mov	r0, r3
 8016fbc:	f7fe f992 	bl	80152e4 <ld_word>
 8016fc0:	4603      	mov	r3, r0
 8016fc2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8016fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d106      	bne.n	8016fd8 <find_volume+0x2cc>
 8016fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fcc:	3338      	adds	r3, #56	; 0x38
 8016fce:	3320      	adds	r3, #32
 8016fd0:	4618      	mov	r0, r3
 8016fd2:	f7fe f99f 	bl	8015314 <ld_dword>
 8016fd6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8016fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fda:	3338      	adds	r3, #56	; 0x38
 8016fdc:	330e      	adds	r3, #14
 8016fde:	4618      	mov	r0, r3
 8016fe0:	f7fe f980 	bl	80152e4 <ld_word>
 8016fe4:	4603      	mov	r3, r0
 8016fe6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8016fe8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d101      	bne.n	8016ff2 <find_volume+0x2e6>
 8016fee:	230d      	movs	r3, #13
 8016ff0:	e0ff      	b.n	80171f2 <find_volume+0x4e6>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8016ff2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016ff6:	4413      	add	r3, r2
 8016ff8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016ffa:	8911      	ldrh	r1, [r2, #8]
 8016ffc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016ffe:	8992      	ldrh	r2, [r2, #12]
 8017000:	0952      	lsrs	r2, r2, #5
 8017002:	b292      	uxth	r2, r2
 8017004:	fbb1 f2f2 	udiv	r2, r1, r2
 8017008:	b292      	uxth	r2, r2
 801700a:	4413      	add	r3, r2
 801700c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801700e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017012:	429a      	cmp	r2, r3
 8017014:	d201      	bcs.n	801701a <find_volume+0x30e>
 8017016:	230d      	movs	r3, #13
 8017018:	e0eb      	b.n	80171f2 <find_volume+0x4e6>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801701a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801701c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801701e:	1ad3      	subs	r3, r2, r3
 8017020:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017022:	8952      	ldrh	r2, [r2, #10]
 8017024:	fbb3 f3f2 	udiv	r3, r3, r2
 8017028:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801702a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801702c:	2b00      	cmp	r3, #0
 801702e:	d101      	bne.n	8017034 <find_volume+0x328>
 8017030:	230d      	movs	r3, #13
 8017032:	e0de      	b.n	80171f2 <find_volume+0x4e6>
		fmt = FS_FAT32;
 8017034:	2303      	movs	r3, #3
 8017036:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801703a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801703c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8017040:	4293      	cmp	r3, r2
 8017042:	d802      	bhi.n	801704a <find_volume+0x33e>
 8017044:	2302      	movs	r3, #2
 8017046:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801704a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801704c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8017050:	4293      	cmp	r3, r2
 8017052:	d802      	bhi.n	801705a <find_volume+0x34e>
 8017054:	2301      	movs	r3, #1
 8017056:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801705a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801705c:	1c9a      	adds	r2, r3, #2
 801705e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017060:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8017062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017064:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017066:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8017068:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801706a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801706c:	441a      	add	r2, r3
 801706e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017070:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8017072:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017076:	441a      	add	r2, r3
 8017078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801707a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 801707c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017080:	2b03      	cmp	r3, #3
 8017082:	d11e      	bne.n	80170c2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8017084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017086:	3338      	adds	r3, #56	; 0x38
 8017088:	332a      	adds	r3, #42	; 0x2a
 801708a:	4618      	mov	r0, r3
 801708c:	f7fe f92a 	bl	80152e4 <ld_word>
 8017090:	4603      	mov	r3, r0
 8017092:	2b00      	cmp	r3, #0
 8017094:	d001      	beq.n	801709a <find_volume+0x38e>
 8017096:	230d      	movs	r3, #13
 8017098:	e0ab      	b.n	80171f2 <find_volume+0x4e6>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801709a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801709c:	891b      	ldrh	r3, [r3, #8]
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d001      	beq.n	80170a6 <find_volume+0x39a>
 80170a2:	230d      	movs	r3, #13
 80170a4:	e0a5      	b.n	80171f2 <find_volume+0x4e6>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80170a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170a8:	3338      	adds	r3, #56	; 0x38
 80170aa:	332c      	adds	r3, #44	; 0x2c
 80170ac:	4618      	mov	r0, r3
 80170ae:	f7fe f931 	bl	8015314 <ld_dword>
 80170b2:	4602      	mov	r2, r0
 80170b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170b6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80170b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170ba:	69db      	ldr	r3, [r3, #28]
 80170bc:	009b      	lsls	r3, r3, #2
 80170be:	647b      	str	r3, [r7, #68]	; 0x44
 80170c0:	e01f      	b.n	8017102 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80170c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170c4:	891b      	ldrh	r3, [r3, #8]
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d101      	bne.n	80170ce <find_volume+0x3c2>
 80170ca:	230d      	movs	r3, #13
 80170cc:	e091      	b.n	80171f2 <find_volume+0x4e6>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80170ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80170d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80170d4:	441a      	add	r2, r3
 80170d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170d8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80170da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80170de:	2b02      	cmp	r3, #2
 80170e0:	d103      	bne.n	80170ea <find_volume+0x3de>
 80170e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170e4:	69db      	ldr	r3, [r3, #28]
 80170e6:	005b      	lsls	r3, r3, #1
 80170e8:	e00a      	b.n	8017100 <find_volume+0x3f4>
 80170ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170ec:	69da      	ldr	r2, [r3, #28]
 80170ee:	4613      	mov	r3, r2
 80170f0:	005b      	lsls	r3, r3, #1
 80170f2:	4413      	add	r3, r2
 80170f4:	085a      	lsrs	r2, r3, #1
 80170f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170f8:	69db      	ldr	r3, [r3, #28]
 80170fa:	f003 0301 	and.w	r3, r3, #1
 80170fe:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8017100:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8017102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017104:	6a1a      	ldr	r2, [r3, #32]
 8017106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017108:	899b      	ldrh	r3, [r3, #12]
 801710a:	4619      	mov	r1, r3
 801710c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801710e:	440b      	add	r3, r1
 8017110:	3b01      	subs	r3, #1
 8017112:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017114:	8989      	ldrh	r1, [r1, #12]
 8017116:	fbb3 f3f1 	udiv	r3, r3, r1
 801711a:	429a      	cmp	r2, r3
 801711c:	d201      	bcs.n	8017122 <find_volume+0x416>
 801711e:	230d      	movs	r3, #13
 8017120:	e067      	b.n	80171f2 <find_volume+0x4e6>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8017122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017124:	f04f 32ff 	mov.w	r2, #4294967295
 8017128:	619a      	str	r2, [r3, #24]
 801712a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801712c:	699a      	ldr	r2, [r3, #24]
 801712e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017130:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8017132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017134:	2280      	movs	r2, #128	; 0x80
 8017136:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8017138:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801713c:	2b03      	cmp	r3, #3
 801713e:	d149      	bne.n	80171d4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8017140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017142:	3338      	adds	r3, #56	; 0x38
 8017144:	3330      	adds	r3, #48	; 0x30
 8017146:	4618      	mov	r0, r3
 8017148:	f7fe f8cc 	bl	80152e4 <ld_word>
 801714c:	4603      	mov	r3, r0
 801714e:	2b01      	cmp	r3, #1
 8017150:	d140      	bne.n	80171d4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8017152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017154:	3301      	adds	r3, #1
 8017156:	4619      	mov	r1, r3
 8017158:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801715a:	f7fe fa07 	bl	801556c <move_window>
 801715e:	4603      	mov	r3, r0
 8017160:	2b00      	cmp	r3, #0
 8017162:	d137      	bne.n	80171d4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8017164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017166:	2200      	movs	r2, #0
 8017168:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801716a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801716c:	3338      	adds	r3, #56	; 0x38
 801716e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017172:	4618      	mov	r0, r3
 8017174:	f7fe f8b6 	bl	80152e4 <ld_word>
 8017178:	4603      	mov	r3, r0
 801717a:	461a      	mov	r2, r3
 801717c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8017180:	429a      	cmp	r2, r3
 8017182:	d127      	bne.n	80171d4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8017184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017186:	3338      	adds	r3, #56	; 0x38
 8017188:	4618      	mov	r0, r3
 801718a:	f7fe f8c3 	bl	8015314 <ld_dword>
 801718e:	4603      	mov	r3, r0
 8017190:	4a1a      	ldr	r2, [pc, #104]	; (80171fc <find_volume+0x4f0>)
 8017192:	4293      	cmp	r3, r2
 8017194:	d11e      	bne.n	80171d4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8017196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017198:	3338      	adds	r3, #56	; 0x38
 801719a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801719e:	4618      	mov	r0, r3
 80171a0:	f7fe f8b8 	bl	8015314 <ld_dword>
 80171a4:	4603      	mov	r3, r0
 80171a6:	4a16      	ldr	r2, [pc, #88]	; (8017200 <find_volume+0x4f4>)
 80171a8:	4293      	cmp	r3, r2
 80171aa:	d113      	bne.n	80171d4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80171ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171ae:	3338      	adds	r3, #56	; 0x38
 80171b0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80171b4:	4618      	mov	r0, r3
 80171b6:	f7fe f8ad 	bl	8015314 <ld_dword>
 80171ba:	4602      	mov	r2, r0
 80171bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171be:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80171c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171c2:	3338      	adds	r3, #56	; 0x38
 80171c4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80171c8:	4618      	mov	r0, r3
 80171ca:	f7fe f8a3 	bl	8015314 <ld_dword>
 80171ce:	4602      	mov	r2, r0
 80171d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171d2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80171d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171d6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80171da:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80171dc:	4b09      	ldr	r3, [pc, #36]	; (8017204 <find_volume+0x4f8>)
 80171de:	881b      	ldrh	r3, [r3, #0]
 80171e0:	3301      	adds	r3, #1
 80171e2:	b29a      	uxth	r2, r3
 80171e4:	4b07      	ldr	r3, [pc, #28]	; (8017204 <find_volume+0x4f8>)
 80171e6:	801a      	strh	r2, [r3, #0]
 80171e8:	4b06      	ldr	r3, [pc, #24]	; (8017204 <find_volume+0x4f8>)
 80171ea:	881a      	ldrh	r2, [r3, #0]
 80171ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80171ee:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 80171f0:	2300      	movs	r3, #0
}
 80171f2:	4618      	mov	r0, r3
 80171f4:	3758      	adds	r7, #88	; 0x58
 80171f6:	46bd      	mov	sp, r7
 80171f8:	bd80      	pop	{r7, pc}
 80171fa:	bf00      	nop
 80171fc:	41615252 	.word	0x41615252
 8017200:	61417272 	.word	0x61417272
 8017204:	200067ac 	.word	0x200067ac

08017208 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8017208:	b580      	push	{r7, lr}
 801720a:	b084      	sub	sp, #16
 801720c:	af00      	add	r7, sp, #0
 801720e:	6078      	str	r0, [r7, #4]
 8017210:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8017212:	2309      	movs	r3, #9
 8017214:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	2b00      	cmp	r3, #0
 801721a:	d01c      	beq.n	8017256 <validate+0x4e>
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	681b      	ldr	r3, [r3, #0]
 8017220:	2b00      	cmp	r3, #0
 8017222:	d018      	beq.n	8017256 <validate+0x4e>
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	681b      	ldr	r3, [r3, #0]
 8017228:	781b      	ldrb	r3, [r3, #0]
 801722a:	2b00      	cmp	r3, #0
 801722c:	d013      	beq.n	8017256 <validate+0x4e>
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	889a      	ldrh	r2, [r3, #4]
 8017232:	687b      	ldr	r3, [r7, #4]
 8017234:	681b      	ldr	r3, [r3, #0]
 8017236:	88db      	ldrh	r3, [r3, #6]
 8017238:	429a      	cmp	r2, r3
 801723a:	d10c      	bne.n	8017256 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	681b      	ldr	r3, [r3, #0]
 8017240:	785b      	ldrb	r3, [r3, #1]
 8017242:	4618      	mov	r0, r3
 8017244:	f7fd ffb0 	bl	80151a8 <disk_status>
 8017248:	4603      	mov	r3, r0
 801724a:	f003 0301 	and.w	r3, r3, #1
 801724e:	2b00      	cmp	r3, #0
 8017250:	d101      	bne.n	8017256 <validate+0x4e>
			res = FR_OK;
 8017252:	2300      	movs	r3, #0
 8017254:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8017256:	7bfb      	ldrb	r3, [r7, #15]
 8017258:	2b00      	cmp	r3, #0
 801725a:	d102      	bne.n	8017262 <validate+0x5a>
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	681b      	ldr	r3, [r3, #0]
 8017260:	e000      	b.n	8017264 <validate+0x5c>
 8017262:	2300      	movs	r3, #0
 8017264:	683a      	ldr	r2, [r7, #0]
 8017266:	6013      	str	r3, [r2, #0]
	return res;
 8017268:	7bfb      	ldrb	r3, [r7, #15]
}
 801726a:	4618      	mov	r0, r3
 801726c:	3710      	adds	r7, #16
 801726e:	46bd      	mov	sp, r7
 8017270:	bd80      	pop	{r7, pc}
	...

08017274 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8017274:	b580      	push	{r7, lr}
 8017276:	b088      	sub	sp, #32
 8017278:	af00      	add	r7, sp, #0
 801727a:	60f8      	str	r0, [r7, #12]
 801727c:	60b9      	str	r1, [r7, #8]
 801727e:	4613      	mov	r3, r2
 8017280:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8017282:	68bb      	ldr	r3, [r7, #8]
 8017284:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8017286:	f107 0310 	add.w	r3, r7, #16
 801728a:	4618      	mov	r0, r3
 801728c:	f7ff fca4 	bl	8016bd8 <get_ldnumber>
 8017290:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8017292:	69fb      	ldr	r3, [r7, #28]
 8017294:	2b00      	cmp	r3, #0
 8017296:	da01      	bge.n	801729c <f_mount+0x28>
 8017298:	230b      	movs	r3, #11
 801729a:	e028      	b.n	80172ee <f_mount+0x7a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801729c:	4a16      	ldr	r2, [pc, #88]	; (80172f8 <f_mount+0x84>)
 801729e:	69fb      	ldr	r3, [r7, #28]
 80172a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80172a4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80172a6:	69bb      	ldr	r3, [r7, #24]
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d002      	beq.n	80172b2 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80172ac:	69bb      	ldr	r3, [r7, #24]
 80172ae:	2200      	movs	r2, #0
 80172b0:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80172b2:	68fb      	ldr	r3, [r7, #12]
 80172b4:	2b00      	cmp	r3, #0
 80172b6:	d002      	beq.n	80172be <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 80172b8:	68fb      	ldr	r3, [r7, #12]
 80172ba:	2200      	movs	r2, #0
 80172bc:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80172be:	68fa      	ldr	r2, [r7, #12]
 80172c0:	490d      	ldr	r1, [pc, #52]	; (80172f8 <f_mount+0x84>)
 80172c2:	69fb      	ldr	r3, [r7, #28]
 80172c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80172c8:	68fb      	ldr	r3, [r7, #12]
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d002      	beq.n	80172d4 <f_mount+0x60>
 80172ce:	79fb      	ldrb	r3, [r7, #7]
 80172d0:	2b01      	cmp	r3, #1
 80172d2:	d001      	beq.n	80172d8 <f_mount+0x64>
 80172d4:	2300      	movs	r3, #0
 80172d6:	e00a      	b.n	80172ee <f_mount+0x7a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80172d8:	f107 010c 	add.w	r1, r7, #12
 80172dc:	f107 0308 	add.w	r3, r7, #8
 80172e0:	2200      	movs	r2, #0
 80172e2:	4618      	mov	r0, r3
 80172e4:	f7ff fd12 	bl	8016d0c <find_volume>
 80172e8:	4603      	mov	r3, r0
 80172ea:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80172ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80172ee:	4618      	mov	r0, r3
 80172f0:	3720      	adds	r7, #32
 80172f2:	46bd      	mov	sp, r7
 80172f4:	bd80      	pop	{r7, pc}
 80172f6:	bf00      	nop
 80172f8:	200067a8 	.word	0x200067a8

080172fc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80172fc:	b580      	push	{r7, lr}
 80172fe:	b09a      	sub	sp, #104	; 0x68
 8017300:	af00      	add	r7, sp, #0
 8017302:	60f8      	str	r0, [r7, #12]
 8017304:	60b9      	str	r1, [r7, #8]
 8017306:	4613      	mov	r3, r2
 8017308:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	2b00      	cmp	r3, #0
 801730e:	d101      	bne.n	8017314 <f_open+0x18>
 8017310:	2309      	movs	r3, #9
 8017312:	e198      	b.n	8017646 <f_open+0x34a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8017314:	79fb      	ldrb	r3, [r7, #7]
 8017316:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801731a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 801731c:	79fa      	ldrb	r2, [r7, #7]
 801731e:	f107 0114 	add.w	r1, r7, #20
 8017322:	f107 0308 	add.w	r3, r7, #8
 8017326:	4618      	mov	r0, r3
 8017328:	f7ff fcf0 	bl	8016d0c <find_volume>
 801732c:	4603      	mov	r3, r0
 801732e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8017332:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017336:	2b00      	cmp	r3, #0
 8017338:	f040 817c 	bne.w	8017634 <f_open+0x338>
		dj.obj.fs = fs;
 801733c:	697b      	ldr	r3, [r7, #20]
 801733e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
 8017340:	f44f 7000 	mov.w	r0, #512	; 0x200
 8017344:	f000 fe78 	bl	8018038 <ff_memalloc>
 8017348:	65b8      	str	r0, [r7, #88]	; 0x58
 801734a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801734c:	2b00      	cmp	r3, #0
 801734e:	d101      	bne.n	8017354 <f_open+0x58>
 8017350:	2311      	movs	r3, #17
 8017352:	e178      	b.n	8017646 <f_open+0x34a>
 8017354:	697b      	ldr	r3, [r7, #20]
 8017356:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017358:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 801735a:	68ba      	ldr	r2, [r7, #8]
 801735c:	f107 0318 	add.w	r3, r7, #24
 8017360:	4611      	mov	r1, r2
 8017362:	4618      	mov	r0, r3
 8017364:	f7ff fbc2 	bl	8016aec <follow_path>
 8017368:	4603      	mov	r3, r0
 801736a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801736e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017372:	2b00      	cmp	r3, #0
 8017374:	d107      	bne.n	8017386 <f_open+0x8a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8017376:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801737a:	b25b      	sxtb	r3, r3
 801737c:	2b00      	cmp	r3, #0
 801737e:	da02      	bge.n	8017386 <f_open+0x8a>
				res = FR_INVALID_NAME;
 8017380:	2306      	movs	r3, #6
 8017382:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8017386:	79fb      	ldrb	r3, [r7, #7]
 8017388:	f003 031c 	and.w	r3, r3, #28
 801738c:	2b00      	cmp	r3, #0
 801738e:	d078      	beq.n	8017482 <f_open+0x186>
			if (res != FR_OK) {					/* No file, create new */
 8017390:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017394:	2b00      	cmp	r3, #0
 8017396:	d010      	beq.n	80173ba <f_open+0xbe>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8017398:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801739c:	2b04      	cmp	r3, #4
 801739e:	d107      	bne.n	80173b0 <f_open+0xb4>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 80173a0:	f107 0318 	add.w	r3, r7, #24
 80173a4:	4618      	mov	r0, r3
 80173a6:	f7ff f8f1 	bl	801658c <dir_register>
 80173aa:	4603      	mov	r3, r0
 80173ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80173b0:	79fb      	ldrb	r3, [r7, #7]
 80173b2:	f043 0308 	orr.w	r3, r3, #8
 80173b6:	71fb      	strb	r3, [r7, #7]
 80173b8:	e010      	b.n	80173dc <f_open+0xe0>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80173ba:	7fbb      	ldrb	r3, [r7, #30]
 80173bc:	f003 0311 	and.w	r3, r3, #17
 80173c0:	2b00      	cmp	r3, #0
 80173c2:	d003      	beq.n	80173cc <f_open+0xd0>
					res = FR_DENIED;
 80173c4:	2307      	movs	r3, #7
 80173c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80173ca:	e007      	b.n	80173dc <f_open+0xe0>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80173cc:	79fb      	ldrb	r3, [r7, #7]
 80173ce:	f003 0304 	and.w	r3, r3, #4
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	d002      	beq.n	80173dc <f_open+0xe0>
 80173d6:	2308      	movs	r3, #8
 80173d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80173dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d168      	bne.n	80174b6 <f_open+0x1ba>
 80173e4:	79fb      	ldrb	r3, [r7, #7]
 80173e6:	f003 0308 	and.w	r3, r3, #8
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	d063      	beq.n	80174b6 <f_open+0x1ba>
				dw = GET_FATTIME();
 80173ee:	f7fa f9d5 	bl	801179c <get_fattime>
 80173f2:	6578      	str	r0, [r7, #84]	; 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80173f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173f6:	330e      	adds	r3, #14
 80173f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80173fa:	4618      	mov	r0, r3
 80173fc:	f7fd ffc8 	bl	8015390 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8017400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017402:	3316      	adds	r3, #22
 8017404:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017406:	4618      	mov	r0, r3
 8017408:	f7fd ffc2 	bl	8015390 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801740c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801740e:	330b      	adds	r3, #11
 8017410:	2220      	movs	r2, #32
 8017412:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8017414:	697b      	ldr	r3, [r7, #20]
 8017416:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017418:	4611      	mov	r1, r2
 801741a:	4618      	mov	r0, r3
 801741c:	f7fe fe2e 	bl	801607c <ld_clust>
 8017420:	6538      	str	r0, [r7, #80]	; 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8017422:	697b      	ldr	r3, [r7, #20]
 8017424:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017426:	2200      	movs	r2, #0
 8017428:	4618      	mov	r0, r3
 801742a:	f7fe fe46 	bl	80160ba <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801742e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017430:	331c      	adds	r3, #28
 8017432:	2100      	movs	r1, #0
 8017434:	4618      	mov	r0, r3
 8017436:	f7fd ffab 	bl	8015390 <st_dword>
					fs->wflag = 1;
 801743a:	697b      	ldr	r3, [r7, #20]
 801743c:	2201      	movs	r2, #1
 801743e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8017440:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017442:	2b00      	cmp	r3, #0
 8017444:	d037      	beq.n	80174b6 <f_open+0x1ba>
						dw = fs->winsect;
 8017446:	697b      	ldr	r3, [r7, #20]
 8017448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801744a:	657b      	str	r3, [r7, #84]	; 0x54
						res = remove_chain(&dj.obj, cl, 0);
 801744c:	f107 0318 	add.w	r3, r7, #24
 8017450:	2200      	movs	r2, #0
 8017452:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017454:	4618      	mov	r0, r3
 8017456:	f7fe fb36 	bl	8015ac6 <remove_chain>
 801745a:	4603      	mov	r3, r0
 801745c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8017460:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017464:	2b00      	cmp	r3, #0
 8017466:	d126      	bne.n	80174b6 <f_open+0x1ba>
							res = move_window(fs, dw);
 8017468:	697b      	ldr	r3, [r7, #20]
 801746a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801746c:	4618      	mov	r0, r3
 801746e:	f7fe f87d 	bl	801556c <move_window>
 8017472:	4603      	mov	r3, r0
 8017474:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8017478:	697b      	ldr	r3, [r7, #20]
 801747a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801747c:	3a01      	subs	r2, #1
 801747e:	615a      	str	r2, [r3, #20]
 8017480:	e019      	b.n	80174b6 <f_open+0x1ba>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8017482:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017486:	2b00      	cmp	r3, #0
 8017488:	d115      	bne.n	80174b6 <f_open+0x1ba>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801748a:	7fbb      	ldrb	r3, [r7, #30]
 801748c:	f003 0310 	and.w	r3, r3, #16
 8017490:	2b00      	cmp	r3, #0
 8017492:	d003      	beq.n	801749c <f_open+0x1a0>
					res = FR_NO_FILE;
 8017494:	2304      	movs	r3, #4
 8017496:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801749a:	e00c      	b.n	80174b6 <f_open+0x1ba>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801749c:	79fb      	ldrb	r3, [r7, #7]
 801749e:	f003 0302 	and.w	r3, r3, #2
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d007      	beq.n	80174b6 <f_open+0x1ba>
 80174a6:	7fbb      	ldrb	r3, [r7, #30]
 80174a8:	f003 0301 	and.w	r3, r3, #1
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d002      	beq.n	80174b6 <f_open+0x1ba>
						res = FR_DENIED;
 80174b0:	2307      	movs	r3, #7
 80174b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80174b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d10f      	bne.n	80174de <f_open+0x1e2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80174be:	79fb      	ldrb	r3, [r7, #7]
 80174c0:	f003 0308 	and.w	r3, r3, #8
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	d003      	beq.n	80174d0 <f_open+0x1d4>
				mode |= FA_MODIFIED;
 80174c8:	79fb      	ldrb	r3, [r7, #7]
 80174ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80174ce:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80174d0:	697b      	ldr	r3, [r7, #20]
 80174d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80174d4:	68fb      	ldr	r3, [r7, #12]
 80174d6:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 80174d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80174da:	68fb      	ldr	r3, [r7, #12]
 80174dc:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 80174de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80174e2:	2b00      	cmp	r3, #0
 80174e4:	f040 80a3 	bne.w	801762e <f_open+0x332>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80174e8:	697b      	ldr	r3, [r7, #20]
 80174ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80174ec:	4611      	mov	r1, r2
 80174ee:	4618      	mov	r0, r3
 80174f0:	f7fe fdc4 	bl	801607c <ld_clust>
 80174f4:	4602      	mov	r2, r0
 80174f6:	68fb      	ldr	r3, [r7, #12]
 80174f8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80174fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80174fc:	331c      	adds	r3, #28
 80174fe:	4618      	mov	r0, r3
 8017500:	f7fd ff08 	bl	8015314 <ld_dword>
 8017504:	4602      	mov	r2, r0
 8017506:	68fb      	ldr	r3, [r7, #12]
 8017508:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801750a:	68fb      	ldr	r3, [r7, #12]
 801750c:	2200      	movs	r2, #0
 801750e:	629a      	str	r2, [r3, #40]	; 0x28
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8017510:	697a      	ldr	r2, [r7, #20]
 8017512:	68fb      	ldr	r3, [r7, #12]
 8017514:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8017516:	697b      	ldr	r3, [r7, #20]
 8017518:	88da      	ldrh	r2, [r3, #6]
 801751a:	68fb      	ldr	r3, [r7, #12]
 801751c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801751e:	68fb      	ldr	r3, [r7, #12]
 8017520:	79fa      	ldrb	r2, [r7, #7]
 8017522:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 8017524:	68fb      	ldr	r3, [r7, #12]
 8017526:	2200      	movs	r2, #0
 8017528:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 801752a:	68fb      	ldr	r3, [r7, #12]
 801752c:	2200      	movs	r2, #0
 801752e:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8017530:	68fb      	ldr	r3, [r7, #12]
 8017532:	2200      	movs	r2, #0
 8017534:	615a      	str	r2, [r3, #20]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8017536:	68fb      	ldr	r3, [r7, #12]
 8017538:	332c      	adds	r3, #44	; 0x2c
 801753a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801753e:	2100      	movs	r1, #0
 8017540:	4618      	mov	r0, r3
 8017542:	f7fd ff72 	bl	801542a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8017546:	79fb      	ldrb	r3, [r7, #7]
 8017548:	f003 0320 	and.w	r3, r3, #32
 801754c:	2b00      	cmp	r3, #0
 801754e:	d06e      	beq.n	801762e <f_open+0x332>
 8017550:	68fb      	ldr	r3, [r7, #12]
 8017552:	68db      	ldr	r3, [r3, #12]
 8017554:	2b00      	cmp	r3, #0
 8017556:	d06a      	beq.n	801762e <f_open+0x332>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8017558:	68fb      	ldr	r3, [r7, #12]
 801755a:	68da      	ldr	r2, [r3, #12]
 801755c:	68fb      	ldr	r3, [r7, #12]
 801755e:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8017560:	697b      	ldr	r3, [r7, #20]
 8017562:	895b      	ldrh	r3, [r3, #10]
 8017564:	461a      	mov	r2, r3
 8017566:	697b      	ldr	r3, [r7, #20]
 8017568:	899b      	ldrh	r3, [r3, #12]
 801756a:	fb02 f303 	mul.w	r3, r2, r3
 801756e:	64fb      	str	r3, [r7, #76]	; 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8017570:	68fb      	ldr	r3, [r7, #12]
 8017572:	689b      	ldr	r3, [r3, #8]
 8017574:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8017576:	68fb      	ldr	r3, [r7, #12]
 8017578:	68db      	ldr	r3, [r3, #12]
 801757a:	65fb      	str	r3, [r7, #92]	; 0x5c
 801757c:	e016      	b.n	80175ac <f_open+0x2b0>
					clst = get_fat(&fp->obj, clst);
 801757e:	68fb      	ldr	r3, [r7, #12]
 8017580:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8017582:	4618      	mov	r0, r3
 8017584:	f7fe f8af 	bl	80156e6 <get_fat>
 8017588:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 801758a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801758c:	2b01      	cmp	r3, #1
 801758e:	d802      	bhi.n	8017596 <f_open+0x29a>
 8017590:	2302      	movs	r3, #2
 8017592:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8017596:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017598:	f1b3 3fff 	cmp.w	r3, #4294967295
 801759c:	d102      	bne.n	80175a4 <f_open+0x2a8>
 801759e:	2301      	movs	r3, #1
 80175a0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80175a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80175a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80175a8:	1ad3      	subs	r3, r2, r3
 80175aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80175ac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d103      	bne.n	80175bc <f_open+0x2c0>
 80175b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80175b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80175b8:	429a      	cmp	r2, r3
 80175ba:	d8e0      	bhi.n	801757e <f_open+0x282>
				}
				fp->clust = clst;
 80175bc:	68fb      	ldr	r3, [r7, #12]
 80175be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80175c0:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80175c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d131      	bne.n	801762e <f_open+0x332>
 80175ca:	697b      	ldr	r3, [r7, #20]
 80175cc:	899b      	ldrh	r3, [r3, #12]
 80175ce:	461a      	mov	r2, r3
 80175d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80175d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80175d6:	fb01 f202 	mul.w	r2, r1, r2
 80175da:	1a9b      	subs	r3, r3, r2
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d026      	beq.n	801762e <f_open+0x332>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80175e0:	697b      	ldr	r3, [r7, #20]
 80175e2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80175e4:	4618      	mov	r0, r3
 80175e6:	f7fe f85f 	bl	80156a8 <clust2sect>
 80175ea:	64b8      	str	r0, [r7, #72]	; 0x48
 80175ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80175ee:	2b00      	cmp	r3, #0
 80175f0:	d103      	bne.n	80175fa <f_open+0x2fe>
						res = FR_INT_ERR;
 80175f2:	2302      	movs	r3, #2
 80175f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80175f8:	e019      	b.n	801762e <f_open+0x332>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80175fa:	697b      	ldr	r3, [r7, #20]
 80175fc:	899b      	ldrh	r3, [r3, #12]
 80175fe:	461a      	mov	r2, r3
 8017600:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017602:	fbb3 f2f2 	udiv	r2, r3, r2
 8017606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017608:	441a      	add	r2, r3
 801760a:	68fb      	ldr	r3, [r7, #12]
 801760c:	61da      	str	r2, [r3, #28]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801760e:	697b      	ldr	r3, [r7, #20]
 8017610:	7858      	ldrb	r0, [r3, #1]
 8017612:	68fb      	ldr	r3, [r7, #12]
 8017614:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8017618:	68fb      	ldr	r3, [r7, #12]
 801761a:	69da      	ldr	r2, [r3, #28]
 801761c:	2301      	movs	r3, #1
 801761e:	f7fd fe03 	bl	8015228 <disk_read>
 8017622:	4603      	mov	r3, r0
 8017624:	2b00      	cmp	r3, #0
 8017626:	d002      	beq.n	801762e <f_open+0x332>
 8017628:	2301      	movs	r3, #1
 801762a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 801762e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8017630:	f000 fd0e 	bl	8018050 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8017634:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8017638:	2b00      	cmp	r3, #0
 801763a:	d002      	beq.n	8017642 <f_open+0x346>
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	2200      	movs	r2, #0
 8017640:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8017642:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8017646:	4618      	mov	r0, r3
 8017648:	3768      	adds	r7, #104	; 0x68
 801764a:	46bd      	mov	sp, r7
 801764c:	bd80      	pop	{r7, pc}

0801764e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801764e:	b580      	push	{r7, lr}
 8017650:	b08c      	sub	sp, #48	; 0x30
 8017652:	af00      	add	r7, sp, #0
 8017654:	60f8      	str	r0, [r7, #12]
 8017656:	60b9      	str	r1, [r7, #8]
 8017658:	607a      	str	r2, [r7, #4]
 801765a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801765c:	68bb      	ldr	r3, [r7, #8]
 801765e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8017660:	683b      	ldr	r3, [r7, #0]
 8017662:	2200      	movs	r2, #0
 8017664:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8017666:	68fb      	ldr	r3, [r7, #12]
 8017668:	f107 0210 	add.w	r2, r7, #16
 801766c:	4611      	mov	r1, r2
 801766e:	4618      	mov	r0, r3
 8017670:	f7ff fdca 	bl	8017208 <validate>
 8017674:	4603      	mov	r3, r0
 8017676:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801767a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801767e:	2b00      	cmp	r3, #0
 8017680:	d107      	bne.n	8017692 <f_write+0x44>
 8017682:	68fb      	ldr	r3, [r7, #12]
 8017684:	7c5b      	ldrb	r3, [r3, #17]
 8017686:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801768a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801768e:	2b00      	cmp	r3, #0
 8017690:	d002      	beq.n	8017698 <f_write+0x4a>
 8017692:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017696:	e16a      	b.n	801796e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8017698:	68fb      	ldr	r3, [r7, #12]
 801769a:	7c1b      	ldrb	r3, [r3, #16]
 801769c:	f003 0302 	and.w	r3, r3, #2
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d101      	bne.n	80176a8 <f_write+0x5a>
 80176a4:	2307      	movs	r3, #7
 80176a6:	e162      	b.n	801796e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	695a      	ldr	r2, [r3, #20]
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	441a      	add	r2, r3
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	695b      	ldr	r3, [r3, #20]
 80176b4:	429a      	cmp	r2, r3
 80176b6:	f080 814c 	bcs.w	8017952 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80176ba:	68fb      	ldr	r3, [r7, #12]
 80176bc:	695b      	ldr	r3, [r3, #20]
 80176be:	43db      	mvns	r3, r3
 80176c0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80176c2:	e146      	b.n	8017952 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80176c4:	68fb      	ldr	r3, [r7, #12]
 80176c6:	695b      	ldr	r3, [r3, #20]
 80176c8:	693a      	ldr	r2, [r7, #16]
 80176ca:	8992      	ldrh	r2, [r2, #12]
 80176cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80176d0:	fb01 f202 	mul.w	r2, r1, r2
 80176d4:	1a9b      	subs	r3, r3, r2
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	f040 80f1 	bne.w	80178be <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80176dc:	68fb      	ldr	r3, [r7, #12]
 80176de:	695b      	ldr	r3, [r3, #20]
 80176e0:	693a      	ldr	r2, [r7, #16]
 80176e2:	8992      	ldrh	r2, [r2, #12]
 80176e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80176e8:	693a      	ldr	r2, [r7, #16]
 80176ea:	8952      	ldrh	r2, [r2, #10]
 80176ec:	3a01      	subs	r2, #1
 80176ee:	4013      	ands	r3, r2
 80176f0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80176f2:	69bb      	ldr	r3, [r7, #24]
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	d143      	bne.n	8017780 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80176f8:	68fb      	ldr	r3, [r7, #12]
 80176fa:	695b      	ldr	r3, [r3, #20]
 80176fc:	2b00      	cmp	r3, #0
 80176fe:	d10c      	bne.n	801771a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	689b      	ldr	r3, [r3, #8]
 8017704:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8017706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017708:	2b00      	cmp	r3, #0
 801770a:	d11a      	bne.n	8017742 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801770c:	68fb      	ldr	r3, [r7, #12]
 801770e:	2100      	movs	r1, #0
 8017710:	4618      	mov	r0, r3
 8017712:	f7fe fa3d 	bl	8015b90 <create_chain>
 8017716:	62b8      	str	r0, [r7, #40]	; 0x28
 8017718:	e013      	b.n	8017742 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801771a:	68fb      	ldr	r3, [r7, #12]
 801771c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801771e:	2b00      	cmp	r3, #0
 8017720:	d007      	beq.n	8017732 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8017722:	68fb      	ldr	r3, [r7, #12]
 8017724:	695b      	ldr	r3, [r3, #20]
 8017726:	4619      	mov	r1, r3
 8017728:	68f8      	ldr	r0, [r7, #12]
 801772a:	f7fe fac9 	bl	8015cc0 <clmt_clust>
 801772e:	62b8      	str	r0, [r7, #40]	; 0x28
 8017730:	e007      	b.n	8017742 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8017732:	68fa      	ldr	r2, [r7, #12]
 8017734:	68fb      	ldr	r3, [r7, #12]
 8017736:	699b      	ldr	r3, [r3, #24]
 8017738:	4619      	mov	r1, r3
 801773a:	4610      	mov	r0, r2
 801773c:	f7fe fa28 	bl	8015b90 <create_chain>
 8017740:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8017742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017744:	2b00      	cmp	r3, #0
 8017746:	f000 8109 	beq.w	801795c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801774a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801774c:	2b01      	cmp	r3, #1
 801774e:	d104      	bne.n	801775a <f_write+0x10c>
 8017750:	68fb      	ldr	r3, [r7, #12]
 8017752:	2202      	movs	r2, #2
 8017754:	745a      	strb	r2, [r3, #17]
 8017756:	2302      	movs	r3, #2
 8017758:	e109      	b.n	801796e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801775a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801775c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017760:	d104      	bne.n	801776c <f_write+0x11e>
 8017762:	68fb      	ldr	r3, [r7, #12]
 8017764:	2201      	movs	r2, #1
 8017766:	745a      	strb	r2, [r3, #17]
 8017768:	2301      	movs	r3, #1
 801776a:	e100      	b.n	801796e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801776c:	68fb      	ldr	r3, [r7, #12]
 801776e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017770:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8017772:	68fb      	ldr	r3, [r7, #12]
 8017774:	689b      	ldr	r3, [r3, #8]
 8017776:	2b00      	cmp	r3, #0
 8017778:	d102      	bne.n	8017780 <f_write+0x132>
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801777e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8017780:	68fb      	ldr	r3, [r7, #12]
 8017782:	7c1b      	ldrb	r3, [r3, #16]
 8017784:	b25b      	sxtb	r3, r3
 8017786:	2b00      	cmp	r3, #0
 8017788:	da18      	bge.n	80177bc <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801778a:	693b      	ldr	r3, [r7, #16]
 801778c:	7858      	ldrb	r0, [r3, #1]
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8017794:	68fb      	ldr	r3, [r7, #12]
 8017796:	69da      	ldr	r2, [r3, #28]
 8017798:	2301      	movs	r3, #1
 801779a:	f7fd fd65 	bl	8015268 <disk_write>
 801779e:	4603      	mov	r3, r0
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d004      	beq.n	80177ae <f_write+0x160>
 80177a4:	68fb      	ldr	r3, [r7, #12]
 80177a6:	2201      	movs	r2, #1
 80177a8:	745a      	strb	r2, [r3, #17]
 80177aa:	2301      	movs	r3, #1
 80177ac:	e0df      	b.n	801796e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80177ae:	68fb      	ldr	r3, [r7, #12]
 80177b0:	7c1b      	ldrb	r3, [r3, #16]
 80177b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80177b6:	b2da      	uxtb	r2, r3
 80177b8:	68fb      	ldr	r3, [r7, #12]
 80177ba:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80177bc:	693a      	ldr	r2, [r7, #16]
 80177be:	68fb      	ldr	r3, [r7, #12]
 80177c0:	699b      	ldr	r3, [r3, #24]
 80177c2:	4619      	mov	r1, r3
 80177c4:	4610      	mov	r0, r2
 80177c6:	f7fd ff6f 	bl	80156a8 <clust2sect>
 80177ca:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80177cc:	697b      	ldr	r3, [r7, #20]
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d104      	bne.n	80177dc <f_write+0x18e>
 80177d2:	68fb      	ldr	r3, [r7, #12]
 80177d4:	2202      	movs	r2, #2
 80177d6:	745a      	strb	r2, [r3, #17]
 80177d8:	2302      	movs	r3, #2
 80177da:	e0c8      	b.n	801796e <f_write+0x320>
			sect += csect;
 80177dc:	697a      	ldr	r2, [r7, #20]
 80177de:	69bb      	ldr	r3, [r7, #24]
 80177e0:	4413      	add	r3, r2
 80177e2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80177e4:	693b      	ldr	r3, [r7, #16]
 80177e6:	899b      	ldrh	r3, [r3, #12]
 80177e8:	461a      	mov	r2, r3
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80177f0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80177f2:	6a3b      	ldr	r3, [r7, #32]
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	d043      	beq.n	8017880 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80177f8:	69ba      	ldr	r2, [r7, #24]
 80177fa:	6a3b      	ldr	r3, [r7, #32]
 80177fc:	4413      	add	r3, r2
 80177fe:	693a      	ldr	r2, [r7, #16]
 8017800:	8952      	ldrh	r2, [r2, #10]
 8017802:	4293      	cmp	r3, r2
 8017804:	d905      	bls.n	8017812 <f_write+0x1c4>
					cc = fs->csize - csect;
 8017806:	693b      	ldr	r3, [r7, #16]
 8017808:	895b      	ldrh	r3, [r3, #10]
 801780a:	461a      	mov	r2, r3
 801780c:	69bb      	ldr	r3, [r7, #24]
 801780e:	1ad3      	subs	r3, r2, r3
 8017810:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017812:	693b      	ldr	r3, [r7, #16]
 8017814:	7858      	ldrb	r0, [r3, #1]
 8017816:	6a3b      	ldr	r3, [r7, #32]
 8017818:	697a      	ldr	r2, [r7, #20]
 801781a:	69f9      	ldr	r1, [r7, #28]
 801781c:	f7fd fd24 	bl	8015268 <disk_write>
 8017820:	4603      	mov	r3, r0
 8017822:	2b00      	cmp	r3, #0
 8017824:	d004      	beq.n	8017830 <f_write+0x1e2>
 8017826:	68fb      	ldr	r3, [r7, #12]
 8017828:	2201      	movs	r2, #1
 801782a:	745a      	strb	r2, [r3, #17]
 801782c:	2301      	movs	r3, #1
 801782e:	e09e      	b.n	801796e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8017830:	68fb      	ldr	r3, [r7, #12]
 8017832:	69da      	ldr	r2, [r3, #28]
 8017834:	697b      	ldr	r3, [r7, #20]
 8017836:	1ad3      	subs	r3, r2, r3
 8017838:	6a3a      	ldr	r2, [r7, #32]
 801783a:	429a      	cmp	r2, r3
 801783c:	d918      	bls.n	8017870 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801783e:	68fb      	ldr	r3, [r7, #12]
 8017840:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8017844:	68fb      	ldr	r3, [r7, #12]
 8017846:	69da      	ldr	r2, [r3, #28]
 8017848:	697b      	ldr	r3, [r7, #20]
 801784a:	1ad3      	subs	r3, r2, r3
 801784c:	693a      	ldr	r2, [r7, #16]
 801784e:	8992      	ldrh	r2, [r2, #12]
 8017850:	fb02 f303 	mul.w	r3, r2, r3
 8017854:	69fa      	ldr	r2, [r7, #28]
 8017856:	18d1      	adds	r1, r2, r3
 8017858:	693b      	ldr	r3, [r7, #16]
 801785a:	899b      	ldrh	r3, [r3, #12]
 801785c:	461a      	mov	r2, r3
 801785e:	f7fd fdc3 	bl	80153e8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	7c1b      	ldrb	r3, [r3, #16]
 8017866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801786a:	b2da      	uxtb	r2, r3
 801786c:	68fb      	ldr	r3, [r7, #12]
 801786e:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8017870:	693b      	ldr	r3, [r7, #16]
 8017872:	899b      	ldrh	r3, [r3, #12]
 8017874:	461a      	mov	r2, r3
 8017876:	6a3b      	ldr	r3, [r7, #32]
 8017878:	fb02 f303 	mul.w	r3, r2, r3
 801787c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801787e:	e04b      	b.n	8017918 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8017880:	68fb      	ldr	r3, [r7, #12]
 8017882:	69db      	ldr	r3, [r3, #28]
 8017884:	697a      	ldr	r2, [r7, #20]
 8017886:	429a      	cmp	r2, r3
 8017888:	d016      	beq.n	80178b8 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801788a:	68fb      	ldr	r3, [r7, #12]
 801788c:	695a      	ldr	r2, [r3, #20]
 801788e:	68fb      	ldr	r3, [r7, #12]
 8017890:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8017892:	429a      	cmp	r2, r3
 8017894:	d210      	bcs.n	80178b8 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8017896:	693b      	ldr	r3, [r7, #16]
 8017898:	7858      	ldrb	r0, [r3, #1]
 801789a:	68fb      	ldr	r3, [r7, #12]
 801789c:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80178a0:	2301      	movs	r3, #1
 80178a2:	697a      	ldr	r2, [r7, #20]
 80178a4:	f7fd fcc0 	bl	8015228 <disk_read>
 80178a8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80178aa:	2b00      	cmp	r3, #0
 80178ac:	d004      	beq.n	80178b8 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80178ae:	68fb      	ldr	r3, [r7, #12]
 80178b0:	2201      	movs	r2, #1
 80178b2:	745a      	strb	r2, [r3, #17]
 80178b4:	2301      	movs	r3, #1
 80178b6:	e05a      	b.n	801796e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80178b8:	68fb      	ldr	r3, [r7, #12]
 80178ba:	697a      	ldr	r2, [r7, #20]
 80178bc:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80178be:	693b      	ldr	r3, [r7, #16]
 80178c0:	899b      	ldrh	r3, [r3, #12]
 80178c2:	4618      	mov	r0, r3
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	695b      	ldr	r3, [r3, #20]
 80178c8:	693a      	ldr	r2, [r7, #16]
 80178ca:	8992      	ldrh	r2, [r2, #12]
 80178cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80178d0:	fb01 f202 	mul.w	r2, r1, r2
 80178d4:	1a9b      	subs	r3, r3, r2
 80178d6:	1ac3      	subs	r3, r0, r3
 80178d8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80178da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	429a      	cmp	r2, r3
 80178e0:	d901      	bls.n	80178e6 <f_write+0x298>
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80178e6:	68fb      	ldr	r3, [r7, #12]
 80178e8:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	695b      	ldr	r3, [r3, #20]
 80178f0:	693a      	ldr	r2, [r7, #16]
 80178f2:	8992      	ldrh	r2, [r2, #12]
 80178f4:	fbb3 f0f2 	udiv	r0, r3, r2
 80178f8:	fb00 f202 	mul.w	r2, r0, r2
 80178fc:	1a9b      	subs	r3, r3, r2
 80178fe:	440b      	add	r3, r1
 8017900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017902:	69f9      	ldr	r1, [r7, #28]
 8017904:	4618      	mov	r0, r3
 8017906:	f7fd fd6f 	bl	80153e8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801790a:	68fb      	ldr	r3, [r7, #12]
 801790c:	7c1b      	ldrb	r3, [r3, #16]
 801790e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8017912:	b2da      	uxtb	r2, r3
 8017914:	68fb      	ldr	r3, [r7, #12]
 8017916:	741a      	strb	r2, [r3, #16]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8017918:	69fa      	ldr	r2, [r7, #28]
 801791a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801791c:	4413      	add	r3, r2
 801791e:	61fb      	str	r3, [r7, #28]
 8017920:	68fb      	ldr	r3, [r7, #12]
 8017922:	695a      	ldr	r2, [r3, #20]
 8017924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017926:	441a      	add	r2, r3
 8017928:	68fb      	ldr	r3, [r7, #12]
 801792a:	615a      	str	r2, [r3, #20]
 801792c:	68fb      	ldr	r3, [r7, #12]
 801792e:	68da      	ldr	r2, [r3, #12]
 8017930:	68fb      	ldr	r3, [r7, #12]
 8017932:	695b      	ldr	r3, [r3, #20]
 8017934:	429a      	cmp	r2, r3
 8017936:	bf38      	it	cc
 8017938:	461a      	movcc	r2, r3
 801793a:	68fb      	ldr	r3, [r7, #12]
 801793c:	60da      	str	r2, [r3, #12]
 801793e:	683b      	ldr	r3, [r7, #0]
 8017940:	681a      	ldr	r2, [r3, #0]
 8017942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017944:	441a      	add	r2, r3
 8017946:	683b      	ldr	r3, [r7, #0]
 8017948:	601a      	str	r2, [r3, #0]
 801794a:	687a      	ldr	r2, [r7, #4]
 801794c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801794e:	1ad3      	subs	r3, r2, r3
 8017950:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	2b00      	cmp	r3, #0
 8017956:	f47f aeb5 	bne.w	80176c4 <f_write+0x76>
 801795a:	e000      	b.n	801795e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801795c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801795e:	68fb      	ldr	r3, [r7, #12]
 8017960:	7c1b      	ldrb	r3, [r3, #16]
 8017962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017966:	b2da      	uxtb	r2, r3
 8017968:	68fb      	ldr	r3, [r7, #12]
 801796a:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 801796c:	2300      	movs	r3, #0
}
 801796e:	4618      	mov	r0, r3
 8017970:	3730      	adds	r7, #48	; 0x30
 8017972:	46bd      	mov	sp, r7
 8017974:	bd80      	pop	{r7, pc}

08017976 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8017976:	b580      	push	{r7, lr}
 8017978:	b086      	sub	sp, #24
 801797a:	af00      	add	r7, sp, #0
 801797c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801797e:	687b      	ldr	r3, [r7, #4]
 8017980:	f107 0208 	add.w	r2, r7, #8
 8017984:	4611      	mov	r1, r2
 8017986:	4618      	mov	r0, r3
 8017988:	f7ff fc3e 	bl	8017208 <validate>
 801798c:	4603      	mov	r3, r0
 801798e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017990:	7dfb      	ldrb	r3, [r7, #23]
 8017992:	2b00      	cmp	r3, #0
 8017994:	d168      	bne.n	8017a68 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	7c1b      	ldrb	r3, [r3, #16]
 801799a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d062      	beq.n	8017a68 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	7c1b      	ldrb	r3, [r3, #16]
 80179a6:	b25b      	sxtb	r3, r3
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	da15      	bge.n	80179d8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80179ac:	68bb      	ldr	r3, [r7, #8]
 80179ae:	7858      	ldrb	r0, [r3, #1]
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	69da      	ldr	r2, [r3, #28]
 80179ba:	2301      	movs	r3, #1
 80179bc:	f7fd fc54 	bl	8015268 <disk_write>
 80179c0:	4603      	mov	r3, r0
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d001      	beq.n	80179ca <f_sync+0x54>
 80179c6:	2301      	movs	r3, #1
 80179c8:	e04f      	b.n	8017a6a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	7c1b      	ldrb	r3, [r3, #16]
 80179ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80179d2:	b2da      	uxtb	r2, r3
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80179d8:	f7f9 fee0 	bl	801179c <get_fattime>
 80179dc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80179de:	68ba      	ldr	r2, [r7, #8]
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	6a1b      	ldr	r3, [r3, #32]
 80179e4:	4619      	mov	r1, r3
 80179e6:	4610      	mov	r0, r2
 80179e8:	f7fd fdc0 	bl	801556c <move_window>
 80179ec:	4603      	mov	r3, r0
 80179ee:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80179f0:	7dfb      	ldrb	r3, [r7, #23]
 80179f2:	2b00      	cmp	r3, #0
 80179f4:	d138      	bne.n	8017a68 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80179fa:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80179fc:	68fb      	ldr	r3, [r7, #12]
 80179fe:	330b      	adds	r3, #11
 8017a00:	781a      	ldrb	r2, [r3, #0]
 8017a02:	68fb      	ldr	r3, [r7, #12]
 8017a04:	330b      	adds	r3, #11
 8017a06:	f042 0220 	orr.w	r2, r2, #32
 8017a0a:	b2d2      	uxtb	r2, r2
 8017a0c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	6818      	ldr	r0, [r3, #0]
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	689b      	ldr	r3, [r3, #8]
 8017a16:	461a      	mov	r2, r3
 8017a18:	68f9      	ldr	r1, [r7, #12]
 8017a1a:	f7fe fb4e 	bl	80160ba <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8017a1e:	68fb      	ldr	r3, [r7, #12]
 8017a20:	f103 021c 	add.w	r2, r3, #28
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	68db      	ldr	r3, [r3, #12]
 8017a28:	4619      	mov	r1, r3
 8017a2a:	4610      	mov	r0, r2
 8017a2c:	f7fd fcb0 	bl	8015390 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8017a30:	68fb      	ldr	r3, [r7, #12]
 8017a32:	3316      	adds	r3, #22
 8017a34:	6939      	ldr	r1, [r7, #16]
 8017a36:	4618      	mov	r0, r3
 8017a38:	f7fd fcaa 	bl	8015390 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8017a3c:	68fb      	ldr	r3, [r7, #12]
 8017a3e:	3312      	adds	r3, #18
 8017a40:	2100      	movs	r1, #0
 8017a42:	4618      	mov	r0, r3
 8017a44:	f7fd fc89 	bl	801535a <st_word>
					fs->wflag = 1;
 8017a48:	68bb      	ldr	r3, [r7, #8]
 8017a4a:	2201      	movs	r2, #1
 8017a4c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8017a4e:	68bb      	ldr	r3, [r7, #8]
 8017a50:	4618      	mov	r0, r3
 8017a52:	f7fd fdb9 	bl	80155c8 <sync_fs>
 8017a56:	4603      	mov	r3, r0
 8017a58:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	7c1b      	ldrb	r3, [r3, #16]
 8017a5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017a62:	b2da      	uxtb	r2, r3
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8017a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8017a6a:	4618      	mov	r0, r3
 8017a6c:	3718      	adds	r7, #24
 8017a6e:	46bd      	mov	sp, r7
 8017a70:	bd80      	pop	{r7, pc}

08017a72 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8017a72:	b580      	push	{r7, lr}
 8017a74:	b084      	sub	sp, #16
 8017a76:	af00      	add	r7, sp, #0
 8017a78:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8017a7a:	6878      	ldr	r0, [r7, #4]
 8017a7c:	f7ff ff7b 	bl	8017976 <f_sync>
 8017a80:	4603      	mov	r3, r0
 8017a82:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8017a84:	7bfb      	ldrb	r3, [r7, #15]
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d10e      	bne.n	8017aa8 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	f107 0208 	add.w	r2, r7, #8
 8017a90:	4611      	mov	r1, r2
 8017a92:	4618      	mov	r0, r3
 8017a94:	f7ff fbb8 	bl	8017208 <validate>
 8017a98:	4603      	mov	r3, r0
 8017a9a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8017a9c:	7bfb      	ldrb	r3, [r7, #15]
 8017a9e:	2b00      	cmp	r3, #0
 8017aa0:	d102      	bne.n	8017aa8 <f_close+0x36>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	2200      	movs	r2, #0
 8017aa6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8017aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8017aaa:	4618      	mov	r0, r3
 8017aac:	3710      	adds	r7, #16
 8017aae:	46bd      	mov	sp, r7
 8017ab0:	bd80      	pop	{r7, pc}

08017ab2 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8017ab2:	b580      	push	{r7, lr}
 8017ab4:	b086      	sub	sp, #24
 8017ab6:	af00      	add	r7, sp, #0
 8017ab8:	6078      	str	r0, [r7, #4]
 8017aba:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	2b00      	cmp	r3, #0
 8017ac0:	d101      	bne.n	8017ac6 <f_opendir+0x14>
 8017ac2:	2309      	movs	r3, #9
 8017ac4:	e05c      	b.n	8017b80 <f_opendir+0xce>

	/* Get logical drive */
	obj = &dp->obj;
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8017aca:	f107 0108 	add.w	r1, r7, #8
 8017ace:	463b      	mov	r3, r7
 8017ad0:	2200      	movs	r2, #0
 8017ad2:	4618      	mov	r0, r3
 8017ad4:	f7ff f91a 	bl	8016d0c <find_volume>
 8017ad8:	4603      	mov	r3, r0
 8017ada:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017adc:	7dfb      	ldrb	r3, [r7, #23]
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	d147      	bne.n	8017b72 <f_opendir+0xc0>
		obj->fs = fs;
 8017ae2:	68ba      	ldr	r2, [r7, #8]
 8017ae4:	693b      	ldr	r3, [r7, #16]
 8017ae6:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 8017ae8:	f44f 7000 	mov.w	r0, #512	; 0x200
 8017aec:	f000 faa4 	bl	8018038 <ff_memalloc>
 8017af0:	60f8      	str	r0, [r7, #12]
 8017af2:	68fb      	ldr	r3, [r7, #12]
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d101      	bne.n	8017afc <f_opendir+0x4a>
 8017af8:	2311      	movs	r3, #17
 8017afa:	e041      	b.n	8017b80 <f_opendir+0xce>
 8017afc:	68bb      	ldr	r3, [r7, #8]
 8017afe:	68fa      	ldr	r2, [r7, #12]
 8017b00:	611a      	str	r2, [r3, #16]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8017b02:	683b      	ldr	r3, [r7, #0]
 8017b04:	4619      	mov	r1, r3
 8017b06:	6878      	ldr	r0, [r7, #4]
 8017b08:	f7fe fff0 	bl	8016aec <follow_path>
 8017b0c:	4603      	mov	r3, r0
 8017b0e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8017b10:	7dfb      	ldrb	r3, [r7, #23]
 8017b12:	2b00      	cmp	r3, #0
 8017b14:	d125      	bne.n	8017b62 <f_opendir+0xb0>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017b1c:	b25b      	sxtb	r3, r3
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	db12      	blt.n	8017b48 <f_opendir+0x96>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8017b22:	693b      	ldr	r3, [r7, #16]
 8017b24:	799b      	ldrb	r3, [r3, #6]
 8017b26:	f003 0310 	and.w	r3, r3, #16
 8017b2a:	2b00      	cmp	r3, #0
 8017b2c:	d00a      	beq.n	8017b44 <f_opendir+0x92>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8017b2e:	68ba      	ldr	r2, [r7, #8]
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	69db      	ldr	r3, [r3, #28]
 8017b34:	4619      	mov	r1, r3
 8017b36:	4610      	mov	r0, r2
 8017b38:	f7fe faa0 	bl	801607c <ld_clust>
 8017b3c:	4602      	mov	r2, r0
 8017b3e:	693b      	ldr	r3, [r7, #16]
 8017b40:	609a      	str	r2, [r3, #8]
 8017b42:	e001      	b.n	8017b48 <f_opendir+0x96>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8017b44:	2305      	movs	r3, #5
 8017b46:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8017b48:	7dfb      	ldrb	r3, [r7, #23]
 8017b4a:	2b00      	cmp	r3, #0
 8017b4c:	d109      	bne.n	8017b62 <f_opendir+0xb0>
				obj->id = fs->id;
 8017b4e:	68bb      	ldr	r3, [r7, #8]
 8017b50:	88da      	ldrh	r2, [r3, #6]
 8017b52:	693b      	ldr	r3, [r7, #16]
 8017b54:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8017b56:	2100      	movs	r1, #0
 8017b58:	6878      	ldr	r0, [r7, #4]
 8017b5a:	f7fe f8e9 	bl	8015d30 <dir_sdi>
 8017b5e:	4603      	mov	r3, r0
 8017b60:	75fb      	strb	r3, [r7, #23]
					}
				}
#endif
			}
		}
		FREE_NAMBUF();
 8017b62:	68f8      	ldr	r0, [r7, #12]
 8017b64:	f000 fa74 	bl	8018050 <ff_memfree>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8017b68:	7dfb      	ldrb	r3, [r7, #23]
 8017b6a:	2b04      	cmp	r3, #4
 8017b6c:	d101      	bne.n	8017b72 <f_opendir+0xc0>
 8017b6e:	2305      	movs	r3, #5
 8017b70:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8017b72:	7dfb      	ldrb	r3, [r7, #23]
 8017b74:	2b00      	cmp	r3, #0
 8017b76:	d002      	beq.n	8017b7e <f_opendir+0xcc>
 8017b78:	693b      	ldr	r3, [r7, #16]
 8017b7a:	2200      	movs	r2, #0
 8017b7c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8017b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8017b80:	4618      	mov	r0, r3
 8017b82:	3718      	adds	r7, #24
 8017b84:	46bd      	mov	sp, r7
 8017b86:	bd80      	pop	{r7, pc}

08017b88 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8017b88:	b580      	push	{r7, lr}
 8017b8a:	b084      	sub	sp, #16
 8017b8c:	af00      	add	r7, sp, #0
 8017b8e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	f107 0208 	add.w	r2, r7, #8
 8017b96:	4611      	mov	r1, r2
 8017b98:	4618      	mov	r0, r3
 8017b9a:	f7ff fb35 	bl	8017208 <validate>
 8017b9e:	4603      	mov	r3, r0
 8017ba0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8017ba2:	7bfb      	ldrb	r3, [r7, #15]
 8017ba4:	2b00      	cmp	r3, #0
 8017ba6:	d102      	bne.n	8017bae <f_closedir+0x26>
			res = dec_lock(dp->obj.lockid);
		}
		if (res == FR_OK)
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	2200      	movs	r2, #0
 8017bac:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8017bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8017bb0:	4618      	mov	r0, r3
 8017bb2:	3710      	adds	r7, #16
 8017bb4:	46bd      	mov	sp, r7
 8017bb6:	bd80      	pop	{r7, pc}

08017bb8 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8017bb8:	b580      	push	{r7, lr}
 8017bba:	b098      	sub	sp, #96	; 0x60
 8017bbc:	af00      	add	r7, sp, #0
 8017bbe:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8017bc0:	f107 010c 	add.w	r1, r7, #12
 8017bc4:	1d3b      	adds	r3, r7, #4
 8017bc6:	2202      	movs	r2, #2
 8017bc8:	4618      	mov	r0, r3
 8017bca:	f7ff f89f 	bl	8016d0c <find_volume>
 8017bce:	4603      	mov	r3, r0
 8017bd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 8017bd4:	68fb      	ldr	r3, [r7, #12]
 8017bd6:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 8017bd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	f040 8102 	bne.w	8017de6 <f_mkdir+0x22e>
		INIT_NAMBUF(fs);
 8017be2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8017be6:	f000 fa27 	bl	8018038 <ff_memalloc>
 8017bea:	64f8      	str	r0, [r7, #76]	; 0x4c
 8017bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d101      	bne.n	8017bf6 <f_mkdir+0x3e>
 8017bf2:	2311      	movs	r3, #17
 8017bf4:	e0f9      	b.n	8017dea <f_mkdir+0x232>
 8017bf6:	68fb      	ldr	r3, [r7, #12]
 8017bf8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017bfa:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);			/* Follow the file path */
 8017bfc:	687a      	ldr	r2, [r7, #4]
 8017bfe:	f107 0310 	add.w	r3, r7, #16
 8017c02:	4611      	mov	r1, r2
 8017c04:	4618      	mov	r0, r3
 8017c06:	f7fe ff71 	bl	8016aec <follow_path>
 8017c0a:	4603      	mov	r3, r0
 8017c0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8017c10:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	d102      	bne.n	8017c1e <f_mkdir+0x66>
 8017c18:	2308      	movs	r3, #8
 8017c1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8017c1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017c22:	2b04      	cmp	r3, #4
 8017c24:	f040 80dc 	bne.w	8017de0 <f_mkdir+0x228>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8017c28:	f107 0310 	add.w	r3, r7, #16
 8017c2c:	2100      	movs	r1, #0
 8017c2e:	4618      	mov	r0, r3
 8017c30:	f7fd ffae 	bl	8015b90 <create_chain>
 8017c34:	64b8      	str	r0, [r7, #72]	; 0x48
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8017c36:	68fb      	ldr	r3, [r7, #12]
 8017c38:	895b      	ldrh	r3, [r3, #10]
 8017c3a:	461a      	mov	r2, r3
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	899b      	ldrh	r3, [r3, #12]
 8017c40:	fb02 f303 	mul.w	r3, r2, r3
 8017c44:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 8017c46:	2300      	movs	r3, #0
 8017c48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8017c4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	d102      	bne.n	8017c58 <f_mkdir+0xa0>
 8017c52:	2307      	movs	r3, #7
 8017c54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 8017c58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017c5a:	2b01      	cmp	r3, #1
 8017c5c:	d102      	bne.n	8017c64 <f_mkdir+0xac>
 8017c5e:	2302      	movs	r3, #2
 8017c60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8017c64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c6a:	d102      	bne.n	8017c72 <f_mkdir+0xba>
 8017c6c:	2301      	movs	r3, #1
 8017c6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8017c72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	d106      	bne.n	8017c88 <f_mkdir+0xd0>
 8017c7a:	68fb      	ldr	r3, [r7, #12]
 8017c7c:	4618      	mov	r0, r3
 8017c7e:	f7fd fc31 	bl	80154e4 <sync_window>
 8017c82:	4603      	mov	r3, r0
 8017c84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 8017c88:	f7f9 fd88 	bl	801179c <get_fattime>
 8017c8c:	6478      	str	r0, [r7, #68]	; 0x44
			if (res == FR_OK) {					/* Initialize the new directory table */
 8017c8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d16c      	bne.n	8017d70 <f_mkdir+0x1b8>
				dsc = clust2sect(fs, dcl);
 8017c96:	68fb      	ldr	r3, [r7, #12]
 8017c98:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8017c9a:	4618      	mov	r0, r3
 8017c9c:	f7fd fd04 	bl	80156a8 <clust2sect>
 8017ca0:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 8017ca2:	68fb      	ldr	r3, [r7, #12]
 8017ca4:	3338      	adds	r3, #56	; 0x38
 8017ca6:	643b      	str	r3, [r7, #64]	; 0x40
				mem_set(dir, 0, SS(fs));
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	899b      	ldrh	r3, [r3, #12]
 8017cac:	461a      	mov	r2, r3
 8017cae:	2100      	movs	r1, #0
 8017cb0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8017cb2:	f7fd fbba 	bl	801542a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8017cb6:	220b      	movs	r2, #11
 8017cb8:	2120      	movs	r1, #32
 8017cba:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8017cbc:	f7fd fbb5 	bl	801542a <mem_set>
					dir[DIR_Name] = '.';
 8017cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017cc2:	222e      	movs	r2, #46	; 0x2e
 8017cc4:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8017cc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017cc8:	330b      	adds	r3, #11
 8017cca:	2210      	movs	r2, #16
 8017ccc:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8017cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017cd0:	3316      	adds	r3, #22
 8017cd2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8017cd4:	4618      	mov	r0, r3
 8017cd6:	f7fd fb5b 	bl	8015390 <st_dword>
					st_clust(fs, dir, dcl);
 8017cda:	68fb      	ldr	r3, [r7, #12]
 8017cdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017cde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017ce0:	4618      	mov	r0, r3
 8017ce2:	f7fe f9ea 	bl	80160ba <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8017ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017ce8:	3320      	adds	r3, #32
 8017cea:	2220      	movs	r2, #32
 8017cec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017cee:	4618      	mov	r0, r3
 8017cf0:	f7fd fb7a 	bl	80153e8 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8017cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017cf6:	3321      	adds	r3, #33	; 0x21
 8017cf8:	222e      	movs	r2, #46	; 0x2e
 8017cfa:	701a      	strb	r2, [r3, #0]
 8017cfc:	69bb      	ldr	r3, [r7, #24]
 8017cfe:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8017d00:	68fb      	ldr	r3, [r7, #12]
 8017d02:	781b      	ldrb	r3, [r3, #0]
 8017d04:	2b03      	cmp	r3, #3
 8017d06:	d106      	bne.n	8017d16 <f_mkdir+0x15e>
 8017d08:	68fb      	ldr	r3, [r7, #12]
 8017d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017d0e:	429a      	cmp	r2, r3
 8017d10:	d101      	bne.n	8017d16 <f_mkdir+0x15e>
 8017d12:	2300      	movs	r3, #0
 8017d14:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 8017d16:	68f8      	ldr	r0, [r7, #12]
 8017d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017d1a:	3320      	adds	r3, #32
 8017d1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017d1e:	4619      	mov	r1, r3
 8017d20:	f7fe f9cb 	bl	80160ba <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8017d24:	68fb      	ldr	r3, [r7, #12]
 8017d26:	895b      	ldrh	r3, [r3, #10]
 8017d28:	65bb      	str	r3, [r7, #88]	; 0x58
 8017d2a:	e01c      	b.n	8017d66 <f_mkdir+0x1ae>
					fs->winsect = dsc++;
 8017d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017d2e:	1c5a      	adds	r2, r3, #1
 8017d30:	657a      	str	r2, [r7, #84]	; 0x54
 8017d32:	68fa      	ldr	r2, [r7, #12]
 8017d34:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	2201      	movs	r2, #1
 8017d3a:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8017d3c:	68fb      	ldr	r3, [r7, #12]
 8017d3e:	4618      	mov	r0, r3
 8017d40:	f7fd fbd0 	bl	80154e4 <sync_window>
 8017d44:	4603      	mov	r3, r0
 8017d46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 8017d4a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d10d      	bne.n	8017d6e <f_mkdir+0x1b6>
					mem_set(dir, 0, SS(fs));
 8017d52:	68fb      	ldr	r3, [r7, #12]
 8017d54:	899b      	ldrh	r3, [r3, #12]
 8017d56:	461a      	mov	r2, r3
 8017d58:	2100      	movs	r1, #0
 8017d5a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8017d5c:	f7fd fb65 	bl	801542a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8017d60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017d62:	3b01      	subs	r3, #1
 8017d64:	65bb      	str	r3, [r7, #88]	; 0x58
 8017d66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	d1df      	bne.n	8017d2c <f_mkdir+0x174>
 8017d6c:	e000      	b.n	8017d70 <f_mkdir+0x1b8>
					if (res != FR_OK) break;
 8017d6e:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8017d70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	d107      	bne.n	8017d88 <f_mkdir+0x1d0>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8017d78:	f107 0310 	add.w	r3, r7, #16
 8017d7c:	4618      	mov	r0, r3
 8017d7e:	f7fe fc05 	bl	801658c <dir_register>
 8017d82:	4603      	mov	r3, r0
 8017d84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 8017d88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	d120      	bne.n	8017dd2 <f_mkdir+0x21a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8017d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d92:	643b      	str	r3, [r7, #64]	; 0x40
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8017d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017d96:	3316      	adds	r3, #22
 8017d98:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8017d9a:	4618      	mov	r0, r3
 8017d9c:	f7fd faf8 	bl	8015390 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8017da0:	68fb      	ldr	r3, [r7, #12]
 8017da2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017da4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017da6:	4618      	mov	r0, r3
 8017da8:	f7fe f987 	bl	80160ba <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8017dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017dae:	330b      	adds	r3, #11
 8017db0:	2210      	movs	r2, #16
 8017db2:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8017db4:	68fb      	ldr	r3, [r7, #12]
 8017db6:	2201      	movs	r2, #1
 8017db8:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8017dba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017dbe:	2b00      	cmp	r3, #0
 8017dc0:	d10e      	bne.n	8017de0 <f_mkdir+0x228>
					res = sync_fs(fs);
 8017dc2:	68fb      	ldr	r3, [r7, #12]
 8017dc4:	4618      	mov	r0, r3
 8017dc6:	f7fd fbff 	bl	80155c8 <sync_fs>
 8017dca:	4603      	mov	r3, r0
 8017dcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8017dd0:	e006      	b.n	8017de0 <f_mkdir+0x228>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8017dd2:	f107 0310 	add.w	r3, r7, #16
 8017dd6:	2200      	movs	r2, #0
 8017dd8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8017dda:	4618      	mov	r0, r3
 8017ddc:	f7fd fe73 	bl	8015ac6 <remove_chain>
			}
		}
		FREE_NAMBUF();
 8017de0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8017de2:	f000 f935 	bl	8018050 <ff_memfree>
	}

	LEAVE_FF(fs, res);
 8017de6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8017dea:	4618      	mov	r0, r3
 8017dec:	3760      	adds	r7, #96	; 0x60
 8017dee:	46bd      	mov	sp, r7
 8017df0:	bd80      	pop	{r7, pc}
	...

08017df4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8017df4:	b480      	push	{r7}
 8017df6:	b087      	sub	sp, #28
 8017df8:	af00      	add	r7, sp, #0
 8017dfa:	60f8      	str	r0, [r7, #12]
 8017dfc:	60b9      	str	r1, [r7, #8]
 8017dfe:	4613      	mov	r3, r2
 8017e00:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8017e02:	2301      	movs	r3, #1
 8017e04:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8017e06:	2300      	movs	r3, #0
 8017e08:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8017e0a:	4b1f      	ldr	r3, [pc, #124]	; (8017e88 <FATFS_LinkDriverEx+0x94>)
 8017e0c:	7a5b      	ldrb	r3, [r3, #9]
 8017e0e:	b2db      	uxtb	r3, r3
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d131      	bne.n	8017e78 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8017e14:	4b1c      	ldr	r3, [pc, #112]	; (8017e88 <FATFS_LinkDriverEx+0x94>)
 8017e16:	7a5b      	ldrb	r3, [r3, #9]
 8017e18:	b2db      	uxtb	r3, r3
 8017e1a:	461a      	mov	r2, r3
 8017e1c:	4b1a      	ldr	r3, [pc, #104]	; (8017e88 <FATFS_LinkDriverEx+0x94>)
 8017e1e:	2100      	movs	r1, #0
 8017e20:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8017e22:	4b19      	ldr	r3, [pc, #100]	; (8017e88 <FATFS_LinkDriverEx+0x94>)
 8017e24:	7a5b      	ldrb	r3, [r3, #9]
 8017e26:	b2db      	uxtb	r3, r3
 8017e28:	4a17      	ldr	r2, [pc, #92]	; (8017e88 <FATFS_LinkDriverEx+0x94>)
 8017e2a:	009b      	lsls	r3, r3, #2
 8017e2c:	4413      	add	r3, r2
 8017e2e:	68fa      	ldr	r2, [r7, #12]
 8017e30:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8017e32:	4b15      	ldr	r3, [pc, #84]	; (8017e88 <FATFS_LinkDriverEx+0x94>)
 8017e34:	7a5b      	ldrb	r3, [r3, #9]
 8017e36:	b2db      	uxtb	r3, r3
 8017e38:	461a      	mov	r2, r3
 8017e3a:	4b13      	ldr	r3, [pc, #76]	; (8017e88 <FATFS_LinkDriverEx+0x94>)
 8017e3c:	4413      	add	r3, r2
 8017e3e:	79fa      	ldrb	r2, [r7, #7]
 8017e40:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8017e42:	4b11      	ldr	r3, [pc, #68]	; (8017e88 <FATFS_LinkDriverEx+0x94>)
 8017e44:	7a5b      	ldrb	r3, [r3, #9]
 8017e46:	b2db      	uxtb	r3, r3
 8017e48:	1c5a      	adds	r2, r3, #1
 8017e4a:	b2d1      	uxtb	r1, r2
 8017e4c:	4a0e      	ldr	r2, [pc, #56]	; (8017e88 <FATFS_LinkDriverEx+0x94>)
 8017e4e:	7251      	strb	r1, [r2, #9]
 8017e50:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8017e52:	7dbb      	ldrb	r3, [r7, #22]
 8017e54:	3330      	adds	r3, #48	; 0x30
 8017e56:	b2da      	uxtb	r2, r3
 8017e58:	68bb      	ldr	r3, [r7, #8]
 8017e5a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8017e5c:	68bb      	ldr	r3, [r7, #8]
 8017e5e:	3301      	adds	r3, #1
 8017e60:	223a      	movs	r2, #58	; 0x3a
 8017e62:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8017e64:	68bb      	ldr	r3, [r7, #8]
 8017e66:	3302      	adds	r3, #2
 8017e68:	222f      	movs	r2, #47	; 0x2f
 8017e6a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8017e6c:	68bb      	ldr	r3, [r7, #8]
 8017e6e:	3303      	adds	r3, #3
 8017e70:	2200      	movs	r2, #0
 8017e72:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8017e74:	2300      	movs	r3, #0
 8017e76:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8017e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8017e7a:	4618      	mov	r0, r3
 8017e7c:	371c      	adds	r7, #28
 8017e7e:	46bd      	mov	sp, r7
 8017e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e84:	4770      	bx	lr
 8017e86:	bf00      	nop
 8017e88:	200067b0 	.word	0x200067b0

08017e8c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8017e8c:	b580      	push	{r7, lr}
 8017e8e:	b082      	sub	sp, #8
 8017e90:	af00      	add	r7, sp, #0
 8017e92:	6078      	str	r0, [r7, #4]
 8017e94:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8017e96:	2200      	movs	r2, #0
 8017e98:	6839      	ldr	r1, [r7, #0]
 8017e9a:	6878      	ldr	r0, [r7, #4]
 8017e9c:	f7ff ffaa 	bl	8017df4 <FATFS_LinkDriverEx>
 8017ea0:	4603      	mov	r3, r0
}
 8017ea2:	4618      	mov	r0, r3
 8017ea4:	3708      	adds	r7, #8
 8017ea6:	46bd      	mov	sp, r7
 8017ea8:	bd80      	pop	{r7, pc}
	...

08017eac <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8017eac:	b480      	push	{r7}
 8017eae:	b085      	sub	sp, #20
 8017eb0:	af00      	add	r7, sp, #0
 8017eb2:	4603      	mov	r3, r0
 8017eb4:	6039      	str	r1, [r7, #0]
 8017eb6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8017eb8:	88fb      	ldrh	r3, [r7, #6]
 8017eba:	2b7f      	cmp	r3, #127	; 0x7f
 8017ebc:	d802      	bhi.n	8017ec4 <ff_convert+0x18>
		c = chr;
 8017ebe:	88fb      	ldrh	r3, [r7, #6]
 8017ec0:	81fb      	strh	r3, [r7, #14]
 8017ec2:	e025      	b.n	8017f10 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8017ec4:	683b      	ldr	r3, [r7, #0]
 8017ec6:	2b00      	cmp	r3, #0
 8017ec8:	d00b      	beq.n	8017ee2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8017eca:	88fb      	ldrh	r3, [r7, #6]
 8017ecc:	2bff      	cmp	r3, #255	; 0xff
 8017ece:	d805      	bhi.n	8017edc <ff_convert+0x30>
 8017ed0:	88fb      	ldrh	r3, [r7, #6]
 8017ed2:	3b80      	subs	r3, #128	; 0x80
 8017ed4:	4a12      	ldr	r2, [pc, #72]	; (8017f20 <ff_convert+0x74>)
 8017ed6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017eda:	e000      	b.n	8017ede <ff_convert+0x32>
 8017edc:	2300      	movs	r3, #0
 8017ede:	81fb      	strh	r3, [r7, #14]
 8017ee0:	e016      	b.n	8017f10 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8017ee2:	2300      	movs	r3, #0
 8017ee4:	81fb      	strh	r3, [r7, #14]
 8017ee6:	e009      	b.n	8017efc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8017ee8:	89fb      	ldrh	r3, [r7, #14]
 8017eea:	4a0d      	ldr	r2, [pc, #52]	; (8017f20 <ff_convert+0x74>)
 8017eec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017ef0:	88fa      	ldrh	r2, [r7, #6]
 8017ef2:	429a      	cmp	r2, r3
 8017ef4:	d006      	beq.n	8017f04 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8017ef6:	89fb      	ldrh	r3, [r7, #14]
 8017ef8:	3301      	adds	r3, #1
 8017efa:	81fb      	strh	r3, [r7, #14]
 8017efc:	89fb      	ldrh	r3, [r7, #14]
 8017efe:	2b7f      	cmp	r3, #127	; 0x7f
 8017f00:	d9f2      	bls.n	8017ee8 <ff_convert+0x3c>
 8017f02:	e000      	b.n	8017f06 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8017f04:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8017f06:	89fb      	ldrh	r3, [r7, #14]
 8017f08:	3380      	adds	r3, #128	; 0x80
 8017f0a:	b29b      	uxth	r3, r3
 8017f0c:	b2db      	uxtb	r3, r3
 8017f0e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8017f10:	89fb      	ldrh	r3, [r7, #14]
}
 8017f12:	4618      	mov	r0, r3
 8017f14:	3714      	adds	r7, #20
 8017f16:	46bd      	mov	sp, r7
 8017f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f1c:	4770      	bx	lr
 8017f1e:	bf00      	nop
 8017f20:	08019630 	.word	0x08019630

08017f24 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8017f24:	b480      	push	{r7}
 8017f26:	b087      	sub	sp, #28
 8017f28:	af00      	add	r7, sp, #0
 8017f2a:	4603      	mov	r3, r0
 8017f2c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8017f2e:	88fb      	ldrh	r3, [r7, #6]
 8017f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017f34:	d201      	bcs.n	8017f3a <ff_wtoupper+0x16>
 8017f36:	4b3e      	ldr	r3, [pc, #248]	; (8018030 <ff_wtoupper+0x10c>)
 8017f38:	e000      	b.n	8017f3c <ff_wtoupper+0x18>
 8017f3a:	4b3e      	ldr	r3, [pc, #248]	; (8018034 <ff_wtoupper+0x110>)
 8017f3c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8017f3e:	697b      	ldr	r3, [r7, #20]
 8017f40:	1c9a      	adds	r2, r3, #2
 8017f42:	617a      	str	r2, [r7, #20]
 8017f44:	881b      	ldrh	r3, [r3, #0]
 8017f46:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8017f48:	8a7b      	ldrh	r3, [r7, #18]
 8017f4a:	2b00      	cmp	r3, #0
 8017f4c:	d068      	beq.n	8018020 <ff_wtoupper+0xfc>
 8017f4e:	88fa      	ldrh	r2, [r7, #6]
 8017f50:	8a7b      	ldrh	r3, [r7, #18]
 8017f52:	429a      	cmp	r2, r3
 8017f54:	d364      	bcc.n	8018020 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8017f56:	697b      	ldr	r3, [r7, #20]
 8017f58:	1c9a      	adds	r2, r3, #2
 8017f5a:	617a      	str	r2, [r7, #20]
 8017f5c:	881b      	ldrh	r3, [r3, #0]
 8017f5e:	823b      	strh	r3, [r7, #16]
 8017f60:	8a3b      	ldrh	r3, [r7, #16]
 8017f62:	0a1b      	lsrs	r3, r3, #8
 8017f64:	81fb      	strh	r3, [r7, #14]
 8017f66:	8a3b      	ldrh	r3, [r7, #16]
 8017f68:	b2db      	uxtb	r3, r3
 8017f6a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8017f6c:	88fa      	ldrh	r2, [r7, #6]
 8017f6e:	8a79      	ldrh	r1, [r7, #18]
 8017f70:	8a3b      	ldrh	r3, [r7, #16]
 8017f72:	440b      	add	r3, r1
 8017f74:	429a      	cmp	r2, r3
 8017f76:	da49      	bge.n	801800c <ff_wtoupper+0xe8>
			switch (cmd) {
 8017f78:	89fb      	ldrh	r3, [r7, #14]
 8017f7a:	2b08      	cmp	r3, #8
 8017f7c:	d84f      	bhi.n	801801e <ff_wtoupper+0xfa>
 8017f7e:	a201      	add	r2, pc, #4	; (adr r2, 8017f84 <ff_wtoupper+0x60>)
 8017f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017f84:	08017fa9 	.word	0x08017fa9
 8017f88:	08017fbb 	.word	0x08017fbb
 8017f8c:	08017fd1 	.word	0x08017fd1
 8017f90:	08017fd9 	.word	0x08017fd9
 8017f94:	08017fe1 	.word	0x08017fe1
 8017f98:	08017fe9 	.word	0x08017fe9
 8017f9c:	08017ff1 	.word	0x08017ff1
 8017fa0:	08017ff9 	.word	0x08017ff9
 8017fa4:	08018001 	.word	0x08018001
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8017fa8:	88fa      	ldrh	r2, [r7, #6]
 8017faa:	8a7b      	ldrh	r3, [r7, #18]
 8017fac:	1ad3      	subs	r3, r2, r3
 8017fae:	005b      	lsls	r3, r3, #1
 8017fb0:	697a      	ldr	r2, [r7, #20]
 8017fb2:	4413      	add	r3, r2
 8017fb4:	881b      	ldrh	r3, [r3, #0]
 8017fb6:	80fb      	strh	r3, [r7, #6]
 8017fb8:	e027      	b.n	801800a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8017fba:	88fa      	ldrh	r2, [r7, #6]
 8017fbc:	8a7b      	ldrh	r3, [r7, #18]
 8017fbe:	1ad3      	subs	r3, r2, r3
 8017fc0:	b29b      	uxth	r3, r3
 8017fc2:	f003 0301 	and.w	r3, r3, #1
 8017fc6:	b29b      	uxth	r3, r3
 8017fc8:	88fa      	ldrh	r2, [r7, #6]
 8017fca:	1ad3      	subs	r3, r2, r3
 8017fcc:	80fb      	strh	r3, [r7, #6]
 8017fce:	e01c      	b.n	801800a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8017fd0:	88fb      	ldrh	r3, [r7, #6]
 8017fd2:	3b10      	subs	r3, #16
 8017fd4:	80fb      	strh	r3, [r7, #6]
 8017fd6:	e018      	b.n	801800a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8017fd8:	88fb      	ldrh	r3, [r7, #6]
 8017fda:	3b20      	subs	r3, #32
 8017fdc:	80fb      	strh	r3, [r7, #6]
 8017fde:	e014      	b.n	801800a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8017fe0:	88fb      	ldrh	r3, [r7, #6]
 8017fe2:	3b30      	subs	r3, #48	; 0x30
 8017fe4:	80fb      	strh	r3, [r7, #6]
 8017fe6:	e010      	b.n	801800a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8017fe8:	88fb      	ldrh	r3, [r7, #6]
 8017fea:	3b1a      	subs	r3, #26
 8017fec:	80fb      	strh	r3, [r7, #6]
 8017fee:	e00c      	b.n	801800a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8017ff0:	88fb      	ldrh	r3, [r7, #6]
 8017ff2:	3308      	adds	r3, #8
 8017ff4:	80fb      	strh	r3, [r7, #6]
 8017ff6:	e008      	b.n	801800a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8017ff8:	88fb      	ldrh	r3, [r7, #6]
 8017ffa:	3b50      	subs	r3, #80	; 0x50
 8017ffc:	80fb      	strh	r3, [r7, #6]
 8017ffe:	e004      	b.n	801800a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8018000:	88fb      	ldrh	r3, [r7, #6]
 8018002:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8018006:	80fb      	strh	r3, [r7, #6]
 8018008:	bf00      	nop
			}
			break;
 801800a:	e008      	b.n	801801e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801800c:	89fb      	ldrh	r3, [r7, #14]
 801800e:	2b00      	cmp	r3, #0
 8018010:	d195      	bne.n	8017f3e <ff_wtoupper+0x1a>
 8018012:	8a3b      	ldrh	r3, [r7, #16]
 8018014:	005b      	lsls	r3, r3, #1
 8018016:	697a      	ldr	r2, [r7, #20]
 8018018:	4413      	add	r3, r2
 801801a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801801c:	e78f      	b.n	8017f3e <ff_wtoupper+0x1a>
			break;
 801801e:	bf00      	nop
	}

	return chr;
 8018020:	88fb      	ldrh	r3, [r7, #6]
}
 8018022:	4618      	mov	r0, r3
 8018024:	371c      	adds	r7, #28
 8018026:	46bd      	mov	sp, r7
 8018028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801802c:	4770      	bx	lr
 801802e:	bf00      	nop
 8018030:	08019730 	.word	0x08019730
 8018034:	08019924 	.word	0x08019924

08018038 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8018038:	b580      	push	{r7, lr}
 801803a:	b082      	sub	sp, #8
 801803c:	af00      	add	r7, sp, #0
 801803e:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8018040:	6878      	ldr	r0, [r7, #4]
 8018042:	f000 fda9 	bl	8018b98 <malloc>
 8018046:	4603      	mov	r3, r0
}
 8018048:	4618      	mov	r0, r3
 801804a:	3708      	adds	r7, #8
 801804c:	46bd      	mov	sp, r7
 801804e:	bd80      	pop	{r7, pc}

08018050 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8018050:	b580      	push	{r7, lr}
 8018052:	b082      	sub	sp, #8
 8018054:	af00      	add	r7, sp, #0
 8018056:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8018058:	6878      	ldr	r0, [r7, #4]
 801805a:	f000 fda5 	bl	8018ba8 <free>
}
 801805e:	bf00      	nop
 8018060:	3708      	adds	r7, #8
 8018062:	46bd      	mov	sp, r7
 8018064:	bd80      	pop	{r7, pc}
	...

08018068 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8018068:	b580      	push	{r7, lr}
 801806a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801806c:	2200      	movs	r2, #0
 801806e:	4912      	ldr	r1, [pc, #72]	; (80180b8 <MX_USB_DEVICE_Init+0x50>)
 8018070:	4812      	ldr	r0, [pc, #72]	; (80180bc <MX_USB_DEVICE_Init+0x54>)
 8018072:	f7fb fd98 	bl	8013ba6 <USBD_Init>
 8018076:	4603      	mov	r3, r0
 8018078:	2b00      	cmp	r3, #0
 801807a:	d001      	beq.n	8018080 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801807c:	f7e9 fde0 	bl	8001c40 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8018080:	490f      	ldr	r1, [pc, #60]	; (80180c0 <MX_USB_DEVICE_Init+0x58>)
 8018082:	480e      	ldr	r0, [pc, #56]	; (80180bc <MX_USB_DEVICE_Init+0x54>)
 8018084:	f7fb fdbf 	bl	8013c06 <USBD_RegisterClass>
 8018088:	4603      	mov	r3, r0
 801808a:	2b00      	cmp	r3, #0
 801808c:	d001      	beq.n	8018092 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801808e:	f7e9 fdd7 	bl	8001c40 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8018092:	490c      	ldr	r1, [pc, #48]	; (80180c4 <MX_USB_DEVICE_Init+0x5c>)
 8018094:	4809      	ldr	r0, [pc, #36]	; (80180bc <MX_USB_DEVICE_Init+0x54>)
 8018096:	f7fa f869 	bl	801216c <USBD_MSC_RegisterStorage>
 801809a:	4603      	mov	r3, r0
 801809c:	2b00      	cmp	r3, #0
 801809e:	d001      	beq.n	80180a4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80180a0:	f7e9 fdce 	bl	8001c40 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80180a4:	4805      	ldr	r0, [pc, #20]	; (80180bc <MX_USB_DEVICE_Init+0x54>)
 80180a6:	f7fb fde4 	bl	8013c72 <USBD_Start>
 80180aa:	4603      	mov	r3, r0
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	d001      	beq.n	80180b4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80180b0:	f7e9 fdc6 	bl	8001c40 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80180b4:	bf00      	nop
 80180b6:	bd80      	pop	{r7, pc}
 80180b8:	200000b4 	.word	0x200000b4
 80180bc:	200067bc 	.word	0x200067bc
 80180c0:	2000000c 	.word	0x2000000c
 80180c4:	20000114 	.word	0x20000114

080180c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80180c8:	b480      	push	{r7}
 80180ca:	b083      	sub	sp, #12
 80180cc:	af00      	add	r7, sp, #0
 80180ce:	4603      	mov	r3, r0
 80180d0:	6039      	str	r1, [r7, #0]
 80180d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80180d4:	683b      	ldr	r3, [r7, #0]
 80180d6:	2212      	movs	r2, #18
 80180d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80180da:	4b03      	ldr	r3, [pc, #12]	; (80180e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80180dc:	4618      	mov	r0, r3
 80180de:	370c      	adds	r7, #12
 80180e0:	46bd      	mov	sp, r7
 80180e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180e6:	4770      	bx	lr
 80180e8:	200000d4 	.word	0x200000d4

080180ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80180ec:	b480      	push	{r7}
 80180ee:	b083      	sub	sp, #12
 80180f0:	af00      	add	r7, sp, #0
 80180f2:	4603      	mov	r3, r0
 80180f4:	6039      	str	r1, [r7, #0]
 80180f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80180f8:	683b      	ldr	r3, [r7, #0]
 80180fa:	2204      	movs	r2, #4
 80180fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80180fe:	4b03      	ldr	r3, [pc, #12]	; (801810c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8018100:	4618      	mov	r0, r3
 8018102:	370c      	adds	r7, #12
 8018104:	46bd      	mov	sp, r7
 8018106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801810a:	4770      	bx	lr
 801810c:	200000f4 	.word	0x200000f4

08018110 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018110:	b580      	push	{r7, lr}
 8018112:	b082      	sub	sp, #8
 8018114:	af00      	add	r7, sp, #0
 8018116:	4603      	mov	r3, r0
 8018118:	6039      	str	r1, [r7, #0]
 801811a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801811c:	79fb      	ldrb	r3, [r7, #7]
 801811e:	2b00      	cmp	r3, #0
 8018120:	d105      	bne.n	801812e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018122:	683a      	ldr	r2, [r7, #0]
 8018124:	4907      	ldr	r1, [pc, #28]	; (8018144 <USBD_FS_ProductStrDescriptor+0x34>)
 8018126:	4808      	ldr	r0, [pc, #32]	; (8018148 <USBD_FS_ProductStrDescriptor+0x38>)
 8018128:	f7fc ff7a 	bl	8015020 <USBD_GetString>
 801812c:	e004      	b.n	8018138 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801812e:	683a      	ldr	r2, [r7, #0]
 8018130:	4904      	ldr	r1, [pc, #16]	; (8018144 <USBD_FS_ProductStrDescriptor+0x34>)
 8018132:	4805      	ldr	r0, [pc, #20]	; (8018148 <USBD_FS_ProductStrDescriptor+0x38>)
 8018134:	f7fc ff74 	bl	8015020 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018138:	4b02      	ldr	r3, [pc, #8]	; (8018144 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801813a:	4618      	mov	r0, r3
 801813c:	3708      	adds	r7, #8
 801813e:	46bd      	mov	sp, r7
 8018140:	bd80      	pop	{r7, pc}
 8018142:	bf00      	nop
 8018144:	20006a98 	.word	0x20006a98
 8018148:	0801952c 	.word	0x0801952c

0801814c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801814c:	b580      	push	{r7, lr}
 801814e:	b082      	sub	sp, #8
 8018150:	af00      	add	r7, sp, #0
 8018152:	4603      	mov	r3, r0
 8018154:	6039      	str	r1, [r7, #0]
 8018156:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018158:	683a      	ldr	r2, [r7, #0]
 801815a:	4904      	ldr	r1, [pc, #16]	; (801816c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801815c:	4804      	ldr	r0, [pc, #16]	; (8018170 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801815e:	f7fc ff5f 	bl	8015020 <USBD_GetString>
  return USBD_StrDesc;
 8018162:	4b02      	ldr	r3, [pc, #8]	; (801816c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8018164:	4618      	mov	r0, r3
 8018166:	3708      	adds	r7, #8
 8018168:	46bd      	mov	sp, r7
 801816a:	bd80      	pop	{r7, pc}
 801816c:	20006a98 	.word	0x20006a98
 8018170:	0801953c 	.word	0x0801953c

08018174 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018174:	b580      	push	{r7, lr}
 8018176:	b082      	sub	sp, #8
 8018178:	af00      	add	r7, sp, #0
 801817a:	4603      	mov	r3, r0
 801817c:	6039      	str	r1, [r7, #0]
 801817e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018180:	683b      	ldr	r3, [r7, #0]
 8018182:	221a      	movs	r2, #26
 8018184:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8018186:	f000 f855 	bl	8018234 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801818a:	4b02      	ldr	r3, [pc, #8]	; (8018194 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801818c:	4618      	mov	r0, r3
 801818e:	3708      	adds	r7, #8
 8018190:	46bd      	mov	sp, r7
 8018192:	bd80      	pop	{r7, pc}
 8018194:	200000f8 	.word	0x200000f8

08018198 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018198:	b580      	push	{r7, lr}
 801819a:	b082      	sub	sp, #8
 801819c:	af00      	add	r7, sp, #0
 801819e:	4603      	mov	r3, r0
 80181a0:	6039      	str	r1, [r7, #0]
 80181a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80181a4:	79fb      	ldrb	r3, [r7, #7]
 80181a6:	2b00      	cmp	r3, #0
 80181a8:	d105      	bne.n	80181b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80181aa:	683a      	ldr	r2, [r7, #0]
 80181ac:	4907      	ldr	r1, [pc, #28]	; (80181cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80181ae:	4808      	ldr	r0, [pc, #32]	; (80181d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80181b0:	f7fc ff36 	bl	8015020 <USBD_GetString>
 80181b4:	e004      	b.n	80181c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80181b6:	683a      	ldr	r2, [r7, #0]
 80181b8:	4904      	ldr	r1, [pc, #16]	; (80181cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80181ba:	4805      	ldr	r0, [pc, #20]	; (80181d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80181bc:	f7fc ff30 	bl	8015020 <USBD_GetString>
  }
  return USBD_StrDesc;
 80181c0:	4b02      	ldr	r3, [pc, #8]	; (80181cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80181c2:	4618      	mov	r0, r3
 80181c4:	3708      	adds	r7, #8
 80181c6:	46bd      	mov	sp, r7
 80181c8:	bd80      	pop	{r7, pc}
 80181ca:	bf00      	nop
 80181cc:	20006a98 	.word	0x20006a98
 80181d0:	08019550 	.word	0x08019550

080181d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80181d4:	b580      	push	{r7, lr}
 80181d6:	b082      	sub	sp, #8
 80181d8:	af00      	add	r7, sp, #0
 80181da:	4603      	mov	r3, r0
 80181dc:	6039      	str	r1, [r7, #0]
 80181de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80181e0:	79fb      	ldrb	r3, [r7, #7]
 80181e2:	2b00      	cmp	r3, #0
 80181e4:	d105      	bne.n	80181f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80181e6:	683a      	ldr	r2, [r7, #0]
 80181e8:	4907      	ldr	r1, [pc, #28]	; (8018208 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80181ea:	4808      	ldr	r0, [pc, #32]	; (801820c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80181ec:	f7fc ff18 	bl	8015020 <USBD_GetString>
 80181f0:	e004      	b.n	80181fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80181f2:	683a      	ldr	r2, [r7, #0]
 80181f4:	4904      	ldr	r1, [pc, #16]	; (8018208 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80181f6:	4805      	ldr	r0, [pc, #20]	; (801820c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80181f8:	f7fc ff12 	bl	8015020 <USBD_GetString>
  }
  return USBD_StrDesc;
 80181fc:	4b02      	ldr	r3, [pc, #8]	; (8018208 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80181fe:	4618      	mov	r0, r3
 8018200:	3708      	adds	r7, #8
 8018202:	46bd      	mov	sp, r7
 8018204:	bd80      	pop	{r7, pc}
 8018206:	bf00      	nop
 8018208:	20006a98 	.word	0x20006a98
 801820c:	0801955c 	.word	0x0801955c

08018210 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018210:	b480      	push	{r7}
 8018212:	b083      	sub	sp, #12
 8018214:	af00      	add	r7, sp, #0
 8018216:	4603      	mov	r3, r0
 8018218:	6039      	str	r1, [r7, #0]
 801821a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 801821c:	683b      	ldr	r3, [r7, #0]
 801821e:	220c      	movs	r2, #12
 8018220:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8018222:	4b03      	ldr	r3, [pc, #12]	; (8018230 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8018224:	4618      	mov	r0, r3
 8018226:	370c      	adds	r7, #12
 8018228:	46bd      	mov	sp, r7
 801822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801822e:	4770      	bx	lr
 8018230:	200000e8 	.word	0x200000e8

08018234 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018234:	b580      	push	{r7, lr}
 8018236:	b084      	sub	sp, #16
 8018238:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801823a:	4b0f      	ldr	r3, [pc, #60]	; (8018278 <Get_SerialNum+0x44>)
 801823c:	681b      	ldr	r3, [r3, #0]
 801823e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018240:	4b0e      	ldr	r3, [pc, #56]	; (801827c <Get_SerialNum+0x48>)
 8018242:	681b      	ldr	r3, [r3, #0]
 8018244:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018246:	4b0e      	ldr	r3, [pc, #56]	; (8018280 <Get_SerialNum+0x4c>)
 8018248:	681b      	ldr	r3, [r3, #0]
 801824a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801824c:	68fa      	ldr	r2, [r7, #12]
 801824e:	687b      	ldr	r3, [r7, #4]
 8018250:	4413      	add	r3, r2
 8018252:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018254:	68fb      	ldr	r3, [r7, #12]
 8018256:	2b00      	cmp	r3, #0
 8018258:	d009      	beq.n	801826e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801825a:	2208      	movs	r2, #8
 801825c:	4909      	ldr	r1, [pc, #36]	; (8018284 <Get_SerialNum+0x50>)
 801825e:	68f8      	ldr	r0, [r7, #12]
 8018260:	f000 f814 	bl	801828c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018264:	2204      	movs	r2, #4
 8018266:	4908      	ldr	r1, [pc, #32]	; (8018288 <Get_SerialNum+0x54>)
 8018268:	68b8      	ldr	r0, [r7, #8]
 801826a:	f000 f80f 	bl	801828c <IntToUnicode>
  }
}
 801826e:	bf00      	nop
 8018270:	3710      	adds	r7, #16
 8018272:	46bd      	mov	sp, r7
 8018274:	bd80      	pop	{r7, pc}
 8018276:	bf00      	nop
 8018278:	1fff7a10 	.word	0x1fff7a10
 801827c:	1fff7a14 	.word	0x1fff7a14
 8018280:	1fff7a18 	.word	0x1fff7a18
 8018284:	200000fa 	.word	0x200000fa
 8018288:	2000010a 	.word	0x2000010a

0801828c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801828c:	b480      	push	{r7}
 801828e:	b087      	sub	sp, #28
 8018290:	af00      	add	r7, sp, #0
 8018292:	60f8      	str	r0, [r7, #12]
 8018294:	60b9      	str	r1, [r7, #8]
 8018296:	4613      	mov	r3, r2
 8018298:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801829a:	2300      	movs	r3, #0
 801829c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801829e:	2300      	movs	r3, #0
 80182a0:	75fb      	strb	r3, [r7, #23]
 80182a2:	e027      	b.n	80182f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80182a4:	68fb      	ldr	r3, [r7, #12]
 80182a6:	0f1b      	lsrs	r3, r3, #28
 80182a8:	2b09      	cmp	r3, #9
 80182aa:	d80b      	bhi.n	80182c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80182ac:	68fb      	ldr	r3, [r7, #12]
 80182ae:	0f1b      	lsrs	r3, r3, #28
 80182b0:	b2da      	uxtb	r2, r3
 80182b2:	7dfb      	ldrb	r3, [r7, #23]
 80182b4:	005b      	lsls	r3, r3, #1
 80182b6:	4619      	mov	r1, r3
 80182b8:	68bb      	ldr	r3, [r7, #8]
 80182ba:	440b      	add	r3, r1
 80182bc:	3230      	adds	r2, #48	; 0x30
 80182be:	b2d2      	uxtb	r2, r2
 80182c0:	701a      	strb	r2, [r3, #0]
 80182c2:	e00a      	b.n	80182da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80182c4:	68fb      	ldr	r3, [r7, #12]
 80182c6:	0f1b      	lsrs	r3, r3, #28
 80182c8:	b2da      	uxtb	r2, r3
 80182ca:	7dfb      	ldrb	r3, [r7, #23]
 80182cc:	005b      	lsls	r3, r3, #1
 80182ce:	4619      	mov	r1, r3
 80182d0:	68bb      	ldr	r3, [r7, #8]
 80182d2:	440b      	add	r3, r1
 80182d4:	3237      	adds	r2, #55	; 0x37
 80182d6:	b2d2      	uxtb	r2, r2
 80182d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80182da:	68fb      	ldr	r3, [r7, #12]
 80182dc:	011b      	lsls	r3, r3, #4
 80182de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80182e0:	7dfb      	ldrb	r3, [r7, #23]
 80182e2:	005b      	lsls	r3, r3, #1
 80182e4:	3301      	adds	r3, #1
 80182e6:	68ba      	ldr	r2, [r7, #8]
 80182e8:	4413      	add	r3, r2
 80182ea:	2200      	movs	r2, #0
 80182ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80182ee:	7dfb      	ldrb	r3, [r7, #23]
 80182f0:	3301      	adds	r3, #1
 80182f2:	75fb      	strb	r3, [r7, #23]
 80182f4:	7dfa      	ldrb	r2, [r7, #23]
 80182f6:	79fb      	ldrb	r3, [r7, #7]
 80182f8:	429a      	cmp	r2, r3
 80182fa:	d3d3      	bcc.n	80182a4 <IntToUnicode+0x18>
  }
}
 80182fc:	bf00      	nop
 80182fe:	bf00      	nop
 8018300:	371c      	adds	r7, #28
 8018302:	46bd      	mov	sp, r7
 8018304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018308:	4770      	bx	lr

0801830a <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801830a:	b480      	push	{r7}
 801830c:	b083      	sub	sp, #12
 801830e:	af00      	add	r7, sp, #0
 8018310:	4603      	mov	r3, r0
 8018312:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8018314:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8018316:	4618      	mov	r0, r3
 8018318:	370c      	adds	r7, #12
 801831a:	46bd      	mov	sp, r7
 801831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018320:	4770      	bx	lr
	...

08018324 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8018324:	b580      	push	{r7, lr}
 8018326:	b08c      	sub	sp, #48	; 0x30
 8018328:	af00      	add	r7, sp, #0
 801832a:	4603      	mov	r3, r0
 801832c:	60b9      	str	r1, [r7, #8]
 801832e:	607a      	str	r2, [r7, #4]
 8018330:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  HAL_SD_CardInfoTypeDef info;

  HAL_SD_GetCardInfo(&hsd, &info);
 8018332:	f107 0310 	add.w	r3, r7, #16
 8018336:	4619      	mov	r1, r3
 8018338:	4807      	ldr	r0, [pc, #28]	; (8018358 <STORAGE_GetCapacity_FS+0x34>)
 801833a:	f7f5 ffbb 	bl	800e2b4 <HAL_SD_GetCardInfo>

  *block_num =  info.LogBlockNbr - 1;
 801833e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018340:	1e5a      	subs	r2, r3, #1
 8018342:	68bb      	ldr	r3, [r7, #8]
 8018344:	601a      	str	r2, [r3, #0]
  *block_size = info.LogBlockSize;
 8018346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018348:	b29a      	uxth	r2, r3
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	801a      	strh	r2, [r3, #0]

  return (USBD_OK);
 801834e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8018350:	4618      	mov	r0, r3
 8018352:	3730      	adds	r7, #48	; 0x30
 8018354:	46bd      	mov	sp, r7
 8018356:	bd80      	pop	{r7, pc}
 8018358:	200003a0 	.word	0x200003a0

0801835c <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801835c:	b480      	push	{r7}
 801835e:	b083      	sub	sp, #12
 8018360:	af00      	add	r7, sp, #0
 8018362:	4603      	mov	r3, r0
 8018364:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8018366:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8018368:	4618      	mov	r0, r3
 801836a:	370c      	adds	r7, #12
 801836c:	46bd      	mov	sp, r7
 801836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018372:	4770      	bx	lr

08018374 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8018374:	b480      	push	{r7}
 8018376:	b083      	sub	sp, #12
 8018378:	af00      	add	r7, sp, #0
 801837a:	4603      	mov	r3, r0
 801837c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 801837e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018380:	4618      	mov	r0, r3
 8018382:	370c      	adds	r7, #12
 8018384:	46bd      	mov	sp, r7
 8018386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801838a:	4770      	bx	lr

0801838c <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801838c:	b580      	push	{r7, lr}
 801838e:	b086      	sub	sp, #24
 8018390:	af02      	add	r7, sp, #8
 8018392:	60b9      	str	r1, [r7, #8]
 8018394:	607a      	str	r2, [r7, #4]
 8018396:	461a      	mov	r2, r3
 8018398:	4603      	mov	r3, r0
 801839a:	73fb      	strb	r3, [r7, #15]
 801839c:	4613      	mov	r3, r2
 801839e:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 80183a0:	89bb      	ldrh	r3, [r7, #12]
 80183a2:	f04f 32ff 	mov.w	r2, #4294967295
 80183a6:	9200      	str	r2, [sp, #0]
 80183a8:	687a      	ldr	r2, [r7, #4]
 80183aa:	68b9      	ldr	r1, [r7, #8]
 80183ac:	4807      	ldr	r0, [pc, #28]	; (80183cc <STORAGE_Read_FS+0x40>)
 80183ae:	f7f4 ff37 	bl	800d220 <HAL_SD_ReadBlocks>
//	HAL_SD_ReadBlocks_DMA(&hsd, buf, blk_addr, blk_len);

  /* Wait until SD card is ready to use for new operation */
  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER);
 80183b2:	bf00      	nop
 80183b4:	4805      	ldr	r0, [pc, #20]	; (80183cc <STORAGE_Read_FS+0x40>)
 80183b6:	f7f6 f843 	bl	800e440 <HAL_SD_GetCardState>
 80183ba:	4603      	mov	r3, r0
 80183bc:	2b04      	cmp	r3, #4
 80183be:	d1f9      	bne.n	80183b4 <STORAGE_Read_FS+0x28>

  return (USBD_OK);
 80183c0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80183c2:	4618      	mov	r0, r3
 80183c4:	3710      	adds	r7, #16
 80183c6:	46bd      	mov	sp, r7
 80183c8:	bd80      	pop	{r7, pc}
 80183ca:	bf00      	nop
 80183cc:	200003a0 	.word	0x200003a0

080183d0 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80183d0:	b580      	push	{r7, lr}
 80183d2:	b086      	sub	sp, #24
 80183d4:	af02      	add	r7, sp, #8
 80183d6:	60b9      	str	r1, [r7, #8]
 80183d8:	607a      	str	r2, [r7, #4]
 80183da:	461a      	mov	r2, r3
 80183dc:	4603      	mov	r3, r0
 80183de:	73fb      	strb	r3, [r7, #15]
 80183e0:	4613      	mov	r3, r2
 80183e2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 80183e4:	89bb      	ldrh	r3, [r7, #12]
 80183e6:	f04f 32ff 	mov.w	r2, #4294967295
 80183ea:	9200      	str	r2, [sp, #0]
 80183ec:	687a      	ldr	r2, [r7, #4]
 80183ee:	68b9      	ldr	r1, [r7, #8]
 80183f0:	4807      	ldr	r0, [pc, #28]	; (8018410 <STORAGE_Write_FS+0x40>)
 80183f2:	f7f5 f8f3 	bl	800d5dc <HAL_SD_WriteBlocks>
//	HAL_SD_WriteBlocks_DMA(&hsd, buf, blk_addr, blk_len);

  /* Wait until SD card is ready to use for new operation */
  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER);
 80183f6:	bf00      	nop
 80183f8:	4805      	ldr	r0, [pc, #20]	; (8018410 <STORAGE_Write_FS+0x40>)
 80183fa:	f7f6 f821 	bl	800e440 <HAL_SD_GetCardState>
 80183fe:	4603      	mov	r3, r0
 8018400:	2b04      	cmp	r3, #4
 8018402:	d1f9      	bne.n	80183f8 <STORAGE_Write_FS+0x28>

  return (USBD_OK);
 8018404:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8018406:	4618      	mov	r0, r3
 8018408:	3710      	adds	r7, #16
 801840a:	46bd      	mov	sp, r7
 801840c:	bd80      	pop	{r7, pc}
 801840e:	bf00      	nop
 8018410:	200003a0 	.word	0x200003a0

08018414 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8018414:	b480      	push	{r7}
 8018416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8018418:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801841a:	4618      	mov	r0, r3
 801841c:	46bd      	mov	sp, r7
 801841e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018422:	4770      	bx	lr

08018424 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018424:	b580      	push	{r7, lr}
 8018426:	b08a      	sub	sp, #40	; 0x28
 8018428:	af00      	add	r7, sp, #0
 801842a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801842c:	f107 0314 	add.w	r3, r7, #20
 8018430:	2200      	movs	r2, #0
 8018432:	601a      	str	r2, [r3, #0]
 8018434:	605a      	str	r2, [r3, #4]
 8018436:	609a      	str	r2, [r3, #8]
 8018438:	60da      	str	r2, [r3, #12]
 801843a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	681b      	ldr	r3, [r3, #0]
 8018440:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8018444:	d147      	bne.n	80184d6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018446:	2300      	movs	r3, #0
 8018448:	613b      	str	r3, [r7, #16]
 801844a:	4b25      	ldr	r3, [pc, #148]	; (80184e0 <HAL_PCD_MspInit+0xbc>)
 801844c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801844e:	4a24      	ldr	r2, [pc, #144]	; (80184e0 <HAL_PCD_MspInit+0xbc>)
 8018450:	f043 0301 	orr.w	r3, r3, #1
 8018454:	6313      	str	r3, [r2, #48]	; 0x30
 8018456:	4b22      	ldr	r3, [pc, #136]	; (80184e0 <HAL_PCD_MspInit+0xbc>)
 8018458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801845a:	f003 0301 	and.w	r3, r3, #1
 801845e:	613b      	str	r3, [r7, #16]
 8018460:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8018462:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8018468:	2300      	movs	r3, #0
 801846a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801846c:	2300      	movs	r3, #0
 801846e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018470:	f107 0314 	add.w	r3, r7, #20
 8018474:	4619      	mov	r1, r3
 8018476:	481b      	ldr	r0, [pc, #108]	; (80184e4 <HAL_PCD_MspInit+0xc0>)
 8018478:	f7f0 fd20 	bl	8008ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801847c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8018480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018482:	2302      	movs	r3, #2
 8018484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018486:	2300      	movs	r3, #0
 8018488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801848a:	2303      	movs	r3, #3
 801848c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801848e:	230a      	movs	r3, #10
 8018490:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018492:	f107 0314 	add.w	r3, r7, #20
 8018496:	4619      	mov	r1, r3
 8018498:	4812      	ldr	r0, [pc, #72]	; (80184e4 <HAL_PCD_MspInit+0xc0>)
 801849a:	f7f0 fd0f 	bl	8008ebc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801849e:	4b10      	ldr	r3, [pc, #64]	; (80184e0 <HAL_PCD_MspInit+0xbc>)
 80184a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80184a2:	4a0f      	ldr	r2, [pc, #60]	; (80184e0 <HAL_PCD_MspInit+0xbc>)
 80184a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80184a8:	6353      	str	r3, [r2, #52]	; 0x34
 80184aa:	2300      	movs	r3, #0
 80184ac:	60fb      	str	r3, [r7, #12]
 80184ae:	4b0c      	ldr	r3, [pc, #48]	; (80184e0 <HAL_PCD_MspInit+0xbc>)
 80184b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80184b2:	4a0b      	ldr	r2, [pc, #44]	; (80184e0 <HAL_PCD_MspInit+0xbc>)
 80184b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80184b8:	6453      	str	r3, [r2, #68]	; 0x44
 80184ba:	4b09      	ldr	r3, [pc, #36]	; (80184e0 <HAL_PCD_MspInit+0xbc>)
 80184bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80184be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80184c2:	60fb      	str	r3, [r7, #12]
 80184c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80184c6:	2200      	movs	r2, #0
 80184c8:	2100      	movs	r1, #0
 80184ca:	2043      	movs	r0, #67	; 0x43
 80184cc:	f7f0 f921 	bl	8008712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80184d0:	2043      	movs	r0, #67	; 0x43
 80184d2:	f7f0 f93a 	bl	800874a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80184d6:	bf00      	nop
 80184d8:	3728      	adds	r7, #40	; 0x28
 80184da:	46bd      	mov	sp, r7
 80184dc:	bd80      	pop	{r7, pc}
 80184de:	bf00      	nop
 80184e0:	40023800 	.word	0x40023800
 80184e4:	40020000 	.word	0x40020000

080184e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80184e8:	b580      	push	{r7, lr}
 80184ea:	b082      	sub	sp, #8
 80184ec:	af00      	add	r7, sp, #0
 80184ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80184fc:	4619      	mov	r1, r3
 80184fe:	4610      	mov	r0, r2
 8018500:	f7fb fc04 	bl	8013d0c <USBD_LL_SetupStage>
}
 8018504:	bf00      	nop
 8018506:	3708      	adds	r7, #8
 8018508:	46bd      	mov	sp, r7
 801850a:	bd80      	pop	{r7, pc}

0801850c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801850c:	b580      	push	{r7, lr}
 801850e:	b082      	sub	sp, #8
 8018510:	af00      	add	r7, sp, #0
 8018512:	6078      	str	r0, [r7, #4]
 8018514:	460b      	mov	r3, r1
 8018516:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801851e:	78fa      	ldrb	r2, [r7, #3]
 8018520:	6879      	ldr	r1, [r7, #4]
 8018522:	4613      	mov	r3, r2
 8018524:	00db      	lsls	r3, r3, #3
 8018526:	4413      	add	r3, r2
 8018528:	009b      	lsls	r3, r3, #2
 801852a:	440b      	add	r3, r1
 801852c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8018530:	681a      	ldr	r2, [r3, #0]
 8018532:	78fb      	ldrb	r3, [r7, #3]
 8018534:	4619      	mov	r1, r3
 8018536:	f7fb fc3e 	bl	8013db6 <USBD_LL_DataOutStage>
}
 801853a:	bf00      	nop
 801853c:	3708      	adds	r7, #8
 801853e:	46bd      	mov	sp, r7
 8018540:	bd80      	pop	{r7, pc}

08018542 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018542:	b580      	push	{r7, lr}
 8018544:	b082      	sub	sp, #8
 8018546:	af00      	add	r7, sp, #0
 8018548:	6078      	str	r0, [r7, #4]
 801854a:	460b      	mov	r3, r1
 801854c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8018554:	78fa      	ldrb	r2, [r7, #3]
 8018556:	6879      	ldr	r1, [r7, #4]
 8018558:	4613      	mov	r3, r2
 801855a:	00db      	lsls	r3, r3, #3
 801855c:	4413      	add	r3, r2
 801855e:	009b      	lsls	r3, r3, #2
 8018560:	440b      	add	r3, r1
 8018562:	334c      	adds	r3, #76	; 0x4c
 8018564:	681a      	ldr	r2, [r3, #0]
 8018566:	78fb      	ldrb	r3, [r7, #3]
 8018568:	4619      	mov	r1, r3
 801856a:	f7fb fcd7 	bl	8013f1c <USBD_LL_DataInStage>
}
 801856e:	bf00      	nop
 8018570:	3708      	adds	r7, #8
 8018572:	46bd      	mov	sp, r7
 8018574:	bd80      	pop	{r7, pc}

08018576 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018576:	b580      	push	{r7, lr}
 8018578:	b082      	sub	sp, #8
 801857a:	af00      	add	r7, sp, #0
 801857c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018584:	4618      	mov	r0, r3
 8018586:	f7fb fe0b 	bl	80141a0 <USBD_LL_SOF>
}
 801858a:	bf00      	nop
 801858c:	3708      	adds	r7, #8
 801858e:	46bd      	mov	sp, r7
 8018590:	bd80      	pop	{r7, pc}

08018592 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018592:	b580      	push	{r7, lr}
 8018594:	b084      	sub	sp, #16
 8018596:	af00      	add	r7, sp, #0
 8018598:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801859a:	2301      	movs	r3, #1
 801859c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	68db      	ldr	r3, [r3, #12]
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	d102      	bne.n	80185ac <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80185a6:	2300      	movs	r3, #0
 80185a8:	73fb      	strb	r3, [r7, #15]
 80185aa:	e008      	b.n	80185be <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80185ac:	687b      	ldr	r3, [r7, #4]
 80185ae:	68db      	ldr	r3, [r3, #12]
 80185b0:	2b02      	cmp	r3, #2
 80185b2:	d102      	bne.n	80185ba <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80185b4:	2301      	movs	r3, #1
 80185b6:	73fb      	strb	r3, [r7, #15]
 80185b8:	e001      	b.n	80185be <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80185ba:	f7e9 fb41 	bl	8001c40 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80185c4:	7bfa      	ldrb	r2, [r7, #15]
 80185c6:	4611      	mov	r1, r2
 80185c8:	4618      	mov	r0, r3
 80185ca:	f7fb fdab 	bl	8014124 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80185d4:	4618      	mov	r0, r3
 80185d6:	f7fb fd53 	bl	8014080 <USBD_LL_Reset>
}
 80185da:	bf00      	nop
 80185dc:	3710      	adds	r7, #16
 80185de:	46bd      	mov	sp, r7
 80185e0:	bd80      	pop	{r7, pc}
	...

080185e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80185e4:	b580      	push	{r7, lr}
 80185e6:	b082      	sub	sp, #8
 80185e8:	af00      	add	r7, sp, #0
 80185ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80185f2:	4618      	mov	r0, r3
 80185f4:	f7fb fda6 	bl	8014144 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	681b      	ldr	r3, [r3, #0]
 80185fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018600:	681b      	ldr	r3, [r3, #0]
 8018602:	687a      	ldr	r2, [r7, #4]
 8018604:	6812      	ldr	r2, [r2, #0]
 8018606:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801860a:	f043 0301 	orr.w	r3, r3, #1
 801860e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	6a1b      	ldr	r3, [r3, #32]
 8018614:	2b00      	cmp	r3, #0
 8018616:	d005      	beq.n	8018624 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018618:	4b04      	ldr	r3, [pc, #16]	; (801862c <HAL_PCD_SuspendCallback+0x48>)
 801861a:	691b      	ldr	r3, [r3, #16]
 801861c:	4a03      	ldr	r2, [pc, #12]	; (801862c <HAL_PCD_SuspendCallback+0x48>)
 801861e:	f043 0306 	orr.w	r3, r3, #6
 8018622:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018624:	bf00      	nop
 8018626:	3708      	adds	r7, #8
 8018628:	46bd      	mov	sp, r7
 801862a:	bd80      	pop	{r7, pc}
 801862c:	e000ed00 	.word	0xe000ed00

08018630 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018630:	b580      	push	{r7, lr}
 8018632:	b082      	sub	sp, #8
 8018634:	af00      	add	r7, sp, #0
 8018636:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801863e:	4618      	mov	r0, r3
 8018640:	f7fb fd96 	bl	8014170 <USBD_LL_Resume>
}
 8018644:	bf00      	nop
 8018646:	3708      	adds	r7, #8
 8018648:	46bd      	mov	sp, r7
 801864a:	bd80      	pop	{r7, pc}

0801864c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801864c:	b580      	push	{r7, lr}
 801864e:	b082      	sub	sp, #8
 8018650:	af00      	add	r7, sp, #0
 8018652:	6078      	str	r0, [r7, #4]
 8018654:	460b      	mov	r3, r1
 8018656:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801865e:	78fa      	ldrb	r2, [r7, #3]
 8018660:	4611      	mov	r1, r2
 8018662:	4618      	mov	r0, r3
 8018664:	f7fb fdee 	bl	8014244 <USBD_LL_IsoOUTIncomplete>
}
 8018668:	bf00      	nop
 801866a:	3708      	adds	r7, #8
 801866c:	46bd      	mov	sp, r7
 801866e:	bd80      	pop	{r7, pc}

08018670 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018670:	b580      	push	{r7, lr}
 8018672:	b082      	sub	sp, #8
 8018674:	af00      	add	r7, sp, #0
 8018676:	6078      	str	r0, [r7, #4]
 8018678:	460b      	mov	r3, r1
 801867a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018682:	78fa      	ldrb	r2, [r7, #3]
 8018684:	4611      	mov	r1, r2
 8018686:	4618      	mov	r0, r3
 8018688:	f7fb fdaa 	bl	80141e0 <USBD_LL_IsoINIncomplete>
}
 801868c:	bf00      	nop
 801868e:	3708      	adds	r7, #8
 8018690:	46bd      	mov	sp, r7
 8018692:	bd80      	pop	{r7, pc}

08018694 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018694:	b580      	push	{r7, lr}
 8018696:	b082      	sub	sp, #8
 8018698:	af00      	add	r7, sp, #0
 801869a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80186a2:	4618      	mov	r0, r3
 80186a4:	f7fb fe00 	bl	80142a8 <USBD_LL_DevConnected>
}
 80186a8:	bf00      	nop
 80186aa:	3708      	adds	r7, #8
 80186ac:	46bd      	mov	sp, r7
 80186ae:	bd80      	pop	{r7, pc}

080186b0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80186b0:	b580      	push	{r7, lr}
 80186b2:	b082      	sub	sp, #8
 80186b4:	af00      	add	r7, sp, #0
 80186b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80186be:	4618      	mov	r0, r3
 80186c0:	f7fb fdfd 	bl	80142be <USBD_LL_DevDisconnected>
}
 80186c4:	bf00      	nop
 80186c6:	3708      	adds	r7, #8
 80186c8:	46bd      	mov	sp, r7
 80186ca:	bd80      	pop	{r7, pc}

080186cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80186cc:	b580      	push	{r7, lr}
 80186ce:	b082      	sub	sp, #8
 80186d0:	af00      	add	r7, sp, #0
 80186d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	781b      	ldrb	r3, [r3, #0]
 80186d8:	2b00      	cmp	r3, #0
 80186da:	d13c      	bne.n	8018756 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80186dc:	4a20      	ldr	r2, [pc, #128]	; (8018760 <USBD_LL_Init+0x94>)
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80186e4:	687b      	ldr	r3, [r7, #4]
 80186e6:	4a1e      	ldr	r2, [pc, #120]	; (8018760 <USBD_LL_Init+0x94>)
 80186e8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80186ec:	4b1c      	ldr	r3, [pc, #112]	; (8018760 <USBD_LL_Init+0x94>)
 80186ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80186f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80186f4:	4b1a      	ldr	r3, [pc, #104]	; (8018760 <USBD_LL_Init+0x94>)
 80186f6:	2206      	movs	r2, #6
 80186f8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80186fa:	4b19      	ldr	r3, [pc, #100]	; (8018760 <USBD_LL_Init+0x94>)
 80186fc:	2202      	movs	r2, #2
 80186fe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8018700:	4b17      	ldr	r3, [pc, #92]	; (8018760 <USBD_LL_Init+0x94>)
 8018702:	2200      	movs	r2, #0
 8018704:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018706:	4b16      	ldr	r3, [pc, #88]	; (8018760 <USBD_LL_Init+0x94>)
 8018708:	2202      	movs	r2, #2
 801870a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801870c:	4b14      	ldr	r3, [pc, #80]	; (8018760 <USBD_LL_Init+0x94>)
 801870e:	2200      	movs	r2, #0
 8018710:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8018712:	4b13      	ldr	r3, [pc, #76]	; (8018760 <USBD_LL_Init+0x94>)
 8018714:	2200      	movs	r2, #0
 8018716:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8018718:	4b11      	ldr	r3, [pc, #68]	; (8018760 <USBD_LL_Init+0x94>)
 801871a:	2200      	movs	r2, #0
 801871c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 801871e:	4b10      	ldr	r3, [pc, #64]	; (8018760 <USBD_LL_Init+0x94>)
 8018720:	2201      	movs	r2, #1
 8018722:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8018724:	4b0e      	ldr	r3, [pc, #56]	; (8018760 <USBD_LL_Init+0x94>)
 8018726:	2200      	movs	r2, #0
 8018728:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801872a:	480d      	ldr	r0, [pc, #52]	; (8018760 <USBD_LL_Init+0x94>)
 801872c:	f7f1 fd53 	bl	800a1d6 <HAL_PCD_Init>
 8018730:	4603      	mov	r3, r0
 8018732:	2b00      	cmp	r3, #0
 8018734:	d001      	beq.n	801873a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8018736:	f7e9 fa83 	bl	8001c40 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801873a:	2180      	movs	r1, #128	; 0x80
 801873c:	4808      	ldr	r0, [pc, #32]	; (8018760 <USBD_LL_Init+0x94>)
 801873e:	f7f3 f80c 	bl	800b75a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8018742:	2240      	movs	r2, #64	; 0x40
 8018744:	2100      	movs	r1, #0
 8018746:	4806      	ldr	r0, [pc, #24]	; (8018760 <USBD_LL_Init+0x94>)
 8018748:	f7f2 ffc0 	bl	800b6cc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801874c:	2280      	movs	r2, #128	; 0x80
 801874e:	2101      	movs	r1, #1
 8018750:	4803      	ldr	r0, [pc, #12]	; (8018760 <USBD_LL_Init+0x94>)
 8018752:	f7f2 ffbb 	bl	800b6cc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8018756:	2300      	movs	r3, #0
}
 8018758:	4618      	mov	r0, r3
 801875a:	3708      	adds	r7, #8
 801875c:	46bd      	mov	sp, r7
 801875e:	bd80      	pop	{r7, pc}
 8018760:	20006c98 	.word	0x20006c98

08018764 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018764:	b580      	push	{r7, lr}
 8018766:	b084      	sub	sp, #16
 8018768:	af00      	add	r7, sp, #0
 801876a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801876c:	2300      	movs	r3, #0
 801876e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018770:	2300      	movs	r3, #0
 8018772:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801877a:	4618      	mov	r0, r3
 801877c:	f7f1 fe4f 	bl	800a41e <HAL_PCD_Start>
 8018780:	4603      	mov	r3, r0
 8018782:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018784:	7bfb      	ldrb	r3, [r7, #15]
 8018786:	4618      	mov	r0, r3
 8018788:	f000 f9b0 	bl	8018aec <USBD_Get_USB_Status>
 801878c:	4603      	mov	r3, r0
 801878e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018790:	7bbb      	ldrb	r3, [r7, #14]
}
 8018792:	4618      	mov	r0, r3
 8018794:	3710      	adds	r7, #16
 8018796:	46bd      	mov	sp, r7
 8018798:	bd80      	pop	{r7, pc}

0801879a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801879a:	b580      	push	{r7, lr}
 801879c:	b084      	sub	sp, #16
 801879e:	af00      	add	r7, sp, #0
 80187a0:	6078      	str	r0, [r7, #4]
 80187a2:	4608      	mov	r0, r1
 80187a4:	4611      	mov	r1, r2
 80187a6:	461a      	mov	r2, r3
 80187a8:	4603      	mov	r3, r0
 80187aa:	70fb      	strb	r3, [r7, #3]
 80187ac:	460b      	mov	r3, r1
 80187ae:	70bb      	strb	r3, [r7, #2]
 80187b0:	4613      	mov	r3, r2
 80187b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80187b4:	2300      	movs	r3, #0
 80187b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80187b8:	2300      	movs	r3, #0
 80187ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80187c2:	78bb      	ldrb	r3, [r7, #2]
 80187c4:	883a      	ldrh	r2, [r7, #0]
 80187c6:	78f9      	ldrb	r1, [r7, #3]
 80187c8:	f7f2 fb4d 	bl	800ae66 <HAL_PCD_EP_Open>
 80187cc:	4603      	mov	r3, r0
 80187ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80187d0:	7bfb      	ldrb	r3, [r7, #15]
 80187d2:	4618      	mov	r0, r3
 80187d4:	f000 f98a 	bl	8018aec <USBD_Get_USB_Status>
 80187d8:	4603      	mov	r3, r0
 80187da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80187dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80187de:	4618      	mov	r0, r3
 80187e0:	3710      	adds	r7, #16
 80187e2:	46bd      	mov	sp, r7
 80187e4:	bd80      	pop	{r7, pc}

080187e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80187e6:	b580      	push	{r7, lr}
 80187e8:	b084      	sub	sp, #16
 80187ea:	af00      	add	r7, sp, #0
 80187ec:	6078      	str	r0, [r7, #4]
 80187ee:	460b      	mov	r3, r1
 80187f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80187f2:	2300      	movs	r3, #0
 80187f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80187f6:	2300      	movs	r3, #0
 80187f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018800:	78fa      	ldrb	r2, [r7, #3]
 8018802:	4611      	mov	r1, r2
 8018804:	4618      	mov	r0, r3
 8018806:	f7f2 fb96 	bl	800af36 <HAL_PCD_EP_Close>
 801880a:	4603      	mov	r3, r0
 801880c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801880e:	7bfb      	ldrb	r3, [r7, #15]
 8018810:	4618      	mov	r0, r3
 8018812:	f000 f96b 	bl	8018aec <USBD_Get_USB_Status>
 8018816:	4603      	mov	r3, r0
 8018818:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801881a:	7bbb      	ldrb	r3, [r7, #14]
}
 801881c:	4618      	mov	r0, r3
 801881e:	3710      	adds	r7, #16
 8018820:	46bd      	mov	sp, r7
 8018822:	bd80      	pop	{r7, pc}

08018824 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018824:	b580      	push	{r7, lr}
 8018826:	b084      	sub	sp, #16
 8018828:	af00      	add	r7, sp, #0
 801882a:	6078      	str	r0, [r7, #4]
 801882c:	460b      	mov	r3, r1
 801882e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018830:	2300      	movs	r3, #0
 8018832:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018834:	2300      	movs	r3, #0
 8018836:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801883e:	78fa      	ldrb	r2, [r7, #3]
 8018840:	4611      	mov	r1, r2
 8018842:	4618      	mov	r0, r3
 8018844:	f7f2 fd59 	bl	800b2fa <HAL_PCD_EP_Flush>
 8018848:	4603      	mov	r3, r0
 801884a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801884c:	7bfb      	ldrb	r3, [r7, #15]
 801884e:	4618      	mov	r0, r3
 8018850:	f000 f94c 	bl	8018aec <USBD_Get_USB_Status>
 8018854:	4603      	mov	r3, r0
 8018856:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018858:	7bbb      	ldrb	r3, [r7, #14]
}
 801885a:	4618      	mov	r0, r3
 801885c:	3710      	adds	r7, #16
 801885e:	46bd      	mov	sp, r7
 8018860:	bd80      	pop	{r7, pc}

08018862 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018862:	b580      	push	{r7, lr}
 8018864:	b084      	sub	sp, #16
 8018866:	af00      	add	r7, sp, #0
 8018868:	6078      	str	r0, [r7, #4]
 801886a:	460b      	mov	r3, r1
 801886c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801886e:	2300      	movs	r3, #0
 8018870:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018872:	2300      	movs	r3, #0
 8018874:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801887c:	78fa      	ldrb	r2, [r7, #3]
 801887e:	4611      	mov	r1, r2
 8018880:	4618      	mov	r0, r3
 8018882:	f7f2 fc4f 	bl	800b124 <HAL_PCD_EP_SetStall>
 8018886:	4603      	mov	r3, r0
 8018888:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801888a:	7bfb      	ldrb	r3, [r7, #15]
 801888c:	4618      	mov	r0, r3
 801888e:	f000 f92d 	bl	8018aec <USBD_Get_USB_Status>
 8018892:	4603      	mov	r3, r0
 8018894:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018896:	7bbb      	ldrb	r3, [r7, #14]
}
 8018898:	4618      	mov	r0, r3
 801889a:	3710      	adds	r7, #16
 801889c:	46bd      	mov	sp, r7
 801889e:	bd80      	pop	{r7, pc}

080188a0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80188a0:	b580      	push	{r7, lr}
 80188a2:	b084      	sub	sp, #16
 80188a4:	af00      	add	r7, sp, #0
 80188a6:	6078      	str	r0, [r7, #4]
 80188a8:	460b      	mov	r3, r1
 80188aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80188ac:	2300      	movs	r3, #0
 80188ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80188b0:	2300      	movs	r3, #0
 80188b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80188ba:	78fa      	ldrb	r2, [r7, #3]
 80188bc:	4611      	mov	r1, r2
 80188be:	4618      	mov	r0, r3
 80188c0:	f7f2 fc94 	bl	800b1ec <HAL_PCD_EP_ClrStall>
 80188c4:	4603      	mov	r3, r0
 80188c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80188c8:	7bfb      	ldrb	r3, [r7, #15]
 80188ca:	4618      	mov	r0, r3
 80188cc:	f000 f90e 	bl	8018aec <USBD_Get_USB_Status>
 80188d0:	4603      	mov	r3, r0
 80188d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80188d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80188d6:	4618      	mov	r0, r3
 80188d8:	3710      	adds	r7, #16
 80188da:	46bd      	mov	sp, r7
 80188dc:	bd80      	pop	{r7, pc}

080188de <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80188de:	b480      	push	{r7}
 80188e0:	b085      	sub	sp, #20
 80188e2:	af00      	add	r7, sp, #0
 80188e4:	6078      	str	r0, [r7, #4]
 80188e6:	460b      	mov	r3, r1
 80188e8:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80188ea:	687b      	ldr	r3, [r7, #4]
 80188ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80188f0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80188f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	da0b      	bge.n	8018912 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80188fa:	78fb      	ldrb	r3, [r7, #3]
 80188fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018900:	68f9      	ldr	r1, [r7, #12]
 8018902:	4613      	mov	r3, r2
 8018904:	00db      	lsls	r3, r3, #3
 8018906:	4413      	add	r3, r2
 8018908:	009b      	lsls	r3, r3, #2
 801890a:	440b      	add	r3, r1
 801890c:	333e      	adds	r3, #62	; 0x3e
 801890e:	781b      	ldrb	r3, [r3, #0]
 8018910:	e00b      	b.n	801892a <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8018912:	78fb      	ldrb	r3, [r7, #3]
 8018914:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018918:	68f9      	ldr	r1, [r7, #12]
 801891a:	4613      	mov	r3, r2
 801891c:	00db      	lsls	r3, r3, #3
 801891e:	4413      	add	r3, r2
 8018920:	009b      	lsls	r3, r3, #2
 8018922:	440b      	add	r3, r1
 8018924:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8018928:	781b      	ldrb	r3, [r3, #0]
  }
}
 801892a:	4618      	mov	r0, r3
 801892c:	3714      	adds	r7, #20
 801892e:	46bd      	mov	sp, r7
 8018930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018934:	4770      	bx	lr

08018936 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018936:	b580      	push	{r7, lr}
 8018938:	b084      	sub	sp, #16
 801893a:	af00      	add	r7, sp, #0
 801893c:	6078      	str	r0, [r7, #4]
 801893e:	460b      	mov	r3, r1
 8018940:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018942:	2300      	movs	r3, #0
 8018944:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018946:	2300      	movs	r3, #0
 8018948:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018950:	78fa      	ldrb	r2, [r7, #3]
 8018952:	4611      	mov	r1, r2
 8018954:	4618      	mov	r0, r3
 8018956:	f7f2 fa61 	bl	800ae1c <HAL_PCD_SetAddress>
 801895a:	4603      	mov	r3, r0
 801895c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801895e:	7bfb      	ldrb	r3, [r7, #15]
 8018960:	4618      	mov	r0, r3
 8018962:	f000 f8c3 	bl	8018aec <USBD_Get_USB_Status>
 8018966:	4603      	mov	r3, r0
 8018968:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801896a:	7bbb      	ldrb	r3, [r7, #14]
}
 801896c:	4618      	mov	r0, r3
 801896e:	3710      	adds	r7, #16
 8018970:	46bd      	mov	sp, r7
 8018972:	bd80      	pop	{r7, pc}

08018974 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018974:	b580      	push	{r7, lr}
 8018976:	b086      	sub	sp, #24
 8018978:	af00      	add	r7, sp, #0
 801897a:	60f8      	str	r0, [r7, #12]
 801897c:	607a      	str	r2, [r7, #4]
 801897e:	603b      	str	r3, [r7, #0]
 8018980:	460b      	mov	r3, r1
 8018982:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018984:	2300      	movs	r3, #0
 8018986:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018988:	2300      	movs	r3, #0
 801898a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801898c:	68fb      	ldr	r3, [r7, #12]
 801898e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018992:	7af9      	ldrb	r1, [r7, #11]
 8018994:	683b      	ldr	r3, [r7, #0]
 8018996:	687a      	ldr	r2, [r7, #4]
 8018998:	f7f2 fb7a 	bl	800b090 <HAL_PCD_EP_Transmit>
 801899c:	4603      	mov	r3, r0
 801899e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80189a0:	7dfb      	ldrb	r3, [r7, #23]
 80189a2:	4618      	mov	r0, r3
 80189a4:	f000 f8a2 	bl	8018aec <USBD_Get_USB_Status>
 80189a8:	4603      	mov	r3, r0
 80189aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80189ac:	7dbb      	ldrb	r3, [r7, #22]
}
 80189ae:	4618      	mov	r0, r3
 80189b0:	3718      	adds	r7, #24
 80189b2:	46bd      	mov	sp, r7
 80189b4:	bd80      	pop	{r7, pc}

080189b6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80189b6:	b580      	push	{r7, lr}
 80189b8:	b086      	sub	sp, #24
 80189ba:	af00      	add	r7, sp, #0
 80189bc:	60f8      	str	r0, [r7, #12]
 80189be:	607a      	str	r2, [r7, #4]
 80189c0:	603b      	str	r3, [r7, #0]
 80189c2:	460b      	mov	r3, r1
 80189c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80189c6:	2300      	movs	r3, #0
 80189c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80189ca:	2300      	movs	r3, #0
 80189cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80189ce:	68fb      	ldr	r3, [r7, #12]
 80189d0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80189d4:	7af9      	ldrb	r1, [r7, #11]
 80189d6:	683b      	ldr	r3, [r7, #0]
 80189d8:	687a      	ldr	r2, [r7, #4]
 80189da:	f7f2 faf6 	bl	800afca <HAL_PCD_EP_Receive>
 80189de:	4603      	mov	r3, r0
 80189e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80189e2:	7dfb      	ldrb	r3, [r7, #23]
 80189e4:	4618      	mov	r0, r3
 80189e6:	f000 f881 	bl	8018aec <USBD_Get_USB_Status>
 80189ea:	4603      	mov	r3, r0
 80189ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80189ee:	7dbb      	ldrb	r3, [r7, #22]
}
 80189f0:	4618      	mov	r0, r3
 80189f2:	3718      	adds	r7, #24
 80189f4:	46bd      	mov	sp, r7
 80189f6:	bd80      	pop	{r7, pc}

080189f8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80189f8:	b580      	push	{r7, lr}
 80189fa:	b082      	sub	sp, #8
 80189fc:	af00      	add	r7, sp, #0
 80189fe:	6078      	str	r0, [r7, #4]
 8018a00:	460b      	mov	r3, r1
 8018a02:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018a0a:	78fa      	ldrb	r2, [r7, #3]
 8018a0c:	4611      	mov	r1, r2
 8018a0e:	4618      	mov	r0, r3
 8018a10:	f7f2 fb26 	bl	800b060 <HAL_PCD_EP_GetRxCount>
 8018a14:	4603      	mov	r3, r0
}
 8018a16:	4618      	mov	r0, r3
 8018a18:	3708      	adds	r7, #8
 8018a1a:	46bd      	mov	sp, r7
 8018a1c:	bd80      	pop	{r7, pc}
	...

08018a20 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8018a20:	b580      	push	{r7, lr}
 8018a22:	b082      	sub	sp, #8
 8018a24:	af00      	add	r7, sp, #0
 8018a26:	6078      	str	r0, [r7, #4]
 8018a28:	460b      	mov	r3, r1
 8018a2a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8018a2c:	78fb      	ldrb	r3, [r7, #3]
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	d002      	beq.n	8018a38 <HAL_PCDEx_LPM_Callback+0x18>
 8018a32:	2b01      	cmp	r3, #1
 8018a34:	d01f      	beq.n	8018a76 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8018a36:	e03b      	b.n	8018ab0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	6a1b      	ldr	r3, [r3, #32]
 8018a3c:	2b00      	cmp	r3, #0
 8018a3e:	d007      	beq.n	8018a50 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8018a40:	f7e8 fd66 	bl	8001510 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018a44:	4b1c      	ldr	r3, [pc, #112]	; (8018ab8 <HAL_PCDEx_LPM_Callback+0x98>)
 8018a46:	691b      	ldr	r3, [r3, #16]
 8018a48:	4a1b      	ldr	r2, [pc, #108]	; (8018ab8 <HAL_PCDEx_LPM_Callback+0x98>)
 8018a4a:	f023 0306 	bic.w	r3, r3, #6
 8018a4e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	681b      	ldr	r3, [r3, #0]
 8018a54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018a58:	681b      	ldr	r3, [r3, #0]
 8018a5a:	687a      	ldr	r2, [r7, #4]
 8018a5c:	6812      	ldr	r2, [r2, #0]
 8018a5e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8018a62:	f023 0301 	bic.w	r3, r3, #1
 8018a66:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018a6e:	4618      	mov	r0, r3
 8018a70:	f7fb fb7e 	bl	8014170 <USBD_LL_Resume>
    break;
 8018a74:	e01c      	b.n	8018ab0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018a76:	687b      	ldr	r3, [r7, #4]
 8018a78:	681b      	ldr	r3, [r3, #0]
 8018a7a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018a7e:	681b      	ldr	r3, [r3, #0]
 8018a80:	687a      	ldr	r2, [r7, #4]
 8018a82:	6812      	ldr	r2, [r2, #0]
 8018a84:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8018a88:	f043 0301 	orr.w	r3, r3, #1
 8018a8c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8018a8e:	687b      	ldr	r3, [r7, #4]
 8018a90:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018a94:	4618      	mov	r0, r3
 8018a96:	f7fb fb55 	bl	8014144 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	6a1b      	ldr	r3, [r3, #32]
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	d005      	beq.n	8018aae <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018aa2:	4b05      	ldr	r3, [pc, #20]	; (8018ab8 <HAL_PCDEx_LPM_Callback+0x98>)
 8018aa4:	691b      	ldr	r3, [r3, #16]
 8018aa6:	4a04      	ldr	r2, [pc, #16]	; (8018ab8 <HAL_PCDEx_LPM_Callback+0x98>)
 8018aa8:	f043 0306 	orr.w	r3, r3, #6
 8018aac:	6113      	str	r3, [r2, #16]
    break;
 8018aae:	bf00      	nop
}
 8018ab0:	bf00      	nop
 8018ab2:	3708      	adds	r7, #8
 8018ab4:	46bd      	mov	sp, r7
 8018ab6:	bd80      	pop	{r7, pc}
 8018ab8:	e000ed00 	.word	0xe000ed00

08018abc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018abc:	b480      	push	{r7}
 8018abe:	b083      	sub	sp, #12
 8018ac0:	af00      	add	r7, sp, #0
 8018ac2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018ac4:	4b03      	ldr	r3, [pc, #12]	; (8018ad4 <USBD_static_malloc+0x18>)
}
 8018ac6:	4618      	mov	r0, r3
 8018ac8:	370c      	adds	r7, #12
 8018aca:	46bd      	mov	sp, r7
 8018acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ad0:	4770      	bx	lr
 8018ad2:	bf00      	nop
 8018ad4:	200071a4 	.word	0x200071a4

08018ad8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018ad8:	b480      	push	{r7}
 8018ada:	b083      	sub	sp, #12
 8018adc:	af00      	add	r7, sp, #0
 8018ade:	6078      	str	r0, [r7, #4]

}
 8018ae0:	bf00      	nop
 8018ae2:	370c      	adds	r7, #12
 8018ae4:	46bd      	mov	sp, r7
 8018ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aea:	4770      	bx	lr

08018aec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018aec:	b480      	push	{r7}
 8018aee:	b085      	sub	sp, #20
 8018af0:	af00      	add	r7, sp, #0
 8018af2:	4603      	mov	r3, r0
 8018af4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018af6:	2300      	movs	r3, #0
 8018af8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018afa:	79fb      	ldrb	r3, [r7, #7]
 8018afc:	2b03      	cmp	r3, #3
 8018afe:	d817      	bhi.n	8018b30 <USBD_Get_USB_Status+0x44>
 8018b00:	a201      	add	r2, pc, #4	; (adr r2, 8018b08 <USBD_Get_USB_Status+0x1c>)
 8018b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b06:	bf00      	nop
 8018b08:	08018b19 	.word	0x08018b19
 8018b0c:	08018b1f 	.word	0x08018b1f
 8018b10:	08018b25 	.word	0x08018b25
 8018b14:	08018b2b 	.word	0x08018b2b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018b18:	2300      	movs	r3, #0
 8018b1a:	73fb      	strb	r3, [r7, #15]
    break;
 8018b1c:	e00b      	b.n	8018b36 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018b1e:	2303      	movs	r3, #3
 8018b20:	73fb      	strb	r3, [r7, #15]
    break;
 8018b22:	e008      	b.n	8018b36 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018b24:	2301      	movs	r3, #1
 8018b26:	73fb      	strb	r3, [r7, #15]
    break;
 8018b28:	e005      	b.n	8018b36 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018b2a:	2303      	movs	r3, #3
 8018b2c:	73fb      	strb	r3, [r7, #15]
    break;
 8018b2e:	e002      	b.n	8018b36 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8018b30:	2303      	movs	r3, #3
 8018b32:	73fb      	strb	r3, [r7, #15]
    break;
 8018b34:	bf00      	nop
  }
  return usb_status;
 8018b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8018b38:	4618      	mov	r0, r3
 8018b3a:	3714      	adds	r7, #20
 8018b3c:	46bd      	mov	sp, r7
 8018b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b42:	4770      	bx	lr

08018b44 <__errno>:
 8018b44:	4b01      	ldr	r3, [pc, #4]	; (8018b4c <__errno+0x8>)
 8018b46:	6818      	ldr	r0, [r3, #0]
 8018b48:	4770      	bx	lr
 8018b4a:	bf00      	nop
 8018b4c:	20000134 	.word	0x20000134

08018b50 <__libc_init_array>:
 8018b50:	b570      	push	{r4, r5, r6, lr}
 8018b52:	4d0d      	ldr	r5, [pc, #52]	; (8018b88 <__libc_init_array+0x38>)
 8018b54:	4c0d      	ldr	r4, [pc, #52]	; (8018b8c <__libc_init_array+0x3c>)
 8018b56:	1b64      	subs	r4, r4, r5
 8018b58:	10a4      	asrs	r4, r4, #2
 8018b5a:	2600      	movs	r6, #0
 8018b5c:	42a6      	cmp	r6, r4
 8018b5e:	d109      	bne.n	8018b74 <__libc_init_array+0x24>
 8018b60:	4d0b      	ldr	r5, [pc, #44]	; (8018b90 <__libc_init_array+0x40>)
 8018b62:	4c0c      	ldr	r4, [pc, #48]	; (8018b94 <__libc_init_array+0x44>)
 8018b64:	f000 fc9e 	bl	80194a4 <_init>
 8018b68:	1b64      	subs	r4, r4, r5
 8018b6a:	10a4      	asrs	r4, r4, #2
 8018b6c:	2600      	movs	r6, #0
 8018b6e:	42a6      	cmp	r6, r4
 8018b70:	d105      	bne.n	8018b7e <__libc_init_array+0x2e>
 8018b72:	bd70      	pop	{r4, r5, r6, pc}
 8018b74:	f855 3b04 	ldr.w	r3, [r5], #4
 8018b78:	4798      	blx	r3
 8018b7a:	3601      	adds	r6, #1
 8018b7c:	e7ee      	b.n	8018b5c <__libc_init_array+0xc>
 8018b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8018b82:	4798      	blx	r3
 8018b84:	3601      	adds	r6, #1
 8018b86:	e7f2      	b.n	8018b6e <__libc_init_array+0x1e>
 8018b88:	08019a40 	.word	0x08019a40
 8018b8c:	08019a40 	.word	0x08019a40
 8018b90:	08019a40 	.word	0x08019a40
 8018b94:	08019a44 	.word	0x08019a44

08018b98 <malloc>:
 8018b98:	4b02      	ldr	r3, [pc, #8]	; (8018ba4 <malloc+0xc>)
 8018b9a:	4601      	mov	r1, r0
 8018b9c:	6818      	ldr	r0, [r3, #0]
 8018b9e:	f000 b87f 	b.w	8018ca0 <_malloc_r>
 8018ba2:	bf00      	nop
 8018ba4:	20000134 	.word	0x20000134

08018ba8 <free>:
 8018ba8:	4b02      	ldr	r3, [pc, #8]	; (8018bb4 <free+0xc>)
 8018baa:	4601      	mov	r1, r0
 8018bac:	6818      	ldr	r0, [r3, #0]
 8018bae:	f000 b80b 	b.w	8018bc8 <_free_r>
 8018bb2:	bf00      	nop
 8018bb4:	20000134 	.word	0x20000134

08018bb8 <memset>:
 8018bb8:	4402      	add	r2, r0
 8018bba:	4603      	mov	r3, r0
 8018bbc:	4293      	cmp	r3, r2
 8018bbe:	d100      	bne.n	8018bc2 <memset+0xa>
 8018bc0:	4770      	bx	lr
 8018bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8018bc6:	e7f9      	b.n	8018bbc <memset+0x4>

08018bc8 <_free_r>:
 8018bc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018bca:	2900      	cmp	r1, #0
 8018bcc:	d044      	beq.n	8018c58 <_free_r+0x90>
 8018bce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018bd2:	9001      	str	r0, [sp, #4]
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	f1a1 0404 	sub.w	r4, r1, #4
 8018bda:	bfb8      	it	lt
 8018bdc:	18e4      	addlt	r4, r4, r3
 8018bde:	f000 f903 	bl	8018de8 <__malloc_lock>
 8018be2:	4a1e      	ldr	r2, [pc, #120]	; (8018c5c <_free_r+0x94>)
 8018be4:	9801      	ldr	r0, [sp, #4]
 8018be6:	6813      	ldr	r3, [r2, #0]
 8018be8:	b933      	cbnz	r3, 8018bf8 <_free_r+0x30>
 8018bea:	6063      	str	r3, [r4, #4]
 8018bec:	6014      	str	r4, [r2, #0]
 8018bee:	b003      	add	sp, #12
 8018bf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018bf4:	f000 b8fe 	b.w	8018df4 <__malloc_unlock>
 8018bf8:	42a3      	cmp	r3, r4
 8018bfa:	d908      	bls.n	8018c0e <_free_r+0x46>
 8018bfc:	6825      	ldr	r5, [r4, #0]
 8018bfe:	1961      	adds	r1, r4, r5
 8018c00:	428b      	cmp	r3, r1
 8018c02:	bf01      	itttt	eq
 8018c04:	6819      	ldreq	r1, [r3, #0]
 8018c06:	685b      	ldreq	r3, [r3, #4]
 8018c08:	1949      	addeq	r1, r1, r5
 8018c0a:	6021      	streq	r1, [r4, #0]
 8018c0c:	e7ed      	b.n	8018bea <_free_r+0x22>
 8018c0e:	461a      	mov	r2, r3
 8018c10:	685b      	ldr	r3, [r3, #4]
 8018c12:	b10b      	cbz	r3, 8018c18 <_free_r+0x50>
 8018c14:	42a3      	cmp	r3, r4
 8018c16:	d9fa      	bls.n	8018c0e <_free_r+0x46>
 8018c18:	6811      	ldr	r1, [r2, #0]
 8018c1a:	1855      	adds	r5, r2, r1
 8018c1c:	42a5      	cmp	r5, r4
 8018c1e:	d10b      	bne.n	8018c38 <_free_r+0x70>
 8018c20:	6824      	ldr	r4, [r4, #0]
 8018c22:	4421      	add	r1, r4
 8018c24:	1854      	adds	r4, r2, r1
 8018c26:	42a3      	cmp	r3, r4
 8018c28:	6011      	str	r1, [r2, #0]
 8018c2a:	d1e0      	bne.n	8018bee <_free_r+0x26>
 8018c2c:	681c      	ldr	r4, [r3, #0]
 8018c2e:	685b      	ldr	r3, [r3, #4]
 8018c30:	6053      	str	r3, [r2, #4]
 8018c32:	4421      	add	r1, r4
 8018c34:	6011      	str	r1, [r2, #0]
 8018c36:	e7da      	b.n	8018bee <_free_r+0x26>
 8018c38:	d902      	bls.n	8018c40 <_free_r+0x78>
 8018c3a:	230c      	movs	r3, #12
 8018c3c:	6003      	str	r3, [r0, #0]
 8018c3e:	e7d6      	b.n	8018bee <_free_r+0x26>
 8018c40:	6825      	ldr	r5, [r4, #0]
 8018c42:	1961      	adds	r1, r4, r5
 8018c44:	428b      	cmp	r3, r1
 8018c46:	bf04      	itt	eq
 8018c48:	6819      	ldreq	r1, [r3, #0]
 8018c4a:	685b      	ldreq	r3, [r3, #4]
 8018c4c:	6063      	str	r3, [r4, #4]
 8018c4e:	bf04      	itt	eq
 8018c50:	1949      	addeq	r1, r1, r5
 8018c52:	6021      	streq	r1, [r4, #0]
 8018c54:	6054      	str	r4, [r2, #4]
 8018c56:	e7ca      	b.n	8018bee <_free_r+0x26>
 8018c58:	b003      	add	sp, #12
 8018c5a:	bd30      	pop	{r4, r5, pc}
 8018c5c:	2000741c 	.word	0x2000741c

08018c60 <sbrk_aligned>:
 8018c60:	b570      	push	{r4, r5, r6, lr}
 8018c62:	4e0e      	ldr	r6, [pc, #56]	; (8018c9c <sbrk_aligned+0x3c>)
 8018c64:	460c      	mov	r4, r1
 8018c66:	6831      	ldr	r1, [r6, #0]
 8018c68:	4605      	mov	r5, r0
 8018c6a:	b911      	cbnz	r1, 8018c72 <sbrk_aligned+0x12>
 8018c6c:	f000 f88c 	bl	8018d88 <_sbrk_r>
 8018c70:	6030      	str	r0, [r6, #0]
 8018c72:	4621      	mov	r1, r4
 8018c74:	4628      	mov	r0, r5
 8018c76:	f000 f887 	bl	8018d88 <_sbrk_r>
 8018c7a:	1c43      	adds	r3, r0, #1
 8018c7c:	d00a      	beq.n	8018c94 <sbrk_aligned+0x34>
 8018c7e:	1cc4      	adds	r4, r0, #3
 8018c80:	f024 0403 	bic.w	r4, r4, #3
 8018c84:	42a0      	cmp	r0, r4
 8018c86:	d007      	beq.n	8018c98 <sbrk_aligned+0x38>
 8018c88:	1a21      	subs	r1, r4, r0
 8018c8a:	4628      	mov	r0, r5
 8018c8c:	f000 f87c 	bl	8018d88 <_sbrk_r>
 8018c90:	3001      	adds	r0, #1
 8018c92:	d101      	bne.n	8018c98 <sbrk_aligned+0x38>
 8018c94:	f04f 34ff 	mov.w	r4, #4294967295
 8018c98:	4620      	mov	r0, r4
 8018c9a:	bd70      	pop	{r4, r5, r6, pc}
 8018c9c:	20007420 	.word	0x20007420

08018ca0 <_malloc_r>:
 8018ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ca4:	1ccd      	adds	r5, r1, #3
 8018ca6:	f025 0503 	bic.w	r5, r5, #3
 8018caa:	3508      	adds	r5, #8
 8018cac:	2d0c      	cmp	r5, #12
 8018cae:	bf38      	it	cc
 8018cb0:	250c      	movcc	r5, #12
 8018cb2:	2d00      	cmp	r5, #0
 8018cb4:	4607      	mov	r7, r0
 8018cb6:	db01      	blt.n	8018cbc <_malloc_r+0x1c>
 8018cb8:	42a9      	cmp	r1, r5
 8018cba:	d905      	bls.n	8018cc8 <_malloc_r+0x28>
 8018cbc:	230c      	movs	r3, #12
 8018cbe:	603b      	str	r3, [r7, #0]
 8018cc0:	2600      	movs	r6, #0
 8018cc2:	4630      	mov	r0, r6
 8018cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018cc8:	4e2e      	ldr	r6, [pc, #184]	; (8018d84 <_malloc_r+0xe4>)
 8018cca:	f000 f88d 	bl	8018de8 <__malloc_lock>
 8018cce:	6833      	ldr	r3, [r6, #0]
 8018cd0:	461c      	mov	r4, r3
 8018cd2:	bb34      	cbnz	r4, 8018d22 <_malloc_r+0x82>
 8018cd4:	4629      	mov	r1, r5
 8018cd6:	4638      	mov	r0, r7
 8018cd8:	f7ff ffc2 	bl	8018c60 <sbrk_aligned>
 8018cdc:	1c43      	adds	r3, r0, #1
 8018cde:	4604      	mov	r4, r0
 8018ce0:	d14d      	bne.n	8018d7e <_malloc_r+0xde>
 8018ce2:	6834      	ldr	r4, [r6, #0]
 8018ce4:	4626      	mov	r6, r4
 8018ce6:	2e00      	cmp	r6, #0
 8018ce8:	d140      	bne.n	8018d6c <_malloc_r+0xcc>
 8018cea:	6823      	ldr	r3, [r4, #0]
 8018cec:	4631      	mov	r1, r6
 8018cee:	4638      	mov	r0, r7
 8018cf0:	eb04 0803 	add.w	r8, r4, r3
 8018cf4:	f000 f848 	bl	8018d88 <_sbrk_r>
 8018cf8:	4580      	cmp	r8, r0
 8018cfa:	d13a      	bne.n	8018d72 <_malloc_r+0xd2>
 8018cfc:	6821      	ldr	r1, [r4, #0]
 8018cfe:	3503      	adds	r5, #3
 8018d00:	1a6d      	subs	r5, r5, r1
 8018d02:	f025 0503 	bic.w	r5, r5, #3
 8018d06:	3508      	adds	r5, #8
 8018d08:	2d0c      	cmp	r5, #12
 8018d0a:	bf38      	it	cc
 8018d0c:	250c      	movcc	r5, #12
 8018d0e:	4629      	mov	r1, r5
 8018d10:	4638      	mov	r0, r7
 8018d12:	f7ff ffa5 	bl	8018c60 <sbrk_aligned>
 8018d16:	3001      	adds	r0, #1
 8018d18:	d02b      	beq.n	8018d72 <_malloc_r+0xd2>
 8018d1a:	6823      	ldr	r3, [r4, #0]
 8018d1c:	442b      	add	r3, r5
 8018d1e:	6023      	str	r3, [r4, #0]
 8018d20:	e00e      	b.n	8018d40 <_malloc_r+0xa0>
 8018d22:	6822      	ldr	r2, [r4, #0]
 8018d24:	1b52      	subs	r2, r2, r5
 8018d26:	d41e      	bmi.n	8018d66 <_malloc_r+0xc6>
 8018d28:	2a0b      	cmp	r2, #11
 8018d2a:	d916      	bls.n	8018d5a <_malloc_r+0xba>
 8018d2c:	1961      	adds	r1, r4, r5
 8018d2e:	42a3      	cmp	r3, r4
 8018d30:	6025      	str	r5, [r4, #0]
 8018d32:	bf18      	it	ne
 8018d34:	6059      	strne	r1, [r3, #4]
 8018d36:	6863      	ldr	r3, [r4, #4]
 8018d38:	bf08      	it	eq
 8018d3a:	6031      	streq	r1, [r6, #0]
 8018d3c:	5162      	str	r2, [r4, r5]
 8018d3e:	604b      	str	r3, [r1, #4]
 8018d40:	4638      	mov	r0, r7
 8018d42:	f104 060b 	add.w	r6, r4, #11
 8018d46:	f000 f855 	bl	8018df4 <__malloc_unlock>
 8018d4a:	f026 0607 	bic.w	r6, r6, #7
 8018d4e:	1d23      	adds	r3, r4, #4
 8018d50:	1af2      	subs	r2, r6, r3
 8018d52:	d0b6      	beq.n	8018cc2 <_malloc_r+0x22>
 8018d54:	1b9b      	subs	r3, r3, r6
 8018d56:	50a3      	str	r3, [r4, r2]
 8018d58:	e7b3      	b.n	8018cc2 <_malloc_r+0x22>
 8018d5a:	6862      	ldr	r2, [r4, #4]
 8018d5c:	42a3      	cmp	r3, r4
 8018d5e:	bf0c      	ite	eq
 8018d60:	6032      	streq	r2, [r6, #0]
 8018d62:	605a      	strne	r2, [r3, #4]
 8018d64:	e7ec      	b.n	8018d40 <_malloc_r+0xa0>
 8018d66:	4623      	mov	r3, r4
 8018d68:	6864      	ldr	r4, [r4, #4]
 8018d6a:	e7b2      	b.n	8018cd2 <_malloc_r+0x32>
 8018d6c:	4634      	mov	r4, r6
 8018d6e:	6876      	ldr	r6, [r6, #4]
 8018d70:	e7b9      	b.n	8018ce6 <_malloc_r+0x46>
 8018d72:	230c      	movs	r3, #12
 8018d74:	603b      	str	r3, [r7, #0]
 8018d76:	4638      	mov	r0, r7
 8018d78:	f000 f83c 	bl	8018df4 <__malloc_unlock>
 8018d7c:	e7a1      	b.n	8018cc2 <_malloc_r+0x22>
 8018d7e:	6025      	str	r5, [r4, #0]
 8018d80:	e7de      	b.n	8018d40 <_malloc_r+0xa0>
 8018d82:	bf00      	nop
 8018d84:	2000741c 	.word	0x2000741c

08018d88 <_sbrk_r>:
 8018d88:	b538      	push	{r3, r4, r5, lr}
 8018d8a:	4d06      	ldr	r5, [pc, #24]	; (8018da4 <_sbrk_r+0x1c>)
 8018d8c:	2300      	movs	r3, #0
 8018d8e:	4604      	mov	r4, r0
 8018d90:	4608      	mov	r0, r1
 8018d92:	602b      	str	r3, [r5, #0]
 8018d94:	f7ed fffa 	bl	8006d8c <_sbrk>
 8018d98:	1c43      	adds	r3, r0, #1
 8018d9a:	d102      	bne.n	8018da2 <_sbrk_r+0x1a>
 8018d9c:	682b      	ldr	r3, [r5, #0]
 8018d9e:	b103      	cbz	r3, 8018da2 <_sbrk_r+0x1a>
 8018da0:	6023      	str	r3, [r4, #0]
 8018da2:	bd38      	pop	{r3, r4, r5, pc}
 8018da4:	20007424 	.word	0x20007424

08018da8 <siprintf>:
 8018da8:	b40e      	push	{r1, r2, r3}
 8018daa:	b500      	push	{lr}
 8018dac:	b09c      	sub	sp, #112	; 0x70
 8018dae:	ab1d      	add	r3, sp, #116	; 0x74
 8018db0:	9002      	str	r0, [sp, #8]
 8018db2:	9006      	str	r0, [sp, #24]
 8018db4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018db8:	4809      	ldr	r0, [pc, #36]	; (8018de0 <siprintf+0x38>)
 8018dba:	9107      	str	r1, [sp, #28]
 8018dbc:	9104      	str	r1, [sp, #16]
 8018dbe:	4909      	ldr	r1, [pc, #36]	; (8018de4 <siprintf+0x3c>)
 8018dc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8018dc4:	9105      	str	r1, [sp, #20]
 8018dc6:	6800      	ldr	r0, [r0, #0]
 8018dc8:	9301      	str	r3, [sp, #4]
 8018dca:	a902      	add	r1, sp, #8
 8018dcc:	f000 f874 	bl	8018eb8 <_svfiprintf_r>
 8018dd0:	9b02      	ldr	r3, [sp, #8]
 8018dd2:	2200      	movs	r2, #0
 8018dd4:	701a      	strb	r2, [r3, #0]
 8018dd6:	b01c      	add	sp, #112	; 0x70
 8018dd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8018ddc:	b003      	add	sp, #12
 8018dde:	4770      	bx	lr
 8018de0:	20000134 	.word	0x20000134
 8018de4:	ffff0208 	.word	0xffff0208

08018de8 <__malloc_lock>:
 8018de8:	4801      	ldr	r0, [pc, #4]	; (8018df0 <__malloc_lock+0x8>)
 8018dea:	f000 baf9 	b.w	80193e0 <__retarget_lock_acquire_recursive>
 8018dee:	bf00      	nop
 8018df0:	20007428 	.word	0x20007428

08018df4 <__malloc_unlock>:
 8018df4:	4801      	ldr	r0, [pc, #4]	; (8018dfc <__malloc_unlock+0x8>)
 8018df6:	f000 baf4 	b.w	80193e2 <__retarget_lock_release_recursive>
 8018dfa:	bf00      	nop
 8018dfc:	20007428 	.word	0x20007428

08018e00 <__ssputs_r>:
 8018e00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018e04:	688e      	ldr	r6, [r1, #8]
 8018e06:	429e      	cmp	r6, r3
 8018e08:	4682      	mov	sl, r0
 8018e0a:	460c      	mov	r4, r1
 8018e0c:	4690      	mov	r8, r2
 8018e0e:	461f      	mov	r7, r3
 8018e10:	d838      	bhi.n	8018e84 <__ssputs_r+0x84>
 8018e12:	898a      	ldrh	r2, [r1, #12]
 8018e14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018e18:	d032      	beq.n	8018e80 <__ssputs_r+0x80>
 8018e1a:	6825      	ldr	r5, [r4, #0]
 8018e1c:	6909      	ldr	r1, [r1, #16]
 8018e1e:	eba5 0901 	sub.w	r9, r5, r1
 8018e22:	6965      	ldr	r5, [r4, #20]
 8018e24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018e28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018e2c:	3301      	adds	r3, #1
 8018e2e:	444b      	add	r3, r9
 8018e30:	106d      	asrs	r5, r5, #1
 8018e32:	429d      	cmp	r5, r3
 8018e34:	bf38      	it	cc
 8018e36:	461d      	movcc	r5, r3
 8018e38:	0553      	lsls	r3, r2, #21
 8018e3a:	d531      	bpl.n	8018ea0 <__ssputs_r+0xa0>
 8018e3c:	4629      	mov	r1, r5
 8018e3e:	f7ff ff2f 	bl	8018ca0 <_malloc_r>
 8018e42:	4606      	mov	r6, r0
 8018e44:	b950      	cbnz	r0, 8018e5c <__ssputs_r+0x5c>
 8018e46:	230c      	movs	r3, #12
 8018e48:	f8ca 3000 	str.w	r3, [sl]
 8018e4c:	89a3      	ldrh	r3, [r4, #12]
 8018e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018e52:	81a3      	strh	r3, [r4, #12]
 8018e54:	f04f 30ff 	mov.w	r0, #4294967295
 8018e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e5c:	6921      	ldr	r1, [r4, #16]
 8018e5e:	464a      	mov	r2, r9
 8018e60:	f000 fac0 	bl	80193e4 <memcpy>
 8018e64:	89a3      	ldrh	r3, [r4, #12]
 8018e66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018e6e:	81a3      	strh	r3, [r4, #12]
 8018e70:	6126      	str	r6, [r4, #16]
 8018e72:	6165      	str	r5, [r4, #20]
 8018e74:	444e      	add	r6, r9
 8018e76:	eba5 0509 	sub.w	r5, r5, r9
 8018e7a:	6026      	str	r6, [r4, #0]
 8018e7c:	60a5      	str	r5, [r4, #8]
 8018e7e:	463e      	mov	r6, r7
 8018e80:	42be      	cmp	r6, r7
 8018e82:	d900      	bls.n	8018e86 <__ssputs_r+0x86>
 8018e84:	463e      	mov	r6, r7
 8018e86:	6820      	ldr	r0, [r4, #0]
 8018e88:	4632      	mov	r2, r6
 8018e8a:	4641      	mov	r1, r8
 8018e8c:	f000 fab8 	bl	8019400 <memmove>
 8018e90:	68a3      	ldr	r3, [r4, #8]
 8018e92:	1b9b      	subs	r3, r3, r6
 8018e94:	60a3      	str	r3, [r4, #8]
 8018e96:	6823      	ldr	r3, [r4, #0]
 8018e98:	4433      	add	r3, r6
 8018e9a:	6023      	str	r3, [r4, #0]
 8018e9c:	2000      	movs	r0, #0
 8018e9e:	e7db      	b.n	8018e58 <__ssputs_r+0x58>
 8018ea0:	462a      	mov	r2, r5
 8018ea2:	f000 fac7 	bl	8019434 <_realloc_r>
 8018ea6:	4606      	mov	r6, r0
 8018ea8:	2800      	cmp	r0, #0
 8018eaa:	d1e1      	bne.n	8018e70 <__ssputs_r+0x70>
 8018eac:	6921      	ldr	r1, [r4, #16]
 8018eae:	4650      	mov	r0, sl
 8018eb0:	f7ff fe8a 	bl	8018bc8 <_free_r>
 8018eb4:	e7c7      	b.n	8018e46 <__ssputs_r+0x46>
	...

08018eb8 <_svfiprintf_r>:
 8018eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ebc:	4698      	mov	r8, r3
 8018ebe:	898b      	ldrh	r3, [r1, #12]
 8018ec0:	061b      	lsls	r3, r3, #24
 8018ec2:	b09d      	sub	sp, #116	; 0x74
 8018ec4:	4607      	mov	r7, r0
 8018ec6:	460d      	mov	r5, r1
 8018ec8:	4614      	mov	r4, r2
 8018eca:	d50e      	bpl.n	8018eea <_svfiprintf_r+0x32>
 8018ecc:	690b      	ldr	r3, [r1, #16]
 8018ece:	b963      	cbnz	r3, 8018eea <_svfiprintf_r+0x32>
 8018ed0:	2140      	movs	r1, #64	; 0x40
 8018ed2:	f7ff fee5 	bl	8018ca0 <_malloc_r>
 8018ed6:	6028      	str	r0, [r5, #0]
 8018ed8:	6128      	str	r0, [r5, #16]
 8018eda:	b920      	cbnz	r0, 8018ee6 <_svfiprintf_r+0x2e>
 8018edc:	230c      	movs	r3, #12
 8018ede:	603b      	str	r3, [r7, #0]
 8018ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8018ee4:	e0d1      	b.n	801908a <_svfiprintf_r+0x1d2>
 8018ee6:	2340      	movs	r3, #64	; 0x40
 8018ee8:	616b      	str	r3, [r5, #20]
 8018eea:	2300      	movs	r3, #0
 8018eec:	9309      	str	r3, [sp, #36]	; 0x24
 8018eee:	2320      	movs	r3, #32
 8018ef0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018ef4:	f8cd 800c 	str.w	r8, [sp, #12]
 8018ef8:	2330      	movs	r3, #48	; 0x30
 8018efa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80190a4 <_svfiprintf_r+0x1ec>
 8018efe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018f02:	f04f 0901 	mov.w	r9, #1
 8018f06:	4623      	mov	r3, r4
 8018f08:	469a      	mov	sl, r3
 8018f0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018f0e:	b10a      	cbz	r2, 8018f14 <_svfiprintf_r+0x5c>
 8018f10:	2a25      	cmp	r2, #37	; 0x25
 8018f12:	d1f9      	bne.n	8018f08 <_svfiprintf_r+0x50>
 8018f14:	ebba 0b04 	subs.w	fp, sl, r4
 8018f18:	d00b      	beq.n	8018f32 <_svfiprintf_r+0x7a>
 8018f1a:	465b      	mov	r3, fp
 8018f1c:	4622      	mov	r2, r4
 8018f1e:	4629      	mov	r1, r5
 8018f20:	4638      	mov	r0, r7
 8018f22:	f7ff ff6d 	bl	8018e00 <__ssputs_r>
 8018f26:	3001      	adds	r0, #1
 8018f28:	f000 80aa 	beq.w	8019080 <_svfiprintf_r+0x1c8>
 8018f2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018f2e:	445a      	add	r2, fp
 8018f30:	9209      	str	r2, [sp, #36]	; 0x24
 8018f32:	f89a 3000 	ldrb.w	r3, [sl]
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	f000 80a2 	beq.w	8019080 <_svfiprintf_r+0x1c8>
 8018f3c:	2300      	movs	r3, #0
 8018f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8018f42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018f46:	f10a 0a01 	add.w	sl, sl, #1
 8018f4a:	9304      	str	r3, [sp, #16]
 8018f4c:	9307      	str	r3, [sp, #28]
 8018f4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018f52:	931a      	str	r3, [sp, #104]	; 0x68
 8018f54:	4654      	mov	r4, sl
 8018f56:	2205      	movs	r2, #5
 8018f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018f5c:	4851      	ldr	r0, [pc, #324]	; (80190a4 <_svfiprintf_r+0x1ec>)
 8018f5e:	f7e7 f957 	bl	8000210 <memchr>
 8018f62:	9a04      	ldr	r2, [sp, #16]
 8018f64:	b9d8      	cbnz	r0, 8018f9e <_svfiprintf_r+0xe6>
 8018f66:	06d0      	lsls	r0, r2, #27
 8018f68:	bf44      	itt	mi
 8018f6a:	2320      	movmi	r3, #32
 8018f6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018f70:	0711      	lsls	r1, r2, #28
 8018f72:	bf44      	itt	mi
 8018f74:	232b      	movmi	r3, #43	; 0x2b
 8018f76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018f7a:	f89a 3000 	ldrb.w	r3, [sl]
 8018f7e:	2b2a      	cmp	r3, #42	; 0x2a
 8018f80:	d015      	beq.n	8018fae <_svfiprintf_r+0xf6>
 8018f82:	9a07      	ldr	r2, [sp, #28]
 8018f84:	4654      	mov	r4, sl
 8018f86:	2000      	movs	r0, #0
 8018f88:	f04f 0c0a 	mov.w	ip, #10
 8018f8c:	4621      	mov	r1, r4
 8018f8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018f92:	3b30      	subs	r3, #48	; 0x30
 8018f94:	2b09      	cmp	r3, #9
 8018f96:	d94e      	bls.n	8019036 <_svfiprintf_r+0x17e>
 8018f98:	b1b0      	cbz	r0, 8018fc8 <_svfiprintf_r+0x110>
 8018f9a:	9207      	str	r2, [sp, #28]
 8018f9c:	e014      	b.n	8018fc8 <_svfiprintf_r+0x110>
 8018f9e:	eba0 0308 	sub.w	r3, r0, r8
 8018fa2:	fa09 f303 	lsl.w	r3, r9, r3
 8018fa6:	4313      	orrs	r3, r2
 8018fa8:	9304      	str	r3, [sp, #16]
 8018faa:	46a2      	mov	sl, r4
 8018fac:	e7d2      	b.n	8018f54 <_svfiprintf_r+0x9c>
 8018fae:	9b03      	ldr	r3, [sp, #12]
 8018fb0:	1d19      	adds	r1, r3, #4
 8018fb2:	681b      	ldr	r3, [r3, #0]
 8018fb4:	9103      	str	r1, [sp, #12]
 8018fb6:	2b00      	cmp	r3, #0
 8018fb8:	bfbb      	ittet	lt
 8018fba:	425b      	neglt	r3, r3
 8018fbc:	f042 0202 	orrlt.w	r2, r2, #2
 8018fc0:	9307      	strge	r3, [sp, #28]
 8018fc2:	9307      	strlt	r3, [sp, #28]
 8018fc4:	bfb8      	it	lt
 8018fc6:	9204      	strlt	r2, [sp, #16]
 8018fc8:	7823      	ldrb	r3, [r4, #0]
 8018fca:	2b2e      	cmp	r3, #46	; 0x2e
 8018fcc:	d10c      	bne.n	8018fe8 <_svfiprintf_r+0x130>
 8018fce:	7863      	ldrb	r3, [r4, #1]
 8018fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8018fd2:	d135      	bne.n	8019040 <_svfiprintf_r+0x188>
 8018fd4:	9b03      	ldr	r3, [sp, #12]
 8018fd6:	1d1a      	adds	r2, r3, #4
 8018fd8:	681b      	ldr	r3, [r3, #0]
 8018fda:	9203      	str	r2, [sp, #12]
 8018fdc:	2b00      	cmp	r3, #0
 8018fde:	bfb8      	it	lt
 8018fe0:	f04f 33ff 	movlt.w	r3, #4294967295
 8018fe4:	3402      	adds	r4, #2
 8018fe6:	9305      	str	r3, [sp, #20]
 8018fe8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80190b4 <_svfiprintf_r+0x1fc>
 8018fec:	7821      	ldrb	r1, [r4, #0]
 8018fee:	2203      	movs	r2, #3
 8018ff0:	4650      	mov	r0, sl
 8018ff2:	f7e7 f90d 	bl	8000210 <memchr>
 8018ff6:	b140      	cbz	r0, 801900a <_svfiprintf_r+0x152>
 8018ff8:	2340      	movs	r3, #64	; 0x40
 8018ffa:	eba0 000a 	sub.w	r0, r0, sl
 8018ffe:	fa03 f000 	lsl.w	r0, r3, r0
 8019002:	9b04      	ldr	r3, [sp, #16]
 8019004:	4303      	orrs	r3, r0
 8019006:	3401      	adds	r4, #1
 8019008:	9304      	str	r3, [sp, #16]
 801900a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801900e:	4826      	ldr	r0, [pc, #152]	; (80190a8 <_svfiprintf_r+0x1f0>)
 8019010:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019014:	2206      	movs	r2, #6
 8019016:	f7e7 f8fb 	bl	8000210 <memchr>
 801901a:	2800      	cmp	r0, #0
 801901c:	d038      	beq.n	8019090 <_svfiprintf_r+0x1d8>
 801901e:	4b23      	ldr	r3, [pc, #140]	; (80190ac <_svfiprintf_r+0x1f4>)
 8019020:	bb1b      	cbnz	r3, 801906a <_svfiprintf_r+0x1b2>
 8019022:	9b03      	ldr	r3, [sp, #12]
 8019024:	3307      	adds	r3, #7
 8019026:	f023 0307 	bic.w	r3, r3, #7
 801902a:	3308      	adds	r3, #8
 801902c:	9303      	str	r3, [sp, #12]
 801902e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019030:	4433      	add	r3, r6
 8019032:	9309      	str	r3, [sp, #36]	; 0x24
 8019034:	e767      	b.n	8018f06 <_svfiprintf_r+0x4e>
 8019036:	fb0c 3202 	mla	r2, ip, r2, r3
 801903a:	460c      	mov	r4, r1
 801903c:	2001      	movs	r0, #1
 801903e:	e7a5      	b.n	8018f8c <_svfiprintf_r+0xd4>
 8019040:	2300      	movs	r3, #0
 8019042:	3401      	adds	r4, #1
 8019044:	9305      	str	r3, [sp, #20]
 8019046:	4619      	mov	r1, r3
 8019048:	f04f 0c0a 	mov.w	ip, #10
 801904c:	4620      	mov	r0, r4
 801904e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019052:	3a30      	subs	r2, #48	; 0x30
 8019054:	2a09      	cmp	r2, #9
 8019056:	d903      	bls.n	8019060 <_svfiprintf_r+0x1a8>
 8019058:	2b00      	cmp	r3, #0
 801905a:	d0c5      	beq.n	8018fe8 <_svfiprintf_r+0x130>
 801905c:	9105      	str	r1, [sp, #20]
 801905e:	e7c3      	b.n	8018fe8 <_svfiprintf_r+0x130>
 8019060:	fb0c 2101 	mla	r1, ip, r1, r2
 8019064:	4604      	mov	r4, r0
 8019066:	2301      	movs	r3, #1
 8019068:	e7f0      	b.n	801904c <_svfiprintf_r+0x194>
 801906a:	ab03      	add	r3, sp, #12
 801906c:	9300      	str	r3, [sp, #0]
 801906e:	462a      	mov	r2, r5
 8019070:	4b0f      	ldr	r3, [pc, #60]	; (80190b0 <_svfiprintf_r+0x1f8>)
 8019072:	a904      	add	r1, sp, #16
 8019074:	4638      	mov	r0, r7
 8019076:	f3af 8000 	nop.w
 801907a:	1c42      	adds	r2, r0, #1
 801907c:	4606      	mov	r6, r0
 801907e:	d1d6      	bne.n	801902e <_svfiprintf_r+0x176>
 8019080:	89ab      	ldrh	r3, [r5, #12]
 8019082:	065b      	lsls	r3, r3, #25
 8019084:	f53f af2c 	bmi.w	8018ee0 <_svfiprintf_r+0x28>
 8019088:	9809      	ldr	r0, [sp, #36]	; 0x24
 801908a:	b01d      	add	sp, #116	; 0x74
 801908c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019090:	ab03      	add	r3, sp, #12
 8019092:	9300      	str	r3, [sp, #0]
 8019094:	462a      	mov	r2, r5
 8019096:	4b06      	ldr	r3, [pc, #24]	; (80190b0 <_svfiprintf_r+0x1f8>)
 8019098:	a904      	add	r1, sp, #16
 801909a:	4638      	mov	r0, r7
 801909c:	f000 f87a 	bl	8019194 <_printf_i>
 80190a0:	e7eb      	b.n	801907a <_svfiprintf_r+0x1c2>
 80190a2:	bf00      	nop
 80190a4:	08019a04 	.word	0x08019a04
 80190a8:	08019a0e 	.word	0x08019a0e
 80190ac:	00000000 	.word	0x00000000
 80190b0:	08018e01 	.word	0x08018e01
 80190b4:	08019a0a 	.word	0x08019a0a

080190b8 <_printf_common>:
 80190b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80190bc:	4616      	mov	r6, r2
 80190be:	4699      	mov	r9, r3
 80190c0:	688a      	ldr	r2, [r1, #8]
 80190c2:	690b      	ldr	r3, [r1, #16]
 80190c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80190c8:	4293      	cmp	r3, r2
 80190ca:	bfb8      	it	lt
 80190cc:	4613      	movlt	r3, r2
 80190ce:	6033      	str	r3, [r6, #0]
 80190d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80190d4:	4607      	mov	r7, r0
 80190d6:	460c      	mov	r4, r1
 80190d8:	b10a      	cbz	r2, 80190de <_printf_common+0x26>
 80190da:	3301      	adds	r3, #1
 80190dc:	6033      	str	r3, [r6, #0]
 80190de:	6823      	ldr	r3, [r4, #0]
 80190e0:	0699      	lsls	r1, r3, #26
 80190e2:	bf42      	ittt	mi
 80190e4:	6833      	ldrmi	r3, [r6, #0]
 80190e6:	3302      	addmi	r3, #2
 80190e8:	6033      	strmi	r3, [r6, #0]
 80190ea:	6825      	ldr	r5, [r4, #0]
 80190ec:	f015 0506 	ands.w	r5, r5, #6
 80190f0:	d106      	bne.n	8019100 <_printf_common+0x48>
 80190f2:	f104 0a19 	add.w	sl, r4, #25
 80190f6:	68e3      	ldr	r3, [r4, #12]
 80190f8:	6832      	ldr	r2, [r6, #0]
 80190fa:	1a9b      	subs	r3, r3, r2
 80190fc:	42ab      	cmp	r3, r5
 80190fe:	dc26      	bgt.n	801914e <_printf_common+0x96>
 8019100:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019104:	1e13      	subs	r3, r2, #0
 8019106:	6822      	ldr	r2, [r4, #0]
 8019108:	bf18      	it	ne
 801910a:	2301      	movne	r3, #1
 801910c:	0692      	lsls	r2, r2, #26
 801910e:	d42b      	bmi.n	8019168 <_printf_common+0xb0>
 8019110:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019114:	4649      	mov	r1, r9
 8019116:	4638      	mov	r0, r7
 8019118:	47c0      	blx	r8
 801911a:	3001      	adds	r0, #1
 801911c:	d01e      	beq.n	801915c <_printf_common+0xa4>
 801911e:	6823      	ldr	r3, [r4, #0]
 8019120:	68e5      	ldr	r5, [r4, #12]
 8019122:	6832      	ldr	r2, [r6, #0]
 8019124:	f003 0306 	and.w	r3, r3, #6
 8019128:	2b04      	cmp	r3, #4
 801912a:	bf08      	it	eq
 801912c:	1aad      	subeq	r5, r5, r2
 801912e:	68a3      	ldr	r3, [r4, #8]
 8019130:	6922      	ldr	r2, [r4, #16]
 8019132:	bf0c      	ite	eq
 8019134:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019138:	2500      	movne	r5, #0
 801913a:	4293      	cmp	r3, r2
 801913c:	bfc4      	itt	gt
 801913e:	1a9b      	subgt	r3, r3, r2
 8019140:	18ed      	addgt	r5, r5, r3
 8019142:	2600      	movs	r6, #0
 8019144:	341a      	adds	r4, #26
 8019146:	42b5      	cmp	r5, r6
 8019148:	d11a      	bne.n	8019180 <_printf_common+0xc8>
 801914a:	2000      	movs	r0, #0
 801914c:	e008      	b.n	8019160 <_printf_common+0xa8>
 801914e:	2301      	movs	r3, #1
 8019150:	4652      	mov	r2, sl
 8019152:	4649      	mov	r1, r9
 8019154:	4638      	mov	r0, r7
 8019156:	47c0      	blx	r8
 8019158:	3001      	adds	r0, #1
 801915a:	d103      	bne.n	8019164 <_printf_common+0xac>
 801915c:	f04f 30ff 	mov.w	r0, #4294967295
 8019160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019164:	3501      	adds	r5, #1
 8019166:	e7c6      	b.n	80190f6 <_printf_common+0x3e>
 8019168:	18e1      	adds	r1, r4, r3
 801916a:	1c5a      	adds	r2, r3, #1
 801916c:	2030      	movs	r0, #48	; 0x30
 801916e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019172:	4422      	add	r2, r4
 8019174:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019178:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801917c:	3302      	adds	r3, #2
 801917e:	e7c7      	b.n	8019110 <_printf_common+0x58>
 8019180:	2301      	movs	r3, #1
 8019182:	4622      	mov	r2, r4
 8019184:	4649      	mov	r1, r9
 8019186:	4638      	mov	r0, r7
 8019188:	47c0      	blx	r8
 801918a:	3001      	adds	r0, #1
 801918c:	d0e6      	beq.n	801915c <_printf_common+0xa4>
 801918e:	3601      	adds	r6, #1
 8019190:	e7d9      	b.n	8019146 <_printf_common+0x8e>
	...

08019194 <_printf_i>:
 8019194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019198:	7e0f      	ldrb	r7, [r1, #24]
 801919a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801919c:	2f78      	cmp	r7, #120	; 0x78
 801919e:	4691      	mov	r9, r2
 80191a0:	4680      	mov	r8, r0
 80191a2:	460c      	mov	r4, r1
 80191a4:	469a      	mov	sl, r3
 80191a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80191aa:	d807      	bhi.n	80191bc <_printf_i+0x28>
 80191ac:	2f62      	cmp	r7, #98	; 0x62
 80191ae:	d80a      	bhi.n	80191c6 <_printf_i+0x32>
 80191b0:	2f00      	cmp	r7, #0
 80191b2:	f000 80d8 	beq.w	8019366 <_printf_i+0x1d2>
 80191b6:	2f58      	cmp	r7, #88	; 0x58
 80191b8:	f000 80a3 	beq.w	8019302 <_printf_i+0x16e>
 80191bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80191c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80191c4:	e03a      	b.n	801923c <_printf_i+0xa8>
 80191c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80191ca:	2b15      	cmp	r3, #21
 80191cc:	d8f6      	bhi.n	80191bc <_printf_i+0x28>
 80191ce:	a101      	add	r1, pc, #4	; (adr r1, 80191d4 <_printf_i+0x40>)
 80191d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80191d4:	0801922d 	.word	0x0801922d
 80191d8:	08019241 	.word	0x08019241
 80191dc:	080191bd 	.word	0x080191bd
 80191e0:	080191bd 	.word	0x080191bd
 80191e4:	080191bd 	.word	0x080191bd
 80191e8:	080191bd 	.word	0x080191bd
 80191ec:	08019241 	.word	0x08019241
 80191f0:	080191bd 	.word	0x080191bd
 80191f4:	080191bd 	.word	0x080191bd
 80191f8:	080191bd 	.word	0x080191bd
 80191fc:	080191bd 	.word	0x080191bd
 8019200:	0801934d 	.word	0x0801934d
 8019204:	08019271 	.word	0x08019271
 8019208:	0801932f 	.word	0x0801932f
 801920c:	080191bd 	.word	0x080191bd
 8019210:	080191bd 	.word	0x080191bd
 8019214:	0801936f 	.word	0x0801936f
 8019218:	080191bd 	.word	0x080191bd
 801921c:	08019271 	.word	0x08019271
 8019220:	080191bd 	.word	0x080191bd
 8019224:	080191bd 	.word	0x080191bd
 8019228:	08019337 	.word	0x08019337
 801922c:	682b      	ldr	r3, [r5, #0]
 801922e:	1d1a      	adds	r2, r3, #4
 8019230:	681b      	ldr	r3, [r3, #0]
 8019232:	602a      	str	r2, [r5, #0]
 8019234:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019238:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801923c:	2301      	movs	r3, #1
 801923e:	e0a3      	b.n	8019388 <_printf_i+0x1f4>
 8019240:	6820      	ldr	r0, [r4, #0]
 8019242:	6829      	ldr	r1, [r5, #0]
 8019244:	0606      	lsls	r6, r0, #24
 8019246:	f101 0304 	add.w	r3, r1, #4
 801924a:	d50a      	bpl.n	8019262 <_printf_i+0xce>
 801924c:	680e      	ldr	r6, [r1, #0]
 801924e:	602b      	str	r3, [r5, #0]
 8019250:	2e00      	cmp	r6, #0
 8019252:	da03      	bge.n	801925c <_printf_i+0xc8>
 8019254:	232d      	movs	r3, #45	; 0x2d
 8019256:	4276      	negs	r6, r6
 8019258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801925c:	485e      	ldr	r0, [pc, #376]	; (80193d8 <_printf_i+0x244>)
 801925e:	230a      	movs	r3, #10
 8019260:	e019      	b.n	8019296 <_printf_i+0x102>
 8019262:	680e      	ldr	r6, [r1, #0]
 8019264:	602b      	str	r3, [r5, #0]
 8019266:	f010 0f40 	tst.w	r0, #64	; 0x40
 801926a:	bf18      	it	ne
 801926c:	b236      	sxthne	r6, r6
 801926e:	e7ef      	b.n	8019250 <_printf_i+0xbc>
 8019270:	682b      	ldr	r3, [r5, #0]
 8019272:	6820      	ldr	r0, [r4, #0]
 8019274:	1d19      	adds	r1, r3, #4
 8019276:	6029      	str	r1, [r5, #0]
 8019278:	0601      	lsls	r1, r0, #24
 801927a:	d501      	bpl.n	8019280 <_printf_i+0xec>
 801927c:	681e      	ldr	r6, [r3, #0]
 801927e:	e002      	b.n	8019286 <_printf_i+0xf2>
 8019280:	0646      	lsls	r6, r0, #25
 8019282:	d5fb      	bpl.n	801927c <_printf_i+0xe8>
 8019284:	881e      	ldrh	r6, [r3, #0]
 8019286:	4854      	ldr	r0, [pc, #336]	; (80193d8 <_printf_i+0x244>)
 8019288:	2f6f      	cmp	r7, #111	; 0x6f
 801928a:	bf0c      	ite	eq
 801928c:	2308      	moveq	r3, #8
 801928e:	230a      	movne	r3, #10
 8019290:	2100      	movs	r1, #0
 8019292:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019296:	6865      	ldr	r5, [r4, #4]
 8019298:	60a5      	str	r5, [r4, #8]
 801929a:	2d00      	cmp	r5, #0
 801929c:	bfa2      	ittt	ge
 801929e:	6821      	ldrge	r1, [r4, #0]
 80192a0:	f021 0104 	bicge.w	r1, r1, #4
 80192a4:	6021      	strge	r1, [r4, #0]
 80192a6:	b90e      	cbnz	r6, 80192ac <_printf_i+0x118>
 80192a8:	2d00      	cmp	r5, #0
 80192aa:	d04d      	beq.n	8019348 <_printf_i+0x1b4>
 80192ac:	4615      	mov	r5, r2
 80192ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80192b2:	fb03 6711 	mls	r7, r3, r1, r6
 80192b6:	5dc7      	ldrb	r7, [r0, r7]
 80192b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80192bc:	4637      	mov	r7, r6
 80192be:	42bb      	cmp	r3, r7
 80192c0:	460e      	mov	r6, r1
 80192c2:	d9f4      	bls.n	80192ae <_printf_i+0x11a>
 80192c4:	2b08      	cmp	r3, #8
 80192c6:	d10b      	bne.n	80192e0 <_printf_i+0x14c>
 80192c8:	6823      	ldr	r3, [r4, #0]
 80192ca:	07de      	lsls	r6, r3, #31
 80192cc:	d508      	bpl.n	80192e0 <_printf_i+0x14c>
 80192ce:	6923      	ldr	r3, [r4, #16]
 80192d0:	6861      	ldr	r1, [r4, #4]
 80192d2:	4299      	cmp	r1, r3
 80192d4:	bfde      	ittt	le
 80192d6:	2330      	movle	r3, #48	; 0x30
 80192d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80192dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80192e0:	1b52      	subs	r2, r2, r5
 80192e2:	6122      	str	r2, [r4, #16]
 80192e4:	f8cd a000 	str.w	sl, [sp]
 80192e8:	464b      	mov	r3, r9
 80192ea:	aa03      	add	r2, sp, #12
 80192ec:	4621      	mov	r1, r4
 80192ee:	4640      	mov	r0, r8
 80192f0:	f7ff fee2 	bl	80190b8 <_printf_common>
 80192f4:	3001      	adds	r0, #1
 80192f6:	d14c      	bne.n	8019392 <_printf_i+0x1fe>
 80192f8:	f04f 30ff 	mov.w	r0, #4294967295
 80192fc:	b004      	add	sp, #16
 80192fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019302:	4835      	ldr	r0, [pc, #212]	; (80193d8 <_printf_i+0x244>)
 8019304:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8019308:	6829      	ldr	r1, [r5, #0]
 801930a:	6823      	ldr	r3, [r4, #0]
 801930c:	f851 6b04 	ldr.w	r6, [r1], #4
 8019310:	6029      	str	r1, [r5, #0]
 8019312:	061d      	lsls	r5, r3, #24
 8019314:	d514      	bpl.n	8019340 <_printf_i+0x1ac>
 8019316:	07df      	lsls	r7, r3, #31
 8019318:	bf44      	itt	mi
 801931a:	f043 0320 	orrmi.w	r3, r3, #32
 801931e:	6023      	strmi	r3, [r4, #0]
 8019320:	b91e      	cbnz	r6, 801932a <_printf_i+0x196>
 8019322:	6823      	ldr	r3, [r4, #0]
 8019324:	f023 0320 	bic.w	r3, r3, #32
 8019328:	6023      	str	r3, [r4, #0]
 801932a:	2310      	movs	r3, #16
 801932c:	e7b0      	b.n	8019290 <_printf_i+0xfc>
 801932e:	6823      	ldr	r3, [r4, #0]
 8019330:	f043 0320 	orr.w	r3, r3, #32
 8019334:	6023      	str	r3, [r4, #0]
 8019336:	2378      	movs	r3, #120	; 0x78
 8019338:	4828      	ldr	r0, [pc, #160]	; (80193dc <_printf_i+0x248>)
 801933a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801933e:	e7e3      	b.n	8019308 <_printf_i+0x174>
 8019340:	0659      	lsls	r1, r3, #25
 8019342:	bf48      	it	mi
 8019344:	b2b6      	uxthmi	r6, r6
 8019346:	e7e6      	b.n	8019316 <_printf_i+0x182>
 8019348:	4615      	mov	r5, r2
 801934a:	e7bb      	b.n	80192c4 <_printf_i+0x130>
 801934c:	682b      	ldr	r3, [r5, #0]
 801934e:	6826      	ldr	r6, [r4, #0]
 8019350:	6961      	ldr	r1, [r4, #20]
 8019352:	1d18      	adds	r0, r3, #4
 8019354:	6028      	str	r0, [r5, #0]
 8019356:	0635      	lsls	r5, r6, #24
 8019358:	681b      	ldr	r3, [r3, #0]
 801935a:	d501      	bpl.n	8019360 <_printf_i+0x1cc>
 801935c:	6019      	str	r1, [r3, #0]
 801935e:	e002      	b.n	8019366 <_printf_i+0x1d2>
 8019360:	0670      	lsls	r0, r6, #25
 8019362:	d5fb      	bpl.n	801935c <_printf_i+0x1c8>
 8019364:	8019      	strh	r1, [r3, #0]
 8019366:	2300      	movs	r3, #0
 8019368:	6123      	str	r3, [r4, #16]
 801936a:	4615      	mov	r5, r2
 801936c:	e7ba      	b.n	80192e4 <_printf_i+0x150>
 801936e:	682b      	ldr	r3, [r5, #0]
 8019370:	1d1a      	adds	r2, r3, #4
 8019372:	602a      	str	r2, [r5, #0]
 8019374:	681d      	ldr	r5, [r3, #0]
 8019376:	6862      	ldr	r2, [r4, #4]
 8019378:	2100      	movs	r1, #0
 801937a:	4628      	mov	r0, r5
 801937c:	f7e6 ff48 	bl	8000210 <memchr>
 8019380:	b108      	cbz	r0, 8019386 <_printf_i+0x1f2>
 8019382:	1b40      	subs	r0, r0, r5
 8019384:	6060      	str	r0, [r4, #4]
 8019386:	6863      	ldr	r3, [r4, #4]
 8019388:	6123      	str	r3, [r4, #16]
 801938a:	2300      	movs	r3, #0
 801938c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019390:	e7a8      	b.n	80192e4 <_printf_i+0x150>
 8019392:	6923      	ldr	r3, [r4, #16]
 8019394:	462a      	mov	r2, r5
 8019396:	4649      	mov	r1, r9
 8019398:	4640      	mov	r0, r8
 801939a:	47d0      	blx	sl
 801939c:	3001      	adds	r0, #1
 801939e:	d0ab      	beq.n	80192f8 <_printf_i+0x164>
 80193a0:	6823      	ldr	r3, [r4, #0]
 80193a2:	079b      	lsls	r3, r3, #30
 80193a4:	d413      	bmi.n	80193ce <_printf_i+0x23a>
 80193a6:	68e0      	ldr	r0, [r4, #12]
 80193a8:	9b03      	ldr	r3, [sp, #12]
 80193aa:	4298      	cmp	r0, r3
 80193ac:	bfb8      	it	lt
 80193ae:	4618      	movlt	r0, r3
 80193b0:	e7a4      	b.n	80192fc <_printf_i+0x168>
 80193b2:	2301      	movs	r3, #1
 80193b4:	4632      	mov	r2, r6
 80193b6:	4649      	mov	r1, r9
 80193b8:	4640      	mov	r0, r8
 80193ba:	47d0      	blx	sl
 80193bc:	3001      	adds	r0, #1
 80193be:	d09b      	beq.n	80192f8 <_printf_i+0x164>
 80193c0:	3501      	adds	r5, #1
 80193c2:	68e3      	ldr	r3, [r4, #12]
 80193c4:	9903      	ldr	r1, [sp, #12]
 80193c6:	1a5b      	subs	r3, r3, r1
 80193c8:	42ab      	cmp	r3, r5
 80193ca:	dcf2      	bgt.n	80193b2 <_printf_i+0x21e>
 80193cc:	e7eb      	b.n	80193a6 <_printf_i+0x212>
 80193ce:	2500      	movs	r5, #0
 80193d0:	f104 0619 	add.w	r6, r4, #25
 80193d4:	e7f5      	b.n	80193c2 <_printf_i+0x22e>
 80193d6:	bf00      	nop
 80193d8:	08019a15 	.word	0x08019a15
 80193dc:	08019a26 	.word	0x08019a26

080193e0 <__retarget_lock_acquire_recursive>:
 80193e0:	4770      	bx	lr

080193e2 <__retarget_lock_release_recursive>:
 80193e2:	4770      	bx	lr

080193e4 <memcpy>:
 80193e4:	440a      	add	r2, r1
 80193e6:	4291      	cmp	r1, r2
 80193e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80193ec:	d100      	bne.n	80193f0 <memcpy+0xc>
 80193ee:	4770      	bx	lr
 80193f0:	b510      	push	{r4, lr}
 80193f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80193f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80193fa:	4291      	cmp	r1, r2
 80193fc:	d1f9      	bne.n	80193f2 <memcpy+0xe>
 80193fe:	bd10      	pop	{r4, pc}

08019400 <memmove>:
 8019400:	4288      	cmp	r0, r1
 8019402:	b510      	push	{r4, lr}
 8019404:	eb01 0402 	add.w	r4, r1, r2
 8019408:	d902      	bls.n	8019410 <memmove+0x10>
 801940a:	4284      	cmp	r4, r0
 801940c:	4623      	mov	r3, r4
 801940e:	d807      	bhi.n	8019420 <memmove+0x20>
 8019410:	1e43      	subs	r3, r0, #1
 8019412:	42a1      	cmp	r1, r4
 8019414:	d008      	beq.n	8019428 <memmove+0x28>
 8019416:	f811 2b01 	ldrb.w	r2, [r1], #1
 801941a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801941e:	e7f8      	b.n	8019412 <memmove+0x12>
 8019420:	4402      	add	r2, r0
 8019422:	4601      	mov	r1, r0
 8019424:	428a      	cmp	r2, r1
 8019426:	d100      	bne.n	801942a <memmove+0x2a>
 8019428:	bd10      	pop	{r4, pc}
 801942a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801942e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019432:	e7f7      	b.n	8019424 <memmove+0x24>

08019434 <_realloc_r>:
 8019434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019438:	4680      	mov	r8, r0
 801943a:	4614      	mov	r4, r2
 801943c:	460e      	mov	r6, r1
 801943e:	b921      	cbnz	r1, 801944a <_realloc_r+0x16>
 8019440:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019444:	4611      	mov	r1, r2
 8019446:	f7ff bc2b 	b.w	8018ca0 <_malloc_r>
 801944a:	b92a      	cbnz	r2, 8019458 <_realloc_r+0x24>
 801944c:	f7ff fbbc 	bl	8018bc8 <_free_r>
 8019450:	4625      	mov	r5, r4
 8019452:	4628      	mov	r0, r5
 8019454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019458:	f000 f81b 	bl	8019492 <_malloc_usable_size_r>
 801945c:	4284      	cmp	r4, r0
 801945e:	4607      	mov	r7, r0
 8019460:	d802      	bhi.n	8019468 <_realloc_r+0x34>
 8019462:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019466:	d812      	bhi.n	801948e <_realloc_r+0x5a>
 8019468:	4621      	mov	r1, r4
 801946a:	4640      	mov	r0, r8
 801946c:	f7ff fc18 	bl	8018ca0 <_malloc_r>
 8019470:	4605      	mov	r5, r0
 8019472:	2800      	cmp	r0, #0
 8019474:	d0ed      	beq.n	8019452 <_realloc_r+0x1e>
 8019476:	42bc      	cmp	r4, r7
 8019478:	4622      	mov	r2, r4
 801947a:	4631      	mov	r1, r6
 801947c:	bf28      	it	cs
 801947e:	463a      	movcs	r2, r7
 8019480:	f7ff ffb0 	bl	80193e4 <memcpy>
 8019484:	4631      	mov	r1, r6
 8019486:	4640      	mov	r0, r8
 8019488:	f7ff fb9e 	bl	8018bc8 <_free_r>
 801948c:	e7e1      	b.n	8019452 <_realloc_r+0x1e>
 801948e:	4635      	mov	r5, r6
 8019490:	e7df      	b.n	8019452 <_realloc_r+0x1e>

08019492 <_malloc_usable_size_r>:
 8019492:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019496:	1f18      	subs	r0, r3, #4
 8019498:	2b00      	cmp	r3, #0
 801949a:	bfbc      	itt	lt
 801949c:	580b      	ldrlt	r3, [r1, r0]
 801949e:	18c0      	addlt	r0, r0, r3
 80194a0:	4770      	bx	lr
	...

080194a4 <_init>:
 80194a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194a6:	bf00      	nop
 80194a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80194aa:	bc08      	pop	{r3}
 80194ac:	469e      	mov	lr, r3
 80194ae:	4770      	bx	lr

080194b0 <_fini>:
 80194b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80194b2:	bf00      	nop
 80194b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80194b6:	bc08      	pop	{r3}
 80194b8:	469e      	mov	lr, r3
 80194ba:	4770      	bx	lr
