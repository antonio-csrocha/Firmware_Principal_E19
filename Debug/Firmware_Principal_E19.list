
Firmware_Principal_E19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019160  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  08019330  08019330  00029330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080198ac  080198ac  00030198  2**0
                  CONTENTS
  4 .ARM          00000008  080198ac  080198ac  000298ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080198b4  080198b4  00030198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080198b4  080198b4  000298b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080198b8  080198b8  000298b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  080198bc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000134a8  20000198  08019a54  00030198  2**2
                  ALLOC
 10 ._user_heap_stack 00008000  20013640  08019a54  00033640  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030198  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030f19  00000000  00000000  000301c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006b98  00000000  00000000  000610e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000023c8  00000000  00000000  00067c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002098  00000000  00000000  0006a048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ef3b  00000000  00000000  0006c0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00036b7f  00000000  00000000  0009b01b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f423d  00000000  00000000  000d1b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c5dd7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009828  00000000  00000000  001c5e28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000198 	.word	0x20000198
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08019318 	.word	0x08019318

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000019c 	.word	0x2000019c
 800020c:	08019318 	.word	0x08019318

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <FT_CAN_FilterConfig>:
#include "ft_can.h"

static void FT_CAN_ProcessData(FT_Data* FT_Data_Struct);

HAL_StatusTypeDef FT_CAN_FilterConfig(CAN_HandleTypeDef *hcan, uint16_t FT_Product, uint8_t filter_bank_position, uint32_t Filter_FIFO)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b090      	sub	sp, #64	; 0x40
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	460b      	mov	r3, r1
 80005c0:	817b      	strh	r3, [r7, #10]
 80005c2:	4613      	mov	r3, r2
 80005c4:	727b      	strb	r3, [r7, #9]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filter_id = FT_Product << 19, mask_id = 0x1FF80000;
 80005c6:	897b      	ldrh	r3, [r7, #10]
 80005c8:	04db      	lsls	r3, r3, #19
 80005ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005cc:	4b13      	ldr	r3, [pc, #76]	; (800061c <FT_CAN_FilterConfig+0x68>)
 80005ce:	63bb      	str	r3, [r7, #56]	; 0x38

	sFilterConfig.FilterBank = filter_bank_position;
 80005d0:	7a7b      	ldrb	r3, [r7, #9]
 80005d2:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005d4:	2300      	movs	r3, #0
 80005d6:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005d8:	2301      	movs	r3, #1
 80005da:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 80005dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005de:	0b5b      	lsrs	r3, r3, #13
 80005e0:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 80005e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005e4:	00db      	lsls	r3, r3, #3
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 80005ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80005ec:	0b5b      	lsrs	r3, r3, #13
 80005ee:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 80005f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80005f2:	00db      	lsls	r3, r3, #3
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterFIFOAssignment = Filter_FIFO;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterActivation = ENABLE;
 80005fc:	2301      	movs	r3, #1
 80005fe:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.SlaveStartFilterBank = 14 + filter_bank_position;
 8000600:	7a7b      	ldrb	r3, [r7, #9]
 8000602:	330e      	adds	r3, #14
 8000604:	637b      	str	r3, [r7, #52]	; 0x34

	return HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 8000606:	f107 0310 	add.w	r3, r7, #16
 800060a:	4619      	mov	r1, r3
 800060c:	68f8      	ldr	r0, [r7, #12]
 800060e:	f007 f91b 	bl	8007848 <HAL_CAN_ConfigFilter>
 8000612:	4603      	mov	r3, r0
}
 8000614:	4618      	mov	r0, r3
 8000616:	3740      	adds	r7, #64	; 0x40
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	1ff80000 	.word	0x1ff80000

08000620 <FT_CAN_ReceiveData>:

void FT_CAN_ReceiveData(CAN_RxHeaderTypeDef* pRxHeader, uint8_t* pData, FT_Data* FT_Data_Struct)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
	uint8_t buffer[8];
	uint8_t DLC = pRxHeader->DLC;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	691b      	ldr	r3, [r3, #16]
 8000630:	77bb      	strb	r3, [r7, #30]
	uint32_t ExtId = pRxHeader->ExtId >> 19;
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	0cdb      	lsrs	r3, r3, #19
 8000638:	61bb      	str	r3, [r7, #24]

	if(	   (ExtId != FT_Gear_Controller)
 800063a:	69bb      	ldr	r3, [r7, #24]
 800063c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000640:	d031      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_Knock_Meter)
 8000642:	69bb      	ldr	r3, [r7, #24]
 8000644:	f240 1241 	movw	r2, #321	; 0x141
 8000648:	4293      	cmp	r3, r2
 800064a:	d02c      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_Boost_Controller2)
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 8000652:	d028      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_Injector_Driver)
 8000654:	69bb      	ldr	r3, [r7, #24]
 8000656:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 800065a:	d024      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_WBO2_Nano)
 800065c:	69bb      	ldr	r3, [r7, #24]
 800065e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8000662:	d020      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_WBO2_Slim)
 8000664:	69bb      	ldr	r3, [r7, #24]
 8000666:	f240 2241 	movw	r2, #577	; 0x241
 800066a:	4293      	cmp	r3, r2
 800066c:	d01b      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_Alcohol_O2)
 800066e:	69bb      	ldr	r3, [r7, #24]
 8000670:	f240 2242 	movw	r2, #578	; 0x242
 8000674:	4293      	cmp	r3, r2
 8000676:	d016      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FTSpark)
 8000678:	69bb      	ldr	r3, [r7, #24]
 800067a:	f240 2243 	movw	r2, #579	; 0x243
 800067e:	4293      	cmp	r3, r2
 8000680:	d011      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_Switchpad)
 8000682:	69bb      	ldr	r3, [r7, #24]
 8000684:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 8000688:	d00d      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT500)
 800068a:	69bb      	ldr	r3, [r7, #24]
 800068c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8000690:	d009      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT600)
 8000692:	69bb      	ldr	r3, [r7, #24]
 8000694:	f240 2281 	movw	r2, #641	; 0x281
 8000698:	4293      	cmp	r3, r2
 800069a:	d004      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (pRxHeader->IDE != CAN_ID_EXT))
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	2b04      	cmp	r3, #4
 80006a2:	f040 8316 	bne.w	8000cd2 <FT_CAN_ReceiveData+0x6b2>
		return;

	ExtId = pRxHeader->ExtId;
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	685b      	ldr	r3, [r3, #4]
 80006aa:	61bb      	str	r3, [r7, #24]

	for(uint8_t i = 0; i < DLC; i++)
 80006ac:	2300      	movs	r3, #0
 80006ae:	77fb      	strb	r3, [r7, #31]
 80006b0:	e00b      	b.n	80006ca <FT_CAN_ReceiveData+0xaa>
		buffer[i] = pData[i];
 80006b2:	7ffb      	ldrb	r3, [r7, #31]
 80006b4:	68ba      	ldr	r2, [r7, #8]
 80006b6:	441a      	add	r2, r3
 80006b8:	7ffb      	ldrb	r3, [r7, #31]
 80006ba:	7812      	ldrb	r2, [r2, #0]
 80006bc:	3320      	adds	r3, #32
 80006be:	443b      	add	r3, r7
 80006c0:	f803 2c10 	strb.w	r2, [r3, #-16]
	for(uint8_t i = 0; i < DLC; i++)
 80006c4:	7ffb      	ldrb	r3, [r7, #31]
 80006c6:	3301      	adds	r3, #1
 80006c8:	77fb      	strb	r3, [r7, #31]
 80006ca:	7ffa      	ldrb	r2, [r7, #31]
 80006cc:	7fbb      	ldrb	r3, [r7, #30]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d3ef      	bcc.n	80006b2 <FT_CAN_ReceiveData+0x92>

	if((((ExtId / 0x800) & 0x07) == 0x00))// || (((ExtId / 0x800) & 0x07) == 0x01))
 80006d2:	69bb      	ldr	r3, [r7, #24]
 80006d4:	0adb      	lsrs	r3, r3, #11
 80006d6:	f003 0307 	and.w	r3, r3, #7
 80006da:	2b00      	cmp	r3, #0
 80006dc:	f040 8127 	bne.w	800092e <FT_CAN_ReceiveData+0x30e>
	{
		if((ExtId & 0xFFF) == 0x600)
 80006e0:	69bb      	ldr	r3, [r7, #24]
 80006e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80006e6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80006ea:	d13e      	bne.n	800076a <FT_CAN_ReceiveData+0x14a>
		{
			FT_Data_Struct->tps  = buffer[0] << 8;
 80006ec:	7c3b      	ldrb	r3, [r7, #16]
 80006ee:	021b      	lsls	r3, r3, #8
 80006f0:	b21a      	sxth	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
			FT_Data_Struct->tps |= buffer[1];
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f9b3 2052 	ldrsh.w	r2, [r3, #82]	; 0x52
 80006fe:	7c7b      	ldrb	r3, [r7, #17]
 8000700:	b21b      	sxth	r3, r3
 8000702:	4313      	orrs	r3, r2
 8000704:	b21a      	sxth	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
			FT_Data_Struct->map  = buffer[2] << 8;
 800070c:	7cbb      	ldrb	r3, [r7, #18]
 800070e:	021b      	lsls	r3, r3, #8
 8000710:	b21a      	sxth	r2, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			FT_Data_Struct->map |= buffer[3];
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 800071e:	7cfb      	ldrb	r3, [r7, #19]
 8000720:	b21b      	sxth	r3, r3
 8000722:	4313      	orrs	r3, r2
 8000724:	b21a      	sxth	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			FT_Data_Struct->iat  = buffer[4] << 8;
 800072c:	7d3b      	ldrb	r3, [r7, #20]
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	b21a      	sxth	r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			FT_Data_Struct->iat |= buffer[5];
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
 800073e:	7d7b      	ldrb	r3, [r7, #21]
 8000740:	b21b      	sxth	r3, r3
 8000742:	4313      	orrs	r3, r2
 8000744:	b21a      	sxth	r2, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			FT_Data_Struct->ect  = buffer[6] << 8;
 800074c:	7dbb      	ldrb	r3, [r7, #22]
 800074e:	021b      	lsls	r3, r3, #8
 8000750:	b21a      	sxth	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	879a      	strh	r2, [r3, #60]	; 0x3c
			FT_Data_Struct->ect |= buffer[7];
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 800075c:	7dfb      	ldrb	r3, [r7, #23]
 800075e:	b21b      	sxth	r3, r3
 8000760:	4313      	orrs	r3, r2
 8000762:	b21a      	sxth	r2, r3
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	879a      	strh	r2, [r3, #60]	; 0x3c

			return;
 8000768:	e2b6      	b.n	8000cd8 <FT_CAN_ReceiveData+0x6b8>
		}
		else if((ExtId & 0xFFF) == 0x601)
 800076a:	69bb      	ldr	r3, [r7, #24]
 800076c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000770:	f240 6201 	movw	r2, #1537	; 0x601
 8000774:	4293      	cmp	r3, r2
 8000776:	d13e      	bne.n	80007f6 <FT_CAN_ReceiveData+0x1d6>
		{
			FT_Data_Struct->oil_pressure  	  = buffer[0] << 8;
 8000778:	7c3b      	ldrb	r3, [r7, #16]
 800077a:	021b      	lsls	r3, r3, #8
 800077c:	b21a      	sxth	r2, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->oil_pressure 	 |= buffer[1];
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	f9b3 204a 	ldrsh.w	r2, [r3, #74]	; 0x4a
 800078a:	7c7b      	ldrb	r3, [r7, #17]
 800078c:	b21b      	sxth	r3, r3
 800078e:	4313      	orrs	r3, r2
 8000790:	b21a      	sxth	r2, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->fuel_pressure 	  = buffer[2] << 8;
 8000798:	7cbb      	ldrb	r3, [r7, #18]
 800079a:	021b      	lsls	r3, r3, #8
 800079c:	b21a      	sxth	r2, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			FT_Data_Struct->fuel_pressure 	 |= buffer[3];
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
 80007aa:	7cfb      	ldrb	r3, [r7, #19]
 80007ac:	b21b      	sxth	r3, r3
 80007ae:	4313      	orrs	r3, r2
 80007b0:	b21a      	sxth	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			FT_Data_Struct->coolant_pressure  = buffer[4] << 8;
 80007b8:	7d3b      	ldrb	r3, [r7, #20]
 80007ba:	021b      	lsls	r3, r3, #8
 80007bc:	b21a      	sxth	r2, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	87da      	strh	r2, [r3, #62]	; 0x3e
			FT_Data_Struct->coolant_pressure |= buffer[5];
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
 80007c8:	7d7b      	ldrb	r3, [r7, #21]
 80007ca:	b21b      	sxth	r3, r3
 80007cc:	4313      	orrs	r3, r2
 80007ce:	b21a      	sxth	r2, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	87da      	strh	r2, [r3, #62]	; 0x3e
			FT_Data_Struct->gear  			  = buffer[6] << 8;
 80007d4:	7dbb      	ldrb	r3, [r7, #22]
 80007d6:	021b      	lsls	r3, r3, #8
 80007d8:	b21a      	sxth	r2, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			FT_Data_Struct->gear 			 |= buffer[7];
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 80007e6:	7dfb      	ldrb	r3, [r7, #23]
 80007e8:	b21b      	sxth	r3, r3
 80007ea:	4313      	orrs	r3, r2
 80007ec:	b21a      	sxth	r2, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

			return;
 80007f4:	e270      	b.n	8000cd8 <FT_CAN_ReceiveData+0x6b8>
		}
		else if((ExtId & 0xFFF) == 0x602)
 80007f6:	69bb      	ldr	r3, [r7, #24]
 80007f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007fc:	f240 6202 	movw	r2, #1538	; 0x602
 8000800:	4293      	cmp	r3, r2
 8000802:	d140      	bne.n	8000886 <FT_CAN_ReceiveData+0x266>
		{
			FT_Data_Struct->lambda  		 = buffer[0] << 8;
 8000804:	7c3b      	ldrb	r3, [r7, #16]
 8000806:	021b      	lsls	r3, r3, #8
 8000808:	b21a      	sxth	r2, r3
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			FT_Data_Struct->lambda 			|= buffer[1];
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8000816:	7c7b      	ldrb	r3, [r7, #17]
 8000818:	b21b      	sxth	r3, r3
 800081a:	4313      	orrs	r3, r2
 800081c:	b21a      	sxth	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			FT_Data_Struct->rpm  			 = buffer[2] << 8;
 8000824:	7cbb      	ldrb	r3, [r7, #18]
 8000826:	021b      	lsls	r3, r3, #8
 8000828:	b21a      	sxth	r2, r3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			FT_Data_Struct->rpm 			|= buffer[3];
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 8000836:	7cfb      	ldrb	r3, [r7, #19]
 8000838:	b21b      	sxth	r3, r3
 800083a:	4313      	orrs	r3, r2
 800083c:	b21a      	sxth	r2, r3
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			FT_Data_Struct->oil_temperature  = buffer[4] << 8;
 8000844:	7d3b      	ldrb	r3, [r7, #20]
 8000846:	021b      	lsls	r3, r3, #8
 8000848:	b21a      	sxth	r2, r3
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->oil_temperature |= buffer[5];
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f9b3 204c 	ldrsh.w	r2, [r3, #76]	; 0x4c
 8000856:	7d7b      	ldrb	r3, [r7, #21]
 8000858:	b21b      	sxth	r3, r3
 800085a:	4313      	orrs	r3, r2
 800085c:	b21a      	sxth	r2, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->pit_limiter  	 = buffer[6] << 8;
 8000864:	7dbb      	ldrb	r3, [r7, #22]
 8000866:	021b      	lsls	r3, r3, #8
 8000868:	b21a      	sxth	r2, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
			FT_Data_Struct->pit_limiter 	|= buffer[7];
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f9b3 204e 	ldrsh.w	r2, [r3, #78]	; 0x4e
 8000876:	7dfb      	ldrb	r3, [r7, #23]
 8000878:	b21b      	sxth	r3, r3
 800087a:	4313      	orrs	r3, r2
 800087c:	b21a      	sxth	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

			return;
 8000884:	e228      	b.n	8000cd8 <FT_CAN_ReceiveData+0x6b8>
		}

#ifndef FT_CAN_FIXED
		else if((ExtId & 0xFF) == 0xFF)
 8000886:	69bb      	ldr	r3, [r7, #24]
 8000888:	b2db      	uxtb	r3, r3
 800088a:	2bff      	cmp	r3, #255	; 0xff
 800088c:	f040 8224 	bne.w	8000cd8 <FT_CAN_ReceiveData+0x6b8>
		{
			FT_Data_Struct->data_id  	  = buffer[0] << 8;
 8000890:	7c3b      	ldrb	r3, [r7, #16]
 8000892:	b29b      	uxth	r3, r3
 8000894:	021b      	lsls	r3, r3, #8
 8000896:	b29a      	uxth	r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
			FT_Data_Struct->data_id 	 |= buffer[1];
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 80008a4:	7c7b      	ldrb	r3, [r7, #17]
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	4313      	orrs	r3, r2
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
			FT_Data_Struct->data_content  = buffer[2] << 8;
 80008b2:	7cbb      	ldrb	r3, [r7, #18]
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	021b      	lsls	r3, r3, #8
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			FT_Data_Struct->data_content |= buffer[3];
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80008c6:	7cfb      	ldrb	r3, [r7, #19]
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	4313      	orrs	r3, r2
 80008cc:	b29a      	uxth	r2, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

			FT_CAN_ProcessData(FT_Data_Struct);
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f000 fa03 	bl	8000ce0 <FT_CAN_ProcessData>

			if(DLC == 8)
 80008da:	7fbb      	ldrb	r3, [r7, #30]
 80008dc:	2b08      	cmp	r3, #8
 80008de:	f040 81fa 	bne.w	8000cd6 <FT_CAN_ReceiveData+0x6b6>
			{
				FT_Data_Struct->data_id  	  = buffer[4] << 8;
 80008e2:	7d3b      	ldrb	r3, [r7, #20]
 80008e4:	b29b      	uxth	r3, r3
 80008e6:	021b      	lsls	r3, r3, #8
 80008e8:	b29a      	uxth	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
				FT_Data_Struct->data_id 	 |= buffer[5];
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 80008f6:	7d7b      	ldrb	r3, [r7, #21]
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	4313      	orrs	r3, r2
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
				FT_Data_Struct->data_content  = buffer[6] << 8;
 8000904:	7dbb      	ldrb	r3, [r7, #22]
 8000906:	b29b      	uxth	r3, r3
 8000908:	021b      	lsls	r3, r3, #8
 800090a:	b29a      	uxth	r2, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
				FT_Data_Struct->data_content |= buffer[7];
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8000918:	7dfb      	ldrb	r3, [r7, #23]
 800091a:	b29b      	uxth	r3, r3
 800091c:	4313      	orrs	r3, r2
 800091e:	b29a      	uxth	r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

				FT_CAN_ProcessData(FT_Data_Struct);
 8000926:	6878      	ldr	r0, [r7, #4]
 8000928:	f000 f9da 	bl	8000ce0 <FT_CAN_ProcessData>
			}

			return;
 800092c:	e1d3      	b.n	8000cd6 <FT_CAN_ReceiveData+0x6b6>
		}
	}

	else if((((ExtId / 0x800) & 0x07) == 0x02))// || ((((ExtId / 0x800) & 0x07) == 0x03)))
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	0adb      	lsrs	r3, r3, #11
 8000932:	f003 0307 	and.w	r3, r3, #7
 8000936:	2b02      	cmp	r3, #2
 8000938:	f040 81ce 	bne.w	8000cd8 <FT_CAN_ReceiveData+0x6b8>
	{
		if(buffer[0] == 0xFF)
 800093c:	7c3b      	ldrb	r3, [r7, #16]
 800093e:	2bff      	cmp	r3, #255	; 0xff
 8000940:	d125      	bne.n	800098e <FT_CAN_ReceiveData+0x36e>
		{
			FT_Data_Struct->data_id  	  = buffer[1] << 8;
 8000942:	7c7b      	ldrb	r3, [r7, #17]
 8000944:	b29b      	uxth	r3, r3
 8000946:	021b      	lsls	r3, r3, #8
 8000948:	b29a      	uxth	r2, r3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
			FT_Data_Struct->data_id 	 |= buffer[2];
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8000956:	7cbb      	ldrb	r3, [r7, #18]
 8000958:	b29b      	uxth	r3, r3
 800095a:	4313      	orrs	r3, r2
 800095c:	b29a      	uxth	r2, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
			FT_Data_Struct->data_content  = buffer[3] << 8;
 8000964:	7cfb      	ldrb	r3, [r7, #19]
 8000966:	b29b      	uxth	r3, r3
 8000968:	021b      	lsls	r3, r3, #8
 800096a:	b29a      	uxth	r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			FT_Data_Struct->data_content |= buffer[4];
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8000978:	7d3b      	ldrb	r3, [r7, #20]
 800097a:	b29b      	uxth	r3, r3
 800097c:	4313      	orrs	r3, r2
 800097e:	b29a      	uxth	r2, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			FT_CAN_ProcessData(FT_Data_Struct);
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f000 f9aa 	bl	8000ce0 <FT_CAN_ProcessData>

			return;
 800098c:	e1a4      	b.n	8000cd8 <FT_CAN_ReceiveData+0x6b8>

		//Segmented Messages
		else
		{
			//First Message
			if(buffer[0] == 0)
 800098e:	7c3b      	ldrb	r3, [r7, #16]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d141      	bne.n	8000a18 <FT_CAN_ReceiveData+0x3f8>
			{
				FT_Data_Struct->data_length   = buffer[1] << 8;
 8000994:	7c7b      	ldrb	r3, [r7, #17]
 8000996:	b29b      	uxth	r3, r3
 8000998:	021b      	lsls	r3, r3, #8
 800099a:	b29a      	uxth	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
				FT_Data_Struct->data_length  |= buffer[2];
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80009a8:	7cbb      	ldrb	r3, [r7, #18]
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	4313      	orrs	r3, r2
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

				FT_Data_Struct->data_id  	  = buffer[3] << 8;
 80009b6:	7cfb      	ldrb	r3, [r7, #19]
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	021b      	lsls	r3, r3, #8
 80009bc:	b29a      	uxth	r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
				FT_Data_Struct->data_id 	 |= buffer[4];
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 80009ca:	7d3b      	ldrb	r3, [r7, #20]
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	4313      	orrs	r3, r2
 80009d0:	b29a      	uxth	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
				FT_Data_Struct->data_content  = buffer[5] << 8;
 80009d8:	7d7b      	ldrb	r3, [r7, #21]
 80009da:	b29b      	uxth	r3, r3
 80009dc:	021b      	lsls	r3, r3, #8
 80009de:	b29a      	uxth	r2, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
				FT_Data_Struct->data_content |= buffer[6];
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80009ec:	7dbb      	ldrb	r3, [r7, #22]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	4313      	orrs	r3, r2
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
				FT_CAN_ProcessData(FT_Data_Struct);
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f000 f970 	bl	8000ce0 <FT_CAN_ProcessData>

				FT_Data_Struct->data_id = buffer[7] << 8;
 8000a00:	7dfb      	ldrb	r3, [r7, #23]
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	021b      	lsls	r3, r3, #8
 8000a06:	b29a      	uxth	r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
				FT_Data_Struct->data_last_seg = 0;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2200      	movs	r2, #0
 8000a12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

				return;
 8000a16:	e15f      	b.n	8000cd8 <FT_CAN_ReceiveData+0x6b8>
			}
			//Messages 1, 5, etc
			else if((buffer[0] % 4) == 1)
 8000a18:	7c3b      	ldrb	r3, [r7, #16]
 8000a1a:	f003 0303 	and.w	r3, r3, #3
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d153      	bne.n	8000acc <FT_CAN_ReceiveData+0x4ac>
			{
				if(buffer[0] == (FT_Data_Struct->data_last_seg + 1))
 8000a24:	7c3b      	ldrb	r3, [r7, #16]
 8000a26:	461a      	mov	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8000a2e:	3301      	adds	r3, #1
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d11d      	bne.n	8000a70 <FT_CAN_ReceiveData+0x450>
				{
					FT_Data_Struct->data_id 	 |= buffer[1];
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8000a3a:	7c7b      	ldrb	r3, [r7, #17]
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	4313      	orrs	r3, r2
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
					FT_Data_Struct->data_content  = buffer[2] << 8;
 8000a48:	7cbb      	ldrb	r3, [r7, #18]
 8000a4a:	b29b      	uxth	r3, r3
 8000a4c:	021b      	lsls	r3, r3, #8
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
					FT_Data_Struct->data_content |= buffer[3];
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8000a5c:	7cfb      	ldrb	r3, [r7, #19]
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	4313      	orrs	r3, r2
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
					FT_CAN_ProcessData(FT_Data_Struct);
 8000a6a:	6878      	ldr	r0, [r7, #4]
 8000a6c:	f000 f938 	bl	8000ce0 <FT_CAN_ProcessData>
				}

				if(DLC == 8)
 8000a70:	7fbb      	ldrb	r3, [r7, #30]
 8000a72:	2b08      	cmp	r3, #8
 8000a74:	d124      	bne.n	8000ac0 <FT_CAN_ReceiveData+0x4a0>
				{
					FT_Data_Struct->data_id  	  = buffer[4] << 8;
 8000a76:	7d3b      	ldrb	r3, [r7, #20]
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	021b      	lsls	r3, r3, #8
 8000a7c:	b29a      	uxth	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
					FT_Data_Struct->data_id 	 |= buffer[5];
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8000a8a:	7d7b      	ldrb	r3, [r7, #21]
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	4313      	orrs	r3, r2
 8000a90:	b29a      	uxth	r2, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
					FT_Data_Struct->data_content  = buffer[6] << 8;
 8000a98:	7dbb      	ldrb	r3, [r7, #22]
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	021b      	lsls	r3, r3, #8
 8000a9e:	b29a      	uxth	r2, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
					FT_Data_Struct->data_content |= buffer[7];
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8000aac:	7dfb      	ldrb	r3, [r7, #23]
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
					FT_CAN_ProcessData(FT_Data_Struct);
 8000aba:	6878      	ldr	r0, [r7, #4]
 8000abc:	f000 f910 	bl	8000ce0 <FT_CAN_ProcessData>
				}

				FT_Data_Struct->data_last_seg = buffer[0];
 8000ac0:	7c3b      	ldrb	r3, [r7, #16]
 8000ac2:	b29a      	uxth	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

				return;
 8000aca:	e105      	b.n	8000cd8 <FT_CAN_ReceiveData+0x6b8>
			}
			//messages 2, 6, etc
			else if((buffer[0] % 4) == 2)
 8000acc:	7c3b      	ldrb	r3, [r7, #16]
 8000ace:	f003 0303 	and.w	r3, r3, #3
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	2b02      	cmp	r3, #2
 8000ad6:	d145      	bne.n	8000b64 <FT_CAN_ReceiveData+0x544>
			{
				FT_Data_Struct->data_id  	  = buffer[1] << 8;
 8000ad8:	7c7b      	ldrb	r3, [r7, #17]
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	021b      	lsls	r3, r3, #8
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
				FT_Data_Struct->data_id 	 |= buffer[2];
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8000aec:	7cbb      	ldrb	r3, [r7, #18]
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	4313      	orrs	r3, r2
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
				FT_Data_Struct->data_content  = buffer[3] << 8;
 8000afa:	7cfb      	ldrb	r3, [r7, #19]
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	021b      	lsls	r3, r3, #8
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
				FT_Data_Struct->data_content |= buffer[4];
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8000b0e:	7d3b      	ldrb	r3, [r7, #20]
 8000b10:	b29b      	uxth	r3, r3
 8000b12:	4313      	orrs	r3, r2
 8000b14:	b29a      	uxth	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
				FT_CAN_ProcessData(FT_Data_Struct);
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f000 f8df 	bl	8000ce0 <FT_CAN_ProcessData>

				if(DLC == 8)
 8000b22:	7fbb      	ldrb	r3, [r7, #30]
 8000b24:	2b08      	cmp	r3, #8
 8000b26:	d117      	bne.n	8000b58 <FT_CAN_ReceiveData+0x538>
				{
					FT_Data_Struct->data_id  	 = buffer[5] << 8;
 8000b28:	7d7b      	ldrb	r3, [r7, #21]
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	021b      	lsls	r3, r3, #8
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
					FT_Data_Struct->data_id 	|= buffer[6];
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8000b3c:	7dbb      	ldrb	r3, [r7, #22]
 8000b3e:	b29b      	uxth	r3, r3
 8000b40:	4313      	orrs	r3, r2
 8000b42:	b29a      	uxth	r2, r3
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
					FT_Data_Struct->data_content = buffer[7] << 8;
 8000b4a:	7dfb      	ldrb	r3, [r7, #23]
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	021b      	lsls	r3, r3, #8
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
				}

				FT_Data_Struct->data_last_seg = buffer[0];
 8000b58:	7c3b      	ldrb	r3, [r7, #16]
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

				return;
 8000b62:	e0b9      	b.n	8000cd8 <FT_CAN_ReceiveData+0x6b8>
			}
			//Messages 3, 7, etc
			else if((buffer[0] % 4) == 3)
 8000b64:	7c3b      	ldrb	r3, [r7, #16]
 8000b66:	f003 0303 	and.w	r3, r3, #3
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	2b03      	cmp	r3, #3
 8000b6e:	d156      	bne.n	8000c1e <FT_CAN_ReceiveData+0x5fe>
			{
				if(buffer[0] == (FT_Data_Struct->data_last_seg + 1))
 8000b70:	7c3b      	ldrb	r3, [r7, #16]
 8000b72:	461a      	mov	r2, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d10c      	bne.n	8000b9a <FT_CAN_ReceiveData+0x57a>
				{
					FT_Data_Struct->data_content |= buffer[1];
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8000b86:	7c7b      	ldrb	r3, [r7, #17]
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	b29a      	uxth	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
					FT_CAN_ProcessData(FT_Data_Struct);
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f000 f8a3 	bl	8000ce0 <FT_CAN_ProcessData>
				}

				if(DLC >= 6)
 8000b9a:	7fbb      	ldrb	r3, [r7, #30]
 8000b9c:	2b05      	cmp	r3, #5
 8000b9e:	d924      	bls.n	8000bea <FT_CAN_ReceiveData+0x5ca>
				{
					FT_Data_Struct->data_id  	  = buffer[2] << 8;
 8000ba0:	7cbb      	ldrb	r3, [r7, #18]
 8000ba2:	b29b      	uxth	r3, r3
 8000ba4:	021b      	lsls	r3, r3, #8
 8000ba6:	b29a      	uxth	r2, r3
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
					FT_Data_Struct->data_id 	 |= buffer[3];
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8000bb4:	7cfb      	ldrb	r3, [r7, #19]
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	b29a      	uxth	r2, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
					FT_Data_Struct->data_content  = buffer[4] << 8;
 8000bc2:	7d3b      	ldrb	r3, [r7, #20]
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	021b      	lsls	r3, r3, #8
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
					FT_Data_Struct->data_content |= buffer[5];
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8000bd6:	7d7b      	ldrb	r3, [r7, #21]
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	b29a      	uxth	r2, r3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
					FT_CAN_ProcessData(FT_Data_Struct);
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f000 f87b 	bl	8000ce0 <FT_CAN_ProcessData>
				}

				if(DLC == 8)
 8000bea:	7fbb      	ldrb	r3, [r7, #30]
 8000bec:	2b08      	cmp	r3, #8
 8000bee:	d110      	bne.n	8000c12 <FT_CAN_ReceiveData+0x5f2>
				{
					FT_Data_Struct->data_id  = buffer[6] << 8;
 8000bf0:	7dbb      	ldrb	r3, [r7, #22]
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	021b      	lsls	r3, r3, #8
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
					FT_Data_Struct->data_id |= buffer[7];
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8000c04:	7dfb      	ldrb	r3, [r7, #23]
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
				}

				FT_Data_Struct->data_last_seg = buffer[0];
 8000c12:	7c3b      	ldrb	r3, [r7, #16]
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

				return;
 8000c1c:	e05c      	b.n	8000cd8 <FT_CAN_ReceiveData+0x6b8>
			}
			//Messages 4, 8, etc
			else if((buffer[0] % 4) == 0)
 8000c1e:	7c3b      	ldrb	r3, [r7, #16]
 8000c20:	f003 0303 	and.w	r3, r3, #3
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d156      	bne.n	8000cd8 <FT_CAN_ReceiveData+0x6b8>
			{
				if(buffer[0] == (FT_Data_Struct->data_last_seg + 1))
 8000c2a:	7c3b      	ldrb	r3, [r7, #16]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8000c34:	3301      	adds	r3, #1
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d113      	bne.n	8000c62 <FT_CAN_ReceiveData+0x642>
				{
					FT_Data_Struct->data_content  = buffer[1] << 8;
 8000c3a:	7c7b      	ldrb	r3, [r7, #17]
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	021b      	lsls	r3, r3, #8
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
					FT_Data_Struct->data_content |= buffer[2];
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8000c4e:	7cbb      	ldrb	r3, [r7, #18]
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	4313      	orrs	r3, r2
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
					FT_CAN_ProcessData(FT_Data_Struct);
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f000 f83f 	bl	8000ce0 <FT_CAN_ProcessData>
				}

				if(DLC >= 7)
 8000c62:	7fbb      	ldrb	r3, [r7, #30]
 8000c64:	2b06      	cmp	r3, #6
 8000c66:	d924      	bls.n	8000cb2 <FT_CAN_ReceiveData+0x692>
				{
					FT_Data_Struct->data_id  	  = buffer[3] << 8;
 8000c68:	7cfb      	ldrb	r3, [r7, #19]
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	021b      	lsls	r3, r3, #8
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
					FT_Data_Struct->data_id 	 |= buffer[4];
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8000c7c:	7d3b      	ldrb	r3, [r7, #20]
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	4313      	orrs	r3, r2
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
					FT_Data_Struct->data_content  = buffer[5] << 8;
 8000c8a:	7d7b      	ldrb	r3, [r7, #21]
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	021b      	lsls	r3, r3, #8
 8000c90:	b29a      	uxth	r2, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
					FT_Data_Struct->data_content |= buffer[6];
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8000c9e:	7dbb      	ldrb	r3, [r7, #22]
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	b29a      	uxth	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
					FT_CAN_ProcessData(FT_Data_Struct);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f000 f817 	bl	8000ce0 <FT_CAN_ProcessData>
				}

				if(DLC == 8)
 8000cb2:	7fbb      	ldrb	r3, [r7, #30]
 8000cb4:	2b08      	cmp	r3, #8
 8000cb6:	d106      	bne.n	8000cc6 <FT_CAN_ReceiveData+0x6a6>
					FT_Data_Struct->data_id	= buffer[7] << 8;
 8000cb8:	7dfb      	ldrb	r3, [r7, #23]
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	021b      	lsls	r3, r3, #8
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

				FT_Data_Struct->data_last_seg = buffer[0];
 8000cc6:	7c3b      	ldrb	r3, [r7, #16]
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

				return;
 8000cd0:	e002      	b.n	8000cd8 <FT_CAN_ReceiveData+0x6b8>
		return;
 8000cd2:	bf00      	nop
 8000cd4:	e000      	b.n	8000cd8 <FT_CAN_ReceiveData+0x6b8>
			return;
 8000cd6:	bf00      	nop
			}
		}
#endif
	}
}
 8000cd8:	3720      	adds	r7, #32
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <FT_CAN_ProcessData>:

#ifndef FT_CAN_FIXED

static void FT_CAN_ProcessData(FT_Data* FT_Data_Struct)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
	uint16_t id = FT_Data_Struct->data_id;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8000cee:	81fb      	strh	r3, [r7, #14]
	uint16_t data = FT_Data_Struct->data_content;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8000cf6:	81bb      	strh	r3, [r7, #12]

	if((id & 0x1) == 0x1)
 8000cf8:	89fb      	ldrh	r3, [r7, #14]
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f040 8258 	bne.w	80011b4 <FT_CAN_ProcessData+0x4d4>
		return;


	switch(id >> 1)
 8000d04:	89fb      	ldrh	r3, [r7, #14]
 8000d06:	085b      	lsrs	r3, r3, #1
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	2b8d      	cmp	r3, #141	; 0x8d
 8000d0c:	f300 8166 	bgt.w	8000fdc <FT_CAN_ProcessData+0x2fc>
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	dc41      	bgt.n	8000d98 <FT_CAN_ProcessData+0xb8>
 8000d14:	e247      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
 8000d16:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000d1a:	2b1b      	cmp	r3, #27
 8000d1c:	f200 8243 	bhi.w	80011a6 <FT_CAN_ProcessData+0x4c6>
 8000d20:	a201      	add	r2, pc, #4	; (adr r2, 8000d28 <FT_CAN_ProcessData+0x48>)
 8000d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d26:	bf00      	nop
 8000d28:	0800116b 	.word	0x0800116b
 8000d2c:	080011a7 	.word	0x080011a7
 8000d30:	080011a7 	.word	0x080011a7
 8000d34:	080011a7 	.word	0x080011a7
 8000d38:	080011a7 	.word	0x080011a7
 8000d3c:	080011a7 	.word	0x080011a7
 8000d40:	080011a7 	.word	0x080011a7
 8000d44:	080011a7 	.word	0x080011a7
 8000d48:	080011a7 	.word	0x080011a7
 8000d4c:	080011a7 	.word	0x080011a7
 8000d50:	080011a7 	.word	0x080011a7
 8000d54:	080011a7 	.word	0x080011a7
 8000d58:	080011a7 	.word	0x080011a7
 8000d5c:	080011a7 	.word	0x080011a7
 8000d60:	080011a7 	.word	0x080011a7
 8000d64:	080011a7 	.word	0x080011a7
 8000d68:	080011a7 	.word	0x080011a7
 8000d6c:	080011a7 	.word	0x080011a7
 8000d70:	08001175 	.word	0x08001175
 8000d74:	080011a7 	.word	0x080011a7
 8000d78:	080011a7 	.word	0x080011a7
 8000d7c:	080011a7 	.word	0x080011a7
 8000d80:	080011a7 	.word	0x080011a7
 8000d84:	080011a7 	.word	0x080011a7
 8000d88:	0800117f 	.word	0x0800117f
 8000d8c:	08001189 	.word	0x08001189
 8000d90:	08001193 	.word	0x08001193
 8000d94:	0800119d 	.word	0x0800119d
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	2b8c      	cmp	r3, #140	; 0x8c
 8000d9c:	f200 8203 	bhi.w	80011a6 <FT_CAN_ProcessData+0x4c6>
 8000da0:	a201      	add	r2, pc, #4	; (adr r2, 8000da8 <FT_CAN_ProcessData+0xc8>)
 8000da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da6:	bf00      	nop
 8000da8:	08000fef 	.word	0x08000fef
 8000dac:	08000ffb 	.word	0x08000ffb
 8000db0:	08001007 	.word	0x08001007
 8000db4:	08001013 	.word	0x08001013
 8000db8:	0800101d 	.word	0x0800101d
 8000dbc:	08001029 	.word	0x08001029
 8000dc0:	08001035 	.word	0x08001035
 8000dc4:	080010ad 	.word	0x080010ad
 8000dc8:	080010b7 	.word	0x080010b7
 8000dcc:	080010c1 	.word	0x080010c1
 8000dd0:	080010cb 	.word	0x080010cb
 8000dd4:	080010d5 	.word	0x080010d5
 8000dd8:	080010df 	.word	0x080010df
 8000ddc:	080010e9 	.word	0x080010e9
 8000de0:	080010f3 	.word	0x080010f3
 8000de4:	080010fd 	.word	0x080010fd
 8000de8:	0800103f 	.word	0x0800103f
 8000dec:	080011a7 	.word	0x080011a7
 8000df0:	080011a7 	.word	0x080011a7
 8000df4:	080011a7 	.word	0x080011a7
 8000df8:	080011a7 	.word	0x080011a7
 8000dfc:	080011a7 	.word	0x080011a7
 8000e00:	080011a7 	.word	0x080011a7
 8000e04:	080011a7 	.word	0x080011a7
 8000e08:	080011a7 	.word	0x080011a7
 8000e0c:	080011a7 	.word	0x080011a7
 8000e10:	080011a7 	.word	0x080011a7
 8000e14:	080011a7 	.word	0x080011a7
 8000e18:	080011a7 	.word	0x080011a7
 8000e1c:	080011a7 	.word	0x080011a7
 8000e20:	080011a7 	.word	0x080011a7
 8000e24:	080011a7 	.word	0x080011a7
 8000e28:	080011a7 	.word	0x080011a7
 8000e2c:	080011a7 	.word	0x080011a7
 8000e30:	080011a7 	.word	0x080011a7
 8000e34:	080011a7 	.word	0x080011a7
 8000e38:	080011a7 	.word	0x080011a7
 8000e3c:	080011a7 	.word	0x080011a7
 8000e40:	0800104b 	.word	0x0800104b
 8000e44:	080011a7 	.word	0x080011a7
 8000e48:	080011a7 	.word	0x080011a7
 8000e4c:	080011a7 	.word	0x080011a7
 8000e50:	080011a7 	.word	0x080011a7
 8000e54:	080011a7 	.word	0x080011a7
 8000e58:	080011a7 	.word	0x080011a7
 8000e5c:	080011a7 	.word	0x080011a7
 8000e60:	080011a7 	.word	0x080011a7
 8000e64:	080011a7 	.word	0x080011a7
 8000e68:	080011a7 	.word	0x080011a7
 8000e6c:	080011a7 	.word	0x080011a7
 8000e70:	080011a7 	.word	0x080011a7
 8000e74:	080011a7 	.word	0x080011a7
 8000e78:	080011a7 	.word	0x080011a7
 8000e7c:	080011a7 	.word	0x080011a7
 8000e80:	080011a7 	.word	0x080011a7
 8000e84:	080011a7 	.word	0x080011a7
 8000e88:	080011a7 	.word	0x080011a7
 8000e8c:	080011a7 	.word	0x080011a7
 8000e90:	080011a7 	.word	0x080011a7
 8000e94:	080011a7 	.word	0x080011a7
 8000e98:	080011a7 	.word	0x080011a7
 8000e9c:	080011a7 	.word	0x080011a7
 8000ea0:	080011a7 	.word	0x080011a7
 8000ea4:	080011a7 	.word	0x080011a7
 8000ea8:	080011a7 	.word	0x080011a7
 8000eac:	08001057 	.word	0x08001057
 8000eb0:	0800107b 	.word	0x0800107b
 8000eb4:	08001085 	.word	0x08001085
 8000eb8:	0800108f 	.word	0x0800108f
 8000ebc:	08001099 	.word	0x08001099
 8000ec0:	080010a3 	.word	0x080010a3
 8000ec4:	08001107 	.word	0x08001107
 8000ec8:	08001111 	.word	0x08001111
 8000ecc:	0800111b 	.word	0x0800111b
 8000ed0:	08001125 	.word	0x08001125
 8000ed4:	0800112f 	.word	0x0800112f
 8000ed8:	08001139 	.word	0x08001139
 8000edc:	08001143 	.word	0x08001143
 8000ee0:	0800114d 	.word	0x0800114d
 8000ee4:	08001157 	.word	0x08001157
 8000ee8:	08001161 	.word	0x08001161
 8000eec:	080011a7 	.word	0x080011a7
 8000ef0:	080011a7 	.word	0x080011a7
 8000ef4:	080011a7 	.word	0x080011a7
 8000ef8:	080011a7 	.word	0x080011a7
 8000efc:	080011a7 	.word	0x080011a7
 8000f00:	080011a7 	.word	0x080011a7
 8000f04:	080011a7 	.word	0x080011a7
 8000f08:	080011a7 	.word	0x080011a7
 8000f0c:	080011a7 	.word	0x080011a7
 8000f10:	080011a7 	.word	0x080011a7
 8000f14:	080011a7 	.word	0x080011a7
 8000f18:	080011a7 	.word	0x080011a7
 8000f1c:	080011a7 	.word	0x080011a7
 8000f20:	080011a7 	.word	0x080011a7
 8000f24:	080011a7 	.word	0x080011a7
 8000f28:	080011a7 	.word	0x080011a7
 8000f2c:	080011a7 	.word	0x080011a7
 8000f30:	080011a7 	.word	0x080011a7
 8000f34:	080011a7 	.word	0x080011a7
 8000f38:	080011a7 	.word	0x080011a7
 8000f3c:	080011a7 	.word	0x080011a7
 8000f40:	080011a7 	.word	0x080011a7
 8000f44:	080011a7 	.word	0x080011a7
 8000f48:	080011a7 	.word	0x080011a7
 8000f4c:	080011a7 	.word	0x080011a7
 8000f50:	080011a7 	.word	0x080011a7
 8000f54:	080011a7 	.word	0x080011a7
 8000f58:	080011a7 	.word	0x080011a7
 8000f5c:	080011a7 	.word	0x080011a7
 8000f60:	080011a7 	.word	0x080011a7
 8000f64:	080011a7 	.word	0x080011a7
 8000f68:	080011a7 	.word	0x080011a7
 8000f6c:	080011a7 	.word	0x080011a7
 8000f70:	080011a7 	.word	0x080011a7
 8000f74:	080011a7 	.word	0x080011a7
 8000f78:	080011a7 	.word	0x080011a7
 8000f7c:	080011a7 	.word	0x080011a7
 8000f80:	080011a7 	.word	0x080011a7
 8000f84:	080011a7 	.word	0x080011a7
 8000f88:	080011a7 	.word	0x080011a7
 8000f8c:	080011a7 	.word	0x080011a7
 8000f90:	080011a7 	.word	0x080011a7
 8000f94:	080011a7 	.word	0x080011a7
 8000f98:	080011a7 	.word	0x080011a7
 8000f9c:	080011a7 	.word	0x080011a7
 8000fa0:	080011a7 	.word	0x080011a7
 8000fa4:	080011a7 	.word	0x080011a7
 8000fa8:	080011a7 	.word	0x080011a7
 8000fac:	080011a7 	.word	0x080011a7
 8000fb0:	080011a7 	.word	0x080011a7
 8000fb4:	080011a7 	.word	0x080011a7
 8000fb8:	080011a7 	.word	0x080011a7
 8000fbc:	080011a7 	.word	0x080011a7
 8000fc0:	080011a7 	.word	0x080011a7
 8000fc4:	080011a7 	.word	0x080011a7
 8000fc8:	080011a7 	.word	0x080011a7
 8000fcc:	080011a7 	.word	0x080011a7
 8000fd0:	080011a7 	.word	0x080011a7
 8000fd4:	08001063 	.word	0x08001063
 8000fd8:	0800106f 	.word	0x0800106f
 8000fdc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8000fe0:	f280 80e1 	bge.w	80011a6 <FT_CAN_ProcessData+0x4c6>
 8000fe4:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8000fe8:	f6bf ae95 	bge.w	8000d16 <FT_CAN_ProcessData+0x36>
 8000fec:	e0db      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
	{
		case 0x0001: //TPS
			FT_Data_Struct->tps = data;
 8000fee:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
			break;
 8000ff8:	e0d5      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x0002: //MAP
			FT_Data_Struct->map = data;
 8000ffa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			break;
 8001004:	e0cf      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x0003: //IAT
			FT_Data_Struct->iat = data;
 8001006:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			break;
 8001010:	e0c9      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x0004: //ECT
			FT_Data_Struct->ect = data;
 8001012:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	879a      	strh	r2, [r3, #60]	; 0x3c
			break;
 800101a:	e0c4      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x0005: //Oil Pressure
			FT_Data_Struct->oil_pressure = data;
 800101c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			break;
 8001026:	e0be      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x0006: //Fuel Pressure
			FT_Data_Struct->fuel_pressure = data;
 8001028:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			break;
 8001032:	e0b8      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x0007: //Coolant Pressure
			FT_Data_Struct->coolant_pressure = data;
 8001034:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	87da      	strh	r2, [r3, #62]	; 0x3e
			break;
 800103c:	e0b3      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x0011: //Gear
			FT_Data_Struct->gear = data;
 800103e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			break;
 8001048:	e0ad      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x0027: //Exhaust Lambda
			FT_Data_Struct->lambda = data;
 800104a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			break;
 8001054:	e0a7      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x0042: //RPM
			FT_Data_Struct->rpm = data;
 8001056:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			break;
 8001060:	e0a1      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x008C: //Oil Temperature
			FT_Data_Struct->oil_temperature = data;
 8001062:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			break;
 800106c:	e09b      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x008D: //Pit Limit Switch
			FT_Data_Struct->pit_limiter = data;
 800106e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
			break;
 8001078:	e095      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
			break;
#endif

#ifdef FT_CAN_TIMING
		case 0x0043: //Injection Bank A Timing
			FT_Data_Struct->injection_bank_a_time = data;
 800107a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	805a      	strh	r2, [r3, #2]
			break;
 8001082:	e090      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x0044: //Injection Bank B Timing
			FT_Data_Struct->injection_bank_b_time = data;
 8001084:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	809a      	strh	r2, [r3, #4]
			break;
 800108c:	e08b      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x0045: //Injection Bank A Duty Cycle
			FT_Data_Struct->injection_bank_a_duty_cycle = data;
 800108e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	80da      	strh	r2, [r3, #6]
			break;
 8001096:	e086      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x0046: //Injection Bank B Duty Cycle
			FT_Data_Struct->injection_bank_b_duty_cycle = data;
 8001098:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	811a      	strh	r2, [r3, #8]
			break;
 80010a0:	e081      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x0047: //Ignition Advance
			FT_Data_Struct->ignition_advance = data;
 80010a2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	801a      	strh	r2, [r3, #0]
			break;
 80010aa:	e07c      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
			break;
#endif

#ifdef FT_CAN_EXTRA
		case 0x0008: //Launch Mode
			FT_Data_Struct->launch_mode = data;
 80010ac:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	845a      	strh	r2, [r3, #34]	; 0x22
			break;
 80010b4:	e077      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x0009: //Battery Voltage
			FT_Data_Struct->battery_voltage = data;
 80010b6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	819a      	strh	r2, [r3, #12]
			break;
 80010be:	e072      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x000A: //Traction Speed
			FT_Data_Struct->traction_speed = data;
 80010c0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	859a      	strh	r2, [r3, #44]	; 0x2c
			break;
 80010c8:	e06d      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x000B: //Drag Speed
			FT_Data_Struct->drag_speed = data;
 80010ca:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
 80010d2:	e068      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x000C: //Wheel Speed FL
			FT_Data_Struct->wheel_speed_fl = data;
 80010d4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	85da      	strh	r2, [r3, #46]	; 0x2e
			break;
 80010dc:	e063      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x000D: //Wheel Speed FR
			FT_Data_Struct->wheel_speed_fr = data;
 80010de:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	861a      	strh	r2, [r3, #48]	; 0x30
			break;
 80010e6:	e05e      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x000E: //Wheel Speed RL
			FT_Data_Struct->wheel_speed_rl = data;
 80010e8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	865a      	strh	r2, [r3, #50]	; 0x32
			break;
 80010f0:	e059      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x000F: //Wheel Speed RR
			FT_Data_Struct->wheel_speed_rr = data;
 80010f2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	869a      	strh	r2, [r3, #52]	; 0x34
			break;
 80010fa:	e054      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x0010: //Driveshaft RPM
			FT_Data_Struct->driveshaft_rpm = data;
 80010fc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	835a      	strh	r2, [r3, #26]
			break;
 8001104:	e04f      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x0048: //2-Step
			FT_Data_Struct->two_step_signal = data;
 8001106:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	84da      	strh	r2, [r3, #38]	; 0x26
			break;
 800110e:	e04a      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x0049: //3-Step
			FT_Data_Struct->three_step_signal = data;
 8001110:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	851a      	strh	r2, [r3, #40]	; 0x28
			break;
 8001118:	e045      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x004A: //Burnout
			FT_Data_Struct->burnout_signal = data;
 800111a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	849a      	strh	r2, [r3, #36]	; 0x24
			break;
 8001122:	e040      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x004B: //Fuel Cut
			FT_Data_Struct->fuel_cut = data;
 8001124:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	82da      	strh	r2, [r3, #22]
			break;
 800112c:	e03b      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x004C: //Air Conditioning
			FT_Data_Struct->air_conditioning = data;
 800112e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	815a      	strh	r2, [r3, #10]
			break;
 8001136:	e036      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x004D: //ElectroFAN
			FT_Data_Struct->electro_fan = data;
 8001138:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	825a      	strh	r2, [r3, #18]
			break;
 8001140:	e031      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x004E: //Gear Cut
			FT_Data_Struct->gear_cut = data;
 8001142:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	839a      	strh	r2, [r3, #28]
			break;
 800114a:	e02c      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x004F: //Gear Retard
			FT_Data_Struct->gear_retard = data;
 800114c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	83da      	strh	r2, [r3, #30]
			break;
 8001154:	e027      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x0050: //Gear Sensor Voltage
			FT_Data_Struct->gear_sensor_voltage = data;
 8001156:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	841a      	strh	r2, [r3, #32]
			break;
 800115e:	e022      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x0051: //Lambda Meter (Average)
			FT_Data_Struct->lambda_average = data;
 8001160:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	829a      	strh	r2, [r3, #20]
			break;
 8001168:	e01d      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x0138: //Battery Temperature
			FT_Data_Struct->battery_temperature = data;
 800116a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	81da      	strh	r2, [r3, #14]
			break;
 8001172:	e018      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x014A: //Self Dial Time
			FT_Data_Struct->self_dial = data;
 8001174:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	875a      	strh	r2, [r3, #58]	; 0x3a
			break;
 800117c:	e013      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x0150: //Total Fuel Flow
			FT_Data_Struct->total_fuel_flow = data;
 800117e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	831a      	strh	r2, [r3, #24]
			break;
 8001186:	e00e      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x0151: //Brake Pressure
			FT_Data_Struct->brake_pressure = data;
 8001188:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	821a      	strh	r2, [r3, #16]
			break;
 8001190:	e009      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x0152: //Generic Outputs State
			FT_Data_Struct->generic_outputs_state = data;
 8001192:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	871a      	strh	r2, [r3, #56]	; 0x38
			break;
 800119a:	e004      	b.n	80011a6 <FT_CAN_ProcessData+0x4c6>
		case 0x0153: //Day/Night State
			FT_Data_Struct->day_night_state = data;
 800119c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	86da      	strh	r2, [r3, #54]	; 0x36
			break;
 80011a4:	bf00      	nop
	}
#endif

	FT_CAN_ProcessCustomData(id, data);
 80011a6:	89ba      	ldrh	r2, [r7, #12]
 80011a8:	89fb      	ldrh	r3, [r7, #14]
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 f805 	bl	80011bc <FT_CAN_ProcessCustomData>
 80011b2:	e000      	b.n	80011b6 <FT_CAN_ProcessData+0x4d6>
		return;
 80011b4:	bf00      	nop
}
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <FT_CAN_ProcessCustomData>:

__weak void FT_CAN_ProcessCustomData(uint16_t id, uint16_t data)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	460a      	mov	r2, r1
 80011c6:	80fb      	strh	r3, [r7, #6]
 80011c8:	4613      	mov	r3, r2
 80011ca:	80bb      	strh	r3, [r7, #4]
	UNUSED(id);
	UNUSED(data);
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011dc:	f005 fd80 	bl	8006ce0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e0:	f000 f8f8 	bl	80013d4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80011e4:	f000 f96e 	bl	80014c4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e8:	f000 fc00 	bl	80019ec <MX_GPIO_Init>
  MX_DMA_Init();
 80011ec:	f000 fbc6 	bl	800197c <MX_DMA_Init>
  MX_IWDG_Init();
 80011f0:	f000 fb24 	bl	800183c <MX_IWDG_Init>
  MX_SDIO_SD_Init();
 80011f4:	f000 fb6c 	bl	80018d0 <MX_SDIO_SD_Init>
  MX_ADC1_Init();
 80011f8:	f000 f98c 	bl	8001514 <MX_ADC1_Init>
  MX_RTC_Init();
 80011fc:	f000 fb38 	bl	8001870 <MX_RTC_Init>
  MX_FATFS_Init();
 8001200:	f010 fa48 	bl	8011694 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001204:	f016 fe7a 	bl	8017efc <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 8001208:	f000 fa1c 	bl	8001644 <MX_ADC2_Init>
  MX_CAN1_Init();
 800120c:	f000 fab2 	bl	8001774 <MX_CAN1_Init>
  MX_I2C1_Init();
 8001210:	f000 fae6 	bl	80017e0 <MX_I2C1_Init>
  MX_TIM7_Init();
 8001214:	f000 fb7c 	bl	8001910 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  Principal_Init(&hcan1, &hi2c1, &htim7);
 8001218:	4a61      	ldr	r2, [pc, #388]	; (80013a0 <main+0x1c8>)
 800121a:	4962      	ldr	r1, [pc, #392]	; (80013a4 <main+0x1cc>)
 800121c:	4862      	ldr	r0, [pc, #392]	; (80013a8 <main+0x1d0>)
 800121e:	f002 fae9 	bl	80037f4 <Principal_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Checks if data is being saved and starts saving if conditions are met
	  if((flagDatalogger == DL_NO_SAVE) || (flagDatalogger == DL_BUT_PRESS))
 8001222:	4b62      	ldr	r3, [pc, #392]	; (80013ac <main+0x1d4>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d003      	beq.n	8001232 <main+0x5a>
 800122a:	4b60      	ldr	r3, [pc, #384]	; (80013ac <main+0x1d4>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b03      	cmp	r3, #3
 8001230:	d105      	bne.n	800123e <main+0x66>
		  Principal_Datalogger_Start(dirString, logString, &dirStruct, &fileStruct);
 8001232:	4b5f      	ldr	r3, [pc, #380]	; (80013b0 <main+0x1d8>)
 8001234:	4a5f      	ldr	r2, [pc, #380]	; (80013b4 <main+0x1dc>)
 8001236:	4960      	ldr	r1, [pc, #384]	; (80013b8 <main+0x1e0>)
 8001238:	4860      	ldr	r0, [pc, #384]	; (80013bc <main+0x1e4>)
 800123a:	f004 fd59 	bl	8005cf0 <Principal_Datalogger_Start>

	  //Checks card detect pin level change for datalogger initialization or deinitialization
	  Principal_Card_Detection(&fatfsStruct, &dirStruct, &fileStruct);
 800123e:	4a5c      	ldr	r2, [pc, #368]	; (80013b0 <main+0x1d8>)
 8001240:	495c      	ldr	r1, [pc, #368]	; (80013b4 <main+0x1dc>)
 8001242:	485f      	ldr	r0, [pc, #380]	; (80013c0 <main+0x1e8>)
 8001244:	f004 ff7a 	bl	800613c <Principal_Card_Detection>
	  //Checks USB cable connection, if connected will disable logging
//	  if((HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_SET) && (flagDatalogger == DL_SAVE))
//		  Principal_Datalogger_Finish(&dirStruct, &fileStruct);

	  //Analog inputs 1-4 CAN message
	  if((accMsg[ANALOG_1_4] >= perMsg[ANALOG_1_4]) && (perMsg[ANALOG_1_4] != MSG_DISABLED))
 8001248:	4b5e      	ldr	r3, [pc, #376]	; (80013c4 <main+0x1ec>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a5e      	ldr	r2, [pc, #376]	; (80013c8 <main+0x1f0>)
 800124e:	8812      	ldrh	r2, [r2, #0]
 8001250:	4293      	cmp	r3, r2
 8001252:	d30e      	bcc.n	8001272 <main+0x9a>
 8001254:	4b5c      	ldr	r3, [pc, #368]	; (80013c8 <main+0x1f0>)
 8001256:	881b      	ldrh	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d00a      	beq.n	8001272 <main+0x9a>
	  {
		  accMsg[ANALOG_1_4] -= perMsg[ANALOG_1_4];
 800125c:	4b59      	ldr	r3, [pc, #356]	; (80013c4 <main+0x1ec>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a59      	ldr	r2, [pc, #356]	; (80013c8 <main+0x1f0>)
 8001262:	8812      	ldrh	r2, [r2, #0]
 8001264:	1a9b      	subs	r3, r3, r2
 8001266:	4a57      	ldr	r2, [pc, #348]	; (80013c4 <main+0x1ec>)
 8001268:	6013      	str	r3, [r2, #0]
		  Principal_Transmit_Msg(&hcan1, ANALOG_1_4);
 800126a:	2100      	movs	r1, #0
 800126c:	484e      	ldr	r0, [pc, #312]	; (80013a8 <main+0x1d0>)
 800126e:	f002 fa83 	bl	8003778 <Principal_Transmit_Msg>
	  }

	  //Analog inputs 5-8 CAN message
	  if((accMsg[ANALOG_5_8] >= perMsg[ANALOG_5_8]) && (perMsg[ANALOG_5_8] != MSG_DISABLED))
 8001272:	4b54      	ldr	r3, [pc, #336]	; (80013c4 <main+0x1ec>)
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	4a54      	ldr	r2, [pc, #336]	; (80013c8 <main+0x1f0>)
 8001278:	8852      	ldrh	r2, [r2, #2]
 800127a:	4293      	cmp	r3, r2
 800127c:	d30e      	bcc.n	800129c <main+0xc4>
 800127e:	4b52      	ldr	r3, [pc, #328]	; (80013c8 <main+0x1f0>)
 8001280:	885b      	ldrh	r3, [r3, #2]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d00a      	beq.n	800129c <main+0xc4>
	  {
		  accMsg[ANALOG_5_8] -= perMsg[ANALOG_5_8];
 8001286:	4b4f      	ldr	r3, [pc, #316]	; (80013c4 <main+0x1ec>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	4a4f      	ldr	r2, [pc, #316]	; (80013c8 <main+0x1f0>)
 800128c:	8852      	ldrh	r2, [r2, #2]
 800128e:	1a9b      	subs	r3, r3, r2
 8001290:	4a4c      	ldr	r2, [pc, #304]	; (80013c4 <main+0x1ec>)
 8001292:	6053      	str	r3, [r2, #4]
		  Principal_Transmit_Msg(&hcan1, ANALOG_5_8);
 8001294:	2101      	movs	r1, #1
 8001296:	4844      	ldr	r0, [pc, #272]	; (80013a8 <main+0x1d0>)
 8001298:	f002 fa6e 	bl	8003778 <Principal_Transmit_Msg>
	  }

	  //Analog inputs 9-12 CAN message
	  if((accMsg[ANALOG_9_12] >= perMsg[ANALOG_9_12]) && (perMsg[ANALOG_9_12] != MSG_DISABLED))
 800129c:	4b49      	ldr	r3, [pc, #292]	; (80013c4 <main+0x1ec>)
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	4a49      	ldr	r2, [pc, #292]	; (80013c8 <main+0x1f0>)
 80012a2:	8892      	ldrh	r2, [r2, #4]
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d30e      	bcc.n	80012c6 <main+0xee>
 80012a8:	4b47      	ldr	r3, [pc, #284]	; (80013c8 <main+0x1f0>)
 80012aa:	889b      	ldrh	r3, [r3, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00a      	beq.n	80012c6 <main+0xee>
	  {
		  accMsg[ANALOG_9_12] -= perMsg[ANALOG_9_12];
 80012b0:	4b44      	ldr	r3, [pc, #272]	; (80013c4 <main+0x1ec>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	4a44      	ldr	r2, [pc, #272]	; (80013c8 <main+0x1f0>)
 80012b6:	8892      	ldrh	r2, [r2, #4]
 80012b8:	1a9b      	subs	r3, r3, r2
 80012ba:	4a42      	ldr	r2, [pc, #264]	; (80013c4 <main+0x1ec>)
 80012bc:	6093      	str	r3, [r2, #8]
		  Principal_Transmit_Msg(&hcan1, ANALOG_9_12);
 80012be:	2102      	movs	r1, #2
 80012c0:	4839      	ldr	r0, [pc, #228]	; (80013a8 <main+0x1d0>)
 80012c2:	f002 fa59 	bl	8003778 <Principal_Transmit_Msg>
	  }

	  //RTC, both date and time
	  if((accMsg[RTC_MSG] >= perMsg[RTC_MSG]) && (perMsg[RTC_MSG] != MSG_DISABLED))
 80012c6:	4b3f      	ldr	r3, [pc, #252]	; (80013c4 <main+0x1ec>)
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	4a3f      	ldr	r2, [pc, #252]	; (80013c8 <main+0x1f0>)
 80012cc:	88d2      	ldrh	r2, [r2, #6]
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d30e      	bcc.n	80012f0 <main+0x118>
 80012d2:	4b3d      	ldr	r3, [pc, #244]	; (80013c8 <main+0x1f0>)
 80012d4:	88db      	ldrh	r3, [r3, #6]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d00a      	beq.n	80012f0 <main+0x118>
	  {
		  accMsg[RTC_MSG] -= perMsg[RTC_MSG];
 80012da:	4b3a      	ldr	r3, [pc, #232]	; (80013c4 <main+0x1ec>)
 80012dc:	68db      	ldr	r3, [r3, #12]
 80012de:	4a3a      	ldr	r2, [pc, #232]	; (80013c8 <main+0x1f0>)
 80012e0:	88d2      	ldrh	r2, [r2, #6]
 80012e2:	1a9b      	subs	r3, r3, r2
 80012e4:	4a37      	ldr	r2, [pc, #220]	; (80013c4 <main+0x1ec>)
 80012e6:	60d3      	str	r3, [r2, #12]
		  Principal_Transmit_Msg(&hcan1, RTC_MSG);
 80012e8:	2103      	movs	r1, #3
 80012ea:	482f      	ldr	r0, [pc, #188]	; (80013a8 <main+0x1d0>)
 80012ec:	f002 fa44 	bl	8003778 <Principal_Transmit_Msg>
	  }

	  //Inputs and datalogger verify CAN message
	  if((accMsg[VERIFY_MSG] >= perMsg[VERIFY_MSG]) && (perMsg[VERIFY_MSG] != MSG_DISABLED))
 80012f0:	4b34      	ldr	r3, [pc, #208]	; (80013c4 <main+0x1ec>)
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	4a34      	ldr	r2, [pc, #208]	; (80013c8 <main+0x1f0>)
 80012f6:	8912      	ldrh	r2, [r2, #8]
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d30e      	bcc.n	800131a <main+0x142>
 80012fc:	4b32      	ldr	r3, [pc, #200]	; (80013c8 <main+0x1f0>)
 80012fe:	891b      	ldrh	r3, [r3, #8]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d00a      	beq.n	800131a <main+0x142>
	  {
		  accMsg[VERIFY_MSG] -= perMsg[VERIFY_MSG];
 8001304:	4b2f      	ldr	r3, [pc, #188]	; (80013c4 <main+0x1ec>)
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	4a2f      	ldr	r2, [pc, #188]	; (80013c8 <main+0x1f0>)
 800130a:	8912      	ldrh	r2, [r2, #8]
 800130c:	1a9b      	subs	r3, r3, r2
 800130e:	4a2d      	ldr	r2, [pc, #180]	; (80013c4 <main+0x1ec>)
 8001310:	6113      	str	r3, [r2, #16]
		  Principal_Transmit_Msg(&hcan1, VERIFY_MSG);
 8001312:	2104      	movs	r1, #4
 8001314:	4824      	ldr	r0, [pc, #144]	; (80013a8 <main+0x1d0>)
 8001316:	f002 fa2f 	bl	8003778 <Principal_Transmit_Msg>
	  }

	  //ECU saved data (no transmission)
	  if((accMsg[ECU_SAVE] >= perMsg[ECU_SAVE]) && (perMsg[ECU_SAVE] != MSG_DISABLED))
 800131a:	4b2a      	ldr	r3, [pc, #168]	; (80013c4 <main+0x1ec>)
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	4a2a      	ldr	r2, [pc, #168]	; (80013c8 <main+0x1f0>)
 8001320:	8992      	ldrh	r2, [r2, #12]
 8001322:	4293      	cmp	r3, r2
 8001324:	d30e      	bcc.n	8001344 <main+0x16c>
 8001326:	4b28      	ldr	r3, [pc, #160]	; (80013c8 <main+0x1f0>)
 8001328:	899b      	ldrh	r3, [r3, #12]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d00a      	beq.n	8001344 <main+0x16c>
	  {
		  accMsg[ECU_SAVE] -= perMsg[ECU_SAVE];
 800132e:	4b25      	ldr	r3, [pc, #148]	; (80013c4 <main+0x1ec>)
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	4a25      	ldr	r2, [pc, #148]	; (80013c8 <main+0x1f0>)
 8001334:	8992      	ldrh	r2, [r2, #12]
 8001336:	1a9b      	subs	r3, r3, r2
 8001338:	4a22      	ldr	r2, [pc, #136]	; (80013c4 <main+0x1ec>)
 800133a:	6193      	str	r3, [r2, #24]
		  Principal_Transmit_Msg(&hcan1, ECU_SAVE);
 800133c:	2106      	movs	r1, #6
 800133e:	481a      	ldr	r0, [pc, #104]	; (80013a8 <main+0x1d0>)
 8001340:	f002 fa1a 	bl	8003778 <Principal_Transmit_Msg>
	  }

	  //PDM saved data (no transmission)
	  if((accMsg[PDM_SAVE] >= perMsg[PDM_SAVE]) && (perMsg[PDM_SAVE] != MSG_DISABLED))
 8001344:	4b1f      	ldr	r3, [pc, #124]	; (80013c4 <main+0x1ec>)
 8001346:	69db      	ldr	r3, [r3, #28]
 8001348:	4a1f      	ldr	r2, [pc, #124]	; (80013c8 <main+0x1f0>)
 800134a:	89d2      	ldrh	r2, [r2, #14]
 800134c:	4293      	cmp	r3, r2
 800134e:	d30e      	bcc.n	800136e <main+0x196>
 8001350:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <main+0x1f0>)
 8001352:	89db      	ldrh	r3, [r3, #14]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d00a      	beq.n	800136e <main+0x196>
	  {
		  accMsg[PDM_SAVE] -= perMsg[PDM_SAVE];
 8001358:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <main+0x1ec>)
 800135a:	69db      	ldr	r3, [r3, #28]
 800135c:	4a1a      	ldr	r2, [pc, #104]	; (80013c8 <main+0x1f0>)
 800135e:	89d2      	ldrh	r2, [r2, #14]
 8001360:	1a9b      	subs	r3, r3, r2
 8001362:	4a18      	ldr	r2, [pc, #96]	; (80013c4 <main+0x1ec>)
 8001364:	61d3      	str	r3, [r2, #28]
		  Principal_Transmit_Msg(&hcan1, PDM_SAVE);
 8001366:	2107      	movs	r1, #7
 8001368:	480f      	ldr	r0, [pc, #60]	; (80013a8 <main+0x1d0>)
 800136a:	f002 fa05 	bl	8003778 <Principal_Transmit_Msg>
	  }

	  if(accMsg[VERIFY_LEDS] >= MSG_FREQ_5HZ)
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <main+0x1ec>)
 8001370:	6a1b      	ldr	r3, [r3, #32]
 8001372:	2bc7      	cmp	r3, #199	; 0xc7
 8001374:	d906      	bls.n	8001384 <main+0x1ac>
	  {
		  accMsg[VERIFY_LEDS] -= MSG_FREQ_5HZ;
 8001376:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <main+0x1ec>)
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	3bc8      	subs	r3, #200	; 0xc8
 800137c:	4a11      	ldr	r2, [pc, #68]	; (80013c4 <main+0x1ec>)
 800137e:	6213      	str	r3, [r2, #32]
		  Principal_Verify_LEDs();
 8001380:	f000 fe8c 	bl	800209c <Principal_Verify_LEDs>
	  }

	  if((verifyCAN != 0) && (flagDatalogger != DL_ERROR))
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <main+0x1f4>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	f43f af4a 	beq.w	8001222 <main+0x4a>
 800138e:	4b07      	ldr	r3, [pc, #28]	; (80013ac <main+0x1d4>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b04      	cmp	r3, #4
 8001394:	f43f af45 	beq.w	8001222 <main+0x4a>
		  HAL_IWDG_Refresh(&hiwdg);
 8001398:	480d      	ldr	r0, [pc, #52]	; (80013d0 <main+0x1f8>)
 800139a:	f008 fe9a 	bl	800a0d2 <HAL_IWDG_Refresh>
	  if((flagDatalogger == DL_NO_SAVE) || (flagDatalogger == DL_BUT_PRESS))
 800139e:	e740      	b.n	8001222 <main+0x4a>
 80013a0:	200004f0 	.word	0x200004f0
 80013a4:	2000032c 	.word	0x2000032c
 80013a8:	20000304 	.word	0x20000304
 80013ac:	20012712 	.word	0x20012712
 80013b0:	200116a8 	.word	0x200116a8
 80013b4:	20010640 	.word	0x20010640
 80013b8:	200126e0 	.word	0x200126e0
 80013bc:	200126d4 	.word	0x200126d4
 80013c0:	20010670 	.word	0x20010670
 80013c4:	20012774 	.word	0x20012774
 80013c8:	2001273c 	.word	0x2001273c
 80013cc:	2001279c 	.word	0x2001279c
 80013d0:	20000380 	.word	0x20000380

080013d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b094      	sub	sp, #80	; 0x50
 80013d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	2234      	movs	r2, #52	; 0x34
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f017 fb30 	bl	8018a48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e8:	f107 0308 	add.w	r3, r7, #8
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f8:	2300      	movs	r3, #0
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	4b2f      	ldr	r3, [pc, #188]	; (80014bc <SystemClock_Config+0xe8>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	4a2e      	ldr	r2, [pc, #184]	; (80014bc <SystemClock_Config+0xe8>)
 8001402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001406:	6413      	str	r3, [r2, #64]	; 0x40
 8001408:	4b2c      	ldr	r3, [pc, #176]	; (80014bc <SystemClock_Config+0xe8>)
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001414:	2300      	movs	r3, #0
 8001416:	603b      	str	r3, [r7, #0]
 8001418:	4b29      	ldr	r3, [pc, #164]	; (80014c0 <SystemClock_Config+0xec>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a28      	ldr	r2, [pc, #160]	; (80014c0 <SystemClock_Config+0xec>)
 800141e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b26      	ldr	r3, [pc, #152]	; (80014c0 <SystemClock_Config+0xec>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800142c:	603b      	str	r3, [r7, #0]
 800142e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8001430:	230d      	movs	r3, #13
 8001432:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001434:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001438:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800143a:	2301      	movs	r3, #1
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800143e:	2301      	movs	r3, #1
 8001440:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001442:	2302      	movs	r3, #2
 8001444:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001446:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800144a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800144c:	2308      	movs	r3, #8
 800144e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001450:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001454:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001456:	2302      	movs	r3, #2
 8001458:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800145a:	2306      	movs	r3, #6
 800145c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800145e:	2302      	movs	r3, #2
 8001460:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001462:	f107 031c 	add.w	r3, r7, #28
 8001466:	4618      	mov	r0, r3
 8001468:	f00a ffea 	bl	800c440 <HAL_RCC_OscConfig>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001472:	f000 fb61 	bl	8001b38 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001476:	f00a f933 	bl	800b6e0 <HAL_PWREx_EnableOverDrive>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001480:	f000 fb5a 	bl	8001b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001484:	230f      	movs	r3, #15
 8001486:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001488:	2302      	movs	r3, #2
 800148a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800148c:	2300      	movs	r3, #0
 800148e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001490:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001494:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001496:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800149a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800149c:	f107 0308 	add.w	r3, r7, #8
 80014a0:	2105      	movs	r1, #5
 80014a2:	4618      	mov	r0, r3
 80014a4:	f00a f96c 	bl	800b780 <HAL_RCC_ClockConfig>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <SystemClock_Config+0xde>
  {
    Error_Handler();
 80014ae:	f000 fb43 	bl	8001b38 <Error_Handler>
  }
}
 80014b2:	bf00      	nop
 80014b4:	3750      	adds	r7, #80	; 0x50
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40007000 	.word	0x40007000

080014c4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b098      	sub	sp, #96	; 0x60
 80014c8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	225c      	movs	r2, #92	; 0x5c
 80014ce:	2100      	movs	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f017 fab9 	bl	8018a48 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80014d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014da:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 8;
 80014dc:	2308      	movs	r3, #8
 80014de:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80014e0:	23c0      	movs	r3, #192	; 0xc0
 80014e2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80014e4:	2302      	movs	r3, #2
 80014e6:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 80014e8:	2304      	movs	r3, #4
 80014ea:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80014ec:	2301      	movs	r3, #1
 80014ee:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 80014f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80014f4:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80014f6:	2300      	movs	r3, #0
 80014f8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	4618      	mov	r0, r3
 80014fe:	f00a fa45 	bl	800b98c <HAL_RCCEx_PeriphCLKConfig>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <PeriphCommonClock_Config+0x48>
  {
    Error_Handler();
 8001508:	f000 fb16 	bl	8001b38 <Error_Handler>
  }
}
 800150c:	bf00      	nop
 800150e:	3760      	adds	r7, #96	; 0x60
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800151a:	463b      	mov	r3, r7
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001526:	4b44      	ldr	r3, [pc, #272]	; (8001638 <MX_ADC1_Init+0x124>)
 8001528:	4a44      	ldr	r2, [pc, #272]	; (800163c <MX_ADC1_Init+0x128>)
 800152a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800152c:	4b42      	ldr	r3, [pc, #264]	; (8001638 <MX_ADC1_Init+0x124>)
 800152e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001532:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001534:	4b40      	ldr	r3, [pc, #256]	; (8001638 <MX_ADC1_Init+0x124>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800153a:	4b3f      	ldr	r3, [pc, #252]	; (8001638 <MX_ADC1_Init+0x124>)
 800153c:	2201      	movs	r2, #1
 800153e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001540:	4b3d      	ldr	r3, [pc, #244]	; (8001638 <MX_ADC1_Init+0x124>)
 8001542:	2201      	movs	r2, #1
 8001544:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001546:	4b3c      	ldr	r3, [pc, #240]	; (8001638 <MX_ADC1_Init+0x124>)
 8001548:	2200      	movs	r2, #0
 800154a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800154e:	4b3a      	ldr	r3, [pc, #232]	; (8001638 <MX_ADC1_Init+0x124>)
 8001550:	2200      	movs	r2, #0
 8001552:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001554:	4b38      	ldr	r3, [pc, #224]	; (8001638 <MX_ADC1_Init+0x124>)
 8001556:	4a3a      	ldr	r2, [pc, #232]	; (8001640 <MX_ADC1_Init+0x12c>)
 8001558:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800155a:	4b37      	ldr	r3, [pc, #220]	; (8001638 <MX_ADC1_Init+0x124>)
 800155c:	2200      	movs	r2, #0
 800155e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8001560:	4b35      	ldr	r3, [pc, #212]	; (8001638 <MX_ADC1_Init+0x124>)
 8001562:	2206      	movs	r2, #6
 8001564:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001566:	4b34      	ldr	r3, [pc, #208]	; (8001638 <MX_ADC1_Init+0x124>)
 8001568:	2201      	movs	r2, #1
 800156a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800156e:	4b32      	ldr	r3, [pc, #200]	; (8001638 <MX_ADC1_Init+0x124>)
 8001570:	2201      	movs	r2, #1
 8001572:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001574:	4830      	ldr	r0, [pc, #192]	; (8001638 <MX_ADC1_Init+0x124>)
 8001576:	f005 fc49 	bl	8006e0c <HAL_ADC_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001580:	f000 fada 	bl	8001b38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001584:	2306      	movs	r3, #6
 8001586:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001588:	2301      	movs	r3, #1
 800158a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800158c:	2307      	movs	r3, #7
 800158e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001590:	463b      	mov	r3, r7
 8001592:	4619      	mov	r1, r3
 8001594:	4828      	ldr	r0, [pc, #160]	; (8001638 <MX_ADC1_Init+0x124>)
 8001596:	f005 fdab 	bl	80070f0 <HAL_ADC_ConfigChannel>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80015a0:	f000 faca 	bl	8001b38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80015a4:	2307      	movs	r3, #7
 80015a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80015a8:	2302      	movs	r3, #2
 80015aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ac:	463b      	mov	r3, r7
 80015ae:	4619      	mov	r1, r3
 80015b0:	4821      	ldr	r0, [pc, #132]	; (8001638 <MX_ADC1_Init+0x124>)
 80015b2:	f005 fd9d 	bl	80070f0 <HAL_ADC_ConfigChannel>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80015bc:	f000 fabc 	bl	8001b38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80015c0:	230e      	movs	r3, #14
 80015c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80015c4:	2303      	movs	r3, #3
 80015c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015c8:	463b      	mov	r3, r7
 80015ca:	4619      	mov	r1, r3
 80015cc:	481a      	ldr	r0, [pc, #104]	; (8001638 <MX_ADC1_Init+0x124>)
 80015ce:	f005 fd8f 	bl	80070f0 <HAL_ADC_ConfigChannel>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80015d8:	f000 faae 	bl	8001b38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80015dc:	230f      	movs	r3, #15
 80015de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80015e0:	2304      	movs	r3, #4
 80015e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015e4:	463b      	mov	r3, r7
 80015e6:	4619      	mov	r1, r3
 80015e8:	4813      	ldr	r0, [pc, #76]	; (8001638 <MX_ADC1_Init+0x124>)
 80015ea:	f005 fd81 	bl	80070f0 <HAL_ADC_ConfigChannel>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80015f4:	f000 faa0 	bl	8001b38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80015f8:	2308      	movs	r3, #8
 80015fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80015fc:	2305      	movs	r3, #5
 80015fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001600:	463b      	mov	r3, r7
 8001602:	4619      	mov	r1, r3
 8001604:	480c      	ldr	r0, [pc, #48]	; (8001638 <MX_ADC1_Init+0x124>)
 8001606:	f005 fd73 	bl	80070f0 <HAL_ADC_ConfigChannel>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001610:	f000 fa92 	bl	8001b38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001614:	2309      	movs	r3, #9
 8001616:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001618:	2306      	movs	r3, #6
 800161a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800161c:	463b      	mov	r3, r7
 800161e:	4619      	mov	r1, r3
 8001620:	4805      	ldr	r0, [pc, #20]	; (8001638 <MX_ADC1_Init+0x124>)
 8001622:	f005 fd65 	bl	80070f0 <HAL_ADC_ConfigChannel>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 800162c:	f000 fa84 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001630:	bf00      	nop
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	200001b4 	.word	0x200001b4
 800163c:	40012000 	.word	0x40012000
 8001640:	0f000001 	.word	0x0f000001

08001644 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800164a:	463b      	mov	r3, r7
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001656:	4b44      	ldr	r3, [pc, #272]	; (8001768 <MX_ADC2_Init+0x124>)
 8001658:	4a44      	ldr	r2, [pc, #272]	; (800176c <MX_ADC2_Init+0x128>)
 800165a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800165c:	4b42      	ldr	r3, [pc, #264]	; (8001768 <MX_ADC2_Init+0x124>)
 800165e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001662:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001664:	4b40      	ldr	r3, [pc, #256]	; (8001768 <MX_ADC2_Init+0x124>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800166a:	4b3f      	ldr	r3, [pc, #252]	; (8001768 <MX_ADC2_Init+0x124>)
 800166c:	2201      	movs	r2, #1
 800166e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001670:	4b3d      	ldr	r3, [pc, #244]	; (8001768 <MX_ADC2_Init+0x124>)
 8001672:	2201      	movs	r2, #1
 8001674:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001676:	4b3c      	ldr	r3, [pc, #240]	; (8001768 <MX_ADC2_Init+0x124>)
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800167e:	4b3a      	ldr	r3, [pc, #232]	; (8001768 <MX_ADC2_Init+0x124>)
 8001680:	2200      	movs	r2, #0
 8001682:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001684:	4b38      	ldr	r3, [pc, #224]	; (8001768 <MX_ADC2_Init+0x124>)
 8001686:	4a3a      	ldr	r2, [pc, #232]	; (8001770 <MX_ADC2_Init+0x12c>)
 8001688:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800168a:	4b37      	ldr	r3, [pc, #220]	; (8001768 <MX_ADC2_Init+0x124>)
 800168c:	2200      	movs	r2, #0
 800168e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 6;
 8001690:	4b35      	ldr	r3, [pc, #212]	; (8001768 <MX_ADC2_Init+0x124>)
 8001692:	2206      	movs	r2, #6
 8001694:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001696:	4b34      	ldr	r3, [pc, #208]	; (8001768 <MX_ADC2_Init+0x124>)
 8001698:	2201      	movs	r2, #1
 800169a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800169e:	4b32      	ldr	r3, [pc, #200]	; (8001768 <MX_ADC2_Init+0x124>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80016a4:	4830      	ldr	r0, [pc, #192]	; (8001768 <MX_ADC2_Init+0x124>)
 80016a6:	f005 fbb1 	bl	8006e0c <HAL_ADC_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80016b0:	f000 fa42 	bl	8001b38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016b8:	2301      	movs	r3, #1
 80016ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80016bc:	2307      	movs	r3, #7
 80016be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80016c0:	463b      	mov	r3, r7
 80016c2:	4619      	mov	r1, r3
 80016c4:	4828      	ldr	r0, [pc, #160]	; (8001768 <MX_ADC2_Init+0x124>)
 80016c6:	f005 fd13 	bl	80070f0 <HAL_ADC_ConfigChannel>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80016d0:	f000 fa32 	bl	8001b38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80016d4:	2301      	movs	r3, #1
 80016d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80016d8:	2302      	movs	r3, #2
 80016da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80016dc:	463b      	mov	r3, r7
 80016de:	4619      	mov	r1, r3
 80016e0:	4821      	ldr	r0, [pc, #132]	; (8001768 <MX_ADC2_Init+0x124>)
 80016e2:	f005 fd05 	bl	80070f0 <HAL_ADC_ConfigChannel>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80016ec:	f000 fa24 	bl	8001b38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80016f0:	2302      	movs	r3, #2
 80016f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80016f4:	2303      	movs	r3, #3
 80016f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80016f8:	463b      	mov	r3, r7
 80016fa:	4619      	mov	r1, r3
 80016fc:	481a      	ldr	r0, [pc, #104]	; (8001768 <MX_ADC2_Init+0x124>)
 80016fe:	f005 fcf7 	bl	80070f0 <HAL_ADC_ConfigChannel>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8001708:	f000 fa16 	bl	8001b38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800170c:	2303      	movs	r3, #3
 800170e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001710:	2304      	movs	r3, #4
 8001712:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001714:	463b      	mov	r3, r7
 8001716:	4619      	mov	r1, r3
 8001718:	4813      	ldr	r0, [pc, #76]	; (8001768 <MX_ADC2_Init+0x124>)
 800171a:	f005 fce9 	bl	80070f0 <HAL_ADC_ConfigChannel>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8001724:	f000 fa08 	bl	8001b38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001728:	2304      	movs	r3, #4
 800172a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800172c:	2305      	movs	r3, #5
 800172e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001730:	463b      	mov	r3, r7
 8001732:	4619      	mov	r1, r3
 8001734:	480c      	ldr	r0, [pc, #48]	; (8001768 <MX_ADC2_Init+0x124>)
 8001736:	f005 fcdb 	bl	80070f0 <HAL_ADC_ConfigChannel>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8001740:	f000 f9fa 	bl	8001b38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001744:	2305      	movs	r3, #5
 8001746:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001748:	2306      	movs	r3, #6
 800174a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800174c:	463b      	mov	r3, r7
 800174e:	4619      	mov	r1, r3
 8001750:	4805      	ldr	r0, [pc, #20]	; (8001768 <MX_ADC2_Init+0x124>)
 8001752:	f005 fccd 	bl	80070f0 <HAL_ADC_ConfigChannel>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 800175c:	f000 f9ec 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001760:	bf00      	nop
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	200001fc 	.word	0x200001fc
 800176c:	40012100 	.word	0x40012100
 8001770:	0f000001 	.word	0x0f000001

08001774 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001778:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <MX_CAN1_Init+0x64>)
 800177a:	4a18      	ldr	r2, [pc, #96]	; (80017dc <MX_CAN1_Init+0x68>)
 800177c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 800177e:	4b16      	ldr	r3, [pc, #88]	; (80017d8 <MX_CAN1_Init+0x64>)
 8001780:	2205      	movs	r2, #5
 8001782:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001784:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <MX_CAN1_Init+0x64>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_4TQ;
 800178a:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <MX_CAN1_Init+0x64>)
 800178c:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8001790:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 8001792:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <MX_CAN1_Init+0x64>)
 8001794:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001798:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800179a:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <MX_CAN1_Init+0x64>)
 800179c:	2200      	movs	r2, #0
 800179e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80017a0:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <MX_CAN1_Init+0x64>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80017a6:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <MX_CAN1_Init+0x64>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80017ac:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <MX_CAN1_Init+0x64>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80017b2:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <MX_CAN1_Init+0x64>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80017b8:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <MX_CAN1_Init+0x64>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80017be:	4b06      	ldr	r3, [pc, #24]	; (80017d8 <MX_CAN1_Init+0x64>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80017c4:	4804      	ldr	r0, [pc, #16]	; (80017d8 <MX_CAN1_Init+0x64>)
 80017c6:	f005 ff43 	bl	8007650 <HAL_CAN_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80017d0:	f000 f9b2 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20000304 	.word	0x20000304
 80017dc:	40006400 	.word	0x40006400

080017e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017e4:	4b12      	ldr	r3, [pc, #72]	; (8001830 <MX_I2C1_Init+0x50>)
 80017e6:	4a13      	ldr	r2, [pc, #76]	; (8001834 <MX_I2C1_Init+0x54>)
 80017e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80017ea:	4b11      	ldr	r3, [pc, #68]	; (8001830 <MX_I2C1_Init+0x50>)
 80017ec:	4a12      	ldr	r2, [pc, #72]	; (8001838 <MX_I2C1_Init+0x58>)
 80017ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017f0:	4b0f      	ldr	r3, [pc, #60]	; (8001830 <MX_I2C1_Init+0x50>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017f6:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <MX_I2C1_Init+0x50>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <MX_I2C1_Init+0x50>)
 80017fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001802:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001804:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <MX_I2C1_Init+0x50>)
 8001806:	2200      	movs	r2, #0
 8001808:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800180a:	4b09      	ldr	r3, [pc, #36]	; (8001830 <MX_I2C1_Init+0x50>)
 800180c:	2200      	movs	r2, #0
 800180e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001810:	4b07      	ldr	r3, [pc, #28]	; (8001830 <MX_I2C1_Init+0x50>)
 8001812:	2200      	movs	r2, #0
 8001814:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <MX_I2C1_Init+0x50>)
 8001818:	2200      	movs	r2, #0
 800181a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800181c:	4804      	ldr	r0, [pc, #16]	; (8001830 <MX_I2C1_Init+0x50>)
 800181e:	f007 fc57 	bl	80090d0 <HAL_I2C_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001828:	f000 f986 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	2000032c 	.word	0x2000032c
 8001834:	40005400 	.word	0x40005400
 8001838:	00061a80 	.word	0x00061a80

0800183c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001840:	4b09      	ldr	r3, [pc, #36]	; (8001868 <MX_IWDG_Init+0x2c>)
 8001842:	4a0a      	ldr	r2, [pc, #40]	; (800186c <MX_IWDG_Init+0x30>)
 8001844:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8001846:	4b08      	ldr	r3, [pc, #32]	; (8001868 <MX_IWDG_Init+0x2c>)
 8001848:	2206      	movs	r2, #6
 800184a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 124;
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <MX_IWDG_Init+0x2c>)
 800184e:	227c      	movs	r2, #124	; 0x7c
 8001850:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001852:	4805      	ldr	r0, [pc, #20]	; (8001868 <MX_IWDG_Init+0x2c>)
 8001854:	f008 fbfb 	bl	800a04e <HAL_IWDG_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_IWDG_Init+0x26>
  {
    Error_Handler();
 800185e:	f000 f96b 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000380 	.word	0x20000380
 800186c:	40003000 	.word	0x40003000

08001870 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001876:	1d3b      	adds	r3, r7, #4
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001884:	2300      	movs	r3, #0
 8001886:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001888:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <MX_RTC_Init+0x58>)
 800188a:	4a10      	ldr	r2, [pc, #64]	; (80018cc <MX_RTC_Init+0x5c>)
 800188c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800188e:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <MX_RTC_Init+0x58>)
 8001890:	2200      	movs	r2, #0
 8001892:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <MX_RTC_Init+0x58>)
 8001896:	227f      	movs	r2, #127	; 0x7f
 8001898:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800189a:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <MX_RTC_Init+0x58>)
 800189c:	22ff      	movs	r2, #255	; 0xff
 800189e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <MX_RTC_Init+0x58>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80018a6:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <MX_RTC_Init+0x58>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <MX_RTC_Init+0x58>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80018b2:	4805      	ldr	r0, [pc, #20]	; (80018c8 <MX_RTC_Init+0x58>)
 80018b4:	f00b f862 	bl	800c97c <HAL_RTC_Init>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80018be:	f000 f93b 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	2000038c 	.word	0x2000038c
 80018cc:	40002800 	.word	0x40002800

080018d0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <MX_SDIO_SD_Init+0x38>)
 80018d6:	4a0d      	ldr	r2, [pc, #52]	; (800190c <MX_SDIO_SD_Init+0x3c>)
 80018d8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80018da:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <MX_SDIO_SD_Init+0x38>)
 80018dc:	2200      	movs	r2, #0
 80018de:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80018e0:	4b09      	ldr	r3, [pc, #36]	; (8001908 <MX_SDIO_SD_Init+0x38>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80018e6:	4b08      	ldr	r3, [pc, #32]	; (8001908 <MX_SDIO_SD_Init+0x38>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <MX_SDIO_SD_Init+0x38>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80018f2:	4b05      	ldr	r3, [pc, #20]	; (8001908 <MX_SDIO_SD_Init+0x38>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <MX_SDIO_SD_Init+0x38>)
 80018fa:	2202      	movs	r2, #2
 80018fc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	200003ac 	.word	0x200003ac
 800190c:	40012c00 	.word	0x40012c00

08001910 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001916:	463b      	mov	r3, r7
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800191e:	4b15      	ldr	r3, [pc, #84]	; (8001974 <MX_TIM7_Init+0x64>)
 8001920:	4a15      	ldr	r2, [pc, #84]	; (8001978 <MX_TIM7_Init+0x68>)
 8001922:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 89;
 8001924:	4b13      	ldr	r3, [pc, #76]	; (8001974 <MX_TIM7_Init+0x64>)
 8001926:	2259      	movs	r2, #89	; 0x59
 8001928:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192a:	4b12      	ldr	r3, [pc, #72]	; (8001974 <MX_TIM7_Init+0x64>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8001930:	4b10      	ldr	r3, [pc, #64]	; (8001974 <MX_TIM7_Init+0x64>)
 8001932:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001936:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001938:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <MX_TIM7_Init+0x64>)
 800193a:	2200      	movs	r2, #0
 800193c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800193e:	480d      	ldr	r0, [pc, #52]	; (8001974 <MX_TIM7_Init+0x64>)
 8001940:	f00d f9cd 	bl	800ecde <HAL_TIM_Base_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800194a:	f000 f8f5 	bl	8001b38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800194e:	2300      	movs	r3, #0
 8001950:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001952:	2300      	movs	r3, #0
 8001954:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001956:	463b      	mov	r3, r7
 8001958:	4619      	mov	r1, r3
 800195a:	4806      	ldr	r0, [pc, #24]	; (8001974 <MX_TIM7_Init+0x64>)
 800195c:	f00d fc4e 	bl	800f1fc <HAL_TIMEx_MasterConfigSynchronization>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001966:	f000 f8e7 	bl	8001b38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200004f0 	.word	0x200004f0
 8001978:	40001400 	.word	0x40001400

0800197c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	607b      	str	r3, [r7, #4]
 8001986:	4b18      	ldr	r3, [pc, #96]	; (80019e8 <MX_DMA_Init+0x6c>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a17      	ldr	r2, [pc, #92]	; (80019e8 <MX_DMA_Init+0x6c>)
 800198c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <MX_DMA_Init+0x6c>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	2102      	movs	r1, #2
 80019a2:	2038      	movs	r0, #56	; 0x38
 80019a4:	f006 fdc7 	bl	8008536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80019a8:	2038      	movs	r0, #56	; 0x38
 80019aa:	f006 fde0 	bl	800856e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 2, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2102      	movs	r1, #2
 80019b2:	203a      	movs	r0, #58	; 0x3a
 80019b4:	f006 fdbf 	bl	8008536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80019b8:	203a      	movs	r0, #58	; 0x3a
 80019ba:	f006 fdd8 	bl	800856e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80019be:	2200      	movs	r2, #0
 80019c0:	2100      	movs	r1, #0
 80019c2:	203b      	movs	r0, #59	; 0x3b
 80019c4:	f006 fdb7 	bl	8008536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80019c8:	203b      	movs	r0, #59	; 0x3b
 80019ca:	f006 fdd0 	bl	800856e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2100      	movs	r1, #0
 80019d2:	2045      	movs	r0, #69	; 0x45
 80019d4:	f006 fdaf 	bl	8008536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80019d8:	2045      	movs	r0, #69	; 0x45
 80019da:	f006 fdc8 	bl	800856e <HAL_NVIC_EnableIRQ>

}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40023800 	.word	0x40023800

080019ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08a      	sub	sp, #40	; 0x28
 80019f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	609a      	str	r2, [r3, #8]
 80019fe:	60da      	str	r2, [r3, #12]
 8001a00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	613b      	str	r3, [r7, #16]
 8001a06:	4b49      	ldr	r3, [pc, #292]	; (8001b2c <MX_GPIO_Init+0x140>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a48      	ldr	r2, [pc, #288]	; (8001b2c <MX_GPIO_Init+0x140>)
 8001a0c:	f043 0304 	orr.w	r3, r3, #4
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b46      	ldr	r3, [pc, #280]	; (8001b2c <MX_GPIO_Init+0x140>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0304 	and.w	r3, r3, #4
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60fb      	str	r3, [r7, #12]
 8001a22:	4b42      	ldr	r3, [pc, #264]	; (8001b2c <MX_GPIO_Init+0x140>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	4a41      	ldr	r2, [pc, #260]	; (8001b2c <MX_GPIO_Init+0x140>)
 8001a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2e:	4b3f      	ldr	r3, [pc, #252]	; (8001b2c <MX_GPIO_Init+0x140>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	4b3b      	ldr	r3, [pc, #236]	; (8001b2c <MX_GPIO_Init+0x140>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a3a      	ldr	r2, [pc, #232]	; (8001b2c <MX_GPIO_Init+0x140>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b38      	ldr	r3, [pc, #224]	; (8001b2c <MX_GPIO_Init+0x140>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	607b      	str	r3, [r7, #4]
 8001a5a:	4b34      	ldr	r3, [pc, #208]	; (8001b2c <MX_GPIO_Init+0x140>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a33      	ldr	r2, [pc, #204]	; (8001b2c <MX_GPIO_Init+0x140>)
 8001a60:	f043 0302 	orr.w	r3, r3, #2
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b31      	ldr	r3, [pc, #196]	; (8001b2c <MX_GPIO_Init+0x140>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	607b      	str	r3, [r7, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	603b      	str	r3, [r7, #0]
 8001a76:	4b2d      	ldr	r3, [pc, #180]	; (8001b2c <MX_GPIO_Init+0x140>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a2c      	ldr	r2, [pc, #176]	; (8001b2c <MX_GPIO_Init+0x140>)
 8001a7c:	f043 0308 	orr.w	r3, r3, #8
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b2a      	ldr	r3, [pc, #168]	; (8001b2c <MX_GPIO_Init+0x140>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	603b      	str	r3, [r7, #0]
 8001a8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	210f      	movs	r1, #15
 8001a92:	4827      	ldr	r0, [pc, #156]	; (8001b30 <MX_GPIO_Init+0x144>)
 8001a94:	f007 fad0 	bl	8009038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT0_Pin|OUT1_Pin, GPIO_PIN_RESET);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001a9e:	4825      	ldr	r0, [pc, #148]	; (8001b34 <MX_GPIO_Init+0x148>)
 8001aa0:	f007 faca 	bl	8009038 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8001aa4:	230f      	movs	r3, #15
 8001aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	2300      	movs	r3, #0
 8001aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	4619      	mov	r1, r3
 8001aba:	481d      	ldr	r0, [pc, #116]	; (8001b30 <MX_GPIO_Init+0x144>)
 8001abc:	f007 f910 	bl	8008ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_Pin OUT1_Pin */
  GPIO_InitStruct.Pin = OUT0_Pin|OUT1_Pin;
 8001ac0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad2:	f107 0314 	add.w	r3, r7, #20
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4816      	ldr	r0, [pc, #88]	; (8001b34 <MX_GPIO_Init+0x148>)
 8001ada:	f007 f901 	bl	8008ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI0_Pin EXTI1_Pin */
  GPIO_InitStruct.Pin = EXTI0_Pin|EXTI1_Pin;
 8001ade:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ae4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	4619      	mov	r1, r3
 8001af4:	480f      	ldr	r0, [pc, #60]	; (8001b34 <MX_GPIO_Init+0x148>)
 8001af6:	f007 f8f3 	bl	8008ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CD_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin;
 8001afa:	2380      	movs	r3, #128	; 0x80
 8001afc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_CD_GPIO_Port, &GPIO_InitStruct);
 8001b06:	f107 0314 	add.w	r3, r7, #20
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4808      	ldr	r0, [pc, #32]	; (8001b30 <MX_GPIO_Init+0x144>)
 8001b0e:	f007 f8e7 	bl	8008ce0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2101      	movs	r1, #1
 8001b16:	2028      	movs	r0, #40	; 0x28
 8001b18:	f006 fd0d 	bl	8008536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b1c:	2028      	movs	r0, #40	; 0x28
 8001b1e:	f006 fd26 	bl	800856e <HAL_NVIC_EnableIRQ>

}
 8001b22:	bf00      	nop
 8001b24:	3728      	adds	r7, #40	; 0x28
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40020800 	.word	0x40020800
 8001b34:	40020400 	.word	0x40020400

08001b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b3c:	b672      	cpsid	i
}
 8001b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <Error_Handler+0x8>
	...

08001b44 <Process_Data>:
 */

#include "pdm_can.h"

static void Process_Data(uint16_t id, uint16_t data, PDM_Data* data_struct)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	603a      	str	r2, [r7, #0]
 8001b4e:	80fb      	strh	r3, [r7, #6]
 8001b50:	460b      	mov	r3, r1
 8001b52:	80bb      	strh	r3, [r7, #4]
	switch(id >> 1){
 8001b54:	88fb      	ldrh	r3, [r7, #6]
 8001b56:	085b      	lsrs	r3, r3, #1
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	2b1d      	cmp	r3, #29
 8001b5e:	f200 81f9 	bhi.w	8001f54 <Process_Data+0x410>
 8001b62:	a201      	add	r2, pc, #4	; (adr r2, 8001b68 <Process_Data+0x24>)
 8001b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b68:	08001be1 	.word	0x08001be1
 8001b6c:	08001c11 	.word	0x08001c11
 8001b70:	08001c41 	.word	0x08001c41
 8001b74:	08001c71 	.word	0x08001c71
 8001b78:	08001ca1 	.word	0x08001ca1
 8001b7c:	08001cd1 	.word	0x08001cd1
 8001b80:	08001d01 	.word	0x08001d01
 8001b84:	08001d31 	.word	0x08001d31
 8001b88:	08001d61 	.word	0x08001d61
 8001b8c:	08001d91 	.word	0x08001d91
 8001b90:	08001dc1 	.word	0x08001dc1
 8001b94:	08001df1 	.word	0x08001df1
 8001b98:	08001e21 	.word	0x08001e21
 8001b9c:	08001e51 	.word	0x08001e51
 8001ba0:	08001e81 	.word	0x08001e81
 8001ba4:	08001eb1 	.word	0x08001eb1
 8001ba8:	08001ee5 	.word	0x08001ee5
 8001bac:	08001eed 	.word	0x08001eed
 8001bb0:	08001ef5 	.word	0x08001ef5
 8001bb4:	08001efd 	.word	0x08001efd
 8001bb8:	08001f05 	.word	0x08001f05
 8001bbc:	08001f0d 	.word	0x08001f0d
 8001bc0:	08001f15 	.word	0x08001f15
 8001bc4:	08001f1d 	.word	0x08001f1d
 8001bc8:	08001f25 	.word	0x08001f25
 8001bcc:	08001f2d 	.word	0x08001f2d
 8001bd0:	08001f35 	.word	0x08001f35
 8001bd4:	08001f3d 	.word	0x08001f3d
 8001bd8:	08001f45 	.word	0x08001f45
 8001bdc:	08001f4d 	.word	0x08001f4d
		case 0x0001:
			data_struct->Current_Buffer[0] = data;
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	88ba      	ldrh	r2, [r7, #4]
 8001be4:	809a      	strh	r2, [r3, #4]
			if((id & 0x0001) == 1)
 8001be6:	88fb      	ldrh	r3, [r7, #6]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d007      	beq.n	8001c00 <Process_Data+0xbc>
				data_struct->Output_Verify |= 1;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	885b      	ldrh	r3, [r3, #2]
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~1;
			break;
 8001bfe:	e1aa      	b.n	8001f56 <Process_Data+0x412>
				data_struct->Output_Verify &= ~1;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	885b      	ldrh	r3, [r3, #2]
 8001c04:	f023 0301 	bic.w	r3, r3, #1
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	805a      	strh	r2, [r3, #2]
			break;
 8001c0e:	e1a2      	b.n	8001f56 <Process_Data+0x412>

		case 0x0002:
			data_struct->Current_Buffer[1] = data;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	88ba      	ldrh	r2, [r7, #4]
 8001c14:	80da      	strh	r2, [r3, #6]
			if((id & 0x0001) == 1)
 8001c16:	88fb      	ldrh	r3, [r7, #6]
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d007      	beq.n	8001c30 <Process_Data+0xec>
				data_struct->Output_Verify |= (1 << 1);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	885b      	ldrh	r3, [r3, #2]
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 1);
			break;
 8001c2e:	e192      	b.n	8001f56 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 1);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	885b      	ldrh	r3, [r3, #2]
 8001c34:	f023 0302 	bic.w	r3, r3, #2
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	805a      	strh	r2, [r3, #2]
			break;
 8001c3e:	e18a      	b.n	8001f56 <Process_Data+0x412>

		case 0x0003:
			data_struct->Current_Buffer[2] = data;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	88ba      	ldrh	r2, [r7, #4]
 8001c44:	811a      	strh	r2, [r3, #8]
			if((id & 0x0001) == 1)
 8001c46:	88fb      	ldrh	r3, [r7, #6]
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d007      	beq.n	8001c60 <Process_Data+0x11c>
				data_struct->Output_Verify |= (1 << 2);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	885b      	ldrh	r3, [r3, #2]
 8001c54:	f043 0304 	orr.w	r3, r3, #4
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 2);
			break;
 8001c5e:	e17a      	b.n	8001f56 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 2);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	885b      	ldrh	r3, [r3, #2]
 8001c64:	f023 0304 	bic.w	r3, r3, #4
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	805a      	strh	r2, [r3, #2]
			break;
 8001c6e:	e172      	b.n	8001f56 <Process_Data+0x412>

		case 0x0004:
			data_struct->Current_Buffer[3] = data;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	88ba      	ldrh	r2, [r7, #4]
 8001c74:	815a      	strh	r2, [r3, #10]
			if((id & 0x0001) == 1)
 8001c76:	88fb      	ldrh	r3, [r7, #6]
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d007      	beq.n	8001c90 <Process_Data+0x14c>
				data_struct->Output_Verify |= (1 << 3);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	885b      	ldrh	r3, [r3, #2]
 8001c84:	f043 0308 	orr.w	r3, r3, #8
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 3);
			break;
 8001c8e:	e162      	b.n	8001f56 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 3);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	885b      	ldrh	r3, [r3, #2]
 8001c94:	f023 0308 	bic.w	r3, r3, #8
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	805a      	strh	r2, [r3, #2]
			break;
 8001c9e:	e15a      	b.n	8001f56 <Process_Data+0x412>

		case 0x0005:
			data_struct->Current_Buffer[4] = data;
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	88ba      	ldrh	r2, [r7, #4]
 8001ca4:	819a      	strh	r2, [r3, #12]
			if((id & 0x0001) == 1)
 8001ca6:	88fb      	ldrh	r3, [r7, #6]
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d007      	beq.n	8001cc0 <Process_Data+0x17c>
				data_struct->Output_Verify |= (1 << 4);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	885b      	ldrh	r3, [r3, #2]
 8001cb4:	f043 0310 	orr.w	r3, r3, #16
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 4);
			break;
 8001cbe:	e14a      	b.n	8001f56 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 4);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	885b      	ldrh	r3, [r3, #2]
 8001cc4:	f023 0310 	bic.w	r3, r3, #16
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	805a      	strh	r2, [r3, #2]
			break;
 8001cce:	e142      	b.n	8001f56 <Process_Data+0x412>

		case 0x0006:
			data_struct->Current_Buffer[5] = data;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	88ba      	ldrh	r2, [r7, #4]
 8001cd4:	81da      	strh	r2, [r3, #14]
			if((id & 0x0001) == 1)
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d007      	beq.n	8001cf0 <Process_Data+0x1ac>
				data_struct->Output_Verify |= (1 << 5);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	885b      	ldrh	r3, [r3, #2]
 8001ce4:	f043 0320 	orr.w	r3, r3, #32
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 5);
			break;
 8001cee:	e132      	b.n	8001f56 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 5);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	885b      	ldrh	r3, [r3, #2]
 8001cf4:	f023 0320 	bic.w	r3, r3, #32
 8001cf8:	b29a      	uxth	r2, r3
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	805a      	strh	r2, [r3, #2]
			break;
 8001cfe:	e12a      	b.n	8001f56 <Process_Data+0x412>

		case 0x0007:
			data_struct->Current_Buffer[6] = data;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	88ba      	ldrh	r2, [r7, #4]
 8001d04:	821a      	strh	r2, [r3, #16]
			if((id & 0x0001) == 1)
 8001d06:	88fb      	ldrh	r3, [r7, #6]
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d007      	beq.n	8001d20 <Process_Data+0x1dc>
				data_struct->Output_Verify |= (1 << 6);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	885b      	ldrh	r3, [r3, #2]
 8001d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 6);
			break;
 8001d1e:	e11a      	b.n	8001f56 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 6);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	885b      	ldrh	r3, [r3, #2]
 8001d24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	805a      	strh	r2, [r3, #2]
			break;
 8001d2e:	e112      	b.n	8001f56 <Process_Data+0x412>

		case 0x0008:
			data_struct->Current_Buffer[7] = data;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	88ba      	ldrh	r2, [r7, #4]
 8001d34:	825a      	strh	r2, [r3, #18]
			if((id & 0x0001) == 1)
 8001d36:	88fb      	ldrh	r3, [r7, #6]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d007      	beq.n	8001d50 <Process_Data+0x20c>
				data_struct->Output_Verify |= (1 << 7);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	885b      	ldrh	r3, [r3, #2]
 8001d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 7);
			break;
 8001d4e:	e102      	b.n	8001f56 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 7);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	885b      	ldrh	r3, [r3, #2]
 8001d54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	805a      	strh	r2, [r3, #2]
			break;
 8001d5e:	e0fa      	b.n	8001f56 <Process_Data+0x412>

		case 0x0009:
			data_struct->Current_Buffer[8] = data;
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	88ba      	ldrh	r2, [r7, #4]
 8001d64:	829a      	strh	r2, [r3, #20]
			if((id & 0x0001) == 1)
 8001d66:	88fb      	ldrh	r3, [r7, #6]
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d007      	beq.n	8001d80 <Process_Data+0x23c>
				data_struct->Output_Verify |= (1 << 8);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	885b      	ldrh	r3, [r3, #2]
 8001d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 8);
			break;
 8001d7e:	e0ea      	b.n	8001f56 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 8);
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	885b      	ldrh	r3, [r3, #2]
 8001d84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d88:	b29a      	uxth	r2, r3
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	805a      	strh	r2, [r3, #2]
			break;
 8001d8e:	e0e2      	b.n	8001f56 <Process_Data+0x412>

		case 0x000A:
			data_struct->Current_Buffer[9] = data;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	88ba      	ldrh	r2, [r7, #4]
 8001d94:	82da      	strh	r2, [r3, #22]
			if((id & 0x0001) == 1)
 8001d96:	88fb      	ldrh	r3, [r7, #6]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d007      	beq.n	8001db0 <Process_Data+0x26c>
				data_struct->Output_Verify |= (1 << 9);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	885b      	ldrh	r3, [r3, #2]
 8001da4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 9);
			break;
 8001dae:	e0d2      	b.n	8001f56 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 9);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	885b      	ldrh	r3, [r3, #2]
 8001db4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	805a      	strh	r2, [r3, #2]
			break;
 8001dbe:	e0ca      	b.n	8001f56 <Process_Data+0x412>

		case 0x000B:
			data_struct->Current_Buffer[10] = data;
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	88ba      	ldrh	r2, [r7, #4]
 8001dc4:	831a      	strh	r2, [r3, #24]
			if((id & 0x0001) == 1)
 8001dc6:	88fb      	ldrh	r3, [r7, #6]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d007      	beq.n	8001de0 <Process_Data+0x29c>
				data_struct->Output_Verify |= (1 << 10);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	885b      	ldrh	r3, [r3, #2]
 8001dd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 10);
			break;
 8001dde:	e0ba      	b.n	8001f56 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 10);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	885b      	ldrh	r3, [r3, #2]
 8001de4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001de8:	b29a      	uxth	r2, r3
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	805a      	strh	r2, [r3, #2]
			break;
 8001dee:	e0b2      	b.n	8001f56 <Process_Data+0x412>

		case 0x000C:
			data_struct->Current_Buffer[11] = data;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	88ba      	ldrh	r2, [r7, #4]
 8001df4:	835a      	strh	r2, [r3, #26]
			if((id & 0x0001) == 1)
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d007      	beq.n	8001e10 <Process_Data+0x2cc>
				data_struct->Output_Verify |= (1 << 11);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	885b      	ldrh	r3, [r3, #2]
 8001e04:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 11);
			break;
 8001e0e:	e0a2      	b.n	8001f56 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 11);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	885b      	ldrh	r3, [r3, #2]
 8001e14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	805a      	strh	r2, [r3, #2]
			break;
 8001e1e:	e09a      	b.n	8001f56 <Process_Data+0x412>

		case 0x000D:
			data_struct->Current_Buffer[12] = data;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	88ba      	ldrh	r2, [r7, #4]
 8001e24:	839a      	strh	r2, [r3, #28]
			if((id & 0x0001) == 1)
 8001e26:	88fb      	ldrh	r3, [r7, #6]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d007      	beq.n	8001e40 <Process_Data+0x2fc>
				data_struct->Output_Verify |= (1 << 12);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	885b      	ldrh	r3, [r3, #2]
 8001e34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 12);
			break;
 8001e3e:	e08a      	b.n	8001f56 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 12);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	885b      	ldrh	r3, [r3, #2]
 8001e44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	805a      	strh	r2, [r3, #2]
			break;
 8001e4e:	e082      	b.n	8001f56 <Process_Data+0x412>

		case 0x000E:
			data_struct->Current_Buffer[13] = data;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	88ba      	ldrh	r2, [r7, #4]
 8001e54:	83da      	strh	r2, [r3, #30]
			if((id & 0x0001) == 1)
 8001e56:	88fb      	ldrh	r3, [r7, #6]
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d007      	beq.n	8001e70 <Process_Data+0x32c>
				data_struct->Output_Verify |= (1 << 13);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	885b      	ldrh	r3, [r3, #2]
 8001e64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 13);
			break;
 8001e6e:	e072      	b.n	8001f56 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 13);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	885b      	ldrh	r3, [r3, #2]
 8001e74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	805a      	strh	r2, [r3, #2]
			break;
 8001e7e:	e06a      	b.n	8001f56 <Process_Data+0x412>

		case 0x000F:
			data_struct->Current_Buffer[14] = data;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	88ba      	ldrh	r2, [r7, #4]
 8001e84:	841a      	strh	r2, [r3, #32]
			if((id & 0x0001) == 1)
 8001e86:	88fb      	ldrh	r3, [r7, #6]
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d007      	beq.n	8001ea0 <Process_Data+0x35c>
				data_struct->Output_Verify |= (1 << 14);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	885b      	ldrh	r3, [r3, #2]
 8001e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 14);
			break;
 8001e9e:	e05a      	b.n	8001f56 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 14);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	885b      	ldrh	r3, [r3, #2]
 8001ea4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	805a      	strh	r2, [r3, #2]
			break;
 8001eae:	e052      	b.n	8001f56 <Process_Data+0x412>

		case 0x0010:
			data_struct->Current_Buffer[15] = data;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	88ba      	ldrh	r2, [r7, #4]
 8001eb4:	845a      	strh	r2, [r3, #34]	; 0x22
			if((id & 0x0001) == 1)
 8001eb6:	88fb      	ldrh	r3, [r7, #6]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d009      	beq.n	8001ed4 <Process_Data+0x390>
				data_struct->Output_Verify |= (1 << 15);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	885b      	ldrh	r3, [r3, #2]
 8001ec4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ec8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 15);
			break;
 8001ed2:	e040      	b.n	8001f56 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 15);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	885b      	ldrh	r3, [r3, #2]
 8001ed8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	805a      	strh	r2, [r3, #2]
			break;
 8001ee2:	e038      	b.n	8001f56 <Process_Data+0x412>

		case 0x0011:
			data_struct->Tempetature_Buffer[0] = data;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	88ba      	ldrh	r2, [r7, #4]
 8001ee8:	859a      	strh	r2, [r3, #44]	; 0x2c
			break;
 8001eea:	e034      	b.n	8001f56 <Process_Data+0x412>

		case 0x0012:
			data_struct->Tempetature_Buffer[1] = data;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	88ba      	ldrh	r2, [r7, #4]
 8001ef0:	85da      	strh	r2, [r3, #46]	; 0x2e
			break;
 8001ef2:	e030      	b.n	8001f56 <Process_Data+0x412>

		case 0x0013:
			data_struct->Tempetature_Buffer[2] = data;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	88ba      	ldrh	r2, [r7, #4]
 8001ef8:	861a      	strh	r2, [r3, #48]	; 0x30
			break;
 8001efa:	e02c      	b.n	8001f56 <Process_Data+0x412>

		case 0x0014:
			data_struct->Tempetature_Buffer[3] = data;
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	88ba      	ldrh	r2, [r7, #4]
 8001f00:	865a      	strh	r2, [r3, #50]	; 0x32
			break;
 8001f02:	e028      	b.n	8001f56 <Process_Data+0x412>

		case 0x0015:
			data_struct->Tempetature_Buffer[4] = data;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	88ba      	ldrh	r2, [r7, #4]
 8001f08:	869a      	strh	r2, [r3, #52]	; 0x34
			break;
 8001f0a:	e024      	b.n	8001f56 <Process_Data+0x412>

		case 0x0016:
			data_struct->Tempetature_Buffer[5] = data;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	88ba      	ldrh	r2, [r7, #4]
 8001f10:	86da      	strh	r2, [r3, #54]	; 0x36
			break;
 8001f12:	e020      	b.n	8001f56 <Process_Data+0x412>

		case 0x0017:
			data_struct->Tempetature_Buffer[6] = data;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	88ba      	ldrh	r2, [r7, #4]
 8001f18:	871a      	strh	r2, [r3, #56]	; 0x38
			break;
 8001f1a:	e01c      	b.n	8001f56 <Process_Data+0x412>

		case 0x0018:
			data_struct->Tempetature_Buffer[7] = data;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	88ba      	ldrh	r2, [r7, #4]
 8001f20:	875a      	strh	r2, [r3, #58]	; 0x3a
			break;
 8001f22:	e018      	b.n	8001f56 <Process_Data+0x412>

		case 0x0019:
			data_struct->Tempetature_Buffer[8] = data;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	88ba      	ldrh	r2, [r7, #4]
 8001f28:	879a      	strh	r2, [r3, #60]	; 0x3c
			break;
 8001f2a:	e014      	b.n	8001f56 <Process_Data+0x412>

		case 0x001A:
			data_struct->Input_Voltage = data;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	88ba      	ldrh	r2, [r7, #4]
 8001f30:	801a      	strh	r2, [r3, #0]
			break;
 8001f32:	e010      	b.n	8001f56 <Process_Data+0x412>

		case 0x001B:
			data_struct->Duty_Cycle_Buffer[0] = data;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	88ba      	ldrh	r2, [r7, #4]
 8001f38:	849a      	strh	r2, [r3, #36]	; 0x24
			break;
 8001f3a:	e00c      	b.n	8001f56 <Process_Data+0x412>

		case 0x001C:
			data_struct->Duty_Cycle_Buffer[1] = data;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	88ba      	ldrh	r2, [r7, #4]
 8001f40:	84da      	strh	r2, [r3, #38]	; 0x26
			break;
 8001f42:	e008      	b.n	8001f56 <Process_Data+0x412>

		case 0x001D:
			data_struct->Duty_Cycle_Buffer[2] = data;
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	88ba      	ldrh	r2, [r7, #4]
 8001f48:	851a      	strh	r2, [r3, #40]	; 0x28
			break;
 8001f4a:	e004      	b.n	8001f56 <Process_Data+0x412>

		case 0x001E:
			data_struct->Duty_Cycle_Buffer[3] = data;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	88ba      	ldrh	r2, [r7, #4]
 8001f50:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
 8001f52:	e000      	b.n	8001f56 <Process_Data+0x412>

		default:
			break;
 8001f54:	bf00      	nop
	}

	return;
 8001f56:	bf00      	nop
}
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop

08001f64 <PDM_CAN_FilterConfig>:

HAL_StatusTypeDef PDM_CAN_FilterConfig(CAN_HandleTypeDef* hcan, uint32_t bank_position, uint32_t fifo_assignment)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b090      	sub	sp, #64	; 0x40
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filterID = 0x1E35C000, filterMask = 0x1FFFF000;
 8001f70:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <PDM_CAN_FilterConfig+0x5c>)
 8001f72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f74:	4b13      	ldr	r3, [pc, #76]	; (8001fc4 <PDM_CAN_FilterConfig+0x60>)
 8001f76:	63bb      	str	r3, [r7, #56]	; 0x38

	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterIdHigh = filterID >> 13;
 8001f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f82:	0b5b      	lsrs	r3, r3, #13
 8001f84:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow = (filterID << 3) & 0xFFF8;
 8001f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	b29b      	uxth	r3, r3
 8001f8c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh = filterMask >> 13;
 8001f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f90:	0b5b      	lsrs	r3, r3, #13
 8001f92:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow = (filterMask << 3) & 0xFFF8;
 8001f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterBank = bank_position;
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterFIFOAssignment = fifo_assignment;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterActivation = ENABLE;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	633b      	str	r3, [r7, #48]	; 0x30

	return HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 8001fa8:	f107 0310 	add.w	r3, r7, #16
 8001fac:	4619      	mov	r1, r3
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f005 fc4a 	bl	8007848 <HAL_CAN_ConfigFilter>
 8001fb4:	4603      	mov	r3, r0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3740      	adds	r7, #64	; 0x40
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	1e35c000 	.word	0x1e35c000
 8001fc4:	1ffff000 	.word	0x1ffff000

08001fc8 <PDM_CAN_Process_Data>:

void PDM_CAN_Process_Data(CAN_RxHeaderTypeDef* rx_header, uint8_t* data_buffer, PDM_Data* data_struct)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
	uint8_t length = 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	77bb      	strb	r3, [r7, #30]
	uint8_t buffer[8];
	uint16_t id = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	83bb      	strh	r3, [r7, #28]
	uint16_t data = 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	837b      	strh	r3, [r7, #26]

	if((rx_header->DLC != CAN_ID_EXT) && ((rx_header->ExtId & 0x1FFFF000) != 0x1E35C000))
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	2b04      	cmp	r3, #4
 8001fe6:	d006      	beq.n	8001ff6 <PDM_CAN_Process_Data+0x2e>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	4b29      	ldr	r3, [pc, #164]	; (8002094 <PDM_CAN_Process_Data+0xcc>)
 8001fee:	4013      	ands	r3, r2
 8001ff0:	4a29      	ldr	r2, [pc, #164]	; (8002098 <PDM_CAN_Process_Data+0xd0>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d149      	bne.n	800208a <PDM_CAN_Process_Data+0xc2>
		return;

	length = rx_header->DLC;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	77bb      	strb	r3, [r7, #30]

	for(uint8_t i = 0; i < length; i++)
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	77fb      	strb	r3, [r7, #31]
 8002000:	e00b      	b.n	800201a <PDM_CAN_Process_Data+0x52>
		buffer[i] = data_buffer[i];
 8002002:	7ffb      	ldrb	r3, [r7, #31]
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	441a      	add	r2, r3
 8002008:	7ffb      	ldrb	r3, [r7, #31]
 800200a:	7812      	ldrb	r2, [r2, #0]
 800200c:	3320      	adds	r3, #32
 800200e:	443b      	add	r3, r7
 8002010:	f803 2c10 	strb.w	r2, [r3, #-16]
	for(uint8_t i = 0; i < length; i++)
 8002014:	7ffb      	ldrb	r3, [r7, #31]
 8002016:	3301      	adds	r3, #1
 8002018:	77fb      	strb	r3, [r7, #31]
 800201a:	7ffa      	ldrb	r2, [r7, #31]
 800201c:	7fbb      	ldrb	r3, [r7, #30]
 800201e:	429a      	cmp	r2, r3
 8002020:	d3ef      	bcc.n	8002002 <PDM_CAN_Process_Data+0x3a>

	id  = buffer[0] << 8;
 8002022:	7c3b      	ldrb	r3, [r7, #16]
 8002024:	b29b      	uxth	r3, r3
 8002026:	021b      	lsls	r3, r3, #8
 8002028:	83bb      	strh	r3, [r7, #28]
	id |= buffer[1] & 0xff;
 800202a:	7c7b      	ldrb	r3, [r7, #17]
 800202c:	b29a      	uxth	r2, r3
 800202e:	8bbb      	ldrh	r3, [r7, #28]
 8002030:	4313      	orrs	r3, r2
 8002032:	83bb      	strh	r3, [r7, #28]
	data  = buffer[2] << 8;
 8002034:	7cbb      	ldrb	r3, [r7, #18]
 8002036:	b29b      	uxth	r3, r3
 8002038:	021b      	lsls	r3, r3, #8
 800203a:	837b      	strh	r3, [r7, #26]
	data |= buffer[3] & 0xff;
 800203c:	7cfb      	ldrb	r3, [r7, #19]
 800203e:	b29a      	uxth	r2, r3
 8002040:	8b7b      	ldrh	r3, [r7, #26]
 8002042:	4313      	orrs	r3, r2
 8002044:	837b      	strh	r3, [r7, #26]

	Process_Data(id, data, data_struct);
 8002046:	8b79      	ldrh	r1, [r7, #26]
 8002048:	8bbb      	ldrh	r3, [r7, #28]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fd79 	bl	8001b44 <Process_Data>

	if(length == 8)
 8002052:	7fbb      	ldrb	r3, [r7, #30]
 8002054:	2b08      	cmp	r3, #8
 8002056:	d119      	bne.n	800208c <PDM_CAN_Process_Data+0xc4>
	{
		id  = buffer[4] << 8;
 8002058:	7d3b      	ldrb	r3, [r7, #20]
 800205a:	b29b      	uxth	r3, r3
 800205c:	021b      	lsls	r3, r3, #8
 800205e:	83bb      	strh	r3, [r7, #28]
		id |= buffer[5] & 0xff;
 8002060:	7d7b      	ldrb	r3, [r7, #21]
 8002062:	b29a      	uxth	r2, r3
 8002064:	8bbb      	ldrh	r3, [r7, #28]
 8002066:	4313      	orrs	r3, r2
 8002068:	83bb      	strh	r3, [r7, #28]
		data  = buffer[6] << 8;
 800206a:	7dbb      	ldrb	r3, [r7, #22]
 800206c:	b29b      	uxth	r3, r3
 800206e:	021b      	lsls	r3, r3, #8
 8002070:	837b      	strh	r3, [r7, #26]
		data |= buffer[7] & 0xff;
 8002072:	7dfb      	ldrb	r3, [r7, #23]
 8002074:	b29a      	uxth	r2, r3
 8002076:	8b7b      	ldrh	r3, [r7, #26]
 8002078:	4313      	orrs	r3, r2
 800207a:	837b      	strh	r3, [r7, #26]

		Process_Data(id, data, data_struct);
 800207c:	8b79      	ldrh	r1, [r7, #26]
 800207e:	8bbb      	ldrh	r3, [r7, #28]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff fd5e 	bl	8001b44 <Process_Data>
 8002088:	e000      	b.n	800208c <PDM_CAN_Process_Data+0xc4>
		return;
 800208a:	bf00      	nop
	}
}
 800208c:	3720      	adds	r7, #32
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	1ffff000 	.word	0x1ffff000
 8002098:	1e35c000 	.word	0x1e35c000

0800209c <Principal_Verify_LEDs>:
 */

#include "principal.h"

void Principal_Verify_LEDs()
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
	verifyADC = 0;
 80020a2:	4b2c      	ldr	r3, [pc, #176]	; (8002154 <Principal_Verify_LEDs+0xb8>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < NBR_OF_CHANNELS; i++)
 80020a8:	2300      	movs	r3, #0
 80020aa:	71fb      	strb	r3, [r7, #7]
 80020ac:	e015      	b.n	80020da <Principal_Verify_LEDs+0x3e>
		if(adcBuffer[i] > ADC_THRESHOLD)
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	4a29      	ldr	r2, [pc, #164]	; (8002158 <Principal_Verify_LEDs+0xbc>)
 80020b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020b6:	2b1e      	cmp	r3, #30
 80020b8:	d90c      	bls.n	80020d4 <Principal_Verify_LEDs+0x38>
			verifyADC |= (1 << i);
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	2201      	movs	r2, #1
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	b21a      	sxth	r2, r3
 80020c4:	4b23      	ldr	r3, [pc, #140]	; (8002154 <Principal_Verify_LEDs+0xb8>)
 80020c6:	881b      	ldrh	r3, [r3, #0]
 80020c8:	b21b      	sxth	r3, r3
 80020ca:	4313      	orrs	r3, r2
 80020cc:	b21b      	sxth	r3, r3
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	4b20      	ldr	r3, [pc, #128]	; (8002154 <Principal_Verify_LEDs+0xb8>)
 80020d2:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < NBR_OF_CHANNELS; i++)
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	3301      	adds	r3, #1
 80020d8:	71fb      	strb	r3, [r7, #7]
 80020da:	79fb      	ldrb	r3, [r7, #7]
 80020dc:	2b0b      	cmp	r3, #11
 80020de:	d9e6      	bls.n	80020ae <Principal_Verify_LEDs+0x12>

	HAL_GPIO_TogglePin(LED_OK);
 80020e0:	2101      	movs	r1, #1
 80020e2:	481e      	ldr	r0, [pc, #120]	; (800215c <Principal_Verify_LEDs+0xc0>)
 80020e4:	f006 ffc1 	bl	800906a <HAL_GPIO_TogglePin>

	if(flagDatalogger == DL_SAVE)
 80020e8:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <Principal_Verify_LEDs+0xc4>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d105      	bne.n	80020fc <Principal_Verify_LEDs+0x60>
		HAL_GPIO_WritePin(LED_DATALOGGER, GPIO_PIN_SET);
 80020f0:	2201      	movs	r2, #1
 80020f2:	2102      	movs	r1, #2
 80020f4:	4819      	ldr	r0, [pc, #100]	; (800215c <Principal_Verify_LEDs+0xc0>)
 80020f6:	f006 ff9f 	bl	8009038 <HAL_GPIO_WritePin>
 80020fa:	e004      	b.n	8002106 <Principal_Verify_LEDs+0x6a>
	else
		HAL_GPIO_WritePin(LED_DATALOGGER, GPIO_PIN_RESET);
 80020fc:	2200      	movs	r2, #0
 80020fe:	2102      	movs	r1, #2
 8002100:	4816      	ldr	r0, [pc, #88]	; (800215c <Principal_Verify_LEDs+0xc0>)
 8002102:	f006 ff99 	bl	8009038 <HAL_GPIO_WritePin>

	if((verifyCAN & 1) == 1)
 8002106:	4b17      	ldr	r3, [pc, #92]	; (8002164 <Principal_Verify_LEDs+0xc8>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d005      	beq.n	800211e <Principal_Verify_LEDs+0x82>
		HAL_GPIO_WritePin(LED_CAN_TX, GPIO_PIN_SET);
 8002112:	2201      	movs	r2, #1
 8002114:	2104      	movs	r1, #4
 8002116:	4811      	ldr	r0, [pc, #68]	; (800215c <Principal_Verify_LEDs+0xc0>)
 8002118:	f006 ff8e 	bl	8009038 <HAL_GPIO_WritePin>
 800211c:	e004      	b.n	8002128 <Principal_Verify_LEDs+0x8c>
	else
		HAL_GPIO_WritePin(LED_CAN_TX, GPIO_PIN_RESET);
 800211e:	2200      	movs	r2, #0
 8002120:	2104      	movs	r1, #4
 8002122:	480e      	ldr	r0, [pc, #56]	; (800215c <Principal_Verify_LEDs+0xc0>)
 8002124:	f006 ff88 	bl	8009038 <HAL_GPIO_WritePin>

	if((verifyCAN & 2) == 2)
 8002128:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <Principal_Verify_LEDs+0xc8>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d005      	beq.n	8002140 <Principal_Verify_LEDs+0xa4>
		HAL_GPIO_WritePin(LED_CAN_RX, GPIO_PIN_SET);
 8002134:	2201      	movs	r2, #1
 8002136:	2108      	movs	r1, #8
 8002138:	4808      	ldr	r0, [pc, #32]	; (800215c <Principal_Verify_LEDs+0xc0>)
 800213a:	f006 ff7d 	bl	8009038 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_CAN_RX, GPIO_PIN_RESET);
}
 800213e:	e004      	b.n	800214a <Principal_Verify_LEDs+0xae>
		HAL_GPIO_WritePin(LED_CAN_RX, GPIO_PIN_RESET);
 8002140:	2200      	movs	r2, #0
 8002142:	2108      	movs	r1, #8
 8002144:	4805      	ldr	r0, [pc, #20]	; (800215c <Principal_Verify_LEDs+0xc0>)
 8002146:	f006 ff77 	bl	8009038 <HAL_GPIO_WritePin>
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	2001279e 	.word	0x2001279e
 8002158:	20000584 	.word	0x20000584
 800215c:	40020800 	.word	0x40020800
 8002160:	20012712 	.word	0x20012712
 8002164:	2001279c 	.word	0x2001279c

08002168 <Tx_Analog_1_4>:

static void Tx_Analog_1_4(CAN_HandleTypeDef* hcan)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af02      	add	r7, sp, #8
 800216e:	6078      	str	r0, [r7, #4]
	if((verifyADC & 0x000f) == 0x0000)
 8002170:	4b49      	ldr	r3, [pc, #292]	; (8002298 <Tx_Analog_1_4+0x130>)
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	f003 030f 	and.w	r3, r3, #15
 8002178:	2b00      	cmp	r3, #0
 800217a:	d103      	bne.n	8002184 <Tx_Analog_1_4+0x1c>
	{
		accCAN[ANALOG_1_4] = 0;
 800217c:	4b47      	ldr	r3, [pc, #284]	; (800229c <Tx_Analog_1_4+0x134>)
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
		return;
 8002182:	e086      	b.n	8002292 <Tx_Analog_1_4+0x12a>
	}

	txHeader.IDE = CAN_ID_STD;
 8002184:	4b46      	ldr	r3, [pc, #280]	; (80022a0 <Tx_Analog_1_4+0x138>)
 8002186:	2200      	movs	r2, #0
 8002188:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 800218a:	4b45      	ldr	r3, [pc, #276]	; (80022a0 <Tx_Analog_1_4+0x138>)
 800218c:	2200      	movs	r2, #0
 800218e:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8002190:	4b43      	ldr	r3, [pc, #268]	; (80022a0 <Tx_Analog_1_4+0x138>)
 8002192:	2200      	movs	r2, #0
 8002194:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = FIRST_ID + ANALOG_1_4;
 8002196:	4b42      	ldr	r3, [pc, #264]	; (80022a0 <Tx_Analog_1_4+0x138>)
 8002198:	f240 5215 	movw	r2, #1301	; 0x515
 800219c:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 8;
 800219e:	4b40      	ldr	r3, [pc, #256]	; (80022a0 <Tx_Analog_1_4+0x138>)
 80021a0:	2208      	movs	r2, #8
 80021a2:	611a      	str	r2, [r3, #16]

	txData[0] = adcBuffer[0] >> 8;
 80021a4:	4b3f      	ldr	r3, [pc, #252]	; (80022a4 <Tx_Analog_1_4+0x13c>)
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	0a1b      	lsrs	r3, r3, #8
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	4b3e      	ldr	r3, [pc, #248]	; (80022a8 <Tx_Analog_1_4+0x140>)
 80021b0:	701a      	strb	r2, [r3, #0]
	txData[1] = adcBuffer[0] & 0xff;
 80021b2:	4b3c      	ldr	r3, [pc, #240]	; (80022a4 <Tx_Analog_1_4+0x13c>)
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	4b3b      	ldr	r3, [pc, #236]	; (80022a8 <Tx_Analog_1_4+0x140>)
 80021ba:	705a      	strb	r2, [r3, #1]
	txData[2] = adcBuffer[1] >> 8;
 80021bc:	4b39      	ldr	r3, [pc, #228]	; (80022a4 <Tx_Analog_1_4+0x13c>)
 80021be:	885b      	ldrh	r3, [r3, #2]
 80021c0:	0a1b      	lsrs	r3, r3, #8
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	4b38      	ldr	r3, [pc, #224]	; (80022a8 <Tx_Analog_1_4+0x140>)
 80021c8:	709a      	strb	r2, [r3, #2]
	txData[3] = adcBuffer[1] & 0xff;
 80021ca:	4b36      	ldr	r3, [pc, #216]	; (80022a4 <Tx_Analog_1_4+0x13c>)
 80021cc:	885b      	ldrh	r3, [r3, #2]
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	4b35      	ldr	r3, [pc, #212]	; (80022a8 <Tx_Analog_1_4+0x140>)
 80021d2:	70da      	strb	r2, [r3, #3]
	txData[4] = adcBuffer[2] >> 8;
 80021d4:	4b33      	ldr	r3, [pc, #204]	; (80022a4 <Tx_Analog_1_4+0x13c>)
 80021d6:	889b      	ldrh	r3, [r3, #4]
 80021d8:	0a1b      	lsrs	r3, r3, #8
 80021da:	b29b      	uxth	r3, r3
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	4b32      	ldr	r3, [pc, #200]	; (80022a8 <Tx_Analog_1_4+0x140>)
 80021e0:	711a      	strb	r2, [r3, #4]
	txData[5] = adcBuffer[2] & 0xff;
 80021e2:	4b30      	ldr	r3, [pc, #192]	; (80022a4 <Tx_Analog_1_4+0x13c>)
 80021e4:	889b      	ldrh	r3, [r3, #4]
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	4b2f      	ldr	r3, [pc, #188]	; (80022a8 <Tx_Analog_1_4+0x140>)
 80021ea:	715a      	strb	r2, [r3, #5]
	txData[6] = adcBuffer[3] >> 8;
 80021ec:	4b2d      	ldr	r3, [pc, #180]	; (80022a4 <Tx_Analog_1_4+0x13c>)
 80021ee:	88db      	ldrh	r3, [r3, #6]
 80021f0:	0a1b      	lsrs	r3, r3, #8
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	4b2c      	ldr	r3, [pc, #176]	; (80022a8 <Tx_Analog_1_4+0x140>)
 80021f8:	719a      	strb	r2, [r3, #6]
	txData[7] = adcBuffer[3] & 0xff;
 80021fa:	4b2a      	ldr	r3, [pc, #168]	; (80022a4 <Tx_Analog_1_4+0x13c>)
 80021fc:	88db      	ldrh	r3, [r3, #6]
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	4b29      	ldr	r3, [pc, #164]	; (80022a8 <Tx_Analog_1_4+0x140>)
 8002202:	71da      	strb	r2, [r3, #7]

	if(flagDatalogger == DL_SAVE)
 8002204:	4b29      	ldr	r3, [pc, #164]	; (80022ac <Tx_Analog_1_4+0x144>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d10a      	bne.n	8002222 <Tx_Analog_1_4+0xba>
		Principal_Datalogger_Save_Buffer(txHeader.StdId, txHeader.DLC, txData, &dirStruct, &fileStruct);
 800220c:	4b24      	ldr	r3, [pc, #144]	; (80022a0 <Tx_Analog_1_4+0x138>)
 800220e:	6818      	ldr	r0, [r3, #0]
 8002210:	4b23      	ldr	r3, [pc, #140]	; (80022a0 <Tx_Analog_1_4+0x138>)
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	b2d9      	uxtb	r1, r3
 8002216:	4b26      	ldr	r3, [pc, #152]	; (80022b0 <Tx_Analog_1_4+0x148>)
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <Tx_Analog_1_4+0x14c>)
 800221c:	4a22      	ldr	r2, [pc, #136]	; (80022a8 <Tx_Analog_1_4+0x140>)
 800221e:	f003 fe89 	bl	8005f34 <Principal_Datalogger_Save_Buffer>

	if((accCAN[ANALOG_1_4] >= perCAN[ANALOG_1_4]) && (perCAN[ANALOG_1_4] != MSG_DISABLED))
 8002222:	4b1e      	ldr	r3, [pc, #120]	; (800229c <Tx_Analog_1_4+0x134>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a24      	ldr	r2, [pc, #144]	; (80022b8 <Tx_Analog_1_4+0x150>)
 8002228:	8812      	ldrh	r2, [r2, #0]
 800222a:	4293      	cmp	r3, r2
 800222c:	d331      	bcc.n	8002292 <Tx_Analog_1_4+0x12a>
 800222e:	4b22      	ldr	r3, [pc, #136]	; (80022b8 <Tx_Analog_1_4+0x150>)
 8002230:	881b      	ldrh	r3, [r3, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d02d      	beq.n	8002292 <Tx_Analog_1_4+0x12a>
	{
		accCAN[ANALOG_1_4] -= perCAN[ANALOG_1_4];
 8002236:	4b19      	ldr	r3, [pc, #100]	; (800229c <Tx_Analog_1_4+0x134>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a1f      	ldr	r2, [pc, #124]	; (80022b8 <Tx_Analog_1_4+0x150>)
 800223c:	8812      	ldrh	r2, [r2, #0]
 800223e:	1a9b      	subs	r3, r3, r2
 8002240:	4a16      	ldr	r2, [pc, #88]	; (800229c <Tx_Analog_1_4+0x134>)
 8002242:	6013      	str	r3, [r2, #0]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 8002244:	4b1d      	ldr	r3, [pc, #116]	; (80022bc <Tx_Analog_1_4+0x154>)
 8002246:	4a18      	ldr	r2, [pc, #96]	; (80022a8 <Tx_Analog_1_4+0x140>)
 8002248:	4915      	ldr	r1, [pc, #84]	; (80022a0 <Tx_Analog_1_4+0x138>)
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f005 fc20 	bl	8007a90 <HAL_CAN_AddTxMessage>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d107      	bne.n	8002266 <Tx_Analog_1_4+0xfe>
			verifyCAN |= 1;
 8002256:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <Tx_Analog_1_4+0x158>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	b2da      	uxtb	r2, r3
 8002260:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <Tx_Analog_1_4+0x158>)
 8002262:	701a      	strb	r2, [r3, #0]
 8002264:	e006      	b.n	8002274 <Tx_Analog_1_4+0x10c>
		else
			verifyCAN &= 0x02;
 8002266:	4b16      	ldr	r3, [pc, #88]	; (80022c0 <Tx_Analog_1_4+0x158>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	f003 0302 	and.w	r3, r3, #2
 800226e:	b2da      	uxtb	r2, r3
 8002270:	4b13      	ldr	r3, [pc, #76]	; (80022c0 <Tx_Analog_1_4+0x158>)
 8002272:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8002274:	2300      	movs	r3, #0
 8002276:	73fb      	strb	r3, [r7, #15]
 8002278:	e002      	b.n	8002280 <Tx_Analog_1_4+0x118>
 800227a:	7bfb      	ldrb	r3, [r7, #15]
 800227c:	3301      	adds	r3, #1
 800227e:	73fb      	strb	r3, [r7, #15]
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f005 fce0 	bl	8007c46 <HAL_CAN_GetTxMailboxesFreeLevel>
 8002286:	4603      	mov	r3, r0
 8002288:	2b03      	cmp	r3, #3
 800228a:	d002      	beq.n	8002292 <Tx_Analog_1_4+0x12a>
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	2b02      	cmp	r3, #2
 8002290:	d9f3      	bls.n	800227a <Tx_Analog_1_4+0x112>
	}
}
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	2001279e 	.word	0x2001279e
 800229c:	2001275c 	.word	0x2001275c
 80022a0:	20000568 	.word	0x20000568
 80022a4:	20000584 	.word	0x20000584
 80022a8:	20000540 	.word	0x20000540
 80022ac:	20012712 	.word	0x20012712
 80022b0:	200116a8 	.word	0x200116a8
 80022b4:	20010640 	.word	0x20010640
 80022b8:	20012730 	.word	0x20012730
 80022bc:	20000548 	.word	0x20000548
 80022c0:	2001279c 	.word	0x2001279c

080022c4 <Tx_Analog_5_8>:

static void Tx_Analog_5_8(CAN_HandleTypeDef* hcan)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af02      	add	r7, sp, #8
 80022ca:	6078      	str	r0, [r7, #4]
	if((verifyADC & 0x00f0) == 0x0000)
 80022cc:	4b49      	ldr	r3, [pc, #292]	; (80023f4 <Tx_Analog_5_8+0x130>)
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d103      	bne.n	80022e0 <Tx_Analog_5_8+0x1c>
	{
		accCAN[ANALOG_5_8] = 0;
 80022d8:	4b47      	ldr	r3, [pc, #284]	; (80023f8 <Tx_Analog_5_8+0x134>)
 80022da:	2200      	movs	r2, #0
 80022dc:	605a      	str	r2, [r3, #4]
		return;
 80022de:	e086      	b.n	80023ee <Tx_Analog_5_8+0x12a>
	}

	txHeader.IDE = CAN_ID_STD;
 80022e0:	4b46      	ldr	r3, [pc, #280]	; (80023fc <Tx_Analog_5_8+0x138>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 80022e6:	4b45      	ldr	r3, [pc, #276]	; (80023fc <Tx_Analog_5_8+0x138>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 80022ec:	4b43      	ldr	r3, [pc, #268]	; (80023fc <Tx_Analog_5_8+0x138>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = FIRST_ID + ANALOG_5_8;
 80022f2:	4b42      	ldr	r3, [pc, #264]	; (80023fc <Tx_Analog_5_8+0x138>)
 80022f4:	f240 5216 	movw	r2, #1302	; 0x516
 80022f8:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 8;
 80022fa:	4b40      	ldr	r3, [pc, #256]	; (80023fc <Tx_Analog_5_8+0x138>)
 80022fc:	2208      	movs	r2, #8
 80022fe:	611a      	str	r2, [r3, #16]

	txData[0] = adcBuffer[4] >> 8;
 8002300:	4b3f      	ldr	r3, [pc, #252]	; (8002400 <Tx_Analog_5_8+0x13c>)
 8002302:	891b      	ldrh	r3, [r3, #8]
 8002304:	0a1b      	lsrs	r3, r3, #8
 8002306:	b29b      	uxth	r3, r3
 8002308:	b2da      	uxtb	r2, r3
 800230a:	4b3e      	ldr	r3, [pc, #248]	; (8002404 <Tx_Analog_5_8+0x140>)
 800230c:	701a      	strb	r2, [r3, #0]
	txData[1] = adcBuffer[4] & 0xff;
 800230e:	4b3c      	ldr	r3, [pc, #240]	; (8002400 <Tx_Analog_5_8+0x13c>)
 8002310:	891b      	ldrh	r3, [r3, #8]
 8002312:	b2da      	uxtb	r2, r3
 8002314:	4b3b      	ldr	r3, [pc, #236]	; (8002404 <Tx_Analog_5_8+0x140>)
 8002316:	705a      	strb	r2, [r3, #1]
	txData[2] = adcBuffer[5] >> 8;
 8002318:	4b39      	ldr	r3, [pc, #228]	; (8002400 <Tx_Analog_5_8+0x13c>)
 800231a:	895b      	ldrh	r3, [r3, #10]
 800231c:	0a1b      	lsrs	r3, r3, #8
 800231e:	b29b      	uxth	r3, r3
 8002320:	b2da      	uxtb	r2, r3
 8002322:	4b38      	ldr	r3, [pc, #224]	; (8002404 <Tx_Analog_5_8+0x140>)
 8002324:	709a      	strb	r2, [r3, #2]
	txData[3] = adcBuffer[5] & 0xff;
 8002326:	4b36      	ldr	r3, [pc, #216]	; (8002400 <Tx_Analog_5_8+0x13c>)
 8002328:	895b      	ldrh	r3, [r3, #10]
 800232a:	b2da      	uxtb	r2, r3
 800232c:	4b35      	ldr	r3, [pc, #212]	; (8002404 <Tx_Analog_5_8+0x140>)
 800232e:	70da      	strb	r2, [r3, #3]
	txData[4] = adcBuffer[6] >> 8;
 8002330:	4b33      	ldr	r3, [pc, #204]	; (8002400 <Tx_Analog_5_8+0x13c>)
 8002332:	899b      	ldrh	r3, [r3, #12]
 8002334:	0a1b      	lsrs	r3, r3, #8
 8002336:	b29b      	uxth	r3, r3
 8002338:	b2da      	uxtb	r2, r3
 800233a:	4b32      	ldr	r3, [pc, #200]	; (8002404 <Tx_Analog_5_8+0x140>)
 800233c:	711a      	strb	r2, [r3, #4]
	txData[5] = adcBuffer[6] & 0xff;
 800233e:	4b30      	ldr	r3, [pc, #192]	; (8002400 <Tx_Analog_5_8+0x13c>)
 8002340:	899b      	ldrh	r3, [r3, #12]
 8002342:	b2da      	uxtb	r2, r3
 8002344:	4b2f      	ldr	r3, [pc, #188]	; (8002404 <Tx_Analog_5_8+0x140>)
 8002346:	715a      	strb	r2, [r3, #5]
	txData[6] = adcBuffer[7] >> 8;
 8002348:	4b2d      	ldr	r3, [pc, #180]	; (8002400 <Tx_Analog_5_8+0x13c>)
 800234a:	89db      	ldrh	r3, [r3, #14]
 800234c:	0a1b      	lsrs	r3, r3, #8
 800234e:	b29b      	uxth	r3, r3
 8002350:	b2da      	uxtb	r2, r3
 8002352:	4b2c      	ldr	r3, [pc, #176]	; (8002404 <Tx_Analog_5_8+0x140>)
 8002354:	719a      	strb	r2, [r3, #6]
	txData[7] = adcBuffer[7] & 0xff;
 8002356:	4b2a      	ldr	r3, [pc, #168]	; (8002400 <Tx_Analog_5_8+0x13c>)
 8002358:	89db      	ldrh	r3, [r3, #14]
 800235a:	b2da      	uxtb	r2, r3
 800235c:	4b29      	ldr	r3, [pc, #164]	; (8002404 <Tx_Analog_5_8+0x140>)
 800235e:	71da      	strb	r2, [r3, #7]

	if(flagDatalogger == DL_SAVE)
 8002360:	4b29      	ldr	r3, [pc, #164]	; (8002408 <Tx_Analog_5_8+0x144>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d10a      	bne.n	800237e <Tx_Analog_5_8+0xba>
		Principal_Datalogger_Save_Buffer(txHeader.StdId, txHeader.DLC, txData, &dirStruct, &fileStruct);
 8002368:	4b24      	ldr	r3, [pc, #144]	; (80023fc <Tx_Analog_5_8+0x138>)
 800236a:	6818      	ldr	r0, [r3, #0]
 800236c:	4b23      	ldr	r3, [pc, #140]	; (80023fc <Tx_Analog_5_8+0x138>)
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	b2d9      	uxtb	r1, r3
 8002372:	4b26      	ldr	r3, [pc, #152]	; (800240c <Tx_Analog_5_8+0x148>)
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	4b26      	ldr	r3, [pc, #152]	; (8002410 <Tx_Analog_5_8+0x14c>)
 8002378:	4a22      	ldr	r2, [pc, #136]	; (8002404 <Tx_Analog_5_8+0x140>)
 800237a:	f003 fddb 	bl	8005f34 <Principal_Datalogger_Save_Buffer>

	if((accCAN[ANALOG_5_8] >= perCAN[ANALOG_5_8]) && (perCAN[ANALOG_5_8] != MSG_DISABLED))
 800237e:	4b1e      	ldr	r3, [pc, #120]	; (80023f8 <Tx_Analog_5_8+0x134>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	4a24      	ldr	r2, [pc, #144]	; (8002414 <Tx_Analog_5_8+0x150>)
 8002384:	8852      	ldrh	r2, [r2, #2]
 8002386:	4293      	cmp	r3, r2
 8002388:	d331      	bcc.n	80023ee <Tx_Analog_5_8+0x12a>
 800238a:	4b22      	ldr	r3, [pc, #136]	; (8002414 <Tx_Analog_5_8+0x150>)
 800238c:	885b      	ldrh	r3, [r3, #2]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d02d      	beq.n	80023ee <Tx_Analog_5_8+0x12a>
	{
		accCAN[ANALOG_5_8] -= perCAN[ANALOG_5_8];
 8002392:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <Tx_Analog_5_8+0x134>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	4a1f      	ldr	r2, [pc, #124]	; (8002414 <Tx_Analog_5_8+0x150>)
 8002398:	8852      	ldrh	r2, [r2, #2]
 800239a:	1a9b      	subs	r3, r3, r2
 800239c:	4a16      	ldr	r2, [pc, #88]	; (80023f8 <Tx_Analog_5_8+0x134>)
 800239e:	6053      	str	r3, [r2, #4]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 80023a0:	4b1d      	ldr	r3, [pc, #116]	; (8002418 <Tx_Analog_5_8+0x154>)
 80023a2:	4a18      	ldr	r2, [pc, #96]	; (8002404 <Tx_Analog_5_8+0x140>)
 80023a4:	4915      	ldr	r1, [pc, #84]	; (80023fc <Tx_Analog_5_8+0x138>)
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f005 fb72 	bl	8007a90 <HAL_CAN_AddTxMessage>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d107      	bne.n	80023c2 <Tx_Analog_5_8+0xfe>
			verifyCAN |= 1;
 80023b2:	4b1a      	ldr	r3, [pc, #104]	; (800241c <Tx_Analog_5_8+0x158>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	4b17      	ldr	r3, [pc, #92]	; (800241c <Tx_Analog_5_8+0x158>)
 80023be:	701a      	strb	r2, [r3, #0]
 80023c0:	e006      	b.n	80023d0 <Tx_Analog_5_8+0x10c>
		else
			verifyCAN &= 0x02;
 80023c2:	4b16      	ldr	r3, [pc, #88]	; (800241c <Tx_Analog_5_8+0x158>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	4b13      	ldr	r3, [pc, #76]	; (800241c <Tx_Analog_5_8+0x158>)
 80023ce:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 80023d0:	2300      	movs	r3, #0
 80023d2:	73fb      	strb	r3, [r7, #15]
 80023d4:	e002      	b.n	80023dc <Tx_Analog_5_8+0x118>
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
 80023d8:	3301      	adds	r3, #1
 80023da:	73fb      	strb	r3, [r7, #15]
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f005 fc32 	bl	8007c46 <HAL_CAN_GetTxMailboxesFreeLevel>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d002      	beq.n	80023ee <Tx_Analog_5_8+0x12a>
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d9f3      	bls.n	80023d6 <Tx_Analog_5_8+0x112>
	}
}
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	2001279e 	.word	0x2001279e
 80023f8:	2001275c 	.word	0x2001275c
 80023fc:	20000568 	.word	0x20000568
 8002400:	20000584 	.word	0x20000584
 8002404:	20000540 	.word	0x20000540
 8002408:	20012712 	.word	0x20012712
 800240c:	200116a8 	.word	0x200116a8
 8002410:	20010640 	.word	0x20010640
 8002414:	20012730 	.word	0x20012730
 8002418:	20000548 	.word	0x20000548
 800241c:	2001279c 	.word	0x2001279c

08002420 <Tx_Analog_9_12>:

static void Tx_Analog_9_12(CAN_HandleTypeDef* hcan)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af02      	add	r7, sp, #8
 8002426:	6078      	str	r0, [r7, #4]
	if((verifyADC & 0x0f00) == 0x0000)
 8002428:	4b4d      	ldr	r3, [pc, #308]	; (8002560 <Tx_Analog_9_12+0x140>)
 800242a:	881b      	ldrh	r3, [r3, #0]
 800242c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002430:	2b00      	cmp	r3, #0
 8002432:	d103      	bne.n	800243c <Tx_Analog_9_12+0x1c>
	{
		accCAN[ANALOG_9_12] = 0;
 8002434:	4b4b      	ldr	r3, [pc, #300]	; (8002564 <Tx_Analog_9_12+0x144>)
 8002436:	2200      	movs	r2, #0
 8002438:	609a      	str	r2, [r3, #8]
		return;
 800243a:	e08e      	b.n	800255a <Tx_Analog_9_12+0x13a>
	}

	txHeader.IDE = CAN_ID_STD;
 800243c:	4b4a      	ldr	r3, [pc, #296]	; (8002568 <Tx_Analog_9_12+0x148>)
 800243e:	2200      	movs	r2, #0
 8002440:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 8002442:	4b49      	ldr	r3, [pc, #292]	; (8002568 <Tx_Analog_9_12+0x148>)
 8002444:	2200      	movs	r2, #0
 8002446:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8002448:	4b47      	ldr	r3, [pc, #284]	; (8002568 <Tx_Analog_9_12+0x148>)
 800244a:	2200      	movs	r2, #0
 800244c:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = FIRST_ID + ANALOG_9_12;
 800244e:	4b46      	ldr	r3, [pc, #280]	; (8002568 <Tx_Analog_9_12+0x148>)
 8002450:	f240 5217 	movw	r2, #1303	; 0x517
 8002454:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 8;
 8002456:	4b44      	ldr	r3, [pc, #272]	; (8002568 <Tx_Analog_9_12+0x148>)
 8002458:	2208      	movs	r2, #8
 800245a:	611a      	str	r2, [r3, #16]

	if((verifyADC & 0x0f00) == 0)
 800245c:	4b40      	ldr	r3, [pc, #256]	; (8002560 <Tx_Analog_9_12+0x140>)
 800245e:	881b      	ldrh	r3, [r3, #0]
 8002460:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002464:	2b00      	cmp	r3, #0
 8002466:	d077      	beq.n	8002558 <Tx_Analog_9_12+0x138>
		return;

	txData[0] = adcBuffer[8] >> 8;
 8002468:	4b40      	ldr	r3, [pc, #256]	; (800256c <Tx_Analog_9_12+0x14c>)
 800246a:	8a1b      	ldrh	r3, [r3, #16]
 800246c:	0a1b      	lsrs	r3, r3, #8
 800246e:	b29b      	uxth	r3, r3
 8002470:	b2da      	uxtb	r2, r3
 8002472:	4b3f      	ldr	r3, [pc, #252]	; (8002570 <Tx_Analog_9_12+0x150>)
 8002474:	701a      	strb	r2, [r3, #0]
	txData[1] = adcBuffer[8] & 0xff;
 8002476:	4b3d      	ldr	r3, [pc, #244]	; (800256c <Tx_Analog_9_12+0x14c>)
 8002478:	8a1b      	ldrh	r3, [r3, #16]
 800247a:	b2da      	uxtb	r2, r3
 800247c:	4b3c      	ldr	r3, [pc, #240]	; (8002570 <Tx_Analog_9_12+0x150>)
 800247e:	705a      	strb	r2, [r3, #1]
	txData[2] = adcBuffer[9] >> 8;
 8002480:	4b3a      	ldr	r3, [pc, #232]	; (800256c <Tx_Analog_9_12+0x14c>)
 8002482:	8a5b      	ldrh	r3, [r3, #18]
 8002484:	0a1b      	lsrs	r3, r3, #8
 8002486:	b29b      	uxth	r3, r3
 8002488:	b2da      	uxtb	r2, r3
 800248a:	4b39      	ldr	r3, [pc, #228]	; (8002570 <Tx_Analog_9_12+0x150>)
 800248c:	709a      	strb	r2, [r3, #2]
	txData[3] = adcBuffer[9] & 0xff;
 800248e:	4b37      	ldr	r3, [pc, #220]	; (800256c <Tx_Analog_9_12+0x14c>)
 8002490:	8a5b      	ldrh	r3, [r3, #18]
 8002492:	b2da      	uxtb	r2, r3
 8002494:	4b36      	ldr	r3, [pc, #216]	; (8002570 <Tx_Analog_9_12+0x150>)
 8002496:	70da      	strb	r2, [r3, #3]
	txData[4] = adcBuffer[10] >> 8;
 8002498:	4b34      	ldr	r3, [pc, #208]	; (800256c <Tx_Analog_9_12+0x14c>)
 800249a:	8a9b      	ldrh	r3, [r3, #20]
 800249c:	0a1b      	lsrs	r3, r3, #8
 800249e:	b29b      	uxth	r3, r3
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b33      	ldr	r3, [pc, #204]	; (8002570 <Tx_Analog_9_12+0x150>)
 80024a4:	711a      	strb	r2, [r3, #4]
	txData[5] = adcBuffer[10] & 0xff;
 80024a6:	4b31      	ldr	r3, [pc, #196]	; (800256c <Tx_Analog_9_12+0x14c>)
 80024a8:	8a9b      	ldrh	r3, [r3, #20]
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	4b30      	ldr	r3, [pc, #192]	; (8002570 <Tx_Analog_9_12+0x150>)
 80024ae:	715a      	strb	r2, [r3, #5]
	txData[6] = adcBuffer[11] >> 8;
 80024b0:	4b2e      	ldr	r3, [pc, #184]	; (800256c <Tx_Analog_9_12+0x14c>)
 80024b2:	8adb      	ldrh	r3, [r3, #22]
 80024b4:	0a1b      	lsrs	r3, r3, #8
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	4b2d      	ldr	r3, [pc, #180]	; (8002570 <Tx_Analog_9_12+0x150>)
 80024bc:	719a      	strb	r2, [r3, #6]
	txData[7] = adcBuffer[11] & 0xff;
 80024be:	4b2b      	ldr	r3, [pc, #172]	; (800256c <Tx_Analog_9_12+0x14c>)
 80024c0:	8adb      	ldrh	r3, [r3, #22]
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	4b2a      	ldr	r3, [pc, #168]	; (8002570 <Tx_Analog_9_12+0x150>)
 80024c6:	71da      	strb	r2, [r3, #7]

	if(flagDatalogger == DL_SAVE)
 80024c8:	4b2a      	ldr	r3, [pc, #168]	; (8002574 <Tx_Analog_9_12+0x154>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d10a      	bne.n	80024e6 <Tx_Analog_9_12+0xc6>
		Principal_Datalogger_Save_Buffer(txHeader.StdId, txHeader.DLC, txData, &dirStruct, &fileStruct);
 80024d0:	4b25      	ldr	r3, [pc, #148]	; (8002568 <Tx_Analog_9_12+0x148>)
 80024d2:	6818      	ldr	r0, [r3, #0]
 80024d4:	4b24      	ldr	r3, [pc, #144]	; (8002568 <Tx_Analog_9_12+0x148>)
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	b2d9      	uxtb	r1, r3
 80024da:	4b27      	ldr	r3, [pc, #156]	; (8002578 <Tx_Analog_9_12+0x158>)
 80024dc:	9300      	str	r3, [sp, #0]
 80024de:	4b27      	ldr	r3, [pc, #156]	; (800257c <Tx_Analog_9_12+0x15c>)
 80024e0:	4a23      	ldr	r2, [pc, #140]	; (8002570 <Tx_Analog_9_12+0x150>)
 80024e2:	f003 fd27 	bl	8005f34 <Principal_Datalogger_Save_Buffer>

	if((accCAN[ANALOG_9_12] >= perCAN[ANALOG_9_12]) && (perCAN[ANALOG_9_12] != MSG_DISABLED))
 80024e6:	4b1f      	ldr	r3, [pc, #124]	; (8002564 <Tx_Analog_9_12+0x144>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	4a25      	ldr	r2, [pc, #148]	; (8002580 <Tx_Analog_9_12+0x160>)
 80024ec:	8892      	ldrh	r2, [r2, #4]
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d333      	bcc.n	800255a <Tx_Analog_9_12+0x13a>
 80024f2:	4b23      	ldr	r3, [pc, #140]	; (8002580 <Tx_Analog_9_12+0x160>)
 80024f4:	889b      	ldrh	r3, [r3, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d02f      	beq.n	800255a <Tx_Analog_9_12+0x13a>
	{
		accCAN[ANALOG_9_12] -= perCAN[ANALOG_9_12];
 80024fa:	4b1a      	ldr	r3, [pc, #104]	; (8002564 <Tx_Analog_9_12+0x144>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	4a20      	ldr	r2, [pc, #128]	; (8002580 <Tx_Analog_9_12+0x160>)
 8002500:	8892      	ldrh	r2, [r2, #4]
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	4a17      	ldr	r2, [pc, #92]	; (8002564 <Tx_Analog_9_12+0x144>)
 8002506:	6093      	str	r3, [r2, #8]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 8002508:	4b1e      	ldr	r3, [pc, #120]	; (8002584 <Tx_Analog_9_12+0x164>)
 800250a:	4a19      	ldr	r2, [pc, #100]	; (8002570 <Tx_Analog_9_12+0x150>)
 800250c:	4916      	ldr	r1, [pc, #88]	; (8002568 <Tx_Analog_9_12+0x148>)
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f005 fabe 	bl	8007a90 <HAL_CAN_AddTxMessage>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d107      	bne.n	800252a <Tx_Analog_9_12+0x10a>
			verifyCAN |= 1;
 800251a:	4b1b      	ldr	r3, [pc, #108]	; (8002588 <Tx_Analog_9_12+0x168>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	b2da      	uxtb	r2, r3
 8002524:	4b18      	ldr	r3, [pc, #96]	; (8002588 <Tx_Analog_9_12+0x168>)
 8002526:	701a      	strb	r2, [r3, #0]
 8002528:	e006      	b.n	8002538 <Tx_Analog_9_12+0x118>
		else
			verifyCAN &= 0x02;
 800252a:	4b17      	ldr	r3, [pc, #92]	; (8002588 <Tx_Analog_9_12+0x168>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	b2da      	uxtb	r2, r3
 8002534:	4b14      	ldr	r3, [pc, #80]	; (8002588 <Tx_Analog_9_12+0x168>)
 8002536:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8002538:	2300      	movs	r3, #0
 800253a:	73fb      	strb	r3, [r7, #15]
 800253c:	e002      	b.n	8002544 <Tx_Analog_9_12+0x124>
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	3301      	adds	r3, #1
 8002542:	73fb      	strb	r3, [r7, #15]
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f005 fb7e 	bl	8007c46 <HAL_CAN_GetTxMailboxesFreeLevel>
 800254a:	4603      	mov	r3, r0
 800254c:	2b03      	cmp	r3, #3
 800254e:	d004      	beq.n	800255a <Tx_Analog_9_12+0x13a>
 8002550:	7bfb      	ldrb	r3, [r7, #15]
 8002552:	2b02      	cmp	r3, #2
 8002554:	d9f3      	bls.n	800253e <Tx_Analog_9_12+0x11e>
 8002556:	e000      	b.n	800255a <Tx_Analog_9_12+0x13a>
		return;
 8002558:	bf00      	nop
	}
}
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	2001279e 	.word	0x2001279e
 8002564:	2001275c 	.word	0x2001275c
 8002568:	20000568 	.word	0x20000568
 800256c:	20000584 	.word	0x20000584
 8002570:	20000540 	.word	0x20000540
 8002574:	20012712 	.word	0x20012712
 8002578:	200116a8 	.word	0x200116a8
 800257c:	20010640 	.word	0x20010640
 8002580:	20012730 	.word	0x20012730
 8002584:	20000548 	.word	0x20000548
 8002588:	2001279c 	.word	0x2001279c

0800258c <Tx_RTC>:

static void Tx_RTC(CAN_HandleTypeDef* hcan)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af02      	add	r7, sp, #8
 8002592:	6078      	str	r0, [r7, #4]
	txHeader.IDE = CAN_ID_STD;
 8002594:	4b3e      	ldr	r3, [pc, #248]	; (8002690 <Tx_RTC+0x104>)
 8002596:	2200      	movs	r2, #0
 8002598:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 800259a:	4b3d      	ldr	r3, [pc, #244]	; (8002690 <Tx_RTC+0x104>)
 800259c:	2200      	movs	r2, #0
 800259e:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 80025a0:	4b3b      	ldr	r3, [pc, #236]	; (8002690 <Tx_RTC+0x104>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = FIRST_ID + RTC_MSG;
 80025a6:	4b3a      	ldr	r3, [pc, #232]	; (8002690 <Tx_RTC+0x104>)
 80025a8:	f44f 62a3 	mov.w	r2, #1304	; 0x518
 80025ac:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 6;
 80025ae:	4b38      	ldr	r3, [pc, #224]	; (8002690 <Tx_RTC+0x104>)
 80025b0:	2206      	movs	r2, #6
 80025b2:	611a      	str	r2, [r3, #16]

	HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 80025b4:	2200      	movs	r2, #0
 80025b6:	4937      	ldr	r1, [pc, #220]	; (8002694 <Tx_RTC+0x108>)
 80025b8:	4837      	ldr	r0, [pc, #220]	; (8002698 <Tx_RTC+0x10c>)
 80025ba:	f00a faef 	bl	800cb9c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 80025be:	2200      	movs	r2, #0
 80025c0:	4936      	ldr	r1, [pc, #216]	; (800269c <Tx_RTC+0x110>)
 80025c2:	4835      	ldr	r0, [pc, #212]	; (8002698 <Tx_RTC+0x10c>)
 80025c4:	f00a fbcc 	bl	800cd60 <HAL_RTC_GetDate>

	txData[0] = rtcDate.Year;
 80025c8:	4b34      	ldr	r3, [pc, #208]	; (800269c <Tx_RTC+0x110>)
 80025ca:	78da      	ldrb	r2, [r3, #3]
 80025cc:	4b34      	ldr	r3, [pc, #208]	; (80026a0 <Tx_RTC+0x114>)
 80025ce:	701a      	strb	r2, [r3, #0]
	txData[1] = rtcDate.Month;
 80025d0:	4b32      	ldr	r3, [pc, #200]	; (800269c <Tx_RTC+0x110>)
 80025d2:	785a      	ldrb	r2, [r3, #1]
 80025d4:	4b32      	ldr	r3, [pc, #200]	; (80026a0 <Tx_RTC+0x114>)
 80025d6:	705a      	strb	r2, [r3, #1]
	txData[2] = rtcDate.Date;
 80025d8:	4b30      	ldr	r3, [pc, #192]	; (800269c <Tx_RTC+0x110>)
 80025da:	789a      	ldrb	r2, [r3, #2]
 80025dc:	4b30      	ldr	r3, [pc, #192]	; (80026a0 <Tx_RTC+0x114>)
 80025de:	709a      	strb	r2, [r3, #2]
	txData[3] = rtcTime.Hours;
 80025e0:	4b2c      	ldr	r3, [pc, #176]	; (8002694 <Tx_RTC+0x108>)
 80025e2:	781a      	ldrb	r2, [r3, #0]
 80025e4:	4b2e      	ldr	r3, [pc, #184]	; (80026a0 <Tx_RTC+0x114>)
 80025e6:	70da      	strb	r2, [r3, #3]
	txData[4] = rtcTime.Minutes;
 80025e8:	4b2a      	ldr	r3, [pc, #168]	; (8002694 <Tx_RTC+0x108>)
 80025ea:	785a      	ldrb	r2, [r3, #1]
 80025ec:	4b2c      	ldr	r3, [pc, #176]	; (80026a0 <Tx_RTC+0x114>)
 80025ee:	711a      	strb	r2, [r3, #4]
	txData[5] = rtcTime.Seconds;
 80025f0:	4b28      	ldr	r3, [pc, #160]	; (8002694 <Tx_RTC+0x108>)
 80025f2:	789a      	ldrb	r2, [r3, #2]
 80025f4:	4b2a      	ldr	r3, [pc, #168]	; (80026a0 <Tx_RTC+0x114>)
 80025f6:	715a      	strb	r2, [r3, #5]


	if(flagDatalogger == DL_SAVE)
 80025f8:	4b2a      	ldr	r3, [pc, #168]	; (80026a4 <Tx_RTC+0x118>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d10a      	bne.n	8002616 <Tx_RTC+0x8a>
		Principal_Datalogger_Save_Buffer(txHeader.StdId, txHeader.DLC, txData, &dirStruct, &fileStruct);
 8002600:	4b23      	ldr	r3, [pc, #140]	; (8002690 <Tx_RTC+0x104>)
 8002602:	6818      	ldr	r0, [r3, #0]
 8002604:	4b22      	ldr	r3, [pc, #136]	; (8002690 <Tx_RTC+0x104>)
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	b2d9      	uxtb	r1, r3
 800260a:	4b27      	ldr	r3, [pc, #156]	; (80026a8 <Tx_RTC+0x11c>)
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	4b27      	ldr	r3, [pc, #156]	; (80026ac <Tx_RTC+0x120>)
 8002610:	4a23      	ldr	r2, [pc, #140]	; (80026a0 <Tx_RTC+0x114>)
 8002612:	f003 fc8f 	bl	8005f34 <Principal_Datalogger_Save_Buffer>

	if((accCAN[RTC_MSG] >= perCAN[RTC_MSG]) && (perCAN[RTC_MSG] != MSG_DISABLED))
 8002616:	4b26      	ldr	r3, [pc, #152]	; (80026b0 <Tx_RTC+0x124>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	4a26      	ldr	r2, [pc, #152]	; (80026b4 <Tx_RTC+0x128>)
 800261c:	88d2      	ldrh	r2, [r2, #6]
 800261e:	4293      	cmp	r3, r2
 8002620:	d331      	bcc.n	8002686 <Tx_RTC+0xfa>
 8002622:	4b24      	ldr	r3, [pc, #144]	; (80026b4 <Tx_RTC+0x128>)
 8002624:	88db      	ldrh	r3, [r3, #6]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d02d      	beq.n	8002686 <Tx_RTC+0xfa>
	{
		accCAN[RTC_MSG] -= perCAN[RTC_MSG];
 800262a:	4b21      	ldr	r3, [pc, #132]	; (80026b0 <Tx_RTC+0x124>)
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	4a21      	ldr	r2, [pc, #132]	; (80026b4 <Tx_RTC+0x128>)
 8002630:	88d2      	ldrh	r2, [r2, #6]
 8002632:	1a9b      	subs	r3, r3, r2
 8002634:	4a1e      	ldr	r2, [pc, #120]	; (80026b0 <Tx_RTC+0x124>)
 8002636:	60d3      	str	r3, [r2, #12]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 8002638:	4b1f      	ldr	r3, [pc, #124]	; (80026b8 <Tx_RTC+0x12c>)
 800263a:	4a19      	ldr	r2, [pc, #100]	; (80026a0 <Tx_RTC+0x114>)
 800263c:	4914      	ldr	r1, [pc, #80]	; (8002690 <Tx_RTC+0x104>)
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f005 fa26 	bl	8007a90 <HAL_CAN_AddTxMessage>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d107      	bne.n	800265a <Tx_RTC+0xce>
			verifyCAN |= 1;
 800264a:	4b1c      	ldr	r3, [pc, #112]	; (80026bc <Tx_RTC+0x130>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	b2da      	uxtb	r2, r3
 8002654:	4b19      	ldr	r3, [pc, #100]	; (80026bc <Tx_RTC+0x130>)
 8002656:	701a      	strb	r2, [r3, #0]
 8002658:	e006      	b.n	8002668 <Tx_RTC+0xdc>
		else
			verifyCAN &= 0x02;
 800265a:	4b18      	ldr	r3, [pc, #96]	; (80026bc <Tx_RTC+0x130>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	b2da      	uxtb	r2, r3
 8002664:	4b15      	ldr	r3, [pc, #84]	; (80026bc <Tx_RTC+0x130>)
 8002666:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8002668:	2300      	movs	r3, #0
 800266a:	73fb      	strb	r3, [r7, #15]
 800266c:	e002      	b.n	8002674 <Tx_RTC+0xe8>
 800266e:	7bfb      	ldrb	r3, [r7, #15]
 8002670:	3301      	adds	r3, #1
 8002672:	73fb      	strb	r3, [r7, #15]
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f005 fae6 	bl	8007c46 <HAL_CAN_GetTxMailboxesFreeLevel>
 800267a:	4603      	mov	r3, r0
 800267c:	2b03      	cmp	r3, #3
 800267e:	d002      	beq.n	8002686 <Tx_RTC+0xfa>
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d9f3      	bls.n	800266e <Tx_RTC+0xe2>
	}
}
 8002686:	bf00      	nop
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20000568 	.word	0x20000568
 8002694:	2001271c 	.word	0x2001271c
 8002698:	2000038c 	.word	0x2000038c
 800269c:	20012718 	.word	0x20012718
 80026a0:	20000540 	.word	0x20000540
 80026a4:	20012712 	.word	0x20012712
 80026a8:	200116a8 	.word	0x200116a8
 80026ac:	20010640 	.word	0x20010640
 80026b0:	2001275c 	.word	0x2001275c
 80026b4:	20012730 	.word	0x20012730
 80026b8:	20000548 	.word	0x20000548
 80026bc:	2001279c 	.word	0x2001279c

080026c0 <Tx_Verify>:

static void Tx_Verify(CAN_HandleTypeDef* hcan)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	6078      	str	r0, [r7, #4]
	txHeader.IDE = CAN_ID_STD;
 80026c8:	4bc8      	ldr	r3, [pc, #800]	; (80029ec <Tx_Verify+0x32c>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 80026ce:	4bc7      	ldr	r3, [pc, #796]	; (80029ec <Tx_Verify+0x32c>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 80026d4:	4bc5      	ldr	r3, [pc, #788]	; (80029ec <Tx_Verify+0x32c>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = FIRST_ID + VERIFY_MSG;
 80026da:	4bc4      	ldr	r3, [pc, #784]	; (80029ec <Tx_Verify+0x32c>)
 80026dc:	f240 5219 	movw	r2, #1305	; 0x519
 80026e0:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 8;
 80026e2:	4bc2      	ldr	r3, [pc, #776]	; (80029ec <Tx_Verify+0x32c>)
 80026e4:	2208      	movs	r2, #8
 80026e6:	611a      	str	r2, [r3, #16]

	txData[0] = verifyADC & 0xff;
 80026e8:	4bc1      	ldr	r3, [pc, #772]	; (80029f0 <Tx_Verify+0x330>)
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	b2da      	uxtb	r2, r3
 80026ee:	4bc1      	ldr	r3, [pc, #772]	; (80029f4 <Tx_Verify+0x334>)
 80026f0:	701a      	strb	r2, [r3, #0]
	txData[1] = (verifyADC >> 8) & 0x0f;
 80026f2:	4bbf      	ldr	r3, [pc, #764]	; (80029f0 <Tx_Verify+0x330>)
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	0a1b      	lsrs	r3, r3, #8
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	f003 030f 	and.w	r3, r3, #15
 8002700:	b2da      	uxtb	r2, r3
 8002702:	4bbc      	ldr	r3, [pc, #752]	; (80029f4 <Tx_Verify+0x334>)
 8002704:	705a      	strb	r2, [r3, #1]

	if(flagDatalogger == DL_SAVE)
 8002706:	4bbc      	ldr	r3, [pc, #752]	; (80029f8 <Tx_Verify+0x338>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d10d      	bne.n	800272a <Tx_Verify+0x6a>
	{
		txData[1] |= (1 << 4);
 800270e:	4bb9      	ldr	r3, [pc, #740]	; (80029f4 <Tx_Verify+0x334>)
 8002710:	785b      	ldrb	r3, [r3, #1]
 8002712:	f043 0310 	orr.w	r3, r3, #16
 8002716:	b2da      	uxtb	r2, r3
 8002718:	4bb6      	ldr	r3, [pc, #728]	; (80029f4 <Tx_Verify+0x334>)
 800271a:	705a      	strb	r2, [r3, #1]
		HAL_GPIO_WritePin(OUT0_GPIO_Port, OUT0_Pin, GPIO_PIN_RESET);
 800271c:	2200      	movs	r2, #0
 800271e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002722:	48b6      	ldr	r0, [pc, #728]	; (80029fc <Tx_Verify+0x33c>)
 8002724:	f006 fc88 	bl	8009038 <HAL_GPIO_WritePin>
 8002728:	e005      	b.n	8002736 <Tx_Verify+0x76>
	}
	else
		HAL_GPIO_WritePin(OUT0_GPIO_Port, OUT0_Pin, GPIO_PIN_SET);
 800272a:	2201      	movs	r2, #1
 800272c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002730:	48b2      	ldr	r0, [pc, #712]	; (80029fc <Tx_Verify+0x33c>)
 8002732:	f006 fc81 	bl	8009038 <HAL_GPIO_WritePin>

	if(flagRTC == RTC_OK)
 8002736:	4bb2      	ldr	r3, [pc, #712]	; (8002a00 <Tx_Verify+0x340>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <Tx_Verify+0x8c>
		txData[1] |= (1 << 5);
 800273e:	4bad      	ldr	r3, [pc, #692]	; (80029f4 <Tx_Verify+0x334>)
 8002740:	785b      	ldrb	r3, [r3, #1]
 8002742:	f043 0320 	orr.w	r3, r3, #32
 8002746:	b2da      	uxtb	r2, r3
 8002748:	4baa      	ldr	r3, [pc, #680]	; (80029f4 <Tx_Verify+0x334>)
 800274a:	705a      	strb	r2, [r3, #1]

	__FREQ_TO_BUFFER(txData[2], perMsg[ANALOG_1_4]);
 800274c:	4bad      	ldr	r3, [pc, #692]	; (8002a04 <Tx_Verify+0x344>)
 800274e:	881b      	ldrh	r3, [r3, #0]
 8002750:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002754:	f000 8081 	beq.w	800285a <Tx_Verify+0x19a>
 8002758:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800275c:	f300 80a9 	bgt.w	80028b2 <Tx_Verify+0x1f2>
 8002760:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002764:	d07d      	beq.n	8002862 <Tx_Verify+0x1a2>
 8002766:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800276a:	f300 80a2 	bgt.w	80028b2 <Tx_Verify+0x1f2>
 800276e:	2bc8      	cmp	r3, #200	; 0xc8
 8002770:	d07b      	beq.n	800286a <Tx_Verify+0x1aa>
 8002772:	2bc8      	cmp	r3, #200	; 0xc8
 8002774:	f300 809d 	bgt.w	80028b2 <Tx_Verify+0x1f2>
 8002778:	2b32      	cmp	r3, #50	; 0x32
 800277a:	dc6b      	bgt.n	8002854 <Tx_Verify+0x194>
 800277c:	2b02      	cmp	r3, #2
 800277e:	f2c0 8098 	blt.w	80028b2 <Tx_Verify+0x1f2>
 8002782:	3b02      	subs	r3, #2
 8002784:	2b30      	cmp	r3, #48	; 0x30
 8002786:	f200 8094 	bhi.w	80028b2 <Tx_Verify+0x1f2>
 800278a:	a201      	add	r2, pc, #4	; (adr r2, 8002790 <Tx_Verify+0xd0>)
 800278c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002790:	080028ab 	.word	0x080028ab
 8002794:	080028b3 	.word	0x080028b3
 8002798:	080028a3 	.word	0x080028a3
 800279c:	0800289b 	.word	0x0800289b
 80027a0:	080028b3 	.word	0x080028b3
 80027a4:	080028b3 	.word	0x080028b3
 80027a8:	080028b3 	.word	0x080028b3
 80027ac:	080028b3 	.word	0x080028b3
 80027b0:	08002893 	.word	0x08002893
 80027b4:	080028b3 	.word	0x080028b3
 80027b8:	080028b3 	.word	0x080028b3
 80027bc:	080028b3 	.word	0x080028b3
 80027c0:	080028b3 	.word	0x080028b3
 80027c4:	080028b3 	.word	0x080028b3
 80027c8:	080028b3 	.word	0x080028b3
 80027cc:	080028b3 	.word	0x080028b3
 80027d0:	080028b3 	.word	0x080028b3
 80027d4:	080028b3 	.word	0x080028b3
 80027d8:	0800288b 	.word	0x0800288b
 80027dc:	080028b3 	.word	0x080028b3
 80027e0:	080028b3 	.word	0x080028b3
 80027e4:	080028b3 	.word	0x080028b3
 80027e8:	080028b3 	.word	0x080028b3
 80027ec:	080028b3 	.word	0x080028b3
 80027f0:	080028b3 	.word	0x080028b3
 80027f4:	080028b3 	.word	0x080028b3
 80027f8:	080028b3 	.word	0x080028b3
 80027fc:	080028b3 	.word	0x080028b3
 8002800:	080028b3 	.word	0x080028b3
 8002804:	080028b3 	.word	0x080028b3
 8002808:	080028b3 	.word	0x080028b3
 800280c:	080028b3 	.word	0x080028b3
 8002810:	080028b3 	.word	0x080028b3
 8002814:	080028b3 	.word	0x080028b3
 8002818:	080028b3 	.word	0x080028b3
 800281c:	080028b3 	.word	0x080028b3
 8002820:	080028b3 	.word	0x080028b3
 8002824:	080028b3 	.word	0x080028b3
 8002828:	08002883 	.word	0x08002883
 800282c:	080028b3 	.word	0x080028b3
 8002830:	080028b3 	.word	0x080028b3
 8002834:	080028b3 	.word	0x080028b3
 8002838:	080028b3 	.word	0x080028b3
 800283c:	080028b3 	.word	0x080028b3
 8002840:	080028b3 	.word	0x080028b3
 8002844:	080028b3 	.word	0x080028b3
 8002848:	080028b3 	.word	0x080028b3
 800284c:	080028b3 	.word	0x080028b3
 8002850:	0800287b 	.word	0x0800287b
 8002854:	2b64      	cmp	r3, #100	; 0x64
 8002856:	d00c      	beq.n	8002872 <Tx_Verify+0x1b2>
 8002858:	e02b      	b.n	80028b2 <Tx_Verify+0x1f2>
 800285a:	4b66      	ldr	r3, [pc, #408]	; (80029f4 <Tx_Verify+0x334>)
 800285c:	2201      	movs	r2, #1
 800285e:	709a      	strb	r2, [r3, #2]
 8002860:	e02a      	b.n	80028b8 <Tx_Verify+0x1f8>
 8002862:	4b64      	ldr	r3, [pc, #400]	; (80029f4 <Tx_Verify+0x334>)
 8002864:	2202      	movs	r2, #2
 8002866:	709a      	strb	r2, [r3, #2]
 8002868:	e026      	b.n	80028b8 <Tx_Verify+0x1f8>
 800286a:	4b62      	ldr	r3, [pc, #392]	; (80029f4 <Tx_Verify+0x334>)
 800286c:	2203      	movs	r2, #3
 800286e:	709a      	strb	r2, [r3, #2]
 8002870:	e022      	b.n	80028b8 <Tx_Verify+0x1f8>
 8002872:	4b60      	ldr	r3, [pc, #384]	; (80029f4 <Tx_Verify+0x334>)
 8002874:	2204      	movs	r2, #4
 8002876:	709a      	strb	r2, [r3, #2]
 8002878:	e01e      	b.n	80028b8 <Tx_Verify+0x1f8>
 800287a:	4b5e      	ldr	r3, [pc, #376]	; (80029f4 <Tx_Verify+0x334>)
 800287c:	2205      	movs	r2, #5
 800287e:	709a      	strb	r2, [r3, #2]
 8002880:	e01a      	b.n	80028b8 <Tx_Verify+0x1f8>
 8002882:	4b5c      	ldr	r3, [pc, #368]	; (80029f4 <Tx_Verify+0x334>)
 8002884:	2206      	movs	r2, #6
 8002886:	709a      	strb	r2, [r3, #2]
 8002888:	e016      	b.n	80028b8 <Tx_Verify+0x1f8>
 800288a:	4b5a      	ldr	r3, [pc, #360]	; (80029f4 <Tx_Verify+0x334>)
 800288c:	2207      	movs	r2, #7
 800288e:	709a      	strb	r2, [r3, #2]
 8002890:	e012      	b.n	80028b8 <Tx_Verify+0x1f8>
 8002892:	4b58      	ldr	r3, [pc, #352]	; (80029f4 <Tx_Verify+0x334>)
 8002894:	2208      	movs	r2, #8
 8002896:	709a      	strb	r2, [r3, #2]
 8002898:	e00e      	b.n	80028b8 <Tx_Verify+0x1f8>
 800289a:	4b56      	ldr	r3, [pc, #344]	; (80029f4 <Tx_Verify+0x334>)
 800289c:	2209      	movs	r2, #9
 800289e:	709a      	strb	r2, [r3, #2]
 80028a0:	e00a      	b.n	80028b8 <Tx_Verify+0x1f8>
 80028a2:	4b54      	ldr	r3, [pc, #336]	; (80029f4 <Tx_Verify+0x334>)
 80028a4:	220a      	movs	r2, #10
 80028a6:	709a      	strb	r2, [r3, #2]
 80028a8:	e006      	b.n	80028b8 <Tx_Verify+0x1f8>
 80028aa:	4b52      	ldr	r3, [pc, #328]	; (80029f4 <Tx_Verify+0x334>)
 80028ac:	220b      	movs	r2, #11
 80028ae:	709a      	strb	r2, [r3, #2]
 80028b0:	e002      	b.n	80028b8 <Tx_Verify+0x1f8>
 80028b2:	4b50      	ldr	r3, [pc, #320]	; (80029f4 <Tx_Verify+0x334>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	709a      	strb	r2, [r3, #2]
 80028b8:	bf00      	nop
	__FREQ_TO_BUFFER(txData[3], perMsg[ANALOG_5_8]);
 80028ba:	4b52      	ldr	r3, [pc, #328]	; (8002a04 <Tx_Verify+0x344>)
 80028bc:	885b      	ldrh	r3, [r3, #2]
 80028be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028c2:	f000 8082 	beq.w	80029ca <Tx_Verify+0x30a>
 80028c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028ca:	f300 80b9 	bgt.w	8002a40 <Tx_Verify+0x380>
 80028ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80028d2:	d07e      	beq.n	80029d2 <Tx_Verify+0x312>
 80028d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80028d8:	f300 80b2 	bgt.w	8002a40 <Tx_Verify+0x380>
 80028dc:	2bc8      	cmp	r3, #200	; 0xc8
 80028de:	d07c      	beq.n	80029da <Tx_Verify+0x31a>
 80028e0:	2bc8      	cmp	r3, #200	; 0xc8
 80028e2:	f300 80ad 	bgt.w	8002a40 <Tx_Verify+0x380>
 80028e6:	2b32      	cmp	r3, #50	; 0x32
 80028e8:	dc6c      	bgt.n	80029c4 <Tx_Verify+0x304>
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	f2c0 80a8 	blt.w	8002a40 <Tx_Verify+0x380>
 80028f0:	3b02      	subs	r3, #2
 80028f2:	2b30      	cmp	r3, #48	; 0x30
 80028f4:	f200 80a4 	bhi.w	8002a40 <Tx_Verify+0x380>
 80028f8:	a201      	add	r2, pc, #4	; (adr r2, 8002900 <Tx_Verify+0x240>)
 80028fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fe:	bf00      	nop
 8002900:	08002a39 	.word	0x08002a39
 8002904:	08002a41 	.word	0x08002a41
 8002908:	08002a31 	.word	0x08002a31
 800290c:	08002a29 	.word	0x08002a29
 8002910:	08002a41 	.word	0x08002a41
 8002914:	08002a41 	.word	0x08002a41
 8002918:	08002a41 	.word	0x08002a41
 800291c:	08002a41 	.word	0x08002a41
 8002920:	08002a21 	.word	0x08002a21
 8002924:	08002a41 	.word	0x08002a41
 8002928:	08002a41 	.word	0x08002a41
 800292c:	08002a41 	.word	0x08002a41
 8002930:	08002a41 	.word	0x08002a41
 8002934:	08002a41 	.word	0x08002a41
 8002938:	08002a41 	.word	0x08002a41
 800293c:	08002a41 	.word	0x08002a41
 8002940:	08002a41 	.word	0x08002a41
 8002944:	08002a41 	.word	0x08002a41
 8002948:	08002a19 	.word	0x08002a19
 800294c:	08002a41 	.word	0x08002a41
 8002950:	08002a41 	.word	0x08002a41
 8002954:	08002a41 	.word	0x08002a41
 8002958:	08002a41 	.word	0x08002a41
 800295c:	08002a41 	.word	0x08002a41
 8002960:	08002a41 	.word	0x08002a41
 8002964:	08002a41 	.word	0x08002a41
 8002968:	08002a41 	.word	0x08002a41
 800296c:	08002a41 	.word	0x08002a41
 8002970:	08002a41 	.word	0x08002a41
 8002974:	08002a41 	.word	0x08002a41
 8002978:	08002a41 	.word	0x08002a41
 800297c:	08002a41 	.word	0x08002a41
 8002980:	08002a41 	.word	0x08002a41
 8002984:	08002a41 	.word	0x08002a41
 8002988:	08002a41 	.word	0x08002a41
 800298c:	08002a41 	.word	0x08002a41
 8002990:	08002a41 	.word	0x08002a41
 8002994:	08002a41 	.word	0x08002a41
 8002998:	08002a11 	.word	0x08002a11
 800299c:	08002a41 	.word	0x08002a41
 80029a0:	08002a41 	.word	0x08002a41
 80029a4:	08002a41 	.word	0x08002a41
 80029a8:	08002a41 	.word	0x08002a41
 80029ac:	08002a41 	.word	0x08002a41
 80029b0:	08002a41 	.word	0x08002a41
 80029b4:	08002a41 	.word	0x08002a41
 80029b8:	08002a41 	.word	0x08002a41
 80029bc:	08002a41 	.word	0x08002a41
 80029c0:	08002a09 	.word	0x08002a09
 80029c4:	2b64      	cmp	r3, #100	; 0x64
 80029c6:	d00c      	beq.n	80029e2 <Tx_Verify+0x322>
 80029c8:	e03a      	b.n	8002a40 <Tx_Verify+0x380>
 80029ca:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <Tx_Verify+0x334>)
 80029cc:	2201      	movs	r2, #1
 80029ce:	70da      	strb	r2, [r3, #3]
 80029d0:	e039      	b.n	8002a46 <Tx_Verify+0x386>
 80029d2:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <Tx_Verify+0x334>)
 80029d4:	2202      	movs	r2, #2
 80029d6:	70da      	strb	r2, [r3, #3]
 80029d8:	e035      	b.n	8002a46 <Tx_Verify+0x386>
 80029da:	4b06      	ldr	r3, [pc, #24]	; (80029f4 <Tx_Verify+0x334>)
 80029dc:	2203      	movs	r2, #3
 80029de:	70da      	strb	r2, [r3, #3]
 80029e0:	e031      	b.n	8002a46 <Tx_Verify+0x386>
 80029e2:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <Tx_Verify+0x334>)
 80029e4:	2204      	movs	r2, #4
 80029e6:	70da      	strb	r2, [r3, #3]
 80029e8:	e02d      	b.n	8002a46 <Tx_Verify+0x386>
 80029ea:	bf00      	nop
 80029ec:	20000568 	.word	0x20000568
 80029f0:	2001279e 	.word	0x2001279e
 80029f4:	20000540 	.word	0x20000540
 80029f8:	20012712 	.word	0x20012712
 80029fc:	40020400 	.word	0x40020400
 8002a00:	20012713 	.word	0x20012713
 8002a04:	2001273c 	.word	0x2001273c
 8002a08:	4bc5      	ldr	r3, [pc, #788]	; (8002d20 <Tx_Verify+0x660>)
 8002a0a:	2205      	movs	r2, #5
 8002a0c:	70da      	strb	r2, [r3, #3]
 8002a0e:	e01a      	b.n	8002a46 <Tx_Verify+0x386>
 8002a10:	4bc3      	ldr	r3, [pc, #780]	; (8002d20 <Tx_Verify+0x660>)
 8002a12:	2206      	movs	r2, #6
 8002a14:	70da      	strb	r2, [r3, #3]
 8002a16:	e016      	b.n	8002a46 <Tx_Verify+0x386>
 8002a18:	4bc1      	ldr	r3, [pc, #772]	; (8002d20 <Tx_Verify+0x660>)
 8002a1a:	2207      	movs	r2, #7
 8002a1c:	70da      	strb	r2, [r3, #3]
 8002a1e:	e012      	b.n	8002a46 <Tx_Verify+0x386>
 8002a20:	4bbf      	ldr	r3, [pc, #764]	; (8002d20 <Tx_Verify+0x660>)
 8002a22:	2208      	movs	r2, #8
 8002a24:	70da      	strb	r2, [r3, #3]
 8002a26:	e00e      	b.n	8002a46 <Tx_Verify+0x386>
 8002a28:	4bbd      	ldr	r3, [pc, #756]	; (8002d20 <Tx_Verify+0x660>)
 8002a2a:	2209      	movs	r2, #9
 8002a2c:	70da      	strb	r2, [r3, #3]
 8002a2e:	e00a      	b.n	8002a46 <Tx_Verify+0x386>
 8002a30:	4bbb      	ldr	r3, [pc, #748]	; (8002d20 <Tx_Verify+0x660>)
 8002a32:	220a      	movs	r2, #10
 8002a34:	70da      	strb	r2, [r3, #3]
 8002a36:	e006      	b.n	8002a46 <Tx_Verify+0x386>
 8002a38:	4bb9      	ldr	r3, [pc, #740]	; (8002d20 <Tx_Verify+0x660>)
 8002a3a:	220b      	movs	r2, #11
 8002a3c:	70da      	strb	r2, [r3, #3]
 8002a3e:	e002      	b.n	8002a46 <Tx_Verify+0x386>
 8002a40:	4bb7      	ldr	r3, [pc, #732]	; (8002d20 <Tx_Verify+0x660>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	70da      	strb	r2, [r3, #3]
 8002a46:	bf00      	nop
	__FREQ_TO_BUFFER(txData[4], perMsg[ANALOG_9_12]);
 8002a48:	4bb6      	ldr	r3, [pc, #728]	; (8002d24 <Tx_Verify+0x664>)
 8002a4a:	889b      	ldrh	r3, [r3, #4]
 8002a4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a50:	f000 8081 	beq.w	8002b56 <Tx_Verify+0x496>
 8002a54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a58:	f300 80a9 	bgt.w	8002bae <Tx_Verify+0x4ee>
 8002a5c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a60:	d07d      	beq.n	8002b5e <Tx_Verify+0x49e>
 8002a62:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a66:	f300 80a2 	bgt.w	8002bae <Tx_Verify+0x4ee>
 8002a6a:	2bc8      	cmp	r3, #200	; 0xc8
 8002a6c:	d07b      	beq.n	8002b66 <Tx_Verify+0x4a6>
 8002a6e:	2bc8      	cmp	r3, #200	; 0xc8
 8002a70:	f300 809d 	bgt.w	8002bae <Tx_Verify+0x4ee>
 8002a74:	2b32      	cmp	r3, #50	; 0x32
 8002a76:	dc6b      	bgt.n	8002b50 <Tx_Verify+0x490>
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	f2c0 8098 	blt.w	8002bae <Tx_Verify+0x4ee>
 8002a7e:	3b02      	subs	r3, #2
 8002a80:	2b30      	cmp	r3, #48	; 0x30
 8002a82:	f200 8094 	bhi.w	8002bae <Tx_Verify+0x4ee>
 8002a86:	a201      	add	r2, pc, #4	; (adr r2, 8002a8c <Tx_Verify+0x3cc>)
 8002a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8c:	08002ba7 	.word	0x08002ba7
 8002a90:	08002baf 	.word	0x08002baf
 8002a94:	08002b9f 	.word	0x08002b9f
 8002a98:	08002b97 	.word	0x08002b97
 8002a9c:	08002baf 	.word	0x08002baf
 8002aa0:	08002baf 	.word	0x08002baf
 8002aa4:	08002baf 	.word	0x08002baf
 8002aa8:	08002baf 	.word	0x08002baf
 8002aac:	08002b8f 	.word	0x08002b8f
 8002ab0:	08002baf 	.word	0x08002baf
 8002ab4:	08002baf 	.word	0x08002baf
 8002ab8:	08002baf 	.word	0x08002baf
 8002abc:	08002baf 	.word	0x08002baf
 8002ac0:	08002baf 	.word	0x08002baf
 8002ac4:	08002baf 	.word	0x08002baf
 8002ac8:	08002baf 	.word	0x08002baf
 8002acc:	08002baf 	.word	0x08002baf
 8002ad0:	08002baf 	.word	0x08002baf
 8002ad4:	08002b87 	.word	0x08002b87
 8002ad8:	08002baf 	.word	0x08002baf
 8002adc:	08002baf 	.word	0x08002baf
 8002ae0:	08002baf 	.word	0x08002baf
 8002ae4:	08002baf 	.word	0x08002baf
 8002ae8:	08002baf 	.word	0x08002baf
 8002aec:	08002baf 	.word	0x08002baf
 8002af0:	08002baf 	.word	0x08002baf
 8002af4:	08002baf 	.word	0x08002baf
 8002af8:	08002baf 	.word	0x08002baf
 8002afc:	08002baf 	.word	0x08002baf
 8002b00:	08002baf 	.word	0x08002baf
 8002b04:	08002baf 	.word	0x08002baf
 8002b08:	08002baf 	.word	0x08002baf
 8002b0c:	08002baf 	.word	0x08002baf
 8002b10:	08002baf 	.word	0x08002baf
 8002b14:	08002baf 	.word	0x08002baf
 8002b18:	08002baf 	.word	0x08002baf
 8002b1c:	08002baf 	.word	0x08002baf
 8002b20:	08002baf 	.word	0x08002baf
 8002b24:	08002b7f 	.word	0x08002b7f
 8002b28:	08002baf 	.word	0x08002baf
 8002b2c:	08002baf 	.word	0x08002baf
 8002b30:	08002baf 	.word	0x08002baf
 8002b34:	08002baf 	.word	0x08002baf
 8002b38:	08002baf 	.word	0x08002baf
 8002b3c:	08002baf 	.word	0x08002baf
 8002b40:	08002baf 	.word	0x08002baf
 8002b44:	08002baf 	.word	0x08002baf
 8002b48:	08002baf 	.word	0x08002baf
 8002b4c:	08002b77 	.word	0x08002b77
 8002b50:	2b64      	cmp	r3, #100	; 0x64
 8002b52:	d00c      	beq.n	8002b6e <Tx_Verify+0x4ae>
 8002b54:	e02b      	b.n	8002bae <Tx_Verify+0x4ee>
 8002b56:	4b72      	ldr	r3, [pc, #456]	; (8002d20 <Tx_Verify+0x660>)
 8002b58:	2201      	movs	r2, #1
 8002b5a:	711a      	strb	r2, [r3, #4]
 8002b5c:	e02a      	b.n	8002bb4 <Tx_Verify+0x4f4>
 8002b5e:	4b70      	ldr	r3, [pc, #448]	; (8002d20 <Tx_Verify+0x660>)
 8002b60:	2202      	movs	r2, #2
 8002b62:	711a      	strb	r2, [r3, #4]
 8002b64:	e026      	b.n	8002bb4 <Tx_Verify+0x4f4>
 8002b66:	4b6e      	ldr	r3, [pc, #440]	; (8002d20 <Tx_Verify+0x660>)
 8002b68:	2203      	movs	r2, #3
 8002b6a:	711a      	strb	r2, [r3, #4]
 8002b6c:	e022      	b.n	8002bb4 <Tx_Verify+0x4f4>
 8002b6e:	4b6c      	ldr	r3, [pc, #432]	; (8002d20 <Tx_Verify+0x660>)
 8002b70:	2204      	movs	r2, #4
 8002b72:	711a      	strb	r2, [r3, #4]
 8002b74:	e01e      	b.n	8002bb4 <Tx_Verify+0x4f4>
 8002b76:	4b6a      	ldr	r3, [pc, #424]	; (8002d20 <Tx_Verify+0x660>)
 8002b78:	2205      	movs	r2, #5
 8002b7a:	711a      	strb	r2, [r3, #4]
 8002b7c:	e01a      	b.n	8002bb4 <Tx_Verify+0x4f4>
 8002b7e:	4b68      	ldr	r3, [pc, #416]	; (8002d20 <Tx_Verify+0x660>)
 8002b80:	2206      	movs	r2, #6
 8002b82:	711a      	strb	r2, [r3, #4]
 8002b84:	e016      	b.n	8002bb4 <Tx_Verify+0x4f4>
 8002b86:	4b66      	ldr	r3, [pc, #408]	; (8002d20 <Tx_Verify+0x660>)
 8002b88:	2207      	movs	r2, #7
 8002b8a:	711a      	strb	r2, [r3, #4]
 8002b8c:	e012      	b.n	8002bb4 <Tx_Verify+0x4f4>
 8002b8e:	4b64      	ldr	r3, [pc, #400]	; (8002d20 <Tx_Verify+0x660>)
 8002b90:	2208      	movs	r2, #8
 8002b92:	711a      	strb	r2, [r3, #4]
 8002b94:	e00e      	b.n	8002bb4 <Tx_Verify+0x4f4>
 8002b96:	4b62      	ldr	r3, [pc, #392]	; (8002d20 <Tx_Verify+0x660>)
 8002b98:	2209      	movs	r2, #9
 8002b9a:	711a      	strb	r2, [r3, #4]
 8002b9c:	e00a      	b.n	8002bb4 <Tx_Verify+0x4f4>
 8002b9e:	4b60      	ldr	r3, [pc, #384]	; (8002d20 <Tx_Verify+0x660>)
 8002ba0:	220a      	movs	r2, #10
 8002ba2:	711a      	strb	r2, [r3, #4]
 8002ba4:	e006      	b.n	8002bb4 <Tx_Verify+0x4f4>
 8002ba6:	4b5e      	ldr	r3, [pc, #376]	; (8002d20 <Tx_Verify+0x660>)
 8002ba8:	220b      	movs	r2, #11
 8002baa:	711a      	strb	r2, [r3, #4]
 8002bac:	e002      	b.n	8002bb4 <Tx_Verify+0x4f4>
 8002bae:	4b5c      	ldr	r3, [pc, #368]	; (8002d20 <Tx_Verify+0x660>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	711a      	strb	r2, [r3, #4]
 8002bb4:	bf00      	nop
	__FREQ_TO_BUFFER(txData[5], perMsg[RTC_MSG]);
 8002bb6:	4b5b      	ldr	r3, [pc, #364]	; (8002d24 <Tx_Verify+0x664>)
 8002bb8:	88db      	ldrh	r3, [r3, #6]
 8002bba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bbe:	f000 8082 	beq.w	8002cc6 <Tx_Verify+0x606>
 8002bc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bc6:	f300 80af 	bgt.w	8002d28 <Tx_Verify+0x668>
 8002bca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002bce:	d07e      	beq.n	8002cce <Tx_Verify+0x60e>
 8002bd0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002bd4:	f300 80a8 	bgt.w	8002d28 <Tx_Verify+0x668>
 8002bd8:	2bc8      	cmp	r3, #200	; 0xc8
 8002bda:	d07c      	beq.n	8002cd6 <Tx_Verify+0x616>
 8002bdc:	2bc8      	cmp	r3, #200	; 0xc8
 8002bde:	f300 80a3 	bgt.w	8002d28 <Tx_Verify+0x668>
 8002be2:	2b32      	cmp	r3, #50	; 0x32
 8002be4:	dc6c      	bgt.n	8002cc0 <Tx_Verify+0x600>
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	f2c0 809e 	blt.w	8002d28 <Tx_Verify+0x668>
 8002bec:	3b02      	subs	r3, #2
 8002bee:	2b30      	cmp	r3, #48	; 0x30
 8002bf0:	f200 809a 	bhi.w	8002d28 <Tx_Verify+0x668>
 8002bf4:	a201      	add	r2, pc, #4	; (adr r2, 8002bfc <Tx_Verify+0x53c>)
 8002bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfa:	bf00      	nop
 8002bfc:	08002d17 	.word	0x08002d17
 8002c00:	08002d29 	.word	0x08002d29
 8002c04:	08002d0f 	.word	0x08002d0f
 8002c08:	08002d07 	.word	0x08002d07
 8002c0c:	08002d29 	.word	0x08002d29
 8002c10:	08002d29 	.word	0x08002d29
 8002c14:	08002d29 	.word	0x08002d29
 8002c18:	08002d29 	.word	0x08002d29
 8002c1c:	08002cff 	.word	0x08002cff
 8002c20:	08002d29 	.word	0x08002d29
 8002c24:	08002d29 	.word	0x08002d29
 8002c28:	08002d29 	.word	0x08002d29
 8002c2c:	08002d29 	.word	0x08002d29
 8002c30:	08002d29 	.word	0x08002d29
 8002c34:	08002d29 	.word	0x08002d29
 8002c38:	08002d29 	.word	0x08002d29
 8002c3c:	08002d29 	.word	0x08002d29
 8002c40:	08002d29 	.word	0x08002d29
 8002c44:	08002cf7 	.word	0x08002cf7
 8002c48:	08002d29 	.word	0x08002d29
 8002c4c:	08002d29 	.word	0x08002d29
 8002c50:	08002d29 	.word	0x08002d29
 8002c54:	08002d29 	.word	0x08002d29
 8002c58:	08002d29 	.word	0x08002d29
 8002c5c:	08002d29 	.word	0x08002d29
 8002c60:	08002d29 	.word	0x08002d29
 8002c64:	08002d29 	.word	0x08002d29
 8002c68:	08002d29 	.word	0x08002d29
 8002c6c:	08002d29 	.word	0x08002d29
 8002c70:	08002d29 	.word	0x08002d29
 8002c74:	08002d29 	.word	0x08002d29
 8002c78:	08002d29 	.word	0x08002d29
 8002c7c:	08002d29 	.word	0x08002d29
 8002c80:	08002d29 	.word	0x08002d29
 8002c84:	08002d29 	.word	0x08002d29
 8002c88:	08002d29 	.word	0x08002d29
 8002c8c:	08002d29 	.word	0x08002d29
 8002c90:	08002d29 	.word	0x08002d29
 8002c94:	08002cef 	.word	0x08002cef
 8002c98:	08002d29 	.word	0x08002d29
 8002c9c:	08002d29 	.word	0x08002d29
 8002ca0:	08002d29 	.word	0x08002d29
 8002ca4:	08002d29 	.word	0x08002d29
 8002ca8:	08002d29 	.word	0x08002d29
 8002cac:	08002d29 	.word	0x08002d29
 8002cb0:	08002d29 	.word	0x08002d29
 8002cb4:	08002d29 	.word	0x08002d29
 8002cb8:	08002d29 	.word	0x08002d29
 8002cbc:	08002ce7 	.word	0x08002ce7
 8002cc0:	2b64      	cmp	r3, #100	; 0x64
 8002cc2:	d00c      	beq.n	8002cde <Tx_Verify+0x61e>
 8002cc4:	e030      	b.n	8002d28 <Tx_Verify+0x668>
 8002cc6:	4b16      	ldr	r3, [pc, #88]	; (8002d20 <Tx_Verify+0x660>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	715a      	strb	r2, [r3, #5]
 8002ccc:	e02f      	b.n	8002d2e <Tx_Verify+0x66e>
 8002cce:	4b14      	ldr	r3, [pc, #80]	; (8002d20 <Tx_Verify+0x660>)
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	715a      	strb	r2, [r3, #5]
 8002cd4:	e02b      	b.n	8002d2e <Tx_Verify+0x66e>
 8002cd6:	4b12      	ldr	r3, [pc, #72]	; (8002d20 <Tx_Verify+0x660>)
 8002cd8:	2203      	movs	r2, #3
 8002cda:	715a      	strb	r2, [r3, #5]
 8002cdc:	e027      	b.n	8002d2e <Tx_Verify+0x66e>
 8002cde:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <Tx_Verify+0x660>)
 8002ce0:	2204      	movs	r2, #4
 8002ce2:	715a      	strb	r2, [r3, #5]
 8002ce4:	e023      	b.n	8002d2e <Tx_Verify+0x66e>
 8002ce6:	4b0e      	ldr	r3, [pc, #56]	; (8002d20 <Tx_Verify+0x660>)
 8002ce8:	2205      	movs	r2, #5
 8002cea:	715a      	strb	r2, [r3, #5]
 8002cec:	e01f      	b.n	8002d2e <Tx_Verify+0x66e>
 8002cee:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <Tx_Verify+0x660>)
 8002cf0:	2206      	movs	r2, #6
 8002cf2:	715a      	strb	r2, [r3, #5]
 8002cf4:	e01b      	b.n	8002d2e <Tx_Verify+0x66e>
 8002cf6:	4b0a      	ldr	r3, [pc, #40]	; (8002d20 <Tx_Verify+0x660>)
 8002cf8:	2207      	movs	r2, #7
 8002cfa:	715a      	strb	r2, [r3, #5]
 8002cfc:	e017      	b.n	8002d2e <Tx_Verify+0x66e>
 8002cfe:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <Tx_Verify+0x660>)
 8002d00:	2208      	movs	r2, #8
 8002d02:	715a      	strb	r2, [r3, #5]
 8002d04:	e013      	b.n	8002d2e <Tx_Verify+0x66e>
 8002d06:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <Tx_Verify+0x660>)
 8002d08:	2209      	movs	r2, #9
 8002d0a:	715a      	strb	r2, [r3, #5]
 8002d0c:	e00f      	b.n	8002d2e <Tx_Verify+0x66e>
 8002d0e:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <Tx_Verify+0x660>)
 8002d10:	220a      	movs	r2, #10
 8002d12:	715a      	strb	r2, [r3, #5]
 8002d14:	e00b      	b.n	8002d2e <Tx_Verify+0x66e>
 8002d16:	4b02      	ldr	r3, [pc, #8]	; (8002d20 <Tx_Verify+0x660>)
 8002d18:	220b      	movs	r2, #11
 8002d1a:	715a      	strb	r2, [r3, #5]
 8002d1c:	e007      	b.n	8002d2e <Tx_Verify+0x66e>
 8002d1e:	bf00      	nop
 8002d20:	20000540 	.word	0x20000540
 8002d24:	2001273c 	.word	0x2001273c
 8002d28:	4bb7      	ldr	r3, [pc, #732]	; (8003008 <Tx_Verify+0x948>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	715a      	strb	r2, [r3, #5]
 8002d2e:	bf00      	nop
	__FREQ_TO_BUFFER(txData[6], perMsg[PDM_SAVE]);
 8002d30:	4bb6      	ldr	r3, [pc, #728]	; (800300c <Tx_Verify+0x94c>)
 8002d32:	89db      	ldrh	r3, [r3, #14]
 8002d34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d38:	f000 8081 	beq.w	8002e3e <Tx_Verify+0x77e>
 8002d3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d40:	f300 80a9 	bgt.w	8002e96 <Tx_Verify+0x7d6>
 8002d44:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d48:	d07d      	beq.n	8002e46 <Tx_Verify+0x786>
 8002d4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d4e:	f300 80a2 	bgt.w	8002e96 <Tx_Verify+0x7d6>
 8002d52:	2bc8      	cmp	r3, #200	; 0xc8
 8002d54:	d07b      	beq.n	8002e4e <Tx_Verify+0x78e>
 8002d56:	2bc8      	cmp	r3, #200	; 0xc8
 8002d58:	f300 809d 	bgt.w	8002e96 <Tx_Verify+0x7d6>
 8002d5c:	2b32      	cmp	r3, #50	; 0x32
 8002d5e:	dc6b      	bgt.n	8002e38 <Tx_Verify+0x778>
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	f2c0 8098 	blt.w	8002e96 <Tx_Verify+0x7d6>
 8002d66:	3b02      	subs	r3, #2
 8002d68:	2b30      	cmp	r3, #48	; 0x30
 8002d6a:	f200 8094 	bhi.w	8002e96 <Tx_Verify+0x7d6>
 8002d6e:	a201      	add	r2, pc, #4	; (adr r2, 8002d74 <Tx_Verify+0x6b4>)
 8002d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d74:	08002e8f 	.word	0x08002e8f
 8002d78:	08002e97 	.word	0x08002e97
 8002d7c:	08002e87 	.word	0x08002e87
 8002d80:	08002e7f 	.word	0x08002e7f
 8002d84:	08002e97 	.word	0x08002e97
 8002d88:	08002e97 	.word	0x08002e97
 8002d8c:	08002e97 	.word	0x08002e97
 8002d90:	08002e97 	.word	0x08002e97
 8002d94:	08002e77 	.word	0x08002e77
 8002d98:	08002e97 	.word	0x08002e97
 8002d9c:	08002e97 	.word	0x08002e97
 8002da0:	08002e97 	.word	0x08002e97
 8002da4:	08002e97 	.word	0x08002e97
 8002da8:	08002e97 	.word	0x08002e97
 8002dac:	08002e97 	.word	0x08002e97
 8002db0:	08002e97 	.word	0x08002e97
 8002db4:	08002e97 	.word	0x08002e97
 8002db8:	08002e97 	.word	0x08002e97
 8002dbc:	08002e6f 	.word	0x08002e6f
 8002dc0:	08002e97 	.word	0x08002e97
 8002dc4:	08002e97 	.word	0x08002e97
 8002dc8:	08002e97 	.word	0x08002e97
 8002dcc:	08002e97 	.word	0x08002e97
 8002dd0:	08002e97 	.word	0x08002e97
 8002dd4:	08002e97 	.word	0x08002e97
 8002dd8:	08002e97 	.word	0x08002e97
 8002ddc:	08002e97 	.word	0x08002e97
 8002de0:	08002e97 	.word	0x08002e97
 8002de4:	08002e97 	.word	0x08002e97
 8002de8:	08002e97 	.word	0x08002e97
 8002dec:	08002e97 	.word	0x08002e97
 8002df0:	08002e97 	.word	0x08002e97
 8002df4:	08002e97 	.word	0x08002e97
 8002df8:	08002e97 	.word	0x08002e97
 8002dfc:	08002e97 	.word	0x08002e97
 8002e00:	08002e97 	.word	0x08002e97
 8002e04:	08002e97 	.word	0x08002e97
 8002e08:	08002e97 	.word	0x08002e97
 8002e0c:	08002e67 	.word	0x08002e67
 8002e10:	08002e97 	.word	0x08002e97
 8002e14:	08002e97 	.word	0x08002e97
 8002e18:	08002e97 	.word	0x08002e97
 8002e1c:	08002e97 	.word	0x08002e97
 8002e20:	08002e97 	.word	0x08002e97
 8002e24:	08002e97 	.word	0x08002e97
 8002e28:	08002e97 	.word	0x08002e97
 8002e2c:	08002e97 	.word	0x08002e97
 8002e30:	08002e97 	.word	0x08002e97
 8002e34:	08002e5f 	.word	0x08002e5f
 8002e38:	2b64      	cmp	r3, #100	; 0x64
 8002e3a:	d00c      	beq.n	8002e56 <Tx_Verify+0x796>
 8002e3c:	e02b      	b.n	8002e96 <Tx_Verify+0x7d6>
 8002e3e:	4b72      	ldr	r3, [pc, #456]	; (8003008 <Tx_Verify+0x948>)
 8002e40:	2201      	movs	r2, #1
 8002e42:	719a      	strb	r2, [r3, #6]
 8002e44:	e02a      	b.n	8002e9c <Tx_Verify+0x7dc>
 8002e46:	4b70      	ldr	r3, [pc, #448]	; (8003008 <Tx_Verify+0x948>)
 8002e48:	2202      	movs	r2, #2
 8002e4a:	719a      	strb	r2, [r3, #6]
 8002e4c:	e026      	b.n	8002e9c <Tx_Verify+0x7dc>
 8002e4e:	4b6e      	ldr	r3, [pc, #440]	; (8003008 <Tx_Verify+0x948>)
 8002e50:	2203      	movs	r2, #3
 8002e52:	719a      	strb	r2, [r3, #6]
 8002e54:	e022      	b.n	8002e9c <Tx_Verify+0x7dc>
 8002e56:	4b6c      	ldr	r3, [pc, #432]	; (8003008 <Tx_Verify+0x948>)
 8002e58:	2204      	movs	r2, #4
 8002e5a:	719a      	strb	r2, [r3, #6]
 8002e5c:	e01e      	b.n	8002e9c <Tx_Verify+0x7dc>
 8002e5e:	4b6a      	ldr	r3, [pc, #424]	; (8003008 <Tx_Verify+0x948>)
 8002e60:	2205      	movs	r2, #5
 8002e62:	719a      	strb	r2, [r3, #6]
 8002e64:	e01a      	b.n	8002e9c <Tx_Verify+0x7dc>
 8002e66:	4b68      	ldr	r3, [pc, #416]	; (8003008 <Tx_Verify+0x948>)
 8002e68:	2206      	movs	r2, #6
 8002e6a:	719a      	strb	r2, [r3, #6]
 8002e6c:	e016      	b.n	8002e9c <Tx_Verify+0x7dc>
 8002e6e:	4b66      	ldr	r3, [pc, #408]	; (8003008 <Tx_Verify+0x948>)
 8002e70:	2207      	movs	r2, #7
 8002e72:	719a      	strb	r2, [r3, #6]
 8002e74:	e012      	b.n	8002e9c <Tx_Verify+0x7dc>
 8002e76:	4b64      	ldr	r3, [pc, #400]	; (8003008 <Tx_Verify+0x948>)
 8002e78:	2208      	movs	r2, #8
 8002e7a:	719a      	strb	r2, [r3, #6]
 8002e7c:	e00e      	b.n	8002e9c <Tx_Verify+0x7dc>
 8002e7e:	4b62      	ldr	r3, [pc, #392]	; (8003008 <Tx_Verify+0x948>)
 8002e80:	2209      	movs	r2, #9
 8002e82:	719a      	strb	r2, [r3, #6]
 8002e84:	e00a      	b.n	8002e9c <Tx_Verify+0x7dc>
 8002e86:	4b60      	ldr	r3, [pc, #384]	; (8003008 <Tx_Verify+0x948>)
 8002e88:	220a      	movs	r2, #10
 8002e8a:	719a      	strb	r2, [r3, #6]
 8002e8c:	e006      	b.n	8002e9c <Tx_Verify+0x7dc>
 8002e8e:	4b5e      	ldr	r3, [pc, #376]	; (8003008 <Tx_Verify+0x948>)
 8002e90:	220b      	movs	r2, #11
 8002e92:	719a      	strb	r2, [r3, #6]
 8002e94:	e002      	b.n	8002e9c <Tx_Verify+0x7dc>
 8002e96:	4b5c      	ldr	r3, [pc, #368]	; (8003008 <Tx_Verify+0x948>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	719a      	strb	r2, [r3, #6]
 8002e9c:	bf00      	nop
	__FREQ_TO_BUFFER(txData[7], perMsg[ECU_SAVE]);
 8002e9e:	4b5b      	ldr	r3, [pc, #364]	; (800300c <Tx_Verify+0x94c>)
 8002ea0:	899b      	ldrh	r3, [r3, #12]
 8002ea2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ea6:	f000 8082 	beq.w	8002fae <Tx_Verify+0x8ee>
 8002eaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002eae:	f300 80af 	bgt.w	8003010 <Tx_Verify+0x950>
 8002eb2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002eb6:	d07e      	beq.n	8002fb6 <Tx_Verify+0x8f6>
 8002eb8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ebc:	f300 80a8 	bgt.w	8003010 <Tx_Verify+0x950>
 8002ec0:	2bc8      	cmp	r3, #200	; 0xc8
 8002ec2:	d07c      	beq.n	8002fbe <Tx_Verify+0x8fe>
 8002ec4:	2bc8      	cmp	r3, #200	; 0xc8
 8002ec6:	f300 80a3 	bgt.w	8003010 <Tx_Verify+0x950>
 8002eca:	2b32      	cmp	r3, #50	; 0x32
 8002ecc:	dc6c      	bgt.n	8002fa8 <Tx_Verify+0x8e8>
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	f2c0 809e 	blt.w	8003010 <Tx_Verify+0x950>
 8002ed4:	3b02      	subs	r3, #2
 8002ed6:	2b30      	cmp	r3, #48	; 0x30
 8002ed8:	f200 809a 	bhi.w	8003010 <Tx_Verify+0x950>
 8002edc:	a201      	add	r2, pc, #4	; (adr r2, 8002ee4 <Tx_Verify+0x824>)
 8002ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee2:	bf00      	nop
 8002ee4:	08002fff 	.word	0x08002fff
 8002ee8:	08003011 	.word	0x08003011
 8002eec:	08002ff7 	.word	0x08002ff7
 8002ef0:	08002fef 	.word	0x08002fef
 8002ef4:	08003011 	.word	0x08003011
 8002ef8:	08003011 	.word	0x08003011
 8002efc:	08003011 	.word	0x08003011
 8002f00:	08003011 	.word	0x08003011
 8002f04:	08002fe7 	.word	0x08002fe7
 8002f08:	08003011 	.word	0x08003011
 8002f0c:	08003011 	.word	0x08003011
 8002f10:	08003011 	.word	0x08003011
 8002f14:	08003011 	.word	0x08003011
 8002f18:	08003011 	.word	0x08003011
 8002f1c:	08003011 	.word	0x08003011
 8002f20:	08003011 	.word	0x08003011
 8002f24:	08003011 	.word	0x08003011
 8002f28:	08003011 	.word	0x08003011
 8002f2c:	08002fdf 	.word	0x08002fdf
 8002f30:	08003011 	.word	0x08003011
 8002f34:	08003011 	.word	0x08003011
 8002f38:	08003011 	.word	0x08003011
 8002f3c:	08003011 	.word	0x08003011
 8002f40:	08003011 	.word	0x08003011
 8002f44:	08003011 	.word	0x08003011
 8002f48:	08003011 	.word	0x08003011
 8002f4c:	08003011 	.word	0x08003011
 8002f50:	08003011 	.word	0x08003011
 8002f54:	08003011 	.word	0x08003011
 8002f58:	08003011 	.word	0x08003011
 8002f5c:	08003011 	.word	0x08003011
 8002f60:	08003011 	.word	0x08003011
 8002f64:	08003011 	.word	0x08003011
 8002f68:	08003011 	.word	0x08003011
 8002f6c:	08003011 	.word	0x08003011
 8002f70:	08003011 	.word	0x08003011
 8002f74:	08003011 	.word	0x08003011
 8002f78:	08003011 	.word	0x08003011
 8002f7c:	08002fd7 	.word	0x08002fd7
 8002f80:	08003011 	.word	0x08003011
 8002f84:	08003011 	.word	0x08003011
 8002f88:	08003011 	.word	0x08003011
 8002f8c:	08003011 	.word	0x08003011
 8002f90:	08003011 	.word	0x08003011
 8002f94:	08003011 	.word	0x08003011
 8002f98:	08003011 	.word	0x08003011
 8002f9c:	08003011 	.word	0x08003011
 8002fa0:	08003011 	.word	0x08003011
 8002fa4:	08002fcf 	.word	0x08002fcf
 8002fa8:	2b64      	cmp	r3, #100	; 0x64
 8002faa:	d00c      	beq.n	8002fc6 <Tx_Verify+0x906>
 8002fac:	e030      	b.n	8003010 <Tx_Verify+0x950>
 8002fae:	4b16      	ldr	r3, [pc, #88]	; (8003008 <Tx_Verify+0x948>)
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	71da      	strb	r2, [r3, #7]
 8002fb4:	e02f      	b.n	8003016 <Tx_Verify+0x956>
 8002fb6:	4b14      	ldr	r3, [pc, #80]	; (8003008 <Tx_Verify+0x948>)
 8002fb8:	2202      	movs	r2, #2
 8002fba:	71da      	strb	r2, [r3, #7]
 8002fbc:	e02b      	b.n	8003016 <Tx_Verify+0x956>
 8002fbe:	4b12      	ldr	r3, [pc, #72]	; (8003008 <Tx_Verify+0x948>)
 8002fc0:	2203      	movs	r2, #3
 8002fc2:	71da      	strb	r2, [r3, #7]
 8002fc4:	e027      	b.n	8003016 <Tx_Verify+0x956>
 8002fc6:	4b10      	ldr	r3, [pc, #64]	; (8003008 <Tx_Verify+0x948>)
 8002fc8:	2204      	movs	r2, #4
 8002fca:	71da      	strb	r2, [r3, #7]
 8002fcc:	e023      	b.n	8003016 <Tx_Verify+0x956>
 8002fce:	4b0e      	ldr	r3, [pc, #56]	; (8003008 <Tx_Verify+0x948>)
 8002fd0:	2205      	movs	r2, #5
 8002fd2:	71da      	strb	r2, [r3, #7]
 8002fd4:	e01f      	b.n	8003016 <Tx_Verify+0x956>
 8002fd6:	4b0c      	ldr	r3, [pc, #48]	; (8003008 <Tx_Verify+0x948>)
 8002fd8:	2206      	movs	r2, #6
 8002fda:	71da      	strb	r2, [r3, #7]
 8002fdc:	e01b      	b.n	8003016 <Tx_Verify+0x956>
 8002fde:	4b0a      	ldr	r3, [pc, #40]	; (8003008 <Tx_Verify+0x948>)
 8002fe0:	2207      	movs	r2, #7
 8002fe2:	71da      	strb	r2, [r3, #7]
 8002fe4:	e017      	b.n	8003016 <Tx_Verify+0x956>
 8002fe6:	4b08      	ldr	r3, [pc, #32]	; (8003008 <Tx_Verify+0x948>)
 8002fe8:	2208      	movs	r2, #8
 8002fea:	71da      	strb	r2, [r3, #7]
 8002fec:	e013      	b.n	8003016 <Tx_Verify+0x956>
 8002fee:	4b06      	ldr	r3, [pc, #24]	; (8003008 <Tx_Verify+0x948>)
 8002ff0:	2209      	movs	r2, #9
 8002ff2:	71da      	strb	r2, [r3, #7]
 8002ff4:	e00f      	b.n	8003016 <Tx_Verify+0x956>
 8002ff6:	4b04      	ldr	r3, [pc, #16]	; (8003008 <Tx_Verify+0x948>)
 8002ff8:	220a      	movs	r2, #10
 8002ffa:	71da      	strb	r2, [r3, #7]
 8002ffc:	e00b      	b.n	8003016 <Tx_Verify+0x956>
 8002ffe:	4b02      	ldr	r3, [pc, #8]	; (8003008 <Tx_Verify+0x948>)
 8003000:	220b      	movs	r2, #11
 8003002:	71da      	strb	r2, [r3, #7]
 8003004:	e007      	b.n	8003016 <Tx_Verify+0x956>
 8003006:	bf00      	nop
 8003008:	20000540 	.word	0x20000540
 800300c:	2001273c 	.word	0x2001273c
 8003010:	4b27      	ldr	r3, [pc, #156]	; (80030b0 <Tx_Verify+0x9f0>)
 8003012:	2200      	movs	r2, #0
 8003014:	71da      	strb	r2, [r3, #7]
 8003016:	bf00      	nop

	if(flagDatalogger == DL_SAVE)
 8003018:	4b26      	ldr	r3, [pc, #152]	; (80030b4 <Tx_Verify+0x9f4>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d10a      	bne.n	8003036 <Tx_Verify+0x976>
		Principal_Datalogger_Save_Buffer(txHeader.StdId, txHeader.DLC, txData, &dirStruct, &fileStruct);
 8003020:	4b25      	ldr	r3, [pc, #148]	; (80030b8 <Tx_Verify+0x9f8>)
 8003022:	6818      	ldr	r0, [r3, #0]
 8003024:	4b24      	ldr	r3, [pc, #144]	; (80030b8 <Tx_Verify+0x9f8>)
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	b2d9      	uxtb	r1, r3
 800302a:	4b24      	ldr	r3, [pc, #144]	; (80030bc <Tx_Verify+0x9fc>)
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	4b24      	ldr	r3, [pc, #144]	; (80030c0 <Tx_Verify+0xa00>)
 8003030:	4a1f      	ldr	r2, [pc, #124]	; (80030b0 <Tx_Verify+0x9f0>)
 8003032:	f002 ff7f 	bl	8005f34 <Principal_Datalogger_Save_Buffer>

	if((accCAN[VERIFY_MSG] >= perCAN[VERIFY_MSG]) && (perCAN[VERIFY_MSG] != MSG_DISABLED))
 8003036:	4b23      	ldr	r3, [pc, #140]	; (80030c4 <Tx_Verify+0xa04>)
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	4a23      	ldr	r2, [pc, #140]	; (80030c8 <Tx_Verify+0xa08>)
 800303c:	8912      	ldrh	r2, [r2, #8]
 800303e:	4293      	cmp	r3, r2
 8003040:	d331      	bcc.n	80030a6 <Tx_Verify+0x9e6>
 8003042:	4b21      	ldr	r3, [pc, #132]	; (80030c8 <Tx_Verify+0xa08>)
 8003044:	891b      	ldrh	r3, [r3, #8]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d02d      	beq.n	80030a6 <Tx_Verify+0x9e6>
	{
		accCAN[VERIFY_MSG] -= perCAN[VERIFY_MSG];
 800304a:	4b1e      	ldr	r3, [pc, #120]	; (80030c4 <Tx_Verify+0xa04>)
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	4a1e      	ldr	r2, [pc, #120]	; (80030c8 <Tx_Verify+0xa08>)
 8003050:	8912      	ldrh	r2, [r2, #8]
 8003052:	1a9b      	subs	r3, r3, r2
 8003054:	4a1b      	ldr	r2, [pc, #108]	; (80030c4 <Tx_Verify+0xa04>)
 8003056:	6113      	str	r3, [r2, #16]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 8003058:	4b1c      	ldr	r3, [pc, #112]	; (80030cc <Tx_Verify+0xa0c>)
 800305a:	4a15      	ldr	r2, [pc, #84]	; (80030b0 <Tx_Verify+0x9f0>)
 800305c:	4916      	ldr	r1, [pc, #88]	; (80030b8 <Tx_Verify+0x9f8>)
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f004 fd16 	bl	8007a90 <HAL_CAN_AddTxMessage>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d107      	bne.n	800307a <Tx_Verify+0x9ba>
			verifyCAN |= 1;
 800306a:	4b19      	ldr	r3, [pc, #100]	; (80030d0 <Tx_Verify+0xa10>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	f043 0301 	orr.w	r3, r3, #1
 8003072:	b2da      	uxtb	r2, r3
 8003074:	4b16      	ldr	r3, [pc, #88]	; (80030d0 <Tx_Verify+0xa10>)
 8003076:	701a      	strb	r2, [r3, #0]
 8003078:	e006      	b.n	8003088 <Tx_Verify+0x9c8>
		else
			verifyCAN &= 0x02;
 800307a:	4b15      	ldr	r3, [pc, #84]	; (80030d0 <Tx_Verify+0xa10>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	f003 0302 	and.w	r3, r3, #2
 8003082:	b2da      	uxtb	r2, r3
 8003084:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <Tx_Verify+0xa10>)
 8003086:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8003088:	2300      	movs	r3, #0
 800308a:	73fb      	strb	r3, [r7, #15]
 800308c:	e002      	b.n	8003094 <Tx_Verify+0x9d4>
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	3301      	adds	r3, #1
 8003092:	73fb      	strb	r3, [r7, #15]
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f004 fdd6 	bl	8007c46 <HAL_CAN_GetTxMailboxesFreeLevel>
 800309a:	4603      	mov	r3, r0
 800309c:	2b03      	cmp	r3, #3
 800309e:	d002      	beq.n	80030a6 <Tx_Verify+0x9e6>
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d9f3      	bls.n	800308e <Tx_Verify+0x9ce>
	}
}
 80030a6:	bf00      	nop
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	20000540 	.word	0x20000540
 80030b4:	20012712 	.word	0x20012712
 80030b8:	20000568 	.word	0x20000568
 80030bc:	200116a8 	.word	0x200116a8
 80030c0:	20010640 	.word	0x20010640
 80030c4:	2001275c 	.word	0x2001275c
 80030c8:	20012730 	.word	0x20012730
 80030cc:	20000548 	.word	0x20000548
 80030d0:	2001279c 	.word	0x2001279c

080030d4 <Tx_Beacon>:

static void Tx_Beacon(CAN_HandleTypeDef* hcan)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af02      	add	r7, sp, #8
 80030da:	6078      	str	r0, [r7, #4]
	uint16_t buffer[3];

	txHeader.IDE = CAN_ID_STD;
 80030dc:	4b48      	ldr	r3, [pc, #288]	; (8003200 <Tx_Beacon+0x12c>)
 80030de:	2200      	movs	r2, #0
 80030e0:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 80030e2:	4b47      	ldr	r3, [pc, #284]	; (8003200 <Tx_Beacon+0x12c>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 80030e8:	4b45      	ldr	r3, [pc, #276]	; (8003200 <Tx_Beacon+0x12c>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = BEACON_ID;
 80030ee:	4b44      	ldr	r3, [pc, #272]	; (8003200 <Tx_Beacon+0x12c>)
 80030f0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80030f4:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 5;
 80030f6:	4b42      	ldr	r3, [pc, #264]	; (8003200 <Tx_Beacon+0x12c>)
 80030f8:	2205      	movs	r2, #5
 80030fa:	611a      	str	r2, [r3, #16]

	buffer[0] = accLap / 60000;
 80030fc:	4b41      	ldr	r3, [pc, #260]	; (8003204 <Tx_Beacon+0x130>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a41      	ldr	r2, [pc, #260]	; (8003208 <Tx_Beacon+0x134>)
 8003102:	fba2 2303 	umull	r2, r3, r2, r3
 8003106:	0b9b      	lsrs	r3, r3, #14
 8003108:	b29b      	uxth	r3, r3
 800310a:	813b      	strh	r3, [r7, #8]
	buffer[1] = accLap / 1000;
 800310c:	4b3d      	ldr	r3, [pc, #244]	; (8003204 <Tx_Beacon+0x130>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a3e      	ldr	r2, [pc, #248]	; (800320c <Tx_Beacon+0x138>)
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	099b      	lsrs	r3, r3, #6
 8003118:	b29b      	uxth	r3, r3
 800311a:	817b      	strh	r3, [r7, #10]
	buffer[2] = accLap % 1000;
 800311c:	4b39      	ldr	r3, [pc, #228]	; (8003204 <Tx_Beacon+0x130>)
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	4b3a      	ldr	r3, [pc, #232]	; (800320c <Tx_Beacon+0x138>)
 8003122:	fba3 1302 	umull	r1, r3, r3, r2
 8003126:	099b      	lsrs	r3, r3, #6
 8003128:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800312c:	fb01 f303 	mul.w	r3, r1, r3
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	b29b      	uxth	r3, r3
 8003134:	81bb      	strh	r3, [r7, #12]

	accLap = 0;
 8003136:	4b33      	ldr	r3, [pc, #204]	; (8003204 <Tx_Beacon+0x130>)
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]

	txData[0] = lapNumber;
 800313c:	4b34      	ldr	r3, [pc, #208]	; (8003210 <Tx_Beacon+0x13c>)
 800313e:	781a      	ldrb	r2, [r3, #0]
 8003140:	4b34      	ldr	r3, [pc, #208]	; (8003214 <Tx_Beacon+0x140>)
 8003142:	701a      	strb	r2, [r3, #0]
	txData[1] = buffer[0] & 0xff;
 8003144:	893b      	ldrh	r3, [r7, #8]
 8003146:	b2da      	uxtb	r2, r3
 8003148:	4b32      	ldr	r3, [pc, #200]	; (8003214 <Tx_Beacon+0x140>)
 800314a:	705a      	strb	r2, [r3, #1]
	txData[2] = buffer[1] & 0xff;
 800314c:	897b      	ldrh	r3, [r7, #10]
 800314e:	b2da      	uxtb	r2, r3
 8003150:	4b30      	ldr	r3, [pc, #192]	; (8003214 <Tx_Beacon+0x140>)
 8003152:	709a      	strb	r2, [r3, #2]
	txData[3] = buffer[2] >> 8;
 8003154:	89bb      	ldrh	r3, [r7, #12]
 8003156:	0a1b      	lsrs	r3, r3, #8
 8003158:	b29b      	uxth	r3, r3
 800315a:	b2da      	uxtb	r2, r3
 800315c:	4b2d      	ldr	r3, [pc, #180]	; (8003214 <Tx_Beacon+0x140>)
 800315e:	70da      	strb	r2, [r3, #3]
	txData[4] = buffer[2] & 0xff;
 8003160:	89bb      	ldrh	r3, [r7, #12]
 8003162:	b2da      	uxtb	r2, r3
 8003164:	4b2b      	ldr	r3, [pc, #172]	; (8003214 <Tx_Beacon+0x140>)
 8003166:	711a      	strb	r2, [r3, #4]

	if(flagDatalogger == DL_SAVE)
 8003168:	4b2b      	ldr	r3, [pc, #172]	; (8003218 <Tx_Beacon+0x144>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d10a      	bne.n	8003186 <Tx_Beacon+0xb2>
		Principal_Datalogger_Save_Buffer(txHeader.StdId, txHeader.DLC, txData, &dirStruct, &fileStruct);
 8003170:	4b23      	ldr	r3, [pc, #140]	; (8003200 <Tx_Beacon+0x12c>)
 8003172:	6818      	ldr	r0, [r3, #0]
 8003174:	4b22      	ldr	r3, [pc, #136]	; (8003200 <Tx_Beacon+0x12c>)
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	b2d9      	uxtb	r1, r3
 800317a:	4b28      	ldr	r3, [pc, #160]	; (800321c <Tx_Beacon+0x148>)
 800317c:	9300      	str	r3, [sp, #0]
 800317e:	4b28      	ldr	r3, [pc, #160]	; (8003220 <Tx_Beacon+0x14c>)
 8003180:	4a24      	ldr	r2, [pc, #144]	; (8003214 <Tx_Beacon+0x140>)
 8003182:	f002 fed7 	bl	8005f34 <Principal_Datalogger_Save_Buffer>

	if((accCAN[BEACON_MSG] >= perCAN[BEACON_MSG]) && (perCAN[BEACON_MSG] != MSG_DISABLED))
 8003186:	4b27      	ldr	r3, [pc, #156]	; (8003224 <Tx_Beacon+0x150>)
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	4a27      	ldr	r2, [pc, #156]	; (8003228 <Tx_Beacon+0x154>)
 800318c:	8952      	ldrh	r2, [r2, #10]
 800318e:	4293      	cmp	r3, r2
 8003190:	d331      	bcc.n	80031f6 <Tx_Beacon+0x122>
 8003192:	4b25      	ldr	r3, [pc, #148]	; (8003228 <Tx_Beacon+0x154>)
 8003194:	895b      	ldrh	r3, [r3, #10]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d02d      	beq.n	80031f6 <Tx_Beacon+0x122>
	{
		accCAN[BEACON_MSG] -= perCAN[BEACON_MSG];
 800319a:	4b22      	ldr	r3, [pc, #136]	; (8003224 <Tx_Beacon+0x150>)
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	4a22      	ldr	r2, [pc, #136]	; (8003228 <Tx_Beacon+0x154>)
 80031a0:	8952      	ldrh	r2, [r2, #10]
 80031a2:	1a9b      	subs	r3, r3, r2
 80031a4:	4a1f      	ldr	r2, [pc, #124]	; (8003224 <Tx_Beacon+0x150>)
 80031a6:	6153      	str	r3, [r2, #20]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 80031a8:	4b20      	ldr	r3, [pc, #128]	; (800322c <Tx_Beacon+0x158>)
 80031aa:	4a1a      	ldr	r2, [pc, #104]	; (8003214 <Tx_Beacon+0x140>)
 80031ac:	4914      	ldr	r1, [pc, #80]	; (8003200 <Tx_Beacon+0x12c>)
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f004 fc6e 	bl	8007a90 <HAL_CAN_AddTxMessage>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d107      	bne.n	80031ca <Tx_Beacon+0xf6>
			verifyCAN |= 1;
 80031ba:	4b1d      	ldr	r3, [pc, #116]	; (8003230 <Tx_Beacon+0x15c>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	f043 0301 	orr.w	r3, r3, #1
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	4b1a      	ldr	r3, [pc, #104]	; (8003230 <Tx_Beacon+0x15c>)
 80031c6:	701a      	strb	r2, [r3, #0]
 80031c8:	e006      	b.n	80031d8 <Tx_Beacon+0x104>
		else
			verifyCAN &= 0x02;
 80031ca:	4b19      	ldr	r3, [pc, #100]	; (8003230 <Tx_Beacon+0x15c>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	4b16      	ldr	r3, [pc, #88]	; (8003230 <Tx_Beacon+0x15c>)
 80031d6:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 80031d8:	2300      	movs	r3, #0
 80031da:	73fb      	strb	r3, [r7, #15]
 80031dc:	e002      	b.n	80031e4 <Tx_Beacon+0x110>
 80031de:	7bfb      	ldrb	r3, [r7, #15]
 80031e0:	3301      	adds	r3, #1
 80031e2:	73fb      	strb	r3, [r7, #15]
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f004 fd2e 	bl	8007c46 <HAL_CAN_GetTxMailboxesFreeLevel>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b03      	cmp	r3, #3
 80031ee:	d002      	beq.n	80031f6 <Tx_Beacon+0x122>
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d9f3      	bls.n	80031de <Tx_Beacon+0x10a>
	}
}
 80031f6:	bf00      	nop
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20000568 	.word	0x20000568
 8003204:	20012798 	.word	0x20012798
 8003208:	45e7b273 	.word	0x45e7b273
 800320c:	10624dd3 	.word	0x10624dd3
 8003210:	20000580 	.word	0x20000580
 8003214:	20000540 	.word	0x20000540
 8003218:	20012712 	.word	0x20012712
 800321c:	200116a8 	.word	0x200116a8
 8003220:	20010640 	.word	0x20010640
 8003224:	2001275c 	.word	0x2001275c
 8003228:	20012730 	.word	0x20012730
 800322c:	20000548 	.word	0x20000548
 8003230:	2001279c 	.word	0x2001279c

08003234 <Save_PDM>:

static void Save_PDM()
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af02      	add	r7, sp, #8
	uint8_t id = 0, length = 0, buffer[8];
 800323a:	2300      	movs	r3, #0
 800323c:	73fb      	strb	r3, [r7, #15]
 800323e:	2300      	movs	r3, #0
 8003240:	73bb      	strb	r3, [r7, #14]

	if(flagDatalogger != DL_SAVE)
 8003242:	4b8f      	ldr	r3, [pc, #572]	; (8003480 <Save_PDM+0x24c>)
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2b01      	cmp	r3, #1
 8003248:	f040 8115 	bne.w	8003476 <Save_PDM+0x242>
		return;

	id = PDM_FIRST_ID;
 800324c:	230a      	movs	r3, #10
 800324e:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003250:	2308      	movs	r3, #8
 8003252:	73bb      	strb	r3, [r7, #14]

	buffer[0] = pdmReadings.Current_Buffer[0] << 8;
 8003254:	2300      	movs	r3, #0
 8003256:	713b      	strb	r3, [r7, #4]
	buffer[1] = pdmReadings.Current_Buffer[0] & 0xff;
 8003258:	4b8a      	ldr	r3, [pc, #552]	; (8003484 <Save_PDM+0x250>)
 800325a:	889b      	ldrh	r3, [r3, #4]
 800325c:	b2db      	uxtb	r3, r3
 800325e:	717b      	strb	r3, [r7, #5]
	buffer[2] = pdmReadings.Current_Buffer[1] << 8;
 8003260:	2300      	movs	r3, #0
 8003262:	71bb      	strb	r3, [r7, #6]
	buffer[3] = pdmReadings.Current_Buffer[1] & 0xff;
 8003264:	4b87      	ldr	r3, [pc, #540]	; (8003484 <Save_PDM+0x250>)
 8003266:	88db      	ldrh	r3, [r3, #6]
 8003268:	b2db      	uxtb	r3, r3
 800326a:	71fb      	strb	r3, [r7, #7]
	buffer[4] = pdmReadings.Current_Buffer[2] << 8;
 800326c:	2300      	movs	r3, #0
 800326e:	723b      	strb	r3, [r7, #8]
	buffer[5] = pdmReadings.Current_Buffer[2] & 0xff;
 8003270:	4b84      	ldr	r3, [pc, #528]	; (8003484 <Save_PDM+0x250>)
 8003272:	891b      	ldrh	r3, [r3, #8]
 8003274:	b2db      	uxtb	r3, r3
 8003276:	727b      	strb	r3, [r7, #9]
	buffer[6] = pdmReadings.Current_Buffer[3] << 8;
 8003278:	2300      	movs	r3, #0
 800327a:	72bb      	strb	r3, [r7, #10]
	buffer[7] = pdmReadings.Current_Buffer[3] & 0xff;
 800327c:	4b81      	ldr	r3, [pc, #516]	; (8003484 <Save_PDM+0x250>)
 800327e:	895b      	ldrh	r3, [r3, #10]
 8003280:	b2db      	uxtb	r3, r3
 8003282:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &dirStruct, &fileStruct);
 8003284:	7bf8      	ldrb	r0, [r7, #15]
 8003286:	1d3a      	adds	r2, r7, #4
 8003288:	7bb9      	ldrb	r1, [r7, #14]
 800328a:	4b7f      	ldr	r3, [pc, #508]	; (8003488 <Save_PDM+0x254>)
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	4b7f      	ldr	r3, [pc, #508]	; (800348c <Save_PDM+0x258>)
 8003290:	f002 fe50 	bl	8005f34 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 1;
 8003294:	230b      	movs	r3, #11
 8003296:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003298:	2308      	movs	r3, #8
 800329a:	73bb      	strb	r3, [r7, #14]

	buffer[0] = pdmReadings.Current_Buffer[4] << 8;
 800329c:	2300      	movs	r3, #0
 800329e:	713b      	strb	r3, [r7, #4]
	buffer[1] = pdmReadings.Current_Buffer[4] & 0xff;
 80032a0:	4b78      	ldr	r3, [pc, #480]	; (8003484 <Save_PDM+0x250>)
 80032a2:	899b      	ldrh	r3, [r3, #12]
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	717b      	strb	r3, [r7, #5]
	buffer[2] = pdmReadings.Current_Buffer[5] << 8;
 80032a8:	2300      	movs	r3, #0
 80032aa:	71bb      	strb	r3, [r7, #6]
	buffer[3] = pdmReadings.Current_Buffer[5] & 0xff;
 80032ac:	4b75      	ldr	r3, [pc, #468]	; (8003484 <Save_PDM+0x250>)
 80032ae:	89db      	ldrh	r3, [r3, #14]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	71fb      	strb	r3, [r7, #7]
	buffer[4] = pdmReadings.Current_Buffer[6] << 8;
 80032b4:	2300      	movs	r3, #0
 80032b6:	723b      	strb	r3, [r7, #8]
	buffer[5] = pdmReadings.Current_Buffer[6] & 0xff;
 80032b8:	4b72      	ldr	r3, [pc, #456]	; (8003484 <Save_PDM+0x250>)
 80032ba:	8a1b      	ldrh	r3, [r3, #16]
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	727b      	strb	r3, [r7, #9]
	buffer[6] = pdmReadings.Current_Buffer[7] << 8;
 80032c0:	2300      	movs	r3, #0
 80032c2:	72bb      	strb	r3, [r7, #10]
	buffer[7] = pdmReadings.Current_Buffer[7] & 0xff;
 80032c4:	4b6f      	ldr	r3, [pc, #444]	; (8003484 <Save_PDM+0x250>)
 80032c6:	8a5b      	ldrh	r3, [r3, #18]
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &dirStruct, &fileStruct);
 80032cc:	7bf8      	ldrb	r0, [r7, #15]
 80032ce:	1d3a      	adds	r2, r7, #4
 80032d0:	7bb9      	ldrb	r1, [r7, #14]
 80032d2:	4b6d      	ldr	r3, [pc, #436]	; (8003488 <Save_PDM+0x254>)
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	4b6d      	ldr	r3, [pc, #436]	; (800348c <Save_PDM+0x258>)
 80032d8:	f002 fe2c 	bl	8005f34 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 2;
 80032dc:	230c      	movs	r3, #12
 80032de:	73fb      	strb	r3, [r7, #15]
	length = 8;
 80032e0:	2308      	movs	r3, #8
 80032e2:	73bb      	strb	r3, [r7, #14]

	buffer[0] = pdmReadings.Current_Buffer[8] << 8;
 80032e4:	2300      	movs	r3, #0
 80032e6:	713b      	strb	r3, [r7, #4]
	buffer[1] = pdmReadings.Current_Buffer[8] & 0xff;
 80032e8:	4b66      	ldr	r3, [pc, #408]	; (8003484 <Save_PDM+0x250>)
 80032ea:	8a9b      	ldrh	r3, [r3, #20]
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	717b      	strb	r3, [r7, #5]
	buffer[2] = pdmReadings.Current_Buffer[9] << 8;
 80032f0:	2300      	movs	r3, #0
 80032f2:	71bb      	strb	r3, [r7, #6]
	buffer[3] = pdmReadings.Current_Buffer[9] & 0xff;
 80032f4:	4b63      	ldr	r3, [pc, #396]	; (8003484 <Save_PDM+0x250>)
 80032f6:	8adb      	ldrh	r3, [r3, #22]
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	71fb      	strb	r3, [r7, #7]
	buffer[4] = pdmReadings.Current_Buffer[10] << 8;
 80032fc:	2300      	movs	r3, #0
 80032fe:	723b      	strb	r3, [r7, #8]
	buffer[5] = pdmReadings.Current_Buffer[10] & 0xff;
 8003300:	4b60      	ldr	r3, [pc, #384]	; (8003484 <Save_PDM+0x250>)
 8003302:	8b1b      	ldrh	r3, [r3, #24]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	727b      	strb	r3, [r7, #9]
	buffer[6] = pdmReadings.Current_Buffer[11] << 8;
 8003308:	2300      	movs	r3, #0
 800330a:	72bb      	strb	r3, [r7, #10]
	buffer[7] = pdmReadings.Current_Buffer[11] & 0xff;
 800330c:	4b5d      	ldr	r3, [pc, #372]	; (8003484 <Save_PDM+0x250>)
 800330e:	8b5b      	ldrh	r3, [r3, #26]
 8003310:	b2db      	uxtb	r3, r3
 8003312:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &dirStruct, &fileStruct);
 8003314:	7bf8      	ldrb	r0, [r7, #15]
 8003316:	1d3a      	adds	r2, r7, #4
 8003318:	7bb9      	ldrb	r1, [r7, #14]
 800331a:	4b5b      	ldr	r3, [pc, #364]	; (8003488 <Save_PDM+0x254>)
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	4b5b      	ldr	r3, [pc, #364]	; (800348c <Save_PDM+0x258>)
 8003320:	f002 fe08 	bl	8005f34 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 3;
 8003324:	230d      	movs	r3, #13
 8003326:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003328:	2308      	movs	r3, #8
 800332a:	73bb      	strb	r3, [r7, #14]

	buffer[0] = pdmReadings.Current_Buffer[12] << 8;
 800332c:	2300      	movs	r3, #0
 800332e:	713b      	strb	r3, [r7, #4]
	buffer[1] = pdmReadings.Current_Buffer[12] & 0xff;
 8003330:	4b54      	ldr	r3, [pc, #336]	; (8003484 <Save_PDM+0x250>)
 8003332:	8b9b      	ldrh	r3, [r3, #28]
 8003334:	b2db      	uxtb	r3, r3
 8003336:	717b      	strb	r3, [r7, #5]
	buffer[2] = pdmReadings.Current_Buffer[13] << 8;
 8003338:	2300      	movs	r3, #0
 800333a:	71bb      	strb	r3, [r7, #6]
	buffer[3] = pdmReadings.Current_Buffer[13] & 0xff;
 800333c:	4b51      	ldr	r3, [pc, #324]	; (8003484 <Save_PDM+0x250>)
 800333e:	8bdb      	ldrh	r3, [r3, #30]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	71fb      	strb	r3, [r7, #7]
	buffer[4] = pdmReadings.Current_Buffer[14] << 8;
 8003344:	2300      	movs	r3, #0
 8003346:	723b      	strb	r3, [r7, #8]
	buffer[5] = pdmReadings.Current_Buffer[14] & 0xff;
 8003348:	4b4e      	ldr	r3, [pc, #312]	; (8003484 <Save_PDM+0x250>)
 800334a:	8c1b      	ldrh	r3, [r3, #32]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	727b      	strb	r3, [r7, #9]
	buffer[6] = pdmReadings.Current_Buffer[15] << 8;
 8003350:	2300      	movs	r3, #0
 8003352:	72bb      	strb	r3, [r7, #10]
	buffer[7] = pdmReadings.Current_Buffer[15] & 0xff;
 8003354:	4b4b      	ldr	r3, [pc, #300]	; (8003484 <Save_PDM+0x250>)
 8003356:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003358:	b2db      	uxtb	r3, r3
 800335a:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &dirStruct, &fileStruct);
 800335c:	7bf8      	ldrb	r0, [r7, #15]
 800335e:	1d3a      	adds	r2, r7, #4
 8003360:	7bb9      	ldrb	r1, [r7, #14]
 8003362:	4b49      	ldr	r3, [pc, #292]	; (8003488 <Save_PDM+0x254>)
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	4b49      	ldr	r3, [pc, #292]	; (800348c <Save_PDM+0x258>)
 8003368:	f002 fde4 	bl	8005f34 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 4;
 800336c:	230e      	movs	r3, #14
 800336e:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003370:	2308      	movs	r3, #8
 8003372:	73bb      	strb	r3, [r7, #14]

	buffer[0] = pdmReadings.Tempetature_Buffer[0] << 8;
 8003374:	2300      	movs	r3, #0
 8003376:	713b      	strb	r3, [r7, #4]
	buffer[1] = pdmReadings.Tempetature_Buffer[0] & 0xff;
 8003378:	4b42      	ldr	r3, [pc, #264]	; (8003484 <Save_PDM+0x250>)
 800337a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800337c:	b2db      	uxtb	r3, r3
 800337e:	717b      	strb	r3, [r7, #5]
	buffer[2] = pdmReadings.Tempetature_Buffer[1] << 8;
 8003380:	2300      	movs	r3, #0
 8003382:	71bb      	strb	r3, [r7, #6]
	buffer[3] = pdmReadings.Tempetature_Buffer[1] & 0xff;
 8003384:	4b3f      	ldr	r3, [pc, #252]	; (8003484 <Save_PDM+0x250>)
 8003386:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003388:	b2db      	uxtb	r3, r3
 800338a:	71fb      	strb	r3, [r7, #7]
	buffer[4] = pdmReadings.Tempetature_Buffer[2] << 8;
 800338c:	2300      	movs	r3, #0
 800338e:	723b      	strb	r3, [r7, #8]
	buffer[5] = pdmReadings.Tempetature_Buffer[2] & 0xff;
 8003390:	4b3c      	ldr	r3, [pc, #240]	; (8003484 <Save_PDM+0x250>)
 8003392:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003394:	b2db      	uxtb	r3, r3
 8003396:	727b      	strb	r3, [r7, #9]
	buffer[6] = pdmReadings.Tempetature_Buffer[3] << 8;
 8003398:	2300      	movs	r3, #0
 800339a:	72bb      	strb	r3, [r7, #10]
	buffer[7] = pdmReadings.Tempetature_Buffer[3] & 0xff;
 800339c:	4b39      	ldr	r3, [pc, #228]	; (8003484 <Save_PDM+0x250>)
 800339e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &dirStruct, &fileStruct);
 80033a4:	7bf8      	ldrb	r0, [r7, #15]
 80033a6:	1d3a      	adds	r2, r7, #4
 80033a8:	7bb9      	ldrb	r1, [r7, #14]
 80033aa:	4b37      	ldr	r3, [pc, #220]	; (8003488 <Save_PDM+0x254>)
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	4b37      	ldr	r3, [pc, #220]	; (800348c <Save_PDM+0x258>)
 80033b0:	f002 fdc0 	bl	8005f34 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 5;
 80033b4:	230f      	movs	r3, #15
 80033b6:	73fb      	strb	r3, [r7, #15]
	length = 8;
 80033b8:	2308      	movs	r3, #8
 80033ba:	73bb      	strb	r3, [r7, #14]

	buffer[0] = pdmReadings.Tempetature_Buffer[4] << 8;
 80033bc:	2300      	movs	r3, #0
 80033be:	713b      	strb	r3, [r7, #4]
	buffer[1] = pdmReadings.Tempetature_Buffer[4] & 0xff;
 80033c0:	4b30      	ldr	r3, [pc, #192]	; (8003484 <Save_PDM+0x250>)
 80033c2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	717b      	strb	r3, [r7, #5]
	buffer[2] = pdmReadings.Tempetature_Buffer[5] << 8;
 80033c8:	2300      	movs	r3, #0
 80033ca:	71bb      	strb	r3, [r7, #6]
	buffer[3] = pdmReadings.Tempetature_Buffer[5] & 0xff;
 80033cc:	4b2d      	ldr	r3, [pc, #180]	; (8003484 <Save_PDM+0x250>)
 80033ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	71fb      	strb	r3, [r7, #7]
	buffer[4] = pdmReadings.Tempetature_Buffer[6] << 8;
 80033d4:	2300      	movs	r3, #0
 80033d6:	723b      	strb	r3, [r7, #8]
	buffer[5] = pdmReadings.Tempetature_Buffer[6] & 0xff;
 80033d8:	4b2a      	ldr	r3, [pc, #168]	; (8003484 <Save_PDM+0x250>)
 80033da:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	727b      	strb	r3, [r7, #9]
	buffer[6] = pdmReadings.Tempetature_Buffer[7] << 8;
 80033e0:	2300      	movs	r3, #0
 80033e2:	72bb      	strb	r3, [r7, #10]
	buffer[7] = pdmReadings.Tempetature_Buffer[7] & 0xff;
 80033e4:	4b27      	ldr	r3, [pc, #156]	; (8003484 <Save_PDM+0x250>)
 80033e6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &dirStruct, &fileStruct);
 80033ec:	7bf8      	ldrb	r0, [r7, #15]
 80033ee:	1d3a      	adds	r2, r7, #4
 80033f0:	7bb9      	ldrb	r1, [r7, #14]
 80033f2:	4b25      	ldr	r3, [pc, #148]	; (8003488 <Save_PDM+0x254>)
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	4b25      	ldr	r3, [pc, #148]	; (800348c <Save_PDM+0x258>)
 80033f8:	f002 fd9c 	bl	8005f34 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 6;
 80033fc:	2310      	movs	r3, #16
 80033fe:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003400:	2308      	movs	r3, #8
 8003402:	73bb      	strb	r3, [r7, #14]

	buffer[0] = pdmReadings.Duty_Cycle_Buffer[0] << 8;
 8003404:	2300      	movs	r3, #0
 8003406:	713b      	strb	r3, [r7, #4]
	buffer[1] = pdmReadings.Duty_Cycle_Buffer[0] & 0xff;
 8003408:	4b1e      	ldr	r3, [pc, #120]	; (8003484 <Save_PDM+0x250>)
 800340a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800340c:	b2db      	uxtb	r3, r3
 800340e:	717b      	strb	r3, [r7, #5]
	buffer[2] = pdmReadings.Duty_Cycle_Buffer[1] << 8;
 8003410:	2300      	movs	r3, #0
 8003412:	71bb      	strb	r3, [r7, #6]
	buffer[3] = pdmReadings.Duty_Cycle_Buffer[1] & 0xff;
 8003414:	4b1b      	ldr	r3, [pc, #108]	; (8003484 <Save_PDM+0x250>)
 8003416:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003418:	b2db      	uxtb	r3, r3
 800341a:	71fb      	strb	r3, [r7, #7]
	buffer[4] = pdmReadings.Duty_Cycle_Buffer[2] << 8;
 800341c:	2300      	movs	r3, #0
 800341e:	723b      	strb	r3, [r7, #8]
	buffer[5] = pdmReadings.Duty_Cycle_Buffer[2] & 0xff;
 8003420:	4b18      	ldr	r3, [pc, #96]	; (8003484 <Save_PDM+0x250>)
 8003422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003424:	b2db      	uxtb	r3, r3
 8003426:	727b      	strb	r3, [r7, #9]
	buffer[6] = pdmReadings.Duty_Cycle_Buffer[3] << 8;
 8003428:	2300      	movs	r3, #0
 800342a:	72bb      	strb	r3, [r7, #10]
	buffer[7] = pdmReadings.Duty_Cycle_Buffer[3] & 0xff;
 800342c:	4b15      	ldr	r3, [pc, #84]	; (8003484 <Save_PDM+0x250>)
 800342e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003430:	b2db      	uxtb	r3, r3
 8003432:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &dirStruct, &fileStruct);
 8003434:	7bf8      	ldrb	r0, [r7, #15]
 8003436:	1d3a      	adds	r2, r7, #4
 8003438:	7bb9      	ldrb	r1, [r7, #14]
 800343a:	4b13      	ldr	r3, [pc, #76]	; (8003488 <Save_PDM+0x254>)
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	4b13      	ldr	r3, [pc, #76]	; (800348c <Save_PDM+0x258>)
 8003440:	f002 fd78 	bl	8005f34 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 7;
 8003444:	2311      	movs	r3, #17
 8003446:	73fb      	strb	r3, [r7, #15]
	length = 4;
 8003448:	2304      	movs	r3, #4
 800344a:	73bb      	strb	r3, [r7, #14]

	buffer[0] = pdmReadings.Input_Voltage << 8;
 800344c:	2300      	movs	r3, #0
 800344e:	713b      	strb	r3, [r7, #4]
	buffer[1] = pdmReadings.Input_Voltage & 0xff;
 8003450:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <Save_PDM+0x250>)
 8003452:	881b      	ldrh	r3, [r3, #0]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	717b      	strb	r3, [r7, #5]
	buffer[2] = pdmReadings.Output_Verify << 8;
 8003458:	2300      	movs	r3, #0
 800345a:	71bb      	strb	r3, [r7, #6]
	buffer[3] = pdmReadings.Output_Verify & 0xff;
 800345c:	4b09      	ldr	r3, [pc, #36]	; (8003484 <Save_PDM+0x250>)
 800345e:	885b      	ldrh	r3, [r3, #2]
 8003460:	b2db      	uxtb	r3, r3
 8003462:	71fb      	strb	r3, [r7, #7]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &dirStruct, &fileStruct);
 8003464:	7bf8      	ldrb	r0, [r7, #15]
 8003466:	1d3a      	adds	r2, r7, #4
 8003468:	7bb9      	ldrb	r1, [r7, #14]
 800346a:	4b07      	ldr	r3, [pc, #28]	; (8003488 <Save_PDM+0x254>)
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	4b07      	ldr	r3, [pc, #28]	; (800348c <Save_PDM+0x258>)
 8003470:	f002 fd60 	bl	8005f34 <Principal_Datalogger_Save_Buffer>
 8003474:	e000      	b.n	8003478 <Save_PDM+0x244>
		return;
 8003476:	bf00      	nop
}
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	20012712 	.word	0x20012712
 8003484:	200005f8 	.word	0x200005f8
 8003488:	200116a8 	.word	0x200116a8
 800348c:	20010640 	.word	0x20010640

08003490 <Save_ECU>:

static void Save_ECU()
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af02      	add	r7, sp, #8
	uint8_t id = 0, length = 0, buffer[8];
 8003496:	2300      	movs	r3, #0
 8003498:	73fb      	strb	r3, [r7, #15]
 800349a:	2300      	movs	r3, #0
 800349c:	73bb      	strb	r3, [r7, #14]

	if(flagDatalogger != DL_SAVE)
 800349e:	4b7a      	ldr	r3, [pc, #488]	; (8003688 <Save_ECU+0x1f8>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	f040 80eb 	bne.w	800367e <Save_ECU+0x1ee>
		return;

	id = ECU_FIRST_ID;
 80034a8:	2301      	movs	r3, #1
 80034aa:	73fb      	strb	r3, [r7, #15]
	length = 8;
 80034ac:	2308      	movs	r3, #8
 80034ae:	73bb      	strb	r3, [r7, #14]

	buffer[0] = ecuData.rpm >> 8;
 80034b0:	4b76      	ldr	r3, [pc, #472]	; (800368c <Save_ECU+0x1fc>)
 80034b2:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 80034b6:	121b      	asrs	r3, r3, #8
 80034b8:	b21b      	sxth	r3, r3
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	713b      	strb	r3, [r7, #4]
	buffer[1] = ecuData.rpm & 0xff;
 80034be:	4b73      	ldr	r3, [pc, #460]	; (800368c <Save_ECU+0x1fc>)
 80034c0:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	717b      	strb	r3, [r7, #5]
	buffer[2] = ecuData.tps >> 8;
 80034c8:	4b70      	ldr	r3, [pc, #448]	; (800368c <Save_ECU+0x1fc>)
 80034ca:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80034ce:	121b      	asrs	r3, r3, #8
 80034d0:	b21b      	sxth	r3, r3
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	71bb      	strb	r3, [r7, #6]
	buffer[3] = ecuData.tps & 0xff;
 80034d6:	4b6d      	ldr	r3, [pc, #436]	; (800368c <Save_ECU+0x1fc>)
 80034d8:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ecuData.iat >> 8;
 80034e0:	4b6a      	ldr	r3, [pc, #424]	; (800368c <Save_ECU+0x1fc>)
 80034e2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80034e6:	121b      	asrs	r3, r3, #8
 80034e8:	b21b      	sxth	r3, r3
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	723b      	strb	r3, [r7, #8]
	buffer[5] = ecuData.iat & 0xff;
 80034ee:	4b67      	ldr	r3, [pc, #412]	; (800368c <Save_ECU+0x1fc>)
 80034f0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	727b      	strb	r3, [r7, #9]
	buffer[6] = ecuData.ect >> 8;
 80034f8:	4b64      	ldr	r3, [pc, #400]	; (800368c <Save_ECU+0x1fc>)
 80034fa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80034fe:	121b      	asrs	r3, r3, #8
 8003500:	b21b      	sxth	r3, r3
 8003502:	b2db      	uxtb	r3, r3
 8003504:	72bb      	strb	r3, [r7, #10]
	buffer[7] = ecuData.ect & 0xff;
 8003506:	4b61      	ldr	r3, [pc, #388]	; (800368c <Save_ECU+0x1fc>)
 8003508:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800350c:	b2db      	uxtb	r3, r3
 800350e:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &dirStruct, &fileStruct);
 8003510:	7bf8      	ldrb	r0, [r7, #15]
 8003512:	1d3a      	adds	r2, r7, #4
 8003514:	7bb9      	ldrb	r1, [r7, #14]
 8003516:	4b5e      	ldr	r3, [pc, #376]	; (8003690 <Save_ECU+0x200>)
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	4b5e      	ldr	r3, [pc, #376]	; (8003694 <Save_ECU+0x204>)
 800351c:	f002 fd0a 	bl	8005f34 <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 1;
 8003520:	2302      	movs	r3, #2
 8003522:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003524:	2308      	movs	r3, #8
 8003526:	73bb      	strb	r3, [r7, #14]

	buffer[0] = ecuData.map >> 8;
 8003528:	4b58      	ldr	r3, [pc, #352]	; (800368c <Save_ECU+0x1fc>)
 800352a:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800352e:	121b      	asrs	r3, r3, #8
 8003530:	b21b      	sxth	r3, r3
 8003532:	b2db      	uxtb	r3, r3
 8003534:	713b      	strb	r3, [r7, #4]
	buffer[1] = ecuData.map & 0xff;
 8003536:	4b55      	ldr	r3, [pc, #340]	; (800368c <Save_ECU+0x1fc>)
 8003538:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800353c:	b2db      	uxtb	r3, r3
 800353e:	717b      	strb	r3, [r7, #5]
	buffer[2] = ecuData.fuel_pressure >> 8;
 8003540:	4b52      	ldr	r3, [pc, #328]	; (800368c <Save_ECU+0x1fc>)
 8003542:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8003546:	121b      	asrs	r3, r3, #8
 8003548:	b21b      	sxth	r3, r3
 800354a:	b2db      	uxtb	r3, r3
 800354c:	71bb      	strb	r3, [r7, #6]
	buffer[3] = ecuData.fuel_pressure & 0xff;
 800354e:	4b4f      	ldr	r3, [pc, #316]	; (800368c <Save_ECU+0x1fc>)
 8003550:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8003554:	b2db      	uxtb	r3, r3
 8003556:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ecuData.oil_pressure >> 8;
 8003558:	4b4c      	ldr	r3, [pc, #304]	; (800368c <Save_ECU+0x1fc>)
 800355a:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800355e:	121b      	asrs	r3, r3, #8
 8003560:	b21b      	sxth	r3, r3
 8003562:	b2db      	uxtb	r3, r3
 8003564:	723b      	strb	r3, [r7, #8]
	buffer[5] = ecuData.oil_pressure & 0xff;
 8003566:	4b49      	ldr	r3, [pc, #292]	; (800368c <Save_ECU+0x1fc>)
 8003568:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800356c:	b2db      	uxtb	r3, r3
 800356e:	727b      	strb	r3, [r7, #9]
	buffer[6] = ecuData.coolant_pressure >> 8;
 8003570:	4b46      	ldr	r3, [pc, #280]	; (800368c <Save_ECU+0x1fc>)
 8003572:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8003576:	121b      	asrs	r3, r3, #8
 8003578:	b21b      	sxth	r3, r3
 800357a:	b2db      	uxtb	r3, r3
 800357c:	72bb      	strb	r3, [r7, #10]
	buffer[7] = ecuData.coolant_pressure & 0xff;
 800357e:	4b43      	ldr	r3, [pc, #268]	; (800368c <Save_ECU+0x1fc>)
 8003580:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8003584:	b2db      	uxtb	r3, r3
 8003586:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &dirStruct, &fileStruct);
 8003588:	7bf8      	ldrb	r0, [r7, #15]
 800358a:	1d3a      	adds	r2, r7, #4
 800358c:	7bb9      	ldrb	r1, [r7, #14]
 800358e:	4b40      	ldr	r3, [pc, #256]	; (8003690 <Save_ECU+0x200>)
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	4b40      	ldr	r3, [pc, #256]	; (8003694 <Save_ECU+0x204>)
 8003594:	f002 fcce 	bl	8005f34 <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 2;
 8003598:	2303      	movs	r3, #3
 800359a:	73fb      	strb	r3, [r7, #15]
	length = 8;
 800359c:	2308      	movs	r3, #8
 800359e:	73bb      	strb	r3, [r7, #14]

	buffer[0] = ecuData.lambda >> 8;
 80035a0:	4b3a      	ldr	r3, [pc, #232]	; (800368c <Save_ECU+0x1fc>)
 80035a2:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80035a6:	121b      	asrs	r3, r3, #8
 80035a8:	b21b      	sxth	r3, r3
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	713b      	strb	r3, [r7, #4]
	buffer[1] = ecuData.lambda & 0xff;
 80035ae:	4b37      	ldr	r3, [pc, #220]	; (800368c <Save_ECU+0x1fc>)
 80035b0:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	717b      	strb	r3, [r7, #5]
	buffer[2] = ecuData.oil_temperature >> 8;
 80035b8:	4b34      	ldr	r3, [pc, #208]	; (800368c <Save_ECU+0x1fc>)
 80035ba:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80035be:	121b      	asrs	r3, r3, #8
 80035c0:	b21b      	sxth	r3, r3
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	71bb      	strb	r3, [r7, #6]
	buffer[3] = ecuData.oil_temperature & 0xff;
 80035c6:	4b31      	ldr	r3, [pc, #196]	; (800368c <Save_ECU+0x1fc>)
 80035c8:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ecuData.wheel_speed_fl;
 80035d0:	4b2e      	ldr	r3, [pc, #184]	; (800368c <Save_ECU+0x1fc>)
 80035d2:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	723b      	strb	r3, [r7, #8]
	buffer[5] = ecuData.wheel_speed_fr;
 80035da:	4b2c      	ldr	r3, [pc, #176]	; (800368c <Save_ECU+0x1fc>)
 80035dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	727b      	strb	r3, [r7, #9]
	buffer[6] = ecuData.wheel_speed_rl;
 80035e4:	4b29      	ldr	r3, [pc, #164]	; (800368c <Save_ECU+0x1fc>)
 80035e6:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	72bb      	strb	r3, [r7, #10]
	buffer[7] = ecuData.wheel_speed_rr;
 80035ee:	4b27      	ldr	r3, [pc, #156]	; (800368c <Save_ECU+0x1fc>)
 80035f0:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &dirStruct, &fileStruct);
 80035f8:	7bf8      	ldrb	r0, [r7, #15]
 80035fa:	1d3a      	adds	r2, r7, #4
 80035fc:	7bb9      	ldrb	r1, [r7, #14]
 80035fe:	4b24      	ldr	r3, [pc, #144]	; (8003690 <Save_ECU+0x200>)
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	4b24      	ldr	r3, [pc, #144]	; (8003694 <Save_ECU+0x204>)
 8003604:	f002 fc96 	bl	8005f34 <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 3;
 8003608:	2304      	movs	r3, #4
 800360a:	73fb      	strb	r3, [r7, #15]
	length = 8;
 800360c:	2308      	movs	r3, #8
 800360e:	73bb      	strb	r3, [r7, #14]

	buffer[0] = ecuData.battery_voltage >> 8;
 8003610:	4b1e      	ldr	r3, [pc, #120]	; (800368c <Save_ECU+0x1fc>)
 8003612:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003616:	121b      	asrs	r3, r3, #8
 8003618:	b21b      	sxth	r3, r3
 800361a:	b2db      	uxtb	r3, r3
 800361c:	713b      	strb	r3, [r7, #4]
	buffer[1] = ecuData.battery_voltage & 0xff;
 800361e:	4b1b      	ldr	r3, [pc, #108]	; (800368c <Save_ECU+0x1fc>)
 8003620:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003624:	b2db      	uxtb	r3, r3
 8003626:	717b      	strb	r3, [r7, #5]
	buffer[2] = ecuData.total_fuel_flow >> 8;
 8003628:	4b18      	ldr	r3, [pc, #96]	; (800368c <Save_ECU+0x1fc>)
 800362a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800362e:	121b      	asrs	r3, r3, #8
 8003630:	b21b      	sxth	r3, r3
 8003632:	b2db      	uxtb	r3, r3
 8003634:	71bb      	strb	r3, [r7, #6]
	buffer[3] = ecuData.total_fuel_flow & 0xff;
 8003636:	4b15      	ldr	r3, [pc, #84]	; (800368c <Save_ECU+0x1fc>)
 8003638:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800363c:	b2db      	uxtb	r3, r3
 800363e:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ecuData.gear & 0xff;
 8003640:	4b12      	ldr	r3, [pc, #72]	; (800368c <Save_ECU+0x1fc>)
 8003642:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8003646:	b2db      	uxtb	r3, r3
 8003648:	723b      	strb	r3, [r7, #8]
	buffer[5] = ecuData.electro_fan & 0xff;
 800364a:	4b10      	ldr	r3, [pc, #64]	; (800368c <Save_ECU+0x1fc>)
 800364c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003650:	b2db      	uxtb	r3, r3
 8003652:	727b      	strb	r3, [r7, #9]
	buffer[6] = ecuData.injection_bank_a_time >> 8;
 8003654:	4b0d      	ldr	r3, [pc, #52]	; (800368c <Save_ECU+0x1fc>)
 8003656:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800365a:	121b      	asrs	r3, r3, #8
 800365c:	b21b      	sxth	r3, r3
 800365e:	b2db      	uxtb	r3, r3
 8003660:	72bb      	strb	r3, [r7, #10]
	buffer[7] = ecuData.injection_bank_a_time & 0xff;
 8003662:	4b0a      	ldr	r3, [pc, #40]	; (800368c <Save_ECU+0x1fc>)
 8003664:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003668:	b2db      	uxtb	r3, r3
 800366a:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &dirStruct, &fileStruct);
 800366c:	7bf8      	ldrb	r0, [r7, #15]
 800366e:	1d3a      	adds	r2, r7, #4
 8003670:	7bb9      	ldrb	r1, [r7, #14]
 8003672:	4b07      	ldr	r3, [pc, #28]	; (8003690 <Save_ECU+0x200>)
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	4b07      	ldr	r3, [pc, #28]	; (8003694 <Save_ECU+0x204>)
 8003678:	f002 fc5c 	bl	8005f34 <Principal_Datalogger_Save_Buffer>

	return;
 800367c:	e000      	b.n	8003680 <Save_ECU+0x1f0>
		return;
 800367e:	bf00      	nop
}
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	20012712 	.word	0x20012712
 800368c:	2000059c 	.word	0x2000059c
 8003690:	200116a8 	.word	0x200116a8
 8003694:	20010640 	.word	0x20010640

08003698 <Principal_CAN_Start>:

void Principal_CAN_Start(CAN_HandleTypeDef* hcan)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08e      	sub	sp, #56	; 0x38
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filter_id = 0, mask_id = 0;
 80036a0:	2300      	movs	r3, #0
 80036a2:	637b      	str	r3, [r7, #52]	; 0x34
 80036a4:	2300      	movs	r3, #0
 80036a6:	633b      	str	r3, [r7, #48]	; 0x30

	filter_id = CAN_DAQ_FILTER;
 80036a8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80036ac:	637b      	str	r3, [r7, #52]	; 0x34
	mask_id = CAN_DAQ_MASK;
 80036ae:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80036b2:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80036b4:	2300      	movs	r3, #0
 80036b6:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80036b8:	2301      	movs	r3, #1
 80036ba:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 80036bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036be:	0b5b      	lsrs	r3, r3, #13
 80036c0:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 80036c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036c4:	00db      	lsls	r3, r3, #3
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 80036ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036cc:	0b5b      	lsrs	r3, r3, #13
 80036ce:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 80036d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80036d8:	2300      	movs	r3, #0
 80036da:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterActivation = ENABLE;
 80036dc:	2301      	movs	r3, #1
 80036de:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterBank = 0;
 80036e0:	2300      	movs	r3, #0
 80036e2:	61fb      	str	r3, [r7, #28]
	sFilterConfig.SlaveStartFilterBank = 14;
 80036e4:	230e      	movs	r3, #14
 80036e6:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 80036e8:	f107 0308 	add.w	r3, r7, #8
 80036ec:	4619      	mov	r1, r3
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f004 f8aa 	bl	8007848 <HAL_CAN_ConfigFilter>

	filter_id = CAN_CFG_FILTER;
 80036f4:	2300      	movs	r3, #0
 80036f6:	637b      	str	r3, [r7, #52]	; 0x34
	mask_id = CAN_CFG_MASK;
 80036f8:	2300      	movs	r3, #0
 80036fa:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8003700:	2301      	movs	r3, #1
 8003702:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 8003704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003706:	0b5b      	lsrs	r3, r3, #13
 8003708:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 800370a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800370c:	00db      	lsls	r3, r3, #3
 800370e:	b29b      	uxth	r3, r3
 8003710:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 8003712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003714:	0b5b      	lsrs	r3, r3, #13
 8003716:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 8003718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	b29b      	uxth	r3, r3
 800371e:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8003720:	2300      	movs	r3, #0
 8003722:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterActivation = ENABLE;
 8003724:	2301      	movs	r3, #1
 8003726:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterBank = 1;
 8003728:	2301      	movs	r3, #1
 800372a:	61fb      	str	r3, [r7, #28]
	sFilterConfig.SlaveStartFilterBank = 15;
 800372c:	230f      	movs	r3, #15
 800372e:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 8003730:	f107 0308 	add.w	r3, r7, #8
 8003734:	4619      	mov	r1, r3
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f004 f886 	bl	8007848 <HAL_CAN_ConfigFilter>

	FT_CAN_FilterConfig(hcan, FT600, 2, CAN_RX_FIFO0);
 800373c:	2300      	movs	r3, #0
 800373e:	2202      	movs	r2, #2
 8003740:	f240 2181 	movw	r1, #641	; 0x281
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7fc ff35 	bl	80005b4 <FT_CAN_FilterConfig>
	FT_CAN_FilterConfig(hcan, FT_WBO2_Nano, 3, CAN_RX_FIFO0);
 800374a:	2300      	movs	r3, #0
 800374c:	2203      	movs	r2, #3
 800374e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7fc ff2e 	bl	80005b4 <FT_CAN_FilterConfig>
	PDM_CAN_FilterConfig(hcan, 4, CAN_RX_FIFO0);
 8003758:	2200      	movs	r2, #0
 800375a:	2104      	movs	r1, #4
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7fe fc01 	bl	8001f64 <PDM_CAN_FilterConfig>

	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003762:	2102      	movs	r1, #2
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f004 fbb5 	bl	8007ed4 <HAL_CAN_ActivateNotification>

	HAL_CAN_Start(hcan);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f004 f94c 	bl	8007a08 <HAL_CAN_Start>
}
 8003770:	bf00      	nop
 8003772:	3738      	adds	r7, #56	; 0x38
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <Principal_Transmit_Msg>:

void Principal_Transmit_Msg(CAN_HandleTypeDef* hcan, uint8_t msg_number)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	460b      	mov	r3, r1
 8003782:	70fb      	strb	r3, [r7, #3]
	switch(msg_number)
 8003784:	78fb      	ldrb	r3, [r7, #3]
 8003786:	2b07      	cmp	r3, #7
 8003788:	d830      	bhi.n	80037ec <Principal_Transmit_Msg+0x74>
 800378a:	a201      	add	r2, pc, #4	; (adr r2, 8003790 <Principal_Transmit_Msg+0x18>)
 800378c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003790:	080037b1 	.word	0x080037b1
 8003794:	080037b9 	.word	0x080037b9
 8003798:	080037c1 	.word	0x080037c1
 800379c:	080037d1 	.word	0x080037d1
 80037a0:	080037c9 	.word	0x080037c9
 80037a4:	080037d9 	.word	0x080037d9
 80037a8:	080037e1 	.word	0x080037e1
 80037ac:	080037e7 	.word	0x080037e7
	{
		case ANALOG_1_4:
			Tx_Analog_1_4(hcan);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7fe fcd9 	bl	8002168 <Tx_Analog_1_4>
			break;
 80037b6:	e01a      	b.n	80037ee <Principal_Transmit_Msg+0x76>

		case ANALOG_5_8:
			Tx_Analog_5_8(hcan);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f7fe fd83 	bl	80022c4 <Tx_Analog_5_8>
			break;
 80037be:	e016      	b.n	80037ee <Principal_Transmit_Msg+0x76>

		case ANALOG_9_12:
			Tx_Analog_9_12(hcan);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7fe fe2d 	bl	8002420 <Tx_Analog_9_12>
			break;
 80037c6:	e012      	b.n	80037ee <Principal_Transmit_Msg+0x76>

		case VERIFY_MSG:
			Tx_Verify(hcan);
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f7fe ff79 	bl	80026c0 <Tx_Verify>
			break;
 80037ce:	e00e      	b.n	80037ee <Principal_Transmit_Msg+0x76>

		case RTC_MSG:
			Tx_RTC(hcan);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f7fe fedb 	bl	800258c <Tx_RTC>
			break;
 80037d6:	e00a      	b.n	80037ee <Principal_Transmit_Msg+0x76>

		case BEACON_MSG:
			Tx_Beacon(hcan);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff fc7b 	bl	80030d4 <Tx_Beacon>
			break;
 80037de:	e006      	b.n	80037ee <Principal_Transmit_Msg+0x76>

		case ECU_SAVE:
			Save_ECU();
 80037e0:	f7ff fe56 	bl	8003490 <Save_ECU>
			break;
 80037e4:	e003      	b.n	80037ee <Principal_Transmit_Msg+0x76>

		case PDM_SAVE:
			Save_PDM();
 80037e6:	f7ff fd25 	bl	8003234 <Save_PDM>
			break;
 80037ea:	e000      	b.n	80037ee <Principal_Transmit_Msg+0x76>

		default:
			return;
 80037ec:	bf00      	nop
	}
}
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <Principal_Init>:

static HAL_StatusTypeDef Load_EEPROM(I2C_HandleTypeDef* hi2c);
static HAL_StatusTypeDef Save_EEPROM(I2C_HandleTypeDef* hi2c);

void Principal_Init(CAN_HandleTypeDef* hcan, I2C_HandleTypeDef* hi2c, TIM_HandleTypeDef* htim)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
	if(Load_EEPROM(hi2c) != HAL_OK)
 8003800:	68b8      	ldr	r0, [r7, #8]
 8003802:	f000 fd31 	bl	8004268 <Load_EEPROM>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <Principal_Init+0x1c>
		Principal_Hard_Code_Config();
 800380c:	f000 fcde 	bl	80041cc <Principal_Hard_Code_Config>
//	HAL_RTCEx_SetCoarseCalib(&hrtc, RTC_CALIBSIGN_NEGATIVE, 50);
//	HAL_RTC_SetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
//	HAL_RTC_SetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
//	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, RTC_STORE_DATA);

	if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) == RTC_STORE_DATA)
 8003810:	2101      	movs	r1, #1
 8003812:	4813      	ldr	r0, [pc, #76]	; (8003860 <Principal_Init+0x6c>)
 8003814:	f009 fbca 	bl	800cfac <HAL_RTCEx_BKUPRead>
 8003818:	4603      	mov	r3, r0
 800381a:	f24e 325c 	movw	r2, #58204	; 0xe35c
 800381e:	4293      	cmp	r3, r2
 8003820:	d103      	bne.n	800382a <Principal_Init+0x36>
		flagRTC = RTC_OK;
 8003822:	4b10      	ldr	r3, [pc, #64]	; (8003864 <Principal_Init+0x70>)
 8003824:	2200      	movs	r2, #0
 8003826:	701a      	strb	r2, [r3, #0]
 8003828:	e002      	b.n	8003830 <Principal_Init+0x3c>
	else
		flagRTC = RTC_LOST;
 800382a:	4b0e      	ldr	r3, [pc, #56]	; (8003864 <Principal_Init+0x70>)
 800382c:	2201      	movs	r2, #1
 800382e:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adcBuffer[6], 6);
 8003830:	2206      	movs	r2, #6
 8003832:	490d      	ldr	r1, [pc, #52]	; (8003868 <Principal_Init+0x74>)
 8003834:	480d      	ldr	r0, [pc, #52]	; (800386c <Principal_Init+0x78>)
 8003836:	f003 fb2d 	bl	8006e94 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) &adcBuffer[0], 6);
 800383a:	2206      	movs	r2, #6
 800383c:	490c      	ldr	r1, [pc, #48]	; (8003870 <Principal_Init+0x7c>)
 800383e:	480d      	ldr	r0, [pc, #52]	; (8003874 <Principal_Init+0x80>)
 8003840:	f003 fb28 	bl	8006e94 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(htim);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f00b fa99 	bl	800ed7c <HAL_TIM_Base_Start_IT>

	Principal_Datalogger_Init(&fatfsStruct);
 800384a:	480b      	ldr	r0, [pc, #44]	; (8003878 <Principal_Init+0x84>)
 800384c:	f002 fa1c 	bl	8005c88 <Principal_Datalogger_Init>

	Principal_CAN_Start(hcan);
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f7ff ff21 	bl	8003698 <Principal_CAN_Start>
}
 8003856:	bf00      	nop
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	2000038c 	.word	0x2000038c
 8003864:	20012713 	.word	0x20012713
 8003868:	20000590 	.word	0x20000590
 800386c:	200001b4 	.word	0x200001b4
 8003870:	20000584 	.word	0x20000584
 8003874:	200001fc 	.word	0x200001fc
 8003878:	20010670 	.word	0x20010670

0800387c <Principal_Receive_Config>:

HAL_StatusTypeDef Principal_Receive_Config(I2C_HandleTypeDef* hi2c, uint8_t* data, uint32_t length)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
	HAL_SD_StateTypeDef retVal = HAL_OK;
 8003888:	2300      	movs	r3, #0
 800388a:	75fb      	strb	r3, [r7, #23]

	switch(data[0])
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2b03      	cmp	r3, #3
 8003892:	f200 847e 	bhi.w	8004192 <Principal_Receive_Config+0x916>
 8003896:	a201      	add	r2, pc, #4	; (adr r2, 800389c <Principal_Receive_Config+0x20>)
 8003898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389c:	080038ad 	.word	0x080038ad
 80038a0:	08003d41 	.word	0x08003d41
 80038a4:	080040a1 	.word	0x080040a1
 80038a8:	0800411f 	.word	0x0800411f
	{
		case 0:
			if(length != 8)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2b08      	cmp	r3, #8
 80038b0:	f040 8471 	bne.w	8004196 <Principal_Receive_Config+0x91a>
				break;

			__BUFFER_TO_FREQ(data[1], perMsg[ANALOG_1_4]);
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	3301      	adds	r3, #1
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	2b0a      	cmp	r3, #10
 80038be:	d847      	bhi.n	8003950 <Principal_Receive_Config+0xd4>
 80038c0:	a201      	add	r2, pc, #4	; (adr r2, 80038c8 <Principal_Receive_Config+0x4c>)
 80038c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c6:	bf00      	nop
 80038c8:	080038f5 	.word	0x080038f5
 80038cc:	080038ff 	.word	0x080038ff
 80038d0:	08003909 	.word	0x08003909
 80038d4:	08003911 	.word	0x08003911
 80038d8:	08003919 	.word	0x08003919
 80038dc:	08003921 	.word	0x08003921
 80038e0:	08003929 	.word	0x08003929
 80038e4:	08003931 	.word	0x08003931
 80038e8:	08003939 	.word	0x08003939
 80038ec:	08003941 	.word	0x08003941
 80038f0:	08003949 	.word	0x08003949
 80038f4:	4ba8      	ldr	r3, [pc, #672]	; (8003b98 <Principal_Receive_Config+0x31c>)
 80038f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038fa:	801a      	strh	r2, [r3, #0]
 80038fc:	e02b      	b.n	8003956 <Principal_Receive_Config+0xda>
 80038fe:	4ba6      	ldr	r3, [pc, #664]	; (8003b98 <Principal_Receive_Config+0x31c>)
 8003900:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003904:	801a      	strh	r2, [r3, #0]
 8003906:	e026      	b.n	8003956 <Principal_Receive_Config+0xda>
 8003908:	4ba3      	ldr	r3, [pc, #652]	; (8003b98 <Principal_Receive_Config+0x31c>)
 800390a:	22c8      	movs	r2, #200	; 0xc8
 800390c:	801a      	strh	r2, [r3, #0]
 800390e:	e022      	b.n	8003956 <Principal_Receive_Config+0xda>
 8003910:	4ba1      	ldr	r3, [pc, #644]	; (8003b98 <Principal_Receive_Config+0x31c>)
 8003912:	2264      	movs	r2, #100	; 0x64
 8003914:	801a      	strh	r2, [r3, #0]
 8003916:	e01e      	b.n	8003956 <Principal_Receive_Config+0xda>
 8003918:	4b9f      	ldr	r3, [pc, #636]	; (8003b98 <Principal_Receive_Config+0x31c>)
 800391a:	2232      	movs	r2, #50	; 0x32
 800391c:	801a      	strh	r2, [r3, #0]
 800391e:	e01a      	b.n	8003956 <Principal_Receive_Config+0xda>
 8003920:	4b9d      	ldr	r3, [pc, #628]	; (8003b98 <Principal_Receive_Config+0x31c>)
 8003922:	2228      	movs	r2, #40	; 0x28
 8003924:	801a      	strh	r2, [r3, #0]
 8003926:	e016      	b.n	8003956 <Principal_Receive_Config+0xda>
 8003928:	4b9b      	ldr	r3, [pc, #620]	; (8003b98 <Principal_Receive_Config+0x31c>)
 800392a:	2214      	movs	r2, #20
 800392c:	801a      	strh	r2, [r3, #0]
 800392e:	e012      	b.n	8003956 <Principal_Receive_Config+0xda>
 8003930:	4b99      	ldr	r3, [pc, #612]	; (8003b98 <Principal_Receive_Config+0x31c>)
 8003932:	220a      	movs	r2, #10
 8003934:	801a      	strh	r2, [r3, #0]
 8003936:	e00e      	b.n	8003956 <Principal_Receive_Config+0xda>
 8003938:	4b97      	ldr	r3, [pc, #604]	; (8003b98 <Principal_Receive_Config+0x31c>)
 800393a:	2205      	movs	r2, #5
 800393c:	801a      	strh	r2, [r3, #0]
 800393e:	e00a      	b.n	8003956 <Principal_Receive_Config+0xda>
 8003940:	4b95      	ldr	r3, [pc, #596]	; (8003b98 <Principal_Receive_Config+0x31c>)
 8003942:	2204      	movs	r2, #4
 8003944:	801a      	strh	r2, [r3, #0]
 8003946:	e006      	b.n	8003956 <Principal_Receive_Config+0xda>
 8003948:	4b93      	ldr	r3, [pc, #588]	; (8003b98 <Principal_Receive_Config+0x31c>)
 800394a:	2202      	movs	r2, #2
 800394c:	801a      	strh	r2, [r3, #0]
 800394e:	e002      	b.n	8003956 <Principal_Receive_Config+0xda>
 8003950:	4b91      	ldr	r3, [pc, #580]	; (8003b98 <Principal_Receive_Config+0x31c>)
 8003952:	2200      	movs	r2, #0
 8003954:	801a      	strh	r2, [r3, #0]
 8003956:	bf00      	nop
			__BUFFER_TO_FREQ(data[2], perMsg[ANALOG_5_8]);
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	3302      	adds	r3, #2
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	3b01      	subs	r3, #1
 8003960:	2b0a      	cmp	r3, #10
 8003962:	d847      	bhi.n	80039f4 <Principal_Receive_Config+0x178>
 8003964:	a201      	add	r2, pc, #4	; (adr r2, 800396c <Principal_Receive_Config+0xf0>)
 8003966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396a:	bf00      	nop
 800396c:	08003999 	.word	0x08003999
 8003970:	080039a3 	.word	0x080039a3
 8003974:	080039ad 	.word	0x080039ad
 8003978:	080039b5 	.word	0x080039b5
 800397c:	080039bd 	.word	0x080039bd
 8003980:	080039c5 	.word	0x080039c5
 8003984:	080039cd 	.word	0x080039cd
 8003988:	080039d5 	.word	0x080039d5
 800398c:	080039dd 	.word	0x080039dd
 8003990:	080039e5 	.word	0x080039e5
 8003994:	080039ed 	.word	0x080039ed
 8003998:	4b7f      	ldr	r3, [pc, #508]	; (8003b98 <Principal_Receive_Config+0x31c>)
 800399a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800399e:	805a      	strh	r2, [r3, #2]
 80039a0:	e02b      	b.n	80039fa <Principal_Receive_Config+0x17e>
 80039a2:	4b7d      	ldr	r3, [pc, #500]	; (8003b98 <Principal_Receive_Config+0x31c>)
 80039a4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80039a8:	805a      	strh	r2, [r3, #2]
 80039aa:	e026      	b.n	80039fa <Principal_Receive_Config+0x17e>
 80039ac:	4b7a      	ldr	r3, [pc, #488]	; (8003b98 <Principal_Receive_Config+0x31c>)
 80039ae:	22c8      	movs	r2, #200	; 0xc8
 80039b0:	805a      	strh	r2, [r3, #2]
 80039b2:	e022      	b.n	80039fa <Principal_Receive_Config+0x17e>
 80039b4:	4b78      	ldr	r3, [pc, #480]	; (8003b98 <Principal_Receive_Config+0x31c>)
 80039b6:	2264      	movs	r2, #100	; 0x64
 80039b8:	805a      	strh	r2, [r3, #2]
 80039ba:	e01e      	b.n	80039fa <Principal_Receive_Config+0x17e>
 80039bc:	4b76      	ldr	r3, [pc, #472]	; (8003b98 <Principal_Receive_Config+0x31c>)
 80039be:	2232      	movs	r2, #50	; 0x32
 80039c0:	805a      	strh	r2, [r3, #2]
 80039c2:	e01a      	b.n	80039fa <Principal_Receive_Config+0x17e>
 80039c4:	4b74      	ldr	r3, [pc, #464]	; (8003b98 <Principal_Receive_Config+0x31c>)
 80039c6:	2228      	movs	r2, #40	; 0x28
 80039c8:	805a      	strh	r2, [r3, #2]
 80039ca:	e016      	b.n	80039fa <Principal_Receive_Config+0x17e>
 80039cc:	4b72      	ldr	r3, [pc, #456]	; (8003b98 <Principal_Receive_Config+0x31c>)
 80039ce:	2214      	movs	r2, #20
 80039d0:	805a      	strh	r2, [r3, #2]
 80039d2:	e012      	b.n	80039fa <Principal_Receive_Config+0x17e>
 80039d4:	4b70      	ldr	r3, [pc, #448]	; (8003b98 <Principal_Receive_Config+0x31c>)
 80039d6:	220a      	movs	r2, #10
 80039d8:	805a      	strh	r2, [r3, #2]
 80039da:	e00e      	b.n	80039fa <Principal_Receive_Config+0x17e>
 80039dc:	4b6e      	ldr	r3, [pc, #440]	; (8003b98 <Principal_Receive_Config+0x31c>)
 80039de:	2205      	movs	r2, #5
 80039e0:	805a      	strh	r2, [r3, #2]
 80039e2:	e00a      	b.n	80039fa <Principal_Receive_Config+0x17e>
 80039e4:	4b6c      	ldr	r3, [pc, #432]	; (8003b98 <Principal_Receive_Config+0x31c>)
 80039e6:	2204      	movs	r2, #4
 80039e8:	805a      	strh	r2, [r3, #2]
 80039ea:	e006      	b.n	80039fa <Principal_Receive_Config+0x17e>
 80039ec:	4b6a      	ldr	r3, [pc, #424]	; (8003b98 <Principal_Receive_Config+0x31c>)
 80039ee:	2202      	movs	r2, #2
 80039f0:	805a      	strh	r2, [r3, #2]
 80039f2:	e002      	b.n	80039fa <Principal_Receive_Config+0x17e>
 80039f4:	4b68      	ldr	r3, [pc, #416]	; (8003b98 <Principal_Receive_Config+0x31c>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	805a      	strh	r2, [r3, #2]
 80039fa:	bf00      	nop
			__BUFFER_TO_FREQ(data[3], perMsg[ANALOG_9_12]);
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	3303      	adds	r3, #3
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	3b01      	subs	r3, #1
 8003a04:	2b0a      	cmp	r3, #10
 8003a06:	d847      	bhi.n	8003a98 <Principal_Receive_Config+0x21c>
 8003a08:	a201      	add	r2, pc, #4	; (adr r2, 8003a10 <Principal_Receive_Config+0x194>)
 8003a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a0e:	bf00      	nop
 8003a10:	08003a3d 	.word	0x08003a3d
 8003a14:	08003a47 	.word	0x08003a47
 8003a18:	08003a51 	.word	0x08003a51
 8003a1c:	08003a59 	.word	0x08003a59
 8003a20:	08003a61 	.word	0x08003a61
 8003a24:	08003a69 	.word	0x08003a69
 8003a28:	08003a71 	.word	0x08003a71
 8003a2c:	08003a79 	.word	0x08003a79
 8003a30:	08003a81 	.word	0x08003a81
 8003a34:	08003a89 	.word	0x08003a89
 8003a38:	08003a91 	.word	0x08003a91
 8003a3c:	4b56      	ldr	r3, [pc, #344]	; (8003b98 <Principal_Receive_Config+0x31c>)
 8003a3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a42:	809a      	strh	r2, [r3, #4]
 8003a44:	e02b      	b.n	8003a9e <Principal_Receive_Config+0x222>
 8003a46:	4b54      	ldr	r3, [pc, #336]	; (8003b98 <Principal_Receive_Config+0x31c>)
 8003a48:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003a4c:	809a      	strh	r2, [r3, #4]
 8003a4e:	e026      	b.n	8003a9e <Principal_Receive_Config+0x222>
 8003a50:	4b51      	ldr	r3, [pc, #324]	; (8003b98 <Principal_Receive_Config+0x31c>)
 8003a52:	22c8      	movs	r2, #200	; 0xc8
 8003a54:	809a      	strh	r2, [r3, #4]
 8003a56:	e022      	b.n	8003a9e <Principal_Receive_Config+0x222>
 8003a58:	4b4f      	ldr	r3, [pc, #316]	; (8003b98 <Principal_Receive_Config+0x31c>)
 8003a5a:	2264      	movs	r2, #100	; 0x64
 8003a5c:	809a      	strh	r2, [r3, #4]
 8003a5e:	e01e      	b.n	8003a9e <Principal_Receive_Config+0x222>
 8003a60:	4b4d      	ldr	r3, [pc, #308]	; (8003b98 <Principal_Receive_Config+0x31c>)
 8003a62:	2232      	movs	r2, #50	; 0x32
 8003a64:	809a      	strh	r2, [r3, #4]
 8003a66:	e01a      	b.n	8003a9e <Principal_Receive_Config+0x222>
 8003a68:	4b4b      	ldr	r3, [pc, #300]	; (8003b98 <Principal_Receive_Config+0x31c>)
 8003a6a:	2228      	movs	r2, #40	; 0x28
 8003a6c:	809a      	strh	r2, [r3, #4]
 8003a6e:	e016      	b.n	8003a9e <Principal_Receive_Config+0x222>
 8003a70:	4b49      	ldr	r3, [pc, #292]	; (8003b98 <Principal_Receive_Config+0x31c>)
 8003a72:	2214      	movs	r2, #20
 8003a74:	809a      	strh	r2, [r3, #4]
 8003a76:	e012      	b.n	8003a9e <Principal_Receive_Config+0x222>
 8003a78:	4b47      	ldr	r3, [pc, #284]	; (8003b98 <Principal_Receive_Config+0x31c>)
 8003a7a:	220a      	movs	r2, #10
 8003a7c:	809a      	strh	r2, [r3, #4]
 8003a7e:	e00e      	b.n	8003a9e <Principal_Receive_Config+0x222>
 8003a80:	4b45      	ldr	r3, [pc, #276]	; (8003b98 <Principal_Receive_Config+0x31c>)
 8003a82:	2205      	movs	r2, #5
 8003a84:	809a      	strh	r2, [r3, #4]
 8003a86:	e00a      	b.n	8003a9e <Principal_Receive_Config+0x222>
 8003a88:	4b43      	ldr	r3, [pc, #268]	; (8003b98 <Principal_Receive_Config+0x31c>)
 8003a8a:	2204      	movs	r2, #4
 8003a8c:	809a      	strh	r2, [r3, #4]
 8003a8e:	e006      	b.n	8003a9e <Principal_Receive_Config+0x222>
 8003a90:	4b41      	ldr	r3, [pc, #260]	; (8003b98 <Principal_Receive_Config+0x31c>)
 8003a92:	2202      	movs	r2, #2
 8003a94:	809a      	strh	r2, [r3, #4]
 8003a96:	e002      	b.n	8003a9e <Principal_Receive_Config+0x222>
 8003a98:	4b3f      	ldr	r3, [pc, #252]	; (8003b98 <Principal_Receive_Config+0x31c>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	809a      	strh	r2, [r3, #4]
 8003a9e:	bf00      	nop
			__BUFFER_TO_FREQ(data[4], perMsg[RTC_MSG]);
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	2b0a      	cmp	r3, #10
 8003aaa:	d847      	bhi.n	8003b3c <Principal_Receive_Config+0x2c0>
 8003aac:	a201      	add	r2, pc, #4	; (adr r2, 8003ab4 <Principal_Receive_Config+0x238>)
 8003aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab2:	bf00      	nop
 8003ab4:	08003ae1 	.word	0x08003ae1
 8003ab8:	08003aeb 	.word	0x08003aeb
 8003abc:	08003af5 	.word	0x08003af5
 8003ac0:	08003afd 	.word	0x08003afd
 8003ac4:	08003b05 	.word	0x08003b05
 8003ac8:	08003b0d 	.word	0x08003b0d
 8003acc:	08003b15 	.word	0x08003b15
 8003ad0:	08003b1d 	.word	0x08003b1d
 8003ad4:	08003b25 	.word	0x08003b25
 8003ad8:	08003b2d 	.word	0x08003b2d
 8003adc:	08003b35 	.word	0x08003b35
 8003ae0:	4b2d      	ldr	r3, [pc, #180]	; (8003b98 <Principal_Receive_Config+0x31c>)
 8003ae2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ae6:	80da      	strh	r2, [r3, #6]
 8003ae8:	e02b      	b.n	8003b42 <Principal_Receive_Config+0x2c6>
 8003aea:	4b2b      	ldr	r3, [pc, #172]	; (8003b98 <Principal_Receive_Config+0x31c>)
 8003aec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003af0:	80da      	strh	r2, [r3, #6]
 8003af2:	e026      	b.n	8003b42 <Principal_Receive_Config+0x2c6>
 8003af4:	4b28      	ldr	r3, [pc, #160]	; (8003b98 <Principal_Receive_Config+0x31c>)
 8003af6:	22c8      	movs	r2, #200	; 0xc8
 8003af8:	80da      	strh	r2, [r3, #6]
 8003afa:	e022      	b.n	8003b42 <Principal_Receive_Config+0x2c6>
 8003afc:	4b26      	ldr	r3, [pc, #152]	; (8003b98 <Principal_Receive_Config+0x31c>)
 8003afe:	2264      	movs	r2, #100	; 0x64
 8003b00:	80da      	strh	r2, [r3, #6]
 8003b02:	e01e      	b.n	8003b42 <Principal_Receive_Config+0x2c6>
 8003b04:	4b24      	ldr	r3, [pc, #144]	; (8003b98 <Principal_Receive_Config+0x31c>)
 8003b06:	2232      	movs	r2, #50	; 0x32
 8003b08:	80da      	strh	r2, [r3, #6]
 8003b0a:	e01a      	b.n	8003b42 <Principal_Receive_Config+0x2c6>
 8003b0c:	4b22      	ldr	r3, [pc, #136]	; (8003b98 <Principal_Receive_Config+0x31c>)
 8003b0e:	2228      	movs	r2, #40	; 0x28
 8003b10:	80da      	strh	r2, [r3, #6]
 8003b12:	e016      	b.n	8003b42 <Principal_Receive_Config+0x2c6>
 8003b14:	4b20      	ldr	r3, [pc, #128]	; (8003b98 <Principal_Receive_Config+0x31c>)
 8003b16:	2214      	movs	r2, #20
 8003b18:	80da      	strh	r2, [r3, #6]
 8003b1a:	e012      	b.n	8003b42 <Principal_Receive_Config+0x2c6>
 8003b1c:	4b1e      	ldr	r3, [pc, #120]	; (8003b98 <Principal_Receive_Config+0x31c>)
 8003b1e:	220a      	movs	r2, #10
 8003b20:	80da      	strh	r2, [r3, #6]
 8003b22:	e00e      	b.n	8003b42 <Principal_Receive_Config+0x2c6>
 8003b24:	4b1c      	ldr	r3, [pc, #112]	; (8003b98 <Principal_Receive_Config+0x31c>)
 8003b26:	2205      	movs	r2, #5
 8003b28:	80da      	strh	r2, [r3, #6]
 8003b2a:	e00a      	b.n	8003b42 <Principal_Receive_Config+0x2c6>
 8003b2c:	4b1a      	ldr	r3, [pc, #104]	; (8003b98 <Principal_Receive_Config+0x31c>)
 8003b2e:	2204      	movs	r2, #4
 8003b30:	80da      	strh	r2, [r3, #6]
 8003b32:	e006      	b.n	8003b42 <Principal_Receive_Config+0x2c6>
 8003b34:	4b18      	ldr	r3, [pc, #96]	; (8003b98 <Principal_Receive_Config+0x31c>)
 8003b36:	2202      	movs	r2, #2
 8003b38:	80da      	strh	r2, [r3, #6]
 8003b3a:	e002      	b.n	8003b42 <Principal_Receive_Config+0x2c6>
 8003b3c:	4b16      	ldr	r3, [pc, #88]	; (8003b98 <Principal_Receive_Config+0x31c>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	80da      	strh	r2, [r3, #6]
 8003b42:	bf00      	nop
			__BUFFER_TO_FREQ(data[5], perMsg[VERIFY_MSG]);
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	3305      	adds	r3, #5
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	2b0a      	cmp	r3, #10
 8003b4e:	d849      	bhi.n	8003be4 <Principal_Receive_Config+0x368>
 8003b50:	a201      	add	r2, pc, #4	; (adr r2, 8003b58 <Principal_Receive_Config+0x2dc>)
 8003b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b56:	bf00      	nop
 8003b58:	08003b85 	.word	0x08003b85
 8003b5c:	08003b8f 	.word	0x08003b8f
 8003b60:	08003b9d 	.word	0x08003b9d
 8003b64:	08003ba5 	.word	0x08003ba5
 8003b68:	08003bad 	.word	0x08003bad
 8003b6c:	08003bb5 	.word	0x08003bb5
 8003b70:	08003bbd 	.word	0x08003bbd
 8003b74:	08003bc5 	.word	0x08003bc5
 8003b78:	08003bcd 	.word	0x08003bcd
 8003b7c:	08003bd5 	.word	0x08003bd5
 8003b80:	08003bdd 	.word	0x08003bdd
 8003b84:	4b04      	ldr	r3, [pc, #16]	; (8003b98 <Principal_Receive_Config+0x31c>)
 8003b86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b8a:	811a      	strh	r2, [r3, #8]
 8003b8c:	e02d      	b.n	8003bea <Principal_Receive_Config+0x36e>
 8003b8e:	4b02      	ldr	r3, [pc, #8]	; (8003b98 <Principal_Receive_Config+0x31c>)
 8003b90:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003b94:	811a      	strh	r2, [r3, #8]
 8003b96:	e028      	b.n	8003bea <Principal_Receive_Config+0x36e>
 8003b98:	2001273c 	.word	0x2001273c
 8003b9c:	4ba8      	ldr	r3, [pc, #672]	; (8003e40 <Principal_Receive_Config+0x5c4>)
 8003b9e:	22c8      	movs	r2, #200	; 0xc8
 8003ba0:	811a      	strh	r2, [r3, #8]
 8003ba2:	e022      	b.n	8003bea <Principal_Receive_Config+0x36e>
 8003ba4:	4ba6      	ldr	r3, [pc, #664]	; (8003e40 <Principal_Receive_Config+0x5c4>)
 8003ba6:	2264      	movs	r2, #100	; 0x64
 8003ba8:	811a      	strh	r2, [r3, #8]
 8003baa:	e01e      	b.n	8003bea <Principal_Receive_Config+0x36e>
 8003bac:	4ba4      	ldr	r3, [pc, #656]	; (8003e40 <Principal_Receive_Config+0x5c4>)
 8003bae:	2232      	movs	r2, #50	; 0x32
 8003bb0:	811a      	strh	r2, [r3, #8]
 8003bb2:	e01a      	b.n	8003bea <Principal_Receive_Config+0x36e>
 8003bb4:	4ba2      	ldr	r3, [pc, #648]	; (8003e40 <Principal_Receive_Config+0x5c4>)
 8003bb6:	2228      	movs	r2, #40	; 0x28
 8003bb8:	811a      	strh	r2, [r3, #8]
 8003bba:	e016      	b.n	8003bea <Principal_Receive_Config+0x36e>
 8003bbc:	4ba0      	ldr	r3, [pc, #640]	; (8003e40 <Principal_Receive_Config+0x5c4>)
 8003bbe:	2214      	movs	r2, #20
 8003bc0:	811a      	strh	r2, [r3, #8]
 8003bc2:	e012      	b.n	8003bea <Principal_Receive_Config+0x36e>
 8003bc4:	4b9e      	ldr	r3, [pc, #632]	; (8003e40 <Principal_Receive_Config+0x5c4>)
 8003bc6:	220a      	movs	r2, #10
 8003bc8:	811a      	strh	r2, [r3, #8]
 8003bca:	e00e      	b.n	8003bea <Principal_Receive_Config+0x36e>
 8003bcc:	4b9c      	ldr	r3, [pc, #624]	; (8003e40 <Principal_Receive_Config+0x5c4>)
 8003bce:	2205      	movs	r2, #5
 8003bd0:	811a      	strh	r2, [r3, #8]
 8003bd2:	e00a      	b.n	8003bea <Principal_Receive_Config+0x36e>
 8003bd4:	4b9a      	ldr	r3, [pc, #616]	; (8003e40 <Principal_Receive_Config+0x5c4>)
 8003bd6:	2204      	movs	r2, #4
 8003bd8:	811a      	strh	r2, [r3, #8]
 8003bda:	e006      	b.n	8003bea <Principal_Receive_Config+0x36e>
 8003bdc:	4b98      	ldr	r3, [pc, #608]	; (8003e40 <Principal_Receive_Config+0x5c4>)
 8003bde:	2202      	movs	r2, #2
 8003be0:	811a      	strh	r2, [r3, #8]
 8003be2:	e002      	b.n	8003bea <Principal_Receive_Config+0x36e>
 8003be4:	4b96      	ldr	r3, [pc, #600]	; (8003e40 <Principal_Receive_Config+0x5c4>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	811a      	strh	r2, [r3, #8]
 8003bea:	bf00      	nop
			__BUFFER_TO_FREQ(data[6], perMsg[ECU_SAVE]);
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	3306      	adds	r3, #6
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	2b0a      	cmp	r3, #10
 8003bf6:	d847      	bhi.n	8003c88 <Principal_Receive_Config+0x40c>
 8003bf8:	a201      	add	r2, pc, #4	; (adr r2, 8003c00 <Principal_Receive_Config+0x384>)
 8003bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfe:	bf00      	nop
 8003c00:	08003c2d 	.word	0x08003c2d
 8003c04:	08003c37 	.word	0x08003c37
 8003c08:	08003c41 	.word	0x08003c41
 8003c0c:	08003c49 	.word	0x08003c49
 8003c10:	08003c51 	.word	0x08003c51
 8003c14:	08003c59 	.word	0x08003c59
 8003c18:	08003c61 	.word	0x08003c61
 8003c1c:	08003c69 	.word	0x08003c69
 8003c20:	08003c71 	.word	0x08003c71
 8003c24:	08003c79 	.word	0x08003c79
 8003c28:	08003c81 	.word	0x08003c81
 8003c2c:	4b84      	ldr	r3, [pc, #528]	; (8003e40 <Principal_Receive_Config+0x5c4>)
 8003c2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c32:	819a      	strh	r2, [r3, #12]
 8003c34:	e02b      	b.n	8003c8e <Principal_Receive_Config+0x412>
 8003c36:	4b82      	ldr	r3, [pc, #520]	; (8003e40 <Principal_Receive_Config+0x5c4>)
 8003c38:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003c3c:	819a      	strh	r2, [r3, #12]
 8003c3e:	e026      	b.n	8003c8e <Principal_Receive_Config+0x412>
 8003c40:	4b7f      	ldr	r3, [pc, #508]	; (8003e40 <Principal_Receive_Config+0x5c4>)
 8003c42:	22c8      	movs	r2, #200	; 0xc8
 8003c44:	819a      	strh	r2, [r3, #12]
 8003c46:	e022      	b.n	8003c8e <Principal_Receive_Config+0x412>
 8003c48:	4b7d      	ldr	r3, [pc, #500]	; (8003e40 <Principal_Receive_Config+0x5c4>)
 8003c4a:	2264      	movs	r2, #100	; 0x64
 8003c4c:	819a      	strh	r2, [r3, #12]
 8003c4e:	e01e      	b.n	8003c8e <Principal_Receive_Config+0x412>
 8003c50:	4b7b      	ldr	r3, [pc, #492]	; (8003e40 <Principal_Receive_Config+0x5c4>)
 8003c52:	2232      	movs	r2, #50	; 0x32
 8003c54:	819a      	strh	r2, [r3, #12]
 8003c56:	e01a      	b.n	8003c8e <Principal_Receive_Config+0x412>
 8003c58:	4b79      	ldr	r3, [pc, #484]	; (8003e40 <Principal_Receive_Config+0x5c4>)
 8003c5a:	2228      	movs	r2, #40	; 0x28
 8003c5c:	819a      	strh	r2, [r3, #12]
 8003c5e:	e016      	b.n	8003c8e <Principal_Receive_Config+0x412>
 8003c60:	4b77      	ldr	r3, [pc, #476]	; (8003e40 <Principal_Receive_Config+0x5c4>)
 8003c62:	2214      	movs	r2, #20
 8003c64:	819a      	strh	r2, [r3, #12]
 8003c66:	e012      	b.n	8003c8e <Principal_Receive_Config+0x412>
 8003c68:	4b75      	ldr	r3, [pc, #468]	; (8003e40 <Principal_Receive_Config+0x5c4>)
 8003c6a:	220a      	movs	r2, #10
 8003c6c:	819a      	strh	r2, [r3, #12]
 8003c6e:	e00e      	b.n	8003c8e <Principal_Receive_Config+0x412>
 8003c70:	4b73      	ldr	r3, [pc, #460]	; (8003e40 <Principal_Receive_Config+0x5c4>)
 8003c72:	2205      	movs	r2, #5
 8003c74:	819a      	strh	r2, [r3, #12]
 8003c76:	e00a      	b.n	8003c8e <Principal_Receive_Config+0x412>
 8003c78:	4b71      	ldr	r3, [pc, #452]	; (8003e40 <Principal_Receive_Config+0x5c4>)
 8003c7a:	2204      	movs	r2, #4
 8003c7c:	819a      	strh	r2, [r3, #12]
 8003c7e:	e006      	b.n	8003c8e <Principal_Receive_Config+0x412>
 8003c80:	4b6f      	ldr	r3, [pc, #444]	; (8003e40 <Principal_Receive_Config+0x5c4>)
 8003c82:	2202      	movs	r2, #2
 8003c84:	819a      	strh	r2, [r3, #12]
 8003c86:	e002      	b.n	8003c8e <Principal_Receive_Config+0x412>
 8003c88:	4b6d      	ldr	r3, [pc, #436]	; (8003e40 <Principal_Receive_Config+0x5c4>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	819a      	strh	r2, [r3, #12]
 8003c8e:	bf00      	nop
			__BUFFER_TO_FREQ(data[7], perMsg[PDM_SAVE]);
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	3307      	adds	r3, #7
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	3b01      	subs	r3, #1
 8003c98:	2b0a      	cmp	r3, #10
 8003c9a:	d847      	bhi.n	8003d2c <Principal_Receive_Config+0x4b0>
 8003c9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ca4 <Principal_Receive_Config+0x428>)
 8003c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca2:	bf00      	nop
 8003ca4:	08003cd1 	.word	0x08003cd1
 8003ca8:	08003cdb 	.word	0x08003cdb
 8003cac:	08003ce5 	.word	0x08003ce5
 8003cb0:	08003ced 	.word	0x08003ced
 8003cb4:	08003cf5 	.word	0x08003cf5
 8003cb8:	08003cfd 	.word	0x08003cfd
 8003cbc:	08003d05 	.word	0x08003d05
 8003cc0:	08003d0d 	.word	0x08003d0d
 8003cc4:	08003d15 	.word	0x08003d15
 8003cc8:	08003d1d 	.word	0x08003d1d
 8003ccc:	08003d25 	.word	0x08003d25
 8003cd0:	4b5b      	ldr	r3, [pc, #364]	; (8003e40 <Principal_Receive_Config+0x5c4>)
 8003cd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003cd6:	81da      	strh	r2, [r3, #14]
 8003cd8:	e02b      	b.n	8003d32 <Principal_Receive_Config+0x4b6>
 8003cda:	4b59      	ldr	r3, [pc, #356]	; (8003e40 <Principal_Receive_Config+0x5c4>)
 8003cdc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003ce0:	81da      	strh	r2, [r3, #14]
 8003ce2:	e026      	b.n	8003d32 <Principal_Receive_Config+0x4b6>
 8003ce4:	4b56      	ldr	r3, [pc, #344]	; (8003e40 <Principal_Receive_Config+0x5c4>)
 8003ce6:	22c8      	movs	r2, #200	; 0xc8
 8003ce8:	81da      	strh	r2, [r3, #14]
 8003cea:	e022      	b.n	8003d32 <Principal_Receive_Config+0x4b6>
 8003cec:	4b54      	ldr	r3, [pc, #336]	; (8003e40 <Principal_Receive_Config+0x5c4>)
 8003cee:	2264      	movs	r2, #100	; 0x64
 8003cf0:	81da      	strh	r2, [r3, #14]
 8003cf2:	e01e      	b.n	8003d32 <Principal_Receive_Config+0x4b6>
 8003cf4:	4b52      	ldr	r3, [pc, #328]	; (8003e40 <Principal_Receive_Config+0x5c4>)
 8003cf6:	2232      	movs	r2, #50	; 0x32
 8003cf8:	81da      	strh	r2, [r3, #14]
 8003cfa:	e01a      	b.n	8003d32 <Principal_Receive_Config+0x4b6>
 8003cfc:	4b50      	ldr	r3, [pc, #320]	; (8003e40 <Principal_Receive_Config+0x5c4>)
 8003cfe:	2228      	movs	r2, #40	; 0x28
 8003d00:	81da      	strh	r2, [r3, #14]
 8003d02:	e016      	b.n	8003d32 <Principal_Receive_Config+0x4b6>
 8003d04:	4b4e      	ldr	r3, [pc, #312]	; (8003e40 <Principal_Receive_Config+0x5c4>)
 8003d06:	2214      	movs	r2, #20
 8003d08:	81da      	strh	r2, [r3, #14]
 8003d0a:	e012      	b.n	8003d32 <Principal_Receive_Config+0x4b6>
 8003d0c:	4b4c      	ldr	r3, [pc, #304]	; (8003e40 <Principal_Receive_Config+0x5c4>)
 8003d0e:	220a      	movs	r2, #10
 8003d10:	81da      	strh	r2, [r3, #14]
 8003d12:	e00e      	b.n	8003d32 <Principal_Receive_Config+0x4b6>
 8003d14:	4b4a      	ldr	r3, [pc, #296]	; (8003e40 <Principal_Receive_Config+0x5c4>)
 8003d16:	2205      	movs	r2, #5
 8003d18:	81da      	strh	r2, [r3, #14]
 8003d1a:	e00a      	b.n	8003d32 <Principal_Receive_Config+0x4b6>
 8003d1c:	4b48      	ldr	r3, [pc, #288]	; (8003e40 <Principal_Receive_Config+0x5c4>)
 8003d1e:	2204      	movs	r2, #4
 8003d20:	81da      	strh	r2, [r3, #14]
 8003d22:	e006      	b.n	8003d32 <Principal_Receive_Config+0x4b6>
 8003d24:	4b46      	ldr	r3, [pc, #280]	; (8003e40 <Principal_Receive_Config+0x5c4>)
 8003d26:	2202      	movs	r2, #2
 8003d28:	81da      	strh	r2, [r3, #14]
 8003d2a:	e002      	b.n	8003d32 <Principal_Receive_Config+0x4b6>
 8003d2c:	4b44      	ldr	r3, [pc, #272]	; (8003e40 <Principal_Receive_Config+0x5c4>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	81da      	strh	r2, [r3, #14]
 8003d32:	bf00      	nop

			retVal = Save_EEPROM(hi2c);
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 fedb 	bl	8004af0 <Save_EEPROM>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	75fb      	strb	r3, [r7, #23]
			break;
 8003d3e:	e231      	b.n	80041a4 <Principal_Receive_Config+0x928>

		case 1:
			if(length != 7)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b07      	cmp	r3, #7
 8003d44:	f040 8229 	bne.w	800419a <Principal_Receive_Config+0x91e>
				break;

			__BUFFER_TO_FREQ(data[1], perCAN[ANALOG_1_4]);
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	2b0a      	cmp	r3, #10
 8003d52:	d847      	bhi.n	8003de4 <Principal_Receive_Config+0x568>
 8003d54:	a201      	add	r2, pc, #4	; (adr r2, 8003d5c <Principal_Receive_Config+0x4e0>)
 8003d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5a:	bf00      	nop
 8003d5c:	08003d89 	.word	0x08003d89
 8003d60:	08003d93 	.word	0x08003d93
 8003d64:	08003d9d 	.word	0x08003d9d
 8003d68:	08003da5 	.word	0x08003da5
 8003d6c:	08003dad 	.word	0x08003dad
 8003d70:	08003db5 	.word	0x08003db5
 8003d74:	08003dbd 	.word	0x08003dbd
 8003d78:	08003dc5 	.word	0x08003dc5
 8003d7c:	08003dcd 	.word	0x08003dcd
 8003d80:	08003dd5 	.word	0x08003dd5
 8003d84:	08003ddd 	.word	0x08003ddd
 8003d88:	4b2e      	ldr	r3, [pc, #184]	; (8003e44 <Principal_Receive_Config+0x5c8>)
 8003d8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d8e:	801a      	strh	r2, [r3, #0]
 8003d90:	e02b      	b.n	8003dea <Principal_Receive_Config+0x56e>
 8003d92:	4b2c      	ldr	r3, [pc, #176]	; (8003e44 <Principal_Receive_Config+0x5c8>)
 8003d94:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003d98:	801a      	strh	r2, [r3, #0]
 8003d9a:	e026      	b.n	8003dea <Principal_Receive_Config+0x56e>
 8003d9c:	4b29      	ldr	r3, [pc, #164]	; (8003e44 <Principal_Receive_Config+0x5c8>)
 8003d9e:	22c8      	movs	r2, #200	; 0xc8
 8003da0:	801a      	strh	r2, [r3, #0]
 8003da2:	e022      	b.n	8003dea <Principal_Receive_Config+0x56e>
 8003da4:	4b27      	ldr	r3, [pc, #156]	; (8003e44 <Principal_Receive_Config+0x5c8>)
 8003da6:	2264      	movs	r2, #100	; 0x64
 8003da8:	801a      	strh	r2, [r3, #0]
 8003daa:	e01e      	b.n	8003dea <Principal_Receive_Config+0x56e>
 8003dac:	4b25      	ldr	r3, [pc, #148]	; (8003e44 <Principal_Receive_Config+0x5c8>)
 8003dae:	2232      	movs	r2, #50	; 0x32
 8003db0:	801a      	strh	r2, [r3, #0]
 8003db2:	e01a      	b.n	8003dea <Principal_Receive_Config+0x56e>
 8003db4:	4b23      	ldr	r3, [pc, #140]	; (8003e44 <Principal_Receive_Config+0x5c8>)
 8003db6:	2228      	movs	r2, #40	; 0x28
 8003db8:	801a      	strh	r2, [r3, #0]
 8003dba:	e016      	b.n	8003dea <Principal_Receive_Config+0x56e>
 8003dbc:	4b21      	ldr	r3, [pc, #132]	; (8003e44 <Principal_Receive_Config+0x5c8>)
 8003dbe:	2214      	movs	r2, #20
 8003dc0:	801a      	strh	r2, [r3, #0]
 8003dc2:	e012      	b.n	8003dea <Principal_Receive_Config+0x56e>
 8003dc4:	4b1f      	ldr	r3, [pc, #124]	; (8003e44 <Principal_Receive_Config+0x5c8>)
 8003dc6:	220a      	movs	r2, #10
 8003dc8:	801a      	strh	r2, [r3, #0]
 8003dca:	e00e      	b.n	8003dea <Principal_Receive_Config+0x56e>
 8003dcc:	4b1d      	ldr	r3, [pc, #116]	; (8003e44 <Principal_Receive_Config+0x5c8>)
 8003dce:	2205      	movs	r2, #5
 8003dd0:	801a      	strh	r2, [r3, #0]
 8003dd2:	e00a      	b.n	8003dea <Principal_Receive_Config+0x56e>
 8003dd4:	4b1b      	ldr	r3, [pc, #108]	; (8003e44 <Principal_Receive_Config+0x5c8>)
 8003dd6:	2204      	movs	r2, #4
 8003dd8:	801a      	strh	r2, [r3, #0]
 8003dda:	e006      	b.n	8003dea <Principal_Receive_Config+0x56e>
 8003ddc:	4b19      	ldr	r3, [pc, #100]	; (8003e44 <Principal_Receive_Config+0x5c8>)
 8003dde:	2202      	movs	r2, #2
 8003de0:	801a      	strh	r2, [r3, #0]
 8003de2:	e002      	b.n	8003dea <Principal_Receive_Config+0x56e>
 8003de4:	4b17      	ldr	r3, [pc, #92]	; (8003e44 <Principal_Receive_Config+0x5c8>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	801a      	strh	r2, [r3, #0]
 8003dea:	bf00      	nop
			__BUFFER_TO_FREQ(data[2], perCAN[ANALOG_5_8]);
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	3302      	adds	r3, #2
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	3b01      	subs	r3, #1
 8003df4:	2b0a      	cmp	r3, #10
 8003df6:	d84b      	bhi.n	8003e90 <Principal_Receive_Config+0x614>
 8003df8:	a201      	add	r2, pc, #4	; (adr r2, 8003e00 <Principal_Receive_Config+0x584>)
 8003dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfe:	bf00      	nop
 8003e00:	08003e2d 	.word	0x08003e2d
 8003e04:	08003e37 	.word	0x08003e37
 8003e08:	08003e49 	.word	0x08003e49
 8003e0c:	08003e51 	.word	0x08003e51
 8003e10:	08003e59 	.word	0x08003e59
 8003e14:	08003e61 	.word	0x08003e61
 8003e18:	08003e69 	.word	0x08003e69
 8003e1c:	08003e71 	.word	0x08003e71
 8003e20:	08003e79 	.word	0x08003e79
 8003e24:	08003e81 	.word	0x08003e81
 8003e28:	08003e89 	.word	0x08003e89
 8003e2c:	4b05      	ldr	r3, [pc, #20]	; (8003e44 <Principal_Receive_Config+0x5c8>)
 8003e2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e32:	805a      	strh	r2, [r3, #2]
 8003e34:	e02f      	b.n	8003e96 <Principal_Receive_Config+0x61a>
 8003e36:	4b03      	ldr	r3, [pc, #12]	; (8003e44 <Principal_Receive_Config+0x5c8>)
 8003e38:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003e3c:	805a      	strh	r2, [r3, #2]
 8003e3e:	e02a      	b.n	8003e96 <Principal_Receive_Config+0x61a>
 8003e40:	2001273c 	.word	0x2001273c
 8003e44:	20012730 	.word	0x20012730
 8003e48:	4b93      	ldr	r3, [pc, #588]	; (8004098 <Principal_Receive_Config+0x81c>)
 8003e4a:	22c8      	movs	r2, #200	; 0xc8
 8003e4c:	805a      	strh	r2, [r3, #2]
 8003e4e:	e022      	b.n	8003e96 <Principal_Receive_Config+0x61a>
 8003e50:	4b91      	ldr	r3, [pc, #580]	; (8004098 <Principal_Receive_Config+0x81c>)
 8003e52:	2264      	movs	r2, #100	; 0x64
 8003e54:	805a      	strh	r2, [r3, #2]
 8003e56:	e01e      	b.n	8003e96 <Principal_Receive_Config+0x61a>
 8003e58:	4b8f      	ldr	r3, [pc, #572]	; (8004098 <Principal_Receive_Config+0x81c>)
 8003e5a:	2232      	movs	r2, #50	; 0x32
 8003e5c:	805a      	strh	r2, [r3, #2]
 8003e5e:	e01a      	b.n	8003e96 <Principal_Receive_Config+0x61a>
 8003e60:	4b8d      	ldr	r3, [pc, #564]	; (8004098 <Principal_Receive_Config+0x81c>)
 8003e62:	2228      	movs	r2, #40	; 0x28
 8003e64:	805a      	strh	r2, [r3, #2]
 8003e66:	e016      	b.n	8003e96 <Principal_Receive_Config+0x61a>
 8003e68:	4b8b      	ldr	r3, [pc, #556]	; (8004098 <Principal_Receive_Config+0x81c>)
 8003e6a:	2214      	movs	r2, #20
 8003e6c:	805a      	strh	r2, [r3, #2]
 8003e6e:	e012      	b.n	8003e96 <Principal_Receive_Config+0x61a>
 8003e70:	4b89      	ldr	r3, [pc, #548]	; (8004098 <Principal_Receive_Config+0x81c>)
 8003e72:	220a      	movs	r2, #10
 8003e74:	805a      	strh	r2, [r3, #2]
 8003e76:	e00e      	b.n	8003e96 <Principal_Receive_Config+0x61a>
 8003e78:	4b87      	ldr	r3, [pc, #540]	; (8004098 <Principal_Receive_Config+0x81c>)
 8003e7a:	2205      	movs	r2, #5
 8003e7c:	805a      	strh	r2, [r3, #2]
 8003e7e:	e00a      	b.n	8003e96 <Principal_Receive_Config+0x61a>
 8003e80:	4b85      	ldr	r3, [pc, #532]	; (8004098 <Principal_Receive_Config+0x81c>)
 8003e82:	2204      	movs	r2, #4
 8003e84:	805a      	strh	r2, [r3, #2]
 8003e86:	e006      	b.n	8003e96 <Principal_Receive_Config+0x61a>
 8003e88:	4b83      	ldr	r3, [pc, #524]	; (8004098 <Principal_Receive_Config+0x81c>)
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	805a      	strh	r2, [r3, #2]
 8003e8e:	e002      	b.n	8003e96 <Principal_Receive_Config+0x61a>
 8003e90:	4b81      	ldr	r3, [pc, #516]	; (8004098 <Principal_Receive_Config+0x81c>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	805a      	strh	r2, [r3, #2]
 8003e96:	bf00      	nop
			__BUFFER_TO_FREQ(data[3], perCAN[ANALOG_9_12]);
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	3303      	adds	r3, #3
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	2b0a      	cmp	r3, #10
 8003ea2:	d847      	bhi.n	8003f34 <Principal_Receive_Config+0x6b8>
 8003ea4:	a201      	add	r2, pc, #4	; (adr r2, 8003eac <Principal_Receive_Config+0x630>)
 8003ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eaa:	bf00      	nop
 8003eac:	08003ed9 	.word	0x08003ed9
 8003eb0:	08003ee3 	.word	0x08003ee3
 8003eb4:	08003eed 	.word	0x08003eed
 8003eb8:	08003ef5 	.word	0x08003ef5
 8003ebc:	08003efd 	.word	0x08003efd
 8003ec0:	08003f05 	.word	0x08003f05
 8003ec4:	08003f0d 	.word	0x08003f0d
 8003ec8:	08003f15 	.word	0x08003f15
 8003ecc:	08003f1d 	.word	0x08003f1d
 8003ed0:	08003f25 	.word	0x08003f25
 8003ed4:	08003f2d 	.word	0x08003f2d
 8003ed8:	4b6f      	ldr	r3, [pc, #444]	; (8004098 <Principal_Receive_Config+0x81c>)
 8003eda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ede:	809a      	strh	r2, [r3, #4]
 8003ee0:	e02b      	b.n	8003f3a <Principal_Receive_Config+0x6be>
 8003ee2:	4b6d      	ldr	r3, [pc, #436]	; (8004098 <Principal_Receive_Config+0x81c>)
 8003ee4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003ee8:	809a      	strh	r2, [r3, #4]
 8003eea:	e026      	b.n	8003f3a <Principal_Receive_Config+0x6be>
 8003eec:	4b6a      	ldr	r3, [pc, #424]	; (8004098 <Principal_Receive_Config+0x81c>)
 8003eee:	22c8      	movs	r2, #200	; 0xc8
 8003ef0:	809a      	strh	r2, [r3, #4]
 8003ef2:	e022      	b.n	8003f3a <Principal_Receive_Config+0x6be>
 8003ef4:	4b68      	ldr	r3, [pc, #416]	; (8004098 <Principal_Receive_Config+0x81c>)
 8003ef6:	2264      	movs	r2, #100	; 0x64
 8003ef8:	809a      	strh	r2, [r3, #4]
 8003efa:	e01e      	b.n	8003f3a <Principal_Receive_Config+0x6be>
 8003efc:	4b66      	ldr	r3, [pc, #408]	; (8004098 <Principal_Receive_Config+0x81c>)
 8003efe:	2232      	movs	r2, #50	; 0x32
 8003f00:	809a      	strh	r2, [r3, #4]
 8003f02:	e01a      	b.n	8003f3a <Principal_Receive_Config+0x6be>
 8003f04:	4b64      	ldr	r3, [pc, #400]	; (8004098 <Principal_Receive_Config+0x81c>)
 8003f06:	2228      	movs	r2, #40	; 0x28
 8003f08:	809a      	strh	r2, [r3, #4]
 8003f0a:	e016      	b.n	8003f3a <Principal_Receive_Config+0x6be>
 8003f0c:	4b62      	ldr	r3, [pc, #392]	; (8004098 <Principal_Receive_Config+0x81c>)
 8003f0e:	2214      	movs	r2, #20
 8003f10:	809a      	strh	r2, [r3, #4]
 8003f12:	e012      	b.n	8003f3a <Principal_Receive_Config+0x6be>
 8003f14:	4b60      	ldr	r3, [pc, #384]	; (8004098 <Principal_Receive_Config+0x81c>)
 8003f16:	220a      	movs	r2, #10
 8003f18:	809a      	strh	r2, [r3, #4]
 8003f1a:	e00e      	b.n	8003f3a <Principal_Receive_Config+0x6be>
 8003f1c:	4b5e      	ldr	r3, [pc, #376]	; (8004098 <Principal_Receive_Config+0x81c>)
 8003f1e:	2205      	movs	r2, #5
 8003f20:	809a      	strh	r2, [r3, #4]
 8003f22:	e00a      	b.n	8003f3a <Principal_Receive_Config+0x6be>
 8003f24:	4b5c      	ldr	r3, [pc, #368]	; (8004098 <Principal_Receive_Config+0x81c>)
 8003f26:	2204      	movs	r2, #4
 8003f28:	809a      	strh	r2, [r3, #4]
 8003f2a:	e006      	b.n	8003f3a <Principal_Receive_Config+0x6be>
 8003f2c:	4b5a      	ldr	r3, [pc, #360]	; (8004098 <Principal_Receive_Config+0x81c>)
 8003f2e:	2202      	movs	r2, #2
 8003f30:	809a      	strh	r2, [r3, #4]
 8003f32:	e002      	b.n	8003f3a <Principal_Receive_Config+0x6be>
 8003f34:	4b58      	ldr	r3, [pc, #352]	; (8004098 <Principal_Receive_Config+0x81c>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	809a      	strh	r2, [r3, #4]
 8003f3a:	bf00      	nop
			__BUFFER_TO_FREQ(data[4], perCAN[RTC_MSG]);
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	3304      	adds	r3, #4
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	3b01      	subs	r3, #1
 8003f44:	2b0a      	cmp	r3, #10
 8003f46:	d847      	bhi.n	8003fd8 <Principal_Receive_Config+0x75c>
 8003f48:	a201      	add	r2, pc, #4	; (adr r2, 8003f50 <Principal_Receive_Config+0x6d4>)
 8003f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4e:	bf00      	nop
 8003f50:	08003f7d 	.word	0x08003f7d
 8003f54:	08003f87 	.word	0x08003f87
 8003f58:	08003f91 	.word	0x08003f91
 8003f5c:	08003f99 	.word	0x08003f99
 8003f60:	08003fa1 	.word	0x08003fa1
 8003f64:	08003fa9 	.word	0x08003fa9
 8003f68:	08003fb1 	.word	0x08003fb1
 8003f6c:	08003fb9 	.word	0x08003fb9
 8003f70:	08003fc1 	.word	0x08003fc1
 8003f74:	08003fc9 	.word	0x08003fc9
 8003f78:	08003fd1 	.word	0x08003fd1
 8003f7c:	4b46      	ldr	r3, [pc, #280]	; (8004098 <Principal_Receive_Config+0x81c>)
 8003f7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f82:	80da      	strh	r2, [r3, #6]
 8003f84:	e02b      	b.n	8003fde <Principal_Receive_Config+0x762>
 8003f86:	4b44      	ldr	r3, [pc, #272]	; (8004098 <Principal_Receive_Config+0x81c>)
 8003f88:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003f8c:	80da      	strh	r2, [r3, #6]
 8003f8e:	e026      	b.n	8003fde <Principal_Receive_Config+0x762>
 8003f90:	4b41      	ldr	r3, [pc, #260]	; (8004098 <Principal_Receive_Config+0x81c>)
 8003f92:	22c8      	movs	r2, #200	; 0xc8
 8003f94:	80da      	strh	r2, [r3, #6]
 8003f96:	e022      	b.n	8003fde <Principal_Receive_Config+0x762>
 8003f98:	4b3f      	ldr	r3, [pc, #252]	; (8004098 <Principal_Receive_Config+0x81c>)
 8003f9a:	2264      	movs	r2, #100	; 0x64
 8003f9c:	80da      	strh	r2, [r3, #6]
 8003f9e:	e01e      	b.n	8003fde <Principal_Receive_Config+0x762>
 8003fa0:	4b3d      	ldr	r3, [pc, #244]	; (8004098 <Principal_Receive_Config+0x81c>)
 8003fa2:	2232      	movs	r2, #50	; 0x32
 8003fa4:	80da      	strh	r2, [r3, #6]
 8003fa6:	e01a      	b.n	8003fde <Principal_Receive_Config+0x762>
 8003fa8:	4b3b      	ldr	r3, [pc, #236]	; (8004098 <Principal_Receive_Config+0x81c>)
 8003faa:	2228      	movs	r2, #40	; 0x28
 8003fac:	80da      	strh	r2, [r3, #6]
 8003fae:	e016      	b.n	8003fde <Principal_Receive_Config+0x762>
 8003fb0:	4b39      	ldr	r3, [pc, #228]	; (8004098 <Principal_Receive_Config+0x81c>)
 8003fb2:	2214      	movs	r2, #20
 8003fb4:	80da      	strh	r2, [r3, #6]
 8003fb6:	e012      	b.n	8003fde <Principal_Receive_Config+0x762>
 8003fb8:	4b37      	ldr	r3, [pc, #220]	; (8004098 <Principal_Receive_Config+0x81c>)
 8003fba:	220a      	movs	r2, #10
 8003fbc:	80da      	strh	r2, [r3, #6]
 8003fbe:	e00e      	b.n	8003fde <Principal_Receive_Config+0x762>
 8003fc0:	4b35      	ldr	r3, [pc, #212]	; (8004098 <Principal_Receive_Config+0x81c>)
 8003fc2:	2205      	movs	r2, #5
 8003fc4:	80da      	strh	r2, [r3, #6]
 8003fc6:	e00a      	b.n	8003fde <Principal_Receive_Config+0x762>
 8003fc8:	4b33      	ldr	r3, [pc, #204]	; (8004098 <Principal_Receive_Config+0x81c>)
 8003fca:	2204      	movs	r2, #4
 8003fcc:	80da      	strh	r2, [r3, #6]
 8003fce:	e006      	b.n	8003fde <Principal_Receive_Config+0x762>
 8003fd0:	4b31      	ldr	r3, [pc, #196]	; (8004098 <Principal_Receive_Config+0x81c>)
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	80da      	strh	r2, [r3, #6]
 8003fd6:	e002      	b.n	8003fde <Principal_Receive_Config+0x762>
 8003fd8:	4b2f      	ldr	r3, [pc, #188]	; (8004098 <Principal_Receive_Config+0x81c>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	80da      	strh	r2, [r3, #6]
 8003fde:	bf00      	nop
			__BUFFER_TO_FREQ(data[5], perCAN[VERIFY_MSG]);
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	3305      	adds	r3, #5
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	2b0a      	cmp	r3, #10
 8003fea:	d847      	bhi.n	800407c <Principal_Receive_Config+0x800>
 8003fec:	a201      	add	r2, pc, #4	; (adr r2, 8003ff4 <Principal_Receive_Config+0x778>)
 8003fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff2:	bf00      	nop
 8003ff4:	08004021 	.word	0x08004021
 8003ff8:	0800402b 	.word	0x0800402b
 8003ffc:	08004035 	.word	0x08004035
 8004000:	0800403d 	.word	0x0800403d
 8004004:	08004045 	.word	0x08004045
 8004008:	0800404d 	.word	0x0800404d
 800400c:	08004055 	.word	0x08004055
 8004010:	0800405d 	.word	0x0800405d
 8004014:	08004065 	.word	0x08004065
 8004018:	0800406d 	.word	0x0800406d
 800401c:	08004075 	.word	0x08004075
 8004020:	4b1d      	ldr	r3, [pc, #116]	; (8004098 <Principal_Receive_Config+0x81c>)
 8004022:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004026:	811a      	strh	r2, [r3, #8]
 8004028:	e02b      	b.n	8004082 <Principal_Receive_Config+0x806>
 800402a:	4b1b      	ldr	r3, [pc, #108]	; (8004098 <Principal_Receive_Config+0x81c>)
 800402c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004030:	811a      	strh	r2, [r3, #8]
 8004032:	e026      	b.n	8004082 <Principal_Receive_Config+0x806>
 8004034:	4b18      	ldr	r3, [pc, #96]	; (8004098 <Principal_Receive_Config+0x81c>)
 8004036:	22c8      	movs	r2, #200	; 0xc8
 8004038:	811a      	strh	r2, [r3, #8]
 800403a:	e022      	b.n	8004082 <Principal_Receive_Config+0x806>
 800403c:	4b16      	ldr	r3, [pc, #88]	; (8004098 <Principal_Receive_Config+0x81c>)
 800403e:	2264      	movs	r2, #100	; 0x64
 8004040:	811a      	strh	r2, [r3, #8]
 8004042:	e01e      	b.n	8004082 <Principal_Receive_Config+0x806>
 8004044:	4b14      	ldr	r3, [pc, #80]	; (8004098 <Principal_Receive_Config+0x81c>)
 8004046:	2232      	movs	r2, #50	; 0x32
 8004048:	811a      	strh	r2, [r3, #8]
 800404a:	e01a      	b.n	8004082 <Principal_Receive_Config+0x806>
 800404c:	4b12      	ldr	r3, [pc, #72]	; (8004098 <Principal_Receive_Config+0x81c>)
 800404e:	2228      	movs	r2, #40	; 0x28
 8004050:	811a      	strh	r2, [r3, #8]
 8004052:	e016      	b.n	8004082 <Principal_Receive_Config+0x806>
 8004054:	4b10      	ldr	r3, [pc, #64]	; (8004098 <Principal_Receive_Config+0x81c>)
 8004056:	2214      	movs	r2, #20
 8004058:	811a      	strh	r2, [r3, #8]
 800405a:	e012      	b.n	8004082 <Principal_Receive_Config+0x806>
 800405c:	4b0e      	ldr	r3, [pc, #56]	; (8004098 <Principal_Receive_Config+0x81c>)
 800405e:	220a      	movs	r2, #10
 8004060:	811a      	strh	r2, [r3, #8]
 8004062:	e00e      	b.n	8004082 <Principal_Receive_Config+0x806>
 8004064:	4b0c      	ldr	r3, [pc, #48]	; (8004098 <Principal_Receive_Config+0x81c>)
 8004066:	2205      	movs	r2, #5
 8004068:	811a      	strh	r2, [r3, #8]
 800406a:	e00a      	b.n	8004082 <Principal_Receive_Config+0x806>
 800406c:	4b0a      	ldr	r3, [pc, #40]	; (8004098 <Principal_Receive_Config+0x81c>)
 800406e:	2204      	movs	r2, #4
 8004070:	811a      	strh	r2, [r3, #8]
 8004072:	e006      	b.n	8004082 <Principal_Receive_Config+0x806>
 8004074:	4b08      	ldr	r3, [pc, #32]	; (8004098 <Principal_Receive_Config+0x81c>)
 8004076:	2202      	movs	r2, #2
 8004078:	811a      	strh	r2, [r3, #8]
 800407a:	e002      	b.n	8004082 <Principal_Receive_Config+0x806>
 800407c:	4b06      	ldr	r3, [pc, #24]	; (8004098 <Principal_Receive_Config+0x81c>)
 800407e:	2200      	movs	r2, #0
 8004080:	811a      	strh	r2, [r3, #8]
 8004082:	bf00      	nop
			inputConfig = data[6];
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	799a      	ldrb	r2, [r3, #6]
 8004088:	4b04      	ldr	r3, [pc, #16]	; (800409c <Principal_Receive_Config+0x820>)
 800408a:	701a      	strb	r2, [r3, #0]

			retVal = Save_EEPROM(hi2c);
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f000 fd2f 	bl	8004af0 <Save_EEPROM>
 8004092:	4603      	mov	r3, r0
 8004094:	75fb      	strb	r3, [r7, #23]
			break;
 8004096:	e085      	b.n	80041a4 <Principal_Receive_Config+0x928>
 8004098:	20012730 	.word	0x20012730
 800409c:	20012714 	.word	0x20012714

		case 2:
			if(length != 7)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b07      	cmp	r3, #7
 80040a4:	d17b      	bne.n	800419e <Principal_Receive_Config+0x922>
				break;

			thresholdBeacon  = data[1] << 8;
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	3301      	adds	r3, #1
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	021b      	lsls	r3, r3, #8
 80040ae:	b21a      	sxth	r2, r3
 80040b0:	4b3f      	ldr	r3, [pc, #252]	; (80041b0 <Principal_Receive_Config+0x934>)
 80040b2:	801a      	strh	r2, [r3, #0]
			thresholdBeacon |= data[2] & 0xff;
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	3302      	adds	r3, #2
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	b21a      	sxth	r2, r3
 80040bc:	4b3c      	ldr	r3, [pc, #240]	; (80041b0 <Principal_Receive_Config+0x934>)
 80040be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	b21a      	sxth	r2, r3
 80040c6:	4b3a      	ldr	r3, [pc, #232]	; (80041b0 <Principal_Receive_Config+0x934>)
 80040c8:	801a      	strh	r2, [r3, #0]
			thresholdRPM	 = data[3] << 8;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	3303      	adds	r3, #3
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	021b      	lsls	r3, r3, #8
 80040d2:	b21a      	sxth	r2, r3
 80040d4:	4b37      	ldr	r3, [pc, #220]	; (80041b4 <Principal_Receive_Config+0x938>)
 80040d6:	801a      	strh	r2, [r3, #0]
			thresholdRPM	|= data[4] & 0xff;
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	3304      	adds	r3, #4
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	b21a      	sxth	r2, r3
 80040e0:	4b34      	ldr	r3, [pc, #208]	; (80041b4 <Principal_Receive_Config+0x938>)
 80040e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	b21a      	sxth	r2, r3
 80040ea:	4b32      	ldr	r3, [pc, #200]	; (80041b4 <Principal_Receive_Config+0x938>)
 80040ec:	801a      	strh	r2, [r3, #0]
			thresholdSpeed	 = data[5] << 8;
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	3305      	adds	r3, #5
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	021b      	lsls	r3, r3, #8
 80040f6:	b21a      	sxth	r2, r3
 80040f8:	4b2f      	ldr	r3, [pc, #188]	; (80041b8 <Principal_Receive_Config+0x93c>)
 80040fa:	801a      	strh	r2, [r3, #0]
			thresholdSpeed	|= data[6] & 0xff;
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	3306      	adds	r3, #6
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	b21a      	sxth	r2, r3
 8004104:	4b2c      	ldr	r3, [pc, #176]	; (80041b8 <Principal_Receive_Config+0x93c>)
 8004106:	f9b3 3000 	ldrsh.w	r3, [r3]
 800410a:	4313      	orrs	r3, r2
 800410c:	b21a      	sxth	r2, r3
 800410e:	4b2a      	ldr	r3, [pc, #168]	; (80041b8 <Principal_Receive_Config+0x93c>)
 8004110:	801a      	strh	r2, [r3, #0]

			retVal = Save_EEPROM(hi2c);
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 fcec 	bl	8004af0 <Save_EEPROM>
 8004118:	4603      	mov	r3, r0
 800411a:	75fb      	strb	r3, [r7, #23]
			break;
 800411c:	e042      	b.n	80041a4 <Principal_Receive_Config+0x928>

		case 3:
			if(length != 7)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b07      	cmp	r3, #7
 8004122:	d13e      	bne.n	80041a2 <Principal_Receive_Config+0x926>
				break;

			rtcDate.Year	= data[1];
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	785a      	ldrb	r2, [r3, #1]
 8004128:	4b24      	ldr	r3, [pc, #144]	; (80041bc <Principal_Receive_Config+0x940>)
 800412a:	70da      	strb	r2, [r3, #3]
			rtcDate.Month	= data[2];
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	789a      	ldrb	r2, [r3, #2]
 8004130:	4b22      	ldr	r3, [pc, #136]	; (80041bc <Principal_Receive_Config+0x940>)
 8004132:	705a      	strb	r2, [r3, #1]
			rtcDate.Date	= data[3];
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	78da      	ldrb	r2, [r3, #3]
 8004138:	4b20      	ldr	r3, [pc, #128]	; (80041bc <Principal_Receive_Config+0x940>)
 800413a:	709a      	strb	r2, [r3, #2]
			rtcTime.Hours	= data[4];
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	791a      	ldrb	r2, [r3, #4]
 8004140:	4b1f      	ldr	r3, [pc, #124]	; (80041c0 <Principal_Receive_Config+0x944>)
 8004142:	701a      	strb	r2, [r3, #0]
			rtcTime.Minutes = data[5];
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	795a      	ldrb	r2, [r3, #5]
 8004148:	4b1d      	ldr	r3, [pc, #116]	; (80041c0 <Principal_Receive_Config+0x944>)
 800414a:	705a      	strb	r2, [r3, #1]
			rtcTime.Seconds = data[6];
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	799a      	ldrb	r2, [r3, #6]
 8004150:	4b1b      	ldr	r3, [pc, #108]	; (80041c0 <Principal_Receive_Config+0x944>)
 8004152:	709a      	strb	r2, [r3, #2]

			if((HAL_RTC_SetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN) == HAL_OK)
 8004154:	2200      	movs	r2, #0
 8004156:	4919      	ldr	r1, [pc, #100]	; (80041bc <Principal_Receive_Config+0x940>)
 8004158:	481a      	ldr	r0, [pc, #104]	; (80041c4 <Principal_Receive_Config+0x948>)
 800415a:	f008 fd7d 	bl	800cc58 <HAL_RTC_SetDate>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d113      	bne.n	800418c <Principal_Receive_Config+0x910>
				&& (HAL_RTC_SetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN) == HAL_OK))
 8004164:	2200      	movs	r2, #0
 8004166:	4916      	ldr	r1, [pc, #88]	; (80041c0 <Principal_Receive_Config+0x944>)
 8004168:	4816      	ldr	r0, [pc, #88]	; (80041c4 <Principal_Receive_Config+0x948>)
 800416a:	f008 fc7d 	bl	800ca68 <HAL_RTC_SetTime>
 800416e:	4603      	mov	r3, r0
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10b      	bne.n	800418c <Principal_Receive_Config+0x910>
			{
				HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, RTC_STORE_DATA);
 8004174:	f24e 325c 	movw	r2, #58204	; 0xe35c
 8004178:	2101      	movs	r1, #1
 800417a:	4812      	ldr	r0, [pc, #72]	; (80041c4 <Principal_Receive_Config+0x948>)
 800417c:	f008 fefc 	bl	800cf78 <HAL_RTCEx_BKUPWrite>
				flagRTC = RTC_OK;
 8004180:	4b11      	ldr	r3, [pc, #68]	; (80041c8 <Principal_Receive_Config+0x94c>)
 8004182:	2200      	movs	r2, #0
 8004184:	701a      	strb	r2, [r3, #0]
				retVal = HAL_OK;
 8004186:	2300      	movs	r3, #0
 8004188:	75fb      	strb	r3, [r7, #23]
			}
			else
				retVal = HAL_ERROR;

			break;
 800418a:	e00b      	b.n	80041a4 <Principal_Receive_Config+0x928>
				retVal = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	75fb      	strb	r3, [r7, #23]
			break;
 8004190:	e008      	b.n	80041a4 <Principal_Receive_Config+0x928>

		default:
			break;
 8004192:	bf00      	nop
 8004194:	e006      	b.n	80041a4 <Principal_Receive_Config+0x928>
				break;
 8004196:	bf00      	nop
 8004198:	e004      	b.n	80041a4 <Principal_Receive_Config+0x928>
				break;
 800419a:	bf00      	nop
 800419c:	e002      	b.n	80041a4 <Principal_Receive_Config+0x928>
				break;
 800419e:	bf00      	nop
 80041a0:	e000      	b.n	80041a4 <Principal_Receive_Config+0x928>
				break;
 80041a2:	bf00      	nop
	}

	return retVal;
 80041a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	2001063a 	.word	0x2001063a
 80041b4:	2001063c 	.word	0x2001063c
 80041b8:	2001063e 	.word	0x2001063e
 80041bc:	20012718 	.word	0x20012718
 80041c0:	2001271c 	.word	0x2001271c
 80041c4:	2000038c 	.word	0x2000038c
 80041c8:	20012713 	.word	0x20012713

080041cc <Principal_Hard_Code_Config>:

__weak void Principal_Hard_Code_Config(){
 80041cc:	b480      	push	{r7}
 80041ce:	af00      	add	r7, sp, #0
	perMsg[ANALOG_1_4] = MSG_FREQ_100HZ;
 80041d0:	4b1f      	ldr	r3, [pc, #124]	; (8004250 <Principal_Hard_Code_Config+0x84>)
 80041d2:	220a      	movs	r2, #10
 80041d4:	801a      	strh	r2, [r3, #0]
	perMsg[ANALOG_5_8] = MSG_FREQ_250HZ;
 80041d6:	4b1e      	ldr	r3, [pc, #120]	; (8004250 <Principal_Hard_Code_Config+0x84>)
 80041d8:	2204      	movs	r2, #4
 80041da:	805a      	strh	r2, [r3, #2]
	perMsg[ANALOG_9_12] = MSG_DISABLED;
 80041dc:	4b1c      	ldr	r3, [pc, #112]	; (8004250 <Principal_Hard_Code_Config+0x84>)
 80041de:	2200      	movs	r2, #0
 80041e0:	809a      	strh	r2, [r3, #4]
	perMsg[RTC_MSG] = MSG_FREQ_2HZ;
 80041e2:	4b1b      	ldr	r3, [pc, #108]	; (8004250 <Principal_Hard_Code_Config+0x84>)
 80041e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80041e8:	80da      	strh	r2, [r3, #6]
	perMsg[VERIFY_MSG] = MSG_FREQ_5HZ;
 80041ea:	4b19      	ldr	r3, [pc, #100]	; (8004250 <Principal_Hard_Code_Config+0x84>)
 80041ec:	22c8      	movs	r2, #200	; 0xc8
 80041ee:	811a      	strh	r2, [r3, #8]
	perMsg[BEACON_MSG] = MSG_FREQ_10HZ;
 80041f0:	4b17      	ldr	r3, [pc, #92]	; (8004250 <Principal_Hard_Code_Config+0x84>)
 80041f2:	2264      	movs	r2, #100	; 0x64
 80041f4:	815a      	strh	r2, [r3, #10]
	perMsg[ECU_SAVE] = MSG_FREQ_100HZ;
 80041f6:	4b16      	ldr	r3, [pc, #88]	; (8004250 <Principal_Hard_Code_Config+0x84>)
 80041f8:	220a      	movs	r2, #10
 80041fa:	819a      	strh	r2, [r3, #12]
	perMsg[PDM_SAVE] = MSG_FREQ_100HZ;
 80041fc:	4b14      	ldr	r3, [pc, #80]	; (8004250 <Principal_Hard_Code_Config+0x84>)
 80041fe:	220a      	movs	r2, #10
 8004200:	81da      	strh	r2, [r3, #14]

	perCAN[ANALOG_1_4] = MSG_FREQ_10HZ;
 8004202:	4b14      	ldr	r3, [pc, #80]	; (8004254 <Principal_Hard_Code_Config+0x88>)
 8004204:	2264      	movs	r2, #100	; 0x64
 8004206:	801a      	strh	r2, [r3, #0]
	perCAN[ANALOG_5_8] = MSG_FREQ_10HZ;
 8004208:	4b12      	ldr	r3, [pc, #72]	; (8004254 <Principal_Hard_Code_Config+0x88>)
 800420a:	2264      	movs	r2, #100	; 0x64
 800420c:	805a      	strh	r2, [r3, #2]
	perCAN[ANALOG_9_12] = MSG_DISABLED;
 800420e:	4b11      	ldr	r3, [pc, #68]	; (8004254 <Principal_Hard_Code_Config+0x88>)
 8004210:	2200      	movs	r2, #0
 8004212:	809a      	strh	r2, [r3, #4]
	perCAN[RTC_MSG] = MSG_FREQ_2HZ;
 8004214:	4b0f      	ldr	r3, [pc, #60]	; (8004254 <Principal_Hard_Code_Config+0x88>)
 8004216:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800421a:	80da      	strh	r2, [r3, #6]
	perCAN[VERIFY_MSG] = MSG_FREQ_5HZ;
 800421c:	4b0d      	ldr	r3, [pc, #52]	; (8004254 <Principal_Hard_Code_Config+0x88>)
 800421e:	22c8      	movs	r2, #200	; 0xc8
 8004220:	811a      	strh	r2, [r3, #8]
	perCAN[BEACON_MSG] = MSG_FREQ_5HZ;
 8004222:	4b0c      	ldr	r3, [pc, #48]	; (8004254 <Principal_Hard_Code_Config+0x88>)
 8004224:	22c8      	movs	r2, #200	; 0xc8
 8004226:	815a      	strh	r2, [r3, #10]

	inputConfig = INPUT_BEACON_PIN_0 | INPUT_DATALOGGER_PIN_1 | INPUT_BEACON_FALLING_EDGE | INPUT_DATALOGGER_FALLING_EDGE;
 8004228:	4b0b      	ldr	r3, [pc, #44]	; (8004258 <Principal_Hard_Code_Config+0x8c>)
 800422a:	2202      	movs	r2, #2
 800422c:	701a      	strb	r2, [r3, #0]

	thresholdBeacon = 1000;
 800422e:	4b0b      	ldr	r3, [pc, #44]	; (800425c <Principal_Hard_Code_Config+0x90>)
 8004230:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004234:	801a      	strh	r2, [r3, #0]
	thresholdRPM = 5000;
 8004236:	4b0a      	ldr	r3, [pc, #40]	; (8004260 <Principal_Hard_Code_Config+0x94>)
 8004238:	f241 3288 	movw	r2, #5000	; 0x1388
 800423c:	801a      	strh	r2, [r3, #0]
	thresholdSpeed = 1;
 800423e:	4b09      	ldr	r3, [pc, #36]	; (8004264 <Principal_Hard_Code_Config+0x98>)
 8004240:	2201      	movs	r2, #1
 8004242:	801a      	strh	r2, [r3, #0]

//	Save_EEPROM(&hi2c1);
}
 8004244:	bf00      	nop
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	2001273c 	.word	0x2001273c
 8004254:	20012730 	.word	0x20012730
 8004258:	20012714 	.word	0x20012714
 800425c:	2001063a 	.word	0x2001063a
 8004260:	2001063c 	.word	0x2001063c
 8004264:	2001063e 	.word	0x2001063e

08004268 <Load_EEPROM>:

static HAL_StatusTypeDef Load_EEPROM(I2C_HandleTypeDef* hi2c)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b08a      	sub	sp, #40	; 0x28
 800426c:	af04      	add	r7, sp, #16
 800426e:	6078      	str	r0, [r7, #4]
	uint8_t aux = 0;
 8004270:	2300      	movs	r3, #0
 8004272:	75fb      	strb	r3, [r7, #23]
	uint8_t buffer[EEPROM_BUFFER_SIZE];
	HAL_StatusTypeDef retVal;

	retVal = HAL_I2C_Mem_Read(hi2c, 0xA0, 0x00, 1, buffer, EEPROM_BUFFER_SIZE, 5);
 8004274:	2305      	movs	r3, #5
 8004276:	9302      	str	r3, [sp, #8]
 8004278:	230d      	movs	r3, #13
 800427a:	9301      	str	r3, [sp, #4]
 800427c:	f107 0308 	add.w	r3, r7, #8
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	2301      	movs	r3, #1
 8004284:	2200      	movs	r2, #0
 8004286:	21a0      	movs	r1, #160	; 0xa0
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f005 f95f 	bl	800954c <HAL_I2C_Mem_Read>
 800428e:	4603      	mov	r3, r0
 8004290:	75bb      	strb	r3, [r7, #22]

	if(retVal != HAL_OK)
 8004292:	7dbb      	ldrb	r3, [r7, #22]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d002      	beq.n	800429e <Load_EEPROM+0x36>
		return retVal;
 8004298:	7dbb      	ldrb	r3, [r7, #22]
 800429a:	f000 bc1b 	b.w	8004ad4 <Load_EEPROM+0x86c>

	aux = buffer[0] & 0x0f;
 800429e:	7a3b      	ldrb	r3, [r7, #8]
 80042a0:	f003 030f 	and.w	r3, r3, #15
 80042a4:	75fb      	strb	r3, [r7, #23]
	__BUFFER_TO_FREQ(aux, perMsg[ANALOG_1_4]);
 80042a6:	7dfb      	ldrb	r3, [r7, #23]
 80042a8:	3b01      	subs	r3, #1
 80042aa:	2b0a      	cmp	r3, #10
 80042ac:	d846      	bhi.n	800433c <Load_EEPROM+0xd4>
 80042ae:	a201      	add	r2, pc, #4	; (adr r2, 80042b4 <Load_EEPROM+0x4c>)
 80042b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b4:	080042e1 	.word	0x080042e1
 80042b8:	080042eb 	.word	0x080042eb
 80042bc:	080042f5 	.word	0x080042f5
 80042c0:	080042fd 	.word	0x080042fd
 80042c4:	08004305 	.word	0x08004305
 80042c8:	0800430d 	.word	0x0800430d
 80042cc:	08004315 	.word	0x08004315
 80042d0:	0800431d 	.word	0x0800431d
 80042d4:	08004325 	.word	0x08004325
 80042d8:	0800432d 	.word	0x0800432d
 80042dc:	08004335 	.word	0x08004335
 80042e0:	4ba8      	ldr	r3, [pc, #672]	; (8004584 <Load_EEPROM+0x31c>)
 80042e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80042e6:	801a      	strh	r2, [r3, #0]
 80042e8:	e02b      	b.n	8004342 <Load_EEPROM+0xda>
 80042ea:	4ba6      	ldr	r3, [pc, #664]	; (8004584 <Load_EEPROM+0x31c>)
 80042ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80042f0:	801a      	strh	r2, [r3, #0]
 80042f2:	e026      	b.n	8004342 <Load_EEPROM+0xda>
 80042f4:	4ba3      	ldr	r3, [pc, #652]	; (8004584 <Load_EEPROM+0x31c>)
 80042f6:	22c8      	movs	r2, #200	; 0xc8
 80042f8:	801a      	strh	r2, [r3, #0]
 80042fa:	e022      	b.n	8004342 <Load_EEPROM+0xda>
 80042fc:	4ba1      	ldr	r3, [pc, #644]	; (8004584 <Load_EEPROM+0x31c>)
 80042fe:	2264      	movs	r2, #100	; 0x64
 8004300:	801a      	strh	r2, [r3, #0]
 8004302:	e01e      	b.n	8004342 <Load_EEPROM+0xda>
 8004304:	4b9f      	ldr	r3, [pc, #636]	; (8004584 <Load_EEPROM+0x31c>)
 8004306:	2232      	movs	r2, #50	; 0x32
 8004308:	801a      	strh	r2, [r3, #0]
 800430a:	e01a      	b.n	8004342 <Load_EEPROM+0xda>
 800430c:	4b9d      	ldr	r3, [pc, #628]	; (8004584 <Load_EEPROM+0x31c>)
 800430e:	2228      	movs	r2, #40	; 0x28
 8004310:	801a      	strh	r2, [r3, #0]
 8004312:	e016      	b.n	8004342 <Load_EEPROM+0xda>
 8004314:	4b9b      	ldr	r3, [pc, #620]	; (8004584 <Load_EEPROM+0x31c>)
 8004316:	2214      	movs	r2, #20
 8004318:	801a      	strh	r2, [r3, #0]
 800431a:	e012      	b.n	8004342 <Load_EEPROM+0xda>
 800431c:	4b99      	ldr	r3, [pc, #612]	; (8004584 <Load_EEPROM+0x31c>)
 800431e:	220a      	movs	r2, #10
 8004320:	801a      	strh	r2, [r3, #0]
 8004322:	e00e      	b.n	8004342 <Load_EEPROM+0xda>
 8004324:	4b97      	ldr	r3, [pc, #604]	; (8004584 <Load_EEPROM+0x31c>)
 8004326:	2205      	movs	r2, #5
 8004328:	801a      	strh	r2, [r3, #0]
 800432a:	e00a      	b.n	8004342 <Load_EEPROM+0xda>
 800432c:	4b95      	ldr	r3, [pc, #596]	; (8004584 <Load_EEPROM+0x31c>)
 800432e:	2204      	movs	r2, #4
 8004330:	801a      	strh	r2, [r3, #0]
 8004332:	e006      	b.n	8004342 <Load_EEPROM+0xda>
 8004334:	4b93      	ldr	r3, [pc, #588]	; (8004584 <Load_EEPROM+0x31c>)
 8004336:	2202      	movs	r2, #2
 8004338:	801a      	strh	r2, [r3, #0]
 800433a:	e002      	b.n	8004342 <Load_EEPROM+0xda>
 800433c:	4b91      	ldr	r3, [pc, #580]	; (8004584 <Load_EEPROM+0x31c>)
 800433e:	2200      	movs	r2, #0
 8004340:	801a      	strh	r2, [r3, #0]
 8004342:	bf00      	nop

	aux = buffer[0] >> 4;
 8004344:	7a3b      	ldrb	r3, [r7, #8]
 8004346:	091b      	lsrs	r3, r3, #4
 8004348:	75fb      	strb	r3, [r7, #23]
	__BUFFER_TO_FREQ(aux, perMsg[ANALOG_5_8]);
 800434a:	7dfb      	ldrb	r3, [r7, #23]
 800434c:	3b01      	subs	r3, #1
 800434e:	2b0a      	cmp	r3, #10
 8004350:	d846      	bhi.n	80043e0 <Load_EEPROM+0x178>
 8004352:	a201      	add	r2, pc, #4	; (adr r2, 8004358 <Load_EEPROM+0xf0>)
 8004354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004358:	08004385 	.word	0x08004385
 800435c:	0800438f 	.word	0x0800438f
 8004360:	08004399 	.word	0x08004399
 8004364:	080043a1 	.word	0x080043a1
 8004368:	080043a9 	.word	0x080043a9
 800436c:	080043b1 	.word	0x080043b1
 8004370:	080043b9 	.word	0x080043b9
 8004374:	080043c1 	.word	0x080043c1
 8004378:	080043c9 	.word	0x080043c9
 800437c:	080043d1 	.word	0x080043d1
 8004380:	080043d9 	.word	0x080043d9
 8004384:	4b7f      	ldr	r3, [pc, #508]	; (8004584 <Load_EEPROM+0x31c>)
 8004386:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800438a:	805a      	strh	r2, [r3, #2]
 800438c:	e02b      	b.n	80043e6 <Load_EEPROM+0x17e>
 800438e:	4b7d      	ldr	r3, [pc, #500]	; (8004584 <Load_EEPROM+0x31c>)
 8004390:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004394:	805a      	strh	r2, [r3, #2]
 8004396:	e026      	b.n	80043e6 <Load_EEPROM+0x17e>
 8004398:	4b7a      	ldr	r3, [pc, #488]	; (8004584 <Load_EEPROM+0x31c>)
 800439a:	22c8      	movs	r2, #200	; 0xc8
 800439c:	805a      	strh	r2, [r3, #2]
 800439e:	e022      	b.n	80043e6 <Load_EEPROM+0x17e>
 80043a0:	4b78      	ldr	r3, [pc, #480]	; (8004584 <Load_EEPROM+0x31c>)
 80043a2:	2264      	movs	r2, #100	; 0x64
 80043a4:	805a      	strh	r2, [r3, #2]
 80043a6:	e01e      	b.n	80043e6 <Load_EEPROM+0x17e>
 80043a8:	4b76      	ldr	r3, [pc, #472]	; (8004584 <Load_EEPROM+0x31c>)
 80043aa:	2232      	movs	r2, #50	; 0x32
 80043ac:	805a      	strh	r2, [r3, #2]
 80043ae:	e01a      	b.n	80043e6 <Load_EEPROM+0x17e>
 80043b0:	4b74      	ldr	r3, [pc, #464]	; (8004584 <Load_EEPROM+0x31c>)
 80043b2:	2228      	movs	r2, #40	; 0x28
 80043b4:	805a      	strh	r2, [r3, #2]
 80043b6:	e016      	b.n	80043e6 <Load_EEPROM+0x17e>
 80043b8:	4b72      	ldr	r3, [pc, #456]	; (8004584 <Load_EEPROM+0x31c>)
 80043ba:	2214      	movs	r2, #20
 80043bc:	805a      	strh	r2, [r3, #2]
 80043be:	e012      	b.n	80043e6 <Load_EEPROM+0x17e>
 80043c0:	4b70      	ldr	r3, [pc, #448]	; (8004584 <Load_EEPROM+0x31c>)
 80043c2:	220a      	movs	r2, #10
 80043c4:	805a      	strh	r2, [r3, #2]
 80043c6:	e00e      	b.n	80043e6 <Load_EEPROM+0x17e>
 80043c8:	4b6e      	ldr	r3, [pc, #440]	; (8004584 <Load_EEPROM+0x31c>)
 80043ca:	2205      	movs	r2, #5
 80043cc:	805a      	strh	r2, [r3, #2]
 80043ce:	e00a      	b.n	80043e6 <Load_EEPROM+0x17e>
 80043d0:	4b6c      	ldr	r3, [pc, #432]	; (8004584 <Load_EEPROM+0x31c>)
 80043d2:	2204      	movs	r2, #4
 80043d4:	805a      	strh	r2, [r3, #2]
 80043d6:	e006      	b.n	80043e6 <Load_EEPROM+0x17e>
 80043d8:	4b6a      	ldr	r3, [pc, #424]	; (8004584 <Load_EEPROM+0x31c>)
 80043da:	2202      	movs	r2, #2
 80043dc:	805a      	strh	r2, [r3, #2]
 80043de:	e002      	b.n	80043e6 <Load_EEPROM+0x17e>
 80043e0:	4b68      	ldr	r3, [pc, #416]	; (8004584 <Load_EEPROM+0x31c>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	805a      	strh	r2, [r3, #2]
 80043e6:	bf00      	nop

	aux = buffer[1] & 0x0f;
 80043e8:	7a7b      	ldrb	r3, [r7, #9]
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	75fb      	strb	r3, [r7, #23]
	__BUFFER_TO_FREQ(aux, perMsg[ANALOG_9_12]);
 80043f0:	7dfb      	ldrb	r3, [r7, #23]
 80043f2:	3b01      	subs	r3, #1
 80043f4:	2b0a      	cmp	r3, #10
 80043f6:	d847      	bhi.n	8004488 <Load_EEPROM+0x220>
 80043f8:	a201      	add	r2, pc, #4	; (adr r2, 8004400 <Load_EEPROM+0x198>)
 80043fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fe:	bf00      	nop
 8004400:	0800442d 	.word	0x0800442d
 8004404:	08004437 	.word	0x08004437
 8004408:	08004441 	.word	0x08004441
 800440c:	08004449 	.word	0x08004449
 8004410:	08004451 	.word	0x08004451
 8004414:	08004459 	.word	0x08004459
 8004418:	08004461 	.word	0x08004461
 800441c:	08004469 	.word	0x08004469
 8004420:	08004471 	.word	0x08004471
 8004424:	08004479 	.word	0x08004479
 8004428:	08004481 	.word	0x08004481
 800442c:	4b55      	ldr	r3, [pc, #340]	; (8004584 <Load_EEPROM+0x31c>)
 800442e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004432:	809a      	strh	r2, [r3, #4]
 8004434:	e02b      	b.n	800448e <Load_EEPROM+0x226>
 8004436:	4b53      	ldr	r3, [pc, #332]	; (8004584 <Load_EEPROM+0x31c>)
 8004438:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800443c:	809a      	strh	r2, [r3, #4]
 800443e:	e026      	b.n	800448e <Load_EEPROM+0x226>
 8004440:	4b50      	ldr	r3, [pc, #320]	; (8004584 <Load_EEPROM+0x31c>)
 8004442:	22c8      	movs	r2, #200	; 0xc8
 8004444:	809a      	strh	r2, [r3, #4]
 8004446:	e022      	b.n	800448e <Load_EEPROM+0x226>
 8004448:	4b4e      	ldr	r3, [pc, #312]	; (8004584 <Load_EEPROM+0x31c>)
 800444a:	2264      	movs	r2, #100	; 0x64
 800444c:	809a      	strh	r2, [r3, #4]
 800444e:	e01e      	b.n	800448e <Load_EEPROM+0x226>
 8004450:	4b4c      	ldr	r3, [pc, #304]	; (8004584 <Load_EEPROM+0x31c>)
 8004452:	2232      	movs	r2, #50	; 0x32
 8004454:	809a      	strh	r2, [r3, #4]
 8004456:	e01a      	b.n	800448e <Load_EEPROM+0x226>
 8004458:	4b4a      	ldr	r3, [pc, #296]	; (8004584 <Load_EEPROM+0x31c>)
 800445a:	2228      	movs	r2, #40	; 0x28
 800445c:	809a      	strh	r2, [r3, #4]
 800445e:	e016      	b.n	800448e <Load_EEPROM+0x226>
 8004460:	4b48      	ldr	r3, [pc, #288]	; (8004584 <Load_EEPROM+0x31c>)
 8004462:	2214      	movs	r2, #20
 8004464:	809a      	strh	r2, [r3, #4]
 8004466:	e012      	b.n	800448e <Load_EEPROM+0x226>
 8004468:	4b46      	ldr	r3, [pc, #280]	; (8004584 <Load_EEPROM+0x31c>)
 800446a:	220a      	movs	r2, #10
 800446c:	809a      	strh	r2, [r3, #4]
 800446e:	e00e      	b.n	800448e <Load_EEPROM+0x226>
 8004470:	4b44      	ldr	r3, [pc, #272]	; (8004584 <Load_EEPROM+0x31c>)
 8004472:	2205      	movs	r2, #5
 8004474:	809a      	strh	r2, [r3, #4]
 8004476:	e00a      	b.n	800448e <Load_EEPROM+0x226>
 8004478:	4b42      	ldr	r3, [pc, #264]	; (8004584 <Load_EEPROM+0x31c>)
 800447a:	2204      	movs	r2, #4
 800447c:	809a      	strh	r2, [r3, #4]
 800447e:	e006      	b.n	800448e <Load_EEPROM+0x226>
 8004480:	4b40      	ldr	r3, [pc, #256]	; (8004584 <Load_EEPROM+0x31c>)
 8004482:	2202      	movs	r2, #2
 8004484:	809a      	strh	r2, [r3, #4]
 8004486:	e002      	b.n	800448e <Load_EEPROM+0x226>
 8004488:	4b3e      	ldr	r3, [pc, #248]	; (8004584 <Load_EEPROM+0x31c>)
 800448a:	2200      	movs	r2, #0
 800448c:	809a      	strh	r2, [r3, #4]
 800448e:	bf00      	nop

	aux = buffer[1] >> 4;
 8004490:	7a7b      	ldrb	r3, [r7, #9]
 8004492:	091b      	lsrs	r3, r3, #4
 8004494:	75fb      	strb	r3, [r7, #23]
	__BUFFER_TO_FREQ(aux, perMsg[RTC_MSG]);
 8004496:	7dfb      	ldrb	r3, [r7, #23]
 8004498:	3b01      	subs	r3, #1
 800449a:	2b0a      	cmp	r3, #10
 800449c:	d846      	bhi.n	800452c <Load_EEPROM+0x2c4>
 800449e:	a201      	add	r2, pc, #4	; (adr r2, 80044a4 <Load_EEPROM+0x23c>)
 80044a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a4:	080044d1 	.word	0x080044d1
 80044a8:	080044db 	.word	0x080044db
 80044ac:	080044e5 	.word	0x080044e5
 80044b0:	080044ed 	.word	0x080044ed
 80044b4:	080044f5 	.word	0x080044f5
 80044b8:	080044fd 	.word	0x080044fd
 80044bc:	08004505 	.word	0x08004505
 80044c0:	0800450d 	.word	0x0800450d
 80044c4:	08004515 	.word	0x08004515
 80044c8:	0800451d 	.word	0x0800451d
 80044cc:	08004525 	.word	0x08004525
 80044d0:	4b2c      	ldr	r3, [pc, #176]	; (8004584 <Load_EEPROM+0x31c>)
 80044d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044d6:	80da      	strh	r2, [r3, #6]
 80044d8:	e02b      	b.n	8004532 <Load_EEPROM+0x2ca>
 80044da:	4b2a      	ldr	r3, [pc, #168]	; (8004584 <Load_EEPROM+0x31c>)
 80044dc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80044e0:	80da      	strh	r2, [r3, #6]
 80044e2:	e026      	b.n	8004532 <Load_EEPROM+0x2ca>
 80044e4:	4b27      	ldr	r3, [pc, #156]	; (8004584 <Load_EEPROM+0x31c>)
 80044e6:	22c8      	movs	r2, #200	; 0xc8
 80044e8:	80da      	strh	r2, [r3, #6]
 80044ea:	e022      	b.n	8004532 <Load_EEPROM+0x2ca>
 80044ec:	4b25      	ldr	r3, [pc, #148]	; (8004584 <Load_EEPROM+0x31c>)
 80044ee:	2264      	movs	r2, #100	; 0x64
 80044f0:	80da      	strh	r2, [r3, #6]
 80044f2:	e01e      	b.n	8004532 <Load_EEPROM+0x2ca>
 80044f4:	4b23      	ldr	r3, [pc, #140]	; (8004584 <Load_EEPROM+0x31c>)
 80044f6:	2232      	movs	r2, #50	; 0x32
 80044f8:	80da      	strh	r2, [r3, #6]
 80044fa:	e01a      	b.n	8004532 <Load_EEPROM+0x2ca>
 80044fc:	4b21      	ldr	r3, [pc, #132]	; (8004584 <Load_EEPROM+0x31c>)
 80044fe:	2228      	movs	r2, #40	; 0x28
 8004500:	80da      	strh	r2, [r3, #6]
 8004502:	e016      	b.n	8004532 <Load_EEPROM+0x2ca>
 8004504:	4b1f      	ldr	r3, [pc, #124]	; (8004584 <Load_EEPROM+0x31c>)
 8004506:	2214      	movs	r2, #20
 8004508:	80da      	strh	r2, [r3, #6]
 800450a:	e012      	b.n	8004532 <Load_EEPROM+0x2ca>
 800450c:	4b1d      	ldr	r3, [pc, #116]	; (8004584 <Load_EEPROM+0x31c>)
 800450e:	220a      	movs	r2, #10
 8004510:	80da      	strh	r2, [r3, #6]
 8004512:	e00e      	b.n	8004532 <Load_EEPROM+0x2ca>
 8004514:	4b1b      	ldr	r3, [pc, #108]	; (8004584 <Load_EEPROM+0x31c>)
 8004516:	2205      	movs	r2, #5
 8004518:	80da      	strh	r2, [r3, #6]
 800451a:	e00a      	b.n	8004532 <Load_EEPROM+0x2ca>
 800451c:	4b19      	ldr	r3, [pc, #100]	; (8004584 <Load_EEPROM+0x31c>)
 800451e:	2204      	movs	r2, #4
 8004520:	80da      	strh	r2, [r3, #6]
 8004522:	e006      	b.n	8004532 <Load_EEPROM+0x2ca>
 8004524:	4b17      	ldr	r3, [pc, #92]	; (8004584 <Load_EEPROM+0x31c>)
 8004526:	2202      	movs	r2, #2
 8004528:	80da      	strh	r2, [r3, #6]
 800452a:	e002      	b.n	8004532 <Load_EEPROM+0x2ca>
 800452c:	4b15      	ldr	r3, [pc, #84]	; (8004584 <Load_EEPROM+0x31c>)
 800452e:	2200      	movs	r2, #0
 8004530:	80da      	strh	r2, [r3, #6]
 8004532:	bf00      	nop

	aux = buffer[2] & 0x0f;
 8004534:	7abb      	ldrb	r3, [r7, #10]
 8004536:	f003 030f 	and.w	r3, r3, #15
 800453a:	75fb      	strb	r3, [r7, #23]
	__BUFFER_TO_FREQ(aux, perMsg[VERIFY_MSG]);
 800453c:	7dfb      	ldrb	r3, [r7, #23]
 800453e:	3b01      	subs	r3, #1
 8004540:	2b0a      	cmp	r3, #10
 8004542:	d84a      	bhi.n	80045da <Load_EEPROM+0x372>
 8004544:	a201      	add	r2, pc, #4	; (adr r2, 800454c <Load_EEPROM+0x2e4>)
 8004546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454a:	bf00      	nop
 800454c:	08004579 	.word	0x08004579
 8004550:	08004589 	.word	0x08004589
 8004554:	08004593 	.word	0x08004593
 8004558:	0800459b 	.word	0x0800459b
 800455c:	080045a3 	.word	0x080045a3
 8004560:	080045ab 	.word	0x080045ab
 8004564:	080045b3 	.word	0x080045b3
 8004568:	080045bb 	.word	0x080045bb
 800456c:	080045c3 	.word	0x080045c3
 8004570:	080045cb 	.word	0x080045cb
 8004574:	080045d3 	.word	0x080045d3
 8004578:	4b02      	ldr	r3, [pc, #8]	; (8004584 <Load_EEPROM+0x31c>)
 800457a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800457e:	811a      	strh	r2, [r3, #8]
 8004580:	e02e      	b.n	80045e0 <Load_EEPROM+0x378>
 8004582:	bf00      	nop
 8004584:	2001273c 	.word	0x2001273c
 8004588:	4ba8      	ldr	r3, [pc, #672]	; (800482c <Load_EEPROM+0x5c4>)
 800458a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800458e:	811a      	strh	r2, [r3, #8]
 8004590:	e026      	b.n	80045e0 <Load_EEPROM+0x378>
 8004592:	4ba6      	ldr	r3, [pc, #664]	; (800482c <Load_EEPROM+0x5c4>)
 8004594:	22c8      	movs	r2, #200	; 0xc8
 8004596:	811a      	strh	r2, [r3, #8]
 8004598:	e022      	b.n	80045e0 <Load_EEPROM+0x378>
 800459a:	4ba4      	ldr	r3, [pc, #656]	; (800482c <Load_EEPROM+0x5c4>)
 800459c:	2264      	movs	r2, #100	; 0x64
 800459e:	811a      	strh	r2, [r3, #8]
 80045a0:	e01e      	b.n	80045e0 <Load_EEPROM+0x378>
 80045a2:	4ba2      	ldr	r3, [pc, #648]	; (800482c <Load_EEPROM+0x5c4>)
 80045a4:	2232      	movs	r2, #50	; 0x32
 80045a6:	811a      	strh	r2, [r3, #8]
 80045a8:	e01a      	b.n	80045e0 <Load_EEPROM+0x378>
 80045aa:	4ba0      	ldr	r3, [pc, #640]	; (800482c <Load_EEPROM+0x5c4>)
 80045ac:	2228      	movs	r2, #40	; 0x28
 80045ae:	811a      	strh	r2, [r3, #8]
 80045b0:	e016      	b.n	80045e0 <Load_EEPROM+0x378>
 80045b2:	4b9e      	ldr	r3, [pc, #632]	; (800482c <Load_EEPROM+0x5c4>)
 80045b4:	2214      	movs	r2, #20
 80045b6:	811a      	strh	r2, [r3, #8]
 80045b8:	e012      	b.n	80045e0 <Load_EEPROM+0x378>
 80045ba:	4b9c      	ldr	r3, [pc, #624]	; (800482c <Load_EEPROM+0x5c4>)
 80045bc:	220a      	movs	r2, #10
 80045be:	811a      	strh	r2, [r3, #8]
 80045c0:	e00e      	b.n	80045e0 <Load_EEPROM+0x378>
 80045c2:	4b9a      	ldr	r3, [pc, #616]	; (800482c <Load_EEPROM+0x5c4>)
 80045c4:	2205      	movs	r2, #5
 80045c6:	811a      	strh	r2, [r3, #8]
 80045c8:	e00a      	b.n	80045e0 <Load_EEPROM+0x378>
 80045ca:	4b98      	ldr	r3, [pc, #608]	; (800482c <Load_EEPROM+0x5c4>)
 80045cc:	2204      	movs	r2, #4
 80045ce:	811a      	strh	r2, [r3, #8]
 80045d0:	e006      	b.n	80045e0 <Load_EEPROM+0x378>
 80045d2:	4b96      	ldr	r3, [pc, #600]	; (800482c <Load_EEPROM+0x5c4>)
 80045d4:	2202      	movs	r2, #2
 80045d6:	811a      	strh	r2, [r3, #8]
 80045d8:	e002      	b.n	80045e0 <Load_EEPROM+0x378>
 80045da:	4b94      	ldr	r3, [pc, #592]	; (800482c <Load_EEPROM+0x5c4>)
 80045dc:	2200      	movs	r2, #0
 80045de:	811a      	strh	r2, [r3, #8]
 80045e0:	bf00      	nop

	aux = buffer[2] >> 4;
 80045e2:	7abb      	ldrb	r3, [r7, #10]
 80045e4:	091b      	lsrs	r3, r3, #4
 80045e6:	75fb      	strb	r3, [r7, #23]
	__BUFFER_TO_FREQ(aux, perMsg[ECU_SAVE]);
 80045e8:	7dfb      	ldrb	r3, [r7, #23]
 80045ea:	3b01      	subs	r3, #1
 80045ec:	2b0a      	cmp	r3, #10
 80045ee:	d847      	bhi.n	8004680 <Load_EEPROM+0x418>
 80045f0:	a201      	add	r2, pc, #4	; (adr r2, 80045f8 <Load_EEPROM+0x390>)
 80045f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f6:	bf00      	nop
 80045f8:	08004625 	.word	0x08004625
 80045fc:	0800462f 	.word	0x0800462f
 8004600:	08004639 	.word	0x08004639
 8004604:	08004641 	.word	0x08004641
 8004608:	08004649 	.word	0x08004649
 800460c:	08004651 	.word	0x08004651
 8004610:	08004659 	.word	0x08004659
 8004614:	08004661 	.word	0x08004661
 8004618:	08004669 	.word	0x08004669
 800461c:	08004671 	.word	0x08004671
 8004620:	08004679 	.word	0x08004679
 8004624:	4b81      	ldr	r3, [pc, #516]	; (800482c <Load_EEPROM+0x5c4>)
 8004626:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800462a:	819a      	strh	r2, [r3, #12]
 800462c:	e02b      	b.n	8004686 <Load_EEPROM+0x41e>
 800462e:	4b7f      	ldr	r3, [pc, #508]	; (800482c <Load_EEPROM+0x5c4>)
 8004630:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004634:	819a      	strh	r2, [r3, #12]
 8004636:	e026      	b.n	8004686 <Load_EEPROM+0x41e>
 8004638:	4b7c      	ldr	r3, [pc, #496]	; (800482c <Load_EEPROM+0x5c4>)
 800463a:	22c8      	movs	r2, #200	; 0xc8
 800463c:	819a      	strh	r2, [r3, #12]
 800463e:	e022      	b.n	8004686 <Load_EEPROM+0x41e>
 8004640:	4b7a      	ldr	r3, [pc, #488]	; (800482c <Load_EEPROM+0x5c4>)
 8004642:	2264      	movs	r2, #100	; 0x64
 8004644:	819a      	strh	r2, [r3, #12]
 8004646:	e01e      	b.n	8004686 <Load_EEPROM+0x41e>
 8004648:	4b78      	ldr	r3, [pc, #480]	; (800482c <Load_EEPROM+0x5c4>)
 800464a:	2232      	movs	r2, #50	; 0x32
 800464c:	819a      	strh	r2, [r3, #12]
 800464e:	e01a      	b.n	8004686 <Load_EEPROM+0x41e>
 8004650:	4b76      	ldr	r3, [pc, #472]	; (800482c <Load_EEPROM+0x5c4>)
 8004652:	2228      	movs	r2, #40	; 0x28
 8004654:	819a      	strh	r2, [r3, #12]
 8004656:	e016      	b.n	8004686 <Load_EEPROM+0x41e>
 8004658:	4b74      	ldr	r3, [pc, #464]	; (800482c <Load_EEPROM+0x5c4>)
 800465a:	2214      	movs	r2, #20
 800465c:	819a      	strh	r2, [r3, #12]
 800465e:	e012      	b.n	8004686 <Load_EEPROM+0x41e>
 8004660:	4b72      	ldr	r3, [pc, #456]	; (800482c <Load_EEPROM+0x5c4>)
 8004662:	220a      	movs	r2, #10
 8004664:	819a      	strh	r2, [r3, #12]
 8004666:	e00e      	b.n	8004686 <Load_EEPROM+0x41e>
 8004668:	4b70      	ldr	r3, [pc, #448]	; (800482c <Load_EEPROM+0x5c4>)
 800466a:	2205      	movs	r2, #5
 800466c:	819a      	strh	r2, [r3, #12]
 800466e:	e00a      	b.n	8004686 <Load_EEPROM+0x41e>
 8004670:	4b6e      	ldr	r3, [pc, #440]	; (800482c <Load_EEPROM+0x5c4>)
 8004672:	2204      	movs	r2, #4
 8004674:	819a      	strh	r2, [r3, #12]
 8004676:	e006      	b.n	8004686 <Load_EEPROM+0x41e>
 8004678:	4b6c      	ldr	r3, [pc, #432]	; (800482c <Load_EEPROM+0x5c4>)
 800467a:	2202      	movs	r2, #2
 800467c:	819a      	strh	r2, [r3, #12]
 800467e:	e002      	b.n	8004686 <Load_EEPROM+0x41e>
 8004680:	4b6a      	ldr	r3, [pc, #424]	; (800482c <Load_EEPROM+0x5c4>)
 8004682:	2200      	movs	r2, #0
 8004684:	819a      	strh	r2, [r3, #12]
 8004686:	bf00      	nop

	aux = buffer[3] & 0x0f;
 8004688:	7afb      	ldrb	r3, [r7, #11]
 800468a:	f003 030f 	and.w	r3, r3, #15
 800468e:	75fb      	strb	r3, [r7, #23]
	__BUFFER_TO_FREQ(aux, perMsg[PDM_SAVE]);
 8004690:	7dfb      	ldrb	r3, [r7, #23]
 8004692:	3b01      	subs	r3, #1
 8004694:	2b0a      	cmp	r3, #10
 8004696:	d847      	bhi.n	8004728 <Load_EEPROM+0x4c0>
 8004698:	a201      	add	r2, pc, #4	; (adr r2, 80046a0 <Load_EEPROM+0x438>)
 800469a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469e:	bf00      	nop
 80046a0:	080046cd 	.word	0x080046cd
 80046a4:	080046d7 	.word	0x080046d7
 80046a8:	080046e1 	.word	0x080046e1
 80046ac:	080046e9 	.word	0x080046e9
 80046b0:	080046f1 	.word	0x080046f1
 80046b4:	080046f9 	.word	0x080046f9
 80046b8:	08004701 	.word	0x08004701
 80046bc:	08004709 	.word	0x08004709
 80046c0:	08004711 	.word	0x08004711
 80046c4:	08004719 	.word	0x08004719
 80046c8:	08004721 	.word	0x08004721
 80046cc:	4b57      	ldr	r3, [pc, #348]	; (800482c <Load_EEPROM+0x5c4>)
 80046ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046d2:	81da      	strh	r2, [r3, #14]
 80046d4:	e02b      	b.n	800472e <Load_EEPROM+0x4c6>
 80046d6:	4b55      	ldr	r3, [pc, #340]	; (800482c <Load_EEPROM+0x5c4>)
 80046d8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80046dc:	81da      	strh	r2, [r3, #14]
 80046de:	e026      	b.n	800472e <Load_EEPROM+0x4c6>
 80046e0:	4b52      	ldr	r3, [pc, #328]	; (800482c <Load_EEPROM+0x5c4>)
 80046e2:	22c8      	movs	r2, #200	; 0xc8
 80046e4:	81da      	strh	r2, [r3, #14]
 80046e6:	e022      	b.n	800472e <Load_EEPROM+0x4c6>
 80046e8:	4b50      	ldr	r3, [pc, #320]	; (800482c <Load_EEPROM+0x5c4>)
 80046ea:	2264      	movs	r2, #100	; 0x64
 80046ec:	81da      	strh	r2, [r3, #14]
 80046ee:	e01e      	b.n	800472e <Load_EEPROM+0x4c6>
 80046f0:	4b4e      	ldr	r3, [pc, #312]	; (800482c <Load_EEPROM+0x5c4>)
 80046f2:	2232      	movs	r2, #50	; 0x32
 80046f4:	81da      	strh	r2, [r3, #14]
 80046f6:	e01a      	b.n	800472e <Load_EEPROM+0x4c6>
 80046f8:	4b4c      	ldr	r3, [pc, #304]	; (800482c <Load_EEPROM+0x5c4>)
 80046fa:	2228      	movs	r2, #40	; 0x28
 80046fc:	81da      	strh	r2, [r3, #14]
 80046fe:	e016      	b.n	800472e <Load_EEPROM+0x4c6>
 8004700:	4b4a      	ldr	r3, [pc, #296]	; (800482c <Load_EEPROM+0x5c4>)
 8004702:	2214      	movs	r2, #20
 8004704:	81da      	strh	r2, [r3, #14]
 8004706:	e012      	b.n	800472e <Load_EEPROM+0x4c6>
 8004708:	4b48      	ldr	r3, [pc, #288]	; (800482c <Load_EEPROM+0x5c4>)
 800470a:	220a      	movs	r2, #10
 800470c:	81da      	strh	r2, [r3, #14]
 800470e:	e00e      	b.n	800472e <Load_EEPROM+0x4c6>
 8004710:	4b46      	ldr	r3, [pc, #280]	; (800482c <Load_EEPROM+0x5c4>)
 8004712:	2205      	movs	r2, #5
 8004714:	81da      	strh	r2, [r3, #14]
 8004716:	e00a      	b.n	800472e <Load_EEPROM+0x4c6>
 8004718:	4b44      	ldr	r3, [pc, #272]	; (800482c <Load_EEPROM+0x5c4>)
 800471a:	2204      	movs	r2, #4
 800471c:	81da      	strh	r2, [r3, #14]
 800471e:	e006      	b.n	800472e <Load_EEPROM+0x4c6>
 8004720:	4b42      	ldr	r3, [pc, #264]	; (800482c <Load_EEPROM+0x5c4>)
 8004722:	2202      	movs	r2, #2
 8004724:	81da      	strh	r2, [r3, #14]
 8004726:	e002      	b.n	800472e <Load_EEPROM+0x4c6>
 8004728:	4b40      	ldr	r3, [pc, #256]	; (800482c <Load_EEPROM+0x5c4>)
 800472a:	2200      	movs	r2, #0
 800472c:	81da      	strh	r2, [r3, #14]
 800472e:	bf00      	nop

	aux = buffer[3] >> 4;
 8004730:	7afb      	ldrb	r3, [r7, #11]
 8004732:	091b      	lsrs	r3, r3, #4
 8004734:	75fb      	strb	r3, [r7, #23]
	__BUFFER_TO_FREQ(aux, perCAN[ANALOG_1_4]);
 8004736:	7dfb      	ldrb	r3, [r7, #23]
 8004738:	3b01      	subs	r3, #1
 800473a:	2b0a      	cmp	r3, #10
 800473c:	d846      	bhi.n	80047cc <Load_EEPROM+0x564>
 800473e:	a201      	add	r2, pc, #4	; (adr r2, 8004744 <Load_EEPROM+0x4dc>)
 8004740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004744:	08004771 	.word	0x08004771
 8004748:	0800477b 	.word	0x0800477b
 800474c:	08004785 	.word	0x08004785
 8004750:	0800478d 	.word	0x0800478d
 8004754:	08004795 	.word	0x08004795
 8004758:	0800479d 	.word	0x0800479d
 800475c:	080047a5 	.word	0x080047a5
 8004760:	080047ad 	.word	0x080047ad
 8004764:	080047b5 	.word	0x080047b5
 8004768:	080047bd 	.word	0x080047bd
 800476c:	080047c5 	.word	0x080047c5
 8004770:	4b2f      	ldr	r3, [pc, #188]	; (8004830 <Load_EEPROM+0x5c8>)
 8004772:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004776:	801a      	strh	r2, [r3, #0]
 8004778:	e02b      	b.n	80047d2 <Load_EEPROM+0x56a>
 800477a:	4b2d      	ldr	r3, [pc, #180]	; (8004830 <Load_EEPROM+0x5c8>)
 800477c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004780:	801a      	strh	r2, [r3, #0]
 8004782:	e026      	b.n	80047d2 <Load_EEPROM+0x56a>
 8004784:	4b2a      	ldr	r3, [pc, #168]	; (8004830 <Load_EEPROM+0x5c8>)
 8004786:	22c8      	movs	r2, #200	; 0xc8
 8004788:	801a      	strh	r2, [r3, #0]
 800478a:	e022      	b.n	80047d2 <Load_EEPROM+0x56a>
 800478c:	4b28      	ldr	r3, [pc, #160]	; (8004830 <Load_EEPROM+0x5c8>)
 800478e:	2264      	movs	r2, #100	; 0x64
 8004790:	801a      	strh	r2, [r3, #0]
 8004792:	e01e      	b.n	80047d2 <Load_EEPROM+0x56a>
 8004794:	4b26      	ldr	r3, [pc, #152]	; (8004830 <Load_EEPROM+0x5c8>)
 8004796:	2232      	movs	r2, #50	; 0x32
 8004798:	801a      	strh	r2, [r3, #0]
 800479a:	e01a      	b.n	80047d2 <Load_EEPROM+0x56a>
 800479c:	4b24      	ldr	r3, [pc, #144]	; (8004830 <Load_EEPROM+0x5c8>)
 800479e:	2228      	movs	r2, #40	; 0x28
 80047a0:	801a      	strh	r2, [r3, #0]
 80047a2:	e016      	b.n	80047d2 <Load_EEPROM+0x56a>
 80047a4:	4b22      	ldr	r3, [pc, #136]	; (8004830 <Load_EEPROM+0x5c8>)
 80047a6:	2214      	movs	r2, #20
 80047a8:	801a      	strh	r2, [r3, #0]
 80047aa:	e012      	b.n	80047d2 <Load_EEPROM+0x56a>
 80047ac:	4b20      	ldr	r3, [pc, #128]	; (8004830 <Load_EEPROM+0x5c8>)
 80047ae:	220a      	movs	r2, #10
 80047b0:	801a      	strh	r2, [r3, #0]
 80047b2:	e00e      	b.n	80047d2 <Load_EEPROM+0x56a>
 80047b4:	4b1e      	ldr	r3, [pc, #120]	; (8004830 <Load_EEPROM+0x5c8>)
 80047b6:	2205      	movs	r2, #5
 80047b8:	801a      	strh	r2, [r3, #0]
 80047ba:	e00a      	b.n	80047d2 <Load_EEPROM+0x56a>
 80047bc:	4b1c      	ldr	r3, [pc, #112]	; (8004830 <Load_EEPROM+0x5c8>)
 80047be:	2204      	movs	r2, #4
 80047c0:	801a      	strh	r2, [r3, #0]
 80047c2:	e006      	b.n	80047d2 <Load_EEPROM+0x56a>
 80047c4:	4b1a      	ldr	r3, [pc, #104]	; (8004830 <Load_EEPROM+0x5c8>)
 80047c6:	2202      	movs	r2, #2
 80047c8:	801a      	strh	r2, [r3, #0]
 80047ca:	e002      	b.n	80047d2 <Load_EEPROM+0x56a>
 80047cc:	4b18      	ldr	r3, [pc, #96]	; (8004830 <Load_EEPROM+0x5c8>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	801a      	strh	r2, [r3, #0]
 80047d2:	bf00      	nop

	aux = buffer[4] & 0x0f;
 80047d4:	7b3b      	ldrb	r3, [r7, #12]
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	75fb      	strb	r3, [r7, #23]
	__BUFFER_TO_FREQ(aux, perCAN[ANALOG_5_8]);
 80047dc:	7dfb      	ldrb	r3, [r7, #23]
 80047de:	3b01      	subs	r3, #1
 80047e0:	2b0a      	cmp	r3, #10
 80047e2:	d84b      	bhi.n	800487c <Load_EEPROM+0x614>
 80047e4:	a201      	add	r2, pc, #4	; (adr r2, 80047ec <Load_EEPROM+0x584>)
 80047e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ea:	bf00      	nop
 80047ec:	08004819 	.word	0x08004819
 80047f0:	08004823 	.word	0x08004823
 80047f4:	08004835 	.word	0x08004835
 80047f8:	0800483d 	.word	0x0800483d
 80047fc:	08004845 	.word	0x08004845
 8004800:	0800484d 	.word	0x0800484d
 8004804:	08004855 	.word	0x08004855
 8004808:	0800485d 	.word	0x0800485d
 800480c:	08004865 	.word	0x08004865
 8004810:	0800486d 	.word	0x0800486d
 8004814:	08004875 	.word	0x08004875
 8004818:	4b05      	ldr	r3, [pc, #20]	; (8004830 <Load_EEPROM+0x5c8>)
 800481a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800481e:	805a      	strh	r2, [r3, #2]
 8004820:	e02f      	b.n	8004882 <Load_EEPROM+0x61a>
 8004822:	4b03      	ldr	r3, [pc, #12]	; (8004830 <Load_EEPROM+0x5c8>)
 8004824:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004828:	805a      	strh	r2, [r3, #2]
 800482a:	e02a      	b.n	8004882 <Load_EEPROM+0x61a>
 800482c:	2001273c 	.word	0x2001273c
 8004830:	20012730 	.word	0x20012730
 8004834:	4b8d      	ldr	r3, [pc, #564]	; (8004a6c <Load_EEPROM+0x804>)
 8004836:	22c8      	movs	r2, #200	; 0xc8
 8004838:	805a      	strh	r2, [r3, #2]
 800483a:	e022      	b.n	8004882 <Load_EEPROM+0x61a>
 800483c:	4b8b      	ldr	r3, [pc, #556]	; (8004a6c <Load_EEPROM+0x804>)
 800483e:	2264      	movs	r2, #100	; 0x64
 8004840:	805a      	strh	r2, [r3, #2]
 8004842:	e01e      	b.n	8004882 <Load_EEPROM+0x61a>
 8004844:	4b89      	ldr	r3, [pc, #548]	; (8004a6c <Load_EEPROM+0x804>)
 8004846:	2232      	movs	r2, #50	; 0x32
 8004848:	805a      	strh	r2, [r3, #2]
 800484a:	e01a      	b.n	8004882 <Load_EEPROM+0x61a>
 800484c:	4b87      	ldr	r3, [pc, #540]	; (8004a6c <Load_EEPROM+0x804>)
 800484e:	2228      	movs	r2, #40	; 0x28
 8004850:	805a      	strh	r2, [r3, #2]
 8004852:	e016      	b.n	8004882 <Load_EEPROM+0x61a>
 8004854:	4b85      	ldr	r3, [pc, #532]	; (8004a6c <Load_EEPROM+0x804>)
 8004856:	2214      	movs	r2, #20
 8004858:	805a      	strh	r2, [r3, #2]
 800485a:	e012      	b.n	8004882 <Load_EEPROM+0x61a>
 800485c:	4b83      	ldr	r3, [pc, #524]	; (8004a6c <Load_EEPROM+0x804>)
 800485e:	220a      	movs	r2, #10
 8004860:	805a      	strh	r2, [r3, #2]
 8004862:	e00e      	b.n	8004882 <Load_EEPROM+0x61a>
 8004864:	4b81      	ldr	r3, [pc, #516]	; (8004a6c <Load_EEPROM+0x804>)
 8004866:	2205      	movs	r2, #5
 8004868:	805a      	strh	r2, [r3, #2]
 800486a:	e00a      	b.n	8004882 <Load_EEPROM+0x61a>
 800486c:	4b7f      	ldr	r3, [pc, #508]	; (8004a6c <Load_EEPROM+0x804>)
 800486e:	2204      	movs	r2, #4
 8004870:	805a      	strh	r2, [r3, #2]
 8004872:	e006      	b.n	8004882 <Load_EEPROM+0x61a>
 8004874:	4b7d      	ldr	r3, [pc, #500]	; (8004a6c <Load_EEPROM+0x804>)
 8004876:	2202      	movs	r2, #2
 8004878:	805a      	strh	r2, [r3, #2]
 800487a:	e002      	b.n	8004882 <Load_EEPROM+0x61a>
 800487c:	4b7b      	ldr	r3, [pc, #492]	; (8004a6c <Load_EEPROM+0x804>)
 800487e:	2200      	movs	r2, #0
 8004880:	805a      	strh	r2, [r3, #2]
 8004882:	bf00      	nop

	aux = buffer[4] >> 4;
 8004884:	7b3b      	ldrb	r3, [r7, #12]
 8004886:	091b      	lsrs	r3, r3, #4
 8004888:	75fb      	strb	r3, [r7, #23]
	__BUFFER_TO_FREQ(aux, perCAN[ANALOG_9_12]);
 800488a:	7dfb      	ldrb	r3, [r7, #23]
 800488c:	3b01      	subs	r3, #1
 800488e:	2b0a      	cmp	r3, #10
 8004890:	d846      	bhi.n	8004920 <Load_EEPROM+0x6b8>
 8004892:	a201      	add	r2, pc, #4	; (adr r2, 8004898 <Load_EEPROM+0x630>)
 8004894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004898:	080048c5 	.word	0x080048c5
 800489c:	080048cf 	.word	0x080048cf
 80048a0:	080048d9 	.word	0x080048d9
 80048a4:	080048e1 	.word	0x080048e1
 80048a8:	080048e9 	.word	0x080048e9
 80048ac:	080048f1 	.word	0x080048f1
 80048b0:	080048f9 	.word	0x080048f9
 80048b4:	08004901 	.word	0x08004901
 80048b8:	08004909 	.word	0x08004909
 80048bc:	08004911 	.word	0x08004911
 80048c0:	08004919 	.word	0x08004919
 80048c4:	4b69      	ldr	r3, [pc, #420]	; (8004a6c <Load_EEPROM+0x804>)
 80048c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048ca:	809a      	strh	r2, [r3, #4]
 80048cc:	e02b      	b.n	8004926 <Load_EEPROM+0x6be>
 80048ce:	4b67      	ldr	r3, [pc, #412]	; (8004a6c <Load_EEPROM+0x804>)
 80048d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80048d4:	809a      	strh	r2, [r3, #4]
 80048d6:	e026      	b.n	8004926 <Load_EEPROM+0x6be>
 80048d8:	4b64      	ldr	r3, [pc, #400]	; (8004a6c <Load_EEPROM+0x804>)
 80048da:	22c8      	movs	r2, #200	; 0xc8
 80048dc:	809a      	strh	r2, [r3, #4]
 80048de:	e022      	b.n	8004926 <Load_EEPROM+0x6be>
 80048e0:	4b62      	ldr	r3, [pc, #392]	; (8004a6c <Load_EEPROM+0x804>)
 80048e2:	2264      	movs	r2, #100	; 0x64
 80048e4:	809a      	strh	r2, [r3, #4]
 80048e6:	e01e      	b.n	8004926 <Load_EEPROM+0x6be>
 80048e8:	4b60      	ldr	r3, [pc, #384]	; (8004a6c <Load_EEPROM+0x804>)
 80048ea:	2232      	movs	r2, #50	; 0x32
 80048ec:	809a      	strh	r2, [r3, #4]
 80048ee:	e01a      	b.n	8004926 <Load_EEPROM+0x6be>
 80048f0:	4b5e      	ldr	r3, [pc, #376]	; (8004a6c <Load_EEPROM+0x804>)
 80048f2:	2228      	movs	r2, #40	; 0x28
 80048f4:	809a      	strh	r2, [r3, #4]
 80048f6:	e016      	b.n	8004926 <Load_EEPROM+0x6be>
 80048f8:	4b5c      	ldr	r3, [pc, #368]	; (8004a6c <Load_EEPROM+0x804>)
 80048fa:	2214      	movs	r2, #20
 80048fc:	809a      	strh	r2, [r3, #4]
 80048fe:	e012      	b.n	8004926 <Load_EEPROM+0x6be>
 8004900:	4b5a      	ldr	r3, [pc, #360]	; (8004a6c <Load_EEPROM+0x804>)
 8004902:	220a      	movs	r2, #10
 8004904:	809a      	strh	r2, [r3, #4]
 8004906:	e00e      	b.n	8004926 <Load_EEPROM+0x6be>
 8004908:	4b58      	ldr	r3, [pc, #352]	; (8004a6c <Load_EEPROM+0x804>)
 800490a:	2205      	movs	r2, #5
 800490c:	809a      	strh	r2, [r3, #4]
 800490e:	e00a      	b.n	8004926 <Load_EEPROM+0x6be>
 8004910:	4b56      	ldr	r3, [pc, #344]	; (8004a6c <Load_EEPROM+0x804>)
 8004912:	2204      	movs	r2, #4
 8004914:	809a      	strh	r2, [r3, #4]
 8004916:	e006      	b.n	8004926 <Load_EEPROM+0x6be>
 8004918:	4b54      	ldr	r3, [pc, #336]	; (8004a6c <Load_EEPROM+0x804>)
 800491a:	2202      	movs	r2, #2
 800491c:	809a      	strh	r2, [r3, #4]
 800491e:	e002      	b.n	8004926 <Load_EEPROM+0x6be>
 8004920:	4b52      	ldr	r3, [pc, #328]	; (8004a6c <Load_EEPROM+0x804>)
 8004922:	2200      	movs	r2, #0
 8004924:	809a      	strh	r2, [r3, #4]
 8004926:	bf00      	nop

	aux = buffer[5] & 0x0f;
 8004928:	7b7b      	ldrb	r3, [r7, #13]
 800492a:	f003 030f 	and.w	r3, r3, #15
 800492e:	75fb      	strb	r3, [r7, #23]
	__BUFFER_TO_FREQ(aux, perCAN[RTC_MSG]);
 8004930:	7dfb      	ldrb	r3, [r7, #23]
 8004932:	3b01      	subs	r3, #1
 8004934:	2b0a      	cmp	r3, #10
 8004936:	d847      	bhi.n	80049c8 <Load_EEPROM+0x760>
 8004938:	a201      	add	r2, pc, #4	; (adr r2, 8004940 <Load_EEPROM+0x6d8>)
 800493a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493e:	bf00      	nop
 8004940:	0800496d 	.word	0x0800496d
 8004944:	08004977 	.word	0x08004977
 8004948:	08004981 	.word	0x08004981
 800494c:	08004989 	.word	0x08004989
 8004950:	08004991 	.word	0x08004991
 8004954:	08004999 	.word	0x08004999
 8004958:	080049a1 	.word	0x080049a1
 800495c:	080049a9 	.word	0x080049a9
 8004960:	080049b1 	.word	0x080049b1
 8004964:	080049b9 	.word	0x080049b9
 8004968:	080049c1 	.word	0x080049c1
 800496c:	4b3f      	ldr	r3, [pc, #252]	; (8004a6c <Load_EEPROM+0x804>)
 800496e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004972:	80da      	strh	r2, [r3, #6]
 8004974:	e02b      	b.n	80049ce <Load_EEPROM+0x766>
 8004976:	4b3d      	ldr	r3, [pc, #244]	; (8004a6c <Load_EEPROM+0x804>)
 8004978:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800497c:	80da      	strh	r2, [r3, #6]
 800497e:	e026      	b.n	80049ce <Load_EEPROM+0x766>
 8004980:	4b3a      	ldr	r3, [pc, #232]	; (8004a6c <Load_EEPROM+0x804>)
 8004982:	22c8      	movs	r2, #200	; 0xc8
 8004984:	80da      	strh	r2, [r3, #6]
 8004986:	e022      	b.n	80049ce <Load_EEPROM+0x766>
 8004988:	4b38      	ldr	r3, [pc, #224]	; (8004a6c <Load_EEPROM+0x804>)
 800498a:	2264      	movs	r2, #100	; 0x64
 800498c:	80da      	strh	r2, [r3, #6]
 800498e:	e01e      	b.n	80049ce <Load_EEPROM+0x766>
 8004990:	4b36      	ldr	r3, [pc, #216]	; (8004a6c <Load_EEPROM+0x804>)
 8004992:	2232      	movs	r2, #50	; 0x32
 8004994:	80da      	strh	r2, [r3, #6]
 8004996:	e01a      	b.n	80049ce <Load_EEPROM+0x766>
 8004998:	4b34      	ldr	r3, [pc, #208]	; (8004a6c <Load_EEPROM+0x804>)
 800499a:	2228      	movs	r2, #40	; 0x28
 800499c:	80da      	strh	r2, [r3, #6]
 800499e:	e016      	b.n	80049ce <Load_EEPROM+0x766>
 80049a0:	4b32      	ldr	r3, [pc, #200]	; (8004a6c <Load_EEPROM+0x804>)
 80049a2:	2214      	movs	r2, #20
 80049a4:	80da      	strh	r2, [r3, #6]
 80049a6:	e012      	b.n	80049ce <Load_EEPROM+0x766>
 80049a8:	4b30      	ldr	r3, [pc, #192]	; (8004a6c <Load_EEPROM+0x804>)
 80049aa:	220a      	movs	r2, #10
 80049ac:	80da      	strh	r2, [r3, #6]
 80049ae:	e00e      	b.n	80049ce <Load_EEPROM+0x766>
 80049b0:	4b2e      	ldr	r3, [pc, #184]	; (8004a6c <Load_EEPROM+0x804>)
 80049b2:	2205      	movs	r2, #5
 80049b4:	80da      	strh	r2, [r3, #6]
 80049b6:	e00a      	b.n	80049ce <Load_EEPROM+0x766>
 80049b8:	4b2c      	ldr	r3, [pc, #176]	; (8004a6c <Load_EEPROM+0x804>)
 80049ba:	2204      	movs	r2, #4
 80049bc:	80da      	strh	r2, [r3, #6]
 80049be:	e006      	b.n	80049ce <Load_EEPROM+0x766>
 80049c0:	4b2a      	ldr	r3, [pc, #168]	; (8004a6c <Load_EEPROM+0x804>)
 80049c2:	2202      	movs	r2, #2
 80049c4:	80da      	strh	r2, [r3, #6]
 80049c6:	e002      	b.n	80049ce <Load_EEPROM+0x766>
 80049c8:	4b28      	ldr	r3, [pc, #160]	; (8004a6c <Load_EEPROM+0x804>)
 80049ca:	2200      	movs	r2, #0
 80049cc:	80da      	strh	r2, [r3, #6]
 80049ce:	bf00      	nop

	aux = buffer[5] >> 4;
 80049d0:	7b7b      	ldrb	r3, [r7, #13]
 80049d2:	091b      	lsrs	r3, r3, #4
 80049d4:	75fb      	strb	r3, [r7, #23]
	__BUFFER_TO_FREQ(aux, perCAN[VERIFY_MSG]);
 80049d6:	7dfb      	ldrb	r3, [r7, #23]
 80049d8:	3b01      	subs	r3, #1
 80049da:	2b0a      	cmp	r3, #10
 80049dc:	d848      	bhi.n	8004a70 <Load_EEPROM+0x808>
 80049de:	a201      	add	r2, pc, #4	; (adr r2, 80049e4 <Load_EEPROM+0x77c>)
 80049e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049e4:	08004a11 	.word	0x08004a11
 80049e8:	08004a1b 	.word	0x08004a1b
 80049ec:	08004a25 	.word	0x08004a25
 80049f0:	08004a2d 	.word	0x08004a2d
 80049f4:	08004a35 	.word	0x08004a35
 80049f8:	08004a3d 	.word	0x08004a3d
 80049fc:	08004a45 	.word	0x08004a45
 8004a00:	08004a4d 	.word	0x08004a4d
 8004a04:	08004a55 	.word	0x08004a55
 8004a08:	08004a5d 	.word	0x08004a5d
 8004a0c:	08004a65 	.word	0x08004a65
 8004a10:	4b16      	ldr	r3, [pc, #88]	; (8004a6c <Load_EEPROM+0x804>)
 8004a12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a16:	811a      	strh	r2, [r3, #8]
 8004a18:	e02d      	b.n	8004a76 <Load_EEPROM+0x80e>
 8004a1a:	4b14      	ldr	r3, [pc, #80]	; (8004a6c <Load_EEPROM+0x804>)
 8004a1c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004a20:	811a      	strh	r2, [r3, #8]
 8004a22:	e028      	b.n	8004a76 <Load_EEPROM+0x80e>
 8004a24:	4b11      	ldr	r3, [pc, #68]	; (8004a6c <Load_EEPROM+0x804>)
 8004a26:	22c8      	movs	r2, #200	; 0xc8
 8004a28:	811a      	strh	r2, [r3, #8]
 8004a2a:	e024      	b.n	8004a76 <Load_EEPROM+0x80e>
 8004a2c:	4b0f      	ldr	r3, [pc, #60]	; (8004a6c <Load_EEPROM+0x804>)
 8004a2e:	2264      	movs	r2, #100	; 0x64
 8004a30:	811a      	strh	r2, [r3, #8]
 8004a32:	e020      	b.n	8004a76 <Load_EEPROM+0x80e>
 8004a34:	4b0d      	ldr	r3, [pc, #52]	; (8004a6c <Load_EEPROM+0x804>)
 8004a36:	2232      	movs	r2, #50	; 0x32
 8004a38:	811a      	strh	r2, [r3, #8]
 8004a3a:	e01c      	b.n	8004a76 <Load_EEPROM+0x80e>
 8004a3c:	4b0b      	ldr	r3, [pc, #44]	; (8004a6c <Load_EEPROM+0x804>)
 8004a3e:	2228      	movs	r2, #40	; 0x28
 8004a40:	811a      	strh	r2, [r3, #8]
 8004a42:	e018      	b.n	8004a76 <Load_EEPROM+0x80e>
 8004a44:	4b09      	ldr	r3, [pc, #36]	; (8004a6c <Load_EEPROM+0x804>)
 8004a46:	2214      	movs	r2, #20
 8004a48:	811a      	strh	r2, [r3, #8]
 8004a4a:	e014      	b.n	8004a76 <Load_EEPROM+0x80e>
 8004a4c:	4b07      	ldr	r3, [pc, #28]	; (8004a6c <Load_EEPROM+0x804>)
 8004a4e:	220a      	movs	r2, #10
 8004a50:	811a      	strh	r2, [r3, #8]
 8004a52:	e010      	b.n	8004a76 <Load_EEPROM+0x80e>
 8004a54:	4b05      	ldr	r3, [pc, #20]	; (8004a6c <Load_EEPROM+0x804>)
 8004a56:	2205      	movs	r2, #5
 8004a58:	811a      	strh	r2, [r3, #8]
 8004a5a:	e00c      	b.n	8004a76 <Load_EEPROM+0x80e>
 8004a5c:	4b03      	ldr	r3, [pc, #12]	; (8004a6c <Load_EEPROM+0x804>)
 8004a5e:	2204      	movs	r2, #4
 8004a60:	811a      	strh	r2, [r3, #8]
 8004a62:	e008      	b.n	8004a76 <Load_EEPROM+0x80e>
 8004a64:	4b01      	ldr	r3, [pc, #4]	; (8004a6c <Load_EEPROM+0x804>)
 8004a66:	2202      	movs	r2, #2
 8004a68:	811a      	strh	r2, [r3, #8]
 8004a6a:	e004      	b.n	8004a76 <Load_EEPROM+0x80e>
 8004a6c:	20012730 	.word	0x20012730
 8004a70:	4b1a      	ldr	r3, [pc, #104]	; (8004adc <Load_EEPROM+0x874>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	811a      	strh	r2, [r3, #8]
 8004a76:	bf00      	nop

	inputConfig 	 = buffer[6];
 8004a78:	7bba      	ldrb	r2, [r7, #14]
 8004a7a:	4b19      	ldr	r3, [pc, #100]	; (8004ae0 <Load_EEPROM+0x878>)
 8004a7c:	701a      	strb	r2, [r3, #0]
	thresholdBeacon	 = buffer[7] << 8;
 8004a7e:	7bfb      	ldrb	r3, [r7, #15]
 8004a80:	021b      	lsls	r3, r3, #8
 8004a82:	b21a      	sxth	r2, r3
 8004a84:	4b17      	ldr	r3, [pc, #92]	; (8004ae4 <Load_EEPROM+0x87c>)
 8004a86:	801a      	strh	r2, [r3, #0]
	thresholdBeacon |= buffer[8] & 0xff;
 8004a88:	7c3b      	ldrb	r3, [r7, #16]
 8004a8a:	b21a      	sxth	r2, r3
 8004a8c:	4b15      	ldr	r3, [pc, #84]	; (8004ae4 <Load_EEPROM+0x87c>)
 8004a8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	b21a      	sxth	r2, r3
 8004a96:	4b13      	ldr	r3, [pc, #76]	; (8004ae4 <Load_EEPROM+0x87c>)
 8004a98:	801a      	strh	r2, [r3, #0]
	thresholdRPM	 = buffer[9] << 8;
 8004a9a:	7c7b      	ldrb	r3, [r7, #17]
 8004a9c:	021b      	lsls	r3, r3, #8
 8004a9e:	b21a      	sxth	r2, r3
 8004aa0:	4b11      	ldr	r3, [pc, #68]	; (8004ae8 <Load_EEPROM+0x880>)
 8004aa2:	801a      	strh	r2, [r3, #0]
	thresholdRPM	|= buffer[10] & 0xff;
 8004aa4:	7cbb      	ldrb	r3, [r7, #18]
 8004aa6:	b21a      	sxth	r2, r3
 8004aa8:	4b0f      	ldr	r3, [pc, #60]	; (8004ae8 <Load_EEPROM+0x880>)
 8004aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	b21a      	sxth	r2, r3
 8004ab2:	4b0d      	ldr	r3, [pc, #52]	; (8004ae8 <Load_EEPROM+0x880>)
 8004ab4:	801a      	strh	r2, [r3, #0]
	thresholdSpeed	 = buffer[11] << 8;
 8004ab6:	7cfb      	ldrb	r3, [r7, #19]
 8004ab8:	021b      	lsls	r3, r3, #8
 8004aba:	b21a      	sxth	r2, r3
 8004abc:	4b0b      	ldr	r3, [pc, #44]	; (8004aec <Load_EEPROM+0x884>)
 8004abe:	801a      	strh	r2, [r3, #0]
	thresholdSpeed	|= buffer[12] & 0xff;
 8004ac0:	7d3b      	ldrb	r3, [r7, #20]
 8004ac2:	b21a      	sxth	r2, r3
 8004ac4:	4b09      	ldr	r3, [pc, #36]	; (8004aec <Load_EEPROM+0x884>)
 8004ac6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	b21a      	sxth	r2, r3
 8004ace:	4b07      	ldr	r3, [pc, #28]	; (8004aec <Load_EEPROM+0x884>)
 8004ad0:	801a      	strh	r2, [r3, #0]

	return retVal;
 8004ad2:	7dbb      	ldrb	r3, [r7, #22]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3718      	adds	r7, #24
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	20012730 	.word	0x20012730
 8004ae0:	20012714 	.word	0x20012714
 8004ae4:	2001063a 	.word	0x2001063a
 8004ae8:	2001063c 	.word	0x2001063c
 8004aec:	2001063e 	.word	0x2001063e

08004af0 <Save_EEPROM>:

static HAL_StatusTypeDef Save_EEPROM(I2C_HandleTypeDef* hi2c)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b08a      	sub	sp, #40	; 0x28
 8004af4:	af04      	add	r7, sp, #16
 8004af6:	6078      	str	r0, [r7, #4]
	uint8_t aux = 0;
 8004af8:	2300      	movs	r3, #0
 8004afa:	75fb      	strb	r3, [r7, #23]
	uint8_t buffer[EEPROM_BUFFER_SIZE];

	__FREQ_TO_BUFFER(aux, perMsg[ANALOG_1_4]);
 8004afc:	4baa      	ldr	r3, [pc, #680]	; (8004da8 <Save_EEPROM+0x2b8>)
 8004afe:	881b      	ldrh	r3, [r3, #0]
 8004b00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b04:	f000 8081 	beq.w	8004c0a <Save_EEPROM+0x11a>
 8004b08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b0c:	f300 809e 	bgt.w	8004c4c <Save_EEPROM+0x15c>
 8004b10:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004b14:	d07c      	beq.n	8004c10 <Save_EEPROM+0x120>
 8004b16:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004b1a:	f300 8097 	bgt.w	8004c4c <Save_EEPROM+0x15c>
 8004b1e:	2bc8      	cmp	r3, #200	; 0xc8
 8004b20:	d079      	beq.n	8004c16 <Save_EEPROM+0x126>
 8004b22:	2bc8      	cmp	r3, #200	; 0xc8
 8004b24:	f300 8092 	bgt.w	8004c4c <Save_EEPROM+0x15c>
 8004b28:	2b32      	cmp	r3, #50	; 0x32
 8004b2a:	dc6b      	bgt.n	8004c04 <Save_EEPROM+0x114>
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	f2c0 808d 	blt.w	8004c4c <Save_EEPROM+0x15c>
 8004b32:	3b02      	subs	r3, #2
 8004b34:	2b30      	cmp	r3, #48	; 0x30
 8004b36:	f200 8089 	bhi.w	8004c4c <Save_EEPROM+0x15c>
 8004b3a:	a201      	add	r2, pc, #4	; (adr r2, 8004b40 <Save_EEPROM+0x50>)
 8004b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b40:	08004c47 	.word	0x08004c47
 8004b44:	08004c4d 	.word	0x08004c4d
 8004b48:	08004c41 	.word	0x08004c41
 8004b4c:	08004c3b 	.word	0x08004c3b
 8004b50:	08004c4d 	.word	0x08004c4d
 8004b54:	08004c4d 	.word	0x08004c4d
 8004b58:	08004c4d 	.word	0x08004c4d
 8004b5c:	08004c4d 	.word	0x08004c4d
 8004b60:	08004c35 	.word	0x08004c35
 8004b64:	08004c4d 	.word	0x08004c4d
 8004b68:	08004c4d 	.word	0x08004c4d
 8004b6c:	08004c4d 	.word	0x08004c4d
 8004b70:	08004c4d 	.word	0x08004c4d
 8004b74:	08004c4d 	.word	0x08004c4d
 8004b78:	08004c4d 	.word	0x08004c4d
 8004b7c:	08004c4d 	.word	0x08004c4d
 8004b80:	08004c4d 	.word	0x08004c4d
 8004b84:	08004c4d 	.word	0x08004c4d
 8004b88:	08004c2f 	.word	0x08004c2f
 8004b8c:	08004c4d 	.word	0x08004c4d
 8004b90:	08004c4d 	.word	0x08004c4d
 8004b94:	08004c4d 	.word	0x08004c4d
 8004b98:	08004c4d 	.word	0x08004c4d
 8004b9c:	08004c4d 	.word	0x08004c4d
 8004ba0:	08004c4d 	.word	0x08004c4d
 8004ba4:	08004c4d 	.word	0x08004c4d
 8004ba8:	08004c4d 	.word	0x08004c4d
 8004bac:	08004c4d 	.word	0x08004c4d
 8004bb0:	08004c4d 	.word	0x08004c4d
 8004bb4:	08004c4d 	.word	0x08004c4d
 8004bb8:	08004c4d 	.word	0x08004c4d
 8004bbc:	08004c4d 	.word	0x08004c4d
 8004bc0:	08004c4d 	.word	0x08004c4d
 8004bc4:	08004c4d 	.word	0x08004c4d
 8004bc8:	08004c4d 	.word	0x08004c4d
 8004bcc:	08004c4d 	.word	0x08004c4d
 8004bd0:	08004c4d 	.word	0x08004c4d
 8004bd4:	08004c4d 	.word	0x08004c4d
 8004bd8:	08004c29 	.word	0x08004c29
 8004bdc:	08004c4d 	.word	0x08004c4d
 8004be0:	08004c4d 	.word	0x08004c4d
 8004be4:	08004c4d 	.word	0x08004c4d
 8004be8:	08004c4d 	.word	0x08004c4d
 8004bec:	08004c4d 	.word	0x08004c4d
 8004bf0:	08004c4d 	.word	0x08004c4d
 8004bf4:	08004c4d 	.word	0x08004c4d
 8004bf8:	08004c4d 	.word	0x08004c4d
 8004bfc:	08004c4d 	.word	0x08004c4d
 8004c00:	08004c23 	.word	0x08004c23
 8004c04:	2b64      	cmp	r3, #100	; 0x64
 8004c06:	d009      	beq.n	8004c1c <Save_EEPROM+0x12c>
 8004c08:	e020      	b.n	8004c4c <Save_EEPROM+0x15c>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	75fb      	strb	r3, [r7, #23]
 8004c0e:	e01f      	b.n	8004c50 <Save_EEPROM+0x160>
 8004c10:	2302      	movs	r3, #2
 8004c12:	75fb      	strb	r3, [r7, #23]
 8004c14:	e01c      	b.n	8004c50 <Save_EEPROM+0x160>
 8004c16:	2303      	movs	r3, #3
 8004c18:	75fb      	strb	r3, [r7, #23]
 8004c1a:	e019      	b.n	8004c50 <Save_EEPROM+0x160>
 8004c1c:	2304      	movs	r3, #4
 8004c1e:	75fb      	strb	r3, [r7, #23]
 8004c20:	e016      	b.n	8004c50 <Save_EEPROM+0x160>
 8004c22:	2305      	movs	r3, #5
 8004c24:	75fb      	strb	r3, [r7, #23]
 8004c26:	e013      	b.n	8004c50 <Save_EEPROM+0x160>
 8004c28:	2306      	movs	r3, #6
 8004c2a:	75fb      	strb	r3, [r7, #23]
 8004c2c:	e010      	b.n	8004c50 <Save_EEPROM+0x160>
 8004c2e:	2307      	movs	r3, #7
 8004c30:	75fb      	strb	r3, [r7, #23]
 8004c32:	e00d      	b.n	8004c50 <Save_EEPROM+0x160>
 8004c34:	2308      	movs	r3, #8
 8004c36:	75fb      	strb	r3, [r7, #23]
 8004c38:	e00a      	b.n	8004c50 <Save_EEPROM+0x160>
 8004c3a:	2309      	movs	r3, #9
 8004c3c:	75fb      	strb	r3, [r7, #23]
 8004c3e:	e007      	b.n	8004c50 <Save_EEPROM+0x160>
 8004c40:	230a      	movs	r3, #10
 8004c42:	75fb      	strb	r3, [r7, #23]
 8004c44:	e004      	b.n	8004c50 <Save_EEPROM+0x160>
 8004c46:	230b      	movs	r3, #11
 8004c48:	75fb      	strb	r3, [r7, #23]
 8004c4a:	e001      	b.n	8004c50 <Save_EEPROM+0x160>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	75fb      	strb	r3, [r7, #23]
 8004c50:	bf00      	nop
	buffer[0] = aux;
 8004c52:	7dfb      	ldrb	r3, [r7, #23]
 8004c54:	723b      	strb	r3, [r7, #8]

	__FREQ_TO_BUFFER(aux, perMsg[ANALOG_5_8]);
 8004c56:	4b54      	ldr	r3, [pc, #336]	; (8004da8 <Save_EEPROM+0x2b8>)
 8004c58:	885b      	ldrh	r3, [r3, #2]
 8004c5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c5e:	f000 8082 	beq.w	8004d66 <Save_EEPROM+0x276>
 8004c62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c66:	f300 80a1 	bgt.w	8004dac <Save_EEPROM+0x2bc>
 8004c6a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004c6e:	d07d      	beq.n	8004d6c <Save_EEPROM+0x27c>
 8004c70:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004c74:	f300 809a 	bgt.w	8004dac <Save_EEPROM+0x2bc>
 8004c78:	2bc8      	cmp	r3, #200	; 0xc8
 8004c7a:	d07a      	beq.n	8004d72 <Save_EEPROM+0x282>
 8004c7c:	2bc8      	cmp	r3, #200	; 0xc8
 8004c7e:	f300 8095 	bgt.w	8004dac <Save_EEPROM+0x2bc>
 8004c82:	2b32      	cmp	r3, #50	; 0x32
 8004c84:	dc6c      	bgt.n	8004d60 <Save_EEPROM+0x270>
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	f2c0 8090 	blt.w	8004dac <Save_EEPROM+0x2bc>
 8004c8c:	3b02      	subs	r3, #2
 8004c8e:	2b30      	cmp	r3, #48	; 0x30
 8004c90:	f200 808c 	bhi.w	8004dac <Save_EEPROM+0x2bc>
 8004c94:	a201      	add	r2, pc, #4	; (adr r2, 8004c9c <Save_EEPROM+0x1ac>)
 8004c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9a:	bf00      	nop
 8004c9c:	08004da3 	.word	0x08004da3
 8004ca0:	08004dad 	.word	0x08004dad
 8004ca4:	08004d9d 	.word	0x08004d9d
 8004ca8:	08004d97 	.word	0x08004d97
 8004cac:	08004dad 	.word	0x08004dad
 8004cb0:	08004dad 	.word	0x08004dad
 8004cb4:	08004dad 	.word	0x08004dad
 8004cb8:	08004dad 	.word	0x08004dad
 8004cbc:	08004d91 	.word	0x08004d91
 8004cc0:	08004dad 	.word	0x08004dad
 8004cc4:	08004dad 	.word	0x08004dad
 8004cc8:	08004dad 	.word	0x08004dad
 8004ccc:	08004dad 	.word	0x08004dad
 8004cd0:	08004dad 	.word	0x08004dad
 8004cd4:	08004dad 	.word	0x08004dad
 8004cd8:	08004dad 	.word	0x08004dad
 8004cdc:	08004dad 	.word	0x08004dad
 8004ce0:	08004dad 	.word	0x08004dad
 8004ce4:	08004d8b 	.word	0x08004d8b
 8004ce8:	08004dad 	.word	0x08004dad
 8004cec:	08004dad 	.word	0x08004dad
 8004cf0:	08004dad 	.word	0x08004dad
 8004cf4:	08004dad 	.word	0x08004dad
 8004cf8:	08004dad 	.word	0x08004dad
 8004cfc:	08004dad 	.word	0x08004dad
 8004d00:	08004dad 	.word	0x08004dad
 8004d04:	08004dad 	.word	0x08004dad
 8004d08:	08004dad 	.word	0x08004dad
 8004d0c:	08004dad 	.word	0x08004dad
 8004d10:	08004dad 	.word	0x08004dad
 8004d14:	08004dad 	.word	0x08004dad
 8004d18:	08004dad 	.word	0x08004dad
 8004d1c:	08004dad 	.word	0x08004dad
 8004d20:	08004dad 	.word	0x08004dad
 8004d24:	08004dad 	.word	0x08004dad
 8004d28:	08004dad 	.word	0x08004dad
 8004d2c:	08004dad 	.word	0x08004dad
 8004d30:	08004dad 	.word	0x08004dad
 8004d34:	08004d85 	.word	0x08004d85
 8004d38:	08004dad 	.word	0x08004dad
 8004d3c:	08004dad 	.word	0x08004dad
 8004d40:	08004dad 	.word	0x08004dad
 8004d44:	08004dad 	.word	0x08004dad
 8004d48:	08004dad 	.word	0x08004dad
 8004d4c:	08004dad 	.word	0x08004dad
 8004d50:	08004dad 	.word	0x08004dad
 8004d54:	08004dad 	.word	0x08004dad
 8004d58:	08004dad 	.word	0x08004dad
 8004d5c:	08004d7f 	.word	0x08004d7f
 8004d60:	2b64      	cmp	r3, #100	; 0x64
 8004d62:	d009      	beq.n	8004d78 <Save_EEPROM+0x288>
 8004d64:	e022      	b.n	8004dac <Save_EEPROM+0x2bc>
 8004d66:	2301      	movs	r3, #1
 8004d68:	75fb      	strb	r3, [r7, #23]
 8004d6a:	e021      	b.n	8004db0 <Save_EEPROM+0x2c0>
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	75fb      	strb	r3, [r7, #23]
 8004d70:	e01e      	b.n	8004db0 <Save_EEPROM+0x2c0>
 8004d72:	2303      	movs	r3, #3
 8004d74:	75fb      	strb	r3, [r7, #23]
 8004d76:	e01b      	b.n	8004db0 <Save_EEPROM+0x2c0>
 8004d78:	2304      	movs	r3, #4
 8004d7a:	75fb      	strb	r3, [r7, #23]
 8004d7c:	e018      	b.n	8004db0 <Save_EEPROM+0x2c0>
 8004d7e:	2305      	movs	r3, #5
 8004d80:	75fb      	strb	r3, [r7, #23]
 8004d82:	e015      	b.n	8004db0 <Save_EEPROM+0x2c0>
 8004d84:	2306      	movs	r3, #6
 8004d86:	75fb      	strb	r3, [r7, #23]
 8004d88:	e012      	b.n	8004db0 <Save_EEPROM+0x2c0>
 8004d8a:	2307      	movs	r3, #7
 8004d8c:	75fb      	strb	r3, [r7, #23]
 8004d8e:	e00f      	b.n	8004db0 <Save_EEPROM+0x2c0>
 8004d90:	2308      	movs	r3, #8
 8004d92:	75fb      	strb	r3, [r7, #23]
 8004d94:	e00c      	b.n	8004db0 <Save_EEPROM+0x2c0>
 8004d96:	2309      	movs	r3, #9
 8004d98:	75fb      	strb	r3, [r7, #23]
 8004d9a:	e009      	b.n	8004db0 <Save_EEPROM+0x2c0>
 8004d9c:	230a      	movs	r3, #10
 8004d9e:	75fb      	strb	r3, [r7, #23]
 8004da0:	e006      	b.n	8004db0 <Save_EEPROM+0x2c0>
 8004da2:	230b      	movs	r3, #11
 8004da4:	75fb      	strb	r3, [r7, #23]
 8004da6:	e003      	b.n	8004db0 <Save_EEPROM+0x2c0>
 8004da8:	2001273c 	.word	0x2001273c
 8004dac:	2300      	movs	r3, #0
 8004dae:	75fb      	strb	r3, [r7, #23]
 8004db0:	bf00      	nop
	buffer[0] |= aux << 4;
 8004db2:	7a3b      	ldrb	r3, [r7, #8]
 8004db4:	b25a      	sxtb	r2, r3
 8004db6:	7dfb      	ldrb	r3, [r7, #23]
 8004db8:	011b      	lsls	r3, r3, #4
 8004dba:	b25b      	sxtb	r3, r3
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	b25b      	sxtb	r3, r3
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	723b      	strb	r3, [r7, #8]

	__FREQ_TO_BUFFER(aux, perMsg[ANALOG_9_12]);
 8004dc4:	4baa      	ldr	r3, [pc, #680]	; (8005070 <Save_EEPROM+0x580>)
 8004dc6:	889b      	ldrh	r3, [r3, #4]
 8004dc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dcc:	f000 8081 	beq.w	8004ed2 <Save_EEPROM+0x3e2>
 8004dd0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dd4:	f300 809e 	bgt.w	8004f14 <Save_EEPROM+0x424>
 8004dd8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004ddc:	d07c      	beq.n	8004ed8 <Save_EEPROM+0x3e8>
 8004dde:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004de2:	f300 8097 	bgt.w	8004f14 <Save_EEPROM+0x424>
 8004de6:	2bc8      	cmp	r3, #200	; 0xc8
 8004de8:	d079      	beq.n	8004ede <Save_EEPROM+0x3ee>
 8004dea:	2bc8      	cmp	r3, #200	; 0xc8
 8004dec:	f300 8092 	bgt.w	8004f14 <Save_EEPROM+0x424>
 8004df0:	2b32      	cmp	r3, #50	; 0x32
 8004df2:	dc6b      	bgt.n	8004ecc <Save_EEPROM+0x3dc>
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	f2c0 808d 	blt.w	8004f14 <Save_EEPROM+0x424>
 8004dfa:	3b02      	subs	r3, #2
 8004dfc:	2b30      	cmp	r3, #48	; 0x30
 8004dfe:	f200 8089 	bhi.w	8004f14 <Save_EEPROM+0x424>
 8004e02:	a201      	add	r2, pc, #4	; (adr r2, 8004e08 <Save_EEPROM+0x318>)
 8004e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e08:	08004f0f 	.word	0x08004f0f
 8004e0c:	08004f15 	.word	0x08004f15
 8004e10:	08004f09 	.word	0x08004f09
 8004e14:	08004f03 	.word	0x08004f03
 8004e18:	08004f15 	.word	0x08004f15
 8004e1c:	08004f15 	.word	0x08004f15
 8004e20:	08004f15 	.word	0x08004f15
 8004e24:	08004f15 	.word	0x08004f15
 8004e28:	08004efd 	.word	0x08004efd
 8004e2c:	08004f15 	.word	0x08004f15
 8004e30:	08004f15 	.word	0x08004f15
 8004e34:	08004f15 	.word	0x08004f15
 8004e38:	08004f15 	.word	0x08004f15
 8004e3c:	08004f15 	.word	0x08004f15
 8004e40:	08004f15 	.word	0x08004f15
 8004e44:	08004f15 	.word	0x08004f15
 8004e48:	08004f15 	.word	0x08004f15
 8004e4c:	08004f15 	.word	0x08004f15
 8004e50:	08004ef7 	.word	0x08004ef7
 8004e54:	08004f15 	.word	0x08004f15
 8004e58:	08004f15 	.word	0x08004f15
 8004e5c:	08004f15 	.word	0x08004f15
 8004e60:	08004f15 	.word	0x08004f15
 8004e64:	08004f15 	.word	0x08004f15
 8004e68:	08004f15 	.word	0x08004f15
 8004e6c:	08004f15 	.word	0x08004f15
 8004e70:	08004f15 	.word	0x08004f15
 8004e74:	08004f15 	.word	0x08004f15
 8004e78:	08004f15 	.word	0x08004f15
 8004e7c:	08004f15 	.word	0x08004f15
 8004e80:	08004f15 	.word	0x08004f15
 8004e84:	08004f15 	.word	0x08004f15
 8004e88:	08004f15 	.word	0x08004f15
 8004e8c:	08004f15 	.word	0x08004f15
 8004e90:	08004f15 	.word	0x08004f15
 8004e94:	08004f15 	.word	0x08004f15
 8004e98:	08004f15 	.word	0x08004f15
 8004e9c:	08004f15 	.word	0x08004f15
 8004ea0:	08004ef1 	.word	0x08004ef1
 8004ea4:	08004f15 	.word	0x08004f15
 8004ea8:	08004f15 	.word	0x08004f15
 8004eac:	08004f15 	.word	0x08004f15
 8004eb0:	08004f15 	.word	0x08004f15
 8004eb4:	08004f15 	.word	0x08004f15
 8004eb8:	08004f15 	.word	0x08004f15
 8004ebc:	08004f15 	.word	0x08004f15
 8004ec0:	08004f15 	.word	0x08004f15
 8004ec4:	08004f15 	.word	0x08004f15
 8004ec8:	08004eeb 	.word	0x08004eeb
 8004ecc:	2b64      	cmp	r3, #100	; 0x64
 8004ece:	d009      	beq.n	8004ee4 <Save_EEPROM+0x3f4>
 8004ed0:	e020      	b.n	8004f14 <Save_EEPROM+0x424>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	75fb      	strb	r3, [r7, #23]
 8004ed6:	e01f      	b.n	8004f18 <Save_EEPROM+0x428>
 8004ed8:	2302      	movs	r3, #2
 8004eda:	75fb      	strb	r3, [r7, #23]
 8004edc:	e01c      	b.n	8004f18 <Save_EEPROM+0x428>
 8004ede:	2303      	movs	r3, #3
 8004ee0:	75fb      	strb	r3, [r7, #23]
 8004ee2:	e019      	b.n	8004f18 <Save_EEPROM+0x428>
 8004ee4:	2304      	movs	r3, #4
 8004ee6:	75fb      	strb	r3, [r7, #23]
 8004ee8:	e016      	b.n	8004f18 <Save_EEPROM+0x428>
 8004eea:	2305      	movs	r3, #5
 8004eec:	75fb      	strb	r3, [r7, #23]
 8004eee:	e013      	b.n	8004f18 <Save_EEPROM+0x428>
 8004ef0:	2306      	movs	r3, #6
 8004ef2:	75fb      	strb	r3, [r7, #23]
 8004ef4:	e010      	b.n	8004f18 <Save_EEPROM+0x428>
 8004ef6:	2307      	movs	r3, #7
 8004ef8:	75fb      	strb	r3, [r7, #23]
 8004efa:	e00d      	b.n	8004f18 <Save_EEPROM+0x428>
 8004efc:	2308      	movs	r3, #8
 8004efe:	75fb      	strb	r3, [r7, #23]
 8004f00:	e00a      	b.n	8004f18 <Save_EEPROM+0x428>
 8004f02:	2309      	movs	r3, #9
 8004f04:	75fb      	strb	r3, [r7, #23]
 8004f06:	e007      	b.n	8004f18 <Save_EEPROM+0x428>
 8004f08:	230a      	movs	r3, #10
 8004f0a:	75fb      	strb	r3, [r7, #23]
 8004f0c:	e004      	b.n	8004f18 <Save_EEPROM+0x428>
 8004f0e:	230b      	movs	r3, #11
 8004f10:	75fb      	strb	r3, [r7, #23]
 8004f12:	e001      	b.n	8004f18 <Save_EEPROM+0x428>
 8004f14:	2300      	movs	r3, #0
 8004f16:	75fb      	strb	r3, [r7, #23]
 8004f18:	bf00      	nop
	buffer[1] = aux;
 8004f1a:	7dfb      	ldrb	r3, [r7, #23]
 8004f1c:	727b      	strb	r3, [r7, #9]

	__FREQ_TO_BUFFER(aux, perMsg[RTC_MSG]);
 8004f1e:	4b54      	ldr	r3, [pc, #336]	; (8005070 <Save_EEPROM+0x580>)
 8004f20:	88db      	ldrh	r3, [r3, #6]
 8004f22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f26:	f000 8082 	beq.w	800502e <Save_EEPROM+0x53e>
 8004f2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f2e:	f300 80a1 	bgt.w	8005074 <Save_EEPROM+0x584>
 8004f32:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004f36:	d07d      	beq.n	8005034 <Save_EEPROM+0x544>
 8004f38:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004f3c:	f300 809a 	bgt.w	8005074 <Save_EEPROM+0x584>
 8004f40:	2bc8      	cmp	r3, #200	; 0xc8
 8004f42:	d07a      	beq.n	800503a <Save_EEPROM+0x54a>
 8004f44:	2bc8      	cmp	r3, #200	; 0xc8
 8004f46:	f300 8095 	bgt.w	8005074 <Save_EEPROM+0x584>
 8004f4a:	2b32      	cmp	r3, #50	; 0x32
 8004f4c:	dc6c      	bgt.n	8005028 <Save_EEPROM+0x538>
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	f2c0 8090 	blt.w	8005074 <Save_EEPROM+0x584>
 8004f54:	3b02      	subs	r3, #2
 8004f56:	2b30      	cmp	r3, #48	; 0x30
 8004f58:	f200 808c 	bhi.w	8005074 <Save_EEPROM+0x584>
 8004f5c:	a201      	add	r2, pc, #4	; (adr r2, 8004f64 <Save_EEPROM+0x474>)
 8004f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f62:	bf00      	nop
 8004f64:	0800506b 	.word	0x0800506b
 8004f68:	08005075 	.word	0x08005075
 8004f6c:	08005065 	.word	0x08005065
 8004f70:	0800505f 	.word	0x0800505f
 8004f74:	08005075 	.word	0x08005075
 8004f78:	08005075 	.word	0x08005075
 8004f7c:	08005075 	.word	0x08005075
 8004f80:	08005075 	.word	0x08005075
 8004f84:	08005059 	.word	0x08005059
 8004f88:	08005075 	.word	0x08005075
 8004f8c:	08005075 	.word	0x08005075
 8004f90:	08005075 	.word	0x08005075
 8004f94:	08005075 	.word	0x08005075
 8004f98:	08005075 	.word	0x08005075
 8004f9c:	08005075 	.word	0x08005075
 8004fa0:	08005075 	.word	0x08005075
 8004fa4:	08005075 	.word	0x08005075
 8004fa8:	08005075 	.word	0x08005075
 8004fac:	08005053 	.word	0x08005053
 8004fb0:	08005075 	.word	0x08005075
 8004fb4:	08005075 	.word	0x08005075
 8004fb8:	08005075 	.word	0x08005075
 8004fbc:	08005075 	.word	0x08005075
 8004fc0:	08005075 	.word	0x08005075
 8004fc4:	08005075 	.word	0x08005075
 8004fc8:	08005075 	.word	0x08005075
 8004fcc:	08005075 	.word	0x08005075
 8004fd0:	08005075 	.word	0x08005075
 8004fd4:	08005075 	.word	0x08005075
 8004fd8:	08005075 	.word	0x08005075
 8004fdc:	08005075 	.word	0x08005075
 8004fe0:	08005075 	.word	0x08005075
 8004fe4:	08005075 	.word	0x08005075
 8004fe8:	08005075 	.word	0x08005075
 8004fec:	08005075 	.word	0x08005075
 8004ff0:	08005075 	.word	0x08005075
 8004ff4:	08005075 	.word	0x08005075
 8004ff8:	08005075 	.word	0x08005075
 8004ffc:	0800504d 	.word	0x0800504d
 8005000:	08005075 	.word	0x08005075
 8005004:	08005075 	.word	0x08005075
 8005008:	08005075 	.word	0x08005075
 800500c:	08005075 	.word	0x08005075
 8005010:	08005075 	.word	0x08005075
 8005014:	08005075 	.word	0x08005075
 8005018:	08005075 	.word	0x08005075
 800501c:	08005075 	.word	0x08005075
 8005020:	08005075 	.word	0x08005075
 8005024:	08005047 	.word	0x08005047
 8005028:	2b64      	cmp	r3, #100	; 0x64
 800502a:	d009      	beq.n	8005040 <Save_EEPROM+0x550>
 800502c:	e022      	b.n	8005074 <Save_EEPROM+0x584>
 800502e:	2301      	movs	r3, #1
 8005030:	75fb      	strb	r3, [r7, #23]
 8005032:	e021      	b.n	8005078 <Save_EEPROM+0x588>
 8005034:	2302      	movs	r3, #2
 8005036:	75fb      	strb	r3, [r7, #23]
 8005038:	e01e      	b.n	8005078 <Save_EEPROM+0x588>
 800503a:	2303      	movs	r3, #3
 800503c:	75fb      	strb	r3, [r7, #23]
 800503e:	e01b      	b.n	8005078 <Save_EEPROM+0x588>
 8005040:	2304      	movs	r3, #4
 8005042:	75fb      	strb	r3, [r7, #23]
 8005044:	e018      	b.n	8005078 <Save_EEPROM+0x588>
 8005046:	2305      	movs	r3, #5
 8005048:	75fb      	strb	r3, [r7, #23]
 800504a:	e015      	b.n	8005078 <Save_EEPROM+0x588>
 800504c:	2306      	movs	r3, #6
 800504e:	75fb      	strb	r3, [r7, #23]
 8005050:	e012      	b.n	8005078 <Save_EEPROM+0x588>
 8005052:	2307      	movs	r3, #7
 8005054:	75fb      	strb	r3, [r7, #23]
 8005056:	e00f      	b.n	8005078 <Save_EEPROM+0x588>
 8005058:	2308      	movs	r3, #8
 800505a:	75fb      	strb	r3, [r7, #23]
 800505c:	e00c      	b.n	8005078 <Save_EEPROM+0x588>
 800505e:	2309      	movs	r3, #9
 8005060:	75fb      	strb	r3, [r7, #23]
 8005062:	e009      	b.n	8005078 <Save_EEPROM+0x588>
 8005064:	230a      	movs	r3, #10
 8005066:	75fb      	strb	r3, [r7, #23]
 8005068:	e006      	b.n	8005078 <Save_EEPROM+0x588>
 800506a:	230b      	movs	r3, #11
 800506c:	75fb      	strb	r3, [r7, #23]
 800506e:	e003      	b.n	8005078 <Save_EEPROM+0x588>
 8005070:	2001273c 	.word	0x2001273c
 8005074:	2300      	movs	r3, #0
 8005076:	75fb      	strb	r3, [r7, #23]
 8005078:	bf00      	nop
	buffer[1] |= aux << 4;
 800507a:	7a7b      	ldrb	r3, [r7, #9]
 800507c:	b25a      	sxtb	r2, r3
 800507e:	7dfb      	ldrb	r3, [r7, #23]
 8005080:	011b      	lsls	r3, r3, #4
 8005082:	b25b      	sxtb	r3, r3
 8005084:	4313      	orrs	r3, r2
 8005086:	b25b      	sxtb	r3, r3
 8005088:	b2db      	uxtb	r3, r3
 800508a:	727b      	strb	r3, [r7, #9]

	__FREQ_TO_BUFFER(aux, perMsg[VERIFY_MSG]);
 800508c:	4baa      	ldr	r3, [pc, #680]	; (8005338 <Save_EEPROM+0x848>)
 800508e:	891b      	ldrh	r3, [r3, #8]
 8005090:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005094:	f000 8081 	beq.w	800519a <Save_EEPROM+0x6aa>
 8005098:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800509c:	f300 809e 	bgt.w	80051dc <Save_EEPROM+0x6ec>
 80050a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80050a4:	d07c      	beq.n	80051a0 <Save_EEPROM+0x6b0>
 80050a6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80050aa:	f300 8097 	bgt.w	80051dc <Save_EEPROM+0x6ec>
 80050ae:	2bc8      	cmp	r3, #200	; 0xc8
 80050b0:	d079      	beq.n	80051a6 <Save_EEPROM+0x6b6>
 80050b2:	2bc8      	cmp	r3, #200	; 0xc8
 80050b4:	f300 8092 	bgt.w	80051dc <Save_EEPROM+0x6ec>
 80050b8:	2b32      	cmp	r3, #50	; 0x32
 80050ba:	dc6b      	bgt.n	8005194 <Save_EEPROM+0x6a4>
 80050bc:	2b02      	cmp	r3, #2
 80050be:	f2c0 808d 	blt.w	80051dc <Save_EEPROM+0x6ec>
 80050c2:	3b02      	subs	r3, #2
 80050c4:	2b30      	cmp	r3, #48	; 0x30
 80050c6:	f200 8089 	bhi.w	80051dc <Save_EEPROM+0x6ec>
 80050ca:	a201      	add	r2, pc, #4	; (adr r2, 80050d0 <Save_EEPROM+0x5e0>)
 80050cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d0:	080051d7 	.word	0x080051d7
 80050d4:	080051dd 	.word	0x080051dd
 80050d8:	080051d1 	.word	0x080051d1
 80050dc:	080051cb 	.word	0x080051cb
 80050e0:	080051dd 	.word	0x080051dd
 80050e4:	080051dd 	.word	0x080051dd
 80050e8:	080051dd 	.word	0x080051dd
 80050ec:	080051dd 	.word	0x080051dd
 80050f0:	080051c5 	.word	0x080051c5
 80050f4:	080051dd 	.word	0x080051dd
 80050f8:	080051dd 	.word	0x080051dd
 80050fc:	080051dd 	.word	0x080051dd
 8005100:	080051dd 	.word	0x080051dd
 8005104:	080051dd 	.word	0x080051dd
 8005108:	080051dd 	.word	0x080051dd
 800510c:	080051dd 	.word	0x080051dd
 8005110:	080051dd 	.word	0x080051dd
 8005114:	080051dd 	.word	0x080051dd
 8005118:	080051bf 	.word	0x080051bf
 800511c:	080051dd 	.word	0x080051dd
 8005120:	080051dd 	.word	0x080051dd
 8005124:	080051dd 	.word	0x080051dd
 8005128:	080051dd 	.word	0x080051dd
 800512c:	080051dd 	.word	0x080051dd
 8005130:	080051dd 	.word	0x080051dd
 8005134:	080051dd 	.word	0x080051dd
 8005138:	080051dd 	.word	0x080051dd
 800513c:	080051dd 	.word	0x080051dd
 8005140:	080051dd 	.word	0x080051dd
 8005144:	080051dd 	.word	0x080051dd
 8005148:	080051dd 	.word	0x080051dd
 800514c:	080051dd 	.word	0x080051dd
 8005150:	080051dd 	.word	0x080051dd
 8005154:	080051dd 	.word	0x080051dd
 8005158:	080051dd 	.word	0x080051dd
 800515c:	080051dd 	.word	0x080051dd
 8005160:	080051dd 	.word	0x080051dd
 8005164:	080051dd 	.word	0x080051dd
 8005168:	080051b9 	.word	0x080051b9
 800516c:	080051dd 	.word	0x080051dd
 8005170:	080051dd 	.word	0x080051dd
 8005174:	080051dd 	.word	0x080051dd
 8005178:	080051dd 	.word	0x080051dd
 800517c:	080051dd 	.word	0x080051dd
 8005180:	080051dd 	.word	0x080051dd
 8005184:	080051dd 	.word	0x080051dd
 8005188:	080051dd 	.word	0x080051dd
 800518c:	080051dd 	.word	0x080051dd
 8005190:	080051b3 	.word	0x080051b3
 8005194:	2b64      	cmp	r3, #100	; 0x64
 8005196:	d009      	beq.n	80051ac <Save_EEPROM+0x6bc>
 8005198:	e020      	b.n	80051dc <Save_EEPROM+0x6ec>
 800519a:	2301      	movs	r3, #1
 800519c:	75fb      	strb	r3, [r7, #23]
 800519e:	e01f      	b.n	80051e0 <Save_EEPROM+0x6f0>
 80051a0:	2302      	movs	r3, #2
 80051a2:	75fb      	strb	r3, [r7, #23]
 80051a4:	e01c      	b.n	80051e0 <Save_EEPROM+0x6f0>
 80051a6:	2303      	movs	r3, #3
 80051a8:	75fb      	strb	r3, [r7, #23]
 80051aa:	e019      	b.n	80051e0 <Save_EEPROM+0x6f0>
 80051ac:	2304      	movs	r3, #4
 80051ae:	75fb      	strb	r3, [r7, #23]
 80051b0:	e016      	b.n	80051e0 <Save_EEPROM+0x6f0>
 80051b2:	2305      	movs	r3, #5
 80051b4:	75fb      	strb	r3, [r7, #23]
 80051b6:	e013      	b.n	80051e0 <Save_EEPROM+0x6f0>
 80051b8:	2306      	movs	r3, #6
 80051ba:	75fb      	strb	r3, [r7, #23]
 80051bc:	e010      	b.n	80051e0 <Save_EEPROM+0x6f0>
 80051be:	2307      	movs	r3, #7
 80051c0:	75fb      	strb	r3, [r7, #23]
 80051c2:	e00d      	b.n	80051e0 <Save_EEPROM+0x6f0>
 80051c4:	2308      	movs	r3, #8
 80051c6:	75fb      	strb	r3, [r7, #23]
 80051c8:	e00a      	b.n	80051e0 <Save_EEPROM+0x6f0>
 80051ca:	2309      	movs	r3, #9
 80051cc:	75fb      	strb	r3, [r7, #23]
 80051ce:	e007      	b.n	80051e0 <Save_EEPROM+0x6f0>
 80051d0:	230a      	movs	r3, #10
 80051d2:	75fb      	strb	r3, [r7, #23]
 80051d4:	e004      	b.n	80051e0 <Save_EEPROM+0x6f0>
 80051d6:	230b      	movs	r3, #11
 80051d8:	75fb      	strb	r3, [r7, #23]
 80051da:	e001      	b.n	80051e0 <Save_EEPROM+0x6f0>
 80051dc:	2300      	movs	r3, #0
 80051de:	75fb      	strb	r3, [r7, #23]
 80051e0:	bf00      	nop
	buffer[2] = aux;
 80051e2:	7dfb      	ldrb	r3, [r7, #23]
 80051e4:	72bb      	strb	r3, [r7, #10]

	__FREQ_TO_BUFFER(aux, perMsg[ECU_SAVE]);
 80051e6:	4b54      	ldr	r3, [pc, #336]	; (8005338 <Save_EEPROM+0x848>)
 80051e8:	899b      	ldrh	r3, [r3, #12]
 80051ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051ee:	f000 8082 	beq.w	80052f6 <Save_EEPROM+0x806>
 80051f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051f6:	f300 80a1 	bgt.w	800533c <Save_EEPROM+0x84c>
 80051fa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80051fe:	d07d      	beq.n	80052fc <Save_EEPROM+0x80c>
 8005200:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005204:	f300 809a 	bgt.w	800533c <Save_EEPROM+0x84c>
 8005208:	2bc8      	cmp	r3, #200	; 0xc8
 800520a:	d07a      	beq.n	8005302 <Save_EEPROM+0x812>
 800520c:	2bc8      	cmp	r3, #200	; 0xc8
 800520e:	f300 8095 	bgt.w	800533c <Save_EEPROM+0x84c>
 8005212:	2b32      	cmp	r3, #50	; 0x32
 8005214:	dc6c      	bgt.n	80052f0 <Save_EEPROM+0x800>
 8005216:	2b02      	cmp	r3, #2
 8005218:	f2c0 8090 	blt.w	800533c <Save_EEPROM+0x84c>
 800521c:	3b02      	subs	r3, #2
 800521e:	2b30      	cmp	r3, #48	; 0x30
 8005220:	f200 808c 	bhi.w	800533c <Save_EEPROM+0x84c>
 8005224:	a201      	add	r2, pc, #4	; (adr r2, 800522c <Save_EEPROM+0x73c>)
 8005226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800522a:	bf00      	nop
 800522c:	08005333 	.word	0x08005333
 8005230:	0800533d 	.word	0x0800533d
 8005234:	0800532d 	.word	0x0800532d
 8005238:	08005327 	.word	0x08005327
 800523c:	0800533d 	.word	0x0800533d
 8005240:	0800533d 	.word	0x0800533d
 8005244:	0800533d 	.word	0x0800533d
 8005248:	0800533d 	.word	0x0800533d
 800524c:	08005321 	.word	0x08005321
 8005250:	0800533d 	.word	0x0800533d
 8005254:	0800533d 	.word	0x0800533d
 8005258:	0800533d 	.word	0x0800533d
 800525c:	0800533d 	.word	0x0800533d
 8005260:	0800533d 	.word	0x0800533d
 8005264:	0800533d 	.word	0x0800533d
 8005268:	0800533d 	.word	0x0800533d
 800526c:	0800533d 	.word	0x0800533d
 8005270:	0800533d 	.word	0x0800533d
 8005274:	0800531b 	.word	0x0800531b
 8005278:	0800533d 	.word	0x0800533d
 800527c:	0800533d 	.word	0x0800533d
 8005280:	0800533d 	.word	0x0800533d
 8005284:	0800533d 	.word	0x0800533d
 8005288:	0800533d 	.word	0x0800533d
 800528c:	0800533d 	.word	0x0800533d
 8005290:	0800533d 	.word	0x0800533d
 8005294:	0800533d 	.word	0x0800533d
 8005298:	0800533d 	.word	0x0800533d
 800529c:	0800533d 	.word	0x0800533d
 80052a0:	0800533d 	.word	0x0800533d
 80052a4:	0800533d 	.word	0x0800533d
 80052a8:	0800533d 	.word	0x0800533d
 80052ac:	0800533d 	.word	0x0800533d
 80052b0:	0800533d 	.word	0x0800533d
 80052b4:	0800533d 	.word	0x0800533d
 80052b8:	0800533d 	.word	0x0800533d
 80052bc:	0800533d 	.word	0x0800533d
 80052c0:	0800533d 	.word	0x0800533d
 80052c4:	08005315 	.word	0x08005315
 80052c8:	0800533d 	.word	0x0800533d
 80052cc:	0800533d 	.word	0x0800533d
 80052d0:	0800533d 	.word	0x0800533d
 80052d4:	0800533d 	.word	0x0800533d
 80052d8:	0800533d 	.word	0x0800533d
 80052dc:	0800533d 	.word	0x0800533d
 80052e0:	0800533d 	.word	0x0800533d
 80052e4:	0800533d 	.word	0x0800533d
 80052e8:	0800533d 	.word	0x0800533d
 80052ec:	0800530f 	.word	0x0800530f
 80052f0:	2b64      	cmp	r3, #100	; 0x64
 80052f2:	d009      	beq.n	8005308 <Save_EEPROM+0x818>
 80052f4:	e022      	b.n	800533c <Save_EEPROM+0x84c>
 80052f6:	2301      	movs	r3, #1
 80052f8:	75fb      	strb	r3, [r7, #23]
 80052fa:	e021      	b.n	8005340 <Save_EEPROM+0x850>
 80052fc:	2302      	movs	r3, #2
 80052fe:	75fb      	strb	r3, [r7, #23]
 8005300:	e01e      	b.n	8005340 <Save_EEPROM+0x850>
 8005302:	2303      	movs	r3, #3
 8005304:	75fb      	strb	r3, [r7, #23]
 8005306:	e01b      	b.n	8005340 <Save_EEPROM+0x850>
 8005308:	2304      	movs	r3, #4
 800530a:	75fb      	strb	r3, [r7, #23]
 800530c:	e018      	b.n	8005340 <Save_EEPROM+0x850>
 800530e:	2305      	movs	r3, #5
 8005310:	75fb      	strb	r3, [r7, #23]
 8005312:	e015      	b.n	8005340 <Save_EEPROM+0x850>
 8005314:	2306      	movs	r3, #6
 8005316:	75fb      	strb	r3, [r7, #23]
 8005318:	e012      	b.n	8005340 <Save_EEPROM+0x850>
 800531a:	2307      	movs	r3, #7
 800531c:	75fb      	strb	r3, [r7, #23]
 800531e:	e00f      	b.n	8005340 <Save_EEPROM+0x850>
 8005320:	2308      	movs	r3, #8
 8005322:	75fb      	strb	r3, [r7, #23]
 8005324:	e00c      	b.n	8005340 <Save_EEPROM+0x850>
 8005326:	2309      	movs	r3, #9
 8005328:	75fb      	strb	r3, [r7, #23]
 800532a:	e009      	b.n	8005340 <Save_EEPROM+0x850>
 800532c:	230a      	movs	r3, #10
 800532e:	75fb      	strb	r3, [r7, #23]
 8005330:	e006      	b.n	8005340 <Save_EEPROM+0x850>
 8005332:	230b      	movs	r3, #11
 8005334:	75fb      	strb	r3, [r7, #23]
 8005336:	e003      	b.n	8005340 <Save_EEPROM+0x850>
 8005338:	2001273c 	.word	0x2001273c
 800533c:	2300      	movs	r3, #0
 800533e:	75fb      	strb	r3, [r7, #23]
 8005340:	bf00      	nop
	buffer[2] |= aux << 4;
 8005342:	7abb      	ldrb	r3, [r7, #10]
 8005344:	b25a      	sxtb	r2, r3
 8005346:	7dfb      	ldrb	r3, [r7, #23]
 8005348:	011b      	lsls	r3, r3, #4
 800534a:	b25b      	sxtb	r3, r3
 800534c:	4313      	orrs	r3, r2
 800534e:	b25b      	sxtb	r3, r3
 8005350:	b2db      	uxtb	r3, r3
 8005352:	72bb      	strb	r3, [r7, #10]

	__FREQ_TO_BUFFER(aux, perMsg[PDM_SAVE]);
 8005354:	4baa      	ldr	r3, [pc, #680]	; (8005600 <Save_EEPROM+0xb10>)
 8005356:	89db      	ldrh	r3, [r3, #14]
 8005358:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800535c:	f000 8081 	beq.w	8005462 <Save_EEPROM+0x972>
 8005360:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005364:	f300 809e 	bgt.w	80054a4 <Save_EEPROM+0x9b4>
 8005368:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800536c:	d07c      	beq.n	8005468 <Save_EEPROM+0x978>
 800536e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005372:	f300 8097 	bgt.w	80054a4 <Save_EEPROM+0x9b4>
 8005376:	2bc8      	cmp	r3, #200	; 0xc8
 8005378:	d079      	beq.n	800546e <Save_EEPROM+0x97e>
 800537a:	2bc8      	cmp	r3, #200	; 0xc8
 800537c:	f300 8092 	bgt.w	80054a4 <Save_EEPROM+0x9b4>
 8005380:	2b32      	cmp	r3, #50	; 0x32
 8005382:	dc6b      	bgt.n	800545c <Save_EEPROM+0x96c>
 8005384:	2b02      	cmp	r3, #2
 8005386:	f2c0 808d 	blt.w	80054a4 <Save_EEPROM+0x9b4>
 800538a:	3b02      	subs	r3, #2
 800538c:	2b30      	cmp	r3, #48	; 0x30
 800538e:	f200 8089 	bhi.w	80054a4 <Save_EEPROM+0x9b4>
 8005392:	a201      	add	r2, pc, #4	; (adr r2, 8005398 <Save_EEPROM+0x8a8>)
 8005394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005398:	0800549f 	.word	0x0800549f
 800539c:	080054a5 	.word	0x080054a5
 80053a0:	08005499 	.word	0x08005499
 80053a4:	08005493 	.word	0x08005493
 80053a8:	080054a5 	.word	0x080054a5
 80053ac:	080054a5 	.word	0x080054a5
 80053b0:	080054a5 	.word	0x080054a5
 80053b4:	080054a5 	.word	0x080054a5
 80053b8:	0800548d 	.word	0x0800548d
 80053bc:	080054a5 	.word	0x080054a5
 80053c0:	080054a5 	.word	0x080054a5
 80053c4:	080054a5 	.word	0x080054a5
 80053c8:	080054a5 	.word	0x080054a5
 80053cc:	080054a5 	.word	0x080054a5
 80053d0:	080054a5 	.word	0x080054a5
 80053d4:	080054a5 	.word	0x080054a5
 80053d8:	080054a5 	.word	0x080054a5
 80053dc:	080054a5 	.word	0x080054a5
 80053e0:	08005487 	.word	0x08005487
 80053e4:	080054a5 	.word	0x080054a5
 80053e8:	080054a5 	.word	0x080054a5
 80053ec:	080054a5 	.word	0x080054a5
 80053f0:	080054a5 	.word	0x080054a5
 80053f4:	080054a5 	.word	0x080054a5
 80053f8:	080054a5 	.word	0x080054a5
 80053fc:	080054a5 	.word	0x080054a5
 8005400:	080054a5 	.word	0x080054a5
 8005404:	080054a5 	.word	0x080054a5
 8005408:	080054a5 	.word	0x080054a5
 800540c:	080054a5 	.word	0x080054a5
 8005410:	080054a5 	.word	0x080054a5
 8005414:	080054a5 	.word	0x080054a5
 8005418:	080054a5 	.word	0x080054a5
 800541c:	080054a5 	.word	0x080054a5
 8005420:	080054a5 	.word	0x080054a5
 8005424:	080054a5 	.word	0x080054a5
 8005428:	080054a5 	.word	0x080054a5
 800542c:	080054a5 	.word	0x080054a5
 8005430:	08005481 	.word	0x08005481
 8005434:	080054a5 	.word	0x080054a5
 8005438:	080054a5 	.word	0x080054a5
 800543c:	080054a5 	.word	0x080054a5
 8005440:	080054a5 	.word	0x080054a5
 8005444:	080054a5 	.word	0x080054a5
 8005448:	080054a5 	.word	0x080054a5
 800544c:	080054a5 	.word	0x080054a5
 8005450:	080054a5 	.word	0x080054a5
 8005454:	080054a5 	.word	0x080054a5
 8005458:	0800547b 	.word	0x0800547b
 800545c:	2b64      	cmp	r3, #100	; 0x64
 800545e:	d009      	beq.n	8005474 <Save_EEPROM+0x984>
 8005460:	e020      	b.n	80054a4 <Save_EEPROM+0x9b4>
 8005462:	2301      	movs	r3, #1
 8005464:	75fb      	strb	r3, [r7, #23]
 8005466:	e01f      	b.n	80054a8 <Save_EEPROM+0x9b8>
 8005468:	2302      	movs	r3, #2
 800546a:	75fb      	strb	r3, [r7, #23]
 800546c:	e01c      	b.n	80054a8 <Save_EEPROM+0x9b8>
 800546e:	2303      	movs	r3, #3
 8005470:	75fb      	strb	r3, [r7, #23]
 8005472:	e019      	b.n	80054a8 <Save_EEPROM+0x9b8>
 8005474:	2304      	movs	r3, #4
 8005476:	75fb      	strb	r3, [r7, #23]
 8005478:	e016      	b.n	80054a8 <Save_EEPROM+0x9b8>
 800547a:	2305      	movs	r3, #5
 800547c:	75fb      	strb	r3, [r7, #23]
 800547e:	e013      	b.n	80054a8 <Save_EEPROM+0x9b8>
 8005480:	2306      	movs	r3, #6
 8005482:	75fb      	strb	r3, [r7, #23]
 8005484:	e010      	b.n	80054a8 <Save_EEPROM+0x9b8>
 8005486:	2307      	movs	r3, #7
 8005488:	75fb      	strb	r3, [r7, #23]
 800548a:	e00d      	b.n	80054a8 <Save_EEPROM+0x9b8>
 800548c:	2308      	movs	r3, #8
 800548e:	75fb      	strb	r3, [r7, #23]
 8005490:	e00a      	b.n	80054a8 <Save_EEPROM+0x9b8>
 8005492:	2309      	movs	r3, #9
 8005494:	75fb      	strb	r3, [r7, #23]
 8005496:	e007      	b.n	80054a8 <Save_EEPROM+0x9b8>
 8005498:	230a      	movs	r3, #10
 800549a:	75fb      	strb	r3, [r7, #23]
 800549c:	e004      	b.n	80054a8 <Save_EEPROM+0x9b8>
 800549e:	230b      	movs	r3, #11
 80054a0:	75fb      	strb	r3, [r7, #23]
 80054a2:	e001      	b.n	80054a8 <Save_EEPROM+0x9b8>
 80054a4:	2300      	movs	r3, #0
 80054a6:	75fb      	strb	r3, [r7, #23]
 80054a8:	bf00      	nop
	buffer[3] = aux;
 80054aa:	7dfb      	ldrb	r3, [r7, #23]
 80054ac:	72fb      	strb	r3, [r7, #11]

	__FREQ_TO_BUFFER(aux, perCAN[ANALOG_1_4]);
 80054ae:	4b55      	ldr	r3, [pc, #340]	; (8005604 <Save_EEPROM+0xb14>)
 80054b0:	881b      	ldrh	r3, [r3, #0]
 80054b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054b6:	f000 8082 	beq.w	80055be <Save_EEPROM+0xace>
 80054ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054be:	f300 80a3 	bgt.w	8005608 <Save_EEPROM+0xb18>
 80054c2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80054c6:	d07d      	beq.n	80055c4 <Save_EEPROM+0xad4>
 80054c8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80054cc:	f300 809c 	bgt.w	8005608 <Save_EEPROM+0xb18>
 80054d0:	2bc8      	cmp	r3, #200	; 0xc8
 80054d2:	d07a      	beq.n	80055ca <Save_EEPROM+0xada>
 80054d4:	2bc8      	cmp	r3, #200	; 0xc8
 80054d6:	f300 8097 	bgt.w	8005608 <Save_EEPROM+0xb18>
 80054da:	2b32      	cmp	r3, #50	; 0x32
 80054dc:	dc6c      	bgt.n	80055b8 <Save_EEPROM+0xac8>
 80054de:	2b02      	cmp	r3, #2
 80054e0:	f2c0 8092 	blt.w	8005608 <Save_EEPROM+0xb18>
 80054e4:	3b02      	subs	r3, #2
 80054e6:	2b30      	cmp	r3, #48	; 0x30
 80054e8:	f200 808e 	bhi.w	8005608 <Save_EEPROM+0xb18>
 80054ec:	a201      	add	r2, pc, #4	; (adr r2, 80054f4 <Save_EEPROM+0xa04>)
 80054ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f2:	bf00      	nop
 80054f4:	080055fb 	.word	0x080055fb
 80054f8:	08005609 	.word	0x08005609
 80054fc:	080055f5 	.word	0x080055f5
 8005500:	080055ef 	.word	0x080055ef
 8005504:	08005609 	.word	0x08005609
 8005508:	08005609 	.word	0x08005609
 800550c:	08005609 	.word	0x08005609
 8005510:	08005609 	.word	0x08005609
 8005514:	080055e9 	.word	0x080055e9
 8005518:	08005609 	.word	0x08005609
 800551c:	08005609 	.word	0x08005609
 8005520:	08005609 	.word	0x08005609
 8005524:	08005609 	.word	0x08005609
 8005528:	08005609 	.word	0x08005609
 800552c:	08005609 	.word	0x08005609
 8005530:	08005609 	.word	0x08005609
 8005534:	08005609 	.word	0x08005609
 8005538:	08005609 	.word	0x08005609
 800553c:	080055e3 	.word	0x080055e3
 8005540:	08005609 	.word	0x08005609
 8005544:	08005609 	.word	0x08005609
 8005548:	08005609 	.word	0x08005609
 800554c:	08005609 	.word	0x08005609
 8005550:	08005609 	.word	0x08005609
 8005554:	08005609 	.word	0x08005609
 8005558:	08005609 	.word	0x08005609
 800555c:	08005609 	.word	0x08005609
 8005560:	08005609 	.word	0x08005609
 8005564:	08005609 	.word	0x08005609
 8005568:	08005609 	.word	0x08005609
 800556c:	08005609 	.word	0x08005609
 8005570:	08005609 	.word	0x08005609
 8005574:	08005609 	.word	0x08005609
 8005578:	08005609 	.word	0x08005609
 800557c:	08005609 	.word	0x08005609
 8005580:	08005609 	.word	0x08005609
 8005584:	08005609 	.word	0x08005609
 8005588:	08005609 	.word	0x08005609
 800558c:	080055dd 	.word	0x080055dd
 8005590:	08005609 	.word	0x08005609
 8005594:	08005609 	.word	0x08005609
 8005598:	08005609 	.word	0x08005609
 800559c:	08005609 	.word	0x08005609
 80055a0:	08005609 	.word	0x08005609
 80055a4:	08005609 	.word	0x08005609
 80055a8:	08005609 	.word	0x08005609
 80055ac:	08005609 	.word	0x08005609
 80055b0:	08005609 	.word	0x08005609
 80055b4:	080055d7 	.word	0x080055d7
 80055b8:	2b64      	cmp	r3, #100	; 0x64
 80055ba:	d009      	beq.n	80055d0 <Save_EEPROM+0xae0>
 80055bc:	e024      	b.n	8005608 <Save_EEPROM+0xb18>
 80055be:	2301      	movs	r3, #1
 80055c0:	75fb      	strb	r3, [r7, #23]
 80055c2:	e023      	b.n	800560c <Save_EEPROM+0xb1c>
 80055c4:	2302      	movs	r3, #2
 80055c6:	75fb      	strb	r3, [r7, #23]
 80055c8:	e020      	b.n	800560c <Save_EEPROM+0xb1c>
 80055ca:	2303      	movs	r3, #3
 80055cc:	75fb      	strb	r3, [r7, #23]
 80055ce:	e01d      	b.n	800560c <Save_EEPROM+0xb1c>
 80055d0:	2304      	movs	r3, #4
 80055d2:	75fb      	strb	r3, [r7, #23]
 80055d4:	e01a      	b.n	800560c <Save_EEPROM+0xb1c>
 80055d6:	2305      	movs	r3, #5
 80055d8:	75fb      	strb	r3, [r7, #23]
 80055da:	e017      	b.n	800560c <Save_EEPROM+0xb1c>
 80055dc:	2306      	movs	r3, #6
 80055de:	75fb      	strb	r3, [r7, #23]
 80055e0:	e014      	b.n	800560c <Save_EEPROM+0xb1c>
 80055e2:	2307      	movs	r3, #7
 80055e4:	75fb      	strb	r3, [r7, #23]
 80055e6:	e011      	b.n	800560c <Save_EEPROM+0xb1c>
 80055e8:	2308      	movs	r3, #8
 80055ea:	75fb      	strb	r3, [r7, #23]
 80055ec:	e00e      	b.n	800560c <Save_EEPROM+0xb1c>
 80055ee:	2309      	movs	r3, #9
 80055f0:	75fb      	strb	r3, [r7, #23]
 80055f2:	e00b      	b.n	800560c <Save_EEPROM+0xb1c>
 80055f4:	230a      	movs	r3, #10
 80055f6:	75fb      	strb	r3, [r7, #23]
 80055f8:	e008      	b.n	800560c <Save_EEPROM+0xb1c>
 80055fa:	230b      	movs	r3, #11
 80055fc:	75fb      	strb	r3, [r7, #23]
 80055fe:	e005      	b.n	800560c <Save_EEPROM+0xb1c>
 8005600:	2001273c 	.word	0x2001273c
 8005604:	20012730 	.word	0x20012730
 8005608:	2300      	movs	r3, #0
 800560a:	75fb      	strb	r3, [r7, #23]
 800560c:	bf00      	nop
	buffer[3] |= aux << 4;
 800560e:	7afb      	ldrb	r3, [r7, #11]
 8005610:	b25a      	sxtb	r2, r3
 8005612:	7dfb      	ldrb	r3, [r7, #23]
 8005614:	011b      	lsls	r3, r3, #4
 8005616:	b25b      	sxtb	r3, r3
 8005618:	4313      	orrs	r3, r2
 800561a:	b25b      	sxtb	r3, r3
 800561c:	b2db      	uxtb	r3, r3
 800561e:	72fb      	strb	r3, [r7, #11]

	__FREQ_TO_BUFFER(aux, perCAN[ANALOG_5_8]);
 8005620:	4baa      	ldr	r3, [pc, #680]	; (80058cc <Save_EEPROM+0xddc>)
 8005622:	885b      	ldrh	r3, [r3, #2]
 8005624:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005628:	f000 8081 	beq.w	800572e <Save_EEPROM+0xc3e>
 800562c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005630:	f300 809e 	bgt.w	8005770 <Save_EEPROM+0xc80>
 8005634:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005638:	d07c      	beq.n	8005734 <Save_EEPROM+0xc44>
 800563a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800563e:	f300 8097 	bgt.w	8005770 <Save_EEPROM+0xc80>
 8005642:	2bc8      	cmp	r3, #200	; 0xc8
 8005644:	d079      	beq.n	800573a <Save_EEPROM+0xc4a>
 8005646:	2bc8      	cmp	r3, #200	; 0xc8
 8005648:	f300 8092 	bgt.w	8005770 <Save_EEPROM+0xc80>
 800564c:	2b32      	cmp	r3, #50	; 0x32
 800564e:	dc6b      	bgt.n	8005728 <Save_EEPROM+0xc38>
 8005650:	2b02      	cmp	r3, #2
 8005652:	f2c0 808d 	blt.w	8005770 <Save_EEPROM+0xc80>
 8005656:	3b02      	subs	r3, #2
 8005658:	2b30      	cmp	r3, #48	; 0x30
 800565a:	f200 8089 	bhi.w	8005770 <Save_EEPROM+0xc80>
 800565e:	a201      	add	r2, pc, #4	; (adr r2, 8005664 <Save_EEPROM+0xb74>)
 8005660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005664:	0800576b 	.word	0x0800576b
 8005668:	08005771 	.word	0x08005771
 800566c:	08005765 	.word	0x08005765
 8005670:	0800575f 	.word	0x0800575f
 8005674:	08005771 	.word	0x08005771
 8005678:	08005771 	.word	0x08005771
 800567c:	08005771 	.word	0x08005771
 8005680:	08005771 	.word	0x08005771
 8005684:	08005759 	.word	0x08005759
 8005688:	08005771 	.word	0x08005771
 800568c:	08005771 	.word	0x08005771
 8005690:	08005771 	.word	0x08005771
 8005694:	08005771 	.word	0x08005771
 8005698:	08005771 	.word	0x08005771
 800569c:	08005771 	.word	0x08005771
 80056a0:	08005771 	.word	0x08005771
 80056a4:	08005771 	.word	0x08005771
 80056a8:	08005771 	.word	0x08005771
 80056ac:	08005753 	.word	0x08005753
 80056b0:	08005771 	.word	0x08005771
 80056b4:	08005771 	.word	0x08005771
 80056b8:	08005771 	.word	0x08005771
 80056bc:	08005771 	.word	0x08005771
 80056c0:	08005771 	.word	0x08005771
 80056c4:	08005771 	.word	0x08005771
 80056c8:	08005771 	.word	0x08005771
 80056cc:	08005771 	.word	0x08005771
 80056d0:	08005771 	.word	0x08005771
 80056d4:	08005771 	.word	0x08005771
 80056d8:	08005771 	.word	0x08005771
 80056dc:	08005771 	.word	0x08005771
 80056e0:	08005771 	.word	0x08005771
 80056e4:	08005771 	.word	0x08005771
 80056e8:	08005771 	.word	0x08005771
 80056ec:	08005771 	.word	0x08005771
 80056f0:	08005771 	.word	0x08005771
 80056f4:	08005771 	.word	0x08005771
 80056f8:	08005771 	.word	0x08005771
 80056fc:	0800574d 	.word	0x0800574d
 8005700:	08005771 	.word	0x08005771
 8005704:	08005771 	.word	0x08005771
 8005708:	08005771 	.word	0x08005771
 800570c:	08005771 	.word	0x08005771
 8005710:	08005771 	.word	0x08005771
 8005714:	08005771 	.word	0x08005771
 8005718:	08005771 	.word	0x08005771
 800571c:	08005771 	.word	0x08005771
 8005720:	08005771 	.word	0x08005771
 8005724:	08005747 	.word	0x08005747
 8005728:	2b64      	cmp	r3, #100	; 0x64
 800572a:	d009      	beq.n	8005740 <Save_EEPROM+0xc50>
 800572c:	e020      	b.n	8005770 <Save_EEPROM+0xc80>
 800572e:	2301      	movs	r3, #1
 8005730:	75fb      	strb	r3, [r7, #23]
 8005732:	e01f      	b.n	8005774 <Save_EEPROM+0xc84>
 8005734:	2302      	movs	r3, #2
 8005736:	75fb      	strb	r3, [r7, #23]
 8005738:	e01c      	b.n	8005774 <Save_EEPROM+0xc84>
 800573a:	2303      	movs	r3, #3
 800573c:	75fb      	strb	r3, [r7, #23]
 800573e:	e019      	b.n	8005774 <Save_EEPROM+0xc84>
 8005740:	2304      	movs	r3, #4
 8005742:	75fb      	strb	r3, [r7, #23]
 8005744:	e016      	b.n	8005774 <Save_EEPROM+0xc84>
 8005746:	2305      	movs	r3, #5
 8005748:	75fb      	strb	r3, [r7, #23]
 800574a:	e013      	b.n	8005774 <Save_EEPROM+0xc84>
 800574c:	2306      	movs	r3, #6
 800574e:	75fb      	strb	r3, [r7, #23]
 8005750:	e010      	b.n	8005774 <Save_EEPROM+0xc84>
 8005752:	2307      	movs	r3, #7
 8005754:	75fb      	strb	r3, [r7, #23]
 8005756:	e00d      	b.n	8005774 <Save_EEPROM+0xc84>
 8005758:	2308      	movs	r3, #8
 800575a:	75fb      	strb	r3, [r7, #23]
 800575c:	e00a      	b.n	8005774 <Save_EEPROM+0xc84>
 800575e:	2309      	movs	r3, #9
 8005760:	75fb      	strb	r3, [r7, #23]
 8005762:	e007      	b.n	8005774 <Save_EEPROM+0xc84>
 8005764:	230a      	movs	r3, #10
 8005766:	75fb      	strb	r3, [r7, #23]
 8005768:	e004      	b.n	8005774 <Save_EEPROM+0xc84>
 800576a:	230b      	movs	r3, #11
 800576c:	75fb      	strb	r3, [r7, #23]
 800576e:	e001      	b.n	8005774 <Save_EEPROM+0xc84>
 8005770:	2300      	movs	r3, #0
 8005772:	75fb      	strb	r3, [r7, #23]
 8005774:	bf00      	nop
	buffer[4] = aux;
 8005776:	7dfb      	ldrb	r3, [r7, #23]
 8005778:	733b      	strb	r3, [r7, #12]

	__FREQ_TO_BUFFER(aux, perCAN[ANALOG_9_12]);
 800577a:	4b54      	ldr	r3, [pc, #336]	; (80058cc <Save_EEPROM+0xddc>)
 800577c:	889b      	ldrh	r3, [r3, #4]
 800577e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005782:	f000 8082 	beq.w	800588a <Save_EEPROM+0xd9a>
 8005786:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800578a:	f300 80a1 	bgt.w	80058d0 <Save_EEPROM+0xde0>
 800578e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005792:	d07d      	beq.n	8005890 <Save_EEPROM+0xda0>
 8005794:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005798:	f300 809a 	bgt.w	80058d0 <Save_EEPROM+0xde0>
 800579c:	2bc8      	cmp	r3, #200	; 0xc8
 800579e:	d07a      	beq.n	8005896 <Save_EEPROM+0xda6>
 80057a0:	2bc8      	cmp	r3, #200	; 0xc8
 80057a2:	f300 8095 	bgt.w	80058d0 <Save_EEPROM+0xde0>
 80057a6:	2b32      	cmp	r3, #50	; 0x32
 80057a8:	dc6c      	bgt.n	8005884 <Save_EEPROM+0xd94>
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	f2c0 8090 	blt.w	80058d0 <Save_EEPROM+0xde0>
 80057b0:	3b02      	subs	r3, #2
 80057b2:	2b30      	cmp	r3, #48	; 0x30
 80057b4:	f200 808c 	bhi.w	80058d0 <Save_EEPROM+0xde0>
 80057b8:	a201      	add	r2, pc, #4	; (adr r2, 80057c0 <Save_EEPROM+0xcd0>)
 80057ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057be:	bf00      	nop
 80057c0:	080058c7 	.word	0x080058c7
 80057c4:	080058d1 	.word	0x080058d1
 80057c8:	080058c1 	.word	0x080058c1
 80057cc:	080058bb 	.word	0x080058bb
 80057d0:	080058d1 	.word	0x080058d1
 80057d4:	080058d1 	.word	0x080058d1
 80057d8:	080058d1 	.word	0x080058d1
 80057dc:	080058d1 	.word	0x080058d1
 80057e0:	080058b5 	.word	0x080058b5
 80057e4:	080058d1 	.word	0x080058d1
 80057e8:	080058d1 	.word	0x080058d1
 80057ec:	080058d1 	.word	0x080058d1
 80057f0:	080058d1 	.word	0x080058d1
 80057f4:	080058d1 	.word	0x080058d1
 80057f8:	080058d1 	.word	0x080058d1
 80057fc:	080058d1 	.word	0x080058d1
 8005800:	080058d1 	.word	0x080058d1
 8005804:	080058d1 	.word	0x080058d1
 8005808:	080058af 	.word	0x080058af
 800580c:	080058d1 	.word	0x080058d1
 8005810:	080058d1 	.word	0x080058d1
 8005814:	080058d1 	.word	0x080058d1
 8005818:	080058d1 	.word	0x080058d1
 800581c:	080058d1 	.word	0x080058d1
 8005820:	080058d1 	.word	0x080058d1
 8005824:	080058d1 	.word	0x080058d1
 8005828:	080058d1 	.word	0x080058d1
 800582c:	080058d1 	.word	0x080058d1
 8005830:	080058d1 	.word	0x080058d1
 8005834:	080058d1 	.word	0x080058d1
 8005838:	080058d1 	.word	0x080058d1
 800583c:	080058d1 	.word	0x080058d1
 8005840:	080058d1 	.word	0x080058d1
 8005844:	080058d1 	.word	0x080058d1
 8005848:	080058d1 	.word	0x080058d1
 800584c:	080058d1 	.word	0x080058d1
 8005850:	080058d1 	.word	0x080058d1
 8005854:	080058d1 	.word	0x080058d1
 8005858:	080058a9 	.word	0x080058a9
 800585c:	080058d1 	.word	0x080058d1
 8005860:	080058d1 	.word	0x080058d1
 8005864:	080058d1 	.word	0x080058d1
 8005868:	080058d1 	.word	0x080058d1
 800586c:	080058d1 	.word	0x080058d1
 8005870:	080058d1 	.word	0x080058d1
 8005874:	080058d1 	.word	0x080058d1
 8005878:	080058d1 	.word	0x080058d1
 800587c:	080058d1 	.word	0x080058d1
 8005880:	080058a3 	.word	0x080058a3
 8005884:	2b64      	cmp	r3, #100	; 0x64
 8005886:	d009      	beq.n	800589c <Save_EEPROM+0xdac>
 8005888:	e022      	b.n	80058d0 <Save_EEPROM+0xde0>
 800588a:	2301      	movs	r3, #1
 800588c:	75fb      	strb	r3, [r7, #23]
 800588e:	e021      	b.n	80058d4 <Save_EEPROM+0xde4>
 8005890:	2302      	movs	r3, #2
 8005892:	75fb      	strb	r3, [r7, #23]
 8005894:	e01e      	b.n	80058d4 <Save_EEPROM+0xde4>
 8005896:	2303      	movs	r3, #3
 8005898:	75fb      	strb	r3, [r7, #23]
 800589a:	e01b      	b.n	80058d4 <Save_EEPROM+0xde4>
 800589c:	2304      	movs	r3, #4
 800589e:	75fb      	strb	r3, [r7, #23]
 80058a0:	e018      	b.n	80058d4 <Save_EEPROM+0xde4>
 80058a2:	2305      	movs	r3, #5
 80058a4:	75fb      	strb	r3, [r7, #23]
 80058a6:	e015      	b.n	80058d4 <Save_EEPROM+0xde4>
 80058a8:	2306      	movs	r3, #6
 80058aa:	75fb      	strb	r3, [r7, #23]
 80058ac:	e012      	b.n	80058d4 <Save_EEPROM+0xde4>
 80058ae:	2307      	movs	r3, #7
 80058b0:	75fb      	strb	r3, [r7, #23]
 80058b2:	e00f      	b.n	80058d4 <Save_EEPROM+0xde4>
 80058b4:	2308      	movs	r3, #8
 80058b6:	75fb      	strb	r3, [r7, #23]
 80058b8:	e00c      	b.n	80058d4 <Save_EEPROM+0xde4>
 80058ba:	2309      	movs	r3, #9
 80058bc:	75fb      	strb	r3, [r7, #23]
 80058be:	e009      	b.n	80058d4 <Save_EEPROM+0xde4>
 80058c0:	230a      	movs	r3, #10
 80058c2:	75fb      	strb	r3, [r7, #23]
 80058c4:	e006      	b.n	80058d4 <Save_EEPROM+0xde4>
 80058c6:	230b      	movs	r3, #11
 80058c8:	75fb      	strb	r3, [r7, #23]
 80058ca:	e003      	b.n	80058d4 <Save_EEPROM+0xde4>
 80058cc:	20012730 	.word	0x20012730
 80058d0:	2300      	movs	r3, #0
 80058d2:	75fb      	strb	r3, [r7, #23]
 80058d4:	bf00      	nop
	buffer[4] |= aux << 4;
 80058d6:	7b3b      	ldrb	r3, [r7, #12]
 80058d8:	b25a      	sxtb	r2, r3
 80058da:	7dfb      	ldrb	r3, [r7, #23]
 80058dc:	011b      	lsls	r3, r3, #4
 80058de:	b25b      	sxtb	r3, r3
 80058e0:	4313      	orrs	r3, r2
 80058e2:	b25b      	sxtb	r3, r3
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	733b      	strb	r3, [r7, #12]

	__FREQ_TO_BUFFER(aux, perCAN[RTC_MSG]);
 80058e8:	4baa      	ldr	r3, [pc, #680]	; (8005b94 <Save_EEPROM+0x10a4>)
 80058ea:	88db      	ldrh	r3, [r3, #6]
 80058ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058f0:	f000 8081 	beq.w	80059f6 <Save_EEPROM+0xf06>
 80058f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058f8:	f300 809e 	bgt.w	8005a38 <Save_EEPROM+0xf48>
 80058fc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005900:	d07c      	beq.n	80059fc <Save_EEPROM+0xf0c>
 8005902:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005906:	f300 8097 	bgt.w	8005a38 <Save_EEPROM+0xf48>
 800590a:	2bc8      	cmp	r3, #200	; 0xc8
 800590c:	d079      	beq.n	8005a02 <Save_EEPROM+0xf12>
 800590e:	2bc8      	cmp	r3, #200	; 0xc8
 8005910:	f300 8092 	bgt.w	8005a38 <Save_EEPROM+0xf48>
 8005914:	2b32      	cmp	r3, #50	; 0x32
 8005916:	dc6b      	bgt.n	80059f0 <Save_EEPROM+0xf00>
 8005918:	2b02      	cmp	r3, #2
 800591a:	f2c0 808d 	blt.w	8005a38 <Save_EEPROM+0xf48>
 800591e:	3b02      	subs	r3, #2
 8005920:	2b30      	cmp	r3, #48	; 0x30
 8005922:	f200 8089 	bhi.w	8005a38 <Save_EEPROM+0xf48>
 8005926:	a201      	add	r2, pc, #4	; (adr r2, 800592c <Save_EEPROM+0xe3c>)
 8005928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592c:	08005a33 	.word	0x08005a33
 8005930:	08005a39 	.word	0x08005a39
 8005934:	08005a2d 	.word	0x08005a2d
 8005938:	08005a27 	.word	0x08005a27
 800593c:	08005a39 	.word	0x08005a39
 8005940:	08005a39 	.word	0x08005a39
 8005944:	08005a39 	.word	0x08005a39
 8005948:	08005a39 	.word	0x08005a39
 800594c:	08005a21 	.word	0x08005a21
 8005950:	08005a39 	.word	0x08005a39
 8005954:	08005a39 	.word	0x08005a39
 8005958:	08005a39 	.word	0x08005a39
 800595c:	08005a39 	.word	0x08005a39
 8005960:	08005a39 	.word	0x08005a39
 8005964:	08005a39 	.word	0x08005a39
 8005968:	08005a39 	.word	0x08005a39
 800596c:	08005a39 	.word	0x08005a39
 8005970:	08005a39 	.word	0x08005a39
 8005974:	08005a1b 	.word	0x08005a1b
 8005978:	08005a39 	.word	0x08005a39
 800597c:	08005a39 	.word	0x08005a39
 8005980:	08005a39 	.word	0x08005a39
 8005984:	08005a39 	.word	0x08005a39
 8005988:	08005a39 	.word	0x08005a39
 800598c:	08005a39 	.word	0x08005a39
 8005990:	08005a39 	.word	0x08005a39
 8005994:	08005a39 	.word	0x08005a39
 8005998:	08005a39 	.word	0x08005a39
 800599c:	08005a39 	.word	0x08005a39
 80059a0:	08005a39 	.word	0x08005a39
 80059a4:	08005a39 	.word	0x08005a39
 80059a8:	08005a39 	.word	0x08005a39
 80059ac:	08005a39 	.word	0x08005a39
 80059b0:	08005a39 	.word	0x08005a39
 80059b4:	08005a39 	.word	0x08005a39
 80059b8:	08005a39 	.word	0x08005a39
 80059bc:	08005a39 	.word	0x08005a39
 80059c0:	08005a39 	.word	0x08005a39
 80059c4:	08005a15 	.word	0x08005a15
 80059c8:	08005a39 	.word	0x08005a39
 80059cc:	08005a39 	.word	0x08005a39
 80059d0:	08005a39 	.word	0x08005a39
 80059d4:	08005a39 	.word	0x08005a39
 80059d8:	08005a39 	.word	0x08005a39
 80059dc:	08005a39 	.word	0x08005a39
 80059e0:	08005a39 	.word	0x08005a39
 80059e4:	08005a39 	.word	0x08005a39
 80059e8:	08005a39 	.word	0x08005a39
 80059ec:	08005a0f 	.word	0x08005a0f
 80059f0:	2b64      	cmp	r3, #100	; 0x64
 80059f2:	d009      	beq.n	8005a08 <Save_EEPROM+0xf18>
 80059f4:	e020      	b.n	8005a38 <Save_EEPROM+0xf48>
 80059f6:	2301      	movs	r3, #1
 80059f8:	75fb      	strb	r3, [r7, #23]
 80059fa:	e01f      	b.n	8005a3c <Save_EEPROM+0xf4c>
 80059fc:	2302      	movs	r3, #2
 80059fe:	75fb      	strb	r3, [r7, #23]
 8005a00:	e01c      	b.n	8005a3c <Save_EEPROM+0xf4c>
 8005a02:	2303      	movs	r3, #3
 8005a04:	75fb      	strb	r3, [r7, #23]
 8005a06:	e019      	b.n	8005a3c <Save_EEPROM+0xf4c>
 8005a08:	2304      	movs	r3, #4
 8005a0a:	75fb      	strb	r3, [r7, #23]
 8005a0c:	e016      	b.n	8005a3c <Save_EEPROM+0xf4c>
 8005a0e:	2305      	movs	r3, #5
 8005a10:	75fb      	strb	r3, [r7, #23]
 8005a12:	e013      	b.n	8005a3c <Save_EEPROM+0xf4c>
 8005a14:	2306      	movs	r3, #6
 8005a16:	75fb      	strb	r3, [r7, #23]
 8005a18:	e010      	b.n	8005a3c <Save_EEPROM+0xf4c>
 8005a1a:	2307      	movs	r3, #7
 8005a1c:	75fb      	strb	r3, [r7, #23]
 8005a1e:	e00d      	b.n	8005a3c <Save_EEPROM+0xf4c>
 8005a20:	2308      	movs	r3, #8
 8005a22:	75fb      	strb	r3, [r7, #23]
 8005a24:	e00a      	b.n	8005a3c <Save_EEPROM+0xf4c>
 8005a26:	2309      	movs	r3, #9
 8005a28:	75fb      	strb	r3, [r7, #23]
 8005a2a:	e007      	b.n	8005a3c <Save_EEPROM+0xf4c>
 8005a2c:	230a      	movs	r3, #10
 8005a2e:	75fb      	strb	r3, [r7, #23]
 8005a30:	e004      	b.n	8005a3c <Save_EEPROM+0xf4c>
 8005a32:	230b      	movs	r3, #11
 8005a34:	75fb      	strb	r3, [r7, #23]
 8005a36:	e001      	b.n	8005a3c <Save_EEPROM+0xf4c>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	75fb      	strb	r3, [r7, #23]
 8005a3c:	bf00      	nop
	buffer[5] = aux;
 8005a3e:	7dfb      	ldrb	r3, [r7, #23]
 8005a40:	737b      	strb	r3, [r7, #13]

	__FREQ_TO_BUFFER(aux, perCAN[VERIFY_MSG]);
 8005a42:	4b54      	ldr	r3, [pc, #336]	; (8005b94 <Save_EEPROM+0x10a4>)
 8005a44:	891b      	ldrh	r3, [r3, #8]
 8005a46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a4a:	f000 8082 	beq.w	8005b52 <Save_EEPROM+0x1062>
 8005a4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a52:	f300 80a1 	bgt.w	8005b98 <Save_EEPROM+0x10a8>
 8005a56:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005a5a:	d07d      	beq.n	8005b58 <Save_EEPROM+0x1068>
 8005a5c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005a60:	f300 809a 	bgt.w	8005b98 <Save_EEPROM+0x10a8>
 8005a64:	2bc8      	cmp	r3, #200	; 0xc8
 8005a66:	d07a      	beq.n	8005b5e <Save_EEPROM+0x106e>
 8005a68:	2bc8      	cmp	r3, #200	; 0xc8
 8005a6a:	f300 8095 	bgt.w	8005b98 <Save_EEPROM+0x10a8>
 8005a6e:	2b32      	cmp	r3, #50	; 0x32
 8005a70:	dc6c      	bgt.n	8005b4c <Save_EEPROM+0x105c>
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	f2c0 8090 	blt.w	8005b98 <Save_EEPROM+0x10a8>
 8005a78:	3b02      	subs	r3, #2
 8005a7a:	2b30      	cmp	r3, #48	; 0x30
 8005a7c:	f200 808c 	bhi.w	8005b98 <Save_EEPROM+0x10a8>
 8005a80:	a201      	add	r2, pc, #4	; (adr r2, 8005a88 <Save_EEPROM+0xf98>)
 8005a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a86:	bf00      	nop
 8005a88:	08005b8f 	.word	0x08005b8f
 8005a8c:	08005b99 	.word	0x08005b99
 8005a90:	08005b89 	.word	0x08005b89
 8005a94:	08005b83 	.word	0x08005b83
 8005a98:	08005b99 	.word	0x08005b99
 8005a9c:	08005b99 	.word	0x08005b99
 8005aa0:	08005b99 	.word	0x08005b99
 8005aa4:	08005b99 	.word	0x08005b99
 8005aa8:	08005b7d 	.word	0x08005b7d
 8005aac:	08005b99 	.word	0x08005b99
 8005ab0:	08005b99 	.word	0x08005b99
 8005ab4:	08005b99 	.word	0x08005b99
 8005ab8:	08005b99 	.word	0x08005b99
 8005abc:	08005b99 	.word	0x08005b99
 8005ac0:	08005b99 	.word	0x08005b99
 8005ac4:	08005b99 	.word	0x08005b99
 8005ac8:	08005b99 	.word	0x08005b99
 8005acc:	08005b99 	.word	0x08005b99
 8005ad0:	08005b77 	.word	0x08005b77
 8005ad4:	08005b99 	.word	0x08005b99
 8005ad8:	08005b99 	.word	0x08005b99
 8005adc:	08005b99 	.word	0x08005b99
 8005ae0:	08005b99 	.word	0x08005b99
 8005ae4:	08005b99 	.word	0x08005b99
 8005ae8:	08005b99 	.word	0x08005b99
 8005aec:	08005b99 	.word	0x08005b99
 8005af0:	08005b99 	.word	0x08005b99
 8005af4:	08005b99 	.word	0x08005b99
 8005af8:	08005b99 	.word	0x08005b99
 8005afc:	08005b99 	.word	0x08005b99
 8005b00:	08005b99 	.word	0x08005b99
 8005b04:	08005b99 	.word	0x08005b99
 8005b08:	08005b99 	.word	0x08005b99
 8005b0c:	08005b99 	.word	0x08005b99
 8005b10:	08005b99 	.word	0x08005b99
 8005b14:	08005b99 	.word	0x08005b99
 8005b18:	08005b99 	.word	0x08005b99
 8005b1c:	08005b99 	.word	0x08005b99
 8005b20:	08005b71 	.word	0x08005b71
 8005b24:	08005b99 	.word	0x08005b99
 8005b28:	08005b99 	.word	0x08005b99
 8005b2c:	08005b99 	.word	0x08005b99
 8005b30:	08005b99 	.word	0x08005b99
 8005b34:	08005b99 	.word	0x08005b99
 8005b38:	08005b99 	.word	0x08005b99
 8005b3c:	08005b99 	.word	0x08005b99
 8005b40:	08005b99 	.word	0x08005b99
 8005b44:	08005b99 	.word	0x08005b99
 8005b48:	08005b6b 	.word	0x08005b6b
 8005b4c:	2b64      	cmp	r3, #100	; 0x64
 8005b4e:	d009      	beq.n	8005b64 <Save_EEPROM+0x1074>
 8005b50:	e022      	b.n	8005b98 <Save_EEPROM+0x10a8>
 8005b52:	2301      	movs	r3, #1
 8005b54:	75fb      	strb	r3, [r7, #23]
 8005b56:	e021      	b.n	8005b9c <Save_EEPROM+0x10ac>
 8005b58:	2302      	movs	r3, #2
 8005b5a:	75fb      	strb	r3, [r7, #23]
 8005b5c:	e01e      	b.n	8005b9c <Save_EEPROM+0x10ac>
 8005b5e:	2303      	movs	r3, #3
 8005b60:	75fb      	strb	r3, [r7, #23]
 8005b62:	e01b      	b.n	8005b9c <Save_EEPROM+0x10ac>
 8005b64:	2304      	movs	r3, #4
 8005b66:	75fb      	strb	r3, [r7, #23]
 8005b68:	e018      	b.n	8005b9c <Save_EEPROM+0x10ac>
 8005b6a:	2305      	movs	r3, #5
 8005b6c:	75fb      	strb	r3, [r7, #23]
 8005b6e:	e015      	b.n	8005b9c <Save_EEPROM+0x10ac>
 8005b70:	2306      	movs	r3, #6
 8005b72:	75fb      	strb	r3, [r7, #23]
 8005b74:	e012      	b.n	8005b9c <Save_EEPROM+0x10ac>
 8005b76:	2307      	movs	r3, #7
 8005b78:	75fb      	strb	r3, [r7, #23]
 8005b7a:	e00f      	b.n	8005b9c <Save_EEPROM+0x10ac>
 8005b7c:	2308      	movs	r3, #8
 8005b7e:	75fb      	strb	r3, [r7, #23]
 8005b80:	e00c      	b.n	8005b9c <Save_EEPROM+0x10ac>
 8005b82:	2309      	movs	r3, #9
 8005b84:	75fb      	strb	r3, [r7, #23]
 8005b86:	e009      	b.n	8005b9c <Save_EEPROM+0x10ac>
 8005b88:	230a      	movs	r3, #10
 8005b8a:	75fb      	strb	r3, [r7, #23]
 8005b8c:	e006      	b.n	8005b9c <Save_EEPROM+0x10ac>
 8005b8e:	230b      	movs	r3, #11
 8005b90:	75fb      	strb	r3, [r7, #23]
 8005b92:	e003      	b.n	8005b9c <Save_EEPROM+0x10ac>
 8005b94:	20012730 	.word	0x20012730
 8005b98:	2300      	movs	r3, #0
 8005b9a:	75fb      	strb	r3, [r7, #23]
 8005b9c:	bf00      	nop
	buffer[5] |= aux << 4;
 8005b9e:	7b7b      	ldrb	r3, [r7, #13]
 8005ba0:	b25a      	sxtb	r2, r3
 8005ba2:	7dfb      	ldrb	r3, [r7, #23]
 8005ba4:	011b      	lsls	r3, r3, #4
 8005ba6:	b25b      	sxtb	r3, r3
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	b25b      	sxtb	r3, r3
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	737b      	strb	r3, [r7, #13]

	buffer[6] = inputConfig;
 8005bb0:	4b31      	ldr	r3, [pc, #196]	; (8005c78 <Save_EEPROM+0x1188>)
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	73bb      	strb	r3, [r7, #14]
	buffer[7] = thresholdBeacon >> 8;
 8005bb6:	4b31      	ldr	r3, [pc, #196]	; (8005c7c <Save_EEPROM+0x118c>)
 8005bb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bbc:	121b      	asrs	r3, r3, #8
 8005bbe:	b21b      	sxth	r3, r3
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	73fb      	strb	r3, [r7, #15]
	buffer[8] = thresholdBeacon & 0xff;
 8005bc4:	4b2d      	ldr	r3, [pc, #180]	; (8005c7c <Save_EEPROM+0x118c>)
 8005bc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	743b      	strb	r3, [r7, #16]
	buffer[9] = thresholdRPM >> 8;
 8005bce:	4b2c      	ldr	r3, [pc, #176]	; (8005c80 <Save_EEPROM+0x1190>)
 8005bd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bd4:	121b      	asrs	r3, r3, #8
 8005bd6:	b21b      	sxth	r3, r3
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	747b      	strb	r3, [r7, #17]
	buffer[10] = thresholdRPM & 0xff;
 8005bdc:	4b28      	ldr	r3, [pc, #160]	; (8005c80 <Save_EEPROM+0x1190>)
 8005bde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	74bb      	strb	r3, [r7, #18]
	buffer[11] = thresholdSpeed >> 8;
 8005be6:	4b27      	ldr	r3, [pc, #156]	; (8005c84 <Save_EEPROM+0x1194>)
 8005be8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bec:	121b      	asrs	r3, r3, #8
 8005bee:	b21b      	sxth	r3, r3
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	74fb      	strb	r3, [r7, #19]
	buffer[12] = thresholdSpeed & 0xff;
 8005bf4:	4b23      	ldr	r3, [pc, #140]	; (8005c84 <Save_EEPROM+0x1194>)
 8005bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	753b      	strb	r3, [r7, #20]

	HAL_I2C_Mem_Write(hi2c, 0xA0, 0x00, 1, &buffer[0], 4, EEPROM_WRITE_CYCLE);
 8005bfe:	230a      	movs	r3, #10
 8005c00:	9302      	str	r3, [sp, #8]
 8005c02:	2304      	movs	r3, #4
 8005c04:	9301      	str	r3, [sp, #4]
 8005c06:	f107 0308 	add.w	r3, r7, #8
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	2200      	movs	r2, #0
 8005c10:	21a0      	movs	r1, #160	; 0xa0
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f003 fba0 	bl	8009358 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(hi2c, 0xA0, 0x04, 1, &buffer[4], 4, EEPROM_WRITE_CYCLE);
 8005c18:	230a      	movs	r3, #10
 8005c1a:	9302      	str	r3, [sp, #8]
 8005c1c:	2304      	movs	r3, #4
 8005c1e:	9301      	str	r3, [sp, #4]
 8005c20:	f107 0308 	add.w	r3, r7, #8
 8005c24:	3304      	adds	r3, #4
 8005c26:	9300      	str	r3, [sp, #0]
 8005c28:	2301      	movs	r3, #1
 8005c2a:	2204      	movs	r2, #4
 8005c2c:	21a0      	movs	r1, #160	; 0xa0
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f003 fb92 	bl	8009358 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(hi2c, 0xA0, 0x08, 1, &buffer[8], 4, EEPROM_WRITE_CYCLE);
 8005c34:	230a      	movs	r3, #10
 8005c36:	9302      	str	r3, [sp, #8]
 8005c38:	2304      	movs	r3, #4
 8005c3a:	9301      	str	r3, [sp, #4]
 8005c3c:	f107 0308 	add.w	r3, r7, #8
 8005c40:	3308      	adds	r3, #8
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	2301      	movs	r3, #1
 8005c46:	2208      	movs	r2, #8
 8005c48:	21a0      	movs	r1, #160	; 0xa0
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f003 fb84 	bl	8009358 <HAL_I2C_Mem_Write>

	return HAL_I2C_Mem_Write(hi2c, 0xA0, 0x0C, 1, &buffer[12], 1, EEPROM_WRITE_CYCLE);
 8005c50:	230a      	movs	r3, #10
 8005c52:	9302      	str	r3, [sp, #8]
 8005c54:	2301      	movs	r3, #1
 8005c56:	9301      	str	r3, [sp, #4]
 8005c58:	f107 0308 	add.w	r3, r7, #8
 8005c5c:	330c      	adds	r3, #12
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	2301      	movs	r3, #1
 8005c62:	220c      	movs	r2, #12
 8005c64:	21a0      	movs	r1, #160	; 0xa0
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f003 fb76 	bl	8009358 <HAL_I2C_Mem_Write>
 8005c6c:	4603      	mov	r3, r0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3718      	adds	r7, #24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	20012714 	.word	0x20012714
 8005c7c:	2001063a 	.word	0x2001063a
 8005c80:	2001063c 	.word	0x2001063c
 8005c84:	2001063e 	.word	0x2001063e

08005c88 <Principal_Datalogger_Init>:
#include "principal.h"
#include "stdio.h"
#include "string.h"

FRESULT Principal_Datalogger_Init(FATFS* fatfs_struct)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
	FRESULT retVal = FR_OK;
 8005c90:	2300      	movs	r3, #0
 8005c92:	73fb      	strb	r3, [r7, #15]

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 8005c94:	2180      	movs	r1, #128	; 0x80
 8005c96:	4813      	ldr	r0, [pc, #76]	; (8005ce4 <Principal_Datalogger_Init+0x5c>)
 8005c98:	f003 f9b6 	bl	8009008 <HAL_GPIO_ReadPin>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d104      	bne.n	8005cac <Principal_Datalogger_Init+0x24>
	{
		flagDatalogger = DL_NO_CARD;
 8005ca2:	4b11      	ldr	r3, [pc, #68]	; (8005ce8 <Principal_Datalogger_Init+0x60>)
 8005ca4:	2202      	movs	r2, #2
 8005ca6:	701a      	strb	r2, [r3, #0]
		return FR_DISK_ERR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e017      	b.n	8005cdc <Principal_Datalogger_Init+0x54>
	}

	BSP_SD_Init();
 8005cac:	f00b fd0c 	bl	80116c8 <BSP_SD_Init>

	retVal = f_mount(fatfs_struct, SDPath, 1);
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	490e      	ldr	r1, [pc, #56]	; (8005cec <Principal_Datalogger_Init+0x64>)
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f011 fa6f 	bl	8017198 <f_mount>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	73fb      	strb	r3, [r7, #15]

	flagDatalogger = DL_NO_SAVE;
 8005cbe:	4b0a      	ldr	r3, [pc, #40]	; (8005ce8 <Principal_Datalogger_Init+0x60>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	701a      	strb	r2, [r3, #0]

	if(retVal != FR_OK)
 8005cc4:	7bfb      	ldrb	r3, [r7, #15]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d007      	beq.n	8005cda <Principal_Datalogger_Init+0x52>
	{
		flagDatalogger = DL_ERROR;
 8005cca:	4b07      	ldr	r3, [pc, #28]	; (8005ce8 <Principal_Datalogger_Init+0x60>)
 8005ccc:	2204      	movs	r2, #4
 8005cce:	701a      	strb	r2, [r3, #0]
		f_mount(0, SDPath, 0);
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	4906      	ldr	r1, [pc, #24]	; (8005cec <Principal_Datalogger_Init+0x64>)
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	f011 fa5f 	bl	8017198 <f_mount>
	}

	return retVal;
 8005cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	40020800 	.word	0x40020800
 8005ce8:	20012712 	.word	0x20012712
 8005cec:	200127ac 	.word	0x200127ac

08005cf0 <Principal_Datalogger_Start>:

FRESULT Principal_Datalogger_Start(char* dir, char* file, DIR* dir_struct, FIL* file_struct)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b090      	sub	sp, #64	; 0x40
 8005cf4:	af04      	add	r7, sp, #16
 8005cf6:	60f8      	str	r0, [r7, #12]
 8005cf8:	60b9      	str	r1, [r7, #8]
 8005cfa:	607a      	str	r2, [r7, #4]
 8005cfc:	603b      	str	r3, [r7, #0]
	FRESULT retVal = FR_OK;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 8005d04:	2180      	movs	r1, #128	; 0x80
 8005d06:	485e      	ldr	r0, [pc, #376]	; (8005e80 <Principal_Datalogger_Start+0x190>)
 8005d08:	f003 f97e 	bl	8009008 <HAL_GPIO_ReadPin>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d104      	bne.n	8005d1c <Principal_Datalogger_Start+0x2c>
	{
		flagDatalogger = DL_NO_CARD;
 8005d12:	4b5c      	ldr	r3, [pc, #368]	; (8005e84 <Principal_Datalogger_Start+0x194>)
 8005d14:	2202      	movs	r2, #2
 8005d16:	701a      	strb	r2, [r3, #0]
		return FR_DISK_ERR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e0ac      	b.n	8005e76 <Principal_Datalogger_Start+0x186>
	}

	if((HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_SET)
 8005d1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d20:	4859      	ldr	r0, [pc, #356]	; (8005e88 <Principal_Datalogger_Start+0x198>)
 8005d22:	f003 f971 	bl	8009008 <HAL_GPIO_ReadPin>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d033      	beq.n	8005d94 <Principal_Datalogger_Start+0xa4>
			|| (flagRTC != RTC_OK)
 8005d2c:	4b57      	ldr	r3, [pc, #348]	; (8005e8c <Principal_Datalogger_Start+0x19c>)
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d12f      	bne.n	8005d94 <Principal_Datalogger_Start+0xa4>
			|| (accDatalogger[DL_ACC_COOLDOWN] > 0)
 8005d34:	4b56      	ldr	r3, [pc, #344]	; (8005e90 <Principal_Datalogger_Start+0x1a0>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d12b      	bne.n	8005d94 <Principal_Datalogger_Start+0xa4>
			|| ((flagDatalogger != DL_BUT_PRESS)
 8005d3c:	4b51      	ldr	r3, [pc, #324]	; (8005e84 <Principal_Datalogger_Start+0x194>)
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	2b03      	cmp	r3, #3
 8005d42:	d029      	beq.n	8005d98 <Principal_Datalogger_Start+0xa8>
			&& (ecuData.rpm < thresholdRPM)
 8005d44:	4b53      	ldr	r3, [pc, #332]	; (8005e94 <Principal_Datalogger_Start+0x1a4>)
 8005d46:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 8005d4a:	4b53      	ldr	r3, [pc, #332]	; (8005e98 <Principal_Datalogger_Start+0x1a8>)
 8005d4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	da21      	bge.n	8005d98 <Principal_Datalogger_Start+0xa8>
			&& (ecuData.wheel_speed_fl < thresholdSpeed)
 8005d54:	4b4f      	ldr	r3, [pc, #316]	; (8005e94 <Principal_Datalogger_Start+0x1a4>)
 8005d56:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	; 0x2e
 8005d5a:	4b50      	ldr	r3, [pc, #320]	; (8005e9c <Principal_Datalogger_Start+0x1ac>)
 8005d5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	da19      	bge.n	8005d98 <Principal_Datalogger_Start+0xa8>
			&& (ecuData.wheel_speed_fr < thresholdSpeed)
 8005d64:	4b4b      	ldr	r3, [pc, #300]	; (8005e94 <Principal_Datalogger_Start+0x1a4>)
 8005d66:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8005d6a:	4b4c      	ldr	r3, [pc, #304]	; (8005e9c <Principal_Datalogger_Start+0x1ac>)
 8005d6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	da11      	bge.n	8005d98 <Principal_Datalogger_Start+0xa8>
			&& (ecuData.wheel_speed_rl < thresholdSpeed)
 8005d74:	4b47      	ldr	r3, [pc, #284]	; (8005e94 <Principal_Datalogger_Start+0x1a4>)
 8005d76:	f9b3 2032 	ldrsh.w	r2, [r3, #50]	; 0x32
 8005d7a:	4b48      	ldr	r3, [pc, #288]	; (8005e9c <Principal_Datalogger_Start+0x1ac>)
 8005d7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	da09      	bge.n	8005d98 <Principal_Datalogger_Start+0xa8>
			&& (ecuData.wheel_speed_rr < thresholdSpeed)))
 8005d84:	4b43      	ldr	r3, [pc, #268]	; (8005e94 <Principal_Datalogger_Start+0x1a4>)
 8005d86:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	; 0x34
 8005d8a:	4b44      	ldr	r3, [pc, #272]	; (8005e9c <Principal_Datalogger_Start+0x1ac>)
 8005d8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	da01      	bge.n	8005d98 <Principal_Datalogger_Start+0xa8>
		return FR_OK;
 8005d94:	2300      	movs	r3, #0
 8005d96:	e06e      	b.n	8005e76 <Principal_Datalogger_Start+0x186>

	accDatalogger[DL_ACC_COOLDOWN] = DATALOGGER_BUTTON_COOLDOWN;
 8005d98:	4b3d      	ldr	r3, [pc, #244]	; (8005e90 <Principal_Datalogger_Start+0x1a0>)
 8005d9a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005d9e:	601a      	str	r2, [r3, #0]

	RTC_DateTypeDef sDate;
	RTC_TimeTypeDef sTime;

	dataloggerBufferPosition = 0;
 8005da0:	4b3f      	ldr	r3, [pc, #252]	; (8005ea0 <Principal_Datalogger_Start+0x1b0>)
 8005da2:	2200      	movs	r2, #0
 8005da4:	801a      	strh	r2, [r3, #0]

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8005da6:	f107 0314 	add.w	r3, r7, #20
 8005daa:	2200      	movs	r2, #0
 8005dac:	4619      	mov	r1, r3
 8005dae:	483d      	ldr	r0, [pc, #244]	; (8005ea4 <Principal_Datalogger_Start+0x1b4>)
 8005db0:	f006 fef4 	bl	800cb9c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8005db4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005db8:	2200      	movs	r2, #0
 8005dba:	4619      	mov	r1, r3
 8005dbc:	4839      	ldr	r0, [pc, #228]	; (8005ea4 <Principal_Datalogger_Start+0x1b4>)
 8005dbe:	f006 ffcf 	bl	800cd60 <HAL_RTC_GetDate>

	sprintf(dir, "%02d-%02d-%02d", sDate.Year, sDate.Month, sDate.Date);
 8005dc2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005dcc:	4619      	mov	r1, r3
 8005dce:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	4934      	ldr	r1, [pc, #208]	; (8005ea8 <Principal_Datalogger_Start+0x1b8>)
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f012 fe3d 	bl	8018a58 <siprintf>

//	sprintf(file, "%s/%02d-%02d-%02d_%02d-%02d-%02d.sd", dir, sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
	sprintf(file, "%s/%s_%02d-%02d-%02d.sd", dir, dir, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8005dde:	7d3b      	ldrb	r3, [r7, #20]
 8005de0:	7d7a      	ldrb	r2, [r7, #21]
 8005de2:	7db9      	ldrb	r1, [r7, #22]
 8005de4:	9102      	str	r1, [sp, #8]
 8005de6:	9201      	str	r2, [sp, #4]
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	492f      	ldr	r1, [pc, #188]	; (8005eac <Principal_Datalogger_Start+0x1bc>)
 8005df0:	68b8      	ldr	r0, [r7, #8]
 8005df2:	f012 fe31 	bl	8018a58 <siprintf>

	retVal = f_mkdir(dir);
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	f011 fe50 	bl	8017a9c <f_mkdir>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if((retVal != FR_OK) && (retVal != FR_EXIST))
 8005e02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d009      	beq.n	8005e1e <Principal_Datalogger_Start+0x12e>
 8005e0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e0e:	2b08      	cmp	r3, #8
 8005e10:	d005      	beq.n	8005e1e <Principal_Datalogger_Start+0x12e>
	{
		flagDatalogger = DL_ERROR;
 8005e12:	4b1c      	ldr	r3, [pc, #112]	; (8005e84 <Principal_Datalogger_Start+0x194>)
 8005e14:	2204      	movs	r2, #4
 8005e16:	701a      	strb	r2, [r3, #0]
		return retVal;
 8005e18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e1c:	e02b      	b.n	8005e76 <Principal_Datalogger_Start+0x186>
	}

	retVal = f_opendir(dir_struct, dir);
 8005e1e:	68f9      	ldr	r1, [r7, #12]
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f011 fdc8 	bl	80179b6 <f_opendir>
 8005e26:	4603      	mov	r3, r0
 8005e28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if(retVal != FR_OK)
 8005e2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d005      	beq.n	8005e40 <Principal_Datalogger_Start+0x150>
	{
		flagDatalogger = DL_ERROR;
 8005e34:	4b13      	ldr	r3, [pc, #76]	; (8005e84 <Principal_Datalogger_Start+0x194>)
 8005e36:	2204      	movs	r2, #4
 8005e38:	701a      	strb	r2, [r3, #0]
		return retVal;
 8005e3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e3e:	e01a      	b.n	8005e76 <Principal_Datalogger_Start+0x186>
	}

	retVal = f_open(file_struct, file, FA_WRITE | FA_CREATE_ALWAYS);
 8005e40:	220a      	movs	r2, #10
 8005e42:	68b9      	ldr	r1, [r7, #8]
 8005e44:	6838      	ldr	r0, [r7, #0]
 8005e46:	f011 f9eb 	bl	8017220 <f_open>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if(retVal == FR_OK)
 8005e50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d109      	bne.n	8005e6c <Principal_Datalogger_Start+0x17c>
	{
		flagDatalogger = DL_SAVE;
 8005e58:	4b0a      	ldr	r3, [pc, #40]	; (8005e84 <Principal_Datalogger_Start+0x194>)
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	701a      	strb	r2, [r3, #0]
		accDatalogger[DL_ACC_TIMING] = 0;
 8005e5e:	4b0c      	ldr	r3, [pc, #48]	; (8005e90 <Principal_Datalogger_Start+0x1a0>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	609a      	str	r2, [r3, #8]
		accDatalogger[DL_ACC_TIMEOUT] = 0;
 8005e64:	4b0a      	ldr	r3, [pc, #40]	; (8005e90 <Principal_Datalogger_Start+0x1a0>)
 8005e66:	2200      	movs	r2, #0
 8005e68:	605a      	str	r2, [r3, #4]
 8005e6a:	e002      	b.n	8005e72 <Principal_Datalogger_Start+0x182>
	}
	else
		flagDatalogger = DL_ERROR;
 8005e6c:	4b05      	ldr	r3, [pc, #20]	; (8005e84 <Principal_Datalogger_Start+0x194>)
 8005e6e:	2204      	movs	r2, #4
 8005e70:	701a      	strb	r2, [r3, #0]

	return retVal;
 8005e72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3730      	adds	r7, #48	; 0x30
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}
 8005e7e:	bf00      	nop
 8005e80:	40020800 	.word	0x40020800
 8005e84:	20012712 	.word	0x20012712
 8005e88:	40020000 	.word	0x40020000
 8005e8c:	20012713 	.word	0x20012713
 8005e90:	20012750 	.word	0x20012750
 8005e94:	2000059c 	.word	0x2000059c
 8005e98:	2001063c 	.word	0x2001063c
 8005e9c:	2001063e 	.word	0x2001063e
 8005ea0:	20010638 	.word	0x20010638
 8005ea4:	2000038c 	.word	0x2000038c
 8005ea8:	08019330 	.word	0x08019330
 8005eac:	08019340 	.word	0x08019340

08005eb0 <Principal_Datalogger_Finish>:

FRESULT Principal_Datalogger_Finish(DIR* dir_struct, FIL* file_struct)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
	FRESULT retVal = FR_OK;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	73fb      	strb	r3, [r7, #15]

	while(HAL_SD_GetCardState(&hsd) == HAL_SD_STATE_BUSY);
 8005ebe:	bf00      	nop
 8005ec0:	4817      	ldr	r0, [pc, #92]	; (8005f20 <Principal_Datalogger_Finish+0x70>)
 8005ec2:	f008 fa4b 	bl	800e35c <HAL_SD_GetCardState>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b03      	cmp	r3, #3
 8005eca:	d0f9      	beq.n	8005ec0 <Principal_Datalogger_Finish+0x10>

	retVal = f_close(file_struct);
 8005ecc:	6838      	ldr	r0, [r7, #0]
 8005ece:	f011 fd52 	bl	8017976 <f_close>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	73fb      	strb	r3, [r7, #15]
	f_closedir(dir_struct);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f011 fdc8 	bl	8017a6c <f_closedir>

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 8005edc:	2180      	movs	r1, #128	; 0x80
 8005ede:	4811      	ldr	r0, [pc, #68]	; (8005f24 <Principal_Datalogger_Finish+0x74>)
 8005ee0:	f003 f892 	bl	8009008 <HAL_GPIO_ReadPin>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d10a      	bne.n	8005f00 <Principal_Datalogger_Finish+0x50>
	{
		retVal = f_mount(0, SDPath, 0);
 8005eea:	2200      	movs	r2, #0
 8005eec:	490e      	ldr	r1, [pc, #56]	; (8005f28 <Principal_Datalogger_Finish+0x78>)
 8005eee:	2000      	movs	r0, #0
 8005ef0:	f011 f952 	bl	8017198 <f_mount>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	73fb      	strb	r3, [r7, #15]

		flagDatalogger = DL_NO_CARD;
 8005ef8:	4b0c      	ldr	r3, [pc, #48]	; (8005f2c <Principal_Datalogger_Finish+0x7c>)
 8005efa:	2202      	movs	r2, #2
 8005efc:	701a      	strb	r2, [r3, #0]
 8005efe:	e006      	b.n	8005f0e <Principal_Datalogger_Finish+0x5e>
	}

	else if(flagDatalogger != DL_ERROR)
 8005f00:	4b0a      	ldr	r3, [pc, #40]	; (8005f2c <Principal_Datalogger_Finish+0x7c>)
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	2b04      	cmp	r3, #4
 8005f06:	d002      	beq.n	8005f0e <Principal_Datalogger_Finish+0x5e>
		flagDatalogger = DL_NO_SAVE;
 8005f08:	4b08      	ldr	r3, [pc, #32]	; (8005f2c <Principal_Datalogger_Finish+0x7c>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	701a      	strb	r2, [r3, #0]

	accDatalogger[DL_ACC_COOLDOWN] = DATALOGGER_BUTTON_COOLDOWN;
 8005f0e:	4b08      	ldr	r3, [pc, #32]	; (8005f30 <Principal_Datalogger_Finish+0x80>)
 8005f10:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8005f14:	601a      	str	r2, [r3, #0]

	return retVal;
 8005f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	200003ac 	.word	0x200003ac
 8005f24:	40020800 	.word	0x40020800
 8005f28:	200127ac 	.word	0x200127ac
 8005f2c:	20012712 	.word	0x20012712
 8005f30:	20012750 	.word	0x20012750

08005f34 <Principal_Datalogger_Save_Buffer>:

void Principal_Datalogger_Save_Buffer(uint32_t data_id, uint8_t data_length, uint8_t* data_buffer, DIR* dir_struct, FIL* file_struct)
{
 8005f34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f38:	b08b      	sub	sp, #44	; 0x2c
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	60f8      	str	r0, [r7, #12]
 8005f3e:	607a      	str	r2, [r7, #4]
 8005f40:	603b      	str	r3, [r7, #0]
 8005f42:	460b      	mov	r3, r1
 8005f44:	72fb      	strb	r3, [r7, #11]
 8005f46:	466b      	mov	r3, sp
 8005f48:	461e      	mov	r6, r3
	uint8_t buffer[5 + data_length];
 8005f4a:	7afb      	ldrb	r3, [r7, #11]
 8005f4c:	1d59      	adds	r1, r3, #5
 8005f4e:	1e4b      	subs	r3, r1, #1
 8005f50:	623b      	str	r3, [r7, #32]
 8005f52:	460a      	mov	r2, r1
 8005f54:	2300      	movs	r3, #0
 8005f56:	4690      	mov	r8, r2
 8005f58:	4699      	mov	r9, r3
 8005f5a:	f04f 0200 	mov.w	r2, #0
 8005f5e:	f04f 0300 	mov.w	r3, #0
 8005f62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f6e:	460a      	mov	r2, r1
 8005f70:	2300      	movs	r3, #0
 8005f72:	4614      	mov	r4, r2
 8005f74:	461d      	mov	r5, r3
 8005f76:	f04f 0200 	mov.w	r2, #0
 8005f7a:	f04f 0300 	mov.w	r3, #0
 8005f7e:	00eb      	lsls	r3, r5, #3
 8005f80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f84:	00e2      	lsls	r2, r4, #3
 8005f86:	460b      	mov	r3, r1
 8005f88:	3307      	adds	r3, #7
 8005f8a:	08db      	lsrs	r3, r3, #3
 8005f8c:	00db      	lsls	r3, r3, #3
 8005f8e:	ebad 0d03 	sub.w	sp, sp, r3
 8005f92:	466b      	mov	r3, sp
 8005f94:	3300      	adds	r3, #0
 8005f96:	61fb      	str	r3, [r7, #28]
	UINT writeSize;
	FRESULT verify[2];

	if((HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 8005f98:	2180      	movs	r1, #128	; 0x80
 8005f9a:	484c      	ldr	r0, [pc, #304]	; (80060cc <Principal_Datalogger_Save_Buffer+0x198>)
 8005f9c:	f003 f834 	bl	8009008 <HAL_GPIO_ReadPin>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d007      	beq.n	8005fb6 <Principal_Datalogger_Save_Buffer+0x82>
		|| (HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_SET))
 8005fa6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005faa:	4849      	ldr	r0, [pc, #292]	; (80060d0 <Principal_Datalogger_Save_Buffer+0x19c>)
 8005fac:	f003 f82c 	bl	8009008 <HAL_GPIO_ReadPin>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d105      	bne.n	8005fc2 <Principal_Datalogger_Save_Buffer+0x8e>
	{
		Principal_Datalogger_Finish(dir_struct, file_struct);
 8005fb6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005fb8:	6838      	ldr	r0, [r7, #0]
 8005fba:	f7ff ff79 	bl	8005eb0 <Principal_Datalogger_Finish>
 8005fbe:	46b5      	mov	sp, r6
 8005fc0:	e080      	b.n	80060c4 <Principal_Datalogger_Save_Buffer+0x190>
		return;
	}

	buffer[0] = 'D';
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	2244      	movs	r2, #68	; 0x44
 8005fc6:	701a      	strb	r2, [r3, #0]
	buffer[1] = 'L';
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	224c      	movs	r2, #76	; 0x4c
 8005fcc:	705a      	strb	r2, [r3, #1]
	buffer[2] = data_id & 0xff;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	b2da      	uxtb	r2, r3
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	709a      	strb	r2, [r3, #2]
	buffer[3] = data_length;
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	7afa      	ldrb	r2, [r7, #11]
 8005fda:	70da      	strb	r2, [r3, #3]
	buffer[4] = accDatalogger[DL_ACC_TIMING];
 8005fdc:	4b3d      	ldr	r3, [pc, #244]	; (80060d4 <Principal_Datalogger_Save_Buffer+0x1a0>)
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	b2da      	uxtb	r2, r3
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	711a      	strb	r2, [r3, #4]

	accDatalogger[DL_ACC_TIMING] = 0;
 8005fe6:	4b3b      	ldr	r3, [pc, #236]	; (80060d4 <Principal_Datalogger_Save_Buffer+0x1a0>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	609a      	str	r2, [r3, #8]

	for(uint8_t i = 0; i < data_length; i++)
 8005fec:	2300      	movs	r3, #0
 8005fee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005ff2:	e00e      	b.n	8006012 <Principal_Datalogger_Save_Buffer+0xde>
		buffer[5 + i] = data_buffer[i];
 8005ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	441a      	add	r2, r3
 8005ffc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006000:	3305      	adds	r3, #5
 8006002:	7811      	ldrb	r1, [r2, #0]
 8006004:	69fa      	ldr	r2, [r7, #28]
 8006006:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < data_length; i++)
 8006008:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800600c:	3301      	adds	r3, #1
 800600e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006012:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006016:	7afb      	ldrb	r3, [r7, #11]
 8006018:	429a      	cmp	r2, r3
 800601a:	d3eb      	bcc.n	8005ff4 <Principal_Datalogger_Save_Buffer+0xc0>

	memcpy(dataloggerBuffer + dataloggerBufferPosition, buffer, 5 + data_length);
 800601c:	4b2e      	ldr	r3, [pc, #184]	; (80060d8 <Principal_Datalogger_Save_Buffer+0x1a4>)
 800601e:	881b      	ldrh	r3, [r3, #0]
 8006020:	461a      	mov	r2, r3
 8006022:	4b2e      	ldr	r3, [pc, #184]	; (80060dc <Principal_Datalogger_Save_Buffer+0x1a8>)
 8006024:	18d0      	adds	r0, r2, r3
 8006026:	7afb      	ldrb	r3, [r7, #11]
 8006028:	3305      	adds	r3, #5
 800602a:	461a      	mov	r2, r3
 800602c:	69f9      	ldr	r1, [r7, #28]
 800602e:	f012 fcfd 	bl	8018a2c <memcpy>

	dataloggerBufferPosition += (5 + data_length);
 8006032:	7afb      	ldrb	r3, [r7, #11]
 8006034:	b29a      	uxth	r2, r3
 8006036:	4b28      	ldr	r3, [pc, #160]	; (80060d8 <Principal_Datalogger_Save_Buffer+0x1a4>)
 8006038:	881b      	ldrh	r3, [r3, #0]
 800603a:	4413      	add	r3, r2
 800603c:	b29b      	uxth	r3, r3
 800603e:	3305      	adds	r3, #5
 8006040:	b29a      	uxth	r2, r3
 8006042:	4b25      	ldr	r3, [pc, #148]	; (80060d8 <Principal_Datalogger_Save_Buffer+0x1a4>)
 8006044:	801a      	strh	r2, [r3, #0]

	if((dataloggerBufferPosition > DATALOGGER_SAVE_THR) || (accDatalogger[DL_ACC_TIMEOUT] > DATALOGGER_SAVE_TIME_THR))
 8006046:	4b24      	ldr	r3, [pc, #144]	; (80060d8 <Principal_Datalogger_Save_Buffer+0x1a4>)
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	f64f 72f3 	movw	r2, #65523	; 0xfff3
 800604e:	4293      	cmp	r3, r2
 8006050:	d804      	bhi.n	800605c <Principal_Datalogger_Save_Buffer+0x128>
 8006052:	4b20      	ldr	r3, [pc, #128]	; (80060d4 <Principal_Datalogger_Save_Buffer+0x1a0>)
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800605a:	d932      	bls.n	80060c2 <Principal_Datalogger_Save_Buffer+0x18e>
	{
		dataloggerBufferPosition++;
 800605c:	4b1e      	ldr	r3, [pc, #120]	; (80060d8 <Principal_Datalogger_Save_Buffer+0x1a4>)
 800605e:	881b      	ldrh	r3, [r3, #0]
 8006060:	3301      	adds	r3, #1
 8006062:	b29a      	uxth	r2, r3
 8006064:	4b1c      	ldr	r3, [pc, #112]	; (80060d8 <Principal_Datalogger_Save_Buffer+0x1a4>)
 8006066:	801a      	strh	r2, [r3, #0]

		verify[0] = f_write(file_struct, dataloggerBuffer, dataloggerBufferPosition, &writeSize);
 8006068:	4b1b      	ldr	r3, [pc, #108]	; (80060d8 <Principal_Datalogger_Save_Buffer+0x1a4>)
 800606a:	881b      	ldrh	r3, [r3, #0]
 800606c:	461a      	mov	r2, r3
 800606e:	f107 0318 	add.w	r3, r7, #24
 8006072:	491a      	ldr	r1, [pc, #104]	; (80060dc <Principal_Datalogger_Save_Buffer+0x1a8>)
 8006074:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8006076:	f011 fa6c 	bl	8017552 <f_write>
 800607a:	4603      	mov	r3, r0
 800607c:	753b      	strb	r3, [r7, #20]
		verify[1] = f_sync(file_struct);
 800607e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8006080:	f011 fbfb 	bl	801787a <f_sync>
 8006084:	4603      	mov	r3, r0
 8006086:	757b      	strb	r3, [r7, #21]

		if(((verify[0] != FR_OK) || (verify[1] != FR_OK) || (writeSize != dataloggerBufferPosition)) && (flagDatalogger != DL_SAVE))
 8006088:	7d3b      	ldrb	r3, [r7, #20]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d108      	bne.n	80060a0 <Principal_Datalogger_Save_Buffer+0x16c>
 800608e:	7d7b      	ldrb	r3, [r7, #21]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d105      	bne.n	80060a0 <Principal_Datalogger_Save_Buffer+0x16c>
 8006094:	4b10      	ldr	r3, [pc, #64]	; (80060d8 <Principal_Datalogger_Save_Buffer+0x1a4>)
 8006096:	881b      	ldrh	r3, [r3, #0]
 8006098:	461a      	mov	r2, r3
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	429a      	cmp	r2, r3
 800609e:	d00a      	beq.n	80060b6 <Principal_Datalogger_Save_Buffer+0x182>
 80060a0:	4b0f      	ldr	r3, [pc, #60]	; (80060e0 <Principal_Datalogger_Save_Buffer+0x1ac>)
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d006      	beq.n	80060b6 <Principal_Datalogger_Save_Buffer+0x182>
		{
			flagDatalogger = DL_ERROR;
 80060a8:	4b0d      	ldr	r3, [pc, #52]	; (80060e0 <Principal_Datalogger_Save_Buffer+0x1ac>)
 80060aa:	2204      	movs	r2, #4
 80060ac:	701a      	strb	r2, [r3, #0]
			Principal_Datalogger_Finish(dir_struct, file_struct);
 80060ae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80060b0:	6838      	ldr	r0, [r7, #0]
 80060b2:	f7ff fefd 	bl	8005eb0 <Principal_Datalogger_Finish>
		}

		dataloggerBufferPosition = 0;
 80060b6:	4b08      	ldr	r3, [pc, #32]	; (80060d8 <Principal_Datalogger_Save_Buffer+0x1a4>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	801a      	strh	r2, [r3, #0]
		accDatalogger[DL_ACC_TIMEOUT] = 0;
 80060bc:	4b05      	ldr	r3, [pc, #20]	; (80060d4 <Principal_Datalogger_Save_Buffer+0x1a0>)
 80060be:	2200      	movs	r2, #0
 80060c0:	605a      	str	r2, [r3, #4]
 80060c2:	46b5      	mov	sp, r6
	}
}
 80060c4:	372c      	adds	r7, #44	; 0x2c
 80060c6:	46bd      	mov	sp, r7
 80060c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80060cc:	40020800 	.word	0x40020800
 80060d0:	40020000 	.word	0x40020000
 80060d4:	20012750 	.word	0x20012750
 80060d8:	20010638 	.word	0x20010638
 80060dc:	20000638 	.word	0x20000638
 80060e0:	20012712 	.word	0x20012712

080060e4 <Principal_Datalogger_Button>:

void Principal_Datalogger_Button(DIR* dir_struct, FIL* file_struct)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
	if(accDatalogger[DL_ACC_COOLDOWN] == 0)
 80060ee:	4b10      	ldr	r3, [pc, #64]	; (8006130 <Principal_Datalogger_Button+0x4c>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d117      	bne.n	8006126 <Principal_Datalogger_Button+0x42>
	{
		if((flagDatalogger == DL_NO_SAVE) && (HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_RESET))
 80060f6:	4b0f      	ldr	r3, [pc, #60]	; (8006134 <Principal_Datalogger_Button+0x50>)
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10b      	bne.n	8006116 <Principal_Datalogger_Button+0x32>
 80060fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006102:	480d      	ldr	r0, [pc, #52]	; (8006138 <Principal_Datalogger_Button+0x54>)
 8006104:	f002 ff80 	bl	8009008 <HAL_GPIO_ReadPin>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d103      	bne.n	8006116 <Principal_Datalogger_Button+0x32>
			flagDatalogger = DL_BUT_PRESS;
 800610e:	4b09      	ldr	r3, [pc, #36]	; (8006134 <Principal_Datalogger_Button+0x50>)
 8006110:	2203      	movs	r2, #3
 8006112:	701a      	strb	r2, [r3, #0]

		else if(flagDatalogger == DL_SAVE)
			Principal_Datalogger_Finish(dir_struct, file_struct);
	}
}
 8006114:	e007      	b.n	8006126 <Principal_Datalogger_Button+0x42>
		else if(flagDatalogger == DL_SAVE)
 8006116:	4b07      	ldr	r3, [pc, #28]	; (8006134 <Principal_Datalogger_Button+0x50>)
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d103      	bne.n	8006126 <Principal_Datalogger_Button+0x42>
			Principal_Datalogger_Finish(dir_struct, file_struct);
 800611e:	6839      	ldr	r1, [r7, #0]
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f7ff fec5 	bl	8005eb0 <Principal_Datalogger_Finish>
}
 8006126:	bf00      	nop
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	20012750 	.word	0x20012750
 8006134:	20012712 	.word	0x20012712
 8006138:	40020000 	.word	0x40020000

0800613c <Principal_Card_Detection>:

void Principal_Card_Detection(FATFS* fatfs_struct, DIR* dir_struct, FIL* file_struct)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
	GPIO_PinState cd_pin = HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin);
 8006148:	2180      	movs	r1, #128	; 0x80
 800614a:	480f      	ldr	r0, [pc, #60]	; (8006188 <Principal_Card_Detection+0x4c>)
 800614c:	f002 ff5c 	bl	8009008 <HAL_GPIO_ReadPin>
 8006150:	4603      	mov	r3, r0
 8006152:	75fb      	strb	r3, [r7, #23]

	if((cd_pin == GPIO_PIN_SET) && (flagDatalogger != DL_NO_CARD))
 8006154:	7dfb      	ldrb	r3, [r7, #23]
 8006156:	2b01      	cmp	r3, #1
 8006158:	d108      	bne.n	800616c <Principal_Card_Detection+0x30>
 800615a:	4b0c      	ldr	r3, [pc, #48]	; (800618c <Principal_Card_Detection+0x50>)
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	2b02      	cmp	r3, #2
 8006160:	d004      	beq.n	800616c <Principal_Card_Detection+0x30>
		Principal_Datalogger_Finish(dir_struct, file_struct);
 8006162:	6879      	ldr	r1, [r7, #4]
 8006164:	68b8      	ldr	r0, [r7, #8]
 8006166:	f7ff fea3 	bl	8005eb0 <Principal_Datalogger_Finish>

	else if((cd_pin == GPIO_PIN_RESET) && (flagDatalogger == DL_NO_CARD))
		Principal_Datalogger_Init(fatfs_struct);
}
 800616a:	e009      	b.n	8006180 <Principal_Card_Detection+0x44>
	else if((cd_pin == GPIO_PIN_RESET) && (flagDatalogger == DL_NO_CARD))
 800616c:	7dfb      	ldrb	r3, [r7, #23]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d106      	bne.n	8006180 <Principal_Card_Detection+0x44>
 8006172:	4b06      	ldr	r3, [pc, #24]	; (800618c <Principal_Card_Detection+0x50>)
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	2b02      	cmp	r3, #2
 8006178:	d102      	bne.n	8006180 <Principal_Card_Detection+0x44>
		Principal_Datalogger_Init(fatfs_struct);
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f7ff fd84 	bl	8005c88 <Principal_Datalogger_Init>
}
 8006180:	bf00      	nop
 8006182:	3718      	adds	r7, #24
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	40020800 	.word	0x40020800
 800618c:	20012712 	.word	0x20012712

08006190 <Principal_Beacon_Detect>:

void Principal_Beacon_Detect()
{
 8006190:	b580      	push	{r7, lr}
 8006192:	af00      	add	r7, sp, #0
	if(accLap < thresholdBeacon)
 8006194:	4b0a      	ldr	r3, [pc, #40]	; (80061c0 <Principal_Beacon_Detect+0x30>)
 8006196:	f9b3 3000 	ldrsh.w	r3, [r3]
 800619a:	461a      	mov	r2, r3
 800619c:	4b09      	ldr	r3, [pc, #36]	; (80061c4 <Principal_Beacon_Detect+0x34>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d80a      	bhi.n	80061ba <Principal_Beacon_Detect+0x2a>
		return;

	lapNumber++;
 80061a4:	4b08      	ldr	r3, [pc, #32]	; (80061c8 <Principal_Beacon_Detect+0x38>)
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	3301      	adds	r3, #1
 80061aa:	b2da      	uxtb	r2, r3
 80061ac:	4b06      	ldr	r3, [pc, #24]	; (80061c8 <Principal_Beacon_Detect+0x38>)
 80061ae:	701a      	strb	r2, [r3, #0]

	Principal_Transmit_Msg(&hcan1, BEACON_MSG);
 80061b0:	2105      	movs	r1, #5
 80061b2:	4806      	ldr	r0, [pc, #24]	; (80061cc <Principal_Beacon_Detect+0x3c>)
 80061b4:	f7fd fae0 	bl	8003778 <Principal_Transmit_Msg>
 80061b8:	e000      	b.n	80061bc <Principal_Beacon_Detect+0x2c>
		return;
 80061ba:	bf00      	nop
}
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	2001063a 	.word	0x2001063a
 80061c4:	20012798 	.word	0x20012798
 80061c8:	20000580 	.word	0x20000580
 80061cc:	20000304 	.word	0x20000304

080061d0 <HAL_CAN_RxFifo0MsgPendingCallback>:
 */

#include "principal.h"

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af02      	add	r7, sp, #8
 80061d6:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData) == HAL_OK)
 80061d8:	4b28      	ldr	r3, [pc, #160]	; (800627c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80061da:	4a29      	ldr	r2, [pc, #164]	; (8006280 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80061dc:	2100      	movs	r1, #0
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f001 fd66 	bl	8007cb0 <HAL_CAN_GetRxMessage>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d13c      	bne.n	8006264 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>
	{
		verifyCAN |= 2;
 80061ea:	4b26      	ldr	r3, [pc, #152]	; (8006284 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	f043 0302 	orr.w	r3, r3, #2
 80061f2:	b2da      	uxtb	r2, r3
 80061f4:	4b23      	ldr	r3, [pc, #140]	; (8006284 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 80061f6:	701a      	strb	r2, [r3, #0]

		if((rxHeader.IDE == CAN_ID_STD) && ((rxHeader.StdId & CAN_DAQ_MASK) == CAN_DAQ_FILTER) && (flagDatalogger == DL_SAVE))
 80061f8:	4b21      	ldr	r3, [pc, #132]	; (8006280 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d116      	bne.n	800622e <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
 8006200:	4b1f      	ldr	r3, [pc, #124]	; (8006280 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006208:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800620c:	d10f      	bne.n	800622e <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
 800620e:	4b1e      	ldr	r3, [pc, #120]	; (8006288 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d10b      	bne.n	800622e <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
			Principal_Datalogger_Save_Buffer(rxHeader.StdId, rxHeader.DLC, rxData, &dirStruct, &fileStruct);
 8006216:	4b1a      	ldr	r3, [pc, #104]	; (8006280 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8006218:	6818      	ldr	r0, [r3, #0]
 800621a:	4b19      	ldr	r3, [pc, #100]	; (8006280 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	b2d9      	uxtb	r1, r3
 8006220:	4b1a      	ldr	r3, [pc, #104]	; (800628c <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8006222:	9300      	str	r3, [sp, #0]
 8006224:	4b1a      	ldr	r3, [pc, #104]	; (8006290 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8006226:	4a15      	ldr	r2, [pc, #84]	; (800627c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8006228:	f7ff fe84 	bl	8005f34 <Principal_Datalogger_Save_Buffer>
		}
	}

	else
		verifyCAN &= 1;
}
 800622c:	e021      	b.n	8006272 <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
		else if(rxHeader.IDE == CAN_ID_EXT)
 800622e:	4b14      	ldr	r3, [pc, #80]	; (8006280 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	2b04      	cmp	r3, #4
 8006234:	d11d      	bne.n	8006272 <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
			if(rxHeader.ExtId == CONFIG_ID)
 8006236:	4b12      	ldr	r3, [pc, #72]	; (8006280 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d107      	bne.n	800624e <HAL_CAN_RxFifo0MsgPendingCallback+0x7e>
				Principal_Receive_Config(&hi2c1, rxData, rxHeader.DLC);
 800623e:	4b10      	ldr	r3, [pc, #64]	; (8006280 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	461a      	mov	r2, r3
 8006244:	490d      	ldr	r1, [pc, #52]	; (800627c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8006246:	4813      	ldr	r0, [pc, #76]	; (8006294 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8006248:	f7fd fb18 	bl	800387c <Principal_Receive_Config>
}
 800624c:	e011      	b.n	8006272 <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
				PDM_CAN_Process_Data(&rxHeader, rxData, &pdmReadings);
 800624e:	4a12      	ldr	r2, [pc, #72]	; (8006298 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8006250:	490a      	ldr	r1, [pc, #40]	; (800627c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8006252:	480b      	ldr	r0, [pc, #44]	; (8006280 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8006254:	f7fb feb8 	bl	8001fc8 <PDM_CAN_Process_Data>
				FT_CAN_ReceiveData(&rxHeader, rxData, &ecuData);
 8006258:	4a10      	ldr	r2, [pc, #64]	; (800629c <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 800625a:	4908      	ldr	r1, [pc, #32]	; (800627c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 800625c:	4808      	ldr	r0, [pc, #32]	; (8006280 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 800625e:	f7fa f9df 	bl	8000620 <FT_CAN_ReceiveData>
}
 8006262:	e006      	b.n	8006272 <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
		verifyCAN &= 1;
 8006264:	4b07      	ldr	r3, [pc, #28]	; (8006284 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	f003 0301 	and.w	r3, r3, #1
 800626c:	b2da      	uxtb	r2, r3
 800626e:	4b05      	ldr	r3, [pc, #20]	; (8006284 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8006270:	701a      	strb	r2, [r3, #0]
}
 8006272:	bf00      	nop
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	20000538 	.word	0x20000538
 8006280:	2000054c 	.word	0x2000054c
 8006284:	2001279c 	.word	0x2001279c
 8006288:	20012712 	.word	0x20012712
 800628c:	200116a8 	.word	0x200116a8
 8006290:	20010640 	.word	0x20010640
 8006294:	2000032c 	.word	0x2000032c
 8006298:	200005f8 	.word	0x200005f8
 800629c:	2000059c 	.word	0x2000059c

080062a0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	4603      	mov	r3, r0
 80062a8:	80fb      	strh	r3, [r7, #6]
	GPIO_PinState pinLevel;

	if(GPIO_Pin == EXTI0_Pin)
 80062aa:	88fb      	ldrh	r3, [r7, #6]
 80062ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062b0:	d13c      	bne.n	800632c <HAL_GPIO_EXTI_Callback+0x8c>
	{
		pinLevel = HAL_GPIO_ReadPin(EXTI0_GPIO_Port, EXTI0_Pin);
 80062b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80062b6:	4840      	ldr	r0, [pc, #256]	; (80063b8 <HAL_GPIO_EXTI_Callback+0x118>)
 80062b8:	f002 fea6 	bl	8009008 <HAL_GPIO_ReadPin>
 80062bc:	4603      	mov	r3, r0
 80062be:	73fb      	strb	r3, [r7, #15]

		if(((inputConfig & 0x01) == INPUT_BEACON_PIN_0)
 80062c0:	4b3e      	ldr	r3, [pc, #248]	; (80063bc <HAL_GPIO_EXTI_Callback+0x11c>)
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d113      	bne.n	80062f4 <HAL_GPIO_EXTI_Callback+0x54>
				&& ((((inputConfig & 0x04) == INPUT_BEACON_FALLING_EDGE) && (pinLevel == GPIO_PIN_RESET))
 80062cc:	4b3b      	ldr	r3, [pc, #236]	; (80063bc <HAL_GPIO_EXTI_Callback+0x11c>)
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	f003 0304 	and.w	r3, r3, #4
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d102      	bne.n	80062de <HAL_GPIO_EXTI_Callback+0x3e>
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d008      	beq.n	80062f0 <HAL_GPIO_EXTI_Callback+0x50>
				|| (((inputConfig & 0x04) == INPUT_BEACON_RISING_EDGE) && (pinLevel == GPIO_PIN_SET))))
 80062de:	4b37      	ldr	r3, [pc, #220]	; (80063bc <HAL_GPIO_EXTI_Callback+0x11c>)
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	f003 0304 	and.w	r3, r3, #4
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d004      	beq.n	80062f4 <HAL_GPIO_EXTI_Callback+0x54>
 80062ea:	7bfb      	ldrb	r3, [r7, #15]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d101      	bne.n	80062f4 <HAL_GPIO_EXTI_Callback+0x54>
			Principal_Beacon_Detect();
 80062f0:	f7ff ff4e 	bl	8006190 <Principal_Beacon_Detect>

		if(((inputConfig & 0x02) == INPUT_DATALOGGER_PIN_0)
 80062f4:	4b31      	ldr	r3, [pc, #196]	; (80063bc <HAL_GPIO_EXTI_Callback+0x11c>)
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	f003 0302 	and.w	r3, r3, #2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d115      	bne.n	800632c <HAL_GPIO_EXTI_Callback+0x8c>
				&& ((((inputConfig & 0x08) == INPUT_DATALOGGER_FALLING_EDGE) && (pinLevel == GPIO_PIN_RESET))
 8006300:	4b2e      	ldr	r3, [pc, #184]	; (80063bc <HAL_GPIO_EXTI_Callback+0x11c>)
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	f003 0308 	and.w	r3, r3, #8
 8006308:	2b00      	cmp	r3, #0
 800630a:	d102      	bne.n	8006312 <HAL_GPIO_EXTI_Callback+0x72>
 800630c:	7bfb      	ldrb	r3, [r7, #15]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d008      	beq.n	8006324 <HAL_GPIO_EXTI_Callback+0x84>
				|| (((inputConfig & 0x08) == INPUT_DATALOGGER_RISING_EDGE) && (pinLevel == GPIO_PIN_SET))))
 8006312:	4b2a      	ldr	r3, [pc, #168]	; (80063bc <HAL_GPIO_EXTI_Callback+0x11c>)
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	f003 0308 	and.w	r3, r3, #8
 800631a:	2b00      	cmp	r3, #0
 800631c:	d006      	beq.n	800632c <HAL_GPIO_EXTI_Callback+0x8c>
 800631e:	7bfb      	ldrb	r3, [r7, #15]
 8006320:	2b01      	cmp	r3, #1
 8006322:	d103      	bne.n	800632c <HAL_GPIO_EXTI_Callback+0x8c>
			Principal_Datalogger_Button(&dirStruct, &fileStruct);
 8006324:	4926      	ldr	r1, [pc, #152]	; (80063c0 <HAL_GPIO_EXTI_Callback+0x120>)
 8006326:	4827      	ldr	r0, [pc, #156]	; (80063c4 <HAL_GPIO_EXTI_Callback+0x124>)
 8006328:	f7ff fedc 	bl	80060e4 <Principal_Datalogger_Button>
	}

	if(GPIO_Pin == EXTI1_Pin)
 800632c:	88fb      	ldrh	r3, [r7, #6]
 800632e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006332:	d13c      	bne.n	80063ae <HAL_GPIO_EXTI_Callback+0x10e>
	{
		pinLevel = HAL_GPIO_ReadPin(EXTI1_GPIO_Port, EXTI1_Pin);
 8006334:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006338:	481f      	ldr	r0, [pc, #124]	; (80063b8 <HAL_GPIO_EXTI_Callback+0x118>)
 800633a:	f002 fe65 	bl	8009008 <HAL_GPIO_ReadPin>
 800633e:	4603      	mov	r3, r0
 8006340:	73fb      	strb	r3, [r7, #15]

		if(((inputConfig & 0x01) == INPUT_BEACON_PIN_1)
 8006342:	4b1e      	ldr	r3, [pc, #120]	; (80063bc <HAL_GPIO_EXTI_Callback+0x11c>)
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	2b00      	cmp	r3, #0
 800634c:	d013      	beq.n	8006376 <HAL_GPIO_EXTI_Callback+0xd6>
				&& ((((inputConfig & 0x04) == INPUT_BEACON_FALLING_EDGE) && (pinLevel == GPIO_PIN_RESET))
 800634e:	4b1b      	ldr	r3, [pc, #108]	; (80063bc <HAL_GPIO_EXTI_Callback+0x11c>)
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	f003 0304 	and.w	r3, r3, #4
 8006356:	2b00      	cmp	r3, #0
 8006358:	d102      	bne.n	8006360 <HAL_GPIO_EXTI_Callback+0xc0>
 800635a:	7bfb      	ldrb	r3, [r7, #15]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d008      	beq.n	8006372 <HAL_GPIO_EXTI_Callback+0xd2>
				|| (((inputConfig & 0x04) == INPUT_BEACON_RISING_EDGE) && (pinLevel == GPIO_PIN_SET))))
 8006360:	4b16      	ldr	r3, [pc, #88]	; (80063bc <HAL_GPIO_EXTI_Callback+0x11c>)
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	f003 0304 	and.w	r3, r3, #4
 8006368:	2b00      	cmp	r3, #0
 800636a:	d004      	beq.n	8006376 <HAL_GPIO_EXTI_Callback+0xd6>
 800636c:	7bfb      	ldrb	r3, [r7, #15]
 800636e:	2b01      	cmp	r3, #1
 8006370:	d101      	bne.n	8006376 <HAL_GPIO_EXTI_Callback+0xd6>
			Principal_Beacon_Detect();
 8006372:	f7ff ff0d 	bl	8006190 <Principal_Beacon_Detect>

		if(((inputConfig & 0x02) == INPUT_DATALOGGER_PIN_1)
 8006376:	4b11      	ldr	r3, [pc, #68]	; (80063bc <HAL_GPIO_EXTI_Callback+0x11c>)
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	f003 0302 	and.w	r3, r3, #2
 800637e:	2b00      	cmp	r3, #0
 8006380:	d015      	beq.n	80063ae <HAL_GPIO_EXTI_Callback+0x10e>
				&& ((((inputConfig & 0x08) == INPUT_DATALOGGER_FALLING_EDGE) && (pinLevel == GPIO_PIN_RESET))
 8006382:	4b0e      	ldr	r3, [pc, #56]	; (80063bc <HAL_GPIO_EXTI_Callback+0x11c>)
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	f003 0308 	and.w	r3, r3, #8
 800638a:	2b00      	cmp	r3, #0
 800638c:	d102      	bne.n	8006394 <HAL_GPIO_EXTI_Callback+0xf4>
 800638e:	7bfb      	ldrb	r3, [r7, #15]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d008      	beq.n	80063a6 <HAL_GPIO_EXTI_Callback+0x106>
				|| (((inputConfig & 0x08) == INPUT_DATALOGGER_RISING_EDGE) && (pinLevel == GPIO_PIN_SET))))
 8006394:	4b09      	ldr	r3, [pc, #36]	; (80063bc <HAL_GPIO_EXTI_Callback+0x11c>)
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	f003 0308 	and.w	r3, r3, #8
 800639c:	2b00      	cmp	r3, #0
 800639e:	d006      	beq.n	80063ae <HAL_GPIO_EXTI_Callback+0x10e>
 80063a0:	7bfb      	ldrb	r3, [r7, #15]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d103      	bne.n	80063ae <HAL_GPIO_EXTI_Callback+0x10e>
			Principal_Datalogger_Button(&dirStruct, &fileStruct);
 80063a6:	4906      	ldr	r1, [pc, #24]	; (80063c0 <HAL_GPIO_EXTI_Callback+0x120>)
 80063a8:	4806      	ldr	r0, [pc, #24]	; (80063c4 <HAL_GPIO_EXTI_Callback+0x124>)
 80063aa:	f7ff fe9b 	bl	80060e4 <Principal_Datalogger_Button>
	}
}
 80063ae:	bf00      	nop
 80063b0:	3710      	adds	r7, #16
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	40020400 	.word	0x40020400
 80063bc:	20012714 	.word	0x20012714
 80063c0:	200116a8 	.word	0x200116a8
 80063c4:	20010640 	.word	0x20010640

080063c8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a35      	ldr	r2, [pc, #212]	; (80064ac <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d162      	bne.n	80064a0 <HAL_TIM_PeriodElapsedCallback+0xd8>
	{
		accDatalogger[DL_ACC_TIMING]++;
 80063da:	4b35      	ldr	r3, [pc, #212]	; (80064b0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	3301      	adds	r3, #1
 80063e0:	4a33      	ldr	r2, [pc, #204]	; (80064b0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80063e2:	6093      	str	r3, [r2, #8]
		accDatalogger[DL_ACC_TIMEOUT]++;
 80063e4:	4b32      	ldr	r3, [pc, #200]	; (80064b0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	3301      	adds	r3, #1
 80063ea:	4a31      	ldr	r2, [pc, #196]	; (80064b0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80063ec:	6053      	str	r3, [r2, #4]
		if(accDatalogger[DL_ACC_COOLDOWN] > 0) accDatalogger[DL_ACC_COOLDOWN]--;
 80063ee:	4b30      	ldr	r3, [pc, #192]	; (80064b0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d004      	beq.n	8006400 <HAL_TIM_PeriodElapsedCallback+0x38>
 80063f6:	4b2e      	ldr	r3, [pc, #184]	; (80064b0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	3b01      	subs	r3, #1
 80063fc:	4a2c      	ldr	r2, [pc, #176]	; (80064b0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80063fe:	6013      	str	r3, [r2, #0]

		accCAN[ANALOG_1_4]++;
 8006400:	4b2c      	ldr	r3, [pc, #176]	; (80064b4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	3301      	adds	r3, #1
 8006406:	4a2b      	ldr	r2, [pc, #172]	; (80064b4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8006408:	6013      	str	r3, [r2, #0]
		accCAN[ANALOG_5_8]++;
 800640a:	4b2a      	ldr	r3, [pc, #168]	; (80064b4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	3301      	adds	r3, #1
 8006410:	4a28      	ldr	r2, [pc, #160]	; (80064b4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8006412:	6053      	str	r3, [r2, #4]
		accCAN[ANALOG_9_12]++;
 8006414:	4b27      	ldr	r3, [pc, #156]	; (80064b4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	3301      	adds	r3, #1
 800641a:	4a26      	ldr	r2, [pc, #152]	; (80064b4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800641c:	6093      	str	r3, [r2, #8]
		accCAN[RTC_MSG]++;
 800641e:	4b25      	ldr	r3, [pc, #148]	; (80064b4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	3301      	adds	r3, #1
 8006424:	4a23      	ldr	r2, [pc, #140]	; (80064b4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8006426:	60d3      	str	r3, [r2, #12]
		accCAN[VERIFY_MSG]++;
 8006428:	4b22      	ldr	r3, [pc, #136]	; (80064b4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	3301      	adds	r3, #1
 800642e:	4a21      	ldr	r2, [pc, #132]	; (80064b4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8006430:	6113      	str	r3, [r2, #16]
		accCAN[BEACON_MSG]++;
 8006432:	4b20      	ldr	r3, [pc, #128]	; (80064b4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	3301      	adds	r3, #1
 8006438:	4a1e      	ldr	r2, [pc, #120]	; (80064b4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800643a:	6153      	str	r3, [r2, #20]

		accMsg[ANALOG_1_4]++;
 800643c:	4b1e      	ldr	r3, [pc, #120]	; (80064b8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	3301      	adds	r3, #1
 8006442:	4a1d      	ldr	r2, [pc, #116]	; (80064b8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006444:	6013      	str	r3, [r2, #0]
		accMsg[ANALOG_5_8]++;
 8006446:	4b1c      	ldr	r3, [pc, #112]	; (80064b8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	3301      	adds	r3, #1
 800644c:	4a1a      	ldr	r2, [pc, #104]	; (80064b8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800644e:	6053      	str	r3, [r2, #4]
		accMsg[ANALOG_9_12]++;
 8006450:	4b19      	ldr	r3, [pc, #100]	; (80064b8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	3301      	adds	r3, #1
 8006456:	4a18      	ldr	r2, [pc, #96]	; (80064b8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006458:	6093      	str	r3, [r2, #8]
		accMsg[RTC_MSG]++;
 800645a:	4b17      	ldr	r3, [pc, #92]	; (80064b8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	3301      	adds	r3, #1
 8006460:	4a15      	ldr	r2, [pc, #84]	; (80064b8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006462:	60d3      	str	r3, [r2, #12]
		accMsg[VERIFY_MSG]++;
 8006464:	4b14      	ldr	r3, [pc, #80]	; (80064b8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	3301      	adds	r3, #1
 800646a:	4a13      	ldr	r2, [pc, #76]	; (80064b8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800646c:	6113      	str	r3, [r2, #16]
		accMsg[BEACON_MSG]++;
 800646e:	4b12      	ldr	r3, [pc, #72]	; (80064b8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	3301      	adds	r3, #1
 8006474:	4a10      	ldr	r2, [pc, #64]	; (80064b8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006476:	6153      	str	r3, [r2, #20]
		accMsg[ECU_SAVE]++;
 8006478:	4b0f      	ldr	r3, [pc, #60]	; (80064b8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800647a:	699b      	ldr	r3, [r3, #24]
 800647c:	3301      	adds	r3, #1
 800647e:	4a0e      	ldr	r2, [pc, #56]	; (80064b8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006480:	6193      	str	r3, [r2, #24]
		accMsg[PDM_SAVE]++;
 8006482:	4b0d      	ldr	r3, [pc, #52]	; (80064b8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006484:	69db      	ldr	r3, [r3, #28]
 8006486:	3301      	adds	r3, #1
 8006488:	4a0b      	ldr	r2, [pc, #44]	; (80064b8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800648a:	61d3      	str	r3, [r2, #28]
		accMsg[VERIFY_LEDS]++;
 800648c:	4b0a      	ldr	r3, [pc, #40]	; (80064b8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800648e:	6a1b      	ldr	r3, [r3, #32]
 8006490:	3301      	adds	r3, #1
 8006492:	4a09      	ldr	r2, [pc, #36]	; (80064b8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006494:	6213      	str	r3, [r2, #32]

		accLap++;
 8006496:	4b09      	ldr	r3, [pc, #36]	; (80064bc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	3301      	adds	r3, #1
 800649c:	4a07      	ldr	r2, [pc, #28]	; (80064bc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800649e:	6013      	str	r3, [r2, #0]
	}
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr
 80064ac:	40001400 	.word	0x40001400
 80064b0:	20012750 	.word	0x20012750
 80064b4:	2001275c 	.word	0x2001275c
 80064b8:	20012774 	.word	0x20012774
 80064bc:	20012798 	.word	0x20012798

080064c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064c6:	2300      	movs	r3, #0
 80064c8:	607b      	str	r3, [r7, #4]
 80064ca:	4b10      	ldr	r3, [pc, #64]	; (800650c <HAL_MspInit+0x4c>)
 80064cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ce:	4a0f      	ldr	r2, [pc, #60]	; (800650c <HAL_MspInit+0x4c>)
 80064d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064d4:	6453      	str	r3, [r2, #68]	; 0x44
 80064d6:	4b0d      	ldr	r3, [pc, #52]	; (800650c <HAL_MspInit+0x4c>)
 80064d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064de:	607b      	str	r3, [r7, #4]
 80064e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80064e2:	2300      	movs	r3, #0
 80064e4:	603b      	str	r3, [r7, #0]
 80064e6:	4b09      	ldr	r3, [pc, #36]	; (800650c <HAL_MspInit+0x4c>)
 80064e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ea:	4a08      	ldr	r2, [pc, #32]	; (800650c <HAL_MspInit+0x4c>)
 80064ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064f0:	6413      	str	r3, [r2, #64]	; 0x40
 80064f2:	4b06      	ldr	r3, [pc, #24]	; (800650c <HAL_MspInit+0x4c>)
 80064f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064fa:	603b      	str	r3, [r7, #0]
 80064fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80064fe:	bf00      	nop
 8006500:	370c      	adds	r7, #12
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	40023800 	.word	0x40023800

08006510 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b08e      	sub	sp, #56	; 0x38
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800651c:	2200      	movs	r2, #0
 800651e:	601a      	str	r2, [r3, #0]
 8006520:	605a      	str	r2, [r3, #4]
 8006522:	609a      	str	r2, [r3, #8]
 8006524:	60da      	str	r2, [r3, #12]
 8006526:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a79      	ldr	r2, [pc, #484]	; (8006714 <HAL_ADC_MspInit+0x204>)
 800652e:	4293      	cmp	r3, r2
 8006530:	f040 808d 	bne.w	800664e <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006534:	2300      	movs	r3, #0
 8006536:	623b      	str	r3, [r7, #32]
 8006538:	4b77      	ldr	r3, [pc, #476]	; (8006718 <HAL_ADC_MspInit+0x208>)
 800653a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800653c:	4a76      	ldr	r2, [pc, #472]	; (8006718 <HAL_ADC_MspInit+0x208>)
 800653e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006542:	6453      	str	r3, [r2, #68]	; 0x44
 8006544:	4b74      	ldr	r3, [pc, #464]	; (8006718 <HAL_ADC_MspInit+0x208>)
 8006546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654c:	623b      	str	r3, [r7, #32]
 800654e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006550:	2300      	movs	r3, #0
 8006552:	61fb      	str	r3, [r7, #28]
 8006554:	4b70      	ldr	r3, [pc, #448]	; (8006718 <HAL_ADC_MspInit+0x208>)
 8006556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006558:	4a6f      	ldr	r2, [pc, #444]	; (8006718 <HAL_ADC_MspInit+0x208>)
 800655a:	f043 0301 	orr.w	r3, r3, #1
 800655e:	6313      	str	r3, [r2, #48]	; 0x30
 8006560:	4b6d      	ldr	r3, [pc, #436]	; (8006718 <HAL_ADC_MspInit+0x208>)
 8006562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006564:	f003 0301 	and.w	r3, r3, #1
 8006568:	61fb      	str	r3, [r7, #28]
 800656a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800656c:	2300      	movs	r3, #0
 800656e:	61bb      	str	r3, [r7, #24]
 8006570:	4b69      	ldr	r3, [pc, #420]	; (8006718 <HAL_ADC_MspInit+0x208>)
 8006572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006574:	4a68      	ldr	r2, [pc, #416]	; (8006718 <HAL_ADC_MspInit+0x208>)
 8006576:	f043 0304 	orr.w	r3, r3, #4
 800657a:	6313      	str	r3, [r2, #48]	; 0x30
 800657c:	4b66      	ldr	r3, [pc, #408]	; (8006718 <HAL_ADC_MspInit+0x208>)
 800657e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006580:	f003 0304 	and.w	r3, r3, #4
 8006584:	61bb      	str	r3, [r7, #24]
 8006586:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006588:	2300      	movs	r3, #0
 800658a:	617b      	str	r3, [r7, #20]
 800658c:	4b62      	ldr	r3, [pc, #392]	; (8006718 <HAL_ADC_MspInit+0x208>)
 800658e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006590:	4a61      	ldr	r2, [pc, #388]	; (8006718 <HAL_ADC_MspInit+0x208>)
 8006592:	f043 0302 	orr.w	r3, r3, #2
 8006596:	6313      	str	r3, [r2, #48]	; 0x30
 8006598:	4b5f      	ldr	r3, [pc, #380]	; (8006718 <HAL_ADC_MspInit+0x208>)
 800659a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659c:	f003 0302 	and.w	r3, r3, #2
 80065a0:	617b      	str	r3, [r7, #20]
 80065a2:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80065a4:	23c0      	movs	r3, #192	; 0xc0
 80065a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80065a8:	2303      	movs	r3, #3
 80065aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ac:	2300      	movs	r3, #0
 80065ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80065b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065b4:	4619      	mov	r1, r3
 80065b6:	4859      	ldr	r0, [pc, #356]	; (800671c <HAL_ADC_MspInit+0x20c>)
 80065b8:	f002 fb92 	bl	8008ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80065bc:	2330      	movs	r3, #48	; 0x30
 80065be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80065c0:	2303      	movs	r3, #3
 80065c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065c4:	2300      	movs	r3, #0
 80065c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80065c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065cc:	4619      	mov	r1, r3
 80065ce:	4854      	ldr	r0, [pc, #336]	; (8006720 <HAL_ADC_MspInit+0x210>)
 80065d0:	f002 fb86 	bl	8008ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80065d4:	2303      	movs	r3, #3
 80065d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80065d8:	2303      	movs	r3, #3
 80065da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065dc:	2300      	movs	r3, #0
 80065de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80065e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065e4:	4619      	mov	r1, r3
 80065e6:	484f      	ldr	r0, [pc, #316]	; (8006724 <HAL_ADC_MspInit+0x214>)
 80065e8:	f002 fb7a 	bl	8008ce0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80065ec:	4b4e      	ldr	r3, [pc, #312]	; (8006728 <HAL_ADC_MspInit+0x218>)
 80065ee:	4a4f      	ldr	r2, [pc, #316]	; (800672c <HAL_ADC_MspInit+0x21c>)
 80065f0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80065f2:	4b4d      	ldr	r3, [pc, #308]	; (8006728 <HAL_ADC_MspInit+0x218>)
 80065f4:	2200      	movs	r2, #0
 80065f6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80065f8:	4b4b      	ldr	r3, [pc, #300]	; (8006728 <HAL_ADC_MspInit+0x218>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80065fe:	4b4a      	ldr	r3, [pc, #296]	; (8006728 <HAL_ADC_MspInit+0x218>)
 8006600:	2200      	movs	r2, #0
 8006602:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006604:	4b48      	ldr	r3, [pc, #288]	; (8006728 <HAL_ADC_MspInit+0x218>)
 8006606:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800660a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800660c:	4b46      	ldr	r3, [pc, #280]	; (8006728 <HAL_ADC_MspInit+0x218>)
 800660e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006612:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006614:	4b44      	ldr	r3, [pc, #272]	; (8006728 <HAL_ADC_MspInit+0x218>)
 8006616:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800661a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800661c:	4b42      	ldr	r3, [pc, #264]	; (8006728 <HAL_ADC_MspInit+0x218>)
 800661e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006622:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006624:	4b40      	ldr	r3, [pc, #256]	; (8006728 <HAL_ADC_MspInit+0x218>)
 8006626:	2200      	movs	r2, #0
 8006628:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800662a:	4b3f      	ldr	r3, [pc, #252]	; (8006728 <HAL_ADC_MspInit+0x218>)
 800662c:	2200      	movs	r2, #0
 800662e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006630:	483d      	ldr	r0, [pc, #244]	; (8006728 <HAL_ADC_MspInit+0x218>)
 8006632:	f001 ffb7 	bl	80085a4 <HAL_DMA_Init>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d001      	beq.n	8006640 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 800663c:	f7fb fa7c 	bl	8001b38 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a39      	ldr	r2, [pc, #228]	; (8006728 <HAL_ADC_MspInit+0x218>)
 8006644:	639a      	str	r2, [r3, #56]	; 0x38
 8006646:	4a38      	ldr	r2, [pc, #224]	; (8006728 <HAL_ADC_MspInit+0x218>)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800664c:	e05d      	b.n	800670a <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a37      	ldr	r2, [pc, #220]	; (8006730 <HAL_ADC_MspInit+0x220>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d158      	bne.n	800670a <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006658:	2300      	movs	r3, #0
 800665a:	613b      	str	r3, [r7, #16]
 800665c:	4b2e      	ldr	r3, [pc, #184]	; (8006718 <HAL_ADC_MspInit+0x208>)
 800665e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006660:	4a2d      	ldr	r2, [pc, #180]	; (8006718 <HAL_ADC_MspInit+0x208>)
 8006662:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006666:	6453      	str	r3, [r2, #68]	; 0x44
 8006668:	4b2b      	ldr	r3, [pc, #172]	; (8006718 <HAL_ADC_MspInit+0x208>)
 800666a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800666c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006670:	613b      	str	r3, [r7, #16]
 8006672:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006674:	2300      	movs	r3, #0
 8006676:	60fb      	str	r3, [r7, #12]
 8006678:	4b27      	ldr	r3, [pc, #156]	; (8006718 <HAL_ADC_MspInit+0x208>)
 800667a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667c:	4a26      	ldr	r2, [pc, #152]	; (8006718 <HAL_ADC_MspInit+0x208>)
 800667e:	f043 0301 	orr.w	r3, r3, #1
 8006682:	6313      	str	r3, [r2, #48]	; 0x30
 8006684:	4b24      	ldr	r3, [pc, #144]	; (8006718 <HAL_ADC_MspInit+0x208>)
 8006686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006688:	f003 0301 	and.w	r3, r3, #1
 800668c:	60fb      	str	r3, [r7, #12]
 800668e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006690:	233f      	movs	r3, #63	; 0x3f
 8006692:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006694:	2303      	movs	r3, #3
 8006696:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006698:	2300      	movs	r3, #0
 800669a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800669c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066a0:	4619      	mov	r1, r3
 80066a2:	481e      	ldr	r0, [pc, #120]	; (800671c <HAL_ADC_MspInit+0x20c>)
 80066a4:	f002 fb1c 	bl	8008ce0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80066a8:	4b22      	ldr	r3, [pc, #136]	; (8006734 <HAL_ADC_MspInit+0x224>)
 80066aa:	4a23      	ldr	r2, [pc, #140]	; (8006738 <HAL_ADC_MspInit+0x228>)
 80066ac:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80066ae:	4b21      	ldr	r3, [pc, #132]	; (8006734 <HAL_ADC_MspInit+0x224>)
 80066b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80066b4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80066b6:	4b1f      	ldr	r3, [pc, #124]	; (8006734 <HAL_ADC_MspInit+0x224>)
 80066b8:	2200      	movs	r2, #0
 80066ba:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80066bc:	4b1d      	ldr	r3, [pc, #116]	; (8006734 <HAL_ADC_MspInit+0x224>)
 80066be:	2200      	movs	r2, #0
 80066c0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80066c2:	4b1c      	ldr	r3, [pc, #112]	; (8006734 <HAL_ADC_MspInit+0x224>)
 80066c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80066c8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80066ca:	4b1a      	ldr	r3, [pc, #104]	; (8006734 <HAL_ADC_MspInit+0x224>)
 80066cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066d0:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80066d2:	4b18      	ldr	r3, [pc, #96]	; (8006734 <HAL_ADC_MspInit+0x224>)
 80066d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80066d8:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80066da:	4b16      	ldr	r3, [pc, #88]	; (8006734 <HAL_ADC_MspInit+0x224>)
 80066dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066e0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80066e2:	4b14      	ldr	r3, [pc, #80]	; (8006734 <HAL_ADC_MspInit+0x224>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80066e8:	4b12      	ldr	r3, [pc, #72]	; (8006734 <HAL_ADC_MspInit+0x224>)
 80066ea:	2200      	movs	r2, #0
 80066ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80066ee:	4811      	ldr	r0, [pc, #68]	; (8006734 <HAL_ADC_MspInit+0x224>)
 80066f0:	f001 ff58 	bl	80085a4 <HAL_DMA_Init>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d001      	beq.n	80066fe <HAL_ADC_MspInit+0x1ee>
      Error_Handler();
 80066fa:	f7fb fa1d 	bl	8001b38 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a0c      	ldr	r2, [pc, #48]	; (8006734 <HAL_ADC_MspInit+0x224>)
 8006702:	639a      	str	r2, [r3, #56]	; 0x38
 8006704:	4a0b      	ldr	r2, [pc, #44]	; (8006734 <HAL_ADC_MspInit+0x224>)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6393      	str	r3, [r2, #56]	; 0x38
}
 800670a:	bf00      	nop
 800670c:	3738      	adds	r7, #56	; 0x38
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	40012000 	.word	0x40012000
 8006718:	40023800 	.word	0x40023800
 800671c:	40020000 	.word	0x40020000
 8006720:	40020800 	.word	0x40020800
 8006724:	40020400 	.word	0x40020400
 8006728:	20000244 	.word	0x20000244
 800672c:	40026410 	.word	0x40026410
 8006730:	40012100 	.word	0x40012100
 8006734:	200002a4 	.word	0x200002a4
 8006738:	40026440 	.word	0x40026440

0800673c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b08a      	sub	sp, #40	; 0x28
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006744:	f107 0314 	add.w	r3, r7, #20
 8006748:	2200      	movs	r2, #0
 800674a:	601a      	str	r2, [r3, #0]
 800674c:	605a      	str	r2, [r3, #4]
 800674e:	609a      	str	r2, [r3, #8]
 8006750:	60da      	str	r2, [r3, #12]
 8006752:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a1d      	ldr	r2, [pc, #116]	; (80067d0 <HAL_CAN_MspInit+0x94>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d134      	bne.n	80067c8 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800675e:	2300      	movs	r3, #0
 8006760:	613b      	str	r3, [r7, #16]
 8006762:	4b1c      	ldr	r3, [pc, #112]	; (80067d4 <HAL_CAN_MspInit+0x98>)
 8006764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006766:	4a1b      	ldr	r2, [pc, #108]	; (80067d4 <HAL_CAN_MspInit+0x98>)
 8006768:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800676c:	6413      	str	r3, [r2, #64]	; 0x40
 800676e:	4b19      	ldr	r3, [pc, #100]	; (80067d4 <HAL_CAN_MspInit+0x98>)
 8006770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006776:	613b      	str	r3, [r7, #16]
 8006778:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800677a:	2300      	movs	r3, #0
 800677c:	60fb      	str	r3, [r7, #12]
 800677e:	4b15      	ldr	r3, [pc, #84]	; (80067d4 <HAL_CAN_MspInit+0x98>)
 8006780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006782:	4a14      	ldr	r2, [pc, #80]	; (80067d4 <HAL_CAN_MspInit+0x98>)
 8006784:	f043 0302 	orr.w	r3, r3, #2
 8006788:	6313      	str	r3, [r2, #48]	; 0x30
 800678a:	4b12      	ldr	r3, [pc, #72]	; (80067d4 <HAL_CAN_MspInit+0x98>)
 800678c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	60fb      	str	r3, [r7, #12]
 8006794:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006796:	f44f 7340 	mov.w	r3, #768	; 0x300
 800679a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800679c:	2302      	movs	r3, #2
 800679e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067a0:	2300      	movs	r3, #0
 80067a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067a4:	2303      	movs	r3, #3
 80067a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80067a8:	2309      	movs	r3, #9
 80067aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067ac:	f107 0314 	add.w	r3, r7, #20
 80067b0:	4619      	mov	r1, r3
 80067b2:	4809      	ldr	r0, [pc, #36]	; (80067d8 <HAL_CAN_MspInit+0x9c>)
 80067b4:	f002 fa94 	bl	8008ce0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 80067b8:	2200      	movs	r2, #0
 80067ba:	2102      	movs	r1, #2
 80067bc:	2014      	movs	r0, #20
 80067be:	f001 feba 	bl	8008536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80067c2:	2014      	movs	r0, #20
 80067c4:	f001 fed3 	bl	800856e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80067c8:	bf00      	nop
 80067ca:	3728      	adds	r7, #40	; 0x28
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	40006400 	.word	0x40006400
 80067d4:	40023800 	.word	0x40023800
 80067d8:	40020400 	.word	0x40020400

080067dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b08a      	sub	sp, #40	; 0x28
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067e4:	f107 0314 	add.w	r3, r7, #20
 80067e8:	2200      	movs	r2, #0
 80067ea:	601a      	str	r2, [r3, #0]
 80067ec:	605a      	str	r2, [r3, #4]
 80067ee:	609a      	str	r2, [r3, #8]
 80067f0:	60da      	str	r2, [r3, #12]
 80067f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a19      	ldr	r2, [pc, #100]	; (8006860 <HAL_I2C_MspInit+0x84>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d12b      	bne.n	8006856 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80067fe:	2300      	movs	r3, #0
 8006800:	613b      	str	r3, [r7, #16]
 8006802:	4b18      	ldr	r3, [pc, #96]	; (8006864 <HAL_I2C_MspInit+0x88>)
 8006804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006806:	4a17      	ldr	r2, [pc, #92]	; (8006864 <HAL_I2C_MspInit+0x88>)
 8006808:	f043 0302 	orr.w	r3, r3, #2
 800680c:	6313      	str	r3, [r2, #48]	; 0x30
 800680e:	4b15      	ldr	r3, [pc, #84]	; (8006864 <HAL_I2C_MspInit+0x88>)
 8006810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006812:	f003 0302 	and.w	r3, r3, #2
 8006816:	613b      	str	r3, [r7, #16]
 8006818:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800681a:	23c0      	movs	r3, #192	; 0xc0
 800681c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800681e:	2312      	movs	r3, #18
 8006820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006822:	2300      	movs	r3, #0
 8006824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006826:	2303      	movs	r3, #3
 8006828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800682a:	2304      	movs	r3, #4
 800682c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800682e:	f107 0314 	add.w	r3, r7, #20
 8006832:	4619      	mov	r1, r3
 8006834:	480c      	ldr	r0, [pc, #48]	; (8006868 <HAL_I2C_MspInit+0x8c>)
 8006836:	f002 fa53 	bl	8008ce0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800683a:	2300      	movs	r3, #0
 800683c:	60fb      	str	r3, [r7, #12]
 800683e:	4b09      	ldr	r3, [pc, #36]	; (8006864 <HAL_I2C_MspInit+0x88>)
 8006840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006842:	4a08      	ldr	r2, [pc, #32]	; (8006864 <HAL_I2C_MspInit+0x88>)
 8006844:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006848:	6413      	str	r3, [r2, #64]	; 0x40
 800684a:	4b06      	ldr	r3, [pc, #24]	; (8006864 <HAL_I2C_MspInit+0x88>)
 800684c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006852:	60fb      	str	r3, [r7, #12]
 8006854:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006856:	bf00      	nop
 8006858:	3728      	adds	r7, #40	; 0x28
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	40005400 	.word	0x40005400
 8006864:	40023800 	.word	0x40023800
 8006868:	40020400 	.word	0x40020400

0800686c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b09a      	sub	sp, #104	; 0x68
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006874:	f107 030c 	add.w	r3, r7, #12
 8006878:	225c      	movs	r2, #92	; 0x5c
 800687a:	2100      	movs	r1, #0
 800687c:	4618      	mov	r0, r3
 800687e:	f012 f8e3 	bl	8018a48 <memset>
  if(hrtc->Instance==RTC)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a0c      	ldr	r2, [pc, #48]	; (80068b8 <HAL_RTC_MspInit+0x4c>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d111      	bne.n	80068b0 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800688c:	2320      	movs	r3, #32
 800688e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006890:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006894:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006896:	f107 030c 	add.w	r3, r7, #12
 800689a:	4618      	mov	r0, r3
 800689c:	f005 f876 	bl	800b98c <HAL_RCCEx_PeriphCLKConfig>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d001      	beq.n	80068aa <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80068a6:	f7fb f947 	bl	8001b38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80068aa:	4b04      	ldr	r3, [pc, #16]	; (80068bc <HAL_RTC_MspInit+0x50>)
 80068ac:	2201      	movs	r2, #1
 80068ae:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80068b0:	bf00      	nop
 80068b2:	3768      	adds	r7, #104	; 0x68
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	40002800 	.word	0x40002800
 80068bc:	42470e3c 	.word	0x42470e3c

080068c0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b08a      	sub	sp, #40	; 0x28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068c8:	f107 0314 	add.w	r3, r7, #20
 80068cc:	2200      	movs	r2, #0
 80068ce:	601a      	str	r2, [r3, #0]
 80068d0:	605a      	str	r2, [r3, #4]
 80068d2:	609a      	str	r2, [r3, #8]
 80068d4:	60da      	str	r2, [r3, #12]
 80068d6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a68      	ldr	r2, [pc, #416]	; (8006a80 <HAL_SD_MspInit+0x1c0>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	f040 80c9 	bne.w	8006a76 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80068e4:	2300      	movs	r3, #0
 80068e6:	613b      	str	r3, [r7, #16]
 80068e8:	4b66      	ldr	r3, [pc, #408]	; (8006a84 <HAL_SD_MspInit+0x1c4>)
 80068ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ec:	4a65      	ldr	r2, [pc, #404]	; (8006a84 <HAL_SD_MspInit+0x1c4>)
 80068ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80068f2:	6453      	str	r3, [r2, #68]	; 0x44
 80068f4:	4b63      	ldr	r3, [pc, #396]	; (8006a84 <HAL_SD_MspInit+0x1c4>)
 80068f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068fc:	613b      	str	r3, [r7, #16]
 80068fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006900:	2300      	movs	r3, #0
 8006902:	60fb      	str	r3, [r7, #12]
 8006904:	4b5f      	ldr	r3, [pc, #380]	; (8006a84 <HAL_SD_MspInit+0x1c4>)
 8006906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006908:	4a5e      	ldr	r2, [pc, #376]	; (8006a84 <HAL_SD_MspInit+0x1c4>)
 800690a:	f043 0304 	orr.w	r3, r3, #4
 800690e:	6313      	str	r3, [r2, #48]	; 0x30
 8006910:	4b5c      	ldr	r3, [pc, #368]	; (8006a84 <HAL_SD_MspInit+0x1c4>)
 8006912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006914:	f003 0304 	and.w	r3, r3, #4
 8006918:	60fb      	str	r3, [r7, #12]
 800691a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800691c:	2300      	movs	r3, #0
 800691e:	60bb      	str	r3, [r7, #8]
 8006920:	4b58      	ldr	r3, [pc, #352]	; (8006a84 <HAL_SD_MspInit+0x1c4>)
 8006922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006924:	4a57      	ldr	r2, [pc, #348]	; (8006a84 <HAL_SD_MspInit+0x1c4>)
 8006926:	f043 0308 	orr.w	r3, r3, #8
 800692a:	6313      	str	r3, [r2, #48]	; 0x30
 800692c:	4b55      	ldr	r3, [pc, #340]	; (8006a84 <HAL_SD_MspInit+0x1c4>)
 800692e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006930:	f003 0308 	and.w	r3, r3, #8
 8006934:	60bb      	str	r3, [r7, #8]
 8006936:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006938:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800693c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800693e:	2302      	movs	r3, #2
 8006940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006942:	2300      	movs	r3, #0
 8006944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006946:	2303      	movs	r3, #3
 8006948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800694a:	230c      	movs	r3, #12
 800694c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800694e:	f107 0314 	add.w	r3, r7, #20
 8006952:	4619      	mov	r1, r3
 8006954:	484c      	ldr	r0, [pc, #304]	; (8006a88 <HAL_SD_MspInit+0x1c8>)
 8006956:	f002 f9c3 	bl	8008ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800695a:	2304      	movs	r3, #4
 800695c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800695e:	2302      	movs	r3, #2
 8006960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006962:	2300      	movs	r3, #0
 8006964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006966:	2303      	movs	r3, #3
 8006968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800696a:	230c      	movs	r3, #12
 800696c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800696e:	f107 0314 	add.w	r3, r7, #20
 8006972:	4619      	mov	r1, r3
 8006974:	4845      	ldr	r0, [pc, #276]	; (8006a8c <HAL_SD_MspInit+0x1cc>)
 8006976:	f002 f9b3 	bl	8008ce0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800697a:	4b45      	ldr	r3, [pc, #276]	; (8006a90 <HAL_SD_MspInit+0x1d0>)
 800697c:	4a45      	ldr	r2, [pc, #276]	; (8006a94 <HAL_SD_MspInit+0x1d4>)
 800697e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006980:	4b43      	ldr	r3, [pc, #268]	; (8006a90 <HAL_SD_MspInit+0x1d0>)
 8006982:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006986:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006988:	4b41      	ldr	r3, [pc, #260]	; (8006a90 <HAL_SD_MspInit+0x1d0>)
 800698a:	2200      	movs	r2, #0
 800698c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800698e:	4b40      	ldr	r3, [pc, #256]	; (8006a90 <HAL_SD_MspInit+0x1d0>)
 8006990:	2200      	movs	r2, #0
 8006992:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006994:	4b3e      	ldr	r3, [pc, #248]	; (8006a90 <HAL_SD_MspInit+0x1d0>)
 8006996:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800699a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800699c:	4b3c      	ldr	r3, [pc, #240]	; (8006a90 <HAL_SD_MspInit+0x1d0>)
 800699e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80069a2:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80069a4:	4b3a      	ldr	r3, [pc, #232]	; (8006a90 <HAL_SD_MspInit+0x1d0>)
 80069a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80069aa:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80069ac:	4b38      	ldr	r3, [pc, #224]	; (8006a90 <HAL_SD_MspInit+0x1d0>)
 80069ae:	2220      	movs	r2, #32
 80069b0:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80069b2:	4b37      	ldr	r3, [pc, #220]	; (8006a90 <HAL_SD_MspInit+0x1d0>)
 80069b4:	2200      	movs	r2, #0
 80069b6:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80069b8:	4b35      	ldr	r3, [pc, #212]	; (8006a90 <HAL_SD_MspInit+0x1d0>)
 80069ba:	2204      	movs	r2, #4
 80069bc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80069be:	4b34      	ldr	r3, [pc, #208]	; (8006a90 <HAL_SD_MspInit+0x1d0>)
 80069c0:	2203      	movs	r2, #3
 80069c2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80069c4:	4b32      	ldr	r3, [pc, #200]	; (8006a90 <HAL_SD_MspInit+0x1d0>)
 80069c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80069ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80069cc:	4b30      	ldr	r3, [pc, #192]	; (8006a90 <HAL_SD_MspInit+0x1d0>)
 80069ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80069d2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80069d4:	482e      	ldr	r0, [pc, #184]	; (8006a90 <HAL_SD_MspInit+0x1d0>)
 80069d6:	f001 fde5 	bl	80085a4 <HAL_DMA_Init>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d001      	beq.n	80069e4 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 80069e0:	f7fb f8aa 	bl	8001b38 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a2a      	ldr	r2, [pc, #168]	; (8006a90 <HAL_SD_MspInit+0x1d0>)
 80069e8:	641a      	str	r2, [r3, #64]	; 0x40
 80069ea:	4a29      	ldr	r2, [pc, #164]	; (8006a90 <HAL_SD_MspInit+0x1d0>)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80069f0:	4b29      	ldr	r3, [pc, #164]	; (8006a98 <HAL_SD_MspInit+0x1d8>)
 80069f2:	4a2a      	ldr	r2, [pc, #168]	; (8006a9c <HAL_SD_MspInit+0x1dc>)
 80069f4:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80069f6:	4b28      	ldr	r3, [pc, #160]	; (8006a98 <HAL_SD_MspInit+0x1d8>)
 80069f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80069fc:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80069fe:	4b26      	ldr	r3, [pc, #152]	; (8006a98 <HAL_SD_MspInit+0x1d8>)
 8006a00:	2240      	movs	r2, #64	; 0x40
 8006a02:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a04:	4b24      	ldr	r3, [pc, #144]	; (8006a98 <HAL_SD_MspInit+0x1d8>)
 8006a06:	2200      	movs	r2, #0
 8006a08:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006a0a:	4b23      	ldr	r3, [pc, #140]	; (8006a98 <HAL_SD_MspInit+0x1d8>)
 8006a0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a10:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006a12:	4b21      	ldr	r3, [pc, #132]	; (8006a98 <HAL_SD_MspInit+0x1d8>)
 8006a14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006a18:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006a1a:	4b1f      	ldr	r3, [pc, #124]	; (8006a98 <HAL_SD_MspInit+0x1d8>)
 8006a1c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006a20:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8006a22:	4b1d      	ldr	r3, [pc, #116]	; (8006a98 <HAL_SD_MspInit+0x1d8>)
 8006a24:	2220      	movs	r2, #32
 8006a26:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006a28:	4b1b      	ldr	r3, [pc, #108]	; (8006a98 <HAL_SD_MspInit+0x1d8>)
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006a2e:	4b1a      	ldr	r3, [pc, #104]	; (8006a98 <HAL_SD_MspInit+0x1d8>)
 8006a30:	2204      	movs	r2, #4
 8006a32:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006a34:	4b18      	ldr	r3, [pc, #96]	; (8006a98 <HAL_SD_MspInit+0x1d8>)
 8006a36:	2203      	movs	r2, #3
 8006a38:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006a3a:	4b17      	ldr	r3, [pc, #92]	; (8006a98 <HAL_SD_MspInit+0x1d8>)
 8006a3c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006a40:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006a42:	4b15      	ldr	r3, [pc, #84]	; (8006a98 <HAL_SD_MspInit+0x1d8>)
 8006a44:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006a48:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8006a4a:	4813      	ldr	r0, [pc, #76]	; (8006a98 <HAL_SD_MspInit+0x1d8>)
 8006a4c:	f001 fdaa 	bl	80085a4 <HAL_DMA_Init>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d001      	beq.n	8006a5a <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8006a56:	f7fb f86f 	bl	8001b38 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a0e      	ldr	r2, [pc, #56]	; (8006a98 <HAL_SD_MspInit+0x1d8>)
 8006a5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8006a60:	4a0d      	ldr	r2, [pc, #52]	; (8006a98 <HAL_SD_MspInit+0x1d8>)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8006a66:	2200      	movs	r2, #0
 8006a68:	2100      	movs	r1, #0
 8006a6a:	2031      	movs	r0, #49	; 0x31
 8006a6c:	f001 fd63 	bl	8008536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8006a70:	2031      	movs	r0, #49	; 0x31
 8006a72:	f001 fd7c 	bl	800856e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8006a76:	bf00      	nop
 8006a78:	3728      	adds	r7, #40	; 0x28
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	40012c00 	.word	0x40012c00
 8006a84:	40023800 	.word	0x40023800
 8006a88:	40020800 	.word	0x40020800
 8006a8c:	40020c00 	.word	0x40020c00
 8006a90:	20000430 	.word	0x20000430
 8006a94:	40026458 	.word	0x40026458
 8006a98:	20000490 	.word	0x20000490
 8006a9c:	400264a0 	.word	0x400264a0

08006aa0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a0e      	ldr	r2, [pc, #56]	; (8006ae8 <HAL_TIM_Base_MspInit+0x48>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d115      	bne.n	8006ade <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	60fb      	str	r3, [r7, #12]
 8006ab6:	4b0d      	ldr	r3, [pc, #52]	; (8006aec <HAL_TIM_Base_MspInit+0x4c>)
 8006ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aba:	4a0c      	ldr	r2, [pc, #48]	; (8006aec <HAL_TIM_Base_MspInit+0x4c>)
 8006abc:	f043 0320 	orr.w	r3, r3, #32
 8006ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8006ac2:	4b0a      	ldr	r3, [pc, #40]	; (8006aec <HAL_TIM_Base_MspInit+0x4c>)
 8006ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac6:	f003 0320 	and.w	r3, r3, #32
 8006aca:	60fb      	str	r3, [r7, #12]
 8006acc:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006ace:	2200      	movs	r2, #0
 8006ad0:	2100      	movs	r1, #0
 8006ad2:	2037      	movs	r0, #55	; 0x37
 8006ad4:	f001 fd2f 	bl	8008536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006ad8:	2037      	movs	r0, #55	; 0x37
 8006ada:	f001 fd48 	bl	800856e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8006ade:	bf00      	nop
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	40001400 	.word	0x40001400
 8006aec:	40023800 	.word	0x40023800

08006af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006af0:	b480      	push	{r7}
 8006af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006af4:	e7fe      	b.n	8006af4 <NMI_Handler+0x4>

08006af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006af6:	b480      	push	{r7}
 8006af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006afa:	e7fe      	b.n	8006afa <HardFault_Handler+0x4>

08006afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006afc:	b480      	push	{r7}
 8006afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006b00:	e7fe      	b.n	8006b00 <MemManage_Handler+0x4>

08006b02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006b02:	b480      	push	{r7}
 8006b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006b06:	e7fe      	b.n	8006b06 <BusFault_Handler+0x4>

08006b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006b0c:	e7fe      	b.n	8006b0c <UsageFault_Handler+0x4>

08006b0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006b0e:	b480      	push	{r7}
 8006b10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006b12:	bf00      	nop
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006b20:	bf00      	nop
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr

08006b2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006b2e:	bf00      	nop
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006b3c:	f000 f922 	bl	8006d84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006b40:	bf00      	nop
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006b48:	4802      	ldr	r0, [pc, #8]	; (8006b54 <CAN1_RX0_IRQHandler+0x10>)
 8006b4a:	f001 f9e9 	bl	8007f20 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8006b4e:	bf00      	nop
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	20000304 	.word	0x20000304

08006b58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI0_Pin);
 8006b5c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006b60:	f002 fa9e 	bl	80090a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI1_Pin);
 8006b64:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006b68:	f002 fa9a 	bl	80090a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006b6c:	bf00      	nop
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8006b74:	4802      	ldr	r0, [pc, #8]	; (8006b80 <SDIO_IRQHandler+0x10>)
 8006b76:	f007 f807 	bl	800db88 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8006b7a:	bf00      	nop
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	200003ac 	.word	0x200003ac

08006b84 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006b88:	4802      	ldr	r0, [pc, #8]	; (8006b94 <TIM7_IRQHandler+0x10>)
 8006b8a:	f008 f967 	bl	800ee5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006b8e:	bf00      	nop
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	200004f0 	.word	0x200004f0

08006b98 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006b9c:	4802      	ldr	r0, [pc, #8]	; (8006ba8 <DMA2_Stream0_IRQHandler+0x10>)
 8006b9e:	f001 fe29 	bl	80087f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006ba2:	bf00      	nop
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	20000244 	.word	0x20000244

08006bac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8006bb0:	4802      	ldr	r0, [pc, #8]	; (8006bbc <DMA2_Stream2_IRQHandler+0x10>)
 8006bb2:	f001 fe1f 	bl	80087f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006bb6:	bf00      	nop
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	200002a4 	.word	0x200002a4

08006bc0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8006bc4:	4802      	ldr	r0, [pc, #8]	; (8006bd0 <DMA2_Stream3_IRQHandler+0x10>)
 8006bc6:	f001 fe15 	bl	80087f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8006bca:	bf00      	nop
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	20000430 	.word	0x20000430

08006bd4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8006bd8:	4802      	ldr	r0, [pc, #8]	; (8006be4 <OTG_FS_IRQHandler+0x10>)
 8006bda:	f003 fbe1 	bl	800a3a0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8006bde:	bf00      	nop
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	20012eac 	.word	0x20012eac

08006be8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8006bec:	4802      	ldr	r0, [pc, #8]	; (8006bf8 <DMA2_Stream6_IRQHandler+0x10>)
 8006bee:	f001 fe01 	bl	80087f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8006bf2:	bf00      	nop
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	20000490 	.word	0x20000490

08006bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b086      	sub	sp, #24
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006c04:	4a14      	ldr	r2, [pc, #80]	; (8006c58 <_sbrk+0x5c>)
 8006c06:	4b15      	ldr	r3, [pc, #84]	; (8006c5c <_sbrk+0x60>)
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006c10:	4b13      	ldr	r3, [pc, #76]	; (8006c60 <_sbrk+0x64>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d102      	bne.n	8006c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006c18:	4b11      	ldr	r3, [pc, #68]	; (8006c60 <_sbrk+0x64>)
 8006c1a:	4a12      	ldr	r2, [pc, #72]	; (8006c64 <_sbrk+0x68>)
 8006c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006c1e:	4b10      	ldr	r3, [pc, #64]	; (8006c60 <_sbrk+0x64>)
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4413      	add	r3, r2
 8006c26:	693a      	ldr	r2, [r7, #16]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d207      	bcs.n	8006c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006c2c:	f011 fed4 	bl	80189d8 <__errno>
 8006c30:	4603      	mov	r3, r0
 8006c32:	220c      	movs	r2, #12
 8006c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006c36:	f04f 33ff 	mov.w	r3, #4294967295
 8006c3a:	e009      	b.n	8006c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006c3c:	4b08      	ldr	r3, [pc, #32]	; (8006c60 <_sbrk+0x64>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006c42:	4b07      	ldr	r3, [pc, #28]	; (8006c60 <_sbrk+0x64>)
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4413      	add	r3, r2
 8006c4a:	4a05      	ldr	r2, [pc, #20]	; (8006c60 <_sbrk+0x64>)
 8006c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3718      	adds	r7, #24
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	20020000 	.word	0x20020000
 8006c5c:	00006000 	.word	0x00006000
 8006c60:	200127a0 	.word	0x200127a0
 8006c64:	20013640 	.word	0x20013640

08006c68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006c6c:	4b06      	ldr	r3, [pc, #24]	; (8006c88 <SystemInit+0x20>)
 8006c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c72:	4a05      	ldr	r2, [pc, #20]	; (8006c88 <SystemInit+0x20>)
 8006c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006c7c:	bf00      	nop
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	e000ed00 	.word	0xe000ed00

08006c8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006c8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006cc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006c90:	480d      	ldr	r0, [pc, #52]	; (8006cc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006c92:	490e      	ldr	r1, [pc, #56]	; (8006ccc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006c94:	4a0e      	ldr	r2, [pc, #56]	; (8006cd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006c96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006c98:	e002      	b.n	8006ca0 <LoopCopyDataInit>

08006c9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006c9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006c9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006c9e:	3304      	adds	r3, #4

08006ca0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006ca0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006ca2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006ca4:	d3f9      	bcc.n	8006c9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006ca6:	4a0b      	ldr	r2, [pc, #44]	; (8006cd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006ca8:	4c0b      	ldr	r4, [pc, #44]	; (8006cd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006caa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006cac:	e001      	b.n	8006cb2 <LoopFillZerobss>

08006cae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006cae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006cb0:	3204      	adds	r2, #4

08006cb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006cb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006cb4:	d3fb      	bcc.n	8006cae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006cb6:	f7ff ffd7 	bl	8006c68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006cba:	f011 fe93 	bl	80189e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006cbe:	f7fa fa8b 	bl	80011d8 <main>
  bx  lr    
 8006cc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006cc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006ccc:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 8006cd0:	080198bc 	.word	0x080198bc
  ldr r2, =_sbss
 8006cd4:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8006cd8:	20013640 	.word	0x20013640

08006cdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006cdc:	e7fe      	b.n	8006cdc <ADC_IRQHandler>
	...

08006ce0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006ce4:	4b0e      	ldr	r3, [pc, #56]	; (8006d20 <HAL_Init+0x40>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a0d      	ldr	r2, [pc, #52]	; (8006d20 <HAL_Init+0x40>)
 8006cea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006cf0:	4b0b      	ldr	r3, [pc, #44]	; (8006d20 <HAL_Init+0x40>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a0a      	ldr	r2, [pc, #40]	; (8006d20 <HAL_Init+0x40>)
 8006cf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006cfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006cfc:	4b08      	ldr	r3, [pc, #32]	; (8006d20 <HAL_Init+0x40>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a07      	ldr	r2, [pc, #28]	; (8006d20 <HAL_Init+0x40>)
 8006d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006d08:	2003      	movs	r0, #3
 8006d0a:	f001 fc09 	bl	8008520 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006d0e:	200f      	movs	r0, #15
 8006d10:	f000 f808 	bl	8006d24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006d14:	f7ff fbd4 	bl	80064c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	40023c00 	.word	0x40023c00

08006d24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006d2c:	4b12      	ldr	r3, [pc, #72]	; (8006d78 <HAL_InitTick+0x54>)
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	4b12      	ldr	r3, [pc, #72]	; (8006d7c <HAL_InitTick+0x58>)
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	4619      	mov	r1, r3
 8006d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d42:	4618      	mov	r0, r3
 8006d44:	f001 fc21 	bl	800858a <HAL_SYSTICK_Config>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d001      	beq.n	8006d52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e00e      	b.n	8006d70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2b0f      	cmp	r3, #15
 8006d56:	d80a      	bhi.n	8006d6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006d58:	2200      	movs	r2, #0
 8006d5a:	6879      	ldr	r1, [r7, #4]
 8006d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d60:	f001 fbe9 	bl	8008536 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006d64:	4a06      	ldr	r2, [pc, #24]	; (8006d80 <HAL_InitTick+0x5c>)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	e000      	b.n	8006d70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3708      	adds	r7, #8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	20000000 	.word	0x20000000
 8006d7c:	20000008 	.word	0x20000008
 8006d80:	20000004 	.word	0x20000004

08006d84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006d84:	b480      	push	{r7}
 8006d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006d88:	4b06      	ldr	r3, [pc, #24]	; (8006da4 <HAL_IncTick+0x20>)
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	4b06      	ldr	r3, [pc, #24]	; (8006da8 <HAL_IncTick+0x24>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4413      	add	r3, r2
 8006d94:	4a04      	ldr	r2, [pc, #16]	; (8006da8 <HAL_IncTick+0x24>)
 8006d96:	6013      	str	r3, [r2, #0]
}
 8006d98:	bf00      	nop
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
 8006da2:	bf00      	nop
 8006da4:	20000008 	.word	0x20000008
 8006da8:	200127a4 	.word	0x200127a4

08006dac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006dac:	b480      	push	{r7}
 8006dae:	af00      	add	r7, sp, #0
  return uwTick;
 8006db0:	4b03      	ldr	r3, [pc, #12]	; (8006dc0 <HAL_GetTick+0x14>)
 8006db2:	681b      	ldr	r3, [r3, #0]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	200127a4 	.word	0x200127a4

08006dc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006dcc:	f7ff ffee 	bl	8006dac <HAL_GetTick>
 8006dd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ddc:	d005      	beq.n	8006dea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006dde:	4b0a      	ldr	r3, [pc, #40]	; (8006e08 <HAL_Delay+0x44>)
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	461a      	mov	r2, r3
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4413      	add	r3, r2
 8006de8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006dea:	bf00      	nop
 8006dec:	f7ff ffde 	bl	8006dac <HAL_GetTick>
 8006df0:	4602      	mov	r2, r0
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	68fa      	ldr	r2, [r7, #12]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d8f7      	bhi.n	8006dec <HAL_Delay+0x28>
  {
  }
}
 8006dfc:	bf00      	nop
 8006dfe:	bf00      	nop
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	20000008 	.word	0x20000008

08006e0c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e14:	2300      	movs	r3, #0
 8006e16:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e033      	b.n	8006e8a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d109      	bne.n	8006e3e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7ff fb70 	bl	8006510 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e42:	f003 0310 	and.w	r3, r3, #16
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d118      	bne.n	8006e7c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006e52:	f023 0302 	bic.w	r3, r3, #2
 8006e56:	f043 0202 	orr.w	r2, r3, #2
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fa78 	bl	8007354 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6e:	f023 0303 	bic.w	r3, r3, #3
 8006e72:	f043 0201 	orr.w	r2, r3, #1
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	641a      	str	r2, [r3, #64]	; 0x40
 8006e7a:	e001      	b.n	8006e80 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
	...

08006e94 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b086      	sub	sp, #24
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d101      	bne.n	8006eb2 <HAL_ADC_Start_DMA+0x1e>
 8006eae:	2302      	movs	r3, #2
 8006eb0:	e0e9      	b.n	8007086 <HAL_ADC_Start_DMA+0x1f2>
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	f003 0301 	and.w	r3, r3, #1
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d018      	beq.n	8006efa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	689a      	ldr	r2, [r3, #8]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f042 0201 	orr.w	r2, r2, #1
 8006ed6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006ed8:	4b6d      	ldr	r3, [pc, #436]	; (8007090 <HAL_ADC_Start_DMA+0x1fc>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a6d      	ldr	r2, [pc, #436]	; (8007094 <HAL_ADC_Start_DMA+0x200>)
 8006ede:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee2:	0c9a      	lsrs	r2, r3, #18
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	005b      	lsls	r3, r3, #1
 8006ee8:	4413      	add	r3, r2
 8006eea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006eec:	e002      	b.n	8006ef4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	3b01      	subs	r3, #1
 8006ef2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1f9      	bne.n	8006eee <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f08:	d107      	bne.n	8006f1a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	689a      	ldr	r2, [r3, #8]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f18:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	f003 0301 	and.w	r3, r3, #1
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	f040 80a1 	bne.w	800706c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006f32:	f023 0301 	bic.w	r3, r3, #1
 8006f36:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d007      	beq.n	8006f5c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006f54:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f68:	d106      	bne.n	8006f78 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f6e:	f023 0206 	bic.w	r2, r3, #6
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	645a      	str	r2, [r3, #68]	; 0x44
 8006f76:	e002      	b.n	8006f7e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006f86:	4b44      	ldr	r3, [pc, #272]	; (8007098 <HAL_ADC_Start_DMA+0x204>)
 8006f88:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8e:	4a43      	ldr	r2, [pc, #268]	; (800709c <HAL_ADC_Start_DMA+0x208>)
 8006f90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f96:	4a42      	ldr	r2, [pc, #264]	; (80070a0 <HAL_ADC_Start_DMA+0x20c>)
 8006f98:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9e:	4a41      	ldr	r2, [pc, #260]	; (80070a4 <HAL_ADC_Start_DMA+0x210>)
 8006fa0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006faa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	685a      	ldr	r2, [r3, #4]
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006fba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	689a      	ldr	r2, [r3, #8]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	334c      	adds	r3, #76	; 0x4c
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	68ba      	ldr	r2, [r7, #8]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f001 fb90 	bl	8008700 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	f003 031f 	and.w	r3, r3, #31
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d12a      	bne.n	8007042 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a2d      	ldr	r2, [pc, #180]	; (80070a8 <HAL_ADC_Start_DMA+0x214>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d015      	beq.n	8007022 <HAL_ADC_Start_DMA+0x18e>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a2c      	ldr	r2, [pc, #176]	; (80070ac <HAL_ADC_Start_DMA+0x218>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d105      	bne.n	800700c <HAL_ADC_Start_DMA+0x178>
 8007000:	4b25      	ldr	r3, [pc, #148]	; (8007098 <HAL_ADC_Start_DMA+0x204>)
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	f003 031f 	and.w	r3, r3, #31
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00a      	beq.n	8007022 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a27      	ldr	r2, [pc, #156]	; (80070b0 <HAL_ADC_Start_DMA+0x21c>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d136      	bne.n	8007084 <HAL_ADC_Start_DMA+0x1f0>
 8007016:	4b20      	ldr	r3, [pc, #128]	; (8007098 <HAL_ADC_Start_DMA+0x204>)
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	f003 0310 	and.w	r3, r3, #16
 800701e:	2b00      	cmp	r3, #0
 8007020:	d130      	bne.n	8007084 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d129      	bne.n	8007084 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	689a      	ldr	r2, [r3, #8]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800703e:	609a      	str	r2, [r3, #8]
 8007040:	e020      	b.n	8007084 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a18      	ldr	r2, [pc, #96]	; (80070a8 <HAL_ADC_Start_DMA+0x214>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d11b      	bne.n	8007084 <HAL_ADC_Start_DMA+0x1f0>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d114      	bne.n	8007084 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	689a      	ldr	r2, [r3, #8]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007068:	609a      	str	r2, [r3, #8]
 800706a:	e00b      	b.n	8007084 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007070:	f043 0210 	orr.w	r2, r3, #16
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800707c:	f043 0201 	orr.w	r2, r3, #1
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3718      	adds	r7, #24
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	20000000 	.word	0x20000000
 8007094:	431bde83 	.word	0x431bde83
 8007098:	40012300 	.word	0x40012300
 800709c:	0800754d 	.word	0x0800754d
 80070a0:	08007607 	.word	0x08007607
 80070a4:	08007623 	.word	0x08007623
 80070a8:	40012000 	.word	0x40012000
 80070ac:	40012100 	.word	0x40012100
 80070b0:	40012200 	.word	0x40012200

080070b4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b083      	sub	sp, #12
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80070bc:	bf00      	nop
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr

080070c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b083      	sub	sp, #12
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80070d0:	bf00      	nop
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80070e4:	bf00      	nop
 80070e6:	370c      	adds	r7, #12
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80070fa:	2300      	movs	r3, #0
 80070fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007104:	2b01      	cmp	r3, #1
 8007106:	d101      	bne.n	800710c <HAL_ADC_ConfigChannel+0x1c>
 8007108:	2302      	movs	r3, #2
 800710a:	e113      	b.n	8007334 <HAL_ADC_ConfigChannel+0x244>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2b09      	cmp	r3, #9
 800711a:	d925      	bls.n	8007168 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68d9      	ldr	r1, [r3, #12]
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	b29b      	uxth	r3, r3
 8007128:	461a      	mov	r2, r3
 800712a:	4613      	mov	r3, r2
 800712c:	005b      	lsls	r3, r3, #1
 800712e:	4413      	add	r3, r2
 8007130:	3b1e      	subs	r3, #30
 8007132:	2207      	movs	r2, #7
 8007134:	fa02 f303 	lsl.w	r3, r2, r3
 8007138:	43da      	mvns	r2, r3
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	400a      	ands	r2, r1
 8007140:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68d9      	ldr	r1, [r3, #12]
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	689a      	ldr	r2, [r3, #8]
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	b29b      	uxth	r3, r3
 8007152:	4618      	mov	r0, r3
 8007154:	4603      	mov	r3, r0
 8007156:	005b      	lsls	r3, r3, #1
 8007158:	4403      	add	r3, r0
 800715a:	3b1e      	subs	r3, #30
 800715c:	409a      	lsls	r2, r3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	430a      	orrs	r2, r1
 8007164:	60da      	str	r2, [r3, #12]
 8007166:	e022      	b.n	80071ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6919      	ldr	r1, [r3, #16]
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	b29b      	uxth	r3, r3
 8007174:	461a      	mov	r2, r3
 8007176:	4613      	mov	r3, r2
 8007178:	005b      	lsls	r3, r3, #1
 800717a:	4413      	add	r3, r2
 800717c:	2207      	movs	r2, #7
 800717e:	fa02 f303 	lsl.w	r3, r2, r3
 8007182:	43da      	mvns	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	400a      	ands	r2, r1
 800718a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	6919      	ldr	r1, [r3, #16]
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	689a      	ldr	r2, [r3, #8]
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	b29b      	uxth	r3, r3
 800719c:	4618      	mov	r0, r3
 800719e:	4603      	mov	r3, r0
 80071a0:	005b      	lsls	r3, r3, #1
 80071a2:	4403      	add	r3, r0
 80071a4:	409a      	lsls	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	430a      	orrs	r2, r1
 80071ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	2b06      	cmp	r3, #6
 80071b4:	d824      	bhi.n	8007200 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	4613      	mov	r3, r2
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	4413      	add	r3, r2
 80071c6:	3b05      	subs	r3, #5
 80071c8:	221f      	movs	r2, #31
 80071ca:	fa02 f303 	lsl.w	r3, r2, r3
 80071ce:	43da      	mvns	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	400a      	ands	r2, r1
 80071d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	4618      	mov	r0, r3
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	685a      	ldr	r2, [r3, #4]
 80071ea:	4613      	mov	r3, r2
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	4413      	add	r3, r2
 80071f0:	3b05      	subs	r3, #5
 80071f2:	fa00 f203 	lsl.w	r2, r0, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	430a      	orrs	r2, r1
 80071fc:	635a      	str	r2, [r3, #52]	; 0x34
 80071fe:	e04c      	b.n	800729a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	2b0c      	cmp	r3, #12
 8007206:	d824      	bhi.n	8007252 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	685a      	ldr	r2, [r3, #4]
 8007212:	4613      	mov	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4413      	add	r3, r2
 8007218:	3b23      	subs	r3, #35	; 0x23
 800721a:	221f      	movs	r2, #31
 800721c:	fa02 f303 	lsl.w	r3, r2, r3
 8007220:	43da      	mvns	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	400a      	ands	r2, r1
 8007228:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	b29b      	uxth	r3, r3
 8007236:	4618      	mov	r0, r3
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	4613      	mov	r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4413      	add	r3, r2
 8007242:	3b23      	subs	r3, #35	; 0x23
 8007244:	fa00 f203 	lsl.w	r2, r0, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	430a      	orrs	r2, r1
 800724e:	631a      	str	r2, [r3, #48]	; 0x30
 8007250:	e023      	b.n	800729a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	685a      	ldr	r2, [r3, #4]
 800725c:	4613      	mov	r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	4413      	add	r3, r2
 8007262:	3b41      	subs	r3, #65	; 0x41
 8007264:	221f      	movs	r2, #31
 8007266:	fa02 f303 	lsl.w	r3, r2, r3
 800726a:	43da      	mvns	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	400a      	ands	r2, r1
 8007272:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	b29b      	uxth	r3, r3
 8007280:	4618      	mov	r0, r3
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	685a      	ldr	r2, [r3, #4]
 8007286:	4613      	mov	r3, r2
 8007288:	009b      	lsls	r3, r3, #2
 800728a:	4413      	add	r3, r2
 800728c:	3b41      	subs	r3, #65	; 0x41
 800728e:	fa00 f203 	lsl.w	r2, r0, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	430a      	orrs	r2, r1
 8007298:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800729a:	4b29      	ldr	r3, [pc, #164]	; (8007340 <HAL_ADC_ConfigChannel+0x250>)
 800729c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a28      	ldr	r2, [pc, #160]	; (8007344 <HAL_ADC_ConfigChannel+0x254>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d10f      	bne.n	80072c8 <HAL_ADC_ConfigChannel+0x1d8>
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2b12      	cmp	r3, #18
 80072ae:	d10b      	bne.n	80072c8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a1d      	ldr	r2, [pc, #116]	; (8007344 <HAL_ADC_ConfigChannel+0x254>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d12b      	bne.n	800732a <HAL_ADC_ConfigChannel+0x23a>
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a1c      	ldr	r2, [pc, #112]	; (8007348 <HAL_ADC_ConfigChannel+0x258>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d003      	beq.n	80072e4 <HAL_ADC_ConfigChannel+0x1f4>
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2b11      	cmp	r3, #17
 80072e2:	d122      	bne.n	800732a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a11      	ldr	r2, [pc, #68]	; (8007348 <HAL_ADC_ConfigChannel+0x258>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d111      	bne.n	800732a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007306:	4b11      	ldr	r3, [pc, #68]	; (800734c <HAL_ADC_ConfigChannel+0x25c>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a11      	ldr	r2, [pc, #68]	; (8007350 <HAL_ADC_ConfigChannel+0x260>)
 800730c:	fba2 2303 	umull	r2, r3, r2, r3
 8007310:	0c9a      	lsrs	r2, r3, #18
 8007312:	4613      	mov	r3, r2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	4413      	add	r3, r2
 8007318:	005b      	lsls	r3, r3, #1
 800731a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800731c:	e002      	b.n	8007324 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	3b01      	subs	r3, #1
 8007322:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1f9      	bne.n	800731e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	3714      	adds	r7, #20
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr
 8007340:	40012300 	.word	0x40012300
 8007344:	40012000 	.word	0x40012000
 8007348:	10000012 	.word	0x10000012
 800734c:	20000000 	.word	0x20000000
 8007350:	431bde83 	.word	0x431bde83

08007354 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800735c:	4b79      	ldr	r3, [pc, #484]	; (8007544 <ADC_Init+0x1f0>)
 800735e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	685a      	ldr	r2, [r3, #4]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	431a      	orrs	r2, r3
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	685a      	ldr	r2, [r3, #4]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007388:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	6859      	ldr	r1, [r3, #4]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	021a      	lsls	r2, r3, #8
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	430a      	orrs	r2, r1
 800739c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	685a      	ldr	r2, [r3, #4]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80073ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	6859      	ldr	r1, [r3, #4]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	689a      	ldr	r2, [r3, #8]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	430a      	orrs	r2, r1
 80073be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	689a      	ldr	r2, [r3, #8]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	6899      	ldr	r1, [r3, #8]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	68da      	ldr	r2, [r3, #12]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	430a      	orrs	r2, r1
 80073e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e6:	4a58      	ldr	r2, [pc, #352]	; (8007548 <ADC_Init+0x1f4>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d022      	beq.n	8007432 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	689a      	ldr	r2, [r3, #8]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80073fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6899      	ldr	r1, [r3, #8]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	430a      	orrs	r2, r1
 800740c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	689a      	ldr	r2, [r3, #8]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800741c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	6899      	ldr	r1, [r3, #8]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	430a      	orrs	r2, r1
 800742e:	609a      	str	r2, [r3, #8]
 8007430:	e00f      	b.n	8007452 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	689a      	ldr	r2, [r3, #8]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007440:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	689a      	ldr	r2, [r3, #8]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007450:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	689a      	ldr	r2, [r3, #8]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f022 0202 	bic.w	r2, r2, #2
 8007460:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	6899      	ldr	r1, [r3, #8]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	7e1b      	ldrb	r3, [r3, #24]
 800746c:	005a      	lsls	r2, r3, #1
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	430a      	orrs	r2, r1
 8007474:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f893 3020 	ldrb.w	r3, [r3, #32]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d01b      	beq.n	80074b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	685a      	ldr	r2, [r3, #4]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800748e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	685a      	ldr	r2, [r3, #4]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800749e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	6859      	ldr	r1, [r3, #4]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074aa:	3b01      	subs	r3, #1
 80074ac:	035a      	lsls	r2, r3, #13
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	430a      	orrs	r2, r1
 80074b4:	605a      	str	r2, [r3, #4]
 80074b6:	e007      	b.n	80074c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	685a      	ldr	r2, [r3, #4]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80074d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	69db      	ldr	r3, [r3, #28]
 80074e2:	3b01      	subs	r3, #1
 80074e4:	051a      	lsls	r2, r3, #20
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	430a      	orrs	r2, r1
 80074ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	689a      	ldr	r2, [r3, #8]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80074fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	6899      	ldr	r1, [r3, #8]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800750a:	025a      	lsls	r2, r3, #9
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	430a      	orrs	r2, r1
 8007512:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	689a      	ldr	r2, [r3, #8]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007522:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	6899      	ldr	r1, [r3, #8]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	695b      	ldr	r3, [r3, #20]
 800752e:	029a      	lsls	r2, r3, #10
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	430a      	orrs	r2, r1
 8007536:	609a      	str	r2, [r3, #8]
}
 8007538:	bf00      	nop
 800753a:	3714      	adds	r7, #20
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr
 8007544:	40012300 	.word	0x40012300
 8007548:	0f000001 	.word	0x0f000001

0800754c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007558:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007562:	2b00      	cmp	r3, #0
 8007564:	d13c      	bne.n	80075e0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800757c:	2b00      	cmp	r3, #0
 800757e:	d12b      	bne.n	80075d8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007584:	2b00      	cmp	r3, #0
 8007586:	d127      	bne.n	80075d8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007592:	2b00      	cmp	r3, #0
 8007594:	d006      	beq.n	80075a4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d119      	bne.n	80075d8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	685a      	ldr	r2, [r3, #4]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f022 0220 	bic.w	r2, r2, #32
 80075b2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d105      	bne.n	80075d8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d0:	f043 0201 	orr.w	r2, r3, #1
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	f7ff fd6b 	bl	80070b4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80075de:	e00e      	b.n	80075fe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e4:	f003 0310 	and.w	r3, r3, #16
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d003      	beq.n	80075f4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80075ec:	68f8      	ldr	r0, [r7, #12]
 80075ee:	f7ff fd75 	bl	80070dc <HAL_ADC_ErrorCallback>
}
 80075f2:	e004      	b.n	80075fe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	4798      	blx	r3
}
 80075fe:	bf00      	nop
 8007600:	3710      	adds	r7, #16
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007606:	b580      	push	{r7, lr}
 8007608:	b084      	sub	sp, #16
 800760a:	af00      	add	r7, sp, #0
 800760c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007612:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007614:	68f8      	ldr	r0, [r7, #12]
 8007616:	f7ff fd57 	bl	80070c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800761a:	bf00      	nop
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b084      	sub	sp, #16
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2240      	movs	r2, #64	; 0x40
 8007634:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800763a:	f043 0204 	orr.w	r2, r3, #4
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f7ff fd4a 	bl	80070dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007648:	bf00      	nop
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d101      	bne.n	8007662 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e0ed      	b.n	800783e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007668:	b2db      	uxtb	r3, r3
 800766a:	2b00      	cmp	r3, #0
 800766c:	d102      	bne.n	8007674 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f7ff f864 	bl	800673c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f042 0201 	orr.w	r2, r2, #1
 8007682:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007684:	f7ff fb92 	bl	8006dac <HAL_GetTick>
 8007688:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800768a:	e012      	b.n	80076b2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800768c:	f7ff fb8e 	bl	8006dac <HAL_GetTick>
 8007690:	4602      	mov	r2, r0
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	2b0a      	cmp	r3, #10
 8007698:	d90b      	bls.n	80076b2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2205      	movs	r2, #5
 80076aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	e0c5      	b.n	800783e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	f003 0301 	and.w	r3, r3, #1
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d0e5      	beq.n	800768c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f022 0202 	bic.w	r2, r2, #2
 80076ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80076d0:	f7ff fb6c 	bl	8006dac <HAL_GetTick>
 80076d4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80076d6:	e012      	b.n	80076fe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80076d8:	f7ff fb68 	bl	8006dac <HAL_GetTick>
 80076dc:	4602      	mov	r2, r0
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	2b0a      	cmp	r3, #10
 80076e4:	d90b      	bls.n	80076fe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2205      	movs	r2, #5
 80076f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e09f      	b.n	800783e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	f003 0302 	and.w	r3, r3, #2
 8007708:	2b00      	cmp	r3, #0
 800770a:	d1e5      	bne.n	80076d8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	7e1b      	ldrb	r3, [r3, #24]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d108      	bne.n	8007726 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007722:	601a      	str	r2, [r3, #0]
 8007724:	e007      	b.n	8007736 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007734:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	7e5b      	ldrb	r3, [r3, #25]
 800773a:	2b01      	cmp	r3, #1
 800773c:	d108      	bne.n	8007750 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800774c:	601a      	str	r2, [r3, #0]
 800774e:	e007      	b.n	8007760 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800775e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	7e9b      	ldrb	r3, [r3, #26]
 8007764:	2b01      	cmp	r3, #1
 8007766:	d108      	bne.n	800777a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f042 0220 	orr.w	r2, r2, #32
 8007776:	601a      	str	r2, [r3, #0]
 8007778:	e007      	b.n	800778a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f022 0220 	bic.w	r2, r2, #32
 8007788:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	7edb      	ldrb	r3, [r3, #27]
 800778e:	2b01      	cmp	r3, #1
 8007790:	d108      	bne.n	80077a4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f022 0210 	bic.w	r2, r2, #16
 80077a0:	601a      	str	r2, [r3, #0]
 80077a2:	e007      	b.n	80077b4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f042 0210 	orr.w	r2, r2, #16
 80077b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	7f1b      	ldrb	r3, [r3, #28]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d108      	bne.n	80077ce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f042 0208 	orr.w	r2, r2, #8
 80077ca:	601a      	str	r2, [r3, #0]
 80077cc:	e007      	b.n	80077de <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f022 0208 	bic.w	r2, r2, #8
 80077dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	7f5b      	ldrb	r3, [r3, #29]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d108      	bne.n	80077f8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f042 0204 	orr.w	r2, r2, #4
 80077f4:	601a      	str	r2, [r3, #0]
 80077f6:	e007      	b.n	8007808 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f022 0204 	bic.w	r2, r2, #4
 8007806:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	689a      	ldr	r2, [r3, #8]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	431a      	orrs	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	431a      	orrs	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	695b      	ldr	r3, [r3, #20]
 800781c:	ea42 0103 	orr.w	r1, r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	1e5a      	subs	r2, r3, #1
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	430a      	orrs	r2, r1
 800782c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800783c:	2300      	movs	r3, #0
}
 800783e:	4618      	mov	r0, r3
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
	...

08007848 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8007848:	b480      	push	{r7}
 800784a:	b087      	sub	sp, #28
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800785e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8007860:	7cfb      	ldrb	r3, [r7, #19]
 8007862:	2b01      	cmp	r3, #1
 8007864:	d003      	beq.n	800786e <HAL_CAN_ConfigFilter+0x26>
 8007866:	7cfb      	ldrb	r3, [r7, #19]
 8007868:	2b02      	cmp	r3, #2
 800786a:	f040 80be 	bne.w	80079ea <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800786e:	4b65      	ldr	r3, [pc, #404]	; (8007a04 <HAL_CAN_ConfigFilter+0x1bc>)
 8007870:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007878:	f043 0201 	orr.w	r2, r3, #1
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007888:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789c:	021b      	lsls	r3, r3, #8
 800789e:	431a      	orrs	r2, r3
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	695b      	ldr	r3, [r3, #20]
 80078aa:	f003 031f 	and.w	r3, r3, #31
 80078ae:	2201      	movs	r2, #1
 80078b0:	fa02 f303 	lsl.w	r3, r2, r3
 80078b4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	43db      	mvns	r3, r3
 80078c0:	401a      	ands	r2, r3
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	69db      	ldr	r3, [r3, #28]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d123      	bne.n	8007918 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	43db      	mvns	r3, r3
 80078da:	401a      	ands	r2, r3
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80078ee:	683a      	ldr	r2, [r7, #0]
 80078f0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80078f2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	3248      	adds	r2, #72	; 0x48
 80078f8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800790c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800790e:	6979      	ldr	r1, [r7, #20]
 8007910:	3348      	adds	r3, #72	; 0x48
 8007912:	00db      	lsls	r3, r3, #3
 8007914:	440b      	add	r3, r1
 8007916:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	69db      	ldr	r3, [r3, #28]
 800791c:	2b01      	cmp	r3, #1
 800791e:	d122      	bne.n	8007966 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	431a      	orrs	r2, r3
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800793c:	683a      	ldr	r2, [r7, #0]
 800793e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007940:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	3248      	adds	r2, #72	; 0x48
 8007946:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800795a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800795c:	6979      	ldr	r1, [r7, #20]
 800795e:	3348      	adds	r3, #72	; 0x48
 8007960:	00db      	lsls	r3, r3, #3
 8007962:	440b      	add	r3, r1
 8007964:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d109      	bne.n	8007982 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	43db      	mvns	r3, r3
 8007978:	401a      	ands	r2, r3
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8007980:	e007      	b.n	8007992 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	431a      	orrs	r2, r3
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d109      	bne.n	80079ae <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	43db      	mvns	r3, r3
 80079a4:	401a      	ands	r2, r3
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80079ac:	e007      	b.n	80079be <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	431a      	orrs	r2, r3
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	6a1b      	ldr	r3, [r3, #32]
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d107      	bne.n	80079d6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	431a      	orrs	r2, r3
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80079dc:	f023 0201 	bic.w	r2, r3, #1
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	e006      	b.n	80079f8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
  }
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	371c      	adds	r7, #28
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr
 8007a04:	40006400 	.word	0x40006400

08007a08 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d12e      	bne.n	8007a7a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2202      	movs	r2, #2
 8007a20:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f022 0201 	bic.w	r2, r2, #1
 8007a32:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007a34:	f7ff f9ba 	bl	8006dac <HAL_GetTick>
 8007a38:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007a3a:	e012      	b.n	8007a62 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007a3c:	f7ff f9b6 	bl	8006dac <HAL_GetTick>
 8007a40:	4602      	mov	r2, r0
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	2b0a      	cmp	r3, #10
 8007a48:	d90b      	bls.n	8007a62 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2205      	movs	r2, #5
 8007a5a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e012      	b.n	8007a88 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	f003 0301 	and.w	r3, r3, #1
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1e5      	bne.n	8007a3c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8007a76:	2300      	movs	r3, #0
 8007a78:	e006      	b.n	8007a88 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
  }
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3710      	adds	r7, #16
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b089      	sub	sp, #36	; 0x24
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	607a      	str	r2, [r7, #4]
 8007a9c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007aa4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8007aae:	7ffb      	ldrb	r3, [r7, #31]
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d003      	beq.n	8007abc <HAL_CAN_AddTxMessage+0x2c>
 8007ab4:	7ffb      	ldrb	r3, [r7, #31]
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	f040 80b8 	bne.w	8007c2c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d10a      	bne.n	8007adc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007ac6:	69bb      	ldr	r3, [r7, #24]
 8007ac8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d105      	bne.n	8007adc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f000 80a0 	beq.w	8007c1c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8007adc:	69bb      	ldr	r3, [r7, #24]
 8007ade:	0e1b      	lsrs	r3, r3, #24
 8007ae0:	f003 0303 	and.w	r3, r3, #3
 8007ae4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	2b02      	cmp	r3, #2
 8007aea:	d907      	bls.n	8007afc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	e09e      	b.n	8007c3a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8007afc:	2201      	movs	r2, #1
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	409a      	lsls	r2, r3
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d10d      	bne.n	8007b2a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007b18:	68f9      	ldr	r1, [r7, #12]
 8007b1a:	6809      	ldr	r1, [r1, #0]
 8007b1c:	431a      	orrs	r2, r3
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	3318      	adds	r3, #24
 8007b22:	011b      	lsls	r3, r3, #4
 8007b24:	440b      	add	r3, r1
 8007b26:	601a      	str	r2, [r3, #0]
 8007b28:	e00f      	b.n	8007b4a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007b34:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007b3a:	68f9      	ldr	r1, [r7, #12]
 8007b3c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8007b3e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	3318      	adds	r3, #24
 8007b44:	011b      	lsls	r3, r3, #4
 8007b46:	440b      	add	r3, r1
 8007b48:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6819      	ldr	r1, [r3, #0]
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	691a      	ldr	r2, [r3, #16]
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	3318      	adds	r3, #24
 8007b56:	011b      	lsls	r3, r3, #4
 8007b58:	440b      	add	r3, r1
 8007b5a:	3304      	adds	r3, #4
 8007b5c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	7d1b      	ldrb	r3, [r3, #20]
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d111      	bne.n	8007b8a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	3318      	adds	r3, #24
 8007b6e:	011b      	lsls	r3, r3, #4
 8007b70:	4413      	add	r3, r2
 8007b72:	3304      	adds	r3, #4
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	6811      	ldr	r1, [r2, #0]
 8007b7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	3318      	adds	r3, #24
 8007b82:	011b      	lsls	r3, r3, #4
 8007b84:	440b      	add	r3, r1
 8007b86:	3304      	adds	r3, #4
 8007b88:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	3307      	adds	r3, #7
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	061a      	lsls	r2, r3, #24
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	3306      	adds	r3, #6
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	041b      	lsls	r3, r3, #16
 8007b9a:	431a      	orrs	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	3305      	adds	r3, #5
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	021b      	lsls	r3, r3, #8
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	3204      	adds	r2, #4
 8007baa:	7812      	ldrb	r2, [r2, #0]
 8007bac:	4610      	mov	r0, r2
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	6811      	ldr	r1, [r2, #0]
 8007bb2:	ea43 0200 	orr.w	r2, r3, r0
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	011b      	lsls	r3, r3, #4
 8007bba:	440b      	add	r3, r1
 8007bbc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8007bc0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	3303      	adds	r3, #3
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	061a      	lsls	r2, r3, #24
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	3302      	adds	r3, #2
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	041b      	lsls	r3, r3, #16
 8007bd2:	431a      	orrs	r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	781b      	ldrb	r3, [r3, #0]
 8007bda:	021b      	lsls	r3, r3, #8
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	7812      	ldrb	r2, [r2, #0]
 8007be2:	4610      	mov	r0, r2
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	6811      	ldr	r1, [r2, #0]
 8007be8:	ea43 0200 	orr.w	r2, r3, r0
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	011b      	lsls	r3, r3, #4
 8007bf0:	440b      	add	r3, r1
 8007bf2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8007bf6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	3318      	adds	r3, #24
 8007c00:	011b      	lsls	r3, r3, #4
 8007c02:	4413      	add	r3, r2
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	6811      	ldr	r1, [r2, #0]
 8007c0a:	f043 0201 	orr.w	r2, r3, #1
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	3318      	adds	r3, #24
 8007c12:	011b      	lsls	r3, r3, #4
 8007c14:	440b      	add	r3, r1
 8007c16:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	e00e      	b.n	8007c3a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c20:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e006      	b.n	8007c3a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c30:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
  }
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3724      	adds	r7, #36	; 0x24
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr

08007c46 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8007c46:	b480      	push	{r7}
 8007c48:	b085      	sub	sp, #20
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c58:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8007c5a:	7afb      	ldrb	r3, [r7, #11]
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d002      	beq.n	8007c66 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8007c60:	7afb      	ldrb	r3, [r7, #11]
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	d11d      	bne.n	8007ca2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d002      	beq.n	8007c7a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	3301      	adds	r3, #1
 8007c78:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d002      	beq.n	8007c8e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	3301      	adds	r3, #1
 8007c8c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d002      	beq.n	8007ca2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3714      	adds	r7, #20
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b087      	sub	sp, #28
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	607a      	str	r2, [r7, #4]
 8007cbc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007cc4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007cc6:	7dfb      	ldrb	r3, [r7, #23]
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d003      	beq.n	8007cd4 <HAL_CAN_GetRxMessage+0x24>
 8007ccc:	7dfb      	ldrb	r3, [r7, #23]
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	f040 80f3 	bne.w	8007eba <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d10e      	bne.n	8007cf8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	f003 0303 	and.w	r3, r3, #3
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d116      	bne.n	8007d16 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e0e7      	b.n	8007ec8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	691b      	ldr	r3, [r3, #16]
 8007cfe:	f003 0303 	and.w	r3, r3, #3
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d107      	bne.n	8007d16 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e0d8      	b.n	8007ec8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	331b      	adds	r3, #27
 8007d1e:	011b      	lsls	r3, r3, #4
 8007d20:	4413      	add	r3, r2
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0204 	and.w	r2, r3, #4
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10c      	bne.n	8007d4e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	331b      	adds	r3, #27
 8007d3c:	011b      	lsls	r3, r3, #4
 8007d3e:	4413      	add	r3, r2
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	0d5b      	lsrs	r3, r3, #21
 8007d44:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	601a      	str	r2, [r3, #0]
 8007d4c:	e00b      	b.n	8007d66 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	331b      	adds	r3, #27
 8007d56:	011b      	lsls	r3, r3, #4
 8007d58:	4413      	add	r3, r2
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	08db      	lsrs	r3, r3, #3
 8007d5e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	331b      	adds	r3, #27
 8007d6e:	011b      	lsls	r3, r3, #4
 8007d70:	4413      	add	r3, r2
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f003 0202 	and.w	r2, r3, #2
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	331b      	adds	r3, #27
 8007d84:	011b      	lsls	r3, r3, #4
 8007d86:	4413      	add	r3, r2
 8007d88:	3304      	adds	r3, #4
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 020f 	and.w	r2, r3, #15
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	331b      	adds	r3, #27
 8007d9c:	011b      	lsls	r3, r3, #4
 8007d9e:	4413      	add	r3, r2
 8007da0:	3304      	adds	r3, #4
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	0a1b      	lsrs	r3, r3, #8
 8007da6:	b2da      	uxtb	r2, r3
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681a      	ldr	r2, [r3, #0]
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	331b      	adds	r3, #27
 8007db4:	011b      	lsls	r3, r3, #4
 8007db6:	4413      	add	r3, r2
 8007db8:	3304      	adds	r3, #4
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	0c1b      	lsrs	r3, r3, #16
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	011b      	lsls	r3, r3, #4
 8007dcc:	4413      	add	r3, r2
 8007dce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	b2da      	uxtb	r2, r3
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	011b      	lsls	r3, r3, #4
 8007de2:	4413      	add	r3, r2
 8007de4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	0a1a      	lsrs	r2, r3, #8
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	3301      	adds	r3, #1
 8007df0:	b2d2      	uxtb	r2, r2
 8007df2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	011b      	lsls	r3, r3, #4
 8007dfc:	4413      	add	r3, r2
 8007dfe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	0c1a      	lsrs	r2, r3, #16
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	3302      	adds	r3, #2
 8007e0a:	b2d2      	uxtb	r2, r2
 8007e0c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	011b      	lsls	r3, r3, #4
 8007e16:	4413      	add	r3, r2
 8007e18:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	0e1a      	lsrs	r2, r3, #24
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	3303      	adds	r3, #3
 8007e24:	b2d2      	uxtb	r2, r2
 8007e26:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	011b      	lsls	r3, r3, #4
 8007e30:	4413      	add	r3, r2
 8007e32:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	3304      	adds	r3, #4
 8007e3c:	b2d2      	uxtb	r2, r2
 8007e3e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	011b      	lsls	r3, r3, #4
 8007e48:	4413      	add	r3, r2
 8007e4a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	0a1a      	lsrs	r2, r3, #8
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	3305      	adds	r3, #5
 8007e56:	b2d2      	uxtb	r2, r2
 8007e58:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	011b      	lsls	r3, r3, #4
 8007e62:	4413      	add	r3, r2
 8007e64:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	0c1a      	lsrs	r2, r3, #16
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	3306      	adds	r3, #6
 8007e70:	b2d2      	uxtb	r2, r2
 8007e72:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	011b      	lsls	r3, r3, #4
 8007e7c:	4413      	add	r3, r2
 8007e7e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	0e1a      	lsrs	r2, r3, #24
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	3307      	adds	r3, #7
 8007e8a:	b2d2      	uxtb	r2, r2
 8007e8c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d108      	bne.n	8007ea6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68da      	ldr	r2, [r3, #12]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f042 0220 	orr.w	r2, r2, #32
 8007ea2:	60da      	str	r2, [r3, #12]
 8007ea4:	e007      	b.n	8007eb6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	691a      	ldr	r2, [r3, #16]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f042 0220 	orr.w	r2, r2, #32
 8007eb4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	e006      	b.n	8007ec8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ebe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
  }
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	371c      	adds	r7, #28
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ee4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8007ee6:	7bfb      	ldrb	r3, [r7, #15]
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d002      	beq.n	8007ef2 <HAL_CAN_ActivateNotification+0x1e>
 8007eec:	7bfb      	ldrb	r3, [r7, #15]
 8007eee:	2b02      	cmp	r3, #2
 8007ef0:	d109      	bne.n	8007f06 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	6959      	ldr	r1, [r3, #20]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	683a      	ldr	r2, [r7, #0]
 8007efe:	430a      	orrs	r2, r1
 8007f00:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8007f02:	2300      	movs	r3, #0
 8007f04:	e006      	b.n	8007f14 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
  }
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3714      	adds	r7, #20
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b08a      	sub	sp, #40	; 0x28
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	695b      	ldr	r3, [r3, #20]
 8007f32:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	691b      	ldr	r3, [r3, #16]
 8007f52:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	699b      	ldr	r3, [r3, #24]
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007f5c:	6a3b      	ldr	r3, [r7, #32]
 8007f5e:	f003 0301 	and.w	r3, r3, #1
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d07c      	beq.n	8008060 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	f003 0301 	and.w	r3, r3, #1
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d023      	beq.n	8007fb8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2201      	movs	r2, #1
 8007f76:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	f003 0302 	and.w	r3, r3, #2
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d003      	beq.n	8007f8a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 f983 	bl	800828e <HAL_CAN_TxMailbox0CompleteCallback>
 8007f88:	e016      	b.n	8007fb8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007f8a:	69bb      	ldr	r3, [r7, #24]
 8007f8c:	f003 0304 	and.w	r3, r3, #4
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d004      	beq.n	8007f9e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8007f9c:	e00c      	b.n	8007fb8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007f9e:	69bb      	ldr	r3, [r7, #24]
 8007fa0:	f003 0308 	and.w	r3, r3, #8
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d004      	beq.n	8007fb2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007faa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007fae:	627b      	str	r3, [r7, #36]	; 0x24
 8007fb0:	e002      	b.n	8007fb8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 f989 	bl	80082ca <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d024      	beq.n	800800c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007fca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d003      	beq.n	8007fde <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f963 	bl	80082a2 <HAL_CAN_TxMailbox1CompleteCallback>
 8007fdc:	e016      	b.n	800800c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d004      	beq.n	8007ff2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007fee:	627b      	str	r3, [r7, #36]	; 0x24
 8007ff0:	e00c      	b.n	800800c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007ff2:	69bb      	ldr	r3, [r7, #24]
 8007ff4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d004      	beq.n	8008006 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008002:	627b      	str	r3, [r7, #36]	; 0x24
 8008004:	e002      	b.n	800800c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f000 f969 	bl	80082de <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008012:	2b00      	cmp	r3, #0
 8008014:	d024      	beq.n	8008060 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800801e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008026:	2b00      	cmp	r3, #0
 8008028:	d003      	beq.n	8008032 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f000 f943 	bl	80082b6 <HAL_CAN_TxMailbox2CompleteCallback>
 8008030:	e016      	b.n	8008060 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008038:	2b00      	cmp	r3, #0
 800803a:	d004      	beq.n	8008046 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800803c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008042:	627b      	str	r3, [r7, #36]	; 0x24
 8008044:	e00c      	b.n	8008060 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800804c:	2b00      	cmp	r3, #0
 800804e:	d004      	beq.n	800805a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8008050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008052:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008056:	627b      	str	r3, [r7, #36]	; 0x24
 8008058:	e002      	b.n	8008060 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f949 	bl	80082f2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8008060:	6a3b      	ldr	r3, [r7, #32]
 8008062:	f003 0308 	and.w	r3, r3, #8
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00c      	beq.n	8008084 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	f003 0310 	and.w	r3, r3, #16
 8008070:	2b00      	cmp	r3, #0
 8008072:	d007      	beq.n	8008084 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8008074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008076:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800807a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2210      	movs	r2, #16
 8008082:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8008084:	6a3b      	ldr	r3, [r7, #32]
 8008086:	f003 0304 	and.w	r3, r3, #4
 800808a:	2b00      	cmp	r3, #0
 800808c:	d00b      	beq.n	80080a6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	f003 0308 	and.w	r3, r3, #8
 8008094:	2b00      	cmp	r3, #0
 8008096:	d006      	beq.n	80080a6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2208      	movs	r2, #8
 800809e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 f930 	bl	8008306 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80080a6:	6a3b      	ldr	r3, [r7, #32]
 80080a8:	f003 0302 	and.w	r3, r3, #2
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d009      	beq.n	80080c4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	f003 0303 	and.w	r3, r3, #3
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d002      	beq.n	80080c4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80080be:	6878      	ldr	r0, [r7, #4]
 80080c0:	f7fe f886 	bl	80061d0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80080c4:	6a3b      	ldr	r3, [r7, #32]
 80080c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00c      	beq.n	80080e8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	f003 0310 	and.w	r3, r3, #16
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d007      	beq.n	80080e8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80080d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80080de:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2210      	movs	r2, #16
 80080e6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80080e8:	6a3b      	ldr	r3, [r7, #32]
 80080ea:	f003 0320 	and.w	r3, r3, #32
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d00b      	beq.n	800810a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	f003 0308 	and.w	r3, r3, #8
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d006      	beq.n	800810a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2208      	movs	r2, #8
 8008102:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 f912 	bl	800832e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800810a:	6a3b      	ldr	r3, [r7, #32]
 800810c:	f003 0310 	and.w	r3, r3, #16
 8008110:	2b00      	cmp	r3, #0
 8008112:	d009      	beq.n	8008128 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	691b      	ldr	r3, [r3, #16]
 800811a:	f003 0303 	and.w	r3, r3, #3
 800811e:	2b00      	cmp	r3, #0
 8008120:	d002      	beq.n	8008128 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f8f9 	bl	800831a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8008128:	6a3b      	ldr	r3, [r7, #32]
 800812a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00b      	beq.n	800814a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	f003 0310 	and.w	r3, r3, #16
 8008138:	2b00      	cmp	r3, #0
 800813a:	d006      	beq.n	800814a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2210      	movs	r2, #16
 8008142:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 f8fc 	bl	8008342 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800814a:	6a3b      	ldr	r3, [r7, #32]
 800814c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00b      	beq.n	800816c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	f003 0308 	and.w	r3, r3, #8
 800815a:	2b00      	cmp	r3, #0
 800815c:	d006      	beq.n	800816c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2208      	movs	r2, #8
 8008164:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f8f5 	bl	8008356 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800816c:	6a3b      	ldr	r3, [r7, #32]
 800816e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008172:	2b00      	cmp	r3, #0
 8008174:	d07b      	beq.n	800826e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	f003 0304 	and.w	r3, r3, #4
 800817c:	2b00      	cmp	r3, #0
 800817e:	d072      	beq.n	8008266 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8008180:	6a3b      	ldr	r3, [r7, #32]
 8008182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008186:	2b00      	cmp	r3, #0
 8008188:	d008      	beq.n	800819c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8008190:	2b00      	cmp	r3, #0
 8008192:	d003      	beq.n	800819c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8008194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008196:	f043 0301 	orr.w	r3, r3, #1
 800819a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800819c:	6a3b      	ldr	r3, [r7, #32]
 800819e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d008      	beq.n	80081b8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d003      	beq.n	80081b8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80081b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b2:	f043 0302 	orr.w	r3, r3, #2
 80081b6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80081b8:	6a3b      	ldr	r3, [r7, #32]
 80081ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d008      	beq.n	80081d4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d003      	beq.n	80081d4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80081cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ce:	f043 0304 	orr.w	r3, r3, #4
 80081d2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80081d4:	6a3b      	ldr	r3, [r7, #32]
 80081d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d043      	beq.n	8008266 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d03e      	beq.n	8008266 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80081ee:	2b60      	cmp	r3, #96	; 0x60
 80081f0:	d02b      	beq.n	800824a <HAL_CAN_IRQHandler+0x32a>
 80081f2:	2b60      	cmp	r3, #96	; 0x60
 80081f4:	d82e      	bhi.n	8008254 <HAL_CAN_IRQHandler+0x334>
 80081f6:	2b50      	cmp	r3, #80	; 0x50
 80081f8:	d022      	beq.n	8008240 <HAL_CAN_IRQHandler+0x320>
 80081fa:	2b50      	cmp	r3, #80	; 0x50
 80081fc:	d82a      	bhi.n	8008254 <HAL_CAN_IRQHandler+0x334>
 80081fe:	2b40      	cmp	r3, #64	; 0x40
 8008200:	d019      	beq.n	8008236 <HAL_CAN_IRQHandler+0x316>
 8008202:	2b40      	cmp	r3, #64	; 0x40
 8008204:	d826      	bhi.n	8008254 <HAL_CAN_IRQHandler+0x334>
 8008206:	2b30      	cmp	r3, #48	; 0x30
 8008208:	d010      	beq.n	800822c <HAL_CAN_IRQHandler+0x30c>
 800820a:	2b30      	cmp	r3, #48	; 0x30
 800820c:	d822      	bhi.n	8008254 <HAL_CAN_IRQHandler+0x334>
 800820e:	2b10      	cmp	r3, #16
 8008210:	d002      	beq.n	8008218 <HAL_CAN_IRQHandler+0x2f8>
 8008212:	2b20      	cmp	r3, #32
 8008214:	d005      	beq.n	8008222 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8008216:	e01d      	b.n	8008254 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8008218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821a:	f043 0308 	orr.w	r3, r3, #8
 800821e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008220:	e019      	b.n	8008256 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8008222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008224:	f043 0310 	orr.w	r3, r3, #16
 8008228:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800822a:	e014      	b.n	8008256 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800822c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822e:	f043 0320 	orr.w	r3, r3, #32
 8008232:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008234:	e00f      	b.n	8008256 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8008236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800823c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800823e:	e00a      	b.n	8008256 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8008240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008246:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008248:	e005      	b.n	8008256 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800824a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008250:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008252:	e000      	b.n	8008256 <HAL_CAN_IRQHandler+0x336>
            break;
 8008254:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	699a      	ldr	r2, [r3, #24]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008264:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2204      	movs	r2, #4
 800826c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800826e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008270:	2b00      	cmp	r3, #0
 8008272:	d008      	beq.n	8008286 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827a:	431a      	orrs	r2, r3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f872 	bl	800836a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8008286:	bf00      	nop
 8008288:	3728      	adds	r7, #40	; 0x28
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800828e:	b480      	push	{r7}
 8008290:	b083      	sub	sp, #12
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8008296:	bf00      	nop
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80082a2:	b480      	push	{r7}
 80082a4:	b083      	sub	sp, #12
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80082aa:	bf00      	nop
 80082ac:	370c      	adds	r7, #12
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr

080082b6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80082b6:	b480      	push	{r7}
 80082b8:	b083      	sub	sp, #12
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80082be:	bf00      	nop
 80082c0:	370c      	adds	r7, #12
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr

080082ca <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80082ca:	b480      	push	{r7}
 80082cc:	b083      	sub	sp, #12
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80082d2:	bf00      	nop
 80082d4:	370c      	adds	r7, #12
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr

080082de <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80082de:	b480      	push	{r7}
 80082e0:	b083      	sub	sp, #12
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80082e6:	bf00      	nop
 80082e8:	370c      	adds	r7, #12
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr

080082f2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80082f2:	b480      	push	{r7}
 80082f4:	b083      	sub	sp, #12
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80082fa:	bf00      	nop
 80082fc:	370c      	adds	r7, #12
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr

08008306 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8008306:	b480      	push	{r7}
 8008308:	b083      	sub	sp, #12
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800830e:	bf00      	nop
 8008310:	370c      	adds	r7, #12
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr

0800831a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800831a:	b480      	push	{r7}
 800831c:	b083      	sub	sp, #12
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8008322:	bf00      	nop
 8008324:	370c      	adds	r7, #12
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr

0800832e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800832e:	b480      	push	{r7}
 8008330:	b083      	sub	sp, #12
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8008336:	bf00      	nop
 8008338:	370c      	adds	r7, #12
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr

08008342 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8008342:	b480      	push	{r7}
 8008344:	b083      	sub	sp, #12
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800834a:	bf00      	nop
 800834c:	370c      	adds	r7, #12
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr

08008356 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8008356:	b480      	push	{r7}
 8008358:	b083      	sub	sp, #12
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800835e:	bf00      	nop
 8008360:	370c      	adds	r7, #12
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr

0800836a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800836a:	b480      	push	{r7}
 800836c:	b083      	sub	sp, #12
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8008372:	bf00      	nop
 8008374:	370c      	adds	r7, #12
 8008376:	46bd      	mov	sp, r7
 8008378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837c:	4770      	bx	lr
	...

08008380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f003 0307 	and.w	r3, r3, #7
 800838e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008390:	4b0c      	ldr	r3, [pc, #48]	; (80083c4 <__NVIC_SetPriorityGrouping+0x44>)
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008396:	68ba      	ldr	r2, [r7, #8]
 8008398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800839c:	4013      	ands	r3, r2
 800839e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80083a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80083ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80083b2:	4a04      	ldr	r2, [pc, #16]	; (80083c4 <__NVIC_SetPriorityGrouping+0x44>)
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	60d3      	str	r3, [r2, #12]
}
 80083b8:	bf00      	nop
 80083ba:	3714      	adds	r7, #20
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr
 80083c4:	e000ed00 	.word	0xe000ed00

080083c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80083c8:	b480      	push	{r7}
 80083ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80083cc:	4b04      	ldr	r3, [pc, #16]	; (80083e0 <__NVIC_GetPriorityGrouping+0x18>)
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	0a1b      	lsrs	r3, r3, #8
 80083d2:	f003 0307 	and.w	r3, r3, #7
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr
 80083e0:	e000ed00 	.word	0xe000ed00

080083e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	4603      	mov	r3, r0
 80083ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80083ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	db0b      	blt.n	800840e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80083f6:	79fb      	ldrb	r3, [r7, #7]
 80083f8:	f003 021f 	and.w	r2, r3, #31
 80083fc:	4907      	ldr	r1, [pc, #28]	; (800841c <__NVIC_EnableIRQ+0x38>)
 80083fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008402:	095b      	lsrs	r3, r3, #5
 8008404:	2001      	movs	r0, #1
 8008406:	fa00 f202 	lsl.w	r2, r0, r2
 800840a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800840e:	bf00      	nop
 8008410:	370c      	adds	r7, #12
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr
 800841a:	bf00      	nop
 800841c:	e000e100 	.word	0xe000e100

08008420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	4603      	mov	r3, r0
 8008428:	6039      	str	r1, [r7, #0]
 800842a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800842c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008430:	2b00      	cmp	r3, #0
 8008432:	db0a      	blt.n	800844a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	b2da      	uxtb	r2, r3
 8008438:	490c      	ldr	r1, [pc, #48]	; (800846c <__NVIC_SetPriority+0x4c>)
 800843a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800843e:	0112      	lsls	r2, r2, #4
 8008440:	b2d2      	uxtb	r2, r2
 8008442:	440b      	add	r3, r1
 8008444:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008448:	e00a      	b.n	8008460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	b2da      	uxtb	r2, r3
 800844e:	4908      	ldr	r1, [pc, #32]	; (8008470 <__NVIC_SetPriority+0x50>)
 8008450:	79fb      	ldrb	r3, [r7, #7]
 8008452:	f003 030f 	and.w	r3, r3, #15
 8008456:	3b04      	subs	r3, #4
 8008458:	0112      	lsls	r2, r2, #4
 800845a:	b2d2      	uxtb	r2, r2
 800845c:	440b      	add	r3, r1
 800845e:	761a      	strb	r2, [r3, #24]
}
 8008460:	bf00      	nop
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr
 800846c:	e000e100 	.word	0xe000e100
 8008470:	e000ed00 	.word	0xe000ed00

08008474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008474:	b480      	push	{r7}
 8008476:	b089      	sub	sp, #36	; 0x24
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f003 0307 	and.w	r3, r3, #7
 8008486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	f1c3 0307 	rsb	r3, r3, #7
 800848e:	2b04      	cmp	r3, #4
 8008490:	bf28      	it	cs
 8008492:	2304      	movcs	r3, #4
 8008494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	3304      	adds	r3, #4
 800849a:	2b06      	cmp	r3, #6
 800849c:	d902      	bls.n	80084a4 <NVIC_EncodePriority+0x30>
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	3b03      	subs	r3, #3
 80084a2:	e000      	b.n	80084a6 <NVIC_EncodePriority+0x32>
 80084a4:	2300      	movs	r3, #0
 80084a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084a8:	f04f 32ff 	mov.w	r2, #4294967295
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	fa02 f303 	lsl.w	r3, r2, r3
 80084b2:	43da      	mvns	r2, r3
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	401a      	ands	r2, r3
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80084bc:	f04f 31ff 	mov.w	r1, #4294967295
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	fa01 f303 	lsl.w	r3, r1, r3
 80084c6:	43d9      	mvns	r1, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084cc:	4313      	orrs	r3, r2
         );
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3724      	adds	r7, #36	; 0x24
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr
	...

080084dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	3b01      	subs	r3, #1
 80084e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80084ec:	d301      	bcc.n	80084f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80084ee:	2301      	movs	r3, #1
 80084f0:	e00f      	b.n	8008512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80084f2:	4a0a      	ldr	r2, [pc, #40]	; (800851c <SysTick_Config+0x40>)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	3b01      	subs	r3, #1
 80084f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80084fa:	210f      	movs	r1, #15
 80084fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008500:	f7ff ff8e 	bl	8008420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008504:	4b05      	ldr	r3, [pc, #20]	; (800851c <SysTick_Config+0x40>)
 8008506:	2200      	movs	r2, #0
 8008508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800850a:	4b04      	ldr	r3, [pc, #16]	; (800851c <SysTick_Config+0x40>)
 800850c:	2207      	movs	r2, #7
 800850e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3708      	adds	r7, #8
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	e000e010 	.word	0xe000e010

08008520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f7ff ff29 	bl	8008380 <__NVIC_SetPriorityGrouping>
}
 800852e:	bf00      	nop
 8008530:	3708      	adds	r7, #8
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008536:	b580      	push	{r7, lr}
 8008538:	b086      	sub	sp, #24
 800853a:	af00      	add	r7, sp, #0
 800853c:	4603      	mov	r3, r0
 800853e:	60b9      	str	r1, [r7, #8]
 8008540:	607a      	str	r2, [r7, #4]
 8008542:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008544:	2300      	movs	r3, #0
 8008546:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008548:	f7ff ff3e 	bl	80083c8 <__NVIC_GetPriorityGrouping>
 800854c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	68b9      	ldr	r1, [r7, #8]
 8008552:	6978      	ldr	r0, [r7, #20]
 8008554:	f7ff ff8e 	bl	8008474 <NVIC_EncodePriority>
 8008558:	4602      	mov	r2, r0
 800855a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800855e:	4611      	mov	r1, r2
 8008560:	4618      	mov	r0, r3
 8008562:	f7ff ff5d 	bl	8008420 <__NVIC_SetPriority>
}
 8008566:	bf00      	nop
 8008568:	3718      	adds	r7, #24
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b082      	sub	sp, #8
 8008572:	af00      	add	r7, sp, #0
 8008574:	4603      	mov	r3, r0
 8008576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800857c:	4618      	mov	r0, r3
 800857e:	f7ff ff31 	bl	80083e4 <__NVIC_EnableIRQ>
}
 8008582:	bf00      	nop
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b082      	sub	sp, #8
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f7ff ffa2 	bl	80084dc <SysTick_Config>
 8008598:	4603      	mov	r3, r0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
	...

080085a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80085ac:	2300      	movs	r3, #0
 80085ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80085b0:	f7fe fbfc 	bl	8006dac <HAL_GetTick>
 80085b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d101      	bne.n	80085c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	e099      	b.n	80086f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2202      	movs	r2, #2
 80085c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f022 0201 	bic.w	r2, r2, #1
 80085de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80085e0:	e00f      	b.n	8008602 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80085e2:	f7fe fbe3 	bl	8006dac <HAL_GetTick>
 80085e6:	4602      	mov	r2, r0
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	1ad3      	subs	r3, r2, r3
 80085ec:	2b05      	cmp	r3, #5
 80085ee:	d908      	bls.n	8008602 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2220      	movs	r2, #32
 80085f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2203      	movs	r2, #3
 80085fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80085fe:	2303      	movs	r3, #3
 8008600:	e078      	b.n	80086f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 0301 	and.w	r3, r3, #1
 800860c:	2b00      	cmp	r3, #0
 800860e:	d1e8      	bne.n	80085e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008618:	697a      	ldr	r2, [r7, #20]
 800861a:	4b38      	ldr	r3, [pc, #224]	; (80086fc <HAL_DMA_Init+0x158>)
 800861c:	4013      	ands	r3, r2
 800861e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	685a      	ldr	r2, [r3, #4]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800862e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800863a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	699b      	ldr	r3, [r3, #24]
 8008640:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008646:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a1b      	ldr	r3, [r3, #32]
 800864c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800864e:	697a      	ldr	r2, [r7, #20]
 8008650:	4313      	orrs	r3, r2
 8008652:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008658:	2b04      	cmp	r3, #4
 800865a:	d107      	bne.n	800866c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008664:	4313      	orrs	r3, r2
 8008666:	697a      	ldr	r2, [r7, #20]
 8008668:	4313      	orrs	r3, r2
 800866a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	697a      	ldr	r2, [r7, #20]
 8008672:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	695b      	ldr	r3, [r3, #20]
 800867a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	f023 0307 	bic.w	r3, r3, #7
 8008682:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008688:	697a      	ldr	r2, [r7, #20]
 800868a:	4313      	orrs	r3, r2
 800868c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008692:	2b04      	cmp	r3, #4
 8008694:	d117      	bne.n	80086c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800869a:	697a      	ldr	r2, [r7, #20]
 800869c:	4313      	orrs	r3, r2
 800869e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00e      	beq.n	80086c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 fa9d 	bl	8008be8 <DMA_CheckFifoParam>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d008      	beq.n	80086c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2240      	movs	r2, #64	; 0x40
 80086b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2201      	movs	r2, #1
 80086be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80086c2:	2301      	movs	r3, #1
 80086c4:	e016      	b.n	80086f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	697a      	ldr	r2, [r7, #20]
 80086cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 fa54 	bl	8008b7c <DMA_CalcBaseAndBitshift>
 80086d4:	4603      	mov	r3, r0
 80086d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086dc:	223f      	movs	r2, #63	; 0x3f
 80086de:	409a      	lsls	r2, r3
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2201      	movs	r2, #1
 80086ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3718      	adds	r7, #24
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	f010803f 	.word	0xf010803f

08008700 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	607a      	str	r2, [r7, #4]
 800870c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800870e:	2300      	movs	r3, #0
 8008710:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008716:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800871e:	2b01      	cmp	r3, #1
 8008720:	d101      	bne.n	8008726 <HAL_DMA_Start_IT+0x26>
 8008722:	2302      	movs	r3, #2
 8008724:	e040      	b.n	80087a8 <HAL_DMA_Start_IT+0xa8>
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2201      	movs	r2, #1
 800872a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008734:	b2db      	uxtb	r3, r3
 8008736:	2b01      	cmp	r3, #1
 8008738:	d12f      	bne.n	800879a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2202      	movs	r2, #2
 800873e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	68b9      	ldr	r1, [r7, #8]
 800874e:	68f8      	ldr	r0, [r7, #12]
 8008750:	f000 f9e6 	bl	8008b20 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008758:	223f      	movs	r2, #63	; 0x3f
 800875a:	409a      	lsls	r2, r3
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f042 0216 	orr.w	r2, r2, #22
 800876e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008774:	2b00      	cmp	r3, #0
 8008776:	d007      	beq.n	8008788 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f042 0208 	orr.w	r2, r2, #8
 8008786:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f042 0201 	orr.w	r2, r2, #1
 8008796:	601a      	str	r2, [r3, #0]
 8008798:	e005      	b.n	80087a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2200      	movs	r2, #0
 800879e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80087a2:	2302      	movs	r3, #2
 80087a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80087a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3718      	adds	r7, #24
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d004      	beq.n	80087ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2280      	movs	r2, #128	; 0x80
 80087c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	e00c      	b.n	80087e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2205      	movs	r2, #5
 80087d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f022 0201 	bic.w	r2, r2, #1
 80087e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80087e6:	2300      	movs	r3, #0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b086      	sub	sp, #24
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80087fc:	2300      	movs	r3, #0
 80087fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008800:	4b8e      	ldr	r3, [pc, #568]	; (8008a3c <HAL_DMA_IRQHandler+0x248>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a8e      	ldr	r2, [pc, #568]	; (8008a40 <HAL_DMA_IRQHandler+0x24c>)
 8008806:	fba2 2303 	umull	r2, r3, r2, r3
 800880a:	0a9b      	lsrs	r3, r3, #10
 800880c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008812:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800881e:	2208      	movs	r2, #8
 8008820:	409a      	lsls	r2, r3
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	4013      	ands	r3, r2
 8008826:	2b00      	cmp	r3, #0
 8008828:	d01a      	beq.n	8008860 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 0304 	and.w	r3, r3, #4
 8008834:	2b00      	cmp	r3, #0
 8008836:	d013      	beq.n	8008860 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f022 0204 	bic.w	r2, r2, #4
 8008846:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800884c:	2208      	movs	r2, #8
 800884e:	409a      	lsls	r2, r3
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008858:	f043 0201 	orr.w	r2, r3, #1
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008864:	2201      	movs	r2, #1
 8008866:	409a      	lsls	r2, r3
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	4013      	ands	r3, r2
 800886c:	2b00      	cmp	r3, #0
 800886e:	d012      	beq.n	8008896 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	695b      	ldr	r3, [r3, #20]
 8008876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00b      	beq.n	8008896 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008882:	2201      	movs	r2, #1
 8008884:	409a      	lsls	r2, r3
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800888e:	f043 0202 	orr.w	r2, r3, #2
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800889a:	2204      	movs	r2, #4
 800889c:	409a      	lsls	r2, r3
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	4013      	ands	r3, r2
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d012      	beq.n	80088cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 0302 	and.w	r3, r3, #2
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d00b      	beq.n	80088cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088b8:	2204      	movs	r2, #4
 80088ba:	409a      	lsls	r2, r3
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088c4:	f043 0204 	orr.w	r2, r3, #4
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088d0:	2210      	movs	r2, #16
 80088d2:	409a      	lsls	r2, r3
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	4013      	ands	r3, r2
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d043      	beq.n	8008964 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f003 0308 	and.w	r3, r3, #8
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d03c      	beq.n	8008964 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088ee:	2210      	movs	r2, #16
 80088f0:	409a      	lsls	r2, r3
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008900:	2b00      	cmp	r3, #0
 8008902:	d018      	beq.n	8008936 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800890e:	2b00      	cmp	r3, #0
 8008910:	d108      	bne.n	8008924 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008916:	2b00      	cmp	r3, #0
 8008918:	d024      	beq.n	8008964 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	4798      	blx	r3
 8008922:	e01f      	b.n	8008964 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008928:	2b00      	cmp	r3, #0
 800892a:	d01b      	beq.n	8008964 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	4798      	blx	r3
 8008934:	e016      	b.n	8008964 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008940:	2b00      	cmp	r3, #0
 8008942:	d107      	bne.n	8008954 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f022 0208 	bic.w	r2, r2, #8
 8008952:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008958:	2b00      	cmp	r3, #0
 800895a:	d003      	beq.n	8008964 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008968:	2220      	movs	r2, #32
 800896a:	409a      	lsls	r2, r3
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	4013      	ands	r3, r2
 8008970:	2b00      	cmp	r3, #0
 8008972:	f000 808f 	beq.w	8008a94 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f003 0310 	and.w	r3, r3, #16
 8008980:	2b00      	cmp	r3, #0
 8008982:	f000 8087 	beq.w	8008a94 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800898a:	2220      	movs	r2, #32
 800898c:	409a      	lsls	r2, r3
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008998:	b2db      	uxtb	r3, r3
 800899a:	2b05      	cmp	r3, #5
 800899c:	d136      	bne.n	8008a0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f022 0216 	bic.w	r2, r2, #22
 80089ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	695a      	ldr	r2, [r3, #20]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d103      	bne.n	80089ce <HAL_DMA_IRQHandler+0x1da>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d007      	beq.n	80089de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f022 0208 	bic.w	r2, r2, #8
 80089dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089e2:	223f      	movs	r2, #63	; 0x3f
 80089e4:	409a      	lsls	r2, r3
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2201      	movs	r2, #1
 80089ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d07e      	beq.n	8008b00 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	4798      	blx	r3
        }
        return;
 8008a0a:	e079      	b.n	8008b00 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d01d      	beq.n	8008a56 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d10d      	bne.n	8008a44 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d031      	beq.n	8008a94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	4798      	blx	r3
 8008a38:	e02c      	b.n	8008a94 <HAL_DMA_IRQHandler+0x2a0>
 8008a3a:	bf00      	nop
 8008a3c:	20000000 	.word	0x20000000
 8008a40:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d023      	beq.n	8008a94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	4798      	blx	r3
 8008a54:	e01e      	b.n	8008a94 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d10f      	bne.n	8008a84 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f022 0210 	bic.w	r2, r2, #16
 8008a72:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2201      	movs	r2, #1
 8008a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d003      	beq.n	8008a94 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d032      	beq.n	8008b02 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aa0:	f003 0301 	and.w	r3, r3, #1
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d022      	beq.n	8008aee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2205      	movs	r2, #5
 8008aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f022 0201 	bic.w	r2, r2, #1
 8008abe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	60bb      	str	r3, [r7, #8]
 8008ac6:	697a      	ldr	r2, [r7, #20]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d307      	bcc.n	8008adc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f003 0301 	and.w	r3, r3, #1
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d1f2      	bne.n	8008ac0 <HAL_DMA_IRQHandler+0x2cc>
 8008ada:	e000      	b.n	8008ade <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008adc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d005      	beq.n	8008b02 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	4798      	blx	r3
 8008afe:	e000      	b.n	8008b02 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008b00:	bf00      	nop
    }
  }
}
 8008b02:	3718      	adds	r7, #24
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	370c      	adds	r7, #12
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr

08008b20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b085      	sub	sp, #20
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	607a      	str	r2, [r7, #4]
 8008b2c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008b3c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	683a      	ldr	r2, [r7, #0]
 8008b44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	2b40      	cmp	r3, #64	; 0x40
 8008b4c:	d108      	bne.n	8008b60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68ba      	ldr	r2, [r7, #8]
 8008b5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008b5e:	e007      	b.n	8008b70 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	68ba      	ldr	r2, [r7, #8]
 8008b66:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	60da      	str	r2, [r3, #12]
}
 8008b70:	bf00      	nop
 8008b72:	3714      	adds	r7, #20
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b085      	sub	sp, #20
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	3b10      	subs	r3, #16
 8008b8c:	4a14      	ldr	r2, [pc, #80]	; (8008be0 <DMA_CalcBaseAndBitshift+0x64>)
 8008b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b92:	091b      	lsrs	r3, r3, #4
 8008b94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008b96:	4a13      	ldr	r2, [pc, #76]	; (8008be4 <DMA_CalcBaseAndBitshift+0x68>)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2b03      	cmp	r3, #3
 8008ba8:	d909      	bls.n	8008bbe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008bb2:	f023 0303 	bic.w	r3, r3, #3
 8008bb6:	1d1a      	adds	r2, r3, #4
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	659a      	str	r2, [r3, #88]	; 0x58
 8008bbc:	e007      	b.n	8008bce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008bc6:	f023 0303 	bic.w	r3, r3, #3
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3714      	adds	r7, #20
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	aaaaaaab 	.word	0xaaaaaaab
 8008be4:	080193f8 	.word	0x080193f8

08008be8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	699b      	ldr	r3, [r3, #24]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d11f      	bne.n	8008c42 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	2b03      	cmp	r3, #3
 8008c06:	d856      	bhi.n	8008cb6 <DMA_CheckFifoParam+0xce>
 8008c08:	a201      	add	r2, pc, #4	; (adr r2, 8008c10 <DMA_CheckFifoParam+0x28>)
 8008c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c0e:	bf00      	nop
 8008c10:	08008c21 	.word	0x08008c21
 8008c14:	08008c33 	.word	0x08008c33
 8008c18:	08008c21 	.word	0x08008c21
 8008c1c:	08008cb7 	.word	0x08008cb7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d046      	beq.n	8008cba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008c30:	e043      	b.n	8008cba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008c3a:	d140      	bne.n	8008cbe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008c40:	e03d      	b.n	8008cbe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	699b      	ldr	r3, [r3, #24]
 8008c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c4a:	d121      	bne.n	8008c90 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	2b03      	cmp	r3, #3
 8008c50:	d837      	bhi.n	8008cc2 <DMA_CheckFifoParam+0xda>
 8008c52:	a201      	add	r2, pc, #4	; (adr r2, 8008c58 <DMA_CheckFifoParam+0x70>)
 8008c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c58:	08008c69 	.word	0x08008c69
 8008c5c:	08008c6f 	.word	0x08008c6f
 8008c60:	08008c69 	.word	0x08008c69
 8008c64:	08008c81 	.word	0x08008c81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c6c:	e030      	b.n	8008cd0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d025      	beq.n	8008cc6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008c7e:	e022      	b.n	8008cc6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008c88:	d11f      	bne.n	8008cca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008c8e:	e01c      	b.n	8008cca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	d903      	bls.n	8008c9e <DMA_CheckFifoParam+0xb6>
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	2b03      	cmp	r3, #3
 8008c9a:	d003      	beq.n	8008ca4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008c9c:	e018      	b.n	8008cd0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ca2:	e015      	b.n	8008cd0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00e      	beq.n	8008cce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8008cb4:	e00b      	b.n	8008cce <DMA_CheckFifoParam+0xe6>
      break;
 8008cb6:	bf00      	nop
 8008cb8:	e00a      	b.n	8008cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8008cba:	bf00      	nop
 8008cbc:	e008      	b.n	8008cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8008cbe:	bf00      	nop
 8008cc0:	e006      	b.n	8008cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8008cc2:	bf00      	nop
 8008cc4:	e004      	b.n	8008cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8008cc6:	bf00      	nop
 8008cc8:	e002      	b.n	8008cd0 <DMA_CheckFifoParam+0xe8>
      break;   
 8008cca:	bf00      	nop
 8008ccc:	e000      	b.n	8008cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8008cce:	bf00      	nop
    }
  } 
  
  return status; 
 8008cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3714      	adds	r7, #20
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr
 8008cde:	bf00      	nop

08008ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b089      	sub	sp, #36	; 0x24
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008cea:	2300      	movs	r3, #0
 8008cec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	61fb      	str	r3, [r7, #28]
 8008cfa:	e165      	b.n	8008fc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	69fb      	ldr	r3, [r7, #28]
 8008d00:	fa02 f303 	lsl.w	r3, r2, r3
 8008d04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	697a      	ldr	r2, [r7, #20]
 8008d0c:	4013      	ands	r3, r2
 8008d0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008d10:	693a      	ldr	r2, [r7, #16]
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	f040 8154 	bne.w	8008fc2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	f003 0303 	and.w	r3, r3, #3
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d005      	beq.n	8008d32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	d130      	bne.n	8008d94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	005b      	lsls	r3, r3, #1
 8008d3c:	2203      	movs	r2, #3
 8008d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d42:	43db      	mvns	r3, r3
 8008d44:	69ba      	ldr	r2, [r7, #24]
 8008d46:	4013      	ands	r3, r2
 8008d48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	68da      	ldr	r2, [r3, #12]
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	005b      	lsls	r3, r3, #1
 8008d52:	fa02 f303 	lsl.w	r3, r2, r3
 8008d56:	69ba      	ldr	r2, [r7, #24]
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	69ba      	ldr	r2, [r7, #24]
 8008d60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008d68:	2201      	movs	r2, #1
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d70:	43db      	mvns	r3, r3
 8008d72:	69ba      	ldr	r2, [r7, #24]
 8008d74:	4013      	ands	r3, r2
 8008d76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	091b      	lsrs	r3, r3, #4
 8008d7e:	f003 0201 	and.w	r2, r3, #1
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	fa02 f303 	lsl.w	r3, r2, r3
 8008d88:	69ba      	ldr	r2, [r7, #24]
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	69ba      	ldr	r2, [r7, #24]
 8008d92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	f003 0303 	and.w	r3, r3, #3
 8008d9c:	2b03      	cmp	r3, #3
 8008d9e:	d017      	beq.n	8008dd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008da6:	69fb      	ldr	r3, [r7, #28]
 8008da8:	005b      	lsls	r3, r3, #1
 8008daa:	2203      	movs	r2, #3
 8008dac:	fa02 f303 	lsl.w	r3, r2, r3
 8008db0:	43db      	mvns	r3, r3
 8008db2:	69ba      	ldr	r2, [r7, #24]
 8008db4:	4013      	ands	r3, r2
 8008db6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	689a      	ldr	r2, [r3, #8]
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	005b      	lsls	r3, r3, #1
 8008dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8008dc4:	69ba      	ldr	r2, [r7, #24]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	69ba      	ldr	r2, [r7, #24]
 8008dce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	f003 0303 	and.w	r3, r3, #3
 8008dd8:	2b02      	cmp	r3, #2
 8008dda:	d123      	bne.n	8008e24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	08da      	lsrs	r2, r3, #3
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	3208      	adds	r2, #8
 8008de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008dea:	69fb      	ldr	r3, [r7, #28]
 8008dec:	f003 0307 	and.w	r3, r3, #7
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	220f      	movs	r2, #15
 8008df4:	fa02 f303 	lsl.w	r3, r2, r3
 8008df8:	43db      	mvns	r3, r3
 8008dfa:	69ba      	ldr	r2, [r7, #24]
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	691a      	ldr	r2, [r3, #16]
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	f003 0307 	and.w	r3, r3, #7
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e10:	69ba      	ldr	r2, [r7, #24]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008e16:	69fb      	ldr	r3, [r7, #28]
 8008e18:	08da      	lsrs	r2, r3, #3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	3208      	adds	r2, #8
 8008e1e:	69b9      	ldr	r1, [r7, #24]
 8008e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	005b      	lsls	r3, r3, #1
 8008e2e:	2203      	movs	r2, #3
 8008e30:	fa02 f303 	lsl.w	r3, r2, r3
 8008e34:	43db      	mvns	r3, r3
 8008e36:	69ba      	ldr	r2, [r7, #24]
 8008e38:	4013      	ands	r3, r2
 8008e3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	f003 0203 	and.w	r2, r3, #3
 8008e44:	69fb      	ldr	r3, [r7, #28]
 8008e46:	005b      	lsls	r3, r3, #1
 8008e48:	fa02 f303 	lsl.w	r3, r2, r3
 8008e4c:	69ba      	ldr	r2, [r7, #24]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	69ba      	ldr	r2, [r7, #24]
 8008e56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f000 80ae 	beq.w	8008fc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e66:	2300      	movs	r3, #0
 8008e68:	60fb      	str	r3, [r7, #12]
 8008e6a:	4b5d      	ldr	r3, [pc, #372]	; (8008fe0 <HAL_GPIO_Init+0x300>)
 8008e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e6e:	4a5c      	ldr	r2, [pc, #368]	; (8008fe0 <HAL_GPIO_Init+0x300>)
 8008e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e74:	6453      	str	r3, [r2, #68]	; 0x44
 8008e76:	4b5a      	ldr	r3, [pc, #360]	; (8008fe0 <HAL_GPIO_Init+0x300>)
 8008e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e7e:	60fb      	str	r3, [r7, #12]
 8008e80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008e82:	4a58      	ldr	r2, [pc, #352]	; (8008fe4 <HAL_GPIO_Init+0x304>)
 8008e84:	69fb      	ldr	r3, [r7, #28]
 8008e86:	089b      	lsrs	r3, r3, #2
 8008e88:	3302      	adds	r3, #2
 8008e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	f003 0303 	and.w	r3, r3, #3
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	220f      	movs	r2, #15
 8008e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e9e:	43db      	mvns	r3, r3
 8008ea0:	69ba      	ldr	r2, [r7, #24]
 8008ea2:	4013      	ands	r3, r2
 8008ea4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4a4f      	ldr	r2, [pc, #316]	; (8008fe8 <HAL_GPIO_Init+0x308>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d025      	beq.n	8008efa <HAL_GPIO_Init+0x21a>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	4a4e      	ldr	r2, [pc, #312]	; (8008fec <HAL_GPIO_Init+0x30c>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d01f      	beq.n	8008ef6 <HAL_GPIO_Init+0x216>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	4a4d      	ldr	r2, [pc, #308]	; (8008ff0 <HAL_GPIO_Init+0x310>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d019      	beq.n	8008ef2 <HAL_GPIO_Init+0x212>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4a4c      	ldr	r2, [pc, #304]	; (8008ff4 <HAL_GPIO_Init+0x314>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d013      	beq.n	8008eee <HAL_GPIO_Init+0x20e>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	4a4b      	ldr	r2, [pc, #300]	; (8008ff8 <HAL_GPIO_Init+0x318>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d00d      	beq.n	8008eea <HAL_GPIO_Init+0x20a>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	4a4a      	ldr	r2, [pc, #296]	; (8008ffc <HAL_GPIO_Init+0x31c>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d007      	beq.n	8008ee6 <HAL_GPIO_Init+0x206>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4a49      	ldr	r2, [pc, #292]	; (8009000 <HAL_GPIO_Init+0x320>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d101      	bne.n	8008ee2 <HAL_GPIO_Init+0x202>
 8008ede:	2306      	movs	r3, #6
 8008ee0:	e00c      	b.n	8008efc <HAL_GPIO_Init+0x21c>
 8008ee2:	2307      	movs	r3, #7
 8008ee4:	e00a      	b.n	8008efc <HAL_GPIO_Init+0x21c>
 8008ee6:	2305      	movs	r3, #5
 8008ee8:	e008      	b.n	8008efc <HAL_GPIO_Init+0x21c>
 8008eea:	2304      	movs	r3, #4
 8008eec:	e006      	b.n	8008efc <HAL_GPIO_Init+0x21c>
 8008eee:	2303      	movs	r3, #3
 8008ef0:	e004      	b.n	8008efc <HAL_GPIO_Init+0x21c>
 8008ef2:	2302      	movs	r3, #2
 8008ef4:	e002      	b.n	8008efc <HAL_GPIO_Init+0x21c>
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e000      	b.n	8008efc <HAL_GPIO_Init+0x21c>
 8008efa:	2300      	movs	r3, #0
 8008efc:	69fa      	ldr	r2, [r7, #28]
 8008efe:	f002 0203 	and.w	r2, r2, #3
 8008f02:	0092      	lsls	r2, r2, #2
 8008f04:	4093      	lsls	r3, r2
 8008f06:	69ba      	ldr	r2, [r7, #24]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008f0c:	4935      	ldr	r1, [pc, #212]	; (8008fe4 <HAL_GPIO_Init+0x304>)
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	089b      	lsrs	r3, r3, #2
 8008f12:	3302      	adds	r3, #2
 8008f14:	69ba      	ldr	r2, [r7, #24]
 8008f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008f1a:	4b3a      	ldr	r3, [pc, #232]	; (8009004 <HAL_GPIO_Init+0x324>)
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	43db      	mvns	r3, r3
 8008f24:	69ba      	ldr	r2, [r7, #24]
 8008f26:	4013      	ands	r3, r2
 8008f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d003      	beq.n	8008f3e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8008f36:	69ba      	ldr	r2, [r7, #24]
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008f3e:	4a31      	ldr	r2, [pc, #196]	; (8009004 <HAL_GPIO_Init+0x324>)
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008f44:	4b2f      	ldr	r3, [pc, #188]	; (8009004 <HAL_GPIO_Init+0x324>)
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	43db      	mvns	r3, r3
 8008f4e:	69ba      	ldr	r2, [r7, #24]
 8008f50:	4013      	ands	r3, r2
 8008f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d003      	beq.n	8008f68 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008f60:	69ba      	ldr	r2, [r7, #24]
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	4313      	orrs	r3, r2
 8008f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008f68:	4a26      	ldr	r2, [pc, #152]	; (8009004 <HAL_GPIO_Init+0x324>)
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008f6e:	4b25      	ldr	r3, [pc, #148]	; (8009004 <HAL_GPIO_Init+0x324>)
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	43db      	mvns	r3, r3
 8008f78:	69ba      	ldr	r2, [r7, #24]
 8008f7a:	4013      	ands	r3, r2
 8008f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d003      	beq.n	8008f92 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8008f8a:	69ba      	ldr	r2, [r7, #24]
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008f92:	4a1c      	ldr	r2, [pc, #112]	; (8009004 <HAL_GPIO_Init+0x324>)
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008f98:	4b1a      	ldr	r3, [pc, #104]	; (8009004 <HAL_GPIO_Init+0x324>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	43db      	mvns	r3, r3
 8008fa2:	69ba      	ldr	r2, [r7, #24]
 8008fa4:	4013      	ands	r3, r2
 8008fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d003      	beq.n	8008fbc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008fb4:	69ba      	ldr	r2, [r7, #24]
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008fbc:	4a11      	ldr	r2, [pc, #68]	; (8009004 <HAL_GPIO_Init+0x324>)
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	61fb      	str	r3, [r7, #28]
 8008fc8:	69fb      	ldr	r3, [r7, #28]
 8008fca:	2b0f      	cmp	r3, #15
 8008fcc:	f67f ae96 	bls.w	8008cfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008fd0:	bf00      	nop
 8008fd2:	bf00      	nop
 8008fd4:	3724      	adds	r7, #36	; 0x24
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop
 8008fe0:	40023800 	.word	0x40023800
 8008fe4:	40013800 	.word	0x40013800
 8008fe8:	40020000 	.word	0x40020000
 8008fec:	40020400 	.word	0x40020400
 8008ff0:	40020800 	.word	0x40020800
 8008ff4:	40020c00 	.word	0x40020c00
 8008ff8:	40021000 	.word	0x40021000
 8008ffc:	40021400 	.word	0x40021400
 8009000:	40021800 	.word	0x40021800
 8009004:	40013c00 	.word	0x40013c00

08009008 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009008:	b480      	push	{r7}
 800900a:	b085      	sub	sp, #20
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	460b      	mov	r3, r1
 8009012:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	691a      	ldr	r2, [r3, #16]
 8009018:	887b      	ldrh	r3, [r7, #2]
 800901a:	4013      	ands	r3, r2
 800901c:	2b00      	cmp	r3, #0
 800901e:	d002      	beq.n	8009026 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009020:	2301      	movs	r3, #1
 8009022:	73fb      	strb	r3, [r7, #15]
 8009024:	e001      	b.n	800902a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009026:	2300      	movs	r3, #0
 8009028:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800902a:	7bfb      	ldrb	r3, [r7, #15]
}
 800902c:	4618      	mov	r0, r3
 800902e:	3714      	adds	r7, #20
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr

08009038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	460b      	mov	r3, r1
 8009042:	807b      	strh	r3, [r7, #2]
 8009044:	4613      	mov	r3, r2
 8009046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009048:	787b      	ldrb	r3, [r7, #1]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d003      	beq.n	8009056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800904e:	887a      	ldrh	r2, [r7, #2]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009054:	e003      	b.n	800905e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009056:	887b      	ldrh	r3, [r7, #2]
 8009058:	041a      	lsls	r2, r3, #16
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	619a      	str	r2, [r3, #24]
}
 800905e:	bf00      	nop
 8009060:	370c      	adds	r7, #12
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr

0800906a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800906a:	b480      	push	{r7}
 800906c:	b085      	sub	sp, #20
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
 8009072:	460b      	mov	r3, r1
 8009074:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	695b      	ldr	r3, [r3, #20]
 800907a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800907c:	887a      	ldrh	r2, [r7, #2]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	4013      	ands	r3, r2
 8009082:	041a      	lsls	r2, r3, #16
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	43d9      	mvns	r1, r3
 8009088:	887b      	ldrh	r3, [r7, #2]
 800908a:	400b      	ands	r3, r1
 800908c:	431a      	orrs	r2, r3
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	619a      	str	r2, [r3, #24]
}
 8009092:	bf00      	nop
 8009094:	3714      	adds	r7, #20
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr
	...

080090a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	4603      	mov	r3, r0
 80090a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80090aa:	4b08      	ldr	r3, [pc, #32]	; (80090cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80090ac:	695a      	ldr	r2, [r3, #20]
 80090ae:	88fb      	ldrh	r3, [r7, #6]
 80090b0:	4013      	ands	r3, r2
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d006      	beq.n	80090c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80090b6:	4a05      	ldr	r2, [pc, #20]	; (80090cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80090b8:	88fb      	ldrh	r3, [r7, #6]
 80090ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80090bc:	88fb      	ldrh	r3, [r7, #6]
 80090be:	4618      	mov	r0, r3
 80090c0:	f7fd f8ee 	bl	80062a0 <HAL_GPIO_EXTI_Callback>
  }
}
 80090c4:	bf00      	nop
 80090c6:	3708      	adds	r7, #8
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	40013c00 	.word	0x40013c00

080090d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d101      	bne.n	80090e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	e12b      	b.n	800933a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d106      	bne.n	80090fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f7fd fb70 	bl	80067dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2224      	movs	r2, #36	; 0x24
 8009100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f022 0201 	bic.w	r2, r2, #1
 8009112:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009122:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009132:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009134:	f002 fc16 	bl	800b964 <HAL_RCC_GetPCLK1Freq>
 8009138:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	4a81      	ldr	r2, [pc, #516]	; (8009344 <HAL_I2C_Init+0x274>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d807      	bhi.n	8009154 <HAL_I2C_Init+0x84>
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	4a80      	ldr	r2, [pc, #512]	; (8009348 <HAL_I2C_Init+0x278>)
 8009148:	4293      	cmp	r3, r2
 800914a:	bf94      	ite	ls
 800914c:	2301      	movls	r3, #1
 800914e:	2300      	movhi	r3, #0
 8009150:	b2db      	uxtb	r3, r3
 8009152:	e006      	b.n	8009162 <HAL_I2C_Init+0x92>
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	4a7d      	ldr	r2, [pc, #500]	; (800934c <HAL_I2C_Init+0x27c>)
 8009158:	4293      	cmp	r3, r2
 800915a:	bf94      	ite	ls
 800915c:	2301      	movls	r3, #1
 800915e:	2300      	movhi	r3, #0
 8009160:	b2db      	uxtb	r3, r3
 8009162:	2b00      	cmp	r3, #0
 8009164:	d001      	beq.n	800916a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	e0e7      	b.n	800933a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	4a78      	ldr	r2, [pc, #480]	; (8009350 <HAL_I2C_Init+0x280>)
 800916e:	fba2 2303 	umull	r2, r3, r2, r3
 8009172:	0c9b      	lsrs	r3, r3, #18
 8009174:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	68ba      	ldr	r2, [r7, #8]
 8009186:	430a      	orrs	r2, r1
 8009188:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	6a1b      	ldr	r3, [r3, #32]
 8009190:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	4a6a      	ldr	r2, [pc, #424]	; (8009344 <HAL_I2C_Init+0x274>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d802      	bhi.n	80091a4 <HAL_I2C_Init+0xd4>
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	3301      	adds	r3, #1
 80091a2:	e009      	b.n	80091b8 <HAL_I2C_Init+0xe8>
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80091aa:	fb02 f303 	mul.w	r3, r2, r3
 80091ae:	4a69      	ldr	r2, [pc, #420]	; (8009354 <HAL_I2C_Init+0x284>)
 80091b0:	fba2 2303 	umull	r2, r3, r2, r3
 80091b4:	099b      	lsrs	r3, r3, #6
 80091b6:	3301      	adds	r3, #1
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	6812      	ldr	r2, [r2, #0]
 80091bc:	430b      	orrs	r3, r1
 80091be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	69db      	ldr	r3, [r3, #28]
 80091c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80091ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	495c      	ldr	r1, [pc, #368]	; (8009344 <HAL_I2C_Init+0x274>)
 80091d4:	428b      	cmp	r3, r1
 80091d6:	d819      	bhi.n	800920c <HAL_I2C_Init+0x13c>
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	1e59      	subs	r1, r3, #1
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	005b      	lsls	r3, r3, #1
 80091e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80091e6:	1c59      	adds	r1, r3, #1
 80091e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80091ec:	400b      	ands	r3, r1
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00a      	beq.n	8009208 <HAL_I2C_Init+0x138>
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	1e59      	subs	r1, r3, #1
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	005b      	lsls	r3, r3, #1
 80091fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8009200:	3301      	adds	r3, #1
 8009202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009206:	e051      	b.n	80092ac <HAL_I2C_Init+0x1dc>
 8009208:	2304      	movs	r3, #4
 800920a:	e04f      	b.n	80092ac <HAL_I2C_Init+0x1dc>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d111      	bne.n	8009238 <HAL_I2C_Init+0x168>
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	1e58      	subs	r0, r3, #1
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6859      	ldr	r1, [r3, #4]
 800921c:	460b      	mov	r3, r1
 800921e:	005b      	lsls	r3, r3, #1
 8009220:	440b      	add	r3, r1
 8009222:	fbb0 f3f3 	udiv	r3, r0, r3
 8009226:	3301      	adds	r3, #1
 8009228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800922c:	2b00      	cmp	r3, #0
 800922e:	bf0c      	ite	eq
 8009230:	2301      	moveq	r3, #1
 8009232:	2300      	movne	r3, #0
 8009234:	b2db      	uxtb	r3, r3
 8009236:	e012      	b.n	800925e <HAL_I2C_Init+0x18e>
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	1e58      	subs	r0, r3, #1
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6859      	ldr	r1, [r3, #4]
 8009240:	460b      	mov	r3, r1
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	440b      	add	r3, r1
 8009246:	0099      	lsls	r1, r3, #2
 8009248:	440b      	add	r3, r1
 800924a:	fbb0 f3f3 	udiv	r3, r0, r3
 800924e:	3301      	adds	r3, #1
 8009250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009254:	2b00      	cmp	r3, #0
 8009256:	bf0c      	ite	eq
 8009258:	2301      	moveq	r3, #1
 800925a:	2300      	movne	r3, #0
 800925c:	b2db      	uxtb	r3, r3
 800925e:	2b00      	cmp	r3, #0
 8009260:	d001      	beq.n	8009266 <HAL_I2C_Init+0x196>
 8009262:	2301      	movs	r3, #1
 8009264:	e022      	b.n	80092ac <HAL_I2C_Init+0x1dc>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d10e      	bne.n	800928c <HAL_I2C_Init+0x1bc>
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	1e58      	subs	r0, r3, #1
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6859      	ldr	r1, [r3, #4]
 8009276:	460b      	mov	r3, r1
 8009278:	005b      	lsls	r3, r3, #1
 800927a:	440b      	add	r3, r1
 800927c:	fbb0 f3f3 	udiv	r3, r0, r3
 8009280:	3301      	adds	r3, #1
 8009282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800928a:	e00f      	b.n	80092ac <HAL_I2C_Init+0x1dc>
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	1e58      	subs	r0, r3, #1
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6859      	ldr	r1, [r3, #4]
 8009294:	460b      	mov	r3, r1
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	440b      	add	r3, r1
 800929a:	0099      	lsls	r1, r3, #2
 800929c:	440b      	add	r3, r1
 800929e:	fbb0 f3f3 	udiv	r3, r0, r3
 80092a2:	3301      	adds	r3, #1
 80092a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80092ac:	6879      	ldr	r1, [r7, #4]
 80092ae:	6809      	ldr	r1, [r1, #0]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	69da      	ldr	r2, [r3, #28]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6a1b      	ldr	r3, [r3, #32]
 80092c6:	431a      	orrs	r2, r3
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	430a      	orrs	r2, r1
 80092ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80092da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	6911      	ldr	r1, [r2, #16]
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	68d2      	ldr	r2, [r2, #12]
 80092e6:	4311      	orrs	r1, r2
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	6812      	ldr	r2, [r2, #0]
 80092ec:	430b      	orrs	r3, r1
 80092ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	695a      	ldr	r2, [r3, #20]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	699b      	ldr	r3, [r3, #24]
 8009302:	431a      	orrs	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	430a      	orrs	r2, r1
 800930a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f042 0201 	orr.w	r2, r2, #1
 800931a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2200      	movs	r2, #0
 8009320:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2220      	movs	r2, #32
 8009326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	000186a0 	.word	0x000186a0
 8009348:	001e847f 	.word	0x001e847f
 800934c:	003d08ff 	.word	0x003d08ff
 8009350:	431bde83 	.word	0x431bde83
 8009354:	10624dd3 	.word	0x10624dd3

08009358 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b088      	sub	sp, #32
 800935c:	af02      	add	r7, sp, #8
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	4608      	mov	r0, r1
 8009362:	4611      	mov	r1, r2
 8009364:	461a      	mov	r2, r3
 8009366:	4603      	mov	r3, r0
 8009368:	817b      	strh	r3, [r7, #10]
 800936a:	460b      	mov	r3, r1
 800936c:	813b      	strh	r3, [r7, #8]
 800936e:	4613      	mov	r3, r2
 8009370:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009372:	f7fd fd1b 	bl	8006dac <HAL_GetTick>
 8009376:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800937e:	b2db      	uxtb	r3, r3
 8009380:	2b20      	cmp	r3, #32
 8009382:	f040 80d9 	bne.w	8009538 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	9300      	str	r3, [sp, #0]
 800938a:	2319      	movs	r3, #25
 800938c:	2201      	movs	r2, #1
 800938e:	496d      	ldr	r1, [pc, #436]	; (8009544 <HAL_I2C_Mem_Write+0x1ec>)
 8009390:	68f8      	ldr	r0, [r7, #12]
 8009392:	f000 fc7f 	bl	8009c94 <I2C_WaitOnFlagUntilTimeout>
 8009396:	4603      	mov	r3, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d001      	beq.n	80093a0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800939c:	2302      	movs	r3, #2
 800939e:	e0cc      	b.n	800953a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d101      	bne.n	80093ae <HAL_I2C_Mem_Write+0x56>
 80093aa:	2302      	movs	r3, #2
 80093ac:	e0c5      	b.n	800953a <HAL_I2C_Mem_Write+0x1e2>
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2201      	movs	r2, #1
 80093b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f003 0301 	and.w	r3, r3, #1
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d007      	beq.n	80093d4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f042 0201 	orr.w	r2, r2, #1
 80093d2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093e2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2221      	movs	r2, #33	; 0x21
 80093e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2240      	movs	r2, #64	; 0x40
 80093f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2200      	movs	r2, #0
 80093f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6a3a      	ldr	r2, [r7, #32]
 80093fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009404:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800940a:	b29a      	uxth	r2, r3
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	4a4d      	ldr	r2, [pc, #308]	; (8009548 <HAL_I2C_Mem_Write+0x1f0>)
 8009414:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009416:	88f8      	ldrh	r0, [r7, #6]
 8009418:	893a      	ldrh	r2, [r7, #8]
 800941a:	8979      	ldrh	r1, [r7, #10]
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	9301      	str	r3, [sp, #4]
 8009420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009422:	9300      	str	r3, [sp, #0]
 8009424:	4603      	mov	r3, r0
 8009426:	68f8      	ldr	r0, [r7, #12]
 8009428:	f000 fab6 	bl	8009998 <I2C_RequestMemoryWrite>
 800942c:	4603      	mov	r3, r0
 800942e:	2b00      	cmp	r3, #0
 8009430:	d052      	beq.n	80094d8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009432:	2301      	movs	r3, #1
 8009434:	e081      	b.n	800953a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009436:	697a      	ldr	r2, [r7, #20]
 8009438:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f000 fd00 	bl	8009e40 <I2C_WaitOnTXEFlagUntilTimeout>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d00d      	beq.n	8009462 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800944a:	2b04      	cmp	r3, #4
 800944c:	d107      	bne.n	800945e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800945c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800945e:	2301      	movs	r3, #1
 8009460:	e06b      	b.n	800953a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009466:	781a      	ldrb	r2, [r3, #0]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009472:	1c5a      	adds	r2, r3, #1
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800947c:	3b01      	subs	r3, #1
 800947e:	b29a      	uxth	r2, r3
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009488:	b29b      	uxth	r3, r3
 800948a:	3b01      	subs	r3, #1
 800948c:	b29a      	uxth	r2, r3
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	695b      	ldr	r3, [r3, #20]
 8009498:	f003 0304 	and.w	r3, r3, #4
 800949c:	2b04      	cmp	r3, #4
 800949e:	d11b      	bne.n	80094d8 <HAL_I2C_Mem_Write+0x180>
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d017      	beq.n	80094d8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ac:	781a      	ldrb	r2, [r3, #0]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b8:	1c5a      	adds	r2, r3, #1
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094c2:	3b01      	subs	r3, #1
 80094c4:	b29a      	uxth	r2, r3
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	3b01      	subs	r3, #1
 80094d2:	b29a      	uxth	r2, r3
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d1aa      	bne.n	8009436 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80094e0:	697a      	ldr	r2, [r7, #20]
 80094e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094e4:	68f8      	ldr	r0, [r7, #12]
 80094e6:	f000 fcec 	bl	8009ec2 <I2C_WaitOnBTFFlagUntilTimeout>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d00d      	beq.n	800950c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f4:	2b04      	cmp	r3, #4
 80094f6:	d107      	bne.n	8009508 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009506:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	e016      	b.n	800953a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800951a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2220      	movs	r2, #32
 8009520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2200      	movs	r2, #0
 8009528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2200      	movs	r2, #0
 8009530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009534:	2300      	movs	r3, #0
 8009536:	e000      	b.n	800953a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009538:	2302      	movs	r3, #2
  }
}
 800953a:	4618      	mov	r0, r3
 800953c:	3718      	adds	r7, #24
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	00100002 	.word	0x00100002
 8009548:	ffff0000 	.word	0xffff0000

0800954c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b08c      	sub	sp, #48	; 0x30
 8009550:	af02      	add	r7, sp, #8
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	4608      	mov	r0, r1
 8009556:	4611      	mov	r1, r2
 8009558:	461a      	mov	r2, r3
 800955a:	4603      	mov	r3, r0
 800955c:	817b      	strh	r3, [r7, #10]
 800955e:	460b      	mov	r3, r1
 8009560:	813b      	strh	r3, [r7, #8]
 8009562:	4613      	mov	r3, r2
 8009564:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009566:	f7fd fc21 	bl	8006dac <HAL_GetTick>
 800956a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009572:	b2db      	uxtb	r3, r3
 8009574:	2b20      	cmp	r3, #32
 8009576:	f040 8208 	bne.w	800998a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800957a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957c:	9300      	str	r3, [sp, #0]
 800957e:	2319      	movs	r3, #25
 8009580:	2201      	movs	r2, #1
 8009582:	497b      	ldr	r1, [pc, #492]	; (8009770 <HAL_I2C_Mem_Read+0x224>)
 8009584:	68f8      	ldr	r0, [r7, #12]
 8009586:	f000 fb85 	bl	8009c94 <I2C_WaitOnFlagUntilTimeout>
 800958a:	4603      	mov	r3, r0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d001      	beq.n	8009594 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8009590:	2302      	movs	r3, #2
 8009592:	e1fb      	b.n	800998c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800959a:	2b01      	cmp	r3, #1
 800959c:	d101      	bne.n	80095a2 <HAL_I2C_Mem_Read+0x56>
 800959e:	2302      	movs	r3, #2
 80095a0:	e1f4      	b.n	800998c <HAL_I2C_Mem_Read+0x440>
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2201      	movs	r2, #1
 80095a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f003 0301 	and.w	r3, r3, #1
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d007      	beq.n	80095c8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f042 0201 	orr.w	r2, r2, #1
 80095c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80095d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2222      	movs	r2, #34	; 0x22
 80095dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2240      	movs	r2, #64	; 0x40
 80095e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2200      	movs	r2, #0
 80095ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80095f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095fe:	b29a      	uxth	r2, r3
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	4a5b      	ldr	r2, [pc, #364]	; (8009774 <HAL_I2C_Mem_Read+0x228>)
 8009608:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800960a:	88f8      	ldrh	r0, [r7, #6]
 800960c:	893a      	ldrh	r2, [r7, #8]
 800960e:	8979      	ldrh	r1, [r7, #10]
 8009610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009612:	9301      	str	r3, [sp, #4]
 8009614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009616:	9300      	str	r3, [sp, #0]
 8009618:	4603      	mov	r3, r0
 800961a:	68f8      	ldr	r0, [r7, #12]
 800961c:	f000 fa52 	bl	8009ac4 <I2C_RequestMemoryRead>
 8009620:	4603      	mov	r3, r0
 8009622:	2b00      	cmp	r3, #0
 8009624:	d001      	beq.n	800962a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009626:	2301      	movs	r3, #1
 8009628:	e1b0      	b.n	800998c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800962e:	2b00      	cmp	r3, #0
 8009630:	d113      	bne.n	800965a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009632:	2300      	movs	r3, #0
 8009634:	623b      	str	r3, [r7, #32]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	695b      	ldr	r3, [r3, #20]
 800963c:	623b      	str	r3, [r7, #32]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	699b      	ldr	r3, [r3, #24]
 8009644:	623b      	str	r3, [r7, #32]
 8009646:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009656:	601a      	str	r2, [r3, #0]
 8009658:	e184      	b.n	8009964 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800965e:	2b01      	cmp	r3, #1
 8009660:	d11b      	bne.n	800969a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009670:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009672:	2300      	movs	r3, #0
 8009674:	61fb      	str	r3, [r7, #28]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	695b      	ldr	r3, [r3, #20]
 800967c:	61fb      	str	r3, [r7, #28]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	699b      	ldr	r3, [r3, #24]
 8009684:	61fb      	str	r3, [r7, #28]
 8009686:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009696:	601a      	str	r2, [r3, #0]
 8009698:	e164      	b.n	8009964 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800969e:	2b02      	cmp	r3, #2
 80096a0:	d11b      	bne.n	80096da <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096c2:	2300      	movs	r3, #0
 80096c4:	61bb      	str	r3, [r7, #24]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	695b      	ldr	r3, [r3, #20]
 80096cc:	61bb      	str	r3, [r7, #24]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	699b      	ldr	r3, [r3, #24]
 80096d4:	61bb      	str	r3, [r7, #24]
 80096d6:	69bb      	ldr	r3, [r7, #24]
 80096d8:	e144      	b.n	8009964 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096da:	2300      	movs	r3, #0
 80096dc:	617b      	str	r3, [r7, #20]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	695b      	ldr	r3, [r3, #20]
 80096e4:	617b      	str	r3, [r7, #20]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	699b      	ldr	r3, [r3, #24]
 80096ec:	617b      	str	r3, [r7, #20]
 80096ee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80096f0:	e138      	b.n	8009964 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096f6:	2b03      	cmp	r3, #3
 80096f8:	f200 80f1 	bhi.w	80098de <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009700:	2b01      	cmp	r3, #1
 8009702:	d123      	bne.n	800974c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009706:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009708:	68f8      	ldr	r0, [r7, #12]
 800970a:	f000 fc1b 	bl	8009f44 <I2C_WaitOnRXNEFlagUntilTimeout>
 800970e:	4603      	mov	r3, r0
 8009710:	2b00      	cmp	r3, #0
 8009712:	d001      	beq.n	8009718 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009714:	2301      	movs	r3, #1
 8009716:	e139      	b.n	800998c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	691a      	ldr	r2, [r3, #16]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009722:	b2d2      	uxtb	r2, r2
 8009724:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972a:	1c5a      	adds	r2, r3, #1
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009734:	3b01      	subs	r3, #1
 8009736:	b29a      	uxth	r2, r3
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009740:	b29b      	uxth	r3, r3
 8009742:	3b01      	subs	r3, #1
 8009744:	b29a      	uxth	r2, r3
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	855a      	strh	r2, [r3, #42]	; 0x2a
 800974a:	e10b      	b.n	8009964 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009750:	2b02      	cmp	r3, #2
 8009752:	d14e      	bne.n	80097f2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009756:	9300      	str	r3, [sp, #0]
 8009758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975a:	2200      	movs	r2, #0
 800975c:	4906      	ldr	r1, [pc, #24]	; (8009778 <HAL_I2C_Mem_Read+0x22c>)
 800975e:	68f8      	ldr	r0, [r7, #12]
 8009760:	f000 fa98 	bl	8009c94 <I2C_WaitOnFlagUntilTimeout>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d008      	beq.n	800977c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800976a:	2301      	movs	r3, #1
 800976c:	e10e      	b.n	800998c <HAL_I2C_Mem_Read+0x440>
 800976e:	bf00      	nop
 8009770:	00100002 	.word	0x00100002
 8009774:	ffff0000 	.word	0xffff0000
 8009778:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	681a      	ldr	r2, [r3, #0]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800978a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	691a      	ldr	r2, [r3, #16]
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009796:	b2d2      	uxtb	r2, r2
 8009798:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979e:	1c5a      	adds	r2, r3, #1
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097a8:	3b01      	subs	r3, #1
 80097aa:	b29a      	uxth	r2, r3
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	3b01      	subs	r3, #1
 80097b8:	b29a      	uxth	r2, r3
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	691a      	ldr	r2, [r3, #16]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c8:	b2d2      	uxtb	r2, r2
 80097ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d0:	1c5a      	adds	r2, r3, #1
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097da:	3b01      	subs	r3, #1
 80097dc:	b29a      	uxth	r2, r3
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	3b01      	subs	r3, #1
 80097ea:	b29a      	uxth	r2, r3
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	855a      	strh	r2, [r3, #42]	; 0x2a
 80097f0:	e0b8      	b.n	8009964 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80097f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f4:	9300      	str	r3, [sp, #0]
 80097f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f8:	2200      	movs	r2, #0
 80097fa:	4966      	ldr	r1, [pc, #408]	; (8009994 <HAL_I2C_Mem_Read+0x448>)
 80097fc:	68f8      	ldr	r0, [r7, #12]
 80097fe:	f000 fa49 	bl	8009c94 <I2C_WaitOnFlagUntilTimeout>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d001      	beq.n	800980c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009808:	2301      	movs	r3, #1
 800980a:	e0bf      	b.n	800998c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800981a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	691a      	ldr	r2, [r3, #16]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009826:	b2d2      	uxtb	r2, r2
 8009828:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982e:	1c5a      	adds	r2, r3, #1
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009838:	3b01      	subs	r3, #1
 800983a:	b29a      	uxth	r2, r3
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009844:	b29b      	uxth	r3, r3
 8009846:	3b01      	subs	r3, #1
 8009848:	b29a      	uxth	r2, r3
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800984e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009850:	9300      	str	r3, [sp, #0]
 8009852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009854:	2200      	movs	r2, #0
 8009856:	494f      	ldr	r1, [pc, #316]	; (8009994 <HAL_I2C_Mem_Read+0x448>)
 8009858:	68f8      	ldr	r0, [r7, #12]
 800985a:	f000 fa1b 	bl	8009c94 <I2C_WaitOnFlagUntilTimeout>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d001      	beq.n	8009868 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009864:	2301      	movs	r3, #1
 8009866:	e091      	b.n	800998c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	681a      	ldr	r2, [r3, #0]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009876:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	691a      	ldr	r2, [r3, #16]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009882:	b2d2      	uxtb	r2, r2
 8009884:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988a:	1c5a      	adds	r2, r3, #1
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009894:	3b01      	subs	r3, #1
 8009896:	b29a      	uxth	r2, r3
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	3b01      	subs	r3, #1
 80098a4:	b29a      	uxth	r2, r3
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	691a      	ldr	r2, [r3, #16]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b4:	b2d2      	uxtb	r2, r2
 80098b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098bc:	1c5a      	adds	r2, r3, #1
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098c6:	3b01      	subs	r3, #1
 80098c8:	b29a      	uxth	r2, r3
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098d2:	b29b      	uxth	r3, r3
 80098d4:	3b01      	subs	r3, #1
 80098d6:	b29a      	uxth	r2, r3
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80098dc:	e042      	b.n	8009964 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80098e2:	68f8      	ldr	r0, [r7, #12]
 80098e4:	f000 fb2e 	bl	8009f44 <I2C_WaitOnRXNEFlagUntilTimeout>
 80098e8:	4603      	mov	r3, r0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d001      	beq.n	80098f2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	e04c      	b.n	800998c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	691a      	ldr	r2, [r3, #16]
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098fc:	b2d2      	uxtb	r2, r2
 80098fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009904:	1c5a      	adds	r2, r3, #1
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800990e:	3b01      	subs	r3, #1
 8009910:	b29a      	uxth	r2, r3
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800991a:	b29b      	uxth	r3, r3
 800991c:	3b01      	subs	r3, #1
 800991e:	b29a      	uxth	r2, r3
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	695b      	ldr	r3, [r3, #20]
 800992a:	f003 0304 	and.w	r3, r3, #4
 800992e:	2b04      	cmp	r3, #4
 8009930:	d118      	bne.n	8009964 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	691a      	ldr	r2, [r3, #16]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800993c:	b2d2      	uxtb	r2, r2
 800993e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009944:	1c5a      	adds	r2, r3, #1
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800994e:	3b01      	subs	r3, #1
 8009950:	b29a      	uxth	r2, r3
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800995a:	b29b      	uxth	r3, r3
 800995c:	3b01      	subs	r3, #1
 800995e:	b29a      	uxth	r2, r3
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009968:	2b00      	cmp	r3, #0
 800996a:	f47f aec2 	bne.w	80096f2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2220      	movs	r2, #32
 8009972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2200      	movs	r2, #0
 800997a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2200      	movs	r2, #0
 8009982:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009986:	2300      	movs	r3, #0
 8009988:	e000      	b.n	800998c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800998a:	2302      	movs	r3, #2
  }
}
 800998c:	4618      	mov	r0, r3
 800998e:	3728      	adds	r7, #40	; 0x28
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}
 8009994:	00010004 	.word	0x00010004

08009998 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b088      	sub	sp, #32
 800999c:	af02      	add	r7, sp, #8
 800999e:	60f8      	str	r0, [r7, #12]
 80099a0:	4608      	mov	r0, r1
 80099a2:	4611      	mov	r1, r2
 80099a4:	461a      	mov	r2, r3
 80099a6:	4603      	mov	r3, r0
 80099a8:	817b      	strh	r3, [r7, #10]
 80099aa:	460b      	mov	r3, r1
 80099ac:	813b      	strh	r3, [r7, #8]
 80099ae:	4613      	mov	r3, r2
 80099b0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80099c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c4:	9300      	str	r3, [sp, #0]
 80099c6:	6a3b      	ldr	r3, [r7, #32]
 80099c8:	2200      	movs	r2, #0
 80099ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80099ce:	68f8      	ldr	r0, [r7, #12]
 80099d0:	f000 f960 	bl	8009c94 <I2C_WaitOnFlagUntilTimeout>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d00d      	beq.n	80099f6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099e8:	d103      	bne.n	80099f2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80099f2:	2303      	movs	r3, #3
 80099f4:	e05f      	b.n	8009ab6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80099f6:	897b      	ldrh	r3, [r7, #10]
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	461a      	mov	r2, r3
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009a04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a08:	6a3a      	ldr	r2, [r7, #32]
 8009a0a:	492d      	ldr	r1, [pc, #180]	; (8009ac0 <I2C_RequestMemoryWrite+0x128>)
 8009a0c:	68f8      	ldr	r0, [r7, #12]
 8009a0e:	f000 f998 	bl	8009d42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d001      	beq.n	8009a1c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	e04c      	b.n	8009ab6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	617b      	str	r3, [r7, #20]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	695b      	ldr	r3, [r3, #20]
 8009a26:	617b      	str	r3, [r7, #20]
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	699b      	ldr	r3, [r3, #24]
 8009a2e:	617b      	str	r3, [r7, #20]
 8009a30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a34:	6a39      	ldr	r1, [r7, #32]
 8009a36:	68f8      	ldr	r0, [r7, #12]
 8009a38:	f000 fa02 	bl	8009e40 <I2C_WaitOnTXEFlagUntilTimeout>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d00d      	beq.n	8009a5e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a46:	2b04      	cmp	r3, #4
 8009a48:	d107      	bne.n	8009a5a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e02b      	b.n	8009ab6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009a5e:	88fb      	ldrh	r3, [r7, #6]
 8009a60:	2b01      	cmp	r3, #1
 8009a62:	d105      	bne.n	8009a70 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009a64:	893b      	ldrh	r3, [r7, #8]
 8009a66:	b2da      	uxtb	r2, r3
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	611a      	str	r2, [r3, #16]
 8009a6e:	e021      	b.n	8009ab4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009a70:	893b      	ldrh	r3, [r7, #8]
 8009a72:	0a1b      	lsrs	r3, r3, #8
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	b2da      	uxtb	r2, r3
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a80:	6a39      	ldr	r1, [r7, #32]
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	f000 f9dc 	bl	8009e40 <I2C_WaitOnTXEFlagUntilTimeout>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d00d      	beq.n	8009aaa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a92:	2b04      	cmp	r3, #4
 8009a94:	d107      	bne.n	8009aa6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009aa4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	e005      	b.n	8009ab6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009aaa:	893b      	ldrh	r3, [r7, #8]
 8009aac:	b2da      	uxtb	r2, r3
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3718      	adds	r7, #24
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	00010002 	.word	0x00010002

08009ac4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b088      	sub	sp, #32
 8009ac8:	af02      	add	r7, sp, #8
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	4608      	mov	r0, r1
 8009ace:	4611      	mov	r1, r2
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	817b      	strh	r3, [r7, #10]
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	813b      	strh	r3, [r7, #8]
 8009ada:	4613      	mov	r3, r2
 8009adc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009aec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009afc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b00:	9300      	str	r3, [sp, #0]
 8009b02:	6a3b      	ldr	r3, [r7, #32]
 8009b04:	2200      	movs	r2, #0
 8009b06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009b0a:	68f8      	ldr	r0, [r7, #12]
 8009b0c:	f000 f8c2 	bl	8009c94 <I2C_WaitOnFlagUntilTimeout>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d00d      	beq.n	8009b32 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b24:	d103      	bne.n	8009b2e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009b2e:	2303      	movs	r3, #3
 8009b30:	e0aa      	b.n	8009c88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009b32:	897b      	ldrh	r3, [r7, #10]
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	461a      	mov	r2, r3
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009b40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b44:	6a3a      	ldr	r2, [r7, #32]
 8009b46:	4952      	ldr	r1, [pc, #328]	; (8009c90 <I2C_RequestMemoryRead+0x1cc>)
 8009b48:	68f8      	ldr	r0, [r7, #12]
 8009b4a:	f000 f8fa 	bl	8009d42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d001      	beq.n	8009b58 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	e097      	b.n	8009c88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b58:	2300      	movs	r3, #0
 8009b5a:	617b      	str	r3, [r7, #20]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	695b      	ldr	r3, [r3, #20]
 8009b62:	617b      	str	r3, [r7, #20]
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	699b      	ldr	r3, [r3, #24]
 8009b6a:	617b      	str	r3, [r7, #20]
 8009b6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b70:	6a39      	ldr	r1, [r7, #32]
 8009b72:	68f8      	ldr	r0, [r7, #12]
 8009b74:	f000 f964 	bl	8009e40 <I2C_WaitOnTXEFlagUntilTimeout>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d00d      	beq.n	8009b9a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b82:	2b04      	cmp	r3, #4
 8009b84:	d107      	bne.n	8009b96 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009b96:	2301      	movs	r3, #1
 8009b98:	e076      	b.n	8009c88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009b9a:	88fb      	ldrh	r3, [r7, #6]
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d105      	bne.n	8009bac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009ba0:	893b      	ldrh	r3, [r7, #8]
 8009ba2:	b2da      	uxtb	r2, r3
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	611a      	str	r2, [r3, #16]
 8009baa:	e021      	b.n	8009bf0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009bac:	893b      	ldrh	r3, [r7, #8]
 8009bae:	0a1b      	lsrs	r3, r3, #8
 8009bb0:	b29b      	uxth	r3, r3
 8009bb2:	b2da      	uxtb	r2, r3
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bbc:	6a39      	ldr	r1, [r7, #32]
 8009bbe:	68f8      	ldr	r0, [r7, #12]
 8009bc0:	f000 f93e 	bl	8009e40 <I2C_WaitOnTXEFlagUntilTimeout>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d00d      	beq.n	8009be6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bce:	2b04      	cmp	r3, #4
 8009bd0:	d107      	bne.n	8009be2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009be0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009be2:	2301      	movs	r3, #1
 8009be4:	e050      	b.n	8009c88 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009be6:	893b      	ldrh	r3, [r7, #8]
 8009be8:	b2da      	uxtb	r2, r3
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bf2:	6a39      	ldr	r1, [r7, #32]
 8009bf4:	68f8      	ldr	r0, [r7, #12]
 8009bf6:	f000 f923 	bl	8009e40 <I2C_WaitOnTXEFlagUntilTimeout>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d00d      	beq.n	8009c1c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c04:	2b04      	cmp	r3, #4
 8009c06:	d107      	bne.n	8009c18 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c16:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009c18:	2301      	movs	r3, #1
 8009c1a:	e035      	b.n	8009c88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c2a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2e:	9300      	str	r3, [sp, #0]
 8009c30:	6a3b      	ldr	r3, [r7, #32]
 8009c32:	2200      	movs	r2, #0
 8009c34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009c38:	68f8      	ldr	r0, [r7, #12]
 8009c3a:	f000 f82b 	bl	8009c94 <I2C_WaitOnFlagUntilTimeout>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d00d      	beq.n	8009c60 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c52:	d103      	bne.n	8009c5c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009c5c:	2303      	movs	r3, #3
 8009c5e:	e013      	b.n	8009c88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009c60:	897b      	ldrh	r3, [r7, #10]
 8009c62:	b2db      	uxtb	r3, r3
 8009c64:	f043 0301 	orr.w	r3, r3, #1
 8009c68:	b2da      	uxtb	r2, r3
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c72:	6a3a      	ldr	r2, [r7, #32]
 8009c74:	4906      	ldr	r1, [pc, #24]	; (8009c90 <I2C_RequestMemoryRead+0x1cc>)
 8009c76:	68f8      	ldr	r0, [r7, #12]
 8009c78:	f000 f863 	bl	8009d42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d001      	beq.n	8009c86 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009c82:	2301      	movs	r3, #1
 8009c84:	e000      	b.n	8009c88 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009c86:	2300      	movs	r3, #0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3718      	adds	r7, #24
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}
 8009c90:	00010002 	.word	0x00010002

08009c94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	603b      	str	r3, [r7, #0]
 8009ca0:	4613      	mov	r3, r2
 8009ca2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009ca4:	e025      	b.n	8009cf2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cac:	d021      	beq.n	8009cf2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cae:	f7fd f87d 	bl	8006dac <HAL_GetTick>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	69bb      	ldr	r3, [r7, #24]
 8009cb6:	1ad3      	subs	r3, r2, r3
 8009cb8:	683a      	ldr	r2, [r7, #0]
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d302      	bcc.n	8009cc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d116      	bne.n	8009cf2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2220      	movs	r2, #32
 8009cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cde:	f043 0220 	orr.w	r2, r3, #32
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	e023      	b.n	8009d3a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	0c1b      	lsrs	r3, r3, #16
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d10d      	bne.n	8009d18 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	695b      	ldr	r3, [r3, #20]
 8009d02:	43da      	mvns	r2, r3
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	4013      	ands	r3, r2
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	bf0c      	ite	eq
 8009d0e:	2301      	moveq	r3, #1
 8009d10:	2300      	movne	r3, #0
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	461a      	mov	r2, r3
 8009d16:	e00c      	b.n	8009d32 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	699b      	ldr	r3, [r3, #24]
 8009d1e:	43da      	mvns	r2, r3
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	4013      	ands	r3, r2
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	bf0c      	ite	eq
 8009d2a:	2301      	moveq	r3, #1
 8009d2c:	2300      	movne	r3, #0
 8009d2e:	b2db      	uxtb	r3, r3
 8009d30:	461a      	mov	r2, r3
 8009d32:	79fb      	ldrb	r3, [r7, #7]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d0b6      	beq.n	8009ca6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009d38:	2300      	movs	r3, #0
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3710      	adds	r7, #16
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}

08009d42 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009d42:	b580      	push	{r7, lr}
 8009d44:	b084      	sub	sp, #16
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	60f8      	str	r0, [r7, #12]
 8009d4a:	60b9      	str	r1, [r7, #8]
 8009d4c:	607a      	str	r2, [r7, #4]
 8009d4e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009d50:	e051      	b.n	8009df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	695b      	ldr	r3, [r3, #20]
 8009d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d60:	d123      	bne.n	8009daa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	681a      	ldr	r2, [r3, #0]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d70:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009d7a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2220      	movs	r2, #32
 8009d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d96:	f043 0204 	orr.w	r2, r3, #4
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2200      	movs	r2, #0
 8009da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	e046      	b.n	8009e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db0:	d021      	beq.n	8009df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009db2:	f7fc fffb 	bl	8006dac <HAL_GetTick>
 8009db6:	4602      	mov	r2, r0
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	1ad3      	subs	r3, r2, r3
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	429a      	cmp	r2, r3
 8009dc0:	d302      	bcc.n	8009dc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d116      	bne.n	8009df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2220      	movs	r2, #32
 8009dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de2:	f043 0220 	orr.w	r2, r3, #32
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	2200      	movs	r2, #0
 8009dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	e020      	b.n	8009e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	0c1b      	lsrs	r3, r3, #16
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d10c      	bne.n	8009e1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	695b      	ldr	r3, [r3, #20]
 8009e06:	43da      	mvns	r2, r3
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	4013      	ands	r3, r2
 8009e0c:	b29b      	uxth	r3, r3
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	bf14      	ite	ne
 8009e12:	2301      	movne	r3, #1
 8009e14:	2300      	moveq	r3, #0
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	e00b      	b.n	8009e32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	699b      	ldr	r3, [r3, #24]
 8009e20:	43da      	mvns	r2, r3
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	4013      	ands	r3, r2
 8009e26:	b29b      	uxth	r3, r3
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	bf14      	ite	ne
 8009e2c:	2301      	movne	r3, #1
 8009e2e:	2300      	moveq	r3, #0
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d18d      	bne.n	8009d52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009e36:	2300      	movs	r3, #0
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3710      	adds	r7, #16
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}

08009e40 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b084      	sub	sp, #16
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009e4c:	e02d      	b.n	8009eaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009e4e:	68f8      	ldr	r0, [r7, #12]
 8009e50:	f000 f8ce 	bl	8009ff0 <I2C_IsAcknowledgeFailed>
 8009e54:	4603      	mov	r3, r0
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d001      	beq.n	8009e5e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	e02d      	b.n	8009eba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e64:	d021      	beq.n	8009eaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e66:	f7fc ffa1 	bl	8006dac <HAL_GetTick>
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	1ad3      	subs	r3, r2, r3
 8009e70:	68ba      	ldr	r2, [r7, #8]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d302      	bcc.n	8009e7c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d116      	bne.n	8009eaa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2220      	movs	r2, #32
 8009e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e96:	f043 0220 	orr.w	r2, r3, #32
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	e007      	b.n	8009eba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	695b      	ldr	r3, [r3, #20]
 8009eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009eb4:	2b80      	cmp	r3, #128	; 0x80
 8009eb6:	d1ca      	bne.n	8009e4e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009eb8:	2300      	movs	r3, #0
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3710      	adds	r7, #16
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b084      	sub	sp, #16
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	60f8      	str	r0, [r7, #12]
 8009eca:	60b9      	str	r1, [r7, #8]
 8009ecc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009ece:	e02d      	b.n	8009f2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009ed0:	68f8      	ldr	r0, [r7, #12]
 8009ed2:	f000 f88d 	bl	8009ff0 <I2C_IsAcknowledgeFailed>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d001      	beq.n	8009ee0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009edc:	2301      	movs	r3, #1
 8009ede:	e02d      	b.n	8009f3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ee6:	d021      	beq.n	8009f2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ee8:	f7fc ff60 	bl	8006dac <HAL_GetTick>
 8009eec:	4602      	mov	r2, r0
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	1ad3      	subs	r3, r2, r3
 8009ef2:	68ba      	ldr	r2, [r7, #8]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d302      	bcc.n	8009efe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d116      	bne.n	8009f2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2200      	movs	r2, #0
 8009f02:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2220      	movs	r2, #32
 8009f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f18:	f043 0220 	orr.w	r2, r3, #32
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2200      	movs	r2, #0
 8009f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009f28:	2301      	movs	r3, #1
 8009f2a:	e007      	b.n	8009f3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	695b      	ldr	r3, [r3, #20]
 8009f32:	f003 0304 	and.w	r3, r3, #4
 8009f36:	2b04      	cmp	r3, #4
 8009f38:	d1ca      	bne.n	8009ed0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009f3a:	2300      	movs	r3, #0
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	3710      	adds	r7, #16
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}

08009f44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	60f8      	str	r0, [r7, #12]
 8009f4c:	60b9      	str	r1, [r7, #8]
 8009f4e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009f50:	e042      	b.n	8009fd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	695b      	ldr	r3, [r3, #20]
 8009f58:	f003 0310 	and.w	r3, r3, #16
 8009f5c:	2b10      	cmp	r3, #16
 8009f5e:	d119      	bne.n	8009f94 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f06f 0210 	mvn.w	r2, #16
 8009f68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2220      	movs	r2, #32
 8009f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009f90:	2301      	movs	r3, #1
 8009f92:	e029      	b.n	8009fe8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f94:	f7fc ff0a 	bl	8006dac <HAL_GetTick>
 8009f98:	4602      	mov	r2, r0
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	1ad3      	subs	r3, r2, r3
 8009f9e:	68ba      	ldr	r2, [r7, #8]
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d302      	bcc.n	8009faa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d116      	bne.n	8009fd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2200      	movs	r2, #0
 8009fae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2220      	movs	r2, #32
 8009fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fc4:	f043 0220 	orr.w	r2, r3, #32
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	e007      	b.n	8009fe8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	695b      	ldr	r3, [r3, #20]
 8009fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fe2:	2b40      	cmp	r3, #64	; 0x40
 8009fe4:	d1b5      	bne.n	8009f52 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009fe6:	2300      	movs	r3, #0
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3710      	adds	r7, #16
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	695b      	ldr	r3, [r3, #20]
 8009ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a006:	d11b      	bne.n	800a040 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a010:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2200      	movs	r2, #0
 800a016:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2220      	movs	r2, #32
 800a01c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2200      	movs	r2, #0
 800a024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a02c:	f043 0204 	orr.w	r2, r3, #4
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a03c:	2301      	movs	r3, #1
 800a03e:	e000      	b.n	800a042 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	370c      	adds	r7, #12
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr

0800a04e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b084      	sub	sp, #16
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d101      	bne.n	800a060 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800a05c:	2301      	movs	r3, #1
 800a05e:	e034      	b.n	800a0ca <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800a068:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f245 5255 	movw	r2, #21845	; 0x5555
 800a072:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	687a      	ldr	r2, [r7, #4]
 800a07a:	6852      	ldr	r2, [r2, #4]
 800a07c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	6892      	ldr	r2, [r2, #8]
 800a086:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800a088:	f7fc fe90 	bl	8006dac <HAL_GetTick>
 800a08c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a08e:	e00f      	b.n	800a0b0 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800a090:	f7fc fe8c 	bl	8006dac <HAL_GetTick>
 800a094:	4602      	mov	r2, r0
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	1ad3      	subs	r3, r2, r3
 800a09a:	2b31      	cmp	r3, #49	; 0x31
 800a09c:	d908      	bls.n	800a0b0 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	f003 0303 	and.w	r3, r3, #3
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d001      	beq.n	800a0b0 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800a0ac:	2303      	movs	r3, #3
 800a0ae:	e00c      	b.n	800a0ca <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	f003 0303 	and.w	r3, r3, #3
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d1e8      	bne.n	800a090 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a0c6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a0c8:	2300      	movs	r3, #0
}
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	3710      	adds	r7, #16
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800a0d2:	b480      	push	{r7}
 800a0d4:	b083      	sub	sp, #12
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800a0e2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a0e4:	2300      	movs	r3, #0
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	370c      	adds	r7, #12
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr

0800a0f2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800a0f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0f4:	b08f      	sub	sp, #60	; 0x3c
 800a0f6:	af0a      	add	r7, sp, #40	; 0x28
 800a0f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d101      	bne.n	800a104 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a100:	2301      	movs	r3, #1
 800a102:	e116      	b.n	800a332 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800a110:	b2db      	uxtb	r3, r3
 800a112:	2b00      	cmp	r3, #0
 800a114:	d106      	bne.n	800a124 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2200      	movs	r2, #0
 800a11a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f00e f8ca 	bl	80182b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2203      	movs	r2, #3
 800a128:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a134:	2b00      	cmp	r3, #0
 800a136:	d102      	bne.n	800a13e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4618      	mov	r0, r3
 800a144:	f005 ff73 	bl	801002e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	603b      	str	r3, [r7, #0]
 800a14e:	687e      	ldr	r6, [r7, #4]
 800a150:	466d      	mov	r5, sp
 800a152:	f106 0410 	add.w	r4, r6, #16
 800a156:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a158:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a15a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a15c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a15e:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a162:	e885 0003 	stmia.w	r5, {r0, r1}
 800a166:	1d33      	adds	r3, r6, #4
 800a168:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a16a:	6838      	ldr	r0, [r7, #0]
 800a16c:	f005 fe4a 	bl	800fe04 <USB_CoreInit>
 800a170:	4603      	mov	r3, r0
 800a172:	2b00      	cmp	r3, #0
 800a174:	d005      	beq.n	800a182 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2202      	movs	r2, #2
 800a17a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800a17e:	2301      	movs	r3, #1
 800a180:	e0d7      	b.n	800a332 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	2100      	movs	r1, #0
 800a188:	4618      	mov	r0, r3
 800a18a:	f005 ff61 	bl	8010050 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a18e:	2300      	movs	r3, #0
 800a190:	73fb      	strb	r3, [r7, #15]
 800a192:	e04a      	b.n	800a22a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a194:	7bfa      	ldrb	r2, [r7, #15]
 800a196:	6879      	ldr	r1, [r7, #4]
 800a198:	4613      	mov	r3, r2
 800a19a:	00db      	lsls	r3, r3, #3
 800a19c:	4413      	add	r3, r2
 800a19e:	009b      	lsls	r3, r3, #2
 800a1a0:	440b      	add	r3, r1
 800a1a2:	333d      	adds	r3, #61	; 0x3d
 800a1a4:	2201      	movs	r2, #1
 800a1a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a1a8:	7bfa      	ldrb	r2, [r7, #15]
 800a1aa:	6879      	ldr	r1, [r7, #4]
 800a1ac:	4613      	mov	r3, r2
 800a1ae:	00db      	lsls	r3, r3, #3
 800a1b0:	4413      	add	r3, r2
 800a1b2:	009b      	lsls	r3, r3, #2
 800a1b4:	440b      	add	r3, r1
 800a1b6:	333c      	adds	r3, #60	; 0x3c
 800a1b8:	7bfa      	ldrb	r2, [r7, #15]
 800a1ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a1bc:	7bfa      	ldrb	r2, [r7, #15]
 800a1be:	7bfb      	ldrb	r3, [r7, #15]
 800a1c0:	b298      	uxth	r0, r3
 800a1c2:	6879      	ldr	r1, [r7, #4]
 800a1c4:	4613      	mov	r3, r2
 800a1c6:	00db      	lsls	r3, r3, #3
 800a1c8:	4413      	add	r3, r2
 800a1ca:	009b      	lsls	r3, r3, #2
 800a1cc:	440b      	add	r3, r1
 800a1ce:	3344      	adds	r3, #68	; 0x44
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a1d4:	7bfa      	ldrb	r2, [r7, #15]
 800a1d6:	6879      	ldr	r1, [r7, #4]
 800a1d8:	4613      	mov	r3, r2
 800a1da:	00db      	lsls	r3, r3, #3
 800a1dc:	4413      	add	r3, r2
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	440b      	add	r3, r1
 800a1e2:	3340      	adds	r3, #64	; 0x40
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a1e8:	7bfa      	ldrb	r2, [r7, #15]
 800a1ea:	6879      	ldr	r1, [r7, #4]
 800a1ec:	4613      	mov	r3, r2
 800a1ee:	00db      	lsls	r3, r3, #3
 800a1f0:	4413      	add	r3, r2
 800a1f2:	009b      	lsls	r3, r3, #2
 800a1f4:	440b      	add	r3, r1
 800a1f6:	3348      	adds	r3, #72	; 0x48
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a1fc:	7bfa      	ldrb	r2, [r7, #15]
 800a1fe:	6879      	ldr	r1, [r7, #4]
 800a200:	4613      	mov	r3, r2
 800a202:	00db      	lsls	r3, r3, #3
 800a204:	4413      	add	r3, r2
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	440b      	add	r3, r1
 800a20a:	334c      	adds	r3, #76	; 0x4c
 800a20c:	2200      	movs	r2, #0
 800a20e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a210:	7bfa      	ldrb	r2, [r7, #15]
 800a212:	6879      	ldr	r1, [r7, #4]
 800a214:	4613      	mov	r3, r2
 800a216:	00db      	lsls	r3, r3, #3
 800a218:	4413      	add	r3, r2
 800a21a:	009b      	lsls	r3, r3, #2
 800a21c:	440b      	add	r3, r1
 800a21e:	3354      	adds	r3, #84	; 0x54
 800a220:	2200      	movs	r2, #0
 800a222:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a224:	7bfb      	ldrb	r3, [r7, #15]
 800a226:	3301      	adds	r3, #1
 800a228:	73fb      	strb	r3, [r7, #15]
 800a22a:	7bfa      	ldrb	r2, [r7, #15]
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	429a      	cmp	r2, r3
 800a232:	d3af      	bcc.n	800a194 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a234:	2300      	movs	r3, #0
 800a236:	73fb      	strb	r3, [r7, #15]
 800a238:	e044      	b.n	800a2c4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a23a:	7bfa      	ldrb	r2, [r7, #15]
 800a23c:	6879      	ldr	r1, [r7, #4]
 800a23e:	4613      	mov	r3, r2
 800a240:	00db      	lsls	r3, r3, #3
 800a242:	4413      	add	r3, r2
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	440b      	add	r3, r1
 800a248:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800a24c:	2200      	movs	r2, #0
 800a24e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a250:	7bfa      	ldrb	r2, [r7, #15]
 800a252:	6879      	ldr	r1, [r7, #4]
 800a254:	4613      	mov	r3, r2
 800a256:	00db      	lsls	r3, r3, #3
 800a258:	4413      	add	r3, r2
 800a25a:	009b      	lsls	r3, r3, #2
 800a25c:	440b      	add	r3, r1
 800a25e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800a262:	7bfa      	ldrb	r2, [r7, #15]
 800a264:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a266:	7bfa      	ldrb	r2, [r7, #15]
 800a268:	6879      	ldr	r1, [r7, #4]
 800a26a:	4613      	mov	r3, r2
 800a26c:	00db      	lsls	r3, r3, #3
 800a26e:	4413      	add	r3, r2
 800a270:	009b      	lsls	r3, r3, #2
 800a272:	440b      	add	r3, r1
 800a274:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a278:	2200      	movs	r2, #0
 800a27a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a27c:	7bfa      	ldrb	r2, [r7, #15]
 800a27e:	6879      	ldr	r1, [r7, #4]
 800a280:	4613      	mov	r3, r2
 800a282:	00db      	lsls	r3, r3, #3
 800a284:	4413      	add	r3, r2
 800a286:	009b      	lsls	r3, r3, #2
 800a288:	440b      	add	r3, r1
 800a28a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800a28e:	2200      	movs	r2, #0
 800a290:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a292:	7bfa      	ldrb	r2, [r7, #15]
 800a294:	6879      	ldr	r1, [r7, #4]
 800a296:	4613      	mov	r3, r2
 800a298:	00db      	lsls	r3, r3, #3
 800a29a:	4413      	add	r3, r2
 800a29c:	009b      	lsls	r3, r3, #2
 800a29e:	440b      	add	r3, r1
 800a2a0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a2a8:	7bfa      	ldrb	r2, [r7, #15]
 800a2aa:	6879      	ldr	r1, [r7, #4]
 800a2ac:	4613      	mov	r3, r2
 800a2ae:	00db      	lsls	r3, r3, #3
 800a2b0:	4413      	add	r3, r2
 800a2b2:	009b      	lsls	r3, r3, #2
 800a2b4:	440b      	add	r3, r1
 800a2b6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a2be:	7bfb      	ldrb	r3, [r7, #15]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	73fb      	strb	r3, [r7, #15]
 800a2c4:	7bfa      	ldrb	r2, [r7, #15]
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d3b5      	bcc.n	800a23a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	603b      	str	r3, [r7, #0]
 800a2d4:	687e      	ldr	r6, [r7, #4]
 800a2d6:	466d      	mov	r5, sp
 800a2d8:	f106 0410 	add.w	r4, r6, #16
 800a2dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a2de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a2e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a2e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a2e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a2e8:	e885 0003 	stmia.w	r5, {r0, r1}
 800a2ec:	1d33      	adds	r3, r6, #4
 800a2ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a2f0:	6838      	ldr	r0, [r7, #0]
 800a2f2:	f005 fef9 	bl	80100e8 <USB_DevInit>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d005      	beq.n	800a308 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2202      	movs	r2, #2
 800a300:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800a304:	2301      	movs	r3, #1
 800a306:	e014      	b.n	800a332 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2200      	movs	r2, #0
 800a30c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2201      	movs	r2, #1
 800a314:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a31c:	2b01      	cmp	r3, #1
 800a31e:	d102      	bne.n	800a326 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f001 f9b9 	bl	800b698 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4618      	mov	r0, r3
 800a32c:	f007 f83b 	bl	80113a6 <USB_DevDisconnect>

  return HAL_OK;
 800a330:	2300      	movs	r3, #0
}
 800a332:	4618      	mov	r0, r3
 800a334:	3714      	adds	r7, #20
 800a336:	46bd      	mov	sp, r7
 800a338:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a33a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a33a:	b580      	push	{r7, lr}
 800a33c:	b084      	sub	sp, #16
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a34e:	2b01      	cmp	r3, #1
 800a350:	d101      	bne.n	800a356 <HAL_PCD_Start+0x1c>
 800a352:	2302      	movs	r3, #2
 800a354:	e020      	b.n	800a398 <HAL_PCD_Start+0x5e>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2201      	movs	r2, #1
 800a35a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a362:	2b01      	cmp	r3, #1
 800a364:	d109      	bne.n	800a37a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	d005      	beq.n	800a37a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a372:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4618      	mov	r0, r3
 800a380:	f005 fe44 	bl	801000c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4618      	mov	r0, r3
 800a38a:	f006 ffeb 	bl	8011364 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2200      	movs	r2, #0
 800a392:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a396:	2300      	movs	r3, #0
}
 800a398:	4618      	mov	r0, r3
 800a39a:	3710      	adds	r7, #16
 800a39c:	46bd      	mov	sp, r7
 800a39e:	bd80      	pop	{r7, pc}

0800a3a0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a3a0:	b590      	push	{r4, r7, lr}
 800a3a2:	b08d      	sub	sp, #52	; 0x34
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3ae:	6a3b      	ldr	r3, [r7, #32]
 800a3b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f007 f8a9 	bl	801150e <USB_GetMode>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	f040 84b7 	bne.w	800ad32 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f007 f80d 	bl	80113e8 <USB_ReadInterrupts>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	f000 84ad 	beq.w	800ad30 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800a3d6:	69fb      	ldr	r3, [r7, #28]
 800a3d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3dc:	689b      	ldr	r3, [r3, #8]
 800a3de:	0a1b      	lsrs	r3, r3, #8
 800a3e0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f006 fffa 	bl	80113e8 <USB_ReadInterrupts>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	f003 0302 	and.w	r3, r3, #2
 800a3fa:	2b02      	cmp	r3, #2
 800a3fc:	d107      	bne.n	800a40e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	695a      	ldr	r2, [r3, #20]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f002 0202 	and.w	r2, r2, #2
 800a40c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	4618      	mov	r0, r3
 800a414:	f006 ffe8 	bl	80113e8 <USB_ReadInterrupts>
 800a418:	4603      	mov	r3, r0
 800a41a:	f003 0310 	and.w	r3, r3, #16
 800a41e:	2b10      	cmp	r3, #16
 800a420:	d161      	bne.n	800a4e6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	699a      	ldr	r2, [r3, #24]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f022 0210 	bic.w	r2, r2, #16
 800a430:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800a432:	6a3b      	ldr	r3, [r7, #32]
 800a434:	6a1b      	ldr	r3, [r3, #32]
 800a436:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800a438:	69bb      	ldr	r3, [r7, #24]
 800a43a:	f003 020f 	and.w	r2, r3, #15
 800a43e:	4613      	mov	r3, r2
 800a440:	00db      	lsls	r3, r3, #3
 800a442:	4413      	add	r3, r2
 800a444:	009b      	lsls	r3, r3, #2
 800a446:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a44a:	687a      	ldr	r2, [r7, #4]
 800a44c:	4413      	add	r3, r2
 800a44e:	3304      	adds	r3, #4
 800a450:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800a452:	69bb      	ldr	r3, [r7, #24]
 800a454:	0c5b      	lsrs	r3, r3, #17
 800a456:	f003 030f 	and.w	r3, r3, #15
 800a45a:	2b02      	cmp	r3, #2
 800a45c:	d124      	bne.n	800a4a8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800a45e:	69ba      	ldr	r2, [r7, #24]
 800a460:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800a464:	4013      	ands	r3, r2
 800a466:	2b00      	cmp	r3, #0
 800a468:	d035      	beq.n	800a4d6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800a46e:	69bb      	ldr	r3, [r7, #24]
 800a470:	091b      	lsrs	r3, r3, #4
 800a472:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a474:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a478:	b29b      	uxth	r3, r3
 800a47a:	461a      	mov	r2, r3
 800a47c:	6a38      	ldr	r0, [r7, #32]
 800a47e:	f006 fe1f 	bl	80110c0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	691a      	ldr	r2, [r3, #16]
 800a486:	69bb      	ldr	r3, [r7, #24]
 800a488:	091b      	lsrs	r3, r3, #4
 800a48a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a48e:	441a      	add	r2, r3
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	6a1a      	ldr	r2, [r3, #32]
 800a498:	69bb      	ldr	r3, [r7, #24]
 800a49a:	091b      	lsrs	r3, r3, #4
 800a49c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a4a0:	441a      	add	r2, r3
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	621a      	str	r2, [r3, #32]
 800a4a6:	e016      	b.n	800a4d6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800a4a8:	69bb      	ldr	r3, [r7, #24]
 800a4aa:	0c5b      	lsrs	r3, r3, #17
 800a4ac:	f003 030f 	and.w	r3, r3, #15
 800a4b0:	2b06      	cmp	r3, #6
 800a4b2:	d110      	bne.n	800a4d6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a4ba:	2208      	movs	r2, #8
 800a4bc:	4619      	mov	r1, r3
 800a4be:	6a38      	ldr	r0, [r7, #32]
 800a4c0:	f006 fdfe 	bl	80110c0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	6a1a      	ldr	r2, [r3, #32]
 800a4c8:	69bb      	ldr	r3, [r7, #24]
 800a4ca:	091b      	lsrs	r3, r3, #4
 800a4cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a4d0:	441a      	add	r2, r3
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	699a      	ldr	r2, [r3, #24]
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f042 0210 	orr.w	r2, r2, #16
 800a4e4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f006 ff7c 	bl	80113e8 <USB_ReadInterrupts>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a4f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a4fa:	f040 80a7 	bne.w	800a64c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800a4fe:	2300      	movs	r3, #0
 800a500:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4618      	mov	r0, r3
 800a508:	f006 ff81 	bl	801140e <USB_ReadDevAllOutEpInterrupt>
 800a50c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800a50e:	e099      	b.n	800a644 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800a510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a512:	f003 0301 	and.w	r3, r3, #1
 800a516:	2b00      	cmp	r3, #0
 800a518:	f000 808e 	beq.w	800a638 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a522:	b2d2      	uxtb	r2, r2
 800a524:	4611      	mov	r1, r2
 800a526:	4618      	mov	r0, r3
 800a528:	f006 ffa5 	bl	8011476 <USB_ReadDevOutEPInterrupt>
 800a52c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	f003 0301 	and.w	r3, r3, #1
 800a534:	2b00      	cmp	r3, #0
 800a536:	d00c      	beq.n	800a552 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800a538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a53a:	015a      	lsls	r2, r3, #5
 800a53c:	69fb      	ldr	r3, [r7, #28]
 800a53e:	4413      	add	r3, r2
 800a540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a544:	461a      	mov	r2, r3
 800a546:	2301      	movs	r3, #1
 800a548:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800a54a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 ff1d 	bl	800b38c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	f003 0308 	and.w	r3, r3, #8
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d00c      	beq.n	800a576 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55e:	015a      	lsls	r2, r3, #5
 800a560:	69fb      	ldr	r3, [r7, #28]
 800a562:	4413      	add	r3, r2
 800a564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a568:	461a      	mov	r2, r3
 800a56a:	2308      	movs	r3, #8
 800a56c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800a56e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f000 fff3 	bl	800b55c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	f003 0310 	and.w	r3, r3, #16
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d008      	beq.n	800a592 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800a580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a582:	015a      	lsls	r2, r3, #5
 800a584:	69fb      	ldr	r3, [r7, #28]
 800a586:	4413      	add	r3, r2
 800a588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a58c:	461a      	mov	r2, r3
 800a58e:	2310      	movs	r3, #16
 800a590:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	f003 0302 	and.w	r3, r3, #2
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d030      	beq.n	800a5fe <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800a59c:	6a3b      	ldr	r3, [r7, #32]
 800a59e:	695b      	ldr	r3, [r3, #20]
 800a5a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5a4:	2b80      	cmp	r3, #128	; 0x80
 800a5a6:	d109      	bne.n	800a5bc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800a5a8:	69fb      	ldr	r3, [r7, #28]
 800a5aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	69fa      	ldr	r2, [r7, #28]
 800a5b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a5b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a5ba:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800a5bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5be:	4613      	mov	r3, r2
 800a5c0:	00db      	lsls	r3, r3, #3
 800a5c2:	4413      	add	r3, r2
 800a5c4:	009b      	lsls	r3, r3, #2
 800a5c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a5ca:	687a      	ldr	r2, [r7, #4]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	3304      	adds	r3, #4
 800a5d0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	78db      	ldrb	r3, [r3, #3]
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d108      	bne.n	800a5ec <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	6878      	ldr	r0, [r7, #4]
 800a5e8:	f00d ff7a 	bl	80184e0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800a5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ee:	015a      	lsls	r2, r3, #5
 800a5f0:	69fb      	ldr	r3, [r7, #28]
 800a5f2:	4413      	add	r3, r2
 800a5f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	2302      	movs	r3, #2
 800a5fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	f003 0320 	and.w	r3, r3, #32
 800a604:	2b00      	cmp	r3, #0
 800a606:	d008      	beq.n	800a61a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60a:	015a      	lsls	r2, r3, #5
 800a60c:	69fb      	ldr	r3, [r7, #28]
 800a60e:	4413      	add	r3, r2
 800a610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a614:	461a      	mov	r2, r3
 800a616:	2320      	movs	r3, #32
 800a618:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a620:	2b00      	cmp	r3, #0
 800a622:	d009      	beq.n	800a638 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800a624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a626:	015a      	lsls	r2, r3, #5
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	4413      	add	r3, r2
 800a62c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a630:	461a      	mov	r2, r3
 800a632:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a636:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800a638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63a:	3301      	adds	r3, #1
 800a63c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a63e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a640:	085b      	lsrs	r3, r3, #1
 800a642:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a646:	2b00      	cmp	r3, #0
 800a648:	f47f af62 	bne.w	800a510 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	4618      	mov	r0, r3
 800a652:	f006 fec9 	bl	80113e8 <USB_ReadInterrupts>
 800a656:	4603      	mov	r3, r0
 800a658:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a65c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a660:	f040 80db 	bne.w	800a81a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4618      	mov	r0, r3
 800a66a:	f006 feea 	bl	8011442 <USB_ReadDevAllInEpInterrupt>
 800a66e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800a670:	2300      	movs	r3, #0
 800a672:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800a674:	e0cd      	b.n	800a812 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800a676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a678:	f003 0301 	and.w	r3, r3, #1
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	f000 80c2 	beq.w	800a806 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a688:	b2d2      	uxtb	r2, r2
 800a68a:	4611      	mov	r1, r2
 800a68c:	4618      	mov	r0, r3
 800a68e:	f006 ff10 	bl	80114b2 <USB_ReadDevInEPInterrupt>
 800a692:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	f003 0301 	and.w	r3, r3, #1
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d057      	beq.n	800a74e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a0:	f003 030f 	and.w	r3, r3, #15
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a6aa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a6ac:	69fb      	ldr	r3, [r7, #28]
 800a6ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	43db      	mvns	r3, r3
 800a6b8:	69f9      	ldr	r1, [r7, #28]
 800a6ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a6be:	4013      	ands	r3, r2
 800a6c0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c4:	015a      	lsls	r2, r3, #5
 800a6c6:	69fb      	ldr	r3, [r7, #28]
 800a6c8:	4413      	add	r3, r2
 800a6ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	691b      	ldr	r3, [r3, #16]
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d132      	bne.n	800a742 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800a6dc:	6879      	ldr	r1, [r7, #4]
 800a6de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6e0:	4613      	mov	r3, r2
 800a6e2:	00db      	lsls	r3, r3, #3
 800a6e4:	4413      	add	r3, r2
 800a6e6:	009b      	lsls	r3, r3, #2
 800a6e8:	440b      	add	r3, r1
 800a6ea:	334c      	adds	r3, #76	; 0x4c
 800a6ec:	6819      	ldr	r1, [r3, #0]
 800a6ee:	6878      	ldr	r0, [r7, #4]
 800a6f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6f2:	4613      	mov	r3, r2
 800a6f4:	00db      	lsls	r3, r3, #3
 800a6f6:	4413      	add	r3, r2
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	4403      	add	r3, r0
 800a6fc:	3348      	adds	r3, #72	; 0x48
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4419      	add	r1, r3
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a706:	4613      	mov	r3, r2
 800a708:	00db      	lsls	r3, r3, #3
 800a70a:	4413      	add	r3, r2
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	4403      	add	r3, r0
 800a710:	334c      	adds	r3, #76	; 0x4c
 800a712:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800a714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a716:	2b00      	cmp	r3, #0
 800a718:	d113      	bne.n	800a742 <HAL_PCD_IRQHandler+0x3a2>
 800a71a:	6879      	ldr	r1, [r7, #4]
 800a71c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a71e:	4613      	mov	r3, r2
 800a720:	00db      	lsls	r3, r3, #3
 800a722:	4413      	add	r3, r2
 800a724:	009b      	lsls	r3, r3, #2
 800a726:	440b      	add	r3, r1
 800a728:	3354      	adds	r3, #84	; 0x54
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d108      	bne.n	800a742 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6818      	ldr	r0, [r3, #0]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a73a:	461a      	mov	r2, r3
 800a73c:	2101      	movs	r1, #1
 800a73e:	f006 ff17 	bl	8011570 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800a742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a744:	b2db      	uxtb	r3, r3
 800a746:	4619      	mov	r1, r3
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f00d fe44 	bl	80183d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	f003 0308 	and.w	r3, r3, #8
 800a754:	2b00      	cmp	r3, #0
 800a756:	d008      	beq.n	800a76a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800a758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75a:	015a      	lsls	r2, r3, #5
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	4413      	add	r3, r2
 800a760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a764:	461a      	mov	r2, r3
 800a766:	2308      	movs	r3, #8
 800a768:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	f003 0310 	and.w	r3, r3, #16
 800a770:	2b00      	cmp	r3, #0
 800a772:	d008      	beq.n	800a786 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800a774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a776:	015a      	lsls	r2, r3, #5
 800a778:	69fb      	ldr	r3, [r7, #28]
 800a77a:	4413      	add	r3, r2
 800a77c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a780:	461a      	mov	r2, r3
 800a782:	2310      	movs	r3, #16
 800a784:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d008      	beq.n	800a7a2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800a790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a792:	015a      	lsls	r2, r3, #5
 800a794:	69fb      	ldr	r3, [r7, #28]
 800a796:	4413      	add	r3, r2
 800a798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a79c:	461a      	mov	r2, r3
 800a79e:	2340      	movs	r3, #64	; 0x40
 800a7a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	f003 0302 	and.w	r3, r3, #2
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d023      	beq.n	800a7f4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800a7ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a7ae:	6a38      	ldr	r0, [r7, #32]
 800a7b0:	f005 fdf8 	bl	80103a4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800a7b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7b6:	4613      	mov	r3, r2
 800a7b8:	00db      	lsls	r3, r3, #3
 800a7ba:	4413      	add	r3, r2
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	3338      	adds	r3, #56	; 0x38
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	4413      	add	r3, r2
 800a7c4:	3304      	adds	r3, #4
 800a7c6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	78db      	ldrb	r3, [r3, #3]
 800a7cc:	2b01      	cmp	r3, #1
 800a7ce:	d108      	bne.n	800a7e2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	4619      	mov	r1, r3
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f00d fe91 	bl	8018504 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e4:	015a      	lsls	r2, r3, #5
 800a7e6:	69fb      	ldr	r3, [r7, #28]
 800a7e8:	4413      	add	r3, r2
 800a7ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	2302      	movs	r3, #2
 800a7f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d003      	beq.n	800a806 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800a7fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 fd35 	bl	800b270 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800a806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a808:	3301      	adds	r3, #1
 800a80a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80e:	085b      	lsrs	r3, r3, #1
 800a810:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a814:	2b00      	cmp	r3, #0
 800a816:	f47f af2e 	bne.w	800a676 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4618      	mov	r0, r3
 800a820:	f006 fde2 	bl	80113e8 <USB_ReadInterrupts>
 800a824:	4603      	mov	r3, r0
 800a826:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a82a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a82e:	d122      	bne.n	800a876 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a830:	69fb      	ldr	r3, [r7, #28]
 800a832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a836:	685b      	ldr	r3, [r3, #4]
 800a838:	69fa      	ldr	r2, [r7, #28]
 800a83a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a83e:	f023 0301 	bic.w	r3, r3, #1
 800a842:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d108      	bne.n	800a860 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	2200      	movs	r2, #0
 800a852:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a856:	2100      	movs	r1, #0
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f00e f82b 	bl	80188b4 <HAL_PCDEx_LPM_Callback>
 800a85e:	e002      	b.n	800a866 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f00d fe2f 	bl	80184c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	695a      	ldr	r2, [r3, #20]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800a874:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4618      	mov	r0, r3
 800a87c:	f006 fdb4 	bl	80113e8 <USB_ReadInterrupts>
 800a880:	4603      	mov	r3, r0
 800a882:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a886:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a88a:	d112      	bne.n	800a8b2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a892:	689b      	ldr	r3, [r3, #8]
 800a894:	f003 0301 	and.w	r3, r3, #1
 800a898:	2b01      	cmp	r3, #1
 800a89a:	d102      	bne.n	800a8a2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f00d fdeb 	bl	8018478 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	695a      	ldr	r2, [r3, #20]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800a8b0:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f006 fd96 	bl	80113e8 <USB_ReadInterrupts>
 800a8bc:	4603      	mov	r3, r0
 800a8be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a8c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a8c6:	d121      	bne.n	800a90c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	695a      	ldr	r2, [r3, #20]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800a8d6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d111      	bne.n	800a906 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2201      	movs	r2, #1
 800a8e6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8f0:	089b      	lsrs	r3, r3, #2
 800a8f2:	f003 020f 	and.w	r2, r3, #15
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a8fc:	2101      	movs	r1, #1
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f00d ffd8 	bl	80188b4 <HAL_PCDEx_LPM_Callback>
 800a904:	e002      	b.n	800a90c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f00d fdb6 	bl	8018478 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4618      	mov	r0, r3
 800a912:	f006 fd69 	bl	80113e8 <USB_ReadInterrupts>
 800a916:	4603      	mov	r3, r0
 800a918:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a91c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a920:	f040 80b7 	bne.w	800aa92 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a924:	69fb      	ldr	r3, [r7, #28]
 800a926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a92a:	685b      	ldr	r3, [r3, #4]
 800a92c:	69fa      	ldr	r2, [r7, #28]
 800a92e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a932:	f023 0301 	bic.w	r3, r3, #1
 800a936:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	2110      	movs	r1, #16
 800a93e:	4618      	mov	r0, r3
 800a940:	f005 fd30 	bl	80103a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a944:	2300      	movs	r3, #0
 800a946:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a948:	e046      	b.n	800a9d8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a94c:	015a      	lsls	r2, r3, #5
 800a94e:	69fb      	ldr	r3, [r7, #28]
 800a950:	4413      	add	r3, r2
 800a952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a956:	461a      	mov	r2, r3
 800a958:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a95c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a960:	015a      	lsls	r2, r3, #5
 800a962:	69fb      	ldr	r3, [r7, #28]
 800a964:	4413      	add	r3, r2
 800a966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a96e:	0151      	lsls	r1, r2, #5
 800a970:	69fa      	ldr	r2, [r7, #28]
 800a972:	440a      	add	r2, r1
 800a974:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a978:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a97c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a980:	015a      	lsls	r2, r3, #5
 800a982:	69fb      	ldr	r3, [r7, #28]
 800a984:	4413      	add	r3, r2
 800a986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a98a:	461a      	mov	r2, r3
 800a98c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a990:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a994:	015a      	lsls	r2, r3, #5
 800a996:	69fb      	ldr	r3, [r7, #28]
 800a998:	4413      	add	r3, r2
 800a99a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9a2:	0151      	lsls	r1, r2, #5
 800a9a4:	69fa      	ldr	r2, [r7, #28]
 800a9a6:	440a      	add	r2, r1
 800a9a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a9b0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b4:	015a      	lsls	r2, r3, #5
 800a9b6:	69fb      	ldr	r3, [r7, #28]
 800a9b8:	4413      	add	r3, r2
 800a9ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9c2:	0151      	lsls	r1, r2, #5
 800a9c4:	69fa      	ldr	r2, [r7, #28]
 800a9c6:	440a      	add	r2, r1
 800a9c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a9d0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d3b3      	bcc.n	800a94a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a9e2:	69fb      	ldr	r3, [r7, #28]
 800a9e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9e8:	69db      	ldr	r3, [r3, #28]
 800a9ea:	69fa      	ldr	r2, [r7, #28]
 800a9ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a9f0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a9f4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d016      	beq.n	800aa2c <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a9fe:	69fb      	ldr	r3, [r7, #28]
 800aa00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa08:	69fa      	ldr	r2, [r7, #28]
 800aa0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa0e:	f043 030b 	orr.w	r3, r3, #11
 800aa12:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800aa16:	69fb      	ldr	r3, [r7, #28]
 800aa18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa1e:	69fa      	ldr	r2, [r7, #28]
 800aa20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa24:	f043 030b 	orr.w	r3, r3, #11
 800aa28:	6453      	str	r3, [r2, #68]	; 0x44
 800aa2a:	e015      	b.n	800aa58 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa32:	695b      	ldr	r3, [r3, #20]
 800aa34:	69fa      	ldr	r2, [r7, #28]
 800aa36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800aa3e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800aa42:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800aa44:	69fb      	ldr	r3, [r7, #28]
 800aa46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa4a:	691b      	ldr	r3, [r3, #16]
 800aa4c:	69fa      	ldr	r2, [r7, #28]
 800aa4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa52:	f043 030b 	orr.w	r3, r3, #11
 800aa56:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800aa58:	69fb      	ldr	r3, [r7, #28]
 800aa5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	69fa      	ldr	r2, [r7, #28]
 800aa62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa66:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800aa6a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6818      	ldr	r0, [r3, #0]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	691b      	ldr	r3, [r3, #16]
 800aa74:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	f006 fd77 	bl	8011570 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	695a      	ldr	r2, [r3, #20]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800aa90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4618      	mov	r0, r3
 800aa98:	f006 fca6 	bl	80113e8 <USB_ReadInterrupts>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aaa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aaa6:	d124      	bne.n	800aaf2 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	4618      	mov	r0, r3
 800aaae:	f006 fd3c 	bl	801152a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4618      	mov	r0, r3
 800aab8:	f005 fcf1 	bl	801049e <USB_GetDevSpeed>
 800aabc:	4603      	mov	r3, r0
 800aabe:	461a      	mov	r2, r3
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681c      	ldr	r4, [r3, #0]
 800aac8:	f000 ff40 	bl	800b94c <HAL_RCC_GetHCLKFreq>
 800aacc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800aad2:	b2db      	uxtb	r3, r3
 800aad4:	461a      	mov	r2, r3
 800aad6:	4620      	mov	r0, r4
 800aad8:	f005 f9f6 	bl	800fec8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800aadc:	6878      	ldr	r0, [r7, #4]
 800aade:	f00d fca2 	bl	8018426 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	695a      	ldr	r2, [r3, #20]
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800aaf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f006 fc76 	bl	80113e8 <USB_ReadInterrupts>
 800aafc:	4603      	mov	r3, r0
 800aafe:	f003 0308 	and.w	r3, r3, #8
 800ab02:	2b08      	cmp	r3, #8
 800ab04:	d10a      	bne.n	800ab1c <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f00d fc7f 	bl	801840a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	695a      	ldr	r2, [r3, #20]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f002 0208 	and.w	r2, r2, #8
 800ab1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4618      	mov	r0, r3
 800ab22:	f006 fc61 	bl	80113e8 <USB_ReadInterrupts>
 800ab26:	4603      	mov	r3, r0
 800ab28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab2c:	2b80      	cmp	r3, #128	; 0x80
 800ab2e:	d122      	bne.n	800ab76 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800ab30:	6a3b      	ldr	r3, [r7, #32]
 800ab32:	699b      	ldr	r3, [r3, #24]
 800ab34:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ab38:	6a3b      	ldr	r3, [r7, #32]
 800ab3a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	627b      	str	r3, [r7, #36]	; 0x24
 800ab40:	e014      	b.n	800ab6c <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800ab42:	6879      	ldr	r1, [r7, #4]
 800ab44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab46:	4613      	mov	r3, r2
 800ab48:	00db      	lsls	r3, r3, #3
 800ab4a:	4413      	add	r3, r2
 800ab4c:	009b      	lsls	r3, r3, #2
 800ab4e:	440b      	add	r3, r1
 800ab50:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	d105      	bne.n	800ab66 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800ab5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5c:	b2db      	uxtb	r3, r3
 800ab5e:	4619      	mov	r1, r3
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 fb27 	bl	800b1b4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ab66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab68:	3301      	adds	r3, #1
 800ab6a:	627b      	str	r3, [r7, #36]	; 0x24
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d3e5      	bcc.n	800ab42 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f006 fc34 	bl	80113e8 <USB_ReadInterrupts>
 800ab80:	4603      	mov	r3, r0
 800ab82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab8a:	d13b      	bne.n	800ac04 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	627b      	str	r3, [r7, #36]	; 0x24
 800ab90:	e02b      	b.n	800abea <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800ab92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab94:	015a      	lsls	r2, r3, #5
 800ab96:	69fb      	ldr	r3, [r7, #28]
 800ab98:	4413      	add	r3, r2
 800ab9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800aba2:	6879      	ldr	r1, [r7, #4]
 800aba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aba6:	4613      	mov	r3, r2
 800aba8:	00db      	lsls	r3, r3, #3
 800abaa:	4413      	add	r3, r2
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	440b      	add	r3, r1
 800abb0:	3340      	adds	r3, #64	; 0x40
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d115      	bne.n	800abe4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800abb8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800abba:	2b00      	cmp	r3, #0
 800abbc:	da12      	bge.n	800abe4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800abbe:	6879      	ldr	r1, [r7, #4]
 800abc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abc2:	4613      	mov	r3, r2
 800abc4:	00db      	lsls	r3, r3, #3
 800abc6:	4413      	add	r3, r2
 800abc8:	009b      	lsls	r3, r3, #2
 800abca:	440b      	add	r3, r1
 800abcc:	333f      	adds	r3, #63	; 0x3f
 800abce:	2201      	movs	r2, #1
 800abd0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800abd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd4:	b2db      	uxtb	r3, r3
 800abd6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800abda:	b2db      	uxtb	r3, r3
 800abdc:	4619      	mov	r1, r3
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 fae8 	bl	800b1b4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800abe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe6:	3301      	adds	r3, #1
 800abe8:	627b      	str	r3, [r7, #36]	; 0x24
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	685b      	ldr	r3, [r3, #4]
 800abee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abf0:	429a      	cmp	r2, r3
 800abf2:	d3ce      	bcc.n	800ab92 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	695a      	ldr	r2, [r3, #20]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800ac02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f006 fbed 	bl	80113e8 <USB_ReadInterrupts>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ac14:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac18:	d155      	bne.n	800acc6 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	627b      	str	r3, [r7, #36]	; 0x24
 800ac1e:	e045      	b.n	800acac <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800ac20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac22:	015a      	lsls	r2, r3, #5
 800ac24:	69fb      	ldr	r3, [r7, #28]
 800ac26:	4413      	add	r3, r2
 800ac28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800ac30:	6879      	ldr	r1, [r7, #4]
 800ac32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac34:	4613      	mov	r3, r2
 800ac36:	00db      	lsls	r3, r3, #3
 800ac38:	4413      	add	r3, r2
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	440b      	add	r3, r1
 800ac3e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d12e      	bne.n	800aca6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800ac48:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	da2b      	bge.n	800aca6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800ac4e:	69bb      	ldr	r3, [r7, #24]
 800ac50:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800ac5a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d121      	bne.n	800aca6 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800ac62:	6879      	ldr	r1, [r7, #4]
 800ac64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac66:	4613      	mov	r3, r2
 800ac68:	00db      	lsls	r3, r3, #3
 800ac6a:	4413      	add	r3, r2
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	440b      	add	r3, r1
 800ac70:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800ac74:	2201      	movs	r2, #1
 800ac76:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800ac78:	6a3b      	ldr	r3, [r7, #32]
 800ac7a:	699b      	ldr	r3, [r3, #24]
 800ac7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ac80:	6a3b      	ldr	r3, [r7, #32]
 800ac82:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800ac84:	6a3b      	ldr	r3, [r7, #32]
 800ac86:	695b      	ldr	r3, [r3, #20]
 800ac88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d10a      	bne.n	800aca6 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800ac90:	69fb      	ldr	r3, [r7, #28]
 800ac92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	69fa      	ldr	r2, [r7, #28]
 800ac9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aca2:	6053      	str	r3, [r2, #4]
            break;
 800aca4:	e007      	b.n	800acb6 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800aca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aca8:	3301      	adds	r3, #1
 800acaa:	627b      	str	r3, [r7, #36]	; 0x24
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	685b      	ldr	r3, [r3, #4]
 800acb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acb2:	429a      	cmp	r2, r3
 800acb4:	d3b4      	bcc.n	800ac20 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	695a      	ldr	r2, [r3, #20]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800acc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	4618      	mov	r0, r3
 800accc:	f006 fb8c 	bl	80113e8 <USB_ReadInterrupts>
 800acd0:	4603      	mov	r3, r0
 800acd2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800acd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acda:	d10a      	bne.n	800acf2 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f00d fc23 	bl	8018528 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	695a      	ldr	r2, [r3, #20]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800acf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4618      	mov	r0, r3
 800acf8:	f006 fb76 	bl	80113e8 <USB_ReadInterrupts>
 800acfc:	4603      	mov	r3, r0
 800acfe:	f003 0304 	and.w	r3, r3, #4
 800ad02:	2b04      	cmp	r3, #4
 800ad04:	d115      	bne.n	800ad32 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	685b      	ldr	r3, [r3, #4]
 800ad0c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800ad0e:	69bb      	ldr	r3, [r7, #24]
 800ad10:	f003 0304 	and.w	r3, r3, #4
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d002      	beq.n	800ad1e <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f00d fc13 	bl	8018544 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	6859      	ldr	r1, [r3, #4]
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	69ba      	ldr	r2, [r7, #24]
 800ad2a:	430a      	orrs	r2, r1
 800ad2c:	605a      	str	r2, [r3, #4]
 800ad2e:	e000      	b.n	800ad32 <HAL_PCD_IRQHandler+0x992>
      return;
 800ad30:	bf00      	nop
    }
  }
}
 800ad32:	3734      	adds	r7, #52	; 0x34
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd90      	pop	{r4, r7, pc}

0800ad38 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b082      	sub	sp, #8
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	460b      	mov	r3, r1
 800ad42:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800ad4a:	2b01      	cmp	r3, #1
 800ad4c:	d101      	bne.n	800ad52 <HAL_PCD_SetAddress+0x1a>
 800ad4e:	2302      	movs	r3, #2
 800ad50:	e013      	b.n	800ad7a <HAL_PCD_SetAddress+0x42>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2201      	movs	r2, #1
 800ad56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	78fa      	ldrb	r2, [r7, #3]
 800ad5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	78fa      	ldrb	r2, [r7, #3]
 800ad68:	4611      	mov	r1, r2
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f006 fad4 	bl	8011318 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2200      	movs	r2, #0
 800ad74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800ad78:	2300      	movs	r3, #0
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3708      	adds	r7, #8
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}

0800ad82 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800ad82:	b580      	push	{r7, lr}
 800ad84:	b084      	sub	sp, #16
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	6078      	str	r0, [r7, #4]
 800ad8a:	4608      	mov	r0, r1
 800ad8c:	4611      	mov	r1, r2
 800ad8e:	461a      	mov	r2, r3
 800ad90:	4603      	mov	r3, r0
 800ad92:	70fb      	strb	r3, [r7, #3]
 800ad94:	460b      	mov	r3, r1
 800ad96:	803b      	strh	r3, [r7, #0]
 800ad98:	4613      	mov	r3, r2
 800ad9a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ada0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	da0f      	bge.n	800adc8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ada8:	78fb      	ldrb	r3, [r7, #3]
 800adaa:	f003 020f 	and.w	r2, r3, #15
 800adae:	4613      	mov	r3, r2
 800adb0:	00db      	lsls	r3, r3, #3
 800adb2:	4413      	add	r3, r2
 800adb4:	009b      	lsls	r3, r3, #2
 800adb6:	3338      	adds	r3, #56	; 0x38
 800adb8:	687a      	ldr	r2, [r7, #4]
 800adba:	4413      	add	r3, r2
 800adbc:	3304      	adds	r3, #4
 800adbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2201      	movs	r2, #1
 800adc4:	705a      	strb	r2, [r3, #1]
 800adc6:	e00f      	b.n	800ade8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800adc8:	78fb      	ldrb	r3, [r7, #3]
 800adca:	f003 020f 	and.w	r2, r3, #15
 800adce:	4613      	mov	r3, r2
 800add0:	00db      	lsls	r3, r3, #3
 800add2:	4413      	add	r3, r2
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800adda:	687a      	ldr	r2, [r7, #4]
 800addc:	4413      	add	r3, r2
 800adde:	3304      	adds	r3, #4
 800ade0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	2200      	movs	r2, #0
 800ade6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800ade8:	78fb      	ldrb	r3, [r7, #3]
 800adea:	f003 030f 	and.w	r3, r3, #15
 800adee:	b2da      	uxtb	r2, r3
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800adf4:	883a      	ldrh	r2, [r7, #0]
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	78ba      	ldrb	r2, [r7, #2]
 800adfe:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	785b      	ldrb	r3, [r3, #1]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d004      	beq.n	800ae12 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	b29a      	uxth	r2, r3
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800ae12:	78bb      	ldrb	r3, [r7, #2]
 800ae14:	2b02      	cmp	r3, #2
 800ae16:	d102      	bne.n	800ae1e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800ae24:	2b01      	cmp	r3, #1
 800ae26:	d101      	bne.n	800ae2c <HAL_PCD_EP_Open+0xaa>
 800ae28:	2302      	movs	r3, #2
 800ae2a:	e00e      	b.n	800ae4a <HAL_PCD_EP_Open+0xc8>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2201      	movs	r2, #1
 800ae30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	68f9      	ldr	r1, [r7, #12]
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f005 fb54 	bl	80104e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2200      	movs	r2, #0
 800ae44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800ae48:	7afb      	ldrb	r3, [r7, #11]
}
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3710      	adds	r7, #16
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}

0800ae52 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ae52:	b580      	push	{r7, lr}
 800ae54:	b084      	sub	sp, #16
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ae5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	da0f      	bge.n	800ae86 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ae66:	78fb      	ldrb	r3, [r7, #3]
 800ae68:	f003 020f 	and.w	r2, r3, #15
 800ae6c:	4613      	mov	r3, r2
 800ae6e:	00db      	lsls	r3, r3, #3
 800ae70:	4413      	add	r3, r2
 800ae72:	009b      	lsls	r3, r3, #2
 800ae74:	3338      	adds	r3, #56	; 0x38
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	4413      	add	r3, r2
 800ae7a:	3304      	adds	r3, #4
 800ae7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	2201      	movs	r2, #1
 800ae82:	705a      	strb	r2, [r3, #1]
 800ae84:	e00f      	b.n	800aea6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ae86:	78fb      	ldrb	r3, [r7, #3]
 800ae88:	f003 020f 	and.w	r2, r3, #15
 800ae8c:	4613      	mov	r3, r2
 800ae8e:	00db      	lsls	r3, r3, #3
 800ae90:	4413      	add	r3, r2
 800ae92:	009b      	lsls	r3, r3, #2
 800ae94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ae98:	687a      	ldr	r2, [r7, #4]
 800ae9a:	4413      	add	r3, r2
 800ae9c:	3304      	adds	r3, #4
 800ae9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2200      	movs	r2, #0
 800aea4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800aea6:	78fb      	ldrb	r3, [r7, #3]
 800aea8:	f003 030f 	and.w	r3, r3, #15
 800aeac:	b2da      	uxtb	r2, r3
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	d101      	bne.n	800aec0 <HAL_PCD_EP_Close+0x6e>
 800aebc:	2302      	movs	r3, #2
 800aebe:	e00e      	b.n	800aede <HAL_PCD_EP_Close+0x8c>
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2201      	movs	r2, #1
 800aec4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	68f9      	ldr	r1, [r7, #12]
 800aece:	4618      	mov	r0, r3
 800aed0:	f005 fb92 	bl	80105f8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2200      	movs	r2, #0
 800aed8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800aedc:	2300      	movs	r3, #0
}
 800aede:	4618      	mov	r0, r3
 800aee0:	3710      	adds	r7, #16
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800aee6:	b580      	push	{r7, lr}
 800aee8:	b086      	sub	sp, #24
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	60f8      	str	r0, [r7, #12]
 800aeee:	607a      	str	r2, [r7, #4]
 800aef0:	603b      	str	r3, [r7, #0]
 800aef2:	460b      	mov	r3, r1
 800aef4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800aef6:	7afb      	ldrb	r3, [r7, #11]
 800aef8:	f003 020f 	and.w	r2, r3, #15
 800aefc:	4613      	mov	r3, r2
 800aefe:	00db      	lsls	r3, r3, #3
 800af00:	4413      	add	r3, r2
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800af08:	68fa      	ldr	r2, [r7, #12]
 800af0a:	4413      	add	r3, r2
 800af0c:	3304      	adds	r3, #4
 800af0e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	683a      	ldr	r2, [r7, #0]
 800af1a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800af1c:	697b      	ldr	r3, [r7, #20]
 800af1e:	2200      	movs	r2, #0
 800af20:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	2200      	movs	r2, #0
 800af26:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800af28:	7afb      	ldrb	r3, [r7, #11]
 800af2a:	f003 030f 	and.w	r3, r3, #15
 800af2e:	b2da      	uxtb	r2, r3
 800af30:	697b      	ldr	r3, [r7, #20]
 800af32:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	691b      	ldr	r3, [r3, #16]
 800af38:	2b01      	cmp	r3, #1
 800af3a:	d102      	bne.n	800af42 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800af3c:	687a      	ldr	r2, [r7, #4]
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800af42:	7afb      	ldrb	r3, [r7, #11]
 800af44:	f003 030f 	and.w	r3, r3, #15
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d109      	bne.n	800af60 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	6818      	ldr	r0, [r3, #0]
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	691b      	ldr	r3, [r3, #16]
 800af54:	b2db      	uxtb	r3, r3
 800af56:	461a      	mov	r2, r3
 800af58:	6979      	ldr	r1, [r7, #20]
 800af5a:	f005 fe71 	bl	8010c40 <USB_EP0StartXfer>
 800af5e:	e008      	b.n	800af72 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	6818      	ldr	r0, [r3, #0]
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	691b      	ldr	r3, [r3, #16]
 800af68:	b2db      	uxtb	r3, r3
 800af6a:	461a      	mov	r2, r3
 800af6c:	6979      	ldr	r1, [r7, #20]
 800af6e:	f005 fc1f 	bl	80107b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800af72:	2300      	movs	r3, #0
}
 800af74:	4618      	mov	r0, r3
 800af76:	3718      	adds	r7, #24
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800af7c:	b480      	push	{r7}
 800af7e:	b083      	sub	sp, #12
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	460b      	mov	r3, r1
 800af86:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800af88:	78fb      	ldrb	r3, [r7, #3]
 800af8a:	f003 020f 	and.w	r2, r3, #15
 800af8e:	6879      	ldr	r1, [r7, #4]
 800af90:	4613      	mov	r3, r2
 800af92:	00db      	lsls	r3, r3, #3
 800af94:	4413      	add	r3, r2
 800af96:	009b      	lsls	r3, r3, #2
 800af98:	440b      	add	r3, r1
 800af9a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800af9e:	681b      	ldr	r3, [r3, #0]
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	370c      	adds	r7, #12
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b086      	sub	sp, #24
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	60f8      	str	r0, [r7, #12]
 800afb4:	607a      	str	r2, [r7, #4]
 800afb6:	603b      	str	r3, [r7, #0]
 800afb8:	460b      	mov	r3, r1
 800afba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800afbc:	7afb      	ldrb	r3, [r7, #11]
 800afbe:	f003 020f 	and.w	r2, r3, #15
 800afc2:	4613      	mov	r3, r2
 800afc4:	00db      	lsls	r3, r3, #3
 800afc6:	4413      	add	r3, r2
 800afc8:	009b      	lsls	r3, r3, #2
 800afca:	3338      	adds	r3, #56	; 0x38
 800afcc:	68fa      	ldr	r2, [r7, #12]
 800afce:	4413      	add	r3, r2
 800afd0:	3304      	adds	r3, #4
 800afd2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	687a      	ldr	r2, [r7, #4]
 800afd8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	683a      	ldr	r2, [r7, #0]
 800afde:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	2200      	movs	r2, #0
 800afe4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800afe6:	697b      	ldr	r3, [r7, #20]
 800afe8:	2201      	movs	r2, #1
 800afea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800afec:	7afb      	ldrb	r3, [r7, #11]
 800afee:	f003 030f 	and.w	r3, r3, #15
 800aff2:	b2da      	uxtb	r2, r3
 800aff4:	697b      	ldr	r3, [r7, #20]
 800aff6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	691b      	ldr	r3, [r3, #16]
 800affc:	2b01      	cmp	r3, #1
 800affe:	d102      	bne.n	800b006 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b000:	687a      	ldr	r2, [r7, #4]
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b006:	7afb      	ldrb	r3, [r7, #11]
 800b008:	f003 030f 	and.w	r3, r3, #15
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d109      	bne.n	800b024 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	6818      	ldr	r0, [r3, #0]
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	691b      	ldr	r3, [r3, #16]
 800b018:	b2db      	uxtb	r3, r3
 800b01a:	461a      	mov	r2, r3
 800b01c:	6979      	ldr	r1, [r7, #20]
 800b01e:	f005 fe0f 	bl	8010c40 <USB_EP0StartXfer>
 800b022:	e008      	b.n	800b036 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	6818      	ldr	r0, [r3, #0]
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	691b      	ldr	r3, [r3, #16]
 800b02c:	b2db      	uxtb	r3, r3
 800b02e:	461a      	mov	r2, r3
 800b030:	6979      	ldr	r1, [r7, #20]
 800b032:	f005 fbbd 	bl	80107b0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800b036:	2300      	movs	r3, #0
}
 800b038:	4618      	mov	r0, r3
 800b03a:	3718      	adds	r7, #24
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b084      	sub	sp, #16
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	460b      	mov	r3, r1
 800b04a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b04c:	78fb      	ldrb	r3, [r7, #3]
 800b04e:	f003 020f 	and.w	r2, r3, #15
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	685b      	ldr	r3, [r3, #4]
 800b056:	429a      	cmp	r2, r3
 800b058:	d901      	bls.n	800b05e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800b05a:	2301      	movs	r3, #1
 800b05c:	e050      	b.n	800b100 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b05e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b062:	2b00      	cmp	r3, #0
 800b064:	da0f      	bge.n	800b086 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b066:	78fb      	ldrb	r3, [r7, #3]
 800b068:	f003 020f 	and.w	r2, r3, #15
 800b06c:	4613      	mov	r3, r2
 800b06e:	00db      	lsls	r3, r3, #3
 800b070:	4413      	add	r3, r2
 800b072:	009b      	lsls	r3, r3, #2
 800b074:	3338      	adds	r3, #56	; 0x38
 800b076:	687a      	ldr	r2, [r7, #4]
 800b078:	4413      	add	r3, r2
 800b07a:	3304      	adds	r3, #4
 800b07c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2201      	movs	r2, #1
 800b082:	705a      	strb	r2, [r3, #1]
 800b084:	e00d      	b.n	800b0a2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b086:	78fa      	ldrb	r2, [r7, #3]
 800b088:	4613      	mov	r3, r2
 800b08a:	00db      	lsls	r3, r3, #3
 800b08c:	4413      	add	r3, r2
 800b08e:	009b      	lsls	r3, r3, #2
 800b090:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b094:	687a      	ldr	r2, [r7, #4]
 800b096:	4413      	add	r3, r2
 800b098:	3304      	adds	r3, #4
 800b09a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2201      	movs	r2, #1
 800b0a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b0a8:	78fb      	ldrb	r3, [r7, #3]
 800b0aa:	f003 030f 	and.w	r3, r3, #15
 800b0ae:	b2da      	uxtb	r2, r3
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b0ba:	2b01      	cmp	r3, #1
 800b0bc:	d101      	bne.n	800b0c2 <HAL_PCD_EP_SetStall+0x82>
 800b0be:	2302      	movs	r3, #2
 800b0c0:	e01e      	b.n	800b100 <HAL_PCD_EP_SetStall+0xc0>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2201      	movs	r2, #1
 800b0c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	68f9      	ldr	r1, [r7, #12]
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f006 f84d 	bl	8011170 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b0d6:	78fb      	ldrb	r3, [r7, #3]
 800b0d8:	f003 030f 	and.w	r3, r3, #15
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d10a      	bne.n	800b0f6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6818      	ldr	r0, [r3, #0]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	691b      	ldr	r3, [r3, #16]
 800b0e8:	b2d9      	uxtb	r1, r3
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b0f0:	461a      	mov	r2, r3
 800b0f2:	f006 fa3d 	bl	8011570 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800b0fe:	2300      	movs	r3, #0
}
 800b100:	4618      	mov	r0, r3
 800b102:	3710      	adds	r7, #16
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b084      	sub	sp, #16
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	460b      	mov	r3, r1
 800b112:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b114:	78fb      	ldrb	r3, [r7, #3]
 800b116:	f003 020f 	and.w	r2, r3, #15
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	429a      	cmp	r2, r3
 800b120:	d901      	bls.n	800b126 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b122:	2301      	movs	r3, #1
 800b124:	e042      	b.n	800b1ac <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b126:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	da0f      	bge.n	800b14e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b12e:	78fb      	ldrb	r3, [r7, #3]
 800b130:	f003 020f 	and.w	r2, r3, #15
 800b134:	4613      	mov	r3, r2
 800b136:	00db      	lsls	r3, r3, #3
 800b138:	4413      	add	r3, r2
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	3338      	adds	r3, #56	; 0x38
 800b13e:	687a      	ldr	r2, [r7, #4]
 800b140:	4413      	add	r3, r2
 800b142:	3304      	adds	r3, #4
 800b144:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2201      	movs	r2, #1
 800b14a:	705a      	strb	r2, [r3, #1]
 800b14c:	e00f      	b.n	800b16e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b14e:	78fb      	ldrb	r3, [r7, #3]
 800b150:	f003 020f 	and.w	r2, r3, #15
 800b154:	4613      	mov	r3, r2
 800b156:	00db      	lsls	r3, r3, #3
 800b158:	4413      	add	r3, r2
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	4413      	add	r3, r2
 800b164:	3304      	adds	r3, #4
 800b166:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2200      	movs	r2, #0
 800b16c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2200      	movs	r2, #0
 800b172:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b174:	78fb      	ldrb	r3, [r7, #3]
 800b176:	f003 030f 	and.w	r3, r3, #15
 800b17a:	b2da      	uxtb	r2, r3
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b186:	2b01      	cmp	r3, #1
 800b188:	d101      	bne.n	800b18e <HAL_PCD_EP_ClrStall+0x86>
 800b18a:	2302      	movs	r3, #2
 800b18c:	e00e      	b.n	800b1ac <HAL_PCD_EP_ClrStall+0xa4>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2201      	movs	r2, #1
 800b192:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	68f9      	ldr	r1, [r7, #12]
 800b19c:	4618      	mov	r0, r3
 800b19e:	f006 f855 	bl	801124c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800b1aa:	2300      	movs	r3, #0
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3710      	adds	r7, #16
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	460b      	mov	r3, r1
 800b1be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800b1c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	da0c      	bge.n	800b1e2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b1c8:	78fb      	ldrb	r3, [r7, #3]
 800b1ca:	f003 020f 	and.w	r2, r3, #15
 800b1ce:	4613      	mov	r3, r2
 800b1d0:	00db      	lsls	r3, r3, #3
 800b1d2:	4413      	add	r3, r2
 800b1d4:	009b      	lsls	r3, r3, #2
 800b1d6:	3338      	adds	r3, #56	; 0x38
 800b1d8:	687a      	ldr	r2, [r7, #4]
 800b1da:	4413      	add	r3, r2
 800b1dc:	3304      	adds	r3, #4
 800b1de:	60fb      	str	r3, [r7, #12]
 800b1e0:	e00c      	b.n	800b1fc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b1e2:	78fb      	ldrb	r3, [r7, #3]
 800b1e4:	f003 020f 	and.w	r2, r3, #15
 800b1e8:	4613      	mov	r3, r2
 800b1ea:	00db      	lsls	r3, r3, #3
 800b1ec:	4413      	add	r3, r2
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	4413      	add	r3, r2
 800b1f8:	3304      	adds	r3, #4
 800b1fa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	68f9      	ldr	r1, [r7, #12]
 800b202:	4618      	mov	r0, r3
 800b204:	f005 fe74 	bl	8010ef0 <USB_EPStopXfer>
 800b208:	4603      	mov	r3, r0
 800b20a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800b20c:	7afb      	ldrb	r3, [r7, #11]
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3710      	adds	r7, #16
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}

0800b216 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b216:	b580      	push	{r7, lr}
 800b218:	b082      	sub	sp, #8
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	6078      	str	r0, [r7, #4]
 800b21e:	460b      	mov	r3, r1
 800b220:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b228:	2b01      	cmp	r3, #1
 800b22a:	d101      	bne.n	800b230 <HAL_PCD_EP_Flush+0x1a>
 800b22c:	2302      	movs	r3, #2
 800b22e:	e01b      	b.n	800b268 <HAL_PCD_EP_Flush+0x52>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2201      	movs	r2, #1
 800b234:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 800b238:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	da09      	bge.n	800b254 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	78fb      	ldrb	r3, [r7, #3]
 800b246:	f003 030f 	and.w	r3, r3, #15
 800b24a:	4619      	mov	r1, r3
 800b24c:	4610      	mov	r0, r2
 800b24e:	f005 f8a9 	bl	80103a4 <USB_FlushTxFifo>
 800b252:	e004      	b.n	800b25e <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4618      	mov	r0, r3
 800b25a:	f005 f8d7 	bl	801040c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2200      	movs	r2, #0
 800b262:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800b266:	2300      	movs	r3, #0
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3708      	adds	r7, #8
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b08a      	sub	sp, #40	; 0x28
 800b274:	af02      	add	r7, sp, #8
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800b284:	683a      	ldr	r2, [r7, #0]
 800b286:	4613      	mov	r3, r2
 800b288:	00db      	lsls	r3, r3, #3
 800b28a:	4413      	add	r3, r2
 800b28c:	009b      	lsls	r3, r3, #2
 800b28e:	3338      	adds	r3, #56	; 0x38
 800b290:	687a      	ldr	r2, [r7, #4]
 800b292:	4413      	add	r3, r2
 800b294:	3304      	adds	r3, #4
 800b296:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	6a1a      	ldr	r2, [r3, #32]
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	699b      	ldr	r3, [r3, #24]
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	d901      	bls.n	800b2a8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	e06c      	b.n	800b382 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	699a      	ldr	r2, [r3, #24]
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	6a1b      	ldr	r3, [r3, #32]
 800b2b0:	1ad3      	subs	r3, r2, r3
 800b2b2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	68db      	ldr	r3, [r3, #12]
 800b2b8:	69fa      	ldr	r2, [r7, #28]
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d902      	bls.n	800b2c4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	68db      	ldr	r3, [r3, #12]
 800b2c2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800b2c4:	69fb      	ldr	r3, [r7, #28]
 800b2c6:	3303      	adds	r3, #3
 800b2c8:	089b      	lsrs	r3, r3, #2
 800b2ca:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b2cc:	e02b      	b.n	800b326 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	699a      	ldr	r2, [r3, #24]
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	6a1b      	ldr	r3, [r3, #32]
 800b2d6:	1ad3      	subs	r3, r2, r3
 800b2d8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	68db      	ldr	r3, [r3, #12]
 800b2de:	69fa      	ldr	r2, [r7, #28]
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	d902      	bls.n	800b2ea <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	68db      	ldr	r3, [r3, #12]
 800b2e8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800b2ea:	69fb      	ldr	r3, [r7, #28]
 800b2ec:	3303      	adds	r3, #3
 800b2ee:	089b      	lsrs	r3, r3, #2
 800b2f0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	6919      	ldr	r1, [r3, #16]
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	b2da      	uxtb	r2, r3
 800b2fa:	69fb      	ldr	r3, [r7, #28]
 800b2fc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b302:	b2db      	uxtb	r3, r3
 800b304:	9300      	str	r3, [sp, #0]
 800b306:	4603      	mov	r3, r0
 800b308:	6978      	ldr	r0, [r7, #20]
 800b30a:	f005 fe9b 	bl	8011044 <USB_WritePacket>

    ep->xfer_buff  += len;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	691a      	ldr	r2, [r3, #16]
 800b312:	69fb      	ldr	r3, [r7, #28]
 800b314:	441a      	add	r2, r3
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	6a1a      	ldr	r2, [r3, #32]
 800b31e:	69fb      	ldr	r3, [r7, #28]
 800b320:	441a      	add	r2, r3
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	015a      	lsls	r2, r3, #5
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	4413      	add	r3, r2
 800b32e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b332:	699b      	ldr	r3, [r3, #24]
 800b334:	b29b      	uxth	r3, r3
 800b336:	69ba      	ldr	r2, [r7, #24]
 800b338:	429a      	cmp	r2, r3
 800b33a:	d809      	bhi.n	800b350 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	6a1a      	ldr	r2, [r3, #32]
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b344:	429a      	cmp	r2, r3
 800b346:	d203      	bcs.n	800b350 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	699b      	ldr	r3, [r3, #24]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d1be      	bne.n	800b2ce <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	699a      	ldr	r2, [r3, #24]
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	6a1b      	ldr	r3, [r3, #32]
 800b358:	429a      	cmp	r2, r3
 800b35a:	d811      	bhi.n	800b380 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	f003 030f 	and.w	r3, r3, #15
 800b362:	2201      	movs	r2, #1
 800b364:	fa02 f303 	lsl.w	r3, r2, r3
 800b368:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	43db      	mvns	r3, r3
 800b376:	6939      	ldr	r1, [r7, #16]
 800b378:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b37c:	4013      	ands	r3, r2
 800b37e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800b380:	2300      	movs	r3, #0
}
 800b382:	4618      	mov	r0, r3
 800b384:	3720      	adds	r7, #32
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
	...

0800b38c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b088      	sub	sp, #32
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b39c:	69fb      	ldr	r3, [r7, #28]
 800b39e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b3a0:	69fb      	ldr	r3, [r7, #28]
 800b3a2:	333c      	adds	r3, #60	; 0x3c
 800b3a4:	3304      	adds	r3, #4
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	015a      	lsls	r2, r3, #5
 800b3ae:	69bb      	ldr	r3, [r7, #24]
 800b3b0:	4413      	add	r3, r2
 800b3b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3b6:	689b      	ldr	r3, [r3, #8]
 800b3b8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	691b      	ldr	r3, [r3, #16]
 800b3be:	2b01      	cmp	r3, #1
 800b3c0:	d17b      	bne.n	800b4ba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	f003 0308 	and.w	r3, r3, #8
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d015      	beq.n	800b3f8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	4a61      	ldr	r2, [pc, #388]	; (800b554 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	f240 80b9 	bls.w	800b548 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	f000 80b3 	beq.w	800b548 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	015a      	lsls	r2, r3, #5
 800b3e6:	69bb      	ldr	r3, [r7, #24]
 800b3e8:	4413      	add	r3, r2
 800b3ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b3f4:	6093      	str	r3, [r2, #8]
 800b3f6:	e0a7      	b.n	800b548 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	f003 0320 	and.w	r3, r3, #32
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d009      	beq.n	800b416 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	015a      	lsls	r2, r3, #5
 800b406:	69bb      	ldr	r3, [r7, #24]
 800b408:	4413      	add	r3, r2
 800b40a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b40e:	461a      	mov	r2, r3
 800b410:	2320      	movs	r3, #32
 800b412:	6093      	str	r3, [r2, #8]
 800b414:	e098      	b.n	800b548 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	f040 8093 	bne.w	800b548 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	4a4b      	ldr	r2, [pc, #300]	; (800b554 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800b426:	4293      	cmp	r3, r2
 800b428:	d90f      	bls.n	800b44a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b430:	2b00      	cmp	r3, #0
 800b432:	d00a      	beq.n	800b44a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	015a      	lsls	r2, r3, #5
 800b438:	69bb      	ldr	r3, [r7, #24]
 800b43a:	4413      	add	r3, r2
 800b43c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b440:	461a      	mov	r2, r3
 800b442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b446:	6093      	str	r3, [r2, #8]
 800b448:	e07e      	b.n	800b548 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800b44a:	683a      	ldr	r2, [r7, #0]
 800b44c:	4613      	mov	r3, r2
 800b44e:	00db      	lsls	r3, r3, #3
 800b450:	4413      	add	r3, r2
 800b452:	009b      	lsls	r3, r3, #2
 800b454:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b458:	687a      	ldr	r2, [r7, #4]
 800b45a:	4413      	add	r3, r2
 800b45c:	3304      	adds	r3, #4
 800b45e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	69da      	ldr	r2, [r3, #28]
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	0159      	lsls	r1, r3, #5
 800b468:	69bb      	ldr	r3, [r7, #24]
 800b46a:	440b      	add	r3, r1
 800b46c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b470:	691b      	ldr	r3, [r3, #16]
 800b472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b476:	1ad2      	subs	r2, r2, r3
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d114      	bne.n	800b4ac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	699b      	ldr	r3, [r3, #24]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d109      	bne.n	800b49e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6818      	ldr	r0, [r3, #0]
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b494:	461a      	mov	r2, r3
 800b496:	2101      	movs	r1, #1
 800b498:	f006 f86a 	bl	8011570 <USB_EP0_OutStart>
 800b49c:	e006      	b.n	800b4ac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	691a      	ldr	r2, [r3, #16]
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	6a1b      	ldr	r3, [r3, #32]
 800b4a6:	441a      	add	r2, r3
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	b2db      	uxtb	r3, r3
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f00c ff74 	bl	80183a0 <HAL_PCD_DataOutStageCallback>
 800b4b8:	e046      	b.n	800b548 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	4a26      	ldr	r2, [pc, #152]	; (800b558 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800b4be:	4293      	cmp	r3, r2
 800b4c0:	d124      	bne.n	800b50c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d00a      	beq.n	800b4e2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	015a      	lsls	r2, r3, #5
 800b4d0:	69bb      	ldr	r3, [r7, #24]
 800b4d2:	4413      	add	r3, r2
 800b4d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4d8:	461a      	mov	r2, r3
 800b4da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b4de:	6093      	str	r3, [r2, #8]
 800b4e0:	e032      	b.n	800b548 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b4e2:	693b      	ldr	r3, [r7, #16]
 800b4e4:	f003 0320 	and.w	r3, r3, #32
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d008      	beq.n	800b4fe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	015a      	lsls	r2, r3, #5
 800b4f0:	69bb      	ldr	r3, [r7, #24]
 800b4f2:	4413      	add	r3, r2
 800b4f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	2320      	movs	r3, #32
 800b4fc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	b2db      	uxtb	r3, r3
 800b502:	4619      	mov	r1, r3
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f00c ff4b 	bl	80183a0 <HAL_PCD_DataOutStageCallback>
 800b50a:	e01d      	b.n	800b548 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d114      	bne.n	800b53c <PCD_EP_OutXfrComplete_int+0x1b0>
 800b512:	6879      	ldr	r1, [r7, #4]
 800b514:	683a      	ldr	r2, [r7, #0]
 800b516:	4613      	mov	r3, r2
 800b518:	00db      	lsls	r3, r3, #3
 800b51a:	4413      	add	r3, r2
 800b51c:	009b      	lsls	r3, r3, #2
 800b51e:	440b      	add	r3, r1
 800b520:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d108      	bne.n	800b53c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6818      	ldr	r0, [r3, #0]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b534:	461a      	mov	r2, r3
 800b536:	2100      	movs	r1, #0
 800b538:	f006 f81a 	bl	8011570 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	b2db      	uxtb	r3, r3
 800b540:	4619      	mov	r1, r3
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f00c ff2c 	bl	80183a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800b548:	2300      	movs	r3, #0
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3720      	adds	r7, #32
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}
 800b552:	bf00      	nop
 800b554:	4f54300a 	.word	0x4f54300a
 800b558:	4f54310a 	.word	0x4f54310a

0800b55c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b086      	sub	sp, #24
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	333c      	adds	r3, #60	; 0x3c
 800b574:	3304      	adds	r3, #4
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	015a      	lsls	r2, r3, #5
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	4413      	add	r3, r2
 800b582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b586:	689b      	ldr	r3, [r3, #8]
 800b588:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	4a15      	ldr	r2, [pc, #84]	; (800b5e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d90e      	bls.n	800b5b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d009      	beq.n	800b5b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	015a      	lsls	r2, r3, #5
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	4413      	add	r3, r2
 800b5a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5a8:	461a      	mov	r2, r3
 800b5aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b5ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f00c fee3 	bl	801837c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	4a0a      	ldr	r2, [pc, #40]	; (800b5e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800b5ba:	4293      	cmp	r3, r2
 800b5bc:	d90c      	bls.n	800b5d8 <PCD_EP_OutSetupPacket_int+0x7c>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	691b      	ldr	r3, [r3, #16]
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	d108      	bne.n	800b5d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6818      	ldr	r0, [r3, #0]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	2101      	movs	r1, #1
 800b5d4:	f005 ffcc 	bl	8011570 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800b5d8:	2300      	movs	r3, #0
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3718      	adds	r7, #24
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	4f54300a 	.word	0x4f54300a

0800b5e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b085      	sub	sp, #20
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	460b      	mov	r3, r1
 800b5f2:	70fb      	strb	r3, [r7, #3]
 800b5f4:	4613      	mov	r3, r2
 800b5f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800b600:	78fb      	ldrb	r3, [r7, #3]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d107      	bne.n	800b616 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800b606:	883b      	ldrh	r3, [r7, #0]
 800b608:	0419      	lsls	r1, r3, #16
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	68ba      	ldr	r2, [r7, #8]
 800b610:	430a      	orrs	r2, r1
 800b612:	629a      	str	r2, [r3, #40]	; 0x28
 800b614:	e028      	b.n	800b668 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b61c:	0c1b      	lsrs	r3, r3, #16
 800b61e:	68ba      	ldr	r2, [r7, #8]
 800b620:	4413      	add	r3, r2
 800b622:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b624:	2300      	movs	r3, #0
 800b626:	73fb      	strb	r3, [r7, #15]
 800b628:	e00d      	b.n	800b646 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681a      	ldr	r2, [r3, #0]
 800b62e:	7bfb      	ldrb	r3, [r7, #15]
 800b630:	3340      	adds	r3, #64	; 0x40
 800b632:	009b      	lsls	r3, r3, #2
 800b634:	4413      	add	r3, r2
 800b636:	685b      	ldr	r3, [r3, #4]
 800b638:	0c1b      	lsrs	r3, r3, #16
 800b63a:	68ba      	ldr	r2, [r7, #8]
 800b63c:	4413      	add	r3, r2
 800b63e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b640:	7bfb      	ldrb	r3, [r7, #15]
 800b642:	3301      	adds	r3, #1
 800b644:	73fb      	strb	r3, [r7, #15]
 800b646:	7bfa      	ldrb	r2, [r7, #15]
 800b648:	78fb      	ldrb	r3, [r7, #3]
 800b64a:	3b01      	subs	r3, #1
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d3ec      	bcc.n	800b62a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800b650:	883b      	ldrh	r3, [r7, #0]
 800b652:	0418      	lsls	r0, r3, #16
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6819      	ldr	r1, [r3, #0]
 800b658:	78fb      	ldrb	r3, [r7, #3]
 800b65a:	3b01      	subs	r3, #1
 800b65c:	68ba      	ldr	r2, [r7, #8]
 800b65e:	4302      	orrs	r2, r0
 800b660:	3340      	adds	r3, #64	; 0x40
 800b662:	009b      	lsls	r3, r3, #2
 800b664:	440b      	add	r3, r1
 800b666:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800b668:	2300      	movs	r3, #0
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3714      	adds	r7, #20
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr

0800b676 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800b676:	b480      	push	{r7}
 800b678:	b083      	sub	sp, #12
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
 800b67e:	460b      	mov	r3, r1
 800b680:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	887a      	ldrh	r2, [r7, #2]
 800b688:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b68a:	2300      	movs	r3, #0
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	370c      	adds	r7, #12
 800b690:	46bd      	mov	sp, r7
 800b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b696:	4770      	bx	lr

0800b698 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b698:	b480      	push	{r7}
 800b69a:	b085      	sub	sp, #20
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	699b      	ldr	r3, [r3, #24]
 800b6ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b6ca:	f043 0303 	orr.w	r3, r3, #3
 800b6ce:	68fa      	ldr	r2, [r7, #12]
 800b6d0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800b6d2:	2300      	movs	r3, #0
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	3714      	adds	r7, #20
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6de:	4770      	bx	lr

0800b6e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b082      	sub	sp, #8
 800b6e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	603b      	str	r3, [r7, #0]
 800b6ee:	4b20      	ldr	r3, [pc, #128]	; (800b770 <HAL_PWREx_EnableOverDrive+0x90>)
 800b6f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6f2:	4a1f      	ldr	r2, [pc, #124]	; (800b770 <HAL_PWREx_EnableOverDrive+0x90>)
 800b6f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b6f8:	6413      	str	r3, [r2, #64]	; 0x40
 800b6fa:	4b1d      	ldr	r3, [pc, #116]	; (800b770 <HAL_PWREx_EnableOverDrive+0x90>)
 800b6fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b702:	603b      	str	r3, [r7, #0]
 800b704:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b706:	4b1b      	ldr	r3, [pc, #108]	; (800b774 <HAL_PWREx_EnableOverDrive+0x94>)
 800b708:	2201      	movs	r2, #1
 800b70a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b70c:	f7fb fb4e 	bl	8006dac <HAL_GetTick>
 800b710:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b712:	e009      	b.n	800b728 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b714:	f7fb fb4a 	bl	8006dac <HAL_GetTick>
 800b718:	4602      	mov	r2, r0
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	1ad3      	subs	r3, r2, r3
 800b71e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b722:	d901      	bls.n	800b728 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800b724:	2303      	movs	r3, #3
 800b726:	e01f      	b.n	800b768 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b728:	4b13      	ldr	r3, [pc, #76]	; (800b778 <HAL_PWREx_EnableOverDrive+0x98>)
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b734:	d1ee      	bne.n	800b714 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b736:	4b11      	ldr	r3, [pc, #68]	; (800b77c <HAL_PWREx_EnableOverDrive+0x9c>)
 800b738:	2201      	movs	r2, #1
 800b73a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b73c:	f7fb fb36 	bl	8006dac <HAL_GetTick>
 800b740:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b742:	e009      	b.n	800b758 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b744:	f7fb fb32 	bl	8006dac <HAL_GetTick>
 800b748:	4602      	mov	r2, r0
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	1ad3      	subs	r3, r2, r3
 800b74e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b752:	d901      	bls.n	800b758 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800b754:	2303      	movs	r3, #3
 800b756:	e007      	b.n	800b768 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b758:	4b07      	ldr	r3, [pc, #28]	; (800b778 <HAL_PWREx_EnableOverDrive+0x98>)
 800b75a:	685b      	ldr	r3, [r3, #4]
 800b75c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b760:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b764:	d1ee      	bne.n	800b744 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800b766:	2300      	movs	r3, #0
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3708      	adds	r7, #8
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}
 800b770:	40023800 	.word	0x40023800
 800b774:	420e0040 	.word	0x420e0040
 800b778:	40007000 	.word	0x40007000
 800b77c:	420e0044 	.word	0x420e0044

0800b780 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b084      	sub	sp, #16
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d101      	bne.n	800b794 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b790:	2301      	movs	r3, #1
 800b792:	e0cc      	b.n	800b92e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b794:	4b68      	ldr	r3, [pc, #416]	; (800b938 <HAL_RCC_ClockConfig+0x1b8>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f003 030f 	and.w	r3, r3, #15
 800b79c:	683a      	ldr	r2, [r7, #0]
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d90c      	bls.n	800b7bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b7a2:	4b65      	ldr	r3, [pc, #404]	; (800b938 <HAL_RCC_ClockConfig+0x1b8>)
 800b7a4:	683a      	ldr	r2, [r7, #0]
 800b7a6:	b2d2      	uxtb	r2, r2
 800b7a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b7aa:	4b63      	ldr	r3, [pc, #396]	; (800b938 <HAL_RCC_ClockConfig+0x1b8>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f003 030f 	and.w	r3, r3, #15
 800b7b2:	683a      	ldr	r2, [r7, #0]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d001      	beq.n	800b7bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	e0b8      	b.n	800b92e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f003 0302 	and.w	r3, r3, #2
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d020      	beq.n	800b80a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	f003 0304 	and.w	r3, r3, #4
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d005      	beq.n	800b7e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b7d4:	4b59      	ldr	r3, [pc, #356]	; (800b93c <HAL_RCC_ClockConfig+0x1bc>)
 800b7d6:	689b      	ldr	r3, [r3, #8]
 800b7d8:	4a58      	ldr	r2, [pc, #352]	; (800b93c <HAL_RCC_ClockConfig+0x1bc>)
 800b7da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b7de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f003 0308 	and.w	r3, r3, #8
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d005      	beq.n	800b7f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b7ec:	4b53      	ldr	r3, [pc, #332]	; (800b93c <HAL_RCC_ClockConfig+0x1bc>)
 800b7ee:	689b      	ldr	r3, [r3, #8]
 800b7f0:	4a52      	ldr	r2, [pc, #328]	; (800b93c <HAL_RCC_ClockConfig+0x1bc>)
 800b7f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b7f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b7f8:	4b50      	ldr	r3, [pc, #320]	; (800b93c <HAL_RCC_ClockConfig+0x1bc>)
 800b7fa:	689b      	ldr	r3, [r3, #8]
 800b7fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	494d      	ldr	r1, [pc, #308]	; (800b93c <HAL_RCC_ClockConfig+0x1bc>)
 800b806:	4313      	orrs	r3, r2
 800b808:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f003 0301 	and.w	r3, r3, #1
 800b812:	2b00      	cmp	r3, #0
 800b814:	d044      	beq.n	800b8a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	685b      	ldr	r3, [r3, #4]
 800b81a:	2b01      	cmp	r3, #1
 800b81c:	d107      	bne.n	800b82e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b81e:	4b47      	ldr	r3, [pc, #284]	; (800b93c <HAL_RCC_ClockConfig+0x1bc>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b826:	2b00      	cmp	r3, #0
 800b828:	d119      	bne.n	800b85e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b82a:	2301      	movs	r3, #1
 800b82c:	e07f      	b.n	800b92e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	2b02      	cmp	r3, #2
 800b834:	d003      	beq.n	800b83e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b83a:	2b03      	cmp	r3, #3
 800b83c:	d107      	bne.n	800b84e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b83e:	4b3f      	ldr	r3, [pc, #252]	; (800b93c <HAL_RCC_ClockConfig+0x1bc>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b846:	2b00      	cmp	r3, #0
 800b848:	d109      	bne.n	800b85e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b84a:	2301      	movs	r3, #1
 800b84c:	e06f      	b.n	800b92e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b84e:	4b3b      	ldr	r3, [pc, #236]	; (800b93c <HAL_RCC_ClockConfig+0x1bc>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f003 0302 	and.w	r3, r3, #2
 800b856:	2b00      	cmp	r3, #0
 800b858:	d101      	bne.n	800b85e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b85a:	2301      	movs	r3, #1
 800b85c:	e067      	b.n	800b92e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b85e:	4b37      	ldr	r3, [pc, #220]	; (800b93c <HAL_RCC_ClockConfig+0x1bc>)
 800b860:	689b      	ldr	r3, [r3, #8]
 800b862:	f023 0203 	bic.w	r2, r3, #3
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	4934      	ldr	r1, [pc, #208]	; (800b93c <HAL_RCC_ClockConfig+0x1bc>)
 800b86c:	4313      	orrs	r3, r2
 800b86e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b870:	f7fb fa9c 	bl	8006dac <HAL_GetTick>
 800b874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b876:	e00a      	b.n	800b88e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b878:	f7fb fa98 	bl	8006dac <HAL_GetTick>
 800b87c:	4602      	mov	r2, r0
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	1ad3      	subs	r3, r2, r3
 800b882:	f241 3288 	movw	r2, #5000	; 0x1388
 800b886:	4293      	cmp	r3, r2
 800b888:	d901      	bls.n	800b88e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b88a:	2303      	movs	r3, #3
 800b88c:	e04f      	b.n	800b92e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b88e:	4b2b      	ldr	r3, [pc, #172]	; (800b93c <HAL_RCC_ClockConfig+0x1bc>)
 800b890:	689b      	ldr	r3, [r3, #8]
 800b892:	f003 020c 	and.w	r2, r3, #12
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	685b      	ldr	r3, [r3, #4]
 800b89a:	009b      	lsls	r3, r3, #2
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d1eb      	bne.n	800b878 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b8a0:	4b25      	ldr	r3, [pc, #148]	; (800b938 <HAL_RCC_ClockConfig+0x1b8>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f003 030f 	and.w	r3, r3, #15
 800b8a8:	683a      	ldr	r2, [r7, #0]
 800b8aa:	429a      	cmp	r2, r3
 800b8ac:	d20c      	bcs.n	800b8c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b8ae:	4b22      	ldr	r3, [pc, #136]	; (800b938 <HAL_RCC_ClockConfig+0x1b8>)
 800b8b0:	683a      	ldr	r2, [r7, #0]
 800b8b2:	b2d2      	uxtb	r2, r2
 800b8b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b8b6:	4b20      	ldr	r3, [pc, #128]	; (800b938 <HAL_RCC_ClockConfig+0x1b8>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f003 030f 	and.w	r3, r3, #15
 800b8be:	683a      	ldr	r2, [r7, #0]
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	d001      	beq.n	800b8c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	e032      	b.n	800b92e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f003 0304 	and.w	r3, r3, #4
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d008      	beq.n	800b8e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b8d4:	4b19      	ldr	r3, [pc, #100]	; (800b93c <HAL_RCC_ClockConfig+0x1bc>)
 800b8d6:	689b      	ldr	r3, [r3, #8]
 800b8d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	68db      	ldr	r3, [r3, #12]
 800b8e0:	4916      	ldr	r1, [pc, #88]	; (800b93c <HAL_RCC_ClockConfig+0x1bc>)
 800b8e2:	4313      	orrs	r3, r2
 800b8e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f003 0308 	and.w	r3, r3, #8
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d009      	beq.n	800b906 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b8f2:	4b12      	ldr	r3, [pc, #72]	; (800b93c <HAL_RCC_ClockConfig+0x1bc>)
 800b8f4:	689b      	ldr	r3, [r3, #8]
 800b8f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	691b      	ldr	r3, [r3, #16]
 800b8fe:	00db      	lsls	r3, r3, #3
 800b900:	490e      	ldr	r1, [pc, #56]	; (800b93c <HAL_RCC_ClockConfig+0x1bc>)
 800b902:	4313      	orrs	r3, r2
 800b904:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b906:	f000 fb6b 	bl	800bfe0 <HAL_RCC_GetSysClockFreq>
 800b90a:	4602      	mov	r2, r0
 800b90c:	4b0b      	ldr	r3, [pc, #44]	; (800b93c <HAL_RCC_ClockConfig+0x1bc>)
 800b90e:	689b      	ldr	r3, [r3, #8]
 800b910:	091b      	lsrs	r3, r3, #4
 800b912:	f003 030f 	and.w	r3, r3, #15
 800b916:	490a      	ldr	r1, [pc, #40]	; (800b940 <HAL_RCC_ClockConfig+0x1c0>)
 800b918:	5ccb      	ldrb	r3, [r1, r3]
 800b91a:	fa22 f303 	lsr.w	r3, r2, r3
 800b91e:	4a09      	ldr	r2, [pc, #36]	; (800b944 <HAL_RCC_ClockConfig+0x1c4>)
 800b920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b922:	4b09      	ldr	r3, [pc, #36]	; (800b948 <HAL_RCC_ClockConfig+0x1c8>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	4618      	mov	r0, r3
 800b928:	f7fb f9fc 	bl	8006d24 <HAL_InitTick>

  return HAL_OK;
 800b92c:	2300      	movs	r3, #0
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3710      	adds	r7, #16
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}
 800b936:	bf00      	nop
 800b938:	40023c00 	.word	0x40023c00
 800b93c:	40023800 	.word	0x40023800
 800b940:	080193e0 	.word	0x080193e0
 800b944:	20000000 	.word	0x20000000
 800b948:	20000004 	.word	0x20000004

0800b94c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b94c:	b480      	push	{r7}
 800b94e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b950:	4b03      	ldr	r3, [pc, #12]	; (800b960 <HAL_RCC_GetHCLKFreq+0x14>)
 800b952:	681b      	ldr	r3, [r3, #0]
}
 800b954:	4618      	mov	r0, r3
 800b956:	46bd      	mov	sp, r7
 800b958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95c:	4770      	bx	lr
 800b95e:	bf00      	nop
 800b960:	20000000 	.word	0x20000000

0800b964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b968:	f7ff fff0 	bl	800b94c <HAL_RCC_GetHCLKFreq>
 800b96c:	4602      	mov	r2, r0
 800b96e:	4b05      	ldr	r3, [pc, #20]	; (800b984 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b970:	689b      	ldr	r3, [r3, #8]
 800b972:	0a9b      	lsrs	r3, r3, #10
 800b974:	f003 0307 	and.w	r3, r3, #7
 800b978:	4903      	ldr	r1, [pc, #12]	; (800b988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b97a:	5ccb      	ldrb	r3, [r1, r3]
 800b97c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b980:	4618      	mov	r0, r3
 800b982:	bd80      	pop	{r7, pc}
 800b984:	40023800 	.word	0x40023800
 800b988:	080193f0 	.word	0x080193f0

0800b98c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b08c      	sub	sp, #48	; 0x30
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b994:	2300      	movs	r3, #0
 800b996:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800b998:	2300      	movs	r3, #0
 800b99a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800b99c:	2300      	movs	r3, #0
 800b99e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f003 0301 	and.w	r3, r3, #1
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d010      	beq.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800b9c4:	4b6f      	ldr	r3, [pc, #444]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b9c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b9ca:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9d2:	496c      	ldr	r1, [pc, #432]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d101      	bne.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f003 0302 	and.w	r3, r3, #2
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d010      	beq.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800b9f2:	4b64      	ldr	r3, [pc, #400]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b9f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b9f8:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba00:	4960      	ldr	r1, [pc, #384]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ba02:	4313      	orrs	r3, r2
 800ba04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d101      	bne.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800ba10:	2301      	movs	r3, #1
 800ba12:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	f003 0304 	and.w	r3, r3, #4
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d017      	beq.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ba20:	4b58      	ldr	r3, [pc, #352]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ba22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba26:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba2e:	4955      	ldr	r1, [pc, #340]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ba30:	4313      	orrs	r3, r2
 800ba32:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba3e:	d101      	bne.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800ba40:	2301      	movs	r3, #1
 800ba42:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d101      	bne.n	800ba50 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f003 0308 	and.w	r3, r3, #8
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d017      	beq.n	800ba8c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ba5c:	4b49      	ldr	r3, [pc, #292]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ba5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba6a:	4946      	ldr	r1, [pc, #280]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ba6c:	4313      	orrs	r3, r2
 800ba6e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba7a:	d101      	bne.n	800ba80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d101      	bne.n	800ba8c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800ba88:	2301      	movs	r3, #1
 800ba8a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f003 0320 	and.w	r3, r3, #32
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	f000 808a 	beq.w	800bbae <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	60bb      	str	r3, [r7, #8]
 800ba9e:	4b39      	ldr	r3, [pc, #228]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800baa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baa2:	4a38      	ldr	r2, [pc, #224]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800baa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800baa8:	6413      	str	r3, [r2, #64]	; 0x40
 800baaa:	4b36      	ldr	r3, [pc, #216]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800baac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bab2:	60bb      	str	r3, [r7, #8]
 800bab4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800bab6:	4b34      	ldr	r3, [pc, #208]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	4a33      	ldr	r2, [pc, #204]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800babc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bac0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800bac2:	f7fb f973 	bl	8006dac <HAL_GetTick>
 800bac6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800bac8:	e008      	b.n	800badc <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800baca:	f7fb f96f 	bl	8006dac <HAL_GetTick>
 800bace:	4602      	mov	r2, r0
 800bad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad2:	1ad3      	subs	r3, r2, r3
 800bad4:	2b02      	cmp	r3, #2
 800bad6:	d901      	bls.n	800badc <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800bad8:	2303      	movs	r3, #3
 800bada:	e278      	b.n	800bfce <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800badc:	4b2a      	ldr	r3, [pc, #168]	; (800bb88 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d0f0      	beq.n	800baca <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800bae8:	4b26      	ldr	r3, [pc, #152]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800baea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800baf0:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800baf2:	6a3b      	ldr	r3, [r7, #32]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d02f      	beq.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bafc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb00:	6a3a      	ldr	r2, [r7, #32]
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d028      	beq.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bb06:	4b1f      	ldr	r3, [pc, #124]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800bb08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb0e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800bb10:	4b1e      	ldr	r3, [pc, #120]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800bb12:	2201      	movs	r2, #1
 800bb14:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800bb16:	4b1d      	ldr	r3, [pc, #116]	; (800bb8c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800bb18:	2200      	movs	r2, #0
 800bb1a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800bb1c:	4a19      	ldr	r2, [pc, #100]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800bb1e:	6a3b      	ldr	r3, [r7, #32]
 800bb20:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800bb22:	4b18      	ldr	r3, [pc, #96]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800bb24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb26:	f003 0301 	and.w	r3, r3, #1
 800bb2a:	2b01      	cmp	r3, #1
 800bb2c:	d114      	bne.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800bb2e:	f7fb f93d 	bl	8006dac <HAL_GetTick>
 800bb32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bb34:	e00a      	b.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bb36:	f7fb f939 	bl	8006dac <HAL_GetTick>
 800bb3a:	4602      	mov	r2, r0
 800bb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb3e:	1ad3      	subs	r3, r2, r3
 800bb40:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d901      	bls.n	800bb4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800bb48:	2303      	movs	r3, #3
 800bb4a:	e240      	b.n	800bfce <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bb4c:	4b0d      	ldr	r3, [pc, #52]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800bb4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb50:	f003 0302 	and.w	r3, r3, #2
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d0ee      	beq.n	800bb36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb64:	d114      	bne.n	800bb90 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800bb66:	4b07      	ldr	r3, [pc, #28]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800bb68:	689b      	ldr	r3, [r3, #8]
 800bb6a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb72:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bb76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb7a:	4902      	ldr	r1, [pc, #8]	; (800bb84 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800bb7c:	4313      	orrs	r3, r2
 800bb7e:	608b      	str	r3, [r1, #8]
 800bb80:	e00c      	b.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0x210>
 800bb82:	bf00      	nop
 800bb84:	40023800 	.word	0x40023800
 800bb88:	40007000 	.word	0x40007000
 800bb8c:	42470e40 	.word	0x42470e40
 800bb90:	4b4a      	ldr	r3, [pc, #296]	; (800bcbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bb92:	689b      	ldr	r3, [r3, #8]
 800bb94:	4a49      	ldr	r2, [pc, #292]	; (800bcbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bb96:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800bb9a:	6093      	str	r3, [r2, #8]
 800bb9c:	4b47      	ldr	r3, [pc, #284]	; (800bcbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bb9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bba8:	4944      	ldr	r1, [pc, #272]	; (800bcbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bbaa:	4313      	orrs	r3, r2
 800bbac:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f003 0310 	and.w	r3, r3, #16
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d004      	beq.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800bbc0:	4b3f      	ldr	r3, [pc, #252]	; (800bcc0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800bbc2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d00a      	beq.n	800bbe6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800bbd0:	4b3a      	ldr	r3, [pc, #232]	; (800bcbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bbd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bbd6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbde:	4937      	ldr	r1, [pc, #220]	; (800bcbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d00a      	beq.n	800bc08 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bbf2:	4b32      	ldr	r3, [pc, #200]	; (800bcbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bbf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bbf8:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc00:	492e      	ldr	r1, [pc, #184]	; (800bcbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bc02:	4313      	orrs	r3, r2
 800bc04:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d011      	beq.n	800bc38 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800bc14:	4b29      	ldr	r3, [pc, #164]	; (800bcbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bc16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bc1a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc22:	4926      	ldr	r1, [pc, #152]	; (800bcbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bc24:	4313      	orrs	r3, r2
 800bc26:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc32:	d101      	bne.n	800bc38 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800bc34:	2301      	movs	r3, #1
 800bc36:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d00a      	beq.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800bc44:	4b1d      	ldr	r3, [pc, #116]	; (800bcbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bc46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bc4a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc52:	491a      	ldr	r1, [pc, #104]	; (800bcbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bc54:	4313      	orrs	r3, r2
 800bc56:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d011      	beq.n	800bc8a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800bc66:	4b15      	ldr	r3, [pc, #84]	; (800bcbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bc68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bc6c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc74:	4911      	ldr	r1, [pc, #68]	; (800bcbc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bc76:	4313      	orrs	r3, r2
 800bc78:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc84:	d101      	bne.n	800bc8a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800bc86:	2301      	movs	r3, #1
 800bc88:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800bc8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc8c:	2b01      	cmp	r3, #1
 800bc8e:	d005      	beq.n	800bc9c <HAL_RCCEx_PeriphCLKConfig+0x310>
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc98:	f040 80ff 	bne.w	800be9a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800bc9c:	4b09      	ldr	r3, [pc, #36]	; (800bcc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bc9e:	2200      	movs	r2, #0
 800bca0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bca2:	f7fb f883 	bl	8006dac <HAL_GetTick>
 800bca6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bca8:	e00e      	b.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800bcaa:	f7fb f87f 	bl	8006dac <HAL_GetTick>
 800bcae:	4602      	mov	r2, r0
 800bcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb2:	1ad3      	subs	r3, r2, r3
 800bcb4:	2b02      	cmp	r3, #2
 800bcb6:	d907      	bls.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bcb8:	2303      	movs	r3, #3
 800bcba:	e188      	b.n	800bfce <HAL_RCCEx_PeriphCLKConfig+0x642>
 800bcbc:	40023800 	.word	0x40023800
 800bcc0:	424711e0 	.word	0x424711e0
 800bcc4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bcc8:	4b7e      	ldr	r3, [pc, #504]	; (800bec4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d1ea      	bne.n	800bcaa <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f003 0301 	and.w	r3, r3, #1
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d003      	beq.n	800bce8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d009      	beq.n	800bcfc <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d028      	beq.n	800bd46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d124      	bne.n	800bd46 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800bcfc:	4b71      	ldr	r3, [pc, #452]	; (800bec4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bcfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd02:	0c1b      	lsrs	r3, r3, #16
 800bd04:	f003 0303 	and.w	r3, r3, #3
 800bd08:	3301      	adds	r3, #1
 800bd0a:	005b      	lsls	r3, r3, #1
 800bd0c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800bd0e:	4b6d      	ldr	r3, [pc, #436]	; (800bec4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bd10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd14:	0e1b      	lsrs	r3, r3, #24
 800bd16:	f003 030f 	and.w	r3, r3, #15
 800bd1a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	685a      	ldr	r2, [r3, #4]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	689b      	ldr	r3, [r3, #8]
 800bd24:	019b      	lsls	r3, r3, #6
 800bd26:	431a      	orrs	r2, r3
 800bd28:	69fb      	ldr	r3, [r7, #28]
 800bd2a:	085b      	lsrs	r3, r3, #1
 800bd2c:	3b01      	subs	r3, #1
 800bd2e:	041b      	lsls	r3, r3, #16
 800bd30:	431a      	orrs	r2, r3
 800bd32:	69bb      	ldr	r3, [r7, #24]
 800bd34:	061b      	lsls	r3, r3, #24
 800bd36:	431a      	orrs	r2, r3
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	695b      	ldr	r3, [r3, #20]
 800bd3c:	071b      	lsls	r3, r3, #28
 800bd3e:	4961      	ldr	r1, [pc, #388]	; (800bec4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bd40:	4313      	orrs	r3, r2
 800bd42:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f003 0304 	and.w	r3, r3, #4
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d004      	beq.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd5a:	d00a      	beq.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d035      	beq.n	800bdd4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd70:	d130      	bne.n	800bdd4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800bd72:	4b54      	ldr	r3, [pc, #336]	; (800bec4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bd74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd78:	0c1b      	lsrs	r3, r3, #16
 800bd7a:	f003 0303 	and.w	r3, r3, #3
 800bd7e:	3301      	adds	r3, #1
 800bd80:	005b      	lsls	r3, r3, #1
 800bd82:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bd84:	4b4f      	ldr	r3, [pc, #316]	; (800bec4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bd86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd8a:	0f1b      	lsrs	r3, r3, #28
 800bd8c:	f003 0307 	and.w	r3, r3, #7
 800bd90:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	685a      	ldr	r2, [r3, #4]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	689b      	ldr	r3, [r3, #8]
 800bd9a:	019b      	lsls	r3, r3, #6
 800bd9c:	431a      	orrs	r2, r3
 800bd9e:	69fb      	ldr	r3, [r7, #28]
 800bda0:	085b      	lsrs	r3, r3, #1
 800bda2:	3b01      	subs	r3, #1
 800bda4:	041b      	lsls	r3, r3, #16
 800bda6:	431a      	orrs	r2, r3
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	691b      	ldr	r3, [r3, #16]
 800bdac:	061b      	lsls	r3, r3, #24
 800bdae:	431a      	orrs	r2, r3
 800bdb0:	697b      	ldr	r3, [r7, #20]
 800bdb2:	071b      	lsls	r3, r3, #28
 800bdb4:	4943      	ldr	r1, [pc, #268]	; (800bec4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bdb6:	4313      	orrs	r3, r2
 800bdb8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800bdbc:	4b41      	ldr	r3, [pc, #260]	; (800bec4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bdbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bdc2:	f023 021f 	bic.w	r2, r3, #31
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdca:	3b01      	subs	r3, #1
 800bdcc:	493d      	ldr	r1, [pc, #244]	; (800bec4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bdce:	4313      	orrs	r3, r2
 800bdd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d029      	beq.n	800be34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bde4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bde8:	d124      	bne.n	800be34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800bdea:	4b36      	ldr	r3, [pc, #216]	; (800bec4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bdec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdf0:	0c1b      	lsrs	r3, r3, #16
 800bdf2:	f003 0303 	and.w	r3, r3, #3
 800bdf6:	3301      	adds	r3, #1
 800bdf8:	005b      	lsls	r3, r3, #1
 800bdfa:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bdfc:	4b31      	ldr	r3, [pc, #196]	; (800bec4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bdfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800be02:	0f1b      	lsrs	r3, r3, #28
 800be04:	f003 0307 	and.w	r3, r3, #7
 800be08:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	685a      	ldr	r2, [r3, #4]
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	689b      	ldr	r3, [r3, #8]
 800be12:	019b      	lsls	r3, r3, #6
 800be14:	431a      	orrs	r2, r3
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	68db      	ldr	r3, [r3, #12]
 800be1a:	085b      	lsrs	r3, r3, #1
 800be1c:	3b01      	subs	r3, #1
 800be1e:	041b      	lsls	r3, r3, #16
 800be20:	431a      	orrs	r2, r3
 800be22:	69bb      	ldr	r3, [r7, #24]
 800be24:	061b      	lsls	r3, r3, #24
 800be26:	431a      	orrs	r2, r3
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	071b      	lsls	r3, r3, #28
 800be2c:	4925      	ldr	r1, [pc, #148]	; (800bec4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800be2e:	4313      	orrs	r3, r2
 800be30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d016      	beq.n	800be6e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	685a      	ldr	r2, [r3, #4]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	689b      	ldr	r3, [r3, #8]
 800be48:	019b      	lsls	r3, r3, #6
 800be4a:	431a      	orrs	r2, r3
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	68db      	ldr	r3, [r3, #12]
 800be50:	085b      	lsrs	r3, r3, #1
 800be52:	3b01      	subs	r3, #1
 800be54:	041b      	lsls	r3, r3, #16
 800be56:	431a      	orrs	r2, r3
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	691b      	ldr	r3, [r3, #16]
 800be5c:	061b      	lsls	r3, r3, #24
 800be5e:	431a      	orrs	r2, r3
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	695b      	ldr	r3, [r3, #20]
 800be64:	071b      	lsls	r3, r3, #28
 800be66:	4917      	ldr	r1, [pc, #92]	; (800bec4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800be68:	4313      	orrs	r3, r2
 800be6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800be6e:	4b16      	ldr	r3, [pc, #88]	; (800bec8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800be70:	2201      	movs	r2, #1
 800be72:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800be74:	f7fa ff9a 	bl	8006dac <HAL_GetTick>
 800be78:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800be7a:	e008      	b.n	800be8e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800be7c:	f7fa ff96 	bl	8006dac <HAL_GetTick>
 800be80:	4602      	mov	r2, r0
 800be82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be84:	1ad3      	subs	r3, r2, r3
 800be86:	2b02      	cmp	r3, #2
 800be88:	d901      	bls.n	800be8e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800be8a:	2303      	movs	r3, #3
 800be8c:	e09f      	b.n	800bfce <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800be8e:	4b0d      	ldr	r3, [pc, #52]	; (800bec4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be96:	2b00      	cmp	r3, #0
 800be98:	d0f0      	beq.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800be9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	f040 8095 	bne.w	800bfcc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800bea2:	4b0a      	ldr	r3, [pc, #40]	; (800becc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800bea4:	2200      	movs	r2, #0
 800bea6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bea8:	f7fa ff80 	bl	8006dac <HAL_GetTick>
 800beac:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800beae:	e00f      	b.n	800bed0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800beb0:	f7fa ff7c 	bl	8006dac <HAL_GetTick>
 800beb4:	4602      	mov	r2, r0
 800beb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb8:	1ad3      	subs	r3, r2, r3
 800beba:	2b02      	cmp	r3, #2
 800bebc:	d908      	bls.n	800bed0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bebe:	2303      	movs	r3, #3
 800bec0:	e085      	b.n	800bfce <HAL_RCCEx_PeriphCLKConfig+0x642>
 800bec2:	bf00      	nop
 800bec4:	40023800 	.word	0x40023800
 800bec8:	42470068 	.word	0x42470068
 800becc:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bed0:	4b41      	ldr	r3, [pc, #260]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bed8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bedc:	d0e8      	beq.n	800beb0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	f003 0304 	and.w	r3, r3, #4
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d003      	beq.n	800bef2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d009      	beq.n	800bf06 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800befa:	2b00      	cmp	r3, #0
 800befc:	d02b      	beq.n	800bf56 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d127      	bne.n	800bf56 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800bf06:	4b34      	ldr	r3, [pc, #208]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bf08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf0c:	0c1b      	lsrs	r3, r3, #16
 800bf0e:	f003 0303 	and.w	r3, r3, #3
 800bf12:	3301      	adds	r3, #1
 800bf14:	005b      	lsls	r3, r3, #1
 800bf16:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	699a      	ldr	r2, [r3, #24]
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	69db      	ldr	r3, [r3, #28]
 800bf20:	019b      	lsls	r3, r3, #6
 800bf22:	431a      	orrs	r2, r3
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	085b      	lsrs	r3, r3, #1
 800bf28:	3b01      	subs	r3, #1
 800bf2a:	041b      	lsls	r3, r3, #16
 800bf2c:	431a      	orrs	r2, r3
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf32:	061b      	lsls	r3, r3, #24
 800bf34:	4928      	ldr	r1, [pc, #160]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bf36:	4313      	orrs	r3, r2
 800bf38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800bf3c:	4b26      	ldr	r3, [pc, #152]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bf3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf42:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf4a:	3b01      	subs	r3, #1
 800bf4c:	021b      	lsls	r3, r3, #8
 800bf4e:	4922      	ldr	r1, [pc, #136]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bf50:	4313      	orrs	r3, r2
 800bf52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d01d      	beq.n	800bf9e <HAL_RCCEx_PeriphCLKConfig+0x612>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf6a:	d118      	bne.n	800bf9e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bf6c:	4b1a      	ldr	r3, [pc, #104]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bf6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf72:	0e1b      	lsrs	r3, r3, #24
 800bf74:	f003 030f 	and.w	r3, r3, #15
 800bf78:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	699a      	ldr	r2, [r3, #24]
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	69db      	ldr	r3, [r3, #28]
 800bf82:	019b      	lsls	r3, r3, #6
 800bf84:	431a      	orrs	r2, r3
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6a1b      	ldr	r3, [r3, #32]
 800bf8a:	085b      	lsrs	r3, r3, #1
 800bf8c:	3b01      	subs	r3, #1
 800bf8e:	041b      	lsls	r3, r3, #16
 800bf90:	431a      	orrs	r2, r3
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	061b      	lsls	r3, r3, #24
 800bf96:	4910      	ldr	r1, [pc, #64]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bf98:	4313      	orrs	r3, r2
 800bf9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800bf9e:	4b0f      	ldr	r3, [pc, #60]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bfa4:	f7fa ff02 	bl	8006dac <HAL_GetTick>
 800bfa8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bfaa:	e008      	b.n	800bfbe <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800bfac:	f7fa fefe 	bl	8006dac <HAL_GetTick>
 800bfb0:	4602      	mov	r2, r0
 800bfb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb4:	1ad3      	subs	r3, r2, r3
 800bfb6:	2b02      	cmp	r3, #2
 800bfb8:	d901      	bls.n	800bfbe <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bfba:	2303      	movs	r3, #3
 800bfbc:	e007      	b.n	800bfce <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bfbe:	4b06      	ldr	r3, [pc, #24]	; (800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bfc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfca:	d1ef      	bne.n	800bfac <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800bfcc:	2300      	movs	r3, #0
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3730      	adds	r7, #48	; 0x30
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}
 800bfd6:	bf00      	nop
 800bfd8:	40023800 	.word	0x40023800
 800bfdc:	42470070 	.word	0x42470070

0800bfe0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bfe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bfe4:	b0ae      	sub	sp, #184	; 0xb8
 800bfe6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800bfee:	2300      	movs	r3, #0
 800bff0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800bff4:	2300      	movs	r3, #0
 800bff6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800bffa:	2300      	movs	r3, #0
 800bffc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800c000:	2300      	movs	r3, #0
 800c002:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c006:	4bcb      	ldr	r3, [pc, #812]	; (800c334 <HAL_RCC_GetSysClockFreq+0x354>)
 800c008:	689b      	ldr	r3, [r3, #8]
 800c00a:	f003 030c 	and.w	r3, r3, #12
 800c00e:	2b0c      	cmp	r3, #12
 800c010:	f200 8206 	bhi.w	800c420 <HAL_RCC_GetSysClockFreq+0x440>
 800c014:	a201      	add	r2, pc, #4	; (adr r2, 800c01c <HAL_RCC_GetSysClockFreq+0x3c>)
 800c016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c01a:	bf00      	nop
 800c01c:	0800c051 	.word	0x0800c051
 800c020:	0800c421 	.word	0x0800c421
 800c024:	0800c421 	.word	0x0800c421
 800c028:	0800c421 	.word	0x0800c421
 800c02c:	0800c059 	.word	0x0800c059
 800c030:	0800c421 	.word	0x0800c421
 800c034:	0800c421 	.word	0x0800c421
 800c038:	0800c421 	.word	0x0800c421
 800c03c:	0800c061 	.word	0x0800c061
 800c040:	0800c421 	.word	0x0800c421
 800c044:	0800c421 	.word	0x0800c421
 800c048:	0800c421 	.word	0x0800c421
 800c04c:	0800c251 	.word	0x0800c251
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c050:	4bb9      	ldr	r3, [pc, #740]	; (800c338 <HAL_RCC_GetSysClockFreq+0x358>)
 800c052:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800c056:	e1e7      	b.n	800c428 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c058:	4bb8      	ldr	r3, [pc, #736]	; (800c33c <HAL_RCC_GetSysClockFreq+0x35c>)
 800c05a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800c05e:	e1e3      	b.n	800c428 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c060:	4bb4      	ldr	r3, [pc, #720]	; (800c334 <HAL_RCC_GetSysClockFreq+0x354>)
 800c062:	685b      	ldr	r3, [r3, #4]
 800c064:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c068:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c06c:	4bb1      	ldr	r3, [pc, #708]	; (800c334 <HAL_RCC_GetSysClockFreq+0x354>)
 800c06e:	685b      	ldr	r3, [r3, #4]
 800c070:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c074:	2b00      	cmp	r3, #0
 800c076:	d071      	beq.n	800c15c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c078:	4bae      	ldr	r3, [pc, #696]	; (800c334 <HAL_RCC_GetSysClockFreq+0x354>)
 800c07a:	685b      	ldr	r3, [r3, #4]
 800c07c:	099b      	lsrs	r3, r3, #6
 800c07e:	2200      	movs	r2, #0
 800c080:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c084:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800c088:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c08c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c090:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c094:	2300      	movs	r3, #0
 800c096:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c09a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c09e:	4622      	mov	r2, r4
 800c0a0:	462b      	mov	r3, r5
 800c0a2:	f04f 0000 	mov.w	r0, #0
 800c0a6:	f04f 0100 	mov.w	r1, #0
 800c0aa:	0159      	lsls	r1, r3, #5
 800c0ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c0b0:	0150      	lsls	r0, r2, #5
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	460b      	mov	r3, r1
 800c0b6:	4621      	mov	r1, r4
 800c0b8:	1a51      	subs	r1, r2, r1
 800c0ba:	6439      	str	r1, [r7, #64]	; 0x40
 800c0bc:	4629      	mov	r1, r5
 800c0be:	eb63 0301 	sbc.w	r3, r3, r1
 800c0c2:	647b      	str	r3, [r7, #68]	; 0x44
 800c0c4:	f04f 0200 	mov.w	r2, #0
 800c0c8:	f04f 0300 	mov.w	r3, #0
 800c0cc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800c0d0:	4649      	mov	r1, r9
 800c0d2:	018b      	lsls	r3, r1, #6
 800c0d4:	4641      	mov	r1, r8
 800c0d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c0da:	4641      	mov	r1, r8
 800c0dc:	018a      	lsls	r2, r1, #6
 800c0de:	4641      	mov	r1, r8
 800c0e0:	1a51      	subs	r1, r2, r1
 800c0e2:	63b9      	str	r1, [r7, #56]	; 0x38
 800c0e4:	4649      	mov	r1, r9
 800c0e6:	eb63 0301 	sbc.w	r3, r3, r1
 800c0ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0ec:	f04f 0200 	mov.w	r2, #0
 800c0f0:	f04f 0300 	mov.w	r3, #0
 800c0f4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800c0f8:	4649      	mov	r1, r9
 800c0fa:	00cb      	lsls	r3, r1, #3
 800c0fc:	4641      	mov	r1, r8
 800c0fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c102:	4641      	mov	r1, r8
 800c104:	00ca      	lsls	r2, r1, #3
 800c106:	4610      	mov	r0, r2
 800c108:	4619      	mov	r1, r3
 800c10a:	4603      	mov	r3, r0
 800c10c:	4622      	mov	r2, r4
 800c10e:	189b      	adds	r3, r3, r2
 800c110:	633b      	str	r3, [r7, #48]	; 0x30
 800c112:	462b      	mov	r3, r5
 800c114:	460a      	mov	r2, r1
 800c116:	eb42 0303 	adc.w	r3, r2, r3
 800c11a:	637b      	str	r3, [r7, #52]	; 0x34
 800c11c:	f04f 0200 	mov.w	r2, #0
 800c120:	f04f 0300 	mov.w	r3, #0
 800c124:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800c128:	4629      	mov	r1, r5
 800c12a:	024b      	lsls	r3, r1, #9
 800c12c:	4621      	mov	r1, r4
 800c12e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c132:	4621      	mov	r1, r4
 800c134:	024a      	lsls	r2, r1, #9
 800c136:	4610      	mov	r0, r2
 800c138:	4619      	mov	r1, r3
 800c13a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c13e:	2200      	movs	r2, #0
 800c140:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c144:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c148:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800c14c:	f7f4 f8b0 	bl	80002b0 <__aeabi_uldivmod>
 800c150:	4602      	mov	r2, r0
 800c152:	460b      	mov	r3, r1
 800c154:	4613      	mov	r3, r2
 800c156:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c15a:	e067      	b.n	800c22c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c15c:	4b75      	ldr	r3, [pc, #468]	; (800c334 <HAL_RCC_GetSysClockFreq+0x354>)
 800c15e:	685b      	ldr	r3, [r3, #4]
 800c160:	099b      	lsrs	r3, r3, #6
 800c162:	2200      	movs	r2, #0
 800c164:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c168:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800c16c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c174:	67bb      	str	r3, [r7, #120]	; 0x78
 800c176:	2300      	movs	r3, #0
 800c178:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c17a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800c17e:	4622      	mov	r2, r4
 800c180:	462b      	mov	r3, r5
 800c182:	f04f 0000 	mov.w	r0, #0
 800c186:	f04f 0100 	mov.w	r1, #0
 800c18a:	0159      	lsls	r1, r3, #5
 800c18c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c190:	0150      	lsls	r0, r2, #5
 800c192:	4602      	mov	r2, r0
 800c194:	460b      	mov	r3, r1
 800c196:	4621      	mov	r1, r4
 800c198:	1a51      	subs	r1, r2, r1
 800c19a:	62b9      	str	r1, [r7, #40]	; 0x28
 800c19c:	4629      	mov	r1, r5
 800c19e:	eb63 0301 	sbc.w	r3, r3, r1
 800c1a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c1a4:	f04f 0200 	mov.w	r2, #0
 800c1a8:	f04f 0300 	mov.w	r3, #0
 800c1ac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800c1b0:	4649      	mov	r1, r9
 800c1b2:	018b      	lsls	r3, r1, #6
 800c1b4:	4641      	mov	r1, r8
 800c1b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c1ba:	4641      	mov	r1, r8
 800c1bc:	018a      	lsls	r2, r1, #6
 800c1be:	4641      	mov	r1, r8
 800c1c0:	ebb2 0a01 	subs.w	sl, r2, r1
 800c1c4:	4649      	mov	r1, r9
 800c1c6:	eb63 0b01 	sbc.w	fp, r3, r1
 800c1ca:	f04f 0200 	mov.w	r2, #0
 800c1ce:	f04f 0300 	mov.w	r3, #0
 800c1d2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c1d6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c1da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c1de:	4692      	mov	sl, r2
 800c1e0:	469b      	mov	fp, r3
 800c1e2:	4623      	mov	r3, r4
 800c1e4:	eb1a 0303 	adds.w	r3, sl, r3
 800c1e8:	623b      	str	r3, [r7, #32]
 800c1ea:	462b      	mov	r3, r5
 800c1ec:	eb4b 0303 	adc.w	r3, fp, r3
 800c1f0:	627b      	str	r3, [r7, #36]	; 0x24
 800c1f2:	f04f 0200 	mov.w	r2, #0
 800c1f6:	f04f 0300 	mov.w	r3, #0
 800c1fa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800c1fe:	4629      	mov	r1, r5
 800c200:	028b      	lsls	r3, r1, #10
 800c202:	4621      	mov	r1, r4
 800c204:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c208:	4621      	mov	r1, r4
 800c20a:	028a      	lsls	r2, r1, #10
 800c20c:	4610      	mov	r0, r2
 800c20e:	4619      	mov	r1, r3
 800c210:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c214:	2200      	movs	r2, #0
 800c216:	673b      	str	r3, [r7, #112]	; 0x70
 800c218:	677a      	str	r2, [r7, #116]	; 0x74
 800c21a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800c21e:	f7f4 f847 	bl	80002b0 <__aeabi_uldivmod>
 800c222:	4602      	mov	r2, r0
 800c224:	460b      	mov	r3, r1
 800c226:	4613      	mov	r3, r2
 800c228:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c22c:	4b41      	ldr	r3, [pc, #260]	; (800c334 <HAL_RCC_GetSysClockFreq+0x354>)
 800c22e:	685b      	ldr	r3, [r3, #4]
 800c230:	0c1b      	lsrs	r3, r3, #16
 800c232:	f003 0303 	and.w	r3, r3, #3
 800c236:	3301      	adds	r3, #1
 800c238:	005b      	lsls	r3, r3, #1
 800c23a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800c23e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c242:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c246:	fbb2 f3f3 	udiv	r3, r2, r3
 800c24a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800c24e:	e0eb      	b.n	800c428 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c250:	4b38      	ldr	r3, [pc, #224]	; (800c334 <HAL_RCC_GetSysClockFreq+0x354>)
 800c252:	685b      	ldr	r3, [r3, #4]
 800c254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c258:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c25c:	4b35      	ldr	r3, [pc, #212]	; (800c334 <HAL_RCC_GetSysClockFreq+0x354>)
 800c25e:	685b      	ldr	r3, [r3, #4]
 800c260:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c264:	2b00      	cmp	r3, #0
 800c266:	d06b      	beq.n	800c340 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c268:	4b32      	ldr	r3, [pc, #200]	; (800c334 <HAL_RCC_GetSysClockFreq+0x354>)
 800c26a:	685b      	ldr	r3, [r3, #4]
 800c26c:	099b      	lsrs	r3, r3, #6
 800c26e:	2200      	movs	r2, #0
 800c270:	66bb      	str	r3, [r7, #104]	; 0x68
 800c272:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c274:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c27a:	663b      	str	r3, [r7, #96]	; 0x60
 800c27c:	2300      	movs	r3, #0
 800c27e:	667b      	str	r3, [r7, #100]	; 0x64
 800c280:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800c284:	4622      	mov	r2, r4
 800c286:	462b      	mov	r3, r5
 800c288:	f04f 0000 	mov.w	r0, #0
 800c28c:	f04f 0100 	mov.w	r1, #0
 800c290:	0159      	lsls	r1, r3, #5
 800c292:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c296:	0150      	lsls	r0, r2, #5
 800c298:	4602      	mov	r2, r0
 800c29a:	460b      	mov	r3, r1
 800c29c:	4621      	mov	r1, r4
 800c29e:	1a51      	subs	r1, r2, r1
 800c2a0:	61b9      	str	r1, [r7, #24]
 800c2a2:	4629      	mov	r1, r5
 800c2a4:	eb63 0301 	sbc.w	r3, r3, r1
 800c2a8:	61fb      	str	r3, [r7, #28]
 800c2aa:	f04f 0200 	mov.w	r2, #0
 800c2ae:	f04f 0300 	mov.w	r3, #0
 800c2b2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800c2b6:	4659      	mov	r1, fp
 800c2b8:	018b      	lsls	r3, r1, #6
 800c2ba:	4651      	mov	r1, sl
 800c2bc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c2c0:	4651      	mov	r1, sl
 800c2c2:	018a      	lsls	r2, r1, #6
 800c2c4:	4651      	mov	r1, sl
 800c2c6:	ebb2 0801 	subs.w	r8, r2, r1
 800c2ca:	4659      	mov	r1, fp
 800c2cc:	eb63 0901 	sbc.w	r9, r3, r1
 800c2d0:	f04f 0200 	mov.w	r2, #0
 800c2d4:	f04f 0300 	mov.w	r3, #0
 800c2d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c2dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c2e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c2e4:	4690      	mov	r8, r2
 800c2e6:	4699      	mov	r9, r3
 800c2e8:	4623      	mov	r3, r4
 800c2ea:	eb18 0303 	adds.w	r3, r8, r3
 800c2ee:	613b      	str	r3, [r7, #16]
 800c2f0:	462b      	mov	r3, r5
 800c2f2:	eb49 0303 	adc.w	r3, r9, r3
 800c2f6:	617b      	str	r3, [r7, #20]
 800c2f8:	f04f 0200 	mov.w	r2, #0
 800c2fc:	f04f 0300 	mov.w	r3, #0
 800c300:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800c304:	4629      	mov	r1, r5
 800c306:	024b      	lsls	r3, r1, #9
 800c308:	4621      	mov	r1, r4
 800c30a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c30e:	4621      	mov	r1, r4
 800c310:	024a      	lsls	r2, r1, #9
 800c312:	4610      	mov	r0, r2
 800c314:	4619      	mov	r1, r3
 800c316:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c31a:	2200      	movs	r2, #0
 800c31c:	65bb      	str	r3, [r7, #88]	; 0x58
 800c31e:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c320:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c324:	f7f3 ffc4 	bl	80002b0 <__aeabi_uldivmod>
 800c328:	4602      	mov	r2, r0
 800c32a:	460b      	mov	r3, r1
 800c32c:	4613      	mov	r3, r2
 800c32e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c332:	e065      	b.n	800c400 <HAL_RCC_GetSysClockFreq+0x420>
 800c334:	40023800 	.word	0x40023800
 800c338:	00f42400 	.word	0x00f42400
 800c33c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c340:	4b3d      	ldr	r3, [pc, #244]	; (800c438 <HAL_RCC_GetSysClockFreq+0x458>)
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	099b      	lsrs	r3, r3, #6
 800c346:	2200      	movs	r2, #0
 800c348:	4618      	mov	r0, r3
 800c34a:	4611      	mov	r1, r2
 800c34c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800c350:	653b      	str	r3, [r7, #80]	; 0x50
 800c352:	2300      	movs	r3, #0
 800c354:	657b      	str	r3, [r7, #84]	; 0x54
 800c356:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800c35a:	4642      	mov	r2, r8
 800c35c:	464b      	mov	r3, r9
 800c35e:	f04f 0000 	mov.w	r0, #0
 800c362:	f04f 0100 	mov.w	r1, #0
 800c366:	0159      	lsls	r1, r3, #5
 800c368:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c36c:	0150      	lsls	r0, r2, #5
 800c36e:	4602      	mov	r2, r0
 800c370:	460b      	mov	r3, r1
 800c372:	4641      	mov	r1, r8
 800c374:	1a51      	subs	r1, r2, r1
 800c376:	60b9      	str	r1, [r7, #8]
 800c378:	4649      	mov	r1, r9
 800c37a:	eb63 0301 	sbc.w	r3, r3, r1
 800c37e:	60fb      	str	r3, [r7, #12]
 800c380:	f04f 0200 	mov.w	r2, #0
 800c384:	f04f 0300 	mov.w	r3, #0
 800c388:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800c38c:	4659      	mov	r1, fp
 800c38e:	018b      	lsls	r3, r1, #6
 800c390:	4651      	mov	r1, sl
 800c392:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c396:	4651      	mov	r1, sl
 800c398:	018a      	lsls	r2, r1, #6
 800c39a:	4651      	mov	r1, sl
 800c39c:	1a54      	subs	r4, r2, r1
 800c39e:	4659      	mov	r1, fp
 800c3a0:	eb63 0501 	sbc.w	r5, r3, r1
 800c3a4:	f04f 0200 	mov.w	r2, #0
 800c3a8:	f04f 0300 	mov.w	r3, #0
 800c3ac:	00eb      	lsls	r3, r5, #3
 800c3ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c3b2:	00e2      	lsls	r2, r4, #3
 800c3b4:	4614      	mov	r4, r2
 800c3b6:	461d      	mov	r5, r3
 800c3b8:	4643      	mov	r3, r8
 800c3ba:	18e3      	adds	r3, r4, r3
 800c3bc:	603b      	str	r3, [r7, #0]
 800c3be:	464b      	mov	r3, r9
 800c3c0:	eb45 0303 	adc.w	r3, r5, r3
 800c3c4:	607b      	str	r3, [r7, #4]
 800c3c6:	f04f 0200 	mov.w	r2, #0
 800c3ca:	f04f 0300 	mov.w	r3, #0
 800c3ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c3d2:	4629      	mov	r1, r5
 800c3d4:	028b      	lsls	r3, r1, #10
 800c3d6:	4621      	mov	r1, r4
 800c3d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c3dc:	4621      	mov	r1, r4
 800c3de:	028a      	lsls	r2, r1, #10
 800c3e0:	4610      	mov	r0, r2
 800c3e2:	4619      	mov	r1, r3
 800c3e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	64bb      	str	r3, [r7, #72]	; 0x48
 800c3ec:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c3ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c3f2:	f7f3 ff5d 	bl	80002b0 <__aeabi_uldivmod>
 800c3f6:	4602      	mov	r2, r0
 800c3f8:	460b      	mov	r3, r1
 800c3fa:	4613      	mov	r3, r2
 800c3fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800c400:	4b0d      	ldr	r3, [pc, #52]	; (800c438 <HAL_RCC_GetSysClockFreq+0x458>)
 800c402:	685b      	ldr	r3, [r3, #4]
 800c404:	0f1b      	lsrs	r3, r3, #28
 800c406:	f003 0307 	and.w	r3, r3, #7
 800c40a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800c40e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c412:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c416:	fbb2 f3f3 	udiv	r3, r2, r3
 800c41a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800c41e:	e003      	b.n	800c428 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c420:	4b06      	ldr	r3, [pc, #24]	; (800c43c <HAL_RCC_GetSysClockFreq+0x45c>)
 800c422:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800c426:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c428:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	37b8      	adds	r7, #184	; 0xb8
 800c430:	46bd      	mov	sp, r7
 800c432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c436:	bf00      	nop
 800c438:	40023800 	.word	0x40023800
 800c43c:	00f42400 	.word	0x00f42400

0800c440 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b086      	sub	sp, #24
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d101      	bne.n	800c452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c44e:	2301      	movs	r3, #1
 800c450:	e28d      	b.n	800c96e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	f003 0301 	and.w	r3, r3, #1
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	f000 8083 	beq.w	800c566 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c460:	4b94      	ldr	r3, [pc, #592]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c462:	689b      	ldr	r3, [r3, #8]
 800c464:	f003 030c 	and.w	r3, r3, #12
 800c468:	2b04      	cmp	r3, #4
 800c46a:	d019      	beq.n	800c4a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c46c:	4b91      	ldr	r3, [pc, #580]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c46e:	689b      	ldr	r3, [r3, #8]
 800c470:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c474:	2b08      	cmp	r3, #8
 800c476:	d106      	bne.n	800c486 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c478:	4b8e      	ldr	r3, [pc, #568]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c47a:	685b      	ldr	r3, [r3, #4]
 800c47c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c480:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c484:	d00c      	beq.n	800c4a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c486:	4b8b      	ldr	r3, [pc, #556]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c488:	689b      	ldr	r3, [r3, #8]
 800c48a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c48e:	2b0c      	cmp	r3, #12
 800c490:	d112      	bne.n	800c4b8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c492:	4b88      	ldr	r3, [pc, #544]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c494:	685b      	ldr	r3, [r3, #4]
 800c496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c49a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c49e:	d10b      	bne.n	800c4b8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c4a0:	4b84      	ldr	r3, [pc, #528]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d05b      	beq.n	800c564 <HAL_RCC_OscConfig+0x124>
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	685b      	ldr	r3, [r3, #4]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d157      	bne.n	800c564 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	e25a      	b.n	800c96e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	685b      	ldr	r3, [r3, #4]
 800c4bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4c0:	d106      	bne.n	800c4d0 <HAL_RCC_OscConfig+0x90>
 800c4c2:	4b7c      	ldr	r3, [pc, #496]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	4a7b      	ldr	r2, [pc, #492]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c4c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c4cc:	6013      	str	r3, [r2, #0]
 800c4ce:	e01d      	b.n	800c50c <HAL_RCC_OscConfig+0xcc>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	685b      	ldr	r3, [r3, #4]
 800c4d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c4d8:	d10c      	bne.n	800c4f4 <HAL_RCC_OscConfig+0xb4>
 800c4da:	4b76      	ldr	r3, [pc, #472]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	4a75      	ldr	r2, [pc, #468]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c4e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c4e4:	6013      	str	r3, [r2, #0]
 800c4e6:	4b73      	ldr	r3, [pc, #460]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	4a72      	ldr	r2, [pc, #456]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c4ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c4f0:	6013      	str	r3, [r2, #0]
 800c4f2:	e00b      	b.n	800c50c <HAL_RCC_OscConfig+0xcc>
 800c4f4:	4b6f      	ldr	r3, [pc, #444]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4a6e      	ldr	r2, [pc, #440]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c4fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c4fe:	6013      	str	r3, [r2, #0]
 800c500:	4b6c      	ldr	r3, [pc, #432]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4a6b      	ldr	r2, [pc, #428]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c50a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d013      	beq.n	800c53c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c514:	f7fa fc4a 	bl	8006dac <HAL_GetTick>
 800c518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c51a:	e008      	b.n	800c52e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c51c:	f7fa fc46 	bl	8006dac <HAL_GetTick>
 800c520:	4602      	mov	r2, r0
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	1ad3      	subs	r3, r2, r3
 800c526:	2b64      	cmp	r3, #100	; 0x64
 800c528:	d901      	bls.n	800c52e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800c52a:	2303      	movs	r3, #3
 800c52c:	e21f      	b.n	800c96e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c52e:	4b61      	ldr	r3, [pc, #388]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c536:	2b00      	cmp	r3, #0
 800c538:	d0f0      	beq.n	800c51c <HAL_RCC_OscConfig+0xdc>
 800c53a:	e014      	b.n	800c566 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c53c:	f7fa fc36 	bl	8006dac <HAL_GetTick>
 800c540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c542:	e008      	b.n	800c556 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c544:	f7fa fc32 	bl	8006dac <HAL_GetTick>
 800c548:	4602      	mov	r2, r0
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	1ad3      	subs	r3, r2, r3
 800c54e:	2b64      	cmp	r3, #100	; 0x64
 800c550:	d901      	bls.n	800c556 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800c552:	2303      	movs	r3, #3
 800c554:	e20b      	b.n	800c96e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c556:	4b57      	ldr	r3, [pc, #348]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d1f0      	bne.n	800c544 <HAL_RCC_OscConfig+0x104>
 800c562:	e000      	b.n	800c566 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f003 0302 	and.w	r3, r3, #2
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d06f      	beq.n	800c652 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c572:	4b50      	ldr	r3, [pc, #320]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c574:	689b      	ldr	r3, [r3, #8]
 800c576:	f003 030c 	and.w	r3, r3, #12
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d017      	beq.n	800c5ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800c57e:	4b4d      	ldr	r3, [pc, #308]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c580:	689b      	ldr	r3, [r3, #8]
 800c582:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c586:	2b08      	cmp	r3, #8
 800c588:	d105      	bne.n	800c596 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800c58a:	4b4a      	ldr	r3, [pc, #296]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c58c:	685b      	ldr	r3, [r3, #4]
 800c58e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c592:	2b00      	cmp	r3, #0
 800c594:	d00b      	beq.n	800c5ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c596:	4b47      	ldr	r3, [pc, #284]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c598:	689b      	ldr	r3, [r3, #8]
 800c59a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800c59e:	2b0c      	cmp	r3, #12
 800c5a0:	d11c      	bne.n	800c5dc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c5a2:	4b44      	ldr	r3, [pc, #272]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c5a4:	685b      	ldr	r3, [r3, #4]
 800c5a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d116      	bne.n	800c5dc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c5ae:	4b41      	ldr	r3, [pc, #260]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f003 0302 	and.w	r3, r3, #2
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d005      	beq.n	800c5c6 <HAL_RCC_OscConfig+0x186>
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	68db      	ldr	r3, [r3, #12]
 800c5be:	2b01      	cmp	r3, #1
 800c5c0:	d001      	beq.n	800c5c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800c5c2:	2301      	movs	r3, #1
 800c5c4:	e1d3      	b.n	800c96e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c5c6:	4b3b      	ldr	r3, [pc, #236]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	691b      	ldr	r3, [r3, #16]
 800c5d2:	00db      	lsls	r3, r3, #3
 800c5d4:	4937      	ldr	r1, [pc, #220]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c5d6:	4313      	orrs	r3, r2
 800c5d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c5da:	e03a      	b.n	800c652 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	68db      	ldr	r3, [r3, #12]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d020      	beq.n	800c626 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c5e4:	4b34      	ldr	r3, [pc, #208]	; (800c6b8 <HAL_RCC_OscConfig+0x278>)
 800c5e6:	2201      	movs	r2, #1
 800c5e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5ea:	f7fa fbdf 	bl	8006dac <HAL_GetTick>
 800c5ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c5f0:	e008      	b.n	800c604 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c5f2:	f7fa fbdb 	bl	8006dac <HAL_GetTick>
 800c5f6:	4602      	mov	r2, r0
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	1ad3      	subs	r3, r2, r3
 800c5fc:	2b02      	cmp	r3, #2
 800c5fe:	d901      	bls.n	800c604 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800c600:	2303      	movs	r3, #3
 800c602:	e1b4      	b.n	800c96e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c604:	4b2b      	ldr	r3, [pc, #172]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f003 0302 	and.w	r3, r3, #2
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d0f0      	beq.n	800c5f2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c610:	4b28      	ldr	r3, [pc, #160]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	691b      	ldr	r3, [r3, #16]
 800c61c:	00db      	lsls	r3, r3, #3
 800c61e:	4925      	ldr	r1, [pc, #148]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c620:	4313      	orrs	r3, r2
 800c622:	600b      	str	r3, [r1, #0]
 800c624:	e015      	b.n	800c652 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c626:	4b24      	ldr	r3, [pc, #144]	; (800c6b8 <HAL_RCC_OscConfig+0x278>)
 800c628:	2200      	movs	r2, #0
 800c62a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c62c:	f7fa fbbe 	bl	8006dac <HAL_GetTick>
 800c630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c632:	e008      	b.n	800c646 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c634:	f7fa fbba 	bl	8006dac <HAL_GetTick>
 800c638:	4602      	mov	r2, r0
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	1ad3      	subs	r3, r2, r3
 800c63e:	2b02      	cmp	r3, #2
 800c640:	d901      	bls.n	800c646 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c642:	2303      	movs	r3, #3
 800c644:	e193      	b.n	800c96e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c646:	4b1b      	ldr	r3, [pc, #108]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f003 0302 	and.w	r3, r3, #2
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d1f0      	bne.n	800c634 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f003 0308 	and.w	r3, r3, #8
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d036      	beq.n	800c6cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	695b      	ldr	r3, [r3, #20]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d016      	beq.n	800c694 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c666:	4b15      	ldr	r3, [pc, #84]	; (800c6bc <HAL_RCC_OscConfig+0x27c>)
 800c668:	2201      	movs	r2, #1
 800c66a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c66c:	f7fa fb9e 	bl	8006dac <HAL_GetTick>
 800c670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c672:	e008      	b.n	800c686 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c674:	f7fa fb9a 	bl	8006dac <HAL_GetTick>
 800c678:	4602      	mov	r2, r0
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	1ad3      	subs	r3, r2, r3
 800c67e:	2b02      	cmp	r3, #2
 800c680:	d901      	bls.n	800c686 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800c682:	2303      	movs	r3, #3
 800c684:	e173      	b.n	800c96e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c686:	4b0b      	ldr	r3, [pc, #44]	; (800c6b4 <HAL_RCC_OscConfig+0x274>)
 800c688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c68a:	f003 0302 	and.w	r3, r3, #2
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d0f0      	beq.n	800c674 <HAL_RCC_OscConfig+0x234>
 800c692:	e01b      	b.n	800c6cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c694:	4b09      	ldr	r3, [pc, #36]	; (800c6bc <HAL_RCC_OscConfig+0x27c>)
 800c696:	2200      	movs	r2, #0
 800c698:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c69a:	f7fa fb87 	bl	8006dac <HAL_GetTick>
 800c69e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c6a0:	e00e      	b.n	800c6c0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c6a2:	f7fa fb83 	bl	8006dac <HAL_GetTick>
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	1ad3      	subs	r3, r2, r3
 800c6ac:	2b02      	cmp	r3, #2
 800c6ae:	d907      	bls.n	800c6c0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800c6b0:	2303      	movs	r3, #3
 800c6b2:	e15c      	b.n	800c96e <HAL_RCC_OscConfig+0x52e>
 800c6b4:	40023800 	.word	0x40023800
 800c6b8:	42470000 	.word	0x42470000
 800c6bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c6c0:	4b8a      	ldr	r3, [pc, #552]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c6c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6c4:	f003 0302 	and.w	r3, r3, #2
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d1ea      	bne.n	800c6a2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	f003 0304 	and.w	r3, r3, #4
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	f000 8097 	beq.w	800c808 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c6de:	4b83      	ldr	r3, [pc, #524]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c6e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d10f      	bne.n	800c70a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	60bb      	str	r3, [r7, #8]
 800c6ee:	4b7f      	ldr	r3, [pc, #508]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c6f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6f2:	4a7e      	ldr	r2, [pc, #504]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c6f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6f8:	6413      	str	r3, [r2, #64]	; 0x40
 800c6fa:	4b7c      	ldr	r3, [pc, #496]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c6fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c702:	60bb      	str	r3, [r7, #8]
 800c704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c706:	2301      	movs	r3, #1
 800c708:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c70a:	4b79      	ldr	r3, [pc, #484]	; (800c8f0 <HAL_RCC_OscConfig+0x4b0>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c712:	2b00      	cmp	r3, #0
 800c714:	d118      	bne.n	800c748 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c716:	4b76      	ldr	r3, [pc, #472]	; (800c8f0 <HAL_RCC_OscConfig+0x4b0>)
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	4a75      	ldr	r2, [pc, #468]	; (800c8f0 <HAL_RCC_OscConfig+0x4b0>)
 800c71c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c722:	f7fa fb43 	bl	8006dac <HAL_GetTick>
 800c726:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c728:	e008      	b.n	800c73c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c72a:	f7fa fb3f 	bl	8006dac <HAL_GetTick>
 800c72e:	4602      	mov	r2, r0
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	1ad3      	subs	r3, r2, r3
 800c734:	2b02      	cmp	r3, #2
 800c736:	d901      	bls.n	800c73c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800c738:	2303      	movs	r3, #3
 800c73a:	e118      	b.n	800c96e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c73c:	4b6c      	ldr	r3, [pc, #432]	; (800c8f0 <HAL_RCC_OscConfig+0x4b0>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c744:	2b00      	cmp	r3, #0
 800c746:	d0f0      	beq.n	800c72a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	689b      	ldr	r3, [r3, #8]
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	d106      	bne.n	800c75e <HAL_RCC_OscConfig+0x31e>
 800c750:	4b66      	ldr	r3, [pc, #408]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c754:	4a65      	ldr	r2, [pc, #404]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c756:	f043 0301 	orr.w	r3, r3, #1
 800c75a:	6713      	str	r3, [r2, #112]	; 0x70
 800c75c:	e01c      	b.n	800c798 <HAL_RCC_OscConfig+0x358>
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	689b      	ldr	r3, [r3, #8]
 800c762:	2b05      	cmp	r3, #5
 800c764:	d10c      	bne.n	800c780 <HAL_RCC_OscConfig+0x340>
 800c766:	4b61      	ldr	r3, [pc, #388]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c76a:	4a60      	ldr	r2, [pc, #384]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c76c:	f043 0304 	orr.w	r3, r3, #4
 800c770:	6713      	str	r3, [r2, #112]	; 0x70
 800c772:	4b5e      	ldr	r3, [pc, #376]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c776:	4a5d      	ldr	r2, [pc, #372]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c778:	f043 0301 	orr.w	r3, r3, #1
 800c77c:	6713      	str	r3, [r2, #112]	; 0x70
 800c77e:	e00b      	b.n	800c798 <HAL_RCC_OscConfig+0x358>
 800c780:	4b5a      	ldr	r3, [pc, #360]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c784:	4a59      	ldr	r2, [pc, #356]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c786:	f023 0301 	bic.w	r3, r3, #1
 800c78a:	6713      	str	r3, [r2, #112]	; 0x70
 800c78c:	4b57      	ldr	r3, [pc, #348]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c78e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c790:	4a56      	ldr	r2, [pc, #344]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c792:	f023 0304 	bic.w	r3, r3, #4
 800c796:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	689b      	ldr	r3, [r3, #8]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d015      	beq.n	800c7cc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7a0:	f7fa fb04 	bl	8006dac <HAL_GetTick>
 800c7a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c7a6:	e00a      	b.n	800c7be <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c7a8:	f7fa fb00 	bl	8006dac <HAL_GetTick>
 800c7ac:	4602      	mov	r2, r0
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	1ad3      	subs	r3, r2, r3
 800c7b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d901      	bls.n	800c7be <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800c7ba:	2303      	movs	r3, #3
 800c7bc:	e0d7      	b.n	800c96e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c7be:	4b4b      	ldr	r3, [pc, #300]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c7c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7c2:	f003 0302 	and.w	r3, r3, #2
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d0ee      	beq.n	800c7a8 <HAL_RCC_OscConfig+0x368>
 800c7ca:	e014      	b.n	800c7f6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7cc:	f7fa faee 	bl	8006dac <HAL_GetTick>
 800c7d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c7d2:	e00a      	b.n	800c7ea <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c7d4:	f7fa faea 	bl	8006dac <HAL_GetTick>
 800c7d8:	4602      	mov	r2, r0
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	1ad3      	subs	r3, r2, r3
 800c7de:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d901      	bls.n	800c7ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800c7e6:	2303      	movs	r3, #3
 800c7e8:	e0c1      	b.n	800c96e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c7ea:	4b40      	ldr	r3, [pc, #256]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c7ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7ee:	f003 0302 	and.w	r3, r3, #2
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d1ee      	bne.n	800c7d4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c7f6:	7dfb      	ldrb	r3, [r7, #23]
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	d105      	bne.n	800c808 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c7fc:	4b3b      	ldr	r3, [pc, #236]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c7fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c800:	4a3a      	ldr	r2, [pc, #232]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c802:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c806:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	699b      	ldr	r3, [r3, #24]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	f000 80ad 	beq.w	800c96c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c812:	4b36      	ldr	r3, [pc, #216]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c814:	689b      	ldr	r3, [r3, #8]
 800c816:	f003 030c 	and.w	r3, r3, #12
 800c81a:	2b08      	cmp	r3, #8
 800c81c:	d060      	beq.n	800c8e0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	699b      	ldr	r3, [r3, #24]
 800c822:	2b02      	cmp	r3, #2
 800c824:	d145      	bne.n	800c8b2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c826:	4b33      	ldr	r3, [pc, #204]	; (800c8f4 <HAL_RCC_OscConfig+0x4b4>)
 800c828:	2200      	movs	r2, #0
 800c82a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c82c:	f7fa fabe 	bl	8006dac <HAL_GetTick>
 800c830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c832:	e008      	b.n	800c846 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c834:	f7fa faba 	bl	8006dac <HAL_GetTick>
 800c838:	4602      	mov	r2, r0
 800c83a:	693b      	ldr	r3, [r7, #16]
 800c83c:	1ad3      	subs	r3, r2, r3
 800c83e:	2b02      	cmp	r3, #2
 800c840:	d901      	bls.n	800c846 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800c842:	2303      	movs	r3, #3
 800c844:	e093      	b.n	800c96e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c846:	4b29      	ldr	r3, [pc, #164]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d1f0      	bne.n	800c834 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	69da      	ldr	r2, [r3, #28]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6a1b      	ldr	r3, [r3, #32]
 800c85a:	431a      	orrs	r2, r3
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c860:	019b      	lsls	r3, r3, #6
 800c862:	431a      	orrs	r2, r3
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c868:	085b      	lsrs	r3, r3, #1
 800c86a:	3b01      	subs	r3, #1
 800c86c:	041b      	lsls	r3, r3, #16
 800c86e:	431a      	orrs	r2, r3
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c874:	061b      	lsls	r3, r3, #24
 800c876:	431a      	orrs	r2, r3
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c87c:	071b      	lsls	r3, r3, #28
 800c87e:	491b      	ldr	r1, [pc, #108]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c880:	4313      	orrs	r3, r2
 800c882:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c884:	4b1b      	ldr	r3, [pc, #108]	; (800c8f4 <HAL_RCC_OscConfig+0x4b4>)
 800c886:	2201      	movs	r2, #1
 800c888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c88a:	f7fa fa8f 	bl	8006dac <HAL_GetTick>
 800c88e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c890:	e008      	b.n	800c8a4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c892:	f7fa fa8b 	bl	8006dac <HAL_GetTick>
 800c896:	4602      	mov	r2, r0
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	1ad3      	subs	r3, r2, r3
 800c89c:	2b02      	cmp	r3, #2
 800c89e:	d901      	bls.n	800c8a4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800c8a0:	2303      	movs	r3, #3
 800c8a2:	e064      	b.n	800c96e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c8a4:	4b11      	ldr	r3, [pc, #68]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d0f0      	beq.n	800c892 <HAL_RCC_OscConfig+0x452>
 800c8b0:	e05c      	b.n	800c96c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c8b2:	4b10      	ldr	r3, [pc, #64]	; (800c8f4 <HAL_RCC_OscConfig+0x4b4>)
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8b8:	f7fa fa78 	bl	8006dac <HAL_GetTick>
 800c8bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c8be:	e008      	b.n	800c8d2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c8c0:	f7fa fa74 	bl	8006dac <HAL_GetTick>
 800c8c4:	4602      	mov	r2, r0
 800c8c6:	693b      	ldr	r3, [r7, #16]
 800c8c8:	1ad3      	subs	r3, r2, r3
 800c8ca:	2b02      	cmp	r3, #2
 800c8cc:	d901      	bls.n	800c8d2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800c8ce:	2303      	movs	r3, #3
 800c8d0:	e04d      	b.n	800c96e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c8d2:	4b06      	ldr	r3, [pc, #24]	; (800c8ec <HAL_RCC_OscConfig+0x4ac>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d1f0      	bne.n	800c8c0 <HAL_RCC_OscConfig+0x480>
 800c8de:	e045      	b.n	800c96c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	699b      	ldr	r3, [r3, #24]
 800c8e4:	2b01      	cmp	r3, #1
 800c8e6:	d107      	bne.n	800c8f8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	e040      	b.n	800c96e <HAL_RCC_OscConfig+0x52e>
 800c8ec:	40023800 	.word	0x40023800
 800c8f0:	40007000 	.word	0x40007000
 800c8f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c8f8:	4b1f      	ldr	r3, [pc, #124]	; (800c978 <HAL_RCC_OscConfig+0x538>)
 800c8fa:	685b      	ldr	r3, [r3, #4]
 800c8fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	699b      	ldr	r3, [r3, #24]
 800c902:	2b01      	cmp	r3, #1
 800c904:	d030      	beq.n	800c968 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c910:	429a      	cmp	r2, r3
 800c912:	d129      	bne.n	800c968 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c91e:	429a      	cmp	r2, r3
 800c920:	d122      	bne.n	800c968 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c922:	68fa      	ldr	r2, [r7, #12]
 800c924:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c928:	4013      	ands	r3, r2
 800c92a:	687a      	ldr	r2, [r7, #4]
 800c92c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c92e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c930:	4293      	cmp	r3, r2
 800c932:	d119      	bne.n	800c968 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c93e:	085b      	lsrs	r3, r3, #1
 800c940:	3b01      	subs	r3, #1
 800c942:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c944:	429a      	cmp	r2, r3
 800c946:	d10f      	bne.n	800c968 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c952:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c954:	429a      	cmp	r2, r3
 800c956:	d107      	bne.n	800c968 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c962:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c964:	429a      	cmp	r2, r3
 800c966:	d001      	beq.n	800c96c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800c968:	2301      	movs	r3, #1
 800c96a:	e000      	b.n	800c96e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800c96c:	2300      	movs	r3, #0
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3718      	adds	r7, #24
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}
 800c976:	bf00      	nop
 800c978:	40023800 	.word	0x40023800

0800c97c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b084      	sub	sp, #16
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c984:	2301      	movs	r3, #1
 800c986:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d101      	bne.n	800c992 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800c98e:	2301      	movs	r3, #1
 800c990:	e066      	b.n	800ca60 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	7f5b      	ldrb	r3, [r3, #29]
 800c996:	b2db      	uxtb	r3, r3
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d105      	bne.n	800c9a8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2200      	movs	r2, #0
 800c9a0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f7f9 ff62 	bl	800686c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2202      	movs	r2, #2
 800c9ac:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	22ca      	movs	r2, #202	; 0xca
 800c9b4:	625a      	str	r2, [r3, #36]	; 0x24
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	2253      	movs	r2, #83	; 0x53
 800c9bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c9be:	6878      	ldr	r0, [r7, #4]
 800c9c0:	f000 fa45 	bl	800ce4e <RTC_EnterInitMode>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800c9c8:	7bfb      	ldrb	r3, [r7, #15]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d12c      	bne.n	800ca28 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	689b      	ldr	r3, [r3, #8]
 800c9d4:	687a      	ldr	r2, [r7, #4]
 800c9d6:	6812      	ldr	r2, [r2, #0]
 800c9d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c9dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9e0:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	6899      	ldr	r1, [r3, #8]
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	685a      	ldr	r2, [r3, #4]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	691b      	ldr	r3, [r3, #16]
 800c9f0:	431a      	orrs	r2, r3
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	695b      	ldr	r3, [r3, #20]
 800c9f6:	431a      	orrs	r2, r3
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	430a      	orrs	r2, r1
 800c9fe:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	687a      	ldr	r2, [r7, #4]
 800ca06:	68d2      	ldr	r2, [r2, #12]
 800ca08:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	6919      	ldr	r1, [r3, #16]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	689b      	ldr	r3, [r3, #8]
 800ca14:	041a      	lsls	r2, r3, #16
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	430a      	orrs	r2, r1
 800ca1c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f000 fa4c 	bl	800cebc <RTC_ExitInitMode>
 800ca24:	4603      	mov	r3, r0
 800ca26:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800ca28:	7bfb      	ldrb	r3, [r7, #15]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d113      	bne.n	800ca56 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ca3c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	699a      	ldr	r2, [r3, #24]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	430a      	orrs	r2, r1
 800ca4e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2201      	movs	r2, #1
 800ca54:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	22ff      	movs	r2, #255	; 0xff
 800ca5c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800ca5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca60:	4618      	mov	r0, r3
 800ca62:	3710      	adds	r7, #16
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd80      	pop	{r7, pc}

0800ca68 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ca68:	b590      	push	{r4, r7, lr}
 800ca6a:	b087      	sub	sp, #28
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	60f8      	str	r0, [r7, #12]
 800ca70:	60b9      	str	r1, [r7, #8]
 800ca72:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800ca74:	2300      	movs	r3, #0
 800ca76:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	7f1b      	ldrb	r3, [r3, #28]
 800ca7c:	2b01      	cmp	r3, #1
 800ca7e:	d101      	bne.n	800ca84 <HAL_RTC_SetTime+0x1c>
 800ca80:	2302      	movs	r3, #2
 800ca82:	e087      	b.n	800cb94 <HAL_RTC_SetTime+0x12c>
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	2201      	movs	r2, #1
 800ca88:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	2202      	movs	r2, #2
 800ca8e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d126      	bne.n	800cae4 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	689b      	ldr	r3, [r3, #8]
 800ca9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d102      	bne.n	800caaa <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	2200      	movs	r2, #0
 800caa8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	781b      	ldrb	r3, [r3, #0]
 800caae:	4618      	mov	r0, r3
 800cab0:	f000 fa29 	bl	800cf06 <RTC_ByteToBcd2>
 800cab4:	4603      	mov	r3, r0
 800cab6:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	785b      	ldrb	r3, [r3, #1]
 800cabc:	4618      	mov	r0, r3
 800cabe:	f000 fa22 	bl	800cf06 <RTC_ByteToBcd2>
 800cac2:	4603      	mov	r3, r0
 800cac4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800cac6:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	789b      	ldrb	r3, [r3, #2]
 800cacc:	4618      	mov	r0, r3
 800cace:	f000 fa1a 	bl	800cf06 <RTC_ByteToBcd2>
 800cad2:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800cad4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	78db      	ldrb	r3, [r3, #3]
 800cadc:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800cade:	4313      	orrs	r3, r2
 800cae0:	617b      	str	r3, [r7, #20]
 800cae2:	e018      	b.n	800cb16 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	689b      	ldr	r3, [r3, #8]
 800caea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d102      	bne.n	800caf8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800caf2:	68bb      	ldr	r3, [r7, #8]
 800caf4:	2200      	movs	r2, #0
 800caf6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	781b      	ldrb	r3, [r3, #0]
 800cafc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	785b      	ldrb	r3, [r3, #1]
 800cb02:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800cb04:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800cb06:	68ba      	ldr	r2, [r7, #8]
 800cb08:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800cb0a:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	78db      	ldrb	r3, [r3, #3]
 800cb10:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800cb12:	4313      	orrs	r3, r2
 800cb14:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	22ca      	movs	r2, #202	; 0xca
 800cb1c:	625a      	str	r2, [r3, #36]	; 0x24
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	2253      	movs	r2, #83	; 0x53
 800cb24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800cb26:	68f8      	ldr	r0, [r7, #12]
 800cb28:	f000 f991 	bl	800ce4e <RTC_EnterInitMode>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800cb30:	7cfb      	ldrb	r3, [r7, #19]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d120      	bne.n	800cb78 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	681a      	ldr	r2, [r3, #0]
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800cb40:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800cb44:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	689a      	ldr	r2, [r3, #8]
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800cb54:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	6899      	ldr	r1, [r3, #8]
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	68da      	ldr	r2, [r3, #12]
 800cb60:	68bb      	ldr	r3, [r7, #8]
 800cb62:	691b      	ldr	r3, [r3, #16]
 800cb64:	431a      	orrs	r2, r3
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	430a      	orrs	r2, r1
 800cb6c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800cb6e:	68f8      	ldr	r0, [r7, #12]
 800cb70:	f000 f9a4 	bl	800cebc <RTC_ExitInitMode>
 800cb74:	4603      	mov	r3, r0
 800cb76:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800cb78:	7cfb      	ldrb	r3, [r7, #19]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d102      	bne.n	800cb84 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	2201      	movs	r2, #1
 800cb82:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	22ff      	movs	r2, #255	; 0xff
 800cb8a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	771a      	strb	r2, [r3, #28]

  return status;
 800cb92:	7cfb      	ldrb	r3, [r7, #19]
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	371c      	adds	r7, #28
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd90      	pop	{r4, r7, pc}

0800cb9c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b086      	sub	sp, #24
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	60f8      	str	r0, [r7, #12]
 800cba4:	60b9      	str	r1, [r7, #8]
 800cba6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	691b      	ldr	r3, [r3, #16]
 800cbbc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800cbce:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800cbd2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800cbd4:	697b      	ldr	r3, [r7, #20]
 800cbd6:	0c1b      	lsrs	r3, r3, #16
 800cbd8:	b2db      	uxtb	r3, r3
 800cbda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cbde:	b2da      	uxtb	r2, r3
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	0a1b      	lsrs	r3, r3, #8
 800cbe8:	b2db      	uxtb	r3, r3
 800cbea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbee:	b2da      	uxtb	r2, r3
 800cbf0:	68bb      	ldr	r3, [r7, #8]
 800cbf2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	b2db      	uxtb	r3, r3
 800cbf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbfc:	b2da      	uxtb	r2, r3
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	0d9b      	lsrs	r3, r3, #22
 800cc06:	b2db      	uxtb	r3, r3
 800cc08:	f003 0301 	and.w	r3, r3, #1
 800cc0c:	b2da      	uxtb	r2, r3
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d11a      	bne.n	800cc4e <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	781b      	ldrb	r3, [r3, #0]
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f000 f98f 	bl	800cf40 <RTC_Bcd2ToByte>
 800cc22:	4603      	mov	r3, r0
 800cc24:	461a      	mov	r2, r3
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800cc2a:	68bb      	ldr	r3, [r7, #8]
 800cc2c:	785b      	ldrb	r3, [r3, #1]
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f000 f986 	bl	800cf40 <RTC_Bcd2ToByte>
 800cc34:	4603      	mov	r3, r0
 800cc36:	461a      	mov	r2, r3
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	789b      	ldrb	r3, [r3, #2]
 800cc40:	4618      	mov	r0, r3
 800cc42:	f000 f97d 	bl	800cf40 <RTC_Bcd2ToByte>
 800cc46:	4603      	mov	r3, r0
 800cc48:	461a      	mov	r2, r3
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800cc4e:	2300      	movs	r3, #0
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3718      	adds	r7, #24
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cc58:	b590      	push	{r4, r7, lr}
 800cc5a:	b087      	sub	sp, #28
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	60f8      	str	r0, [r7, #12]
 800cc60:	60b9      	str	r1, [r7, #8]
 800cc62:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800cc64:	2300      	movs	r3, #0
 800cc66:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	7f1b      	ldrb	r3, [r3, #28]
 800cc6c:	2b01      	cmp	r3, #1
 800cc6e:	d101      	bne.n	800cc74 <HAL_RTC_SetDate+0x1c>
 800cc70:	2302      	movs	r3, #2
 800cc72:	e071      	b.n	800cd58 <HAL_RTC_SetDate+0x100>
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	2201      	movs	r2, #1
 800cc78:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	2202      	movs	r2, #2
 800cc7e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d10e      	bne.n	800cca4 <HAL_RTC_SetDate+0x4c>
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	785b      	ldrb	r3, [r3, #1]
 800cc8a:	f003 0310 	and.w	r3, r3, #16
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d008      	beq.n	800cca4 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	785b      	ldrb	r3, [r3, #1]
 800cc96:	f023 0310 	bic.w	r3, r3, #16
 800cc9a:	b2db      	uxtb	r3, r3
 800cc9c:	330a      	adds	r3, #10
 800cc9e:	b2da      	uxtb	r2, r3
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d11c      	bne.n	800cce4 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	78db      	ldrb	r3, [r3, #3]
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f000 f929 	bl	800cf06 <RTC_ByteToBcd2>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ccb8:	68bb      	ldr	r3, [r7, #8]
 800ccba:	785b      	ldrb	r3, [r3, #1]
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f000 f922 	bl	800cf06 <RTC_ByteToBcd2>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ccc6:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	789b      	ldrb	r3, [r3, #2]
 800cccc:	4618      	mov	r0, r3
 800ccce:	f000 f91a 	bl	800cf06 <RTC_ByteToBcd2>
 800ccd2:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800ccd4:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	781b      	ldrb	r3, [r3, #0]
 800ccdc:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800ccde:	4313      	orrs	r3, r2
 800cce0:	617b      	str	r3, [r7, #20]
 800cce2:	e00e      	b.n	800cd02 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	78db      	ldrb	r3, [r3, #3]
 800cce8:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	785b      	ldrb	r3, [r3, #1]
 800ccee:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ccf0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800ccf2:	68ba      	ldr	r2, [r7, #8]
 800ccf4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800ccf6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ccfe:	4313      	orrs	r3, r2
 800cd00:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	22ca      	movs	r2, #202	; 0xca
 800cd08:	625a      	str	r2, [r3, #36]	; 0x24
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	2253      	movs	r2, #83	; 0x53
 800cd10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800cd12:	68f8      	ldr	r0, [r7, #12]
 800cd14:	f000 f89b 	bl	800ce4e <RTC_EnterInitMode>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800cd1c:	7cfb      	ldrb	r3, [r7, #19]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d10c      	bne.n	800cd3c <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	681a      	ldr	r2, [r3, #0]
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cd2c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cd30:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800cd32:	68f8      	ldr	r0, [r7, #12]
 800cd34:	f000 f8c2 	bl	800cebc <RTC_ExitInitMode>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800cd3c:	7cfb      	ldrb	r3, [r7, #19]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d102      	bne.n	800cd48 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	2201      	movs	r2, #1
 800cd46:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	22ff      	movs	r2, #255	; 0xff
 800cd4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	2200      	movs	r2, #0
 800cd54:	771a      	strb	r2, [r3, #28]

  return status;
 800cd56:	7cfb      	ldrb	r3, [r7, #19]
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	371c      	adds	r7, #28
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd90      	pop	{r4, r7, pc}

0800cd60 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b086      	sub	sp, #24
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	60f8      	str	r0, [r7, #12]
 800cd68:	60b9      	str	r1, [r7, #8]
 800cd6a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	685b      	ldr	r3, [r3, #4]
 800cd76:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cd7a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cd7e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800cd80:	697b      	ldr	r3, [r7, #20]
 800cd82:	0c1b      	lsrs	r3, r3, #16
 800cd84:	b2da      	uxtb	r2, r3
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	0a1b      	lsrs	r3, r3, #8
 800cd8e:	b2db      	uxtb	r3, r3
 800cd90:	f003 031f 	and.w	r3, r3, #31
 800cd94:	b2da      	uxtb	r2, r3
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	b2db      	uxtb	r3, r3
 800cd9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cda2:	b2da      	uxtb	r2, r3
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	0b5b      	lsrs	r3, r3, #13
 800cdac:	b2db      	uxtb	r3, r3
 800cdae:	f003 0307 	and.w	r3, r3, #7
 800cdb2:	b2da      	uxtb	r2, r3
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d11a      	bne.n	800cdf4 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	78db      	ldrb	r3, [r3, #3]
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f000 f8bc 	bl	800cf40 <RTC_Bcd2ToByte>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	461a      	mov	r2, r3
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	785b      	ldrb	r3, [r3, #1]
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f000 f8b3 	bl	800cf40 <RTC_Bcd2ToByte>
 800cdda:	4603      	mov	r3, r0
 800cddc:	461a      	mov	r2, r3
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	789b      	ldrb	r3, [r3, #2]
 800cde6:	4618      	mov	r0, r3
 800cde8:	f000 f8aa 	bl	800cf40 <RTC_Bcd2ToByte>
 800cdec:	4603      	mov	r3, r0
 800cdee:	461a      	mov	r2, r3
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800cdf4:	2300      	movs	r3, #0
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3718      	adds	r7, #24
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}

0800cdfe <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800cdfe:	b580      	push	{r7, lr}
 800ce00:	b084      	sub	sp, #16
 800ce02:	af00      	add	r7, sp, #0
 800ce04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ce06:	2300      	movs	r3, #0
 800ce08:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	68da      	ldr	r2, [r3, #12]
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ce18:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ce1a:	f7f9 ffc7 	bl	8006dac <HAL_GetTick>
 800ce1e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ce20:	e009      	b.n	800ce36 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ce22:	f7f9 ffc3 	bl	8006dac <HAL_GetTick>
 800ce26:	4602      	mov	r2, r0
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	1ad3      	subs	r3, r2, r3
 800ce2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ce30:	d901      	bls.n	800ce36 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800ce32:	2303      	movs	r3, #3
 800ce34:	e007      	b.n	800ce46 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	68db      	ldr	r3, [r3, #12]
 800ce3c:	f003 0320 	and.w	r3, r3, #32
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d0ee      	beq.n	800ce22 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800ce44:	2300      	movs	r3, #0
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3710      	adds	r7, #16
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}

0800ce4e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ce4e:	b580      	push	{r7, lr}
 800ce50:	b084      	sub	sp, #16
 800ce52:	af00      	add	r7, sp, #0
 800ce54:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ce56:	2300      	movs	r3, #0
 800ce58:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	68db      	ldr	r3, [r3, #12]
 800ce64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d122      	bne.n	800ceb2 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	68da      	ldr	r2, [r3, #12]
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ce7a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ce7c:	f7f9 ff96 	bl	8006dac <HAL_GetTick>
 800ce80:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800ce82:	e00c      	b.n	800ce9e <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ce84:	f7f9 ff92 	bl	8006dac <HAL_GetTick>
 800ce88:	4602      	mov	r2, r0
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	1ad3      	subs	r3, r2, r3
 800ce8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ce92:	d904      	bls.n	800ce9e <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2204      	movs	r2, #4
 800ce98:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	68db      	ldr	r3, [r3, #12]
 800cea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d102      	bne.n	800ceb2 <RTC_EnterInitMode+0x64>
 800ceac:	7bfb      	ldrb	r3, [r7, #15]
 800ceae:	2b01      	cmp	r3, #1
 800ceb0:	d1e8      	bne.n	800ce84 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800ceb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3710      	adds	r7, #16
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}

0800cebc <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b084      	sub	sp, #16
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cec4:	2300      	movs	r3, #0
 800cec6:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	68da      	ldr	r2, [r3, #12]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ced6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	689b      	ldr	r3, [r3, #8]
 800cede:	f003 0320 	and.w	r3, r3, #32
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d10a      	bne.n	800cefc <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f7ff ff89 	bl	800cdfe <HAL_RTC_WaitForSynchro>
 800ceec:	4603      	mov	r3, r0
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d004      	beq.n	800cefc <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2204      	movs	r2, #4
 800cef6:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800cef8:	2301      	movs	r3, #1
 800cefa:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800cefc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cefe:	4618      	mov	r0, r3
 800cf00:	3710      	adds	r7, #16
 800cf02:	46bd      	mov	sp, r7
 800cf04:	bd80      	pop	{r7, pc}

0800cf06 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800cf06:	b480      	push	{r7}
 800cf08:	b085      	sub	sp, #20
 800cf0a:	af00      	add	r7, sp, #0
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800cf10:	2300      	movs	r3, #0
 800cf12:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800cf14:	e005      	b.n	800cf22 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800cf16:	7bfb      	ldrb	r3, [r7, #15]
 800cf18:	3301      	adds	r3, #1
 800cf1a:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800cf1c:	79fb      	ldrb	r3, [r7, #7]
 800cf1e:	3b0a      	subs	r3, #10
 800cf20:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800cf22:	79fb      	ldrb	r3, [r7, #7]
 800cf24:	2b09      	cmp	r3, #9
 800cf26:	d8f6      	bhi.n	800cf16 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800cf28:	7bfb      	ldrb	r3, [r7, #15]
 800cf2a:	011b      	lsls	r3, r3, #4
 800cf2c:	b2da      	uxtb	r2, r3
 800cf2e:	79fb      	ldrb	r3, [r7, #7]
 800cf30:	4313      	orrs	r3, r2
 800cf32:	b2db      	uxtb	r3, r3
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3714      	adds	r7, #20
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3e:	4770      	bx	lr

0800cf40 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800cf40:	b480      	push	{r7}
 800cf42:	b085      	sub	sp, #20
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	4603      	mov	r3, r0
 800cf48:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800cf4e:	79fb      	ldrb	r3, [r7, #7]
 800cf50:	091b      	lsrs	r3, r3, #4
 800cf52:	b2db      	uxtb	r3, r3
 800cf54:	461a      	mov	r2, r3
 800cf56:	0092      	lsls	r2, r2, #2
 800cf58:	4413      	add	r3, r2
 800cf5a:	005b      	lsls	r3, r3, #1
 800cf5c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800cf5e:	79fb      	ldrb	r3, [r7, #7]
 800cf60:	f003 030f 	and.w	r3, r3, #15
 800cf64:	b2da      	uxtb	r2, r3
 800cf66:	7bfb      	ldrb	r3, [r7, #15]
 800cf68:	4413      	add	r3, r2
 800cf6a:	b2db      	uxtb	r3, r3
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3714      	adds	r7, #20
 800cf70:	46bd      	mov	sp, r7
 800cf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf76:	4770      	bx	lr

0800cf78 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b087      	sub	sp, #28
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	60f8      	str	r0, [r7, #12]
 800cf80:	60b9      	str	r1, [r7, #8]
 800cf82:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800cf84:	2300      	movs	r3, #0
 800cf86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	3350      	adds	r3, #80	; 0x50
 800cf8e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	009b      	lsls	r3, r3, #2
 800cf94:	697a      	ldr	r2, [r7, #20]
 800cf96:	4413      	add	r3, r2
 800cf98:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	687a      	ldr	r2, [r7, #4]
 800cf9e:	601a      	str	r2, [r3, #0]
}
 800cfa0:	bf00      	nop
 800cfa2:	371c      	adds	r7, #28
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfaa:	4770      	bx	lr

0800cfac <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800cfac:	b480      	push	{r7}
 800cfae:	b085      	sub	sp, #20
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
 800cfb4:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	3350      	adds	r3, #80	; 0x50
 800cfc0:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	009b      	lsls	r3, r3, #2
 800cfc6:	68fa      	ldr	r2, [r7, #12]
 800cfc8:	4413      	add	r3, r2
 800cfca:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800cfcc:	68fb      	ldr	r3, [r7, #12]
 800cfce:	681b      	ldr	r3, [r3, #0]
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	3714      	adds	r7, #20
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfda:	4770      	bx	lr

0800cfdc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b082      	sub	sp, #8
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d101      	bne.n	800cfee <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cfea:	2301      	movs	r3, #1
 800cfec:	e022      	b.n	800d034 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cff4:	b2db      	uxtb	r3, r3
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d105      	bne.n	800d006 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2200      	movs	r2, #0
 800cffe:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f7f9 fc5d 	bl	80068c0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	2203      	movs	r2, #3
 800d00a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f000 f814 	bl	800d03c <HAL_SD_InitCard>
 800d014:	4603      	mov	r3, r0
 800d016:	2b00      	cmp	r3, #0
 800d018:	d001      	beq.n	800d01e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d01a:	2301      	movs	r3, #1
 800d01c:	e00a      	b.n	800d034 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2200      	movs	r2, #0
 800d022:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2200      	movs	r2, #0
 800d028:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	2201      	movs	r2, #1
 800d02e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d032:	2300      	movs	r3, #0
}
 800d034:	4618      	mov	r0, r3
 800d036:	3708      	adds	r7, #8
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}

0800d03c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d03c:	b5b0      	push	{r4, r5, r7, lr}
 800d03e:	b08e      	sub	sp, #56	; 0x38
 800d040:	af04      	add	r7, sp, #16
 800d042:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800d044:	2300      	movs	r3, #0
 800d046:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800d048:	2300      	movs	r3, #0
 800d04a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800d04c:	2300      	movs	r3, #0
 800d04e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800d050:	2300      	movs	r3, #0
 800d052:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800d054:	2300      	movs	r3, #0
 800d056:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800d058:	2376      	movs	r3, #118	; 0x76
 800d05a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681d      	ldr	r5, [r3, #0]
 800d060:	466c      	mov	r4, sp
 800d062:	f107 0314 	add.w	r3, r7, #20
 800d066:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d06a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d06e:	f107 0308 	add.w	r3, r7, #8
 800d072:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d074:	4628      	mov	r0, r5
 800d076:	f002 f951 	bl	800f31c <SDIO_Init>
 800d07a:	4603      	mov	r3, r0
 800d07c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800d080:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d084:	2b00      	cmp	r3, #0
 800d086:	d001      	beq.n	800d08c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800d088:	2301      	movs	r3, #1
 800d08a:	e04f      	b.n	800d12c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800d08c:	4b29      	ldr	r3, [pc, #164]	; (800d134 <HAL_SD_InitCard+0xf8>)
 800d08e:	2200      	movs	r2, #0
 800d090:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	4618      	mov	r0, r3
 800d098:	f002 f989 	bl	800f3ae <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800d09c:	4b25      	ldr	r3, [pc, #148]	; (800d134 <HAL_SD_InitCard+0xf8>)
 800d09e:	2201      	movs	r2, #1
 800d0a0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800d0a2:	2002      	movs	r0, #2
 800d0a4:	f7f9 fe8e 	bl	8006dc4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f001 fb53 	bl	800e754 <SD_PowerON>
 800d0ae:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d0b0:	6a3b      	ldr	r3, [r7, #32]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d00b      	beq.n	800d0ce <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2201      	movs	r2, #1
 800d0ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0c2:	6a3b      	ldr	r3, [r7, #32]
 800d0c4:	431a      	orrs	r2, r3
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	e02e      	b.n	800d12c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d0ce:	6878      	ldr	r0, [r7, #4]
 800d0d0:	f001 fa72 	bl	800e5b8 <SD_InitCard>
 800d0d4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d0d6:	6a3b      	ldr	r3, [r7, #32]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d00b      	beq.n	800d0f4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2201      	movs	r2, #1
 800d0e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0e8:	6a3b      	ldr	r3, [r7, #32]
 800d0ea:	431a      	orrs	r2, r3
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	e01b      	b.n	800d12c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	f002 f9e8 	bl	800f4d2 <SDMMC_CmdBlockLength>
 800d102:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d104:	6a3b      	ldr	r3, [r7, #32]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d00f      	beq.n	800d12a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	4a0a      	ldr	r2, [pc, #40]	; (800d138 <HAL_SD_InitCard+0xfc>)
 800d110:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d116:	6a3b      	ldr	r3, [r7, #32]
 800d118:	431a      	orrs	r2, r3
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	2201      	movs	r2, #1
 800d122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d126:	2301      	movs	r3, #1
 800d128:	e000      	b.n	800d12c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800d12a:	2300      	movs	r3, #0
}
 800d12c:	4618      	mov	r0, r3
 800d12e:	3728      	adds	r7, #40	; 0x28
 800d130:	46bd      	mov	sp, r7
 800d132:	bdb0      	pop	{r4, r5, r7, pc}
 800d134:	422580a0 	.word	0x422580a0
 800d138:	004005ff 	.word	0x004005ff

0800d13c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b092      	sub	sp, #72	; 0x48
 800d140:	af00      	add	r7, sp, #0
 800d142:	60f8      	str	r0, [r7, #12]
 800d144:	60b9      	str	r1, [r7, #8]
 800d146:	607a      	str	r2, [r7, #4]
 800d148:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d14a:	f7f9 fe2f 	bl	8006dac <HAL_GetTick>
 800d14e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800d154:	68bb      	ldr	r3, [r7, #8]
 800d156:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d107      	bne.n	800d16e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d162:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d16a:	2301      	movs	r3, #1
 800d16c:	e1bd      	b.n	800d4ea <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d174:	b2db      	uxtb	r3, r3
 800d176:	2b01      	cmp	r3, #1
 800d178:	f040 81b0 	bne.w	800d4dc <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	2200      	movs	r2, #0
 800d180:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d182:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	441a      	add	r2, r3
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d907      	bls.n	800d1a0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d194:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d19c:	2301      	movs	r3, #1
 800d19e:	e1a4      	b.n	800d4ea <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	2203      	movs	r2, #3
 800d1a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1b4:	2b01      	cmp	r3, #1
 800d1b6:	d002      	beq.n	800d1be <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800d1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ba:	025b      	lsls	r3, r3, #9
 800d1bc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d1be:	f04f 33ff 	mov.w	r3, #4294967295
 800d1c2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	025b      	lsls	r3, r3, #9
 800d1c8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d1ca:	2390      	movs	r3, #144	; 0x90
 800d1cc:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d1ce:	2302      	movs	r3, #2
 800d1d0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	f107 0214 	add.w	r2, r7, #20
 800d1e2:	4611      	mov	r1, r2
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f002 f948 	bl	800f47a <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	2b01      	cmp	r3, #1
 800d1ee:	d90a      	bls.n	800d206 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	2202      	movs	r2, #2
 800d1f4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f002 f9ac 	bl	800f55a <SDMMC_CmdReadMultiBlock>
 800d202:	6478      	str	r0, [r7, #68]	; 0x44
 800d204:	e009      	b.n	800d21a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2201      	movs	r2, #1
 800d20a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d212:	4618      	mov	r0, r3
 800d214:	f002 f97f 	bl	800f516 <SDMMC_CmdReadSingleBlock>
 800d218:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d21a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d012      	beq.n	800d246 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	4a7a      	ldr	r2, [pc, #488]	; (800d410 <HAL_SD_ReadBlocks+0x2d4>)
 800d226:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d22c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d22e:	431a      	orrs	r2, r3
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	2201      	movs	r2, #1
 800d238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	2200      	movs	r2, #0
 800d240:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d242:	2301      	movs	r3, #1
 800d244:	e151      	b.n	800d4ea <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800d246:	69bb      	ldr	r3, [r7, #24]
 800d248:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800d24a:	e061      	b.n	800d310 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d252:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d256:	2b00      	cmp	r3, #0
 800d258:	d03c      	beq.n	800d2d4 <HAL_SD_ReadBlocks+0x198>
 800d25a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d039      	beq.n	800d2d4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800d260:	2300      	movs	r3, #0
 800d262:	643b      	str	r3, [r7, #64]	; 0x40
 800d264:	e033      	b.n	800d2ce <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	4618      	mov	r0, r3
 800d26c:	f002 f881 	bl	800f372 <SDIO_ReadFIFO>
 800d270:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800d272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d274:	b2da      	uxtb	r2, r3
 800d276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d278:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d27a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d27c:	3301      	adds	r3, #1
 800d27e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d282:	3b01      	subs	r3, #1
 800d284:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800d286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d288:	0a1b      	lsrs	r3, r3, #8
 800d28a:	b2da      	uxtb	r2, r3
 800d28c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d28e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d292:	3301      	adds	r3, #1
 800d294:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d298:	3b01      	subs	r3, #1
 800d29a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800d29c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d29e:	0c1b      	lsrs	r3, r3, #16
 800d2a0:	b2da      	uxtb	r2, r3
 800d2a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2a4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d2a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2a8:	3301      	adds	r3, #1
 800d2aa:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d2ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2ae:	3b01      	subs	r3, #1
 800d2b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800d2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2b4:	0e1b      	lsrs	r3, r3, #24
 800d2b6:	b2da      	uxtb	r2, r3
 800d2b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2ba:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d2bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2be:	3301      	adds	r3, #1
 800d2c0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d2c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2c4:	3b01      	subs	r3, #1
 800d2c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800d2c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2ca:	3301      	adds	r3, #1
 800d2cc:	643b      	str	r3, [r7, #64]	; 0x40
 800d2ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2d0:	2b07      	cmp	r3, #7
 800d2d2:	d9c8      	bls.n	800d266 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d2d4:	f7f9 fd6a 	bl	8006dac <HAL_GetTick>
 800d2d8:	4602      	mov	r2, r0
 800d2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2dc:	1ad3      	subs	r3, r2, r3
 800d2de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d2e0:	429a      	cmp	r2, r3
 800d2e2:	d902      	bls.n	800d2ea <HAL_SD_ReadBlocks+0x1ae>
 800d2e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d112      	bne.n	800d310 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	4a48      	ldr	r2, [pc, #288]	; (800d410 <HAL_SD_ReadBlocks+0x2d4>)
 800d2f0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2f6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	2201      	movs	r2, #1
 800d302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	2200      	movs	r2, #0
 800d30a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800d30c:	2303      	movs	r3, #3
 800d30e:	e0ec      	b.n	800d4ea <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d316:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d096      	beq.n	800d24c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d022      	beq.n	800d372 <HAL_SD_ReadBlocks+0x236>
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	2b01      	cmp	r3, #1
 800d330:	d91f      	bls.n	800d372 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d336:	2b03      	cmp	r3, #3
 800d338:	d01b      	beq.n	800d372 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	4618      	mov	r0, r3
 800d340:	f002 f972 	bl	800f628 <SDMMC_CmdStopTransfer>
 800d344:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d012      	beq.n	800d372 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	4a2f      	ldr	r2, [pc, #188]	; (800d410 <HAL_SD_ReadBlocks+0x2d4>)
 800d352:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d35a:	431a      	orrs	r2, r3
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	2201      	movs	r2, #1
 800d364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	2200      	movs	r2, #0
 800d36c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800d36e:	2301      	movs	r3, #1
 800d370:	e0bb      	b.n	800d4ea <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d378:	f003 0308 	and.w	r3, r3, #8
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d012      	beq.n	800d3a6 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	4a22      	ldr	r2, [pc, #136]	; (800d410 <HAL_SD_ReadBlocks+0x2d4>)
 800d386:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d38c:	f043 0208 	orr.w	r2, r3, #8
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	2201      	movs	r2, #1
 800d398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	2200      	movs	r2, #0
 800d3a0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	e0a1      	b.n	800d4ea <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3ac:	f003 0302 	and.w	r3, r3, #2
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d012      	beq.n	800d3da <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	4a15      	ldr	r2, [pc, #84]	; (800d410 <HAL_SD_ReadBlocks+0x2d4>)
 800d3ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3c0:	f043 0202 	orr.w	r2, r3, #2
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	2201      	movs	r2, #1
 800d3cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	e087      	b.n	800d4ea <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3e0:	f003 0320 	and.w	r3, r3, #32
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d064      	beq.n	800d4b2 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	4a08      	ldr	r2, [pc, #32]	; (800d410 <HAL_SD_ReadBlocks+0x2d4>)
 800d3ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3f4:	f043 0220 	orr.w	r2, r3, #32
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	2201      	movs	r2, #1
 800d400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	2200      	movs	r2, #0
 800d408:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d40a:	2301      	movs	r3, #1
 800d40c:	e06d      	b.n	800d4ea <HAL_SD_ReadBlocks+0x3ae>
 800d40e:	bf00      	nop
 800d410:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	4618      	mov	r0, r3
 800d41a:	f001 ffaa 	bl	800f372 <SDIO_ReadFIFO>
 800d41e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800d420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d422:	b2da      	uxtb	r2, r3
 800d424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d426:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d42a:	3301      	adds	r3, #1
 800d42c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800d42e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d430:	3b01      	subs	r3, #1
 800d432:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800d434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d436:	0a1b      	lsrs	r3, r3, #8
 800d438:	b2da      	uxtb	r2, r3
 800d43a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d43c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d43e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d440:	3301      	adds	r3, #1
 800d442:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800d444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d446:	3b01      	subs	r3, #1
 800d448:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800d44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d44c:	0c1b      	lsrs	r3, r3, #16
 800d44e:	b2da      	uxtb	r2, r3
 800d450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d452:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d456:	3301      	adds	r3, #1
 800d458:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800d45a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d45c:	3b01      	subs	r3, #1
 800d45e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800d460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d462:	0e1b      	lsrs	r3, r3, #24
 800d464:	b2da      	uxtb	r2, r3
 800d466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d468:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d46a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d46c:	3301      	adds	r3, #1
 800d46e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800d470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d472:	3b01      	subs	r3, #1
 800d474:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d476:	f7f9 fc99 	bl	8006dac <HAL_GetTick>
 800d47a:	4602      	mov	r2, r0
 800d47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d47e:	1ad3      	subs	r3, r2, r3
 800d480:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d482:	429a      	cmp	r2, r3
 800d484:	d902      	bls.n	800d48c <HAL_SD_ReadBlocks+0x350>
 800d486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d112      	bne.n	800d4b2 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	4a18      	ldr	r2, [pc, #96]	; (800d4f4 <HAL_SD_ReadBlocks+0x3b8>)
 800d492:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d498:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	2201      	movs	r2, #1
 800d4a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	e01b      	b.n	800d4ea <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d002      	beq.n	800d4c6 <HAL_SD_ReadBlocks+0x38a>
 800d4c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d1a6      	bne.n	800d414 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	f240 523a 	movw	r2, #1338	; 0x53a
 800d4ce:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	2201      	movs	r2, #1
 800d4d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	e006      	b.n	800d4ea <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4e0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d4e8:	2301      	movs	r3, #1
  }
}
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	3748      	adds	r7, #72	; 0x48
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}
 800d4f2:	bf00      	nop
 800d4f4:	004005ff 	.word	0x004005ff

0800d4f8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b092      	sub	sp, #72	; 0x48
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	60f8      	str	r0, [r7, #12]
 800d500:	60b9      	str	r1, [r7, #8]
 800d502:	607a      	str	r2, [r7, #4]
 800d504:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d506:	f7f9 fc51 	bl	8006dac <HAL_GetTick>
 800d50a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800d514:	68bb      	ldr	r3, [r7, #8]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d107      	bne.n	800d52a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d51e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d526:	2301      	movs	r3, #1
 800d528:	e165      	b.n	800d7f6 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d530:	b2db      	uxtb	r3, r3
 800d532:	2b01      	cmp	r3, #1
 800d534:	f040 8158 	bne.w	800d7e8 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	2200      	movs	r2, #0
 800d53c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d53e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	441a      	add	r2, r3
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d548:	429a      	cmp	r2, r3
 800d54a:	d907      	bls.n	800d55c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d550:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d558:	2301      	movs	r3, #1
 800d55a:	e14c      	b.n	800d7f6 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	2203      	movs	r2, #3
 800d560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	2200      	movs	r2, #0
 800d56a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d570:	2b01      	cmp	r3, #1
 800d572:	d002      	beq.n	800d57a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800d574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d576:	025b      	lsls	r3, r3, #9
 800d578:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d57a:	f04f 33ff 	mov.w	r3, #4294967295
 800d57e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	025b      	lsls	r3, r3, #9
 800d584:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d586:	2390      	movs	r3, #144	; 0x90
 800d588:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d58a:	2300      	movs	r3, #0
 800d58c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d58e:	2300      	movs	r3, #0
 800d590:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800d592:	2301      	movs	r3, #1
 800d594:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	f107 0218 	add.w	r2, r7, #24
 800d59e:	4611      	mov	r1, r2
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	f001 ff6a 	bl	800f47a <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	2b01      	cmp	r3, #1
 800d5aa:	d90a      	bls.n	800d5c2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	2220      	movs	r2, #32
 800d5b0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	f002 f812 	bl	800f5e2 <SDMMC_CmdWriteMultiBlock>
 800d5be:	6478      	str	r0, [r7, #68]	; 0x44
 800d5c0:	e009      	b.n	800d5d6 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	2210      	movs	r2, #16
 800d5c6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f001 ffe5 	bl	800f59e <SDMMC_CmdWriteSingleBlock>
 800d5d4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d5d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d012      	beq.n	800d602 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	4a87      	ldr	r2, [pc, #540]	; (800d800 <HAL_SD_WriteBlocks+0x308>)
 800d5e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5ea:	431a      	orrs	r2, r3
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	2201      	movs	r2, #1
 800d5f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d5fe:	2301      	movs	r3, #1
 800d600:	e0f9      	b.n	800d7f6 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800d602:	69fb      	ldr	r3, [r7, #28]
 800d604:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800d606:	e065      	b.n	800d6d4 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d60e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d612:	2b00      	cmp	r3, #0
 800d614:	d040      	beq.n	800d698 <HAL_SD_WriteBlocks+0x1a0>
 800d616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d03d      	beq.n	800d698 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800d61c:	2300      	movs	r3, #0
 800d61e:	643b      	str	r3, [r7, #64]	; 0x40
 800d620:	e037      	b.n	800d692 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800d622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d62a:	3301      	adds	r3, #1
 800d62c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d62e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d630:	3b01      	subs	r3, #1
 800d632:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800d634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d636:	781b      	ldrb	r3, [r3, #0]
 800d638:	021a      	lsls	r2, r3, #8
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	4313      	orrs	r3, r2
 800d63e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d642:	3301      	adds	r3, #1
 800d644:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d648:	3b01      	subs	r3, #1
 800d64a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800d64c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d64e:	781b      	ldrb	r3, [r3, #0]
 800d650:	041a      	lsls	r2, r3, #16
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	4313      	orrs	r3, r2
 800d656:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d65a:	3301      	adds	r3, #1
 800d65c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d65e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d660:	3b01      	subs	r3, #1
 800d662:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800d664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d666:	781b      	ldrb	r3, [r3, #0]
 800d668:	061a      	lsls	r2, r3, #24
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	4313      	orrs	r3, r2
 800d66e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d672:	3301      	adds	r3, #1
 800d674:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d678:	3b01      	subs	r3, #1
 800d67a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	f107 0214 	add.w	r2, r7, #20
 800d684:	4611      	mov	r1, r2
 800d686:	4618      	mov	r0, r3
 800d688:	f001 fe80 	bl	800f38c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800d68c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d68e:	3301      	adds	r3, #1
 800d690:	643b      	str	r3, [r7, #64]	; 0x40
 800d692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d694:	2b07      	cmp	r3, #7
 800d696:	d9c4      	bls.n	800d622 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d698:	f7f9 fb88 	bl	8006dac <HAL_GetTick>
 800d69c:	4602      	mov	r2, r0
 800d69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6a0:	1ad3      	subs	r3, r2, r3
 800d6a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d6a4:	429a      	cmp	r2, r3
 800d6a6:	d902      	bls.n	800d6ae <HAL_SD_WriteBlocks+0x1b6>
 800d6a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d112      	bne.n	800d6d4 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	4a53      	ldr	r2, [pc, #332]	; (800d800 <HAL_SD_WriteBlocks+0x308>)
 800d6b4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d6bc:	431a      	orrs	r2, r3
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	2201      	movs	r2, #1
 800d6c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800d6d0:	2303      	movs	r3, #3
 800d6d2:	e090      	b.n	800d7f6 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6da:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d092      	beq.n	800d608 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d022      	beq.n	800d736 <HAL_SD_WriteBlocks+0x23e>
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	2b01      	cmp	r3, #1
 800d6f4:	d91f      	bls.n	800d736 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6fa:	2b03      	cmp	r3, #3
 800d6fc:	d01b      	beq.n	800d736 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	4618      	mov	r0, r3
 800d704:	f001 ff90 	bl	800f628 <SDMMC_CmdStopTransfer>
 800d708:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d70a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d012      	beq.n	800d736 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	4a3a      	ldr	r2, [pc, #232]	; (800d800 <HAL_SD_WriteBlocks+0x308>)
 800d716:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d71c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d71e:	431a      	orrs	r2, r3
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	2201      	movs	r2, #1
 800d728:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	2200      	movs	r2, #0
 800d730:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800d732:	2301      	movs	r3, #1
 800d734:	e05f      	b.n	800d7f6 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d73c:	f003 0308 	and.w	r3, r3, #8
 800d740:	2b00      	cmp	r3, #0
 800d742:	d012      	beq.n	800d76a <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	4a2d      	ldr	r2, [pc, #180]	; (800d800 <HAL_SD_WriteBlocks+0x308>)
 800d74a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d750:	f043 0208 	orr.w	r2, r3, #8
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	2201      	movs	r2, #1
 800d75c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	2200      	movs	r2, #0
 800d764:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d766:	2301      	movs	r3, #1
 800d768:	e045      	b.n	800d7f6 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d770:	f003 0302 	and.w	r3, r3, #2
 800d774:	2b00      	cmp	r3, #0
 800d776:	d012      	beq.n	800d79e <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	4a20      	ldr	r2, [pc, #128]	; (800d800 <HAL_SD_WriteBlocks+0x308>)
 800d77e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d784:	f043 0202 	orr.w	r2, r3, #2
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	2201      	movs	r2, #1
 800d790:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	2200      	movs	r2, #0
 800d798:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d79a:	2301      	movs	r3, #1
 800d79c:	e02b      	b.n	800d7f6 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7a4:	f003 0310 	and.w	r3, r3, #16
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d012      	beq.n	800d7d2 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	4a13      	ldr	r2, [pc, #76]	; (800d800 <HAL_SD_WriteBlocks+0x308>)
 800d7b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7b8:	f043 0210 	orr.w	r2, r3, #16
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	2201      	movs	r2, #1
 800d7c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	e011      	b.n	800d7f6 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	f240 523a 	movw	r2, #1338	; 0x53a
 800d7da:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	2201      	movs	r2, #1
 800d7e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	e006      	b.n	800d7f6 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7ec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d7f4:	2301      	movs	r3, #1
  }
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3748      	adds	r7, #72	; 0x48
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	bd80      	pop	{r7, pc}
 800d7fe:	bf00      	nop
 800d800:	004005ff 	.word	0x004005ff

0800d804 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d804:	b580      	push	{r7, lr}
 800d806:	b08c      	sub	sp, #48	; 0x30
 800d808:	af00      	add	r7, sp, #0
 800d80a:	60f8      	str	r0, [r7, #12]
 800d80c:	60b9      	str	r1, [r7, #8]
 800d80e:	607a      	str	r2, [r7, #4]
 800d810:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d816:	68bb      	ldr	r3, [r7, #8]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d107      	bne.n	800d82c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d820:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d828:	2301      	movs	r3, #1
 800d82a:	e0be      	b.n	800d9aa <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d832:	b2db      	uxtb	r3, r3
 800d834:	2b01      	cmp	r3, #1
 800d836:	f040 80b7 	bne.w	800d9a8 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	2200      	movs	r2, #0
 800d83e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d840:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	441a      	add	r2, r3
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d84a:	429a      	cmp	r2, r3
 800d84c:	d907      	bls.n	800d85e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d852:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d85a:	2301      	movs	r3, #1
 800d85c:	e0a5      	b.n	800d9aa <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	2203      	movs	r2, #3
 800d862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	2200      	movs	r2, #0
 800d86c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d87c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d882:	4a4c      	ldr	r2, [pc, #304]	; (800d9b4 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 800d884:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d88a:	4a4b      	ldr	r2, [pc, #300]	; (800d9b8 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800d88c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d892:	2200      	movs	r2, #0
 800d894:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d89a:	2200      	movs	r2, #0
 800d89c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8ae:	689a      	ldr	r2, [r3, #8]
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	430a      	orrs	r2, r1
 800d8b8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	3380      	adds	r3, #128	; 0x80
 800d8c4:	4619      	mov	r1, r3
 800d8c6:	68ba      	ldr	r2, [r7, #8]
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	025b      	lsls	r3, r3, #9
 800d8cc:	089b      	lsrs	r3, r3, #2
 800d8ce:	f7fa ff17 	bl	8008700 <HAL_DMA_Start_IT>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d017      	beq.n	800d908 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800d8e6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	4a33      	ldr	r2, [pc, #204]	; (800d9bc <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800d8ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	2201      	movs	r2, #1
 800d900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d904:	2301      	movs	r3, #1
 800d906:	e050      	b.n	800d9aa <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800d908:	4b2d      	ldr	r3, [pc, #180]	; (800d9c0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800d90a:	2201      	movs	r2, #1
 800d90c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d912:	2b01      	cmp	r3, #1
 800d914:	d002      	beq.n	800d91c <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 800d916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d918:	025b      	lsls	r3, r3, #9
 800d91a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d91c:	f04f 33ff 	mov.w	r3, #4294967295
 800d920:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	025b      	lsls	r3, r3, #9
 800d926:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d928:	2390      	movs	r3, #144	; 0x90
 800d92a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d92c:	2302      	movs	r3, #2
 800d92e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d930:	2300      	movs	r3, #0
 800d932:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d934:	2301      	movs	r3, #1
 800d936:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	f107 0210 	add.w	r2, r7, #16
 800d940:	4611      	mov	r1, r2
 800d942:	4618      	mov	r0, r3
 800d944:	f001 fd99 	bl	800f47a <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	2b01      	cmp	r3, #1
 800d94c:	d90a      	bls.n	800d964 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	2282      	movs	r2, #130	; 0x82
 800d952:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d95a:	4618      	mov	r0, r3
 800d95c:	f001 fdfd 	bl	800f55a <SDMMC_CmdReadMultiBlock>
 800d960:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d962:	e009      	b.n	800d978 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	2281      	movs	r2, #129	; 0x81
 800d968:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d970:	4618      	mov	r0, r3
 800d972:	f001 fdd0 	bl	800f516 <SDMMC_CmdReadSingleBlock>
 800d976:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d012      	beq.n	800d9a4 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	4a0e      	ldr	r2, [pc, #56]	; (800d9bc <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800d984:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d98c:	431a      	orrs	r2, r3
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	2201      	movs	r2, #1
 800d996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	2200      	movs	r2, #0
 800d99e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	e002      	b.n	800d9aa <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	e000      	b.n	800d9aa <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 800d9a8:	2302      	movs	r3, #2
  }
}
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	3730      	adds	r7, #48	; 0x30
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}
 800d9b2:	bf00      	nop
 800d9b4:	0800e3c7 	.word	0x0800e3c7
 800d9b8:	0800e439 	.word	0x0800e439
 800d9bc:	004005ff 	.word	0x004005ff
 800d9c0:	4225858c 	.word	0x4225858c

0800d9c4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b08c      	sub	sp, #48	; 0x30
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	60f8      	str	r0, [r7, #12]
 800d9cc:	60b9      	str	r1, [r7, #8]
 800d9ce:	607a      	str	r2, [r7, #4]
 800d9d0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d107      	bne.n	800d9ec <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9e0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	e0c1      	b.n	800db70 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d9f2:	b2db      	uxtb	r3, r3
 800d9f4:	2b01      	cmp	r3, #1
 800d9f6:	f040 80ba 	bne.w	800db6e <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800da00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	441a      	add	r2, r3
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800da0a:	429a      	cmp	r2, r3
 800da0c:	d907      	bls.n	800da1e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da12:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800da1a:	2301      	movs	r3, #1
 800da1c:	e0a8      	b.n	800db70 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	2203      	movs	r2, #3
 800da22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	2200      	movs	r2, #0
 800da2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	f042 021a 	orr.w	r2, r2, #26
 800da3c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da42:	4a4d      	ldr	r2, [pc, #308]	; (800db78 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 800da44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da4a:	4a4c      	ldr	r2, [pc, #304]	; (800db7c <HAL_SD_WriteBlocks_DMA+0x1b8>)
 800da4c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da52:	2200      	movs	r2, #0
 800da54:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da5a:	2b01      	cmp	r3, #1
 800da5c:	d002      	beq.n	800da64 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800da5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da60:	025b      	lsls	r3, r3, #9
 800da62:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	2b01      	cmp	r3, #1
 800da68:	d90a      	bls.n	800da80 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	22a0      	movs	r2, #160	; 0xa0
 800da6e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800da76:	4618      	mov	r0, r3
 800da78:	f001 fdb3 	bl	800f5e2 <SDMMC_CmdWriteMultiBlock>
 800da7c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800da7e:	e009      	b.n	800da94 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	2290      	movs	r2, #144	; 0x90
 800da84:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800da8c:	4618      	mov	r0, r3
 800da8e:	f001 fd86 	bl	800f59e <SDMMC_CmdWriteSingleBlock>
 800da92:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800da94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da96:	2b00      	cmp	r3, #0
 800da98:	d012      	beq.n	800dac0 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	4a38      	ldr	r2, [pc, #224]	; (800db80 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800daa0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800daa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa8:	431a      	orrs	r2, r3
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	2201      	movs	r2, #1
 800dab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	2200      	movs	r2, #0
 800daba:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800dabc:	2301      	movs	r3, #1
 800dabe:	e057      	b.n	800db70 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800dac0:	4b30      	ldr	r3, [pc, #192]	; (800db84 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800dac2:	2201      	movs	r2, #1
 800dac4:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800daca:	2240      	movs	r2, #64	; 0x40
 800dacc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dade:	689a      	ldr	r2, [r3, #8]
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	430a      	orrs	r2, r1
 800dae8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800daee:	68b9      	ldr	r1, [r7, #8]
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	3380      	adds	r3, #128	; 0x80
 800daf6:	461a      	mov	r2, r3
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	025b      	lsls	r3, r3, #9
 800dafc:	089b      	lsrs	r3, r3, #2
 800dafe:	f7fa fdff 	bl	8008700 <HAL_DMA_Start_IT>
 800db02:	4603      	mov	r3, r0
 800db04:	2b00      	cmp	r3, #0
 800db06:	d01a      	beq.n	800db3e <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	f022 021a 	bic.w	r2, r2, #26
 800db16:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	4a18      	ldr	r2, [pc, #96]	; (800db80 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800db1e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db24:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	2201      	movs	r2, #1
 800db30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	2200      	movs	r2, #0
 800db38:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800db3a:	2301      	movs	r3, #1
 800db3c:	e018      	b.n	800db70 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800db3e:	f04f 33ff 	mov.w	r3, #4294967295
 800db42:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	025b      	lsls	r3, r3, #9
 800db48:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800db4a:	2390      	movs	r3, #144	; 0x90
 800db4c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800db4e:	2300      	movs	r3, #0
 800db50:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800db52:	2300      	movs	r3, #0
 800db54:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800db56:	2301      	movs	r3, #1
 800db58:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	f107 0210 	add.w	r2, r7, #16
 800db62:	4611      	mov	r1, r2
 800db64:	4618      	mov	r0, r3
 800db66:	f001 fc88 	bl	800f47a <SDIO_ConfigData>

      return HAL_OK;
 800db6a:	2300      	movs	r3, #0
 800db6c:	e000      	b.n	800db70 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 800db6e:	2302      	movs	r3, #2
  }
}
 800db70:	4618      	mov	r0, r3
 800db72:	3730      	adds	r7, #48	; 0x30
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}
 800db78:	0800e39d 	.word	0x0800e39d
 800db7c:	0800e439 	.word	0x0800e439
 800db80:	004005ff 	.word	0x004005ff
 800db84:	4225858c 	.word	0x4225858c

0800db88 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b084      	sub	sp, #16
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db94:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d008      	beq.n	800dbb6 <HAL_SD_IRQHandler+0x2e>
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	f003 0308 	and.w	r3, r3, #8
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d003      	beq.n	800dbb6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	f000 ffef 	bl	800eb92 <SD_Read_IT>
 800dbb4:	e155      	b.n	800de62 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	f000 808f 	beq.w	800dce4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dbce:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbd6:	687a      	ldr	r2, [r7, #4]
 800dbd8:	6812      	ldr	r2, [r2, #0]
 800dbda:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800dbde:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800dbe2:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	f022 0201 	bic.w	r2, r2, #1
 800dbf2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	f003 0308 	and.w	r3, r3, #8
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d039      	beq.n	800dc72 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	f003 0302 	and.w	r3, r3, #2
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d104      	bne.n	800dc12 <HAL_SD_IRQHandler+0x8a>
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	f003 0320 	and.w	r3, r3, #32
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d011      	beq.n	800dc36 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	4618      	mov	r0, r3
 800dc18:	f001 fd06 	bl	800f628 <SDMMC_CmdStopTransfer>
 800dc1c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d008      	beq.n	800dc36 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	431a      	orrs	r2, r3
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f000 f91f 	bl	800de74 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	f240 523a 	movw	r2, #1338	; 0x53a
 800dc3e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2201      	movs	r2, #1
 800dc44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	f003 0301 	and.w	r3, r3, #1
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d104      	bne.n	800dc62 <HAL_SD_IRQHandler+0xda>
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f003 0302 	and.w	r3, r3, #2
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d003      	beq.n	800dc6a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f003 fdbc 	bl	80117e0 <HAL_SD_RxCpltCallback>
 800dc68:	e0fb      	b.n	800de62 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f003 fdae 	bl	80117cc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800dc70:	e0f7      	b.n	800de62 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	f000 80f2 	beq.w	800de62 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	f003 0320 	and.w	r3, r3, #32
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d011      	beq.n	800dcac <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f001 fccb 	bl	800f628 <SDMMC_CmdStopTransfer>
 800dc92:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d008      	beq.n	800dcac <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	431a      	orrs	r2, r3
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f000 f8e4 	bl	800de74 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	f003 0301 	and.w	r3, r3, #1
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	f040 80d5 	bne.w	800de62 <HAL_SD_IRQHandler+0x2da>
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	f003 0302 	and.w	r3, r3, #2
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	f040 80cf 	bne.w	800de62 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	f022 0208 	bic.w	r2, r2, #8
 800dcd2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2201      	movs	r2, #1
 800dcd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	f003 fd75 	bl	80117cc <HAL_SD_TxCpltCallback>
}
 800dce2:	e0be      	b.n	800de62 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d008      	beq.n	800dd04 <HAL_SD_IRQHandler+0x17c>
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	f003 0308 	and.w	r3, r3, #8
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d003      	beq.n	800dd04 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f000 ff99 	bl	800ec34 <SD_Write_IT>
 800dd02:	e0ae      	b.n	800de62 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd0a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	f000 80a7 	beq.w	800de62 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd1a:	f003 0302 	and.w	r3, r3, #2
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d005      	beq.n	800dd2e <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd26:	f043 0202 	orr.w	r2, r3, #2
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd34:	f003 0308 	and.w	r3, r3, #8
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d005      	beq.n	800dd48 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd40:	f043 0208 	orr.w	r2, r3, #8
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd4e:	f003 0320 	and.w	r3, r3, #32
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d005      	beq.n	800dd62 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd5a:	f043 0220 	orr.w	r2, r3, #32
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd68:	f003 0310 	and.w	r3, r3, #16
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d005      	beq.n	800dd7c <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd74:	f043 0210 	orr.w	r2, r3, #16
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	f240 523a 	movw	r2, #1338	; 0x53a
 800dd84:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800dd94:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f001 fc44 	bl	800f628 <SDMMC_CmdStopTransfer>
 800dda0:	4602      	mov	r2, r0
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dda6:	431a      	orrs	r2, r3
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	f003 0308 	and.w	r3, r3, #8
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d00a      	beq.n	800ddcc <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2201      	movs	r2, #1
 800ddba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f000 f855 	bl	800de74 <HAL_SD_ErrorCallback>
}
 800ddca:	e04a      	b.n	800de62 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d045      	beq.n	800de62 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	f003 0310 	and.w	r3, r3, #16
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d104      	bne.n	800ddea <HAL_SD_IRQHandler+0x262>
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	f003 0320 	and.w	r3, r3, #32
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d011      	beq.n	800de0e <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddee:	4a1f      	ldr	r2, [pc, #124]	; (800de6c <HAL_SD_IRQHandler+0x2e4>)
 800ddf0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f7fa fcda 	bl	80087b0 <HAL_DMA_Abort_IT>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d02f      	beq.n	800de62 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de06:	4618      	mov	r0, r3
 800de08:	f000 fb68 	bl	800e4dc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800de0c:	e029      	b.n	800de62 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	f003 0301 	and.w	r3, r3, #1
 800de14:	2b00      	cmp	r3, #0
 800de16:	d104      	bne.n	800de22 <HAL_SD_IRQHandler+0x29a>
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	f003 0302 	and.w	r3, r3, #2
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d011      	beq.n	800de46 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de26:	4a12      	ldr	r2, [pc, #72]	; (800de70 <HAL_SD_IRQHandler+0x2e8>)
 800de28:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de2e:	4618      	mov	r0, r3
 800de30:	f7fa fcbe 	bl	80087b0 <HAL_DMA_Abort_IT>
 800de34:	4603      	mov	r3, r0
 800de36:	2b00      	cmp	r3, #0
 800de38:	d013      	beq.n	800de62 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de3e:	4618      	mov	r0, r3
 800de40:	f000 fb83 	bl	800e54a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800de44:	e00d      	b.n	800de62 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2200      	movs	r2, #0
 800de4a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2201      	movs	r2, #1
 800de50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2200      	movs	r2, #0
 800de58:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	f003 fcac 	bl	80117b8 <HAL_SD_AbortCallback>
}
 800de60:	e7ff      	b.n	800de62 <HAL_SD_IRQHandler+0x2da>
 800de62:	bf00      	nop
 800de64:	3710      	adds	r7, #16
 800de66:	46bd      	mov	sp, r7
 800de68:	bd80      	pop	{r7, pc}
 800de6a:	bf00      	nop
 800de6c:	0800e4dd 	.word	0x0800e4dd
 800de70:	0800e54b 	.word	0x0800e54b

0800de74 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800de74:	b480      	push	{r7}
 800de76:	b083      	sub	sp, #12
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800de7c:	bf00      	nop
 800de7e:	370c      	adds	r7, #12
 800de80:	46bd      	mov	sp, r7
 800de82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de86:	4770      	bx	lr

0800de88 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800de88:	b480      	push	{r7}
 800de8a:	b083      	sub	sp, #12
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
 800de90:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de96:	0f9b      	lsrs	r3, r3, #30
 800de98:	b2da      	uxtb	r2, r3
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dea2:	0e9b      	lsrs	r3, r3, #26
 800dea4:	b2db      	uxtb	r3, r3
 800dea6:	f003 030f 	and.w	r3, r3, #15
 800deaa:	b2da      	uxtb	r2, r3
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800deb4:	0e1b      	lsrs	r3, r3, #24
 800deb6:	b2db      	uxtb	r3, r3
 800deb8:	f003 0303 	and.w	r3, r3, #3
 800debc:	b2da      	uxtb	r2, r3
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dec6:	0c1b      	lsrs	r3, r3, #16
 800dec8:	b2da      	uxtb	r2, r3
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ded2:	0a1b      	lsrs	r3, r3, #8
 800ded4:	b2da      	uxtb	r2, r3
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dede:	b2da      	uxtb	r2, r3
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dee8:	0d1b      	lsrs	r3, r3, #20
 800deea:	b29a      	uxth	r2, r3
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800def4:	0c1b      	lsrs	r3, r3, #16
 800def6:	b2db      	uxtb	r3, r3
 800def8:	f003 030f 	and.w	r3, r3, #15
 800defc:	b2da      	uxtb	r2, r3
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df06:	0bdb      	lsrs	r3, r3, #15
 800df08:	b2db      	uxtb	r3, r3
 800df0a:	f003 0301 	and.w	r3, r3, #1
 800df0e:	b2da      	uxtb	r2, r3
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df18:	0b9b      	lsrs	r3, r3, #14
 800df1a:	b2db      	uxtb	r3, r3
 800df1c:	f003 0301 	and.w	r3, r3, #1
 800df20:	b2da      	uxtb	r2, r3
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df2a:	0b5b      	lsrs	r3, r3, #13
 800df2c:	b2db      	uxtb	r3, r3
 800df2e:	f003 0301 	and.w	r3, r3, #1
 800df32:	b2da      	uxtb	r2, r3
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df3c:	0b1b      	lsrs	r3, r3, #12
 800df3e:	b2db      	uxtb	r3, r3
 800df40:	f003 0301 	and.w	r3, r3, #1
 800df44:	b2da      	uxtb	r2, r3
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	2200      	movs	r2, #0
 800df4e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df54:	2b00      	cmp	r3, #0
 800df56:	d163      	bne.n	800e020 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df5c:	009a      	lsls	r2, r3, #2
 800df5e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800df62:	4013      	ands	r3, r2
 800df64:	687a      	ldr	r2, [r7, #4]
 800df66:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800df68:	0f92      	lsrs	r2, r2, #30
 800df6a:	431a      	orrs	r2, r3
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df74:	0edb      	lsrs	r3, r3, #27
 800df76:	b2db      	uxtb	r3, r3
 800df78:	f003 0307 	and.w	r3, r3, #7
 800df7c:	b2da      	uxtb	r2, r3
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df86:	0e1b      	lsrs	r3, r3, #24
 800df88:	b2db      	uxtb	r3, r3
 800df8a:	f003 0307 	and.w	r3, r3, #7
 800df8e:	b2da      	uxtb	r2, r3
 800df90:	683b      	ldr	r3, [r7, #0]
 800df92:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df98:	0d5b      	lsrs	r3, r3, #21
 800df9a:	b2db      	uxtb	r3, r3
 800df9c:	f003 0307 	and.w	r3, r3, #7
 800dfa0:	b2da      	uxtb	r2, r3
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfaa:	0c9b      	lsrs	r3, r3, #18
 800dfac:	b2db      	uxtb	r3, r3
 800dfae:	f003 0307 	and.w	r3, r3, #7
 800dfb2:	b2da      	uxtb	r2, r3
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfbc:	0bdb      	lsrs	r3, r3, #15
 800dfbe:	b2db      	uxtb	r3, r3
 800dfc0:	f003 0307 	and.w	r3, r3, #7
 800dfc4:	b2da      	uxtb	r2, r3
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	691b      	ldr	r3, [r3, #16]
 800dfce:	1c5a      	adds	r2, r3, #1
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	7e1b      	ldrb	r3, [r3, #24]
 800dfd8:	b2db      	uxtb	r3, r3
 800dfda:	f003 0307 	and.w	r3, r3, #7
 800dfde:	3302      	adds	r3, #2
 800dfe0:	2201      	movs	r2, #1
 800dfe2:	fa02 f303 	lsl.w	r3, r2, r3
 800dfe6:	687a      	ldr	r2, [r7, #4]
 800dfe8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800dfea:	fb03 f202 	mul.w	r2, r3, r2
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	7a1b      	ldrb	r3, [r3, #8]
 800dff6:	b2db      	uxtb	r3, r3
 800dff8:	f003 030f 	and.w	r3, r3, #15
 800dffc:	2201      	movs	r2, #1
 800dffe:	409a      	lsls	r2, r3
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e008:	687a      	ldr	r2, [r7, #4]
 800e00a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800e00c:	0a52      	lsrs	r2, r2, #9
 800e00e:	fb03 f202 	mul.w	r2, r3, r2
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e01c:	661a      	str	r2, [r3, #96]	; 0x60
 800e01e:	e031      	b.n	800e084 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e024:	2b01      	cmp	r3, #1
 800e026:	d11d      	bne.n	800e064 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e02c:	041b      	lsls	r3, r3, #16
 800e02e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e036:	0c1b      	lsrs	r3, r3, #16
 800e038:	431a      	orrs	r2, r3
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	691b      	ldr	r3, [r3, #16]
 800e042:	3301      	adds	r3, #1
 800e044:	029a      	lsls	r2, r3, #10
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e058:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	661a      	str	r2, [r3, #96]	; 0x60
 800e062:	e00f      	b.n	800e084 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	4a58      	ldr	r2, [pc, #352]	; (800e1cc <HAL_SD_GetCardCSD+0x344>)
 800e06a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e070:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2201      	movs	r2, #1
 800e07c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e080:	2301      	movs	r3, #1
 800e082:	e09d      	b.n	800e1c0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e088:	0b9b      	lsrs	r3, r3, #14
 800e08a:	b2db      	uxtb	r3, r3
 800e08c:	f003 0301 	and.w	r3, r3, #1
 800e090:	b2da      	uxtb	r2, r3
 800e092:	683b      	ldr	r3, [r7, #0]
 800e094:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e09a:	09db      	lsrs	r3, r3, #7
 800e09c:	b2db      	uxtb	r3, r3
 800e09e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0a2:	b2da      	uxtb	r2, r3
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0ac:	b2db      	uxtb	r3, r3
 800e0ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0b2:	b2da      	uxtb	r2, r3
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0bc:	0fdb      	lsrs	r3, r3, #31
 800e0be:	b2da      	uxtb	r2, r3
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0c8:	0f5b      	lsrs	r3, r3, #29
 800e0ca:	b2db      	uxtb	r3, r3
 800e0cc:	f003 0303 	and.w	r3, r3, #3
 800e0d0:	b2da      	uxtb	r2, r3
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0da:	0e9b      	lsrs	r3, r3, #26
 800e0dc:	b2db      	uxtb	r3, r3
 800e0de:	f003 0307 	and.w	r3, r3, #7
 800e0e2:	b2da      	uxtb	r2, r3
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0ec:	0d9b      	lsrs	r3, r3, #22
 800e0ee:	b2db      	uxtb	r3, r3
 800e0f0:	f003 030f 	and.w	r3, r3, #15
 800e0f4:	b2da      	uxtb	r2, r3
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0fe:	0d5b      	lsrs	r3, r3, #21
 800e100:	b2db      	uxtb	r3, r3
 800e102:	f003 0301 	and.w	r3, r3, #1
 800e106:	b2da      	uxtb	r2, r3
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	2200      	movs	r2, #0
 800e112:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e11a:	0c1b      	lsrs	r3, r3, #16
 800e11c:	b2db      	uxtb	r3, r3
 800e11e:	f003 0301 	and.w	r3, r3, #1
 800e122:	b2da      	uxtb	r2, r3
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e12e:	0bdb      	lsrs	r3, r3, #15
 800e130:	b2db      	uxtb	r3, r3
 800e132:	f003 0301 	and.w	r3, r3, #1
 800e136:	b2da      	uxtb	r2, r3
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e142:	0b9b      	lsrs	r3, r3, #14
 800e144:	b2db      	uxtb	r3, r3
 800e146:	f003 0301 	and.w	r3, r3, #1
 800e14a:	b2da      	uxtb	r2, r3
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e156:	0b5b      	lsrs	r3, r3, #13
 800e158:	b2db      	uxtb	r3, r3
 800e15a:	f003 0301 	and.w	r3, r3, #1
 800e15e:	b2da      	uxtb	r2, r3
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e16a:	0b1b      	lsrs	r3, r3, #12
 800e16c:	b2db      	uxtb	r3, r3
 800e16e:	f003 0301 	and.w	r3, r3, #1
 800e172:	b2da      	uxtb	r2, r3
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e17e:	0a9b      	lsrs	r3, r3, #10
 800e180:	b2db      	uxtb	r3, r3
 800e182:	f003 0303 	and.w	r3, r3, #3
 800e186:	b2da      	uxtb	r2, r3
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e192:	0a1b      	lsrs	r3, r3, #8
 800e194:	b2db      	uxtb	r3, r3
 800e196:	f003 0303 	and.w	r3, r3, #3
 800e19a:	b2da      	uxtb	r2, r3
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1a6:	085b      	lsrs	r3, r3, #1
 800e1a8:	b2db      	uxtb	r3, r3
 800e1aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e1ae:	b2da      	uxtb	r2, r3
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800e1b6:	683b      	ldr	r3, [r7, #0]
 800e1b8:	2201      	movs	r2, #1
 800e1ba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e1be:	2300      	movs	r3, #0
}
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	370c      	adds	r7, #12
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ca:	4770      	bx	lr
 800e1cc:	004005ff 	.word	0x004005ff

0800e1d0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800e1d0:	b480      	push	{r7}
 800e1d2:	b083      	sub	sp, #12
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
 800e1d8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e21a:	2300      	movs	r3, #0
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	370c      	adds	r7, #12
 800e220:	46bd      	mov	sp, r7
 800e222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e226:	4770      	bx	lr

0800e228 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e228:	b5b0      	push	{r4, r5, r7, lr}
 800e22a:	b08e      	sub	sp, #56	; 0x38
 800e22c:	af04      	add	r7, sp, #16
 800e22e:	6078      	str	r0, [r7, #4]
 800e230:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e232:	2300      	movs	r3, #0
 800e234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2203      	movs	r2, #3
 800e23c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e244:	2b03      	cmp	r3, #3
 800e246:	d02e      	beq.n	800e2a6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e24e:	d106      	bne.n	800e25e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e254:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	639a      	str	r2, [r3, #56]	; 0x38
 800e25c:	e029      	b.n	800e2b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e264:	d10a      	bne.n	800e27c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e266:	6878      	ldr	r0, [r7, #4]
 800e268:	f000 fb2a 	bl	800e8c0 <SD_WideBus_Enable>
 800e26c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e272:	6a3b      	ldr	r3, [r7, #32]
 800e274:	431a      	orrs	r2, r3
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	639a      	str	r2, [r3, #56]	; 0x38
 800e27a:	e01a      	b.n	800e2b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800e27c:	683b      	ldr	r3, [r7, #0]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d10a      	bne.n	800e298 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	f000 fb67 	bl	800e956 <SD_WideBus_Disable>
 800e288:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e28e:	6a3b      	ldr	r3, [r7, #32]
 800e290:	431a      	orrs	r2, r3
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	639a      	str	r2, [r3, #56]	; 0x38
 800e296:	e00c      	b.n	800e2b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e29c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	639a      	str	r2, [r3, #56]	; 0x38
 800e2a4:	e005      	b.n	800e2b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2aa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d00b      	beq.n	800e2d2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	4a26      	ldr	r2, [pc, #152]	; (800e358 <HAL_SD_ConfigWideBusOperation+0x130>)
 800e2c0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2201      	movs	r2, #1
 800e2c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e2ca:	2301      	movs	r3, #1
 800e2cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e2d0:	e01f      	b.n	800e312 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	685b      	ldr	r3, [r3, #4]
 800e2d6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	689b      	ldr	r3, [r3, #8]
 800e2dc:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	68db      	ldr	r3, [r3, #12]
 800e2e2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	695b      	ldr	r3, [r3, #20]
 800e2ec:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	699b      	ldr	r3, [r3, #24]
 800e2f2:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681d      	ldr	r5, [r3, #0]
 800e2f8:	466c      	mov	r4, sp
 800e2fa:	f107 0314 	add.w	r3, r7, #20
 800e2fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e302:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e306:	f107 0308 	add.w	r3, r7, #8
 800e30a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e30c:	4628      	mov	r0, r5
 800e30e:	f001 f805 	bl	800f31c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e31a:	4618      	mov	r0, r3
 800e31c:	f001 f8d9 	bl	800f4d2 <SDMMC_CmdBlockLength>
 800e320:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e322:	6a3b      	ldr	r3, [r7, #32]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d00c      	beq.n	800e342 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	4a0a      	ldr	r2, [pc, #40]	; (800e358 <HAL_SD_ConfigWideBusOperation+0x130>)
 800e32e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e334:	6a3b      	ldr	r3, [r7, #32]
 800e336:	431a      	orrs	r2, r3
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e33c:	2301      	movs	r3, #1
 800e33e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	2201      	movs	r2, #1
 800e346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800e34a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e34e:	4618      	mov	r0, r3
 800e350:	3728      	adds	r7, #40	; 0x28
 800e352:	46bd      	mov	sp, r7
 800e354:	bdb0      	pop	{r4, r5, r7, pc}
 800e356:	bf00      	nop
 800e358:	004005ff 	.word	0x004005ff

0800e35c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b086      	sub	sp, #24
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e364:	2300      	movs	r3, #0
 800e366:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e368:	f107 030c 	add.w	r3, r7, #12
 800e36c:	4619      	mov	r1, r3
 800e36e:	6878      	ldr	r0, [r7, #4]
 800e370:	f000 fa7e 	bl	800e870 <SD_SendStatus>
 800e374:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e376:	697b      	ldr	r3, [r7, #20]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d005      	beq.n	800e388 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e380:	697b      	ldr	r3, [r7, #20]
 800e382:	431a      	orrs	r2, r3
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	0a5b      	lsrs	r3, r3, #9
 800e38c:	f003 030f 	and.w	r3, r3, #15
 800e390:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e392:	693b      	ldr	r3, [r7, #16]
}
 800e394:	4618      	mov	r0, r3
 800e396:	3718      	adds	r7, #24
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}

0800e39c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e39c:	b480      	push	{r7}
 800e39e:	b085      	sub	sp, #20
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3a8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e3b8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800e3ba:	bf00      	nop
 800e3bc:	3714      	adds	r7, #20
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c4:	4770      	bx	lr

0800e3c6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e3c6:	b580      	push	{r7, lr}
 800e3c8:	b084      	sub	sp, #16
 800e3ca:	af00      	add	r7, sp, #0
 800e3cc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3d2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3d8:	2b82      	cmp	r3, #130	; 0x82
 800e3da:	d111      	bne.n	800e400 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f001 f921 	bl	800f628 <SDMMC_CmdStopTransfer>
 800e3e6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d008      	beq.n	800e400 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	431a      	orrs	r2, r3
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800e3fa:	68f8      	ldr	r0, [r7, #12]
 800e3fc:	f7ff fd3a 	bl	800de74 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	f022 0208 	bic.w	r2, r2, #8
 800e40e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	f240 523a 	movw	r2, #1338	; 0x53a
 800e418:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	2201      	movs	r2, #1
 800e41e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	2200      	movs	r2, #0
 800e426:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800e428:	68f8      	ldr	r0, [r7, #12]
 800e42a:	f003 f9d9 	bl	80117e0 <HAL_SD_RxCpltCallback>
#endif
}
 800e42e:	bf00      	nop
 800e430:	3710      	adds	r7, #16
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
	...

0800e438 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b086      	sub	sp, #24
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e444:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800e446:	6878      	ldr	r0, [r7, #4]
 800e448:	f7fa fb5e 	bl	8008b08 <HAL_DMA_GetError>
 800e44c:	4603      	mov	r3, r0
 800e44e:	2b02      	cmp	r3, #2
 800e450:	d03e      	beq.n	800e4d0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800e452:	697b      	ldr	r3, [r7, #20]
 800e454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e458:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e45e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e460:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800e462:	693b      	ldr	r3, [r7, #16]
 800e464:	2b01      	cmp	r3, #1
 800e466:	d002      	beq.n	800e46e <SD_DMAError+0x36>
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	2b01      	cmp	r3, #1
 800e46c:	d12d      	bne.n	800e4ca <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	4a19      	ldr	r2, [pc, #100]	; (800e4d8 <SD_DMAError+0xa0>)
 800e474:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e47c:	697b      	ldr	r3, [r7, #20]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800e484:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800e486:	697b      	ldr	r3, [r7, #20]
 800e488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e48a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e48e:	697b      	ldr	r3, [r7, #20]
 800e490:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800e492:	6978      	ldr	r0, [r7, #20]
 800e494:	f7ff ff62 	bl	800e35c <HAL_SD_GetCardState>
 800e498:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e49a:	68bb      	ldr	r3, [r7, #8]
 800e49c:	2b06      	cmp	r3, #6
 800e49e:	d002      	beq.n	800e4a6 <SD_DMAError+0x6e>
 800e4a0:	68bb      	ldr	r3, [r7, #8]
 800e4a2:	2b05      	cmp	r3, #5
 800e4a4:	d10a      	bne.n	800e4bc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e4a6:	697b      	ldr	r3, [r7, #20]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f001 f8bc 	bl	800f628 <SDMMC_CmdStopTransfer>
 800e4b0:	4602      	mov	r2, r0
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4b6:	431a      	orrs	r2, r3
 800e4b8:	697b      	ldr	r3, [r7, #20]
 800e4ba:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800e4bc:	697b      	ldr	r3, [r7, #20]
 800e4be:	2201      	movs	r2, #1
 800e4c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e4c4:	697b      	ldr	r3, [r7, #20]
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800e4ca:	6978      	ldr	r0, [r7, #20]
 800e4cc:	f7ff fcd2 	bl	800de74 <HAL_SD_ErrorCallback>
#endif
  }
}
 800e4d0:	bf00      	nop
 800e4d2:	3718      	adds	r7, #24
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}
 800e4d8:	004005ff 	.word	0x004005ff

0800e4dc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b084      	sub	sp, #16
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4e8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	f240 523a 	movw	r2, #1338	; 0x53a
 800e4f2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800e4f4:	68f8      	ldr	r0, [r7, #12]
 800e4f6:	f7ff ff31 	bl	800e35c <HAL_SD_GetCardState>
 800e4fa:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	2201      	movs	r2, #1
 800e500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	2200      	movs	r2, #0
 800e508:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e50a:	68bb      	ldr	r3, [r7, #8]
 800e50c:	2b06      	cmp	r3, #6
 800e50e:	d002      	beq.n	800e516 <SD_DMATxAbort+0x3a>
 800e510:	68bb      	ldr	r3, [r7, #8]
 800e512:	2b05      	cmp	r3, #5
 800e514:	d10a      	bne.n	800e52c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	4618      	mov	r0, r3
 800e51c:	f001 f884 	bl	800f628 <SDMMC_CmdStopTransfer>
 800e520:	4602      	mov	r2, r0
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e526:	431a      	orrs	r2, r3
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e530:	2b00      	cmp	r3, #0
 800e532:	d103      	bne.n	800e53c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800e534:	68f8      	ldr	r0, [r7, #12]
 800e536:	f003 f93f 	bl	80117b8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800e53a:	e002      	b.n	800e542 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800e53c:	68f8      	ldr	r0, [r7, #12]
 800e53e:	f7ff fc99 	bl	800de74 <HAL_SD_ErrorCallback>
}
 800e542:	bf00      	nop
 800e544:	3710      	adds	r7, #16
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}

0800e54a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800e54a:	b580      	push	{r7, lr}
 800e54c:	b084      	sub	sp, #16
 800e54e:	af00      	add	r7, sp, #0
 800e550:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e556:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	f240 523a 	movw	r2, #1338	; 0x53a
 800e560:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800e562:	68f8      	ldr	r0, [r7, #12]
 800e564:	f7ff fefa 	bl	800e35c <HAL_SD_GetCardState>
 800e568:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	2201      	movs	r2, #1
 800e56e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	2200      	movs	r2, #0
 800e576:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e578:	68bb      	ldr	r3, [r7, #8]
 800e57a:	2b06      	cmp	r3, #6
 800e57c:	d002      	beq.n	800e584 <SD_DMARxAbort+0x3a>
 800e57e:	68bb      	ldr	r3, [r7, #8]
 800e580:	2b05      	cmp	r3, #5
 800e582:	d10a      	bne.n	800e59a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	4618      	mov	r0, r3
 800e58a:	f001 f84d 	bl	800f628 <SDMMC_CmdStopTransfer>
 800e58e:	4602      	mov	r2, r0
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e594:	431a      	orrs	r2, r3
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d103      	bne.n	800e5aa <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800e5a2:	68f8      	ldr	r0, [r7, #12]
 800e5a4:	f003 f908 	bl	80117b8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800e5a8:	e002      	b.n	800e5b0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800e5aa:	68f8      	ldr	r0, [r7, #12]
 800e5ac:	f7ff fc62 	bl	800de74 <HAL_SD_ErrorCallback>
}
 800e5b0:	bf00      	nop
 800e5b2:	3710      	adds	r7, #16
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}

0800e5b8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e5b8:	b5b0      	push	{r4, r5, r7, lr}
 800e5ba:	b094      	sub	sp, #80	; 0x50
 800e5bc:	af04      	add	r7, sp, #16
 800e5be:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800e5c0:	2301      	movs	r3, #1
 800e5c2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f000 fefe 	bl	800f3ca <SDIO_GetPowerState>
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d102      	bne.n	800e5da <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e5d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e5d8:	e0b8      	b.n	800e74c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5de:	2b03      	cmp	r3, #3
 800e5e0:	d02f      	beq.n	800e642 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f001 f928 	bl	800f83c <SDMMC_CmdSendCID>
 800e5ec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e5ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d001      	beq.n	800e5f8 <SD_InitCard+0x40>
    {
      return errorstate;
 800e5f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e5f6:	e0a9      	b.n	800e74c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	2100      	movs	r1, #0
 800e5fe:	4618      	mov	r0, r3
 800e600:	f000 ff28 	bl	800f454 <SDIO_GetResponse>
 800e604:	4602      	mov	r2, r0
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	2104      	movs	r1, #4
 800e610:	4618      	mov	r0, r3
 800e612:	f000 ff1f 	bl	800f454 <SDIO_GetResponse>
 800e616:	4602      	mov	r2, r0
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	2108      	movs	r1, #8
 800e622:	4618      	mov	r0, r3
 800e624:	f000 ff16 	bl	800f454 <SDIO_GetResponse>
 800e628:	4602      	mov	r2, r0
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	210c      	movs	r1, #12
 800e634:	4618      	mov	r0, r3
 800e636:	f000 ff0d 	bl	800f454 <SDIO_GetResponse>
 800e63a:	4602      	mov	r2, r0
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e646:	2b03      	cmp	r3, #3
 800e648:	d00d      	beq.n	800e666 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	f107 020e 	add.w	r2, r7, #14
 800e652:	4611      	mov	r1, r2
 800e654:	4618      	mov	r0, r3
 800e656:	f001 f92e 	bl	800f8b6 <SDMMC_CmdSetRelAdd>
 800e65a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e65c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d001      	beq.n	800e666 <SD_InitCard+0xae>
    {
      return errorstate;
 800e662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e664:	e072      	b.n	800e74c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e66a:	2b03      	cmp	r3, #3
 800e66c:	d036      	beq.n	800e6dc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e66e:	89fb      	ldrh	r3, [r7, #14]
 800e670:	461a      	mov	r2, r3
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681a      	ldr	r2, [r3, #0]
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e67e:	041b      	lsls	r3, r3, #16
 800e680:	4619      	mov	r1, r3
 800e682:	4610      	mov	r0, r2
 800e684:	f001 f8f8 	bl	800f878 <SDMMC_CmdSendCSD>
 800e688:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e68a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d001      	beq.n	800e694 <SD_InitCard+0xdc>
    {
      return errorstate;
 800e690:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e692:	e05b      	b.n	800e74c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	2100      	movs	r1, #0
 800e69a:	4618      	mov	r0, r3
 800e69c:	f000 feda 	bl	800f454 <SDIO_GetResponse>
 800e6a0:	4602      	mov	r2, r0
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	2104      	movs	r1, #4
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f000 fed1 	bl	800f454 <SDIO_GetResponse>
 800e6b2:	4602      	mov	r2, r0
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	2108      	movs	r1, #8
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f000 fec8 	bl	800f454 <SDIO_GetResponse>
 800e6c4:	4602      	mov	r2, r0
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	210c      	movs	r1, #12
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f000 febf 	bl	800f454 <SDIO_GetResponse>
 800e6d6:	4602      	mov	r2, r0
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	2104      	movs	r1, #4
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f000 feb6 	bl	800f454 <SDIO_GetResponse>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	0d1a      	lsrs	r2, r3, #20
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e6f0:	f107 0310 	add.w	r3, r7, #16
 800e6f4:	4619      	mov	r1, r3
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	f7ff fbc6 	bl	800de88 <HAL_SD_GetCardCSD>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d002      	beq.n	800e708 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e702:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e706:	e021      	b.n	800e74c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	6819      	ldr	r1, [r3, #0]
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e710:	041b      	lsls	r3, r3, #16
 800e712:	2200      	movs	r2, #0
 800e714:	461c      	mov	r4, r3
 800e716:	4615      	mov	r5, r2
 800e718:	4622      	mov	r2, r4
 800e71a:	462b      	mov	r3, r5
 800e71c:	4608      	mov	r0, r1
 800e71e:	f000 ffa5 	bl	800f66c <SDMMC_CmdSelDesel>
 800e722:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e726:	2b00      	cmp	r3, #0
 800e728:	d001      	beq.n	800e72e <SD_InitCard+0x176>
  {
    return errorstate;
 800e72a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e72c:	e00e      	b.n	800e74c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	681d      	ldr	r5, [r3, #0]
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	466c      	mov	r4, sp
 800e736:	f103 0210 	add.w	r2, r3, #16
 800e73a:	ca07      	ldmia	r2, {r0, r1, r2}
 800e73c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e740:	3304      	adds	r3, #4
 800e742:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e744:	4628      	mov	r0, r5
 800e746:	f000 fde9 	bl	800f31c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e74a:	2300      	movs	r3, #0
}
 800e74c:	4618      	mov	r0, r3
 800e74e:	3740      	adds	r7, #64	; 0x40
 800e750:	46bd      	mov	sp, r7
 800e752:	bdb0      	pop	{r4, r5, r7, pc}

0800e754 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b086      	sub	sp, #24
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e75c:	2300      	movs	r3, #0
 800e75e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800e760:	2300      	movs	r3, #0
 800e762:	617b      	str	r3, [r7, #20]
 800e764:	2300      	movs	r3, #0
 800e766:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	4618      	mov	r0, r3
 800e76e:	f000 ffa0 	bl	800f6b2 <SDMMC_CmdGoIdleState>
 800e772:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d001      	beq.n	800e77e <SD_PowerON+0x2a>
  {
    return errorstate;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	e072      	b.n	800e864 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	4618      	mov	r0, r3
 800e784:	f000 ffb3 	bl	800f6ee <SDMMC_CmdOperCond>
 800e788:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d00d      	beq.n	800e7ac <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	2200      	movs	r2, #0
 800e794:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	4618      	mov	r0, r3
 800e79c:	f000 ff89 	bl	800f6b2 <SDMMC_CmdGoIdleState>
 800e7a0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d004      	beq.n	800e7b2 <SD_PowerON+0x5e>
    {
      return errorstate;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	e05b      	b.n	800e864 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	2201      	movs	r2, #1
 800e7b0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e7b6:	2b01      	cmp	r3, #1
 800e7b8:	d137      	bne.n	800e82a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	2100      	movs	r1, #0
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f000 ffb3 	bl	800f72c <SDMMC_CmdAppCommand>
 800e7c6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d02d      	beq.n	800e82a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e7ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e7d2:	e047      	b.n	800e864 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	2100      	movs	r1, #0
 800e7da:	4618      	mov	r0, r3
 800e7dc:	f000 ffa6 	bl	800f72c <SDMMC_CmdAppCommand>
 800e7e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d001      	beq.n	800e7ec <SD_PowerON+0x98>
    {
      return errorstate;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	e03b      	b.n	800e864 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	491e      	ldr	r1, [pc, #120]	; (800e86c <SD_PowerON+0x118>)
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	f000 ffbc 	bl	800f770 <SDMMC_CmdAppOperCommand>
 800e7f8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d002      	beq.n	800e806 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e800:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e804:	e02e      	b.n	800e864 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	2100      	movs	r1, #0
 800e80c:	4618      	mov	r0, r3
 800e80e:	f000 fe21 	bl	800f454 <SDIO_GetResponse>
 800e812:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e814:	697b      	ldr	r3, [r7, #20]
 800e816:	0fdb      	lsrs	r3, r3, #31
 800e818:	2b01      	cmp	r3, #1
 800e81a:	d101      	bne.n	800e820 <SD_PowerON+0xcc>
 800e81c:	2301      	movs	r3, #1
 800e81e:	e000      	b.n	800e822 <SD_PowerON+0xce>
 800e820:	2300      	movs	r3, #0
 800e822:	613b      	str	r3, [r7, #16]

    count++;
 800e824:	68bb      	ldr	r3, [r7, #8]
 800e826:	3301      	adds	r3, #1
 800e828:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e82a:	68bb      	ldr	r3, [r7, #8]
 800e82c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e830:	4293      	cmp	r3, r2
 800e832:	d802      	bhi.n	800e83a <SD_PowerON+0xe6>
 800e834:	693b      	ldr	r3, [r7, #16]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d0cc      	beq.n	800e7d4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e840:	4293      	cmp	r3, r2
 800e842:	d902      	bls.n	800e84a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e844:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e848:	e00c      	b.n	800e864 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e84a:	697b      	ldr	r3, [r7, #20]
 800e84c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e850:	2b00      	cmp	r3, #0
 800e852:	d003      	beq.n	800e85c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	2201      	movs	r2, #1
 800e858:	645a      	str	r2, [r3, #68]	; 0x44
 800e85a:	e002      	b.n	800e862 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2200      	movs	r2, #0
 800e860:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e862:	2300      	movs	r3, #0
}
 800e864:	4618      	mov	r0, r3
 800e866:	3718      	adds	r7, #24
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}
 800e86c:	c1100000 	.word	0xc1100000

0800e870 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b084      	sub	sp, #16
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
 800e878:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e87a:	683b      	ldr	r3, [r7, #0]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d102      	bne.n	800e886 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e880:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e884:	e018      	b.n	800e8b8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681a      	ldr	r2, [r3, #0]
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e88e:	041b      	lsls	r3, r3, #16
 800e890:	4619      	mov	r1, r3
 800e892:	4610      	mov	r0, r2
 800e894:	f001 f830 	bl	800f8f8 <SDMMC_CmdSendStatus>
 800e898:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d001      	beq.n	800e8a4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	e009      	b.n	800e8b8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	2100      	movs	r1, #0
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	f000 fdd2 	bl	800f454 <SDIO_GetResponse>
 800e8b0:	4602      	mov	r2, r0
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e8b6:	2300      	movs	r3, #0
}
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	3710      	adds	r7, #16
 800e8bc:	46bd      	mov	sp, r7
 800e8be:	bd80      	pop	{r7, pc}

0800e8c0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e8c0:	b580      	push	{r7, lr}
 800e8c2:	b086      	sub	sp, #24
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e8c8:	2300      	movs	r3, #0
 800e8ca:	60fb      	str	r3, [r7, #12]
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	2100      	movs	r1, #0
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f000 fdbc 	bl	800f454 <SDIO_GetResponse>
 800e8dc:	4603      	mov	r3, r0
 800e8de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e8e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e8e6:	d102      	bne.n	800e8ee <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e8e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e8ec:	e02f      	b.n	800e94e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e8ee:	f107 030c 	add.w	r3, r7, #12
 800e8f2:	4619      	mov	r1, r3
 800e8f4:	6878      	ldr	r0, [r7, #4]
 800e8f6:	f000 f879 	bl	800e9ec <SD_FindSCR>
 800e8fa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e8fc:	697b      	ldr	r3, [r7, #20]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d001      	beq.n	800e906 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e902:	697b      	ldr	r3, [r7, #20]
 800e904:	e023      	b.n	800e94e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e906:	693b      	ldr	r3, [r7, #16]
 800e908:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d01c      	beq.n	800e94a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681a      	ldr	r2, [r3, #0]
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e918:	041b      	lsls	r3, r3, #16
 800e91a:	4619      	mov	r1, r3
 800e91c:	4610      	mov	r0, r2
 800e91e:	f000 ff05 	bl	800f72c <SDMMC_CmdAppCommand>
 800e922:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e924:	697b      	ldr	r3, [r7, #20]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d001      	beq.n	800e92e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e92a:	697b      	ldr	r3, [r7, #20]
 800e92c:	e00f      	b.n	800e94e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	2102      	movs	r1, #2
 800e934:	4618      	mov	r0, r3
 800e936:	f000 ff3e 	bl	800f7b6 <SDMMC_CmdBusWidth>
 800e93a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e93c:	697b      	ldr	r3, [r7, #20]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d001      	beq.n	800e946 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e942:	697b      	ldr	r3, [r7, #20]
 800e944:	e003      	b.n	800e94e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e946:	2300      	movs	r3, #0
 800e948:	e001      	b.n	800e94e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e94a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e94e:	4618      	mov	r0, r3
 800e950:	3718      	adds	r7, #24
 800e952:	46bd      	mov	sp, r7
 800e954:	bd80      	pop	{r7, pc}

0800e956 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e956:	b580      	push	{r7, lr}
 800e958:	b086      	sub	sp, #24
 800e95a:	af00      	add	r7, sp, #0
 800e95c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e95e:	2300      	movs	r3, #0
 800e960:	60fb      	str	r3, [r7, #12]
 800e962:	2300      	movs	r3, #0
 800e964:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	2100      	movs	r1, #0
 800e96c:	4618      	mov	r0, r3
 800e96e:	f000 fd71 	bl	800f454 <SDIO_GetResponse>
 800e972:	4603      	mov	r3, r0
 800e974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e978:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e97c:	d102      	bne.n	800e984 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e97e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e982:	e02f      	b.n	800e9e4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e984:	f107 030c 	add.w	r3, r7, #12
 800e988:	4619      	mov	r1, r3
 800e98a:	6878      	ldr	r0, [r7, #4]
 800e98c:	f000 f82e 	bl	800e9ec <SD_FindSCR>
 800e990:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d001      	beq.n	800e99c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e998:	697b      	ldr	r3, [r7, #20]
 800e99a:	e023      	b.n	800e9e4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e99c:	693b      	ldr	r3, [r7, #16]
 800e99e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d01c      	beq.n	800e9e0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681a      	ldr	r2, [r3, #0]
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e9ae:	041b      	lsls	r3, r3, #16
 800e9b0:	4619      	mov	r1, r3
 800e9b2:	4610      	mov	r0, r2
 800e9b4:	f000 feba 	bl	800f72c <SDMMC_CmdAppCommand>
 800e9b8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d001      	beq.n	800e9c4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e9c0:	697b      	ldr	r3, [r7, #20]
 800e9c2:	e00f      	b.n	800e9e4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	2100      	movs	r1, #0
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f000 fef3 	bl	800f7b6 <SDMMC_CmdBusWidth>
 800e9d0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e9d2:	697b      	ldr	r3, [r7, #20]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d001      	beq.n	800e9dc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e9d8:	697b      	ldr	r3, [r7, #20]
 800e9da:	e003      	b.n	800e9e4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e9dc:	2300      	movs	r3, #0
 800e9de:	e001      	b.n	800e9e4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e9e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	3718      	adds	r7, #24
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bd80      	pop	{r7, pc}

0800e9ec <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e9ec:	b590      	push	{r4, r7, lr}
 800e9ee:	b08f      	sub	sp, #60	; 0x3c
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
 800e9f4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e9f6:	f7f8 f9d9 	bl	8006dac <HAL_GetTick>
 800e9fa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800ea00:	2300      	movs	r3, #0
 800ea02:	60bb      	str	r3, [r7, #8]
 800ea04:	2300      	movs	r3, #0
 800ea06:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	2108      	movs	r1, #8
 800ea12:	4618      	mov	r0, r3
 800ea14:	f000 fd5d 	bl	800f4d2 <SDMMC_CmdBlockLength>
 800ea18:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ea1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d001      	beq.n	800ea24 <SD_FindSCR+0x38>
  {
    return errorstate;
 800ea20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea22:	e0b2      	b.n	800eb8a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681a      	ldr	r2, [r3, #0]
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea2c:	041b      	lsls	r3, r3, #16
 800ea2e:	4619      	mov	r1, r3
 800ea30:	4610      	mov	r0, r2
 800ea32:	f000 fe7b 	bl	800f72c <SDMMC_CmdAppCommand>
 800ea36:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ea38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d001      	beq.n	800ea42 <SD_FindSCR+0x56>
  {
    return errorstate;
 800ea3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea40:	e0a3      	b.n	800eb8a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ea42:	f04f 33ff 	mov.w	r3, #4294967295
 800ea46:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ea48:	2308      	movs	r3, #8
 800ea4a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800ea4c:	2330      	movs	r3, #48	; 0x30
 800ea4e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800ea50:	2302      	movs	r3, #2
 800ea52:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800ea54:	2300      	movs	r3, #0
 800ea56:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800ea58:	2301      	movs	r3, #1
 800ea5a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	f107 0210 	add.w	r2, r7, #16
 800ea64:	4611      	mov	r1, r2
 800ea66:	4618      	mov	r0, r3
 800ea68:	f000 fd07 	bl	800f47a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	4618      	mov	r0, r3
 800ea72:	f000 fec2 	bl	800f7fa <SDMMC_CmdSendSCR>
 800ea76:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ea78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d02a      	beq.n	800ead4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800ea7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea80:	e083      	b.n	800eb8a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d00f      	beq.n	800eab0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	6819      	ldr	r1, [r3, #0]
 800ea94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea96:	009b      	lsls	r3, r3, #2
 800ea98:	f107 0208 	add.w	r2, r7, #8
 800ea9c:	18d4      	adds	r4, r2, r3
 800ea9e:	4608      	mov	r0, r1
 800eaa0:	f000 fc67 	bl	800f372 <SDIO_ReadFIFO>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	6023      	str	r3, [r4, #0]
      index++;
 800eaa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaaa:	3301      	adds	r3, #1
 800eaac:	637b      	str	r3, [r7, #52]	; 0x34
 800eaae:	e006      	b.n	800eabe <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eab6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d012      	beq.n	800eae4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800eabe:	f7f8 f975 	bl	8006dac <HAL_GetTick>
 800eac2:	4602      	mov	r2, r0
 800eac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eac6:	1ad3      	subs	r3, r2, r3
 800eac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eacc:	d102      	bne.n	800ead4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800eace:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ead2:	e05a      	b.n	800eb8a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eada:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d0cf      	beq.n	800ea82 <SD_FindSCR+0x96>
 800eae2:	e000      	b.n	800eae6 <SD_FindSCR+0xfa>
      break;
 800eae4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eaec:	f003 0308 	and.w	r3, r3, #8
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d005      	beq.n	800eb00 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	2208      	movs	r2, #8
 800eafa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800eafc:	2308      	movs	r3, #8
 800eafe:	e044      	b.n	800eb8a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb06:	f003 0302 	and.w	r3, r3, #2
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d005      	beq.n	800eb1a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	2202      	movs	r2, #2
 800eb14:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800eb16:	2302      	movs	r3, #2
 800eb18:	e037      	b.n	800eb8a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb20:	f003 0320 	and.w	r3, r3, #32
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d005      	beq.n	800eb34 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	2220      	movs	r2, #32
 800eb2e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800eb30:	2320      	movs	r3, #32
 800eb32:	e02a      	b.n	800eb8a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	f240 523a 	movw	r2, #1338	; 0x53a
 800eb3c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	061a      	lsls	r2, r3, #24
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	021b      	lsls	r3, r3, #8
 800eb46:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eb4a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	0a1b      	lsrs	r3, r3, #8
 800eb50:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800eb54:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	0e1b      	lsrs	r3, r3, #24
 800eb5a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800eb5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb5e:	601a      	str	r2, [r3, #0]
    scr++;
 800eb60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb62:	3304      	adds	r3, #4
 800eb64:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	061a      	lsls	r2, r3, #24
 800eb6a:	68bb      	ldr	r3, [r7, #8]
 800eb6c:	021b      	lsls	r3, r3, #8
 800eb6e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eb72:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	0a1b      	lsrs	r3, r3, #8
 800eb78:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800eb7c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	0e1b      	lsrs	r3, r3, #24
 800eb82:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800eb84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb86:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800eb88:	2300      	movs	r3, #0
}
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	373c      	adds	r7, #60	; 0x3c
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd90      	pop	{r4, r7, pc}

0800eb92 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800eb92:	b580      	push	{r7, lr}
 800eb94:	b086      	sub	sp, #24
 800eb96:	af00      	add	r7, sp, #0
 800eb98:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb9e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eba4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800eba6:	693b      	ldr	r3, [r7, #16]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d03f      	beq.n	800ec2c <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800ebac:	2300      	movs	r3, #0
 800ebae:	617b      	str	r3, [r7, #20]
 800ebb0:	e033      	b.n	800ec1a <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f000 fbdb 	bl	800f372 <SDIO_ReadFIFO>
 800ebbc:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800ebbe:	68bb      	ldr	r3, [r7, #8]
 800ebc0:	b2da      	uxtb	r2, r3
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	3301      	adds	r3, #1
 800ebca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ebcc:	693b      	ldr	r3, [r7, #16]
 800ebce:	3b01      	subs	r3, #1
 800ebd0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ebd2:	68bb      	ldr	r3, [r7, #8]
 800ebd4:	0a1b      	lsrs	r3, r3, #8
 800ebd6:	b2da      	uxtb	r2, r3
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	3301      	adds	r3, #1
 800ebe0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ebe2:	693b      	ldr	r3, [r7, #16]
 800ebe4:	3b01      	subs	r3, #1
 800ebe6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	0c1b      	lsrs	r3, r3, #16
 800ebec:	b2da      	uxtb	r2, r3
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	3301      	adds	r3, #1
 800ebf6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ebf8:	693b      	ldr	r3, [r7, #16]
 800ebfa:	3b01      	subs	r3, #1
 800ebfc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ebfe:	68bb      	ldr	r3, [r7, #8]
 800ec00:	0e1b      	lsrs	r3, r3, #24
 800ec02:	b2da      	uxtb	r2, r3
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	3301      	adds	r3, #1
 800ec0c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ec0e:	693b      	ldr	r3, [r7, #16]
 800ec10:	3b01      	subs	r3, #1
 800ec12:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800ec14:	697b      	ldr	r3, [r7, #20]
 800ec16:	3301      	adds	r3, #1
 800ec18:	617b      	str	r3, [r7, #20]
 800ec1a:	697b      	ldr	r3, [r7, #20]
 800ec1c:	2b07      	cmp	r3, #7
 800ec1e:	d9c8      	bls.n	800ebb2 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	68fa      	ldr	r2, [r7, #12]
 800ec24:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	693a      	ldr	r2, [r7, #16]
 800ec2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800ec2c:	bf00      	nop
 800ec2e:	3718      	adds	r7, #24
 800ec30:	46bd      	mov	sp, r7
 800ec32:	bd80      	pop	{r7, pc}

0800ec34 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b086      	sub	sp, #24
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	6a1b      	ldr	r3, [r3, #32]
 800ec40:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec46:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800ec48:	693b      	ldr	r3, [r7, #16]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d043      	beq.n	800ecd6 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800ec4e:	2300      	movs	r3, #0
 800ec50:	617b      	str	r3, [r7, #20]
 800ec52:	e037      	b.n	800ecc4 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	781b      	ldrb	r3, [r3, #0]
 800ec58:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	3301      	adds	r3, #1
 800ec5e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ec60:	693b      	ldr	r3, [r7, #16]
 800ec62:	3b01      	subs	r3, #1
 800ec64:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	781b      	ldrb	r3, [r3, #0]
 800ec6a:	021a      	lsls	r2, r3, #8
 800ec6c:	68bb      	ldr	r3, [r7, #8]
 800ec6e:	4313      	orrs	r3, r2
 800ec70:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	3301      	adds	r3, #1
 800ec76:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ec78:	693b      	ldr	r3, [r7, #16]
 800ec7a:	3b01      	subs	r3, #1
 800ec7c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	781b      	ldrb	r3, [r3, #0]
 800ec82:	041a      	lsls	r2, r3, #16
 800ec84:	68bb      	ldr	r3, [r7, #8]
 800ec86:	4313      	orrs	r3, r2
 800ec88:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	3301      	adds	r3, #1
 800ec8e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ec90:	693b      	ldr	r3, [r7, #16]
 800ec92:	3b01      	subs	r3, #1
 800ec94:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	781b      	ldrb	r3, [r3, #0]
 800ec9a:	061a      	lsls	r2, r3, #24
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	4313      	orrs	r3, r2
 800eca0:	60bb      	str	r3, [r7, #8]
      tmp++;
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	3301      	adds	r3, #1
 800eca6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800eca8:	693b      	ldr	r3, [r7, #16]
 800ecaa:	3b01      	subs	r3, #1
 800ecac:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	f107 0208 	add.w	r2, r7, #8
 800ecb6:	4611      	mov	r1, r2
 800ecb8:	4618      	mov	r0, r3
 800ecba:	f000 fb67 	bl	800f38c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800ecbe:	697b      	ldr	r3, [r7, #20]
 800ecc0:	3301      	adds	r3, #1
 800ecc2:	617b      	str	r3, [r7, #20]
 800ecc4:	697b      	ldr	r3, [r7, #20]
 800ecc6:	2b07      	cmp	r3, #7
 800ecc8:	d9c4      	bls.n	800ec54 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	68fa      	ldr	r2, [r7, #12]
 800ecce:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	693a      	ldr	r2, [r7, #16]
 800ecd4:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800ecd6:	bf00      	nop
 800ecd8:	3718      	adds	r7, #24
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}

0800ecde <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ecde:	b580      	push	{r7, lr}
 800ece0:	b082      	sub	sp, #8
 800ece2:	af00      	add	r7, sp, #0
 800ece4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d101      	bne.n	800ecf0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ecec:	2301      	movs	r3, #1
 800ecee:	e041      	b.n	800ed74 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ecf6:	b2db      	uxtb	r3, r3
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d106      	bne.n	800ed0a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2200      	movs	r2, #0
 800ed00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ed04:	6878      	ldr	r0, [r7, #4]
 800ed06:	f7f7 fecb 	bl	8006aa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	2202      	movs	r2, #2
 800ed0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681a      	ldr	r2, [r3, #0]
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	3304      	adds	r3, #4
 800ed1a:	4619      	mov	r1, r3
 800ed1c:	4610      	mov	r0, r2
 800ed1e:	f000 f9cd 	bl	800f0bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	2201      	movs	r2, #1
 800ed26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	2201      	movs	r2, #1
 800ed2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	2201      	movs	r2, #1
 800ed36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	2201      	movs	r2, #1
 800ed3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	2201      	movs	r2, #1
 800ed46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	2201      	movs	r2, #1
 800ed4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	2201      	movs	r2, #1
 800ed56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2201      	movs	r2, #1
 800ed5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	2201      	movs	r2, #1
 800ed66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	2201      	movs	r2, #1
 800ed6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ed72:	2300      	movs	r3, #0
}
 800ed74:	4618      	mov	r0, r3
 800ed76:	3708      	adds	r7, #8
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}

0800ed7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ed7c:	b480      	push	{r7}
 800ed7e:	b085      	sub	sp, #20
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ed8a:	b2db      	uxtb	r3, r3
 800ed8c:	2b01      	cmp	r3, #1
 800ed8e:	d001      	beq.n	800ed94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ed90:	2301      	movs	r3, #1
 800ed92:	e04e      	b.n	800ee32 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2202      	movs	r2, #2
 800ed98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	68da      	ldr	r2, [r3, #12]
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	f042 0201 	orr.w	r2, r2, #1
 800edaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	4a23      	ldr	r2, [pc, #140]	; (800ee40 <HAL_TIM_Base_Start_IT+0xc4>)
 800edb2:	4293      	cmp	r3, r2
 800edb4:	d022      	beq.n	800edfc <HAL_TIM_Base_Start_IT+0x80>
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800edbe:	d01d      	beq.n	800edfc <HAL_TIM_Base_Start_IT+0x80>
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	4a1f      	ldr	r2, [pc, #124]	; (800ee44 <HAL_TIM_Base_Start_IT+0xc8>)
 800edc6:	4293      	cmp	r3, r2
 800edc8:	d018      	beq.n	800edfc <HAL_TIM_Base_Start_IT+0x80>
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	4a1e      	ldr	r2, [pc, #120]	; (800ee48 <HAL_TIM_Base_Start_IT+0xcc>)
 800edd0:	4293      	cmp	r3, r2
 800edd2:	d013      	beq.n	800edfc <HAL_TIM_Base_Start_IT+0x80>
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	4a1c      	ldr	r2, [pc, #112]	; (800ee4c <HAL_TIM_Base_Start_IT+0xd0>)
 800edda:	4293      	cmp	r3, r2
 800eddc:	d00e      	beq.n	800edfc <HAL_TIM_Base_Start_IT+0x80>
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	4a1b      	ldr	r2, [pc, #108]	; (800ee50 <HAL_TIM_Base_Start_IT+0xd4>)
 800ede4:	4293      	cmp	r3, r2
 800ede6:	d009      	beq.n	800edfc <HAL_TIM_Base_Start_IT+0x80>
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	4a19      	ldr	r2, [pc, #100]	; (800ee54 <HAL_TIM_Base_Start_IT+0xd8>)
 800edee:	4293      	cmp	r3, r2
 800edf0:	d004      	beq.n	800edfc <HAL_TIM_Base_Start_IT+0x80>
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	4a18      	ldr	r2, [pc, #96]	; (800ee58 <HAL_TIM_Base_Start_IT+0xdc>)
 800edf8:	4293      	cmp	r3, r2
 800edfa:	d111      	bne.n	800ee20 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	689b      	ldr	r3, [r3, #8]
 800ee02:	f003 0307 	and.w	r3, r3, #7
 800ee06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	2b06      	cmp	r3, #6
 800ee0c:	d010      	beq.n	800ee30 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	681a      	ldr	r2, [r3, #0]
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	f042 0201 	orr.w	r2, r2, #1
 800ee1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ee1e:	e007      	b.n	800ee30 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	681a      	ldr	r2, [r3, #0]
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	f042 0201 	orr.w	r2, r2, #1
 800ee2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ee30:	2300      	movs	r3, #0
}
 800ee32:	4618      	mov	r0, r3
 800ee34:	3714      	adds	r7, #20
 800ee36:	46bd      	mov	sp, r7
 800ee38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3c:	4770      	bx	lr
 800ee3e:	bf00      	nop
 800ee40:	40010000 	.word	0x40010000
 800ee44:	40000400 	.word	0x40000400
 800ee48:	40000800 	.word	0x40000800
 800ee4c:	40000c00 	.word	0x40000c00
 800ee50:	40010400 	.word	0x40010400
 800ee54:	40014000 	.word	0x40014000
 800ee58:	40001800 	.word	0x40001800

0800ee5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b082      	sub	sp, #8
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	691b      	ldr	r3, [r3, #16]
 800ee6a:	f003 0302 	and.w	r3, r3, #2
 800ee6e:	2b02      	cmp	r3, #2
 800ee70:	d122      	bne.n	800eeb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	68db      	ldr	r3, [r3, #12]
 800ee78:	f003 0302 	and.w	r3, r3, #2
 800ee7c:	2b02      	cmp	r3, #2
 800ee7e:	d11b      	bne.n	800eeb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	f06f 0202 	mvn.w	r2, #2
 800ee88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	2201      	movs	r2, #1
 800ee8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	699b      	ldr	r3, [r3, #24]
 800ee96:	f003 0303 	and.w	r3, r3, #3
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d003      	beq.n	800eea6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f000 f8ee 	bl	800f080 <HAL_TIM_IC_CaptureCallback>
 800eea4:	e005      	b.n	800eeb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800eea6:	6878      	ldr	r0, [r7, #4]
 800eea8:	f000 f8e0 	bl	800f06c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	f000 f8f1 	bl	800f094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	691b      	ldr	r3, [r3, #16]
 800eebe:	f003 0304 	and.w	r3, r3, #4
 800eec2:	2b04      	cmp	r3, #4
 800eec4:	d122      	bne.n	800ef0c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	68db      	ldr	r3, [r3, #12]
 800eecc:	f003 0304 	and.w	r3, r3, #4
 800eed0:	2b04      	cmp	r3, #4
 800eed2:	d11b      	bne.n	800ef0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	f06f 0204 	mvn.w	r2, #4
 800eedc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	2202      	movs	r2, #2
 800eee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	699b      	ldr	r3, [r3, #24]
 800eeea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d003      	beq.n	800eefa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eef2:	6878      	ldr	r0, [r7, #4]
 800eef4:	f000 f8c4 	bl	800f080 <HAL_TIM_IC_CaptureCallback>
 800eef8:	e005      	b.n	800ef06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eefa:	6878      	ldr	r0, [r7, #4]
 800eefc:	f000 f8b6 	bl	800f06c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef00:	6878      	ldr	r0, [r7, #4]
 800ef02:	f000 f8c7 	bl	800f094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	2200      	movs	r2, #0
 800ef0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	691b      	ldr	r3, [r3, #16]
 800ef12:	f003 0308 	and.w	r3, r3, #8
 800ef16:	2b08      	cmp	r3, #8
 800ef18:	d122      	bne.n	800ef60 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	68db      	ldr	r3, [r3, #12]
 800ef20:	f003 0308 	and.w	r3, r3, #8
 800ef24:	2b08      	cmp	r3, #8
 800ef26:	d11b      	bne.n	800ef60 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	f06f 0208 	mvn.w	r2, #8
 800ef30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	2204      	movs	r2, #4
 800ef36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	69db      	ldr	r3, [r3, #28]
 800ef3e:	f003 0303 	and.w	r3, r3, #3
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d003      	beq.n	800ef4e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ef46:	6878      	ldr	r0, [r7, #4]
 800ef48:	f000 f89a 	bl	800f080 <HAL_TIM_IC_CaptureCallback>
 800ef4c:	e005      	b.n	800ef5a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	f000 f88c 	bl	800f06c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef54:	6878      	ldr	r0, [r7, #4]
 800ef56:	f000 f89d 	bl	800f094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	691b      	ldr	r3, [r3, #16]
 800ef66:	f003 0310 	and.w	r3, r3, #16
 800ef6a:	2b10      	cmp	r3, #16
 800ef6c:	d122      	bne.n	800efb4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	68db      	ldr	r3, [r3, #12]
 800ef74:	f003 0310 	and.w	r3, r3, #16
 800ef78:	2b10      	cmp	r3, #16
 800ef7a:	d11b      	bne.n	800efb4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	f06f 0210 	mvn.w	r2, #16
 800ef84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	2208      	movs	r2, #8
 800ef8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	69db      	ldr	r3, [r3, #28]
 800ef92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d003      	beq.n	800efa2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ef9a:	6878      	ldr	r0, [r7, #4]
 800ef9c:	f000 f870 	bl	800f080 <HAL_TIM_IC_CaptureCallback>
 800efa0:	e005      	b.n	800efae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800efa2:	6878      	ldr	r0, [r7, #4]
 800efa4:	f000 f862 	bl	800f06c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800efa8:	6878      	ldr	r0, [r7, #4]
 800efaa:	f000 f873 	bl	800f094 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	2200      	movs	r2, #0
 800efb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	691b      	ldr	r3, [r3, #16]
 800efba:	f003 0301 	and.w	r3, r3, #1
 800efbe:	2b01      	cmp	r3, #1
 800efc0:	d10e      	bne.n	800efe0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	68db      	ldr	r3, [r3, #12]
 800efc8:	f003 0301 	and.w	r3, r3, #1
 800efcc:	2b01      	cmp	r3, #1
 800efce:	d107      	bne.n	800efe0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	f06f 0201 	mvn.w	r2, #1
 800efd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800efda:	6878      	ldr	r0, [r7, #4]
 800efdc:	f7f7 f9f4 	bl	80063c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	691b      	ldr	r3, [r3, #16]
 800efe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800efea:	2b80      	cmp	r3, #128	; 0x80
 800efec:	d10e      	bne.n	800f00c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	68db      	ldr	r3, [r3, #12]
 800eff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eff8:	2b80      	cmp	r3, #128	; 0x80
 800effa:	d107      	bne.n	800f00c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f006:	6878      	ldr	r0, [r7, #4]
 800f008:	f000 f97e 	bl	800f308 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	691b      	ldr	r3, [r3, #16]
 800f012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f016:	2b40      	cmp	r3, #64	; 0x40
 800f018:	d10e      	bne.n	800f038 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	68db      	ldr	r3, [r3, #12]
 800f020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f024:	2b40      	cmp	r3, #64	; 0x40
 800f026:	d107      	bne.n	800f038 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f032:	6878      	ldr	r0, [r7, #4]
 800f034:	f000 f838 	bl	800f0a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	691b      	ldr	r3, [r3, #16]
 800f03e:	f003 0320 	and.w	r3, r3, #32
 800f042:	2b20      	cmp	r3, #32
 800f044:	d10e      	bne.n	800f064 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	68db      	ldr	r3, [r3, #12]
 800f04c:	f003 0320 	and.w	r3, r3, #32
 800f050:	2b20      	cmp	r3, #32
 800f052:	d107      	bne.n	800f064 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	f06f 0220 	mvn.w	r2, #32
 800f05c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	f000 f948 	bl	800f2f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f064:	bf00      	nop
 800f066:	3708      	adds	r7, #8
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd80      	pop	{r7, pc}

0800f06c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f06c:	b480      	push	{r7}
 800f06e:	b083      	sub	sp, #12
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f074:	bf00      	nop
 800f076:	370c      	adds	r7, #12
 800f078:	46bd      	mov	sp, r7
 800f07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07e:	4770      	bx	lr

0800f080 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f080:	b480      	push	{r7}
 800f082:	b083      	sub	sp, #12
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f088:	bf00      	nop
 800f08a:	370c      	adds	r7, #12
 800f08c:	46bd      	mov	sp, r7
 800f08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f092:	4770      	bx	lr

0800f094 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f094:	b480      	push	{r7}
 800f096:	b083      	sub	sp, #12
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f09c:	bf00      	nop
 800f09e:	370c      	adds	r7, #12
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a6:	4770      	bx	lr

0800f0a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f0a8:	b480      	push	{r7}
 800f0aa:	b083      	sub	sp, #12
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f0b0:	bf00      	nop
 800f0b2:	370c      	adds	r7, #12
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ba:	4770      	bx	lr

0800f0bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f0bc:	b480      	push	{r7}
 800f0be:	b085      	sub	sp, #20
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
 800f0c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	4a40      	ldr	r2, [pc, #256]	; (800f1d0 <TIM_Base_SetConfig+0x114>)
 800f0d0:	4293      	cmp	r3, r2
 800f0d2:	d013      	beq.n	800f0fc <TIM_Base_SetConfig+0x40>
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f0da:	d00f      	beq.n	800f0fc <TIM_Base_SetConfig+0x40>
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	4a3d      	ldr	r2, [pc, #244]	; (800f1d4 <TIM_Base_SetConfig+0x118>)
 800f0e0:	4293      	cmp	r3, r2
 800f0e2:	d00b      	beq.n	800f0fc <TIM_Base_SetConfig+0x40>
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	4a3c      	ldr	r2, [pc, #240]	; (800f1d8 <TIM_Base_SetConfig+0x11c>)
 800f0e8:	4293      	cmp	r3, r2
 800f0ea:	d007      	beq.n	800f0fc <TIM_Base_SetConfig+0x40>
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	4a3b      	ldr	r2, [pc, #236]	; (800f1dc <TIM_Base_SetConfig+0x120>)
 800f0f0:	4293      	cmp	r3, r2
 800f0f2:	d003      	beq.n	800f0fc <TIM_Base_SetConfig+0x40>
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	4a3a      	ldr	r2, [pc, #232]	; (800f1e0 <TIM_Base_SetConfig+0x124>)
 800f0f8:	4293      	cmp	r3, r2
 800f0fa:	d108      	bne.n	800f10e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	685b      	ldr	r3, [r3, #4]
 800f108:	68fa      	ldr	r2, [r7, #12]
 800f10a:	4313      	orrs	r3, r2
 800f10c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	4a2f      	ldr	r2, [pc, #188]	; (800f1d0 <TIM_Base_SetConfig+0x114>)
 800f112:	4293      	cmp	r3, r2
 800f114:	d02b      	beq.n	800f16e <TIM_Base_SetConfig+0xb2>
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f11c:	d027      	beq.n	800f16e <TIM_Base_SetConfig+0xb2>
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	4a2c      	ldr	r2, [pc, #176]	; (800f1d4 <TIM_Base_SetConfig+0x118>)
 800f122:	4293      	cmp	r3, r2
 800f124:	d023      	beq.n	800f16e <TIM_Base_SetConfig+0xb2>
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	4a2b      	ldr	r2, [pc, #172]	; (800f1d8 <TIM_Base_SetConfig+0x11c>)
 800f12a:	4293      	cmp	r3, r2
 800f12c:	d01f      	beq.n	800f16e <TIM_Base_SetConfig+0xb2>
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	4a2a      	ldr	r2, [pc, #168]	; (800f1dc <TIM_Base_SetConfig+0x120>)
 800f132:	4293      	cmp	r3, r2
 800f134:	d01b      	beq.n	800f16e <TIM_Base_SetConfig+0xb2>
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	4a29      	ldr	r2, [pc, #164]	; (800f1e0 <TIM_Base_SetConfig+0x124>)
 800f13a:	4293      	cmp	r3, r2
 800f13c:	d017      	beq.n	800f16e <TIM_Base_SetConfig+0xb2>
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	4a28      	ldr	r2, [pc, #160]	; (800f1e4 <TIM_Base_SetConfig+0x128>)
 800f142:	4293      	cmp	r3, r2
 800f144:	d013      	beq.n	800f16e <TIM_Base_SetConfig+0xb2>
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	4a27      	ldr	r2, [pc, #156]	; (800f1e8 <TIM_Base_SetConfig+0x12c>)
 800f14a:	4293      	cmp	r3, r2
 800f14c:	d00f      	beq.n	800f16e <TIM_Base_SetConfig+0xb2>
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	4a26      	ldr	r2, [pc, #152]	; (800f1ec <TIM_Base_SetConfig+0x130>)
 800f152:	4293      	cmp	r3, r2
 800f154:	d00b      	beq.n	800f16e <TIM_Base_SetConfig+0xb2>
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	4a25      	ldr	r2, [pc, #148]	; (800f1f0 <TIM_Base_SetConfig+0x134>)
 800f15a:	4293      	cmp	r3, r2
 800f15c:	d007      	beq.n	800f16e <TIM_Base_SetConfig+0xb2>
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	4a24      	ldr	r2, [pc, #144]	; (800f1f4 <TIM_Base_SetConfig+0x138>)
 800f162:	4293      	cmp	r3, r2
 800f164:	d003      	beq.n	800f16e <TIM_Base_SetConfig+0xb2>
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	4a23      	ldr	r2, [pc, #140]	; (800f1f8 <TIM_Base_SetConfig+0x13c>)
 800f16a:	4293      	cmp	r3, r2
 800f16c:	d108      	bne.n	800f180 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f176:	683b      	ldr	r3, [r7, #0]
 800f178:	68db      	ldr	r3, [r3, #12]
 800f17a:	68fa      	ldr	r2, [r7, #12]
 800f17c:	4313      	orrs	r3, r2
 800f17e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f186:	683b      	ldr	r3, [r7, #0]
 800f188:	695b      	ldr	r3, [r3, #20]
 800f18a:	4313      	orrs	r3, r2
 800f18c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	68fa      	ldr	r2, [r7, #12]
 800f192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	689a      	ldr	r2, [r3, #8]
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f19c:	683b      	ldr	r3, [r7, #0]
 800f19e:	681a      	ldr	r2, [r3, #0]
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	4a0a      	ldr	r2, [pc, #40]	; (800f1d0 <TIM_Base_SetConfig+0x114>)
 800f1a8:	4293      	cmp	r3, r2
 800f1aa:	d003      	beq.n	800f1b4 <TIM_Base_SetConfig+0xf8>
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	4a0c      	ldr	r2, [pc, #48]	; (800f1e0 <TIM_Base_SetConfig+0x124>)
 800f1b0:	4293      	cmp	r3, r2
 800f1b2:	d103      	bne.n	800f1bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	691a      	ldr	r2, [r3, #16]
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	2201      	movs	r2, #1
 800f1c0:	615a      	str	r2, [r3, #20]
}
 800f1c2:	bf00      	nop
 800f1c4:	3714      	adds	r7, #20
 800f1c6:	46bd      	mov	sp, r7
 800f1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1cc:	4770      	bx	lr
 800f1ce:	bf00      	nop
 800f1d0:	40010000 	.word	0x40010000
 800f1d4:	40000400 	.word	0x40000400
 800f1d8:	40000800 	.word	0x40000800
 800f1dc:	40000c00 	.word	0x40000c00
 800f1e0:	40010400 	.word	0x40010400
 800f1e4:	40014000 	.word	0x40014000
 800f1e8:	40014400 	.word	0x40014400
 800f1ec:	40014800 	.word	0x40014800
 800f1f0:	40001800 	.word	0x40001800
 800f1f4:	40001c00 	.word	0x40001c00
 800f1f8:	40002000 	.word	0x40002000

0800f1fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f1fc:	b480      	push	{r7}
 800f1fe:	b085      	sub	sp, #20
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
 800f204:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f20c:	2b01      	cmp	r3, #1
 800f20e:	d101      	bne.n	800f214 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f210:	2302      	movs	r3, #2
 800f212:	e05a      	b.n	800f2ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2201      	movs	r2, #1
 800f218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	2202      	movs	r2, #2
 800f220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	685b      	ldr	r3, [r3, #4]
 800f22a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	689b      	ldr	r3, [r3, #8]
 800f232:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f23a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f23c:	683b      	ldr	r3, [r7, #0]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	68fa      	ldr	r2, [r7, #12]
 800f242:	4313      	orrs	r3, r2
 800f244:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	68fa      	ldr	r2, [r7, #12]
 800f24c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	4a21      	ldr	r2, [pc, #132]	; (800f2d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f254:	4293      	cmp	r3, r2
 800f256:	d022      	beq.n	800f29e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f260:	d01d      	beq.n	800f29e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	4a1d      	ldr	r2, [pc, #116]	; (800f2dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f268:	4293      	cmp	r3, r2
 800f26a:	d018      	beq.n	800f29e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	4a1b      	ldr	r2, [pc, #108]	; (800f2e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f272:	4293      	cmp	r3, r2
 800f274:	d013      	beq.n	800f29e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	4a1a      	ldr	r2, [pc, #104]	; (800f2e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f27c:	4293      	cmp	r3, r2
 800f27e:	d00e      	beq.n	800f29e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	4a18      	ldr	r2, [pc, #96]	; (800f2e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f286:	4293      	cmp	r3, r2
 800f288:	d009      	beq.n	800f29e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	4a17      	ldr	r2, [pc, #92]	; (800f2ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f290:	4293      	cmp	r3, r2
 800f292:	d004      	beq.n	800f29e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	4a15      	ldr	r2, [pc, #84]	; (800f2f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f29a:	4293      	cmp	r3, r2
 800f29c:	d10c      	bne.n	800f2b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f2a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f2a6:	683b      	ldr	r3, [r7, #0]
 800f2a8:	685b      	ldr	r3, [r3, #4]
 800f2aa:	68ba      	ldr	r2, [r7, #8]
 800f2ac:	4313      	orrs	r3, r2
 800f2ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	68ba      	ldr	r2, [r7, #8]
 800f2b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	2201      	movs	r2, #1
 800f2bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f2c8:	2300      	movs	r3, #0
}
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	3714      	adds	r7, #20
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d4:	4770      	bx	lr
 800f2d6:	bf00      	nop
 800f2d8:	40010000 	.word	0x40010000
 800f2dc:	40000400 	.word	0x40000400
 800f2e0:	40000800 	.word	0x40000800
 800f2e4:	40000c00 	.word	0x40000c00
 800f2e8:	40010400 	.word	0x40010400
 800f2ec:	40014000 	.word	0x40014000
 800f2f0:	40001800 	.word	0x40001800

0800f2f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f2f4:	b480      	push	{r7}
 800f2f6:	b083      	sub	sp, #12
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f2fc:	bf00      	nop
 800f2fe:	370c      	adds	r7, #12
 800f300:	46bd      	mov	sp, r7
 800f302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f306:	4770      	bx	lr

0800f308 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f308:	b480      	push	{r7}
 800f30a:	b083      	sub	sp, #12
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f310:	bf00      	nop
 800f312:	370c      	adds	r7, #12
 800f314:	46bd      	mov	sp, r7
 800f316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31a:	4770      	bx	lr

0800f31c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800f31c:	b084      	sub	sp, #16
 800f31e:	b480      	push	{r7}
 800f320:	b085      	sub	sp, #20
 800f322:	af00      	add	r7, sp, #0
 800f324:	6078      	str	r0, [r7, #4]
 800f326:	f107 001c 	add.w	r0, r7, #28
 800f32a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800f32e:	2300      	movs	r3, #0
 800f330:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800f332:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800f334:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800f336:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800f338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800f33a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800f33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800f33e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800f340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800f342:	431a      	orrs	r2, r3
             Init.ClockDiv
 800f344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800f346:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800f348:	68fa      	ldr	r2, [r7, #12]
 800f34a:	4313      	orrs	r3, r2
 800f34c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	685b      	ldr	r3, [r3, #4]
 800f352:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800f356:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f35a:	68fa      	ldr	r2, [r7, #12]
 800f35c:	431a      	orrs	r2, r3
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f362:	2300      	movs	r3, #0
}
 800f364:	4618      	mov	r0, r3
 800f366:	3714      	adds	r7, #20
 800f368:	46bd      	mov	sp, r7
 800f36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36e:	b004      	add	sp, #16
 800f370:	4770      	bx	lr

0800f372 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800f372:	b480      	push	{r7}
 800f374:	b083      	sub	sp, #12
 800f376:	af00      	add	r7, sp, #0
 800f378:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800f380:	4618      	mov	r0, r3
 800f382:	370c      	adds	r7, #12
 800f384:	46bd      	mov	sp, r7
 800f386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f38a:	4770      	bx	lr

0800f38c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800f38c:	b480      	push	{r7}
 800f38e:	b083      	sub	sp, #12
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
 800f394:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	681a      	ldr	r2, [r3, #0]
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f3a0:	2300      	movs	r3, #0
}
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	370c      	adds	r7, #12
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ac:	4770      	bx	lr

0800f3ae <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800f3ae:	b480      	push	{r7}
 800f3b0:	b083      	sub	sp, #12
 800f3b2:	af00      	add	r7, sp, #0
 800f3b4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	2203      	movs	r2, #3
 800f3ba:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800f3bc:	2300      	movs	r3, #0
}
 800f3be:	4618      	mov	r0, r3
 800f3c0:	370c      	adds	r7, #12
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c8:	4770      	bx	lr

0800f3ca <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800f3ca:	b480      	push	{r7}
 800f3cc:	b083      	sub	sp, #12
 800f3ce:	af00      	add	r7, sp, #0
 800f3d0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	f003 0303 	and.w	r3, r3, #3
}
 800f3da:	4618      	mov	r0, r3
 800f3dc:	370c      	adds	r7, #12
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e4:	4770      	bx	lr

0800f3e6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800f3e6:	b480      	push	{r7}
 800f3e8:	b085      	sub	sp, #20
 800f3ea:	af00      	add	r7, sp, #0
 800f3ec:	6078      	str	r0, [r7, #4]
 800f3ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	681a      	ldr	r2, [r3, #0]
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f404:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800f406:	683b      	ldr	r3, [r7, #0]
 800f408:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800f40a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800f410:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f412:	68fa      	ldr	r2, [r7, #12]
 800f414:	4313      	orrs	r3, r2
 800f416:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	68db      	ldr	r3, [r3, #12]
 800f41c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f420:	f023 030f 	bic.w	r3, r3, #15
 800f424:	68fa      	ldr	r2, [r7, #12]
 800f426:	431a      	orrs	r2, r3
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800f42c:	2300      	movs	r3, #0
}
 800f42e:	4618      	mov	r0, r3
 800f430:	3714      	adds	r7, #20
 800f432:	46bd      	mov	sp, r7
 800f434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f438:	4770      	bx	lr

0800f43a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800f43a:	b480      	push	{r7}
 800f43c:	b083      	sub	sp, #12
 800f43e:	af00      	add	r7, sp, #0
 800f440:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	691b      	ldr	r3, [r3, #16]
 800f446:	b2db      	uxtb	r3, r3
}
 800f448:	4618      	mov	r0, r3
 800f44a:	370c      	adds	r7, #12
 800f44c:	46bd      	mov	sp, r7
 800f44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f452:	4770      	bx	lr

0800f454 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800f454:	b480      	push	{r7}
 800f456:	b085      	sub	sp, #20
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
 800f45c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	3314      	adds	r3, #20
 800f462:	461a      	mov	r2, r3
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	4413      	add	r3, r2
 800f468:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	681b      	ldr	r3, [r3, #0]
}  
 800f46e:	4618      	mov	r0, r3
 800f470:	3714      	adds	r7, #20
 800f472:	46bd      	mov	sp, r7
 800f474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f478:	4770      	bx	lr

0800f47a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800f47a:	b480      	push	{r7}
 800f47c:	b085      	sub	sp, #20
 800f47e:	af00      	add	r7, sp, #0
 800f480:	6078      	str	r0, [r7, #4]
 800f482:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f484:	2300      	movs	r3, #0
 800f486:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	681a      	ldr	r2, [r3, #0]
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	685a      	ldr	r2, [r3, #4]
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f4a0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800f4a2:	683b      	ldr	r3, [r7, #0]
 800f4a4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800f4a6:	431a      	orrs	r2, r3
                       Data->DPSM);
 800f4a8:	683b      	ldr	r3, [r7, #0]
 800f4aa:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800f4ac:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f4ae:	68fa      	ldr	r2, [r7, #12]
 800f4b0:	4313      	orrs	r3, r2
 800f4b2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4b8:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	431a      	orrs	r2, r3
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800f4c4:	2300      	movs	r3, #0

}
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	3714      	adds	r7, #20
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d0:	4770      	bx	lr

0800f4d2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800f4d2:	b580      	push	{r7, lr}
 800f4d4:	b088      	sub	sp, #32
 800f4d6:	af00      	add	r7, sp, #0
 800f4d8:	6078      	str	r0, [r7, #4]
 800f4da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800f4dc:	683b      	ldr	r3, [r7, #0]
 800f4de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800f4e0:	2310      	movs	r3, #16
 800f4e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f4e4:	2340      	movs	r3, #64	; 0x40
 800f4e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f4ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f4f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f4f2:	f107 0308 	add.w	r3, r7, #8
 800f4f6:	4619      	mov	r1, r3
 800f4f8:	6878      	ldr	r0, [r7, #4]
 800f4fa:	f7ff ff74 	bl	800f3e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800f4fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800f502:	2110      	movs	r1, #16
 800f504:	6878      	ldr	r0, [r7, #4]
 800f506:	f000 fa19 	bl	800f93c <SDMMC_GetCmdResp1>
 800f50a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f50c:	69fb      	ldr	r3, [r7, #28]
}
 800f50e:	4618      	mov	r0, r3
 800f510:	3720      	adds	r7, #32
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}

0800f516 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800f516:	b580      	push	{r7, lr}
 800f518:	b088      	sub	sp, #32
 800f51a:	af00      	add	r7, sp, #0
 800f51c:	6078      	str	r0, [r7, #4]
 800f51e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800f524:	2311      	movs	r3, #17
 800f526:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f528:	2340      	movs	r3, #64	; 0x40
 800f52a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f52c:	2300      	movs	r3, #0
 800f52e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f530:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f534:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f536:	f107 0308 	add.w	r3, r7, #8
 800f53a:	4619      	mov	r1, r3
 800f53c:	6878      	ldr	r0, [r7, #4]
 800f53e:	f7ff ff52 	bl	800f3e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800f542:	f241 3288 	movw	r2, #5000	; 0x1388
 800f546:	2111      	movs	r1, #17
 800f548:	6878      	ldr	r0, [r7, #4]
 800f54a:	f000 f9f7 	bl	800f93c <SDMMC_GetCmdResp1>
 800f54e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f550:	69fb      	ldr	r3, [r7, #28]
}
 800f552:	4618      	mov	r0, r3
 800f554:	3720      	adds	r7, #32
 800f556:	46bd      	mov	sp, r7
 800f558:	bd80      	pop	{r7, pc}

0800f55a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800f55a:	b580      	push	{r7, lr}
 800f55c:	b088      	sub	sp, #32
 800f55e:	af00      	add	r7, sp, #0
 800f560:	6078      	str	r0, [r7, #4]
 800f562:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f564:	683b      	ldr	r3, [r7, #0]
 800f566:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800f568:	2312      	movs	r3, #18
 800f56a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f56c:	2340      	movs	r3, #64	; 0x40
 800f56e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f570:	2300      	movs	r3, #0
 800f572:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f574:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f578:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f57a:	f107 0308 	add.w	r3, r7, #8
 800f57e:	4619      	mov	r1, r3
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f7ff ff30 	bl	800f3e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800f586:	f241 3288 	movw	r2, #5000	; 0x1388
 800f58a:	2112      	movs	r1, #18
 800f58c:	6878      	ldr	r0, [r7, #4]
 800f58e:	f000 f9d5 	bl	800f93c <SDMMC_GetCmdResp1>
 800f592:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f594:	69fb      	ldr	r3, [r7, #28]
}
 800f596:	4618      	mov	r0, r3
 800f598:	3720      	adds	r7, #32
 800f59a:	46bd      	mov	sp, r7
 800f59c:	bd80      	pop	{r7, pc}

0800f59e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800f59e:	b580      	push	{r7, lr}
 800f5a0:	b088      	sub	sp, #32
 800f5a2:	af00      	add	r7, sp, #0
 800f5a4:	6078      	str	r0, [r7, #4]
 800f5a6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800f5ac:	2318      	movs	r3, #24
 800f5ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f5b0:	2340      	movs	r3, #64	; 0x40
 800f5b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f5b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f5bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f5be:	f107 0308 	add.w	r3, r7, #8
 800f5c2:	4619      	mov	r1, r3
 800f5c4:	6878      	ldr	r0, [r7, #4]
 800f5c6:	f7ff ff0e 	bl	800f3e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800f5ca:	f241 3288 	movw	r2, #5000	; 0x1388
 800f5ce:	2118      	movs	r1, #24
 800f5d0:	6878      	ldr	r0, [r7, #4]
 800f5d2:	f000 f9b3 	bl	800f93c <SDMMC_GetCmdResp1>
 800f5d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f5d8:	69fb      	ldr	r3, [r7, #28]
}
 800f5da:	4618      	mov	r0, r3
 800f5dc:	3720      	adds	r7, #32
 800f5de:	46bd      	mov	sp, r7
 800f5e0:	bd80      	pop	{r7, pc}

0800f5e2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800f5e2:	b580      	push	{r7, lr}
 800f5e4:	b088      	sub	sp, #32
 800f5e6:	af00      	add	r7, sp, #0
 800f5e8:	6078      	str	r0, [r7, #4]
 800f5ea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f5ec:	683b      	ldr	r3, [r7, #0]
 800f5ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800f5f0:	2319      	movs	r3, #25
 800f5f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f5f4:	2340      	movs	r3, #64	; 0x40
 800f5f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f5f8:	2300      	movs	r3, #0
 800f5fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f5fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f600:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f602:	f107 0308 	add.w	r3, r7, #8
 800f606:	4619      	mov	r1, r3
 800f608:	6878      	ldr	r0, [r7, #4]
 800f60a:	f7ff feec 	bl	800f3e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800f60e:	f241 3288 	movw	r2, #5000	; 0x1388
 800f612:	2119      	movs	r1, #25
 800f614:	6878      	ldr	r0, [r7, #4]
 800f616:	f000 f991 	bl	800f93c <SDMMC_GetCmdResp1>
 800f61a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f61c:	69fb      	ldr	r3, [r7, #28]
}
 800f61e:	4618      	mov	r0, r3
 800f620:	3720      	adds	r7, #32
 800f622:	46bd      	mov	sp, r7
 800f624:	bd80      	pop	{r7, pc}
	...

0800f628 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b088      	sub	sp, #32
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800f630:	2300      	movs	r3, #0
 800f632:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800f634:	230c      	movs	r3, #12
 800f636:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f638:	2340      	movs	r3, #64	; 0x40
 800f63a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f63c:	2300      	movs	r3, #0
 800f63e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f640:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f644:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f646:	f107 0308 	add.w	r3, r7, #8
 800f64a:	4619      	mov	r1, r3
 800f64c:	6878      	ldr	r0, [r7, #4]
 800f64e:	f7ff feca 	bl	800f3e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800f652:	4a05      	ldr	r2, [pc, #20]	; (800f668 <SDMMC_CmdStopTransfer+0x40>)
 800f654:	210c      	movs	r1, #12
 800f656:	6878      	ldr	r0, [r7, #4]
 800f658:	f000 f970 	bl	800f93c <SDMMC_GetCmdResp1>
 800f65c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f65e:	69fb      	ldr	r3, [r7, #28]
}
 800f660:	4618      	mov	r0, r3
 800f662:	3720      	adds	r7, #32
 800f664:	46bd      	mov	sp, r7
 800f666:	bd80      	pop	{r7, pc}
 800f668:	05f5e100 	.word	0x05f5e100

0800f66c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b08a      	sub	sp, #40	; 0x28
 800f670:	af00      	add	r7, sp, #0
 800f672:	60f8      	str	r0, [r7, #12]
 800f674:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800f67c:	2307      	movs	r3, #7
 800f67e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f680:	2340      	movs	r3, #64	; 0x40
 800f682:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f684:	2300      	movs	r3, #0
 800f686:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f688:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f68c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f68e:	f107 0310 	add.w	r3, r7, #16
 800f692:	4619      	mov	r1, r3
 800f694:	68f8      	ldr	r0, [r7, #12]
 800f696:	f7ff fea6 	bl	800f3e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800f69a:	f241 3288 	movw	r2, #5000	; 0x1388
 800f69e:	2107      	movs	r1, #7
 800f6a0:	68f8      	ldr	r0, [r7, #12]
 800f6a2:	f000 f94b 	bl	800f93c <SDMMC_GetCmdResp1>
 800f6a6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800f6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	3728      	adds	r7, #40	; 0x28
 800f6ae:	46bd      	mov	sp, r7
 800f6b0:	bd80      	pop	{r7, pc}

0800f6b2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800f6b2:	b580      	push	{r7, lr}
 800f6b4:	b088      	sub	sp, #32
 800f6b6:	af00      	add	r7, sp, #0
 800f6b8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800f6be:	2300      	movs	r3, #0
 800f6c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f6ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f6ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f6d0:	f107 0308 	add.w	r3, r7, #8
 800f6d4:	4619      	mov	r1, r3
 800f6d6:	6878      	ldr	r0, [r7, #4]
 800f6d8:	f7ff fe85 	bl	800f3e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800f6dc:	6878      	ldr	r0, [r7, #4]
 800f6de:	f000 fb65 	bl	800fdac <SDMMC_GetCmdError>
 800f6e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f6e4:	69fb      	ldr	r3, [r7, #28]
}
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	3720      	adds	r7, #32
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	bd80      	pop	{r7, pc}

0800f6ee <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800f6ee:	b580      	push	{r7, lr}
 800f6f0:	b088      	sub	sp, #32
 800f6f2:	af00      	add	r7, sp, #0
 800f6f4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800f6f6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800f6fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800f6fc:	2308      	movs	r3, #8
 800f6fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f700:	2340      	movs	r3, #64	; 0x40
 800f702:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f704:	2300      	movs	r3, #0
 800f706:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f708:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f70c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f70e:	f107 0308 	add.w	r3, r7, #8
 800f712:	4619      	mov	r1, r3
 800f714:	6878      	ldr	r0, [r7, #4]
 800f716:	f7ff fe66 	bl	800f3e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800f71a:	6878      	ldr	r0, [r7, #4]
 800f71c:	f000 faf8 	bl	800fd10 <SDMMC_GetCmdResp7>
 800f720:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f722:	69fb      	ldr	r3, [r7, #28]
}
 800f724:	4618      	mov	r0, r3
 800f726:	3720      	adds	r7, #32
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd80      	pop	{r7, pc}

0800f72c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b088      	sub	sp, #32
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
 800f734:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800f736:	683b      	ldr	r3, [r7, #0]
 800f738:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800f73a:	2337      	movs	r3, #55	; 0x37
 800f73c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f73e:	2340      	movs	r3, #64	; 0x40
 800f740:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f742:	2300      	movs	r3, #0
 800f744:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f746:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f74a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f74c:	f107 0308 	add.w	r3, r7, #8
 800f750:	4619      	mov	r1, r3
 800f752:	6878      	ldr	r0, [r7, #4]
 800f754:	f7ff fe47 	bl	800f3e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800f758:	f241 3288 	movw	r2, #5000	; 0x1388
 800f75c:	2137      	movs	r1, #55	; 0x37
 800f75e:	6878      	ldr	r0, [r7, #4]
 800f760:	f000 f8ec 	bl	800f93c <SDMMC_GetCmdResp1>
 800f764:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f766:	69fb      	ldr	r3, [r7, #28]
}
 800f768:	4618      	mov	r0, r3
 800f76a:	3720      	adds	r7, #32
 800f76c:	46bd      	mov	sp, r7
 800f76e:	bd80      	pop	{r7, pc}

0800f770 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b088      	sub	sp, #32
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
 800f778:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800f77a:	683b      	ldr	r3, [r7, #0]
 800f77c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f780:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f784:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800f786:	2329      	movs	r3, #41	; 0x29
 800f788:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f78a:	2340      	movs	r3, #64	; 0x40
 800f78c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f78e:	2300      	movs	r3, #0
 800f790:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f792:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f796:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f798:	f107 0308 	add.w	r3, r7, #8
 800f79c:	4619      	mov	r1, r3
 800f79e:	6878      	ldr	r0, [r7, #4]
 800f7a0:	f7ff fe21 	bl	800f3e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	f000 f9ff 	bl	800fba8 <SDMMC_GetCmdResp3>
 800f7aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f7ac:	69fb      	ldr	r3, [r7, #28]
}
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	3720      	adds	r7, #32
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	bd80      	pop	{r7, pc}

0800f7b6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800f7b6:	b580      	push	{r7, lr}
 800f7b8:	b088      	sub	sp, #32
 800f7ba:	af00      	add	r7, sp, #0
 800f7bc:	6078      	str	r0, [r7, #4]
 800f7be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800f7c0:	683b      	ldr	r3, [r7, #0]
 800f7c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800f7c4:	2306      	movs	r3, #6
 800f7c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f7c8:	2340      	movs	r3, #64	; 0x40
 800f7ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f7d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f7d6:	f107 0308 	add.w	r3, r7, #8
 800f7da:	4619      	mov	r1, r3
 800f7dc:	6878      	ldr	r0, [r7, #4]
 800f7de:	f7ff fe02 	bl	800f3e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800f7e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800f7e6:	2106      	movs	r1, #6
 800f7e8:	6878      	ldr	r0, [r7, #4]
 800f7ea:	f000 f8a7 	bl	800f93c <SDMMC_GetCmdResp1>
 800f7ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f7f0:	69fb      	ldr	r3, [r7, #28]
}
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	3720      	adds	r7, #32
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}

0800f7fa <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800f7fa:	b580      	push	{r7, lr}
 800f7fc:	b088      	sub	sp, #32
 800f7fe:	af00      	add	r7, sp, #0
 800f800:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800f802:	2300      	movs	r3, #0
 800f804:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800f806:	2333      	movs	r3, #51	; 0x33
 800f808:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f80a:	2340      	movs	r3, #64	; 0x40
 800f80c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f80e:	2300      	movs	r3, #0
 800f810:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f816:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f818:	f107 0308 	add.w	r3, r7, #8
 800f81c:	4619      	mov	r1, r3
 800f81e:	6878      	ldr	r0, [r7, #4]
 800f820:	f7ff fde1 	bl	800f3e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800f824:	f241 3288 	movw	r2, #5000	; 0x1388
 800f828:	2133      	movs	r1, #51	; 0x33
 800f82a:	6878      	ldr	r0, [r7, #4]
 800f82c:	f000 f886 	bl	800f93c <SDMMC_GetCmdResp1>
 800f830:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f832:	69fb      	ldr	r3, [r7, #28]
}
 800f834:	4618      	mov	r0, r3
 800f836:	3720      	adds	r7, #32
 800f838:	46bd      	mov	sp, r7
 800f83a:	bd80      	pop	{r7, pc}

0800f83c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b088      	sub	sp, #32
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800f844:	2300      	movs	r3, #0
 800f846:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800f848:	2302      	movs	r3, #2
 800f84a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800f84c:	23c0      	movs	r3, #192	; 0xc0
 800f84e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f850:	2300      	movs	r3, #0
 800f852:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f854:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f858:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f85a:	f107 0308 	add.w	r3, r7, #8
 800f85e:	4619      	mov	r1, r3
 800f860:	6878      	ldr	r0, [r7, #4]
 800f862:	f7ff fdc0 	bl	800f3e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800f866:	6878      	ldr	r0, [r7, #4]
 800f868:	f000 f956 	bl	800fb18 <SDMMC_GetCmdResp2>
 800f86c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f86e:	69fb      	ldr	r3, [r7, #28]
}
 800f870:	4618      	mov	r0, r3
 800f872:	3720      	adds	r7, #32
 800f874:	46bd      	mov	sp, r7
 800f876:	bd80      	pop	{r7, pc}

0800f878 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f878:	b580      	push	{r7, lr}
 800f87a:	b088      	sub	sp, #32
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
 800f880:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800f882:	683b      	ldr	r3, [r7, #0]
 800f884:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800f886:	2309      	movs	r3, #9
 800f888:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800f88a:	23c0      	movs	r3, #192	; 0xc0
 800f88c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f88e:	2300      	movs	r3, #0
 800f890:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f892:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f896:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f898:	f107 0308 	add.w	r3, r7, #8
 800f89c:	4619      	mov	r1, r3
 800f89e:	6878      	ldr	r0, [r7, #4]
 800f8a0:	f7ff fda1 	bl	800f3e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800f8a4:	6878      	ldr	r0, [r7, #4]
 800f8a6:	f000 f937 	bl	800fb18 <SDMMC_GetCmdResp2>
 800f8aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f8ac:	69fb      	ldr	r3, [r7, #28]
}
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	3720      	adds	r7, #32
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}

0800f8b6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800f8b6:	b580      	push	{r7, lr}
 800f8b8:	b088      	sub	sp, #32
 800f8ba:	af00      	add	r7, sp, #0
 800f8bc:	6078      	str	r0, [r7, #4]
 800f8be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800f8c4:	2303      	movs	r3, #3
 800f8c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f8c8:	2340      	movs	r3, #64	; 0x40
 800f8ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f8d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f8d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f8d6:	f107 0308 	add.w	r3, r7, #8
 800f8da:	4619      	mov	r1, r3
 800f8dc:	6878      	ldr	r0, [r7, #4]
 800f8de:	f7ff fd82 	bl	800f3e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800f8e2:	683a      	ldr	r2, [r7, #0]
 800f8e4:	2103      	movs	r1, #3
 800f8e6:	6878      	ldr	r0, [r7, #4]
 800f8e8:	f000 f99c 	bl	800fc24 <SDMMC_GetCmdResp6>
 800f8ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f8ee:	69fb      	ldr	r3, [r7, #28]
}
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	3720      	adds	r7, #32
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}

0800f8f8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b088      	sub	sp, #32
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
 800f900:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800f906:	230d      	movs	r3, #13
 800f908:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f90a:	2340      	movs	r3, #64	; 0x40
 800f90c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f90e:	2300      	movs	r3, #0
 800f910:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f912:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f916:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f918:	f107 0308 	add.w	r3, r7, #8
 800f91c:	4619      	mov	r1, r3
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f7ff fd61 	bl	800f3e6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800f924:	f241 3288 	movw	r2, #5000	; 0x1388
 800f928:	210d      	movs	r1, #13
 800f92a:	6878      	ldr	r0, [r7, #4]
 800f92c:	f000 f806 	bl	800f93c <SDMMC_GetCmdResp1>
 800f930:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f932:	69fb      	ldr	r3, [r7, #28]
}
 800f934:	4618      	mov	r0, r3
 800f936:	3720      	adds	r7, #32
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}

0800f93c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b088      	sub	sp, #32
 800f940:	af00      	add	r7, sp, #0
 800f942:	60f8      	str	r0, [r7, #12]
 800f944:	460b      	mov	r3, r1
 800f946:	607a      	str	r2, [r7, #4]
 800f948:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800f94a:	4b70      	ldr	r3, [pc, #448]	; (800fb0c <SDMMC_GetCmdResp1+0x1d0>)
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	4a70      	ldr	r2, [pc, #448]	; (800fb10 <SDMMC_GetCmdResp1+0x1d4>)
 800f950:	fba2 2303 	umull	r2, r3, r2, r3
 800f954:	0a5a      	lsrs	r2, r3, #9
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	fb02 f303 	mul.w	r3, r2, r3
 800f95c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800f95e:	69fb      	ldr	r3, [r7, #28]
 800f960:	1e5a      	subs	r2, r3, #1
 800f962:	61fa      	str	r2, [r7, #28]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d102      	bne.n	800f96e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f968:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f96c:	e0c9      	b.n	800fb02 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f972:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f974:	69bb      	ldr	r3, [r7, #24]
 800f976:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d0ef      	beq.n	800f95e <SDMMC_GetCmdResp1+0x22>
 800f97e:	69bb      	ldr	r3, [r7, #24]
 800f980:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f984:	2b00      	cmp	r3, #0
 800f986:	d1ea      	bne.n	800f95e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f98c:	f003 0304 	and.w	r3, r3, #4
 800f990:	2b00      	cmp	r3, #0
 800f992:	d004      	beq.n	800f99e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	2204      	movs	r2, #4
 800f998:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f99a:	2304      	movs	r3, #4
 800f99c:	e0b1      	b.n	800fb02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f9a2:	f003 0301 	and.w	r3, r3, #1
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d004      	beq.n	800f9b4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	2201      	movs	r2, #1
 800f9ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f9b0:	2301      	movs	r3, #1
 800f9b2:	e0a6      	b.n	800fb02 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	22c5      	movs	r2, #197	; 0xc5
 800f9b8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800f9ba:	68f8      	ldr	r0, [r7, #12]
 800f9bc:	f7ff fd3d 	bl	800f43a <SDIO_GetCommandResponse>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	461a      	mov	r2, r3
 800f9c4:	7afb      	ldrb	r3, [r7, #11]
 800f9c6:	4293      	cmp	r3, r2
 800f9c8:	d001      	beq.n	800f9ce <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f9ca:	2301      	movs	r3, #1
 800f9cc:	e099      	b.n	800fb02 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800f9ce:	2100      	movs	r1, #0
 800f9d0:	68f8      	ldr	r0, [r7, #12]
 800f9d2:	f7ff fd3f 	bl	800f454 <SDIO_GetResponse>
 800f9d6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f9d8:	697a      	ldr	r2, [r7, #20]
 800f9da:	4b4e      	ldr	r3, [pc, #312]	; (800fb14 <SDMMC_GetCmdResp1+0x1d8>)
 800f9dc:	4013      	ands	r3, r2
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d101      	bne.n	800f9e6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	e08d      	b.n	800fb02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f9e6:	697b      	ldr	r3, [r7, #20]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	da02      	bge.n	800f9f2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f9ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f9f0:	e087      	b.n	800fb02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f9f2:	697b      	ldr	r3, [r7, #20]
 800f9f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d001      	beq.n	800fa00 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f9fc:	2340      	movs	r3, #64	; 0x40
 800f9fe:	e080      	b.n	800fb02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800fa00:	697b      	ldr	r3, [r7, #20]
 800fa02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d001      	beq.n	800fa0e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800fa0a:	2380      	movs	r3, #128	; 0x80
 800fa0c:	e079      	b.n	800fb02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800fa0e:	697b      	ldr	r3, [r7, #20]
 800fa10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d002      	beq.n	800fa1e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800fa18:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fa1c:	e071      	b.n	800fb02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800fa1e:	697b      	ldr	r3, [r7, #20]
 800fa20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d002      	beq.n	800fa2e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800fa28:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fa2c:	e069      	b.n	800fb02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800fa2e:	697b      	ldr	r3, [r7, #20]
 800fa30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d002      	beq.n	800fa3e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800fa38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fa3c:	e061      	b.n	800fb02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800fa3e:	697b      	ldr	r3, [r7, #20]
 800fa40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d002      	beq.n	800fa4e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800fa48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800fa4c:	e059      	b.n	800fb02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800fa4e:	697b      	ldr	r3, [r7, #20]
 800fa50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d002      	beq.n	800fa5e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fa58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fa5c:	e051      	b.n	800fb02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800fa5e:	697b      	ldr	r3, [r7, #20]
 800fa60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d002      	beq.n	800fa6e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fa68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fa6c:	e049      	b.n	800fb02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800fa6e:	697b      	ldr	r3, [r7, #20]
 800fa70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d002      	beq.n	800fa7e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800fa78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fa7c:	e041      	b.n	800fb02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800fa7e:	697b      	ldr	r3, [r7, #20]
 800fa80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d002      	beq.n	800fa8e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800fa88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fa8c:	e039      	b.n	800fb02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800fa8e:	697b      	ldr	r3, [r7, #20]
 800fa90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d002      	beq.n	800fa9e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800fa98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800fa9c:	e031      	b.n	800fb02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800fa9e:	697b      	ldr	r3, [r7, #20]
 800faa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d002      	beq.n	800faae <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800faa8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800faac:	e029      	b.n	800fb02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800faae:	697b      	ldr	r3, [r7, #20]
 800fab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d002      	beq.n	800fabe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800fab8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fabc:	e021      	b.n	800fb02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800fabe:	697b      	ldr	r3, [r7, #20]
 800fac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d002      	beq.n	800face <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800fac8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800facc:	e019      	b.n	800fb02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800face:	697b      	ldr	r3, [r7, #20]
 800fad0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d002      	beq.n	800fade <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800fad8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800fadc:	e011      	b.n	800fb02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800fade:	697b      	ldr	r3, [r7, #20]
 800fae0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d002      	beq.n	800faee <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800fae8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800faec:	e009      	b.n	800fb02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800faee:	697b      	ldr	r3, [r7, #20]
 800faf0:	f003 0308 	and.w	r3, r3, #8
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d002      	beq.n	800fafe <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800faf8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800fafc:	e001      	b.n	800fb02 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fafe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800fb02:	4618      	mov	r0, r3
 800fb04:	3720      	adds	r7, #32
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bd80      	pop	{r7, pc}
 800fb0a:	bf00      	nop
 800fb0c:	20000000 	.word	0x20000000
 800fb10:	10624dd3 	.word	0x10624dd3
 800fb14:	fdffe008 	.word	0xfdffe008

0800fb18 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800fb18:	b480      	push	{r7}
 800fb1a:	b085      	sub	sp, #20
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fb20:	4b1f      	ldr	r3, [pc, #124]	; (800fba0 <SDMMC_GetCmdResp2+0x88>)
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	4a1f      	ldr	r2, [pc, #124]	; (800fba4 <SDMMC_GetCmdResp2+0x8c>)
 800fb26:	fba2 2303 	umull	r2, r3, r2, r3
 800fb2a:	0a5b      	lsrs	r3, r3, #9
 800fb2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800fb30:	fb02 f303 	mul.w	r3, r2, r3
 800fb34:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	1e5a      	subs	r2, r3, #1
 800fb3a:	60fa      	str	r2, [r7, #12]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d102      	bne.n	800fb46 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fb40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fb44:	e026      	b.n	800fb94 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb4a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fb4c:	68bb      	ldr	r3, [r7, #8]
 800fb4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d0ef      	beq.n	800fb36 <SDMMC_GetCmdResp2+0x1e>
 800fb56:	68bb      	ldr	r3, [r7, #8]
 800fb58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d1ea      	bne.n	800fb36 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb64:	f003 0304 	and.w	r3, r3, #4
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d004      	beq.n	800fb76 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	2204      	movs	r2, #4
 800fb70:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fb72:	2304      	movs	r3, #4
 800fb74:	e00e      	b.n	800fb94 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb7a:	f003 0301 	and.w	r3, r3, #1
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d004      	beq.n	800fb8c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	2201      	movs	r2, #1
 800fb86:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fb88:	2301      	movs	r3, #1
 800fb8a:	e003      	b.n	800fb94 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	22c5      	movs	r2, #197	; 0xc5
 800fb90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800fb92:	2300      	movs	r3, #0
}
 800fb94:	4618      	mov	r0, r3
 800fb96:	3714      	adds	r7, #20
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9e:	4770      	bx	lr
 800fba0:	20000000 	.word	0x20000000
 800fba4:	10624dd3 	.word	0x10624dd3

0800fba8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800fba8:	b480      	push	{r7}
 800fbaa:	b085      	sub	sp, #20
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fbb0:	4b1a      	ldr	r3, [pc, #104]	; (800fc1c <SDMMC_GetCmdResp3+0x74>)
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	4a1a      	ldr	r2, [pc, #104]	; (800fc20 <SDMMC_GetCmdResp3+0x78>)
 800fbb6:	fba2 2303 	umull	r2, r3, r2, r3
 800fbba:	0a5b      	lsrs	r3, r3, #9
 800fbbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800fbc0:	fb02 f303 	mul.w	r3, r2, r3
 800fbc4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	1e5a      	subs	r2, r3, #1
 800fbca:	60fa      	str	r2, [r7, #12]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d102      	bne.n	800fbd6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fbd0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fbd4:	e01b      	b.n	800fc0e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbda:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fbdc:	68bb      	ldr	r3, [r7, #8]
 800fbde:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d0ef      	beq.n	800fbc6 <SDMMC_GetCmdResp3+0x1e>
 800fbe6:	68bb      	ldr	r3, [r7, #8]
 800fbe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d1ea      	bne.n	800fbc6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbf4:	f003 0304 	and.w	r3, r3, #4
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d004      	beq.n	800fc06 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2204      	movs	r2, #4
 800fc00:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fc02:	2304      	movs	r3, #4
 800fc04:	e003      	b.n	800fc0e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	22c5      	movs	r2, #197	; 0xc5
 800fc0a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800fc0c:	2300      	movs	r3, #0
}
 800fc0e:	4618      	mov	r0, r3
 800fc10:	3714      	adds	r7, #20
 800fc12:	46bd      	mov	sp, r7
 800fc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc18:	4770      	bx	lr
 800fc1a:	bf00      	nop
 800fc1c:	20000000 	.word	0x20000000
 800fc20:	10624dd3 	.word	0x10624dd3

0800fc24 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b088      	sub	sp, #32
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	60f8      	str	r0, [r7, #12]
 800fc2c:	460b      	mov	r3, r1
 800fc2e:	607a      	str	r2, [r7, #4]
 800fc30:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fc32:	4b35      	ldr	r3, [pc, #212]	; (800fd08 <SDMMC_GetCmdResp6+0xe4>)
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	4a35      	ldr	r2, [pc, #212]	; (800fd0c <SDMMC_GetCmdResp6+0xe8>)
 800fc38:	fba2 2303 	umull	r2, r3, r2, r3
 800fc3c:	0a5b      	lsrs	r3, r3, #9
 800fc3e:	f241 3288 	movw	r2, #5000	; 0x1388
 800fc42:	fb02 f303 	mul.w	r3, r2, r3
 800fc46:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800fc48:	69fb      	ldr	r3, [r7, #28]
 800fc4a:	1e5a      	subs	r2, r3, #1
 800fc4c:	61fa      	str	r2, [r7, #28]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d102      	bne.n	800fc58 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fc52:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fc56:	e052      	b.n	800fcfe <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc5c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fc5e:	69bb      	ldr	r3, [r7, #24]
 800fc60:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d0ef      	beq.n	800fc48 <SDMMC_GetCmdResp6+0x24>
 800fc68:	69bb      	ldr	r3, [r7, #24]
 800fc6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d1ea      	bne.n	800fc48 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc76:	f003 0304 	and.w	r3, r3, #4
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d004      	beq.n	800fc88 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	2204      	movs	r2, #4
 800fc82:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fc84:	2304      	movs	r3, #4
 800fc86:	e03a      	b.n	800fcfe <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc8c:	f003 0301 	and.w	r3, r3, #1
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d004      	beq.n	800fc9e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	2201      	movs	r2, #1
 800fc98:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fc9a:	2301      	movs	r3, #1
 800fc9c:	e02f      	b.n	800fcfe <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800fc9e:	68f8      	ldr	r0, [r7, #12]
 800fca0:	f7ff fbcb 	bl	800f43a <SDIO_GetCommandResponse>
 800fca4:	4603      	mov	r3, r0
 800fca6:	461a      	mov	r2, r3
 800fca8:	7afb      	ldrb	r3, [r7, #11]
 800fcaa:	4293      	cmp	r3, r2
 800fcac:	d001      	beq.n	800fcb2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fcae:	2301      	movs	r3, #1
 800fcb0:	e025      	b.n	800fcfe <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	22c5      	movs	r2, #197	; 0xc5
 800fcb6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800fcb8:	2100      	movs	r1, #0
 800fcba:	68f8      	ldr	r0, [r7, #12]
 800fcbc:	f7ff fbca 	bl	800f454 <SDIO_GetResponse>
 800fcc0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800fcc2:	697b      	ldr	r3, [r7, #20]
 800fcc4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d106      	bne.n	800fcda <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800fccc:	697b      	ldr	r3, [r7, #20]
 800fcce:	0c1b      	lsrs	r3, r3, #16
 800fcd0:	b29a      	uxth	r2, r3
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	e011      	b.n	800fcfe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800fcda:	697b      	ldr	r3, [r7, #20]
 800fcdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d002      	beq.n	800fcea <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fce4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fce8:	e009      	b.n	800fcfe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800fcea:	697b      	ldr	r3, [r7, #20]
 800fcec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d002      	beq.n	800fcfa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fcf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fcf8:	e001      	b.n	800fcfe <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fcfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800fcfe:	4618      	mov	r0, r3
 800fd00:	3720      	adds	r7, #32
 800fd02:	46bd      	mov	sp, r7
 800fd04:	bd80      	pop	{r7, pc}
 800fd06:	bf00      	nop
 800fd08:	20000000 	.word	0x20000000
 800fd0c:	10624dd3 	.word	0x10624dd3

0800fd10 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800fd10:	b480      	push	{r7}
 800fd12:	b085      	sub	sp, #20
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fd18:	4b22      	ldr	r3, [pc, #136]	; (800fda4 <SDMMC_GetCmdResp7+0x94>)
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	4a22      	ldr	r2, [pc, #136]	; (800fda8 <SDMMC_GetCmdResp7+0x98>)
 800fd1e:	fba2 2303 	umull	r2, r3, r2, r3
 800fd22:	0a5b      	lsrs	r3, r3, #9
 800fd24:	f241 3288 	movw	r2, #5000	; 0x1388
 800fd28:	fb02 f303 	mul.w	r3, r2, r3
 800fd2c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	1e5a      	subs	r2, r3, #1
 800fd32:	60fa      	str	r2, [r7, #12]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d102      	bne.n	800fd3e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fd38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fd3c:	e02c      	b.n	800fd98 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd42:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fd44:	68bb      	ldr	r3, [r7, #8]
 800fd46:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d0ef      	beq.n	800fd2e <SDMMC_GetCmdResp7+0x1e>
 800fd4e:	68bb      	ldr	r3, [r7, #8]
 800fd50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d1ea      	bne.n	800fd2e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd5c:	f003 0304 	and.w	r3, r3, #4
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d004      	beq.n	800fd6e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	2204      	movs	r2, #4
 800fd68:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fd6a:	2304      	movs	r3, #4
 800fd6c:	e014      	b.n	800fd98 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd72:	f003 0301 	and.w	r3, r3, #1
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d004      	beq.n	800fd84 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	2201      	movs	r2, #1
 800fd7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fd80:	2301      	movs	r3, #1
 800fd82:	e009      	b.n	800fd98 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fd88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d002      	beq.n	800fd96 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	2240      	movs	r2, #64	; 0x40
 800fd94:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800fd96:	2300      	movs	r3, #0
  
}
 800fd98:	4618      	mov	r0, r3
 800fd9a:	3714      	adds	r7, #20
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda2:	4770      	bx	lr
 800fda4:	20000000 	.word	0x20000000
 800fda8:	10624dd3 	.word	0x10624dd3

0800fdac <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800fdac:	b480      	push	{r7}
 800fdae:	b085      	sub	sp, #20
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fdb4:	4b11      	ldr	r3, [pc, #68]	; (800fdfc <SDMMC_GetCmdError+0x50>)
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	4a11      	ldr	r2, [pc, #68]	; (800fe00 <SDMMC_GetCmdError+0x54>)
 800fdba:	fba2 2303 	umull	r2, r3, r2, r3
 800fdbe:	0a5b      	lsrs	r3, r3, #9
 800fdc0:	f241 3288 	movw	r2, #5000	; 0x1388
 800fdc4:	fb02 f303 	mul.w	r3, r2, r3
 800fdc8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	1e5a      	subs	r2, r3, #1
 800fdce:	60fa      	str	r2, [r7, #12]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d102      	bne.n	800fdda <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fdd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fdd8:	e009      	b.n	800fdee <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d0f1      	beq.n	800fdca <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	22c5      	movs	r2, #197	; 0xc5
 800fdea:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800fdec:	2300      	movs	r3, #0
}
 800fdee:	4618      	mov	r0, r3
 800fdf0:	3714      	adds	r7, #20
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf8:	4770      	bx	lr
 800fdfa:	bf00      	nop
 800fdfc:	20000000 	.word	0x20000000
 800fe00:	10624dd3 	.word	0x10624dd3

0800fe04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fe04:	b084      	sub	sp, #16
 800fe06:	b580      	push	{r7, lr}
 800fe08:	b084      	sub	sp, #16
 800fe0a:	af00      	add	r7, sp, #0
 800fe0c:	6078      	str	r0, [r7, #4]
 800fe0e:	f107 001c 	add.w	r0, r7, #28
 800fe12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fe16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe18:	2b01      	cmp	r3, #1
 800fe1a:	d122      	bne.n	800fe62 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	68db      	ldr	r3, [r3, #12]
 800fe2c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800fe30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fe34:	687a      	ldr	r2, [r7, #4]
 800fe36:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	68db      	ldr	r3, [r3, #12]
 800fe3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800fe44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe46:	2b01      	cmp	r3, #1
 800fe48:	d105      	bne.n	800fe56 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	68db      	ldr	r3, [r3, #12]
 800fe4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fe56:	6878      	ldr	r0, [r7, #4]
 800fe58:	f001 fbe8 	bl	801162c <USB_CoreReset>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	73fb      	strb	r3, [r7, #15]
 800fe60:	e01a      	b.n	800fe98 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	68db      	ldr	r3, [r3, #12]
 800fe66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fe6e:	6878      	ldr	r0, [r7, #4]
 800fe70:	f001 fbdc 	bl	801162c <USB_CoreReset>
 800fe74:	4603      	mov	r3, r0
 800fe76:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800fe78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d106      	bne.n	800fe8c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	639a      	str	r2, [r3, #56]	; 0x38
 800fe8a:	e005      	b.n	800fe98 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800fe98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe9a:	2b01      	cmp	r3, #1
 800fe9c:	d10b      	bne.n	800feb6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	689b      	ldr	r3, [r3, #8]
 800fea2:	f043 0206 	orr.w	r2, r3, #6
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	689b      	ldr	r3, [r3, #8]
 800feae:	f043 0220 	orr.w	r2, r3, #32
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800feb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800feb8:	4618      	mov	r0, r3
 800feba:	3710      	adds	r7, #16
 800febc:	46bd      	mov	sp, r7
 800febe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fec2:	b004      	add	sp, #16
 800fec4:	4770      	bx	lr
	...

0800fec8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800fec8:	b480      	push	{r7}
 800feca:	b087      	sub	sp, #28
 800fecc:	af00      	add	r7, sp, #0
 800fece:	60f8      	str	r0, [r7, #12]
 800fed0:	60b9      	str	r1, [r7, #8]
 800fed2:	4613      	mov	r3, r2
 800fed4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800fed6:	79fb      	ldrb	r3, [r7, #7]
 800fed8:	2b02      	cmp	r3, #2
 800feda:	d165      	bne.n	800ffa8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800fedc:	68bb      	ldr	r3, [r7, #8]
 800fede:	4a41      	ldr	r2, [pc, #260]	; (800ffe4 <USB_SetTurnaroundTime+0x11c>)
 800fee0:	4293      	cmp	r3, r2
 800fee2:	d906      	bls.n	800fef2 <USB_SetTurnaroundTime+0x2a>
 800fee4:	68bb      	ldr	r3, [r7, #8]
 800fee6:	4a40      	ldr	r2, [pc, #256]	; (800ffe8 <USB_SetTurnaroundTime+0x120>)
 800fee8:	4293      	cmp	r3, r2
 800feea:	d202      	bcs.n	800fef2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800feec:	230f      	movs	r3, #15
 800feee:	617b      	str	r3, [r7, #20]
 800fef0:	e062      	b.n	800ffb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800fef2:	68bb      	ldr	r3, [r7, #8]
 800fef4:	4a3c      	ldr	r2, [pc, #240]	; (800ffe8 <USB_SetTurnaroundTime+0x120>)
 800fef6:	4293      	cmp	r3, r2
 800fef8:	d306      	bcc.n	800ff08 <USB_SetTurnaroundTime+0x40>
 800fefa:	68bb      	ldr	r3, [r7, #8]
 800fefc:	4a3b      	ldr	r2, [pc, #236]	; (800ffec <USB_SetTurnaroundTime+0x124>)
 800fefe:	4293      	cmp	r3, r2
 800ff00:	d202      	bcs.n	800ff08 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ff02:	230e      	movs	r3, #14
 800ff04:	617b      	str	r3, [r7, #20]
 800ff06:	e057      	b.n	800ffb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ff08:	68bb      	ldr	r3, [r7, #8]
 800ff0a:	4a38      	ldr	r2, [pc, #224]	; (800ffec <USB_SetTurnaroundTime+0x124>)
 800ff0c:	4293      	cmp	r3, r2
 800ff0e:	d306      	bcc.n	800ff1e <USB_SetTurnaroundTime+0x56>
 800ff10:	68bb      	ldr	r3, [r7, #8]
 800ff12:	4a37      	ldr	r2, [pc, #220]	; (800fff0 <USB_SetTurnaroundTime+0x128>)
 800ff14:	4293      	cmp	r3, r2
 800ff16:	d202      	bcs.n	800ff1e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ff18:	230d      	movs	r3, #13
 800ff1a:	617b      	str	r3, [r7, #20]
 800ff1c:	e04c      	b.n	800ffb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ff1e:	68bb      	ldr	r3, [r7, #8]
 800ff20:	4a33      	ldr	r2, [pc, #204]	; (800fff0 <USB_SetTurnaroundTime+0x128>)
 800ff22:	4293      	cmp	r3, r2
 800ff24:	d306      	bcc.n	800ff34 <USB_SetTurnaroundTime+0x6c>
 800ff26:	68bb      	ldr	r3, [r7, #8]
 800ff28:	4a32      	ldr	r2, [pc, #200]	; (800fff4 <USB_SetTurnaroundTime+0x12c>)
 800ff2a:	4293      	cmp	r3, r2
 800ff2c:	d802      	bhi.n	800ff34 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ff2e:	230c      	movs	r3, #12
 800ff30:	617b      	str	r3, [r7, #20]
 800ff32:	e041      	b.n	800ffb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ff34:	68bb      	ldr	r3, [r7, #8]
 800ff36:	4a2f      	ldr	r2, [pc, #188]	; (800fff4 <USB_SetTurnaroundTime+0x12c>)
 800ff38:	4293      	cmp	r3, r2
 800ff3a:	d906      	bls.n	800ff4a <USB_SetTurnaroundTime+0x82>
 800ff3c:	68bb      	ldr	r3, [r7, #8]
 800ff3e:	4a2e      	ldr	r2, [pc, #184]	; (800fff8 <USB_SetTurnaroundTime+0x130>)
 800ff40:	4293      	cmp	r3, r2
 800ff42:	d802      	bhi.n	800ff4a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ff44:	230b      	movs	r3, #11
 800ff46:	617b      	str	r3, [r7, #20]
 800ff48:	e036      	b.n	800ffb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ff4a:	68bb      	ldr	r3, [r7, #8]
 800ff4c:	4a2a      	ldr	r2, [pc, #168]	; (800fff8 <USB_SetTurnaroundTime+0x130>)
 800ff4e:	4293      	cmp	r3, r2
 800ff50:	d906      	bls.n	800ff60 <USB_SetTurnaroundTime+0x98>
 800ff52:	68bb      	ldr	r3, [r7, #8]
 800ff54:	4a29      	ldr	r2, [pc, #164]	; (800fffc <USB_SetTurnaroundTime+0x134>)
 800ff56:	4293      	cmp	r3, r2
 800ff58:	d802      	bhi.n	800ff60 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ff5a:	230a      	movs	r3, #10
 800ff5c:	617b      	str	r3, [r7, #20]
 800ff5e:	e02b      	b.n	800ffb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ff60:	68bb      	ldr	r3, [r7, #8]
 800ff62:	4a26      	ldr	r2, [pc, #152]	; (800fffc <USB_SetTurnaroundTime+0x134>)
 800ff64:	4293      	cmp	r3, r2
 800ff66:	d906      	bls.n	800ff76 <USB_SetTurnaroundTime+0xae>
 800ff68:	68bb      	ldr	r3, [r7, #8]
 800ff6a:	4a25      	ldr	r2, [pc, #148]	; (8010000 <USB_SetTurnaroundTime+0x138>)
 800ff6c:	4293      	cmp	r3, r2
 800ff6e:	d202      	bcs.n	800ff76 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ff70:	2309      	movs	r3, #9
 800ff72:	617b      	str	r3, [r7, #20]
 800ff74:	e020      	b.n	800ffb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ff76:	68bb      	ldr	r3, [r7, #8]
 800ff78:	4a21      	ldr	r2, [pc, #132]	; (8010000 <USB_SetTurnaroundTime+0x138>)
 800ff7a:	4293      	cmp	r3, r2
 800ff7c:	d306      	bcc.n	800ff8c <USB_SetTurnaroundTime+0xc4>
 800ff7e:	68bb      	ldr	r3, [r7, #8]
 800ff80:	4a20      	ldr	r2, [pc, #128]	; (8010004 <USB_SetTurnaroundTime+0x13c>)
 800ff82:	4293      	cmp	r3, r2
 800ff84:	d802      	bhi.n	800ff8c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ff86:	2308      	movs	r3, #8
 800ff88:	617b      	str	r3, [r7, #20]
 800ff8a:	e015      	b.n	800ffb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ff8c:	68bb      	ldr	r3, [r7, #8]
 800ff8e:	4a1d      	ldr	r2, [pc, #116]	; (8010004 <USB_SetTurnaroundTime+0x13c>)
 800ff90:	4293      	cmp	r3, r2
 800ff92:	d906      	bls.n	800ffa2 <USB_SetTurnaroundTime+0xda>
 800ff94:	68bb      	ldr	r3, [r7, #8]
 800ff96:	4a1c      	ldr	r2, [pc, #112]	; (8010008 <USB_SetTurnaroundTime+0x140>)
 800ff98:	4293      	cmp	r3, r2
 800ff9a:	d202      	bcs.n	800ffa2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ff9c:	2307      	movs	r3, #7
 800ff9e:	617b      	str	r3, [r7, #20]
 800ffa0:	e00a      	b.n	800ffb8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ffa2:	2306      	movs	r3, #6
 800ffa4:	617b      	str	r3, [r7, #20]
 800ffa6:	e007      	b.n	800ffb8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ffa8:	79fb      	ldrb	r3, [r7, #7]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d102      	bne.n	800ffb4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ffae:	2309      	movs	r3, #9
 800ffb0:	617b      	str	r3, [r7, #20]
 800ffb2:	e001      	b.n	800ffb8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ffb4:	2309      	movs	r3, #9
 800ffb6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	68db      	ldr	r3, [r3, #12]
 800ffbc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	68da      	ldr	r2, [r3, #12]
 800ffc8:	697b      	ldr	r3, [r7, #20]
 800ffca:	029b      	lsls	r3, r3, #10
 800ffcc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ffd0:	431a      	orrs	r2, r3
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ffd6:	2300      	movs	r3, #0
}
 800ffd8:	4618      	mov	r0, r3
 800ffda:	371c      	adds	r7, #28
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe2:	4770      	bx	lr
 800ffe4:	00d8acbf 	.word	0x00d8acbf
 800ffe8:	00e4e1c0 	.word	0x00e4e1c0
 800ffec:	00f42400 	.word	0x00f42400
 800fff0:	01067380 	.word	0x01067380
 800fff4:	011a499f 	.word	0x011a499f
 800fff8:	01312cff 	.word	0x01312cff
 800fffc:	014ca43f 	.word	0x014ca43f
 8010000:	016e3600 	.word	0x016e3600
 8010004:	01a6ab1f 	.word	0x01a6ab1f
 8010008:	01e84800 	.word	0x01e84800

0801000c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801000c:	b480      	push	{r7}
 801000e:	b083      	sub	sp, #12
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	689b      	ldr	r3, [r3, #8]
 8010018:	f043 0201 	orr.w	r2, r3, #1
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010020:	2300      	movs	r3, #0
}
 8010022:	4618      	mov	r0, r3
 8010024:	370c      	adds	r7, #12
 8010026:	46bd      	mov	sp, r7
 8010028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002c:	4770      	bx	lr

0801002e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801002e:	b480      	push	{r7}
 8010030:	b083      	sub	sp, #12
 8010032:	af00      	add	r7, sp, #0
 8010034:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	689b      	ldr	r3, [r3, #8]
 801003a:	f023 0201 	bic.w	r2, r3, #1
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010042:	2300      	movs	r3, #0
}
 8010044:	4618      	mov	r0, r3
 8010046:	370c      	adds	r7, #12
 8010048:	46bd      	mov	sp, r7
 801004a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004e:	4770      	bx	lr

08010050 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b084      	sub	sp, #16
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
 8010058:	460b      	mov	r3, r1
 801005a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 801005c:	2300      	movs	r3, #0
 801005e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	68db      	ldr	r3, [r3, #12]
 8010064:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801006c:	78fb      	ldrb	r3, [r7, #3]
 801006e:	2b01      	cmp	r3, #1
 8010070:	d115      	bne.n	801009e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	68db      	ldr	r3, [r3, #12]
 8010076:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801007e:	2001      	movs	r0, #1
 8010080:	f7f6 fea0 	bl	8006dc4 <HAL_Delay>
      ms++;
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	3301      	adds	r3, #1
 8010088:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801008a:	6878      	ldr	r0, [r7, #4]
 801008c:	f001 fa3f 	bl	801150e <USB_GetMode>
 8010090:	4603      	mov	r3, r0
 8010092:	2b01      	cmp	r3, #1
 8010094:	d01e      	beq.n	80100d4 <USB_SetCurrentMode+0x84>
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	2b31      	cmp	r3, #49	; 0x31
 801009a:	d9f0      	bls.n	801007e <USB_SetCurrentMode+0x2e>
 801009c:	e01a      	b.n	80100d4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801009e:	78fb      	ldrb	r3, [r7, #3]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d115      	bne.n	80100d0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	68db      	ldr	r3, [r3, #12]
 80100a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80100b0:	2001      	movs	r0, #1
 80100b2:	f7f6 fe87 	bl	8006dc4 <HAL_Delay>
      ms++;
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	3301      	adds	r3, #1
 80100ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80100bc:	6878      	ldr	r0, [r7, #4]
 80100be:	f001 fa26 	bl	801150e <USB_GetMode>
 80100c2:	4603      	mov	r3, r0
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d005      	beq.n	80100d4 <USB_SetCurrentMode+0x84>
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	2b31      	cmp	r3, #49	; 0x31
 80100cc:	d9f0      	bls.n	80100b0 <USB_SetCurrentMode+0x60>
 80100ce:	e001      	b.n	80100d4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80100d0:	2301      	movs	r3, #1
 80100d2:	e005      	b.n	80100e0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	2b32      	cmp	r3, #50	; 0x32
 80100d8:	d101      	bne.n	80100de <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80100da:	2301      	movs	r3, #1
 80100dc:	e000      	b.n	80100e0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80100de:	2300      	movs	r3, #0
}
 80100e0:	4618      	mov	r0, r3
 80100e2:	3710      	adds	r7, #16
 80100e4:	46bd      	mov	sp, r7
 80100e6:	bd80      	pop	{r7, pc}

080100e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80100e8:	b084      	sub	sp, #16
 80100ea:	b580      	push	{r7, lr}
 80100ec:	b086      	sub	sp, #24
 80100ee:	af00      	add	r7, sp, #0
 80100f0:	6078      	str	r0, [r7, #4]
 80100f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80100f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80100fa:	2300      	movs	r3, #0
 80100fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010102:	2300      	movs	r3, #0
 8010104:	613b      	str	r3, [r7, #16]
 8010106:	e009      	b.n	801011c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010108:	687a      	ldr	r2, [r7, #4]
 801010a:	693b      	ldr	r3, [r7, #16]
 801010c:	3340      	adds	r3, #64	; 0x40
 801010e:	009b      	lsls	r3, r3, #2
 8010110:	4413      	add	r3, r2
 8010112:	2200      	movs	r2, #0
 8010114:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010116:	693b      	ldr	r3, [r7, #16]
 8010118:	3301      	adds	r3, #1
 801011a:	613b      	str	r3, [r7, #16]
 801011c:	693b      	ldr	r3, [r7, #16]
 801011e:	2b0e      	cmp	r3, #14
 8010120:	d9f2      	bls.n	8010108 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010124:	2b00      	cmp	r3, #0
 8010126:	d11c      	bne.n	8010162 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801012e:	685b      	ldr	r3, [r3, #4]
 8010130:	68fa      	ldr	r2, [r7, #12]
 8010132:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010136:	f043 0302 	orr.w	r3, r3, #2
 801013a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010140:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	601a      	str	r2, [r3, #0]
 8010160:	e005      	b.n	801016e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010166:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010174:	461a      	mov	r2, r3
 8010176:	2300      	movs	r3, #0
 8010178:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010180:	4619      	mov	r1, r3
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010188:	461a      	mov	r2, r3
 801018a:	680b      	ldr	r3, [r1, #0]
 801018c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801018e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010190:	2b01      	cmp	r3, #1
 8010192:	d10c      	bne.n	80101ae <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010196:	2b00      	cmp	r3, #0
 8010198:	d104      	bne.n	80101a4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801019a:	2100      	movs	r1, #0
 801019c:	6878      	ldr	r0, [r7, #4]
 801019e:	f000 f965 	bl	801046c <USB_SetDevSpeed>
 80101a2:	e008      	b.n	80101b6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80101a4:	2101      	movs	r1, #1
 80101a6:	6878      	ldr	r0, [r7, #4]
 80101a8:	f000 f960 	bl	801046c <USB_SetDevSpeed>
 80101ac:	e003      	b.n	80101b6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80101ae:	2103      	movs	r1, #3
 80101b0:	6878      	ldr	r0, [r7, #4]
 80101b2:	f000 f95b 	bl	801046c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80101b6:	2110      	movs	r1, #16
 80101b8:	6878      	ldr	r0, [r7, #4]
 80101ba:	f000 f8f3 	bl	80103a4 <USB_FlushTxFifo>
 80101be:	4603      	mov	r3, r0
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d001      	beq.n	80101c8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80101c4:	2301      	movs	r3, #1
 80101c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80101c8:	6878      	ldr	r0, [r7, #4]
 80101ca:	f000 f91f 	bl	801040c <USB_FlushRxFifo>
 80101ce:	4603      	mov	r3, r0
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d001      	beq.n	80101d8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80101d4:	2301      	movs	r3, #1
 80101d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101de:	461a      	mov	r2, r3
 80101e0:	2300      	movs	r3, #0
 80101e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101ea:	461a      	mov	r2, r3
 80101ec:	2300      	movs	r3, #0
 80101ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101f6:	461a      	mov	r2, r3
 80101f8:	2300      	movs	r3, #0
 80101fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80101fc:	2300      	movs	r3, #0
 80101fe:	613b      	str	r3, [r7, #16]
 8010200:	e043      	b.n	801028a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010202:	693b      	ldr	r3, [r7, #16]
 8010204:	015a      	lsls	r2, r3, #5
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	4413      	add	r3, r2
 801020a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010214:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010218:	d118      	bne.n	801024c <USB_DevInit+0x164>
    {
      if (i == 0U)
 801021a:	693b      	ldr	r3, [r7, #16]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d10a      	bne.n	8010236 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010220:	693b      	ldr	r3, [r7, #16]
 8010222:	015a      	lsls	r2, r3, #5
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	4413      	add	r3, r2
 8010228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801022c:	461a      	mov	r2, r3
 801022e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010232:	6013      	str	r3, [r2, #0]
 8010234:	e013      	b.n	801025e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010236:	693b      	ldr	r3, [r7, #16]
 8010238:	015a      	lsls	r2, r3, #5
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	4413      	add	r3, r2
 801023e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010242:	461a      	mov	r2, r3
 8010244:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010248:	6013      	str	r3, [r2, #0]
 801024a:	e008      	b.n	801025e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801024c:	693b      	ldr	r3, [r7, #16]
 801024e:	015a      	lsls	r2, r3, #5
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	4413      	add	r3, r2
 8010254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010258:	461a      	mov	r2, r3
 801025a:	2300      	movs	r3, #0
 801025c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801025e:	693b      	ldr	r3, [r7, #16]
 8010260:	015a      	lsls	r2, r3, #5
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	4413      	add	r3, r2
 8010266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801026a:	461a      	mov	r2, r3
 801026c:	2300      	movs	r3, #0
 801026e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010270:	693b      	ldr	r3, [r7, #16]
 8010272:	015a      	lsls	r2, r3, #5
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	4413      	add	r3, r2
 8010278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801027c:	461a      	mov	r2, r3
 801027e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010282:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010284:	693b      	ldr	r3, [r7, #16]
 8010286:	3301      	adds	r3, #1
 8010288:	613b      	str	r3, [r7, #16]
 801028a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801028c:	693a      	ldr	r2, [r7, #16]
 801028e:	429a      	cmp	r2, r3
 8010290:	d3b7      	bcc.n	8010202 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010292:	2300      	movs	r3, #0
 8010294:	613b      	str	r3, [r7, #16]
 8010296:	e043      	b.n	8010320 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010298:	693b      	ldr	r3, [r7, #16]
 801029a:	015a      	lsls	r2, r3, #5
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	4413      	add	r3, r2
 80102a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80102aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80102ae:	d118      	bne.n	80102e2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80102b0:	693b      	ldr	r3, [r7, #16]
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d10a      	bne.n	80102cc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80102b6:	693b      	ldr	r3, [r7, #16]
 80102b8:	015a      	lsls	r2, r3, #5
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	4413      	add	r3, r2
 80102be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102c2:	461a      	mov	r2, r3
 80102c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80102c8:	6013      	str	r3, [r2, #0]
 80102ca:	e013      	b.n	80102f4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80102cc:	693b      	ldr	r3, [r7, #16]
 80102ce:	015a      	lsls	r2, r3, #5
 80102d0:	68fb      	ldr	r3, [r7, #12]
 80102d2:	4413      	add	r3, r2
 80102d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102d8:	461a      	mov	r2, r3
 80102da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80102de:	6013      	str	r3, [r2, #0]
 80102e0:	e008      	b.n	80102f4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80102e2:	693b      	ldr	r3, [r7, #16]
 80102e4:	015a      	lsls	r2, r3, #5
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	4413      	add	r3, r2
 80102ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102ee:	461a      	mov	r2, r3
 80102f0:	2300      	movs	r3, #0
 80102f2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80102f4:	693b      	ldr	r3, [r7, #16]
 80102f6:	015a      	lsls	r2, r3, #5
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	4413      	add	r3, r2
 80102fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010300:	461a      	mov	r2, r3
 8010302:	2300      	movs	r3, #0
 8010304:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010306:	693b      	ldr	r3, [r7, #16]
 8010308:	015a      	lsls	r2, r3, #5
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	4413      	add	r3, r2
 801030e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010312:	461a      	mov	r2, r3
 8010314:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010318:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801031a:	693b      	ldr	r3, [r7, #16]
 801031c:	3301      	adds	r3, #1
 801031e:	613b      	str	r3, [r7, #16]
 8010320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010322:	693a      	ldr	r2, [r7, #16]
 8010324:	429a      	cmp	r2, r3
 8010326:	d3b7      	bcc.n	8010298 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801032e:	691b      	ldr	r3, [r3, #16]
 8010330:	68fa      	ldr	r2, [r7, #12]
 8010332:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010336:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801033a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	2200      	movs	r2, #0
 8010340:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8010348:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801034a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801034c:	2b00      	cmp	r3, #0
 801034e:	d105      	bne.n	801035c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	699b      	ldr	r3, [r3, #24]
 8010354:	f043 0210 	orr.w	r2, r3, #16
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	699a      	ldr	r2, [r3, #24]
 8010360:	4b0f      	ldr	r3, [pc, #60]	; (80103a0 <USB_DevInit+0x2b8>)
 8010362:	4313      	orrs	r3, r2
 8010364:	687a      	ldr	r2, [r7, #4]
 8010366:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8010368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801036a:	2b00      	cmp	r3, #0
 801036c:	d005      	beq.n	801037a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	699b      	ldr	r3, [r3, #24]
 8010372:	f043 0208 	orr.w	r2, r3, #8
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801037a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801037c:	2b01      	cmp	r3, #1
 801037e:	d107      	bne.n	8010390 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	699b      	ldr	r3, [r3, #24]
 8010384:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010388:	f043 0304 	orr.w	r3, r3, #4
 801038c:	687a      	ldr	r2, [r7, #4]
 801038e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010390:	7dfb      	ldrb	r3, [r7, #23]
}
 8010392:	4618      	mov	r0, r3
 8010394:	3718      	adds	r7, #24
 8010396:	46bd      	mov	sp, r7
 8010398:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801039c:	b004      	add	sp, #16
 801039e:	4770      	bx	lr
 80103a0:	803c3800 	.word	0x803c3800

080103a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80103a4:	b480      	push	{r7}
 80103a6:	b085      	sub	sp, #20
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
 80103ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80103ae:	2300      	movs	r3, #0
 80103b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	3301      	adds	r3, #1
 80103b6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	4a13      	ldr	r2, [pc, #76]	; (8010408 <USB_FlushTxFifo+0x64>)
 80103bc:	4293      	cmp	r3, r2
 80103be:	d901      	bls.n	80103c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80103c0:	2303      	movs	r3, #3
 80103c2:	e01b      	b.n	80103fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	691b      	ldr	r3, [r3, #16]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	daf2      	bge.n	80103b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80103cc:	2300      	movs	r3, #0
 80103ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80103d0:	683b      	ldr	r3, [r7, #0]
 80103d2:	019b      	lsls	r3, r3, #6
 80103d4:	f043 0220 	orr.w	r2, r3, #32
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	3301      	adds	r3, #1
 80103e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	4a08      	ldr	r2, [pc, #32]	; (8010408 <USB_FlushTxFifo+0x64>)
 80103e6:	4293      	cmp	r3, r2
 80103e8:	d901      	bls.n	80103ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80103ea:	2303      	movs	r3, #3
 80103ec:	e006      	b.n	80103fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	691b      	ldr	r3, [r3, #16]
 80103f2:	f003 0320 	and.w	r3, r3, #32
 80103f6:	2b20      	cmp	r3, #32
 80103f8:	d0f0      	beq.n	80103dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80103fa:	2300      	movs	r3, #0
}
 80103fc:	4618      	mov	r0, r3
 80103fe:	3714      	adds	r7, #20
 8010400:	46bd      	mov	sp, r7
 8010402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010406:	4770      	bx	lr
 8010408:	00030d40 	.word	0x00030d40

0801040c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801040c:	b480      	push	{r7}
 801040e:	b085      	sub	sp, #20
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010414:	2300      	movs	r3, #0
 8010416:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	3301      	adds	r3, #1
 801041c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	4a11      	ldr	r2, [pc, #68]	; (8010468 <USB_FlushRxFifo+0x5c>)
 8010422:	4293      	cmp	r3, r2
 8010424:	d901      	bls.n	801042a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8010426:	2303      	movs	r3, #3
 8010428:	e018      	b.n	801045c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	691b      	ldr	r3, [r3, #16]
 801042e:	2b00      	cmp	r3, #0
 8010430:	daf2      	bge.n	8010418 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8010432:	2300      	movs	r3, #0
 8010434:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	2210      	movs	r2, #16
 801043a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	3301      	adds	r3, #1
 8010440:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	4a08      	ldr	r2, [pc, #32]	; (8010468 <USB_FlushRxFifo+0x5c>)
 8010446:	4293      	cmp	r3, r2
 8010448:	d901      	bls.n	801044e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801044a:	2303      	movs	r3, #3
 801044c:	e006      	b.n	801045c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	691b      	ldr	r3, [r3, #16]
 8010452:	f003 0310 	and.w	r3, r3, #16
 8010456:	2b10      	cmp	r3, #16
 8010458:	d0f0      	beq.n	801043c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801045a:	2300      	movs	r3, #0
}
 801045c:	4618      	mov	r0, r3
 801045e:	3714      	adds	r7, #20
 8010460:	46bd      	mov	sp, r7
 8010462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010466:	4770      	bx	lr
 8010468:	00030d40 	.word	0x00030d40

0801046c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801046c:	b480      	push	{r7}
 801046e:	b085      	sub	sp, #20
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
 8010474:	460b      	mov	r3, r1
 8010476:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010482:	681a      	ldr	r2, [r3, #0]
 8010484:	78fb      	ldrb	r3, [r7, #3]
 8010486:	68f9      	ldr	r1, [r7, #12]
 8010488:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801048c:	4313      	orrs	r3, r2
 801048e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010490:	2300      	movs	r3, #0
}
 8010492:	4618      	mov	r0, r3
 8010494:	3714      	adds	r7, #20
 8010496:	46bd      	mov	sp, r7
 8010498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049c:	4770      	bx	lr

0801049e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801049e:	b480      	push	{r7}
 80104a0:	b087      	sub	sp, #28
 80104a2:	af00      	add	r7, sp, #0
 80104a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80104aa:	693b      	ldr	r3, [r7, #16]
 80104ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104b0:	689b      	ldr	r3, [r3, #8]
 80104b2:	f003 0306 	and.w	r3, r3, #6
 80104b6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d102      	bne.n	80104c4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80104be:	2300      	movs	r3, #0
 80104c0:	75fb      	strb	r3, [r7, #23]
 80104c2:	e00a      	b.n	80104da <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	2b02      	cmp	r3, #2
 80104c8:	d002      	beq.n	80104d0 <USB_GetDevSpeed+0x32>
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	2b06      	cmp	r3, #6
 80104ce:	d102      	bne.n	80104d6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80104d0:	2302      	movs	r3, #2
 80104d2:	75fb      	strb	r3, [r7, #23]
 80104d4:	e001      	b.n	80104da <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80104d6:	230f      	movs	r3, #15
 80104d8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80104da:	7dfb      	ldrb	r3, [r7, #23]
}
 80104dc:	4618      	mov	r0, r3
 80104de:	371c      	adds	r7, #28
 80104e0:	46bd      	mov	sp, r7
 80104e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e6:	4770      	bx	lr

080104e8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80104e8:	b480      	push	{r7}
 80104ea:	b085      	sub	sp, #20
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
 80104f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80104f6:	683b      	ldr	r3, [r7, #0]
 80104f8:	781b      	ldrb	r3, [r3, #0]
 80104fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80104fc:	683b      	ldr	r3, [r7, #0]
 80104fe:	785b      	ldrb	r3, [r3, #1]
 8010500:	2b01      	cmp	r3, #1
 8010502:	d13a      	bne.n	801057a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801050a:	69da      	ldr	r2, [r3, #28]
 801050c:	683b      	ldr	r3, [r7, #0]
 801050e:	781b      	ldrb	r3, [r3, #0]
 8010510:	f003 030f 	and.w	r3, r3, #15
 8010514:	2101      	movs	r1, #1
 8010516:	fa01 f303 	lsl.w	r3, r1, r3
 801051a:	b29b      	uxth	r3, r3
 801051c:	68f9      	ldr	r1, [r7, #12]
 801051e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010522:	4313      	orrs	r3, r2
 8010524:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8010526:	68bb      	ldr	r3, [r7, #8]
 8010528:	015a      	lsls	r2, r3, #5
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	4413      	add	r3, r2
 801052e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010538:	2b00      	cmp	r3, #0
 801053a:	d155      	bne.n	80105e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801053c:	68bb      	ldr	r3, [r7, #8]
 801053e:	015a      	lsls	r2, r3, #5
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	4413      	add	r3, r2
 8010544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010548:	681a      	ldr	r2, [r3, #0]
 801054a:	683b      	ldr	r3, [r7, #0]
 801054c:	68db      	ldr	r3, [r3, #12]
 801054e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010552:	683b      	ldr	r3, [r7, #0]
 8010554:	791b      	ldrb	r3, [r3, #4]
 8010556:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010558:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801055a:	68bb      	ldr	r3, [r7, #8]
 801055c:	059b      	lsls	r3, r3, #22
 801055e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010560:	4313      	orrs	r3, r2
 8010562:	68ba      	ldr	r2, [r7, #8]
 8010564:	0151      	lsls	r1, r2, #5
 8010566:	68fa      	ldr	r2, [r7, #12]
 8010568:	440a      	add	r2, r1
 801056a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801056e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010576:	6013      	str	r3, [r2, #0]
 8010578:	e036      	b.n	80105e8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010580:	69da      	ldr	r2, [r3, #28]
 8010582:	683b      	ldr	r3, [r7, #0]
 8010584:	781b      	ldrb	r3, [r3, #0]
 8010586:	f003 030f 	and.w	r3, r3, #15
 801058a:	2101      	movs	r1, #1
 801058c:	fa01 f303 	lsl.w	r3, r1, r3
 8010590:	041b      	lsls	r3, r3, #16
 8010592:	68f9      	ldr	r1, [r7, #12]
 8010594:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010598:	4313      	orrs	r3, r2
 801059a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801059c:	68bb      	ldr	r3, [r7, #8]
 801059e:	015a      	lsls	r2, r3, #5
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	4413      	add	r3, r2
 80105a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d11a      	bne.n	80105e8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80105b2:	68bb      	ldr	r3, [r7, #8]
 80105b4:	015a      	lsls	r2, r3, #5
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	4413      	add	r3, r2
 80105ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105be:	681a      	ldr	r2, [r3, #0]
 80105c0:	683b      	ldr	r3, [r7, #0]
 80105c2:	68db      	ldr	r3, [r3, #12]
 80105c4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	791b      	ldrb	r3, [r3, #4]
 80105cc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80105ce:	430b      	orrs	r3, r1
 80105d0:	4313      	orrs	r3, r2
 80105d2:	68ba      	ldr	r2, [r7, #8]
 80105d4:	0151      	lsls	r1, r2, #5
 80105d6:	68fa      	ldr	r2, [r7, #12]
 80105d8:	440a      	add	r2, r1
 80105da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80105de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80105e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80105e6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80105e8:	2300      	movs	r3, #0
}
 80105ea:	4618      	mov	r0, r3
 80105ec:	3714      	adds	r7, #20
 80105ee:	46bd      	mov	sp, r7
 80105f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f4:	4770      	bx	lr
	...

080105f8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80105f8:	b480      	push	{r7}
 80105fa:	b085      	sub	sp, #20
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
 8010600:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010606:	683b      	ldr	r3, [r7, #0]
 8010608:	781b      	ldrb	r3, [r3, #0]
 801060a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801060c:	683b      	ldr	r3, [r7, #0]
 801060e:	785b      	ldrb	r3, [r3, #1]
 8010610:	2b01      	cmp	r3, #1
 8010612:	d161      	bne.n	80106d8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010614:	68bb      	ldr	r3, [r7, #8]
 8010616:	015a      	lsls	r2, r3, #5
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	4413      	add	r3, r2
 801061c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010626:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801062a:	d11f      	bne.n	801066c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801062c:	68bb      	ldr	r3, [r7, #8]
 801062e:	015a      	lsls	r2, r3, #5
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	4413      	add	r3, r2
 8010634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	68ba      	ldr	r2, [r7, #8]
 801063c:	0151      	lsls	r1, r2, #5
 801063e:	68fa      	ldr	r2, [r7, #12]
 8010640:	440a      	add	r2, r1
 8010642:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010646:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801064a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801064c:	68bb      	ldr	r3, [r7, #8]
 801064e:	015a      	lsls	r2, r3, #5
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	4413      	add	r3, r2
 8010654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	68ba      	ldr	r2, [r7, #8]
 801065c:	0151      	lsls	r1, r2, #5
 801065e:	68fa      	ldr	r2, [r7, #12]
 8010660:	440a      	add	r2, r1
 8010662:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010666:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801066a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010672:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010674:	683b      	ldr	r3, [r7, #0]
 8010676:	781b      	ldrb	r3, [r3, #0]
 8010678:	f003 030f 	and.w	r3, r3, #15
 801067c:	2101      	movs	r1, #1
 801067e:	fa01 f303 	lsl.w	r3, r1, r3
 8010682:	b29b      	uxth	r3, r3
 8010684:	43db      	mvns	r3, r3
 8010686:	68f9      	ldr	r1, [r7, #12]
 8010688:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801068c:	4013      	ands	r3, r2
 801068e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010696:	69da      	ldr	r2, [r3, #28]
 8010698:	683b      	ldr	r3, [r7, #0]
 801069a:	781b      	ldrb	r3, [r3, #0]
 801069c:	f003 030f 	and.w	r3, r3, #15
 80106a0:	2101      	movs	r1, #1
 80106a2:	fa01 f303 	lsl.w	r3, r1, r3
 80106a6:	b29b      	uxth	r3, r3
 80106a8:	43db      	mvns	r3, r3
 80106aa:	68f9      	ldr	r1, [r7, #12]
 80106ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80106b0:	4013      	ands	r3, r2
 80106b2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80106b4:	68bb      	ldr	r3, [r7, #8]
 80106b6:	015a      	lsls	r2, r3, #5
 80106b8:	68fb      	ldr	r3, [r7, #12]
 80106ba:	4413      	add	r3, r2
 80106bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106c0:	681a      	ldr	r2, [r3, #0]
 80106c2:	68bb      	ldr	r3, [r7, #8]
 80106c4:	0159      	lsls	r1, r3, #5
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	440b      	add	r3, r1
 80106ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106ce:	4619      	mov	r1, r3
 80106d0:	4b35      	ldr	r3, [pc, #212]	; (80107a8 <USB_DeactivateEndpoint+0x1b0>)
 80106d2:	4013      	ands	r3, r2
 80106d4:	600b      	str	r3, [r1, #0]
 80106d6:	e060      	b.n	801079a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	015a      	lsls	r2, r3, #5
 80106dc:	68fb      	ldr	r3, [r7, #12]
 80106de:	4413      	add	r3, r2
 80106e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80106ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80106ee:	d11f      	bne.n	8010730 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80106f0:	68bb      	ldr	r3, [r7, #8]
 80106f2:	015a      	lsls	r2, r3, #5
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	4413      	add	r3, r2
 80106f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	68ba      	ldr	r2, [r7, #8]
 8010700:	0151      	lsls	r1, r2, #5
 8010702:	68fa      	ldr	r2, [r7, #12]
 8010704:	440a      	add	r2, r1
 8010706:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801070a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801070e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8010710:	68bb      	ldr	r3, [r7, #8]
 8010712:	015a      	lsls	r2, r3, #5
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	4413      	add	r3, r2
 8010718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	68ba      	ldr	r2, [r7, #8]
 8010720:	0151      	lsls	r1, r2, #5
 8010722:	68fa      	ldr	r2, [r7, #12]
 8010724:	440a      	add	r2, r1
 8010726:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801072a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801072e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010736:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010738:	683b      	ldr	r3, [r7, #0]
 801073a:	781b      	ldrb	r3, [r3, #0]
 801073c:	f003 030f 	and.w	r3, r3, #15
 8010740:	2101      	movs	r1, #1
 8010742:	fa01 f303 	lsl.w	r3, r1, r3
 8010746:	041b      	lsls	r3, r3, #16
 8010748:	43db      	mvns	r3, r3
 801074a:	68f9      	ldr	r1, [r7, #12]
 801074c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010750:	4013      	ands	r3, r2
 8010752:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801075a:	69da      	ldr	r2, [r3, #28]
 801075c:	683b      	ldr	r3, [r7, #0]
 801075e:	781b      	ldrb	r3, [r3, #0]
 8010760:	f003 030f 	and.w	r3, r3, #15
 8010764:	2101      	movs	r1, #1
 8010766:	fa01 f303 	lsl.w	r3, r1, r3
 801076a:	041b      	lsls	r3, r3, #16
 801076c:	43db      	mvns	r3, r3
 801076e:	68f9      	ldr	r1, [r7, #12]
 8010770:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010774:	4013      	ands	r3, r2
 8010776:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8010778:	68bb      	ldr	r3, [r7, #8]
 801077a:	015a      	lsls	r2, r3, #5
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	4413      	add	r3, r2
 8010780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010784:	681a      	ldr	r2, [r3, #0]
 8010786:	68bb      	ldr	r3, [r7, #8]
 8010788:	0159      	lsls	r1, r3, #5
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	440b      	add	r3, r1
 801078e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010792:	4619      	mov	r1, r3
 8010794:	4b05      	ldr	r3, [pc, #20]	; (80107ac <USB_DeactivateEndpoint+0x1b4>)
 8010796:	4013      	ands	r3, r2
 8010798:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801079a:	2300      	movs	r3, #0
}
 801079c:	4618      	mov	r0, r3
 801079e:	3714      	adds	r7, #20
 80107a0:	46bd      	mov	sp, r7
 80107a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a6:	4770      	bx	lr
 80107a8:	ec337800 	.word	0xec337800
 80107ac:	eff37800 	.word	0xeff37800

080107b0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80107b0:	b580      	push	{r7, lr}
 80107b2:	b08a      	sub	sp, #40	; 0x28
 80107b4:	af02      	add	r7, sp, #8
 80107b6:	60f8      	str	r0, [r7, #12]
 80107b8:	60b9      	str	r1, [r7, #8]
 80107ba:	4613      	mov	r3, r2
 80107bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80107c2:	68bb      	ldr	r3, [r7, #8]
 80107c4:	781b      	ldrb	r3, [r3, #0]
 80107c6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80107c8:	68bb      	ldr	r3, [r7, #8]
 80107ca:	785b      	ldrb	r3, [r3, #1]
 80107cc:	2b01      	cmp	r3, #1
 80107ce:	f040 815c 	bne.w	8010a8a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80107d2:	68bb      	ldr	r3, [r7, #8]
 80107d4:	699b      	ldr	r3, [r3, #24]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d132      	bne.n	8010840 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80107da:	69bb      	ldr	r3, [r7, #24]
 80107dc:	015a      	lsls	r2, r3, #5
 80107de:	69fb      	ldr	r3, [r7, #28]
 80107e0:	4413      	add	r3, r2
 80107e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107e6:	691b      	ldr	r3, [r3, #16]
 80107e8:	69ba      	ldr	r2, [r7, #24]
 80107ea:	0151      	lsls	r1, r2, #5
 80107ec:	69fa      	ldr	r2, [r7, #28]
 80107ee:	440a      	add	r2, r1
 80107f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80107f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80107fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80107fe:	69bb      	ldr	r3, [r7, #24]
 8010800:	015a      	lsls	r2, r3, #5
 8010802:	69fb      	ldr	r3, [r7, #28]
 8010804:	4413      	add	r3, r2
 8010806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801080a:	691b      	ldr	r3, [r3, #16]
 801080c:	69ba      	ldr	r2, [r7, #24]
 801080e:	0151      	lsls	r1, r2, #5
 8010810:	69fa      	ldr	r2, [r7, #28]
 8010812:	440a      	add	r2, r1
 8010814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010818:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801081c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801081e:	69bb      	ldr	r3, [r7, #24]
 8010820:	015a      	lsls	r2, r3, #5
 8010822:	69fb      	ldr	r3, [r7, #28]
 8010824:	4413      	add	r3, r2
 8010826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801082a:	691b      	ldr	r3, [r3, #16]
 801082c:	69ba      	ldr	r2, [r7, #24]
 801082e:	0151      	lsls	r1, r2, #5
 8010830:	69fa      	ldr	r2, [r7, #28]
 8010832:	440a      	add	r2, r1
 8010834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010838:	0cdb      	lsrs	r3, r3, #19
 801083a:	04db      	lsls	r3, r3, #19
 801083c:	6113      	str	r3, [r2, #16]
 801083e:	e074      	b.n	801092a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010840:	69bb      	ldr	r3, [r7, #24]
 8010842:	015a      	lsls	r2, r3, #5
 8010844:	69fb      	ldr	r3, [r7, #28]
 8010846:	4413      	add	r3, r2
 8010848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801084c:	691b      	ldr	r3, [r3, #16]
 801084e:	69ba      	ldr	r2, [r7, #24]
 8010850:	0151      	lsls	r1, r2, #5
 8010852:	69fa      	ldr	r2, [r7, #28]
 8010854:	440a      	add	r2, r1
 8010856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801085a:	0cdb      	lsrs	r3, r3, #19
 801085c:	04db      	lsls	r3, r3, #19
 801085e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010860:	69bb      	ldr	r3, [r7, #24]
 8010862:	015a      	lsls	r2, r3, #5
 8010864:	69fb      	ldr	r3, [r7, #28]
 8010866:	4413      	add	r3, r2
 8010868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801086c:	691b      	ldr	r3, [r3, #16]
 801086e:	69ba      	ldr	r2, [r7, #24]
 8010870:	0151      	lsls	r1, r2, #5
 8010872:	69fa      	ldr	r2, [r7, #28]
 8010874:	440a      	add	r2, r1
 8010876:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801087a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801087e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010882:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8010884:	69bb      	ldr	r3, [r7, #24]
 8010886:	015a      	lsls	r2, r3, #5
 8010888:	69fb      	ldr	r3, [r7, #28]
 801088a:	4413      	add	r3, r2
 801088c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010890:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8010892:	68bb      	ldr	r3, [r7, #8]
 8010894:	6999      	ldr	r1, [r3, #24]
 8010896:	68bb      	ldr	r3, [r7, #8]
 8010898:	68db      	ldr	r3, [r3, #12]
 801089a:	440b      	add	r3, r1
 801089c:	1e59      	subs	r1, r3, #1
 801089e:	68bb      	ldr	r3, [r7, #8]
 80108a0:	68db      	ldr	r3, [r3, #12]
 80108a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80108a6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80108a8:	4b9d      	ldr	r3, [pc, #628]	; (8010b20 <USB_EPStartXfer+0x370>)
 80108aa:	400b      	ands	r3, r1
 80108ac:	69b9      	ldr	r1, [r7, #24]
 80108ae:	0148      	lsls	r0, r1, #5
 80108b0:	69f9      	ldr	r1, [r7, #28]
 80108b2:	4401      	add	r1, r0
 80108b4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80108b8:	4313      	orrs	r3, r2
 80108ba:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80108bc:	69bb      	ldr	r3, [r7, #24]
 80108be:	015a      	lsls	r2, r3, #5
 80108c0:	69fb      	ldr	r3, [r7, #28]
 80108c2:	4413      	add	r3, r2
 80108c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108c8:	691a      	ldr	r2, [r3, #16]
 80108ca:	68bb      	ldr	r3, [r7, #8]
 80108cc:	699b      	ldr	r3, [r3, #24]
 80108ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80108d2:	69b9      	ldr	r1, [r7, #24]
 80108d4:	0148      	lsls	r0, r1, #5
 80108d6:	69f9      	ldr	r1, [r7, #28]
 80108d8:	4401      	add	r1, r0
 80108da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80108de:	4313      	orrs	r3, r2
 80108e0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80108e2:	68bb      	ldr	r3, [r7, #8]
 80108e4:	791b      	ldrb	r3, [r3, #4]
 80108e6:	2b01      	cmp	r3, #1
 80108e8:	d11f      	bne.n	801092a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80108ea:	69bb      	ldr	r3, [r7, #24]
 80108ec:	015a      	lsls	r2, r3, #5
 80108ee:	69fb      	ldr	r3, [r7, #28]
 80108f0:	4413      	add	r3, r2
 80108f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108f6:	691b      	ldr	r3, [r3, #16]
 80108f8:	69ba      	ldr	r2, [r7, #24]
 80108fa:	0151      	lsls	r1, r2, #5
 80108fc:	69fa      	ldr	r2, [r7, #28]
 80108fe:	440a      	add	r2, r1
 8010900:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010904:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8010908:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801090a:	69bb      	ldr	r3, [r7, #24]
 801090c:	015a      	lsls	r2, r3, #5
 801090e:	69fb      	ldr	r3, [r7, #28]
 8010910:	4413      	add	r3, r2
 8010912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010916:	691b      	ldr	r3, [r3, #16]
 8010918:	69ba      	ldr	r2, [r7, #24]
 801091a:	0151      	lsls	r1, r2, #5
 801091c:	69fa      	ldr	r2, [r7, #28]
 801091e:	440a      	add	r2, r1
 8010920:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010924:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010928:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801092a:	79fb      	ldrb	r3, [r7, #7]
 801092c:	2b01      	cmp	r3, #1
 801092e:	d14b      	bne.n	80109c8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010930:	68bb      	ldr	r3, [r7, #8]
 8010932:	695b      	ldr	r3, [r3, #20]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d009      	beq.n	801094c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010938:	69bb      	ldr	r3, [r7, #24]
 801093a:	015a      	lsls	r2, r3, #5
 801093c:	69fb      	ldr	r3, [r7, #28]
 801093e:	4413      	add	r3, r2
 8010940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010944:	461a      	mov	r2, r3
 8010946:	68bb      	ldr	r3, [r7, #8]
 8010948:	695b      	ldr	r3, [r3, #20]
 801094a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801094c:	68bb      	ldr	r3, [r7, #8]
 801094e:	791b      	ldrb	r3, [r3, #4]
 8010950:	2b01      	cmp	r3, #1
 8010952:	d128      	bne.n	80109a6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010954:	69fb      	ldr	r3, [r7, #28]
 8010956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801095a:	689b      	ldr	r3, [r3, #8]
 801095c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010960:	2b00      	cmp	r3, #0
 8010962:	d110      	bne.n	8010986 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010964:	69bb      	ldr	r3, [r7, #24]
 8010966:	015a      	lsls	r2, r3, #5
 8010968:	69fb      	ldr	r3, [r7, #28]
 801096a:	4413      	add	r3, r2
 801096c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	69ba      	ldr	r2, [r7, #24]
 8010974:	0151      	lsls	r1, r2, #5
 8010976:	69fa      	ldr	r2, [r7, #28]
 8010978:	440a      	add	r2, r1
 801097a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801097e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010982:	6013      	str	r3, [r2, #0]
 8010984:	e00f      	b.n	80109a6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010986:	69bb      	ldr	r3, [r7, #24]
 8010988:	015a      	lsls	r2, r3, #5
 801098a:	69fb      	ldr	r3, [r7, #28]
 801098c:	4413      	add	r3, r2
 801098e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	69ba      	ldr	r2, [r7, #24]
 8010996:	0151      	lsls	r1, r2, #5
 8010998:	69fa      	ldr	r2, [r7, #28]
 801099a:	440a      	add	r2, r1
 801099c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80109a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80109a4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80109a6:	69bb      	ldr	r3, [r7, #24]
 80109a8:	015a      	lsls	r2, r3, #5
 80109aa:	69fb      	ldr	r3, [r7, #28]
 80109ac:	4413      	add	r3, r2
 80109ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	69ba      	ldr	r2, [r7, #24]
 80109b6:	0151      	lsls	r1, r2, #5
 80109b8:	69fa      	ldr	r2, [r7, #28]
 80109ba:	440a      	add	r2, r1
 80109bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80109c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80109c4:	6013      	str	r3, [r2, #0]
 80109c6:	e133      	b.n	8010c30 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80109c8:	69bb      	ldr	r3, [r7, #24]
 80109ca:	015a      	lsls	r2, r3, #5
 80109cc:	69fb      	ldr	r3, [r7, #28]
 80109ce:	4413      	add	r3, r2
 80109d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	69ba      	ldr	r2, [r7, #24]
 80109d8:	0151      	lsls	r1, r2, #5
 80109da:	69fa      	ldr	r2, [r7, #28]
 80109dc:	440a      	add	r2, r1
 80109de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80109e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80109e6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80109e8:	68bb      	ldr	r3, [r7, #8]
 80109ea:	791b      	ldrb	r3, [r3, #4]
 80109ec:	2b01      	cmp	r3, #1
 80109ee:	d015      	beq.n	8010a1c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80109f0:	68bb      	ldr	r3, [r7, #8]
 80109f2:	699b      	ldr	r3, [r3, #24]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	f000 811b 	beq.w	8010c30 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80109fa:	69fb      	ldr	r3, [r7, #28]
 80109fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010a02:	68bb      	ldr	r3, [r7, #8]
 8010a04:	781b      	ldrb	r3, [r3, #0]
 8010a06:	f003 030f 	and.w	r3, r3, #15
 8010a0a:	2101      	movs	r1, #1
 8010a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8010a10:	69f9      	ldr	r1, [r7, #28]
 8010a12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010a16:	4313      	orrs	r3, r2
 8010a18:	634b      	str	r3, [r1, #52]	; 0x34
 8010a1a:	e109      	b.n	8010c30 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010a1c:	69fb      	ldr	r3, [r7, #28]
 8010a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010a22:	689b      	ldr	r3, [r3, #8]
 8010a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d110      	bne.n	8010a4e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010a2c:	69bb      	ldr	r3, [r7, #24]
 8010a2e:	015a      	lsls	r2, r3, #5
 8010a30:	69fb      	ldr	r3, [r7, #28]
 8010a32:	4413      	add	r3, r2
 8010a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	69ba      	ldr	r2, [r7, #24]
 8010a3c:	0151      	lsls	r1, r2, #5
 8010a3e:	69fa      	ldr	r2, [r7, #28]
 8010a40:	440a      	add	r2, r1
 8010a42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010a4a:	6013      	str	r3, [r2, #0]
 8010a4c:	e00f      	b.n	8010a6e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010a4e:	69bb      	ldr	r3, [r7, #24]
 8010a50:	015a      	lsls	r2, r3, #5
 8010a52:	69fb      	ldr	r3, [r7, #28]
 8010a54:	4413      	add	r3, r2
 8010a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	69ba      	ldr	r2, [r7, #24]
 8010a5e:	0151      	lsls	r1, r2, #5
 8010a60:	69fa      	ldr	r2, [r7, #28]
 8010a62:	440a      	add	r2, r1
 8010a64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010a6c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8010a6e:	68bb      	ldr	r3, [r7, #8]
 8010a70:	6919      	ldr	r1, [r3, #16]
 8010a72:	68bb      	ldr	r3, [r7, #8]
 8010a74:	781a      	ldrb	r2, [r3, #0]
 8010a76:	68bb      	ldr	r3, [r7, #8]
 8010a78:	699b      	ldr	r3, [r3, #24]
 8010a7a:	b298      	uxth	r0, r3
 8010a7c:	79fb      	ldrb	r3, [r7, #7]
 8010a7e:	9300      	str	r3, [sp, #0]
 8010a80:	4603      	mov	r3, r0
 8010a82:	68f8      	ldr	r0, [r7, #12]
 8010a84:	f000 fade 	bl	8011044 <USB_WritePacket>
 8010a88:	e0d2      	b.n	8010c30 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010a8a:	69bb      	ldr	r3, [r7, #24]
 8010a8c:	015a      	lsls	r2, r3, #5
 8010a8e:	69fb      	ldr	r3, [r7, #28]
 8010a90:	4413      	add	r3, r2
 8010a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a96:	691b      	ldr	r3, [r3, #16]
 8010a98:	69ba      	ldr	r2, [r7, #24]
 8010a9a:	0151      	lsls	r1, r2, #5
 8010a9c:	69fa      	ldr	r2, [r7, #28]
 8010a9e:	440a      	add	r2, r1
 8010aa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010aa4:	0cdb      	lsrs	r3, r3, #19
 8010aa6:	04db      	lsls	r3, r3, #19
 8010aa8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010aaa:	69bb      	ldr	r3, [r7, #24]
 8010aac:	015a      	lsls	r2, r3, #5
 8010aae:	69fb      	ldr	r3, [r7, #28]
 8010ab0:	4413      	add	r3, r2
 8010ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ab6:	691b      	ldr	r3, [r3, #16]
 8010ab8:	69ba      	ldr	r2, [r7, #24]
 8010aba:	0151      	lsls	r1, r2, #5
 8010abc:	69fa      	ldr	r2, [r7, #28]
 8010abe:	440a      	add	r2, r1
 8010ac0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010ac4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010ac8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010acc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8010ace:	68bb      	ldr	r3, [r7, #8]
 8010ad0:	699b      	ldr	r3, [r3, #24]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d126      	bne.n	8010b24 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8010ad6:	69bb      	ldr	r3, [r7, #24]
 8010ad8:	015a      	lsls	r2, r3, #5
 8010ada:	69fb      	ldr	r3, [r7, #28]
 8010adc:	4413      	add	r3, r2
 8010ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ae2:	691a      	ldr	r2, [r3, #16]
 8010ae4:	68bb      	ldr	r3, [r7, #8]
 8010ae6:	68db      	ldr	r3, [r3, #12]
 8010ae8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010aec:	69b9      	ldr	r1, [r7, #24]
 8010aee:	0148      	lsls	r0, r1, #5
 8010af0:	69f9      	ldr	r1, [r7, #28]
 8010af2:	4401      	add	r1, r0
 8010af4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010af8:	4313      	orrs	r3, r2
 8010afa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010afc:	69bb      	ldr	r3, [r7, #24]
 8010afe:	015a      	lsls	r2, r3, #5
 8010b00:	69fb      	ldr	r3, [r7, #28]
 8010b02:	4413      	add	r3, r2
 8010b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b08:	691b      	ldr	r3, [r3, #16]
 8010b0a:	69ba      	ldr	r2, [r7, #24]
 8010b0c:	0151      	lsls	r1, r2, #5
 8010b0e:	69fa      	ldr	r2, [r7, #28]
 8010b10:	440a      	add	r2, r1
 8010b12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010b1a:	6113      	str	r3, [r2, #16]
 8010b1c:	e03a      	b.n	8010b94 <USB_EPStartXfer+0x3e4>
 8010b1e:	bf00      	nop
 8010b20:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010b24:	68bb      	ldr	r3, [r7, #8]
 8010b26:	699a      	ldr	r2, [r3, #24]
 8010b28:	68bb      	ldr	r3, [r7, #8]
 8010b2a:	68db      	ldr	r3, [r3, #12]
 8010b2c:	4413      	add	r3, r2
 8010b2e:	1e5a      	subs	r2, r3, #1
 8010b30:	68bb      	ldr	r3, [r7, #8]
 8010b32:	68db      	ldr	r3, [r3, #12]
 8010b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b38:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8010b3a:	68bb      	ldr	r3, [r7, #8]
 8010b3c:	68db      	ldr	r3, [r3, #12]
 8010b3e:	8afa      	ldrh	r2, [r7, #22]
 8010b40:	fb03 f202 	mul.w	r2, r3, r2
 8010b44:	68bb      	ldr	r3, [r7, #8]
 8010b46:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010b48:	69bb      	ldr	r3, [r7, #24]
 8010b4a:	015a      	lsls	r2, r3, #5
 8010b4c:	69fb      	ldr	r3, [r7, #28]
 8010b4e:	4413      	add	r3, r2
 8010b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b54:	691a      	ldr	r2, [r3, #16]
 8010b56:	8afb      	ldrh	r3, [r7, #22]
 8010b58:	04d9      	lsls	r1, r3, #19
 8010b5a:	4b38      	ldr	r3, [pc, #224]	; (8010c3c <USB_EPStartXfer+0x48c>)
 8010b5c:	400b      	ands	r3, r1
 8010b5e:	69b9      	ldr	r1, [r7, #24]
 8010b60:	0148      	lsls	r0, r1, #5
 8010b62:	69f9      	ldr	r1, [r7, #28]
 8010b64:	4401      	add	r1, r0
 8010b66:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010b6a:	4313      	orrs	r3, r2
 8010b6c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8010b6e:	69bb      	ldr	r3, [r7, #24]
 8010b70:	015a      	lsls	r2, r3, #5
 8010b72:	69fb      	ldr	r3, [r7, #28]
 8010b74:	4413      	add	r3, r2
 8010b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b7a:	691a      	ldr	r2, [r3, #16]
 8010b7c:	68bb      	ldr	r3, [r7, #8]
 8010b7e:	69db      	ldr	r3, [r3, #28]
 8010b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010b84:	69b9      	ldr	r1, [r7, #24]
 8010b86:	0148      	lsls	r0, r1, #5
 8010b88:	69f9      	ldr	r1, [r7, #28]
 8010b8a:	4401      	add	r1, r0
 8010b8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010b90:	4313      	orrs	r3, r2
 8010b92:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010b94:	79fb      	ldrb	r3, [r7, #7]
 8010b96:	2b01      	cmp	r3, #1
 8010b98:	d10d      	bne.n	8010bb6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010b9a:	68bb      	ldr	r3, [r7, #8]
 8010b9c:	691b      	ldr	r3, [r3, #16]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d009      	beq.n	8010bb6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010ba2:	68bb      	ldr	r3, [r7, #8]
 8010ba4:	6919      	ldr	r1, [r3, #16]
 8010ba6:	69bb      	ldr	r3, [r7, #24]
 8010ba8:	015a      	lsls	r2, r3, #5
 8010baa:	69fb      	ldr	r3, [r7, #28]
 8010bac:	4413      	add	r3, r2
 8010bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bb2:	460a      	mov	r2, r1
 8010bb4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8010bb6:	68bb      	ldr	r3, [r7, #8]
 8010bb8:	791b      	ldrb	r3, [r3, #4]
 8010bba:	2b01      	cmp	r3, #1
 8010bbc:	d128      	bne.n	8010c10 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010bbe:	69fb      	ldr	r3, [r7, #28]
 8010bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010bc4:	689b      	ldr	r3, [r3, #8]
 8010bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d110      	bne.n	8010bf0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8010bce:	69bb      	ldr	r3, [r7, #24]
 8010bd0:	015a      	lsls	r2, r3, #5
 8010bd2:	69fb      	ldr	r3, [r7, #28]
 8010bd4:	4413      	add	r3, r2
 8010bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	69ba      	ldr	r2, [r7, #24]
 8010bde:	0151      	lsls	r1, r2, #5
 8010be0:	69fa      	ldr	r2, [r7, #28]
 8010be2:	440a      	add	r2, r1
 8010be4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010be8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010bec:	6013      	str	r3, [r2, #0]
 8010bee:	e00f      	b.n	8010c10 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010bf0:	69bb      	ldr	r3, [r7, #24]
 8010bf2:	015a      	lsls	r2, r3, #5
 8010bf4:	69fb      	ldr	r3, [r7, #28]
 8010bf6:	4413      	add	r3, r2
 8010bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	69ba      	ldr	r2, [r7, #24]
 8010c00:	0151      	lsls	r1, r2, #5
 8010c02:	69fa      	ldr	r2, [r7, #28]
 8010c04:	440a      	add	r2, r1
 8010c06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010c0e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010c10:	69bb      	ldr	r3, [r7, #24]
 8010c12:	015a      	lsls	r2, r3, #5
 8010c14:	69fb      	ldr	r3, [r7, #28]
 8010c16:	4413      	add	r3, r2
 8010c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	69ba      	ldr	r2, [r7, #24]
 8010c20:	0151      	lsls	r1, r2, #5
 8010c22:	69fa      	ldr	r2, [r7, #28]
 8010c24:	440a      	add	r2, r1
 8010c26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010c2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010c2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010c30:	2300      	movs	r3, #0
}
 8010c32:	4618      	mov	r0, r3
 8010c34:	3720      	adds	r7, #32
 8010c36:	46bd      	mov	sp, r7
 8010c38:	bd80      	pop	{r7, pc}
 8010c3a:	bf00      	nop
 8010c3c:	1ff80000 	.word	0x1ff80000

08010c40 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010c40:	b480      	push	{r7}
 8010c42:	b087      	sub	sp, #28
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	60f8      	str	r0, [r7, #12]
 8010c48:	60b9      	str	r1, [r7, #8]
 8010c4a:	4613      	mov	r3, r2
 8010c4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8010c52:	68bb      	ldr	r3, [r7, #8]
 8010c54:	781b      	ldrb	r3, [r3, #0]
 8010c56:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010c58:	68bb      	ldr	r3, [r7, #8]
 8010c5a:	785b      	ldrb	r3, [r3, #1]
 8010c5c:	2b01      	cmp	r3, #1
 8010c5e:	f040 80ce 	bne.w	8010dfe <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010c62:	68bb      	ldr	r3, [r7, #8]
 8010c64:	699b      	ldr	r3, [r3, #24]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d132      	bne.n	8010cd0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010c6a:	693b      	ldr	r3, [r7, #16]
 8010c6c:	015a      	lsls	r2, r3, #5
 8010c6e:	697b      	ldr	r3, [r7, #20]
 8010c70:	4413      	add	r3, r2
 8010c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c76:	691b      	ldr	r3, [r3, #16]
 8010c78:	693a      	ldr	r2, [r7, #16]
 8010c7a:	0151      	lsls	r1, r2, #5
 8010c7c:	697a      	ldr	r2, [r7, #20]
 8010c7e:	440a      	add	r2, r1
 8010c80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010c88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010c8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010c8e:	693b      	ldr	r3, [r7, #16]
 8010c90:	015a      	lsls	r2, r3, #5
 8010c92:	697b      	ldr	r3, [r7, #20]
 8010c94:	4413      	add	r3, r2
 8010c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c9a:	691b      	ldr	r3, [r3, #16]
 8010c9c:	693a      	ldr	r2, [r7, #16]
 8010c9e:	0151      	lsls	r1, r2, #5
 8010ca0:	697a      	ldr	r2, [r7, #20]
 8010ca2:	440a      	add	r2, r1
 8010ca4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010ca8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010cac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010cae:	693b      	ldr	r3, [r7, #16]
 8010cb0:	015a      	lsls	r2, r3, #5
 8010cb2:	697b      	ldr	r3, [r7, #20]
 8010cb4:	4413      	add	r3, r2
 8010cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010cba:	691b      	ldr	r3, [r3, #16]
 8010cbc:	693a      	ldr	r2, [r7, #16]
 8010cbe:	0151      	lsls	r1, r2, #5
 8010cc0:	697a      	ldr	r2, [r7, #20]
 8010cc2:	440a      	add	r2, r1
 8010cc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010cc8:	0cdb      	lsrs	r3, r3, #19
 8010cca:	04db      	lsls	r3, r3, #19
 8010ccc:	6113      	str	r3, [r2, #16]
 8010cce:	e04e      	b.n	8010d6e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010cd0:	693b      	ldr	r3, [r7, #16]
 8010cd2:	015a      	lsls	r2, r3, #5
 8010cd4:	697b      	ldr	r3, [r7, #20]
 8010cd6:	4413      	add	r3, r2
 8010cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010cdc:	691b      	ldr	r3, [r3, #16]
 8010cde:	693a      	ldr	r2, [r7, #16]
 8010ce0:	0151      	lsls	r1, r2, #5
 8010ce2:	697a      	ldr	r2, [r7, #20]
 8010ce4:	440a      	add	r2, r1
 8010ce6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010cea:	0cdb      	lsrs	r3, r3, #19
 8010cec:	04db      	lsls	r3, r3, #19
 8010cee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010cf0:	693b      	ldr	r3, [r7, #16]
 8010cf2:	015a      	lsls	r2, r3, #5
 8010cf4:	697b      	ldr	r3, [r7, #20]
 8010cf6:	4413      	add	r3, r2
 8010cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010cfc:	691b      	ldr	r3, [r3, #16]
 8010cfe:	693a      	ldr	r2, [r7, #16]
 8010d00:	0151      	lsls	r1, r2, #5
 8010d02:	697a      	ldr	r2, [r7, #20]
 8010d04:	440a      	add	r2, r1
 8010d06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010d0a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010d0e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010d12:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8010d14:	68bb      	ldr	r3, [r7, #8]
 8010d16:	699a      	ldr	r2, [r3, #24]
 8010d18:	68bb      	ldr	r3, [r7, #8]
 8010d1a:	68db      	ldr	r3, [r3, #12]
 8010d1c:	429a      	cmp	r2, r3
 8010d1e:	d903      	bls.n	8010d28 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8010d20:	68bb      	ldr	r3, [r7, #8]
 8010d22:	68da      	ldr	r2, [r3, #12]
 8010d24:	68bb      	ldr	r3, [r7, #8]
 8010d26:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010d28:	693b      	ldr	r3, [r7, #16]
 8010d2a:	015a      	lsls	r2, r3, #5
 8010d2c:	697b      	ldr	r3, [r7, #20]
 8010d2e:	4413      	add	r3, r2
 8010d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d34:	691b      	ldr	r3, [r3, #16]
 8010d36:	693a      	ldr	r2, [r7, #16]
 8010d38:	0151      	lsls	r1, r2, #5
 8010d3a:	697a      	ldr	r2, [r7, #20]
 8010d3c:	440a      	add	r2, r1
 8010d3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010d42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010d46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010d48:	693b      	ldr	r3, [r7, #16]
 8010d4a:	015a      	lsls	r2, r3, #5
 8010d4c:	697b      	ldr	r3, [r7, #20]
 8010d4e:	4413      	add	r3, r2
 8010d50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d54:	691a      	ldr	r2, [r3, #16]
 8010d56:	68bb      	ldr	r3, [r7, #8]
 8010d58:	699b      	ldr	r3, [r3, #24]
 8010d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010d5e:	6939      	ldr	r1, [r7, #16]
 8010d60:	0148      	lsls	r0, r1, #5
 8010d62:	6979      	ldr	r1, [r7, #20]
 8010d64:	4401      	add	r1, r0
 8010d66:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010d6a:	4313      	orrs	r3, r2
 8010d6c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010d6e:	79fb      	ldrb	r3, [r7, #7]
 8010d70:	2b01      	cmp	r3, #1
 8010d72:	d11e      	bne.n	8010db2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010d74:	68bb      	ldr	r3, [r7, #8]
 8010d76:	695b      	ldr	r3, [r3, #20]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d009      	beq.n	8010d90 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010d7c:	693b      	ldr	r3, [r7, #16]
 8010d7e:	015a      	lsls	r2, r3, #5
 8010d80:	697b      	ldr	r3, [r7, #20]
 8010d82:	4413      	add	r3, r2
 8010d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d88:	461a      	mov	r2, r3
 8010d8a:	68bb      	ldr	r3, [r7, #8]
 8010d8c:	695b      	ldr	r3, [r3, #20]
 8010d8e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010d90:	693b      	ldr	r3, [r7, #16]
 8010d92:	015a      	lsls	r2, r3, #5
 8010d94:	697b      	ldr	r3, [r7, #20]
 8010d96:	4413      	add	r3, r2
 8010d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	693a      	ldr	r2, [r7, #16]
 8010da0:	0151      	lsls	r1, r2, #5
 8010da2:	697a      	ldr	r2, [r7, #20]
 8010da4:	440a      	add	r2, r1
 8010da6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010daa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010dae:	6013      	str	r3, [r2, #0]
 8010db0:	e097      	b.n	8010ee2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010db2:	693b      	ldr	r3, [r7, #16]
 8010db4:	015a      	lsls	r2, r3, #5
 8010db6:	697b      	ldr	r3, [r7, #20]
 8010db8:	4413      	add	r3, r2
 8010dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	693a      	ldr	r2, [r7, #16]
 8010dc2:	0151      	lsls	r1, r2, #5
 8010dc4:	697a      	ldr	r2, [r7, #20]
 8010dc6:	440a      	add	r2, r1
 8010dc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010dcc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010dd0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8010dd2:	68bb      	ldr	r3, [r7, #8]
 8010dd4:	699b      	ldr	r3, [r3, #24]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	f000 8083 	beq.w	8010ee2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010ddc:	697b      	ldr	r3, [r7, #20]
 8010dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010de2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010de4:	68bb      	ldr	r3, [r7, #8]
 8010de6:	781b      	ldrb	r3, [r3, #0]
 8010de8:	f003 030f 	and.w	r3, r3, #15
 8010dec:	2101      	movs	r1, #1
 8010dee:	fa01 f303 	lsl.w	r3, r1, r3
 8010df2:	6979      	ldr	r1, [r7, #20]
 8010df4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010df8:	4313      	orrs	r3, r2
 8010dfa:	634b      	str	r3, [r1, #52]	; 0x34
 8010dfc:	e071      	b.n	8010ee2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010dfe:	693b      	ldr	r3, [r7, #16]
 8010e00:	015a      	lsls	r2, r3, #5
 8010e02:	697b      	ldr	r3, [r7, #20]
 8010e04:	4413      	add	r3, r2
 8010e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e0a:	691b      	ldr	r3, [r3, #16]
 8010e0c:	693a      	ldr	r2, [r7, #16]
 8010e0e:	0151      	lsls	r1, r2, #5
 8010e10:	697a      	ldr	r2, [r7, #20]
 8010e12:	440a      	add	r2, r1
 8010e14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e18:	0cdb      	lsrs	r3, r3, #19
 8010e1a:	04db      	lsls	r3, r3, #19
 8010e1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010e1e:	693b      	ldr	r3, [r7, #16]
 8010e20:	015a      	lsls	r2, r3, #5
 8010e22:	697b      	ldr	r3, [r7, #20]
 8010e24:	4413      	add	r3, r2
 8010e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e2a:	691b      	ldr	r3, [r3, #16]
 8010e2c:	693a      	ldr	r2, [r7, #16]
 8010e2e:	0151      	lsls	r1, r2, #5
 8010e30:	697a      	ldr	r2, [r7, #20]
 8010e32:	440a      	add	r2, r1
 8010e34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e38:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010e3c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010e40:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8010e42:	68bb      	ldr	r3, [r7, #8]
 8010e44:	699b      	ldr	r3, [r3, #24]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d003      	beq.n	8010e52 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8010e4a:	68bb      	ldr	r3, [r7, #8]
 8010e4c:	68da      	ldr	r2, [r3, #12]
 8010e4e:	68bb      	ldr	r3, [r7, #8]
 8010e50:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8010e52:	68bb      	ldr	r3, [r7, #8]
 8010e54:	68da      	ldr	r2, [r3, #12]
 8010e56:	68bb      	ldr	r3, [r7, #8]
 8010e58:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010e5a:	693b      	ldr	r3, [r7, #16]
 8010e5c:	015a      	lsls	r2, r3, #5
 8010e5e:	697b      	ldr	r3, [r7, #20]
 8010e60:	4413      	add	r3, r2
 8010e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e66:	691b      	ldr	r3, [r3, #16]
 8010e68:	693a      	ldr	r2, [r7, #16]
 8010e6a:	0151      	lsls	r1, r2, #5
 8010e6c:	697a      	ldr	r2, [r7, #20]
 8010e6e:	440a      	add	r2, r1
 8010e70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010e78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8010e7a:	693b      	ldr	r3, [r7, #16]
 8010e7c:	015a      	lsls	r2, r3, #5
 8010e7e:	697b      	ldr	r3, [r7, #20]
 8010e80:	4413      	add	r3, r2
 8010e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e86:	691a      	ldr	r2, [r3, #16]
 8010e88:	68bb      	ldr	r3, [r7, #8]
 8010e8a:	69db      	ldr	r3, [r3, #28]
 8010e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010e90:	6939      	ldr	r1, [r7, #16]
 8010e92:	0148      	lsls	r0, r1, #5
 8010e94:	6979      	ldr	r1, [r7, #20]
 8010e96:	4401      	add	r1, r0
 8010e98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010e9c:	4313      	orrs	r3, r2
 8010e9e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8010ea0:	79fb      	ldrb	r3, [r7, #7]
 8010ea2:	2b01      	cmp	r3, #1
 8010ea4:	d10d      	bne.n	8010ec2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010ea6:	68bb      	ldr	r3, [r7, #8]
 8010ea8:	691b      	ldr	r3, [r3, #16]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d009      	beq.n	8010ec2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010eae:	68bb      	ldr	r3, [r7, #8]
 8010eb0:	6919      	ldr	r1, [r3, #16]
 8010eb2:	693b      	ldr	r3, [r7, #16]
 8010eb4:	015a      	lsls	r2, r3, #5
 8010eb6:	697b      	ldr	r3, [r7, #20]
 8010eb8:	4413      	add	r3, r2
 8010eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ebe:	460a      	mov	r2, r1
 8010ec0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010ec2:	693b      	ldr	r3, [r7, #16]
 8010ec4:	015a      	lsls	r2, r3, #5
 8010ec6:	697b      	ldr	r3, [r7, #20]
 8010ec8:	4413      	add	r3, r2
 8010eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	693a      	ldr	r2, [r7, #16]
 8010ed2:	0151      	lsls	r1, r2, #5
 8010ed4:	697a      	ldr	r2, [r7, #20]
 8010ed6:	440a      	add	r2, r1
 8010ed8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010edc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010ee0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010ee2:	2300      	movs	r3, #0
}
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	371c      	adds	r7, #28
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eee:	4770      	bx	lr

08010ef0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010ef0:	b480      	push	{r7}
 8010ef2:	b087      	sub	sp, #28
 8010ef4:	af00      	add	r7, sp, #0
 8010ef6:	6078      	str	r0, [r7, #4]
 8010ef8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010efa:	2300      	movs	r3, #0
 8010efc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8010efe:	2300      	movs	r3, #0
 8010f00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010f06:	683b      	ldr	r3, [r7, #0]
 8010f08:	785b      	ldrb	r3, [r3, #1]
 8010f0a:	2b01      	cmp	r3, #1
 8010f0c:	d14a      	bne.n	8010fa4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010f0e:	683b      	ldr	r3, [r7, #0]
 8010f10:	781b      	ldrb	r3, [r3, #0]
 8010f12:	015a      	lsls	r2, r3, #5
 8010f14:	693b      	ldr	r3, [r7, #16]
 8010f16:	4413      	add	r3, r2
 8010f18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010f22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010f26:	f040 8086 	bne.w	8011036 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8010f2a:	683b      	ldr	r3, [r7, #0]
 8010f2c:	781b      	ldrb	r3, [r3, #0]
 8010f2e:	015a      	lsls	r2, r3, #5
 8010f30:	693b      	ldr	r3, [r7, #16]
 8010f32:	4413      	add	r3, r2
 8010f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	683a      	ldr	r2, [r7, #0]
 8010f3c:	7812      	ldrb	r2, [r2, #0]
 8010f3e:	0151      	lsls	r1, r2, #5
 8010f40:	693a      	ldr	r2, [r7, #16]
 8010f42:	440a      	add	r2, r1
 8010f44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010f48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010f4c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8010f4e:	683b      	ldr	r3, [r7, #0]
 8010f50:	781b      	ldrb	r3, [r3, #0]
 8010f52:	015a      	lsls	r2, r3, #5
 8010f54:	693b      	ldr	r3, [r7, #16]
 8010f56:	4413      	add	r3, r2
 8010f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	683a      	ldr	r2, [r7, #0]
 8010f60:	7812      	ldrb	r2, [r2, #0]
 8010f62:	0151      	lsls	r1, r2, #5
 8010f64:	693a      	ldr	r2, [r7, #16]
 8010f66:	440a      	add	r2, r1
 8010f68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010f6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010f70:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	3301      	adds	r3, #1
 8010f76:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	f242 7210 	movw	r2, #10000	; 0x2710
 8010f7e:	4293      	cmp	r3, r2
 8010f80:	d902      	bls.n	8010f88 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8010f82:	2301      	movs	r3, #1
 8010f84:	75fb      	strb	r3, [r7, #23]
          break;
 8010f86:	e056      	b.n	8011036 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8010f88:	683b      	ldr	r3, [r7, #0]
 8010f8a:	781b      	ldrb	r3, [r3, #0]
 8010f8c:	015a      	lsls	r2, r3, #5
 8010f8e:	693b      	ldr	r3, [r7, #16]
 8010f90:	4413      	add	r3, r2
 8010f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010f9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010fa0:	d0e7      	beq.n	8010f72 <USB_EPStopXfer+0x82>
 8010fa2:	e048      	b.n	8011036 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010fa4:	683b      	ldr	r3, [r7, #0]
 8010fa6:	781b      	ldrb	r3, [r3, #0]
 8010fa8:	015a      	lsls	r2, r3, #5
 8010faa:	693b      	ldr	r3, [r7, #16]
 8010fac:	4413      	add	r3, r2
 8010fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010fb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010fbc:	d13b      	bne.n	8011036 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8010fbe:	683b      	ldr	r3, [r7, #0]
 8010fc0:	781b      	ldrb	r3, [r3, #0]
 8010fc2:	015a      	lsls	r2, r3, #5
 8010fc4:	693b      	ldr	r3, [r7, #16]
 8010fc6:	4413      	add	r3, r2
 8010fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	683a      	ldr	r2, [r7, #0]
 8010fd0:	7812      	ldrb	r2, [r2, #0]
 8010fd2:	0151      	lsls	r1, r2, #5
 8010fd4:	693a      	ldr	r2, [r7, #16]
 8010fd6:	440a      	add	r2, r1
 8010fd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010fdc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010fe0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8010fe2:	683b      	ldr	r3, [r7, #0]
 8010fe4:	781b      	ldrb	r3, [r3, #0]
 8010fe6:	015a      	lsls	r2, r3, #5
 8010fe8:	693b      	ldr	r3, [r7, #16]
 8010fea:	4413      	add	r3, r2
 8010fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	683a      	ldr	r2, [r7, #0]
 8010ff4:	7812      	ldrb	r2, [r2, #0]
 8010ff6:	0151      	lsls	r1, r2, #5
 8010ff8:	693a      	ldr	r2, [r7, #16]
 8010ffa:	440a      	add	r2, r1
 8010ffc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011000:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8011004:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	3301      	adds	r3, #1
 801100a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	f242 7210 	movw	r2, #10000	; 0x2710
 8011012:	4293      	cmp	r3, r2
 8011014:	d902      	bls.n	801101c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8011016:	2301      	movs	r3, #1
 8011018:	75fb      	strb	r3, [r7, #23]
          break;
 801101a:	e00c      	b.n	8011036 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 801101c:	683b      	ldr	r3, [r7, #0]
 801101e:	781b      	ldrb	r3, [r3, #0]
 8011020:	015a      	lsls	r2, r3, #5
 8011022:	693b      	ldr	r3, [r7, #16]
 8011024:	4413      	add	r3, r2
 8011026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011030:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011034:	d0e7      	beq.n	8011006 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8011036:	7dfb      	ldrb	r3, [r7, #23]
}
 8011038:	4618      	mov	r0, r3
 801103a:	371c      	adds	r7, #28
 801103c:	46bd      	mov	sp, r7
 801103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011042:	4770      	bx	lr

08011044 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8011044:	b480      	push	{r7}
 8011046:	b089      	sub	sp, #36	; 0x24
 8011048:	af00      	add	r7, sp, #0
 801104a:	60f8      	str	r0, [r7, #12]
 801104c:	60b9      	str	r1, [r7, #8]
 801104e:	4611      	mov	r1, r2
 8011050:	461a      	mov	r2, r3
 8011052:	460b      	mov	r3, r1
 8011054:	71fb      	strb	r3, [r7, #7]
 8011056:	4613      	mov	r3, r2
 8011058:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801105e:	68bb      	ldr	r3, [r7, #8]
 8011060:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8011062:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011066:	2b00      	cmp	r3, #0
 8011068:	d123      	bne.n	80110b2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801106a:	88bb      	ldrh	r3, [r7, #4]
 801106c:	3303      	adds	r3, #3
 801106e:	089b      	lsrs	r3, r3, #2
 8011070:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8011072:	2300      	movs	r3, #0
 8011074:	61bb      	str	r3, [r7, #24]
 8011076:	e018      	b.n	80110aa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011078:	79fb      	ldrb	r3, [r7, #7]
 801107a:	031a      	lsls	r2, r3, #12
 801107c:	697b      	ldr	r3, [r7, #20]
 801107e:	4413      	add	r3, r2
 8011080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011084:	461a      	mov	r2, r3
 8011086:	69fb      	ldr	r3, [r7, #28]
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	6013      	str	r3, [r2, #0]
      pSrc++;
 801108c:	69fb      	ldr	r3, [r7, #28]
 801108e:	3301      	adds	r3, #1
 8011090:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011092:	69fb      	ldr	r3, [r7, #28]
 8011094:	3301      	adds	r3, #1
 8011096:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8011098:	69fb      	ldr	r3, [r7, #28]
 801109a:	3301      	adds	r3, #1
 801109c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801109e:	69fb      	ldr	r3, [r7, #28]
 80110a0:	3301      	adds	r3, #1
 80110a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80110a4:	69bb      	ldr	r3, [r7, #24]
 80110a6:	3301      	adds	r3, #1
 80110a8:	61bb      	str	r3, [r7, #24]
 80110aa:	69ba      	ldr	r2, [r7, #24]
 80110ac:	693b      	ldr	r3, [r7, #16]
 80110ae:	429a      	cmp	r2, r3
 80110b0:	d3e2      	bcc.n	8011078 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80110b2:	2300      	movs	r3, #0
}
 80110b4:	4618      	mov	r0, r3
 80110b6:	3724      	adds	r7, #36	; 0x24
 80110b8:	46bd      	mov	sp, r7
 80110ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110be:	4770      	bx	lr

080110c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80110c0:	b480      	push	{r7}
 80110c2:	b08b      	sub	sp, #44	; 0x2c
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	60f8      	str	r0, [r7, #12]
 80110c8:	60b9      	str	r1, [r7, #8]
 80110ca:	4613      	mov	r3, r2
 80110cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80110d2:	68bb      	ldr	r3, [r7, #8]
 80110d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80110d6:	88fb      	ldrh	r3, [r7, #6]
 80110d8:	089b      	lsrs	r3, r3, #2
 80110da:	b29b      	uxth	r3, r3
 80110dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80110de:	88fb      	ldrh	r3, [r7, #6]
 80110e0:	f003 0303 	and.w	r3, r3, #3
 80110e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80110e6:	2300      	movs	r3, #0
 80110e8:	623b      	str	r3, [r7, #32]
 80110ea:	e014      	b.n	8011116 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80110ec:	69bb      	ldr	r3, [r7, #24]
 80110ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80110f2:	681a      	ldr	r2, [r3, #0]
 80110f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110f6:	601a      	str	r2, [r3, #0]
    pDest++;
 80110f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110fa:	3301      	adds	r3, #1
 80110fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80110fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011100:	3301      	adds	r3, #1
 8011102:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8011104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011106:	3301      	adds	r3, #1
 8011108:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801110a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801110c:	3301      	adds	r3, #1
 801110e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8011110:	6a3b      	ldr	r3, [r7, #32]
 8011112:	3301      	adds	r3, #1
 8011114:	623b      	str	r3, [r7, #32]
 8011116:	6a3a      	ldr	r2, [r7, #32]
 8011118:	697b      	ldr	r3, [r7, #20]
 801111a:	429a      	cmp	r2, r3
 801111c:	d3e6      	bcc.n	80110ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801111e:	8bfb      	ldrh	r3, [r7, #30]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d01e      	beq.n	8011162 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8011124:	2300      	movs	r3, #0
 8011126:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8011128:	69bb      	ldr	r3, [r7, #24]
 801112a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801112e:	461a      	mov	r2, r3
 8011130:	f107 0310 	add.w	r3, r7, #16
 8011134:	6812      	ldr	r2, [r2, #0]
 8011136:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8011138:	693a      	ldr	r2, [r7, #16]
 801113a:	6a3b      	ldr	r3, [r7, #32]
 801113c:	b2db      	uxtb	r3, r3
 801113e:	00db      	lsls	r3, r3, #3
 8011140:	fa22 f303 	lsr.w	r3, r2, r3
 8011144:	b2da      	uxtb	r2, r3
 8011146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011148:	701a      	strb	r2, [r3, #0]
      i++;
 801114a:	6a3b      	ldr	r3, [r7, #32]
 801114c:	3301      	adds	r3, #1
 801114e:	623b      	str	r3, [r7, #32]
      pDest++;
 8011150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011152:	3301      	adds	r3, #1
 8011154:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8011156:	8bfb      	ldrh	r3, [r7, #30]
 8011158:	3b01      	subs	r3, #1
 801115a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801115c:	8bfb      	ldrh	r3, [r7, #30]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d1ea      	bne.n	8011138 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8011162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011164:	4618      	mov	r0, r3
 8011166:	372c      	adds	r7, #44	; 0x2c
 8011168:	46bd      	mov	sp, r7
 801116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116e:	4770      	bx	lr

08011170 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011170:	b480      	push	{r7}
 8011172:	b085      	sub	sp, #20
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
 8011178:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801117e:	683b      	ldr	r3, [r7, #0]
 8011180:	781b      	ldrb	r3, [r3, #0]
 8011182:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011184:	683b      	ldr	r3, [r7, #0]
 8011186:	785b      	ldrb	r3, [r3, #1]
 8011188:	2b01      	cmp	r3, #1
 801118a:	d12c      	bne.n	80111e6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801118c:	68bb      	ldr	r3, [r7, #8]
 801118e:	015a      	lsls	r2, r3, #5
 8011190:	68fb      	ldr	r3, [r7, #12]
 8011192:	4413      	add	r3, r2
 8011194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	2b00      	cmp	r3, #0
 801119c:	db12      	blt.n	80111c4 <USB_EPSetStall+0x54>
 801119e:	68bb      	ldr	r3, [r7, #8]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d00f      	beq.n	80111c4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80111a4:	68bb      	ldr	r3, [r7, #8]
 80111a6:	015a      	lsls	r2, r3, #5
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	4413      	add	r3, r2
 80111ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	68ba      	ldr	r2, [r7, #8]
 80111b4:	0151      	lsls	r1, r2, #5
 80111b6:	68fa      	ldr	r2, [r7, #12]
 80111b8:	440a      	add	r2, r1
 80111ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80111be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80111c2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80111c4:	68bb      	ldr	r3, [r7, #8]
 80111c6:	015a      	lsls	r2, r3, #5
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	4413      	add	r3, r2
 80111cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	68ba      	ldr	r2, [r7, #8]
 80111d4:	0151      	lsls	r1, r2, #5
 80111d6:	68fa      	ldr	r2, [r7, #12]
 80111d8:	440a      	add	r2, r1
 80111da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80111de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80111e2:	6013      	str	r3, [r2, #0]
 80111e4:	e02b      	b.n	801123e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80111e6:	68bb      	ldr	r3, [r7, #8]
 80111e8:	015a      	lsls	r2, r3, #5
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	4413      	add	r3, r2
 80111ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	db12      	blt.n	801121e <USB_EPSetStall+0xae>
 80111f8:	68bb      	ldr	r3, [r7, #8]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d00f      	beq.n	801121e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80111fe:	68bb      	ldr	r3, [r7, #8]
 8011200:	015a      	lsls	r2, r3, #5
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	4413      	add	r3, r2
 8011206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	68ba      	ldr	r2, [r7, #8]
 801120e:	0151      	lsls	r1, r2, #5
 8011210:	68fa      	ldr	r2, [r7, #12]
 8011212:	440a      	add	r2, r1
 8011214:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011218:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801121c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801121e:	68bb      	ldr	r3, [r7, #8]
 8011220:	015a      	lsls	r2, r3, #5
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	4413      	add	r3, r2
 8011226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	68ba      	ldr	r2, [r7, #8]
 801122e:	0151      	lsls	r1, r2, #5
 8011230:	68fa      	ldr	r2, [r7, #12]
 8011232:	440a      	add	r2, r1
 8011234:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011238:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801123c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801123e:	2300      	movs	r3, #0
}
 8011240:	4618      	mov	r0, r3
 8011242:	3714      	adds	r7, #20
 8011244:	46bd      	mov	sp, r7
 8011246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124a:	4770      	bx	lr

0801124c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801124c:	b480      	push	{r7}
 801124e:	b085      	sub	sp, #20
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
 8011254:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801125a:	683b      	ldr	r3, [r7, #0]
 801125c:	781b      	ldrb	r3, [r3, #0]
 801125e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011260:	683b      	ldr	r3, [r7, #0]
 8011262:	785b      	ldrb	r3, [r3, #1]
 8011264:	2b01      	cmp	r3, #1
 8011266:	d128      	bne.n	80112ba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011268:	68bb      	ldr	r3, [r7, #8]
 801126a:	015a      	lsls	r2, r3, #5
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	4413      	add	r3, r2
 8011270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	68ba      	ldr	r2, [r7, #8]
 8011278:	0151      	lsls	r1, r2, #5
 801127a:	68fa      	ldr	r2, [r7, #12]
 801127c:	440a      	add	r2, r1
 801127e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011282:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011286:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011288:	683b      	ldr	r3, [r7, #0]
 801128a:	791b      	ldrb	r3, [r3, #4]
 801128c:	2b03      	cmp	r3, #3
 801128e:	d003      	beq.n	8011298 <USB_EPClearStall+0x4c>
 8011290:	683b      	ldr	r3, [r7, #0]
 8011292:	791b      	ldrb	r3, [r3, #4]
 8011294:	2b02      	cmp	r3, #2
 8011296:	d138      	bne.n	801130a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011298:	68bb      	ldr	r3, [r7, #8]
 801129a:	015a      	lsls	r2, r3, #5
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	4413      	add	r3, r2
 80112a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	68ba      	ldr	r2, [r7, #8]
 80112a8:	0151      	lsls	r1, r2, #5
 80112aa:	68fa      	ldr	r2, [r7, #12]
 80112ac:	440a      	add	r2, r1
 80112ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80112b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80112b6:	6013      	str	r3, [r2, #0]
 80112b8:	e027      	b.n	801130a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80112ba:	68bb      	ldr	r3, [r7, #8]
 80112bc:	015a      	lsls	r2, r3, #5
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	4413      	add	r3, r2
 80112c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	68ba      	ldr	r2, [r7, #8]
 80112ca:	0151      	lsls	r1, r2, #5
 80112cc:	68fa      	ldr	r2, [r7, #12]
 80112ce:	440a      	add	r2, r1
 80112d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80112d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80112d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80112da:	683b      	ldr	r3, [r7, #0]
 80112dc:	791b      	ldrb	r3, [r3, #4]
 80112de:	2b03      	cmp	r3, #3
 80112e0:	d003      	beq.n	80112ea <USB_EPClearStall+0x9e>
 80112e2:	683b      	ldr	r3, [r7, #0]
 80112e4:	791b      	ldrb	r3, [r3, #4]
 80112e6:	2b02      	cmp	r3, #2
 80112e8:	d10f      	bne.n	801130a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80112ea:	68bb      	ldr	r3, [r7, #8]
 80112ec:	015a      	lsls	r2, r3, #5
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	4413      	add	r3, r2
 80112f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	68ba      	ldr	r2, [r7, #8]
 80112fa:	0151      	lsls	r1, r2, #5
 80112fc:	68fa      	ldr	r2, [r7, #12]
 80112fe:	440a      	add	r2, r1
 8011300:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011308:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801130a:	2300      	movs	r3, #0
}
 801130c:	4618      	mov	r0, r3
 801130e:	3714      	adds	r7, #20
 8011310:	46bd      	mov	sp, r7
 8011312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011316:	4770      	bx	lr

08011318 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011318:	b480      	push	{r7}
 801131a:	b085      	sub	sp, #20
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
 8011320:	460b      	mov	r3, r1
 8011322:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	68fa      	ldr	r2, [r7, #12]
 8011332:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011336:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801133a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011342:	681a      	ldr	r2, [r3, #0]
 8011344:	78fb      	ldrb	r3, [r7, #3]
 8011346:	011b      	lsls	r3, r3, #4
 8011348:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801134c:	68f9      	ldr	r1, [r7, #12]
 801134e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011352:	4313      	orrs	r3, r2
 8011354:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8011356:	2300      	movs	r3, #0
}
 8011358:	4618      	mov	r0, r3
 801135a:	3714      	adds	r7, #20
 801135c:	46bd      	mov	sp, r7
 801135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011362:	4770      	bx	lr

08011364 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8011364:	b480      	push	{r7}
 8011366:	b085      	sub	sp, #20
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	68fa      	ldr	r2, [r7, #12]
 801137a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801137e:	f023 0303 	bic.w	r3, r3, #3
 8011382:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801138a:	685b      	ldr	r3, [r3, #4]
 801138c:	68fa      	ldr	r2, [r7, #12]
 801138e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011392:	f023 0302 	bic.w	r3, r3, #2
 8011396:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011398:	2300      	movs	r3, #0
}
 801139a:	4618      	mov	r0, r3
 801139c:	3714      	adds	r7, #20
 801139e:	46bd      	mov	sp, r7
 80113a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a4:	4770      	bx	lr

080113a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80113a6:	b480      	push	{r7}
 80113a8:	b085      	sub	sp, #20
 80113aa:	af00      	add	r7, sp, #0
 80113ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	68fa      	ldr	r2, [r7, #12]
 80113bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80113c0:	f023 0303 	bic.w	r3, r3, #3
 80113c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80113cc:	685b      	ldr	r3, [r3, #4]
 80113ce:	68fa      	ldr	r2, [r7, #12]
 80113d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80113d4:	f043 0302 	orr.w	r3, r3, #2
 80113d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80113da:	2300      	movs	r3, #0
}
 80113dc:	4618      	mov	r0, r3
 80113de:	3714      	adds	r7, #20
 80113e0:	46bd      	mov	sp, r7
 80113e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e6:	4770      	bx	lr

080113e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80113e8:	b480      	push	{r7}
 80113ea:	b085      	sub	sp, #20
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	695b      	ldr	r3, [r3, #20]
 80113f4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	699b      	ldr	r3, [r3, #24]
 80113fa:	68fa      	ldr	r2, [r7, #12]
 80113fc:	4013      	ands	r3, r2
 80113fe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011400:	68fb      	ldr	r3, [r7, #12]
}
 8011402:	4618      	mov	r0, r3
 8011404:	3714      	adds	r7, #20
 8011406:	46bd      	mov	sp, r7
 8011408:	f85d 7b04 	ldr.w	r7, [sp], #4
 801140c:	4770      	bx	lr

0801140e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801140e:	b480      	push	{r7}
 8011410:	b085      	sub	sp, #20
 8011412:	af00      	add	r7, sp, #0
 8011414:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011420:	699b      	ldr	r3, [r3, #24]
 8011422:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801142a:	69db      	ldr	r3, [r3, #28]
 801142c:	68ba      	ldr	r2, [r7, #8]
 801142e:	4013      	ands	r3, r2
 8011430:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8011432:	68bb      	ldr	r3, [r7, #8]
 8011434:	0c1b      	lsrs	r3, r3, #16
}
 8011436:	4618      	mov	r0, r3
 8011438:	3714      	adds	r7, #20
 801143a:	46bd      	mov	sp, r7
 801143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011440:	4770      	bx	lr

08011442 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011442:	b480      	push	{r7}
 8011444:	b085      	sub	sp, #20
 8011446:	af00      	add	r7, sp, #0
 8011448:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011454:	699b      	ldr	r3, [r3, #24]
 8011456:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801145e:	69db      	ldr	r3, [r3, #28]
 8011460:	68ba      	ldr	r2, [r7, #8]
 8011462:	4013      	ands	r3, r2
 8011464:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8011466:	68bb      	ldr	r3, [r7, #8]
 8011468:	b29b      	uxth	r3, r3
}
 801146a:	4618      	mov	r0, r3
 801146c:	3714      	adds	r7, #20
 801146e:	46bd      	mov	sp, r7
 8011470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011474:	4770      	bx	lr

08011476 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011476:	b480      	push	{r7}
 8011478:	b085      	sub	sp, #20
 801147a:	af00      	add	r7, sp, #0
 801147c:	6078      	str	r0, [r7, #4]
 801147e:	460b      	mov	r3, r1
 8011480:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8011486:	78fb      	ldrb	r3, [r7, #3]
 8011488:	015a      	lsls	r2, r3, #5
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	4413      	add	r3, r2
 801148e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011492:	689b      	ldr	r3, [r3, #8]
 8011494:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801149c:	695b      	ldr	r3, [r3, #20]
 801149e:	68ba      	ldr	r2, [r7, #8]
 80114a0:	4013      	ands	r3, r2
 80114a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80114a4:	68bb      	ldr	r3, [r7, #8]
}
 80114a6:	4618      	mov	r0, r3
 80114a8:	3714      	adds	r7, #20
 80114aa:	46bd      	mov	sp, r7
 80114ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b0:	4770      	bx	lr

080114b2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80114b2:	b480      	push	{r7}
 80114b4:	b087      	sub	sp, #28
 80114b6:	af00      	add	r7, sp, #0
 80114b8:	6078      	str	r0, [r7, #4]
 80114ba:	460b      	mov	r3, r1
 80114bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80114c2:	697b      	ldr	r3, [r7, #20]
 80114c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80114c8:	691b      	ldr	r3, [r3, #16]
 80114ca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80114cc:	697b      	ldr	r3, [r7, #20]
 80114ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80114d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114d4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80114d6:	78fb      	ldrb	r3, [r7, #3]
 80114d8:	f003 030f 	and.w	r3, r3, #15
 80114dc:	68fa      	ldr	r2, [r7, #12]
 80114de:	fa22 f303 	lsr.w	r3, r2, r3
 80114e2:	01db      	lsls	r3, r3, #7
 80114e4:	b2db      	uxtb	r3, r3
 80114e6:	693a      	ldr	r2, [r7, #16]
 80114e8:	4313      	orrs	r3, r2
 80114ea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80114ec:	78fb      	ldrb	r3, [r7, #3]
 80114ee:	015a      	lsls	r2, r3, #5
 80114f0:	697b      	ldr	r3, [r7, #20]
 80114f2:	4413      	add	r3, r2
 80114f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80114f8:	689b      	ldr	r3, [r3, #8]
 80114fa:	693a      	ldr	r2, [r7, #16]
 80114fc:	4013      	ands	r3, r2
 80114fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011500:	68bb      	ldr	r3, [r7, #8]
}
 8011502:	4618      	mov	r0, r3
 8011504:	371c      	adds	r7, #28
 8011506:	46bd      	mov	sp, r7
 8011508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150c:	4770      	bx	lr

0801150e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801150e:	b480      	push	{r7}
 8011510:	b083      	sub	sp, #12
 8011512:	af00      	add	r7, sp, #0
 8011514:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	695b      	ldr	r3, [r3, #20]
 801151a:	f003 0301 	and.w	r3, r3, #1
}
 801151e:	4618      	mov	r0, r3
 8011520:	370c      	adds	r7, #12
 8011522:	46bd      	mov	sp, r7
 8011524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011528:	4770      	bx	lr

0801152a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801152a:	b480      	push	{r7}
 801152c:	b085      	sub	sp, #20
 801152e:	af00      	add	r7, sp, #0
 8011530:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	68fa      	ldr	r2, [r7, #12]
 8011540:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8011544:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8011548:	f023 0307 	bic.w	r3, r3, #7
 801154c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011554:	685b      	ldr	r3, [r3, #4]
 8011556:	68fa      	ldr	r2, [r7, #12]
 8011558:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801155c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011560:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011562:	2300      	movs	r3, #0
}
 8011564:	4618      	mov	r0, r3
 8011566:	3714      	adds	r7, #20
 8011568:	46bd      	mov	sp, r7
 801156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156e:	4770      	bx	lr

08011570 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8011570:	b480      	push	{r7}
 8011572:	b087      	sub	sp, #28
 8011574:	af00      	add	r7, sp, #0
 8011576:	60f8      	str	r0, [r7, #12]
 8011578:	460b      	mov	r3, r1
 801157a:	607a      	str	r2, [r7, #4]
 801157c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	333c      	adds	r3, #60	; 0x3c
 8011586:	3304      	adds	r3, #4
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801158c:	693b      	ldr	r3, [r7, #16]
 801158e:	4a26      	ldr	r2, [pc, #152]	; (8011628 <USB_EP0_OutStart+0xb8>)
 8011590:	4293      	cmp	r3, r2
 8011592:	d90a      	bls.n	80115aa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011594:	697b      	ldr	r3, [r7, #20]
 8011596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80115a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80115a4:	d101      	bne.n	80115aa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80115a6:	2300      	movs	r3, #0
 80115a8:	e037      	b.n	801161a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80115aa:	697b      	ldr	r3, [r7, #20]
 80115ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115b0:	461a      	mov	r2, r3
 80115b2:	2300      	movs	r3, #0
 80115b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80115b6:	697b      	ldr	r3, [r7, #20]
 80115b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115bc:	691b      	ldr	r3, [r3, #16]
 80115be:	697a      	ldr	r2, [r7, #20]
 80115c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80115c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80115c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80115ca:	697b      	ldr	r3, [r7, #20]
 80115cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115d0:	691b      	ldr	r3, [r3, #16]
 80115d2:	697a      	ldr	r2, [r7, #20]
 80115d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80115d8:	f043 0318 	orr.w	r3, r3, #24
 80115dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80115de:	697b      	ldr	r3, [r7, #20]
 80115e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115e4:	691b      	ldr	r3, [r3, #16]
 80115e6:	697a      	ldr	r2, [r7, #20]
 80115e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80115ec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80115f0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80115f2:	7afb      	ldrb	r3, [r7, #11]
 80115f4:	2b01      	cmp	r3, #1
 80115f6:	d10f      	bne.n	8011618 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80115f8:	697b      	ldr	r3, [r7, #20]
 80115fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80115fe:	461a      	mov	r2, r3
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8011604:	697b      	ldr	r3, [r7, #20]
 8011606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	697a      	ldr	r2, [r7, #20]
 801160e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011612:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8011616:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011618:	2300      	movs	r3, #0
}
 801161a:	4618      	mov	r0, r3
 801161c:	371c      	adds	r7, #28
 801161e:	46bd      	mov	sp, r7
 8011620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011624:	4770      	bx	lr
 8011626:	bf00      	nop
 8011628:	4f54300a 	.word	0x4f54300a

0801162c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801162c:	b480      	push	{r7}
 801162e:	b085      	sub	sp, #20
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011634:	2300      	movs	r3, #0
 8011636:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	3301      	adds	r3, #1
 801163c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	4a13      	ldr	r2, [pc, #76]	; (8011690 <USB_CoreReset+0x64>)
 8011642:	4293      	cmp	r3, r2
 8011644:	d901      	bls.n	801164a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011646:	2303      	movs	r3, #3
 8011648:	e01b      	b.n	8011682 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	691b      	ldr	r3, [r3, #16]
 801164e:	2b00      	cmp	r3, #0
 8011650:	daf2      	bge.n	8011638 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8011652:	2300      	movs	r3, #0
 8011654:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	691b      	ldr	r3, [r3, #16]
 801165a:	f043 0201 	orr.w	r2, r3, #1
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	3301      	adds	r3, #1
 8011666:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	4a09      	ldr	r2, [pc, #36]	; (8011690 <USB_CoreReset+0x64>)
 801166c:	4293      	cmp	r3, r2
 801166e:	d901      	bls.n	8011674 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011670:	2303      	movs	r3, #3
 8011672:	e006      	b.n	8011682 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	691b      	ldr	r3, [r3, #16]
 8011678:	f003 0301 	and.w	r3, r3, #1
 801167c:	2b01      	cmp	r3, #1
 801167e:	d0f0      	beq.n	8011662 <USB_CoreReset+0x36>

  return HAL_OK;
 8011680:	2300      	movs	r3, #0
}
 8011682:	4618      	mov	r0, r3
 8011684:	3714      	adds	r7, #20
 8011686:	46bd      	mov	sp, r7
 8011688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168c:	4770      	bx	lr
 801168e:	bf00      	nop
 8011690:	00030d40 	.word	0x00030d40

08011694 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011694:	b580      	push	{r7, lr}
 8011696:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8011698:	4904      	ldr	r1, [pc, #16]	; (80116ac <MX_FATFS_Init+0x18>)
 801169a:	4805      	ldr	r0, [pc, #20]	; (80116b0 <MX_FATFS_Init+0x1c>)
 801169c:	f006 fb58 	bl	8017d50 <FATFS_LinkDriver>
 80116a0:	4603      	mov	r3, r0
 80116a2:	461a      	mov	r2, r3
 80116a4:	4b03      	ldr	r3, [pc, #12]	; (80116b4 <MX_FATFS_Init+0x20>)
 80116a6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80116a8:	bf00      	nop
 80116aa:	bd80      	pop	{r7, pc}
 80116ac:	200127ac 	.word	0x200127ac
 80116b0:	08019400 	.word	0x08019400
 80116b4:	200127a8 	.word	0x200127a8

080116b8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80116b8:	b480      	push	{r7}
 80116ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80116bc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80116be:	4618      	mov	r0, r3
 80116c0:	46bd      	mov	sp, r7
 80116c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c6:	4770      	bx	lr

080116c8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b082      	sub	sp, #8
 80116cc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80116ce:	2300      	movs	r3, #0
 80116d0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80116d2:	f000 f896 	bl	8011802 <BSP_SD_IsDetected>
 80116d6:	4603      	mov	r3, r0
 80116d8:	2b01      	cmp	r3, #1
 80116da:	d001      	beq.n	80116e0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80116dc:	2301      	movs	r3, #1
 80116de:	e012      	b.n	8011706 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80116e0:	480b      	ldr	r0, [pc, #44]	; (8011710 <BSP_SD_Init+0x48>)
 80116e2:	f7fb fc7b 	bl	800cfdc <HAL_SD_Init>
 80116e6:	4603      	mov	r3, r0
 80116e8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80116ea:	79fb      	ldrb	r3, [r7, #7]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d109      	bne.n	8011704 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80116f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80116f4:	4806      	ldr	r0, [pc, #24]	; (8011710 <BSP_SD_Init+0x48>)
 80116f6:	f7fc fd97 	bl	800e228 <HAL_SD_ConfigWideBusOperation>
 80116fa:	4603      	mov	r3, r0
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d001      	beq.n	8011704 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8011700:	2301      	movs	r3, #1
 8011702:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8011704:	79fb      	ldrb	r3, [r7, #7]
}
 8011706:	4618      	mov	r0, r3
 8011708:	3708      	adds	r7, #8
 801170a:	46bd      	mov	sp, r7
 801170c:	bd80      	pop	{r7, pc}
 801170e:	bf00      	nop
 8011710:	200003ac 	.word	0x200003ac

08011714 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b086      	sub	sp, #24
 8011718:	af00      	add	r7, sp, #0
 801171a:	60f8      	str	r0, [r7, #12]
 801171c:	60b9      	str	r1, [r7, #8]
 801171e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011720:	2300      	movs	r3, #0
 8011722:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	68ba      	ldr	r2, [r7, #8]
 8011728:	68f9      	ldr	r1, [r7, #12]
 801172a:	4806      	ldr	r0, [pc, #24]	; (8011744 <BSP_SD_ReadBlocks_DMA+0x30>)
 801172c:	f7fc f86a 	bl	800d804 <HAL_SD_ReadBlocks_DMA>
 8011730:	4603      	mov	r3, r0
 8011732:	2b00      	cmp	r3, #0
 8011734:	d001      	beq.n	801173a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011736:	2301      	movs	r3, #1
 8011738:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801173a:	7dfb      	ldrb	r3, [r7, #23]
}
 801173c:	4618      	mov	r0, r3
 801173e:	3718      	adds	r7, #24
 8011740:	46bd      	mov	sp, r7
 8011742:	bd80      	pop	{r7, pc}
 8011744:	200003ac 	.word	0x200003ac

08011748 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b086      	sub	sp, #24
 801174c:	af00      	add	r7, sp, #0
 801174e:	60f8      	str	r0, [r7, #12]
 8011750:	60b9      	str	r1, [r7, #8]
 8011752:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011754:	2300      	movs	r3, #0
 8011756:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	68ba      	ldr	r2, [r7, #8]
 801175c:	68f9      	ldr	r1, [r7, #12]
 801175e:	4806      	ldr	r0, [pc, #24]	; (8011778 <BSP_SD_WriteBlocks_DMA+0x30>)
 8011760:	f7fc f930 	bl	800d9c4 <HAL_SD_WriteBlocks_DMA>
 8011764:	4603      	mov	r3, r0
 8011766:	2b00      	cmp	r3, #0
 8011768:	d001      	beq.n	801176e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801176a:	2301      	movs	r3, #1
 801176c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801176e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011770:	4618      	mov	r0, r3
 8011772:	3718      	adds	r7, #24
 8011774:	46bd      	mov	sp, r7
 8011776:	bd80      	pop	{r7, pc}
 8011778:	200003ac 	.word	0x200003ac

0801177c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801177c:	b580      	push	{r7, lr}
 801177e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011780:	4805      	ldr	r0, [pc, #20]	; (8011798 <BSP_SD_GetCardState+0x1c>)
 8011782:	f7fc fdeb 	bl	800e35c <HAL_SD_GetCardState>
 8011786:	4603      	mov	r3, r0
 8011788:	2b04      	cmp	r3, #4
 801178a:	bf14      	ite	ne
 801178c:	2301      	movne	r3, #1
 801178e:	2300      	moveq	r3, #0
 8011790:	b2db      	uxtb	r3, r3
}
 8011792:	4618      	mov	r0, r3
 8011794:	bd80      	pop	{r7, pc}
 8011796:	bf00      	nop
 8011798:	200003ac 	.word	0x200003ac

0801179c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801179c:	b580      	push	{r7, lr}
 801179e:	b082      	sub	sp, #8
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80117a4:	6879      	ldr	r1, [r7, #4]
 80117a6:	4803      	ldr	r0, [pc, #12]	; (80117b4 <BSP_SD_GetCardInfo+0x18>)
 80117a8:	f7fc fd12 	bl	800e1d0 <HAL_SD_GetCardInfo>
}
 80117ac:	bf00      	nop
 80117ae:	3708      	adds	r7, #8
 80117b0:	46bd      	mov	sp, r7
 80117b2:	bd80      	pop	{r7, pc}
 80117b4:	200003ac 	.word	0x200003ac

080117b8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b082      	sub	sp, #8
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80117c0:	f000 f818 	bl	80117f4 <BSP_SD_AbortCallback>
}
 80117c4:	bf00      	nop
 80117c6:	3708      	adds	r7, #8
 80117c8:	46bd      	mov	sp, r7
 80117ca:	bd80      	pop	{r7, pc}

080117cc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b082      	sub	sp, #8
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80117d4:	f000 f9a8 	bl	8011b28 <BSP_SD_WriteCpltCallback>
}
 80117d8:	bf00      	nop
 80117da:	3708      	adds	r7, #8
 80117dc:	46bd      	mov	sp, r7
 80117de:	bd80      	pop	{r7, pc}

080117e0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b082      	sub	sp, #8
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80117e8:	f000 f9aa 	bl	8011b40 <BSP_SD_ReadCpltCallback>
}
 80117ec:	bf00      	nop
 80117ee:	3708      	adds	r7, #8
 80117f0:	46bd      	mov	sp, r7
 80117f2:	bd80      	pop	{r7, pc}

080117f4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80117f4:	b480      	push	{r7}
 80117f6:	af00      	add	r7, sp, #0

}
 80117f8:	bf00      	nop
 80117fa:	46bd      	mov	sp, r7
 80117fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011800:	4770      	bx	lr

08011802 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8011802:	b580      	push	{r7, lr}
 8011804:	b082      	sub	sp, #8
 8011806:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8011808:	2301      	movs	r3, #1
 801180a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 801180c:	f000 f80c 	bl	8011828 <BSP_PlatformIsDetected>
 8011810:	4603      	mov	r3, r0
 8011812:	2b00      	cmp	r3, #0
 8011814:	d101      	bne.n	801181a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8011816:	2300      	movs	r3, #0
 8011818:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801181a:	79fb      	ldrb	r3, [r7, #7]
 801181c:	b2db      	uxtb	r3, r3
}
 801181e:	4618      	mov	r0, r3
 8011820:	3708      	adds	r7, #8
 8011822:	46bd      	mov	sp, r7
 8011824:	bd80      	pop	{r7, pc}
	...

08011828 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8011828:	b580      	push	{r7, lr}
 801182a:	b082      	sub	sp, #8
 801182c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801182e:	2301      	movs	r3, #1
 8011830:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8011832:	2180      	movs	r1, #128	; 0x80
 8011834:	4806      	ldr	r0, [pc, #24]	; (8011850 <BSP_PlatformIsDetected+0x28>)
 8011836:	f7f7 fbe7 	bl	8009008 <HAL_GPIO_ReadPin>
 801183a:	4603      	mov	r3, r0
 801183c:	2b00      	cmp	r3, #0
 801183e:	d001      	beq.n	8011844 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8011840:	2300      	movs	r3, #0
 8011842:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8011844:	79fb      	ldrb	r3, [r7, #7]
}
 8011846:	4618      	mov	r0, r3
 8011848:	3708      	adds	r7, #8
 801184a:	46bd      	mov	sp, r7
 801184c:	bd80      	pop	{r7, pc}
 801184e:	bf00      	nop
 8011850:	40020800 	.word	0x40020800

08011854 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b084      	sub	sp, #16
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 801185c:	f7f5 faa6 	bl	8006dac <HAL_GetTick>
 8011860:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8011862:	e006      	b.n	8011872 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011864:	f7ff ff8a 	bl	801177c <BSP_SD_GetCardState>
 8011868:	4603      	mov	r3, r0
 801186a:	2b00      	cmp	r3, #0
 801186c:	d101      	bne.n	8011872 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 801186e:	2300      	movs	r3, #0
 8011870:	e009      	b.n	8011886 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8011872:	f7f5 fa9b 	bl	8006dac <HAL_GetTick>
 8011876:	4602      	mov	r2, r0
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	1ad3      	subs	r3, r2, r3
 801187c:	687a      	ldr	r2, [r7, #4]
 801187e:	429a      	cmp	r2, r3
 8011880:	d8f0      	bhi.n	8011864 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011882:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011886:	4618      	mov	r0, r3
 8011888:	3710      	adds	r7, #16
 801188a:	46bd      	mov	sp, r7
 801188c:	bd80      	pop	{r7, pc}
	...

08011890 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b082      	sub	sp, #8
 8011894:	af00      	add	r7, sp, #0
 8011896:	4603      	mov	r3, r0
 8011898:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801189a:	4b0b      	ldr	r3, [pc, #44]	; (80118c8 <SD_CheckStatus+0x38>)
 801189c:	2201      	movs	r2, #1
 801189e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80118a0:	f7ff ff6c 	bl	801177c <BSP_SD_GetCardState>
 80118a4:	4603      	mov	r3, r0
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d107      	bne.n	80118ba <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80118aa:	4b07      	ldr	r3, [pc, #28]	; (80118c8 <SD_CheckStatus+0x38>)
 80118ac:	781b      	ldrb	r3, [r3, #0]
 80118ae:	b2db      	uxtb	r3, r3
 80118b0:	f023 0301 	bic.w	r3, r3, #1
 80118b4:	b2da      	uxtb	r2, r3
 80118b6:	4b04      	ldr	r3, [pc, #16]	; (80118c8 <SD_CheckStatus+0x38>)
 80118b8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80118ba:	4b03      	ldr	r3, [pc, #12]	; (80118c8 <SD_CheckStatus+0x38>)
 80118bc:	781b      	ldrb	r3, [r3, #0]
 80118be:	b2db      	uxtb	r3, r3
}
 80118c0:	4618      	mov	r0, r3
 80118c2:	3708      	adds	r7, #8
 80118c4:	46bd      	mov	sp, r7
 80118c6:	bd80      	pop	{r7, pc}
 80118c8:	20000009 	.word	0x20000009

080118cc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b082      	sub	sp, #8
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	4603      	mov	r3, r0
 80118d4:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80118d6:	f7ff fef7 	bl	80116c8 <BSP_SD_Init>
 80118da:	4603      	mov	r3, r0
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d107      	bne.n	80118f0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80118e0:	79fb      	ldrb	r3, [r7, #7]
 80118e2:	4618      	mov	r0, r3
 80118e4:	f7ff ffd4 	bl	8011890 <SD_CheckStatus>
 80118e8:	4603      	mov	r3, r0
 80118ea:	461a      	mov	r2, r3
 80118ec:	4b04      	ldr	r3, [pc, #16]	; (8011900 <SD_initialize+0x34>)
 80118ee:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80118f0:	4b03      	ldr	r3, [pc, #12]	; (8011900 <SD_initialize+0x34>)
 80118f2:	781b      	ldrb	r3, [r3, #0]
 80118f4:	b2db      	uxtb	r3, r3
}
 80118f6:	4618      	mov	r0, r3
 80118f8:	3708      	adds	r7, #8
 80118fa:	46bd      	mov	sp, r7
 80118fc:	bd80      	pop	{r7, pc}
 80118fe:	bf00      	nop
 8011900:	20000009 	.word	0x20000009

08011904 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011904:	b580      	push	{r7, lr}
 8011906:	b082      	sub	sp, #8
 8011908:	af00      	add	r7, sp, #0
 801190a:	4603      	mov	r3, r0
 801190c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801190e:	79fb      	ldrb	r3, [r7, #7]
 8011910:	4618      	mov	r0, r3
 8011912:	f7ff ffbd 	bl	8011890 <SD_CheckStatus>
 8011916:	4603      	mov	r3, r0
}
 8011918:	4618      	mov	r0, r3
 801191a:	3708      	adds	r7, #8
 801191c:	46bd      	mov	sp, r7
 801191e:	bd80      	pop	{r7, pc}

08011920 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011920:	b580      	push	{r7, lr}
 8011922:	b086      	sub	sp, #24
 8011924:	af00      	add	r7, sp, #0
 8011926:	60b9      	str	r1, [r7, #8]
 8011928:	607a      	str	r2, [r7, #4]
 801192a:	603b      	str	r3, [r7, #0]
 801192c:	4603      	mov	r3, r0
 801192e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011930:	2301      	movs	r3, #1
 8011932:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011934:	f247 5030 	movw	r0, #30000	; 0x7530
 8011938:	f7ff ff8c 	bl	8011854 <SD_CheckStatusWithTimeout>
 801193c:	4603      	mov	r3, r0
 801193e:	2b00      	cmp	r3, #0
 8011940:	da01      	bge.n	8011946 <SD_read+0x26>
  {
    return res;
 8011942:	7dfb      	ldrb	r3, [r7, #23]
 8011944:	e03b      	b.n	80119be <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8011946:	683a      	ldr	r2, [r7, #0]
 8011948:	6879      	ldr	r1, [r7, #4]
 801194a:	68b8      	ldr	r0, [r7, #8]
 801194c:	f7ff fee2 	bl	8011714 <BSP_SD_ReadBlocks_DMA>
 8011950:	4603      	mov	r3, r0
 8011952:	2b00      	cmp	r3, #0
 8011954:	d132      	bne.n	80119bc <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8011956:	4b1c      	ldr	r3, [pc, #112]	; (80119c8 <SD_read+0xa8>)
 8011958:	2200      	movs	r2, #0
 801195a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 801195c:	f7f5 fa26 	bl	8006dac <HAL_GetTick>
 8011960:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8011962:	bf00      	nop
 8011964:	4b18      	ldr	r3, [pc, #96]	; (80119c8 <SD_read+0xa8>)
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d108      	bne.n	801197e <SD_read+0x5e>
 801196c:	f7f5 fa1e 	bl	8006dac <HAL_GetTick>
 8011970:	4602      	mov	r2, r0
 8011972:	693b      	ldr	r3, [r7, #16]
 8011974:	1ad3      	subs	r3, r2, r3
 8011976:	f247 522f 	movw	r2, #29999	; 0x752f
 801197a:	4293      	cmp	r3, r2
 801197c:	d9f2      	bls.n	8011964 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 801197e:	4b12      	ldr	r3, [pc, #72]	; (80119c8 <SD_read+0xa8>)
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d102      	bne.n	801198c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8011986:	2301      	movs	r3, #1
 8011988:	75fb      	strb	r3, [r7, #23]
 801198a:	e017      	b.n	80119bc <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 801198c:	4b0e      	ldr	r3, [pc, #56]	; (80119c8 <SD_read+0xa8>)
 801198e:	2200      	movs	r2, #0
 8011990:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8011992:	f7f5 fa0b 	bl	8006dac <HAL_GetTick>
 8011996:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011998:	e007      	b.n	80119aa <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801199a:	f7ff feef 	bl	801177c <BSP_SD_GetCardState>
 801199e:	4603      	mov	r3, r0
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d102      	bne.n	80119aa <SD_read+0x8a>
          {
            res = RES_OK;
 80119a4:	2300      	movs	r3, #0
 80119a6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80119a8:	e008      	b.n	80119bc <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80119aa:	f7f5 f9ff 	bl	8006dac <HAL_GetTick>
 80119ae:	4602      	mov	r2, r0
 80119b0:	693b      	ldr	r3, [r7, #16]
 80119b2:	1ad3      	subs	r3, r2, r3
 80119b4:	f247 522f 	movw	r2, #29999	; 0x752f
 80119b8:	4293      	cmp	r3, r2
 80119ba:	d9ee      	bls.n	801199a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80119bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80119be:	4618      	mov	r0, r3
 80119c0:	3718      	adds	r7, #24
 80119c2:	46bd      	mov	sp, r7
 80119c4:	bd80      	pop	{r7, pc}
 80119c6:	bf00      	nop
 80119c8:	200127b4 	.word	0x200127b4

080119cc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	b086      	sub	sp, #24
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	60b9      	str	r1, [r7, #8]
 80119d4:	607a      	str	r2, [r7, #4]
 80119d6:	603b      	str	r3, [r7, #0]
 80119d8:	4603      	mov	r3, r0
 80119da:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80119dc:	2301      	movs	r3, #1
 80119de:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80119e0:	4b24      	ldr	r3, [pc, #144]	; (8011a74 <SD_write+0xa8>)
 80119e2:	2200      	movs	r2, #0
 80119e4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80119e6:	f247 5030 	movw	r0, #30000	; 0x7530
 80119ea:	f7ff ff33 	bl	8011854 <SD_CheckStatusWithTimeout>
 80119ee:	4603      	mov	r3, r0
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	da01      	bge.n	80119f8 <SD_write+0x2c>
  {
    return res;
 80119f4:	7dfb      	ldrb	r3, [r7, #23]
 80119f6:	e038      	b.n	8011a6a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80119f8:	683a      	ldr	r2, [r7, #0]
 80119fa:	6879      	ldr	r1, [r7, #4]
 80119fc:	68b8      	ldr	r0, [r7, #8]
 80119fe:	f7ff fea3 	bl	8011748 <BSP_SD_WriteBlocks_DMA>
 8011a02:	4603      	mov	r3, r0
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d12f      	bne.n	8011a68 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8011a08:	f7f5 f9d0 	bl	8006dac <HAL_GetTick>
 8011a0c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8011a0e:	bf00      	nop
 8011a10:	4b18      	ldr	r3, [pc, #96]	; (8011a74 <SD_write+0xa8>)
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d108      	bne.n	8011a2a <SD_write+0x5e>
 8011a18:	f7f5 f9c8 	bl	8006dac <HAL_GetTick>
 8011a1c:	4602      	mov	r2, r0
 8011a1e:	693b      	ldr	r3, [r7, #16]
 8011a20:	1ad3      	subs	r3, r2, r3
 8011a22:	f247 522f 	movw	r2, #29999	; 0x752f
 8011a26:	4293      	cmp	r3, r2
 8011a28:	d9f2      	bls.n	8011a10 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8011a2a:	4b12      	ldr	r3, [pc, #72]	; (8011a74 <SD_write+0xa8>)
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d102      	bne.n	8011a38 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8011a32:	2301      	movs	r3, #1
 8011a34:	75fb      	strb	r3, [r7, #23]
 8011a36:	e017      	b.n	8011a68 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8011a38:	4b0e      	ldr	r3, [pc, #56]	; (8011a74 <SD_write+0xa8>)
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8011a3e:	f7f5 f9b5 	bl	8006dac <HAL_GetTick>
 8011a42:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011a44:	e007      	b.n	8011a56 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011a46:	f7ff fe99 	bl	801177c <BSP_SD_GetCardState>
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d102      	bne.n	8011a56 <SD_write+0x8a>
          {
            res = RES_OK;
 8011a50:	2300      	movs	r3, #0
 8011a52:	75fb      	strb	r3, [r7, #23]
            break;
 8011a54:	e008      	b.n	8011a68 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8011a56:	f7f5 f9a9 	bl	8006dac <HAL_GetTick>
 8011a5a:	4602      	mov	r2, r0
 8011a5c:	693b      	ldr	r3, [r7, #16]
 8011a5e:	1ad3      	subs	r3, r2, r3
 8011a60:	f247 522f 	movw	r2, #29999	; 0x752f
 8011a64:	4293      	cmp	r3, r2
 8011a66:	d9ee      	bls.n	8011a46 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8011a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	3718      	adds	r7, #24
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	bd80      	pop	{r7, pc}
 8011a72:	bf00      	nop
 8011a74:	200127b0 	.word	0x200127b0

08011a78 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b08c      	sub	sp, #48	; 0x30
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	4603      	mov	r3, r0
 8011a80:	603a      	str	r2, [r7, #0]
 8011a82:	71fb      	strb	r3, [r7, #7]
 8011a84:	460b      	mov	r3, r1
 8011a86:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011a88:	2301      	movs	r3, #1
 8011a8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011a8e:	4b25      	ldr	r3, [pc, #148]	; (8011b24 <SD_ioctl+0xac>)
 8011a90:	781b      	ldrb	r3, [r3, #0]
 8011a92:	b2db      	uxtb	r3, r3
 8011a94:	f003 0301 	and.w	r3, r3, #1
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d001      	beq.n	8011aa0 <SD_ioctl+0x28>
 8011a9c:	2303      	movs	r3, #3
 8011a9e:	e03c      	b.n	8011b1a <SD_ioctl+0xa2>

  switch (cmd)
 8011aa0:	79bb      	ldrb	r3, [r7, #6]
 8011aa2:	2b03      	cmp	r3, #3
 8011aa4:	d834      	bhi.n	8011b10 <SD_ioctl+0x98>
 8011aa6:	a201      	add	r2, pc, #4	; (adr r2, 8011aac <SD_ioctl+0x34>)
 8011aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011aac:	08011abd 	.word	0x08011abd
 8011ab0:	08011ac5 	.word	0x08011ac5
 8011ab4:	08011add 	.word	0x08011add
 8011ab8:	08011af7 	.word	0x08011af7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011abc:	2300      	movs	r3, #0
 8011abe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011ac2:	e028      	b.n	8011b16 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011ac4:	f107 030c 	add.w	r3, r7, #12
 8011ac8:	4618      	mov	r0, r3
 8011aca:	f7ff fe67 	bl	801179c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ad0:	683b      	ldr	r3, [r7, #0]
 8011ad2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011ad4:	2300      	movs	r3, #0
 8011ad6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011ada:	e01c      	b.n	8011b16 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011adc:	f107 030c 	add.w	r3, r7, #12
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	f7ff fe5b 	bl	801179c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ae8:	b29a      	uxth	r2, r3
 8011aea:	683b      	ldr	r3, [r7, #0]
 8011aec:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8011aee:	2300      	movs	r3, #0
 8011af0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011af4:	e00f      	b.n	8011b16 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011af6:	f107 030c 	add.w	r3, r7, #12
 8011afa:	4618      	mov	r0, r3
 8011afc:	f7ff fe4e 	bl	801179c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b02:	0a5a      	lsrs	r2, r3, #9
 8011b04:	683b      	ldr	r3, [r7, #0]
 8011b06:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011b08:	2300      	movs	r3, #0
 8011b0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011b0e:	e002      	b.n	8011b16 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011b10:	2304      	movs	r3, #4
 8011b12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8011b16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	3730      	adds	r7, #48	; 0x30
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	bd80      	pop	{r7, pc}
 8011b22:	bf00      	nop
 8011b24:	20000009 	.word	0x20000009

08011b28 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8011b28:	b480      	push	{r7}
 8011b2a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8011b2c:	4b03      	ldr	r3, [pc, #12]	; (8011b3c <BSP_SD_WriteCpltCallback+0x14>)
 8011b2e:	2201      	movs	r2, #1
 8011b30:	601a      	str	r2, [r3, #0]
}
 8011b32:	bf00      	nop
 8011b34:	46bd      	mov	sp, r7
 8011b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b3a:	4770      	bx	lr
 8011b3c:	200127b0 	.word	0x200127b0

08011b40 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8011b40:	b480      	push	{r7}
 8011b42:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8011b44:	4b03      	ldr	r3, [pc, #12]	; (8011b54 <BSP_SD_ReadCpltCallback+0x14>)
 8011b46:	2201      	movs	r2, #1
 8011b48:	601a      	str	r2, [r3, #0]
}
 8011b4a:	bf00      	nop
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b52:	4770      	bx	lr
 8011b54:	200127b4 	.word	0x200127b4

08011b58 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011b58:	b580      	push	{r7, lr}
 8011b5a:	b084      	sub	sp, #16
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
 8011b60:	460b      	mov	r3, r1
 8011b62:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8011b64:	f44f 701d 	mov.w	r0, #628	; 0x274
 8011b68:	f006 fef2 	bl	8018950 <USBD_static_malloc>
 8011b6c:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8011b6e:	68fb      	ldr	r3, [r7, #12]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d109      	bne.n	8011b88 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	32b0      	adds	r2, #176	; 0xb0
 8011b7e:	2100      	movs	r1, #0
 8011b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8011b84:	2302      	movs	r3, #2
 8011b86:	e06e      	b.n	8011c66 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	32b0      	adds	r2, #176	; 0xb0
 8011b92:	68f9      	ldr	r1, [r7, #12]
 8011b94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	32b0      	adds	r2, #176	; 0xb0
 8011ba2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	7c1b      	ldrb	r3, [r3, #16]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d12b      	bne.n	8011c0c <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8011bb4:	4b2e      	ldr	r3, [pc, #184]	; (8011c70 <USBD_MSC_Init+0x118>)
 8011bb6:	7819      	ldrb	r1, [r3, #0]
 8011bb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011bbc:	2202      	movs	r2, #2
 8011bbe:	6878      	ldr	r0, [r7, #4]
 8011bc0:	f006 fd35 	bl	801862e <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8011bc4:	4b2a      	ldr	r3, [pc, #168]	; (8011c70 <USBD_MSC_Init+0x118>)
 8011bc6:	781b      	ldrb	r3, [r3, #0]
 8011bc8:	f003 020f 	and.w	r2, r3, #15
 8011bcc:	6879      	ldr	r1, [r7, #4]
 8011bce:	4613      	mov	r3, r2
 8011bd0:	009b      	lsls	r3, r3, #2
 8011bd2:	4413      	add	r3, r2
 8011bd4:	009b      	lsls	r3, r3, #2
 8011bd6:	440b      	add	r3, r1
 8011bd8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011bdc:	2201      	movs	r2, #1
 8011bde:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8011be0:	4b24      	ldr	r3, [pc, #144]	; (8011c74 <USBD_MSC_Init+0x11c>)
 8011be2:	7819      	ldrb	r1, [r3, #0]
 8011be4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011be8:	2202      	movs	r2, #2
 8011bea:	6878      	ldr	r0, [r7, #4]
 8011bec:	f006 fd1f 	bl	801862e <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8011bf0:	4b20      	ldr	r3, [pc, #128]	; (8011c74 <USBD_MSC_Init+0x11c>)
 8011bf2:	781b      	ldrb	r3, [r3, #0]
 8011bf4:	f003 020f 	and.w	r2, r3, #15
 8011bf8:	6879      	ldr	r1, [r7, #4]
 8011bfa:	4613      	mov	r3, r2
 8011bfc:	009b      	lsls	r3, r3, #2
 8011bfe:	4413      	add	r3, r2
 8011c00:	009b      	lsls	r3, r3, #2
 8011c02:	440b      	add	r3, r1
 8011c04:	3324      	adds	r3, #36	; 0x24
 8011c06:	2201      	movs	r2, #1
 8011c08:	801a      	strh	r2, [r3, #0]
 8011c0a:	e028      	b.n	8011c5e <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8011c0c:	4b18      	ldr	r3, [pc, #96]	; (8011c70 <USBD_MSC_Init+0x118>)
 8011c0e:	7819      	ldrb	r1, [r3, #0]
 8011c10:	2340      	movs	r3, #64	; 0x40
 8011c12:	2202      	movs	r2, #2
 8011c14:	6878      	ldr	r0, [r7, #4]
 8011c16:	f006 fd0a 	bl	801862e <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8011c1a:	4b15      	ldr	r3, [pc, #84]	; (8011c70 <USBD_MSC_Init+0x118>)
 8011c1c:	781b      	ldrb	r3, [r3, #0]
 8011c1e:	f003 020f 	and.w	r2, r3, #15
 8011c22:	6879      	ldr	r1, [r7, #4]
 8011c24:	4613      	mov	r3, r2
 8011c26:	009b      	lsls	r3, r3, #2
 8011c28:	4413      	add	r3, r2
 8011c2a:	009b      	lsls	r3, r3, #2
 8011c2c:	440b      	add	r3, r1
 8011c2e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011c32:	2201      	movs	r2, #1
 8011c34:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8011c36:	4b0f      	ldr	r3, [pc, #60]	; (8011c74 <USBD_MSC_Init+0x11c>)
 8011c38:	7819      	ldrb	r1, [r3, #0]
 8011c3a:	2340      	movs	r3, #64	; 0x40
 8011c3c:	2202      	movs	r2, #2
 8011c3e:	6878      	ldr	r0, [r7, #4]
 8011c40:	f006 fcf5 	bl	801862e <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8011c44:	4b0b      	ldr	r3, [pc, #44]	; (8011c74 <USBD_MSC_Init+0x11c>)
 8011c46:	781b      	ldrb	r3, [r3, #0]
 8011c48:	f003 020f 	and.w	r2, r3, #15
 8011c4c:	6879      	ldr	r1, [r7, #4]
 8011c4e:	4613      	mov	r3, r2
 8011c50:	009b      	lsls	r3, r3, #2
 8011c52:	4413      	add	r3, r2
 8011c54:	009b      	lsls	r3, r3, #2
 8011c56:	440b      	add	r3, r1
 8011c58:	3324      	adds	r3, #36	; 0x24
 8011c5a:	2201      	movs	r2, #1
 8011c5c:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8011c5e:	6878      	ldr	r0, [r7, #4]
 8011c60:	f000 fa2c 	bl	80120bc <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8011c64:	2300      	movs	r3, #0
}
 8011c66:	4618      	mov	r0, r3
 8011c68:	3710      	adds	r7, #16
 8011c6a:	46bd      	mov	sp, r7
 8011c6c:	bd80      	pop	{r7, pc}
 8011c6e:	bf00      	nop
 8011c70:	2000006f 	.word	0x2000006f
 8011c74:	2000006e 	.word	0x2000006e

08011c78 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b082      	sub	sp, #8
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
 8011c80:	460b      	mov	r3, r1
 8011c82:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8011c84:	4b26      	ldr	r3, [pc, #152]	; (8011d20 <USBD_MSC_DeInit+0xa8>)
 8011c86:	781b      	ldrb	r3, [r3, #0]
 8011c88:	4619      	mov	r1, r3
 8011c8a:	6878      	ldr	r0, [r7, #4]
 8011c8c:	f006 fcf5 	bl	801867a <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8011c90:	4b23      	ldr	r3, [pc, #140]	; (8011d20 <USBD_MSC_DeInit+0xa8>)
 8011c92:	781b      	ldrb	r3, [r3, #0]
 8011c94:	f003 020f 	and.w	r2, r3, #15
 8011c98:	6879      	ldr	r1, [r7, #4]
 8011c9a:	4613      	mov	r3, r2
 8011c9c:	009b      	lsls	r3, r3, #2
 8011c9e:	4413      	add	r3, r2
 8011ca0:	009b      	lsls	r3, r3, #2
 8011ca2:	440b      	add	r3, r1
 8011ca4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011ca8:	2200      	movs	r2, #0
 8011caa:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8011cac:	4b1d      	ldr	r3, [pc, #116]	; (8011d24 <USBD_MSC_DeInit+0xac>)
 8011cae:	781b      	ldrb	r3, [r3, #0]
 8011cb0:	4619      	mov	r1, r3
 8011cb2:	6878      	ldr	r0, [r7, #4]
 8011cb4:	f006 fce1 	bl	801867a <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8011cb8:	4b1a      	ldr	r3, [pc, #104]	; (8011d24 <USBD_MSC_DeInit+0xac>)
 8011cba:	781b      	ldrb	r3, [r3, #0]
 8011cbc:	f003 020f 	and.w	r2, r3, #15
 8011cc0:	6879      	ldr	r1, [r7, #4]
 8011cc2:	4613      	mov	r3, r2
 8011cc4:	009b      	lsls	r3, r3, #2
 8011cc6:	4413      	add	r3, r2
 8011cc8:	009b      	lsls	r3, r3, #2
 8011cca:	440b      	add	r3, r1
 8011ccc:	3324      	adds	r3, #36	; 0x24
 8011cce:	2200      	movs	r2, #0
 8011cd0:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	32b0      	adds	r2, #176	; 0xb0
 8011cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d018      	beq.n	8011d16 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8011ce4:	6878      	ldr	r0, [r7, #4]
 8011ce6:	f000 fa67 	bl	80121b8 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	32b0      	adds	r2, #176	; 0xb0
 8011cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	f006 fe37 	bl	801896c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	32b0      	adds	r2, #176	; 0xb0
 8011d08:	2100      	movs	r1, #0
 8011d0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	2200      	movs	r2, #0
 8011d12:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8011d16:	2300      	movs	r3, #0
}
 8011d18:	4618      	mov	r0, r3
 8011d1a:	3708      	adds	r7, #8
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	bd80      	pop	{r7, pc}
 8011d20:	2000006f 	.word	0x2000006f
 8011d24:	2000006e 	.word	0x2000006e

08011d28 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b086      	sub	sp, #24
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
 8011d30:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	32b0      	adds	r2, #176	; 0xb0
 8011d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d40:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8011d42:	2300      	movs	r3, #0
 8011d44:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8011d46:	2300      	movs	r3, #0
 8011d48:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8011d4a:	693b      	ldr	r3, [r7, #16]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d101      	bne.n	8011d54 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8011d50:	2303      	movs	r3, #3
 8011d52:	e0e1      	b.n	8011f18 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011d54:	683b      	ldr	r3, [r7, #0]
 8011d56:	781b      	ldrb	r3, [r3, #0]
 8011d58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d053      	beq.n	8011e08 <USBD_MSC_Setup+0xe0>
 8011d60:	2b20      	cmp	r3, #32
 8011d62:	f040 80d1 	bne.w	8011f08 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8011d66:	683b      	ldr	r3, [r7, #0]
 8011d68:	785b      	ldrb	r3, [r3, #1]
 8011d6a:	2bfe      	cmp	r3, #254	; 0xfe
 8011d6c:	d002      	beq.n	8011d74 <USBD_MSC_Setup+0x4c>
 8011d6e:	2bff      	cmp	r3, #255	; 0xff
 8011d70:	d02a      	beq.n	8011dc8 <USBD_MSC_Setup+0xa0>
 8011d72:	e041      	b.n	8011df8 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8011d74:	683b      	ldr	r3, [r7, #0]
 8011d76:	885b      	ldrh	r3, [r3, #2]
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d11e      	bne.n	8011dba <USBD_MSC_Setup+0x92>
 8011d7c:	683b      	ldr	r3, [r7, #0]
 8011d7e:	88db      	ldrh	r3, [r3, #6]
 8011d80:	2b01      	cmp	r3, #1
 8011d82:	d11a      	bne.n	8011dba <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8011d84:	683b      	ldr	r3, [r7, #0]
 8011d86:	781b      	ldrb	r3, [r3, #0]
 8011d88:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	da15      	bge.n	8011dba <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011d94:	687a      	ldr	r2, [r7, #4]
 8011d96:	33b0      	adds	r3, #176	; 0xb0
 8011d98:	009b      	lsls	r3, r3, #2
 8011d9a:	4413      	add	r3, r2
 8011d9c:	685b      	ldr	r3, [r3, #4]
 8011d9e:	699b      	ldr	r3, [r3, #24]
 8011da0:	4798      	blx	r3
 8011da2:	4603      	mov	r3, r0
 8011da4:	461a      	mov	r2, r3
 8011da6:	693b      	ldr	r3, [r7, #16]
 8011da8:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8011daa:	693b      	ldr	r3, [r7, #16]
 8011dac:	2201      	movs	r2, #1
 8011dae:	4619      	mov	r1, r3
 8011db0:	6878      	ldr	r0, [r7, #4]
 8011db2:	f003 f923 	bl	8014ffc <USBD_CtlSendData>
 8011db6:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011db8:	e025      	b.n	8011e06 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8011dba:	6839      	ldr	r1, [r7, #0]
 8011dbc:	6878      	ldr	r0, [r7, #4]
 8011dbe:	f003 f8ac 	bl	8014f1a <USBD_CtlError>
            ret = USBD_FAIL;
 8011dc2:	2303      	movs	r3, #3
 8011dc4:	75fb      	strb	r3, [r7, #23]
          break;
 8011dc6:	e01e      	b.n	8011e06 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8011dc8:	683b      	ldr	r3, [r7, #0]
 8011dca:	885b      	ldrh	r3, [r3, #2]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d10c      	bne.n	8011dea <USBD_MSC_Setup+0xc2>
 8011dd0:	683b      	ldr	r3, [r7, #0]
 8011dd2:	88db      	ldrh	r3, [r3, #6]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d108      	bne.n	8011dea <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	781b      	ldrb	r3, [r3, #0]
 8011ddc:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	db03      	blt.n	8011dea <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8011de2:	6878      	ldr	r0, [r7, #4]
 8011de4:	f000 f9b4 	bl	8012150 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011de8:	e00d      	b.n	8011e06 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8011dea:	6839      	ldr	r1, [r7, #0]
 8011dec:	6878      	ldr	r0, [r7, #4]
 8011dee:	f003 f894 	bl	8014f1a <USBD_CtlError>
            ret = USBD_FAIL;
 8011df2:	2303      	movs	r3, #3
 8011df4:	75fb      	strb	r3, [r7, #23]
          break;
 8011df6:	e006      	b.n	8011e06 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8011df8:	6839      	ldr	r1, [r7, #0]
 8011dfa:	6878      	ldr	r0, [r7, #4]
 8011dfc:	f003 f88d 	bl	8014f1a <USBD_CtlError>
          ret = USBD_FAIL;
 8011e00:	2303      	movs	r3, #3
 8011e02:	75fb      	strb	r3, [r7, #23]
          break;
 8011e04:	bf00      	nop
      }
      break;
 8011e06:	e086      	b.n	8011f16 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011e08:	683b      	ldr	r3, [r7, #0]
 8011e0a:	785b      	ldrb	r3, [r3, #1]
 8011e0c:	2b0b      	cmp	r3, #11
 8011e0e:	d872      	bhi.n	8011ef6 <USBD_MSC_Setup+0x1ce>
 8011e10:	a201      	add	r2, pc, #4	; (adr r2, 8011e18 <USBD_MSC_Setup+0xf0>)
 8011e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e16:	bf00      	nop
 8011e18:	08011e49 	.word	0x08011e49
 8011e1c:	08011ec5 	.word	0x08011ec5
 8011e20:	08011ef7 	.word	0x08011ef7
 8011e24:	08011ef7 	.word	0x08011ef7
 8011e28:	08011ef7 	.word	0x08011ef7
 8011e2c:	08011ef7 	.word	0x08011ef7
 8011e30:	08011ef7 	.word	0x08011ef7
 8011e34:	08011ef7 	.word	0x08011ef7
 8011e38:	08011ef7 	.word	0x08011ef7
 8011e3c:	08011ef7 	.word	0x08011ef7
 8011e40:	08011e73 	.word	0x08011e73
 8011e44:	08011e9d 	.word	0x08011e9d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e4e:	b2db      	uxtb	r3, r3
 8011e50:	2b03      	cmp	r3, #3
 8011e52:	d107      	bne.n	8011e64 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011e54:	f107 030e 	add.w	r3, r7, #14
 8011e58:	2202      	movs	r2, #2
 8011e5a:	4619      	mov	r1, r3
 8011e5c:	6878      	ldr	r0, [r7, #4]
 8011e5e:	f003 f8cd 	bl	8014ffc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011e62:	e050      	b.n	8011f06 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8011e64:	6839      	ldr	r1, [r7, #0]
 8011e66:	6878      	ldr	r0, [r7, #4]
 8011e68:	f003 f857 	bl	8014f1a <USBD_CtlError>
            ret = USBD_FAIL;
 8011e6c:	2303      	movs	r3, #3
 8011e6e:	75fb      	strb	r3, [r7, #23]
          break;
 8011e70:	e049      	b.n	8011f06 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e78:	b2db      	uxtb	r3, r3
 8011e7a:	2b03      	cmp	r3, #3
 8011e7c:	d107      	bne.n	8011e8e <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8011e7e:	693b      	ldr	r3, [r7, #16]
 8011e80:	3304      	adds	r3, #4
 8011e82:	2201      	movs	r2, #1
 8011e84:	4619      	mov	r1, r3
 8011e86:	6878      	ldr	r0, [r7, #4]
 8011e88:	f003 f8b8 	bl	8014ffc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011e8c:	e03b      	b.n	8011f06 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8011e8e:	6839      	ldr	r1, [r7, #0]
 8011e90:	6878      	ldr	r0, [r7, #4]
 8011e92:	f003 f842 	bl	8014f1a <USBD_CtlError>
            ret = USBD_FAIL;
 8011e96:	2303      	movs	r3, #3
 8011e98:	75fb      	strb	r3, [r7, #23]
          break;
 8011e9a:	e034      	b.n	8011f06 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011ea2:	b2db      	uxtb	r3, r3
 8011ea4:	2b03      	cmp	r3, #3
 8011ea6:	d106      	bne.n	8011eb6 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8011ea8:	683b      	ldr	r3, [r7, #0]
 8011eaa:	885b      	ldrh	r3, [r3, #2]
 8011eac:	b2db      	uxtb	r3, r3
 8011eae:	461a      	mov	r2, r3
 8011eb0:	693b      	ldr	r3, [r7, #16]
 8011eb2:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011eb4:	e027      	b.n	8011f06 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8011eb6:	6839      	ldr	r1, [r7, #0]
 8011eb8:	6878      	ldr	r0, [r7, #4]
 8011eba:	f003 f82e 	bl	8014f1a <USBD_CtlError>
            ret = USBD_FAIL;
 8011ebe:	2303      	movs	r3, #3
 8011ec0:	75fb      	strb	r3, [r7, #23]
          break;
 8011ec2:	e020      	b.n	8011f06 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011eca:	b2db      	uxtb	r3, r3
 8011ecc:	2b03      	cmp	r3, #3
 8011ece:	d119      	bne.n	8011f04 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8011ed0:	683b      	ldr	r3, [r7, #0]
 8011ed2:	885b      	ldrh	r3, [r3, #2]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d115      	bne.n	8011f04 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8011ed8:	683b      	ldr	r3, [r7, #0]
 8011eda:	889b      	ldrh	r3, [r3, #4]
 8011edc:	b2db      	uxtb	r3, r3
 8011ede:	4619      	mov	r1, r3
 8011ee0:	6878      	ldr	r0, [r7, #4]
 8011ee2:	f006 fbe9 	bl	80186b8 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8011ee6:	683b      	ldr	r3, [r7, #0]
 8011ee8:	889b      	ldrh	r3, [r3, #4]
 8011eea:	b2db      	uxtb	r3, r3
 8011eec:	4619      	mov	r1, r3
 8011eee:	6878      	ldr	r0, [r7, #4]
 8011ef0:	f000 fb2e 	bl	8012550 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8011ef4:	e006      	b.n	8011f04 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8011ef6:	6839      	ldr	r1, [r7, #0]
 8011ef8:	6878      	ldr	r0, [r7, #4]
 8011efa:	f003 f80e 	bl	8014f1a <USBD_CtlError>
          ret = USBD_FAIL;
 8011efe:	2303      	movs	r3, #3
 8011f00:	75fb      	strb	r3, [r7, #23]
          break;
 8011f02:	e000      	b.n	8011f06 <USBD_MSC_Setup+0x1de>
          break;
 8011f04:	bf00      	nop
      }
      break;
 8011f06:	e006      	b.n	8011f16 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8011f08:	6839      	ldr	r1, [r7, #0]
 8011f0a:	6878      	ldr	r0, [r7, #4]
 8011f0c:	f003 f805 	bl	8014f1a <USBD_CtlError>
      ret = USBD_FAIL;
 8011f10:	2303      	movs	r3, #3
 8011f12:	75fb      	strb	r3, [r7, #23]
      break;
 8011f14:	bf00      	nop
  }

  return (uint8_t)ret;
 8011f16:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f18:	4618      	mov	r0, r3
 8011f1a:	3718      	adds	r7, #24
 8011f1c:	46bd      	mov	sp, r7
 8011f1e:	bd80      	pop	{r7, pc}

08011f20 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b082      	sub	sp, #8
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]
 8011f28:	460b      	mov	r3, r1
 8011f2a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8011f2c:	78fb      	ldrb	r3, [r7, #3]
 8011f2e:	4619      	mov	r1, r3
 8011f30:	6878      	ldr	r0, [r7, #4]
 8011f32:	f000 f959 	bl	80121e8 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8011f36:	2300      	movs	r3, #0
}
 8011f38:	4618      	mov	r0, r3
 8011f3a:	3708      	adds	r7, #8
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	bd80      	pop	{r7, pc}

08011f40 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b082      	sub	sp, #8
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	6078      	str	r0, [r7, #4]
 8011f48:	460b      	mov	r3, r1
 8011f4a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8011f4c:	78fb      	ldrb	r3, [r7, #3]
 8011f4e:	4619      	mov	r1, r3
 8011f50:	6878      	ldr	r0, [r7, #4]
 8011f52:	f000 f983 	bl	801225c <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8011f56:	2300      	movs	r3, #0
}
 8011f58:	4618      	mov	r0, r3
 8011f5a:	3708      	adds	r7, #8
 8011f5c:	46bd      	mov	sp, r7
 8011f5e:	bd80      	pop	{r7, pc}

08011f60 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b084      	sub	sp, #16
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8011f68:	2181      	movs	r1, #129	; 0x81
 8011f6a:	4812      	ldr	r0, [pc, #72]	; (8011fb4 <USBD_MSC_GetHSCfgDesc+0x54>)
 8011f6c:	f002 f972 	bl	8014254 <USBD_GetEpDesc>
 8011f70:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8011f72:	2101      	movs	r1, #1
 8011f74:	480f      	ldr	r0, [pc, #60]	; (8011fb4 <USBD_MSC_GetHSCfgDesc+0x54>)
 8011f76:	f002 f96d 	bl	8014254 <USBD_GetEpDesc>
 8011f7a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d006      	beq.n	8011f90 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	2200      	movs	r2, #0
 8011f86:	711a      	strb	r2, [r3, #4]
 8011f88:	2200      	movs	r2, #0
 8011f8a:	f042 0202 	orr.w	r2, r2, #2
 8011f8e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8011f90:	68bb      	ldr	r3, [r7, #8]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d006      	beq.n	8011fa4 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8011f96:	68bb      	ldr	r3, [r7, #8]
 8011f98:	2200      	movs	r2, #0
 8011f9a:	711a      	strb	r2, [r3, #4]
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	f042 0202 	orr.w	r2, r2, #2
 8011fa2:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	2220      	movs	r2, #32
 8011fa8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8011faa:	4b02      	ldr	r3, [pc, #8]	; (8011fb4 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8011fac:	4618      	mov	r0, r3
 8011fae:	3710      	adds	r7, #16
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	bd80      	pop	{r7, pc}
 8011fb4:	20000044 	.word	0x20000044

08011fb8 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8011fb8:	b580      	push	{r7, lr}
 8011fba:	b084      	sub	sp, #16
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8011fc0:	2181      	movs	r1, #129	; 0x81
 8011fc2:	4812      	ldr	r0, [pc, #72]	; (801200c <USBD_MSC_GetFSCfgDesc+0x54>)
 8011fc4:	f002 f946 	bl	8014254 <USBD_GetEpDesc>
 8011fc8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8011fca:	2101      	movs	r1, #1
 8011fcc:	480f      	ldr	r0, [pc, #60]	; (801200c <USBD_MSC_GetFSCfgDesc+0x54>)
 8011fce:	f002 f941 	bl	8014254 <USBD_GetEpDesc>
 8011fd2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d006      	beq.n	8011fe8 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	2200      	movs	r2, #0
 8011fde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011fe2:	711a      	strb	r2, [r3, #4]
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8011fe8:	68bb      	ldr	r3, [r7, #8]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d006      	beq.n	8011ffc <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8011fee:	68bb      	ldr	r3, [r7, #8]
 8011ff0:	2200      	movs	r2, #0
 8011ff2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011ff6:	711a      	strb	r2, [r3, #4]
 8011ff8:	2200      	movs	r2, #0
 8011ffa:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	2220      	movs	r2, #32
 8012000:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8012002:	4b02      	ldr	r3, [pc, #8]	; (801200c <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8012004:	4618      	mov	r0, r3
 8012006:	3710      	adds	r7, #16
 8012008:	46bd      	mov	sp, r7
 801200a:	bd80      	pop	{r7, pc}
 801200c:	20000044 	.word	0x20000044

08012010 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8012010:	b580      	push	{r7, lr}
 8012012:	b084      	sub	sp, #16
 8012014:	af00      	add	r7, sp, #0
 8012016:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8012018:	2181      	movs	r1, #129	; 0x81
 801201a:	4812      	ldr	r0, [pc, #72]	; (8012064 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 801201c:	f002 f91a 	bl	8014254 <USBD_GetEpDesc>
 8012020:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8012022:	2101      	movs	r1, #1
 8012024:	480f      	ldr	r0, [pc, #60]	; (8012064 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8012026:	f002 f915 	bl	8014254 <USBD_GetEpDesc>
 801202a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d006      	beq.n	8012040 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	2200      	movs	r2, #0
 8012036:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801203a:	711a      	strb	r2, [r3, #4]
 801203c:	2200      	movs	r2, #0
 801203e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8012040:	68bb      	ldr	r3, [r7, #8]
 8012042:	2b00      	cmp	r3, #0
 8012044:	d006      	beq.n	8012054 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8012046:	68bb      	ldr	r3, [r7, #8]
 8012048:	2200      	movs	r2, #0
 801204a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801204e:	711a      	strb	r2, [r3, #4]
 8012050:	2200      	movs	r2, #0
 8012052:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	2220      	movs	r2, #32
 8012058:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 801205a:	4b02      	ldr	r3, [pc, #8]	; (8012064 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 801205c:	4618      	mov	r0, r3
 801205e:	3710      	adds	r7, #16
 8012060:	46bd      	mov	sp, r7
 8012062:	bd80      	pop	{r7, pc}
 8012064:	20000044 	.word	0x20000044

08012068 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8012068:	b480      	push	{r7}
 801206a:	b083      	sub	sp, #12
 801206c:	af00      	add	r7, sp, #0
 801206e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	220a      	movs	r2, #10
 8012074:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8012076:	4b03      	ldr	r3, [pc, #12]	; (8012084 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8012078:	4618      	mov	r0, r3
 801207a:	370c      	adds	r7, #12
 801207c:	46bd      	mov	sp, r7
 801207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012082:	4770      	bx	lr
 8012084:	20000064 	.word	0x20000064

08012088 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8012088:	b480      	push	{r7}
 801208a:	b083      	sub	sp, #12
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
 8012090:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8012092:	683b      	ldr	r3, [r7, #0]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d101      	bne.n	801209c <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8012098:	2303      	movs	r3, #3
 801209a:	e009      	b.n	80120b0 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80120a2:	687a      	ldr	r2, [r7, #4]
 80120a4:	33b0      	adds	r3, #176	; 0xb0
 80120a6:	009b      	lsls	r3, r3, #2
 80120a8:	4413      	add	r3, r2
 80120aa:	683a      	ldr	r2, [r7, #0]
 80120ac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80120ae:	2300      	movs	r3, #0
}
 80120b0:	4618      	mov	r0, r3
 80120b2:	370c      	adds	r7, #12
 80120b4:	46bd      	mov	sp, r7
 80120b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ba:	4770      	bx	lr

080120bc <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80120bc:	b580      	push	{r7, lr}
 80120be:	b084      	sub	sp, #16
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	32b0      	adds	r2, #176	; 0xb0
 80120ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120d2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d032      	beq.n	8012140 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	2200      	movs	r2, #0
 80120de:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	2200      	movs	r2, #0
 80120e4:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	2200      	movs	r2, #0
 80120ea:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	2200      	movs	r2, #0
 80120f2:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	2200      	movs	r2, #0
 80120fa:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012104:	687a      	ldr	r2, [r7, #4]
 8012106:	33b0      	adds	r3, #176	; 0xb0
 8012108:	009b      	lsls	r3, r3, #2
 801210a:	4413      	add	r3, r2
 801210c:	685b      	ldr	r3, [r3, #4]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	2000      	movs	r0, #0
 8012112:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8012114:	4b0c      	ldr	r3, [pc, #48]	; (8012148 <MSC_BOT_Init+0x8c>)
 8012116:	781b      	ldrb	r3, [r3, #0]
 8012118:	4619      	mov	r1, r3
 801211a:	6878      	ldr	r0, [r7, #4]
 801211c:	f006 facc 	bl	80186b8 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8012120:	4b0a      	ldr	r3, [pc, #40]	; (801214c <MSC_BOT_Init+0x90>)
 8012122:	781b      	ldrb	r3, [r3, #0]
 8012124:	4619      	mov	r1, r3
 8012126:	6878      	ldr	r0, [r7, #4]
 8012128:	f006 fac6 	bl	80186b8 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 801212c:	4b06      	ldr	r3, [pc, #24]	; (8012148 <MSC_BOT_Init+0x8c>)
 801212e:	7819      	ldrb	r1, [r3, #0]
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8012136:	231f      	movs	r3, #31
 8012138:	6878      	ldr	r0, [r7, #4]
 801213a:	f006 fb86 	bl	801884a <USBD_LL_PrepareReceive>
 801213e:	e000      	b.n	8012142 <MSC_BOT_Init+0x86>
    return;
 8012140:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8012142:	3710      	adds	r7, #16
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}
 8012148:	2000006f 	.word	0x2000006f
 801214c:	2000006e 	.word	0x2000006e

08012150 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8012150:	b580      	push	{r7, lr}
 8012152:	b084      	sub	sp, #16
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	32b0      	adds	r2, #176	; 0xb0
 8012162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012166:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d01b      	beq.n	80121a6 <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	2200      	movs	r2, #0
 8012172:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	2201      	movs	r2, #1
 8012178:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 801217a:	4b0d      	ldr	r3, [pc, #52]	; (80121b0 <MSC_BOT_Reset+0x60>)
 801217c:	781b      	ldrb	r3, [r3, #0]
 801217e:	4619      	mov	r1, r3
 8012180:	6878      	ldr	r0, [r7, #4]
 8012182:	f006 fad7 	bl	8018734 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 8012186:	4b0b      	ldr	r3, [pc, #44]	; (80121b4 <MSC_BOT_Reset+0x64>)
 8012188:	781b      	ldrb	r3, [r3, #0]
 801218a:	4619      	mov	r1, r3
 801218c:	6878      	ldr	r0, [r7, #4]
 801218e:	f006 fad1 	bl	8018734 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8012192:	4b08      	ldr	r3, [pc, #32]	; (80121b4 <MSC_BOT_Reset+0x64>)
 8012194:	7819      	ldrb	r1, [r3, #0]
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801219c:	231f      	movs	r3, #31
 801219e:	6878      	ldr	r0, [r7, #4]
 80121a0:	f006 fb53 	bl	801884a <USBD_LL_PrepareReceive>
 80121a4:	e000      	b.n	80121a8 <MSC_BOT_Reset+0x58>
    return;
 80121a6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80121a8:	3710      	adds	r7, #16
 80121aa:	46bd      	mov	sp, r7
 80121ac:	bd80      	pop	{r7, pc}
 80121ae:	bf00      	nop
 80121b0:	2000006e 	.word	0x2000006e
 80121b4:	2000006f 	.word	0x2000006f

080121b8 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 80121b8:	b480      	push	{r7}
 80121ba:	b085      	sub	sp, #20
 80121bc:	af00      	add	r7, sp, #0
 80121be:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	32b0      	adds	r2, #176	; 0xb0
 80121ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80121ce:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d002      	beq.n	80121dc <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	2200      	movs	r2, #0
 80121da:	721a      	strb	r2, [r3, #8]
  }
}
 80121dc:	bf00      	nop
 80121de:	3714      	adds	r7, #20
 80121e0:	46bd      	mov	sp, r7
 80121e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e6:	4770      	bx	lr

080121e8 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b084      	sub	sp, #16
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	6078      	str	r0, [r7, #4]
 80121f0:	460b      	mov	r3, r1
 80121f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	32b0      	adds	r2, #176	; 0xb0
 80121fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012202:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d020      	beq.n	801224c <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	7a1b      	ldrb	r3, [r3, #8]
 801220e:	2b02      	cmp	r3, #2
 8012210:	d005      	beq.n	801221e <MSC_BOT_DataIn+0x36>
 8012212:	2b02      	cmp	r3, #2
 8012214:	db1c      	blt.n	8012250 <MSC_BOT_DataIn+0x68>
 8012216:	3b03      	subs	r3, #3
 8012218:	2b01      	cmp	r3, #1
 801221a:	d819      	bhi.n	8012250 <MSC_BOT_DataIn+0x68>
 801221c:	e011      	b.n	8012242 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801222a:	461a      	mov	r2, r3
 801222c:	6878      	ldr	r0, [r7, #4]
 801222e:	f000 f9c9 	bl	80125c4 <SCSI_ProcessCmd>
 8012232:	4603      	mov	r3, r0
 8012234:	2b00      	cmp	r3, #0
 8012236:	da0d      	bge.n	8012254 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012238:	2101      	movs	r1, #1
 801223a:	6878      	ldr	r0, [r7, #4]
 801223c:	f000 f90c 	bl	8012458 <MSC_BOT_SendCSW>
      }
      break;
 8012240:	e008      	b.n	8012254 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8012242:	2100      	movs	r1, #0
 8012244:	6878      	ldr	r0, [r7, #4]
 8012246:	f000 f907 	bl	8012458 <MSC_BOT_SendCSW>
      break;
 801224a:	e004      	b.n	8012256 <MSC_BOT_DataIn+0x6e>
    return;
 801224c:	bf00      	nop
 801224e:	e002      	b.n	8012256 <MSC_BOT_DataIn+0x6e>

    default:
      break;
 8012250:	bf00      	nop
 8012252:	e000      	b.n	8012256 <MSC_BOT_DataIn+0x6e>
      break;
 8012254:	bf00      	nop
  }
}
 8012256:	3710      	adds	r7, #16
 8012258:	46bd      	mov	sp, r7
 801225a:	bd80      	pop	{r7, pc}

0801225c <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801225c:	b580      	push	{r7, lr}
 801225e:	b084      	sub	sp, #16
 8012260:	af00      	add	r7, sp, #0
 8012262:	6078      	str	r0, [r7, #4]
 8012264:	460b      	mov	r3, r1
 8012266:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	32b0      	adds	r2, #176	; 0xb0
 8012272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012276:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	2b00      	cmp	r3, #0
 801227c:	d01c      	beq.n	80122b8 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	7a1b      	ldrb	r3, [r3, #8]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d002      	beq.n	801228c <MSC_BOT_DataOut+0x30>
 8012286:	2b01      	cmp	r3, #1
 8012288:	d004      	beq.n	8012294 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 801228a:	e018      	b.n	80122be <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 801228c:	6878      	ldr	r0, [r7, #4]
 801228e:	f000 f819 	bl	80122c4 <MSC_BOT_CBW_Decode>
      break;
 8012292:	e014      	b.n	80122be <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80122a0:	461a      	mov	r2, r3
 80122a2:	6878      	ldr	r0, [r7, #4]
 80122a4:	f000 f98e 	bl	80125c4 <SCSI_ProcessCmd>
 80122a8:	4603      	mov	r3, r0
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	da06      	bge.n	80122bc <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80122ae:	2101      	movs	r1, #1
 80122b0:	6878      	ldr	r0, [r7, #4]
 80122b2:	f000 f8d1 	bl	8012458 <MSC_BOT_SendCSW>
      break;
 80122b6:	e001      	b.n	80122bc <MSC_BOT_DataOut+0x60>
    return;
 80122b8:	bf00      	nop
 80122ba:	e000      	b.n	80122be <MSC_BOT_DataOut+0x62>
      break;
 80122bc:	bf00      	nop
  }
}
 80122be:	3710      	adds	r7, #16
 80122c0:	46bd      	mov	sp, r7
 80122c2:	bd80      	pop	{r7, pc}

080122c4 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 80122c4:	b580      	push	{r7, lr}
 80122c6:	b084      	sub	sp, #16
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	32b0      	adds	r2, #176	; 0xb0
 80122d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80122da:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d079      	beq.n	80123d6 <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 80122fa:	4b3a      	ldr	r3, [pc, #232]	; (80123e4 <MSC_BOT_CBW_Decode+0x120>)
 80122fc:	781b      	ldrb	r3, [r3, #0]
 80122fe:	4619      	mov	r1, r3
 8012300:	6878      	ldr	r0, [r7, #4]
 8012302:	f006 fac3 	bl	801888c <USBD_LL_GetRxDataSize>
 8012306:	4603      	mov	r3, r0
 8012308:	2b1f      	cmp	r3, #31
 801230a:	d114      	bne.n	8012336 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8012312:	4a35      	ldr	r2, [pc, #212]	; (80123e8 <MSC_BOT_CBW_Decode+0x124>)
 8012314:	4293      	cmp	r3, r2
 8012316:	d10e      	bne.n	8012336 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801231e:	2b01      	cmp	r3, #1
 8012320:	d809      	bhi.n	8012336 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8012328:	2b00      	cmp	r3, #0
 801232a:	d004      	beq.n	8012336 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8012332:	2b10      	cmp	r3, #16
 8012334:	d90e      	bls.n	8012354 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801233c:	2320      	movs	r3, #32
 801233e:	2205      	movs	r2, #5
 8012340:	6878      	ldr	r0, [r7, #4]
 8012342:	f000 fe28 	bl	8012f96 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	2202      	movs	r2, #2
 801234a:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 801234c:	6878      	ldr	r0, [r7, #4]
 801234e:	f000 f8bd 	bl	80124cc <MSC_BOT_Abort>
 8012352:	e043      	b.n	80123dc <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8012360:	461a      	mov	r2, r3
 8012362:	6878      	ldr	r0, [r7, #4]
 8012364:	f000 f92e 	bl	80125c4 <SCSI_ProcessCmd>
 8012368:	4603      	mov	r3, r0
 801236a:	2b00      	cmp	r3, #0
 801236c:	da0c      	bge.n	8012388 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	7a1b      	ldrb	r3, [r3, #8]
 8012372:	2b05      	cmp	r3, #5
 8012374:	d104      	bne.n	8012380 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012376:	2101      	movs	r1, #1
 8012378:	6878      	ldr	r0, [r7, #4]
 801237a:	f000 f86d 	bl	8012458 <MSC_BOT_SendCSW>
 801237e:	e02d      	b.n	80123dc <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8012380:	6878      	ldr	r0, [r7, #4]
 8012382:	f000 f8a3 	bl	80124cc <MSC_BOT_Abort>
 8012386:	e029      	b.n	80123dc <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	7a1b      	ldrb	r3, [r3, #8]
 801238c:	2b02      	cmp	r3, #2
 801238e:	d024      	beq.n	80123da <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8012394:	2b01      	cmp	r3, #1
 8012396:	d020      	beq.n	80123da <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 801239c:	2b03      	cmp	r3, #3
 801239e:	d01c      	beq.n	80123da <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	68db      	ldr	r3, [r3, #12]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d009      	beq.n	80123bc <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	f103 0110 	add.w	r1, r3, #16
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	68db      	ldr	r3, [r3, #12]
 80123b2:	461a      	mov	r2, r3
 80123b4:	6878      	ldr	r0, [r7, #4]
 80123b6:	f000 f819 	bl	80123ec <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80123ba:	e00f      	b.n	80123dc <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	68db      	ldr	r3, [r3, #12]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d104      	bne.n	80123ce <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80123c4:	2100      	movs	r1, #0
 80123c6:	6878      	ldr	r0, [r7, #4]
 80123c8:	f000 f846 	bl	8012458 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 80123cc:	e006      	b.n	80123dc <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80123ce:	6878      	ldr	r0, [r7, #4]
 80123d0:	f000 f87c 	bl	80124cc <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 80123d4:	e002      	b.n	80123dc <MSC_BOT_CBW_Decode+0x118>
    return;
 80123d6:	bf00      	nop
 80123d8:	e000      	b.n	80123dc <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 80123da:	bf00      	nop
    }
  }
}
 80123dc:	3710      	adds	r7, #16
 80123de:	46bd      	mov	sp, r7
 80123e0:	bd80      	pop	{r7, pc}
 80123e2:	bf00      	nop
 80123e4:	2000006f 	.word	0x2000006f
 80123e8:	43425355 	.word	0x43425355

080123ec <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b086      	sub	sp, #24
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	60f8      	str	r0, [r7, #12]
 80123f4:	60b9      	str	r1, [r7, #8]
 80123f6:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	32b0      	adds	r2, #176	; 0xb0
 8012402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012406:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8012408:	697b      	ldr	r3, [r7, #20]
 801240a:	2b00      	cmp	r3, #0
 801240c:	d01e      	beq.n	801244c <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 801240e:	697b      	ldr	r3, [r7, #20]
 8012410:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012414:	687a      	ldr	r2, [r7, #4]
 8012416:	4293      	cmp	r3, r2
 8012418:	bf28      	it	cs
 801241a:	4613      	movcs	r3, r2
 801241c:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 801241e:	697b      	ldr	r3, [r7, #20]
 8012420:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	1ad2      	subs	r2, r2, r3
 8012428:	697b      	ldr	r3, [r7, #20]
 801242a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 801242e:	697b      	ldr	r3, [r7, #20]
 8012430:	2200      	movs	r2, #0
 8012432:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8012436:	697b      	ldr	r3, [r7, #20]
 8012438:	2204      	movs	r2, #4
 801243a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 801243c:	4b05      	ldr	r3, [pc, #20]	; (8012454 <MSC_BOT_SendData+0x68>)
 801243e:	7819      	ldrb	r1, [r3, #0]
 8012440:	693b      	ldr	r3, [r7, #16]
 8012442:	68ba      	ldr	r2, [r7, #8]
 8012444:	68f8      	ldr	r0, [r7, #12]
 8012446:	f006 f9df 	bl	8018808 <USBD_LL_Transmit>
 801244a:	e000      	b.n	801244e <MSC_BOT_SendData+0x62>
    return;
 801244c:	bf00      	nop
}
 801244e:	3718      	adds	r7, #24
 8012450:	46bd      	mov	sp, r7
 8012452:	bd80      	pop	{r7, pc}
 8012454:	2000006e 	.word	0x2000006e

08012458 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8012458:	b580      	push	{r7, lr}
 801245a:	b084      	sub	sp, #16
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
 8012460:	460b      	mov	r3, r1
 8012462:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	32b0      	adds	r2, #176	; 0xb0
 801246e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012472:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d01d      	beq.n	80124b6 <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	4a10      	ldr	r2, [pc, #64]	; (80124c0 <MSC_BOT_SendCSW+0x68>)
 801247e:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	78fa      	ldrb	r2, [r7, #3]
 8012486:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	2200      	movs	r2, #0
 801248e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8012490:	4b0c      	ldr	r3, [pc, #48]	; (80124c4 <MSC_BOT_SendCSW+0x6c>)
 8012492:	7819      	ldrb	r1, [r3, #0]
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	f503 720c 	add.w	r2, r3, #560	; 0x230
 801249a:	230d      	movs	r3, #13
 801249c:	6878      	ldr	r0, [r7, #4]
 801249e:	f006 f9b3 	bl	8018808 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80124a2:	4b09      	ldr	r3, [pc, #36]	; (80124c8 <MSC_BOT_SendCSW+0x70>)
 80124a4:	7819      	ldrb	r1, [r3, #0]
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80124ac:	231f      	movs	r3, #31
 80124ae:	6878      	ldr	r0, [r7, #4]
 80124b0:	f006 f9cb 	bl	801884a <USBD_LL_PrepareReceive>
 80124b4:	e000      	b.n	80124b8 <MSC_BOT_SendCSW+0x60>
    return;
 80124b6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80124b8:	3710      	adds	r7, #16
 80124ba:	46bd      	mov	sp, r7
 80124bc:	bd80      	pop	{r7, pc}
 80124be:	bf00      	nop
 80124c0:	53425355 	.word	0x53425355
 80124c4:	2000006e 	.word	0x2000006e
 80124c8:	2000006f 	.word	0x2000006f

080124cc <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b084      	sub	sp, #16
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	32b0      	adds	r2, #176	; 0xb0
 80124de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80124e2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d02a      	beq.n	8012540 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d10e      	bne.n	8012512 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d009      	beq.n	8012512 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8012502:	2b00      	cmp	r3, #0
 8012504:	d105      	bne.n	8012512 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8012506:	4b10      	ldr	r3, [pc, #64]	; (8012548 <MSC_BOT_Abort+0x7c>)
 8012508:	781b      	ldrb	r3, [r3, #0]
 801250a:	4619      	mov	r1, r3
 801250c:	6878      	ldr	r0, [r7, #4]
 801250e:	f006 f8f2 	bl	80186f6 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8012512:	4b0e      	ldr	r3, [pc, #56]	; (801254c <MSC_BOT_Abort+0x80>)
 8012514:	781b      	ldrb	r3, [r3, #0]
 8012516:	4619      	mov	r1, r3
 8012518:	6878      	ldr	r0, [r7, #4]
 801251a:	f006 f8ec 	bl	80186f6 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	7a5b      	ldrb	r3, [r3, #9]
 8012522:	2b02      	cmp	r3, #2
 8012524:	d10d      	bne.n	8012542 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8012526:	4b09      	ldr	r3, [pc, #36]	; (801254c <MSC_BOT_Abort+0x80>)
 8012528:	781b      	ldrb	r3, [r3, #0]
 801252a:	4619      	mov	r1, r3
 801252c:	6878      	ldr	r0, [r7, #4]
 801252e:	f006 f8e2 	bl	80186f6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8012532:	4b05      	ldr	r3, [pc, #20]	; (8012548 <MSC_BOT_Abort+0x7c>)
 8012534:	781b      	ldrb	r3, [r3, #0]
 8012536:	4619      	mov	r1, r3
 8012538:	6878      	ldr	r0, [r7, #4]
 801253a:	f006 f8dc 	bl	80186f6 <USBD_LL_StallEP>
 801253e:	e000      	b.n	8012542 <MSC_BOT_Abort+0x76>
    return;
 8012540:	bf00      	nop
  }
}
 8012542:	3710      	adds	r7, #16
 8012544:	46bd      	mov	sp, r7
 8012546:	bd80      	pop	{r7, pc}
 8012548:	2000006f 	.word	0x2000006f
 801254c:	2000006e 	.word	0x2000006e

08012550 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012550:	b580      	push	{r7, lr}
 8012552:	b084      	sub	sp, #16
 8012554:	af00      	add	r7, sp, #0
 8012556:	6078      	str	r0, [r7, #4]
 8012558:	460b      	mov	r3, r1
 801255a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	32b0      	adds	r2, #176	; 0xb0
 8012566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801256a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d01d      	beq.n	80125ae <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	7a5b      	ldrb	r3, [r3, #9]
 8012576:	2b02      	cmp	r3, #2
 8012578:	d10c      	bne.n	8012594 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 801257a:	4b10      	ldr	r3, [pc, #64]	; (80125bc <MSC_BOT_CplClrFeature+0x6c>)
 801257c:	781b      	ldrb	r3, [r3, #0]
 801257e:	4619      	mov	r1, r3
 8012580:	6878      	ldr	r0, [r7, #4]
 8012582:	f006 f8b8 	bl	80186f6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8012586:	4b0e      	ldr	r3, [pc, #56]	; (80125c0 <MSC_BOT_CplClrFeature+0x70>)
 8012588:	781b      	ldrb	r3, [r3, #0]
 801258a:	4619      	mov	r1, r3
 801258c:	6878      	ldr	r0, [r7, #4]
 801258e:	f006 f8b2 	bl	80186f6 <USBD_LL_StallEP>
 8012592:	e00f      	b.n	80125b4 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8012594:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012598:	2b00      	cmp	r3, #0
 801259a:	da0a      	bge.n	80125b2 <MSC_BOT_CplClrFeature+0x62>
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	7a5b      	ldrb	r3, [r3, #9]
 80125a0:	2b01      	cmp	r3, #1
 80125a2:	d006      	beq.n	80125b2 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80125a4:	2101      	movs	r1, #1
 80125a6:	6878      	ldr	r0, [r7, #4]
 80125a8:	f7ff ff56 	bl	8012458 <MSC_BOT_SendCSW>
 80125ac:	e002      	b.n	80125b4 <MSC_BOT_CplClrFeature+0x64>
    return;
 80125ae:	bf00      	nop
 80125b0:	e000      	b.n	80125b4 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 80125b2:	bf00      	nop
  }
}
 80125b4:	3710      	adds	r7, #16
 80125b6:	46bd      	mov	sp, r7
 80125b8:	bd80      	pop	{r7, pc}
 80125ba:	bf00      	nop
 80125bc:	2000006e 	.word	0x2000006e
 80125c0:	2000006f 	.word	0x2000006f

080125c4 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b086      	sub	sp, #24
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	60f8      	str	r0, [r7, #12]
 80125cc:	460b      	mov	r3, r1
 80125ce:	607a      	str	r2, [r7, #4]
 80125d0:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	32b0      	adds	r2, #176	; 0xb0
 80125dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80125e0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80125e2:	693b      	ldr	r3, [r7, #16]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d102      	bne.n	80125ee <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 80125e8:	f04f 33ff 	mov.w	r3, #4294967295
 80125ec:	e168      	b.n	80128c0 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	781b      	ldrb	r3, [r3, #0]
 80125f2:	2baa      	cmp	r3, #170	; 0xaa
 80125f4:	f000 8144 	beq.w	8012880 <SCSI_ProcessCmd+0x2bc>
 80125f8:	2baa      	cmp	r3, #170	; 0xaa
 80125fa:	f300 8153 	bgt.w	80128a4 <SCSI_ProcessCmd+0x2e0>
 80125fe:	2ba8      	cmp	r3, #168	; 0xa8
 8012600:	f000 812c 	beq.w	801285c <SCSI_ProcessCmd+0x298>
 8012604:	2ba8      	cmp	r3, #168	; 0xa8
 8012606:	f300 814d 	bgt.w	80128a4 <SCSI_ProcessCmd+0x2e0>
 801260a:	2b5a      	cmp	r3, #90	; 0x5a
 801260c:	f300 80c0 	bgt.w	8012790 <SCSI_ProcessCmd+0x1cc>
 8012610:	2b00      	cmp	r3, #0
 8012612:	f2c0 8147 	blt.w	80128a4 <SCSI_ProcessCmd+0x2e0>
 8012616:	2b5a      	cmp	r3, #90	; 0x5a
 8012618:	f200 8144 	bhi.w	80128a4 <SCSI_ProcessCmd+0x2e0>
 801261c:	a201      	add	r2, pc, #4	; (adr r2, 8012624 <SCSI_ProcessCmd+0x60>)
 801261e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012622:	bf00      	nop
 8012624:	08012797 	.word	0x08012797
 8012628:	080128a5 	.word	0x080128a5
 801262c:	080128a5 	.word	0x080128a5
 8012630:	080127a9 	.word	0x080127a9
 8012634:	080128a5 	.word	0x080128a5
 8012638:	080128a5 	.word	0x080128a5
 801263c:	080128a5 	.word	0x080128a5
 8012640:	080128a5 	.word	0x080128a5
 8012644:	080128a5 	.word	0x080128a5
 8012648:	080128a5 	.word	0x080128a5
 801264c:	080128a5 	.word	0x080128a5
 8012650:	080128a5 	.word	0x080128a5
 8012654:	080128a5 	.word	0x080128a5
 8012658:	080128a5 	.word	0x080128a5
 801265c:	080128a5 	.word	0x080128a5
 8012660:	080128a5 	.word	0x080128a5
 8012664:	080128a5 	.word	0x080128a5
 8012668:	080128a5 	.word	0x080128a5
 801266c:	080127bb 	.word	0x080127bb
 8012670:	080128a5 	.word	0x080128a5
 8012674:	080128a5 	.word	0x080128a5
 8012678:	080128a5 	.word	0x080128a5
 801267c:	080128a5 	.word	0x080128a5
 8012680:	080128a5 	.word	0x080128a5
 8012684:	080128a5 	.word	0x080128a5
 8012688:	080128a5 	.word	0x080128a5
 801268c:	080127f1 	.word	0x080127f1
 8012690:	080127cd 	.word	0x080127cd
 8012694:	080128a5 	.word	0x080128a5
 8012698:	080128a5 	.word	0x080128a5
 801269c:	080127df 	.word	0x080127df
 80126a0:	080128a5 	.word	0x080128a5
 80126a4:	080128a5 	.word	0x080128a5
 80126a8:	080128a5 	.word	0x080128a5
 80126ac:	080128a5 	.word	0x080128a5
 80126b0:	08012815 	.word	0x08012815
 80126b4:	080128a5 	.word	0x080128a5
 80126b8:	08012827 	.word	0x08012827
 80126bc:	080128a5 	.word	0x080128a5
 80126c0:	080128a5 	.word	0x080128a5
 80126c4:	0801284b 	.word	0x0801284b
 80126c8:	080128a5 	.word	0x080128a5
 80126cc:	0801286f 	.word	0x0801286f
 80126d0:	080128a5 	.word	0x080128a5
 80126d4:	080128a5 	.word	0x080128a5
 80126d8:	080128a5 	.word	0x080128a5
 80126dc:	080128a5 	.word	0x080128a5
 80126e0:	08012893 	.word	0x08012893
 80126e4:	080128a5 	.word	0x080128a5
 80126e8:	080128a5 	.word	0x080128a5
 80126ec:	080128a5 	.word	0x080128a5
 80126f0:	080128a5 	.word	0x080128a5
 80126f4:	080128a5 	.word	0x080128a5
 80126f8:	080128a5 	.word	0x080128a5
 80126fc:	080128a5 	.word	0x080128a5
 8012700:	080128a5 	.word	0x080128a5
 8012704:	080128a5 	.word	0x080128a5
 8012708:	080128a5 	.word	0x080128a5
 801270c:	080128a5 	.word	0x080128a5
 8012710:	080128a5 	.word	0x080128a5
 8012714:	080128a5 	.word	0x080128a5
 8012718:	080128a5 	.word	0x080128a5
 801271c:	080128a5 	.word	0x080128a5
 8012720:	080128a5 	.word	0x080128a5
 8012724:	080128a5 	.word	0x080128a5
 8012728:	080128a5 	.word	0x080128a5
 801272c:	080128a5 	.word	0x080128a5
 8012730:	080128a5 	.word	0x080128a5
 8012734:	080128a5 	.word	0x080128a5
 8012738:	080128a5 	.word	0x080128a5
 801273c:	080128a5 	.word	0x080128a5
 8012740:	080128a5 	.word	0x080128a5
 8012744:	080128a5 	.word	0x080128a5
 8012748:	080128a5 	.word	0x080128a5
 801274c:	080128a5 	.word	0x080128a5
 8012750:	080128a5 	.word	0x080128a5
 8012754:	080128a5 	.word	0x080128a5
 8012758:	080128a5 	.word	0x080128a5
 801275c:	080128a5 	.word	0x080128a5
 8012760:	080128a5 	.word	0x080128a5
 8012764:	080128a5 	.word	0x080128a5
 8012768:	080128a5 	.word	0x080128a5
 801276c:	080128a5 	.word	0x080128a5
 8012770:	080128a5 	.word	0x080128a5
 8012774:	080128a5 	.word	0x080128a5
 8012778:	080128a5 	.word	0x080128a5
 801277c:	080128a5 	.word	0x080128a5
 8012780:	080128a5 	.word	0x080128a5
 8012784:	080128a5 	.word	0x080128a5
 8012788:	080128a5 	.word	0x080128a5
 801278c:	08012803 	.word	0x08012803
 8012790:	2b9e      	cmp	r3, #158	; 0x9e
 8012792:	d051      	beq.n	8012838 <SCSI_ProcessCmd+0x274>
 8012794:	e086      	b.n	80128a4 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8012796:	7afb      	ldrb	r3, [r7, #11]
 8012798:	687a      	ldr	r2, [r7, #4]
 801279a:	4619      	mov	r1, r3
 801279c:	68f8      	ldr	r0, [r7, #12]
 801279e:	f000 f893 	bl	80128c8 <SCSI_TestUnitReady>
 80127a2:	4603      	mov	r3, r0
 80127a4:	75fb      	strb	r3, [r7, #23]
      break;
 80127a6:	e089      	b.n	80128bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 80127a8:	7afb      	ldrb	r3, [r7, #11]
 80127aa:	687a      	ldr	r2, [r7, #4]
 80127ac:	4619      	mov	r1, r3
 80127ae:	68f8      	ldr	r0, [r7, #12]
 80127b0:	f000 fb6e 	bl	8012e90 <SCSI_RequestSense>
 80127b4:	4603      	mov	r3, r0
 80127b6:	75fb      	strb	r3, [r7, #23]
      break;
 80127b8:	e080      	b.n	80128bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 80127ba:	7afb      	ldrb	r3, [r7, #11]
 80127bc:	687a      	ldr	r2, [r7, #4]
 80127be:	4619      	mov	r1, r3
 80127c0:	68f8      	ldr	r0, [r7, #12]
 80127c2:	f000 f8db 	bl	801297c <SCSI_Inquiry>
 80127c6:	4603      	mov	r3, r0
 80127c8:	75fb      	strb	r3, [r7, #23]
      break;
 80127ca:	e077      	b.n	80128bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 80127cc:	7afb      	ldrb	r3, [r7, #11]
 80127ce:	687a      	ldr	r2, [r7, #4]
 80127d0:	4619      	mov	r1, r3
 80127d2:	68f8      	ldr	r0, [r7, #12]
 80127d4:	f000 fc2a 	bl	801302c <SCSI_StartStopUnit>
 80127d8:	4603      	mov	r3, r0
 80127da:	75fb      	strb	r3, [r7, #23]
      break;
 80127dc:	e06e      	b.n	80128bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 80127de:	7afb      	ldrb	r3, [r7, #11]
 80127e0:	687a      	ldr	r2, [r7, #4]
 80127e2:	4619      	mov	r1, r3
 80127e4:	68f8      	ldr	r0, [r7, #12]
 80127e6:	f000 fc76 	bl	80130d6 <SCSI_AllowPreventRemovable>
 80127ea:	4603      	mov	r3, r0
 80127ec:	75fb      	strb	r3, [r7, #23]
      break;
 80127ee:	e065      	b.n	80128bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 80127f0:	7afb      	ldrb	r3, [r7, #11]
 80127f2:	687a      	ldr	r2, [r7, #4]
 80127f4:	4619      	mov	r1, r3
 80127f6:	68f8      	ldr	r0, [r7, #12]
 80127f8:	f000 faea 	bl	8012dd0 <SCSI_ModeSense6>
 80127fc:	4603      	mov	r3, r0
 80127fe:	75fb      	strb	r3, [r7, #23]
      break;
 8012800:	e05c      	b.n	80128bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8012802:	7afb      	ldrb	r3, [r7, #11]
 8012804:	687a      	ldr	r2, [r7, #4]
 8012806:	4619      	mov	r1, r3
 8012808:	68f8      	ldr	r0, [r7, #12]
 801280a:	f000 fb11 	bl	8012e30 <SCSI_ModeSense10>
 801280e:	4603      	mov	r3, r0
 8012810:	75fb      	strb	r3, [r7, #23]
      break;
 8012812:	e053      	b.n	80128bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8012814:	7afb      	ldrb	r3, [r7, #11]
 8012816:	687a      	ldr	r2, [r7, #4]
 8012818:	4619      	mov	r1, r3
 801281a:	68f8      	ldr	r0, [r7, #12]
 801281c:	f000 fa5d 	bl	8012cda <SCSI_ReadFormatCapacity>
 8012820:	4603      	mov	r3, r0
 8012822:	75fb      	strb	r3, [r7, #23]
      break;
 8012824:	e04a      	b.n	80128bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8012826:	7afb      	ldrb	r3, [r7, #11]
 8012828:	687a      	ldr	r2, [r7, #4]
 801282a:	4619      	mov	r1, r3
 801282c:	68f8      	ldr	r0, [r7, #12]
 801282e:	f000 f923 	bl	8012a78 <SCSI_ReadCapacity10>
 8012832:	4603      	mov	r3, r0
 8012834:	75fb      	strb	r3, [r7, #23]
      break;
 8012836:	e041      	b.n	80128bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8012838:	7afb      	ldrb	r3, [r7, #11]
 801283a:	687a      	ldr	r2, [r7, #4]
 801283c:	4619      	mov	r1, r3
 801283e:	68f8      	ldr	r0, [r7, #12]
 8012840:	f000 f998 	bl	8012b74 <SCSI_ReadCapacity16>
 8012844:	4603      	mov	r3, r0
 8012846:	75fb      	strb	r3, [r7, #23]
      break;
 8012848:	e038      	b.n	80128bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 801284a:	7afb      	ldrb	r3, [r7, #11]
 801284c:	687a      	ldr	r2, [r7, #4]
 801284e:	4619      	mov	r1, r3
 8012850:	68f8      	ldr	r0, [r7, #12]
 8012852:	f000 fc6d 	bl	8013130 <SCSI_Read10>
 8012856:	4603      	mov	r3, r0
 8012858:	75fb      	strb	r3, [r7, #23]
      break;
 801285a:	e02f      	b.n	80128bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 801285c:	7afb      	ldrb	r3, [r7, #11]
 801285e:	687a      	ldr	r2, [r7, #4]
 8012860:	4619      	mov	r1, r3
 8012862:	68f8      	ldr	r0, [r7, #12]
 8012864:	f000 fd0e 	bl	8013284 <SCSI_Read12>
 8012868:	4603      	mov	r3, r0
 801286a:	75fb      	strb	r3, [r7, #23]
      break;
 801286c:	e026      	b.n	80128bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 801286e:	7afb      	ldrb	r3, [r7, #11]
 8012870:	687a      	ldr	r2, [r7, #4]
 8012872:	4619      	mov	r1, r3
 8012874:	68f8      	ldr	r0, [r7, #12]
 8012876:	f000 fdb9 	bl	80133ec <SCSI_Write10>
 801287a:	4603      	mov	r3, r0
 801287c:	75fb      	strb	r3, [r7, #23]
      break;
 801287e:	e01d      	b.n	80128bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8012880:	7afb      	ldrb	r3, [r7, #11]
 8012882:	687a      	ldr	r2, [r7, #4]
 8012884:	4619      	mov	r1, r3
 8012886:	68f8      	ldr	r0, [r7, #12]
 8012888:	f000 fe86 	bl	8013598 <SCSI_Write12>
 801288c:	4603      	mov	r3, r0
 801288e:	75fb      	strb	r3, [r7, #23]
      break;
 8012890:	e014      	b.n	80128bc <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8012892:	7afb      	ldrb	r3, [r7, #11]
 8012894:	687a      	ldr	r2, [r7, #4]
 8012896:	4619      	mov	r1, r3
 8012898:	68f8      	ldr	r0, [r7, #12]
 801289a:	f000 ff63 	bl	8013764 <SCSI_Verify10>
 801289e:	4603      	mov	r3, r0
 80128a0:	75fb      	strb	r3, [r7, #23]
      break;
 80128a2:	e00b      	b.n	80128bc <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80128a4:	7af9      	ldrb	r1, [r7, #11]
 80128a6:	2320      	movs	r3, #32
 80128a8:	2205      	movs	r2, #5
 80128aa:	68f8      	ldr	r0, [r7, #12]
 80128ac:	f000 fb73 	bl	8012f96 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80128b0:	693b      	ldr	r3, [r7, #16]
 80128b2:	2202      	movs	r2, #2
 80128b4:	725a      	strb	r2, [r3, #9]
      ret = -1;
 80128b6:	23ff      	movs	r3, #255	; 0xff
 80128b8:	75fb      	strb	r3, [r7, #23]
      break;
 80128ba:	bf00      	nop
  }

  return ret;
 80128bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80128c0:	4618      	mov	r0, r3
 80128c2:	3718      	adds	r7, #24
 80128c4:	46bd      	mov	sp, r7
 80128c6:	bd80      	pop	{r7, pc}

080128c8 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80128c8:	b580      	push	{r7, lr}
 80128ca:	b086      	sub	sp, #24
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	60f8      	str	r0, [r7, #12]
 80128d0:	460b      	mov	r3, r1
 80128d2:	607a      	str	r2, [r7, #4]
 80128d4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	32b0      	adds	r2, #176	; 0xb0
 80128e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128e4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80128e6:	697b      	ldr	r3, [r7, #20]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d102      	bne.n	80128f2 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 80128ec:	f04f 33ff 	mov.w	r3, #4294967295
 80128f0:	e03f      	b.n	8012972 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 80128f2:	697b      	ldr	r3, [r7, #20]
 80128f4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d00a      	beq.n	8012912 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80128fc:	697b      	ldr	r3, [r7, #20]
 80128fe:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012902:	2320      	movs	r3, #32
 8012904:	2205      	movs	r2, #5
 8012906:	68f8      	ldr	r0, [r7, #12]
 8012908:	f000 fb45 	bl	8012f96 <SCSI_SenseCode>

    return -1;
 801290c:	f04f 33ff 	mov.w	r3, #4294967295
 8012910:	e02f      	b.n	8012972 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8012912:	697b      	ldr	r3, [r7, #20]
 8012914:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8012918:	2b02      	cmp	r3, #2
 801291a:	d10b      	bne.n	8012934 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801291c:	7af9      	ldrb	r1, [r7, #11]
 801291e:	233a      	movs	r3, #58	; 0x3a
 8012920:	2202      	movs	r2, #2
 8012922:	68f8      	ldr	r0, [r7, #12]
 8012924:	f000 fb37 	bl	8012f96 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8012928:	697b      	ldr	r3, [r7, #20]
 801292a:	2205      	movs	r2, #5
 801292c:	721a      	strb	r2, [r3, #8]
    return -1;
 801292e:	f04f 33ff 	mov.w	r3, #4294967295
 8012932:	e01e      	b.n	8012972 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801293a:	68fa      	ldr	r2, [r7, #12]
 801293c:	33b0      	adds	r3, #176	; 0xb0
 801293e:	009b      	lsls	r3, r3, #2
 8012940:	4413      	add	r3, r2
 8012942:	685b      	ldr	r3, [r3, #4]
 8012944:	689b      	ldr	r3, [r3, #8]
 8012946:	7afa      	ldrb	r2, [r7, #11]
 8012948:	4610      	mov	r0, r2
 801294a:	4798      	blx	r3
 801294c:	4603      	mov	r3, r0
 801294e:	2b00      	cmp	r3, #0
 8012950:	d00b      	beq.n	801296a <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012952:	7af9      	ldrb	r1, [r7, #11]
 8012954:	233a      	movs	r3, #58	; 0x3a
 8012956:	2202      	movs	r2, #2
 8012958:	68f8      	ldr	r0, [r7, #12]
 801295a:	f000 fb1c 	bl	8012f96 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801295e:	697b      	ldr	r3, [r7, #20]
 8012960:	2205      	movs	r2, #5
 8012962:	721a      	strb	r2, [r3, #8]

    return -1;
 8012964:	f04f 33ff 	mov.w	r3, #4294967295
 8012968:	e003      	b.n	8012972 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 801296a:	697b      	ldr	r3, [r7, #20]
 801296c:	2200      	movs	r2, #0
 801296e:	60da      	str	r2, [r3, #12]

  return 0;
 8012970:	2300      	movs	r3, #0
}
 8012972:	4618      	mov	r0, r3
 8012974:	3718      	adds	r7, #24
 8012976:	46bd      	mov	sp, r7
 8012978:	bd80      	pop	{r7, pc}
	...

0801297c <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b088      	sub	sp, #32
 8012980:	af00      	add	r7, sp, #0
 8012982:	60f8      	str	r0, [r7, #12]
 8012984:	460b      	mov	r3, r1
 8012986:	607a      	str	r2, [r7, #4]
 8012988:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	32b0      	adds	r2, #176	; 0xb0
 8012994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012998:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801299a:	69bb      	ldr	r3, [r7, #24]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d102      	bne.n	80129a6 <SCSI_Inquiry+0x2a>
  {
    return -1;
 80129a0:	f04f 33ff 	mov.w	r3, #4294967295
 80129a4:	e05f      	b.n	8012a66 <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80129a6:	69bb      	ldr	r3, [r7, #24]
 80129a8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d10a      	bne.n	80129c6 <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80129b0:	69bb      	ldr	r3, [r7, #24]
 80129b2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80129b6:	2320      	movs	r3, #32
 80129b8:	2205      	movs	r2, #5
 80129ba:	68f8      	ldr	r0, [r7, #12]
 80129bc:	f000 faeb 	bl	8012f96 <SCSI_SenseCode>
    return -1;
 80129c0:	f04f 33ff 	mov.w	r3, #4294967295
 80129c4:	e04f      	b.n	8012a66 <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	3301      	adds	r3, #1
 80129ca:	781b      	ldrb	r3, [r3, #0]
 80129cc:	f003 0301 	and.w	r3, r3, #1
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d020      	beq.n	8012a16 <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	3302      	adds	r3, #2
 80129d8:	781b      	ldrb	r3, [r3, #0]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d105      	bne.n	80129ea <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 80129de:	2206      	movs	r2, #6
 80129e0:	4923      	ldr	r1, [pc, #140]	; (8012a70 <SCSI_Inquiry+0xf4>)
 80129e2:	69b8      	ldr	r0, [r7, #24]
 80129e4:	f001 f844 	bl	8013a70 <SCSI_UpdateBotData>
 80129e8:	e03c      	b.n	8012a64 <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	3302      	adds	r3, #2
 80129ee:	781b      	ldrb	r3, [r3, #0]
 80129f0:	2b80      	cmp	r3, #128	; 0x80
 80129f2:	d105      	bne.n	8012a00 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 80129f4:	2208      	movs	r2, #8
 80129f6:	491f      	ldr	r1, [pc, #124]	; (8012a74 <SCSI_Inquiry+0xf8>)
 80129f8:	69b8      	ldr	r0, [r7, #24]
 80129fa:	f001 f839 	bl	8013a70 <SCSI_UpdateBotData>
 80129fe:	e031      	b.n	8012a64 <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8012a00:	69bb      	ldr	r3, [r7, #24]
 8012a02:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012a06:	2324      	movs	r3, #36	; 0x24
 8012a08:	2205      	movs	r2, #5
 8012a0a:	68f8      	ldr	r0, [r7, #12]
 8012a0c:	f000 fac3 	bl	8012f96 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8012a10:	f04f 33ff 	mov.w	r3, #4294967295
 8012a14:	e027      	b.n	8012a66 <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012a1c:	68fa      	ldr	r2, [r7, #12]
 8012a1e:	33b0      	adds	r3, #176	; 0xb0
 8012a20:	009b      	lsls	r3, r3, #2
 8012a22:	4413      	add	r3, r2
 8012a24:	685b      	ldr	r3, [r3, #4]
 8012a26:	69d9      	ldr	r1, [r3, #28]
 8012a28:	7afa      	ldrb	r2, [r7, #11]
 8012a2a:	4613      	mov	r3, r2
 8012a2c:	00db      	lsls	r3, r3, #3
 8012a2e:	4413      	add	r3, r2
 8012a30:	009b      	lsls	r3, r3, #2
 8012a32:	440b      	add	r3, r1
 8012a34:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8012a36:	697b      	ldr	r3, [r7, #20]
 8012a38:	3304      	adds	r3, #4
 8012a3a:	781b      	ldrb	r3, [r3, #0]
 8012a3c:	b29b      	uxth	r3, r3
 8012a3e:	3305      	adds	r3, #5
 8012a40:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	3304      	adds	r3, #4
 8012a46:	781b      	ldrb	r3, [r3, #0]
 8012a48:	b29b      	uxth	r3, r3
 8012a4a:	8bfa      	ldrh	r2, [r7, #30]
 8012a4c:	429a      	cmp	r2, r3
 8012a4e:	d303      	bcc.n	8012a58 <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	3304      	adds	r3, #4
 8012a54:	781b      	ldrb	r3, [r3, #0]
 8012a56:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8012a58:	8bfb      	ldrh	r3, [r7, #30]
 8012a5a:	461a      	mov	r2, r3
 8012a5c:	6979      	ldr	r1, [r7, #20]
 8012a5e:	69b8      	ldr	r0, [r7, #24]
 8012a60:	f001 f806 	bl	8013a70 <SCSI_UpdateBotData>
  }

  return 0;
 8012a64:	2300      	movs	r3, #0
}
 8012a66:	4618      	mov	r0, r3
 8012a68:	3720      	adds	r7, #32
 8012a6a:	46bd      	mov	sp, r7
 8012a6c:	bd80      	pop	{r7, pc}
 8012a6e:	bf00      	nop
 8012a70:	20000070 	.word	0x20000070
 8012a74:	20000078 	.word	0x20000078

08012a78 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012a78:	b580      	push	{r7, lr}
 8012a7a:	b086      	sub	sp, #24
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	60f8      	str	r0, [r7, #12]
 8012a80:	460b      	mov	r3, r1
 8012a82:	607a      	str	r2, [r7, #4]
 8012a84:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	32b0      	adds	r2, #176	; 0xb0
 8012a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a94:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8012a96:	697b      	ldr	r3, [r7, #20]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d102      	bne.n	8012aa2 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8012a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8012aa0:	e064      	b.n	8012b6c <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012aa8:	68fa      	ldr	r2, [r7, #12]
 8012aaa:	33b0      	adds	r3, #176	; 0xb0
 8012aac:	009b      	lsls	r3, r3, #2
 8012aae:	4413      	add	r3, r2
 8012ab0:	685b      	ldr	r3, [r3, #4]
 8012ab2:	685b      	ldr	r3, [r3, #4]
 8012ab4:	697a      	ldr	r2, [r7, #20]
 8012ab6:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8012aba:	697a      	ldr	r2, [r7, #20]
 8012abc:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8012ac0:	7af8      	ldrb	r0, [r7, #11]
 8012ac2:	4798      	blx	r3
 8012ac4:	4603      	mov	r3, r0
 8012ac6:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8012ac8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d104      	bne.n	8012ada <SCSI_ReadCapacity10+0x62>
 8012ad0:	697b      	ldr	r3, [r7, #20]
 8012ad2:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8012ad6:	2b02      	cmp	r3, #2
 8012ad8:	d108      	bne.n	8012aec <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012ada:	7af9      	ldrb	r1, [r7, #11]
 8012adc:	233a      	movs	r3, #58	; 0x3a
 8012ade:	2202      	movs	r2, #2
 8012ae0:	68f8      	ldr	r0, [r7, #12]
 8012ae2:	f000 fa58 	bl	8012f96 <SCSI_SenseCode>
    return -1;
 8012ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8012aea:	e03f      	b.n	8012b6c <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8012aec:	697b      	ldr	r3, [r7, #20]
 8012aee:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012af2:	3b01      	subs	r3, #1
 8012af4:	0e1b      	lsrs	r3, r3, #24
 8012af6:	b2da      	uxtb	r2, r3
 8012af8:	697b      	ldr	r3, [r7, #20]
 8012afa:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8012afc:	697b      	ldr	r3, [r7, #20]
 8012afe:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012b02:	3b01      	subs	r3, #1
 8012b04:	0c1b      	lsrs	r3, r3, #16
 8012b06:	b2da      	uxtb	r2, r3
 8012b08:	697b      	ldr	r3, [r7, #20]
 8012b0a:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8012b0c:	697b      	ldr	r3, [r7, #20]
 8012b0e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012b12:	3b01      	subs	r3, #1
 8012b14:	0a1b      	lsrs	r3, r3, #8
 8012b16:	b2da      	uxtb	r2, r3
 8012b18:	697b      	ldr	r3, [r7, #20]
 8012b1a:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8012b1c:	697b      	ldr	r3, [r7, #20]
 8012b1e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012b22:	b2db      	uxtb	r3, r3
 8012b24:	3b01      	subs	r3, #1
 8012b26:	b2da      	uxtb	r2, r3
 8012b28:	697b      	ldr	r3, [r7, #20]
 8012b2a:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8012b2c:	697b      	ldr	r3, [r7, #20]
 8012b2e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012b32:	161b      	asrs	r3, r3, #24
 8012b34:	b2da      	uxtb	r2, r3
 8012b36:	697b      	ldr	r3, [r7, #20]
 8012b38:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8012b3a:	697b      	ldr	r3, [r7, #20]
 8012b3c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012b40:	141b      	asrs	r3, r3, #16
 8012b42:	b2da      	uxtb	r2, r3
 8012b44:	697b      	ldr	r3, [r7, #20]
 8012b46:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8012b48:	697b      	ldr	r3, [r7, #20]
 8012b4a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012b4e:	0a1b      	lsrs	r3, r3, #8
 8012b50:	b29b      	uxth	r3, r3
 8012b52:	b2da      	uxtb	r2, r3
 8012b54:	697b      	ldr	r3, [r7, #20]
 8012b56:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8012b58:	697b      	ldr	r3, [r7, #20]
 8012b5a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012b5e:	b2da      	uxtb	r2, r3
 8012b60:	697b      	ldr	r3, [r7, #20]
 8012b62:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8012b64:	697b      	ldr	r3, [r7, #20]
 8012b66:	2208      	movs	r2, #8
 8012b68:	60da      	str	r2, [r3, #12]

  return 0;
 8012b6a:	2300      	movs	r3, #0

}
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	3718      	adds	r7, #24
 8012b70:	46bd      	mov	sp, r7
 8012b72:	bd80      	pop	{r7, pc}

08012b74 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012b74:	b580      	push	{r7, lr}
 8012b76:	b088      	sub	sp, #32
 8012b78:	af00      	add	r7, sp, #0
 8012b7a:	60f8      	str	r0, [r7, #12]
 8012b7c:	460b      	mov	r3, r1
 8012b7e:	607a      	str	r2, [r7, #4]
 8012b80:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	32b0      	adds	r2, #176	; 0xb0
 8012b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b90:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8012b92:	69bb      	ldr	r3, [r7, #24]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d102      	bne.n	8012b9e <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8012b98:	f04f 33ff 	mov.w	r3, #4294967295
 8012b9c:	e099      	b.n	8012cd2 <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012ba4:	68fa      	ldr	r2, [r7, #12]
 8012ba6:	33b0      	adds	r3, #176	; 0xb0
 8012ba8:	009b      	lsls	r3, r3, #2
 8012baa:	4413      	add	r3, r2
 8012bac:	685b      	ldr	r3, [r3, #4]
 8012bae:	685b      	ldr	r3, [r3, #4]
 8012bb0:	69ba      	ldr	r2, [r7, #24]
 8012bb2:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8012bb6:	69ba      	ldr	r2, [r7, #24]
 8012bb8:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8012bbc:	7af8      	ldrb	r0, [r7, #11]
 8012bbe:	4798      	blx	r3
 8012bc0:	4603      	mov	r3, r0
 8012bc2:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8012bc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d104      	bne.n	8012bd6 <SCSI_ReadCapacity16+0x62>
 8012bcc:	69bb      	ldr	r3, [r7, #24]
 8012bce:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8012bd2:	2b02      	cmp	r3, #2
 8012bd4:	d108      	bne.n	8012be8 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012bd6:	7af9      	ldrb	r1, [r7, #11]
 8012bd8:	233a      	movs	r3, #58	; 0x3a
 8012bda:	2202      	movs	r2, #2
 8012bdc:	68f8      	ldr	r0, [r7, #12]
 8012bde:	f000 f9da 	bl	8012f96 <SCSI_SenseCode>
    return -1;
 8012be2:	f04f 33ff 	mov.w	r3, #4294967295
 8012be6:	e074      	b.n	8012cd2 <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	330a      	adds	r3, #10
 8012bec:	781b      	ldrb	r3, [r3, #0]
 8012bee:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	330b      	adds	r3, #11
 8012bf4:	781b      	ldrb	r3, [r3, #0]
 8012bf6:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012bf8:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	330c      	adds	r3, #12
 8012bfe:	781b      	ldrb	r3, [r3, #0]
 8012c00:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8012c02:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8012c04:	687a      	ldr	r2, [r7, #4]
 8012c06:	320d      	adds	r2, #13
 8012c08:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8012c0a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012c0c:	69bb      	ldr	r3, [r7, #24]
 8012c0e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8012c10:	2300      	movs	r3, #0
 8012c12:	77fb      	strb	r3, [r7, #31]
 8012c14:	e007      	b.n	8012c26 <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 8012c16:	7ffb      	ldrb	r3, [r7, #31]
 8012c18:	69ba      	ldr	r2, [r7, #24]
 8012c1a:	4413      	add	r3, r2
 8012c1c:	2200      	movs	r2, #0
 8012c1e:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8012c20:	7ffb      	ldrb	r3, [r7, #31]
 8012c22:	3301      	adds	r3, #1
 8012c24:	77fb      	strb	r3, [r7, #31]
 8012c26:	7ffa      	ldrb	r2, [r7, #31]
 8012c28:	69bb      	ldr	r3, [r7, #24]
 8012c2a:	68db      	ldr	r3, [r3, #12]
 8012c2c:	429a      	cmp	r2, r3
 8012c2e:	d3f2      	bcc.n	8012c16 <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8012c30:	69bb      	ldr	r3, [r7, #24]
 8012c32:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012c36:	3b01      	subs	r3, #1
 8012c38:	0e1b      	lsrs	r3, r3, #24
 8012c3a:	b2da      	uxtb	r2, r3
 8012c3c:	69bb      	ldr	r3, [r7, #24]
 8012c3e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8012c40:	69bb      	ldr	r3, [r7, #24]
 8012c42:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012c46:	3b01      	subs	r3, #1
 8012c48:	0c1b      	lsrs	r3, r3, #16
 8012c4a:	b2da      	uxtb	r2, r3
 8012c4c:	69bb      	ldr	r3, [r7, #24]
 8012c4e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8012c50:	69bb      	ldr	r3, [r7, #24]
 8012c52:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012c56:	3b01      	subs	r3, #1
 8012c58:	0a1b      	lsrs	r3, r3, #8
 8012c5a:	b2da      	uxtb	r2, r3
 8012c5c:	69bb      	ldr	r3, [r7, #24]
 8012c5e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8012c60:	69bb      	ldr	r3, [r7, #24]
 8012c62:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012c66:	b2db      	uxtb	r3, r3
 8012c68:	3b01      	subs	r3, #1
 8012c6a:	b2da      	uxtb	r2, r3
 8012c6c:	69bb      	ldr	r3, [r7, #24]
 8012c6e:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8012c70:	69bb      	ldr	r3, [r7, #24]
 8012c72:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012c76:	161b      	asrs	r3, r3, #24
 8012c78:	b2da      	uxtb	r2, r3
 8012c7a:	69bb      	ldr	r3, [r7, #24]
 8012c7c:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8012c7e:	69bb      	ldr	r3, [r7, #24]
 8012c80:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012c84:	141b      	asrs	r3, r3, #16
 8012c86:	b2da      	uxtb	r2, r3
 8012c88:	69bb      	ldr	r3, [r7, #24]
 8012c8a:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8012c8c:	69bb      	ldr	r3, [r7, #24]
 8012c8e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012c92:	0a1b      	lsrs	r3, r3, #8
 8012c94:	b29b      	uxth	r3, r3
 8012c96:	b2da      	uxtb	r2, r3
 8012c98:	69bb      	ldr	r3, [r7, #24]
 8012c9a:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8012c9c:	69bb      	ldr	r3, [r7, #24]
 8012c9e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012ca2:	b2da      	uxtb	r2, r3
 8012ca4:	69bb      	ldr	r3, [r7, #24]
 8012ca6:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	330a      	adds	r3, #10
 8012cac:	781b      	ldrb	r3, [r3, #0]
 8012cae:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	330b      	adds	r3, #11
 8012cb4:	781b      	ldrb	r3, [r3, #0]
 8012cb6:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012cb8:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	330c      	adds	r3, #12
 8012cbe:	781b      	ldrb	r3, [r3, #0]
 8012cc0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8012cc2:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8012cc4:	687a      	ldr	r2, [r7, #4]
 8012cc6:	320d      	adds	r2, #13
 8012cc8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8012cca:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012ccc:	69bb      	ldr	r3, [r7, #24]
 8012cce:	60da      	str	r2, [r3, #12]

  return 0;
 8012cd0:	2300      	movs	r3, #0
}
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	3720      	adds	r7, #32
 8012cd6:	46bd      	mov	sp, r7
 8012cd8:	bd80      	pop	{r7, pc}

08012cda <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012cda:	b580      	push	{r7, lr}
 8012cdc:	b088      	sub	sp, #32
 8012cde:	af00      	add	r7, sp, #0
 8012ce0:	60f8      	str	r0, [r7, #12]
 8012ce2:	460b      	mov	r3, r1
 8012ce4:	607a      	str	r2, [r7, #4]
 8012ce6:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	32b0      	adds	r2, #176	; 0xb0
 8012cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012cf6:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8012cf8:	69bb      	ldr	r3, [r7, #24]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d102      	bne.n	8012d04 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8012cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8012d02:	e061      	b.n	8012dc8 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012d0a:	68fa      	ldr	r2, [r7, #12]
 8012d0c:	33b0      	adds	r3, #176	; 0xb0
 8012d0e:	009b      	lsls	r3, r3, #2
 8012d10:	4413      	add	r3, r2
 8012d12:	685b      	ldr	r3, [r3, #4]
 8012d14:	685b      	ldr	r3, [r3, #4]
 8012d16:	f107 0214 	add.w	r2, r7, #20
 8012d1a:	f107 0110 	add.w	r1, r7, #16
 8012d1e:	7af8      	ldrb	r0, [r7, #11]
 8012d20:	4798      	blx	r3
 8012d22:	4603      	mov	r3, r0
 8012d24:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8012d26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d104      	bne.n	8012d38 <SCSI_ReadFormatCapacity+0x5e>
 8012d2e:	69bb      	ldr	r3, [r7, #24]
 8012d30:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8012d34:	2b02      	cmp	r3, #2
 8012d36:	d108      	bne.n	8012d4a <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012d38:	7af9      	ldrb	r1, [r7, #11]
 8012d3a:	233a      	movs	r3, #58	; 0x3a
 8012d3c:	2202      	movs	r2, #2
 8012d3e:	68f8      	ldr	r0, [r7, #12]
 8012d40:	f000 f929 	bl	8012f96 <SCSI_SenseCode>
    return -1;
 8012d44:	f04f 33ff 	mov.w	r3, #4294967295
 8012d48:	e03e      	b.n	8012dc8 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	83fb      	strh	r3, [r7, #30]
 8012d4e:	e007      	b.n	8012d60 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8012d50:	8bfb      	ldrh	r3, [r7, #30]
 8012d52:	69ba      	ldr	r2, [r7, #24]
 8012d54:	4413      	add	r3, r2
 8012d56:	2200      	movs	r2, #0
 8012d58:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8012d5a:	8bfb      	ldrh	r3, [r7, #30]
 8012d5c:	3301      	adds	r3, #1
 8012d5e:	83fb      	strh	r3, [r7, #30]
 8012d60:	8bfb      	ldrh	r3, [r7, #30]
 8012d62:	2b0b      	cmp	r3, #11
 8012d64:	d9f4      	bls.n	8012d50 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8012d66:	69bb      	ldr	r3, [r7, #24]
 8012d68:	2208      	movs	r2, #8
 8012d6a:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8012d6c:	693b      	ldr	r3, [r7, #16]
 8012d6e:	3b01      	subs	r3, #1
 8012d70:	0e1b      	lsrs	r3, r3, #24
 8012d72:	b2da      	uxtb	r2, r3
 8012d74:	69bb      	ldr	r3, [r7, #24]
 8012d76:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8012d78:	693b      	ldr	r3, [r7, #16]
 8012d7a:	3b01      	subs	r3, #1
 8012d7c:	0c1b      	lsrs	r3, r3, #16
 8012d7e:	b2da      	uxtb	r2, r3
 8012d80:	69bb      	ldr	r3, [r7, #24]
 8012d82:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8012d84:	693b      	ldr	r3, [r7, #16]
 8012d86:	3b01      	subs	r3, #1
 8012d88:	0a1b      	lsrs	r3, r3, #8
 8012d8a:	b2da      	uxtb	r2, r3
 8012d8c:	69bb      	ldr	r3, [r7, #24]
 8012d8e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8012d90:	693b      	ldr	r3, [r7, #16]
 8012d92:	b2db      	uxtb	r3, r3
 8012d94:	3b01      	subs	r3, #1
 8012d96:	b2da      	uxtb	r2, r3
 8012d98:	69bb      	ldr	r3, [r7, #24]
 8012d9a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8012d9c:	69bb      	ldr	r3, [r7, #24]
 8012d9e:	2202      	movs	r2, #2
 8012da0:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8012da2:	8abb      	ldrh	r3, [r7, #20]
 8012da4:	141b      	asrs	r3, r3, #16
 8012da6:	b2da      	uxtb	r2, r3
 8012da8:	69bb      	ldr	r3, [r7, #24]
 8012daa:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8012dac:	8abb      	ldrh	r3, [r7, #20]
 8012dae:	0a1b      	lsrs	r3, r3, #8
 8012db0:	b29b      	uxth	r3, r3
 8012db2:	b2da      	uxtb	r2, r3
 8012db4:	69bb      	ldr	r3, [r7, #24]
 8012db6:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8012db8:	8abb      	ldrh	r3, [r7, #20]
 8012dba:	b2da      	uxtb	r2, r3
 8012dbc:	69bb      	ldr	r3, [r7, #24]
 8012dbe:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8012dc0:	69bb      	ldr	r3, [r7, #24]
 8012dc2:	220c      	movs	r2, #12
 8012dc4:	60da      	str	r2, [r3, #12]

  return 0;
 8012dc6:	2300      	movs	r3, #0
}
 8012dc8:	4618      	mov	r0, r3
 8012dca:	3720      	adds	r7, #32
 8012dcc:	46bd      	mov	sp, r7
 8012dce:	bd80      	pop	{r7, pc}

08012dd0 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	b086      	sub	sp, #24
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	60f8      	str	r0, [r7, #12]
 8012dd8:	460b      	mov	r3, r1
 8012dda:	607a      	str	r2, [r7, #4]
 8012ddc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	32b0      	adds	r2, #176	; 0xb0
 8012de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012dec:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8012dee:	2317      	movs	r3, #23
 8012df0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8012df2:	693b      	ldr	r3, [r7, #16]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d102      	bne.n	8012dfe <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8012df8:	f04f 33ff 	mov.w	r3, #4294967295
 8012dfc:	e011      	b.n	8012e22 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	3304      	adds	r3, #4
 8012e02:	781b      	ldrb	r3, [r3, #0]
 8012e04:	b29b      	uxth	r3, r3
 8012e06:	8afa      	ldrh	r2, [r7, #22]
 8012e08:	429a      	cmp	r2, r3
 8012e0a:	d303      	bcc.n	8012e14 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	3304      	adds	r3, #4
 8012e10:	781b      	ldrb	r3, [r3, #0]
 8012e12:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8012e14:	8afb      	ldrh	r3, [r7, #22]
 8012e16:	461a      	mov	r2, r3
 8012e18:	4904      	ldr	r1, [pc, #16]	; (8012e2c <SCSI_ModeSense6+0x5c>)
 8012e1a:	6938      	ldr	r0, [r7, #16]
 8012e1c:	f000 fe28 	bl	8013a70 <SCSI_UpdateBotData>

  return 0;
 8012e20:	2300      	movs	r3, #0
}
 8012e22:	4618      	mov	r0, r3
 8012e24:	3718      	adds	r7, #24
 8012e26:	46bd      	mov	sp, r7
 8012e28:	bd80      	pop	{r7, pc}
 8012e2a:	bf00      	nop
 8012e2c:	20000080 	.word	0x20000080

08012e30 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012e30:	b580      	push	{r7, lr}
 8012e32:	b086      	sub	sp, #24
 8012e34:	af00      	add	r7, sp, #0
 8012e36:	60f8      	str	r0, [r7, #12]
 8012e38:	460b      	mov	r3, r1
 8012e3a:	607a      	str	r2, [r7, #4]
 8012e3c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	32b0      	adds	r2, #176	; 0xb0
 8012e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e4c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8012e4e:	231b      	movs	r3, #27
 8012e50:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8012e52:	693b      	ldr	r3, [r7, #16]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d102      	bne.n	8012e5e <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8012e58:	f04f 33ff 	mov.w	r3, #4294967295
 8012e5c:	e011      	b.n	8012e82 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	3308      	adds	r3, #8
 8012e62:	781b      	ldrb	r3, [r3, #0]
 8012e64:	b29b      	uxth	r3, r3
 8012e66:	8afa      	ldrh	r2, [r7, #22]
 8012e68:	429a      	cmp	r2, r3
 8012e6a:	d303      	bcc.n	8012e74 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	3308      	adds	r3, #8
 8012e70:	781b      	ldrb	r3, [r3, #0]
 8012e72:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8012e74:	8afb      	ldrh	r3, [r7, #22]
 8012e76:	461a      	mov	r2, r3
 8012e78:	4904      	ldr	r1, [pc, #16]	; (8012e8c <SCSI_ModeSense10+0x5c>)
 8012e7a:	6938      	ldr	r0, [r7, #16]
 8012e7c:	f000 fdf8 	bl	8013a70 <SCSI_UpdateBotData>

  return 0;
 8012e80:	2300      	movs	r3, #0
}
 8012e82:	4618      	mov	r0, r3
 8012e84:	3718      	adds	r7, #24
 8012e86:	46bd      	mov	sp, r7
 8012e88:	bd80      	pop	{r7, pc}
 8012e8a:	bf00      	nop
 8012e8c:	20000098 	.word	0x20000098

08012e90 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012e90:	b580      	push	{r7, lr}
 8012e92:	b086      	sub	sp, #24
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	60f8      	str	r0, [r7, #12]
 8012e98:	460b      	mov	r3, r1
 8012e9a:	607a      	str	r2, [r7, #4]
 8012e9c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	32b0      	adds	r2, #176	; 0xb0
 8012ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012eac:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8012eae:	693b      	ldr	r3, [r7, #16]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d102      	bne.n	8012eba <SCSI_RequestSense+0x2a>
  {
    return -1;
 8012eb4:	f04f 33ff 	mov.w	r3, #4294967295
 8012eb8:	e069      	b.n	8012f8e <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8012eba:	693b      	ldr	r3, [r7, #16]
 8012ebc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d10a      	bne.n	8012eda <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012ec4:	693b      	ldr	r3, [r7, #16]
 8012ec6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012eca:	2320      	movs	r3, #32
 8012ecc:	2205      	movs	r2, #5
 8012ece:	68f8      	ldr	r0, [r7, #12]
 8012ed0:	f000 f861 	bl	8012f96 <SCSI_SenseCode>
    return -1;
 8012ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8012ed8:	e059      	b.n	8012f8e <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8012eda:	2300      	movs	r3, #0
 8012edc:	75fb      	strb	r3, [r7, #23]
 8012ede:	e007      	b.n	8012ef0 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8012ee0:	7dfb      	ldrb	r3, [r7, #23]
 8012ee2:	693a      	ldr	r2, [r7, #16]
 8012ee4:	4413      	add	r3, r2
 8012ee6:	2200      	movs	r2, #0
 8012ee8:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8012eea:	7dfb      	ldrb	r3, [r7, #23]
 8012eec:	3301      	adds	r3, #1
 8012eee:	75fb      	strb	r3, [r7, #23]
 8012ef0:	7dfb      	ldrb	r3, [r7, #23]
 8012ef2:	2b11      	cmp	r3, #17
 8012ef4:	d9f4      	bls.n	8012ee0 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 8012ef6:	693b      	ldr	r3, [r7, #16]
 8012ef8:	2270      	movs	r2, #112	; 0x70
 8012efa:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8012efc:	693b      	ldr	r3, [r7, #16]
 8012efe:	220c      	movs	r2, #12
 8012f00:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8012f02:	693b      	ldr	r3, [r7, #16]
 8012f04:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8012f08:	693b      	ldr	r3, [r7, #16]
 8012f0a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8012f0e:	429a      	cmp	r2, r3
 8012f10:	d02e      	beq.n	8012f70 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8012f12:	693b      	ldr	r3, [r7, #16]
 8012f14:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8012f18:	461a      	mov	r2, r3
 8012f1a:	693b      	ldr	r3, [r7, #16]
 8012f1c:	3248      	adds	r2, #72	; 0x48
 8012f1e:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8012f22:	693b      	ldr	r3, [r7, #16]
 8012f24:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8012f26:	693b      	ldr	r3, [r7, #16]
 8012f28:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8012f2c:	693a      	ldr	r2, [r7, #16]
 8012f2e:	3348      	adds	r3, #72	; 0x48
 8012f30:	00db      	lsls	r3, r3, #3
 8012f32:	4413      	add	r3, r2
 8012f34:	791a      	ldrb	r2, [r3, #4]
 8012f36:	693b      	ldr	r3, [r7, #16]
 8012f38:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8012f3a:	693b      	ldr	r3, [r7, #16]
 8012f3c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8012f40:	693a      	ldr	r2, [r7, #16]
 8012f42:	3348      	adds	r3, #72	; 0x48
 8012f44:	00db      	lsls	r3, r3, #3
 8012f46:	4413      	add	r3, r2
 8012f48:	795a      	ldrb	r2, [r3, #5]
 8012f4a:	693b      	ldr	r3, [r7, #16]
 8012f4c:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8012f4e:	693b      	ldr	r3, [r7, #16]
 8012f50:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8012f54:	3301      	adds	r3, #1
 8012f56:	b2da      	uxtb	r2, r3
 8012f58:	693b      	ldr	r3, [r7, #16]
 8012f5a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8012f5e:	693b      	ldr	r3, [r7, #16]
 8012f60:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8012f64:	2b04      	cmp	r3, #4
 8012f66:	d103      	bne.n	8012f70 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 8012f68:	693b      	ldr	r3, [r7, #16]
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8012f70:	693b      	ldr	r3, [r7, #16]
 8012f72:	2212      	movs	r2, #18
 8012f74:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	3304      	adds	r3, #4
 8012f7a:	781b      	ldrb	r3, [r3, #0]
 8012f7c:	2b12      	cmp	r3, #18
 8012f7e:	d805      	bhi.n	8012f8c <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	3304      	adds	r3, #4
 8012f84:	781b      	ldrb	r3, [r3, #0]
 8012f86:	461a      	mov	r2, r3
 8012f88:	693b      	ldr	r3, [r7, #16]
 8012f8a:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8012f8c:	2300      	movs	r3, #0
}
 8012f8e:	4618      	mov	r0, r3
 8012f90:	3718      	adds	r7, #24
 8012f92:	46bd      	mov	sp, r7
 8012f94:	bd80      	pop	{r7, pc}

08012f96 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8012f96:	b480      	push	{r7}
 8012f98:	b085      	sub	sp, #20
 8012f9a:	af00      	add	r7, sp, #0
 8012f9c:	6078      	str	r0, [r7, #4]
 8012f9e:	4608      	mov	r0, r1
 8012fa0:	4611      	mov	r1, r2
 8012fa2:	461a      	mov	r2, r3
 8012fa4:	4603      	mov	r3, r0
 8012fa6:	70fb      	strb	r3, [r7, #3]
 8012fa8:	460b      	mov	r3, r1
 8012faa:	70bb      	strb	r3, [r7, #2]
 8012fac:	4613      	mov	r3, r2
 8012fae:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	32b0      	adds	r2, #176	; 0xb0
 8012fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012fbe:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d02c      	beq.n	8013020 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8012fcc:	461a      	mov	r2, r3
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	3248      	adds	r2, #72	; 0x48
 8012fd2:	78b9      	ldrb	r1, [r7, #2]
 8012fd4:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8012fd8:	68fb      	ldr	r3, [r7, #12]
 8012fda:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8012fde:	68fa      	ldr	r2, [r7, #12]
 8012fe0:	3348      	adds	r3, #72	; 0x48
 8012fe2:	00db      	lsls	r3, r3, #3
 8012fe4:	4413      	add	r3, r2
 8012fe6:	787a      	ldrb	r2, [r7, #1]
 8012fe8:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8012ff0:	68fa      	ldr	r2, [r7, #12]
 8012ff2:	3348      	adds	r3, #72	; 0x48
 8012ff4:	00db      	lsls	r3, r3, #3
 8012ff6:	4413      	add	r3, r2
 8012ff8:	2200      	movs	r2, #0
 8012ffa:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8013002:	3301      	adds	r3, #1
 8013004:	b2da      	uxtb	r2, r3
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 801300c:	68fb      	ldr	r3, [r7, #12]
 801300e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8013012:	2b04      	cmp	r3, #4
 8013014:	d105      	bne.n	8013022 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	2200      	movs	r2, #0
 801301a:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 801301e:	e000      	b.n	8013022 <SCSI_SenseCode+0x8c>
    return;
 8013020:	bf00      	nop
  }
}
 8013022:	3714      	adds	r7, #20
 8013024:	46bd      	mov	sp, r7
 8013026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801302a:	4770      	bx	lr

0801302c <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801302c:	b580      	push	{r7, lr}
 801302e:	b086      	sub	sp, #24
 8013030:	af00      	add	r7, sp, #0
 8013032:	60f8      	str	r0, [r7, #12]
 8013034:	460b      	mov	r3, r1
 8013036:	607a      	str	r2, [r7, #4]
 8013038:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	32b0      	adds	r2, #176	; 0xb0
 8013044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013048:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801304a:	697b      	ldr	r3, [r7, #20]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d102      	bne.n	8013056 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8013050:	f04f 33ff 	mov.w	r3, #4294967295
 8013054:	e03b      	b.n	80130ce <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8013056:	697b      	ldr	r3, [r7, #20]
 8013058:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801305c:	2b01      	cmp	r3, #1
 801305e:	d10f      	bne.n	8013080 <SCSI_StartStopUnit+0x54>
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	3304      	adds	r3, #4
 8013064:	781b      	ldrb	r3, [r3, #0]
 8013066:	f003 0303 	and.w	r3, r3, #3
 801306a:	2b02      	cmp	r3, #2
 801306c:	d108      	bne.n	8013080 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 801306e:	7af9      	ldrb	r1, [r7, #11]
 8013070:	2324      	movs	r3, #36	; 0x24
 8013072:	2205      	movs	r2, #5
 8013074:	68f8      	ldr	r0, [r7, #12]
 8013076:	f7ff ff8e 	bl	8012f96 <SCSI_SenseCode>

    return -1;
 801307a:	f04f 33ff 	mov.w	r3, #4294967295
 801307e:	e026      	b.n	80130ce <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	3304      	adds	r3, #4
 8013084:	781b      	ldrb	r3, [r3, #0]
 8013086:	f003 0303 	and.w	r3, r3, #3
 801308a:	2b01      	cmp	r3, #1
 801308c:	d104      	bne.n	8013098 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801308e:	697b      	ldr	r3, [r7, #20]
 8013090:	2200      	movs	r2, #0
 8013092:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8013096:	e016      	b.n	80130c6 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	3304      	adds	r3, #4
 801309c:	781b      	ldrb	r3, [r3, #0]
 801309e:	f003 0303 	and.w	r3, r3, #3
 80130a2:	2b02      	cmp	r3, #2
 80130a4:	d104      	bne.n	80130b0 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80130a6:	697b      	ldr	r3, [r7, #20]
 80130a8:	2202      	movs	r2, #2
 80130aa:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80130ae:	e00a      	b.n	80130c6 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	3304      	adds	r3, #4
 80130b4:	781b      	ldrb	r3, [r3, #0]
 80130b6:	f003 0303 	and.w	r3, r3, #3
 80130ba:	2b03      	cmp	r3, #3
 80130bc:	d103      	bne.n	80130c6 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80130be:	697b      	ldr	r3, [r7, #20]
 80130c0:	2200      	movs	r2, #0
 80130c2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80130c6:	697b      	ldr	r3, [r7, #20]
 80130c8:	2200      	movs	r2, #0
 80130ca:	60da      	str	r2, [r3, #12]

  return 0;
 80130cc:	2300      	movs	r3, #0
}
 80130ce:	4618      	mov	r0, r3
 80130d0:	3718      	adds	r7, #24
 80130d2:	46bd      	mov	sp, r7
 80130d4:	bd80      	pop	{r7, pc}

080130d6 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80130d6:	b480      	push	{r7}
 80130d8:	b087      	sub	sp, #28
 80130da:	af00      	add	r7, sp, #0
 80130dc:	60f8      	str	r0, [r7, #12]
 80130de:	460b      	mov	r3, r1
 80130e0:	607a      	str	r2, [r7, #4]
 80130e2:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	32b0      	adds	r2, #176	; 0xb0
 80130ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80130f2:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80130f4:	697b      	ldr	r3, [r7, #20]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d102      	bne.n	8013100 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 80130fa:	f04f 33ff 	mov.w	r3, #4294967295
 80130fe:	e011      	b.n	8013124 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	3304      	adds	r3, #4
 8013104:	781b      	ldrb	r3, [r3, #0]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d104      	bne.n	8013114 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801310a:	697b      	ldr	r3, [r7, #20]
 801310c:	2200      	movs	r2, #0
 801310e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8013112:	e003      	b.n	801311c <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8013114:	697b      	ldr	r3, [r7, #20]
 8013116:	2201      	movs	r2, #1
 8013118:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 801311c:	697b      	ldr	r3, [r7, #20]
 801311e:	2200      	movs	r2, #0
 8013120:	60da      	str	r2, [r3, #12]

  return 0;
 8013122:	2300      	movs	r3, #0
}
 8013124:	4618      	mov	r0, r3
 8013126:	371c      	adds	r7, #28
 8013128:	46bd      	mov	sp, r7
 801312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801312e:	4770      	bx	lr

08013130 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013130:	b580      	push	{r7, lr}
 8013132:	b086      	sub	sp, #24
 8013134:	af00      	add	r7, sp, #0
 8013136:	60f8      	str	r0, [r7, #12]
 8013138:	460b      	mov	r3, r1
 801313a:	607a      	str	r2, [r7, #4]
 801313c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	32b0      	adds	r2, #176	; 0xb0
 8013148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801314c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801314e:	697b      	ldr	r3, [r7, #20]
 8013150:	2b00      	cmp	r3, #0
 8013152:	d102      	bne.n	801315a <SCSI_Read10+0x2a>
  {
    return -1;
 8013154:	f04f 33ff 	mov.w	r3, #4294967295
 8013158:	e090      	b.n	801327c <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801315a:	697b      	ldr	r3, [r7, #20]
 801315c:	7a1b      	ldrb	r3, [r3, #8]
 801315e:	2b00      	cmp	r3, #0
 8013160:	f040 8082 	bne.w	8013268 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8013164:	697b      	ldr	r3, [r7, #20]
 8013166:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801316a:	b25b      	sxtb	r3, r3
 801316c:	2b00      	cmp	r3, #0
 801316e:	db0a      	blt.n	8013186 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013170:	697b      	ldr	r3, [r7, #20]
 8013172:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8013176:	2320      	movs	r3, #32
 8013178:	2205      	movs	r2, #5
 801317a:	68f8      	ldr	r0, [r7, #12]
 801317c:	f7ff ff0b 	bl	8012f96 <SCSI_SenseCode>
      return -1;
 8013180:	f04f 33ff 	mov.w	r3, #4294967295
 8013184:	e07a      	b.n	801327c <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8013186:	697b      	ldr	r3, [r7, #20]
 8013188:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801318c:	2b02      	cmp	r3, #2
 801318e:	d108      	bne.n	80131a2 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013190:	7af9      	ldrb	r1, [r7, #11]
 8013192:	233a      	movs	r3, #58	; 0x3a
 8013194:	2202      	movs	r2, #2
 8013196:	68f8      	ldr	r0, [r7, #12]
 8013198:	f7ff fefd 	bl	8012f96 <SCSI_SenseCode>

      return -1;
 801319c:	f04f 33ff 	mov.w	r3, #4294967295
 80131a0:	e06c      	b.n	801327c <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80131a8:	68fa      	ldr	r2, [r7, #12]
 80131aa:	33b0      	adds	r3, #176	; 0xb0
 80131ac:	009b      	lsls	r3, r3, #2
 80131ae:	4413      	add	r3, r2
 80131b0:	685b      	ldr	r3, [r3, #4]
 80131b2:	689b      	ldr	r3, [r3, #8]
 80131b4:	7afa      	ldrb	r2, [r7, #11]
 80131b6:	4610      	mov	r0, r2
 80131b8:	4798      	blx	r3
 80131ba:	4603      	mov	r3, r0
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d008      	beq.n	80131d2 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80131c0:	7af9      	ldrb	r1, [r7, #11]
 80131c2:	233a      	movs	r3, #58	; 0x3a
 80131c4:	2202      	movs	r2, #2
 80131c6:	68f8      	ldr	r0, [r7, #12]
 80131c8:	f7ff fee5 	bl	8012f96 <SCSI_SenseCode>
      return -1;
 80131cc:	f04f 33ff 	mov.w	r3, #4294967295
 80131d0:	e054      	b.n	801327c <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	3302      	adds	r3, #2
 80131d6:	781b      	ldrb	r3, [r3, #0]
 80131d8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	3303      	adds	r3, #3
 80131de:	781b      	ldrb	r3, [r3, #0]
 80131e0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80131e2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	3304      	adds	r3, #4
 80131e8:	781b      	ldrb	r3, [r3, #0]
 80131ea:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80131ec:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80131ee:	687a      	ldr	r2, [r7, #4]
 80131f0:	3205      	adds	r2, #5
 80131f2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80131f4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80131f6:	697b      	ldr	r3, [r7, #20]
 80131f8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	3307      	adds	r3, #7
 8013200:	781b      	ldrb	r3, [r3, #0]
 8013202:	021b      	lsls	r3, r3, #8
 8013204:	687a      	ldr	r2, [r7, #4]
 8013206:	3208      	adds	r2, #8
 8013208:	7812      	ldrb	r2, [r2, #0]
 801320a:	431a      	orrs	r2, r3
 801320c:	697b      	ldr	r3, [r7, #20]
 801320e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8013212:	697b      	ldr	r3, [r7, #20]
 8013214:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8013218:	697b      	ldr	r3, [r7, #20]
 801321a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801321e:	7af9      	ldrb	r1, [r7, #11]
 8013220:	68f8      	ldr	r0, [r7, #12]
 8013222:	f000 fadc 	bl	80137de <SCSI_CheckAddressRange>
 8013226:	4603      	mov	r3, r0
 8013228:	2b00      	cmp	r3, #0
 801322a:	da02      	bge.n	8013232 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801322c:	f04f 33ff 	mov.w	r3, #4294967295
 8013230:	e024      	b.n	801327c <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8013232:	697b      	ldr	r3, [r7, #20]
 8013234:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8013238:	697b      	ldr	r3, [r7, #20]
 801323a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801323e:	6979      	ldr	r1, [r7, #20]
 8013240:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8013244:	fb01 f303 	mul.w	r3, r1, r3
 8013248:	429a      	cmp	r2, r3
 801324a:	d00a      	beq.n	8013262 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801324c:	697b      	ldr	r3, [r7, #20]
 801324e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8013252:	2320      	movs	r3, #32
 8013254:	2205      	movs	r2, #5
 8013256:	68f8      	ldr	r0, [r7, #12]
 8013258:	f7ff fe9d 	bl	8012f96 <SCSI_SenseCode>
      return -1;
 801325c:	f04f 33ff 	mov.w	r3, #4294967295
 8013260:	e00c      	b.n	801327c <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8013262:	697b      	ldr	r3, [r7, #20]
 8013264:	2202      	movs	r2, #2
 8013266:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8013268:	697b      	ldr	r3, [r7, #20]
 801326a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801326e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8013270:	7afb      	ldrb	r3, [r7, #11]
 8013272:	4619      	mov	r1, r3
 8013274:	68f8      	ldr	r0, [r7, #12]
 8013276:	f000 fadf 	bl	8013838 <SCSI_ProcessRead>
 801327a:	4603      	mov	r3, r0
}
 801327c:	4618      	mov	r0, r3
 801327e:	3718      	adds	r7, #24
 8013280:	46bd      	mov	sp, r7
 8013282:	bd80      	pop	{r7, pc}

08013284 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013284:	b580      	push	{r7, lr}
 8013286:	b086      	sub	sp, #24
 8013288:	af00      	add	r7, sp, #0
 801328a:	60f8      	str	r0, [r7, #12]
 801328c:	460b      	mov	r3, r1
 801328e:	607a      	str	r2, [r7, #4]
 8013290:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	32b0      	adds	r2, #176	; 0xb0
 801329c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80132a0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80132a2:	697b      	ldr	r3, [r7, #20]
 80132a4:	2b00      	cmp	r3, #0
 80132a6:	d102      	bne.n	80132ae <SCSI_Read12+0x2a>
  {
    return -1;
 80132a8:	f04f 33ff 	mov.w	r3, #4294967295
 80132ac:	e09a      	b.n	80133e4 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80132ae:	697b      	ldr	r3, [r7, #20]
 80132b0:	7a1b      	ldrb	r3, [r3, #8]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	f040 808c 	bne.w	80133d0 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80132b8:	697b      	ldr	r3, [r7, #20]
 80132ba:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80132be:	b25b      	sxtb	r3, r3
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	db0a      	blt.n	80132da <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80132c4:	697b      	ldr	r3, [r7, #20]
 80132c6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80132ca:	2320      	movs	r3, #32
 80132cc:	2205      	movs	r2, #5
 80132ce:	68f8      	ldr	r0, [r7, #12]
 80132d0:	f7ff fe61 	bl	8012f96 <SCSI_SenseCode>
      return -1;
 80132d4:	f04f 33ff 	mov.w	r3, #4294967295
 80132d8:	e084      	b.n	80133e4 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80132da:	697b      	ldr	r3, [r7, #20]
 80132dc:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80132e0:	2b02      	cmp	r3, #2
 80132e2:	d108      	bne.n	80132f6 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80132e4:	7af9      	ldrb	r1, [r7, #11]
 80132e6:	233a      	movs	r3, #58	; 0x3a
 80132e8:	2202      	movs	r2, #2
 80132ea:	68f8      	ldr	r0, [r7, #12]
 80132ec:	f7ff fe53 	bl	8012f96 <SCSI_SenseCode>
      return -1;
 80132f0:	f04f 33ff 	mov.w	r3, #4294967295
 80132f4:	e076      	b.n	80133e4 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80132fc:	68fa      	ldr	r2, [r7, #12]
 80132fe:	33b0      	adds	r3, #176	; 0xb0
 8013300:	009b      	lsls	r3, r3, #2
 8013302:	4413      	add	r3, r2
 8013304:	685b      	ldr	r3, [r3, #4]
 8013306:	689b      	ldr	r3, [r3, #8]
 8013308:	7afa      	ldrb	r2, [r7, #11]
 801330a:	4610      	mov	r0, r2
 801330c:	4798      	blx	r3
 801330e:	4603      	mov	r3, r0
 8013310:	2b00      	cmp	r3, #0
 8013312:	d008      	beq.n	8013326 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013314:	7af9      	ldrb	r1, [r7, #11]
 8013316:	233a      	movs	r3, #58	; 0x3a
 8013318:	2202      	movs	r2, #2
 801331a:	68f8      	ldr	r0, [r7, #12]
 801331c:	f7ff fe3b 	bl	8012f96 <SCSI_SenseCode>
      return -1;
 8013320:	f04f 33ff 	mov.w	r3, #4294967295
 8013324:	e05e      	b.n	80133e4 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	3302      	adds	r3, #2
 801332a:	781b      	ldrb	r3, [r3, #0]
 801332c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	3303      	adds	r3, #3
 8013332:	781b      	ldrb	r3, [r3, #0]
 8013334:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013336:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	3304      	adds	r3, #4
 801333c:	781b      	ldrb	r3, [r3, #0]
 801333e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8013340:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8013342:	687a      	ldr	r2, [r7, #4]
 8013344:	3205      	adds	r2, #5
 8013346:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8013348:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801334a:	697b      	ldr	r3, [r7, #20]
 801334c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	3306      	adds	r3, #6
 8013354:	781b      	ldrb	r3, [r3, #0]
 8013356:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	3307      	adds	r3, #7
 801335c:	781b      	ldrb	r3, [r3, #0]
 801335e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013360:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	3308      	adds	r3, #8
 8013366:	781b      	ldrb	r3, [r3, #0]
 8013368:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 801336a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 801336c:	687a      	ldr	r2, [r7, #4]
 801336e:	3209      	adds	r2, #9
 8013370:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8013372:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013374:	697b      	ldr	r3, [r7, #20]
 8013376:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801337a:	697b      	ldr	r3, [r7, #20]
 801337c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8013380:	697b      	ldr	r3, [r7, #20]
 8013382:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8013386:	7af9      	ldrb	r1, [r7, #11]
 8013388:	68f8      	ldr	r0, [r7, #12]
 801338a:	f000 fa28 	bl	80137de <SCSI_CheckAddressRange>
 801338e:	4603      	mov	r3, r0
 8013390:	2b00      	cmp	r3, #0
 8013392:	da02      	bge.n	801339a <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8013394:	f04f 33ff 	mov.w	r3, #4294967295
 8013398:	e024      	b.n	80133e4 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 801339a:	697b      	ldr	r3, [r7, #20]
 801339c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80133a0:	697b      	ldr	r3, [r7, #20]
 80133a2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80133a6:	6979      	ldr	r1, [r7, #20]
 80133a8:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 80133ac:	fb01 f303 	mul.w	r3, r1, r3
 80133b0:	429a      	cmp	r2, r3
 80133b2:	d00a      	beq.n	80133ca <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80133b4:	697b      	ldr	r3, [r7, #20]
 80133b6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80133ba:	2320      	movs	r3, #32
 80133bc:	2205      	movs	r2, #5
 80133be:	68f8      	ldr	r0, [r7, #12]
 80133c0:	f7ff fde9 	bl	8012f96 <SCSI_SenseCode>
      return -1;
 80133c4:	f04f 33ff 	mov.w	r3, #4294967295
 80133c8:	e00c      	b.n	80133e4 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80133ca:	697b      	ldr	r3, [r7, #20]
 80133cc:	2202      	movs	r2, #2
 80133ce:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80133d0:	697b      	ldr	r3, [r7, #20]
 80133d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80133d6:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80133d8:	7afb      	ldrb	r3, [r7, #11]
 80133da:	4619      	mov	r1, r3
 80133dc:	68f8      	ldr	r0, [r7, #12]
 80133de:	f000 fa2b 	bl	8013838 <SCSI_ProcessRead>
 80133e2:	4603      	mov	r3, r0
}
 80133e4:	4618      	mov	r0, r3
 80133e6:	3718      	adds	r7, #24
 80133e8:	46bd      	mov	sp, r7
 80133ea:	bd80      	pop	{r7, pc}

080133ec <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80133ec:	b580      	push	{r7, lr}
 80133ee:	b086      	sub	sp, #24
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	60f8      	str	r0, [r7, #12]
 80133f4:	460b      	mov	r3, r1
 80133f6:	607a      	str	r2, [r7, #4]
 80133f8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	32b0      	adds	r2, #176	; 0xb0
 8013404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013408:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 801340a:	697b      	ldr	r3, [r7, #20]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d102      	bne.n	8013416 <SCSI_Write10+0x2a>
  {
    return -1;
 8013410:	f04f 33ff 	mov.w	r3, #4294967295
 8013414:	e0ba      	b.n	801358c <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8013416:	697b      	ldr	r3, [r7, #20]
 8013418:	7a1b      	ldrb	r3, [r3, #8]
 801341a:	2b00      	cmp	r3, #0
 801341c:	f040 80b0 	bne.w	8013580 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8013420:	697b      	ldr	r3, [r7, #20]
 8013422:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8013426:	2b00      	cmp	r3, #0
 8013428:	d10a      	bne.n	8013440 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801342a:	697b      	ldr	r3, [r7, #20]
 801342c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8013430:	2320      	movs	r3, #32
 8013432:	2205      	movs	r2, #5
 8013434:	68f8      	ldr	r0, [r7, #12]
 8013436:	f7ff fdae 	bl	8012f96 <SCSI_SenseCode>
      return -1;
 801343a:	f04f 33ff 	mov.w	r3, #4294967295
 801343e:	e0a5      	b.n	801358c <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8013440:	697b      	ldr	r3, [r7, #20]
 8013442:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8013446:	b25b      	sxtb	r3, r3
 8013448:	2b00      	cmp	r3, #0
 801344a:	da0a      	bge.n	8013462 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801344c:	697b      	ldr	r3, [r7, #20]
 801344e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8013452:	2320      	movs	r3, #32
 8013454:	2205      	movs	r2, #5
 8013456:	68f8      	ldr	r0, [r7, #12]
 8013458:	f7ff fd9d 	bl	8012f96 <SCSI_SenseCode>
      return -1;
 801345c:	f04f 33ff 	mov.w	r3, #4294967295
 8013460:	e094      	b.n	801358c <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013468:	68fa      	ldr	r2, [r7, #12]
 801346a:	33b0      	adds	r3, #176	; 0xb0
 801346c:	009b      	lsls	r3, r3, #2
 801346e:	4413      	add	r3, r2
 8013470:	685b      	ldr	r3, [r3, #4]
 8013472:	689b      	ldr	r3, [r3, #8]
 8013474:	7afa      	ldrb	r2, [r7, #11]
 8013476:	4610      	mov	r0, r2
 8013478:	4798      	blx	r3
 801347a:	4603      	mov	r3, r0
 801347c:	2b00      	cmp	r3, #0
 801347e:	d008      	beq.n	8013492 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013480:	7af9      	ldrb	r1, [r7, #11]
 8013482:	233a      	movs	r3, #58	; 0x3a
 8013484:	2202      	movs	r2, #2
 8013486:	68f8      	ldr	r0, [r7, #12]
 8013488:	f7ff fd85 	bl	8012f96 <SCSI_SenseCode>
      return -1;
 801348c:	f04f 33ff 	mov.w	r3, #4294967295
 8013490:	e07c      	b.n	801358c <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013498:	68fa      	ldr	r2, [r7, #12]
 801349a:	33b0      	adds	r3, #176	; 0xb0
 801349c:	009b      	lsls	r3, r3, #2
 801349e:	4413      	add	r3, r2
 80134a0:	685b      	ldr	r3, [r3, #4]
 80134a2:	68db      	ldr	r3, [r3, #12]
 80134a4:	7afa      	ldrb	r2, [r7, #11]
 80134a6:	4610      	mov	r0, r2
 80134a8:	4798      	blx	r3
 80134aa:	4603      	mov	r3, r0
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d008      	beq.n	80134c2 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80134b0:	7af9      	ldrb	r1, [r7, #11]
 80134b2:	2327      	movs	r3, #39	; 0x27
 80134b4:	2202      	movs	r2, #2
 80134b6:	68f8      	ldr	r0, [r7, #12]
 80134b8:	f7ff fd6d 	bl	8012f96 <SCSI_SenseCode>
      return -1;
 80134bc:	f04f 33ff 	mov.w	r3, #4294967295
 80134c0:	e064      	b.n	801358c <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	3302      	adds	r3, #2
 80134c6:	781b      	ldrb	r3, [r3, #0]
 80134c8:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	3303      	adds	r3, #3
 80134ce:	781b      	ldrb	r3, [r3, #0]
 80134d0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80134d2:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	3304      	adds	r3, #4
 80134d8:	781b      	ldrb	r3, [r3, #0]
 80134da:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80134dc:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80134de:	687a      	ldr	r2, [r7, #4]
 80134e0:	3205      	adds	r2, #5
 80134e2:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80134e4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80134e6:	697b      	ldr	r3, [r7, #20]
 80134e8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	3307      	adds	r3, #7
 80134f0:	781b      	ldrb	r3, [r3, #0]
 80134f2:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80134f4:	687a      	ldr	r2, [r7, #4]
 80134f6:	3208      	adds	r2, #8
 80134f8:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80134fa:	431a      	orrs	r2, r3
 80134fc:	697b      	ldr	r3, [r7, #20]
 80134fe:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8013502:	697b      	ldr	r3, [r7, #20]
 8013504:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8013508:	697b      	ldr	r3, [r7, #20]
 801350a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801350e:	7af9      	ldrb	r1, [r7, #11]
 8013510:	68f8      	ldr	r0, [r7, #12]
 8013512:	f000 f964 	bl	80137de <SCSI_CheckAddressRange>
 8013516:	4603      	mov	r3, r0
 8013518:	2b00      	cmp	r3, #0
 801351a:	da02      	bge.n	8013522 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801351c:	f04f 33ff 	mov.w	r3, #4294967295
 8013520:	e034      	b.n	801358c <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013522:	697b      	ldr	r3, [r7, #20]
 8013524:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8013528:	697a      	ldr	r2, [r7, #20]
 801352a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801352e:	fb02 f303 	mul.w	r3, r2, r3
 8013532:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8013534:	697b      	ldr	r3, [r7, #20]
 8013536:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801353a:	693a      	ldr	r2, [r7, #16]
 801353c:	429a      	cmp	r2, r3
 801353e:	d00a      	beq.n	8013556 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013540:	697b      	ldr	r3, [r7, #20]
 8013542:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8013546:	2320      	movs	r3, #32
 8013548:	2205      	movs	r2, #5
 801354a:	68f8      	ldr	r0, [r7, #12]
 801354c:	f7ff fd23 	bl	8012f96 <SCSI_SenseCode>
      return -1;
 8013550:	f04f 33ff 	mov.w	r3, #4294967295
 8013554:	e01a      	b.n	801358c <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8013556:	693b      	ldr	r3, [r7, #16]
 8013558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801355c:	bf28      	it	cs
 801355e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8013562:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8013564:	697b      	ldr	r3, [r7, #20]
 8013566:	2201      	movs	r2, #1
 8013568:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 801356a:	4b0a      	ldr	r3, [pc, #40]	; (8013594 <SCSI_Write10+0x1a8>)
 801356c:	7819      	ldrb	r1, [r3, #0]
 801356e:	697b      	ldr	r3, [r7, #20]
 8013570:	f103 0210 	add.w	r2, r3, #16
 8013574:	693b      	ldr	r3, [r7, #16]
 8013576:	68f8      	ldr	r0, [r7, #12]
 8013578:	f005 f967 	bl	801884a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 801357c:	2300      	movs	r3, #0
 801357e:	e005      	b.n	801358c <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 8013580:	7afb      	ldrb	r3, [r7, #11]
 8013582:	4619      	mov	r1, r3
 8013584:	68f8      	ldr	r0, [r7, #12]
 8013586:	f000 f9dd 	bl	8013944 <SCSI_ProcessWrite>
 801358a:	4603      	mov	r3, r0
}
 801358c:	4618      	mov	r0, r3
 801358e:	3718      	adds	r7, #24
 8013590:	46bd      	mov	sp, r7
 8013592:	bd80      	pop	{r7, pc}
 8013594:	2000006f 	.word	0x2000006f

08013598 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013598:	b580      	push	{r7, lr}
 801359a:	b086      	sub	sp, #24
 801359c:	af00      	add	r7, sp, #0
 801359e:	60f8      	str	r0, [r7, #12]
 80135a0:	460b      	mov	r3, r1
 80135a2:	607a      	str	r2, [r7, #4]
 80135a4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	32b0      	adds	r2, #176	; 0xb0
 80135b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80135b4:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80135b6:	697b      	ldr	r3, [r7, #20]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d102      	bne.n	80135c2 <SCSI_Write12+0x2a>
  {
    return -1;
 80135bc:	f04f 33ff 	mov.w	r3, #4294967295
 80135c0:	e0ca      	b.n	8013758 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80135c2:	697b      	ldr	r3, [r7, #20]
 80135c4:	7a1b      	ldrb	r3, [r3, #8]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	f040 80c0 	bne.w	801374c <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80135cc:	697b      	ldr	r3, [r7, #20]
 80135ce:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d10a      	bne.n	80135ec <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80135d6:	697b      	ldr	r3, [r7, #20]
 80135d8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80135dc:	2320      	movs	r3, #32
 80135de:	2205      	movs	r2, #5
 80135e0:	68f8      	ldr	r0, [r7, #12]
 80135e2:	f7ff fcd8 	bl	8012f96 <SCSI_SenseCode>
      return -1;
 80135e6:	f04f 33ff 	mov.w	r3, #4294967295
 80135ea:	e0b5      	b.n	8013758 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80135ec:	697b      	ldr	r3, [r7, #20]
 80135ee:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80135f2:	b25b      	sxtb	r3, r3
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	da0a      	bge.n	801360e <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80135f8:	697b      	ldr	r3, [r7, #20]
 80135fa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80135fe:	2320      	movs	r3, #32
 8013600:	2205      	movs	r2, #5
 8013602:	68f8      	ldr	r0, [r7, #12]
 8013604:	f7ff fcc7 	bl	8012f96 <SCSI_SenseCode>
      return -1;
 8013608:	f04f 33ff 	mov.w	r3, #4294967295
 801360c:	e0a4      	b.n	8013758 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013614:	68fa      	ldr	r2, [r7, #12]
 8013616:	33b0      	adds	r3, #176	; 0xb0
 8013618:	009b      	lsls	r3, r3, #2
 801361a:	4413      	add	r3, r2
 801361c:	685b      	ldr	r3, [r3, #4]
 801361e:	689b      	ldr	r3, [r3, #8]
 8013620:	7afa      	ldrb	r2, [r7, #11]
 8013622:	4610      	mov	r0, r2
 8013624:	4798      	blx	r3
 8013626:	4603      	mov	r3, r0
 8013628:	2b00      	cmp	r3, #0
 801362a:	d00b      	beq.n	8013644 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801362c:	7af9      	ldrb	r1, [r7, #11]
 801362e:	233a      	movs	r3, #58	; 0x3a
 8013630:	2202      	movs	r2, #2
 8013632:	68f8      	ldr	r0, [r7, #12]
 8013634:	f7ff fcaf 	bl	8012f96 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8013638:	697b      	ldr	r3, [r7, #20]
 801363a:	2205      	movs	r2, #5
 801363c:	721a      	strb	r2, [r3, #8]
      return -1;
 801363e:	f04f 33ff 	mov.w	r3, #4294967295
 8013642:	e089      	b.n	8013758 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801364a:	68fa      	ldr	r2, [r7, #12]
 801364c:	33b0      	adds	r3, #176	; 0xb0
 801364e:	009b      	lsls	r3, r3, #2
 8013650:	4413      	add	r3, r2
 8013652:	685b      	ldr	r3, [r3, #4]
 8013654:	68db      	ldr	r3, [r3, #12]
 8013656:	7afa      	ldrb	r2, [r7, #11]
 8013658:	4610      	mov	r0, r2
 801365a:	4798      	blx	r3
 801365c:	4603      	mov	r3, r0
 801365e:	2b00      	cmp	r3, #0
 8013660:	d00b      	beq.n	801367a <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8013662:	7af9      	ldrb	r1, [r7, #11]
 8013664:	2327      	movs	r3, #39	; 0x27
 8013666:	2202      	movs	r2, #2
 8013668:	68f8      	ldr	r0, [r7, #12]
 801366a:	f7ff fc94 	bl	8012f96 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 801366e:	697b      	ldr	r3, [r7, #20]
 8013670:	2205      	movs	r2, #5
 8013672:	721a      	strb	r2, [r3, #8]
      return -1;
 8013674:	f04f 33ff 	mov.w	r3, #4294967295
 8013678:	e06e      	b.n	8013758 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	3302      	adds	r3, #2
 801367e:	781b      	ldrb	r3, [r3, #0]
 8013680:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	3303      	adds	r3, #3
 8013686:	781b      	ldrb	r3, [r3, #0]
 8013688:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801368a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	3304      	adds	r3, #4
 8013690:	781b      	ldrb	r3, [r3, #0]
 8013692:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8013694:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8013696:	687a      	ldr	r2, [r7, #4]
 8013698:	3205      	adds	r2, #5
 801369a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 801369c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801369e:	697b      	ldr	r3, [r7, #20]
 80136a0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	3306      	adds	r3, #6
 80136a8:	781b      	ldrb	r3, [r3, #0]
 80136aa:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	3307      	adds	r3, #7
 80136b0:	781b      	ldrb	r3, [r3, #0]
 80136b2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80136b4:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	3308      	adds	r3, #8
 80136ba:	781b      	ldrb	r3, [r3, #0]
 80136bc:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80136be:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80136c0:	687a      	ldr	r2, [r7, #4]
 80136c2:	3209      	adds	r2, #9
 80136c4:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80136c6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80136c8:	697b      	ldr	r3, [r7, #20]
 80136ca:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80136ce:	697b      	ldr	r3, [r7, #20]
 80136d0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80136d4:	697b      	ldr	r3, [r7, #20]
 80136d6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80136da:	7af9      	ldrb	r1, [r7, #11]
 80136dc:	68f8      	ldr	r0, [r7, #12]
 80136de:	f000 f87e 	bl	80137de <SCSI_CheckAddressRange>
 80136e2:	4603      	mov	r3, r0
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	da02      	bge.n	80136ee <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80136e8:	f04f 33ff 	mov.w	r3, #4294967295
 80136ec:	e034      	b.n	8013758 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80136ee:	697b      	ldr	r3, [r7, #20]
 80136f0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80136f4:	697a      	ldr	r2, [r7, #20]
 80136f6:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80136fa:	fb02 f303 	mul.w	r3, r2, r3
 80136fe:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8013700:	697b      	ldr	r3, [r7, #20]
 8013702:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8013706:	693a      	ldr	r2, [r7, #16]
 8013708:	429a      	cmp	r2, r3
 801370a:	d00a      	beq.n	8013722 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801370c:	697b      	ldr	r3, [r7, #20]
 801370e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8013712:	2320      	movs	r3, #32
 8013714:	2205      	movs	r2, #5
 8013716:	68f8      	ldr	r0, [r7, #12]
 8013718:	f7ff fc3d 	bl	8012f96 <SCSI_SenseCode>
      return -1;
 801371c:	f04f 33ff 	mov.w	r3, #4294967295
 8013720:	e01a      	b.n	8013758 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8013722:	693b      	ldr	r3, [r7, #16]
 8013724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013728:	bf28      	it	cs
 801372a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801372e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8013730:	697b      	ldr	r3, [r7, #20]
 8013732:	2201      	movs	r2, #1
 8013734:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8013736:	4b0a      	ldr	r3, [pc, #40]	; (8013760 <SCSI_Write12+0x1c8>)
 8013738:	7819      	ldrb	r1, [r3, #0]
 801373a:	697b      	ldr	r3, [r7, #20]
 801373c:	f103 0210 	add.w	r2, r3, #16
 8013740:	693b      	ldr	r3, [r7, #16]
 8013742:	68f8      	ldr	r0, [r7, #12]
 8013744:	f005 f881 	bl	801884a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8013748:	2300      	movs	r3, #0
 801374a:	e005      	b.n	8013758 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 801374c:	7afb      	ldrb	r3, [r7, #11]
 801374e:	4619      	mov	r1, r3
 8013750:	68f8      	ldr	r0, [r7, #12]
 8013752:	f000 f8f7 	bl	8013944 <SCSI_ProcessWrite>
 8013756:	4603      	mov	r3, r0
}
 8013758:	4618      	mov	r0, r3
 801375a:	3718      	adds	r7, #24
 801375c:	46bd      	mov	sp, r7
 801375e:	bd80      	pop	{r7, pc}
 8013760:	2000006f 	.word	0x2000006f

08013764 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013764:	b580      	push	{r7, lr}
 8013766:	b086      	sub	sp, #24
 8013768:	af00      	add	r7, sp, #0
 801376a:	60f8      	str	r0, [r7, #12]
 801376c:	460b      	mov	r3, r1
 801376e:	607a      	str	r2, [r7, #4]
 8013770:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	32b0      	adds	r2, #176	; 0xb0
 801377c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013780:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8013782:	697b      	ldr	r3, [r7, #20]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d102      	bne.n	801378e <SCSI_Verify10+0x2a>
  {
    return -1;
 8013788:	f04f 33ff 	mov.w	r3, #4294967295
 801378c:	e023      	b.n	80137d6 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	3301      	adds	r3, #1
 8013792:	781b      	ldrb	r3, [r3, #0]
 8013794:	f003 0302 	and.w	r3, r3, #2
 8013798:	2b00      	cmp	r3, #0
 801379a:	d008      	beq.n	80137ae <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 801379c:	7af9      	ldrb	r1, [r7, #11]
 801379e:	2324      	movs	r3, #36	; 0x24
 80137a0:	2205      	movs	r2, #5
 80137a2:	68f8      	ldr	r0, [r7, #12]
 80137a4:	f7ff fbf7 	bl	8012f96 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 80137a8:	f04f 33ff 	mov.w	r3, #4294967295
 80137ac:	e013      	b.n	80137d6 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 80137ae:	697b      	ldr	r3, [r7, #20]
 80137b0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80137b4:	697b      	ldr	r3, [r7, #20]
 80137b6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80137ba:	7af9      	ldrb	r1, [r7, #11]
 80137bc:	68f8      	ldr	r0, [r7, #12]
 80137be:	f000 f80e 	bl	80137de <SCSI_CheckAddressRange>
 80137c2:	4603      	mov	r3, r0
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	da02      	bge.n	80137ce <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 80137c8:	f04f 33ff 	mov.w	r3, #4294967295
 80137cc:	e003      	b.n	80137d6 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 80137ce:	697b      	ldr	r3, [r7, #20]
 80137d0:	2200      	movs	r2, #0
 80137d2:	60da      	str	r2, [r3, #12]

  return 0;
 80137d4:	2300      	movs	r3, #0
}
 80137d6:	4618      	mov	r0, r3
 80137d8:	3718      	adds	r7, #24
 80137da:	46bd      	mov	sp, r7
 80137dc:	bd80      	pop	{r7, pc}

080137de <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 80137de:	b580      	push	{r7, lr}
 80137e0:	b086      	sub	sp, #24
 80137e2:	af00      	add	r7, sp, #0
 80137e4:	60f8      	str	r0, [r7, #12]
 80137e6:	607a      	str	r2, [r7, #4]
 80137e8:	603b      	str	r3, [r7, #0]
 80137ea:	460b      	mov	r3, r1
 80137ec:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	32b0      	adds	r2, #176	; 0xb0
 80137f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137fc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80137fe:	697b      	ldr	r3, [r7, #20]
 8013800:	2b00      	cmp	r3, #0
 8013802:	d102      	bne.n	801380a <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8013804:	f04f 33ff 	mov.w	r3, #4294967295
 8013808:	e011      	b.n	801382e <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 801380a:	687a      	ldr	r2, [r7, #4]
 801380c:	683b      	ldr	r3, [r7, #0]
 801380e:	441a      	add	r2, r3
 8013810:	697b      	ldr	r3, [r7, #20]
 8013812:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8013816:	429a      	cmp	r2, r3
 8013818:	d908      	bls.n	801382c <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 801381a:	7af9      	ldrb	r1, [r7, #11]
 801381c:	2321      	movs	r3, #33	; 0x21
 801381e:	2205      	movs	r2, #5
 8013820:	68f8      	ldr	r0, [r7, #12]
 8013822:	f7ff fbb8 	bl	8012f96 <SCSI_SenseCode>
    return -1;
 8013826:	f04f 33ff 	mov.w	r3, #4294967295
 801382a:	e000      	b.n	801382e <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 801382c:	2300      	movs	r3, #0
}
 801382e:	4618      	mov	r0, r3
 8013830:	3718      	adds	r7, #24
 8013832:	46bd      	mov	sp, r7
 8013834:	bd80      	pop	{r7, pc}
	...

08013838 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8013838:	b590      	push	{r4, r7, lr}
 801383a:	b085      	sub	sp, #20
 801383c:	af00      	add	r7, sp, #0
 801383e:	6078      	str	r0, [r7, #4]
 8013840:	460b      	mov	r3, r1
 8013842:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	32b0      	adds	r2, #176	; 0xb0
 801384e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013852:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d102      	bne.n	8013860 <SCSI_ProcessRead+0x28>
  {
    return -1;
 801385a:	f04f 33ff 	mov.w	r3, #4294967295
 801385e:	e06a      	b.n	8013936 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8013866:	68fa      	ldr	r2, [r7, #12]
 8013868:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801386c:	fb02 f303 	mul.w	r3, r2, r3
 8013870:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8013872:	68bb      	ldr	r3, [r7, #8]
 8013874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013878:	bf28      	it	cs
 801387a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801387e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013886:	687a      	ldr	r2, [r7, #4]
 8013888:	33b0      	adds	r3, #176	; 0xb0
 801388a:	009b      	lsls	r3, r3, #2
 801388c:	4413      	add	r3, r2
 801388e:	685b      	ldr	r3, [r3, #4]
 8013890:	691c      	ldr	r4, [r3, #16]
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	f103 0110 	add.w	r1, r3, #16
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80138a4:	4618      	mov	r0, r3
 80138a6:	68bb      	ldr	r3, [r7, #8]
 80138a8:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 80138ac:	b29b      	uxth	r3, r3
 80138ae:	78f8      	ldrb	r0, [r7, #3]
 80138b0:	47a0      	blx	r4
 80138b2:	4603      	mov	r3, r0
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	da08      	bge.n	80138ca <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80138b8:	78f9      	ldrb	r1, [r7, #3]
 80138ba:	2311      	movs	r3, #17
 80138bc:	2204      	movs	r2, #4
 80138be:	6878      	ldr	r0, [r7, #4]
 80138c0:	f7ff fb69 	bl	8012f96 <SCSI_SenseCode>
    return -1;
 80138c4:	f04f 33ff 	mov.w	r3, #4294967295
 80138c8:	e035      	b.n	8013936 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 80138ca:	4b1d      	ldr	r3, [pc, #116]	; (8013940 <SCSI_ProcessRead+0x108>)
 80138cc:	7819      	ldrb	r1, [r3, #0]
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	f103 0210 	add.w	r2, r3, #16
 80138d4:	68bb      	ldr	r3, [r7, #8]
 80138d6:	6878      	ldr	r0, [r7, #4]
 80138d8:	f004 ff96 	bl	8018808 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80138e8:	4619      	mov	r1, r3
 80138ea:	68bb      	ldr	r3, [r7, #8]
 80138ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80138f0:	441a      	add	r2, r3
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8013904:	4619      	mov	r1, r3
 8013906:	68bb      	ldr	r3, [r7, #8]
 8013908:	fbb3 f3f1 	udiv	r3, r3, r1
 801390c:	1ad2      	subs	r2, r2, r3
 801390e:	68fb      	ldr	r3, [r7, #12]
 8013910:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801391a:	68bb      	ldr	r3, [r7, #8]
 801391c:	1ad2      	subs	r2, r2, r3
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801392a:	2b00      	cmp	r3, #0
 801392c:	d102      	bne.n	8013934 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	2203      	movs	r2, #3
 8013932:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8013934:	2300      	movs	r3, #0
}
 8013936:	4618      	mov	r0, r3
 8013938:	3714      	adds	r7, #20
 801393a:	46bd      	mov	sp, r7
 801393c:	bd90      	pop	{r4, r7, pc}
 801393e:	bf00      	nop
 8013940:	2000006e 	.word	0x2000006e

08013944 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8013944:	b590      	push	{r4, r7, lr}
 8013946:	b085      	sub	sp, #20
 8013948:	af00      	add	r7, sp, #0
 801394a:	6078      	str	r0, [r7, #4]
 801394c:	460b      	mov	r3, r1
 801394e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	32b0      	adds	r2, #176	; 0xb0
 801395a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801395e:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	2b00      	cmp	r3, #0
 8013964:	d102      	bne.n	801396c <SCSI_ProcessWrite+0x28>
  {
    return -1;
 8013966:	f04f 33ff 	mov.w	r3, #4294967295
 801396a:	e07a      	b.n	8013a62 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8013972:	68fa      	ldr	r2, [r7, #12]
 8013974:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8013978:	fb02 f303 	mul.w	r3, r2, r3
 801397c:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 801397e:	68bb      	ldr	r3, [r7, #8]
 8013980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013984:	bf28      	it	cs
 8013986:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801398a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013992:	687a      	ldr	r2, [r7, #4]
 8013994:	33b0      	adds	r3, #176	; 0xb0
 8013996:	009b      	lsls	r3, r3, #2
 8013998:	4413      	add	r3, r2
 801399a:	685b      	ldr	r3, [r3, #4]
 801399c:	695c      	ldr	r4, [r3, #20]
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	f103 0110 	add.w	r1, r3, #16
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80139b0:	4618      	mov	r0, r3
 80139b2:	68bb      	ldr	r3, [r7, #8]
 80139b4:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 80139b8:	b29b      	uxth	r3, r3
 80139ba:	78f8      	ldrb	r0, [r7, #3]
 80139bc:	47a0      	blx	r4
 80139be:	4603      	mov	r3, r0
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	da08      	bge.n	80139d6 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80139c4:	78f9      	ldrb	r1, [r7, #3]
 80139c6:	2303      	movs	r3, #3
 80139c8:	2204      	movs	r2, #4
 80139ca:	6878      	ldr	r0, [r7, #4]
 80139cc:	f7ff fae3 	bl	8012f96 <SCSI_SenseCode>
    return -1;
 80139d0:	f04f 33ff 	mov.w	r3, #4294967295
 80139d4:	e045      	b.n	8013a62 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80139e2:	4619      	mov	r1, r3
 80139e4:	68bb      	ldr	r3, [r7, #8]
 80139e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80139ea:	441a      	add	r2, r3
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80139fe:	4619      	mov	r1, r3
 8013a00:	68bb      	ldr	r3, [r7, #8]
 8013a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8013a06:	1ad2      	subs	r2, r2, r3
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8013a0e:	68fb      	ldr	r3, [r7, #12]
 8013a10:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8013a14:	68bb      	ldr	r3, [r7, #8]
 8013a16:	1ad2      	subs	r2, r2, r3
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d104      	bne.n	8013a32 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013a28:	2100      	movs	r1, #0
 8013a2a:	6878      	ldr	r0, [r7, #4]
 8013a2c:	f7fe fd14 	bl	8012458 <MSC_BOT_SendCSW>
 8013a30:	e016      	b.n	8013a60 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8013a38:	68fa      	ldr	r2, [r7, #12]
 8013a3a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8013a3e:	fb02 f303 	mul.w	r3, r2, r3
 8013a42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013a46:	bf28      	it	cs
 8013a48:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8013a4c:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8013a4e:	4b07      	ldr	r3, [pc, #28]	; (8013a6c <SCSI_ProcessWrite+0x128>)
 8013a50:	7819      	ldrb	r1, [r3, #0]
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	f103 0210 	add.w	r2, r3, #16
 8013a58:	68bb      	ldr	r3, [r7, #8]
 8013a5a:	6878      	ldr	r0, [r7, #4]
 8013a5c:	f004 fef5 	bl	801884a <USBD_LL_PrepareReceive>
  }

  return 0;
 8013a60:	2300      	movs	r3, #0
}
 8013a62:	4618      	mov	r0, r3
 8013a64:	3714      	adds	r7, #20
 8013a66:	46bd      	mov	sp, r7
 8013a68:	bd90      	pop	{r4, r7, pc}
 8013a6a:	bf00      	nop
 8013a6c:	2000006f 	.word	0x2000006f

08013a70 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8013a70:	b480      	push	{r7}
 8013a72:	b087      	sub	sp, #28
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	60f8      	str	r0, [r7, #12]
 8013a78:	60b9      	str	r1, [r7, #8]
 8013a7a:	4613      	mov	r3, r2
 8013a7c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8013a7e:	88fb      	ldrh	r3, [r7, #6]
 8013a80:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d102      	bne.n	8013a8e <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8013a88:	f04f 33ff 	mov.w	r3, #4294967295
 8013a8c:	e013      	b.n	8013ab6 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8013a8e:	8afa      	ldrh	r2, [r7, #22]
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8013a94:	e00b      	b.n	8013aae <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8013a96:	8afb      	ldrh	r3, [r7, #22]
 8013a98:	3b01      	subs	r3, #1
 8013a9a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8013a9c:	8afb      	ldrh	r3, [r7, #22]
 8013a9e:	68ba      	ldr	r2, [r7, #8]
 8013aa0:	441a      	add	r2, r3
 8013aa2:	8afb      	ldrh	r3, [r7, #22]
 8013aa4:	7811      	ldrb	r1, [r2, #0]
 8013aa6:	68fa      	ldr	r2, [r7, #12]
 8013aa8:	4413      	add	r3, r2
 8013aaa:	460a      	mov	r2, r1
 8013aac:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8013aae:	8afb      	ldrh	r3, [r7, #22]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d1f0      	bne.n	8013a96 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8013ab4:	2300      	movs	r3, #0
}
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	371c      	adds	r7, #28
 8013aba:	46bd      	mov	sp, r7
 8013abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac0:	4770      	bx	lr

08013ac2 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013ac2:	b580      	push	{r7, lr}
 8013ac4:	b086      	sub	sp, #24
 8013ac6:	af00      	add	r7, sp, #0
 8013ac8:	60f8      	str	r0, [r7, #12]
 8013aca:	60b9      	str	r1, [r7, #8]
 8013acc:	4613      	mov	r3, r2
 8013ace:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d101      	bne.n	8013ada <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013ad6:	2303      	movs	r3, #3
 8013ad8:	e01f      	b.n	8013b1a <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	2200      	movs	r2, #0
 8013ade:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	2200      	movs	r2, #0
 8013ae6:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	2200      	movs	r2, #0
 8013aee:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013af2:	68bb      	ldr	r3, [r7, #8]
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d003      	beq.n	8013b00 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	68ba      	ldr	r2, [r7, #8]
 8013afc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	2201      	movs	r2, #1
 8013b04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	79fa      	ldrb	r2, [r7, #7]
 8013b0c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013b0e:	68f8      	ldr	r0, [r7, #12]
 8013b10:	f004 fd26 	bl	8018560 <USBD_LL_Init>
 8013b14:	4603      	mov	r3, r0
 8013b16:	75fb      	strb	r3, [r7, #23]

  return ret;
 8013b18:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	3718      	adds	r7, #24
 8013b1e:	46bd      	mov	sp, r7
 8013b20:	bd80      	pop	{r7, pc}

08013b22 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013b22:	b580      	push	{r7, lr}
 8013b24:	b084      	sub	sp, #16
 8013b26:	af00      	add	r7, sp, #0
 8013b28:	6078      	str	r0, [r7, #4]
 8013b2a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013b2c:	2300      	movs	r3, #0
 8013b2e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013b30:	683b      	ldr	r3, [r7, #0]
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d101      	bne.n	8013b3a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013b36:	2303      	movs	r3, #3
 8013b38:	e025      	b.n	8013b86 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	683a      	ldr	r2, [r7, #0]
 8013b3e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	32ae      	adds	r2, #174	; 0xae
 8013b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d00f      	beq.n	8013b76 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8013b56:	687b      	ldr	r3, [r7, #4]
 8013b58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	32ae      	adds	r2, #174	; 0xae
 8013b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b66:	f107 020e 	add.w	r2, r7, #14
 8013b6a:	4610      	mov	r0, r2
 8013b6c:	4798      	blx	r3
 8013b6e:	4602      	mov	r2, r0
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8013b7c:	1c5a      	adds	r2, r3, #1
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8013b84:	2300      	movs	r3, #0
}
 8013b86:	4618      	mov	r0, r3
 8013b88:	3710      	adds	r7, #16
 8013b8a:	46bd      	mov	sp, r7
 8013b8c:	bd80      	pop	{r7, pc}

08013b8e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013b8e:	b580      	push	{r7, lr}
 8013b90:	b082      	sub	sp, #8
 8013b92:	af00      	add	r7, sp, #0
 8013b94:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013b96:	6878      	ldr	r0, [r7, #4]
 8013b98:	f004 fd2e 	bl	80185f8 <USBD_LL_Start>
 8013b9c:	4603      	mov	r3, r0
}
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	3708      	adds	r7, #8
 8013ba2:	46bd      	mov	sp, r7
 8013ba4:	bd80      	pop	{r7, pc}

08013ba6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8013ba6:	b480      	push	{r7}
 8013ba8:	b083      	sub	sp, #12
 8013baa:	af00      	add	r7, sp, #0
 8013bac:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013bae:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	370c      	adds	r7, #12
 8013bb4:	46bd      	mov	sp, r7
 8013bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bba:	4770      	bx	lr

08013bbc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013bbc:	b580      	push	{r7, lr}
 8013bbe:	b084      	sub	sp, #16
 8013bc0:	af00      	add	r7, sp, #0
 8013bc2:	6078      	str	r0, [r7, #4]
 8013bc4:	460b      	mov	r3, r1
 8013bc6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013bc8:	2300      	movs	r3, #0
 8013bca:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d009      	beq.n	8013bea <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	78fa      	ldrb	r2, [r7, #3]
 8013be0:	4611      	mov	r1, r2
 8013be2:	6878      	ldr	r0, [r7, #4]
 8013be4:	4798      	blx	r3
 8013be6:	4603      	mov	r3, r0
 8013be8:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013bea:	7bfb      	ldrb	r3, [r7, #15]
}
 8013bec:	4618      	mov	r0, r3
 8013bee:	3710      	adds	r7, #16
 8013bf0:	46bd      	mov	sp, r7
 8013bf2:	bd80      	pop	{r7, pc}

08013bf4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013bf4:	b580      	push	{r7, lr}
 8013bf6:	b084      	sub	sp, #16
 8013bf8:	af00      	add	r7, sp, #0
 8013bfa:	6078      	str	r0, [r7, #4]
 8013bfc:	460b      	mov	r3, r1
 8013bfe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013c00:	2300      	movs	r3, #0
 8013c02:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013c0a:	685b      	ldr	r3, [r3, #4]
 8013c0c:	78fa      	ldrb	r2, [r7, #3]
 8013c0e:	4611      	mov	r1, r2
 8013c10:	6878      	ldr	r0, [r7, #4]
 8013c12:	4798      	blx	r3
 8013c14:	4603      	mov	r3, r0
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d001      	beq.n	8013c1e <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8013c1a:	2303      	movs	r3, #3
 8013c1c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c20:	4618      	mov	r0, r3
 8013c22:	3710      	adds	r7, #16
 8013c24:	46bd      	mov	sp, r7
 8013c26:	bd80      	pop	{r7, pc}

08013c28 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013c28:	b580      	push	{r7, lr}
 8013c2a:	b084      	sub	sp, #16
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6078      	str	r0, [r7, #4]
 8013c30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013c38:	6839      	ldr	r1, [r7, #0]
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	f001 f933 	bl	8014ea6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	2201      	movs	r2, #1
 8013c44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8013c4e:	461a      	mov	r2, r3
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013c5c:	f003 031f 	and.w	r3, r3, #31
 8013c60:	2b02      	cmp	r3, #2
 8013c62:	d01a      	beq.n	8013c9a <USBD_LL_SetupStage+0x72>
 8013c64:	2b02      	cmp	r3, #2
 8013c66:	d822      	bhi.n	8013cae <USBD_LL_SetupStage+0x86>
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d002      	beq.n	8013c72 <USBD_LL_SetupStage+0x4a>
 8013c6c:	2b01      	cmp	r3, #1
 8013c6e:	d00a      	beq.n	8013c86 <USBD_LL_SetupStage+0x5e>
 8013c70:	e01d      	b.n	8013cae <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013c78:	4619      	mov	r1, r3
 8013c7a:	6878      	ldr	r0, [r7, #4]
 8013c7c:	f000 fb60 	bl	8014340 <USBD_StdDevReq>
 8013c80:	4603      	mov	r3, r0
 8013c82:	73fb      	strb	r3, [r7, #15]
      break;
 8013c84:	e020      	b.n	8013cc8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013c8c:	4619      	mov	r1, r3
 8013c8e:	6878      	ldr	r0, [r7, #4]
 8013c90:	f000 fbc8 	bl	8014424 <USBD_StdItfReq>
 8013c94:	4603      	mov	r3, r0
 8013c96:	73fb      	strb	r3, [r7, #15]
      break;
 8013c98:	e016      	b.n	8013cc8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013ca0:	4619      	mov	r1, r3
 8013ca2:	6878      	ldr	r0, [r7, #4]
 8013ca4:	f000 fc2a 	bl	80144fc <USBD_StdEPReq>
 8013ca8:	4603      	mov	r3, r0
 8013caa:	73fb      	strb	r3, [r7, #15]
      break;
 8013cac:	e00c      	b.n	8013cc8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013cb4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013cb8:	b2db      	uxtb	r3, r3
 8013cba:	4619      	mov	r1, r3
 8013cbc:	6878      	ldr	r0, [r7, #4]
 8013cbe:	f004 fd1a 	bl	80186f6 <USBD_LL_StallEP>
 8013cc2:	4603      	mov	r3, r0
 8013cc4:	73fb      	strb	r3, [r7, #15]
      break;
 8013cc6:	bf00      	nop
  }

  return ret;
 8013cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8013cca:	4618      	mov	r0, r3
 8013ccc:	3710      	adds	r7, #16
 8013cce:	46bd      	mov	sp, r7
 8013cd0:	bd80      	pop	{r7, pc}

08013cd2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013cd2:	b580      	push	{r7, lr}
 8013cd4:	b086      	sub	sp, #24
 8013cd6:	af00      	add	r7, sp, #0
 8013cd8:	60f8      	str	r0, [r7, #12]
 8013cda:	460b      	mov	r3, r1
 8013cdc:	607a      	str	r2, [r7, #4]
 8013cde:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8013ce4:	7afb      	ldrb	r3, [r7, #11]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d16e      	bne.n	8013dc8 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8013cf0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013cf8:	2b03      	cmp	r3, #3
 8013cfa:	f040 8098 	bne.w	8013e2e <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8013cfe:	693b      	ldr	r3, [r7, #16]
 8013d00:	689a      	ldr	r2, [r3, #8]
 8013d02:	693b      	ldr	r3, [r7, #16]
 8013d04:	68db      	ldr	r3, [r3, #12]
 8013d06:	429a      	cmp	r2, r3
 8013d08:	d913      	bls.n	8013d32 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8013d0a:	693b      	ldr	r3, [r7, #16]
 8013d0c:	689a      	ldr	r2, [r3, #8]
 8013d0e:	693b      	ldr	r3, [r7, #16]
 8013d10:	68db      	ldr	r3, [r3, #12]
 8013d12:	1ad2      	subs	r2, r2, r3
 8013d14:	693b      	ldr	r3, [r7, #16]
 8013d16:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013d18:	693b      	ldr	r3, [r7, #16]
 8013d1a:	68da      	ldr	r2, [r3, #12]
 8013d1c:	693b      	ldr	r3, [r7, #16]
 8013d1e:	689b      	ldr	r3, [r3, #8]
 8013d20:	4293      	cmp	r3, r2
 8013d22:	bf28      	it	cs
 8013d24:	4613      	movcs	r3, r2
 8013d26:	461a      	mov	r2, r3
 8013d28:	6879      	ldr	r1, [r7, #4]
 8013d2a:	68f8      	ldr	r0, [r7, #12]
 8013d2c:	f001 f992 	bl	8015054 <USBD_CtlContinueRx>
 8013d30:	e07d      	b.n	8013e2e <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013d38:	f003 031f 	and.w	r3, r3, #31
 8013d3c:	2b02      	cmp	r3, #2
 8013d3e:	d014      	beq.n	8013d6a <USBD_LL_DataOutStage+0x98>
 8013d40:	2b02      	cmp	r3, #2
 8013d42:	d81d      	bhi.n	8013d80 <USBD_LL_DataOutStage+0xae>
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d002      	beq.n	8013d4e <USBD_LL_DataOutStage+0x7c>
 8013d48:	2b01      	cmp	r3, #1
 8013d4a:	d003      	beq.n	8013d54 <USBD_LL_DataOutStage+0x82>
 8013d4c:	e018      	b.n	8013d80 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8013d4e:	2300      	movs	r3, #0
 8013d50:	75bb      	strb	r3, [r7, #22]
            break;
 8013d52:	e018      	b.n	8013d86 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8013d5a:	b2db      	uxtb	r3, r3
 8013d5c:	4619      	mov	r1, r3
 8013d5e:	68f8      	ldr	r0, [r7, #12]
 8013d60:	f000 fa5e 	bl	8014220 <USBD_CoreFindIF>
 8013d64:	4603      	mov	r3, r0
 8013d66:	75bb      	strb	r3, [r7, #22]
            break;
 8013d68:	e00d      	b.n	8013d86 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8013d70:	b2db      	uxtb	r3, r3
 8013d72:	4619      	mov	r1, r3
 8013d74:	68f8      	ldr	r0, [r7, #12]
 8013d76:	f000 fa60 	bl	801423a <USBD_CoreFindEP>
 8013d7a:	4603      	mov	r3, r0
 8013d7c:	75bb      	strb	r3, [r7, #22]
            break;
 8013d7e:	e002      	b.n	8013d86 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8013d80:	2300      	movs	r3, #0
 8013d82:	75bb      	strb	r3, [r7, #22]
            break;
 8013d84:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8013d86:	7dbb      	ldrb	r3, [r7, #22]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d119      	bne.n	8013dc0 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013d92:	b2db      	uxtb	r3, r3
 8013d94:	2b03      	cmp	r3, #3
 8013d96:	d113      	bne.n	8013dc0 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8013d98:	7dba      	ldrb	r2, [r7, #22]
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	32ae      	adds	r2, #174	; 0xae
 8013d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013da2:	691b      	ldr	r3, [r3, #16]
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d00b      	beq.n	8013dc0 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8013da8:	7dba      	ldrb	r2, [r7, #22]
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8013db0:	7dba      	ldrb	r2, [r7, #22]
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	32ae      	adds	r2, #174	; 0xae
 8013db6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013dba:	691b      	ldr	r3, [r3, #16]
 8013dbc:	68f8      	ldr	r0, [r7, #12]
 8013dbe:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013dc0:	68f8      	ldr	r0, [r7, #12]
 8013dc2:	f001 f958 	bl	8015076 <USBD_CtlSendStatus>
 8013dc6:	e032      	b.n	8013e2e <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8013dc8:	7afb      	ldrb	r3, [r7, #11]
 8013dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013dce:	b2db      	uxtb	r3, r3
 8013dd0:	4619      	mov	r1, r3
 8013dd2:	68f8      	ldr	r0, [r7, #12]
 8013dd4:	f000 fa31 	bl	801423a <USBD_CoreFindEP>
 8013dd8:	4603      	mov	r3, r0
 8013dda:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013ddc:	7dbb      	ldrb	r3, [r7, #22]
 8013dde:	2bff      	cmp	r3, #255	; 0xff
 8013de0:	d025      	beq.n	8013e2e <USBD_LL_DataOutStage+0x15c>
 8013de2:	7dbb      	ldrb	r3, [r7, #22]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d122      	bne.n	8013e2e <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013dee:	b2db      	uxtb	r3, r3
 8013df0:	2b03      	cmp	r3, #3
 8013df2:	d117      	bne.n	8013e24 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8013df4:	7dba      	ldrb	r2, [r7, #22]
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	32ae      	adds	r2, #174	; 0xae
 8013dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013dfe:	699b      	ldr	r3, [r3, #24]
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	d00f      	beq.n	8013e24 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8013e04:	7dba      	ldrb	r2, [r7, #22]
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8013e0c:	7dba      	ldrb	r2, [r7, #22]
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	32ae      	adds	r2, #174	; 0xae
 8013e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e16:	699b      	ldr	r3, [r3, #24]
 8013e18:	7afa      	ldrb	r2, [r7, #11]
 8013e1a:	4611      	mov	r1, r2
 8013e1c:	68f8      	ldr	r0, [r7, #12]
 8013e1e:	4798      	blx	r3
 8013e20:	4603      	mov	r3, r0
 8013e22:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8013e24:	7dfb      	ldrb	r3, [r7, #23]
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d001      	beq.n	8013e2e <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8013e2a:	7dfb      	ldrb	r3, [r7, #23]
 8013e2c:	e000      	b.n	8013e30 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8013e2e:	2300      	movs	r3, #0
}
 8013e30:	4618      	mov	r0, r3
 8013e32:	3718      	adds	r7, #24
 8013e34:	46bd      	mov	sp, r7
 8013e36:	bd80      	pop	{r7, pc}

08013e38 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013e38:	b580      	push	{r7, lr}
 8013e3a:	b086      	sub	sp, #24
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	60f8      	str	r0, [r7, #12]
 8013e40:	460b      	mov	r3, r1
 8013e42:	607a      	str	r2, [r7, #4]
 8013e44:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8013e46:	7afb      	ldrb	r3, [r7, #11]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d16f      	bne.n	8013f2c <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	3314      	adds	r3, #20
 8013e50:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013e58:	2b02      	cmp	r3, #2
 8013e5a:	d15a      	bne.n	8013f12 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8013e5c:	693b      	ldr	r3, [r7, #16]
 8013e5e:	689a      	ldr	r2, [r3, #8]
 8013e60:	693b      	ldr	r3, [r7, #16]
 8013e62:	68db      	ldr	r3, [r3, #12]
 8013e64:	429a      	cmp	r2, r3
 8013e66:	d914      	bls.n	8013e92 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013e68:	693b      	ldr	r3, [r7, #16]
 8013e6a:	689a      	ldr	r2, [r3, #8]
 8013e6c:	693b      	ldr	r3, [r7, #16]
 8013e6e:	68db      	ldr	r3, [r3, #12]
 8013e70:	1ad2      	subs	r2, r2, r3
 8013e72:	693b      	ldr	r3, [r7, #16]
 8013e74:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013e76:	693b      	ldr	r3, [r7, #16]
 8013e78:	689b      	ldr	r3, [r3, #8]
 8013e7a:	461a      	mov	r2, r3
 8013e7c:	6879      	ldr	r1, [r7, #4]
 8013e7e:	68f8      	ldr	r0, [r7, #12]
 8013e80:	f001 f8d7 	bl	8015032 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013e84:	2300      	movs	r3, #0
 8013e86:	2200      	movs	r2, #0
 8013e88:	2100      	movs	r1, #0
 8013e8a:	68f8      	ldr	r0, [r7, #12]
 8013e8c:	f004 fcdd 	bl	801884a <USBD_LL_PrepareReceive>
 8013e90:	e03f      	b.n	8013f12 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013e92:	693b      	ldr	r3, [r7, #16]
 8013e94:	68da      	ldr	r2, [r3, #12]
 8013e96:	693b      	ldr	r3, [r7, #16]
 8013e98:	689b      	ldr	r3, [r3, #8]
 8013e9a:	429a      	cmp	r2, r3
 8013e9c:	d11c      	bne.n	8013ed8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013e9e:	693b      	ldr	r3, [r7, #16]
 8013ea0:	685a      	ldr	r2, [r3, #4]
 8013ea2:	693b      	ldr	r3, [r7, #16]
 8013ea4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013ea6:	429a      	cmp	r2, r3
 8013ea8:	d316      	bcc.n	8013ed8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013eaa:	693b      	ldr	r3, [r7, #16]
 8013eac:	685a      	ldr	r2, [r3, #4]
 8013eae:	68fb      	ldr	r3, [r7, #12]
 8013eb0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013eb4:	429a      	cmp	r2, r3
 8013eb6:	d20f      	bcs.n	8013ed8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013eb8:	2200      	movs	r2, #0
 8013eba:	2100      	movs	r1, #0
 8013ebc:	68f8      	ldr	r0, [r7, #12]
 8013ebe:	f001 f8b8 	bl	8015032 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	2200      	movs	r2, #0
 8013ec6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013eca:	2300      	movs	r3, #0
 8013ecc:	2200      	movs	r2, #0
 8013ece:	2100      	movs	r1, #0
 8013ed0:	68f8      	ldr	r0, [r7, #12]
 8013ed2:	f004 fcba 	bl	801884a <USBD_LL_PrepareReceive>
 8013ed6:	e01c      	b.n	8013f12 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013ede:	b2db      	uxtb	r3, r3
 8013ee0:	2b03      	cmp	r3, #3
 8013ee2:	d10f      	bne.n	8013f04 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013eea:	68db      	ldr	r3, [r3, #12]
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d009      	beq.n	8013f04 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	2200      	movs	r2, #0
 8013ef4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013efe:	68db      	ldr	r3, [r3, #12]
 8013f00:	68f8      	ldr	r0, [r7, #12]
 8013f02:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013f04:	2180      	movs	r1, #128	; 0x80
 8013f06:	68f8      	ldr	r0, [r7, #12]
 8013f08:	f004 fbf5 	bl	80186f6 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013f0c:	68f8      	ldr	r0, [r7, #12]
 8013f0e:	f001 f8c5 	bl	801509c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8013f18:	2b00      	cmp	r3, #0
 8013f1a:	d03a      	beq.n	8013f92 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8013f1c:	68f8      	ldr	r0, [r7, #12]
 8013f1e:	f7ff fe42 	bl	8013ba6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	2200      	movs	r2, #0
 8013f26:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013f2a:	e032      	b.n	8013f92 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8013f2c:	7afb      	ldrb	r3, [r7, #11]
 8013f2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013f32:	b2db      	uxtb	r3, r3
 8013f34:	4619      	mov	r1, r3
 8013f36:	68f8      	ldr	r0, [r7, #12]
 8013f38:	f000 f97f 	bl	801423a <USBD_CoreFindEP>
 8013f3c:	4603      	mov	r3, r0
 8013f3e:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013f40:	7dfb      	ldrb	r3, [r7, #23]
 8013f42:	2bff      	cmp	r3, #255	; 0xff
 8013f44:	d025      	beq.n	8013f92 <USBD_LL_DataInStage+0x15a>
 8013f46:	7dfb      	ldrb	r3, [r7, #23]
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d122      	bne.n	8013f92 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013f52:	b2db      	uxtb	r3, r3
 8013f54:	2b03      	cmp	r3, #3
 8013f56:	d11c      	bne.n	8013f92 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8013f58:	7dfa      	ldrb	r2, [r7, #23]
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	32ae      	adds	r2, #174	; 0xae
 8013f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f62:	695b      	ldr	r3, [r3, #20]
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d014      	beq.n	8013f92 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8013f68:	7dfa      	ldrb	r2, [r7, #23]
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8013f70:	7dfa      	ldrb	r2, [r7, #23]
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	32ae      	adds	r2, #174	; 0xae
 8013f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f7a:	695b      	ldr	r3, [r3, #20]
 8013f7c:	7afa      	ldrb	r2, [r7, #11]
 8013f7e:	4611      	mov	r1, r2
 8013f80:	68f8      	ldr	r0, [r7, #12]
 8013f82:	4798      	blx	r3
 8013f84:	4603      	mov	r3, r0
 8013f86:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8013f88:	7dbb      	ldrb	r3, [r7, #22]
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d001      	beq.n	8013f92 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8013f8e:	7dbb      	ldrb	r3, [r7, #22]
 8013f90:	e000      	b.n	8013f94 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8013f92:	2300      	movs	r3, #0
}
 8013f94:	4618      	mov	r0, r3
 8013f96:	3718      	adds	r7, #24
 8013f98:	46bd      	mov	sp, r7
 8013f9a:	bd80      	pop	{r7, pc}

08013f9c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013f9c:	b580      	push	{r7, lr}
 8013f9e:	b084      	sub	sp, #16
 8013fa0:	af00      	add	r7, sp, #0
 8013fa2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	2201      	movs	r2, #1
 8013fac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	2200      	movs	r2, #0
 8013fb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	2200      	movs	r2, #0
 8013fbc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	2200      	movs	r2, #0
 8013fc2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	2200      	movs	r2, #0
 8013fca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d014      	beq.n	8014002 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013fde:	685b      	ldr	r3, [r3, #4]
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d00e      	beq.n	8014002 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013fea:	685b      	ldr	r3, [r3, #4]
 8013fec:	687a      	ldr	r2, [r7, #4]
 8013fee:	6852      	ldr	r2, [r2, #4]
 8013ff0:	b2d2      	uxtb	r2, r2
 8013ff2:	4611      	mov	r1, r2
 8013ff4:	6878      	ldr	r0, [r7, #4]
 8013ff6:	4798      	blx	r3
 8013ff8:	4603      	mov	r3, r0
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d001      	beq.n	8014002 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8013ffe:	2303      	movs	r3, #3
 8014000:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014002:	2340      	movs	r3, #64	; 0x40
 8014004:	2200      	movs	r2, #0
 8014006:	2100      	movs	r1, #0
 8014008:	6878      	ldr	r0, [r7, #4]
 801400a:	f004 fb10 	bl	801862e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	2201      	movs	r2, #1
 8014012:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	2240      	movs	r2, #64	; 0x40
 801401a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801401e:	2340      	movs	r3, #64	; 0x40
 8014020:	2200      	movs	r2, #0
 8014022:	2180      	movs	r1, #128	; 0x80
 8014024:	6878      	ldr	r0, [r7, #4]
 8014026:	f004 fb02 	bl	801862e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	2201      	movs	r2, #1
 801402e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	2240      	movs	r2, #64	; 0x40
 8014034:	621a      	str	r2, [r3, #32]

  return ret;
 8014036:	7bfb      	ldrb	r3, [r7, #15]
}
 8014038:	4618      	mov	r0, r3
 801403a:	3710      	adds	r7, #16
 801403c:	46bd      	mov	sp, r7
 801403e:	bd80      	pop	{r7, pc}

08014040 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8014040:	b480      	push	{r7}
 8014042:	b083      	sub	sp, #12
 8014044:	af00      	add	r7, sp, #0
 8014046:	6078      	str	r0, [r7, #4]
 8014048:	460b      	mov	r3, r1
 801404a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	78fa      	ldrb	r2, [r7, #3]
 8014050:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8014052:	2300      	movs	r3, #0
}
 8014054:	4618      	mov	r0, r3
 8014056:	370c      	adds	r7, #12
 8014058:	46bd      	mov	sp, r7
 801405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801405e:	4770      	bx	lr

08014060 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8014060:	b480      	push	{r7}
 8014062:	b083      	sub	sp, #12
 8014064:	af00      	add	r7, sp, #0
 8014066:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801406e:	b2da      	uxtb	r2, r3
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	2204      	movs	r2, #4
 801407a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801407e:	2300      	movs	r3, #0
}
 8014080:	4618      	mov	r0, r3
 8014082:	370c      	adds	r7, #12
 8014084:	46bd      	mov	sp, r7
 8014086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801408a:	4770      	bx	lr

0801408c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801408c:	b480      	push	{r7}
 801408e:	b083      	sub	sp, #12
 8014090:	af00      	add	r7, sp, #0
 8014092:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801409a:	b2db      	uxtb	r3, r3
 801409c:	2b04      	cmp	r3, #4
 801409e:	d106      	bne.n	80140ae <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80140a6:	b2da      	uxtb	r2, r3
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80140ae:	2300      	movs	r3, #0
}
 80140b0:	4618      	mov	r0, r3
 80140b2:	370c      	adds	r7, #12
 80140b4:	46bd      	mov	sp, r7
 80140b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ba:	4770      	bx	lr

080140bc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80140bc:	b580      	push	{r7, lr}
 80140be:	b082      	sub	sp, #8
 80140c0:	af00      	add	r7, sp, #0
 80140c2:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80140ca:	b2db      	uxtb	r3, r3
 80140cc:	2b03      	cmp	r3, #3
 80140ce:	d110      	bne.n	80140f2 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d00b      	beq.n	80140f2 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80140e0:	69db      	ldr	r3, [r3, #28]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d005      	beq.n	80140f2 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80140ec:	69db      	ldr	r3, [r3, #28]
 80140ee:	6878      	ldr	r0, [r7, #4]
 80140f0:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80140f2:	2300      	movs	r3, #0
}
 80140f4:	4618      	mov	r0, r3
 80140f6:	3708      	adds	r7, #8
 80140f8:	46bd      	mov	sp, r7
 80140fa:	bd80      	pop	{r7, pc}

080140fc <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80140fc:	b580      	push	{r7, lr}
 80140fe:	b082      	sub	sp, #8
 8014100:	af00      	add	r7, sp, #0
 8014102:	6078      	str	r0, [r7, #4]
 8014104:	460b      	mov	r3, r1
 8014106:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	32ae      	adds	r2, #174	; 0xae
 8014112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014116:	2b00      	cmp	r3, #0
 8014118:	d101      	bne.n	801411e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801411a:	2303      	movs	r3, #3
 801411c:	e01c      	b.n	8014158 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014124:	b2db      	uxtb	r3, r3
 8014126:	2b03      	cmp	r3, #3
 8014128:	d115      	bne.n	8014156 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	32ae      	adds	r2, #174	; 0xae
 8014134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014138:	6a1b      	ldr	r3, [r3, #32]
 801413a:	2b00      	cmp	r3, #0
 801413c:	d00b      	beq.n	8014156 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	32ae      	adds	r2, #174	; 0xae
 8014148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801414c:	6a1b      	ldr	r3, [r3, #32]
 801414e:	78fa      	ldrb	r2, [r7, #3]
 8014150:	4611      	mov	r1, r2
 8014152:	6878      	ldr	r0, [r7, #4]
 8014154:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014156:	2300      	movs	r3, #0
}
 8014158:	4618      	mov	r0, r3
 801415a:	3708      	adds	r7, #8
 801415c:	46bd      	mov	sp, r7
 801415e:	bd80      	pop	{r7, pc}

08014160 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8014160:	b580      	push	{r7, lr}
 8014162:	b082      	sub	sp, #8
 8014164:	af00      	add	r7, sp, #0
 8014166:	6078      	str	r0, [r7, #4]
 8014168:	460b      	mov	r3, r1
 801416a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	32ae      	adds	r2, #174	; 0xae
 8014176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801417a:	2b00      	cmp	r3, #0
 801417c:	d101      	bne.n	8014182 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 801417e:	2303      	movs	r3, #3
 8014180:	e01c      	b.n	80141bc <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014188:	b2db      	uxtb	r3, r3
 801418a:	2b03      	cmp	r3, #3
 801418c:	d115      	bne.n	80141ba <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	32ae      	adds	r2, #174	; 0xae
 8014198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d00b      	beq.n	80141ba <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	32ae      	adds	r2, #174	; 0xae
 80141ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80141b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141b2:	78fa      	ldrb	r2, [r7, #3]
 80141b4:	4611      	mov	r1, r2
 80141b6:	6878      	ldr	r0, [r7, #4]
 80141b8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80141ba:	2300      	movs	r3, #0
}
 80141bc:	4618      	mov	r0, r3
 80141be:	3708      	adds	r7, #8
 80141c0:	46bd      	mov	sp, r7
 80141c2:	bd80      	pop	{r7, pc}

080141c4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80141c4:	b480      	push	{r7}
 80141c6:	b083      	sub	sp, #12
 80141c8:	af00      	add	r7, sp, #0
 80141ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80141cc:	2300      	movs	r3, #0
}
 80141ce:	4618      	mov	r0, r3
 80141d0:	370c      	adds	r7, #12
 80141d2:	46bd      	mov	sp, r7
 80141d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d8:	4770      	bx	lr

080141da <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80141da:	b580      	push	{r7, lr}
 80141dc:	b084      	sub	sp, #16
 80141de:	af00      	add	r7, sp, #0
 80141e0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80141e2:	2300      	movs	r3, #0
 80141e4:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	2201      	movs	r2, #1
 80141ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d00e      	beq.n	8014216 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80141fe:	685b      	ldr	r3, [r3, #4]
 8014200:	687a      	ldr	r2, [r7, #4]
 8014202:	6852      	ldr	r2, [r2, #4]
 8014204:	b2d2      	uxtb	r2, r2
 8014206:	4611      	mov	r1, r2
 8014208:	6878      	ldr	r0, [r7, #4]
 801420a:	4798      	blx	r3
 801420c:	4603      	mov	r3, r0
 801420e:	2b00      	cmp	r3, #0
 8014210:	d001      	beq.n	8014216 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8014212:	2303      	movs	r3, #3
 8014214:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014216:	7bfb      	ldrb	r3, [r7, #15]
}
 8014218:	4618      	mov	r0, r3
 801421a:	3710      	adds	r7, #16
 801421c:	46bd      	mov	sp, r7
 801421e:	bd80      	pop	{r7, pc}

08014220 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8014220:	b480      	push	{r7}
 8014222:	b083      	sub	sp, #12
 8014224:	af00      	add	r7, sp, #0
 8014226:	6078      	str	r0, [r7, #4]
 8014228:	460b      	mov	r3, r1
 801422a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801422c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801422e:	4618      	mov	r0, r3
 8014230:	370c      	adds	r7, #12
 8014232:	46bd      	mov	sp, r7
 8014234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014238:	4770      	bx	lr

0801423a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801423a:	b480      	push	{r7}
 801423c:	b083      	sub	sp, #12
 801423e:	af00      	add	r7, sp, #0
 8014240:	6078      	str	r0, [r7, #4]
 8014242:	460b      	mov	r3, r1
 8014244:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8014246:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8014248:	4618      	mov	r0, r3
 801424a:	370c      	adds	r7, #12
 801424c:	46bd      	mov	sp, r7
 801424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014252:	4770      	bx	lr

08014254 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8014254:	b580      	push	{r7, lr}
 8014256:	b086      	sub	sp, #24
 8014258:	af00      	add	r7, sp, #0
 801425a:	6078      	str	r0, [r7, #4]
 801425c:	460b      	mov	r3, r1
 801425e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8014268:	2300      	movs	r3, #0
 801426a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	885b      	ldrh	r3, [r3, #2]
 8014270:	b29a      	uxth	r2, r3
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	781b      	ldrb	r3, [r3, #0]
 8014276:	b29b      	uxth	r3, r3
 8014278:	429a      	cmp	r2, r3
 801427a:	d920      	bls.n	80142be <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	781b      	ldrb	r3, [r3, #0]
 8014280:	b29b      	uxth	r3, r3
 8014282:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8014284:	e013      	b.n	80142ae <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8014286:	f107 030a 	add.w	r3, r7, #10
 801428a:	4619      	mov	r1, r3
 801428c:	6978      	ldr	r0, [r7, #20]
 801428e:	f000 f81b 	bl	80142c8 <USBD_GetNextDesc>
 8014292:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8014294:	697b      	ldr	r3, [r7, #20]
 8014296:	785b      	ldrb	r3, [r3, #1]
 8014298:	2b05      	cmp	r3, #5
 801429a:	d108      	bne.n	80142ae <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801429c:	697b      	ldr	r3, [r7, #20]
 801429e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80142a0:	693b      	ldr	r3, [r7, #16]
 80142a2:	789b      	ldrb	r3, [r3, #2]
 80142a4:	78fa      	ldrb	r2, [r7, #3]
 80142a6:	429a      	cmp	r2, r3
 80142a8:	d008      	beq.n	80142bc <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80142aa:	2300      	movs	r3, #0
 80142ac:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	885b      	ldrh	r3, [r3, #2]
 80142b2:	b29a      	uxth	r2, r3
 80142b4:	897b      	ldrh	r3, [r7, #10]
 80142b6:	429a      	cmp	r2, r3
 80142b8:	d8e5      	bhi.n	8014286 <USBD_GetEpDesc+0x32>
 80142ba:	e000      	b.n	80142be <USBD_GetEpDesc+0x6a>
          break;
 80142bc:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80142be:	693b      	ldr	r3, [r7, #16]
}
 80142c0:	4618      	mov	r0, r3
 80142c2:	3718      	adds	r7, #24
 80142c4:	46bd      	mov	sp, r7
 80142c6:	bd80      	pop	{r7, pc}

080142c8 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80142c8:	b480      	push	{r7}
 80142ca:	b085      	sub	sp, #20
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	6078      	str	r0, [r7, #4]
 80142d0:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80142d6:	683b      	ldr	r3, [r7, #0]
 80142d8:	881a      	ldrh	r2, [r3, #0]
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	781b      	ldrb	r3, [r3, #0]
 80142de:	b29b      	uxth	r3, r3
 80142e0:	4413      	add	r3, r2
 80142e2:	b29a      	uxth	r2, r3
 80142e4:	683b      	ldr	r3, [r7, #0]
 80142e6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80142e8:	68fb      	ldr	r3, [r7, #12]
 80142ea:	781b      	ldrb	r3, [r3, #0]
 80142ec:	461a      	mov	r2, r3
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	4413      	add	r3, r2
 80142f2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80142f4:	68fb      	ldr	r3, [r7, #12]
}
 80142f6:	4618      	mov	r0, r3
 80142f8:	3714      	adds	r7, #20
 80142fa:	46bd      	mov	sp, r7
 80142fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014300:	4770      	bx	lr

08014302 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8014302:	b480      	push	{r7}
 8014304:	b087      	sub	sp, #28
 8014306:	af00      	add	r7, sp, #0
 8014308:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801430e:	697b      	ldr	r3, [r7, #20]
 8014310:	781b      	ldrb	r3, [r3, #0]
 8014312:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8014314:	697b      	ldr	r3, [r7, #20]
 8014316:	3301      	adds	r3, #1
 8014318:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801431a:	697b      	ldr	r3, [r7, #20]
 801431c:	781b      	ldrb	r3, [r3, #0]
 801431e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8014320:	8a3b      	ldrh	r3, [r7, #16]
 8014322:	021b      	lsls	r3, r3, #8
 8014324:	b21a      	sxth	r2, r3
 8014326:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801432a:	4313      	orrs	r3, r2
 801432c:	b21b      	sxth	r3, r3
 801432e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8014330:	89fb      	ldrh	r3, [r7, #14]
}
 8014332:	4618      	mov	r0, r3
 8014334:	371c      	adds	r7, #28
 8014336:	46bd      	mov	sp, r7
 8014338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801433c:	4770      	bx	lr
	...

08014340 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014340:	b580      	push	{r7, lr}
 8014342:	b084      	sub	sp, #16
 8014344:	af00      	add	r7, sp, #0
 8014346:	6078      	str	r0, [r7, #4]
 8014348:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801434a:	2300      	movs	r3, #0
 801434c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801434e:	683b      	ldr	r3, [r7, #0]
 8014350:	781b      	ldrb	r3, [r3, #0]
 8014352:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014356:	2b40      	cmp	r3, #64	; 0x40
 8014358:	d005      	beq.n	8014366 <USBD_StdDevReq+0x26>
 801435a:	2b40      	cmp	r3, #64	; 0x40
 801435c:	d857      	bhi.n	801440e <USBD_StdDevReq+0xce>
 801435e:	2b00      	cmp	r3, #0
 8014360:	d00f      	beq.n	8014382 <USBD_StdDevReq+0x42>
 8014362:	2b20      	cmp	r3, #32
 8014364:	d153      	bne.n	801440e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	32ae      	adds	r2, #174	; 0xae
 8014370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014374:	689b      	ldr	r3, [r3, #8]
 8014376:	6839      	ldr	r1, [r7, #0]
 8014378:	6878      	ldr	r0, [r7, #4]
 801437a:	4798      	blx	r3
 801437c:	4603      	mov	r3, r0
 801437e:	73fb      	strb	r3, [r7, #15]
      break;
 8014380:	e04a      	b.n	8014418 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014382:	683b      	ldr	r3, [r7, #0]
 8014384:	785b      	ldrb	r3, [r3, #1]
 8014386:	2b09      	cmp	r3, #9
 8014388:	d83b      	bhi.n	8014402 <USBD_StdDevReq+0xc2>
 801438a:	a201      	add	r2, pc, #4	; (adr r2, 8014390 <USBD_StdDevReq+0x50>)
 801438c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014390:	080143e5 	.word	0x080143e5
 8014394:	080143f9 	.word	0x080143f9
 8014398:	08014403 	.word	0x08014403
 801439c:	080143ef 	.word	0x080143ef
 80143a0:	08014403 	.word	0x08014403
 80143a4:	080143c3 	.word	0x080143c3
 80143a8:	080143b9 	.word	0x080143b9
 80143ac:	08014403 	.word	0x08014403
 80143b0:	080143db 	.word	0x080143db
 80143b4:	080143cd 	.word	0x080143cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80143b8:	6839      	ldr	r1, [r7, #0]
 80143ba:	6878      	ldr	r0, [r7, #4]
 80143bc:	f000 fa3c 	bl	8014838 <USBD_GetDescriptor>
          break;
 80143c0:	e024      	b.n	801440c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80143c2:	6839      	ldr	r1, [r7, #0]
 80143c4:	6878      	ldr	r0, [r7, #4]
 80143c6:	f000 fbcb 	bl	8014b60 <USBD_SetAddress>
          break;
 80143ca:	e01f      	b.n	801440c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80143cc:	6839      	ldr	r1, [r7, #0]
 80143ce:	6878      	ldr	r0, [r7, #4]
 80143d0:	f000 fc0a 	bl	8014be8 <USBD_SetConfig>
 80143d4:	4603      	mov	r3, r0
 80143d6:	73fb      	strb	r3, [r7, #15]
          break;
 80143d8:	e018      	b.n	801440c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80143da:	6839      	ldr	r1, [r7, #0]
 80143dc:	6878      	ldr	r0, [r7, #4]
 80143de:	f000 fcad 	bl	8014d3c <USBD_GetConfig>
          break;
 80143e2:	e013      	b.n	801440c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80143e4:	6839      	ldr	r1, [r7, #0]
 80143e6:	6878      	ldr	r0, [r7, #4]
 80143e8:	f000 fcde 	bl	8014da8 <USBD_GetStatus>
          break;
 80143ec:	e00e      	b.n	801440c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80143ee:	6839      	ldr	r1, [r7, #0]
 80143f0:	6878      	ldr	r0, [r7, #4]
 80143f2:	f000 fd0d 	bl	8014e10 <USBD_SetFeature>
          break;
 80143f6:	e009      	b.n	801440c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80143f8:	6839      	ldr	r1, [r7, #0]
 80143fa:	6878      	ldr	r0, [r7, #4]
 80143fc:	f000 fd31 	bl	8014e62 <USBD_ClrFeature>
          break;
 8014400:	e004      	b.n	801440c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8014402:	6839      	ldr	r1, [r7, #0]
 8014404:	6878      	ldr	r0, [r7, #4]
 8014406:	f000 fd88 	bl	8014f1a <USBD_CtlError>
          break;
 801440a:	bf00      	nop
      }
      break;
 801440c:	e004      	b.n	8014418 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801440e:	6839      	ldr	r1, [r7, #0]
 8014410:	6878      	ldr	r0, [r7, #4]
 8014412:	f000 fd82 	bl	8014f1a <USBD_CtlError>
      break;
 8014416:	bf00      	nop
  }

  return ret;
 8014418:	7bfb      	ldrb	r3, [r7, #15]
}
 801441a:	4618      	mov	r0, r3
 801441c:	3710      	adds	r7, #16
 801441e:	46bd      	mov	sp, r7
 8014420:	bd80      	pop	{r7, pc}
 8014422:	bf00      	nop

08014424 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014424:	b580      	push	{r7, lr}
 8014426:	b084      	sub	sp, #16
 8014428:	af00      	add	r7, sp, #0
 801442a:	6078      	str	r0, [r7, #4]
 801442c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801442e:	2300      	movs	r3, #0
 8014430:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014432:	683b      	ldr	r3, [r7, #0]
 8014434:	781b      	ldrb	r3, [r3, #0]
 8014436:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801443a:	2b40      	cmp	r3, #64	; 0x40
 801443c:	d005      	beq.n	801444a <USBD_StdItfReq+0x26>
 801443e:	2b40      	cmp	r3, #64	; 0x40
 8014440:	d852      	bhi.n	80144e8 <USBD_StdItfReq+0xc4>
 8014442:	2b00      	cmp	r3, #0
 8014444:	d001      	beq.n	801444a <USBD_StdItfReq+0x26>
 8014446:	2b20      	cmp	r3, #32
 8014448:	d14e      	bne.n	80144e8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014450:	b2db      	uxtb	r3, r3
 8014452:	3b01      	subs	r3, #1
 8014454:	2b02      	cmp	r3, #2
 8014456:	d840      	bhi.n	80144da <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014458:	683b      	ldr	r3, [r7, #0]
 801445a:	889b      	ldrh	r3, [r3, #4]
 801445c:	b2db      	uxtb	r3, r3
 801445e:	2b01      	cmp	r3, #1
 8014460:	d836      	bhi.n	80144d0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8014462:	683b      	ldr	r3, [r7, #0]
 8014464:	889b      	ldrh	r3, [r3, #4]
 8014466:	b2db      	uxtb	r3, r3
 8014468:	4619      	mov	r1, r3
 801446a:	6878      	ldr	r0, [r7, #4]
 801446c:	f7ff fed8 	bl	8014220 <USBD_CoreFindIF>
 8014470:	4603      	mov	r3, r0
 8014472:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014474:	7bbb      	ldrb	r3, [r7, #14]
 8014476:	2bff      	cmp	r3, #255	; 0xff
 8014478:	d01d      	beq.n	80144b6 <USBD_StdItfReq+0x92>
 801447a:	7bbb      	ldrb	r3, [r7, #14]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d11a      	bne.n	80144b6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8014480:	7bba      	ldrb	r2, [r7, #14]
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	32ae      	adds	r2, #174	; 0xae
 8014486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801448a:	689b      	ldr	r3, [r3, #8]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d00f      	beq.n	80144b0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8014490:	7bba      	ldrb	r2, [r7, #14]
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014498:	7bba      	ldrb	r2, [r7, #14]
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	32ae      	adds	r2, #174	; 0xae
 801449e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144a2:	689b      	ldr	r3, [r3, #8]
 80144a4:	6839      	ldr	r1, [r7, #0]
 80144a6:	6878      	ldr	r0, [r7, #4]
 80144a8:	4798      	blx	r3
 80144aa:	4603      	mov	r3, r0
 80144ac:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80144ae:	e004      	b.n	80144ba <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80144b0:	2303      	movs	r3, #3
 80144b2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80144b4:	e001      	b.n	80144ba <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80144b6:	2303      	movs	r3, #3
 80144b8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80144ba:	683b      	ldr	r3, [r7, #0]
 80144bc:	88db      	ldrh	r3, [r3, #6]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d110      	bne.n	80144e4 <USBD_StdItfReq+0xc0>
 80144c2:	7bfb      	ldrb	r3, [r7, #15]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d10d      	bne.n	80144e4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80144c8:	6878      	ldr	r0, [r7, #4]
 80144ca:	f000 fdd4 	bl	8015076 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80144ce:	e009      	b.n	80144e4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80144d0:	6839      	ldr	r1, [r7, #0]
 80144d2:	6878      	ldr	r0, [r7, #4]
 80144d4:	f000 fd21 	bl	8014f1a <USBD_CtlError>
          break;
 80144d8:	e004      	b.n	80144e4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80144da:	6839      	ldr	r1, [r7, #0]
 80144dc:	6878      	ldr	r0, [r7, #4]
 80144de:	f000 fd1c 	bl	8014f1a <USBD_CtlError>
          break;
 80144e2:	e000      	b.n	80144e6 <USBD_StdItfReq+0xc2>
          break;
 80144e4:	bf00      	nop
      }
      break;
 80144e6:	e004      	b.n	80144f2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80144e8:	6839      	ldr	r1, [r7, #0]
 80144ea:	6878      	ldr	r0, [r7, #4]
 80144ec:	f000 fd15 	bl	8014f1a <USBD_CtlError>
      break;
 80144f0:	bf00      	nop
  }

  return ret;
 80144f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80144f4:	4618      	mov	r0, r3
 80144f6:	3710      	adds	r7, #16
 80144f8:	46bd      	mov	sp, r7
 80144fa:	bd80      	pop	{r7, pc}

080144fc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80144fc:	b580      	push	{r7, lr}
 80144fe:	b084      	sub	sp, #16
 8014500:	af00      	add	r7, sp, #0
 8014502:	6078      	str	r0, [r7, #4]
 8014504:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8014506:	2300      	movs	r3, #0
 8014508:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801450a:	683b      	ldr	r3, [r7, #0]
 801450c:	889b      	ldrh	r3, [r3, #4]
 801450e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014510:	683b      	ldr	r3, [r7, #0]
 8014512:	781b      	ldrb	r3, [r3, #0]
 8014514:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014518:	2b40      	cmp	r3, #64	; 0x40
 801451a:	d007      	beq.n	801452c <USBD_StdEPReq+0x30>
 801451c:	2b40      	cmp	r3, #64	; 0x40
 801451e:	f200 817f 	bhi.w	8014820 <USBD_StdEPReq+0x324>
 8014522:	2b00      	cmp	r3, #0
 8014524:	d02a      	beq.n	801457c <USBD_StdEPReq+0x80>
 8014526:	2b20      	cmp	r3, #32
 8014528:	f040 817a 	bne.w	8014820 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801452c:	7bbb      	ldrb	r3, [r7, #14]
 801452e:	4619      	mov	r1, r3
 8014530:	6878      	ldr	r0, [r7, #4]
 8014532:	f7ff fe82 	bl	801423a <USBD_CoreFindEP>
 8014536:	4603      	mov	r3, r0
 8014538:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801453a:	7b7b      	ldrb	r3, [r7, #13]
 801453c:	2bff      	cmp	r3, #255	; 0xff
 801453e:	f000 8174 	beq.w	801482a <USBD_StdEPReq+0x32e>
 8014542:	7b7b      	ldrb	r3, [r7, #13]
 8014544:	2b00      	cmp	r3, #0
 8014546:	f040 8170 	bne.w	801482a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801454a:	7b7a      	ldrb	r2, [r7, #13]
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8014552:	7b7a      	ldrb	r2, [r7, #13]
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	32ae      	adds	r2, #174	; 0xae
 8014558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801455c:	689b      	ldr	r3, [r3, #8]
 801455e:	2b00      	cmp	r3, #0
 8014560:	f000 8163 	beq.w	801482a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8014564:	7b7a      	ldrb	r2, [r7, #13]
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	32ae      	adds	r2, #174	; 0xae
 801456a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801456e:	689b      	ldr	r3, [r3, #8]
 8014570:	6839      	ldr	r1, [r7, #0]
 8014572:	6878      	ldr	r0, [r7, #4]
 8014574:	4798      	blx	r3
 8014576:	4603      	mov	r3, r0
 8014578:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801457a:	e156      	b.n	801482a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801457c:	683b      	ldr	r3, [r7, #0]
 801457e:	785b      	ldrb	r3, [r3, #1]
 8014580:	2b03      	cmp	r3, #3
 8014582:	d008      	beq.n	8014596 <USBD_StdEPReq+0x9a>
 8014584:	2b03      	cmp	r3, #3
 8014586:	f300 8145 	bgt.w	8014814 <USBD_StdEPReq+0x318>
 801458a:	2b00      	cmp	r3, #0
 801458c:	f000 809b 	beq.w	80146c6 <USBD_StdEPReq+0x1ca>
 8014590:	2b01      	cmp	r3, #1
 8014592:	d03c      	beq.n	801460e <USBD_StdEPReq+0x112>
 8014594:	e13e      	b.n	8014814 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801459c:	b2db      	uxtb	r3, r3
 801459e:	2b02      	cmp	r3, #2
 80145a0:	d002      	beq.n	80145a8 <USBD_StdEPReq+0xac>
 80145a2:	2b03      	cmp	r3, #3
 80145a4:	d016      	beq.n	80145d4 <USBD_StdEPReq+0xd8>
 80145a6:	e02c      	b.n	8014602 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80145a8:	7bbb      	ldrb	r3, [r7, #14]
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d00d      	beq.n	80145ca <USBD_StdEPReq+0xce>
 80145ae:	7bbb      	ldrb	r3, [r7, #14]
 80145b0:	2b80      	cmp	r3, #128	; 0x80
 80145b2:	d00a      	beq.n	80145ca <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80145b4:	7bbb      	ldrb	r3, [r7, #14]
 80145b6:	4619      	mov	r1, r3
 80145b8:	6878      	ldr	r0, [r7, #4]
 80145ba:	f004 f89c 	bl	80186f6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80145be:	2180      	movs	r1, #128	; 0x80
 80145c0:	6878      	ldr	r0, [r7, #4]
 80145c2:	f004 f898 	bl	80186f6 <USBD_LL_StallEP>
 80145c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80145c8:	e020      	b.n	801460c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80145ca:	6839      	ldr	r1, [r7, #0]
 80145cc:	6878      	ldr	r0, [r7, #4]
 80145ce:	f000 fca4 	bl	8014f1a <USBD_CtlError>
              break;
 80145d2:	e01b      	b.n	801460c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80145d4:	683b      	ldr	r3, [r7, #0]
 80145d6:	885b      	ldrh	r3, [r3, #2]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d10e      	bne.n	80145fa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80145dc:	7bbb      	ldrb	r3, [r7, #14]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d00b      	beq.n	80145fa <USBD_StdEPReq+0xfe>
 80145e2:	7bbb      	ldrb	r3, [r7, #14]
 80145e4:	2b80      	cmp	r3, #128	; 0x80
 80145e6:	d008      	beq.n	80145fa <USBD_StdEPReq+0xfe>
 80145e8:	683b      	ldr	r3, [r7, #0]
 80145ea:	88db      	ldrh	r3, [r3, #6]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d104      	bne.n	80145fa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80145f0:	7bbb      	ldrb	r3, [r7, #14]
 80145f2:	4619      	mov	r1, r3
 80145f4:	6878      	ldr	r0, [r7, #4]
 80145f6:	f004 f87e 	bl	80186f6 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80145fa:	6878      	ldr	r0, [r7, #4]
 80145fc:	f000 fd3b 	bl	8015076 <USBD_CtlSendStatus>

              break;
 8014600:	e004      	b.n	801460c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8014602:	6839      	ldr	r1, [r7, #0]
 8014604:	6878      	ldr	r0, [r7, #4]
 8014606:	f000 fc88 	bl	8014f1a <USBD_CtlError>
              break;
 801460a:	bf00      	nop
          }
          break;
 801460c:	e107      	b.n	801481e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014614:	b2db      	uxtb	r3, r3
 8014616:	2b02      	cmp	r3, #2
 8014618:	d002      	beq.n	8014620 <USBD_StdEPReq+0x124>
 801461a:	2b03      	cmp	r3, #3
 801461c:	d016      	beq.n	801464c <USBD_StdEPReq+0x150>
 801461e:	e04b      	b.n	80146b8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014620:	7bbb      	ldrb	r3, [r7, #14]
 8014622:	2b00      	cmp	r3, #0
 8014624:	d00d      	beq.n	8014642 <USBD_StdEPReq+0x146>
 8014626:	7bbb      	ldrb	r3, [r7, #14]
 8014628:	2b80      	cmp	r3, #128	; 0x80
 801462a:	d00a      	beq.n	8014642 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801462c:	7bbb      	ldrb	r3, [r7, #14]
 801462e:	4619      	mov	r1, r3
 8014630:	6878      	ldr	r0, [r7, #4]
 8014632:	f004 f860 	bl	80186f6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014636:	2180      	movs	r1, #128	; 0x80
 8014638:	6878      	ldr	r0, [r7, #4]
 801463a:	f004 f85c 	bl	80186f6 <USBD_LL_StallEP>
 801463e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014640:	e040      	b.n	80146c4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8014642:	6839      	ldr	r1, [r7, #0]
 8014644:	6878      	ldr	r0, [r7, #4]
 8014646:	f000 fc68 	bl	8014f1a <USBD_CtlError>
              break;
 801464a:	e03b      	b.n	80146c4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801464c:	683b      	ldr	r3, [r7, #0]
 801464e:	885b      	ldrh	r3, [r3, #2]
 8014650:	2b00      	cmp	r3, #0
 8014652:	d136      	bne.n	80146c2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014654:	7bbb      	ldrb	r3, [r7, #14]
 8014656:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801465a:	2b00      	cmp	r3, #0
 801465c:	d004      	beq.n	8014668 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801465e:	7bbb      	ldrb	r3, [r7, #14]
 8014660:	4619      	mov	r1, r3
 8014662:	6878      	ldr	r0, [r7, #4]
 8014664:	f004 f866 	bl	8018734 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8014668:	6878      	ldr	r0, [r7, #4]
 801466a:	f000 fd04 	bl	8015076 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801466e:	7bbb      	ldrb	r3, [r7, #14]
 8014670:	4619      	mov	r1, r3
 8014672:	6878      	ldr	r0, [r7, #4]
 8014674:	f7ff fde1 	bl	801423a <USBD_CoreFindEP>
 8014678:	4603      	mov	r3, r0
 801467a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801467c:	7b7b      	ldrb	r3, [r7, #13]
 801467e:	2bff      	cmp	r3, #255	; 0xff
 8014680:	d01f      	beq.n	80146c2 <USBD_StdEPReq+0x1c6>
 8014682:	7b7b      	ldrb	r3, [r7, #13]
 8014684:	2b00      	cmp	r3, #0
 8014686:	d11c      	bne.n	80146c2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8014688:	7b7a      	ldrb	r2, [r7, #13]
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8014690:	7b7a      	ldrb	r2, [r7, #13]
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	32ae      	adds	r2, #174	; 0xae
 8014696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801469a:	689b      	ldr	r3, [r3, #8]
 801469c:	2b00      	cmp	r3, #0
 801469e:	d010      	beq.n	80146c2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80146a0:	7b7a      	ldrb	r2, [r7, #13]
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	32ae      	adds	r2, #174	; 0xae
 80146a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146aa:	689b      	ldr	r3, [r3, #8]
 80146ac:	6839      	ldr	r1, [r7, #0]
 80146ae:	6878      	ldr	r0, [r7, #4]
 80146b0:	4798      	blx	r3
 80146b2:	4603      	mov	r3, r0
 80146b4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80146b6:	e004      	b.n	80146c2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80146b8:	6839      	ldr	r1, [r7, #0]
 80146ba:	6878      	ldr	r0, [r7, #4]
 80146bc:	f000 fc2d 	bl	8014f1a <USBD_CtlError>
              break;
 80146c0:	e000      	b.n	80146c4 <USBD_StdEPReq+0x1c8>
              break;
 80146c2:	bf00      	nop
          }
          break;
 80146c4:	e0ab      	b.n	801481e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80146cc:	b2db      	uxtb	r3, r3
 80146ce:	2b02      	cmp	r3, #2
 80146d0:	d002      	beq.n	80146d8 <USBD_StdEPReq+0x1dc>
 80146d2:	2b03      	cmp	r3, #3
 80146d4:	d032      	beq.n	801473c <USBD_StdEPReq+0x240>
 80146d6:	e097      	b.n	8014808 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80146d8:	7bbb      	ldrb	r3, [r7, #14]
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d007      	beq.n	80146ee <USBD_StdEPReq+0x1f2>
 80146de:	7bbb      	ldrb	r3, [r7, #14]
 80146e0:	2b80      	cmp	r3, #128	; 0x80
 80146e2:	d004      	beq.n	80146ee <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80146e4:	6839      	ldr	r1, [r7, #0]
 80146e6:	6878      	ldr	r0, [r7, #4]
 80146e8:	f000 fc17 	bl	8014f1a <USBD_CtlError>
                break;
 80146ec:	e091      	b.n	8014812 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80146ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	da0b      	bge.n	801470e <USBD_StdEPReq+0x212>
 80146f6:	7bbb      	ldrb	r3, [r7, #14]
 80146f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80146fc:	4613      	mov	r3, r2
 80146fe:	009b      	lsls	r3, r3, #2
 8014700:	4413      	add	r3, r2
 8014702:	009b      	lsls	r3, r3, #2
 8014704:	3310      	adds	r3, #16
 8014706:	687a      	ldr	r2, [r7, #4]
 8014708:	4413      	add	r3, r2
 801470a:	3304      	adds	r3, #4
 801470c:	e00b      	b.n	8014726 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801470e:	7bbb      	ldrb	r3, [r7, #14]
 8014710:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014714:	4613      	mov	r3, r2
 8014716:	009b      	lsls	r3, r3, #2
 8014718:	4413      	add	r3, r2
 801471a:	009b      	lsls	r3, r3, #2
 801471c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014720:	687a      	ldr	r2, [r7, #4]
 8014722:	4413      	add	r3, r2
 8014724:	3304      	adds	r3, #4
 8014726:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014728:	68bb      	ldr	r3, [r7, #8]
 801472a:	2200      	movs	r2, #0
 801472c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801472e:	68bb      	ldr	r3, [r7, #8]
 8014730:	2202      	movs	r2, #2
 8014732:	4619      	mov	r1, r3
 8014734:	6878      	ldr	r0, [r7, #4]
 8014736:	f000 fc61 	bl	8014ffc <USBD_CtlSendData>
              break;
 801473a:	e06a      	b.n	8014812 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801473c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014740:	2b00      	cmp	r3, #0
 8014742:	da11      	bge.n	8014768 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014744:	7bbb      	ldrb	r3, [r7, #14]
 8014746:	f003 020f 	and.w	r2, r3, #15
 801474a:	6879      	ldr	r1, [r7, #4]
 801474c:	4613      	mov	r3, r2
 801474e:	009b      	lsls	r3, r3, #2
 8014750:	4413      	add	r3, r2
 8014752:	009b      	lsls	r3, r3, #2
 8014754:	440b      	add	r3, r1
 8014756:	3324      	adds	r3, #36	; 0x24
 8014758:	881b      	ldrh	r3, [r3, #0]
 801475a:	2b00      	cmp	r3, #0
 801475c:	d117      	bne.n	801478e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801475e:	6839      	ldr	r1, [r7, #0]
 8014760:	6878      	ldr	r0, [r7, #4]
 8014762:	f000 fbda 	bl	8014f1a <USBD_CtlError>
                  break;
 8014766:	e054      	b.n	8014812 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014768:	7bbb      	ldrb	r3, [r7, #14]
 801476a:	f003 020f 	and.w	r2, r3, #15
 801476e:	6879      	ldr	r1, [r7, #4]
 8014770:	4613      	mov	r3, r2
 8014772:	009b      	lsls	r3, r3, #2
 8014774:	4413      	add	r3, r2
 8014776:	009b      	lsls	r3, r3, #2
 8014778:	440b      	add	r3, r1
 801477a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801477e:	881b      	ldrh	r3, [r3, #0]
 8014780:	2b00      	cmp	r3, #0
 8014782:	d104      	bne.n	801478e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014784:	6839      	ldr	r1, [r7, #0]
 8014786:	6878      	ldr	r0, [r7, #4]
 8014788:	f000 fbc7 	bl	8014f1a <USBD_CtlError>
                  break;
 801478c:	e041      	b.n	8014812 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801478e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014792:	2b00      	cmp	r3, #0
 8014794:	da0b      	bge.n	80147ae <USBD_StdEPReq+0x2b2>
 8014796:	7bbb      	ldrb	r3, [r7, #14]
 8014798:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801479c:	4613      	mov	r3, r2
 801479e:	009b      	lsls	r3, r3, #2
 80147a0:	4413      	add	r3, r2
 80147a2:	009b      	lsls	r3, r3, #2
 80147a4:	3310      	adds	r3, #16
 80147a6:	687a      	ldr	r2, [r7, #4]
 80147a8:	4413      	add	r3, r2
 80147aa:	3304      	adds	r3, #4
 80147ac:	e00b      	b.n	80147c6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80147ae:	7bbb      	ldrb	r3, [r7, #14]
 80147b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80147b4:	4613      	mov	r3, r2
 80147b6:	009b      	lsls	r3, r3, #2
 80147b8:	4413      	add	r3, r2
 80147ba:	009b      	lsls	r3, r3, #2
 80147bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80147c0:	687a      	ldr	r2, [r7, #4]
 80147c2:	4413      	add	r3, r2
 80147c4:	3304      	adds	r3, #4
 80147c6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80147c8:	7bbb      	ldrb	r3, [r7, #14]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d002      	beq.n	80147d4 <USBD_StdEPReq+0x2d8>
 80147ce:	7bbb      	ldrb	r3, [r7, #14]
 80147d0:	2b80      	cmp	r3, #128	; 0x80
 80147d2:	d103      	bne.n	80147dc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80147d4:	68bb      	ldr	r3, [r7, #8]
 80147d6:	2200      	movs	r2, #0
 80147d8:	601a      	str	r2, [r3, #0]
 80147da:	e00e      	b.n	80147fa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80147dc:	7bbb      	ldrb	r3, [r7, #14]
 80147de:	4619      	mov	r1, r3
 80147e0:	6878      	ldr	r0, [r7, #4]
 80147e2:	f003 ffc6 	bl	8018772 <USBD_LL_IsStallEP>
 80147e6:	4603      	mov	r3, r0
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d003      	beq.n	80147f4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80147ec:	68bb      	ldr	r3, [r7, #8]
 80147ee:	2201      	movs	r2, #1
 80147f0:	601a      	str	r2, [r3, #0]
 80147f2:	e002      	b.n	80147fa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80147f4:	68bb      	ldr	r3, [r7, #8]
 80147f6:	2200      	movs	r2, #0
 80147f8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80147fa:	68bb      	ldr	r3, [r7, #8]
 80147fc:	2202      	movs	r2, #2
 80147fe:	4619      	mov	r1, r3
 8014800:	6878      	ldr	r0, [r7, #4]
 8014802:	f000 fbfb 	bl	8014ffc <USBD_CtlSendData>
              break;
 8014806:	e004      	b.n	8014812 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8014808:	6839      	ldr	r1, [r7, #0]
 801480a:	6878      	ldr	r0, [r7, #4]
 801480c:	f000 fb85 	bl	8014f1a <USBD_CtlError>
              break;
 8014810:	bf00      	nop
          }
          break;
 8014812:	e004      	b.n	801481e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8014814:	6839      	ldr	r1, [r7, #0]
 8014816:	6878      	ldr	r0, [r7, #4]
 8014818:	f000 fb7f 	bl	8014f1a <USBD_CtlError>
          break;
 801481c:	bf00      	nop
      }
      break;
 801481e:	e005      	b.n	801482c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8014820:	6839      	ldr	r1, [r7, #0]
 8014822:	6878      	ldr	r0, [r7, #4]
 8014824:	f000 fb79 	bl	8014f1a <USBD_CtlError>
      break;
 8014828:	e000      	b.n	801482c <USBD_StdEPReq+0x330>
      break;
 801482a:	bf00      	nop
  }

  return ret;
 801482c:	7bfb      	ldrb	r3, [r7, #15]
}
 801482e:	4618      	mov	r0, r3
 8014830:	3710      	adds	r7, #16
 8014832:	46bd      	mov	sp, r7
 8014834:	bd80      	pop	{r7, pc}
	...

08014838 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014838:	b580      	push	{r7, lr}
 801483a:	b084      	sub	sp, #16
 801483c:	af00      	add	r7, sp, #0
 801483e:	6078      	str	r0, [r7, #4]
 8014840:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014842:	2300      	movs	r3, #0
 8014844:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014846:	2300      	movs	r3, #0
 8014848:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801484a:	2300      	movs	r3, #0
 801484c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801484e:	683b      	ldr	r3, [r7, #0]
 8014850:	885b      	ldrh	r3, [r3, #2]
 8014852:	0a1b      	lsrs	r3, r3, #8
 8014854:	b29b      	uxth	r3, r3
 8014856:	3b01      	subs	r3, #1
 8014858:	2b0e      	cmp	r3, #14
 801485a:	f200 8152 	bhi.w	8014b02 <USBD_GetDescriptor+0x2ca>
 801485e:	a201      	add	r2, pc, #4	; (adr r2, 8014864 <USBD_GetDescriptor+0x2c>)
 8014860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014864:	080148d5 	.word	0x080148d5
 8014868:	080148ed 	.word	0x080148ed
 801486c:	0801492d 	.word	0x0801492d
 8014870:	08014b03 	.word	0x08014b03
 8014874:	08014b03 	.word	0x08014b03
 8014878:	08014aa3 	.word	0x08014aa3
 801487c:	08014acf 	.word	0x08014acf
 8014880:	08014b03 	.word	0x08014b03
 8014884:	08014b03 	.word	0x08014b03
 8014888:	08014b03 	.word	0x08014b03
 801488c:	08014b03 	.word	0x08014b03
 8014890:	08014b03 	.word	0x08014b03
 8014894:	08014b03 	.word	0x08014b03
 8014898:	08014b03 	.word	0x08014b03
 801489c:	080148a1 	.word	0x080148a1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80148a6:	69db      	ldr	r3, [r3, #28]
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d00b      	beq.n	80148c4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80148b2:	69db      	ldr	r3, [r3, #28]
 80148b4:	687a      	ldr	r2, [r7, #4]
 80148b6:	7c12      	ldrb	r2, [r2, #16]
 80148b8:	f107 0108 	add.w	r1, r7, #8
 80148bc:	4610      	mov	r0, r2
 80148be:	4798      	blx	r3
 80148c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80148c2:	e126      	b.n	8014b12 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80148c4:	6839      	ldr	r1, [r7, #0]
 80148c6:	6878      	ldr	r0, [r7, #4]
 80148c8:	f000 fb27 	bl	8014f1a <USBD_CtlError>
        err++;
 80148cc:	7afb      	ldrb	r3, [r7, #11]
 80148ce:	3301      	adds	r3, #1
 80148d0:	72fb      	strb	r3, [r7, #11]
      break;
 80148d2:	e11e      	b.n	8014b12 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	687a      	ldr	r2, [r7, #4]
 80148de:	7c12      	ldrb	r2, [r2, #16]
 80148e0:	f107 0108 	add.w	r1, r7, #8
 80148e4:	4610      	mov	r0, r2
 80148e6:	4798      	blx	r3
 80148e8:	60f8      	str	r0, [r7, #12]
      break;
 80148ea:	e112      	b.n	8014b12 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	7c1b      	ldrb	r3, [r3, #16]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d10d      	bne.n	8014910 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80148fc:	f107 0208 	add.w	r2, r7, #8
 8014900:	4610      	mov	r0, r2
 8014902:	4798      	blx	r3
 8014904:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014906:	68fb      	ldr	r3, [r7, #12]
 8014908:	3301      	adds	r3, #1
 801490a:	2202      	movs	r2, #2
 801490c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801490e:	e100      	b.n	8014b12 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014918:	f107 0208 	add.w	r2, r7, #8
 801491c:	4610      	mov	r0, r2
 801491e:	4798      	blx	r3
 8014920:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	3301      	adds	r3, #1
 8014926:	2202      	movs	r2, #2
 8014928:	701a      	strb	r2, [r3, #0]
      break;
 801492a:	e0f2      	b.n	8014b12 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801492c:	683b      	ldr	r3, [r7, #0]
 801492e:	885b      	ldrh	r3, [r3, #2]
 8014930:	b2db      	uxtb	r3, r3
 8014932:	2b05      	cmp	r3, #5
 8014934:	f200 80ac 	bhi.w	8014a90 <USBD_GetDescriptor+0x258>
 8014938:	a201      	add	r2, pc, #4	; (adr r2, 8014940 <USBD_GetDescriptor+0x108>)
 801493a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801493e:	bf00      	nop
 8014940:	08014959 	.word	0x08014959
 8014944:	0801498d 	.word	0x0801498d
 8014948:	080149c1 	.word	0x080149c1
 801494c:	080149f5 	.word	0x080149f5
 8014950:	08014a29 	.word	0x08014a29
 8014954:	08014a5d 	.word	0x08014a5d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801495e:	685b      	ldr	r3, [r3, #4]
 8014960:	2b00      	cmp	r3, #0
 8014962:	d00b      	beq.n	801497c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801496a:	685b      	ldr	r3, [r3, #4]
 801496c:	687a      	ldr	r2, [r7, #4]
 801496e:	7c12      	ldrb	r2, [r2, #16]
 8014970:	f107 0108 	add.w	r1, r7, #8
 8014974:	4610      	mov	r0, r2
 8014976:	4798      	blx	r3
 8014978:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801497a:	e091      	b.n	8014aa0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801497c:	6839      	ldr	r1, [r7, #0]
 801497e:	6878      	ldr	r0, [r7, #4]
 8014980:	f000 facb 	bl	8014f1a <USBD_CtlError>
            err++;
 8014984:	7afb      	ldrb	r3, [r7, #11]
 8014986:	3301      	adds	r3, #1
 8014988:	72fb      	strb	r3, [r7, #11]
          break;
 801498a:	e089      	b.n	8014aa0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014992:	689b      	ldr	r3, [r3, #8]
 8014994:	2b00      	cmp	r3, #0
 8014996:	d00b      	beq.n	80149b0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801499e:	689b      	ldr	r3, [r3, #8]
 80149a0:	687a      	ldr	r2, [r7, #4]
 80149a2:	7c12      	ldrb	r2, [r2, #16]
 80149a4:	f107 0108 	add.w	r1, r7, #8
 80149a8:	4610      	mov	r0, r2
 80149aa:	4798      	blx	r3
 80149ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80149ae:	e077      	b.n	8014aa0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80149b0:	6839      	ldr	r1, [r7, #0]
 80149b2:	6878      	ldr	r0, [r7, #4]
 80149b4:	f000 fab1 	bl	8014f1a <USBD_CtlError>
            err++;
 80149b8:	7afb      	ldrb	r3, [r7, #11]
 80149ba:	3301      	adds	r3, #1
 80149bc:	72fb      	strb	r3, [r7, #11]
          break;
 80149be:	e06f      	b.n	8014aa0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80149c6:	68db      	ldr	r3, [r3, #12]
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d00b      	beq.n	80149e4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80149d2:	68db      	ldr	r3, [r3, #12]
 80149d4:	687a      	ldr	r2, [r7, #4]
 80149d6:	7c12      	ldrb	r2, [r2, #16]
 80149d8:	f107 0108 	add.w	r1, r7, #8
 80149dc:	4610      	mov	r0, r2
 80149de:	4798      	blx	r3
 80149e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80149e2:	e05d      	b.n	8014aa0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80149e4:	6839      	ldr	r1, [r7, #0]
 80149e6:	6878      	ldr	r0, [r7, #4]
 80149e8:	f000 fa97 	bl	8014f1a <USBD_CtlError>
            err++;
 80149ec:	7afb      	ldrb	r3, [r7, #11]
 80149ee:	3301      	adds	r3, #1
 80149f0:	72fb      	strb	r3, [r7, #11]
          break;
 80149f2:	e055      	b.n	8014aa0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80149fa:	691b      	ldr	r3, [r3, #16]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d00b      	beq.n	8014a18 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014a06:	691b      	ldr	r3, [r3, #16]
 8014a08:	687a      	ldr	r2, [r7, #4]
 8014a0a:	7c12      	ldrb	r2, [r2, #16]
 8014a0c:	f107 0108 	add.w	r1, r7, #8
 8014a10:	4610      	mov	r0, r2
 8014a12:	4798      	blx	r3
 8014a14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014a16:	e043      	b.n	8014aa0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014a18:	6839      	ldr	r1, [r7, #0]
 8014a1a:	6878      	ldr	r0, [r7, #4]
 8014a1c:	f000 fa7d 	bl	8014f1a <USBD_CtlError>
            err++;
 8014a20:	7afb      	ldrb	r3, [r7, #11]
 8014a22:	3301      	adds	r3, #1
 8014a24:	72fb      	strb	r3, [r7, #11]
          break;
 8014a26:	e03b      	b.n	8014aa0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014a2e:	695b      	ldr	r3, [r3, #20]
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d00b      	beq.n	8014a4c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014a3a:	695b      	ldr	r3, [r3, #20]
 8014a3c:	687a      	ldr	r2, [r7, #4]
 8014a3e:	7c12      	ldrb	r2, [r2, #16]
 8014a40:	f107 0108 	add.w	r1, r7, #8
 8014a44:	4610      	mov	r0, r2
 8014a46:	4798      	blx	r3
 8014a48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014a4a:	e029      	b.n	8014aa0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014a4c:	6839      	ldr	r1, [r7, #0]
 8014a4e:	6878      	ldr	r0, [r7, #4]
 8014a50:	f000 fa63 	bl	8014f1a <USBD_CtlError>
            err++;
 8014a54:	7afb      	ldrb	r3, [r7, #11]
 8014a56:	3301      	adds	r3, #1
 8014a58:	72fb      	strb	r3, [r7, #11]
          break;
 8014a5a:	e021      	b.n	8014aa0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014a62:	699b      	ldr	r3, [r3, #24]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d00b      	beq.n	8014a80 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014a6e:	699b      	ldr	r3, [r3, #24]
 8014a70:	687a      	ldr	r2, [r7, #4]
 8014a72:	7c12      	ldrb	r2, [r2, #16]
 8014a74:	f107 0108 	add.w	r1, r7, #8
 8014a78:	4610      	mov	r0, r2
 8014a7a:	4798      	blx	r3
 8014a7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014a7e:	e00f      	b.n	8014aa0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014a80:	6839      	ldr	r1, [r7, #0]
 8014a82:	6878      	ldr	r0, [r7, #4]
 8014a84:	f000 fa49 	bl	8014f1a <USBD_CtlError>
            err++;
 8014a88:	7afb      	ldrb	r3, [r7, #11]
 8014a8a:	3301      	adds	r3, #1
 8014a8c:	72fb      	strb	r3, [r7, #11]
          break;
 8014a8e:	e007      	b.n	8014aa0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014a90:	6839      	ldr	r1, [r7, #0]
 8014a92:	6878      	ldr	r0, [r7, #4]
 8014a94:	f000 fa41 	bl	8014f1a <USBD_CtlError>
          err++;
 8014a98:	7afb      	ldrb	r3, [r7, #11]
 8014a9a:	3301      	adds	r3, #1
 8014a9c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8014a9e:	bf00      	nop
      }
      break;
 8014aa0:	e037      	b.n	8014b12 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	7c1b      	ldrb	r3, [r3, #16]
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d109      	bne.n	8014abe <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014ab2:	f107 0208 	add.w	r2, r7, #8
 8014ab6:	4610      	mov	r0, r2
 8014ab8:	4798      	blx	r3
 8014aba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014abc:	e029      	b.n	8014b12 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014abe:	6839      	ldr	r1, [r7, #0]
 8014ac0:	6878      	ldr	r0, [r7, #4]
 8014ac2:	f000 fa2a 	bl	8014f1a <USBD_CtlError>
        err++;
 8014ac6:	7afb      	ldrb	r3, [r7, #11]
 8014ac8:	3301      	adds	r3, #1
 8014aca:	72fb      	strb	r3, [r7, #11]
      break;
 8014acc:	e021      	b.n	8014b12 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	7c1b      	ldrb	r3, [r3, #16]
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d10d      	bne.n	8014af2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014ade:	f107 0208 	add.w	r2, r7, #8
 8014ae2:	4610      	mov	r0, r2
 8014ae4:	4798      	blx	r3
 8014ae6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	3301      	adds	r3, #1
 8014aec:	2207      	movs	r2, #7
 8014aee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014af0:	e00f      	b.n	8014b12 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014af2:	6839      	ldr	r1, [r7, #0]
 8014af4:	6878      	ldr	r0, [r7, #4]
 8014af6:	f000 fa10 	bl	8014f1a <USBD_CtlError>
        err++;
 8014afa:	7afb      	ldrb	r3, [r7, #11]
 8014afc:	3301      	adds	r3, #1
 8014afe:	72fb      	strb	r3, [r7, #11]
      break;
 8014b00:	e007      	b.n	8014b12 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8014b02:	6839      	ldr	r1, [r7, #0]
 8014b04:	6878      	ldr	r0, [r7, #4]
 8014b06:	f000 fa08 	bl	8014f1a <USBD_CtlError>
      err++;
 8014b0a:	7afb      	ldrb	r3, [r7, #11]
 8014b0c:	3301      	adds	r3, #1
 8014b0e:	72fb      	strb	r3, [r7, #11]
      break;
 8014b10:	bf00      	nop
  }

  if (err != 0U)
 8014b12:	7afb      	ldrb	r3, [r7, #11]
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d11e      	bne.n	8014b56 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8014b18:	683b      	ldr	r3, [r7, #0]
 8014b1a:	88db      	ldrh	r3, [r3, #6]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d016      	beq.n	8014b4e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8014b20:	893b      	ldrh	r3, [r7, #8]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d00e      	beq.n	8014b44 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8014b26:	683b      	ldr	r3, [r7, #0]
 8014b28:	88da      	ldrh	r2, [r3, #6]
 8014b2a:	893b      	ldrh	r3, [r7, #8]
 8014b2c:	4293      	cmp	r3, r2
 8014b2e:	bf28      	it	cs
 8014b30:	4613      	movcs	r3, r2
 8014b32:	b29b      	uxth	r3, r3
 8014b34:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014b36:	893b      	ldrh	r3, [r7, #8]
 8014b38:	461a      	mov	r2, r3
 8014b3a:	68f9      	ldr	r1, [r7, #12]
 8014b3c:	6878      	ldr	r0, [r7, #4]
 8014b3e:	f000 fa5d 	bl	8014ffc <USBD_CtlSendData>
 8014b42:	e009      	b.n	8014b58 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014b44:	6839      	ldr	r1, [r7, #0]
 8014b46:	6878      	ldr	r0, [r7, #4]
 8014b48:	f000 f9e7 	bl	8014f1a <USBD_CtlError>
 8014b4c:	e004      	b.n	8014b58 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8014b4e:	6878      	ldr	r0, [r7, #4]
 8014b50:	f000 fa91 	bl	8015076 <USBD_CtlSendStatus>
 8014b54:	e000      	b.n	8014b58 <USBD_GetDescriptor+0x320>
    return;
 8014b56:	bf00      	nop
  }
}
 8014b58:	3710      	adds	r7, #16
 8014b5a:	46bd      	mov	sp, r7
 8014b5c:	bd80      	pop	{r7, pc}
 8014b5e:	bf00      	nop

08014b60 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b60:	b580      	push	{r7, lr}
 8014b62:	b084      	sub	sp, #16
 8014b64:	af00      	add	r7, sp, #0
 8014b66:	6078      	str	r0, [r7, #4]
 8014b68:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014b6a:	683b      	ldr	r3, [r7, #0]
 8014b6c:	889b      	ldrh	r3, [r3, #4]
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d131      	bne.n	8014bd6 <USBD_SetAddress+0x76>
 8014b72:	683b      	ldr	r3, [r7, #0]
 8014b74:	88db      	ldrh	r3, [r3, #6]
 8014b76:	2b00      	cmp	r3, #0
 8014b78:	d12d      	bne.n	8014bd6 <USBD_SetAddress+0x76>
 8014b7a:	683b      	ldr	r3, [r7, #0]
 8014b7c:	885b      	ldrh	r3, [r3, #2]
 8014b7e:	2b7f      	cmp	r3, #127	; 0x7f
 8014b80:	d829      	bhi.n	8014bd6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014b82:	683b      	ldr	r3, [r7, #0]
 8014b84:	885b      	ldrh	r3, [r3, #2]
 8014b86:	b2db      	uxtb	r3, r3
 8014b88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014b8c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b94:	b2db      	uxtb	r3, r3
 8014b96:	2b03      	cmp	r3, #3
 8014b98:	d104      	bne.n	8014ba4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8014b9a:	6839      	ldr	r1, [r7, #0]
 8014b9c:	6878      	ldr	r0, [r7, #4]
 8014b9e:	f000 f9bc 	bl	8014f1a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014ba2:	e01d      	b.n	8014be0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	7bfa      	ldrb	r2, [r7, #15]
 8014ba8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014bac:	7bfb      	ldrb	r3, [r7, #15]
 8014bae:	4619      	mov	r1, r3
 8014bb0:	6878      	ldr	r0, [r7, #4]
 8014bb2:	f003 fe0a 	bl	80187ca <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014bb6:	6878      	ldr	r0, [r7, #4]
 8014bb8:	f000 fa5d 	bl	8015076 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014bbc:	7bfb      	ldrb	r3, [r7, #15]
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d004      	beq.n	8014bcc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014bc2:	687b      	ldr	r3, [r7, #4]
 8014bc4:	2202      	movs	r2, #2
 8014bc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014bca:	e009      	b.n	8014be0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	2201      	movs	r2, #1
 8014bd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014bd4:	e004      	b.n	8014be0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014bd6:	6839      	ldr	r1, [r7, #0]
 8014bd8:	6878      	ldr	r0, [r7, #4]
 8014bda:	f000 f99e 	bl	8014f1a <USBD_CtlError>
  }
}
 8014bde:	bf00      	nop
 8014be0:	bf00      	nop
 8014be2:	3710      	adds	r7, #16
 8014be4:	46bd      	mov	sp, r7
 8014be6:	bd80      	pop	{r7, pc}

08014be8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014be8:	b580      	push	{r7, lr}
 8014bea:	b084      	sub	sp, #16
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	6078      	str	r0, [r7, #4]
 8014bf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014bf2:	2300      	movs	r3, #0
 8014bf4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014bf6:	683b      	ldr	r3, [r7, #0]
 8014bf8:	885b      	ldrh	r3, [r3, #2]
 8014bfa:	b2da      	uxtb	r2, r3
 8014bfc:	4b4e      	ldr	r3, [pc, #312]	; (8014d38 <USBD_SetConfig+0x150>)
 8014bfe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014c00:	4b4d      	ldr	r3, [pc, #308]	; (8014d38 <USBD_SetConfig+0x150>)
 8014c02:	781b      	ldrb	r3, [r3, #0]
 8014c04:	2b01      	cmp	r3, #1
 8014c06:	d905      	bls.n	8014c14 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014c08:	6839      	ldr	r1, [r7, #0]
 8014c0a:	6878      	ldr	r0, [r7, #4]
 8014c0c:	f000 f985 	bl	8014f1a <USBD_CtlError>
    return USBD_FAIL;
 8014c10:	2303      	movs	r3, #3
 8014c12:	e08c      	b.n	8014d2e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014c1a:	b2db      	uxtb	r3, r3
 8014c1c:	2b02      	cmp	r3, #2
 8014c1e:	d002      	beq.n	8014c26 <USBD_SetConfig+0x3e>
 8014c20:	2b03      	cmp	r3, #3
 8014c22:	d029      	beq.n	8014c78 <USBD_SetConfig+0x90>
 8014c24:	e075      	b.n	8014d12 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8014c26:	4b44      	ldr	r3, [pc, #272]	; (8014d38 <USBD_SetConfig+0x150>)
 8014c28:	781b      	ldrb	r3, [r3, #0]
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d020      	beq.n	8014c70 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8014c2e:	4b42      	ldr	r3, [pc, #264]	; (8014d38 <USBD_SetConfig+0x150>)
 8014c30:	781b      	ldrb	r3, [r3, #0]
 8014c32:	461a      	mov	r2, r3
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014c38:	4b3f      	ldr	r3, [pc, #252]	; (8014d38 <USBD_SetConfig+0x150>)
 8014c3a:	781b      	ldrb	r3, [r3, #0]
 8014c3c:	4619      	mov	r1, r3
 8014c3e:	6878      	ldr	r0, [r7, #4]
 8014c40:	f7fe ffbc 	bl	8013bbc <USBD_SetClassConfig>
 8014c44:	4603      	mov	r3, r0
 8014c46:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014c48:	7bfb      	ldrb	r3, [r7, #15]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d008      	beq.n	8014c60 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8014c4e:	6839      	ldr	r1, [r7, #0]
 8014c50:	6878      	ldr	r0, [r7, #4]
 8014c52:	f000 f962 	bl	8014f1a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	2202      	movs	r2, #2
 8014c5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014c5e:	e065      	b.n	8014d2c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014c60:	6878      	ldr	r0, [r7, #4]
 8014c62:	f000 fa08 	bl	8015076 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	2203      	movs	r2, #3
 8014c6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014c6e:	e05d      	b.n	8014d2c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014c70:	6878      	ldr	r0, [r7, #4]
 8014c72:	f000 fa00 	bl	8015076 <USBD_CtlSendStatus>
      break;
 8014c76:	e059      	b.n	8014d2c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014c78:	4b2f      	ldr	r3, [pc, #188]	; (8014d38 <USBD_SetConfig+0x150>)
 8014c7a:	781b      	ldrb	r3, [r3, #0]
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d112      	bne.n	8014ca6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	2202      	movs	r2, #2
 8014c84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8014c88:	4b2b      	ldr	r3, [pc, #172]	; (8014d38 <USBD_SetConfig+0x150>)
 8014c8a:	781b      	ldrb	r3, [r3, #0]
 8014c8c:	461a      	mov	r2, r3
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014c92:	4b29      	ldr	r3, [pc, #164]	; (8014d38 <USBD_SetConfig+0x150>)
 8014c94:	781b      	ldrb	r3, [r3, #0]
 8014c96:	4619      	mov	r1, r3
 8014c98:	6878      	ldr	r0, [r7, #4]
 8014c9a:	f7fe ffab 	bl	8013bf4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014c9e:	6878      	ldr	r0, [r7, #4]
 8014ca0:	f000 f9e9 	bl	8015076 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014ca4:	e042      	b.n	8014d2c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8014ca6:	4b24      	ldr	r3, [pc, #144]	; (8014d38 <USBD_SetConfig+0x150>)
 8014ca8:	781b      	ldrb	r3, [r3, #0]
 8014caa:	461a      	mov	r2, r3
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	685b      	ldr	r3, [r3, #4]
 8014cb0:	429a      	cmp	r2, r3
 8014cb2:	d02a      	beq.n	8014d0a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	685b      	ldr	r3, [r3, #4]
 8014cb8:	b2db      	uxtb	r3, r3
 8014cba:	4619      	mov	r1, r3
 8014cbc:	6878      	ldr	r0, [r7, #4]
 8014cbe:	f7fe ff99 	bl	8013bf4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014cc2:	4b1d      	ldr	r3, [pc, #116]	; (8014d38 <USBD_SetConfig+0x150>)
 8014cc4:	781b      	ldrb	r3, [r3, #0]
 8014cc6:	461a      	mov	r2, r3
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014ccc:	4b1a      	ldr	r3, [pc, #104]	; (8014d38 <USBD_SetConfig+0x150>)
 8014cce:	781b      	ldrb	r3, [r3, #0]
 8014cd0:	4619      	mov	r1, r3
 8014cd2:	6878      	ldr	r0, [r7, #4]
 8014cd4:	f7fe ff72 	bl	8013bbc <USBD_SetClassConfig>
 8014cd8:	4603      	mov	r3, r0
 8014cda:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014cdc:	7bfb      	ldrb	r3, [r7, #15]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d00f      	beq.n	8014d02 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8014ce2:	6839      	ldr	r1, [r7, #0]
 8014ce4:	6878      	ldr	r0, [r7, #4]
 8014ce6:	f000 f918 	bl	8014f1a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	685b      	ldr	r3, [r3, #4]
 8014cee:	b2db      	uxtb	r3, r3
 8014cf0:	4619      	mov	r1, r3
 8014cf2:	6878      	ldr	r0, [r7, #4]
 8014cf4:	f7fe ff7e 	bl	8013bf4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	2202      	movs	r2, #2
 8014cfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014d00:	e014      	b.n	8014d2c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014d02:	6878      	ldr	r0, [r7, #4]
 8014d04:	f000 f9b7 	bl	8015076 <USBD_CtlSendStatus>
      break;
 8014d08:	e010      	b.n	8014d2c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014d0a:	6878      	ldr	r0, [r7, #4]
 8014d0c:	f000 f9b3 	bl	8015076 <USBD_CtlSendStatus>
      break;
 8014d10:	e00c      	b.n	8014d2c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8014d12:	6839      	ldr	r1, [r7, #0]
 8014d14:	6878      	ldr	r0, [r7, #4]
 8014d16:	f000 f900 	bl	8014f1a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014d1a:	4b07      	ldr	r3, [pc, #28]	; (8014d38 <USBD_SetConfig+0x150>)
 8014d1c:	781b      	ldrb	r3, [r3, #0]
 8014d1e:	4619      	mov	r1, r3
 8014d20:	6878      	ldr	r0, [r7, #4]
 8014d22:	f7fe ff67 	bl	8013bf4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014d26:	2303      	movs	r3, #3
 8014d28:	73fb      	strb	r3, [r7, #15]
      break;
 8014d2a:	bf00      	nop
  }

  return ret;
 8014d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d2e:	4618      	mov	r0, r3
 8014d30:	3710      	adds	r7, #16
 8014d32:	46bd      	mov	sp, r7
 8014d34:	bd80      	pop	{r7, pc}
 8014d36:	bf00      	nop
 8014d38:	200127b8 	.word	0x200127b8

08014d3c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014d3c:	b580      	push	{r7, lr}
 8014d3e:	b082      	sub	sp, #8
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	6078      	str	r0, [r7, #4]
 8014d44:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014d46:	683b      	ldr	r3, [r7, #0]
 8014d48:	88db      	ldrh	r3, [r3, #6]
 8014d4a:	2b01      	cmp	r3, #1
 8014d4c:	d004      	beq.n	8014d58 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014d4e:	6839      	ldr	r1, [r7, #0]
 8014d50:	6878      	ldr	r0, [r7, #4]
 8014d52:	f000 f8e2 	bl	8014f1a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014d56:	e023      	b.n	8014da0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014d5e:	b2db      	uxtb	r3, r3
 8014d60:	2b02      	cmp	r3, #2
 8014d62:	dc02      	bgt.n	8014d6a <USBD_GetConfig+0x2e>
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	dc03      	bgt.n	8014d70 <USBD_GetConfig+0x34>
 8014d68:	e015      	b.n	8014d96 <USBD_GetConfig+0x5a>
 8014d6a:	2b03      	cmp	r3, #3
 8014d6c:	d00b      	beq.n	8014d86 <USBD_GetConfig+0x4a>
 8014d6e:	e012      	b.n	8014d96 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	2200      	movs	r2, #0
 8014d74:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	3308      	adds	r3, #8
 8014d7a:	2201      	movs	r2, #1
 8014d7c:	4619      	mov	r1, r3
 8014d7e:	6878      	ldr	r0, [r7, #4]
 8014d80:	f000 f93c 	bl	8014ffc <USBD_CtlSendData>
        break;
 8014d84:	e00c      	b.n	8014da0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	3304      	adds	r3, #4
 8014d8a:	2201      	movs	r2, #1
 8014d8c:	4619      	mov	r1, r3
 8014d8e:	6878      	ldr	r0, [r7, #4]
 8014d90:	f000 f934 	bl	8014ffc <USBD_CtlSendData>
        break;
 8014d94:	e004      	b.n	8014da0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8014d96:	6839      	ldr	r1, [r7, #0]
 8014d98:	6878      	ldr	r0, [r7, #4]
 8014d9a:	f000 f8be 	bl	8014f1a <USBD_CtlError>
        break;
 8014d9e:	bf00      	nop
}
 8014da0:	bf00      	nop
 8014da2:	3708      	adds	r7, #8
 8014da4:	46bd      	mov	sp, r7
 8014da6:	bd80      	pop	{r7, pc}

08014da8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014da8:	b580      	push	{r7, lr}
 8014daa:	b082      	sub	sp, #8
 8014dac:	af00      	add	r7, sp, #0
 8014dae:	6078      	str	r0, [r7, #4]
 8014db0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014db8:	b2db      	uxtb	r3, r3
 8014dba:	3b01      	subs	r3, #1
 8014dbc:	2b02      	cmp	r3, #2
 8014dbe:	d81e      	bhi.n	8014dfe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014dc0:	683b      	ldr	r3, [r7, #0]
 8014dc2:	88db      	ldrh	r3, [r3, #6]
 8014dc4:	2b02      	cmp	r3, #2
 8014dc6:	d004      	beq.n	8014dd2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014dc8:	6839      	ldr	r1, [r7, #0]
 8014dca:	6878      	ldr	r0, [r7, #4]
 8014dcc:	f000 f8a5 	bl	8014f1a <USBD_CtlError>
        break;
 8014dd0:	e01a      	b.n	8014e08 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	2201      	movs	r2, #1
 8014dd6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d005      	beq.n	8014dee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	68db      	ldr	r3, [r3, #12]
 8014de6:	f043 0202 	orr.w	r2, r3, #2
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	330c      	adds	r3, #12
 8014df2:	2202      	movs	r2, #2
 8014df4:	4619      	mov	r1, r3
 8014df6:	6878      	ldr	r0, [r7, #4]
 8014df8:	f000 f900 	bl	8014ffc <USBD_CtlSendData>
      break;
 8014dfc:	e004      	b.n	8014e08 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014dfe:	6839      	ldr	r1, [r7, #0]
 8014e00:	6878      	ldr	r0, [r7, #4]
 8014e02:	f000 f88a 	bl	8014f1a <USBD_CtlError>
      break;
 8014e06:	bf00      	nop
  }
}
 8014e08:	bf00      	nop
 8014e0a:	3708      	adds	r7, #8
 8014e0c:	46bd      	mov	sp, r7
 8014e0e:	bd80      	pop	{r7, pc}

08014e10 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014e10:	b580      	push	{r7, lr}
 8014e12:	b082      	sub	sp, #8
 8014e14:	af00      	add	r7, sp, #0
 8014e16:	6078      	str	r0, [r7, #4]
 8014e18:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014e1a:	683b      	ldr	r3, [r7, #0]
 8014e1c:	885b      	ldrh	r3, [r3, #2]
 8014e1e:	2b01      	cmp	r3, #1
 8014e20:	d107      	bne.n	8014e32 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	2201      	movs	r2, #1
 8014e26:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014e2a:	6878      	ldr	r0, [r7, #4]
 8014e2c:	f000 f923 	bl	8015076 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8014e30:	e013      	b.n	8014e5a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8014e32:	683b      	ldr	r3, [r7, #0]
 8014e34:	885b      	ldrh	r3, [r3, #2]
 8014e36:	2b02      	cmp	r3, #2
 8014e38:	d10b      	bne.n	8014e52 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8014e3a:	683b      	ldr	r3, [r7, #0]
 8014e3c:	889b      	ldrh	r3, [r3, #4]
 8014e3e:	0a1b      	lsrs	r3, r3, #8
 8014e40:	b29b      	uxth	r3, r3
 8014e42:	b2da      	uxtb	r2, r3
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8014e4a:	6878      	ldr	r0, [r7, #4]
 8014e4c:	f000 f913 	bl	8015076 <USBD_CtlSendStatus>
}
 8014e50:	e003      	b.n	8014e5a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8014e52:	6839      	ldr	r1, [r7, #0]
 8014e54:	6878      	ldr	r0, [r7, #4]
 8014e56:	f000 f860 	bl	8014f1a <USBD_CtlError>
}
 8014e5a:	bf00      	nop
 8014e5c:	3708      	adds	r7, #8
 8014e5e:	46bd      	mov	sp, r7
 8014e60:	bd80      	pop	{r7, pc}

08014e62 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014e62:	b580      	push	{r7, lr}
 8014e64:	b082      	sub	sp, #8
 8014e66:	af00      	add	r7, sp, #0
 8014e68:	6078      	str	r0, [r7, #4]
 8014e6a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014e72:	b2db      	uxtb	r3, r3
 8014e74:	3b01      	subs	r3, #1
 8014e76:	2b02      	cmp	r3, #2
 8014e78:	d80b      	bhi.n	8014e92 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014e7a:	683b      	ldr	r3, [r7, #0]
 8014e7c:	885b      	ldrh	r3, [r3, #2]
 8014e7e:	2b01      	cmp	r3, #1
 8014e80:	d10c      	bne.n	8014e9c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	2200      	movs	r2, #0
 8014e86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014e8a:	6878      	ldr	r0, [r7, #4]
 8014e8c:	f000 f8f3 	bl	8015076 <USBD_CtlSendStatus>
      }
      break;
 8014e90:	e004      	b.n	8014e9c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014e92:	6839      	ldr	r1, [r7, #0]
 8014e94:	6878      	ldr	r0, [r7, #4]
 8014e96:	f000 f840 	bl	8014f1a <USBD_CtlError>
      break;
 8014e9a:	e000      	b.n	8014e9e <USBD_ClrFeature+0x3c>
      break;
 8014e9c:	bf00      	nop
  }
}
 8014e9e:	bf00      	nop
 8014ea0:	3708      	adds	r7, #8
 8014ea2:	46bd      	mov	sp, r7
 8014ea4:	bd80      	pop	{r7, pc}

08014ea6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014ea6:	b580      	push	{r7, lr}
 8014ea8:	b084      	sub	sp, #16
 8014eaa:	af00      	add	r7, sp, #0
 8014eac:	6078      	str	r0, [r7, #4]
 8014eae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014eb0:	683b      	ldr	r3, [r7, #0]
 8014eb2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	781a      	ldrb	r2, [r3, #0]
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014ebc:	68fb      	ldr	r3, [r7, #12]
 8014ebe:	3301      	adds	r3, #1
 8014ec0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014ec2:	68fb      	ldr	r3, [r7, #12]
 8014ec4:	781a      	ldrb	r2, [r3, #0]
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	3301      	adds	r3, #1
 8014ece:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014ed0:	68f8      	ldr	r0, [r7, #12]
 8014ed2:	f7ff fa16 	bl	8014302 <SWAPBYTE>
 8014ed6:	4603      	mov	r3, r0
 8014ed8:	461a      	mov	r2, r3
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014ede:	68fb      	ldr	r3, [r7, #12]
 8014ee0:	3301      	adds	r3, #1
 8014ee2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	3301      	adds	r3, #1
 8014ee8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014eea:	68f8      	ldr	r0, [r7, #12]
 8014eec:	f7ff fa09 	bl	8014302 <SWAPBYTE>
 8014ef0:	4603      	mov	r3, r0
 8014ef2:	461a      	mov	r2, r3
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014ef8:	68fb      	ldr	r3, [r7, #12]
 8014efa:	3301      	adds	r3, #1
 8014efc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	3301      	adds	r3, #1
 8014f02:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014f04:	68f8      	ldr	r0, [r7, #12]
 8014f06:	f7ff f9fc 	bl	8014302 <SWAPBYTE>
 8014f0a:	4603      	mov	r3, r0
 8014f0c:	461a      	mov	r2, r3
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	80da      	strh	r2, [r3, #6]
}
 8014f12:	bf00      	nop
 8014f14:	3710      	adds	r7, #16
 8014f16:	46bd      	mov	sp, r7
 8014f18:	bd80      	pop	{r7, pc}

08014f1a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014f1a:	b580      	push	{r7, lr}
 8014f1c:	b082      	sub	sp, #8
 8014f1e:	af00      	add	r7, sp, #0
 8014f20:	6078      	str	r0, [r7, #4]
 8014f22:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014f24:	2180      	movs	r1, #128	; 0x80
 8014f26:	6878      	ldr	r0, [r7, #4]
 8014f28:	f003 fbe5 	bl	80186f6 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014f2c:	2100      	movs	r1, #0
 8014f2e:	6878      	ldr	r0, [r7, #4]
 8014f30:	f003 fbe1 	bl	80186f6 <USBD_LL_StallEP>
}
 8014f34:	bf00      	nop
 8014f36:	3708      	adds	r7, #8
 8014f38:	46bd      	mov	sp, r7
 8014f3a:	bd80      	pop	{r7, pc}

08014f3c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014f3c:	b580      	push	{r7, lr}
 8014f3e:	b086      	sub	sp, #24
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	60f8      	str	r0, [r7, #12]
 8014f44:	60b9      	str	r1, [r7, #8]
 8014f46:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014f48:	2300      	movs	r3, #0
 8014f4a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d036      	beq.n	8014fc0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8014f56:	6938      	ldr	r0, [r7, #16]
 8014f58:	f000 f836 	bl	8014fc8 <USBD_GetLen>
 8014f5c:	4603      	mov	r3, r0
 8014f5e:	3301      	adds	r3, #1
 8014f60:	b29b      	uxth	r3, r3
 8014f62:	005b      	lsls	r3, r3, #1
 8014f64:	b29a      	uxth	r2, r3
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014f6a:	7dfb      	ldrb	r3, [r7, #23]
 8014f6c:	68ba      	ldr	r2, [r7, #8]
 8014f6e:	4413      	add	r3, r2
 8014f70:	687a      	ldr	r2, [r7, #4]
 8014f72:	7812      	ldrb	r2, [r2, #0]
 8014f74:	701a      	strb	r2, [r3, #0]
  idx++;
 8014f76:	7dfb      	ldrb	r3, [r7, #23]
 8014f78:	3301      	adds	r3, #1
 8014f7a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014f7c:	7dfb      	ldrb	r3, [r7, #23]
 8014f7e:	68ba      	ldr	r2, [r7, #8]
 8014f80:	4413      	add	r3, r2
 8014f82:	2203      	movs	r2, #3
 8014f84:	701a      	strb	r2, [r3, #0]
  idx++;
 8014f86:	7dfb      	ldrb	r3, [r7, #23]
 8014f88:	3301      	adds	r3, #1
 8014f8a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014f8c:	e013      	b.n	8014fb6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8014f8e:	7dfb      	ldrb	r3, [r7, #23]
 8014f90:	68ba      	ldr	r2, [r7, #8]
 8014f92:	4413      	add	r3, r2
 8014f94:	693a      	ldr	r2, [r7, #16]
 8014f96:	7812      	ldrb	r2, [r2, #0]
 8014f98:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014f9a:	693b      	ldr	r3, [r7, #16]
 8014f9c:	3301      	adds	r3, #1
 8014f9e:	613b      	str	r3, [r7, #16]
    idx++;
 8014fa0:	7dfb      	ldrb	r3, [r7, #23]
 8014fa2:	3301      	adds	r3, #1
 8014fa4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014fa6:	7dfb      	ldrb	r3, [r7, #23]
 8014fa8:	68ba      	ldr	r2, [r7, #8]
 8014faa:	4413      	add	r3, r2
 8014fac:	2200      	movs	r2, #0
 8014fae:	701a      	strb	r2, [r3, #0]
    idx++;
 8014fb0:	7dfb      	ldrb	r3, [r7, #23]
 8014fb2:	3301      	adds	r3, #1
 8014fb4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014fb6:	693b      	ldr	r3, [r7, #16]
 8014fb8:	781b      	ldrb	r3, [r3, #0]
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d1e7      	bne.n	8014f8e <USBD_GetString+0x52>
 8014fbe:	e000      	b.n	8014fc2 <USBD_GetString+0x86>
    return;
 8014fc0:	bf00      	nop
  }
}
 8014fc2:	3718      	adds	r7, #24
 8014fc4:	46bd      	mov	sp, r7
 8014fc6:	bd80      	pop	{r7, pc}

08014fc8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014fc8:	b480      	push	{r7}
 8014fca:	b085      	sub	sp, #20
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014fd0:	2300      	movs	r3, #0
 8014fd2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014fd8:	e005      	b.n	8014fe6 <USBD_GetLen+0x1e>
  {
    len++;
 8014fda:	7bfb      	ldrb	r3, [r7, #15]
 8014fdc:	3301      	adds	r3, #1
 8014fde:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014fe0:	68bb      	ldr	r3, [r7, #8]
 8014fe2:	3301      	adds	r3, #1
 8014fe4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014fe6:	68bb      	ldr	r3, [r7, #8]
 8014fe8:	781b      	ldrb	r3, [r3, #0]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d1f5      	bne.n	8014fda <USBD_GetLen+0x12>
  }

  return len;
 8014fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	3714      	adds	r7, #20
 8014ff4:	46bd      	mov	sp, r7
 8014ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ffa:	4770      	bx	lr

08014ffc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014ffc:	b580      	push	{r7, lr}
 8014ffe:	b084      	sub	sp, #16
 8015000:	af00      	add	r7, sp, #0
 8015002:	60f8      	str	r0, [r7, #12]
 8015004:	60b9      	str	r1, [r7, #8]
 8015006:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	2202      	movs	r2, #2
 801500c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	687a      	ldr	r2, [r7, #4]
 8015014:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	687a      	ldr	r2, [r7, #4]
 801501a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	68ba      	ldr	r2, [r7, #8]
 8015020:	2100      	movs	r1, #0
 8015022:	68f8      	ldr	r0, [r7, #12]
 8015024:	f003 fbf0 	bl	8018808 <USBD_LL_Transmit>

  return USBD_OK;
 8015028:	2300      	movs	r3, #0
}
 801502a:	4618      	mov	r0, r3
 801502c:	3710      	adds	r7, #16
 801502e:	46bd      	mov	sp, r7
 8015030:	bd80      	pop	{r7, pc}

08015032 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8015032:	b580      	push	{r7, lr}
 8015034:	b084      	sub	sp, #16
 8015036:	af00      	add	r7, sp, #0
 8015038:	60f8      	str	r0, [r7, #12]
 801503a:	60b9      	str	r1, [r7, #8]
 801503c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	68ba      	ldr	r2, [r7, #8]
 8015042:	2100      	movs	r1, #0
 8015044:	68f8      	ldr	r0, [r7, #12]
 8015046:	f003 fbdf 	bl	8018808 <USBD_LL_Transmit>

  return USBD_OK;
 801504a:	2300      	movs	r3, #0
}
 801504c:	4618      	mov	r0, r3
 801504e:	3710      	adds	r7, #16
 8015050:	46bd      	mov	sp, r7
 8015052:	bd80      	pop	{r7, pc}

08015054 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8015054:	b580      	push	{r7, lr}
 8015056:	b084      	sub	sp, #16
 8015058:	af00      	add	r7, sp, #0
 801505a:	60f8      	str	r0, [r7, #12]
 801505c:	60b9      	str	r1, [r7, #8]
 801505e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	68ba      	ldr	r2, [r7, #8]
 8015064:	2100      	movs	r1, #0
 8015066:	68f8      	ldr	r0, [r7, #12]
 8015068:	f003 fbef 	bl	801884a <USBD_LL_PrepareReceive>

  return USBD_OK;
 801506c:	2300      	movs	r3, #0
}
 801506e:	4618      	mov	r0, r3
 8015070:	3710      	adds	r7, #16
 8015072:	46bd      	mov	sp, r7
 8015074:	bd80      	pop	{r7, pc}

08015076 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8015076:	b580      	push	{r7, lr}
 8015078:	b082      	sub	sp, #8
 801507a:	af00      	add	r7, sp, #0
 801507c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	2204      	movs	r2, #4
 8015082:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8015086:	2300      	movs	r3, #0
 8015088:	2200      	movs	r2, #0
 801508a:	2100      	movs	r1, #0
 801508c:	6878      	ldr	r0, [r7, #4]
 801508e:	f003 fbbb 	bl	8018808 <USBD_LL_Transmit>

  return USBD_OK;
 8015092:	2300      	movs	r3, #0
}
 8015094:	4618      	mov	r0, r3
 8015096:	3708      	adds	r7, #8
 8015098:	46bd      	mov	sp, r7
 801509a:	bd80      	pop	{r7, pc}

0801509c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801509c:	b580      	push	{r7, lr}
 801509e:	b082      	sub	sp, #8
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	2205      	movs	r2, #5
 80150a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80150ac:	2300      	movs	r3, #0
 80150ae:	2200      	movs	r2, #0
 80150b0:	2100      	movs	r1, #0
 80150b2:	6878      	ldr	r0, [r7, #4]
 80150b4:	f003 fbc9 	bl	801884a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80150b8:	2300      	movs	r3, #0
}
 80150ba:	4618      	mov	r0, r3
 80150bc:	3708      	adds	r7, #8
 80150be:	46bd      	mov	sp, r7
 80150c0:	bd80      	pop	{r7, pc}
	...

080150c4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80150c4:	b580      	push	{r7, lr}
 80150c6:	b084      	sub	sp, #16
 80150c8:	af00      	add	r7, sp, #0
 80150ca:	4603      	mov	r3, r0
 80150cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80150ce:	79fb      	ldrb	r3, [r7, #7]
 80150d0:	4a08      	ldr	r2, [pc, #32]	; (80150f4 <disk_status+0x30>)
 80150d2:	009b      	lsls	r3, r3, #2
 80150d4:	4413      	add	r3, r2
 80150d6:	685b      	ldr	r3, [r3, #4]
 80150d8:	685b      	ldr	r3, [r3, #4]
 80150da:	79fa      	ldrb	r2, [r7, #7]
 80150dc:	4905      	ldr	r1, [pc, #20]	; (80150f4 <disk_status+0x30>)
 80150de:	440a      	add	r2, r1
 80150e0:	7a12      	ldrb	r2, [r2, #8]
 80150e2:	4610      	mov	r0, r2
 80150e4:	4798      	blx	r3
 80150e6:	4603      	mov	r3, r0
 80150e8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80150ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80150ec:	4618      	mov	r0, r3
 80150ee:	3710      	adds	r7, #16
 80150f0:	46bd      	mov	sp, r7
 80150f2:	bd80      	pop	{r7, pc}
 80150f4:	200129c4 	.word	0x200129c4

080150f8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80150f8:	b580      	push	{r7, lr}
 80150fa:	b084      	sub	sp, #16
 80150fc:	af00      	add	r7, sp, #0
 80150fe:	4603      	mov	r3, r0
 8015100:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8015102:	2300      	movs	r3, #0
 8015104:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8015106:	79fb      	ldrb	r3, [r7, #7]
 8015108:	4a0d      	ldr	r2, [pc, #52]	; (8015140 <disk_initialize+0x48>)
 801510a:	5cd3      	ldrb	r3, [r2, r3]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d111      	bne.n	8015134 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8015110:	79fb      	ldrb	r3, [r7, #7]
 8015112:	4a0b      	ldr	r2, [pc, #44]	; (8015140 <disk_initialize+0x48>)
 8015114:	2101      	movs	r1, #1
 8015116:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8015118:	79fb      	ldrb	r3, [r7, #7]
 801511a:	4a09      	ldr	r2, [pc, #36]	; (8015140 <disk_initialize+0x48>)
 801511c:	009b      	lsls	r3, r3, #2
 801511e:	4413      	add	r3, r2
 8015120:	685b      	ldr	r3, [r3, #4]
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	79fa      	ldrb	r2, [r7, #7]
 8015126:	4906      	ldr	r1, [pc, #24]	; (8015140 <disk_initialize+0x48>)
 8015128:	440a      	add	r2, r1
 801512a:	7a12      	ldrb	r2, [r2, #8]
 801512c:	4610      	mov	r0, r2
 801512e:	4798      	blx	r3
 8015130:	4603      	mov	r3, r0
 8015132:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8015134:	7bfb      	ldrb	r3, [r7, #15]
}
 8015136:	4618      	mov	r0, r3
 8015138:	3710      	adds	r7, #16
 801513a:	46bd      	mov	sp, r7
 801513c:	bd80      	pop	{r7, pc}
 801513e:	bf00      	nop
 8015140:	200129c4 	.word	0x200129c4

08015144 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8015144:	b590      	push	{r4, r7, lr}
 8015146:	b087      	sub	sp, #28
 8015148:	af00      	add	r7, sp, #0
 801514a:	60b9      	str	r1, [r7, #8]
 801514c:	607a      	str	r2, [r7, #4]
 801514e:	603b      	str	r3, [r7, #0]
 8015150:	4603      	mov	r3, r0
 8015152:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8015154:	7bfb      	ldrb	r3, [r7, #15]
 8015156:	4a0a      	ldr	r2, [pc, #40]	; (8015180 <disk_read+0x3c>)
 8015158:	009b      	lsls	r3, r3, #2
 801515a:	4413      	add	r3, r2
 801515c:	685b      	ldr	r3, [r3, #4]
 801515e:	689c      	ldr	r4, [r3, #8]
 8015160:	7bfb      	ldrb	r3, [r7, #15]
 8015162:	4a07      	ldr	r2, [pc, #28]	; (8015180 <disk_read+0x3c>)
 8015164:	4413      	add	r3, r2
 8015166:	7a18      	ldrb	r0, [r3, #8]
 8015168:	683b      	ldr	r3, [r7, #0]
 801516a:	687a      	ldr	r2, [r7, #4]
 801516c:	68b9      	ldr	r1, [r7, #8]
 801516e:	47a0      	blx	r4
 8015170:	4603      	mov	r3, r0
 8015172:	75fb      	strb	r3, [r7, #23]
  return res;
 8015174:	7dfb      	ldrb	r3, [r7, #23]
}
 8015176:	4618      	mov	r0, r3
 8015178:	371c      	adds	r7, #28
 801517a:	46bd      	mov	sp, r7
 801517c:	bd90      	pop	{r4, r7, pc}
 801517e:	bf00      	nop
 8015180:	200129c4 	.word	0x200129c4

08015184 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8015184:	b590      	push	{r4, r7, lr}
 8015186:	b087      	sub	sp, #28
 8015188:	af00      	add	r7, sp, #0
 801518a:	60b9      	str	r1, [r7, #8]
 801518c:	607a      	str	r2, [r7, #4]
 801518e:	603b      	str	r3, [r7, #0]
 8015190:	4603      	mov	r3, r0
 8015192:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8015194:	7bfb      	ldrb	r3, [r7, #15]
 8015196:	4a0a      	ldr	r2, [pc, #40]	; (80151c0 <disk_write+0x3c>)
 8015198:	009b      	lsls	r3, r3, #2
 801519a:	4413      	add	r3, r2
 801519c:	685b      	ldr	r3, [r3, #4]
 801519e:	68dc      	ldr	r4, [r3, #12]
 80151a0:	7bfb      	ldrb	r3, [r7, #15]
 80151a2:	4a07      	ldr	r2, [pc, #28]	; (80151c0 <disk_write+0x3c>)
 80151a4:	4413      	add	r3, r2
 80151a6:	7a18      	ldrb	r0, [r3, #8]
 80151a8:	683b      	ldr	r3, [r7, #0]
 80151aa:	687a      	ldr	r2, [r7, #4]
 80151ac:	68b9      	ldr	r1, [r7, #8]
 80151ae:	47a0      	blx	r4
 80151b0:	4603      	mov	r3, r0
 80151b2:	75fb      	strb	r3, [r7, #23]
  return res;
 80151b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80151b6:	4618      	mov	r0, r3
 80151b8:	371c      	adds	r7, #28
 80151ba:	46bd      	mov	sp, r7
 80151bc:	bd90      	pop	{r4, r7, pc}
 80151be:	bf00      	nop
 80151c0:	200129c4 	.word	0x200129c4

080151c4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80151c4:	b580      	push	{r7, lr}
 80151c6:	b084      	sub	sp, #16
 80151c8:	af00      	add	r7, sp, #0
 80151ca:	4603      	mov	r3, r0
 80151cc:	603a      	str	r2, [r7, #0]
 80151ce:	71fb      	strb	r3, [r7, #7]
 80151d0:	460b      	mov	r3, r1
 80151d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80151d4:	79fb      	ldrb	r3, [r7, #7]
 80151d6:	4a09      	ldr	r2, [pc, #36]	; (80151fc <disk_ioctl+0x38>)
 80151d8:	009b      	lsls	r3, r3, #2
 80151da:	4413      	add	r3, r2
 80151dc:	685b      	ldr	r3, [r3, #4]
 80151de:	691b      	ldr	r3, [r3, #16]
 80151e0:	79fa      	ldrb	r2, [r7, #7]
 80151e2:	4906      	ldr	r1, [pc, #24]	; (80151fc <disk_ioctl+0x38>)
 80151e4:	440a      	add	r2, r1
 80151e6:	7a10      	ldrb	r0, [r2, #8]
 80151e8:	79b9      	ldrb	r1, [r7, #6]
 80151ea:	683a      	ldr	r2, [r7, #0]
 80151ec:	4798      	blx	r3
 80151ee:	4603      	mov	r3, r0
 80151f0:	73fb      	strb	r3, [r7, #15]
  return res;
 80151f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80151f4:	4618      	mov	r0, r3
 80151f6:	3710      	adds	r7, #16
 80151f8:	46bd      	mov	sp, r7
 80151fa:	bd80      	pop	{r7, pc}
 80151fc:	200129c4 	.word	0x200129c4

08015200 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8015200:	b480      	push	{r7}
 8015202:	b085      	sub	sp, #20
 8015204:	af00      	add	r7, sp, #0
 8015206:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	3301      	adds	r3, #1
 801520c:	781b      	ldrb	r3, [r3, #0]
 801520e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8015210:	89fb      	ldrh	r3, [r7, #14]
 8015212:	021b      	lsls	r3, r3, #8
 8015214:	b21a      	sxth	r2, r3
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	781b      	ldrb	r3, [r3, #0]
 801521a:	b21b      	sxth	r3, r3
 801521c:	4313      	orrs	r3, r2
 801521e:	b21b      	sxth	r3, r3
 8015220:	81fb      	strh	r3, [r7, #14]
	return rv;
 8015222:	89fb      	ldrh	r3, [r7, #14]
}
 8015224:	4618      	mov	r0, r3
 8015226:	3714      	adds	r7, #20
 8015228:	46bd      	mov	sp, r7
 801522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801522e:	4770      	bx	lr

08015230 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8015230:	b480      	push	{r7}
 8015232:	b085      	sub	sp, #20
 8015234:	af00      	add	r7, sp, #0
 8015236:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	3303      	adds	r3, #3
 801523c:	781b      	ldrb	r3, [r3, #0]
 801523e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	021b      	lsls	r3, r3, #8
 8015244:	687a      	ldr	r2, [r7, #4]
 8015246:	3202      	adds	r2, #2
 8015248:	7812      	ldrb	r2, [r2, #0]
 801524a:	4313      	orrs	r3, r2
 801524c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	021b      	lsls	r3, r3, #8
 8015252:	687a      	ldr	r2, [r7, #4]
 8015254:	3201      	adds	r2, #1
 8015256:	7812      	ldrb	r2, [r2, #0]
 8015258:	4313      	orrs	r3, r2
 801525a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	021b      	lsls	r3, r3, #8
 8015260:	687a      	ldr	r2, [r7, #4]
 8015262:	7812      	ldrb	r2, [r2, #0]
 8015264:	4313      	orrs	r3, r2
 8015266:	60fb      	str	r3, [r7, #12]
	return rv;
 8015268:	68fb      	ldr	r3, [r7, #12]
}
 801526a:	4618      	mov	r0, r3
 801526c:	3714      	adds	r7, #20
 801526e:	46bd      	mov	sp, r7
 8015270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015274:	4770      	bx	lr

08015276 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8015276:	b480      	push	{r7}
 8015278:	b083      	sub	sp, #12
 801527a:	af00      	add	r7, sp, #0
 801527c:	6078      	str	r0, [r7, #4]
 801527e:	460b      	mov	r3, r1
 8015280:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	1c5a      	adds	r2, r3, #1
 8015286:	607a      	str	r2, [r7, #4]
 8015288:	887a      	ldrh	r2, [r7, #2]
 801528a:	b2d2      	uxtb	r2, r2
 801528c:	701a      	strb	r2, [r3, #0]
 801528e:	887b      	ldrh	r3, [r7, #2]
 8015290:	0a1b      	lsrs	r3, r3, #8
 8015292:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	1c5a      	adds	r2, r3, #1
 8015298:	607a      	str	r2, [r7, #4]
 801529a:	887a      	ldrh	r2, [r7, #2]
 801529c:	b2d2      	uxtb	r2, r2
 801529e:	701a      	strb	r2, [r3, #0]
}
 80152a0:	bf00      	nop
 80152a2:	370c      	adds	r7, #12
 80152a4:	46bd      	mov	sp, r7
 80152a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152aa:	4770      	bx	lr

080152ac <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80152ac:	b480      	push	{r7}
 80152ae:	b083      	sub	sp, #12
 80152b0:	af00      	add	r7, sp, #0
 80152b2:	6078      	str	r0, [r7, #4]
 80152b4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	1c5a      	adds	r2, r3, #1
 80152ba:	607a      	str	r2, [r7, #4]
 80152bc:	683a      	ldr	r2, [r7, #0]
 80152be:	b2d2      	uxtb	r2, r2
 80152c0:	701a      	strb	r2, [r3, #0]
 80152c2:	683b      	ldr	r3, [r7, #0]
 80152c4:	0a1b      	lsrs	r3, r3, #8
 80152c6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	1c5a      	adds	r2, r3, #1
 80152cc:	607a      	str	r2, [r7, #4]
 80152ce:	683a      	ldr	r2, [r7, #0]
 80152d0:	b2d2      	uxtb	r2, r2
 80152d2:	701a      	strb	r2, [r3, #0]
 80152d4:	683b      	ldr	r3, [r7, #0]
 80152d6:	0a1b      	lsrs	r3, r3, #8
 80152d8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	1c5a      	adds	r2, r3, #1
 80152de:	607a      	str	r2, [r7, #4]
 80152e0:	683a      	ldr	r2, [r7, #0]
 80152e2:	b2d2      	uxtb	r2, r2
 80152e4:	701a      	strb	r2, [r3, #0]
 80152e6:	683b      	ldr	r3, [r7, #0]
 80152e8:	0a1b      	lsrs	r3, r3, #8
 80152ea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	1c5a      	adds	r2, r3, #1
 80152f0:	607a      	str	r2, [r7, #4]
 80152f2:	683a      	ldr	r2, [r7, #0]
 80152f4:	b2d2      	uxtb	r2, r2
 80152f6:	701a      	strb	r2, [r3, #0]
}
 80152f8:	bf00      	nop
 80152fa:	370c      	adds	r7, #12
 80152fc:	46bd      	mov	sp, r7
 80152fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015302:	4770      	bx	lr

08015304 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8015304:	b480      	push	{r7}
 8015306:	b087      	sub	sp, #28
 8015308:	af00      	add	r7, sp, #0
 801530a:	60f8      	str	r0, [r7, #12]
 801530c:	60b9      	str	r1, [r7, #8]
 801530e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8015310:	68fb      	ldr	r3, [r7, #12]
 8015312:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8015314:	68bb      	ldr	r3, [r7, #8]
 8015316:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	2b00      	cmp	r3, #0
 801531c:	d00d      	beq.n	801533a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801531e:	693a      	ldr	r2, [r7, #16]
 8015320:	1c53      	adds	r3, r2, #1
 8015322:	613b      	str	r3, [r7, #16]
 8015324:	697b      	ldr	r3, [r7, #20]
 8015326:	1c59      	adds	r1, r3, #1
 8015328:	6179      	str	r1, [r7, #20]
 801532a:	7812      	ldrb	r2, [r2, #0]
 801532c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	3b01      	subs	r3, #1
 8015332:	607b      	str	r3, [r7, #4]
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	2b00      	cmp	r3, #0
 8015338:	d1f1      	bne.n	801531e <mem_cpy+0x1a>
	}
}
 801533a:	bf00      	nop
 801533c:	371c      	adds	r7, #28
 801533e:	46bd      	mov	sp, r7
 8015340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015344:	4770      	bx	lr

08015346 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8015346:	b480      	push	{r7}
 8015348:	b087      	sub	sp, #28
 801534a:	af00      	add	r7, sp, #0
 801534c:	60f8      	str	r0, [r7, #12]
 801534e:	60b9      	str	r1, [r7, #8]
 8015350:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8015352:	68fb      	ldr	r3, [r7, #12]
 8015354:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8015356:	697b      	ldr	r3, [r7, #20]
 8015358:	1c5a      	adds	r2, r3, #1
 801535a:	617a      	str	r2, [r7, #20]
 801535c:	68ba      	ldr	r2, [r7, #8]
 801535e:	b2d2      	uxtb	r2, r2
 8015360:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	3b01      	subs	r3, #1
 8015366:	607b      	str	r3, [r7, #4]
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	2b00      	cmp	r3, #0
 801536c:	d1f3      	bne.n	8015356 <mem_set+0x10>
}
 801536e:	bf00      	nop
 8015370:	bf00      	nop
 8015372:	371c      	adds	r7, #28
 8015374:	46bd      	mov	sp, r7
 8015376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801537a:	4770      	bx	lr

0801537c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801537c:	b480      	push	{r7}
 801537e:	b089      	sub	sp, #36	; 0x24
 8015380:	af00      	add	r7, sp, #0
 8015382:	60f8      	str	r0, [r7, #12]
 8015384:	60b9      	str	r1, [r7, #8]
 8015386:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	61fb      	str	r3, [r7, #28]
 801538c:	68bb      	ldr	r3, [r7, #8]
 801538e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8015390:	2300      	movs	r3, #0
 8015392:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8015394:	69fb      	ldr	r3, [r7, #28]
 8015396:	1c5a      	adds	r2, r3, #1
 8015398:	61fa      	str	r2, [r7, #28]
 801539a:	781b      	ldrb	r3, [r3, #0]
 801539c:	4619      	mov	r1, r3
 801539e:	69bb      	ldr	r3, [r7, #24]
 80153a0:	1c5a      	adds	r2, r3, #1
 80153a2:	61ba      	str	r2, [r7, #24]
 80153a4:	781b      	ldrb	r3, [r3, #0]
 80153a6:	1acb      	subs	r3, r1, r3
 80153a8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	3b01      	subs	r3, #1
 80153ae:	607b      	str	r3, [r7, #4]
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d002      	beq.n	80153bc <mem_cmp+0x40>
 80153b6:	697b      	ldr	r3, [r7, #20]
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d0eb      	beq.n	8015394 <mem_cmp+0x18>

	return r;
 80153bc:	697b      	ldr	r3, [r7, #20]
}
 80153be:	4618      	mov	r0, r3
 80153c0:	3724      	adds	r7, #36	; 0x24
 80153c2:	46bd      	mov	sp, r7
 80153c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153c8:	4770      	bx	lr

080153ca <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80153ca:	b480      	push	{r7}
 80153cc:	b083      	sub	sp, #12
 80153ce:	af00      	add	r7, sp, #0
 80153d0:	6078      	str	r0, [r7, #4]
 80153d2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80153d4:	e002      	b.n	80153dc <chk_chr+0x12>
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	3301      	adds	r3, #1
 80153da:	607b      	str	r3, [r7, #4]
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	781b      	ldrb	r3, [r3, #0]
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d005      	beq.n	80153f0 <chk_chr+0x26>
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	781b      	ldrb	r3, [r3, #0]
 80153e8:	461a      	mov	r2, r3
 80153ea:	683b      	ldr	r3, [r7, #0]
 80153ec:	4293      	cmp	r3, r2
 80153ee:	d1f2      	bne.n	80153d6 <chk_chr+0xc>
	return *str;
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	781b      	ldrb	r3, [r3, #0]
}
 80153f4:	4618      	mov	r0, r3
 80153f6:	370c      	adds	r7, #12
 80153f8:	46bd      	mov	sp, r7
 80153fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153fe:	4770      	bx	lr

08015400 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8015400:	b580      	push	{r7, lr}
 8015402:	b086      	sub	sp, #24
 8015404:	af00      	add	r7, sp, #0
 8015406:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8015408:	2300      	movs	r3, #0
 801540a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	78db      	ldrb	r3, [r3, #3]
 8015410:	2b00      	cmp	r3, #0
 8015412:	d034      	beq.n	801547e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015418:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	7858      	ldrb	r0, [r3, #1]
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015424:	2301      	movs	r3, #1
 8015426:	697a      	ldr	r2, [r7, #20]
 8015428:	f7ff feac 	bl	8015184 <disk_write>
 801542c:	4603      	mov	r3, r0
 801542e:	2b00      	cmp	r3, #0
 8015430:	d002      	beq.n	8015438 <sync_window+0x38>
			res = FR_DISK_ERR;
 8015432:	2301      	movs	r3, #1
 8015434:	73fb      	strb	r3, [r7, #15]
 8015436:	e022      	b.n	801547e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	2200      	movs	r2, #0
 801543c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015442:	697a      	ldr	r2, [r7, #20]
 8015444:	1ad2      	subs	r2, r2, r3
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	6a1b      	ldr	r3, [r3, #32]
 801544a:	429a      	cmp	r2, r3
 801544c:	d217      	bcs.n	801547e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	789b      	ldrb	r3, [r3, #2]
 8015452:	613b      	str	r3, [r7, #16]
 8015454:	e010      	b.n	8015478 <sync_window+0x78>
					wsect += fs->fsize;
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	6a1b      	ldr	r3, [r3, #32]
 801545a:	697a      	ldr	r2, [r7, #20]
 801545c:	4413      	add	r3, r2
 801545e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	7858      	ldrb	r0, [r3, #1]
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801546a:	2301      	movs	r3, #1
 801546c:	697a      	ldr	r2, [r7, #20]
 801546e:	f7ff fe89 	bl	8015184 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8015472:	693b      	ldr	r3, [r7, #16]
 8015474:	3b01      	subs	r3, #1
 8015476:	613b      	str	r3, [r7, #16]
 8015478:	693b      	ldr	r3, [r7, #16]
 801547a:	2b01      	cmp	r3, #1
 801547c:	d8eb      	bhi.n	8015456 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801547e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015480:	4618      	mov	r0, r3
 8015482:	3718      	adds	r7, #24
 8015484:	46bd      	mov	sp, r7
 8015486:	bd80      	pop	{r7, pc}

08015488 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8015488:	b580      	push	{r7, lr}
 801548a:	b084      	sub	sp, #16
 801548c:	af00      	add	r7, sp, #0
 801548e:	6078      	str	r0, [r7, #4]
 8015490:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8015492:	2300      	movs	r3, #0
 8015494:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801549a:	683a      	ldr	r2, [r7, #0]
 801549c:	429a      	cmp	r2, r3
 801549e:	d01b      	beq.n	80154d8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80154a0:	6878      	ldr	r0, [r7, #4]
 80154a2:	f7ff ffad 	bl	8015400 <sync_window>
 80154a6:	4603      	mov	r3, r0
 80154a8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80154aa:	7bfb      	ldrb	r3, [r7, #15]
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d113      	bne.n	80154d8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	7858      	ldrb	r0, [r3, #1]
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80154ba:	2301      	movs	r3, #1
 80154bc:	683a      	ldr	r2, [r7, #0]
 80154be:	f7ff fe41 	bl	8015144 <disk_read>
 80154c2:	4603      	mov	r3, r0
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d004      	beq.n	80154d2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80154c8:	f04f 33ff 	mov.w	r3, #4294967295
 80154cc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80154ce:	2301      	movs	r3, #1
 80154d0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	683a      	ldr	r2, [r7, #0]
 80154d6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80154d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80154da:	4618      	mov	r0, r3
 80154dc:	3710      	adds	r7, #16
 80154de:	46bd      	mov	sp, r7
 80154e0:	bd80      	pop	{r7, pc}
	...

080154e4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80154e4:	b580      	push	{r7, lr}
 80154e6:	b084      	sub	sp, #16
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80154ec:	6878      	ldr	r0, [r7, #4]
 80154ee:	f7ff ff87 	bl	8015400 <sync_window>
 80154f2:	4603      	mov	r3, r0
 80154f4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80154f6:	7bfb      	ldrb	r3, [r7, #15]
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	d159      	bne.n	80155b0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	781b      	ldrb	r3, [r3, #0]
 8015500:	2b03      	cmp	r3, #3
 8015502:	d149      	bne.n	8015598 <sync_fs+0xb4>
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	791b      	ldrb	r3, [r3, #4]
 8015508:	2b01      	cmp	r3, #1
 801550a:	d145      	bne.n	8015598 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	899b      	ldrh	r3, [r3, #12]
 8015516:	461a      	mov	r2, r3
 8015518:	2100      	movs	r1, #0
 801551a:	f7ff ff14 	bl	8015346 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	3338      	adds	r3, #56	; 0x38
 8015522:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015526:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801552a:	4618      	mov	r0, r3
 801552c:	f7ff fea3 	bl	8015276 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	3338      	adds	r3, #56	; 0x38
 8015534:	4921      	ldr	r1, [pc, #132]	; (80155bc <sync_fs+0xd8>)
 8015536:	4618      	mov	r0, r3
 8015538:	f7ff feb8 	bl	80152ac <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	3338      	adds	r3, #56	; 0x38
 8015540:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8015544:	491e      	ldr	r1, [pc, #120]	; (80155c0 <sync_fs+0xdc>)
 8015546:	4618      	mov	r0, r3
 8015548:	f7ff feb0 	bl	80152ac <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	3338      	adds	r3, #56	; 0x38
 8015550:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	699b      	ldr	r3, [r3, #24]
 8015558:	4619      	mov	r1, r3
 801555a:	4610      	mov	r0, r2
 801555c:	f7ff fea6 	bl	80152ac <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	3338      	adds	r3, #56	; 0x38
 8015564:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	695b      	ldr	r3, [r3, #20]
 801556c:	4619      	mov	r1, r3
 801556e:	4610      	mov	r0, r2
 8015570:	f7ff fe9c 	bl	80152ac <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015578:	1c5a      	adds	r2, r3, #1
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	7858      	ldrb	r0, [r3, #1]
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801558c:	2301      	movs	r3, #1
 801558e:	f7ff fdf9 	bl	8015184 <disk_write>
			fs->fsi_flag = 0;
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	2200      	movs	r2, #0
 8015596:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	785b      	ldrb	r3, [r3, #1]
 801559c:	2200      	movs	r2, #0
 801559e:	2100      	movs	r1, #0
 80155a0:	4618      	mov	r0, r3
 80155a2:	f7ff fe0f 	bl	80151c4 <disk_ioctl>
 80155a6:	4603      	mov	r3, r0
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d001      	beq.n	80155b0 <sync_fs+0xcc>
 80155ac:	2301      	movs	r3, #1
 80155ae:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80155b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80155b2:	4618      	mov	r0, r3
 80155b4:	3710      	adds	r7, #16
 80155b6:	46bd      	mov	sp, r7
 80155b8:	bd80      	pop	{r7, pc}
 80155ba:	bf00      	nop
 80155bc:	41615252 	.word	0x41615252
 80155c0:	61417272 	.word	0x61417272

080155c4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80155c4:	b480      	push	{r7}
 80155c6:	b083      	sub	sp, #12
 80155c8:	af00      	add	r7, sp, #0
 80155ca:	6078      	str	r0, [r7, #4]
 80155cc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80155ce:	683b      	ldr	r3, [r7, #0]
 80155d0:	3b02      	subs	r3, #2
 80155d2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	69db      	ldr	r3, [r3, #28]
 80155d8:	3b02      	subs	r3, #2
 80155da:	683a      	ldr	r2, [r7, #0]
 80155dc:	429a      	cmp	r2, r3
 80155de:	d301      	bcc.n	80155e4 <clust2sect+0x20>
 80155e0:	2300      	movs	r3, #0
 80155e2:	e008      	b.n	80155f6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	895b      	ldrh	r3, [r3, #10]
 80155e8:	461a      	mov	r2, r3
 80155ea:	683b      	ldr	r3, [r7, #0]
 80155ec:	fb03 f202 	mul.w	r2, r3, r2
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80155f4:	4413      	add	r3, r2
}
 80155f6:	4618      	mov	r0, r3
 80155f8:	370c      	adds	r7, #12
 80155fa:	46bd      	mov	sp, r7
 80155fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015600:	4770      	bx	lr

08015602 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8015602:	b580      	push	{r7, lr}
 8015604:	b086      	sub	sp, #24
 8015606:	af00      	add	r7, sp, #0
 8015608:	6078      	str	r0, [r7, #4]
 801560a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	681b      	ldr	r3, [r3, #0]
 8015610:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8015612:	683b      	ldr	r3, [r7, #0]
 8015614:	2b01      	cmp	r3, #1
 8015616:	d904      	bls.n	8015622 <get_fat+0x20>
 8015618:	693b      	ldr	r3, [r7, #16]
 801561a:	69db      	ldr	r3, [r3, #28]
 801561c:	683a      	ldr	r2, [r7, #0]
 801561e:	429a      	cmp	r2, r3
 8015620:	d302      	bcc.n	8015628 <get_fat+0x26>
		val = 1;	/* Internal error */
 8015622:	2301      	movs	r3, #1
 8015624:	617b      	str	r3, [r7, #20]
 8015626:	e0bb      	b.n	80157a0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8015628:	f04f 33ff 	mov.w	r3, #4294967295
 801562c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801562e:	693b      	ldr	r3, [r7, #16]
 8015630:	781b      	ldrb	r3, [r3, #0]
 8015632:	2b03      	cmp	r3, #3
 8015634:	f000 8083 	beq.w	801573e <get_fat+0x13c>
 8015638:	2b03      	cmp	r3, #3
 801563a:	f300 80a7 	bgt.w	801578c <get_fat+0x18a>
 801563e:	2b01      	cmp	r3, #1
 8015640:	d002      	beq.n	8015648 <get_fat+0x46>
 8015642:	2b02      	cmp	r3, #2
 8015644:	d056      	beq.n	80156f4 <get_fat+0xf2>
 8015646:	e0a1      	b.n	801578c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8015648:	683b      	ldr	r3, [r7, #0]
 801564a:	60fb      	str	r3, [r7, #12]
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	085b      	lsrs	r3, r3, #1
 8015650:	68fa      	ldr	r2, [r7, #12]
 8015652:	4413      	add	r3, r2
 8015654:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015656:	693b      	ldr	r3, [r7, #16]
 8015658:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801565a:	693b      	ldr	r3, [r7, #16]
 801565c:	899b      	ldrh	r3, [r3, #12]
 801565e:	4619      	mov	r1, r3
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	fbb3 f3f1 	udiv	r3, r3, r1
 8015666:	4413      	add	r3, r2
 8015668:	4619      	mov	r1, r3
 801566a:	6938      	ldr	r0, [r7, #16]
 801566c:	f7ff ff0c 	bl	8015488 <move_window>
 8015670:	4603      	mov	r3, r0
 8015672:	2b00      	cmp	r3, #0
 8015674:	f040 808d 	bne.w	8015792 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8015678:	68fb      	ldr	r3, [r7, #12]
 801567a:	1c5a      	adds	r2, r3, #1
 801567c:	60fa      	str	r2, [r7, #12]
 801567e:	693a      	ldr	r2, [r7, #16]
 8015680:	8992      	ldrh	r2, [r2, #12]
 8015682:	fbb3 f1f2 	udiv	r1, r3, r2
 8015686:	fb01 f202 	mul.w	r2, r1, r2
 801568a:	1a9b      	subs	r3, r3, r2
 801568c:	693a      	ldr	r2, [r7, #16]
 801568e:	4413      	add	r3, r2
 8015690:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015694:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015696:	693b      	ldr	r3, [r7, #16]
 8015698:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801569a:	693b      	ldr	r3, [r7, #16]
 801569c:	899b      	ldrh	r3, [r3, #12]
 801569e:	4619      	mov	r1, r3
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80156a6:	4413      	add	r3, r2
 80156a8:	4619      	mov	r1, r3
 80156aa:	6938      	ldr	r0, [r7, #16]
 80156ac:	f7ff feec 	bl	8015488 <move_window>
 80156b0:	4603      	mov	r3, r0
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d16f      	bne.n	8015796 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80156b6:	693b      	ldr	r3, [r7, #16]
 80156b8:	899b      	ldrh	r3, [r3, #12]
 80156ba:	461a      	mov	r2, r3
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	fbb3 f1f2 	udiv	r1, r3, r2
 80156c2:	fb01 f202 	mul.w	r2, r1, r2
 80156c6:	1a9b      	subs	r3, r3, r2
 80156c8:	693a      	ldr	r2, [r7, #16]
 80156ca:	4413      	add	r3, r2
 80156cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80156d0:	021b      	lsls	r3, r3, #8
 80156d2:	461a      	mov	r2, r3
 80156d4:	68bb      	ldr	r3, [r7, #8]
 80156d6:	4313      	orrs	r3, r2
 80156d8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80156da:	683b      	ldr	r3, [r7, #0]
 80156dc:	f003 0301 	and.w	r3, r3, #1
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d002      	beq.n	80156ea <get_fat+0xe8>
 80156e4:	68bb      	ldr	r3, [r7, #8]
 80156e6:	091b      	lsrs	r3, r3, #4
 80156e8:	e002      	b.n	80156f0 <get_fat+0xee>
 80156ea:	68bb      	ldr	r3, [r7, #8]
 80156ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80156f0:	617b      	str	r3, [r7, #20]
			break;
 80156f2:	e055      	b.n	80157a0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80156f4:	693b      	ldr	r3, [r7, #16]
 80156f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80156f8:	693b      	ldr	r3, [r7, #16]
 80156fa:	899b      	ldrh	r3, [r3, #12]
 80156fc:	085b      	lsrs	r3, r3, #1
 80156fe:	b29b      	uxth	r3, r3
 8015700:	4619      	mov	r1, r3
 8015702:	683b      	ldr	r3, [r7, #0]
 8015704:	fbb3 f3f1 	udiv	r3, r3, r1
 8015708:	4413      	add	r3, r2
 801570a:	4619      	mov	r1, r3
 801570c:	6938      	ldr	r0, [r7, #16]
 801570e:	f7ff febb 	bl	8015488 <move_window>
 8015712:	4603      	mov	r3, r0
 8015714:	2b00      	cmp	r3, #0
 8015716:	d140      	bne.n	801579a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8015718:	693b      	ldr	r3, [r7, #16]
 801571a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801571e:	683b      	ldr	r3, [r7, #0]
 8015720:	005b      	lsls	r3, r3, #1
 8015722:	693a      	ldr	r2, [r7, #16]
 8015724:	8992      	ldrh	r2, [r2, #12]
 8015726:	fbb3 f0f2 	udiv	r0, r3, r2
 801572a:	fb00 f202 	mul.w	r2, r0, r2
 801572e:	1a9b      	subs	r3, r3, r2
 8015730:	440b      	add	r3, r1
 8015732:	4618      	mov	r0, r3
 8015734:	f7ff fd64 	bl	8015200 <ld_word>
 8015738:	4603      	mov	r3, r0
 801573a:	617b      	str	r3, [r7, #20]
			break;
 801573c:	e030      	b.n	80157a0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801573e:	693b      	ldr	r3, [r7, #16]
 8015740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015742:	693b      	ldr	r3, [r7, #16]
 8015744:	899b      	ldrh	r3, [r3, #12]
 8015746:	089b      	lsrs	r3, r3, #2
 8015748:	b29b      	uxth	r3, r3
 801574a:	4619      	mov	r1, r3
 801574c:	683b      	ldr	r3, [r7, #0]
 801574e:	fbb3 f3f1 	udiv	r3, r3, r1
 8015752:	4413      	add	r3, r2
 8015754:	4619      	mov	r1, r3
 8015756:	6938      	ldr	r0, [r7, #16]
 8015758:	f7ff fe96 	bl	8015488 <move_window>
 801575c:	4603      	mov	r3, r0
 801575e:	2b00      	cmp	r3, #0
 8015760:	d11d      	bne.n	801579e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8015762:	693b      	ldr	r3, [r7, #16]
 8015764:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015768:	683b      	ldr	r3, [r7, #0]
 801576a:	009b      	lsls	r3, r3, #2
 801576c:	693a      	ldr	r2, [r7, #16]
 801576e:	8992      	ldrh	r2, [r2, #12]
 8015770:	fbb3 f0f2 	udiv	r0, r3, r2
 8015774:	fb00 f202 	mul.w	r2, r0, r2
 8015778:	1a9b      	subs	r3, r3, r2
 801577a:	440b      	add	r3, r1
 801577c:	4618      	mov	r0, r3
 801577e:	f7ff fd57 	bl	8015230 <ld_dword>
 8015782:	4603      	mov	r3, r0
 8015784:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8015788:	617b      	str	r3, [r7, #20]
			break;
 801578a:	e009      	b.n	80157a0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801578c:	2301      	movs	r3, #1
 801578e:	617b      	str	r3, [r7, #20]
 8015790:	e006      	b.n	80157a0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015792:	bf00      	nop
 8015794:	e004      	b.n	80157a0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8015796:	bf00      	nop
 8015798:	e002      	b.n	80157a0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801579a:	bf00      	nop
 801579c:	e000      	b.n	80157a0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801579e:	bf00      	nop
		}
	}

	return val;
 80157a0:	697b      	ldr	r3, [r7, #20]
}
 80157a2:	4618      	mov	r0, r3
 80157a4:	3718      	adds	r7, #24
 80157a6:	46bd      	mov	sp, r7
 80157a8:	bd80      	pop	{r7, pc}

080157aa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80157aa:	b590      	push	{r4, r7, lr}
 80157ac:	b089      	sub	sp, #36	; 0x24
 80157ae:	af00      	add	r7, sp, #0
 80157b0:	60f8      	str	r0, [r7, #12]
 80157b2:	60b9      	str	r1, [r7, #8]
 80157b4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80157b6:	2302      	movs	r3, #2
 80157b8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80157ba:	68bb      	ldr	r3, [r7, #8]
 80157bc:	2b01      	cmp	r3, #1
 80157be:	f240 8102 	bls.w	80159c6 <put_fat+0x21c>
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	69db      	ldr	r3, [r3, #28]
 80157c6:	68ba      	ldr	r2, [r7, #8]
 80157c8:	429a      	cmp	r2, r3
 80157ca:	f080 80fc 	bcs.w	80159c6 <put_fat+0x21c>
		switch (fs->fs_type) {
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	781b      	ldrb	r3, [r3, #0]
 80157d2:	2b03      	cmp	r3, #3
 80157d4:	f000 80b6 	beq.w	8015944 <put_fat+0x19a>
 80157d8:	2b03      	cmp	r3, #3
 80157da:	f300 80fd 	bgt.w	80159d8 <put_fat+0x22e>
 80157de:	2b01      	cmp	r3, #1
 80157e0:	d003      	beq.n	80157ea <put_fat+0x40>
 80157e2:	2b02      	cmp	r3, #2
 80157e4:	f000 8083 	beq.w	80158ee <put_fat+0x144>
 80157e8:	e0f6      	b.n	80159d8 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80157ea:	68bb      	ldr	r3, [r7, #8]
 80157ec:	61bb      	str	r3, [r7, #24]
 80157ee:	69bb      	ldr	r3, [r7, #24]
 80157f0:	085b      	lsrs	r3, r3, #1
 80157f2:	69ba      	ldr	r2, [r7, #24]
 80157f4:	4413      	add	r3, r2
 80157f6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	899b      	ldrh	r3, [r3, #12]
 8015800:	4619      	mov	r1, r3
 8015802:	69bb      	ldr	r3, [r7, #24]
 8015804:	fbb3 f3f1 	udiv	r3, r3, r1
 8015808:	4413      	add	r3, r2
 801580a:	4619      	mov	r1, r3
 801580c:	68f8      	ldr	r0, [r7, #12]
 801580e:	f7ff fe3b 	bl	8015488 <move_window>
 8015812:	4603      	mov	r3, r0
 8015814:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015816:	7ffb      	ldrb	r3, [r7, #31]
 8015818:	2b00      	cmp	r3, #0
 801581a:	f040 80d6 	bne.w	80159ca <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 801581e:	68fb      	ldr	r3, [r7, #12]
 8015820:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015824:	69bb      	ldr	r3, [r7, #24]
 8015826:	1c5a      	adds	r2, r3, #1
 8015828:	61ba      	str	r2, [r7, #24]
 801582a:	68fa      	ldr	r2, [r7, #12]
 801582c:	8992      	ldrh	r2, [r2, #12]
 801582e:	fbb3 f0f2 	udiv	r0, r3, r2
 8015832:	fb00 f202 	mul.w	r2, r0, r2
 8015836:	1a9b      	subs	r3, r3, r2
 8015838:	440b      	add	r3, r1
 801583a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801583c:	68bb      	ldr	r3, [r7, #8]
 801583e:	f003 0301 	and.w	r3, r3, #1
 8015842:	2b00      	cmp	r3, #0
 8015844:	d00d      	beq.n	8015862 <put_fat+0xb8>
 8015846:	697b      	ldr	r3, [r7, #20]
 8015848:	781b      	ldrb	r3, [r3, #0]
 801584a:	b25b      	sxtb	r3, r3
 801584c:	f003 030f 	and.w	r3, r3, #15
 8015850:	b25a      	sxtb	r2, r3
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	b2db      	uxtb	r3, r3
 8015856:	011b      	lsls	r3, r3, #4
 8015858:	b25b      	sxtb	r3, r3
 801585a:	4313      	orrs	r3, r2
 801585c:	b25b      	sxtb	r3, r3
 801585e:	b2db      	uxtb	r3, r3
 8015860:	e001      	b.n	8015866 <put_fat+0xbc>
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	b2db      	uxtb	r3, r3
 8015866:	697a      	ldr	r2, [r7, #20]
 8015868:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801586a:	68fb      	ldr	r3, [r7, #12]
 801586c:	2201      	movs	r2, #1
 801586e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	899b      	ldrh	r3, [r3, #12]
 8015878:	4619      	mov	r1, r3
 801587a:	69bb      	ldr	r3, [r7, #24]
 801587c:	fbb3 f3f1 	udiv	r3, r3, r1
 8015880:	4413      	add	r3, r2
 8015882:	4619      	mov	r1, r3
 8015884:	68f8      	ldr	r0, [r7, #12]
 8015886:	f7ff fdff 	bl	8015488 <move_window>
 801588a:	4603      	mov	r3, r0
 801588c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801588e:	7ffb      	ldrb	r3, [r7, #31]
 8015890:	2b00      	cmp	r3, #0
 8015892:	f040 809c 	bne.w	80159ce <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8015896:	68fb      	ldr	r3, [r7, #12]
 8015898:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	899b      	ldrh	r3, [r3, #12]
 80158a0:	461a      	mov	r2, r3
 80158a2:	69bb      	ldr	r3, [r7, #24]
 80158a4:	fbb3 f0f2 	udiv	r0, r3, r2
 80158a8:	fb00 f202 	mul.w	r2, r0, r2
 80158ac:	1a9b      	subs	r3, r3, r2
 80158ae:	440b      	add	r3, r1
 80158b0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80158b2:	68bb      	ldr	r3, [r7, #8]
 80158b4:	f003 0301 	and.w	r3, r3, #1
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d003      	beq.n	80158c4 <put_fat+0x11a>
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	091b      	lsrs	r3, r3, #4
 80158c0:	b2db      	uxtb	r3, r3
 80158c2:	e00e      	b.n	80158e2 <put_fat+0x138>
 80158c4:	697b      	ldr	r3, [r7, #20]
 80158c6:	781b      	ldrb	r3, [r3, #0]
 80158c8:	b25b      	sxtb	r3, r3
 80158ca:	f023 030f 	bic.w	r3, r3, #15
 80158ce:	b25a      	sxtb	r2, r3
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	0a1b      	lsrs	r3, r3, #8
 80158d4:	b25b      	sxtb	r3, r3
 80158d6:	f003 030f 	and.w	r3, r3, #15
 80158da:	b25b      	sxtb	r3, r3
 80158dc:	4313      	orrs	r3, r2
 80158de:	b25b      	sxtb	r3, r3
 80158e0:	b2db      	uxtb	r3, r3
 80158e2:	697a      	ldr	r2, [r7, #20]
 80158e4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80158e6:	68fb      	ldr	r3, [r7, #12]
 80158e8:	2201      	movs	r2, #1
 80158ea:	70da      	strb	r2, [r3, #3]
			break;
 80158ec:	e074      	b.n	80159d8 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	899b      	ldrh	r3, [r3, #12]
 80158f6:	085b      	lsrs	r3, r3, #1
 80158f8:	b29b      	uxth	r3, r3
 80158fa:	4619      	mov	r1, r3
 80158fc:	68bb      	ldr	r3, [r7, #8]
 80158fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8015902:	4413      	add	r3, r2
 8015904:	4619      	mov	r1, r3
 8015906:	68f8      	ldr	r0, [r7, #12]
 8015908:	f7ff fdbe 	bl	8015488 <move_window>
 801590c:	4603      	mov	r3, r0
 801590e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015910:	7ffb      	ldrb	r3, [r7, #31]
 8015912:	2b00      	cmp	r3, #0
 8015914:	d15d      	bne.n	80159d2 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8015916:	68fb      	ldr	r3, [r7, #12]
 8015918:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801591c:	68bb      	ldr	r3, [r7, #8]
 801591e:	005b      	lsls	r3, r3, #1
 8015920:	68fa      	ldr	r2, [r7, #12]
 8015922:	8992      	ldrh	r2, [r2, #12]
 8015924:	fbb3 f0f2 	udiv	r0, r3, r2
 8015928:	fb00 f202 	mul.w	r2, r0, r2
 801592c:	1a9b      	subs	r3, r3, r2
 801592e:	440b      	add	r3, r1
 8015930:	687a      	ldr	r2, [r7, #4]
 8015932:	b292      	uxth	r2, r2
 8015934:	4611      	mov	r1, r2
 8015936:	4618      	mov	r0, r3
 8015938:	f7ff fc9d 	bl	8015276 <st_word>
			fs->wflag = 1;
 801593c:	68fb      	ldr	r3, [r7, #12]
 801593e:	2201      	movs	r2, #1
 8015940:	70da      	strb	r2, [r3, #3]
			break;
 8015942:	e049      	b.n	80159d8 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	899b      	ldrh	r3, [r3, #12]
 801594c:	089b      	lsrs	r3, r3, #2
 801594e:	b29b      	uxth	r3, r3
 8015950:	4619      	mov	r1, r3
 8015952:	68bb      	ldr	r3, [r7, #8]
 8015954:	fbb3 f3f1 	udiv	r3, r3, r1
 8015958:	4413      	add	r3, r2
 801595a:	4619      	mov	r1, r3
 801595c:	68f8      	ldr	r0, [r7, #12]
 801595e:	f7ff fd93 	bl	8015488 <move_window>
 8015962:	4603      	mov	r3, r0
 8015964:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015966:	7ffb      	ldrb	r3, [r7, #31]
 8015968:	2b00      	cmp	r3, #0
 801596a:	d134      	bne.n	80159d6 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015978:	68bb      	ldr	r3, [r7, #8]
 801597a:	009b      	lsls	r3, r3, #2
 801597c:	68fa      	ldr	r2, [r7, #12]
 801597e:	8992      	ldrh	r2, [r2, #12]
 8015980:	fbb3 f0f2 	udiv	r0, r3, r2
 8015984:	fb00 f202 	mul.w	r2, r0, r2
 8015988:	1a9b      	subs	r3, r3, r2
 801598a:	440b      	add	r3, r1
 801598c:	4618      	mov	r0, r3
 801598e:	f7ff fc4f 	bl	8015230 <ld_dword>
 8015992:	4603      	mov	r3, r0
 8015994:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8015998:	4323      	orrs	r3, r4
 801599a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801599c:	68fb      	ldr	r3, [r7, #12]
 801599e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80159a2:	68bb      	ldr	r3, [r7, #8]
 80159a4:	009b      	lsls	r3, r3, #2
 80159a6:	68fa      	ldr	r2, [r7, #12]
 80159a8:	8992      	ldrh	r2, [r2, #12]
 80159aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80159ae:	fb00 f202 	mul.w	r2, r0, r2
 80159b2:	1a9b      	subs	r3, r3, r2
 80159b4:	440b      	add	r3, r1
 80159b6:	6879      	ldr	r1, [r7, #4]
 80159b8:	4618      	mov	r0, r3
 80159ba:	f7ff fc77 	bl	80152ac <st_dword>
			fs->wflag = 1;
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	2201      	movs	r2, #1
 80159c2:	70da      	strb	r2, [r3, #3]
			break;
 80159c4:	e008      	b.n	80159d8 <put_fat+0x22e>
		}
	}
 80159c6:	bf00      	nop
 80159c8:	e006      	b.n	80159d8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80159ca:	bf00      	nop
 80159cc:	e004      	b.n	80159d8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80159ce:	bf00      	nop
 80159d0:	e002      	b.n	80159d8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80159d2:	bf00      	nop
 80159d4:	e000      	b.n	80159d8 <put_fat+0x22e>
			if (res != FR_OK) break;
 80159d6:	bf00      	nop
	return res;
 80159d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80159da:	4618      	mov	r0, r3
 80159dc:	3724      	adds	r7, #36	; 0x24
 80159de:	46bd      	mov	sp, r7
 80159e0:	bd90      	pop	{r4, r7, pc}

080159e2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80159e2:	b580      	push	{r7, lr}
 80159e4:	b088      	sub	sp, #32
 80159e6:	af00      	add	r7, sp, #0
 80159e8:	60f8      	str	r0, [r7, #12]
 80159ea:	60b9      	str	r1, [r7, #8]
 80159ec:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80159ee:	2300      	movs	r3, #0
 80159f0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80159f2:	68fb      	ldr	r3, [r7, #12]
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80159f8:	68bb      	ldr	r3, [r7, #8]
 80159fa:	2b01      	cmp	r3, #1
 80159fc:	d904      	bls.n	8015a08 <remove_chain+0x26>
 80159fe:	69bb      	ldr	r3, [r7, #24]
 8015a00:	69db      	ldr	r3, [r3, #28]
 8015a02:	68ba      	ldr	r2, [r7, #8]
 8015a04:	429a      	cmp	r2, r3
 8015a06:	d301      	bcc.n	8015a0c <remove_chain+0x2a>
 8015a08:	2302      	movs	r3, #2
 8015a0a:	e04b      	b.n	8015aa4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d00c      	beq.n	8015a2c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8015a12:	f04f 32ff 	mov.w	r2, #4294967295
 8015a16:	6879      	ldr	r1, [r7, #4]
 8015a18:	69b8      	ldr	r0, [r7, #24]
 8015a1a:	f7ff fec6 	bl	80157aa <put_fat>
 8015a1e:	4603      	mov	r3, r0
 8015a20:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8015a22:	7ffb      	ldrb	r3, [r7, #31]
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d001      	beq.n	8015a2c <remove_chain+0x4a>
 8015a28:	7ffb      	ldrb	r3, [r7, #31]
 8015a2a:	e03b      	b.n	8015aa4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8015a2c:	68b9      	ldr	r1, [r7, #8]
 8015a2e:	68f8      	ldr	r0, [r7, #12]
 8015a30:	f7ff fde7 	bl	8015602 <get_fat>
 8015a34:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8015a36:	697b      	ldr	r3, [r7, #20]
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d031      	beq.n	8015aa0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8015a3c:	697b      	ldr	r3, [r7, #20]
 8015a3e:	2b01      	cmp	r3, #1
 8015a40:	d101      	bne.n	8015a46 <remove_chain+0x64>
 8015a42:	2302      	movs	r3, #2
 8015a44:	e02e      	b.n	8015aa4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8015a46:	697b      	ldr	r3, [r7, #20]
 8015a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a4c:	d101      	bne.n	8015a52 <remove_chain+0x70>
 8015a4e:	2301      	movs	r3, #1
 8015a50:	e028      	b.n	8015aa4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8015a52:	2200      	movs	r2, #0
 8015a54:	68b9      	ldr	r1, [r7, #8]
 8015a56:	69b8      	ldr	r0, [r7, #24]
 8015a58:	f7ff fea7 	bl	80157aa <put_fat>
 8015a5c:	4603      	mov	r3, r0
 8015a5e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8015a60:	7ffb      	ldrb	r3, [r7, #31]
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d001      	beq.n	8015a6a <remove_chain+0x88>
 8015a66:	7ffb      	ldrb	r3, [r7, #31]
 8015a68:	e01c      	b.n	8015aa4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8015a6a:	69bb      	ldr	r3, [r7, #24]
 8015a6c:	699a      	ldr	r2, [r3, #24]
 8015a6e:	69bb      	ldr	r3, [r7, #24]
 8015a70:	69db      	ldr	r3, [r3, #28]
 8015a72:	3b02      	subs	r3, #2
 8015a74:	429a      	cmp	r2, r3
 8015a76:	d20b      	bcs.n	8015a90 <remove_chain+0xae>
			fs->free_clst++;
 8015a78:	69bb      	ldr	r3, [r7, #24]
 8015a7a:	699b      	ldr	r3, [r3, #24]
 8015a7c:	1c5a      	adds	r2, r3, #1
 8015a7e:	69bb      	ldr	r3, [r7, #24]
 8015a80:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8015a82:	69bb      	ldr	r3, [r7, #24]
 8015a84:	791b      	ldrb	r3, [r3, #4]
 8015a86:	f043 0301 	orr.w	r3, r3, #1
 8015a8a:	b2da      	uxtb	r2, r3
 8015a8c:	69bb      	ldr	r3, [r7, #24]
 8015a8e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8015a90:	697b      	ldr	r3, [r7, #20]
 8015a92:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8015a94:	69bb      	ldr	r3, [r7, #24]
 8015a96:	69db      	ldr	r3, [r3, #28]
 8015a98:	68ba      	ldr	r2, [r7, #8]
 8015a9a:	429a      	cmp	r2, r3
 8015a9c:	d3c6      	bcc.n	8015a2c <remove_chain+0x4a>
 8015a9e:	e000      	b.n	8015aa2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8015aa0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8015aa2:	2300      	movs	r3, #0
}
 8015aa4:	4618      	mov	r0, r3
 8015aa6:	3720      	adds	r7, #32
 8015aa8:	46bd      	mov	sp, r7
 8015aaa:	bd80      	pop	{r7, pc}

08015aac <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8015aac:	b580      	push	{r7, lr}
 8015aae:	b088      	sub	sp, #32
 8015ab0:	af00      	add	r7, sp, #0
 8015ab2:	6078      	str	r0, [r7, #4]
 8015ab4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8015abc:	683b      	ldr	r3, [r7, #0]
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d10d      	bne.n	8015ade <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8015ac2:	693b      	ldr	r3, [r7, #16]
 8015ac4:	695b      	ldr	r3, [r3, #20]
 8015ac6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8015ac8:	69bb      	ldr	r3, [r7, #24]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d004      	beq.n	8015ad8 <create_chain+0x2c>
 8015ace:	693b      	ldr	r3, [r7, #16]
 8015ad0:	69db      	ldr	r3, [r3, #28]
 8015ad2:	69ba      	ldr	r2, [r7, #24]
 8015ad4:	429a      	cmp	r2, r3
 8015ad6:	d31b      	bcc.n	8015b10 <create_chain+0x64>
 8015ad8:	2301      	movs	r3, #1
 8015ada:	61bb      	str	r3, [r7, #24]
 8015adc:	e018      	b.n	8015b10 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8015ade:	6839      	ldr	r1, [r7, #0]
 8015ae0:	6878      	ldr	r0, [r7, #4]
 8015ae2:	f7ff fd8e 	bl	8015602 <get_fat>
 8015ae6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8015ae8:	68fb      	ldr	r3, [r7, #12]
 8015aea:	2b01      	cmp	r3, #1
 8015aec:	d801      	bhi.n	8015af2 <create_chain+0x46>
 8015aee:	2301      	movs	r3, #1
 8015af0:	e070      	b.n	8015bd4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015af8:	d101      	bne.n	8015afe <create_chain+0x52>
 8015afa:	68fb      	ldr	r3, [r7, #12]
 8015afc:	e06a      	b.n	8015bd4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8015afe:	693b      	ldr	r3, [r7, #16]
 8015b00:	69db      	ldr	r3, [r3, #28]
 8015b02:	68fa      	ldr	r2, [r7, #12]
 8015b04:	429a      	cmp	r2, r3
 8015b06:	d201      	bcs.n	8015b0c <create_chain+0x60>
 8015b08:	68fb      	ldr	r3, [r7, #12]
 8015b0a:	e063      	b.n	8015bd4 <create_chain+0x128>
		scl = clst;
 8015b0c:	683b      	ldr	r3, [r7, #0]
 8015b0e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8015b10:	69bb      	ldr	r3, [r7, #24]
 8015b12:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8015b14:	69fb      	ldr	r3, [r7, #28]
 8015b16:	3301      	adds	r3, #1
 8015b18:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8015b1a:	693b      	ldr	r3, [r7, #16]
 8015b1c:	69db      	ldr	r3, [r3, #28]
 8015b1e:	69fa      	ldr	r2, [r7, #28]
 8015b20:	429a      	cmp	r2, r3
 8015b22:	d307      	bcc.n	8015b34 <create_chain+0x88>
				ncl = 2;
 8015b24:	2302      	movs	r3, #2
 8015b26:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8015b28:	69fa      	ldr	r2, [r7, #28]
 8015b2a:	69bb      	ldr	r3, [r7, #24]
 8015b2c:	429a      	cmp	r2, r3
 8015b2e:	d901      	bls.n	8015b34 <create_chain+0x88>
 8015b30:	2300      	movs	r3, #0
 8015b32:	e04f      	b.n	8015bd4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8015b34:	69f9      	ldr	r1, [r7, #28]
 8015b36:	6878      	ldr	r0, [r7, #4]
 8015b38:	f7ff fd63 	bl	8015602 <get_fat>
 8015b3c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8015b3e:	68fb      	ldr	r3, [r7, #12]
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d00e      	beq.n	8015b62 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	2b01      	cmp	r3, #1
 8015b48:	d003      	beq.n	8015b52 <create_chain+0xa6>
 8015b4a:	68fb      	ldr	r3, [r7, #12]
 8015b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b50:	d101      	bne.n	8015b56 <create_chain+0xaa>
 8015b52:	68fb      	ldr	r3, [r7, #12]
 8015b54:	e03e      	b.n	8015bd4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8015b56:	69fa      	ldr	r2, [r7, #28]
 8015b58:	69bb      	ldr	r3, [r7, #24]
 8015b5a:	429a      	cmp	r2, r3
 8015b5c:	d1da      	bne.n	8015b14 <create_chain+0x68>
 8015b5e:	2300      	movs	r3, #0
 8015b60:	e038      	b.n	8015bd4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8015b62:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8015b64:	f04f 32ff 	mov.w	r2, #4294967295
 8015b68:	69f9      	ldr	r1, [r7, #28]
 8015b6a:	6938      	ldr	r0, [r7, #16]
 8015b6c:	f7ff fe1d 	bl	80157aa <put_fat>
 8015b70:	4603      	mov	r3, r0
 8015b72:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8015b74:	7dfb      	ldrb	r3, [r7, #23]
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d109      	bne.n	8015b8e <create_chain+0xe2>
 8015b7a:	683b      	ldr	r3, [r7, #0]
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d006      	beq.n	8015b8e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8015b80:	69fa      	ldr	r2, [r7, #28]
 8015b82:	6839      	ldr	r1, [r7, #0]
 8015b84:	6938      	ldr	r0, [r7, #16]
 8015b86:	f7ff fe10 	bl	80157aa <put_fat>
 8015b8a:	4603      	mov	r3, r0
 8015b8c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8015b8e:	7dfb      	ldrb	r3, [r7, #23]
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d116      	bne.n	8015bc2 <create_chain+0x116>
		fs->last_clst = ncl;
 8015b94:	693b      	ldr	r3, [r7, #16]
 8015b96:	69fa      	ldr	r2, [r7, #28]
 8015b98:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8015b9a:	693b      	ldr	r3, [r7, #16]
 8015b9c:	699a      	ldr	r2, [r3, #24]
 8015b9e:	693b      	ldr	r3, [r7, #16]
 8015ba0:	69db      	ldr	r3, [r3, #28]
 8015ba2:	3b02      	subs	r3, #2
 8015ba4:	429a      	cmp	r2, r3
 8015ba6:	d804      	bhi.n	8015bb2 <create_chain+0x106>
 8015ba8:	693b      	ldr	r3, [r7, #16]
 8015baa:	699b      	ldr	r3, [r3, #24]
 8015bac:	1e5a      	subs	r2, r3, #1
 8015bae:	693b      	ldr	r3, [r7, #16]
 8015bb0:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8015bb2:	693b      	ldr	r3, [r7, #16]
 8015bb4:	791b      	ldrb	r3, [r3, #4]
 8015bb6:	f043 0301 	orr.w	r3, r3, #1
 8015bba:	b2da      	uxtb	r2, r3
 8015bbc:	693b      	ldr	r3, [r7, #16]
 8015bbe:	711a      	strb	r2, [r3, #4]
 8015bc0:	e007      	b.n	8015bd2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8015bc2:	7dfb      	ldrb	r3, [r7, #23]
 8015bc4:	2b01      	cmp	r3, #1
 8015bc6:	d102      	bne.n	8015bce <create_chain+0x122>
 8015bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8015bcc:	e000      	b.n	8015bd0 <create_chain+0x124>
 8015bce:	2301      	movs	r3, #1
 8015bd0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8015bd2:	69fb      	ldr	r3, [r7, #28]
}
 8015bd4:	4618      	mov	r0, r3
 8015bd6:	3720      	adds	r7, #32
 8015bd8:	46bd      	mov	sp, r7
 8015bda:	bd80      	pop	{r7, pc}

08015bdc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8015bdc:	b480      	push	{r7}
 8015bde:	b087      	sub	sp, #28
 8015be0:	af00      	add	r7, sp, #0
 8015be2:	6078      	str	r0, [r7, #4]
 8015be4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	681b      	ldr	r3, [r3, #0]
 8015bea:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015bf0:	3304      	adds	r3, #4
 8015bf2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8015bf4:	68fb      	ldr	r3, [r7, #12]
 8015bf6:	899b      	ldrh	r3, [r3, #12]
 8015bf8:	461a      	mov	r2, r3
 8015bfa:	683b      	ldr	r3, [r7, #0]
 8015bfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8015c00:	68fa      	ldr	r2, [r7, #12]
 8015c02:	8952      	ldrh	r2, [r2, #10]
 8015c04:	fbb3 f3f2 	udiv	r3, r3, r2
 8015c08:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8015c0a:	693b      	ldr	r3, [r7, #16]
 8015c0c:	1d1a      	adds	r2, r3, #4
 8015c0e:	613a      	str	r2, [r7, #16]
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8015c14:	68bb      	ldr	r3, [r7, #8]
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d101      	bne.n	8015c1e <clmt_clust+0x42>
 8015c1a:	2300      	movs	r3, #0
 8015c1c:	e010      	b.n	8015c40 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8015c1e:	697a      	ldr	r2, [r7, #20]
 8015c20:	68bb      	ldr	r3, [r7, #8]
 8015c22:	429a      	cmp	r2, r3
 8015c24:	d307      	bcc.n	8015c36 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8015c26:	697a      	ldr	r2, [r7, #20]
 8015c28:	68bb      	ldr	r3, [r7, #8]
 8015c2a:	1ad3      	subs	r3, r2, r3
 8015c2c:	617b      	str	r3, [r7, #20]
 8015c2e:	693b      	ldr	r3, [r7, #16]
 8015c30:	3304      	adds	r3, #4
 8015c32:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8015c34:	e7e9      	b.n	8015c0a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8015c36:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8015c38:	693b      	ldr	r3, [r7, #16]
 8015c3a:	681a      	ldr	r2, [r3, #0]
 8015c3c:	697b      	ldr	r3, [r7, #20]
 8015c3e:	4413      	add	r3, r2
}
 8015c40:	4618      	mov	r0, r3
 8015c42:	371c      	adds	r7, #28
 8015c44:	46bd      	mov	sp, r7
 8015c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c4a:	4770      	bx	lr

08015c4c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8015c4c:	b580      	push	{r7, lr}
 8015c4e:	b086      	sub	sp, #24
 8015c50:	af00      	add	r7, sp, #0
 8015c52:	6078      	str	r0, [r7, #4]
 8015c54:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8015c5c:	683b      	ldr	r3, [r7, #0]
 8015c5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015c62:	d204      	bcs.n	8015c6e <dir_sdi+0x22>
 8015c64:	683b      	ldr	r3, [r7, #0]
 8015c66:	f003 031f 	and.w	r3, r3, #31
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d001      	beq.n	8015c72 <dir_sdi+0x26>
		return FR_INT_ERR;
 8015c6e:	2302      	movs	r3, #2
 8015c70:	e071      	b.n	8015d56 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	683a      	ldr	r2, [r7, #0]
 8015c76:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	689b      	ldr	r3, [r3, #8]
 8015c7c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8015c7e:	697b      	ldr	r3, [r7, #20]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d106      	bne.n	8015c92 <dir_sdi+0x46>
 8015c84:	693b      	ldr	r3, [r7, #16]
 8015c86:	781b      	ldrb	r3, [r3, #0]
 8015c88:	2b02      	cmp	r3, #2
 8015c8a:	d902      	bls.n	8015c92 <dir_sdi+0x46>
		clst = fs->dirbase;
 8015c8c:	693b      	ldr	r3, [r7, #16]
 8015c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c90:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8015c92:	697b      	ldr	r3, [r7, #20]
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d10c      	bne.n	8015cb2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8015c98:	683b      	ldr	r3, [r7, #0]
 8015c9a:	095b      	lsrs	r3, r3, #5
 8015c9c:	693a      	ldr	r2, [r7, #16]
 8015c9e:	8912      	ldrh	r2, [r2, #8]
 8015ca0:	4293      	cmp	r3, r2
 8015ca2:	d301      	bcc.n	8015ca8 <dir_sdi+0x5c>
 8015ca4:	2302      	movs	r3, #2
 8015ca6:	e056      	b.n	8015d56 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8015ca8:	693b      	ldr	r3, [r7, #16]
 8015caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	619a      	str	r2, [r3, #24]
 8015cb0:	e02d      	b.n	8015d0e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8015cb2:	693b      	ldr	r3, [r7, #16]
 8015cb4:	895b      	ldrh	r3, [r3, #10]
 8015cb6:	461a      	mov	r2, r3
 8015cb8:	693b      	ldr	r3, [r7, #16]
 8015cba:	899b      	ldrh	r3, [r3, #12]
 8015cbc:	fb02 f303 	mul.w	r3, r2, r3
 8015cc0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8015cc2:	e019      	b.n	8015cf8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	6979      	ldr	r1, [r7, #20]
 8015cc8:	4618      	mov	r0, r3
 8015cca:	f7ff fc9a 	bl	8015602 <get_fat>
 8015cce:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015cd0:	697b      	ldr	r3, [r7, #20]
 8015cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015cd6:	d101      	bne.n	8015cdc <dir_sdi+0x90>
 8015cd8:	2301      	movs	r3, #1
 8015cda:	e03c      	b.n	8015d56 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8015cdc:	697b      	ldr	r3, [r7, #20]
 8015cde:	2b01      	cmp	r3, #1
 8015ce0:	d904      	bls.n	8015cec <dir_sdi+0xa0>
 8015ce2:	693b      	ldr	r3, [r7, #16]
 8015ce4:	69db      	ldr	r3, [r3, #28]
 8015ce6:	697a      	ldr	r2, [r7, #20]
 8015ce8:	429a      	cmp	r2, r3
 8015cea:	d301      	bcc.n	8015cf0 <dir_sdi+0xa4>
 8015cec:	2302      	movs	r3, #2
 8015cee:	e032      	b.n	8015d56 <dir_sdi+0x10a>
			ofs -= csz;
 8015cf0:	683a      	ldr	r2, [r7, #0]
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	1ad3      	subs	r3, r2, r3
 8015cf6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8015cf8:	683a      	ldr	r2, [r7, #0]
 8015cfa:	68fb      	ldr	r3, [r7, #12]
 8015cfc:	429a      	cmp	r2, r3
 8015cfe:	d2e1      	bcs.n	8015cc4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8015d00:	6979      	ldr	r1, [r7, #20]
 8015d02:	6938      	ldr	r0, [r7, #16]
 8015d04:	f7ff fc5e 	bl	80155c4 <clust2sect>
 8015d08:	4602      	mov	r2, r0
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	697a      	ldr	r2, [r7, #20]
 8015d12:	615a      	str	r2, [r3, #20]
	if (!dp->sect) return FR_INT_ERR;
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	699b      	ldr	r3, [r3, #24]
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	d101      	bne.n	8015d20 <dir_sdi+0xd4>
 8015d1c:	2302      	movs	r3, #2
 8015d1e:	e01a      	b.n	8015d56 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	699a      	ldr	r2, [r3, #24]
 8015d24:	693b      	ldr	r3, [r7, #16]
 8015d26:	899b      	ldrh	r3, [r3, #12]
 8015d28:	4619      	mov	r1, r3
 8015d2a:	683b      	ldr	r3, [r7, #0]
 8015d2c:	fbb3 f3f1 	udiv	r3, r3, r1
 8015d30:	441a      	add	r2, r3
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8015d36:	693b      	ldr	r3, [r7, #16]
 8015d38:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015d3c:	693b      	ldr	r3, [r7, #16]
 8015d3e:	899b      	ldrh	r3, [r3, #12]
 8015d40:	461a      	mov	r2, r3
 8015d42:	683b      	ldr	r3, [r7, #0]
 8015d44:	fbb3 f0f2 	udiv	r0, r3, r2
 8015d48:	fb00 f202 	mul.w	r2, r0, r2
 8015d4c:	1a9b      	subs	r3, r3, r2
 8015d4e:	18ca      	adds	r2, r1, r3
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8015d54:	2300      	movs	r3, #0
}
 8015d56:	4618      	mov	r0, r3
 8015d58:	3718      	adds	r7, #24
 8015d5a:	46bd      	mov	sp, r7
 8015d5c:	bd80      	pop	{r7, pc}

08015d5e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8015d5e:	b580      	push	{r7, lr}
 8015d60:	b086      	sub	sp, #24
 8015d62:	af00      	add	r7, sp, #0
 8015d64:	6078      	str	r0, [r7, #4]
 8015d66:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	691b      	ldr	r3, [r3, #16]
 8015d72:	3320      	adds	r3, #32
 8015d74:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	699b      	ldr	r3, [r3, #24]
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d003      	beq.n	8015d86 <dir_next+0x28>
 8015d7e:	68bb      	ldr	r3, [r7, #8]
 8015d80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015d84:	d301      	bcc.n	8015d8a <dir_next+0x2c>
 8015d86:	2304      	movs	r3, #4
 8015d88:	e0bb      	b.n	8015f02 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8015d8a:	68fb      	ldr	r3, [r7, #12]
 8015d8c:	899b      	ldrh	r3, [r3, #12]
 8015d8e:	461a      	mov	r2, r3
 8015d90:	68bb      	ldr	r3, [r7, #8]
 8015d92:	fbb3 f1f2 	udiv	r1, r3, r2
 8015d96:	fb01 f202 	mul.w	r2, r1, r2
 8015d9a:	1a9b      	subs	r3, r3, r2
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	f040 809d 	bne.w	8015edc <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	699b      	ldr	r3, [r3, #24]
 8015da6:	1c5a      	adds	r2, r3, #1
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	619a      	str	r2, [r3, #24]

		if (!dp->clust) {		/* Static table */
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	695b      	ldr	r3, [r3, #20]
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d10b      	bne.n	8015dcc <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8015db4:	68bb      	ldr	r3, [r7, #8]
 8015db6:	095b      	lsrs	r3, r3, #5
 8015db8:	68fa      	ldr	r2, [r7, #12]
 8015dba:	8912      	ldrh	r2, [r2, #8]
 8015dbc:	4293      	cmp	r3, r2
 8015dbe:	f0c0 808d 	bcc.w	8015edc <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	2200      	movs	r2, #0
 8015dc6:	619a      	str	r2, [r3, #24]
 8015dc8:	2304      	movs	r3, #4
 8015dca:	e09a      	b.n	8015f02 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	899b      	ldrh	r3, [r3, #12]
 8015dd0:	461a      	mov	r2, r3
 8015dd2:	68bb      	ldr	r3, [r7, #8]
 8015dd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8015dd8:	68fa      	ldr	r2, [r7, #12]
 8015dda:	8952      	ldrh	r2, [r2, #10]
 8015ddc:	3a01      	subs	r2, #1
 8015dde:	4013      	ands	r3, r2
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d17b      	bne.n	8015edc <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8015de4:	687a      	ldr	r2, [r7, #4]
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	695b      	ldr	r3, [r3, #20]
 8015dea:	4619      	mov	r1, r3
 8015dec:	4610      	mov	r0, r2
 8015dee:	f7ff fc08 	bl	8015602 <get_fat>
 8015df2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8015df4:	697b      	ldr	r3, [r7, #20]
 8015df6:	2b01      	cmp	r3, #1
 8015df8:	d801      	bhi.n	8015dfe <dir_next+0xa0>
 8015dfa:	2302      	movs	r3, #2
 8015dfc:	e081      	b.n	8015f02 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8015dfe:	697b      	ldr	r3, [r7, #20]
 8015e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e04:	d101      	bne.n	8015e0a <dir_next+0xac>
 8015e06:	2301      	movs	r3, #1
 8015e08:	e07b      	b.n	8015f02 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	69db      	ldr	r3, [r3, #28]
 8015e0e:	697a      	ldr	r2, [r7, #20]
 8015e10:	429a      	cmp	r2, r3
 8015e12:	d359      	bcc.n	8015ec8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8015e14:	683b      	ldr	r3, [r7, #0]
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d104      	bne.n	8015e24 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	2200      	movs	r2, #0
 8015e1e:	619a      	str	r2, [r3, #24]
 8015e20:	2304      	movs	r3, #4
 8015e22:	e06e      	b.n	8015f02 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8015e24:	687a      	ldr	r2, [r7, #4]
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	695b      	ldr	r3, [r3, #20]
 8015e2a:	4619      	mov	r1, r3
 8015e2c:	4610      	mov	r0, r2
 8015e2e:	f7ff fe3d 	bl	8015aac <create_chain>
 8015e32:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8015e34:	697b      	ldr	r3, [r7, #20]
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d101      	bne.n	8015e3e <dir_next+0xe0>
 8015e3a:	2307      	movs	r3, #7
 8015e3c:	e061      	b.n	8015f02 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8015e3e:	697b      	ldr	r3, [r7, #20]
 8015e40:	2b01      	cmp	r3, #1
 8015e42:	d101      	bne.n	8015e48 <dir_next+0xea>
 8015e44:	2302      	movs	r3, #2
 8015e46:	e05c      	b.n	8015f02 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015e48:	697b      	ldr	r3, [r7, #20]
 8015e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e4e:	d101      	bne.n	8015e54 <dir_next+0xf6>
 8015e50:	2301      	movs	r3, #1
 8015e52:	e056      	b.n	8015f02 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8015e54:	68f8      	ldr	r0, [r7, #12]
 8015e56:	f7ff fad3 	bl	8015400 <sync_window>
 8015e5a:	4603      	mov	r3, r0
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d001      	beq.n	8015e64 <dir_next+0x106>
 8015e60:	2301      	movs	r3, #1
 8015e62:	e04e      	b.n	8015f02 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8015e6a:	68fb      	ldr	r3, [r7, #12]
 8015e6c:	899b      	ldrh	r3, [r3, #12]
 8015e6e:	461a      	mov	r2, r3
 8015e70:	2100      	movs	r1, #0
 8015e72:	f7ff fa68 	bl	8015346 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015e76:	2300      	movs	r3, #0
 8015e78:	613b      	str	r3, [r7, #16]
 8015e7a:	6979      	ldr	r1, [r7, #20]
 8015e7c:	68f8      	ldr	r0, [r7, #12]
 8015e7e:	f7ff fba1 	bl	80155c4 <clust2sect>
 8015e82:	4602      	mov	r2, r0
 8015e84:	68fb      	ldr	r3, [r7, #12]
 8015e86:	635a      	str	r2, [r3, #52]	; 0x34
 8015e88:	e012      	b.n	8015eb0 <dir_next+0x152>
						fs->wflag = 1;
 8015e8a:	68fb      	ldr	r3, [r7, #12]
 8015e8c:	2201      	movs	r2, #1
 8015e8e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8015e90:	68f8      	ldr	r0, [r7, #12]
 8015e92:	f7ff fab5 	bl	8015400 <sync_window>
 8015e96:	4603      	mov	r3, r0
 8015e98:	2b00      	cmp	r3, #0
 8015e9a:	d001      	beq.n	8015ea0 <dir_next+0x142>
 8015e9c:	2301      	movs	r3, #1
 8015e9e:	e030      	b.n	8015f02 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015ea0:	693b      	ldr	r3, [r7, #16]
 8015ea2:	3301      	adds	r3, #1
 8015ea4:	613b      	str	r3, [r7, #16]
 8015ea6:	68fb      	ldr	r3, [r7, #12]
 8015ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015eaa:	1c5a      	adds	r2, r3, #1
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	635a      	str	r2, [r3, #52]	; 0x34
 8015eb0:	68fb      	ldr	r3, [r7, #12]
 8015eb2:	895b      	ldrh	r3, [r3, #10]
 8015eb4:	461a      	mov	r2, r3
 8015eb6:	693b      	ldr	r3, [r7, #16]
 8015eb8:	4293      	cmp	r3, r2
 8015eba:	d3e6      	bcc.n	8015e8a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8015ebc:	68fb      	ldr	r3, [r7, #12]
 8015ebe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015ec0:	693b      	ldr	r3, [r7, #16]
 8015ec2:	1ad2      	subs	r2, r2, r3
 8015ec4:	68fb      	ldr	r3, [r7, #12]
 8015ec6:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	697a      	ldr	r2, [r7, #20]
 8015ecc:	615a      	str	r2, [r3, #20]
				dp->sect = clust2sect(fs, clst);
 8015ece:	6979      	ldr	r1, [r7, #20]
 8015ed0:	68f8      	ldr	r0, [r7, #12]
 8015ed2:	f7ff fb77 	bl	80155c4 <clust2sect>
 8015ed6:	4602      	mov	r2, r0
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	68ba      	ldr	r2, [r7, #8]
 8015ee0:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8015ee2:	68fb      	ldr	r3, [r7, #12]
 8015ee4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	899b      	ldrh	r3, [r3, #12]
 8015eec:	461a      	mov	r2, r3
 8015eee:	68bb      	ldr	r3, [r7, #8]
 8015ef0:	fbb3 f0f2 	udiv	r0, r3, r2
 8015ef4:	fb00 f202 	mul.w	r2, r0, r2
 8015ef8:	1a9b      	subs	r3, r3, r2
 8015efa:	18ca      	adds	r2, r1, r3
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8015f00:	2300      	movs	r3, #0
}
 8015f02:	4618      	mov	r0, r3
 8015f04:	3718      	adds	r7, #24
 8015f06:	46bd      	mov	sp, r7
 8015f08:	bd80      	pop	{r7, pc}

08015f0a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8015f0a:	b580      	push	{r7, lr}
 8015f0c:	b086      	sub	sp, #24
 8015f0e:	af00      	add	r7, sp, #0
 8015f10:	6078      	str	r0, [r7, #4]
 8015f12:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	681b      	ldr	r3, [r3, #0]
 8015f18:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8015f1a:	2100      	movs	r1, #0
 8015f1c:	6878      	ldr	r0, [r7, #4]
 8015f1e:	f7ff fe95 	bl	8015c4c <dir_sdi>
 8015f22:	4603      	mov	r3, r0
 8015f24:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015f26:	7dfb      	ldrb	r3, [r7, #23]
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d12b      	bne.n	8015f84 <dir_alloc+0x7a>
		n = 0;
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	699b      	ldr	r3, [r3, #24]
 8015f34:	4619      	mov	r1, r3
 8015f36:	68f8      	ldr	r0, [r7, #12]
 8015f38:	f7ff faa6 	bl	8015488 <move_window>
 8015f3c:	4603      	mov	r3, r0
 8015f3e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8015f40:	7dfb      	ldrb	r3, [r7, #23]
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d11d      	bne.n	8015f82 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	69db      	ldr	r3, [r3, #28]
 8015f4a:	781b      	ldrb	r3, [r3, #0]
 8015f4c:	2be5      	cmp	r3, #229	; 0xe5
 8015f4e:	d004      	beq.n	8015f5a <dir_alloc+0x50>
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	69db      	ldr	r3, [r3, #28]
 8015f54:	781b      	ldrb	r3, [r3, #0]
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d107      	bne.n	8015f6a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8015f5a:	693b      	ldr	r3, [r7, #16]
 8015f5c:	3301      	adds	r3, #1
 8015f5e:	613b      	str	r3, [r7, #16]
 8015f60:	693a      	ldr	r2, [r7, #16]
 8015f62:	683b      	ldr	r3, [r7, #0]
 8015f64:	429a      	cmp	r2, r3
 8015f66:	d102      	bne.n	8015f6e <dir_alloc+0x64>
 8015f68:	e00c      	b.n	8015f84 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8015f6a:	2300      	movs	r3, #0
 8015f6c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8015f6e:	2101      	movs	r1, #1
 8015f70:	6878      	ldr	r0, [r7, #4]
 8015f72:	f7ff fef4 	bl	8015d5e <dir_next>
 8015f76:	4603      	mov	r3, r0
 8015f78:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8015f7a:	7dfb      	ldrb	r3, [r7, #23]
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d0d7      	beq.n	8015f30 <dir_alloc+0x26>
 8015f80:	e000      	b.n	8015f84 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8015f82:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8015f84:	7dfb      	ldrb	r3, [r7, #23]
 8015f86:	2b04      	cmp	r3, #4
 8015f88:	d101      	bne.n	8015f8e <dir_alloc+0x84>
 8015f8a:	2307      	movs	r3, #7
 8015f8c:	75fb      	strb	r3, [r7, #23]
	return res;
 8015f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015f90:	4618      	mov	r0, r3
 8015f92:	3718      	adds	r7, #24
 8015f94:	46bd      	mov	sp, r7
 8015f96:	bd80      	pop	{r7, pc}

08015f98 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8015f98:	b580      	push	{r7, lr}
 8015f9a:	b084      	sub	sp, #16
 8015f9c:	af00      	add	r7, sp, #0
 8015f9e:	6078      	str	r0, [r7, #4]
 8015fa0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8015fa2:	683b      	ldr	r3, [r7, #0]
 8015fa4:	331a      	adds	r3, #26
 8015fa6:	4618      	mov	r0, r3
 8015fa8:	f7ff f92a 	bl	8015200 <ld_word>
 8015fac:	4603      	mov	r3, r0
 8015fae:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	781b      	ldrb	r3, [r3, #0]
 8015fb4:	2b03      	cmp	r3, #3
 8015fb6:	d109      	bne.n	8015fcc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8015fb8:	683b      	ldr	r3, [r7, #0]
 8015fba:	3314      	adds	r3, #20
 8015fbc:	4618      	mov	r0, r3
 8015fbe:	f7ff f91f 	bl	8015200 <ld_word>
 8015fc2:	4603      	mov	r3, r0
 8015fc4:	041b      	lsls	r3, r3, #16
 8015fc6:	68fa      	ldr	r2, [r7, #12]
 8015fc8:	4313      	orrs	r3, r2
 8015fca:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8015fcc:	68fb      	ldr	r3, [r7, #12]
}
 8015fce:	4618      	mov	r0, r3
 8015fd0:	3710      	adds	r7, #16
 8015fd2:	46bd      	mov	sp, r7
 8015fd4:	bd80      	pop	{r7, pc}

08015fd6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8015fd6:	b580      	push	{r7, lr}
 8015fd8:	b084      	sub	sp, #16
 8015fda:	af00      	add	r7, sp, #0
 8015fdc:	60f8      	str	r0, [r7, #12]
 8015fde:	60b9      	str	r1, [r7, #8]
 8015fe0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8015fe2:	68bb      	ldr	r3, [r7, #8]
 8015fe4:	331a      	adds	r3, #26
 8015fe6:	687a      	ldr	r2, [r7, #4]
 8015fe8:	b292      	uxth	r2, r2
 8015fea:	4611      	mov	r1, r2
 8015fec:	4618      	mov	r0, r3
 8015fee:	f7ff f942 	bl	8015276 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8015ff2:	68fb      	ldr	r3, [r7, #12]
 8015ff4:	781b      	ldrb	r3, [r3, #0]
 8015ff6:	2b03      	cmp	r3, #3
 8015ff8:	d109      	bne.n	801600e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8015ffa:	68bb      	ldr	r3, [r7, #8]
 8015ffc:	f103 0214 	add.w	r2, r3, #20
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	0c1b      	lsrs	r3, r3, #16
 8016004:	b29b      	uxth	r3, r3
 8016006:	4619      	mov	r1, r3
 8016008:	4610      	mov	r0, r2
 801600a:	f7ff f934 	bl	8015276 <st_word>
	}
}
 801600e:	bf00      	nop
 8016010:	3710      	adds	r7, #16
 8016012:	46bd      	mov	sp, r7
 8016014:	bd80      	pop	{r7, pc}
	...

08016018 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8016018:	b590      	push	{r4, r7, lr}
 801601a:	b087      	sub	sp, #28
 801601c:	af00      	add	r7, sp, #0
 801601e:	6078      	str	r0, [r7, #4]
 8016020:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8016022:	683b      	ldr	r3, [r7, #0]
 8016024:	331a      	adds	r3, #26
 8016026:	4618      	mov	r0, r3
 8016028:	f7ff f8ea 	bl	8015200 <ld_word>
 801602c:	4603      	mov	r3, r0
 801602e:	2b00      	cmp	r3, #0
 8016030:	d001      	beq.n	8016036 <cmp_lfn+0x1e>
 8016032:	2300      	movs	r3, #0
 8016034:	e059      	b.n	80160ea <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8016036:	683b      	ldr	r3, [r7, #0]
 8016038:	781b      	ldrb	r3, [r3, #0]
 801603a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801603e:	1e5a      	subs	r2, r3, #1
 8016040:	4613      	mov	r3, r2
 8016042:	005b      	lsls	r3, r3, #1
 8016044:	4413      	add	r3, r2
 8016046:	009b      	lsls	r3, r3, #2
 8016048:	4413      	add	r3, r2
 801604a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801604c:	2301      	movs	r3, #1
 801604e:	81fb      	strh	r3, [r7, #14]
 8016050:	2300      	movs	r3, #0
 8016052:	613b      	str	r3, [r7, #16]
 8016054:	e033      	b.n	80160be <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8016056:	4a27      	ldr	r2, [pc, #156]	; (80160f4 <cmp_lfn+0xdc>)
 8016058:	693b      	ldr	r3, [r7, #16]
 801605a:	4413      	add	r3, r2
 801605c:	781b      	ldrb	r3, [r3, #0]
 801605e:	461a      	mov	r2, r3
 8016060:	683b      	ldr	r3, [r7, #0]
 8016062:	4413      	add	r3, r2
 8016064:	4618      	mov	r0, r3
 8016066:	f7ff f8cb 	bl	8015200 <ld_word>
 801606a:	4603      	mov	r3, r0
 801606c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801606e:	89fb      	ldrh	r3, [r7, #14]
 8016070:	2b00      	cmp	r3, #0
 8016072:	d01a      	beq.n	80160aa <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8016074:	697b      	ldr	r3, [r7, #20]
 8016076:	2bfe      	cmp	r3, #254	; 0xfe
 8016078:	d812      	bhi.n	80160a0 <cmp_lfn+0x88>
 801607a:	89bb      	ldrh	r3, [r7, #12]
 801607c:	4618      	mov	r0, r3
 801607e:	f001 feb3 	bl	8017de8 <ff_wtoupper>
 8016082:	4603      	mov	r3, r0
 8016084:	461c      	mov	r4, r3
 8016086:	697b      	ldr	r3, [r7, #20]
 8016088:	1c5a      	adds	r2, r3, #1
 801608a:	617a      	str	r2, [r7, #20]
 801608c:	005b      	lsls	r3, r3, #1
 801608e:	687a      	ldr	r2, [r7, #4]
 8016090:	4413      	add	r3, r2
 8016092:	881b      	ldrh	r3, [r3, #0]
 8016094:	4618      	mov	r0, r3
 8016096:	f001 fea7 	bl	8017de8 <ff_wtoupper>
 801609a:	4603      	mov	r3, r0
 801609c:	429c      	cmp	r4, r3
 801609e:	d001      	beq.n	80160a4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80160a0:	2300      	movs	r3, #0
 80160a2:	e022      	b.n	80160ea <cmp_lfn+0xd2>
			}
			wc = uc;
 80160a4:	89bb      	ldrh	r3, [r7, #12]
 80160a6:	81fb      	strh	r3, [r7, #14]
 80160a8:	e006      	b.n	80160b8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80160aa:	89bb      	ldrh	r3, [r7, #12]
 80160ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80160b0:	4293      	cmp	r3, r2
 80160b2:	d001      	beq.n	80160b8 <cmp_lfn+0xa0>
 80160b4:	2300      	movs	r3, #0
 80160b6:	e018      	b.n	80160ea <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80160b8:	693b      	ldr	r3, [r7, #16]
 80160ba:	3301      	adds	r3, #1
 80160bc:	613b      	str	r3, [r7, #16]
 80160be:	693b      	ldr	r3, [r7, #16]
 80160c0:	2b0c      	cmp	r3, #12
 80160c2:	d9c8      	bls.n	8016056 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80160c4:	683b      	ldr	r3, [r7, #0]
 80160c6:	781b      	ldrb	r3, [r3, #0]
 80160c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d00b      	beq.n	80160e8 <cmp_lfn+0xd0>
 80160d0:	89fb      	ldrh	r3, [r7, #14]
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d008      	beq.n	80160e8 <cmp_lfn+0xd0>
 80160d6:	697b      	ldr	r3, [r7, #20]
 80160d8:	005b      	lsls	r3, r3, #1
 80160da:	687a      	ldr	r2, [r7, #4]
 80160dc:	4413      	add	r3, r2
 80160de:	881b      	ldrh	r3, [r3, #0]
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d001      	beq.n	80160e8 <cmp_lfn+0xd0>
 80160e4:	2300      	movs	r3, #0
 80160e6:	e000      	b.n	80160ea <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80160e8:	2301      	movs	r3, #1
}
 80160ea:	4618      	mov	r0, r3
 80160ec:	371c      	adds	r7, #28
 80160ee:	46bd      	mov	sp, r7
 80160f0:	bd90      	pop	{r4, r7, pc}
 80160f2:	bf00      	nop
 80160f4:	08019494 	.word	0x08019494

080160f8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80160f8:	b580      	push	{r7, lr}
 80160fa:	b088      	sub	sp, #32
 80160fc:	af00      	add	r7, sp, #0
 80160fe:	60f8      	str	r0, [r7, #12]
 8016100:	60b9      	str	r1, [r7, #8]
 8016102:	4611      	mov	r1, r2
 8016104:	461a      	mov	r2, r3
 8016106:	460b      	mov	r3, r1
 8016108:	71fb      	strb	r3, [r7, #7]
 801610a:	4613      	mov	r3, r2
 801610c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801610e:	68bb      	ldr	r3, [r7, #8]
 8016110:	330d      	adds	r3, #13
 8016112:	79ba      	ldrb	r2, [r7, #6]
 8016114:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8016116:	68bb      	ldr	r3, [r7, #8]
 8016118:	330b      	adds	r3, #11
 801611a:	220f      	movs	r2, #15
 801611c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801611e:	68bb      	ldr	r3, [r7, #8]
 8016120:	330c      	adds	r3, #12
 8016122:	2200      	movs	r2, #0
 8016124:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8016126:	68bb      	ldr	r3, [r7, #8]
 8016128:	331a      	adds	r3, #26
 801612a:	2100      	movs	r1, #0
 801612c:	4618      	mov	r0, r3
 801612e:	f7ff f8a2 	bl	8015276 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8016132:	79fb      	ldrb	r3, [r7, #7]
 8016134:	1e5a      	subs	r2, r3, #1
 8016136:	4613      	mov	r3, r2
 8016138:	005b      	lsls	r3, r3, #1
 801613a:	4413      	add	r3, r2
 801613c:	009b      	lsls	r3, r3, #2
 801613e:	4413      	add	r3, r2
 8016140:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8016142:	2300      	movs	r3, #0
 8016144:	82fb      	strh	r3, [r7, #22]
 8016146:	2300      	movs	r3, #0
 8016148:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801614a:	8afb      	ldrh	r3, [r7, #22]
 801614c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016150:	4293      	cmp	r3, r2
 8016152:	d007      	beq.n	8016164 <put_lfn+0x6c>
 8016154:	69fb      	ldr	r3, [r7, #28]
 8016156:	1c5a      	adds	r2, r3, #1
 8016158:	61fa      	str	r2, [r7, #28]
 801615a:	005b      	lsls	r3, r3, #1
 801615c:	68fa      	ldr	r2, [r7, #12]
 801615e:	4413      	add	r3, r2
 8016160:	881b      	ldrh	r3, [r3, #0]
 8016162:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8016164:	4a17      	ldr	r2, [pc, #92]	; (80161c4 <put_lfn+0xcc>)
 8016166:	69bb      	ldr	r3, [r7, #24]
 8016168:	4413      	add	r3, r2
 801616a:	781b      	ldrb	r3, [r3, #0]
 801616c:	461a      	mov	r2, r3
 801616e:	68bb      	ldr	r3, [r7, #8]
 8016170:	4413      	add	r3, r2
 8016172:	8afa      	ldrh	r2, [r7, #22]
 8016174:	4611      	mov	r1, r2
 8016176:	4618      	mov	r0, r3
 8016178:	f7ff f87d 	bl	8015276 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801617c:	8afb      	ldrh	r3, [r7, #22]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d102      	bne.n	8016188 <put_lfn+0x90>
 8016182:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016186:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8016188:	69bb      	ldr	r3, [r7, #24]
 801618a:	3301      	adds	r3, #1
 801618c:	61bb      	str	r3, [r7, #24]
 801618e:	69bb      	ldr	r3, [r7, #24]
 8016190:	2b0c      	cmp	r3, #12
 8016192:	d9da      	bls.n	801614a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8016194:	8afb      	ldrh	r3, [r7, #22]
 8016196:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801619a:	4293      	cmp	r3, r2
 801619c:	d006      	beq.n	80161ac <put_lfn+0xb4>
 801619e:	69fb      	ldr	r3, [r7, #28]
 80161a0:	005b      	lsls	r3, r3, #1
 80161a2:	68fa      	ldr	r2, [r7, #12]
 80161a4:	4413      	add	r3, r2
 80161a6:	881b      	ldrh	r3, [r3, #0]
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d103      	bne.n	80161b4 <put_lfn+0xbc>
 80161ac:	79fb      	ldrb	r3, [r7, #7]
 80161ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80161b2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80161b4:	68bb      	ldr	r3, [r7, #8]
 80161b6:	79fa      	ldrb	r2, [r7, #7]
 80161b8:	701a      	strb	r2, [r3, #0]
}
 80161ba:	bf00      	nop
 80161bc:	3720      	adds	r7, #32
 80161be:	46bd      	mov	sp, r7
 80161c0:	bd80      	pop	{r7, pc}
 80161c2:	bf00      	nop
 80161c4:	08019494 	.word	0x08019494

080161c8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80161c8:	b580      	push	{r7, lr}
 80161ca:	b08c      	sub	sp, #48	; 0x30
 80161cc:	af00      	add	r7, sp, #0
 80161ce:	60f8      	str	r0, [r7, #12]
 80161d0:	60b9      	str	r1, [r7, #8]
 80161d2:	607a      	str	r2, [r7, #4]
 80161d4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80161d6:	220b      	movs	r2, #11
 80161d8:	68b9      	ldr	r1, [r7, #8]
 80161da:	68f8      	ldr	r0, [r7, #12]
 80161dc:	f7ff f892 	bl	8015304 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80161e0:	683b      	ldr	r3, [r7, #0]
 80161e2:	2b05      	cmp	r3, #5
 80161e4:	d92b      	bls.n	801623e <gen_numname+0x76>
		sr = seq;
 80161e6:	683b      	ldr	r3, [r7, #0]
 80161e8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80161ea:	e022      	b.n	8016232 <gen_numname+0x6a>
			wc = *lfn++;
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	1c9a      	adds	r2, r3, #2
 80161f0:	607a      	str	r2, [r7, #4]
 80161f2:	881b      	ldrh	r3, [r3, #0]
 80161f4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80161f6:	2300      	movs	r3, #0
 80161f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80161fa:	e017      	b.n	801622c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80161fc:	69fb      	ldr	r3, [r7, #28]
 80161fe:	005a      	lsls	r2, r3, #1
 8016200:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016202:	f003 0301 	and.w	r3, r3, #1
 8016206:	4413      	add	r3, r2
 8016208:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801620a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801620c:	085b      	lsrs	r3, r3, #1
 801620e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8016210:	69fb      	ldr	r3, [r7, #28]
 8016212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016216:	2b00      	cmp	r3, #0
 8016218:	d005      	beq.n	8016226 <gen_numname+0x5e>
 801621a:	69fb      	ldr	r3, [r7, #28]
 801621c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8016220:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8016224:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8016226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016228:	3301      	adds	r3, #1
 801622a:	62bb      	str	r3, [r7, #40]	; 0x28
 801622c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801622e:	2b0f      	cmp	r3, #15
 8016230:	d9e4      	bls.n	80161fc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	881b      	ldrh	r3, [r3, #0]
 8016236:	2b00      	cmp	r3, #0
 8016238:	d1d8      	bne.n	80161ec <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801623a:	69fb      	ldr	r3, [r7, #28]
 801623c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801623e:	2307      	movs	r3, #7
 8016240:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8016242:	683b      	ldr	r3, [r7, #0]
 8016244:	b2db      	uxtb	r3, r3
 8016246:	f003 030f 	and.w	r3, r3, #15
 801624a:	b2db      	uxtb	r3, r3
 801624c:	3330      	adds	r3, #48	; 0x30
 801624e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8016252:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016256:	2b39      	cmp	r3, #57	; 0x39
 8016258:	d904      	bls.n	8016264 <gen_numname+0x9c>
 801625a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801625e:	3307      	adds	r3, #7
 8016260:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8016264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016266:	1e5a      	subs	r2, r3, #1
 8016268:	62ba      	str	r2, [r7, #40]	; 0x28
 801626a:	3330      	adds	r3, #48	; 0x30
 801626c:	443b      	add	r3, r7
 801626e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8016272:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8016276:	683b      	ldr	r3, [r7, #0]
 8016278:	091b      	lsrs	r3, r3, #4
 801627a:	603b      	str	r3, [r7, #0]
	} while (seq);
 801627c:	683b      	ldr	r3, [r7, #0]
 801627e:	2b00      	cmp	r3, #0
 8016280:	d1df      	bne.n	8016242 <gen_numname+0x7a>
	ns[i] = '~';
 8016282:	f107 0214 	add.w	r2, r7, #20
 8016286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016288:	4413      	add	r3, r2
 801628a:	227e      	movs	r2, #126	; 0x7e
 801628c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801628e:	2300      	movs	r3, #0
 8016290:	627b      	str	r3, [r7, #36]	; 0x24
 8016292:	e002      	b.n	801629a <gen_numname+0xd2>
 8016294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016296:	3301      	adds	r3, #1
 8016298:	627b      	str	r3, [r7, #36]	; 0x24
 801629a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801629c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801629e:	429a      	cmp	r2, r3
 80162a0:	d205      	bcs.n	80162ae <gen_numname+0xe6>
 80162a2:	68fa      	ldr	r2, [r7, #12]
 80162a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162a6:	4413      	add	r3, r2
 80162a8:	781b      	ldrb	r3, [r3, #0]
 80162aa:	2b20      	cmp	r3, #32
 80162ac:	d1f2      	bne.n	8016294 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80162ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162b0:	2b07      	cmp	r3, #7
 80162b2:	d807      	bhi.n	80162c4 <gen_numname+0xfc>
 80162b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162b6:	1c5a      	adds	r2, r3, #1
 80162b8:	62ba      	str	r2, [r7, #40]	; 0x28
 80162ba:	3330      	adds	r3, #48	; 0x30
 80162bc:	443b      	add	r3, r7
 80162be:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80162c2:	e000      	b.n	80162c6 <gen_numname+0xfe>
 80162c4:	2120      	movs	r1, #32
 80162c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162c8:	1c5a      	adds	r2, r3, #1
 80162ca:	627a      	str	r2, [r7, #36]	; 0x24
 80162cc:	68fa      	ldr	r2, [r7, #12]
 80162ce:	4413      	add	r3, r2
 80162d0:	460a      	mov	r2, r1
 80162d2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80162d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162d6:	2b07      	cmp	r3, #7
 80162d8:	d9e9      	bls.n	80162ae <gen_numname+0xe6>
}
 80162da:	bf00      	nop
 80162dc:	bf00      	nop
 80162de:	3730      	adds	r7, #48	; 0x30
 80162e0:	46bd      	mov	sp, r7
 80162e2:	bd80      	pop	{r7, pc}

080162e4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80162e4:	b480      	push	{r7}
 80162e6:	b085      	sub	sp, #20
 80162e8:	af00      	add	r7, sp, #0
 80162ea:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80162ec:	2300      	movs	r3, #0
 80162ee:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80162f0:	230b      	movs	r3, #11
 80162f2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80162f4:	7bfb      	ldrb	r3, [r7, #15]
 80162f6:	b2da      	uxtb	r2, r3
 80162f8:	0852      	lsrs	r2, r2, #1
 80162fa:	01db      	lsls	r3, r3, #7
 80162fc:	4313      	orrs	r3, r2
 80162fe:	b2da      	uxtb	r2, r3
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	1c59      	adds	r1, r3, #1
 8016304:	6079      	str	r1, [r7, #4]
 8016306:	781b      	ldrb	r3, [r3, #0]
 8016308:	4413      	add	r3, r2
 801630a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801630c:	68bb      	ldr	r3, [r7, #8]
 801630e:	3b01      	subs	r3, #1
 8016310:	60bb      	str	r3, [r7, #8]
 8016312:	68bb      	ldr	r3, [r7, #8]
 8016314:	2b00      	cmp	r3, #0
 8016316:	d1ed      	bne.n	80162f4 <sum_sfn+0x10>
	return sum;
 8016318:	7bfb      	ldrb	r3, [r7, #15]
}
 801631a:	4618      	mov	r0, r3
 801631c:	3714      	adds	r7, #20
 801631e:	46bd      	mov	sp, r7
 8016320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016324:	4770      	bx	lr

08016326 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8016326:	b580      	push	{r7, lr}
 8016328:	b086      	sub	sp, #24
 801632a:	af00      	add	r7, sp, #0
 801632c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8016334:	2100      	movs	r1, #0
 8016336:	6878      	ldr	r0, [r7, #4]
 8016338:	f7ff fc88 	bl	8015c4c <dir_sdi>
 801633c:	4603      	mov	r3, r0
 801633e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8016340:	7dfb      	ldrb	r3, [r7, #23]
 8016342:	2b00      	cmp	r3, #0
 8016344:	d001      	beq.n	801634a <dir_find+0x24>
 8016346:	7dfb      	ldrb	r3, [r7, #23]
 8016348:	e0a9      	b.n	801649e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801634a:	23ff      	movs	r3, #255	; 0xff
 801634c:	753b      	strb	r3, [r7, #20]
 801634e:	7d3b      	ldrb	r3, [r7, #20]
 8016350:	757b      	strb	r3, [r7, #21]
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	f04f 32ff 	mov.w	r2, #4294967295
 8016358:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
	do {
		res = move_window(fs, dp->sect);
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	699b      	ldr	r3, [r3, #24]
 801635e:	4619      	mov	r1, r3
 8016360:	6938      	ldr	r0, [r7, #16]
 8016362:	f7ff f891 	bl	8015488 <move_window>
 8016366:	4603      	mov	r3, r0
 8016368:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801636a:	7dfb      	ldrb	r3, [r7, #23]
 801636c:	2b00      	cmp	r3, #0
 801636e:	f040 8090 	bne.w	8016492 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	69db      	ldr	r3, [r3, #28]
 8016376:	781b      	ldrb	r3, [r3, #0]
 8016378:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801637a:	7dbb      	ldrb	r3, [r7, #22]
 801637c:	2b00      	cmp	r3, #0
 801637e:	d102      	bne.n	8016386 <dir_find+0x60>
 8016380:	2304      	movs	r3, #4
 8016382:	75fb      	strb	r3, [r7, #23]
 8016384:	e08a      	b.n	801649c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	69db      	ldr	r3, [r3, #28]
 801638a:	330b      	adds	r3, #11
 801638c:	781b      	ldrb	r3, [r3, #0]
 801638e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016392:	73fb      	strb	r3, [r7, #15]
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	7bfa      	ldrb	r2, [r7, #15]
 8016398:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801639a:	7dbb      	ldrb	r3, [r7, #22]
 801639c:	2be5      	cmp	r3, #229	; 0xe5
 801639e:	d007      	beq.n	80163b0 <dir_find+0x8a>
 80163a0:	7bfb      	ldrb	r3, [r7, #15]
 80163a2:	f003 0308 	and.w	r3, r3, #8
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d009      	beq.n	80163be <dir_find+0x98>
 80163aa:	7bfb      	ldrb	r3, [r7, #15]
 80163ac:	2b0f      	cmp	r3, #15
 80163ae:	d006      	beq.n	80163be <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80163b0:	23ff      	movs	r3, #255	; 0xff
 80163b2:	757b      	strb	r3, [r7, #21]
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	f04f 32ff 	mov.w	r2, #4294967295
 80163ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80163bc:	e05e      	b.n	801647c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80163be:	7bfb      	ldrb	r3, [r7, #15]
 80163c0:	2b0f      	cmp	r3, #15
 80163c2:	d136      	bne.n	8016432 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80163ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d154      	bne.n	801647c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80163d2:	7dbb      	ldrb	r3, [r7, #22]
 80163d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d00d      	beq.n	80163f8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	69db      	ldr	r3, [r3, #28]
 80163e0:	7b5b      	ldrb	r3, [r3, #13]
 80163e2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80163e4:	7dbb      	ldrb	r3, [r7, #22]
 80163e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80163ea:	75bb      	strb	r3, [r7, #22]
 80163ec:	7dbb      	ldrb	r3, [r7, #22]
 80163ee:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	691a      	ldr	r2, [r3, #16]
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	62da      	str	r2, [r3, #44]	; 0x2c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80163f8:	7dba      	ldrb	r2, [r7, #22]
 80163fa:	7d7b      	ldrb	r3, [r7, #21]
 80163fc:	429a      	cmp	r2, r3
 80163fe:	d115      	bne.n	801642c <dir_find+0x106>
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	69db      	ldr	r3, [r3, #28]
 8016404:	330d      	adds	r3, #13
 8016406:	781b      	ldrb	r3, [r3, #0]
 8016408:	7d3a      	ldrb	r2, [r7, #20]
 801640a:	429a      	cmp	r2, r3
 801640c:	d10e      	bne.n	801642c <dir_find+0x106>
 801640e:	693b      	ldr	r3, [r7, #16]
 8016410:	691a      	ldr	r2, [r3, #16]
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	69db      	ldr	r3, [r3, #28]
 8016416:	4619      	mov	r1, r3
 8016418:	4610      	mov	r0, r2
 801641a:	f7ff fdfd 	bl	8016018 <cmp_lfn>
 801641e:	4603      	mov	r3, r0
 8016420:	2b00      	cmp	r3, #0
 8016422:	d003      	beq.n	801642c <dir_find+0x106>
 8016424:	7d7b      	ldrb	r3, [r7, #21]
 8016426:	3b01      	subs	r3, #1
 8016428:	b2db      	uxtb	r3, r3
 801642a:	e000      	b.n	801642e <dir_find+0x108>
 801642c:	23ff      	movs	r3, #255	; 0xff
 801642e:	757b      	strb	r3, [r7, #21]
 8016430:	e024      	b.n	801647c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8016432:	7d7b      	ldrb	r3, [r7, #21]
 8016434:	2b00      	cmp	r3, #0
 8016436:	d109      	bne.n	801644c <dir_find+0x126>
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	69db      	ldr	r3, [r3, #28]
 801643c:	4618      	mov	r0, r3
 801643e:	f7ff ff51 	bl	80162e4 <sum_sfn>
 8016442:	4603      	mov	r3, r0
 8016444:	461a      	mov	r2, r3
 8016446:	7d3b      	ldrb	r3, [r7, #20]
 8016448:	4293      	cmp	r3, r2
 801644a:	d024      	beq.n	8016496 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8016452:	f003 0301 	and.w	r3, r3, #1
 8016456:	2b00      	cmp	r3, #0
 8016458:	d10a      	bne.n	8016470 <dir_find+0x14a>
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	69d8      	ldr	r0, [r3, #28]
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	3320      	adds	r3, #32
 8016462:	220b      	movs	r2, #11
 8016464:	4619      	mov	r1, r3
 8016466:	f7fe ff89 	bl	801537c <mem_cmp>
 801646a:	4603      	mov	r3, r0
 801646c:	2b00      	cmp	r3, #0
 801646e:	d014      	beq.n	801649a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8016470:	23ff      	movs	r3, #255	; 0xff
 8016472:	757b      	strb	r3, [r7, #21]
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	f04f 32ff 	mov.w	r2, #4294967295
 801647a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801647c:	2100      	movs	r1, #0
 801647e:	6878      	ldr	r0, [r7, #4]
 8016480:	f7ff fc6d 	bl	8015d5e <dir_next>
 8016484:	4603      	mov	r3, r0
 8016486:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8016488:	7dfb      	ldrb	r3, [r7, #23]
 801648a:	2b00      	cmp	r3, #0
 801648c:	f43f af65 	beq.w	801635a <dir_find+0x34>
 8016490:	e004      	b.n	801649c <dir_find+0x176>
		if (res != FR_OK) break;
 8016492:	bf00      	nop
 8016494:	e002      	b.n	801649c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8016496:	bf00      	nop
 8016498:	e000      	b.n	801649c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801649a:	bf00      	nop

	return res;
 801649c:	7dfb      	ldrb	r3, [r7, #23]
}
 801649e:	4618      	mov	r0, r3
 80164a0:	3718      	adds	r7, #24
 80164a2:	46bd      	mov	sp, r7
 80164a4:	bd80      	pop	{r7, pc}
	...

080164a8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80164a8:	b580      	push	{r7, lr}
 80164aa:	b08c      	sub	sp, #48	; 0x30
 80164ac:	af00      	add	r7, sp, #0
 80164ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	681b      	ldr	r3, [r3, #0]
 80164b4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80164bc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d001      	beq.n	80164c8 <dir_register+0x20>
 80164c4:	2306      	movs	r3, #6
 80164c6:	e0e0      	b.n	801668a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80164c8:	2300      	movs	r3, #0
 80164ca:	627b      	str	r3, [r7, #36]	; 0x24
 80164cc:	e002      	b.n	80164d4 <dir_register+0x2c>
 80164ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164d0:	3301      	adds	r3, #1
 80164d2:	627b      	str	r3, [r7, #36]	; 0x24
 80164d4:	69fb      	ldr	r3, [r7, #28]
 80164d6:	691a      	ldr	r2, [r3, #16]
 80164d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164da:	005b      	lsls	r3, r3, #1
 80164dc:	4413      	add	r3, r2
 80164de:	881b      	ldrh	r3, [r3, #0]
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d1f4      	bne.n	80164ce <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	f103 0120 	add.w	r1, r3, #32
 80164ea:	f107 030c 	add.w	r3, r7, #12
 80164ee:	220c      	movs	r2, #12
 80164f0:	4618      	mov	r0, r3
 80164f2:	f7fe ff07 	bl	8015304 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80164f6:	7dfb      	ldrb	r3, [r7, #23]
 80164f8:	f003 0301 	and.w	r3, r3, #1
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d032      	beq.n	8016566 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	2240      	movs	r2, #64	; 0x40
 8016504:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		for (n = 1; n < 100; n++) {
 8016508:	2301      	movs	r3, #1
 801650a:	62bb      	str	r3, [r7, #40]	; 0x28
 801650c:	e016      	b.n	801653c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	f103 0020 	add.w	r0, r3, #32
 8016514:	69fb      	ldr	r3, [r7, #28]
 8016516:	691a      	ldr	r2, [r3, #16]
 8016518:	f107 010c 	add.w	r1, r7, #12
 801651c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801651e:	f7ff fe53 	bl	80161c8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8016522:	6878      	ldr	r0, [r7, #4]
 8016524:	f7ff feff 	bl	8016326 <dir_find>
 8016528:	4603      	mov	r3, r0
 801652a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 801652e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016532:	2b00      	cmp	r3, #0
 8016534:	d106      	bne.n	8016544 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8016536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016538:	3301      	adds	r3, #1
 801653a:	62bb      	str	r3, [r7, #40]	; 0x28
 801653c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801653e:	2b63      	cmp	r3, #99	; 0x63
 8016540:	d9e5      	bls.n	801650e <dir_register+0x66>
 8016542:	e000      	b.n	8016546 <dir_register+0x9e>
			if (res != FR_OK) break;
 8016544:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8016546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016548:	2b64      	cmp	r3, #100	; 0x64
 801654a:	d101      	bne.n	8016550 <dir_register+0xa8>
 801654c:	2307      	movs	r3, #7
 801654e:	e09c      	b.n	801668a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8016550:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016554:	2b04      	cmp	r3, #4
 8016556:	d002      	beq.n	801655e <dir_register+0xb6>
 8016558:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801655c:	e095      	b.n	801668a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801655e:	7dfa      	ldrb	r2, [r7, #23]
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8016566:	7dfb      	ldrb	r3, [r7, #23]
 8016568:	f003 0302 	and.w	r3, r3, #2
 801656c:	2b00      	cmp	r3, #0
 801656e:	d007      	beq.n	8016580 <dir_register+0xd8>
 8016570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016572:	330c      	adds	r3, #12
 8016574:	4a47      	ldr	r2, [pc, #284]	; (8016694 <dir_register+0x1ec>)
 8016576:	fba2 2303 	umull	r2, r3, r2, r3
 801657a:	089b      	lsrs	r3, r3, #2
 801657c:	3301      	adds	r3, #1
 801657e:	e000      	b.n	8016582 <dir_register+0xda>
 8016580:	2301      	movs	r3, #1
 8016582:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8016584:	6a39      	ldr	r1, [r7, #32]
 8016586:	6878      	ldr	r0, [r7, #4]
 8016588:	f7ff fcbf 	bl	8015f0a <dir_alloc>
 801658c:	4603      	mov	r3, r0
 801658e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8016592:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016596:	2b00      	cmp	r3, #0
 8016598:	d148      	bne.n	801662c <dir_register+0x184>
 801659a:	6a3b      	ldr	r3, [r7, #32]
 801659c:	3b01      	subs	r3, #1
 801659e:	623b      	str	r3, [r7, #32]
 80165a0:	6a3b      	ldr	r3, [r7, #32]
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d042      	beq.n	801662c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	691a      	ldr	r2, [r3, #16]
 80165aa:	6a3b      	ldr	r3, [r7, #32]
 80165ac:	015b      	lsls	r3, r3, #5
 80165ae:	1ad3      	subs	r3, r2, r3
 80165b0:	4619      	mov	r1, r3
 80165b2:	6878      	ldr	r0, [r7, #4]
 80165b4:	f7ff fb4a 	bl	8015c4c <dir_sdi>
 80165b8:	4603      	mov	r3, r0
 80165ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80165be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80165c2:	2b00      	cmp	r3, #0
 80165c4:	d132      	bne.n	801662c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	3320      	adds	r3, #32
 80165ca:	4618      	mov	r0, r3
 80165cc:	f7ff fe8a 	bl	80162e4 <sum_sfn>
 80165d0:	4603      	mov	r3, r0
 80165d2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80165d4:	687b      	ldr	r3, [r7, #4]
 80165d6:	699b      	ldr	r3, [r3, #24]
 80165d8:	4619      	mov	r1, r3
 80165da:	69f8      	ldr	r0, [r7, #28]
 80165dc:	f7fe ff54 	bl	8015488 <move_window>
 80165e0:	4603      	mov	r3, r0
 80165e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80165e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d11d      	bne.n	801662a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80165ee:	69fb      	ldr	r3, [r7, #28]
 80165f0:	6918      	ldr	r0, [r3, #16]
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	69d9      	ldr	r1, [r3, #28]
 80165f6:	6a3b      	ldr	r3, [r7, #32]
 80165f8:	b2da      	uxtb	r2, r3
 80165fa:	7efb      	ldrb	r3, [r7, #27]
 80165fc:	f7ff fd7c 	bl	80160f8 <put_lfn>
				fs->wflag = 1;
 8016600:	69fb      	ldr	r3, [r7, #28]
 8016602:	2201      	movs	r2, #1
 8016604:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8016606:	2100      	movs	r1, #0
 8016608:	6878      	ldr	r0, [r7, #4]
 801660a:	f7ff fba8 	bl	8015d5e <dir_next>
 801660e:	4603      	mov	r3, r0
 8016610:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8016614:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016618:	2b00      	cmp	r3, #0
 801661a:	d107      	bne.n	801662c <dir_register+0x184>
 801661c:	6a3b      	ldr	r3, [r7, #32]
 801661e:	3b01      	subs	r3, #1
 8016620:	623b      	str	r3, [r7, #32]
 8016622:	6a3b      	ldr	r3, [r7, #32]
 8016624:	2b00      	cmp	r3, #0
 8016626:	d1d5      	bne.n	80165d4 <dir_register+0x12c>
 8016628:	e000      	b.n	801662c <dir_register+0x184>
				if (res != FR_OK) break;
 801662a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801662c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016630:	2b00      	cmp	r3, #0
 8016632:	d128      	bne.n	8016686 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	699b      	ldr	r3, [r3, #24]
 8016638:	4619      	mov	r1, r3
 801663a:	69f8      	ldr	r0, [r7, #28]
 801663c:	f7fe ff24 	bl	8015488 <move_window>
 8016640:	4603      	mov	r3, r0
 8016642:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8016646:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801664a:	2b00      	cmp	r3, #0
 801664c:	d11b      	bne.n	8016686 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	69db      	ldr	r3, [r3, #28]
 8016652:	2220      	movs	r2, #32
 8016654:	2100      	movs	r1, #0
 8016656:	4618      	mov	r0, r3
 8016658:	f7fe fe75 	bl	8015346 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	69d8      	ldr	r0, [r3, #28]
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	3320      	adds	r3, #32
 8016664:	220b      	movs	r2, #11
 8016666:	4619      	mov	r1, r3
 8016668:	f7fe fe4c 	bl	8015304 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	69db      	ldr	r3, [r3, #28]
 8016676:	330c      	adds	r3, #12
 8016678:	f002 0218 	and.w	r2, r2, #24
 801667c:	b2d2      	uxtb	r2, r2
 801667e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8016680:	69fb      	ldr	r3, [r7, #28]
 8016682:	2201      	movs	r2, #1
 8016684:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8016686:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801668a:	4618      	mov	r0, r3
 801668c:	3730      	adds	r7, #48	; 0x30
 801668e:	46bd      	mov	sp, r7
 8016690:	bd80      	pop	{r7, pc}
 8016692:	bf00      	nop
 8016694:	4ec4ec4f 	.word	0x4ec4ec4f

08016698 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8016698:	b580      	push	{r7, lr}
 801669a:	b08a      	sub	sp, #40	; 0x28
 801669c:	af00      	add	r7, sp, #0
 801669e:	6078      	str	r0, [r7, #4]
 80166a0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80166a2:	683b      	ldr	r3, [r7, #0]
 80166a4:	681b      	ldr	r3, [r3, #0]
 80166a6:	613b      	str	r3, [r7, #16]
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	681b      	ldr	r3, [r3, #0]
 80166ac:	691b      	ldr	r3, [r3, #16]
 80166ae:	60fb      	str	r3, [r7, #12]
 80166b0:	2300      	movs	r3, #0
 80166b2:	617b      	str	r3, [r7, #20]
 80166b4:	697b      	ldr	r3, [r7, #20]
 80166b6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80166b8:	69bb      	ldr	r3, [r7, #24]
 80166ba:	1c5a      	adds	r2, r3, #1
 80166bc:	61ba      	str	r2, [r7, #24]
 80166be:	693a      	ldr	r2, [r7, #16]
 80166c0:	4413      	add	r3, r2
 80166c2:	781b      	ldrb	r3, [r3, #0]
 80166c4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80166c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80166c8:	2b1f      	cmp	r3, #31
 80166ca:	d940      	bls.n	801674e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80166cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80166ce:	2b2f      	cmp	r3, #47	; 0x2f
 80166d0:	d006      	beq.n	80166e0 <create_name+0x48>
 80166d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80166d4:	2b5c      	cmp	r3, #92	; 0x5c
 80166d6:	d110      	bne.n	80166fa <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80166d8:	e002      	b.n	80166e0 <create_name+0x48>
 80166da:	69bb      	ldr	r3, [r7, #24]
 80166dc:	3301      	adds	r3, #1
 80166de:	61bb      	str	r3, [r7, #24]
 80166e0:	693a      	ldr	r2, [r7, #16]
 80166e2:	69bb      	ldr	r3, [r7, #24]
 80166e4:	4413      	add	r3, r2
 80166e6:	781b      	ldrb	r3, [r3, #0]
 80166e8:	2b2f      	cmp	r3, #47	; 0x2f
 80166ea:	d0f6      	beq.n	80166da <create_name+0x42>
 80166ec:	693a      	ldr	r2, [r7, #16]
 80166ee:	69bb      	ldr	r3, [r7, #24]
 80166f0:	4413      	add	r3, r2
 80166f2:	781b      	ldrb	r3, [r3, #0]
 80166f4:	2b5c      	cmp	r3, #92	; 0x5c
 80166f6:	d0f0      	beq.n	80166da <create_name+0x42>
			break;
 80166f8:	e02a      	b.n	8016750 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80166fa:	697b      	ldr	r3, [r7, #20]
 80166fc:	2bfe      	cmp	r3, #254	; 0xfe
 80166fe:	d901      	bls.n	8016704 <create_name+0x6c>
 8016700:	2306      	movs	r3, #6
 8016702:	e17d      	b.n	8016a00 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8016704:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016706:	b2db      	uxtb	r3, r3
 8016708:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801670a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801670c:	2101      	movs	r1, #1
 801670e:	4618      	mov	r0, r3
 8016710:	f001 fb2e 	bl	8017d70 <ff_convert>
 8016714:	4603      	mov	r3, r0
 8016716:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8016718:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801671a:	2b00      	cmp	r3, #0
 801671c:	d101      	bne.n	8016722 <create_name+0x8a>
 801671e:	2306      	movs	r3, #6
 8016720:	e16e      	b.n	8016a00 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8016722:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016724:	2b7f      	cmp	r3, #127	; 0x7f
 8016726:	d809      	bhi.n	801673c <create_name+0xa4>
 8016728:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801672a:	4619      	mov	r1, r3
 801672c:	488d      	ldr	r0, [pc, #564]	; (8016964 <create_name+0x2cc>)
 801672e:	f7fe fe4c 	bl	80153ca <chk_chr>
 8016732:	4603      	mov	r3, r0
 8016734:	2b00      	cmp	r3, #0
 8016736:	d001      	beq.n	801673c <create_name+0xa4>
 8016738:	2306      	movs	r3, #6
 801673a:	e161      	b.n	8016a00 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 801673c:	697b      	ldr	r3, [r7, #20]
 801673e:	1c5a      	adds	r2, r3, #1
 8016740:	617a      	str	r2, [r7, #20]
 8016742:	005b      	lsls	r3, r3, #1
 8016744:	68fa      	ldr	r2, [r7, #12]
 8016746:	4413      	add	r3, r2
 8016748:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801674a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801674c:	e7b4      	b.n	80166b8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801674e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8016750:	693a      	ldr	r2, [r7, #16]
 8016752:	69bb      	ldr	r3, [r7, #24]
 8016754:	441a      	add	r2, r3
 8016756:	683b      	ldr	r3, [r7, #0]
 8016758:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801675a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801675c:	2b1f      	cmp	r3, #31
 801675e:	d801      	bhi.n	8016764 <create_name+0xcc>
 8016760:	2304      	movs	r3, #4
 8016762:	e000      	b.n	8016766 <create_name+0xce>
 8016764:	2300      	movs	r3, #0
 8016766:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801676a:	e011      	b.n	8016790 <create_name+0xf8>
		w = lfn[di - 1];
 801676c:	697b      	ldr	r3, [r7, #20]
 801676e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8016772:	3b01      	subs	r3, #1
 8016774:	005b      	lsls	r3, r3, #1
 8016776:	68fa      	ldr	r2, [r7, #12]
 8016778:	4413      	add	r3, r2
 801677a:	881b      	ldrh	r3, [r3, #0]
 801677c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 801677e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016780:	2b20      	cmp	r3, #32
 8016782:	d002      	beq.n	801678a <create_name+0xf2>
 8016784:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016786:	2b2e      	cmp	r3, #46	; 0x2e
 8016788:	d106      	bne.n	8016798 <create_name+0x100>
		di--;
 801678a:	697b      	ldr	r3, [r7, #20]
 801678c:	3b01      	subs	r3, #1
 801678e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8016790:	697b      	ldr	r3, [r7, #20]
 8016792:	2b00      	cmp	r3, #0
 8016794:	d1ea      	bne.n	801676c <create_name+0xd4>
 8016796:	e000      	b.n	801679a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8016798:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801679a:	697b      	ldr	r3, [r7, #20]
 801679c:	005b      	lsls	r3, r3, #1
 801679e:	68fa      	ldr	r2, [r7, #12]
 80167a0:	4413      	add	r3, r2
 80167a2:	2200      	movs	r2, #0
 80167a4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80167a6:	697b      	ldr	r3, [r7, #20]
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d101      	bne.n	80167b0 <create_name+0x118>
 80167ac:	2306      	movs	r3, #6
 80167ae:	e127      	b.n	8016a00 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	3320      	adds	r3, #32
 80167b4:	220b      	movs	r2, #11
 80167b6:	2120      	movs	r1, #32
 80167b8:	4618      	mov	r0, r3
 80167ba:	f7fe fdc4 	bl	8015346 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80167be:	2300      	movs	r3, #0
 80167c0:	61bb      	str	r3, [r7, #24]
 80167c2:	e002      	b.n	80167ca <create_name+0x132>
 80167c4:	69bb      	ldr	r3, [r7, #24]
 80167c6:	3301      	adds	r3, #1
 80167c8:	61bb      	str	r3, [r7, #24]
 80167ca:	69bb      	ldr	r3, [r7, #24]
 80167cc:	005b      	lsls	r3, r3, #1
 80167ce:	68fa      	ldr	r2, [r7, #12]
 80167d0:	4413      	add	r3, r2
 80167d2:	881b      	ldrh	r3, [r3, #0]
 80167d4:	2b20      	cmp	r3, #32
 80167d6:	d0f5      	beq.n	80167c4 <create_name+0x12c>
 80167d8:	69bb      	ldr	r3, [r7, #24]
 80167da:	005b      	lsls	r3, r3, #1
 80167dc:	68fa      	ldr	r2, [r7, #12]
 80167de:	4413      	add	r3, r2
 80167e0:	881b      	ldrh	r3, [r3, #0]
 80167e2:	2b2e      	cmp	r3, #46	; 0x2e
 80167e4:	d0ee      	beq.n	80167c4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80167e6:	69bb      	ldr	r3, [r7, #24]
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d009      	beq.n	8016800 <create_name+0x168>
 80167ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80167f0:	f043 0303 	orr.w	r3, r3, #3
 80167f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80167f8:	e002      	b.n	8016800 <create_name+0x168>
 80167fa:	697b      	ldr	r3, [r7, #20]
 80167fc:	3b01      	subs	r3, #1
 80167fe:	617b      	str	r3, [r7, #20]
 8016800:	697b      	ldr	r3, [r7, #20]
 8016802:	2b00      	cmp	r3, #0
 8016804:	d009      	beq.n	801681a <create_name+0x182>
 8016806:	697b      	ldr	r3, [r7, #20]
 8016808:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801680c:	3b01      	subs	r3, #1
 801680e:	005b      	lsls	r3, r3, #1
 8016810:	68fa      	ldr	r2, [r7, #12]
 8016812:	4413      	add	r3, r2
 8016814:	881b      	ldrh	r3, [r3, #0]
 8016816:	2b2e      	cmp	r3, #46	; 0x2e
 8016818:	d1ef      	bne.n	80167fa <create_name+0x162>

	i = b = 0; ni = 8;
 801681a:	2300      	movs	r3, #0
 801681c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016820:	2300      	movs	r3, #0
 8016822:	623b      	str	r3, [r7, #32]
 8016824:	2308      	movs	r3, #8
 8016826:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8016828:	69bb      	ldr	r3, [r7, #24]
 801682a:	1c5a      	adds	r2, r3, #1
 801682c:	61ba      	str	r2, [r7, #24]
 801682e:	005b      	lsls	r3, r3, #1
 8016830:	68fa      	ldr	r2, [r7, #12]
 8016832:	4413      	add	r3, r2
 8016834:	881b      	ldrh	r3, [r3, #0]
 8016836:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8016838:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801683a:	2b00      	cmp	r3, #0
 801683c:	f000 8090 	beq.w	8016960 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8016840:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016842:	2b20      	cmp	r3, #32
 8016844:	d006      	beq.n	8016854 <create_name+0x1bc>
 8016846:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016848:	2b2e      	cmp	r3, #46	; 0x2e
 801684a:	d10a      	bne.n	8016862 <create_name+0x1ca>
 801684c:	69ba      	ldr	r2, [r7, #24]
 801684e:	697b      	ldr	r3, [r7, #20]
 8016850:	429a      	cmp	r2, r3
 8016852:	d006      	beq.n	8016862 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8016854:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016858:	f043 0303 	orr.w	r3, r3, #3
 801685c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016860:	e07d      	b.n	801695e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8016862:	6a3a      	ldr	r2, [r7, #32]
 8016864:	69fb      	ldr	r3, [r7, #28]
 8016866:	429a      	cmp	r2, r3
 8016868:	d203      	bcs.n	8016872 <create_name+0x1da>
 801686a:	69ba      	ldr	r2, [r7, #24]
 801686c:	697b      	ldr	r3, [r7, #20]
 801686e:	429a      	cmp	r2, r3
 8016870:	d123      	bne.n	80168ba <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8016872:	69fb      	ldr	r3, [r7, #28]
 8016874:	2b0b      	cmp	r3, #11
 8016876:	d106      	bne.n	8016886 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8016878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801687c:	f043 0303 	orr.w	r3, r3, #3
 8016880:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016884:	e075      	b.n	8016972 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8016886:	69ba      	ldr	r2, [r7, #24]
 8016888:	697b      	ldr	r3, [r7, #20]
 801688a:	429a      	cmp	r2, r3
 801688c:	d005      	beq.n	801689a <create_name+0x202>
 801688e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016892:	f043 0303 	orr.w	r3, r3, #3
 8016896:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 801689a:	69ba      	ldr	r2, [r7, #24]
 801689c:	697b      	ldr	r3, [r7, #20]
 801689e:	429a      	cmp	r2, r3
 80168a0:	d866      	bhi.n	8016970 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80168a2:	697b      	ldr	r3, [r7, #20]
 80168a4:	61bb      	str	r3, [r7, #24]
 80168a6:	2308      	movs	r3, #8
 80168a8:	623b      	str	r3, [r7, #32]
 80168aa:	230b      	movs	r3, #11
 80168ac:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80168ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80168b2:	009b      	lsls	r3, r3, #2
 80168b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80168b8:	e051      	b.n	801695e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80168ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80168bc:	2b7f      	cmp	r3, #127	; 0x7f
 80168be:	d914      	bls.n	80168ea <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80168c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80168c2:	2100      	movs	r1, #0
 80168c4:	4618      	mov	r0, r3
 80168c6:	f001 fa53 	bl	8017d70 <ff_convert>
 80168ca:	4603      	mov	r3, r0
 80168cc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80168ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d004      	beq.n	80168de <create_name+0x246>
 80168d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80168d6:	3b80      	subs	r3, #128	; 0x80
 80168d8:	4a23      	ldr	r2, [pc, #140]	; (8016968 <create_name+0x2d0>)
 80168da:	5cd3      	ldrb	r3, [r2, r3]
 80168dc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80168de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80168e2:	f043 0302 	orr.w	r3, r3, #2
 80168e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80168ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d007      	beq.n	8016900 <create_name+0x268>
 80168f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80168f2:	4619      	mov	r1, r3
 80168f4:	481d      	ldr	r0, [pc, #116]	; (801696c <create_name+0x2d4>)
 80168f6:	f7fe fd68 	bl	80153ca <chk_chr>
 80168fa:	4603      	mov	r3, r0
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d008      	beq.n	8016912 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8016900:	235f      	movs	r3, #95	; 0x5f
 8016902:	84bb      	strh	r3, [r7, #36]	; 0x24
 8016904:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016908:	f043 0303 	orr.w	r3, r3, #3
 801690c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016910:	e01b      	b.n	801694a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8016912:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016914:	2b40      	cmp	r3, #64	; 0x40
 8016916:	d909      	bls.n	801692c <create_name+0x294>
 8016918:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801691a:	2b5a      	cmp	r3, #90	; 0x5a
 801691c:	d806      	bhi.n	801692c <create_name+0x294>
					b |= 2;
 801691e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016922:	f043 0302 	orr.w	r3, r3, #2
 8016926:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801692a:	e00e      	b.n	801694a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801692c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801692e:	2b60      	cmp	r3, #96	; 0x60
 8016930:	d90b      	bls.n	801694a <create_name+0x2b2>
 8016932:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016934:	2b7a      	cmp	r3, #122	; 0x7a
 8016936:	d808      	bhi.n	801694a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8016938:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801693c:	f043 0301 	orr.w	r3, r3, #1
 8016940:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016944:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016946:	3b20      	subs	r3, #32
 8016948:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801694a:	6a3b      	ldr	r3, [r7, #32]
 801694c:	1c5a      	adds	r2, r3, #1
 801694e:	623a      	str	r2, [r7, #32]
 8016950:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016952:	b2d1      	uxtb	r1, r2
 8016954:	687a      	ldr	r2, [r7, #4]
 8016956:	4413      	add	r3, r2
 8016958:	460a      	mov	r2, r1
 801695a:	f883 2020 	strb.w	r2, [r3, #32]
		w = lfn[si++];					/* Get an LFN character */
 801695e:	e763      	b.n	8016828 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8016960:	bf00      	nop
 8016962:	e006      	b.n	8016972 <create_name+0x2da>
 8016964:	08019358 	.word	0x08019358
 8016968:	08019414 	.word	0x08019414
 801696c:	08019364 	.word	0x08019364
			if (si > di) break;			/* No extension */
 8016970:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016978:	2be5      	cmp	r3, #229	; 0xe5
 801697a:	d103      	bne.n	8016984 <create_name+0x2ec>
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	2205      	movs	r2, #5
 8016980:	f883 2020 	strb.w	r2, [r3, #32]

	if (ni == 8) b <<= 2;
 8016984:	69fb      	ldr	r3, [r7, #28]
 8016986:	2b08      	cmp	r3, #8
 8016988:	d104      	bne.n	8016994 <create_name+0x2fc>
 801698a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801698e:	009b      	lsls	r3, r3, #2
 8016990:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8016994:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016998:	f003 030c 	and.w	r3, r3, #12
 801699c:	2b0c      	cmp	r3, #12
 801699e:	d005      	beq.n	80169ac <create_name+0x314>
 80169a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80169a4:	f003 0303 	and.w	r3, r3, #3
 80169a8:	2b03      	cmp	r3, #3
 80169aa:	d105      	bne.n	80169b8 <create_name+0x320>
 80169ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80169b0:	f043 0302 	orr.w	r3, r3, #2
 80169b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80169b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80169bc:	f003 0302 	and.w	r3, r3, #2
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d117      	bne.n	80169f4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80169c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80169c8:	f003 0303 	and.w	r3, r3, #3
 80169cc:	2b01      	cmp	r3, #1
 80169ce:	d105      	bne.n	80169dc <create_name+0x344>
 80169d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80169d4:	f043 0310 	orr.w	r3, r3, #16
 80169d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80169dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80169e0:	f003 030c 	and.w	r3, r3, #12
 80169e4:	2b04      	cmp	r3, #4
 80169e6:	d105      	bne.n	80169f4 <create_name+0x35c>
 80169e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80169ec:	f043 0308 	orr.w	r3, r3, #8
 80169f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80169fa:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	return FR_OK;
 80169fe:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8016a00:	4618      	mov	r0, r3
 8016a02:	3728      	adds	r7, #40	; 0x28
 8016a04:	46bd      	mov	sp, r7
 8016a06:	bd80      	pop	{r7, pc}

08016a08 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8016a08:	b580      	push	{r7, lr}
 8016a0a:	b086      	sub	sp, #24
 8016a0c:	af00      	add	r7, sp, #0
 8016a0e:	6078      	str	r0, [r7, #4]
 8016a10:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8016a16:	693b      	ldr	r3, [r7, #16]
 8016a18:	681b      	ldr	r3, [r3, #0]
 8016a1a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8016a1c:	e002      	b.n	8016a24 <follow_path+0x1c>
 8016a1e:	683b      	ldr	r3, [r7, #0]
 8016a20:	3301      	adds	r3, #1
 8016a22:	603b      	str	r3, [r7, #0]
 8016a24:	683b      	ldr	r3, [r7, #0]
 8016a26:	781b      	ldrb	r3, [r3, #0]
 8016a28:	2b2f      	cmp	r3, #47	; 0x2f
 8016a2a:	d0f8      	beq.n	8016a1e <follow_path+0x16>
 8016a2c:	683b      	ldr	r3, [r7, #0]
 8016a2e:	781b      	ldrb	r3, [r3, #0]
 8016a30:	2b5c      	cmp	r3, #92	; 0x5c
 8016a32:	d0f4      	beq.n	8016a1e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8016a34:	693b      	ldr	r3, [r7, #16]
 8016a36:	2200      	movs	r2, #0
 8016a38:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8016a3a:	683b      	ldr	r3, [r7, #0]
 8016a3c:	781b      	ldrb	r3, [r3, #0]
 8016a3e:	2b1f      	cmp	r3, #31
 8016a40:	d80a      	bhi.n	8016a58 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	2280      	movs	r2, #128	; 0x80
 8016a46:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 8016a4a:	2100      	movs	r1, #0
 8016a4c:	6878      	ldr	r0, [r7, #4]
 8016a4e:	f7ff f8fd 	bl	8015c4c <dir_sdi>
 8016a52:	4603      	mov	r3, r0
 8016a54:	75fb      	strb	r3, [r7, #23]
 8016a56:	e048      	b.n	8016aea <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8016a58:	463b      	mov	r3, r7
 8016a5a:	4619      	mov	r1, r3
 8016a5c:	6878      	ldr	r0, [r7, #4]
 8016a5e:	f7ff fe1b 	bl	8016698 <create_name>
 8016a62:	4603      	mov	r3, r0
 8016a64:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8016a66:	7dfb      	ldrb	r3, [r7, #23]
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d139      	bne.n	8016ae0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8016a6c:	6878      	ldr	r0, [r7, #4]
 8016a6e:	f7ff fc5a 	bl	8016326 <dir_find>
 8016a72:	4603      	mov	r3, r0
 8016a74:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8016a7c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8016a7e:	7dfb      	ldrb	r3, [r7, #23]
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	d00a      	beq.n	8016a9a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8016a84:	7dfb      	ldrb	r3, [r7, #23]
 8016a86:	2b04      	cmp	r3, #4
 8016a88:	d12c      	bne.n	8016ae4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8016a8a:	7afb      	ldrb	r3, [r7, #11]
 8016a8c:	f003 0304 	and.w	r3, r3, #4
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d127      	bne.n	8016ae4 <follow_path+0xdc>
 8016a94:	2305      	movs	r3, #5
 8016a96:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8016a98:	e024      	b.n	8016ae4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8016a9a:	7afb      	ldrb	r3, [r7, #11]
 8016a9c:	f003 0304 	and.w	r3, r3, #4
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d121      	bne.n	8016ae8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8016aa4:	693b      	ldr	r3, [r7, #16]
 8016aa6:	799b      	ldrb	r3, [r3, #6]
 8016aa8:	f003 0310 	and.w	r3, r3, #16
 8016aac:	2b00      	cmp	r3, #0
 8016aae:	d102      	bne.n	8016ab6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8016ab0:	2305      	movs	r3, #5
 8016ab2:	75fb      	strb	r3, [r7, #23]
 8016ab4:	e019      	b.n	8016aea <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8016ab6:	68fb      	ldr	r3, [r7, #12]
 8016ab8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	691b      	ldr	r3, [r3, #16]
 8016ac0:	68fa      	ldr	r2, [r7, #12]
 8016ac2:	8992      	ldrh	r2, [r2, #12]
 8016ac4:	fbb3 f0f2 	udiv	r0, r3, r2
 8016ac8:	fb00 f202 	mul.w	r2, r0, r2
 8016acc:	1a9b      	subs	r3, r3, r2
 8016ace:	440b      	add	r3, r1
 8016ad0:	4619      	mov	r1, r3
 8016ad2:	68f8      	ldr	r0, [r7, #12]
 8016ad4:	f7ff fa60 	bl	8015f98 <ld_clust>
 8016ad8:	4602      	mov	r2, r0
 8016ada:	693b      	ldr	r3, [r7, #16]
 8016adc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8016ade:	e7bb      	b.n	8016a58 <follow_path+0x50>
			if (res != FR_OK) break;
 8016ae0:	bf00      	nop
 8016ae2:	e002      	b.n	8016aea <follow_path+0xe2>
				break;
 8016ae4:	bf00      	nop
 8016ae6:	e000      	b.n	8016aea <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8016ae8:	bf00      	nop
			}
		}
	}

	return res;
 8016aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8016aec:	4618      	mov	r0, r3
 8016aee:	3718      	adds	r7, #24
 8016af0:	46bd      	mov	sp, r7
 8016af2:	bd80      	pop	{r7, pc}

08016af4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8016af4:	b480      	push	{r7}
 8016af6:	b087      	sub	sp, #28
 8016af8:	af00      	add	r7, sp, #0
 8016afa:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8016afc:	f04f 33ff 	mov.w	r3, #4294967295
 8016b00:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	681b      	ldr	r3, [r3, #0]
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d031      	beq.n	8016b6e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	617b      	str	r3, [r7, #20]
 8016b10:	e002      	b.n	8016b18 <get_ldnumber+0x24>
 8016b12:	697b      	ldr	r3, [r7, #20]
 8016b14:	3301      	adds	r3, #1
 8016b16:	617b      	str	r3, [r7, #20]
 8016b18:	697b      	ldr	r3, [r7, #20]
 8016b1a:	781b      	ldrb	r3, [r3, #0]
 8016b1c:	2b1f      	cmp	r3, #31
 8016b1e:	d903      	bls.n	8016b28 <get_ldnumber+0x34>
 8016b20:	697b      	ldr	r3, [r7, #20]
 8016b22:	781b      	ldrb	r3, [r3, #0]
 8016b24:	2b3a      	cmp	r3, #58	; 0x3a
 8016b26:	d1f4      	bne.n	8016b12 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8016b28:	697b      	ldr	r3, [r7, #20]
 8016b2a:	781b      	ldrb	r3, [r3, #0]
 8016b2c:	2b3a      	cmp	r3, #58	; 0x3a
 8016b2e:	d11c      	bne.n	8016b6a <get_ldnumber+0x76>
			tp = *path;
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8016b36:	68fb      	ldr	r3, [r7, #12]
 8016b38:	1c5a      	adds	r2, r3, #1
 8016b3a:	60fa      	str	r2, [r7, #12]
 8016b3c:	781b      	ldrb	r3, [r3, #0]
 8016b3e:	3b30      	subs	r3, #48	; 0x30
 8016b40:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8016b42:	68bb      	ldr	r3, [r7, #8]
 8016b44:	2b09      	cmp	r3, #9
 8016b46:	d80e      	bhi.n	8016b66 <get_ldnumber+0x72>
 8016b48:	68fa      	ldr	r2, [r7, #12]
 8016b4a:	697b      	ldr	r3, [r7, #20]
 8016b4c:	429a      	cmp	r2, r3
 8016b4e:	d10a      	bne.n	8016b66 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8016b50:	68bb      	ldr	r3, [r7, #8]
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d107      	bne.n	8016b66 <get_ldnumber+0x72>
					vol = (int)i;
 8016b56:	68bb      	ldr	r3, [r7, #8]
 8016b58:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8016b5a:	697b      	ldr	r3, [r7, #20]
 8016b5c:	3301      	adds	r3, #1
 8016b5e:	617b      	str	r3, [r7, #20]
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	697a      	ldr	r2, [r7, #20]
 8016b64:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8016b66:	693b      	ldr	r3, [r7, #16]
 8016b68:	e002      	b.n	8016b70 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8016b6a:	2300      	movs	r3, #0
 8016b6c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8016b6e:	693b      	ldr	r3, [r7, #16]
}
 8016b70:	4618      	mov	r0, r3
 8016b72:	371c      	adds	r7, #28
 8016b74:	46bd      	mov	sp, r7
 8016b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b7a:	4770      	bx	lr

08016b7c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8016b7c:	b580      	push	{r7, lr}
 8016b7e:	b082      	sub	sp, #8
 8016b80:	af00      	add	r7, sp, #0
 8016b82:	6078      	str	r0, [r7, #4]
 8016b84:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	2200      	movs	r2, #0
 8016b8a:	70da      	strb	r2, [r3, #3]
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	f04f 32ff 	mov.w	r2, #4294967295
 8016b92:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8016b94:	6839      	ldr	r1, [r7, #0]
 8016b96:	6878      	ldr	r0, [r7, #4]
 8016b98:	f7fe fc76 	bl	8015488 <move_window>
 8016b9c:	4603      	mov	r3, r0
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d001      	beq.n	8016ba6 <check_fs+0x2a>
 8016ba2:	2304      	movs	r3, #4
 8016ba4:	e038      	b.n	8016c18 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	3338      	adds	r3, #56	; 0x38
 8016baa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016bae:	4618      	mov	r0, r3
 8016bb0:	f7fe fb26 	bl	8015200 <ld_word>
 8016bb4:	4603      	mov	r3, r0
 8016bb6:	461a      	mov	r2, r3
 8016bb8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016bbc:	429a      	cmp	r2, r3
 8016bbe:	d001      	beq.n	8016bc4 <check_fs+0x48>
 8016bc0:	2303      	movs	r3, #3
 8016bc2:	e029      	b.n	8016c18 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016bca:	2be9      	cmp	r3, #233	; 0xe9
 8016bcc:	d009      	beq.n	8016be2 <check_fs+0x66>
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016bd4:	2beb      	cmp	r3, #235	; 0xeb
 8016bd6:	d11e      	bne.n	8016c16 <check_fs+0x9a>
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8016bde:	2b90      	cmp	r3, #144	; 0x90
 8016be0:	d119      	bne.n	8016c16 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	3338      	adds	r3, #56	; 0x38
 8016be6:	3336      	adds	r3, #54	; 0x36
 8016be8:	4618      	mov	r0, r3
 8016bea:	f7fe fb21 	bl	8015230 <ld_dword>
 8016bee:	4603      	mov	r3, r0
 8016bf0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8016bf4:	4a0a      	ldr	r2, [pc, #40]	; (8016c20 <check_fs+0xa4>)
 8016bf6:	4293      	cmp	r3, r2
 8016bf8:	d101      	bne.n	8016bfe <check_fs+0x82>
 8016bfa:	2300      	movs	r3, #0
 8016bfc:	e00c      	b.n	8016c18 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	3338      	adds	r3, #56	; 0x38
 8016c02:	3352      	adds	r3, #82	; 0x52
 8016c04:	4618      	mov	r0, r3
 8016c06:	f7fe fb13 	bl	8015230 <ld_dword>
 8016c0a:	4603      	mov	r3, r0
 8016c0c:	4a05      	ldr	r2, [pc, #20]	; (8016c24 <check_fs+0xa8>)
 8016c0e:	4293      	cmp	r3, r2
 8016c10:	d101      	bne.n	8016c16 <check_fs+0x9a>
 8016c12:	2300      	movs	r3, #0
 8016c14:	e000      	b.n	8016c18 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8016c16:	2302      	movs	r3, #2
}
 8016c18:	4618      	mov	r0, r3
 8016c1a:	3708      	adds	r7, #8
 8016c1c:	46bd      	mov	sp, r7
 8016c1e:	bd80      	pop	{r7, pc}
 8016c20:	00544146 	.word	0x00544146
 8016c24:	33544146 	.word	0x33544146

08016c28 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8016c28:	b580      	push	{r7, lr}
 8016c2a:	b096      	sub	sp, #88	; 0x58
 8016c2c:	af00      	add	r7, sp, #0
 8016c2e:	60f8      	str	r0, [r7, #12]
 8016c30:	60b9      	str	r1, [r7, #8]
 8016c32:	4613      	mov	r3, r2
 8016c34:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8016c36:	68bb      	ldr	r3, [r7, #8]
 8016c38:	2200      	movs	r2, #0
 8016c3a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8016c3c:	68f8      	ldr	r0, [r7, #12]
 8016c3e:	f7ff ff59 	bl	8016af4 <get_ldnumber>
 8016c42:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8016c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	da01      	bge.n	8016c4e <find_volume+0x26>
 8016c4a:	230b      	movs	r3, #11
 8016c4c:	e262      	b.n	8017114 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8016c4e:	4a9f      	ldr	r2, [pc, #636]	; (8016ecc <find_volume+0x2a4>)
 8016c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016c56:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8016c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d101      	bne.n	8016c62 <find_volume+0x3a>
 8016c5e:	230c      	movs	r3, #12
 8016c60:	e258      	b.n	8017114 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8016c62:	68bb      	ldr	r3, [r7, #8]
 8016c64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016c66:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8016c68:	79fb      	ldrb	r3, [r7, #7]
 8016c6a:	f023 0301 	bic.w	r3, r3, #1
 8016c6e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8016c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c72:	781b      	ldrb	r3, [r3, #0]
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d01a      	beq.n	8016cae <find_volume+0x86>
		stat = disk_status(fs->drv);
 8016c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c7a:	785b      	ldrb	r3, [r3, #1]
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	f7fe fa21 	bl	80150c4 <disk_status>
 8016c82:	4603      	mov	r3, r0
 8016c84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8016c88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016c8c:	f003 0301 	and.w	r3, r3, #1
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d10c      	bne.n	8016cae <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8016c94:	79fb      	ldrb	r3, [r7, #7]
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	d007      	beq.n	8016caa <find_volume+0x82>
 8016c9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016c9e:	f003 0304 	and.w	r3, r3, #4
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d001      	beq.n	8016caa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8016ca6:	230a      	movs	r3, #10
 8016ca8:	e234      	b.n	8017114 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8016caa:	2300      	movs	r3, #0
 8016cac:	e232      	b.n	8017114 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8016cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cb0:	2200      	movs	r2, #0
 8016cb2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8016cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016cb6:	b2da      	uxtb	r2, r3
 8016cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cba:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8016cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cbe:	785b      	ldrb	r3, [r3, #1]
 8016cc0:	4618      	mov	r0, r3
 8016cc2:	f7fe fa19 	bl	80150f8 <disk_initialize>
 8016cc6:	4603      	mov	r3, r0
 8016cc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8016ccc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016cd0:	f003 0301 	and.w	r3, r3, #1
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d001      	beq.n	8016cdc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8016cd8:	2303      	movs	r3, #3
 8016cda:	e21b      	b.n	8017114 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8016cdc:	79fb      	ldrb	r3, [r7, #7]
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d007      	beq.n	8016cf2 <find_volume+0xca>
 8016ce2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016ce6:	f003 0304 	and.w	r3, r3, #4
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d001      	beq.n	8016cf2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8016cee:	230a      	movs	r3, #10
 8016cf0:	e210      	b.n	8017114 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8016cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cf4:	7858      	ldrb	r0, [r3, #1]
 8016cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cf8:	330c      	adds	r3, #12
 8016cfa:	461a      	mov	r2, r3
 8016cfc:	2102      	movs	r1, #2
 8016cfe:	f7fe fa61 	bl	80151c4 <disk_ioctl>
 8016d02:	4603      	mov	r3, r0
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d001      	beq.n	8016d0c <find_volume+0xe4>
 8016d08:	2301      	movs	r3, #1
 8016d0a:	e203      	b.n	8017114 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8016d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d0e:	899b      	ldrh	r3, [r3, #12]
 8016d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016d14:	d80d      	bhi.n	8016d32 <find_volume+0x10a>
 8016d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d18:	899b      	ldrh	r3, [r3, #12]
 8016d1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016d1e:	d308      	bcc.n	8016d32 <find_volume+0x10a>
 8016d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d22:	899b      	ldrh	r3, [r3, #12]
 8016d24:	461a      	mov	r2, r3
 8016d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d28:	899b      	ldrh	r3, [r3, #12]
 8016d2a:	3b01      	subs	r3, #1
 8016d2c:	4013      	ands	r3, r2
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d001      	beq.n	8016d36 <find_volume+0x10e>
 8016d32:	2301      	movs	r3, #1
 8016d34:	e1ee      	b.n	8017114 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8016d36:	2300      	movs	r3, #0
 8016d38:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8016d3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016d3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016d3e:	f7ff ff1d 	bl	8016b7c <check_fs>
 8016d42:	4603      	mov	r3, r0
 8016d44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8016d48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016d4c:	2b02      	cmp	r3, #2
 8016d4e:	d149      	bne.n	8016de4 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016d50:	2300      	movs	r3, #0
 8016d52:	643b      	str	r3, [r7, #64]	; 0x40
 8016d54:	e01e      	b.n	8016d94 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8016d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d58:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8016d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016d5e:	011b      	lsls	r3, r3, #4
 8016d60:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8016d64:	4413      	add	r3, r2
 8016d66:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8016d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d6a:	3304      	adds	r3, #4
 8016d6c:	781b      	ldrb	r3, [r3, #0]
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d006      	beq.n	8016d80 <find_volume+0x158>
 8016d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d74:	3308      	adds	r3, #8
 8016d76:	4618      	mov	r0, r3
 8016d78:	f7fe fa5a 	bl	8015230 <ld_dword>
 8016d7c:	4602      	mov	r2, r0
 8016d7e:	e000      	b.n	8016d82 <find_volume+0x15a>
 8016d80:	2200      	movs	r2, #0
 8016d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016d84:	009b      	lsls	r3, r3, #2
 8016d86:	3358      	adds	r3, #88	; 0x58
 8016d88:	443b      	add	r3, r7
 8016d8a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016d8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016d90:	3301      	adds	r3, #1
 8016d92:	643b      	str	r3, [r7, #64]	; 0x40
 8016d94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016d96:	2b03      	cmp	r3, #3
 8016d98:	d9dd      	bls.n	8016d56 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8016d9a:	2300      	movs	r3, #0
 8016d9c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8016d9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d002      	beq.n	8016daa <find_volume+0x182>
 8016da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016da6:	3b01      	subs	r3, #1
 8016da8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8016daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016dac:	009b      	lsls	r3, r3, #2
 8016dae:	3358      	adds	r3, #88	; 0x58
 8016db0:	443b      	add	r3, r7
 8016db2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8016db6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8016db8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d005      	beq.n	8016dca <find_volume+0x1a2>
 8016dbe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016dc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016dc2:	f7ff fedb 	bl	8016b7c <check_fs>
 8016dc6:	4603      	mov	r3, r0
 8016dc8:	e000      	b.n	8016dcc <find_volume+0x1a4>
 8016dca:	2303      	movs	r3, #3
 8016dcc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8016dd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016dd4:	2b01      	cmp	r3, #1
 8016dd6:	d905      	bls.n	8016de4 <find_volume+0x1bc>
 8016dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016dda:	3301      	adds	r3, #1
 8016ddc:	643b      	str	r3, [r7, #64]	; 0x40
 8016dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016de0:	2b03      	cmp	r3, #3
 8016de2:	d9e2      	bls.n	8016daa <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8016de4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016de8:	2b04      	cmp	r3, #4
 8016dea:	d101      	bne.n	8016df0 <find_volume+0x1c8>
 8016dec:	2301      	movs	r3, #1
 8016dee:	e191      	b.n	8017114 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8016df0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016df4:	2b01      	cmp	r3, #1
 8016df6:	d901      	bls.n	8016dfc <find_volume+0x1d4>
 8016df8:	230d      	movs	r3, #13
 8016dfa:	e18b      	b.n	8017114 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8016dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016dfe:	3338      	adds	r3, #56	; 0x38
 8016e00:	330b      	adds	r3, #11
 8016e02:	4618      	mov	r0, r3
 8016e04:	f7fe f9fc 	bl	8015200 <ld_word>
 8016e08:	4603      	mov	r3, r0
 8016e0a:	461a      	mov	r2, r3
 8016e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e0e:	899b      	ldrh	r3, [r3, #12]
 8016e10:	429a      	cmp	r2, r3
 8016e12:	d001      	beq.n	8016e18 <find_volume+0x1f0>
 8016e14:	230d      	movs	r3, #13
 8016e16:	e17d      	b.n	8017114 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8016e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e1a:	3338      	adds	r3, #56	; 0x38
 8016e1c:	3316      	adds	r3, #22
 8016e1e:	4618      	mov	r0, r3
 8016e20:	f7fe f9ee 	bl	8015200 <ld_word>
 8016e24:	4603      	mov	r3, r0
 8016e26:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8016e28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d106      	bne.n	8016e3c <find_volume+0x214>
 8016e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e30:	3338      	adds	r3, #56	; 0x38
 8016e32:	3324      	adds	r3, #36	; 0x24
 8016e34:	4618      	mov	r0, r3
 8016e36:	f7fe f9fb 	bl	8015230 <ld_dword>
 8016e3a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8016e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016e40:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8016e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e44:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8016e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e4a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8016e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e4e:	789b      	ldrb	r3, [r3, #2]
 8016e50:	2b01      	cmp	r3, #1
 8016e52:	d005      	beq.n	8016e60 <find_volume+0x238>
 8016e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e56:	789b      	ldrb	r3, [r3, #2]
 8016e58:	2b02      	cmp	r3, #2
 8016e5a:	d001      	beq.n	8016e60 <find_volume+0x238>
 8016e5c:	230d      	movs	r3, #13
 8016e5e:	e159      	b.n	8017114 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8016e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e62:	789b      	ldrb	r3, [r3, #2]
 8016e64:	461a      	mov	r2, r3
 8016e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016e68:	fb02 f303 	mul.w	r3, r2, r3
 8016e6c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8016e6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016e74:	b29a      	uxth	r2, r3
 8016e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e78:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8016e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e7c:	895b      	ldrh	r3, [r3, #10]
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	d008      	beq.n	8016e94 <find_volume+0x26c>
 8016e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e84:	895b      	ldrh	r3, [r3, #10]
 8016e86:	461a      	mov	r2, r3
 8016e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e8a:	895b      	ldrh	r3, [r3, #10]
 8016e8c:	3b01      	subs	r3, #1
 8016e8e:	4013      	ands	r3, r2
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d001      	beq.n	8016e98 <find_volume+0x270>
 8016e94:	230d      	movs	r3, #13
 8016e96:	e13d      	b.n	8017114 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8016e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e9a:	3338      	adds	r3, #56	; 0x38
 8016e9c:	3311      	adds	r3, #17
 8016e9e:	4618      	mov	r0, r3
 8016ea0:	f7fe f9ae 	bl	8015200 <ld_word>
 8016ea4:	4603      	mov	r3, r0
 8016ea6:	461a      	mov	r2, r3
 8016ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016eaa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8016eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016eae:	891b      	ldrh	r3, [r3, #8]
 8016eb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016eb2:	8992      	ldrh	r2, [r2, #12]
 8016eb4:	0952      	lsrs	r2, r2, #5
 8016eb6:	b292      	uxth	r2, r2
 8016eb8:	fbb3 f1f2 	udiv	r1, r3, r2
 8016ebc:	fb01 f202 	mul.w	r2, r1, r2
 8016ec0:	1a9b      	subs	r3, r3, r2
 8016ec2:	b29b      	uxth	r3, r3
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d003      	beq.n	8016ed0 <find_volume+0x2a8>
 8016ec8:	230d      	movs	r3, #13
 8016eca:	e123      	b.n	8017114 <find_volume+0x4ec>
 8016ecc:	200127bc 	.word	0x200127bc

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8016ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ed2:	3338      	adds	r3, #56	; 0x38
 8016ed4:	3313      	adds	r3, #19
 8016ed6:	4618      	mov	r0, r3
 8016ed8:	f7fe f992 	bl	8015200 <ld_word>
 8016edc:	4603      	mov	r3, r0
 8016ede:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8016ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d106      	bne.n	8016ef4 <find_volume+0x2cc>
 8016ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ee8:	3338      	adds	r3, #56	; 0x38
 8016eea:	3320      	adds	r3, #32
 8016eec:	4618      	mov	r0, r3
 8016eee:	f7fe f99f 	bl	8015230 <ld_dword>
 8016ef2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8016ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ef6:	3338      	adds	r3, #56	; 0x38
 8016ef8:	330e      	adds	r3, #14
 8016efa:	4618      	mov	r0, r3
 8016efc:	f7fe f980 	bl	8015200 <ld_word>
 8016f00:	4603      	mov	r3, r0
 8016f02:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8016f04:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d101      	bne.n	8016f0e <find_volume+0x2e6>
 8016f0a:	230d      	movs	r3, #13
 8016f0c:	e102      	b.n	8017114 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8016f0e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016f12:	4413      	add	r3, r2
 8016f14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016f16:	8911      	ldrh	r1, [r2, #8]
 8016f18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016f1a:	8992      	ldrh	r2, [r2, #12]
 8016f1c:	0952      	lsrs	r2, r2, #5
 8016f1e:	b292      	uxth	r2, r2
 8016f20:	fbb1 f2f2 	udiv	r2, r1, r2
 8016f24:	b292      	uxth	r2, r2
 8016f26:	4413      	add	r3, r2
 8016f28:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8016f2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f2e:	429a      	cmp	r2, r3
 8016f30:	d201      	bcs.n	8016f36 <find_volume+0x30e>
 8016f32:	230d      	movs	r3, #13
 8016f34:	e0ee      	b.n	8017114 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8016f36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f3a:	1ad3      	subs	r3, r2, r3
 8016f3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016f3e:	8952      	ldrh	r2, [r2, #10]
 8016f40:	fbb3 f3f2 	udiv	r3, r3, r2
 8016f44:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8016f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	d101      	bne.n	8016f50 <find_volume+0x328>
 8016f4c:	230d      	movs	r3, #13
 8016f4e:	e0e1      	b.n	8017114 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8016f50:	2303      	movs	r3, #3
 8016f52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8016f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f58:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8016f5c:	4293      	cmp	r3, r2
 8016f5e:	d802      	bhi.n	8016f66 <find_volume+0x33e>
 8016f60:	2302      	movs	r3, #2
 8016f62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8016f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f68:	f640 72f5 	movw	r2, #4085	; 0xff5
 8016f6c:	4293      	cmp	r3, r2
 8016f6e:	d802      	bhi.n	8016f76 <find_volume+0x34e>
 8016f70:	2301      	movs	r3, #1
 8016f72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8016f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f78:	1c9a      	adds	r2, r3, #2
 8016f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f7c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8016f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016f82:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8016f84:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016f88:	441a      	add	r2, r3
 8016f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f8c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8016f8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f92:	441a      	add	r2, r3
 8016f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016f96:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8016f98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016f9c:	2b03      	cmp	r3, #3
 8016f9e:	d11e      	bne.n	8016fde <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8016fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fa2:	3338      	adds	r3, #56	; 0x38
 8016fa4:	332a      	adds	r3, #42	; 0x2a
 8016fa6:	4618      	mov	r0, r3
 8016fa8:	f7fe f92a 	bl	8015200 <ld_word>
 8016fac:	4603      	mov	r3, r0
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d001      	beq.n	8016fb6 <find_volume+0x38e>
 8016fb2:	230d      	movs	r3, #13
 8016fb4:	e0ae      	b.n	8017114 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8016fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fb8:	891b      	ldrh	r3, [r3, #8]
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d001      	beq.n	8016fc2 <find_volume+0x39a>
 8016fbe:	230d      	movs	r3, #13
 8016fc0:	e0a8      	b.n	8017114 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8016fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fc4:	3338      	adds	r3, #56	; 0x38
 8016fc6:	332c      	adds	r3, #44	; 0x2c
 8016fc8:	4618      	mov	r0, r3
 8016fca:	f7fe f931 	bl	8015230 <ld_dword>
 8016fce:	4602      	mov	r2, r0
 8016fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fd2:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8016fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fd6:	69db      	ldr	r3, [r3, #28]
 8016fd8:	009b      	lsls	r3, r3, #2
 8016fda:	647b      	str	r3, [r7, #68]	; 0x44
 8016fdc:	e01f      	b.n	801701e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8016fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fe0:	891b      	ldrh	r3, [r3, #8]
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d101      	bne.n	8016fea <find_volume+0x3c2>
 8016fe6:	230d      	movs	r3, #13
 8016fe8:	e094      	b.n	8017114 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8016fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016fec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016ff0:	441a      	add	r2, r3
 8016ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ff4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8016ff6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016ffa:	2b02      	cmp	r3, #2
 8016ffc:	d103      	bne.n	8017006 <find_volume+0x3de>
 8016ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017000:	69db      	ldr	r3, [r3, #28]
 8017002:	005b      	lsls	r3, r3, #1
 8017004:	e00a      	b.n	801701c <find_volume+0x3f4>
 8017006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017008:	69da      	ldr	r2, [r3, #28]
 801700a:	4613      	mov	r3, r2
 801700c:	005b      	lsls	r3, r3, #1
 801700e:	4413      	add	r3, r2
 8017010:	085a      	lsrs	r2, r3, #1
 8017012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017014:	69db      	ldr	r3, [r3, #28]
 8017016:	f003 0301 	and.w	r3, r3, #1
 801701a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801701c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801701e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017020:	6a1a      	ldr	r2, [r3, #32]
 8017022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017024:	899b      	ldrh	r3, [r3, #12]
 8017026:	4619      	mov	r1, r3
 8017028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801702a:	440b      	add	r3, r1
 801702c:	3b01      	subs	r3, #1
 801702e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017030:	8989      	ldrh	r1, [r1, #12]
 8017032:	fbb3 f3f1 	udiv	r3, r3, r1
 8017036:	429a      	cmp	r2, r3
 8017038:	d201      	bcs.n	801703e <find_volume+0x416>
 801703a:	230d      	movs	r3, #13
 801703c:	e06a      	b.n	8017114 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801703e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017040:	f04f 32ff 	mov.w	r2, #4294967295
 8017044:	619a      	str	r2, [r3, #24]
 8017046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017048:	699a      	ldr	r2, [r3, #24]
 801704a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801704c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 801704e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017050:	2280      	movs	r2, #128	; 0x80
 8017052:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8017054:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017058:	2b03      	cmp	r3, #3
 801705a:	d149      	bne.n	80170f0 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801705c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801705e:	3338      	adds	r3, #56	; 0x38
 8017060:	3330      	adds	r3, #48	; 0x30
 8017062:	4618      	mov	r0, r3
 8017064:	f7fe f8cc 	bl	8015200 <ld_word>
 8017068:	4603      	mov	r3, r0
 801706a:	2b01      	cmp	r3, #1
 801706c:	d140      	bne.n	80170f0 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801706e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017070:	3301      	adds	r3, #1
 8017072:	4619      	mov	r1, r3
 8017074:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017076:	f7fe fa07 	bl	8015488 <move_window>
 801707a:	4603      	mov	r3, r0
 801707c:	2b00      	cmp	r3, #0
 801707e:	d137      	bne.n	80170f0 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8017080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017082:	2200      	movs	r2, #0
 8017084:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8017086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017088:	3338      	adds	r3, #56	; 0x38
 801708a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801708e:	4618      	mov	r0, r3
 8017090:	f7fe f8b6 	bl	8015200 <ld_word>
 8017094:	4603      	mov	r3, r0
 8017096:	461a      	mov	r2, r3
 8017098:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801709c:	429a      	cmp	r2, r3
 801709e:	d127      	bne.n	80170f0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80170a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170a2:	3338      	adds	r3, #56	; 0x38
 80170a4:	4618      	mov	r0, r3
 80170a6:	f7fe f8c3 	bl	8015230 <ld_dword>
 80170aa:	4603      	mov	r3, r0
 80170ac:	4a1b      	ldr	r2, [pc, #108]	; (801711c <find_volume+0x4f4>)
 80170ae:	4293      	cmp	r3, r2
 80170b0:	d11e      	bne.n	80170f0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80170b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170b4:	3338      	adds	r3, #56	; 0x38
 80170b6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80170ba:	4618      	mov	r0, r3
 80170bc:	f7fe f8b8 	bl	8015230 <ld_dword>
 80170c0:	4603      	mov	r3, r0
 80170c2:	4a17      	ldr	r2, [pc, #92]	; (8017120 <find_volume+0x4f8>)
 80170c4:	4293      	cmp	r3, r2
 80170c6:	d113      	bne.n	80170f0 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80170c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170ca:	3338      	adds	r3, #56	; 0x38
 80170cc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80170d0:	4618      	mov	r0, r3
 80170d2:	f7fe f8ad 	bl	8015230 <ld_dword>
 80170d6:	4602      	mov	r2, r0
 80170d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170da:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80170dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170de:	3338      	adds	r3, #56	; 0x38
 80170e0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80170e4:	4618      	mov	r0, r3
 80170e6:	f7fe f8a3 	bl	8015230 <ld_dword>
 80170ea:	4602      	mov	r2, r0
 80170ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170ee:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80170f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170f2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80170f6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80170f8:	4b0a      	ldr	r3, [pc, #40]	; (8017124 <find_volume+0x4fc>)
 80170fa:	881b      	ldrh	r3, [r3, #0]
 80170fc:	3301      	adds	r3, #1
 80170fe:	b29a      	uxth	r2, r3
 8017100:	4b08      	ldr	r3, [pc, #32]	; (8017124 <find_volume+0x4fc>)
 8017102:	801a      	strh	r2, [r3, #0]
 8017104:	4b07      	ldr	r3, [pc, #28]	; (8017124 <find_volume+0x4fc>)
 8017106:	881a      	ldrh	r2, [r3, #0]
 8017108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801710a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801710c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801710e:	4a06      	ldr	r2, [pc, #24]	; (8017128 <find_volume+0x500>)
 8017110:	611a      	str	r2, [r3, #16]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 8017112:	2300      	movs	r3, #0
}
 8017114:	4618      	mov	r0, r3
 8017116:	3758      	adds	r7, #88	; 0x58
 8017118:	46bd      	mov	sp, r7
 801711a:	bd80      	pop	{r7, pc}
 801711c:	41615252 	.word	0x41615252
 8017120:	61417272 	.word	0x61417272
 8017124:	200127c0 	.word	0x200127c0
 8017128:	200127c4 	.word	0x200127c4

0801712c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801712c:	b580      	push	{r7, lr}
 801712e:	b084      	sub	sp, #16
 8017130:	af00      	add	r7, sp, #0
 8017132:	6078      	str	r0, [r7, #4]
 8017134:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8017136:	2309      	movs	r3, #9
 8017138:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	2b00      	cmp	r3, #0
 801713e:	d01c      	beq.n	801717a <validate+0x4e>
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	681b      	ldr	r3, [r3, #0]
 8017144:	2b00      	cmp	r3, #0
 8017146:	d018      	beq.n	801717a <validate+0x4e>
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	681b      	ldr	r3, [r3, #0]
 801714c:	781b      	ldrb	r3, [r3, #0]
 801714e:	2b00      	cmp	r3, #0
 8017150:	d013      	beq.n	801717a <validate+0x4e>
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	889a      	ldrh	r2, [r3, #4]
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	681b      	ldr	r3, [r3, #0]
 801715a:	88db      	ldrh	r3, [r3, #6]
 801715c:	429a      	cmp	r2, r3
 801715e:	d10c      	bne.n	801717a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	681b      	ldr	r3, [r3, #0]
 8017164:	785b      	ldrb	r3, [r3, #1]
 8017166:	4618      	mov	r0, r3
 8017168:	f7fd ffac 	bl	80150c4 <disk_status>
 801716c:	4603      	mov	r3, r0
 801716e:	f003 0301 	and.w	r3, r3, #1
 8017172:	2b00      	cmp	r3, #0
 8017174:	d101      	bne.n	801717a <validate+0x4e>
			res = FR_OK;
 8017176:	2300      	movs	r3, #0
 8017178:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801717a:	7bfb      	ldrb	r3, [r7, #15]
 801717c:	2b00      	cmp	r3, #0
 801717e:	d102      	bne.n	8017186 <validate+0x5a>
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	681b      	ldr	r3, [r3, #0]
 8017184:	e000      	b.n	8017188 <validate+0x5c>
 8017186:	2300      	movs	r3, #0
 8017188:	683a      	ldr	r2, [r7, #0]
 801718a:	6013      	str	r3, [r2, #0]
	return res;
 801718c:	7bfb      	ldrb	r3, [r7, #15]
}
 801718e:	4618      	mov	r0, r3
 8017190:	3710      	adds	r7, #16
 8017192:	46bd      	mov	sp, r7
 8017194:	bd80      	pop	{r7, pc}
	...

08017198 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8017198:	b580      	push	{r7, lr}
 801719a:	b088      	sub	sp, #32
 801719c:	af00      	add	r7, sp, #0
 801719e:	60f8      	str	r0, [r7, #12]
 80171a0:	60b9      	str	r1, [r7, #8]
 80171a2:	4613      	mov	r3, r2
 80171a4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80171a6:	68bb      	ldr	r3, [r7, #8]
 80171a8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80171aa:	f107 0310 	add.w	r3, r7, #16
 80171ae:	4618      	mov	r0, r3
 80171b0:	f7ff fca0 	bl	8016af4 <get_ldnumber>
 80171b4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80171b6:	69fb      	ldr	r3, [r7, #28]
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	da01      	bge.n	80171c0 <f_mount+0x28>
 80171bc:	230b      	movs	r3, #11
 80171be:	e028      	b.n	8017212 <f_mount+0x7a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80171c0:	4a16      	ldr	r2, [pc, #88]	; (801721c <f_mount+0x84>)
 80171c2:	69fb      	ldr	r3, [r7, #28]
 80171c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80171c8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80171ca:	69bb      	ldr	r3, [r7, #24]
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d002      	beq.n	80171d6 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80171d0:	69bb      	ldr	r3, [r7, #24]
 80171d2:	2200      	movs	r2, #0
 80171d4:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80171d6:	68fb      	ldr	r3, [r7, #12]
 80171d8:	2b00      	cmp	r3, #0
 80171da:	d002      	beq.n	80171e2 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	2200      	movs	r2, #0
 80171e0:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80171e2:	68fa      	ldr	r2, [r7, #12]
 80171e4:	490d      	ldr	r1, [pc, #52]	; (801721c <f_mount+0x84>)
 80171e6:	69fb      	ldr	r3, [r7, #28]
 80171e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80171ec:	68fb      	ldr	r3, [r7, #12]
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d002      	beq.n	80171f8 <f_mount+0x60>
 80171f2:	79fb      	ldrb	r3, [r7, #7]
 80171f4:	2b01      	cmp	r3, #1
 80171f6:	d001      	beq.n	80171fc <f_mount+0x64>
 80171f8:	2300      	movs	r3, #0
 80171fa:	e00a      	b.n	8017212 <f_mount+0x7a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80171fc:	f107 010c 	add.w	r1, r7, #12
 8017200:	f107 0308 	add.w	r3, r7, #8
 8017204:	2200      	movs	r2, #0
 8017206:	4618      	mov	r0, r3
 8017208:	f7ff fd0e 	bl	8016c28 <find_volume>
 801720c:	4603      	mov	r3, r0
 801720e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8017210:	7dfb      	ldrb	r3, [r7, #23]
}
 8017212:	4618      	mov	r0, r3
 8017214:	3720      	adds	r7, #32
 8017216:	46bd      	mov	sp, r7
 8017218:	bd80      	pop	{r7, pc}
 801721a:	bf00      	nop
 801721c:	200127bc 	.word	0x200127bc

08017220 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8017220:	b580      	push	{r7, lr}
 8017222:	b098      	sub	sp, #96	; 0x60
 8017224:	af00      	add	r7, sp, #0
 8017226:	60f8      	str	r0, [r7, #12]
 8017228:	60b9      	str	r1, [r7, #8]
 801722a:	4613      	mov	r3, r2
 801722c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801722e:	68fb      	ldr	r3, [r7, #12]
 8017230:	2b00      	cmp	r3, #0
 8017232:	d101      	bne.n	8017238 <f_open+0x18>
 8017234:	2309      	movs	r3, #9
 8017236:	e188      	b.n	801754a <f_open+0x32a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8017238:	79fb      	ldrb	r3, [r7, #7]
 801723a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801723e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8017240:	79fa      	ldrb	r2, [r7, #7]
 8017242:	f107 0110 	add.w	r1, r7, #16
 8017246:	f107 0308 	add.w	r3, r7, #8
 801724a:	4618      	mov	r0, r3
 801724c:	f7ff fcec 	bl	8016c28 <find_volume>
 8017250:	4603      	mov	r3, r0
 8017252:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8017256:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801725a:	2b00      	cmp	r3, #0
 801725c:	f040 816c 	bne.w	8017538 <f_open+0x318>
		dj.obj.fs = fs;
 8017260:	693b      	ldr	r3, [r7, #16]
 8017262:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8017264:	68ba      	ldr	r2, [r7, #8]
 8017266:	f107 0314 	add.w	r3, r7, #20
 801726a:	4611      	mov	r1, r2
 801726c:	4618      	mov	r0, r3
 801726e:	f7ff fbcb 	bl	8016a08 <follow_path>
 8017272:	4603      	mov	r3, r0
 8017274:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8017278:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801727c:	2b00      	cmp	r3, #0
 801727e:	d107      	bne.n	8017290 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8017280:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8017284:	b25b      	sxtb	r3, r3
 8017286:	2b00      	cmp	r3, #0
 8017288:	da02      	bge.n	8017290 <f_open+0x70>
				res = FR_INVALID_NAME;
 801728a:	2306      	movs	r3, #6
 801728c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8017290:	79fb      	ldrb	r3, [r7, #7]
 8017292:	f003 031c 	and.w	r3, r3, #28
 8017296:	2b00      	cmp	r3, #0
 8017298:	d078      	beq.n	801738c <f_open+0x16c>
			if (res != FR_OK) {					/* No file, create new */
 801729a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d010      	beq.n	80172c4 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80172a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80172a6:	2b04      	cmp	r3, #4
 80172a8:	d107      	bne.n	80172ba <f_open+0x9a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 80172aa:	f107 0314 	add.w	r3, r7, #20
 80172ae:	4618      	mov	r0, r3
 80172b0:	f7ff f8fa 	bl	80164a8 <dir_register>
 80172b4:	4603      	mov	r3, r0
 80172b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80172ba:	79fb      	ldrb	r3, [r7, #7]
 80172bc:	f043 0308 	orr.w	r3, r3, #8
 80172c0:	71fb      	strb	r3, [r7, #7]
 80172c2:	e010      	b.n	80172e6 <f_open+0xc6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80172c4:	7ebb      	ldrb	r3, [r7, #26]
 80172c6:	f003 0311 	and.w	r3, r3, #17
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d003      	beq.n	80172d6 <f_open+0xb6>
					res = FR_DENIED;
 80172ce:	2307      	movs	r3, #7
 80172d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80172d4:	e007      	b.n	80172e6 <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80172d6:	79fb      	ldrb	r3, [r7, #7]
 80172d8:	f003 0304 	and.w	r3, r3, #4
 80172dc:	2b00      	cmp	r3, #0
 80172de:	d002      	beq.n	80172e6 <f_open+0xc6>
 80172e0:	2308      	movs	r3, #8
 80172e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80172e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d168      	bne.n	80173c0 <f_open+0x1a0>
 80172ee:	79fb      	ldrb	r3, [r7, #7]
 80172f0:	f003 0308 	and.w	r3, r3, #8
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d063      	beq.n	80173c0 <f_open+0x1a0>
				dw = GET_FATTIME();
 80172f8:	f7fa f9de 	bl	80116b8 <get_fattime>
 80172fc:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80172fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017300:	330e      	adds	r3, #14
 8017302:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017304:	4618      	mov	r0, r3
 8017306:	f7fd ffd1 	bl	80152ac <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801730a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801730c:	3316      	adds	r3, #22
 801730e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017310:	4618      	mov	r0, r3
 8017312:	f7fd ffcb 	bl	80152ac <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8017316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017318:	330b      	adds	r3, #11
 801731a:	2220      	movs	r2, #32
 801731c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801731e:	693b      	ldr	r3, [r7, #16]
 8017320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017322:	4611      	mov	r1, r2
 8017324:	4618      	mov	r0, r3
 8017326:	f7fe fe37 	bl	8015f98 <ld_clust>
 801732a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 801732c:	693b      	ldr	r3, [r7, #16]
 801732e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017330:	2200      	movs	r2, #0
 8017332:	4618      	mov	r0, r3
 8017334:	f7fe fe4f 	bl	8015fd6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8017338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801733a:	331c      	adds	r3, #28
 801733c:	2100      	movs	r1, #0
 801733e:	4618      	mov	r0, r3
 8017340:	f7fd ffb4 	bl	80152ac <st_dword>
					fs->wflag = 1;
 8017344:	693b      	ldr	r3, [r7, #16]
 8017346:	2201      	movs	r2, #1
 8017348:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801734a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801734c:	2b00      	cmp	r3, #0
 801734e:	d037      	beq.n	80173c0 <f_open+0x1a0>
						dw = fs->winsect;
 8017350:	693b      	ldr	r3, [r7, #16]
 8017352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017354:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8017356:	f107 0314 	add.w	r3, r7, #20
 801735a:	2200      	movs	r2, #0
 801735c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801735e:	4618      	mov	r0, r3
 8017360:	f7fe fb3f 	bl	80159e2 <remove_chain>
 8017364:	4603      	mov	r3, r0
 8017366:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801736a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801736e:	2b00      	cmp	r3, #0
 8017370:	d126      	bne.n	80173c0 <f_open+0x1a0>
							res = move_window(fs, dw);
 8017372:	693b      	ldr	r3, [r7, #16]
 8017374:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017376:	4618      	mov	r0, r3
 8017378:	f7fe f886 	bl	8015488 <move_window>
 801737c:	4603      	mov	r3, r0
 801737e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8017382:	693b      	ldr	r3, [r7, #16]
 8017384:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017386:	3a01      	subs	r2, #1
 8017388:	615a      	str	r2, [r3, #20]
 801738a:	e019      	b.n	80173c0 <f_open+0x1a0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801738c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017390:	2b00      	cmp	r3, #0
 8017392:	d115      	bne.n	80173c0 <f_open+0x1a0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8017394:	7ebb      	ldrb	r3, [r7, #26]
 8017396:	f003 0310 	and.w	r3, r3, #16
 801739a:	2b00      	cmp	r3, #0
 801739c:	d003      	beq.n	80173a6 <f_open+0x186>
					res = FR_NO_FILE;
 801739e:	2304      	movs	r3, #4
 80173a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80173a4:	e00c      	b.n	80173c0 <f_open+0x1a0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80173a6:	79fb      	ldrb	r3, [r7, #7]
 80173a8:	f003 0302 	and.w	r3, r3, #2
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d007      	beq.n	80173c0 <f_open+0x1a0>
 80173b0:	7ebb      	ldrb	r3, [r7, #26]
 80173b2:	f003 0301 	and.w	r3, r3, #1
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d002      	beq.n	80173c0 <f_open+0x1a0>
						res = FR_DENIED;
 80173ba:	2307      	movs	r3, #7
 80173bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80173c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d10f      	bne.n	80173e8 <f_open+0x1c8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80173c8:	79fb      	ldrb	r3, [r7, #7]
 80173ca:	f003 0308 	and.w	r3, r3, #8
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d003      	beq.n	80173da <f_open+0x1ba>
				mode |= FA_MODIFIED;
 80173d2:	79fb      	ldrb	r3, [r7, #7]
 80173d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80173d8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80173da:	693b      	ldr	r3, [r7, #16]
 80173dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80173de:	68fb      	ldr	r3, [r7, #12]
 80173e0:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 80173e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80173e4:	68fb      	ldr	r3, [r7, #12]
 80173e6:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 80173e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	f040 80a3 	bne.w	8017538 <f_open+0x318>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80173f2:	693b      	ldr	r3, [r7, #16]
 80173f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80173f6:	4611      	mov	r1, r2
 80173f8:	4618      	mov	r0, r3
 80173fa:	f7fe fdcd 	bl	8015f98 <ld_clust>
 80173fe:	4602      	mov	r2, r0
 8017400:	68fb      	ldr	r3, [r7, #12]
 8017402:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8017404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017406:	331c      	adds	r3, #28
 8017408:	4618      	mov	r0, r3
 801740a:	f7fd ff11 	bl	8015230 <ld_dword>
 801740e:	4602      	mov	r2, r0
 8017410:	68fb      	ldr	r3, [r7, #12]
 8017412:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8017414:	68fb      	ldr	r3, [r7, #12]
 8017416:	2200      	movs	r2, #0
 8017418:	629a      	str	r2, [r3, #40]	; 0x28
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801741a:	693a      	ldr	r2, [r7, #16]
 801741c:	68fb      	ldr	r3, [r7, #12]
 801741e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8017420:	693b      	ldr	r3, [r7, #16]
 8017422:	88da      	ldrh	r2, [r3, #6]
 8017424:	68fb      	ldr	r3, [r7, #12]
 8017426:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8017428:	68fb      	ldr	r3, [r7, #12]
 801742a:	79fa      	ldrb	r2, [r7, #7]
 801742c:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 801742e:	68fb      	ldr	r3, [r7, #12]
 8017430:	2200      	movs	r2, #0
 8017432:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 8017434:	68fb      	ldr	r3, [r7, #12]
 8017436:	2200      	movs	r2, #0
 8017438:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801743a:	68fb      	ldr	r3, [r7, #12]
 801743c:	2200      	movs	r2, #0
 801743e:	615a      	str	r2, [r3, #20]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8017440:	68fb      	ldr	r3, [r7, #12]
 8017442:	332c      	adds	r3, #44	; 0x2c
 8017444:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8017448:	2100      	movs	r1, #0
 801744a:	4618      	mov	r0, r3
 801744c:	f7fd ff7b 	bl	8015346 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8017450:	79fb      	ldrb	r3, [r7, #7]
 8017452:	f003 0320 	and.w	r3, r3, #32
 8017456:	2b00      	cmp	r3, #0
 8017458:	d06e      	beq.n	8017538 <f_open+0x318>
 801745a:	68fb      	ldr	r3, [r7, #12]
 801745c:	68db      	ldr	r3, [r3, #12]
 801745e:	2b00      	cmp	r3, #0
 8017460:	d06a      	beq.n	8017538 <f_open+0x318>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	68da      	ldr	r2, [r3, #12]
 8017466:	68fb      	ldr	r3, [r7, #12]
 8017468:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801746a:	693b      	ldr	r3, [r7, #16]
 801746c:	895b      	ldrh	r3, [r3, #10]
 801746e:	461a      	mov	r2, r3
 8017470:	693b      	ldr	r3, [r7, #16]
 8017472:	899b      	ldrh	r3, [r3, #12]
 8017474:	fb02 f303 	mul.w	r3, r2, r3
 8017478:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801747a:	68fb      	ldr	r3, [r7, #12]
 801747c:	689b      	ldr	r3, [r3, #8]
 801747e:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8017480:	68fb      	ldr	r3, [r7, #12]
 8017482:	68db      	ldr	r3, [r3, #12]
 8017484:	657b      	str	r3, [r7, #84]	; 0x54
 8017486:	e016      	b.n	80174b6 <f_open+0x296>
					clst = get_fat(&fp->obj, clst);
 8017488:	68fb      	ldr	r3, [r7, #12]
 801748a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801748c:	4618      	mov	r0, r3
 801748e:	f7fe f8b8 	bl	8015602 <get_fat>
 8017492:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8017494:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8017496:	2b01      	cmp	r3, #1
 8017498:	d802      	bhi.n	80174a0 <f_open+0x280>
 801749a:	2302      	movs	r3, #2
 801749c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80174a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80174a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80174a6:	d102      	bne.n	80174ae <f_open+0x28e>
 80174a8:	2301      	movs	r3, #1
 80174aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80174ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80174b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80174b2:	1ad3      	subs	r3, r2, r3
 80174b4:	657b      	str	r3, [r7, #84]	; 0x54
 80174b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d103      	bne.n	80174c6 <f_open+0x2a6>
 80174be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80174c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80174c2:	429a      	cmp	r2, r3
 80174c4:	d8e0      	bhi.n	8017488 <f_open+0x268>
				}
				fp->clust = clst;
 80174c6:	68fb      	ldr	r3, [r7, #12]
 80174c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80174ca:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80174cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d131      	bne.n	8017538 <f_open+0x318>
 80174d4:	693b      	ldr	r3, [r7, #16]
 80174d6:	899b      	ldrh	r3, [r3, #12]
 80174d8:	461a      	mov	r2, r3
 80174da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80174dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80174e0:	fb01 f202 	mul.w	r2, r1, r2
 80174e4:	1a9b      	subs	r3, r3, r2
 80174e6:	2b00      	cmp	r3, #0
 80174e8:	d026      	beq.n	8017538 <f_open+0x318>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80174ea:	693b      	ldr	r3, [r7, #16]
 80174ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80174ee:	4618      	mov	r0, r3
 80174f0:	f7fe f868 	bl	80155c4 <clust2sect>
 80174f4:	6478      	str	r0, [r7, #68]	; 0x44
 80174f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d103      	bne.n	8017504 <f_open+0x2e4>
						res = FR_INT_ERR;
 80174fc:	2302      	movs	r3, #2
 80174fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8017502:	e019      	b.n	8017538 <f_open+0x318>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8017504:	693b      	ldr	r3, [r7, #16]
 8017506:	899b      	ldrh	r3, [r3, #12]
 8017508:	461a      	mov	r2, r3
 801750a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801750c:	fbb3 f2f2 	udiv	r2, r3, r2
 8017510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017512:	441a      	add	r2, r3
 8017514:	68fb      	ldr	r3, [r7, #12]
 8017516:	61da      	str	r2, [r3, #28]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8017518:	693b      	ldr	r3, [r7, #16]
 801751a:	7858      	ldrb	r0, [r3, #1]
 801751c:	68fb      	ldr	r3, [r7, #12]
 801751e:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8017522:	68fb      	ldr	r3, [r7, #12]
 8017524:	69da      	ldr	r2, [r3, #28]
 8017526:	2301      	movs	r3, #1
 8017528:	f7fd fe0c 	bl	8015144 <disk_read>
 801752c:	4603      	mov	r3, r0
 801752e:	2b00      	cmp	r3, #0
 8017530:	d002      	beq.n	8017538 <f_open+0x318>
 8017532:	2301      	movs	r3, #1
 8017534:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8017538:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801753c:	2b00      	cmp	r3, #0
 801753e:	d002      	beq.n	8017546 <f_open+0x326>
 8017540:	68fb      	ldr	r3, [r7, #12]
 8017542:	2200      	movs	r2, #0
 8017544:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8017546:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 801754a:	4618      	mov	r0, r3
 801754c:	3760      	adds	r7, #96	; 0x60
 801754e:	46bd      	mov	sp, r7
 8017550:	bd80      	pop	{r7, pc}

08017552 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8017552:	b580      	push	{r7, lr}
 8017554:	b08c      	sub	sp, #48	; 0x30
 8017556:	af00      	add	r7, sp, #0
 8017558:	60f8      	str	r0, [r7, #12]
 801755a:	60b9      	str	r1, [r7, #8]
 801755c:	607a      	str	r2, [r7, #4]
 801755e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8017560:	68bb      	ldr	r3, [r7, #8]
 8017562:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8017564:	683b      	ldr	r3, [r7, #0]
 8017566:	2200      	movs	r2, #0
 8017568:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801756a:	68fb      	ldr	r3, [r7, #12]
 801756c:	f107 0210 	add.w	r2, r7, #16
 8017570:	4611      	mov	r1, r2
 8017572:	4618      	mov	r0, r3
 8017574:	f7ff fdda 	bl	801712c <validate>
 8017578:	4603      	mov	r3, r0
 801757a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801757e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017582:	2b00      	cmp	r3, #0
 8017584:	d107      	bne.n	8017596 <f_write+0x44>
 8017586:	68fb      	ldr	r3, [r7, #12]
 8017588:	7c5b      	ldrb	r3, [r3, #17]
 801758a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801758e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017592:	2b00      	cmp	r3, #0
 8017594:	d002      	beq.n	801759c <f_write+0x4a>
 8017596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801759a:	e16a      	b.n	8017872 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801759c:	68fb      	ldr	r3, [r7, #12]
 801759e:	7c1b      	ldrb	r3, [r3, #16]
 80175a0:	f003 0302 	and.w	r3, r3, #2
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d101      	bne.n	80175ac <f_write+0x5a>
 80175a8:	2307      	movs	r3, #7
 80175aa:	e162      	b.n	8017872 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80175ac:	68fb      	ldr	r3, [r7, #12]
 80175ae:	695a      	ldr	r2, [r3, #20]
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	441a      	add	r2, r3
 80175b4:	68fb      	ldr	r3, [r7, #12]
 80175b6:	695b      	ldr	r3, [r3, #20]
 80175b8:	429a      	cmp	r2, r3
 80175ba:	f080 814c 	bcs.w	8017856 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80175be:	68fb      	ldr	r3, [r7, #12]
 80175c0:	695b      	ldr	r3, [r3, #20]
 80175c2:	43db      	mvns	r3, r3
 80175c4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80175c6:	e146      	b.n	8017856 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80175c8:	68fb      	ldr	r3, [r7, #12]
 80175ca:	695b      	ldr	r3, [r3, #20]
 80175cc:	693a      	ldr	r2, [r7, #16]
 80175ce:	8992      	ldrh	r2, [r2, #12]
 80175d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80175d4:	fb01 f202 	mul.w	r2, r1, r2
 80175d8:	1a9b      	subs	r3, r3, r2
 80175da:	2b00      	cmp	r3, #0
 80175dc:	f040 80f1 	bne.w	80177c2 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80175e0:	68fb      	ldr	r3, [r7, #12]
 80175e2:	695b      	ldr	r3, [r3, #20]
 80175e4:	693a      	ldr	r2, [r7, #16]
 80175e6:	8992      	ldrh	r2, [r2, #12]
 80175e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80175ec:	693a      	ldr	r2, [r7, #16]
 80175ee:	8952      	ldrh	r2, [r2, #10]
 80175f0:	3a01      	subs	r2, #1
 80175f2:	4013      	ands	r3, r2
 80175f4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80175f6:	69bb      	ldr	r3, [r7, #24]
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d143      	bne.n	8017684 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80175fc:	68fb      	ldr	r3, [r7, #12]
 80175fe:	695b      	ldr	r3, [r3, #20]
 8017600:	2b00      	cmp	r3, #0
 8017602:	d10c      	bne.n	801761e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8017604:	68fb      	ldr	r3, [r7, #12]
 8017606:	689b      	ldr	r3, [r3, #8]
 8017608:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801760a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801760c:	2b00      	cmp	r3, #0
 801760e:	d11a      	bne.n	8017646 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8017610:	68fb      	ldr	r3, [r7, #12]
 8017612:	2100      	movs	r1, #0
 8017614:	4618      	mov	r0, r3
 8017616:	f7fe fa49 	bl	8015aac <create_chain>
 801761a:	62b8      	str	r0, [r7, #40]	; 0x28
 801761c:	e013      	b.n	8017646 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801761e:	68fb      	ldr	r3, [r7, #12]
 8017620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017622:	2b00      	cmp	r3, #0
 8017624:	d007      	beq.n	8017636 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8017626:	68fb      	ldr	r3, [r7, #12]
 8017628:	695b      	ldr	r3, [r3, #20]
 801762a:	4619      	mov	r1, r3
 801762c:	68f8      	ldr	r0, [r7, #12]
 801762e:	f7fe fad5 	bl	8015bdc <clmt_clust>
 8017632:	62b8      	str	r0, [r7, #40]	; 0x28
 8017634:	e007      	b.n	8017646 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8017636:	68fa      	ldr	r2, [r7, #12]
 8017638:	68fb      	ldr	r3, [r7, #12]
 801763a:	699b      	ldr	r3, [r3, #24]
 801763c:	4619      	mov	r1, r3
 801763e:	4610      	mov	r0, r2
 8017640:	f7fe fa34 	bl	8015aac <create_chain>
 8017644:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8017646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017648:	2b00      	cmp	r3, #0
 801764a:	f000 8109 	beq.w	8017860 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801764e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017650:	2b01      	cmp	r3, #1
 8017652:	d104      	bne.n	801765e <f_write+0x10c>
 8017654:	68fb      	ldr	r3, [r7, #12]
 8017656:	2202      	movs	r2, #2
 8017658:	745a      	strb	r2, [r3, #17]
 801765a:	2302      	movs	r3, #2
 801765c:	e109      	b.n	8017872 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801765e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017664:	d104      	bne.n	8017670 <f_write+0x11e>
 8017666:	68fb      	ldr	r3, [r7, #12]
 8017668:	2201      	movs	r2, #1
 801766a:	745a      	strb	r2, [r3, #17]
 801766c:	2301      	movs	r3, #1
 801766e:	e100      	b.n	8017872 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8017670:	68fb      	ldr	r3, [r7, #12]
 8017672:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017674:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8017676:	68fb      	ldr	r3, [r7, #12]
 8017678:	689b      	ldr	r3, [r3, #8]
 801767a:	2b00      	cmp	r3, #0
 801767c:	d102      	bne.n	8017684 <f_write+0x132>
 801767e:	68fb      	ldr	r3, [r7, #12]
 8017680:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017682:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8017684:	68fb      	ldr	r3, [r7, #12]
 8017686:	7c1b      	ldrb	r3, [r3, #16]
 8017688:	b25b      	sxtb	r3, r3
 801768a:	2b00      	cmp	r3, #0
 801768c:	da18      	bge.n	80176c0 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801768e:	693b      	ldr	r3, [r7, #16]
 8017690:	7858      	ldrb	r0, [r3, #1]
 8017692:	68fb      	ldr	r3, [r7, #12]
 8017694:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8017698:	68fb      	ldr	r3, [r7, #12]
 801769a:	69da      	ldr	r2, [r3, #28]
 801769c:	2301      	movs	r3, #1
 801769e:	f7fd fd71 	bl	8015184 <disk_write>
 80176a2:	4603      	mov	r3, r0
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d004      	beq.n	80176b2 <f_write+0x160>
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	2201      	movs	r2, #1
 80176ac:	745a      	strb	r2, [r3, #17]
 80176ae:	2301      	movs	r3, #1
 80176b0:	e0df      	b.n	8017872 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80176b2:	68fb      	ldr	r3, [r7, #12]
 80176b4:	7c1b      	ldrb	r3, [r3, #16]
 80176b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80176ba:	b2da      	uxtb	r2, r3
 80176bc:	68fb      	ldr	r3, [r7, #12]
 80176be:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80176c0:	693a      	ldr	r2, [r7, #16]
 80176c2:	68fb      	ldr	r3, [r7, #12]
 80176c4:	699b      	ldr	r3, [r3, #24]
 80176c6:	4619      	mov	r1, r3
 80176c8:	4610      	mov	r0, r2
 80176ca:	f7fd ff7b 	bl	80155c4 <clust2sect>
 80176ce:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80176d0:	697b      	ldr	r3, [r7, #20]
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	d104      	bne.n	80176e0 <f_write+0x18e>
 80176d6:	68fb      	ldr	r3, [r7, #12]
 80176d8:	2202      	movs	r2, #2
 80176da:	745a      	strb	r2, [r3, #17]
 80176dc:	2302      	movs	r3, #2
 80176de:	e0c8      	b.n	8017872 <f_write+0x320>
			sect += csect;
 80176e0:	697a      	ldr	r2, [r7, #20]
 80176e2:	69bb      	ldr	r3, [r7, #24]
 80176e4:	4413      	add	r3, r2
 80176e6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80176e8:	693b      	ldr	r3, [r7, #16]
 80176ea:	899b      	ldrh	r3, [r3, #12]
 80176ec:	461a      	mov	r2, r3
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80176f4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80176f6:	6a3b      	ldr	r3, [r7, #32]
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d043      	beq.n	8017784 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80176fc:	69ba      	ldr	r2, [r7, #24]
 80176fe:	6a3b      	ldr	r3, [r7, #32]
 8017700:	4413      	add	r3, r2
 8017702:	693a      	ldr	r2, [r7, #16]
 8017704:	8952      	ldrh	r2, [r2, #10]
 8017706:	4293      	cmp	r3, r2
 8017708:	d905      	bls.n	8017716 <f_write+0x1c4>
					cc = fs->csize - csect;
 801770a:	693b      	ldr	r3, [r7, #16]
 801770c:	895b      	ldrh	r3, [r3, #10]
 801770e:	461a      	mov	r2, r3
 8017710:	69bb      	ldr	r3, [r7, #24]
 8017712:	1ad3      	subs	r3, r2, r3
 8017714:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8017716:	693b      	ldr	r3, [r7, #16]
 8017718:	7858      	ldrb	r0, [r3, #1]
 801771a:	6a3b      	ldr	r3, [r7, #32]
 801771c:	697a      	ldr	r2, [r7, #20]
 801771e:	69f9      	ldr	r1, [r7, #28]
 8017720:	f7fd fd30 	bl	8015184 <disk_write>
 8017724:	4603      	mov	r3, r0
 8017726:	2b00      	cmp	r3, #0
 8017728:	d004      	beq.n	8017734 <f_write+0x1e2>
 801772a:	68fb      	ldr	r3, [r7, #12]
 801772c:	2201      	movs	r2, #1
 801772e:	745a      	strb	r2, [r3, #17]
 8017730:	2301      	movs	r3, #1
 8017732:	e09e      	b.n	8017872 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8017734:	68fb      	ldr	r3, [r7, #12]
 8017736:	69da      	ldr	r2, [r3, #28]
 8017738:	697b      	ldr	r3, [r7, #20]
 801773a:	1ad3      	subs	r3, r2, r3
 801773c:	6a3a      	ldr	r2, [r7, #32]
 801773e:	429a      	cmp	r2, r3
 8017740:	d918      	bls.n	8017774 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8017742:	68fb      	ldr	r3, [r7, #12]
 8017744:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8017748:	68fb      	ldr	r3, [r7, #12]
 801774a:	69da      	ldr	r2, [r3, #28]
 801774c:	697b      	ldr	r3, [r7, #20]
 801774e:	1ad3      	subs	r3, r2, r3
 8017750:	693a      	ldr	r2, [r7, #16]
 8017752:	8992      	ldrh	r2, [r2, #12]
 8017754:	fb02 f303 	mul.w	r3, r2, r3
 8017758:	69fa      	ldr	r2, [r7, #28]
 801775a:	18d1      	adds	r1, r2, r3
 801775c:	693b      	ldr	r3, [r7, #16]
 801775e:	899b      	ldrh	r3, [r3, #12]
 8017760:	461a      	mov	r2, r3
 8017762:	f7fd fdcf 	bl	8015304 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8017766:	68fb      	ldr	r3, [r7, #12]
 8017768:	7c1b      	ldrb	r3, [r3, #16]
 801776a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801776e:	b2da      	uxtb	r2, r3
 8017770:	68fb      	ldr	r3, [r7, #12]
 8017772:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8017774:	693b      	ldr	r3, [r7, #16]
 8017776:	899b      	ldrh	r3, [r3, #12]
 8017778:	461a      	mov	r2, r3
 801777a:	6a3b      	ldr	r3, [r7, #32]
 801777c:	fb02 f303 	mul.w	r3, r2, r3
 8017780:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8017782:	e04b      	b.n	801781c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8017784:	68fb      	ldr	r3, [r7, #12]
 8017786:	69db      	ldr	r3, [r3, #28]
 8017788:	697a      	ldr	r2, [r7, #20]
 801778a:	429a      	cmp	r2, r3
 801778c:	d016      	beq.n	80177bc <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	695a      	ldr	r2, [r3, #20]
 8017792:	68fb      	ldr	r3, [r7, #12]
 8017794:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8017796:	429a      	cmp	r2, r3
 8017798:	d210      	bcs.n	80177bc <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801779a:	693b      	ldr	r3, [r7, #16]
 801779c:	7858      	ldrb	r0, [r3, #1]
 801779e:	68fb      	ldr	r3, [r7, #12]
 80177a0:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80177a4:	2301      	movs	r3, #1
 80177a6:	697a      	ldr	r2, [r7, #20]
 80177a8:	f7fd fccc 	bl	8015144 <disk_read>
 80177ac:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80177ae:	2b00      	cmp	r3, #0
 80177b0:	d004      	beq.n	80177bc <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80177b2:	68fb      	ldr	r3, [r7, #12]
 80177b4:	2201      	movs	r2, #1
 80177b6:	745a      	strb	r2, [r3, #17]
 80177b8:	2301      	movs	r3, #1
 80177ba:	e05a      	b.n	8017872 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80177bc:	68fb      	ldr	r3, [r7, #12]
 80177be:	697a      	ldr	r2, [r7, #20]
 80177c0:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80177c2:	693b      	ldr	r3, [r7, #16]
 80177c4:	899b      	ldrh	r3, [r3, #12]
 80177c6:	4618      	mov	r0, r3
 80177c8:	68fb      	ldr	r3, [r7, #12]
 80177ca:	695b      	ldr	r3, [r3, #20]
 80177cc:	693a      	ldr	r2, [r7, #16]
 80177ce:	8992      	ldrh	r2, [r2, #12]
 80177d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80177d4:	fb01 f202 	mul.w	r2, r1, r2
 80177d8:	1a9b      	subs	r3, r3, r2
 80177da:	1ac3      	subs	r3, r0, r3
 80177dc:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80177de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	429a      	cmp	r2, r3
 80177e4:	d901      	bls.n	80177ea <f_write+0x298>
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80177ea:	68fb      	ldr	r3, [r7, #12]
 80177ec:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80177f0:	68fb      	ldr	r3, [r7, #12]
 80177f2:	695b      	ldr	r3, [r3, #20]
 80177f4:	693a      	ldr	r2, [r7, #16]
 80177f6:	8992      	ldrh	r2, [r2, #12]
 80177f8:	fbb3 f0f2 	udiv	r0, r3, r2
 80177fc:	fb00 f202 	mul.w	r2, r0, r2
 8017800:	1a9b      	subs	r3, r3, r2
 8017802:	440b      	add	r3, r1
 8017804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017806:	69f9      	ldr	r1, [r7, #28]
 8017808:	4618      	mov	r0, r3
 801780a:	f7fd fd7b 	bl	8015304 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801780e:	68fb      	ldr	r3, [r7, #12]
 8017810:	7c1b      	ldrb	r3, [r3, #16]
 8017812:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8017816:	b2da      	uxtb	r2, r3
 8017818:	68fb      	ldr	r3, [r7, #12]
 801781a:	741a      	strb	r2, [r3, #16]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801781c:	69fa      	ldr	r2, [r7, #28]
 801781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017820:	4413      	add	r3, r2
 8017822:	61fb      	str	r3, [r7, #28]
 8017824:	68fb      	ldr	r3, [r7, #12]
 8017826:	695a      	ldr	r2, [r3, #20]
 8017828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801782a:	441a      	add	r2, r3
 801782c:	68fb      	ldr	r3, [r7, #12]
 801782e:	615a      	str	r2, [r3, #20]
 8017830:	68fb      	ldr	r3, [r7, #12]
 8017832:	68da      	ldr	r2, [r3, #12]
 8017834:	68fb      	ldr	r3, [r7, #12]
 8017836:	695b      	ldr	r3, [r3, #20]
 8017838:	429a      	cmp	r2, r3
 801783a:	bf38      	it	cc
 801783c:	461a      	movcc	r2, r3
 801783e:	68fb      	ldr	r3, [r7, #12]
 8017840:	60da      	str	r2, [r3, #12]
 8017842:	683b      	ldr	r3, [r7, #0]
 8017844:	681a      	ldr	r2, [r3, #0]
 8017846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017848:	441a      	add	r2, r3
 801784a:	683b      	ldr	r3, [r7, #0]
 801784c:	601a      	str	r2, [r3, #0]
 801784e:	687a      	ldr	r2, [r7, #4]
 8017850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017852:	1ad3      	subs	r3, r2, r3
 8017854:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8017856:	687b      	ldr	r3, [r7, #4]
 8017858:	2b00      	cmp	r3, #0
 801785a:	f47f aeb5 	bne.w	80175c8 <f_write+0x76>
 801785e:	e000      	b.n	8017862 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8017860:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8017862:	68fb      	ldr	r3, [r7, #12]
 8017864:	7c1b      	ldrb	r3, [r3, #16]
 8017866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801786a:	b2da      	uxtb	r2, r3
 801786c:	68fb      	ldr	r3, [r7, #12]
 801786e:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 8017870:	2300      	movs	r3, #0
}
 8017872:	4618      	mov	r0, r3
 8017874:	3730      	adds	r7, #48	; 0x30
 8017876:	46bd      	mov	sp, r7
 8017878:	bd80      	pop	{r7, pc}

0801787a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801787a:	b580      	push	{r7, lr}
 801787c:	b086      	sub	sp, #24
 801787e:	af00      	add	r7, sp, #0
 8017880:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	f107 0208 	add.w	r2, r7, #8
 8017888:	4611      	mov	r1, r2
 801788a:	4618      	mov	r0, r3
 801788c:	f7ff fc4e 	bl	801712c <validate>
 8017890:	4603      	mov	r3, r0
 8017892:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017894:	7dfb      	ldrb	r3, [r7, #23]
 8017896:	2b00      	cmp	r3, #0
 8017898:	d168      	bne.n	801796c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	7c1b      	ldrb	r3, [r3, #16]
 801789e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d062      	beq.n	801796c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	7c1b      	ldrb	r3, [r3, #16]
 80178aa:	b25b      	sxtb	r3, r3
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	da15      	bge.n	80178dc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80178b0:	68bb      	ldr	r3, [r7, #8]
 80178b2:	7858      	ldrb	r0, [r3, #1]
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	69da      	ldr	r2, [r3, #28]
 80178be:	2301      	movs	r3, #1
 80178c0:	f7fd fc60 	bl	8015184 <disk_write>
 80178c4:	4603      	mov	r3, r0
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	d001      	beq.n	80178ce <f_sync+0x54>
 80178ca:	2301      	movs	r3, #1
 80178cc:	e04f      	b.n	801796e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	7c1b      	ldrb	r3, [r3, #16]
 80178d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80178d6:	b2da      	uxtb	r2, r3
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80178dc:	f7f9 feec 	bl	80116b8 <get_fattime>
 80178e0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80178e2:	68ba      	ldr	r2, [r7, #8]
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	6a1b      	ldr	r3, [r3, #32]
 80178e8:	4619      	mov	r1, r3
 80178ea:	4610      	mov	r0, r2
 80178ec:	f7fd fdcc 	bl	8015488 <move_window>
 80178f0:	4603      	mov	r3, r0
 80178f2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80178f4:	7dfb      	ldrb	r3, [r7, #23]
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	d138      	bne.n	801796c <f_sync+0xf2>
					dir = fp->dir_ptr;
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178fe:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8017900:	68fb      	ldr	r3, [r7, #12]
 8017902:	330b      	adds	r3, #11
 8017904:	781a      	ldrb	r2, [r3, #0]
 8017906:	68fb      	ldr	r3, [r7, #12]
 8017908:	330b      	adds	r3, #11
 801790a:	f042 0220 	orr.w	r2, r2, #32
 801790e:	b2d2      	uxtb	r2, r2
 8017910:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8017912:	687b      	ldr	r3, [r7, #4]
 8017914:	6818      	ldr	r0, [r3, #0]
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	689b      	ldr	r3, [r3, #8]
 801791a:	461a      	mov	r2, r3
 801791c:	68f9      	ldr	r1, [r7, #12]
 801791e:	f7fe fb5a 	bl	8015fd6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8017922:	68fb      	ldr	r3, [r7, #12]
 8017924:	f103 021c 	add.w	r2, r3, #28
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	68db      	ldr	r3, [r3, #12]
 801792c:	4619      	mov	r1, r3
 801792e:	4610      	mov	r0, r2
 8017930:	f7fd fcbc 	bl	80152ac <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8017934:	68fb      	ldr	r3, [r7, #12]
 8017936:	3316      	adds	r3, #22
 8017938:	6939      	ldr	r1, [r7, #16]
 801793a:	4618      	mov	r0, r3
 801793c:	f7fd fcb6 	bl	80152ac <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8017940:	68fb      	ldr	r3, [r7, #12]
 8017942:	3312      	adds	r3, #18
 8017944:	2100      	movs	r1, #0
 8017946:	4618      	mov	r0, r3
 8017948:	f7fd fc95 	bl	8015276 <st_word>
					fs->wflag = 1;
 801794c:	68bb      	ldr	r3, [r7, #8]
 801794e:	2201      	movs	r2, #1
 8017950:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8017952:	68bb      	ldr	r3, [r7, #8]
 8017954:	4618      	mov	r0, r3
 8017956:	f7fd fdc5 	bl	80154e4 <sync_fs>
 801795a:	4603      	mov	r3, r0
 801795c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	7c1b      	ldrb	r3, [r3, #16]
 8017962:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017966:	b2da      	uxtb	r2, r3
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801796c:	7dfb      	ldrb	r3, [r7, #23]
}
 801796e:	4618      	mov	r0, r3
 8017970:	3718      	adds	r7, #24
 8017972:	46bd      	mov	sp, r7
 8017974:	bd80      	pop	{r7, pc}

08017976 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8017976:	b580      	push	{r7, lr}
 8017978:	b084      	sub	sp, #16
 801797a:	af00      	add	r7, sp, #0
 801797c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801797e:	6878      	ldr	r0, [r7, #4]
 8017980:	f7ff ff7b 	bl	801787a <f_sync>
 8017984:	4603      	mov	r3, r0
 8017986:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8017988:	7bfb      	ldrb	r3, [r7, #15]
 801798a:	2b00      	cmp	r3, #0
 801798c:	d10e      	bne.n	80179ac <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	f107 0208 	add.w	r2, r7, #8
 8017994:	4611      	mov	r1, r2
 8017996:	4618      	mov	r0, r3
 8017998:	f7ff fbc8 	bl	801712c <validate>
 801799c:	4603      	mov	r3, r0
 801799e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80179a0:	7bfb      	ldrb	r3, [r7, #15]
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	d102      	bne.n	80179ac <f_close+0x36>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	2200      	movs	r2, #0
 80179aa:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80179ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80179ae:	4618      	mov	r0, r3
 80179b0:	3710      	adds	r7, #16
 80179b2:	46bd      	mov	sp, r7
 80179b4:	bd80      	pop	{r7, pc}

080179b6 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80179b6:	b580      	push	{r7, lr}
 80179b8:	b086      	sub	sp, #24
 80179ba:	af00      	add	r7, sp, #0
 80179bc:	6078      	str	r0, [r7, #4]
 80179be:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	2b00      	cmp	r3, #0
 80179c4:	d101      	bne.n	80179ca <f_opendir+0x14>
 80179c6:	2309      	movs	r3, #9
 80179c8:	e04c      	b.n	8017a64 <f_opendir+0xae>

	/* Get logical drive */
	obj = &dp->obj;
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80179ce:	f107 010c 	add.w	r1, r7, #12
 80179d2:	463b      	mov	r3, r7
 80179d4:	2200      	movs	r2, #0
 80179d6:	4618      	mov	r0, r3
 80179d8:	f7ff f926 	bl	8016c28 <find_volume>
 80179dc:	4603      	mov	r3, r0
 80179de:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80179e0:	7dfb      	ldrb	r3, [r7, #23]
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d137      	bne.n	8017a56 <f_opendir+0xa0>
		obj->fs = fs;
 80179e6:	68fa      	ldr	r2, [r7, #12]
 80179e8:	693b      	ldr	r3, [r7, #16]
 80179ea:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80179ec:	683b      	ldr	r3, [r7, #0]
 80179ee:	4619      	mov	r1, r3
 80179f0:	6878      	ldr	r0, [r7, #4]
 80179f2:	f7ff f809 	bl	8016a08 <follow_path>
 80179f6:	4603      	mov	r3, r0
 80179f8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80179fa:	7dfb      	ldrb	r3, [r7, #23]
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d125      	bne.n	8017a4c <f_opendir+0x96>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8017a06:	b25b      	sxtb	r3, r3
 8017a08:	2b00      	cmp	r3, #0
 8017a0a:	db12      	blt.n	8017a32 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8017a0c:	693b      	ldr	r3, [r7, #16]
 8017a0e:	799b      	ldrb	r3, [r3, #6]
 8017a10:	f003 0310 	and.w	r3, r3, #16
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d00a      	beq.n	8017a2e <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8017a18:	68fa      	ldr	r2, [r7, #12]
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	69db      	ldr	r3, [r3, #28]
 8017a1e:	4619      	mov	r1, r3
 8017a20:	4610      	mov	r0, r2
 8017a22:	f7fe fab9 	bl	8015f98 <ld_clust>
 8017a26:	4602      	mov	r2, r0
 8017a28:	693b      	ldr	r3, [r7, #16]
 8017a2a:	609a      	str	r2, [r3, #8]
 8017a2c:	e001      	b.n	8017a32 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8017a2e:	2305      	movs	r3, #5
 8017a30:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8017a32:	7dfb      	ldrb	r3, [r7, #23]
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	d109      	bne.n	8017a4c <f_opendir+0x96>
				obj->id = fs->id;
 8017a38:	68fb      	ldr	r3, [r7, #12]
 8017a3a:	88da      	ldrh	r2, [r3, #6]
 8017a3c:	693b      	ldr	r3, [r7, #16]
 8017a3e:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8017a40:	2100      	movs	r1, #0
 8017a42:	6878      	ldr	r0, [r7, #4]
 8017a44:	f7fe f902 	bl	8015c4c <dir_sdi>
 8017a48:	4603      	mov	r3, r0
 8017a4a:	75fb      	strb	r3, [r7, #23]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8017a4c:	7dfb      	ldrb	r3, [r7, #23]
 8017a4e:	2b04      	cmp	r3, #4
 8017a50:	d101      	bne.n	8017a56 <f_opendir+0xa0>
 8017a52:	2305      	movs	r3, #5
 8017a54:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8017a56:	7dfb      	ldrb	r3, [r7, #23]
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	d002      	beq.n	8017a62 <f_opendir+0xac>
 8017a5c:	693b      	ldr	r3, [r7, #16]
 8017a5e:	2200      	movs	r2, #0
 8017a60:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8017a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8017a64:	4618      	mov	r0, r3
 8017a66:	3718      	adds	r7, #24
 8017a68:	46bd      	mov	sp, r7
 8017a6a:	bd80      	pop	{r7, pc}

08017a6c <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8017a6c:	b580      	push	{r7, lr}
 8017a6e:	b084      	sub	sp, #16
 8017a70:	af00      	add	r7, sp, #0
 8017a72:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	f107 0208 	add.w	r2, r7, #8
 8017a7a:	4611      	mov	r1, r2
 8017a7c:	4618      	mov	r0, r3
 8017a7e:	f7ff fb55 	bl	801712c <validate>
 8017a82:	4603      	mov	r3, r0
 8017a84:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8017a86:	7bfb      	ldrb	r3, [r7, #15]
 8017a88:	2b00      	cmp	r3, #0
 8017a8a:	d102      	bne.n	8017a92 <f_closedir+0x26>
			res = dec_lock(dp->obj.lockid);
		}
		if (res == FR_OK)
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	2200      	movs	r2, #0
 8017a90:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8017a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8017a94:	4618      	mov	r0, r3
 8017a96:	3710      	adds	r7, #16
 8017a98:	46bd      	mov	sp, r7
 8017a9a:	bd80      	pop	{r7, pc}

08017a9c <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8017a9c:	b580      	push	{r7, lr}
 8017a9e:	b096      	sub	sp, #88	; 0x58
 8017aa0:	af00      	add	r7, sp, #0
 8017aa2:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8017aa4:	f107 0108 	add.w	r1, r7, #8
 8017aa8:	1d3b      	adds	r3, r7, #4
 8017aaa:	2202      	movs	r2, #2
 8017aac:	4618      	mov	r0, r3
 8017aae:	f7ff f8bb 	bl	8016c28 <find_volume>
 8017ab2:	4603      	mov	r3, r0
 8017ab4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8017ab8:	68bb      	ldr	r3, [r7, #8]
 8017aba:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8017abc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	f040 80f2 	bne.w	8017caa <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8017ac6:	687a      	ldr	r2, [r7, #4]
 8017ac8:	f107 030c 	add.w	r3, r7, #12
 8017acc:	4611      	mov	r1, r2
 8017ace:	4618      	mov	r0, r3
 8017ad0:	f7fe ff9a 	bl	8016a08 <follow_path>
 8017ad4:	4603      	mov	r3, r0
 8017ad6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8017ada:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017ade:	2b00      	cmp	r3, #0
 8017ae0:	d102      	bne.n	8017ae8 <f_mkdir+0x4c>
 8017ae2:	2308      	movs	r3, #8
 8017ae4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8017ae8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017aec:	2b04      	cmp	r3, #4
 8017aee:	f040 80dc 	bne.w	8017caa <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8017af2:	f107 030c 	add.w	r3, r7, #12
 8017af6:	2100      	movs	r1, #0
 8017af8:	4618      	mov	r0, r3
 8017afa:	f7fd ffd7 	bl	8015aac <create_chain>
 8017afe:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8017b00:	68bb      	ldr	r3, [r7, #8]
 8017b02:	895b      	ldrh	r3, [r3, #10]
 8017b04:	461a      	mov	r2, r3
 8017b06:	68bb      	ldr	r3, [r7, #8]
 8017b08:	899b      	ldrh	r3, [r3, #12]
 8017b0a:	fb02 f303 	mul.w	r3, r2, r3
 8017b0e:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8017b10:	2300      	movs	r3, #0
 8017b12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8017b16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	d102      	bne.n	8017b22 <f_mkdir+0x86>
 8017b1c:	2307      	movs	r3, #7
 8017b1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8017b22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017b24:	2b01      	cmp	r3, #1
 8017b26:	d102      	bne.n	8017b2e <f_mkdir+0x92>
 8017b28:	2302      	movs	r3, #2
 8017b2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8017b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b34:	d102      	bne.n	8017b3c <f_mkdir+0xa0>
 8017b36:	2301      	movs	r3, #1
 8017b38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8017b3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d106      	bne.n	8017b52 <f_mkdir+0xb6>
 8017b44:	68bb      	ldr	r3, [r7, #8]
 8017b46:	4618      	mov	r0, r3
 8017b48:	f7fd fc5a 	bl	8015400 <sync_window>
 8017b4c:	4603      	mov	r3, r0
 8017b4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8017b52:	f7f9 fdb1 	bl	80116b8 <get_fattime>
 8017b56:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8017b58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d16c      	bne.n	8017c3a <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 8017b60:	68bb      	ldr	r3, [r7, #8]
 8017b62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8017b64:	4618      	mov	r0, r3
 8017b66:	f7fd fd2d 	bl	80155c4 <clust2sect>
 8017b6a:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8017b6c:	68bb      	ldr	r3, [r7, #8]
 8017b6e:	3338      	adds	r3, #56	; 0x38
 8017b70:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8017b72:	68bb      	ldr	r3, [r7, #8]
 8017b74:	899b      	ldrh	r3, [r3, #12]
 8017b76:	461a      	mov	r2, r3
 8017b78:	2100      	movs	r1, #0
 8017b7a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8017b7c:	f7fd fbe3 	bl	8015346 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8017b80:	220b      	movs	r2, #11
 8017b82:	2120      	movs	r1, #32
 8017b84:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8017b86:	f7fd fbde 	bl	8015346 <mem_set>
					dir[DIR_Name] = '.';
 8017b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b8c:	222e      	movs	r2, #46	; 0x2e
 8017b8e:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8017b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b92:	330b      	adds	r3, #11
 8017b94:	2210      	movs	r2, #16
 8017b96:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8017b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017b9a:	3316      	adds	r3, #22
 8017b9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017b9e:	4618      	mov	r0, r3
 8017ba0:	f7fd fb84 	bl	80152ac <st_dword>
					st_clust(fs, dir, dcl);
 8017ba4:	68bb      	ldr	r3, [r7, #8]
 8017ba6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017ba8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017baa:	4618      	mov	r0, r3
 8017bac:	f7fe fa13 	bl	8015fd6 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8017bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017bb2:	3320      	adds	r3, #32
 8017bb4:	2220      	movs	r2, #32
 8017bb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017bb8:	4618      	mov	r0, r3
 8017bba:	f7fd fba3 	bl	8015304 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8017bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017bc0:	3321      	adds	r3, #33	; 0x21
 8017bc2:	222e      	movs	r2, #46	; 0x2e
 8017bc4:	701a      	strb	r2, [r3, #0]
 8017bc6:	697b      	ldr	r3, [r7, #20]
 8017bc8:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8017bca:	68bb      	ldr	r3, [r7, #8]
 8017bcc:	781b      	ldrb	r3, [r3, #0]
 8017bce:	2b03      	cmp	r3, #3
 8017bd0:	d106      	bne.n	8017be0 <f_mkdir+0x144>
 8017bd2:	68bb      	ldr	r3, [r7, #8]
 8017bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017bd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017bd8:	429a      	cmp	r2, r3
 8017bda:	d101      	bne.n	8017be0 <f_mkdir+0x144>
 8017bdc:	2300      	movs	r3, #0
 8017bde:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8017be0:	68b8      	ldr	r0, [r7, #8]
 8017be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017be4:	3320      	adds	r3, #32
 8017be6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017be8:	4619      	mov	r1, r3
 8017bea:	f7fe f9f4 	bl	8015fd6 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8017bee:	68bb      	ldr	r3, [r7, #8]
 8017bf0:	895b      	ldrh	r3, [r3, #10]
 8017bf2:	653b      	str	r3, [r7, #80]	; 0x50
 8017bf4:	e01c      	b.n	8017c30 <f_mkdir+0x194>
					fs->winsect = dsc++;
 8017bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017bf8:	1c5a      	adds	r2, r3, #1
 8017bfa:	64fa      	str	r2, [r7, #76]	; 0x4c
 8017bfc:	68ba      	ldr	r2, [r7, #8]
 8017bfe:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8017c00:	68bb      	ldr	r3, [r7, #8]
 8017c02:	2201      	movs	r2, #1
 8017c04:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8017c06:	68bb      	ldr	r3, [r7, #8]
 8017c08:	4618      	mov	r0, r3
 8017c0a:	f7fd fbf9 	bl	8015400 <sync_window>
 8017c0e:	4603      	mov	r3, r0
 8017c10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8017c14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	d10d      	bne.n	8017c38 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 8017c1c:	68bb      	ldr	r3, [r7, #8]
 8017c1e:	899b      	ldrh	r3, [r3, #12]
 8017c20:	461a      	mov	r2, r3
 8017c22:	2100      	movs	r1, #0
 8017c24:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8017c26:	f7fd fb8e 	bl	8015346 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8017c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017c2c:	3b01      	subs	r3, #1
 8017c2e:	653b      	str	r3, [r7, #80]	; 0x50
 8017c30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017c32:	2b00      	cmp	r3, #0
 8017c34:	d1df      	bne.n	8017bf6 <f_mkdir+0x15a>
 8017c36:	e000      	b.n	8017c3a <f_mkdir+0x19e>
					if (res != FR_OK) break;
 8017c38:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8017c3a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d107      	bne.n	8017c52 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8017c42:	f107 030c 	add.w	r3, r7, #12
 8017c46:	4618      	mov	r0, r3
 8017c48:	f7fe fc2e 	bl	80164a8 <dir_register>
 8017c4c:	4603      	mov	r3, r0
 8017c4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8017c52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	d120      	bne.n	8017c9c <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8017c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8017c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017c60:	3316      	adds	r3, #22
 8017c62:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017c64:	4618      	mov	r0, r3
 8017c66:	f7fd fb21 	bl	80152ac <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8017c6a:	68bb      	ldr	r3, [r7, #8]
 8017c6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017c6e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017c70:	4618      	mov	r0, r3
 8017c72:	f7fe f9b0 	bl	8015fd6 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8017c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017c78:	330b      	adds	r3, #11
 8017c7a:	2210      	movs	r2, #16
 8017c7c:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8017c7e:	68bb      	ldr	r3, [r7, #8]
 8017c80:	2201      	movs	r2, #1
 8017c82:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8017c84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d10e      	bne.n	8017caa <f_mkdir+0x20e>
					res = sync_fs(fs);
 8017c8c:	68bb      	ldr	r3, [r7, #8]
 8017c8e:	4618      	mov	r0, r3
 8017c90:	f7fd fc28 	bl	80154e4 <sync_fs>
 8017c94:	4603      	mov	r3, r0
 8017c96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8017c9a:	e006      	b.n	8017caa <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8017c9c:	f107 030c 	add.w	r3, r7, #12
 8017ca0:	2200      	movs	r2, #0
 8017ca2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8017ca4:	4618      	mov	r0, r3
 8017ca6:	f7fd fe9c 	bl	80159e2 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8017caa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8017cae:	4618      	mov	r0, r3
 8017cb0:	3758      	adds	r7, #88	; 0x58
 8017cb2:	46bd      	mov	sp, r7
 8017cb4:	bd80      	pop	{r7, pc}
	...

08017cb8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8017cb8:	b480      	push	{r7}
 8017cba:	b087      	sub	sp, #28
 8017cbc:	af00      	add	r7, sp, #0
 8017cbe:	60f8      	str	r0, [r7, #12]
 8017cc0:	60b9      	str	r1, [r7, #8]
 8017cc2:	4613      	mov	r3, r2
 8017cc4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8017cc6:	2301      	movs	r3, #1
 8017cc8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8017cca:	2300      	movs	r3, #0
 8017ccc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8017cce:	4b1f      	ldr	r3, [pc, #124]	; (8017d4c <FATFS_LinkDriverEx+0x94>)
 8017cd0:	7a5b      	ldrb	r3, [r3, #9]
 8017cd2:	b2db      	uxtb	r3, r3
 8017cd4:	2b00      	cmp	r3, #0
 8017cd6:	d131      	bne.n	8017d3c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8017cd8:	4b1c      	ldr	r3, [pc, #112]	; (8017d4c <FATFS_LinkDriverEx+0x94>)
 8017cda:	7a5b      	ldrb	r3, [r3, #9]
 8017cdc:	b2db      	uxtb	r3, r3
 8017cde:	461a      	mov	r2, r3
 8017ce0:	4b1a      	ldr	r3, [pc, #104]	; (8017d4c <FATFS_LinkDriverEx+0x94>)
 8017ce2:	2100      	movs	r1, #0
 8017ce4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8017ce6:	4b19      	ldr	r3, [pc, #100]	; (8017d4c <FATFS_LinkDriverEx+0x94>)
 8017ce8:	7a5b      	ldrb	r3, [r3, #9]
 8017cea:	b2db      	uxtb	r3, r3
 8017cec:	4a17      	ldr	r2, [pc, #92]	; (8017d4c <FATFS_LinkDriverEx+0x94>)
 8017cee:	009b      	lsls	r3, r3, #2
 8017cf0:	4413      	add	r3, r2
 8017cf2:	68fa      	ldr	r2, [r7, #12]
 8017cf4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8017cf6:	4b15      	ldr	r3, [pc, #84]	; (8017d4c <FATFS_LinkDriverEx+0x94>)
 8017cf8:	7a5b      	ldrb	r3, [r3, #9]
 8017cfa:	b2db      	uxtb	r3, r3
 8017cfc:	461a      	mov	r2, r3
 8017cfe:	4b13      	ldr	r3, [pc, #76]	; (8017d4c <FATFS_LinkDriverEx+0x94>)
 8017d00:	4413      	add	r3, r2
 8017d02:	79fa      	ldrb	r2, [r7, #7]
 8017d04:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8017d06:	4b11      	ldr	r3, [pc, #68]	; (8017d4c <FATFS_LinkDriverEx+0x94>)
 8017d08:	7a5b      	ldrb	r3, [r3, #9]
 8017d0a:	b2db      	uxtb	r3, r3
 8017d0c:	1c5a      	adds	r2, r3, #1
 8017d0e:	b2d1      	uxtb	r1, r2
 8017d10:	4a0e      	ldr	r2, [pc, #56]	; (8017d4c <FATFS_LinkDriverEx+0x94>)
 8017d12:	7251      	strb	r1, [r2, #9]
 8017d14:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8017d16:	7dbb      	ldrb	r3, [r7, #22]
 8017d18:	3330      	adds	r3, #48	; 0x30
 8017d1a:	b2da      	uxtb	r2, r3
 8017d1c:	68bb      	ldr	r3, [r7, #8]
 8017d1e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8017d20:	68bb      	ldr	r3, [r7, #8]
 8017d22:	3301      	adds	r3, #1
 8017d24:	223a      	movs	r2, #58	; 0x3a
 8017d26:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8017d28:	68bb      	ldr	r3, [r7, #8]
 8017d2a:	3302      	adds	r3, #2
 8017d2c:	222f      	movs	r2, #47	; 0x2f
 8017d2e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8017d30:	68bb      	ldr	r3, [r7, #8]
 8017d32:	3303      	adds	r3, #3
 8017d34:	2200      	movs	r2, #0
 8017d36:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8017d38:	2300      	movs	r3, #0
 8017d3a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8017d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8017d3e:	4618      	mov	r0, r3
 8017d40:	371c      	adds	r7, #28
 8017d42:	46bd      	mov	sp, r7
 8017d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d48:	4770      	bx	lr
 8017d4a:	bf00      	nop
 8017d4c:	200129c4 	.word	0x200129c4

08017d50 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8017d50:	b580      	push	{r7, lr}
 8017d52:	b082      	sub	sp, #8
 8017d54:	af00      	add	r7, sp, #0
 8017d56:	6078      	str	r0, [r7, #4]
 8017d58:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8017d5a:	2200      	movs	r2, #0
 8017d5c:	6839      	ldr	r1, [r7, #0]
 8017d5e:	6878      	ldr	r0, [r7, #4]
 8017d60:	f7ff ffaa 	bl	8017cb8 <FATFS_LinkDriverEx>
 8017d64:	4603      	mov	r3, r0
}
 8017d66:	4618      	mov	r0, r3
 8017d68:	3708      	adds	r7, #8
 8017d6a:	46bd      	mov	sp, r7
 8017d6c:	bd80      	pop	{r7, pc}
	...

08017d70 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8017d70:	b480      	push	{r7}
 8017d72:	b085      	sub	sp, #20
 8017d74:	af00      	add	r7, sp, #0
 8017d76:	4603      	mov	r3, r0
 8017d78:	6039      	str	r1, [r7, #0]
 8017d7a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8017d7c:	88fb      	ldrh	r3, [r7, #6]
 8017d7e:	2b7f      	cmp	r3, #127	; 0x7f
 8017d80:	d802      	bhi.n	8017d88 <ff_convert+0x18>
		c = chr;
 8017d82:	88fb      	ldrh	r3, [r7, #6]
 8017d84:	81fb      	strh	r3, [r7, #14]
 8017d86:	e025      	b.n	8017dd4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8017d88:	683b      	ldr	r3, [r7, #0]
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	d00b      	beq.n	8017da6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8017d8e:	88fb      	ldrh	r3, [r7, #6]
 8017d90:	2bff      	cmp	r3, #255	; 0xff
 8017d92:	d805      	bhi.n	8017da0 <ff_convert+0x30>
 8017d94:	88fb      	ldrh	r3, [r7, #6]
 8017d96:	3b80      	subs	r3, #128	; 0x80
 8017d98:	4a12      	ldr	r2, [pc, #72]	; (8017de4 <ff_convert+0x74>)
 8017d9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017d9e:	e000      	b.n	8017da2 <ff_convert+0x32>
 8017da0:	2300      	movs	r3, #0
 8017da2:	81fb      	strh	r3, [r7, #14]
 8017da4:	e016      	b.n	8017dd4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8017da6:	2300      	movs	r3, #0
 8017da8:	81fb      	strh	r3, [r7, #14]
 8017daa:	e009      	b.n	8017dc0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8017dac:	89fb      	ldrh	r3, [r7, #14]
 8017dae:	4a0d      	ldr	r2, [pc, #52]	; (8017de4 <ff_convert+0x74>)
 8017db0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017db4:	88fa      	ldrh	r2, [r7, #6]
 8017db6:	429a      	cmp	r2, r3
 8017db8:	d006      	beq.n	8017dc8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8017dba:	89fb      	ldrh	r3, [r7, #14]
 8017dbc:	3301      	adds	r3, #1
 8017dbe:	81fb      	strh	r3, [r7, #14]
 8017dc0:	89fb      	ldrh	r3, [r7, #14]
 8017dc2:	2b7f      	cmp	r3, #127	; 0x7f
 8017dc4:	d9f2      	bls.n	8017dac <ff_convert+0x3c>
 8017dc6:	e000      	b.n	8017dca <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8017dc8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8017dca:	89fb      	ldrh	r3, [r7, #14]
 8017dcc:	3380      	adds	r3, #128	; 0x80
 8017dce:	b29b      	uxth	r3, r3
 8017dd0:	b2db      	uxtb	r3, r3
 8017dd2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8017dd4:	89fb      	ldrh	r3, [r7, #14]
}
 8017dd6:	4618      	mov	r0, r3
 8017dd8:	3714      	adds	r7, #20
 8017dda:	46bd      	mov	sp, r7
 8017ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017de0:	4770      	bx	lr
 8017de2:	bf00      	nop
 8017de4:	080194a4 	.word	0x080194a4

08017de8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8017de8:	b480      	push	{r7}
 8017dea:	b087      	sub	sp, #28
 8017dec:	af00      	add	r7, sp, #0
 8017dee:	4603      	mov	r3, r0
 8017df0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8017df2:	88fb      	ldrh	r3, [r7, #6]
 8017df4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017df8:	d201      	bcs.n	8017dfe <ff_wtoupper+0x16>
 8017dfa:	4b3e      	ldr	r3, [pc, #248]	; (8017ef4 <ff_wtoupper+0x10c>)
 8017dfc:	e000      	b.n	8017e00 <ff_wtoupper+0x18>
 8017dfe:	4b3e      	ldr	r3, [pc, #248]	; (8017ef8 <ff_wtoupper+0x110>)
 8017e00:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8017e02:	697b      	ldr	r3, [r7, #20]
 8017e04:	1c9a      	adds	r2, r3, #2
 8017e06:	617a      	str	r2, [r7, #20]
 8017e08:	881b      	ldrh	r3, [r3, #0]
 8017e0a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8017e0c:	8a7b      	ldrh	r3, [r7, #18]
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	d068      	beq.n	8017ee4 <ff_wtoupper+0xfc>
 8017e12:	88fa      	ldrh	r2, [r7, #6]
 8017e14:	8a7b      	ldrh	r3, [r7, #18]
 8017e16:	429a      	cmp	r2, r3
 8017e18:	d364      	bcc.n	8017ee4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8017e1a:	697b      	ldr	r3, [r7, #20]
 8017e1c:	1c9a      	adds	r2, r3, #2
 8017e1e:	617a      	str	r2, [r7, #20]
 8017e20:	881b      	ldrh	r3, [r3, #0]
 8017e22:	823b      	strh	r3, [r7, #16]
 8017e24:	8a3b      	ldrh	r3, [r7, #16]
 8017e26:	0a1b      	lsrs	r3, r3, #8
 8017e28:	81fb      	strh	r3, [r7, #14]
 8017e2a:	8a3b      	ldrh	r3, [r7, #16]
 8017e2c:	b2db      	uxtb	r3, r3
 8017e2e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8017e30:	88fa      	ldrh	r2, [r7, #6]
 8017e32:	8a79      	ldrh	r1, [r7, #18]
 8017e34:	8a3b      	ldrh	r3, [r7, #16]
 8017e36:	440b      	add	r3, r1
 8017e38:	429a      	cmp	r2, r3
 8017e3a:	da49      	bge.n	8017ed0 <ff_wtoupper+0xe8>
			switch (cmd) {
 8017e3c:	89fb      	ldrh	r3, [r7, #14]
 8017e3e:	2b08      	cmp	r3, #8
 8017e40:	d84f      	bhi.n	8017ee2 <ff_wtoupper+0xfa>
 8017e42:	a201      	add	r2, pc, #4	; (adr r2, 8017e48 <ff_wtoupper+0x60>)
 8017e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017e48:	08017e6d 	.word	0x08017e6d
 8017e4c:	08017e7f 	.word	0x08017e7f
 8017e50:	08017e95 	.word	0x08017e95
 8017e54:	08017e9d 	.word	0x08017e9d
 8017e58:	08017ea5 	.word	0x08017ea5
 8017e5c:	08017ead 	.word	0x08017ead
 8017e60:	08017eb5 	.word	0x08017eb5
 8017e64:	08017ebd 	.word	0x08017ebd
 8017e68:	08017ec5 	.word	0x08017ec5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8017e6c:	88fa      	ldrh	r2, [r7, #6]
 8017e6e:	8a7b      	ldrh	r3, [r7, #18]
 8017e70:	1ad3      	subs	r3, r2, r3
 8017e72:	005b      	lsls	r3, r3, #1
 8017e74:	697a      	ldr	r2, [r7, #20]
 8017e76:	4413      	add	r3, r2
 8017e78:	881b      	ldrh	r3, [r3, #0]
 8017e7a:	80fb      	strh	r3, [r7, #6]
 8017e7c:	e027      	b.n	8017ece <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8017e7e:	88fa      	ldrh	r2, [r7, #6]
 8017e80:	8a7b      	ldrh	r3, [r7, #18]
 8017e82:	1ad3      	subs	r3, r2, r3
 8017e84:	b29b      	uxth	r3, r3
 8017e86:	f003 0301 	and.w	r3, r3, #1
 8017e8a:	b29b      	uxth	r3, r3
 8017e8c:	88fa      	ldrh	r2, [r7, #6]
 8017e8e:	1ad3      	subs	r3, r2, r3
 8017e90:	80fb      	strh	r3, [r7, #6]
 8017e92:	e01c      	b.n	8017ece <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8017e94:	88fb      	ldrh	r3, [r7, #6]
 8017e96:	3b10      	subs	r3, #16
 8017e98:	80fb      	strh	r3, [r7, #6]
 8017e9a:	e018      	b.n	8017ece <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8017e9c:	88fb      	ldrh	r3, [r7, #6]
 8017e9e:	3b20      	subs	r3, #32
 8017ea0:	80fb      	strh	r3, [r7, #6]
 8017ea2:	e014      	b.n	8017ece <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8017ea4:	88fb      	ldrh	r3, [r7, #6]
 8017ea6:	3b30      	subs	r3, #48	; 0x30
 8017ea8:	80fb      	strh	r3, [r7, #6]
 8017eaa:	e010      	b.n	8017ece <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8017eac:	88fb      	ldrh	r3, [r7, #6]
 8017eae:	3b1a      	subs	r3, #26
 8017eb0:	80fb      	strh	r3, [r7, #6]
 8017eb2:	e00c      	b.n	8017ece <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8017eb4:	88fb      	ldrh	r3, [r7, #6]
 8017eb6:	3308      	adds	r3, #8
 8017eb8:	80fb      	strh	r3, [r7, #6]
 8017eba:	e008      	b.n	8017ece <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8017ebc:	88fb      	ldrh	r3, [r7, #6]
 8017ebe:	3b50      	subs	r3, #80	; 0x50
 8017ec0:	80fb      	strh	r3, [r7, #6]
 8017ec2:	e004      	b.n	8017ece <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8017ec4:	88fb      	ldrh	r3, [r7, #6]
 8017ec6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8017eca:	80fb      	strh	r3, [r7, #6]
 8017ecc:	bf00      	nop
			}
			break;
 8017ece:	e008      	b.n	8017ee2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8017ed0:	89fb      	ldrh	r3, [r7, #14]
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	d195      	bne.n	8017e02 <ff_wtoupper+0x1a>
 8017ed6:	8a3b      	ldrh	r3, [r7, #16]
 8017ed8:	005b      	lsls	r3, r3, #1
 8017eda:	697a      	ldr	r2, [r7, #20]
 8017edc:	4413      	add	r3, r2
 8017ede:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8017ee0:	e78f      	b.n	8017e02 <ff_wtoupper+0x1a>
			break;
 8017ee2:	bf00      	nop
	}

	return chr;
 8017ee4:	88fb      	ldrh	r3, [r7, #6]
}
 8017ee6:	4618      	mov	r0, r3
 8017ee8:	371c      	adds	r7, #28
 8017eea:	46bd      	mov	sp, r7
 8017eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ef0:	4770      	bx	lr
 8017ef2:	bf00      	nop
 8017ef4:	080195a4 	.word	0x080195a4
 8017ef8:	08019798 	.word	0x08019798

08017efc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017efc:	b580      	push	{r7, lr}
 8017efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017f00:	2200      	movs	r2, #0
 8017f02:	4912      	ldr	r1, [pc, #72]	; (8017f4c <MX_USB_DEVICE_Init+0x50>)
 8017f04:	4812      	ldr	r0, [pc, #72]	; (8017f50 <MX_USB_DEVICE_Init+0x54>)
 8017f06:	f7fb fddc 	bl	8013ac2 <USBD_Init>
 8017f0a:	4603      	mov	r3, r0
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	d001      	beq.n	8017f14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017f10:	f7e9 fe12 	bl	8001b38 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8017f14:	490f      	ldr	r1, [pc, #60]	; (8017f54 <MX_USB_DEVICE_Init+0x58>)
 8017f16:	480e      	ldr	r0, [pc, #56]	; (8017f50 <MX_USB_DEVICE_Init+0x54>)
 8017f18:	f7fb fe03 	bl	8013b22 <USBD_RegisterClass>
 8017f1c:	4603      	mov	r3, r0
 8017f1e:	2b00      	cmp	r3, #0
 8017f20:	d001      	beq.n	8017f26 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017f22:	f7e9 fe09 	bl	8001b38 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8017f26:	490c      	ldr	r1, [pc, #48]	; (8017f58 <MX_USB_DEVICE_Init+0x5c>)
 8017f28:	4809      	ldr	r0, [pc, #36]	; (8017f50 <MX_USB_DEVICE_Init+0x54>)
 8017f2a:	f7fa f8ad 	bl	8012088 <USBD_MSC_RegisterStorage>
 8017f2e:	4603      	mov	r3, r0
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	d001      	beq.n	8017f38 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017f34:	f7e9 fe00 	bl	8001b38 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017f38:	4805      	ldr	r0, [pc, #20]	; (8017f50 <MX_USB_DEVICE_Init+0x54>)
 8017f3a:	f7fb fe28 	bl	8013b8e <USBD_Start>
 8017f3e:	4603      	mov	r3, r0
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	d001      	beq.n	8017f48 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017f44:	f7e9 fdf8 	bl	8001b38 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017f48:	bf00      	nop
 8017f4a:	bd80      	pop	{r7, pc}
 8017f4c:	200000b4 	.word	0x200000b4
 8017f50:	200129d0 	.word	0x200129d0
 8017f54:	2000000c 	.word	0x2000000c
 8017f58:	20000114 	.word	0x20000114

08017f5c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017f5c:	b480      	push	{r7}
 8017f5e:	b083      	sub	sp, #12
 8017f60:	af00      	add	r7, sp, #0
 8017f62:	4603      	mov	r3, r0
 8017f64:	6039      	str	r1, [r7, #0]
 8017f66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017f68:	683b      	ldr	r3, [r7, #0]
 8017f6a:	2212      	movs	r2, #18
 8017f6c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8017f6e:	4b03      	ldr	r3, [pc, #12]	; (8017f7c <USBD_FS_DeviceDescriptor+0x20>)
}
 8017f70:	4618      	mov	r0, r3
 8017f72:	370c      	adds	r7, #12
 8017f74:	46bd      	mov	sp, r7
 8017f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f7a:	4770      	bx	lr
 8017f7c:	200000d4 	.word	0x200000d4

08017f80 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017f80:	b480      	push	{r7}
 8017f82:	b083      	sub	sp, #12
 8017f84:	af00      	add	r7, sp, #0
 8017f86:	4603      	mov	r3, r0
 8017f88:	6039      	str	r1, [r7, #0]
 8017f8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017f8c:	683b      	ldr	r3, [r7, #0]
 8017f8e:	2204      	movs	r2, #4
 8017f90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017f92:	4b03      	ldr	r3, [pc, #12]	; (8017fa0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017f94:	4618      	mov	r0, r3
 8017f96:	370c      	adds	r7, #12
 8017f98:	46bd      	mov	sp, r7
 8017f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f9e:	4770      	bx	lr
 8017fa0:	200000f4 	.word	0x200000f4

08017fa4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017fa4:	b580      	push	{r7, lr}
 8017fa6:	b082      	sub	sp, #8
 8017fa8:	af00      	add	r7, sp, #0
 8017faa:	4603      	mov	r3, r0
 8017fac:	6039      	str	r1, [r7, #0]
 8017fae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017fb0:	79fb      	ldrb	r3, [r7, #7]
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d105      	bne.n	8017fc2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017fb6:	683a      	ldr	r2, [r7, #0]
 8017fb8:	4907      	ldr	r1, [pc, #28]	; (8017fd8 <USBD_FS_ProductStrDescriptor+0x34>)
 8017fba:	4808      	ldr	r0, [pc, #32]	; (8017fdc <USBD_FS_ProductStrDescriptor+0x38>)
 8017fbc:	f7fc ffbe 	bl	8014f3c <USBD_GetString>
 8017fc0:	e004      	b.n	8017fcc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017fc2:	683a      	ldr	r2, [r7, #0]
 8017fc4:	4904      	ldr	r1, [pc, #16]	; (8017fd8 <USBD_FS_ProductStrDescriptor+0x34>)
 8017fc6:	4805      	ldr	r0, [pc, #20]	; (8017fdc <USBD_FS_ProductStrDescriptor+0x38>)
 8017fc8:	f7fc ffb8 	bl	8014f3c <USBD_GetString>
  }
  return USBD_StrDesc;
 8017fcc:	4b02      	ldr	r3, [pc, #8]	; (8017fd8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8017fce:	4618      	mov	r0, r3
 8017fd0:	3708      	adds	r7, #8
 8017fd2:	46bd      	mov	sp, r7
 8017fd4:	bd80      	pop	{r7, pc}
 8017fd6:	bf00      	nop
 8017fd8:	20012cac 	.word	0x20012cac
 8017fdc:	080193a0 	.word	0x080193a0

08017fe0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017fe0:	b580      	push	{r7, lr}
 8017fe2:	b082      	sub	sp, #8
 8017fe4:	af00      	add	r7, sp, #0
 8017fe6:	4603      	mov	r3, r0
 8017fe8:	6039      	str	r1, [r7, #0]
 8017fea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017fec:	683a      	ldr	r2, [r7, #0]
 8017fee:	4904      	ldr	r1, [pc, #16]	; (8018000 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8017ff0:	4804      	ldr	r0, [pc, #16]	; (8018004 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8017ff2:	f7fc ffa3 	bl	8014f3c <USBD_GetString>
  return USBD_StrDesc;
 8017ff6:	4b02      	ldr	r3, [pc, #8]	; (8018000 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8017ff8:	4618      	mov	r0, r3
 8017ffa:	3708      	adds	r7, #8
 8017ffc:	46bd      	mov	sp, r7
 8017ffe:	bd80      	pop	{r7, pc}
 8018000:	20012cac 	.word	0x20012cac
 8018004:	080193b0 	.word	0x080193b0

08018008 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018008:	b580      	push	{r7, lr}
 801800a:	b082      	sub	sp, #8
 801800c:	af00      	add	r7, sp, #0
 801800e:	4603      	mov	r3, r0
 8018010:	6039      	str	r1, [r7, #0]
 8018012:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018014:	683b      	ldr	r3, [r7, #0]
 8018016:	221a      	movs	r2, #26
 8018018:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801801a:	f000 f855 	bl	80180c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801801e:	4b02      	ldr	r3, [pc, #8]	; (8018028 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8018020:	4618      	mov	r0, r3
 8018022:	3708      	adds	r7, #8
 8018024:	46bd      	mov	sp, r7
 8018026:	bd80      	pop	{r7, pc}
 8018028:	200000f8 	.word	0x200000f8

0801802c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801802c:	b580      	push	{r7, lr}
 801802e:	b082      	sub	sp, #8
 8018030:	af00      	add	r7, sp, #0
 8018032:	4603      	mov	r3, r0
 8018034:	6039      	str	r1, [r7, #0]
 8018036:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018038:	79fb      	ldrb	r3, [r7, #7]
 801803a:	2b00      	cmp	r3, #0
 801803c:	d105      	bne.n	801804a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801803e:	683a      	ldr	r2, [r7, #0]
 8018040:	4907      	ldr	r1, [pc, #28]	; (8018060 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018042:	4808      	ldr	r0, [pc, #32]	; (8018064 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018044:	f7fc ff7a 	bl	8014f3c <USBD_GetString>
 8018048:	e004      	b.n	8018054 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801804a:	683a      	ldr	r2, [r7, #0]
 801804c:	4904      	ldr	r1, [pc, #16]	; (8018060 <USBD_FS_ConfigStrDescriptor+0x34>)
 801804e:	4805      	ldr	r0, [pc, #20]	; (8018064 <USBD_FS_ConfigStrDescriptor+0x38>)
 8018050:	f7fc ff74 	bl	8014f3c <USBD_GetString>
  }
  return USBD_StrDesc;
 8018054:	4b02      	ldr	r3, [pc, #8]	; (8018060 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8018056:	4618      	mov	r0, r3
 8018058:	3708      	adds	r7, #8
 801805a:	46bd      	mov	sp, r7
 801805c:	bd80      	pop	{r7, pc}
 801805e:	bf00      	nop
 8018060:	20012cac 	.word	0x20012cac
 8018064:	080193c4 	.word	0x080193c4

08018068 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018068:	b580      	push	{r7, lr}
 801806a:	b082      	sub	sp, #8
 801806c:	af00      	add	r7, sp, #0
 801806e:	4603      	mov	r3, r0
 8018070:	6039      	str	r1, [r7, #0]
 8018072:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018074:	79fb      	ldrb	r3, [r7, #7]
 8018076:	2b00      	cmp	r3, #0
 8018078:	d105      	bne.n	8018086 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801807a:	683a      	ldr	r2, [r7, #0]
 801807c:	4907      	ldr	r1, [pc, #28]	; (801809c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801807e:	4808      	ldr	r0, [pc, #32]	; (80180a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018080:	f7fc ff5c 	bl	8014f3c <USBD_GetString>
 8018084:	e004      	b.n	8018090 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018086:	683a      	ldr	r2, [r7, #0]
 8018088:	4904      	ldr	r1, [pc, #16]	; (801809c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801808a:	4805      	ldr	r0, [pc, #20]	; (80180a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801808c:	f7fc ff56 	bl	8014f3c <USBD_GetString>
  }
  return USBD_StrDesc;
 8018090:	4b02      	ldr	r3, [pc, #8]	; (801809c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8018092:	4618      	mov	r0, r3
 8018094:	3708      	adds	r7, #8
 8018096:	46bd      	mov	sp, r7
 8018098:	bd80      	pop	{r7, pc}
 801809a:	bf00      	nop
 801809c:	20012cac 	.word	0x20012cac
 80180a0:	080193d0 	.word	0x080193d0

080180a4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80180a4:	b480      	push	{r7}
 80180a6:	b083      	sub	sp, #12
 80180a8:	af00      	add	r7, sp, #0
 80180aa:	4603      	mov	r3, r0
 80180ac:	6039      	str	r1, [r7, #0]
 80180ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80180b0:	683b      	ldr	r3, [r7, #0]
 80180b2:	220c      	movs	r2, #12
 80180b4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80180b6:	4b03      	ldr	r3, [pc, #12]	; (80180c4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80180b8:	4618      	mov	r0, r3
 80180ba:	370c      	adds	r7, #12
 80180bc:	46bd      	mov	sp, r7
 80180be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180c2:	4770      	bx	lr
 80180c4:	200000e8 	.word	0x200000e8

080180c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80180c8:	b580      	push	{r7, lr}
 80180ca:	b084      	sub	sp, #16
 80180cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80180ce:	4b0f      	ldr	r3, [pc, #60]	; (801810c <Get_SerialNum+0x44>)
 80180d0:	681b      	ldr	r3, [r3, #0]
 80180d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80180d4:	4b0e      	ldr	r3, [pc, #56]	; (8018110 <Get_SerialNum+0x48>)
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80180da:	4b0e      	ldr	r3, [pc, #56]	; (8018114 <Get_SerialNum+0x4c>)
 80180dc:	681b      	ldr	r3, [r3, #0]
 80180de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80180e0:	68fa      	ldr	r2, [r7, #12]
 80180e2:	687b      	ldr	r3, [r7, #4]
 80180e4:	4413      	add	r3, r2
 80180e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80180e8:	68fb      	ldr	r3, [r7, #12]
 80180ea:	2b00      	cmp	r3, #0
 80180ec:	d009      	beq.n	8018102 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80180ee:	2208      	movs	r2, #8
 80180f0:	4909      	ldr	r1, [pc, #36]	; (8018118 <Get_SerialNum+0x50>)
 80180f2:	68f8      	ldr	r0, [r7, #12]
 80180f4:	f000 f814 	bl	8018120 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80180f8:	2204      	movs	r2, #4
 80180fa:	4908      	ldr	r1, [pc, #32]	; (801811c <Get_SerialNum+0x54>)
 80180fc:	68b8      	ldr	r0, [r7, #8]
 80180fe:	f000 f80f 	bl	8018120 <IntToUnicode>
  }
}
 8018102:	bf00      	nop
 8018104:	3710      	adds	r7, #16
 8018106:	46bd      	mov	sp, r7
 8018108:	bd80      	pop	{r7, pc}
 801810a:	bf00      	nop
 801810c:	1fff7a10 	.word	0x1fff7a10
 8018110:	1fff7a14 	.word	0x1fff7a14
 8018114:	1fff7a18 	.word	0x1fff7a18
 8018118:	200000fa 	.word	0x200000fa
 801811c:	2000010a 	.word	0x2000010a

08018120 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018120:	b480      	push	{r7}
 8018122:	b087      	sub	sp, #28
 8018124:	af00      	add	r7, sp, #0
 8018126:	60f8      	str	r0, [r7, #12]
 8018128:	60b9      	str	r1, [r7, #8]
 801812a:	4613      	mov	r3, r2
 801812c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801812e:	2300      	movs	r3, #0
 8018130:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018132:	2300      	movs	r3, #0
 8018134:	75fb      	strb	r3, [r7, #23]
 8018136:	e027      	b.n	8018188 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018138:	68fb      	ldr	r3, [r7, #12]
 801813a:	0f1b      	lsrs	r3, r3, #28
 801813c:	2b09      	cmp	r3, #9
 801813e:	d80b      	bhi.n	8018158 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018140:	68fb      	ldr	r3, [r7, #12]
 8018142:	0f1b      	lsrs	r3, r3, #28
 8018144:	b2da      	uxtb	r2, r3
 8018146:	7dfb      	ldrb	r3, [r7, #23]
 8018148:	005b      	lsls	r3, r3, #1
 801814a:	4619      	mov	r1, r3
 801814c:	68bb      	ldr	r3, [r7, #8]
 801814e:	440b      	add	r3, r1
 8018150:	3230      	adds	r2, #48	; 0x30
 8018152:	b2d2      	uxtb	r2, r2
 8018154:	701a      	strb	r2, [r3, #0]
 8018156:	e00a      	b.n	801816e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018158:	68fb      	ldr	r3, [r7, #12]
 801815a:	0f1b      	lsrs	r3, r3, #28
 801815c:	b2da      	uxtb	r2, r3
 801815e:	7dfb      	ldrb	r3, [r7, #23]
 8018160:	005b      	lsls	r3, r3, #1
 8018162:	4619      	mov	r1, r3
 8018164:	68bb      	ldr	r3, [r7, #8]
 8018166:	440b      	add	r3, r1
 8018168:	3237      	adds	r2, #55	; 0x37
 801816a:	b2d2      	uxtb	r2, r2
 801816c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801816e:	68fb      	ldr	r3, [r7, #12]
 8018170:	011b      	lsls	r3, r3, #4
 8018172:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018174:	7dfb      	ldrb	r3, [r7, #23]
 8018176:	005b      	lsls	r3, r3, #1
 8018178:	3301      	adds	r3, #1
 801817a:	68ba      	ldr	r2, [r7, #8]
 801817c:	4413      	add	r3, r2
 801817e:	2200      	movs	r2, #0
 8018180:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018182:	7dfb      	ldrb	r3, [r7, #23]
 8018184:	3301      	adds	r3, #1
 8018186:	75fb      	strb	r3, [r7, #23]
 8018188:	7dfa      	ldrb	r2, [r7, #23]
 801818a:	79fb      	ldrb	r3, [r7, #7]
 801818c:	429a      	cmp	r2, r3
 801818e:	d3d3      	bcc.n	8018138 <IntToUnicode+0x18>
  }
}
 8018190:	bf00      	nop
 8018192:	bf00      	nop
 8018194:	371c      	adds	r7, #28
 8018196:	46bd      	mov	sp, r7
 8018198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801819c:	4770      	bx	lr

0801819e <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801819e:	b480      	push	{r7}
 80181a0:	b083      	sub	sp, #12
 80181a2:	af00      	add	r7, sp, #0
 80181a4:	4603      	mov	r3, r0
 80181a6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 80181a8:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80181aa:	4618      	mov	r0, r3
 80181ac:	370c      	adds	r7, #12
 80181ae:	46bd      	mov	sp, r7
 80181b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181b4:	4770      	bx	lr
	...

080181b8 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80181b8:	b580      	push	{r7, lr}
 80181ba:	b08c      	sub	sp, #48	; 0x30
 80181bc:	af00      	add	r7, sp, #0
 80181be:	4603      	mov	r3, r0
 80181c0:	60b9      	str	r1, [r7, #8]
 80181c2:	607a      	str	r2, [r7, #4]
 80181c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  HAL_SD_CardInfoTypeDef info;

  HAL_SD_GetCardInfo(&hsd, &info);
 80181c6:	f107 0310 	add.w	r3, r7, #16
 80181ca:	4619      	mov	r1, r3
 80181cc:	4807      	ldr	r0, [pc, #28]	; (80181ec <STORAGE_GetCapacity_FS+0x34>)
 80181ce:	f7f5 ffff 	bl	800e1d0 <HAL_SD_GetCardInfo>

  *block_num =  info.LogBlockNbr - 1;
 80181d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181d4:	1e5a      	subs	r2, r3, #1
 80181d6:	68bb      	ldr	r3, [r7, #8]
 80181d8:	601a      	str	r2, [r3, #0]
  *block_size = info.LogBlockSize;
 80181da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181dc:	b29a      	uxth	r2, r3
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	801a      	strh	r2, [r3, #0]

  return (USBD_OK);
 80181e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80181e4:	4618      	mov	r0, r3
 80181e6:	3730      	adds	r7, #48	; 0x30
 80181e8:	46bd      	mov	sp, r7
 80181ea:	bd80      	pop	{r7, pc}
 80181ec:	200003ac 	.word	0x200003ac

080181f0 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 80181f0:	b480      	push	{r7}
 80181f2:	b083      	sub	sp, #12
 80181f4:	af00      	add	r7, sp, #0
 80181f6:	4603      	mov	r3, r0
 80181f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80181fa:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80181fc:	4618      	mov	r0, r3
 80181fe:	370c      	adds	r7, #12
 8018200:	46bd      	mov	sp, r7
 8018202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018206:	4770      	bx	lr

08018208 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8018208:	b480      	push	{r7}
 801820a:	b083      	sub	sp, #12
 801820c:	af00      	add	r7, sp, #0
 801820e:	4603      	mov	r3, r0
 8018210:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8018212:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018214:	4618      	mov	r0, r3
 8018216:	370c      	adds	r7, #12
 8018218:	46bd      	mov	sp, r7
 801821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801821e:	4770      	bx	lr

08018220 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8018220:	b580      	push	{r7, lr}
 8018222:	b086      	sub	sp, #24
 8018224:	af02      	add	r7, sp, #8
 8018226:	60b9      	str	r1, [r7, #8]
 8018228:	607a      	str	r2, [r7, #4]
 801822a:	461a      	mov	r2, r3
 801822c:	4603      	mov	r3, r0
 801822e:	73fb      	strb	r3, [r7, #15]
 8018230:	4613      	mov	r3, r2
 8018232:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8018234:	89bb      	ldrh	r3, [r7, #12]
 8018236:	f04f 32ff 	mov.w	r2, #4294967295
 801823a:	9200      	str	r2, [sp, #0]
 801823c:	687a      	ldr	r2, [r7, #4]
 801823e:	68b9      	ldr	r1, [r7, #8]
 8018240:	4807      	ldr	r0, [pc, #28]	; (8018260 <STORAGE_Read_FS+0x40>)
 8018242:	f7f4 ff7b 	bl	800d13c <HAL_SD_ReadBlocks>
//	HAL_SD_ReadBlocks_DMA(&hsd, buf, blk_addr, blk_len);

  /* Wait until SD card is ready to use for new operation */
  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER);
 8018246:	bf00      	nop
 8018248:	4805      	ldr	r0, [pc, #20]	; (8018260 <STORAGE_Read_FS+0x40>)
 801824a:	f7f6 f887 	bl	800e35c <HAL_SD_GetCardState>
 801824e:	4603      	mov	r3, r0
 8018250:	2b04      	cmp	r3, #4
 8018252:	d1f9      	bne.n	8018248 <STORAGE_Read_FS+0x28>

  return (USBD_OK);
 8018254:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8018256:	4618      	mov	r0, r3
 8018258:	3710      	adds	r7, #16
 801825a:	46bd      	mov	sp, r7
 801825c:	bd80      	pop	{r7, pc}
 801825e:	bf00      	nop
 8018260:	200003ac 	.word	0x200003ac

08018264 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8018264:	b580      	push	{r7, lr}
 8018266:	b086      	sub	sp, #24
 8018268:	af02      	add	r7, sp, #8
 801826a:	60b9      	str	r1, [r7, #8]
 801826c:	607a      	str	r2, [r7, #4]
 801826e:	461a      	mov	r2, r3
 8018270:	4603      	mov	r3, r0
 8018272:	73fb      	strb	r3, [r7, #15]
 8018274:	4613      	mov	r3, r2
 8018276:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8018278:	89bb      	ldrh	r3, [r7, #12]
 801827a:	f04f 32ff 	mov.w	r2, #4294967295
 801827e:	9200      	str	r2, [sp, #0]
 8018280:	687a      	ldr	r2, [r7, #4]
 8018282:	68b9      	ldr	r1, [r7, #8]
 8018284:	4807      	ldr	r0, [pc, #28]	; (80182a4 <STORAGE_Write_FS+0x40>)
 8018286:	f7f5 f937 	bl	800d4f8 <HAL_SD_WriteBlocks>
//	HAL_SD_WriteBlocks_DMA(&hsd, buf, blk_addr, blk_len);

  /* Wait until SD card is ready to use for new operation */
  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER);
 801828a:	bf00      	nop
 801828c:	4805      	ldr	r0, [pc, #20]	; (80182a4 <STORAGE_Write_FS+0x40>)
 801828e:	f7f6 f865 	bl	800e35c <HAL_SD_GetCardState>
 8018292:	4603      	mov	r3, r0
 8018294:	2b04      	cmp	r3, #4
 8018296:	d1f9      	bne.n	801828c <STORAGE_Write_FS+0x28>

  return (USBD_OK);
 8018298:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 801829a:	4618      	mov	r0, r3
 801829c:	3710      	adds	r7, #16
 801829e:	46bd      	mov	sp, r7
 80182a0:	bd80      	pop	{r7, pc}
 80182a2:	bf00      	nop
 80182a4:	200003ac 	.word	0x200003ac

080182a8 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 80182a8:	b480      	push	{r7}
 80182aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80182ac:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80182ae:	4618      	mov	r0, r3
 80182b0:	46bd      	mov	sp, r7
 80182b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182b6:	4770      	bx	lr

080182b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80182b8:	b580      	push	{r7, lr}
 80182ba:	b08a      	sub	sp, #40	; 0x28
 80182bc:	af00      	add	r7, sp, #0
 80182be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80182c0:	f107 0314 	add.w	r3, r7, #20
 80182c4:	2200      	movs	r2, #0
 80182c6:	601a      	str	r2, [r3, #0]
 80182c8:	605a      	str	r2, [r3, #4]
 80182ca:	609a      	str	r2, [r3, #8]
 80182cc:	60da      	str	r2, [r3, #12]
 80182ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80182d8:	d147      	bne.n	801836a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80182da:	2300      	movs	r3, #0
 80182dc:	613b      	str	r3, [r7, #16]
 80182de:	4b25      	ldr	r3, [pc, #148]	; (8018374 <HAL_PCD_MspInit+0xbc>)
 80182e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80182e2:	4a24      	ldr	r2, [pc, #144]	; (8018374 <HAL_PCD_MspInit+0xbc>)
 80182e4:	f043 0301 	orr.w	r3, r3, #1
 80182e8:	6313      	str	r3, [r2, #48]	; 0x30
 80182ea:	4b22      	ldr	r3, [pc, #136]	; (8018374 <HAL_PCD_MspInit+0xbc>)
 80182ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80182ee:	f003 0301 	and.w	r3, r3, #1
 80182f2:	613b      	str	r3, [r7, #16]
 80182f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80182f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80182fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80182fc:	2300      	movs	r3, #0
 80182fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018300:	2300      	movs	r3, #0
 8018302:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018304:	f107 0314 	add.w	r3, r7, #20
 8018308:	4619      	mov	r1, r3
 801830a:	481b      	ldr	r0, [pc, #108]	; (8018378 <HAL_PCD_MspInit+0xc0>)
 801830c:	f7f0 fce8 	bl	8008ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018310:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8018314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018316:	2302      	movs	r3, #2
 8018318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801831a:	2300      	movs	r3, #0
 801831c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801831e:	2303      	movs	r3, #3
 8018320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8018322:	230a      	movs	r3, #10
 8018324:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018326:	f107 0314 	add.w	r3, r7, #20
 801832a:	4619      	mov	r1, r3
 801832c:	4812      	ldr	r0, [pc, #72]	; (8018378 <HAL_PCD_MspInit+0xc0>)
 801832e:	f7f0 fcd7 	bl	8008ce0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018332:	4b10      	ldr	r3, [pc, #64]	; (8018374 <HAL_PCD_MspInit+0xbc>)
 8018334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018336:	4a0f      	ldr	r2, [pc, #60]	; (8018374 <HAL_PCD_MspInit+0xbc>)
 8018338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801833c:	6353      	str	r3, [r2, #52]	; 0x34
 801833e:	2300      	movs	r3, #0
 8018340:	60fb      	str	r3, [r7, #12]
 8018342:	4b0c      	ldr	r3, [pc, #48]	; (8018374 <HAL_PCD_MspInit+0xbc>)
 8018344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018346:	4a0b      	ldr	r2, [pc, #44]	; (8018374 <HAL_PCD_MspInit+0xbc>)
 8018348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801834c:	6453      	str	r3, [r2, #68]	; 0x44
 801834e:	4b09      	ldr	r3, [pc, #36]	; (8018374 <HAL_PCD_MspInit+0xbc>)
 8018350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018356:	60fb      	str	r3, [r7, #12]
 8018358:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801835a:	2200      	movs	r2, #0
 801835c:	2100      	movs	r1, #0
 801835e:	2043      	movs	r0, #67	; 0x43
 8018360:	f7f0 f8e9 	bl	8008536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018364:	2043      	movs	r0, #67	; 0x43
 8018366:	f7f0 f902 	bl	800856e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801836a:	bf00      	nop
 801836c:	3728      	adds	r7, #40	; 0x28
 801836e:	46bd      	mov	sp, r7
 8018370:	bd80      	pop	{r7, pc}
 8018372:	bf00      	nop
 8018374:	40023800 	.word	0x40023800
 8018378:	40020000 	.word	0x40020000

0801837c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801837c:	b580      	push	{r7, lr}
 801837e:	b082      	sub	sp, #8
 8018380:	af00      	add	r7, sp, #0
 8018382:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8018390:	4619      	mov	r1, r3
 8018392:	4610      	mov	r0, r2
 8018394:	f7fb fc48 	bl	8013c28 <USBD_LL_SetupStage>
}
 8018398:	bf00      	nop
 801839a:	3708      	adds	r7, #8
 801839c:	46bd      	mov	sp, r7
 801839e:	bd80      	pop	{r7, pc}

080183a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80183a0:	b580      	push	{r7, lr}
 80183a2:	b082      	sub	sp, #8
 80183a4:	af00      	add	r7, sp, #0
 80183a6:	6078      	str	r0, [r7, #4]
 80183a8:	460b      	mov	r3, r1
 80183aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80183b2:	78fa      	ldrb	r2, [r7, #3]
 80183b4:	6879      	ldr	r1, [r7, #4]
 80183b6:	4613      	mov	r3, r2
 80183b8:	00db      	lsls	r3, r3, #3
 80183ba:	4413      	add	r3, r2
 80183bc:	009b      	lsls	r3, r3, #2
 80183be:	440b      	add	r3, r1
 80183c0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80183c4:	681a      	ldr	r2, [r3, #0]
 80183c6:	78fb      	ldrb	r3, [r7, #3]
 80183c8:	4619      	mov	r1, r3
 80183ca:	f7fb fc82 	bl	8013cd2 <USBD_LL_DataOutStage>
}
 80183ce:	bf00      	nop
 80183d0:	3708      	adds	r7, #8
 80183d2:	46bd      	mov	sp, r7
 80183d4:	bd80      	pop	{r7, pc}

080183d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80183d6:	b580      	push	{r7, lr}
 80183d8:	b082      	sub	sp, #8
 80183da:	af00      	add	r7, sp, #0
 80183dc:	6078      	str	r0, [r7, #4]
 80183de:	460b      	mov	r3, r1
 80183e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80183e8:	78fa      	ldrb	r2, [r7, #3]
 80183ea:	6879      	ldr	r1, [r7, #4]
 80183ec:	4613      	mov	r3, r2
 80183ee:	00db      	lsls	r3, r3, #3
 80183f0:	4413      	add	r3, r2
 80183f2:	009b      	lsls	r3, r3, #2
 80183f4:	440b      	add	r3, r1
 80183f6:	334c      	adds	r3, #76	; 0x4c
 80183f8:	681a      	ldr	r2, [r3, #0]
 80183fa:	78fb      	ldrb	r3, [r7, #3]
 80183fc:	4619      	mov	r1, r3
 80183fe:	f7fb fd1b 	bl	8013e38 <USBD_LL_DataInStage>
}
 8018402:	bf00      	nop
 8018404:	3708      	adds	r7, #8
 8018406:	46bd      	mov	sp, r7
 8018408:	bd80      	pop	{r7, pc}

0801840a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801840a:	b580      	push	{r7, lr}
 801840c:	b082      	sub	sp, #8
 801840e:	af00      	add	r7, sp, #0
 8018410:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018412:	687b      	ldr	r3, [r7, #4]
 8018414:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018418:	4618      	mov	r0, r3
 801841a:	f7fb fe4f 	bl	80140bc <USBD_LL_SOF>
}
 801841e:	bf00      	nop
 8018420:	3708      	adds	r7, #8
 8018422:	46bd      	mov	sp, r7
 8018424:	bd80      	pop	{r7, pc}

08018426 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018426:	b580      	push	{r7, lr}
 8018428:	b084      	sub	sp, #16
 801842a:	af00      	add	r7, sp, #0
 801842c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801842e:	2301      	movs	r3, #1
 8018430:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	68db      	ldr	r3, [r3, #12]
 8018436:	2b00      	cmp	r3, #0
 8018438:	d102      	bne.n	8018440 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801843a:	2300      	movs	r3, #0
 801843c:	73fb      	strb	r3, [r7, #15]
 801843e:	e008      	b.n	8018452 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	68db      	ldr	r3, [r3, #12]
 8018444:	2b02      	cmp	r3, #2
 8018446:	d102      	bne.n	801844e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8018448:	2301      	movs	r3, #1
 801844a:	73fb      	strb	r3, [r7, #15]
 801844c:	e001      	b.n	8018452 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801844e:	f7e9 fb73 	bl	8001b38 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018458:	7bfa      	ldrb	r2, [r7, #15]
 801845a:	4611      	mov	r1, r2
 801845c:	4618      	mov	r0, r3
 801845e:	f7fb fdef 	bl	8014040 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018468:	4618      	mov	r0, r3
 801846a:	f7fb fd97 	bl	8013f9c <USBD_LL_Reset>
}
 801846e:	bf00      	nop
 8018470:	3710      	adds	r7, #16
 8018472:	46bd      	mov	sp, r7
 8018474:	bd80      	pop	{r7, pc}
	...

08018478 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018478:	b580      	push	{r7, lr}
 801847a:	b082      	sub	sp, #8
 801847c:	af00      	add	r7, sp, #0
 801847e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018480:	687b      	ldr	r3, [r7, #4]
 8018482:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018486:	4618      	mov	r0, r3
 8018488:	f7fb fdea 	bl	8014060 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	681b      	ldr	r3, [r3, #0]
 8018490:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018494:	681b      	ldr	r3, [r3, #0]
 8018496:	687a      	ldr	r2, [r7, #4]
 8018498:	6812      	ldr	r2, [r2, #0]
 801849a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801849e:	f043 0301 	orr.w	r3, r3, #1
 80184a2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	6a1b      	ldr	r3, [r3, #32]
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	d005      	beq.n	80184b8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80184ac:	4b04      	ldr	r3, [pc, #16]	; (80184c0 <HAL_PCD_SuspendCallback+0x48>)
 80184ae:	691b      	ldr	r3, [r3, #16]
 80184b0:	4a03      	ldr	r2, [pc, #12]	; (80184c0 <HAL_PCD_SuspendCallback+0x48>)
 80184b2:	f043 0306 	orr.w	r3, r3, #6
 80184b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80184b8:	bf00      	nop
 80184ba:	3708      	adds	r7, #8
 80184bc:	46bd      	mov	sp, r7
 80184be:	bd80      	pop	{r7, pc}
 80184c0:	e000ed00 	.word	0xe000ed00

080184c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80184c4:	b580      	push	{r7, lr}
 80184c6:	b082      	sub	sp, #8
 80184c8:	af00      	add	r7, sp, #0
 80184ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80184d2:	4618      	mov	r0, r3
 80184d4:	f7fb fdda 	bl	801408c <USBD_LL_Resume>
}
 80184d8:	bf00      	nop
 80184da:	3708      	adds	r7, #8
 80184dc:	46bd      	mov	sp, r7
 80184de:	bd80      	pop	{r7, pc}

080184e0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80184e0:	b580      	push	{r7, lr}
 80184e2:	b082      	sub	sp, #8
 80184e4:	af00      	add	r7, sp, #0
 80184e6:	6078      	str	r0, [r7, #4]
 80184e8:	460b      	mov	r3, r1
 80184ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80184ec:	687b      	ldr	r3, [r7, #4]
 80184ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80184f2:	78fa      	ldrb	r2, [r7, #3]
 80184f4:	4611      	mov	r1, r2
 80184f6:	4618      	mov	r0, r3
 80184f8:	f7fb fe32 	bl	8014160 <USBD_LL_IsoOUTIncomplete>
}
 80184fc:	bf00      	nop
 80184fe:	3708      	adds	r7, #8
 8018500:	46bd      	mov	sp, r7
 8018502:	bd80      	pop	{r7, pc}

08018504 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018504:	b580      	push	{r7, lr}
 8018506:	b082      	sub	sp, #8
 8018508:	af00      	add	r7, sp, #0
 801850a:	6078      	str	r0, [r7, #4]
 801850c:	460b      	mov	r3, r1
 801850e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018516:	78fa      	ldrb	r2, [r7, #3]
 8018518:	4611      	mov	r1, r2
 801851a:	4618      	mov	r0, r3
 801851c:	f7fb fdee 	bl	80140fc <USBD_LL_IsoINIncomplete>
}
 8018520:	bf00      	nop
 8018522:	3708      	adds	r7, #8
 8018524:	46bd      	mov	sp, r7
 8018526:	bd80      	pop	{r7, pc}

08018528 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018528:	b580      	push	{r7, lr}
 801852a:	b082      	sub	sp, #8
 801852c:	af00      	add	r7, sp, #0
 801852e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018536:	4618      	mov	r0, r3
 8018538:	f7fb fe44 	bl	80141c4 <USBD_LL_DevConnected>
}
 801853c:	bf00      	nop
 801853e:	3708      	adds	r7, #8
 8018540:	46bd      	mov	sp, r7
 8018542:	bd80      	pop	{r7, pc}

08018544 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018544:	b580      	push	{r7, lr}
 8018546:	b082      	sub	sp, #8
 8018548:	af00      	add	r7, sp, #0
 801854a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018552:	4618      	mov	r0, r3
 8018554:	f7fb fe41 	bl	80141da <USBD_LL_DevDisconnected>
}
 8018558:	bf00      	nop
 801855a:	3708      	adds	r7, #8
 801855c:	46bd      	mov	sp, r7
 801855e:	bd80      	pop	{r7, pc}

08018560 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018560:	b580      	push	{r7, lr}
 8018562:	b082      	sub	sp, #8
 8018564:	af00      	add	r7, sp, #0
 8018566:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	781b      	ldrb	r3, [r3, #0]
 801856c:	2b00      	cmp	r3, #0
 801856e:	d13c      	bne.n	80185ea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8018570:	4a20      	ldr	r2, [pc, #128]	; (80185f4 <USBD_LL_Init+0x94>)
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	4a1e      	ldr	r2, [pc, #120]	; (80185f4 <USBD_LL_Init+0x94>)
 801857c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8018580:	4b1c      	ldr	r3, [pc, #112]	; (80185f4 <USBD_LL_Init+0x94>)
 8018582:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8018586:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8018588:	4b1a      	ldr	r3, [pc, #104]	; (80185f4 <USBD_LL_Init+0x94>)
 801858a:	2206      	movs	r2, #6
 801858c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801858e:	4b19      	ldr	r3, [pc, #100]	; (80185f4 <USBD_LL_Init+0x94>)
 8018590:	2202      	movs	r2, #2
 8018592:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8018594:	4b17      	ldr	r3, [pc, #92]	; (80185f4 <USBD_LL_Init+0x94>)
 8018596:	2200      	movs	r2, #0
 8018598:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801859a:	4b16      	ldr	r3, [pc, #88]	; (80185f4 <USBD_LL_Init+0x94>)
 801859c:	2202      	movs	r2, #2
 801859e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80185a0:	4b14      	ldr	r3, [pc, #80]	; (80185f4 <USBD_LL_Init+0x94>)
 80185a2:	2200      	movs	r2, #0
 80185a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80185a6:	4b13      	ldr	r3, [pc, #76]	; (80185f4 <USBD_LL_Init+0x94>)
 80185a8:	2200      	movs	r2, #0
 80185aa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80185ac:	4b11      	ldr	r3, [pc, #68]	; (80185f4 <USBD_LL_Init+0x94>)
 80185ae:	2200      	movs	r2, #0
 80185b0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80185b2:	4b10      	ldr	r3, [pc, #64]	; (80185f4 <USBD_LL_Init+0x94>)
 80185b4:	2201      	movs	r2, #1
 80185b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80185b8:	4b0e      	ldr	r3, [pc, #56]	; (80185f4 <USBD_LL_Init+0x94>)
 80185ba:	2200      	movs	r2, #0
 80185bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80185be:	480d      	ldr	r0, [pc, #52]	; (80185f4 <USBD_LL_Init+0x94>)
 80185c0:	f7f1 fd97 	bl	800a0f2 <HAL_PCD_Init>
 80185c4:	4603      	mov	r3, r0
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d001      	beq.n	80185ce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80185ca:	f7e9 fab5 	bl	8001b38 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80185ce:	2180      	movs	r1, #128	; 0x80
 80185d0:	4808      	ldr	r0, [pc, #32]	; (80185f4 <USBD_LL_Init+0x94>)
 80185d2:	f7f3 f850 	bl	800b676 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80185d6:	2240      	movs	r2, #64	; 0x40
 80185d8:	2100      	movs	r1, #0
 80185da:	4806      	ldr	r0, [pc, #24]	; (80185f4 <USBD_LL_Init+0x94>)
 80185dc:	f7f3 f804 	bl	800b5e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80185e0:	2280      	movs	r2, #128	; 0x80
 80185e2:	2101      	movs	r1, #1
 80185e4:	4803      	ldr	r0, [pc, #12]	; (80185f4 <USBD_LL_Init+0x94>)
 80185e6:	f7f2 ffff 	bl	800b5e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80185ea:	2300      	movs	r3, #0
}
 80185ec:	4618      	mov	r0, r3
 80185ee:	3708      	adds	r7, #8
 80185f0:	46bd      	mov	sp, r7
 80185f2:	bd80      	pop	{r7, pc}
 80185f4:	20012eac 	.word	0x20012eac

080185f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80185f8:	b580      	push	{r7, lr}
 80185fa:	b084      	sub	sp, #16
 80185fc:	af00      	add	r7, sp, #0
 80185fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018600:	2300      	movs	r3, #0
 8018602:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018604:	2300      	movs	r3, #0
 8018606:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801860e:	4618      	mov	r0, r3
 8018610:	f7f1 fe93 	bl	800a33a <HAL_PCD_Start>
 8018614:	4603      	mov	r3, r0
 8018616:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018618:	7bfb      	ldrb	r3, [r7, #15]
 801861a:	4618      	mov	r0, r3
 801861c:	f000 f9b0 	bl	8018980 <USBD_Get_USB_Status>
 8018620:	4603      	mov	r3, r0
 8018622:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018624:	7bbb      	ldrb	r3, [r7, #14]
}
 8018626:	4618      	mov	r0, r3
 8018628:	3710      	adds	r7, #16
 801862a:	46bd      	mov	sp, r7
 801862c:	bd80      	pop	{r7, pc}

0801862e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801862e:	b580      	push	{r7, lr}
 8018630:	b084      	sub	sp, #16
 8018632:	af00      	add	r7, sp, #0
 8018634:	6078      	str	r0, [r7, #4]
 8018636:	4608      	mov	r0, r1
 8018638:	4611      	mov	r1, r2
 801863a:	461a      	mov	r2, r3
 801863c:	4603      	mov	r3, r0
 801863e:	70fb      	strb	r3, [r7, #3]
 8018640:	460b      	mov	r3, r1
 8018642:	70bb      	strb	r3, [r7, #2]
 8018644:	4613      	mov	r3, r2
 8018646:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018648:	2300      	movs	r3, #0
 801864a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801864c:	2300      	movs	r3, #0
 801864e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018656:	78bb      	ldrb	r3, [r7, #2]
 8018658:	883a      	ldrh	r2, [r7, #0]
 801865a:	78f9      	ldrb	r1, [r7, #3]
 801865c:	f7f2 fb91 	bl	800ad82 <HAL_PCD_EP_Open>
 8018660:	4603      	mov	r3, r0
 8018662:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018664:	7bfb      	ldrb	r3, [r7, #15]
 8018666:	4618      	mov	r0, r3
 8018668:	f000 f98a 	bl	8018980 <USBD_Get_USB_Status>
 801866c:	4603      	mov	r3, r0
 801866e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018670:	7bbb      	ldrb	r3, [r7, #14]
}
 8018672:	4618      	mov	r0, r3
 8018674:	3710      	adds	r7, #16
 8018676:	46bd      	mov	sp, r7
 8018678:	bd80      	pop	{r7, pc}

0801867a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801867a:	b580      	push	{r7, lr}
 801867c:	b084      	sub	sp, #16
 801867e:	af00      	add	r7, sp, #0
 8018680:	6078      	str	r0, [r7, #4]
 8018682:	460b      	mov	r3, r1
 8018684:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018686:	2300      	movs	r3, #0
 8018688:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801868a:	2300      	movs	r3, #0
 801868c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801868e:	687b      	ldr	r3, [r7, #4]
 8018690:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018694:	78fa      	ldrb	r2, [r7, #3]
 8018696:	4611      	mov	r1, r2
 8018698:	4618      	mov	r0, r3
 801869a:	f7f2 fbda 	bl	800ae52 <HAL_PCD_EP_Close>
 801869e:	4603      	mov	r3, r0
 80186a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80186a2:	7bfb      	ldrb	r3, [r7, #15]
 80186a4:	4618      	mov	r0, r3
 80186a6:	f000 f96b 	bl	8018980 <USBD_Get_USB_Status>
 80186aa:	4603      	mov	r3, r0
 80186ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80186ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80186b0:	4618      	mov	r0, r3
 80186b2:	3710      	adds	r7, #16
 80186b4:	46bd      	mov	sp, r7
 80186b6:	bd80      	pop	{r7, pc}

080186b8 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80186b8:	b580      	push	{r7, lr}
 80186ba:	b084      	sub	sp, #16
 80186bc:	af00      	add	r7, sp, #0
 80186be:	6078      	str	r0, [r7, #4]
 80186c0:	460b      	mov	r3, r1
 80186c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80186c4:	2300      	movs	r3, #0
 80186c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80186c8:	2300      	movs	r3, #0
 80186ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80186d2:	78fa      	ldrb	r2, [r7, #3]
 80186d4:	4611      	mov	r1, r2
 80186d6:	4618      	mov	r0, r3
 80186d8:	f7f2 fd9d 	bl	800b216 <HAL_PCD_EP_Flush>
 80186dc:	4603      	mov	r3, r0
 80186de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80186e0:	7bfb      	ldrb	r3, [r7, #15]
 80186e2:	4618      	mov	r0, r3
 80186e4:	f000 f94c 	bl	8018980 <USBD_Get_USB_Status>
 80186e8:	4603      	mov	r3, r0
 80186ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80186ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80186ee:	4618      	mov	r0, r3
 80186f0:	3710      	adds	r7, #16
 80186f2:	46bd      	mov	sp, r7
 80186f4:	bd80      	pop	{r7, pc}

080186f6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80186f6:	b580      	push	{r7, lr}
 80186f8:	b084      	sub	sp, #16
 80186fa:	af00      	add	r7, sp, #0
 80186fc:	6078      	str	r0, [r7, #4]
 80186fe:	460b      	mov	r3, r1
 8018700:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018702:	2300      	movs	r3, #0
 8018704:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018706:	2300      	movs	r3, #0
 8018708:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018710:	78fa      	ldrb	r2, [r7, #3]
 8018712:	4611      	mov	r1, r2
 8018714:	4618      	mov	r0, r3
 8018716:	f7f2 fc93 	bl	800b040 <HAL_PCD_EP_SetStall>
 801871a:	4603      	mov	r3, r0
 801871c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801871e:	7bfb      	ldrb	r3, [r7, #15]
 8018720:	4618      	mov	r0, r3
 8018722:	f000 f92d 	bl	8018980 <USBD_Get_USB_Status>
 8018726:	4603      	mov	r3, r0
 8018728:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801872a:	7bbb      	ldrb	r3, [r7, #14]
}
 801872c:	4618      	mov	r0, r3
 801872e:	3710      	adds	r7, #16
 8018730:	46bd      	mov	sp, r7
 8018732:	bd80      	pop	{r7, pc}

08018734 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018734:	b580      	push	{r7, lr}
 8018736:	b084      	sub	sp, #16
 8018738:	af00      	add	r7, sp, #0
 801873a:	6078      	str	r0, [r7, #4]
 801873c:	460b      	mov	r3, r1
 801873e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018740:	2300      	movs	r3, #0
 8018742:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018744:	2300      	movs	r3, #0
 8018746:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018748:	687b      	ldr	r3, [r7, #4]
 801874a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801874e:	78fa      	ldrb	r2, [r7, #3]
 8018750:	4611      	mov	r1, r2
 8018752:	4618      	mov	r0, r3
 8018754:	f7f2 fcd8 	bl	800b108 <HAL_PCD_EP_ClrStall>
 8018758:	4603      	mov	r3, r0
 801875a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801875c:	7bfb      	ldrb	r3, [r7, #15]
 801875e:	4618      	mov	r0, r3
 8018760:	f000 f90e 	bl	8018980 <USBD_Get_USB_Status>
 8018764:	4603      	mov	r3, r0
 8018766:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018768:	7bbb      	ldrb	r3, [r7, #14]
}
 801876a:	4618      	mov	r0, r3
 801876c:	3710      	adds	r7, #16
 801876e:	46bd      	mov	sp, r7
 8018770:	bd80      	pop	{r7, pc}

08018772 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018772:	b480      	push	{r7}
 8018774:	b085      	sub	sp, #20
 8018776:	af00      	add	r7, sp, #0
 8018778:	6078      	str	r0, [r7, #4]
 801877a:	460b      	mov	r3, r1
 801877c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018784:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018786:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801878a:	2b00      	cmp	r3, #0
 801878c:	da0b      	bge.n	80187a6 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801878e:	78fb      	ldrb	r3, [r7, #3]
 8018790:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8018794:	68f9      	ldr	r1, [r7, #12]
 8018796:	4613      	mov	r3, r2
 8018798:	00db      	lsls	r3, r3, #3
 801879a:	4413      	add	r3, r2
 801879c:	009b      	lsls	r3, r3, #2
 801879e:	440b      	add	r3, r1
 80187a0:	333e      	adds	r3, #62	; 0x3e
 80187a2:	781b      	ldrb	r3, [r3, #0]
 80187a4:	e00b      	b.n	80187be <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80187a6:	78fb      	ldrb	r3, [r7, #3]
 80187a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80187ac:	68f9      	ldr	r1, [r7, #12]
 80187ae:	4613      	mov	r3, r2
 80187b0:	00db      	lsls	r3, r3, #3
 80187b2:	4413      	add	r3, r2
 80187b4:	009b      	lsls	r3, r3, #2
 80187b6:	440b      	add	r3, r1
 80187b8:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80187bc:	781b      	ldrb	r3, [r3, #0]
  }
}
 80187be:	4618      	mov	r0, r3
 80187c0:	3714      	adds	r7, #20
 80187c2:	46bd      	mov	sp, r7
 80187c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187c8:	4770      	bx	lr

080187ca <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80187ca:	b580      	push	{r7, lr}
 80187cc:	b084      	sub	sp, #16
 80187ce:	af00      	add	r7, sp, #0
 80187d0:	6078      	str	r0, [r7, #4]
 80187d2:	460b      	mov	r3, r1
 80187d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80187d6:	2300      	movs	r3, #0
 80187d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80187da:	2300      	movs	r3, #0
 80187dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80187e4:	78fa      	ldrb	r2, [r7, #3]
 80187e6:	4611      	mov	r1, r2
 80187e8:	4618      	mov	r0, r3
 80187ea:	f7f2 faa5 	bl	800ad38 <HAL_PCD_SetAddress>
 80187ee:	4603      	mov	r3, r0
 80187f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80187f2:	7bfb      	ldrb	r3, [r7, #15]
 80187f4:	4618      	mov	r0, r3
 80187f6:	f000 f8c3 	bl	8018980 <USBD_Get_USB_Status>
 80187fa:	4603      	mov	r3, r0
 80187fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80187fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8018800:	4618      	mov	r0, r3
 8018802:	3710      	adds	r7, #16
 8018804:	46bd      	mov	sp, r7
 8018806:	bd80      	pop	{r7, pc}

08018808 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8018808:	b580      	push	{r7, lr}
 801880a:	b086      	sub	sp, #24
 801880c:	af00      	add	r7, sp, #0
 801880e:	60f8      	str	r0, [r7, #12]
 8018810:	607a      	str	r2, [r7, #4]
 8018812:	603b      	str	r3, [r7, #0]
 8018814:	460b      	mov	r3, r1
 8018816:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018818:	2300      	movs	r3, #0
 801881a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801881c:	2300      	movs	r3, #0
 801881e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8018820:	68fb      	ldr	r3, [r7, #12]
 8018822:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018826:	7af9      	ldrb	r1, [r7, #11]
 8018828:	683b      	ldr	r3, [r7, #0]
 801882a:	687a      	ldr	r2, [r7, #4]
 801882c:	f7f2 fbbe 	bl	800afac <HAL_PCD_EP_Transmit>
 8018830:	4603      	mov	r3, r0
 8018832:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018834:	7dfb      	ldrb	r3, [r7, #23]
 8018836:	4618      	mov	r0, r3
 8018838:	f000 f8a2 	bl	8018980 <USBD_Get_USB_Status>
 801883c:	4603      	mov	r3, r0
 801883e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018840:	7dbb      	ldrb	r3, [r7, #22]
}
 8018842:	4618      	mov	r0, r3
 8018844:	3718      	adds	r7, #24
 8018846:	46bd      	mov	sp, r7
 8018848:	bd80      	pop	{r7, pc}

0801884a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801884a:	b580      	push	{r7, lr}
 801884c:	b086      	sub	sp, #24
 801884e:	af00      	add	r7, sp, #0
 8018850:	60f8      	str	r0, [r7, #12]
 8018852:	607a      	str	r2, [r7, #4]
 8018854:	603b      	str	r3, [r7, #0]
 8018856:	460b      	mov	r3, r1
 8018858:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801885a:	2300      	movs	r3, #0
 801885c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801885e:	2300      	movs	r3, #0
 8018860:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018862:	68fb      	ldr	r3, [r7, #12]
 8018864:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8018868:	7af9      	ldrb	r1, [r7, #11]
 801886a:	683b      	ldr	r3, [r7, #0]
 801886c:	687a      	ldr	r2, [r7, #4]
 801886e:	f7f2 fb3a 	bl	800aee6 <HAL_PCD_EP_Receive>
 8018872:	4603      	mov	r3, r0
 8018874:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018876:	7dfb      	ldrb	r3, [r7, #23]
 8018878:	4618      	mov	r0, r3
 801887a:	f000 f881 	bl	8018980 <USBD_Get_USB_Status>
 801887e:	4603      	mov	r3, r0
 8018880:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018882:	7dbb      	ldrb	r3, [r7, #22]
}
 8018884:	4618      	mov	r0, r3
 8018886:	3718      	adds	r7, #24
 8018888:	46bd      	mov	sp, r7
 801888a:	bd80      	pop	{r7, pc}

0801888c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801888c:	b580      	push	{r7, lr}
 801888e:	b082      	sub	sp, #8
 8018890:	af00      	add	r7, sp, #0
 8018892:	6078      	str	r0, [r7, #4]
 8018894:	460b      	mov	r3, r1
 8018896:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801889e:	78fa      	ldrb	r2, [r7, #3]
 80188a0:	4611      	mov	r1, r2
 80188a2:	4618      	mov	r0, r3
 80188a4:	f7f2 fb6a 	bl	800af7c <HAL_PCD_EP_GetRxCount>
 80188a8:	4603      	mov	r3, r0
}
 80188aa:	4618      	mov	r0, r3
 80188ac:	3708      	adds	r7, #8
 80188ae:	46bd      	mov	sp, r7
 80188b0:	bd80      	pop	{r7, pc}
	...

080188b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80188b4:	b580      	push	{r7, lr}
 80188b6:	b082      	sub	sp, #8
 80188b8:	af00      	add	r7, sp, #0
 80188ba:	6078      	str	r0, [r7, #4]
 80188bc:	460b      	mov	r3, r1
 80188be:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80188c0:	78fb      	ldrb	r3, [r7, #3]
 80188c2:	2b00      	cmp	r3, #0
 80188c4:	d002      	beq.n	80188cc <HAL_PCDEx_LPM_Callback+0x18>
 80188c6:	2b01      	cmp	r3, #1
 80188c8:	d01f      	beq.n	801890a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80188ca:	e03b      	b.n	8018944 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	6a1b      	ldr	r3, [r3, #32]
 80188d0:	2b00      	cmp	r3, #0
 80188d2:	d007      	beq.n	80188e4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 80188d4:	f7e8 fd7e 	bl	80013d4 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80188d8:	4b1c      	ldr	r3, [pc, #112]	; (801894c <HAL_PCDEx_LPM_Callback+0x98>)
 80188da:	691b      	ldr	r3, [r3, #16]
 80188dc:	4a1b      	ldr	r2, [pc, #108]	; (801894c <HAL_PCDEx_LPM_Callback+0x98>)
 80188de:	f023 0306 	bic.w	r3, r3, #6
 80188e2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	681b      	ldr	r3, [r3, #0]
 80188e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80188ec:	681b      	ldr	r3, [r3, #0]
 80188ee:	687a      	ldr	r2, [r7, #4]
 80188f0:	6812      	ldr	r2, [r2, #0]
 80188f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80188f6:	f023 0301 	bic.w	r3, r3, #1
 80188fa:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80188fc:	687b      	ldr	r3, [r7, #4]
 80188fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018902:	4618      	mov	r0, r3
 8018904:	f7fb fbc2 	bl	801408c <USBD_LL_Resume>
    break;
 8018908:	e01c      	b.n	8018944 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	681b      	ldr	r3, [r3, #0]
 801890e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018912:	681b      	ldr	r3, [r3, #0]
 8018914:	687a      	ldr	r2, [r7, #4]
 8018916:	6812      	ldr	r2, [r2, #0]
 8018918:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801891c:	f043 0301 	orr.w	r3, r3, #1
 8018920:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8018928:	4618      	mov	r0, r3
 801892a:	f7fb fb99 	bl	8014060 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	6a1b      	ldr	r3, [r3, #32]
 8018932:	2b00      	cmp	r3, #0
 8018934:	d005      	beq.n	8018942 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018936:	4b05      	ldr	r3, [pc, #20]	; (801894c <HAL_PCDEx_LPM_Callback+0x98>)
 8018938:	691b      	ldr	r3, [r3, #16]
 801893a:	4a04      	ldr	r2, [pc, #16]	; (801894c <HAL_PCDEx_LPM_Callback+0x98>)
 801893c:	f043 0306 	orr.w	r3, r3, #6
 8018940:	6113      	str	r3, [r2, #16]
    break;
 8018942:	bf00      	nop
}
 8018944:	bf00      	nop
 8018946:	3708      	adds	r7, #8
 8018948:	46bd      	mov	sp, r7
 801894a:	bd80      	pop	{r7, pc}
 801894c:	e000ed00 	.word	0xe000ed00

08018950 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018950:	b480      	push	{r7}
 8018952:	b083      	sub	sp, #12
 8018954:	af00      	add	r7, sp, #0
 8018956:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018958:	4b03      	ldr	r3, [pc, #12]	; (8018968 <USBD_static_malloc+0x18>)
}
 801895a:	4618      	mov	r0, r3
 801895c:	370c      	adds	r7, #12
 801895e:	46bd      	mov	sp, r7
 8018960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018964:	4770      	bx	lr
 8018966:	bf00      	nop
 8018968:	200133b8 	.word	0x200133b8

0801896c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801896c:	b480      	push	{r7}
 801896e:	b083      	sub	sp, #12
 8018970:	af00      	add	r7, sp, #0
 8018972:	6078      	str	r0, [r7, #4]

}
 8018974:	bf00      	nop
 8018976:	370c      	adds	r7, #12
 8018978:	46bd      	mov	sp, r7
 801897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801897e:	4770      	bx	lr

08018980 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018980:	b480      	push	{r7}
 8018982:	b085      	sub	sp, #20
 8018984:	af00      	add	r7, sp, #0
 8018986:	4603      	mov	r3, r0
 8018988:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801898a:	2300      	movs	r3, #0
 801898c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801898e:	79fb      	ldrb	r3, [r7, #7]
 8018990:	2b03      	cmp	r3, #3
 8018992:	d817      	bhi.n	80189c4 <USBD_Get_USB_Status+0x44>
 8018994:	a201      	add	r2, pc, #4	; (adr r2, 801899c <USBD_Get_USB_Status+0x1c>)
 8018996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801899a:	bf00      	nop
 801899c:	080189ad 	.word	0x080189ad
 80189a0:	080189b3 	.word	0x080189b3
 80189a4:	080189b9 	.word	0x080189b9
 80189a8:	080189bf 	.word	0x080189bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80189ac:	2300      	movs	r3, #0
 80189ae:	73fb      	strb	r3, [r7, #15]
    break;
 80189b0:	e00b      	b.n	80189ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80189b2:	2303      	movs	r3, #3
 80189b4:	73fb      	strb	r3, [r7, #15]
    break;
 80189b6:	e008      	b.n	80189ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80189b8:	2301      	movs	r3, #1
 80189ba:	73fb      	strb	r3, [r7, #15]
    break;
 80189bc:	e005      	b.n	80189ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80189be:	2303      	movs	r3, #3
 80189c0:	73fb      	strb	r3, [r7, #15]
    break;
 80189c2:	e002      	b.n	80189ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80189c4:	2303      	movs	r3, #3
 80189c6:	73fb      	strb	r3, [r7, #15]
    break;
 80189c8:	bf00      	nop
  }
  return usb_status;
 80189ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80189cc:	4618      	mov	r0, r3
 80189ce:	3714      	adds	r7, #20
 80189d0:	46bd      	mov	sp, r7
 80189d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189d6:	4770      	bx	lr

080189d8 <__errno>:
 80189d8:	4b01      	ldr	r3, [pc, #4]	; (80189e0 <__errno+0x8>)
 80189da:	6818      	ldr	r0, [r3, #0]
 80189dc:	4770      	bx	lr
 80189de:	bf00      	nop
 80189e0:	20000134 	.word	0x20000134

080189e4 <__libc_init_array>:
 80189e4:	b570      	push	{r4, r5, r6, lr}
 80189e6:	4d0d      	ldr	r5, [pc, #52]	; (8018a1c <__libc_init_array+0x38>)
 80189e8:	4c0d      	ldr	r4, [pc, #52]	; (8018a20 <__libc_init_array+0x3c>)
 80189ea:	1b64      	subs	r4, r4, r5
 80189ec:	10a4      	asrs	r4, r4, #2
 80189ee:	2600      	movs	r6, #0
 80189f0:	42a6      	cmp	r6, r4
 80189f2:	d109      	bne.n	8018a08 <__libc_init_array+0x24>
 80189f4:	4d0b      	ldr	r5, [pc, #44]	; (8018a24 <__libc_init_array+0x40>)
 80189f6:	4c0c      	ldr	r4, [pc, #48]	; (8018a28 <__libc_init_array+0x44>)
 80189f8:	f000 fc8e 	bl	8019318 <_init>
 80189fc:	1b64      	subs	r4, r4, r5
 80189fe:	10a4      	asrs	r4, r4, #2
 8018a00:	2600      	movs	r6, #0
 8018a02:	42a6      	cmp	r6, r4
 8018a04:	d105      	bne.n	8018a12 <__libc_init_array+0x2e>
 8018a06:	bd70      	pop	{r4, r5, r6, pc}
 8018a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8018a0c:	4798      	blx	r3
 8018a0e:	3601      	adds	r6, #1
 8018a10:	e7ee      	b.n	80189f0 <__libc_init_array+0xc>
 8018a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8018a16:	4798      	blx	r3
 8018a18:	3601      	adds	r6, #1
 8018a1a:	e7f2      	b.n	8018a02 <__libc_init_array+0x1e>
 8018a1c:	080198b4 	.word	0x080198b4
 8018a20:	080198b4 	.word	0x080198b4
 8018a24:	080198b4 	.word	0x080198b4
 8018a28:	080198b8 	.word	0x080198b8

08018a2c <memcpy>:
 8018a2c:	440a      	add	r2, r1
 8018a2e:	4291      	cmp	r1, r2
 8018a30:	f100 33ff 	add.w	r3, r0, #4294967295
 8018a34:	d100      	bne.n	8018a38 <memcpy+0xc>
 8018a36:	4770      	bx	lr
 8018a38:	b510      	push	{r4, lr}
 8018a3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018a3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018a42:	4291      	cmp	r1, r2
 8018a44:	d1f9      	bne.n	8018a3a <memcpy+0xe>
 8018a46:	bd10      	pop	{r4, pc}

08018a48 <memset>:
 8018a48:	4402      	add	r2, r0
 8018a4a:	4603      	mov	r3, r0
 8018a4c:	4293      	cmp	r3, r2
 8018a4e:	d100      	bne.n	8018a52 <memset+0xa>
 8018a50:	4770      	bx	lr
 8018a52:	f803 1b01 	strb.w	r1, [r3], #1
 8018a56:	e7f9      	b.n	8018a4c <memset+0x4>

08018a58 <siprintf>:
 8018a58:	b40e      	push	{r1, r2, r3}
 8018a5a:	b500      	push	{lr}
 8018a5c:	b09c      	sub	sp, #112	; 0x70
 8018a5e:	ab1d      	add	r3, sp, #116	; 0x74
 8018a60:	9002      	str	r0, [sp, #8]
 8018a62:	9006      	str	r0, [sp, #24]
 8018a64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018a68:	4809      	ldr	r0, [pc, #36]	; (8018a90 <siprintf+0x38>)
 8018a6a:	9107      	str	r1, [sp, #28]
 8018a6c:	9104      	str	r1, [sp, #16]
 8018a6e:	4909      	ldr	r1, [pc, #36]	; (8018a94 <siprintf+0x3c>)
 8018a70:	f853 2b04 	ldr.w	r2, [r3], #4
 8018a74:	9105      	str	r1, [sp, #20]
 8018a76:	6800      	ldr	r0, [r0, #0]
 8018a78:	9301      	str	r3, [sp, #4]
 8018a7a:	a902      	add	r1, sp, #8
 8018a7c:	f000 f868 	bl	8018b50 <_svfiprintf_r>
 8018a80:	9b02      	ldr	r3, [sp, #8]
 8018a82:	2200      	movs	r2, #0
 8018a84:	701a      	strb	r2, [r3, #0]
 8018a86:	b01c      	add	sp, #112	; 0x70
 8018a88:	f85d eb04 	ldr.w	lr, [sp], #4
 8018a8c:	b003      	add	sp, #12
 8018a8e:	4770      	bx	lr
 8018a90:	20000134 	.word	0x20000134
 8018a94:	ffff0208 	.word	0xffff0208

08018a98 <__ssputs_r>:
 8018a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a9c:	688e      	ldr	r6, [r1, #8]
 8018a9e:	429e      	cmp	r6, r3
 8018aa0:	4682      	mov	sl, r0
 8018aa2:	460c      	mov	r4, r1
 8018aa4:	4690      	mov	r8, r2
 8018aa6:	461f      	mov	r7, r3
 8018aa8:	d838      	bhi.n	8018b1c <__ssputs_r+0x84>
 8018aaa:	898a      	ldrh	r2, [r1, #12]
 8018aac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018ab0:	d032      	beq.n	8018b18 <__ssputs_r+0x80>
 8018ab2:	6825      	ldr	r5, [r4, #0]
 8018ab4:	6909      	ldr	r1, [r1, #16]
 8018ab6:	eba5 0901 	sub.w	r9, r5, r1
 8018aba:	6965      	ldr	r5, [r4, #20]
 8018abc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018ac0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018ac4:	3301      	adds	r3, #1
 8018ac6:	444b      	add	r3, r9
 8018ac8:	106d      	asrs	r5, r5, #1
 8018aca:	429d      	cmp	r5, r3
 8018acc:	bf38      	it	cc
 8018ace:	461d      	movcc	r5, r3
 8018ad0:	0553      	lsls	r3, r2, #21
 8018ad2:	d531      	bpl.n	8018b38 <__ssputs_r+0xa0>
 8018ad4:	4629      	mov	r1, r5
 8018ad6:	f000 fb55 	bl	8019184 <_malloc_r>
 8018ada:	4606      	mov	r6, r0
 8018adc:	b950      	cbnz	r0, 8018af4 <__ssputs_r+0x5c>
 8018ade:	230c      	movs	r3, #12
 8018ae0:	f8ca 3000 	str.w	r3, [sl]
 8018ae4:	89a3      	ldrh	r3, [r4, #12]
 8018ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018aea:	81a3      	strh	r3, [r4, #12]
 8018aec:	f04f 30ff 	mov.w	r0, #4294967295
 8018af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018af4:	6921      	ldr	r1, [r4, #16]
 8018af6:	464a      	mov	r2, r9
 8018af8:	f7ff ff98 	bl	8018a2c <memcpy>
 8018afc:	89a3      	ldrh	r3, [r4, #12]
 8018afe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018b02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018b06:	81a3      	strh	r3, [r4, #12]
 8018b08:	6126      	str	r6, [r4, #16]
 8018b0a:	6165      	str	r5, [r4, #20]
 8018b0c:	444e      	add	r6, r9
 8018b0e:	eba5 0509 	sub.w	r5, r5, r9
 8018b12:	6026      	str	r6, [r4, #0]
 8018b14:	60a5      	str	r5, [r4, #8]
 8018b16:	463e      	mov	r6, r7
 8018b18:	42be      	cmp	r6, r7
 8018b1a:	d900      	bls.n	8018b1e <__ssputs_r+0x86>
 8018b1c:	463e      	mov	r6, r7
 8018b1e:	6820      	ldr	r0, [r4, #0]
 8018b20:	4632      	mov	r2, r6
 8018b22:	4641      	mov	r1, r8
 8018b24:	f000 faa8 	bl	8019078 <memmove>
 8018b28:	68a3      	ldr	r3, [r4, #8]
 8018b2a:	1b9b      	subs	r3, r3, r6
 8018b2c:	60a3      	str	r3, [r4, #8]
 8018b2e:	6823      	ldr	r3, [r4, #0]
 8018b30:	4433      	add	r3, r6
 8018b32:	6023      	str	r3, [r4, #0]
 8018b34:	2000      	movs	r0, #0
 8018b36:	e7db      	b.n	8018af0 <__ssputs_r+0x58>
 8018b38:	462a      	mov	r2, r5
 8018b3a:	f000 fb97 	bl	801926c <_realloc_r>
 8018b3e:	4606      	mov	r6, r0
 8018b40:	2800      	cmp	r0, #0
 8018b42:	d1e1      	bne.n	8018b08 <__ssputs_r+0x70>
 8018b44:	6921      	ldr	r1, [r4, #16]
 8018b46:	4650      	mov	r0, sl
 8018b48:	f000 fab0 	bl	80190ac <_free_r>
 8018b4c:	e7c7      	b.n	8018ade <__ssputs_r+0x46>
	...

08018b50 <_svfiprintf_r>:
 8018b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b54:	4698      	mov	r8, r3
 8018b56:	898b      	ldrh	r3, [r1, #12]
 8018b58:	061b      	lsls	r3, r3, #24
 8018b5a:	b09d      	sub	sp, #116	; 0x74
 8018b5c:	4607      	mov	r7, r0
 8018b5e:	460d      	mov	r5, r1
 8018b60:	4614      	mov	r4, r2
 8018b62:	d50e      	bpl.n	8018b82 <_svfiprintf_r+0x32>
 8018b64:	690b      	ldr	r3, [r1, #16]
 8018b66:	b963      	cbnz	r3, 8018b82 <_svfiprintf_r+0x32>
 8018b68:	2140      	movs	r1, #64	; 0x40
 8018b6a:	f000 fb0b 	bl	8019184 <_malloc_r>
 8018b6e:	6028      	str	r0, [r5, #0]
 8018b70:	6128      	str	r0, [r5, #16]
 8018b72:	b920      	cbnz	r0, 8018b7e <_svfiprintf_r+0x2e>
 8018b74:	230c      	movs	r3, #12
 8018b76:	603b      	str	r3, [r7, #0]
 8018b78:	f04f 30ff 	mov.w	r0, #4294967295
 8018b7c:	e0d1      	b.n	8018d22 <_svfiprintf_r+0x1d2>
 8018b7e:	2340      	movs	r3, #64	; 0x40
 8018b80:	616b      	str	r3, [r5, #20]
 8018b82:	2300      	movs	r3, #0
 8018b84:	9309      	str	r3, [sp, #36]	; 0x24
 8018b86:	2320      	movs	r3, #32
 8018b88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018b8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8018b90:	2330      	movs	r3, #48	; 0x30
 8018b92:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018d3c <_svfiprintf_r+0x1ec>
 8018b96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018b9a:	f04f 0901 	mov.w	r9, #1
 8018b9e:	4623      	mov	r3, r4
 8018ba0:	469a      	mov	sl, r3
 8018ba2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018ba6:	b10a      	cbz	r2, 8018bac <_svfiprintf_r+0x5c>
 8018ba8:	2a25      	cmp	r2, #37	; 0x25
 8018baa:	d1f9      	bne.n	8018ba0 <_svfiprintf_r+0x50>
 8018bac:	ebba 0b04 	subs.w	fp, sl, r4
 8018bb0:	d00b      	beq.n	8018bca <_svfiprintf_r+0x7a>
 8018bb2:	465b      	mov	r3, fp
 8018bb4:	4622      	mov	r2, r4
 8018bb6:	4629      	mov	r1, r5
 8018bb8:	4638      	mov	r0, r7
 8018bba:	f7ff ff6d 	bl	8018a98 <__ssputs_r>
 8018bbe:	3001      	adds	r0, #1
 8018bc0:	f000 80aa 	beq.w	8018d18 <_svfiprintf_r+0x1c8>
 8018bc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018bc6:	445a      	add	r2, fp
 8018bc8:	9209      	str	r2, [sp, #36]	; 0x24
 8018bca:	f89a 3000 	ldrb.w	r3, [sl]
 8018bce:	2b00      	cmp	r3, #0
 8018bd0:	f000 80a2 	beq.w	8018d18 <_svfiprintf_r+0x1c8>
 8018bd4:	2300      	movs	r3, #0
 8018bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8018bda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018bde:	f10a 0a01 	add.w	sl, sl, #1
 8018be2:	9304      	str	r3, [sp, #16]
 8018be4:	9307      	str	r3, [sp, #28]
 8018be6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018bea:	931a      	str	r3, [sp, #104]	; 0x68
 8018bec:	4654      	mov	r4, sl
 8018bee:	2205      	movs	r2, #5
 8018bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018bf4:	4851      	ldr	r0, [pc, #324]	; (8018d3c <_svfiprintf_r+0x1ec>)
 8018bf6:	f7e7 fb0b 	bl	8000210 <memchr>
 8018bfa:	9a04      	ldr	r2, [sp, #16]
 8018bfc:	b9d8      	cbnz	r0, 8018c36 <_svfiprintf_r+0xe6>
 8018bfe:	06d0      	lsls	r0, r2, #27
 8018c00:	bf44      	itt	mi
 8018c02:	2320      	movmi	r3, #32
 8018c04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018c08:	0711      	lsls	r1, r2, #28
 8018c0a:	bf44      	itt	mi
 8018c0c:	232b      	movmi	r3, #43	; 0x2b
 8018c0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018c12:	f89a 3000 	ldrb.w	r3, [sl]
 8018c16:	2b2a      	cmp	r3, #42	; 0x2a
 8018c18:	d015      	beq.n	8018c46 <_svfiprintf_r+0xf6>
 8018c1a:	9a07      	ldr	r2, [sp, #28]
 8018c1c:	4654      	mov	r4, sl
 8018c1e:	2000      	movs	r0, #0
 8018c20:	f04f 0c0a 	mov.w	ip, #10
 8018c24:	4621      	mov	r1, r4
 8018c26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018c2a:	3b30      	subs	r3, #48	; 0x30
 8018c2c:	2b09      	cmp	r3, #9
 8018c2e:	d94e      	bls.n	8018cce <_svfiprintf_r+0x17e>
 8018c30:	b1b0      	cbz	r0, 8018c60 <_svfiprintf_r+0x110>
 8018c32:	9207      	str	r2, [sp, #28]
 8018c34:	e014      	b.n	8018c60 <_svfiprintf_r+0x110>
 8018c36:	eba0 0308 	sub.w	r3, r0, r8
 8018c3a:	fa09 f303 	lsl.w	r3, r9, r3
 8018c3e:	4313      	orrs	r3, r2
 8018c40:	9304      	str	r3, [sp, #16]
 8018c42:	46a2      	mov	sl, r4
 8018c44:	e7d2      	b.n	8018bec <_svfiprintf_r+0x9c>
 8018c46:	9b03      	ldr	r3, [sp, #12]
 8018c48:	1d19      	adds	r1, r3, #4
 8018c4a:	681b      	ldr	r3, [r3, #0]
 8018c4c:	9103      	str	r1, [sp, #12]
 8018c4e:	2b00      	cmp	r3, #0
 8018c50:	bfbb      	ittet	lt
 8018c52:	425b      	neglt	r3, r3
 8018c54:	f042 0202 	orrlt.w	r2, r2, #2
 8018c58:	9307      	strge	r3, [sp, #28]
 8018c5a:	9307      	strlt	r3, [sp, #28]
 8018c5c:	bfb8      	it	lt
 8018c5e:	9204      	strlt	r2, [sp, #16]
 8018c60:	7823      	ldrb	r3, [r4, #0]
 8018c62:	2b2e      	cmp	r3, #46	; 0x2e
 8018c64:	d10c      	bne.n	8018c80 <_svfiprintf_r+0x130>
 8018c66:	7863      	ldrb	r3, [r4, #1]
 8018c68:	2b2a      	cmp	r3, #42	; 0x2a
 8018c6a:	d135      	bne.n	8018cd8 <_svfiprintf_r+0x188>
 8018c6c:	9b03      	ldr	r3, [sp, #12]
 8018c6e:	1d1a      	adds	r2, r3, #4
 8018c70:	681b      	ldr	r3, [r3, #0]
 8018c72:	9203      	str	r2, [sp, #12]
 8018c74:	2b00      	cmp	r3, #0
 8018c76:	bfb8      	it	lt
 8018c78:	f04f 33ff 	movlt.w	r3, #4294967295
 8018c7c:	3402      	adds	r4, #2
 8018c7e:	9305      	str	r3, [sp, #20]
 8018c80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018d4c <_svfiprintf_r+0x1fc>
 8018c84:	7821      	ldrb	r1, [r4, #0]
 8018c86:	2203      	movs	r2, #3
 8018c88:	4650      	mov	r0, sl
 8018c8a:	f7e7 fac1 	bl	8000210 <memchr>
 8018c8e:	b140      	cbz	r0, 8018ca2 <_svfiprintf_r+0x152>
 8018c90:	2340      	movs	r3, #64	; 0x40
 8018c92:	eba0 000a 	sub.w	r0, r0, sl
 8018c96:	fa03 f000 	lsl.w	r0, r3, r0
 8018c9a:	9b04      	ldr	r3, [sp, #16]
 8018c9c:	4303      	orrs	r3, r0
 8018c9e:	3401      	adds	r4, #1
 8018ca0:	9304      	str	r3, [sp, #16]
 8018ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018ca6:	4826      	ldr	r0, [pc, #152]	; (8018d40 <_svfiprintf_r+0x1f0>)
 8018ca8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018cac:	2206      	movs	r2, #6
 8018cae:	f7e7 faaf 	bl	8000210 <memchr>
 8018cb2:	2800      	cmp	r0, #0
 8018cb4:	d038      	beq.n	8018d28 <_svfiprintf_r+0x1d8>
 8018cb6:	4b23      	ldr	r3, [pc, #140]	; (8018d44 <_svfiprintf_r+0x1f4>)
 8018cb8:	bb1b      	cbnz	r3, 8018d02 <_svfiprintf_r+0x1b2>
 8018cba:	9b03      	ldr	r3, [sp, #12]
 8018cbc:	3307      	adds	r3, #7
 8018cbe:	f023 0307 	bic.w	r3, r3, #7
 8018cc2:	3308      	adds	r3, #8
 8018cc4:	9303      	str	r3, [sp, #12]
 8018cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018cc8:	4433      	add	r3, r6
 8018cca:	9309      	str	r3, [sp, #36]	; 0x24
 8018ccc:	e767      	b.n	8018b9e <_svfiprintf_r+0x4e>
 8018cce:	fb0c 3202 	mla	r2, ip, r2, r3
 8018cd2:	460c      	mov	r4, r1
 8018cd4:	2001      	movs	r0, #1
 8018cd6:	e7a5      	b.n	8018c24 <_svfiprintf_r+0xd4>
 8018cd8:	2300      	movs	r3, #0
 8018cda:	3401      	adds	r4, #1
 8018cdc:	9305      	str	r3, [sp, #20]
 8018cde:	4619      	mov	r1, r3
 8018ce0:	f04f 0c0a 	mov.w	ip, #10
 8018ce4:	4620      	mov	r0, r4
 8018ce6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018cea:	3a30      	subs	r2, #48	; 0x30
 8018cec:	2a09      	cmp	r2, #9
 8018cee:	d903      	bls.n	8018cf8 <_svfiprintf_r+0x1a8>
 8018cf0:	2b00      	cmp	r3, #0
 8018cf2:	d0c5      	beq.n	8018c80 <_svfiprintf_r+0x130>
 8018cf4:	9105      	str	r1, [sp, #20]
 8018cf6:	e7c3      	b.n	8018c80 <_svfiprintf_r+0x130>
 8018cf8:	fb0c 2101 	mla	r1, ip, r1, r2
 8018cfc:	4604      	mov	r4, r0
 8018cfe:	2301      	movs	r3, #1
 8018d00:	e7f0      	b.n	8018ce4 <_svfiprintf_r+0x194>
 8018d02:	ab03      	add	r3, sp, #12
 8018d04:	9300      	str	r3, [sp, #0]
 8018d06:	462a      	mov	r2, r5
 8018d08:	4b0f      	ldr	r3, [pc, #60]	; (8018d48 <_svfiprintf_r+0x1f8>)
 8018d0a:	a904      	add	r1, sp, #16
 8018d0c:	4638      	mov	r0, r7
 8018d0e:	f3af 8000 	nop.w
 8018d12:	1c42      	adds	r2, r0, #1
 8018d14:	4606      	mov	r6, r0
 8018d16:	d1d6      	bne.n	8018cc6 <_svfiprintf_r+0x176>
 8018d18:	89ab      	ldrh	r3, [r5, #12]
 8018d1a:	065b      	lsls	r3, r3, #25
 8018d1c:	f53f af2c 	bmi.w	8018b78 <_svfiprintf_r+0x28>
 8018d20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018d22:	b01d      	add	sp, #116	; 0x74
 8018d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018d28:	ab03      	add	r3, sp, #12
 8018d2a:	9300      	str	r3, [sp, #0]
 8018d2c:	462a      	mov	r2, r5
 8018d2e:	4b06      	ldr	r3, [pc, #24]	; (8018d48 <_svfiprintf_r+0x1f8>)
 8018d30:	a904      	add	r1, sp, #16
 8018d32:	4638      	mov	r0, r7
 8018d34:	f000 f87a 	bl	8018e2c <_printf_i>
 8018d38:	e7eb      	b.n	8018d12 <_svfiprintf_r+0x1c2>
 8018d3a:	bf00      	nop
 8018d3c:	08019878 	.word	0x08019878
 8018d40:	08019882 	.word	0x08019882
 8018d44:	00000000 	.word	0x00000000
 8018d48:	08018a99 	.word	0x08018a99
 8018d4c:	0801987e 	.word	0x0801987e

08018d50 <_printf_common>:
 8018d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d54:	4616      	mov	r6, r2
 8018d56:	4699      	mov	r9, r3
 8018d58:	688a      	ldr	r2, [r1, #8]
 8018d5a:	690b      	ldr	r3, [r1, #16]
 8018d5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018d60:	4293      	cmp	r3, r2
 8018d62:	bfb8      	it	lt
 8018d64:	4613      	movlt	r3, r2
 8018d66:	6033      	str	r3, [r6, #0]
 8018d68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018d6c:	4607      	mov	r7, r0
 8018d6e:	460c      	mov	r4, r1
 8018d70:	b10a      	cbz	r2, 8018d76 <_printf_common+0x26>
 8018d72:	3301      	adds	r3, #1
 8018d74:	6033      	str	r3, [r6, #0]
 8018d76:	6823      	ldr	r3, [r4, #0]
 8018d78:	0699      	lsls	r1, r3, #26
 8018d7a:	bf42      	ittt	mi
 8018d7c:	6833      	ldrmi	r3, [r6, #0]
 8018d7e:	3302      	addmi	r3, #2
 8018d80:	6033      	strmi	r3, [r6, #0]
 8018d82:	6825      	ldr	r5, [r4, #0]
 8018d84:	f015 0506 	ands.w	r5, r5, #6
 8018d88:	d106      	bne.n	8018d98 <_printf_common+0x48>
 8018d8a:	f104 0a19 	add.w	sl, r4, #25
 8018d8e:	68e3      	ldr	r3, [r4, #12]
 8018d90:	6832      	ldr	r2, [r6, #0]
 8018d92:	1a9b      	subs	r3, r3, r2
 8018d94:	42ab      	cmp	r3, r5
 8018d96:	dc26      	bgt.n	8018de6 <_printf_common+0x96>
 8018d98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018d9c:	1e13      	subs	r3, r2, #0
 8018d9e:	6822      	ldr	r2, [r4, #0]
 8018da0:	bf18      	it	ne
 8018da2:	2301      	movne	r3, #1
 8018da4:	0692      	lsls	r2, r2, #26
 8018da6:	d42b      	bmi.n	8018e00 <_printf_common+0xb0>
 8018da8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018dac:	4649      	mov	r1, r9
 8018dae:	4638      	mov	r0, r7
 8018db0:	47c0      	blx	r8
 8018db2:	3001      	adds	r0, #1
 8018db4:	d01e      	beq.n	8018df4 <_printf_common+0xa4>
 8018db6:	6823      	ldr	r3, [r4, #0]
 8018db8:	68e5      	ldr	r5, [r4, #12]
 8018dba:	6832      	ldr	r2, [r6, #0]
 8018dbc:	f003 0306 	and.w	r3, r3, #6
 8018dc0:	2b04      	cmp	r3, #4
 8018dc2:	bf08      	it	eq
 8018dc4:	1aad      	subeq	r5, r5, r2
 8018dc6:	68a3      	ldr	r3, [r4, #8]
 8018dc8:	6922      	ldr	r2, [r4, #16]
 8018dca:	bf0c      	ite	eq
 8018dcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018dd0:	2500      	movne	r5, #0
 8018dd2:	4293      	cmp	r3, r2
 8018dd4:	bfc4      	itt	gt
 8018dd6:	1a9b      	subgt	r3, r3, r2
 8018dd8:	18ed      	addgt	r5, r5, r3
 8018dda:	2600      	movs	r6, #0
 8018ddc:	341a      	adds	r4, #26
 8018dde:	42b5      	cmp	r5, r6
 8018de0:	d11a      	bne.n	8018e18 <_printf_common+0xc8>
 8018de2:	2000      	movs	r0, #0
 8018de4:	e008      	b.n	8018df8 <_printf_common+0xa8>
 8018de6:	2301      	movs	r3, #1
 8018de8:	4652      	mov	r2, sl
 8018dea:	4649      	mov	r1, r9
 8018dec:	4638      	mov	r0, r7
 8018dee:	47c0      	blx	r8
 8018df0:	3001      	adds	r0, #1
 8018df2:	d103      	bne.n	8018dfc <_printf_common+0xac>
 8018df4:	f04f 30ff 	mov.w	r0, #4294967295
 8018df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018dfc:	3501      	adds	r5, #1
 8018dfe:	e7c6      	b.n	8018d8e <_printf_common+0x3e>
 8018e00:	18e1      	adds	r1, r4, r3
 8018e02:	1c5a      	adds	r2, r3, #1
 8018e04:	2030      	movs	r0, #48	; 0x30
 8018e06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018e0a:	4422      	add	r2, r4
 8018e0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018e10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018e14:	3302      	adds	r3, #2
 8018e16:	e7c7      	b.n	8018da8 <_printf_common+0x58>
 8018e18:	2301      	movs	r3, #1
 8018e1a:	4622      	mov	r2, r4
 8018e1c:	4649      	mov	r1, r9
 8018e1e:	4638      	mov	r0, r7
 8018e20:	47c0      	blx	r8
 8018e22:	3001      	adds	r0, #1
 8018e24:	d0e6      	beq.n	8018df4 <_printf_common+0xa4>
 8018e26:	3601      	adds	r6, #1
 8018e28:	e7d9      	b.n	8018dde <_printf_common+0x8e>
	...

08018e2c <_printf_i>:
 8018e2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018e30:	7e0f      	ldrb	r7, [r1, #24]
 8018e32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018e34:	2f78      	cmp	r7, #120	; 0x78
 8018e36:	4691      	mov	r9, r2
 8018e38:	4680      	mov	r8, r0
 8018e3a:	460c      	mov	r4, r1
 8018e3c:	469a      	mov	sl, r3
 8018e3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018e42:	d807      	bhi.n	8018e54 <_printf_i+0x28>
 8018e44:	2f62      	cmp	r7, #98	; 0x62
 8018e46:	d80a      	bhi.n	8018e5e <_printf_i+0x32>
 8018e48:	2f00      	cmp	r7, #0
 8018e4a:	f000 80d8 	beq.w	8018ffe <_printf_i+0x1d2>
 8018e4e:	2f58      	cmp	r7, #88	; 0x58
 8018e50:	f000 80a3 	beq.w	8018f9a <_printf_i+0x16e>
 8018e54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018e58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018e5c:	e03a      	b.n	8018ed4 <_printf_i+0xa8>
 8018e5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018e62:	2b15      	cmp	r3, #21
 8018e64:	d8f6      	bhi.n	8018e54 <_printf_i+0x28>
 8018e66:	a101      	add	r1, pc, #4	; (adr r1, 8018e6c <_printf_i+0x40>)
 8018e68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018e6c:	08018ec5 	.word	0x08018ec5
 8018e70:	08018ed9 	.word	0x08018ed9
 8018e74:	08018e55 	.word	0x08018e55
 8018e78:	08018e55 	.word	0x08018e55
 8018e7c:	08018e55 	.word	0x08018e55
 8018e80:	08018e55 	.word	0x08018e55
 8018e84:	08018ed9 	.word	0x08018ed9
 8018e88:	08018e55 	.word	0x08018e55
 8018e8c:	08018e55 	.word	0x08018e55
 8018e90:	08018e55 	.word	0x08018e55
 8018e94:	08018e55 	.word	0x08018e55
 8018e98:	08018fe5 	.word	0x08018fe5
 8018e9c:	08018f09 	.word	0x08018f09
 8018ea0:	08018fc7 	.word	0x08018fc7
 8018ea4:	08018e55 	.word	0x08018e55
 8018ea8:	08018e55 	.word	0x08018e55
 8018eac:	08019007 	.word	0x08019007
 8018eb0:	08018e55 	.word	0x08018e55
 8018eb4:	08018f09 	.word	0x08018f09
 8018eb8:	08018e55 	.word	0x08018e55
 8018ebc:	08018e55 	.word	0x08018e55
 8018ec0:	08018fcf 	.word	0x08018fcf
 8018ec4:	682b      	ldr	r3, [r5, #0]
 8018ec6:	1d1a      	adds	r2, r3, #4
 8018ec8:	681b      	ldr	r3, [r3, #0]
 8018eca:	602a      	str	r2, [r5, #0]
 8018ecc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018ed0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018ed4:	2301      	movs	r3, #1
 8018ed6:	e0a3      	b.n	8019020 <_printf_i+0x1f4>
 8018ed8:	6820      	ldr	r0, [r4, #0]
 8018eda:	6829      	ldr	r1, [r5, #0]
 8018edc:	0606      	lsls	r6, r0, #24
 8018ede:	f101 0304 	add.w	r3, r1, #4
 8018ee2:	d50a      	bpl.n	8018efa <_printf_i+0xce>
 8018ee4:	680e      	ldr	r6, [r1, #0]
 8018ee6:	602b      	str	r3, [r5, #0]
 8018ee8:	2e00      	cmp	r6, #0
 8018eea:	da03      	bge.n	8018ef4 <_printf_i+0xc8>
 8018eec:	232d      	movs	r3, #45	; 0x2d
 8018eee:	4276      	negs	r6, r6
 8018ef0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018ef4:	485e      	ldr	r0, [pc, #376]	; (8019070 <_printf_i+0x244>)
 8018ef6:	230a      	movs	r3, #10
 8018ef8:	e019      	b.n	8018f2e <_printf_i+0x102>
 8018efa:	680e      	ldr	r6, [r1, #0]
 8018efc:	602b      	str	r3, [r5, #0]
 8018efe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018f02:	bf18      	it	ne
 8018f04:	b236      	sxthne	r6, r6
 8018f06:	e7ef      	b.n	8018ee8 <_printf_i+0xbc>
 8018f08:	682b      	ldr	r3, [r5, #0]
 8018f0a:	6820      	ldr	r0, [r4, #0]
 8018f0c:	1d19      	adds	r1, r3, #4
 8018f0e:	6029      	str	r1, [r5, #0]
 8018f10:	0601      	lsls	r1, r0, #24
 8018f12:	d501      	bpl.n	8018f18 <_printf_i+0xec>
 8018f14:	681e      	ldr	r6, [r3, #0]
 8018f16:	e002      	b.n	8018f1e <_printf_i+0xf2>
 8018f18:	0646      	lsls	r6, r0, #25
 8018f1a:	d5fb      	bpl.n	8018f14 <_printf_i+0xe8>
 8018f1c:	881e      	ldrh	r6, [r3, #0]
 8018f1e:	4854      	ldr	r0, [pc, #336]	; (8019070 <_printf_i+0x244>)
 8018f20:	2f6f      	cmp	r7, #111	; 0x6f
 8018f22:	bf0c      	ite	eq
 8018f24:	2308      	moveq	r3, #8
 8018f26:	230a      	movne	r3, #10
 8018f28:	2100      	movs	r1, #0
 8018f2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018f2e:	6865      	ldr	r5, [r4, #4]
 8018f30:	60a5      	str	r5, [r4, #8]
 8018f32:	2d00      	cmp	r5, #0
 8018f34:	bfa2      	ittt	ge
 8018f36:	6821      	ldrge	r1, [r4, #0]
 8018f38:	f021 0104 	bicge.w	r1, r1, #4
 8018f3c:	6021      	strge	r1, [r4, #0]
 8018f3e:	b90e      	cbnz	r6, 8018f44 <_printf_i+0x118>
 8018f40:	2d00      	cmp	r5, #0
 8018f42:	d04d      	beq.n	8018fe0 <_printf_i+0x1b4>
 8018f44:	4615      	mov	r5, r2
 8018f46:	fbb6 f1f3 	udiv	r1, r6, r3
 8018f4a:	fb03 6711 	mls	r7, r3, r1, r6
 8018f4e:	5dc7      	ldrb	r7, [r0, r7]
 8018f50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018f54:	4637      	mov	r7, r6
 8018f56:	42bb      	cmp	r3, r7
 8018f58:	460e      	mov	r6, r1
 8018f5a:	d9f4      	bls.n	8018f46 <_printf_i+0x11a>
 8018f5c:	2b08      	cmp	r3, #8
 8018f5e:	d10b      	bne.n	8018f78 <_printf_i+0x14c>
 8018f60:	6823      	ldr	r3, [r4, #0]
 8018f62:	07de      	lsls	r6, r3, #31
 8018f64:	d508      	bpl.n	8018f78 <_printf_i+0x14c>
 8018f66:	6923      	ldr	r3, [r4, #16]
 8018f68:	6861      	ldr	r1, [r4, #4]
 8018f6a:	4299      	cmp	r1, r3
 8018f6c:	bfde      	ittt	le
 8018f6e:	2330      	movle	r3, #48	; 0x30
 8018f70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018f74:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018f78:	1b52      	subs	r2, r2, r5
 8018f7a:	6122      	str	r2, [r4, #16]
 8018f7c:	f8cd a000 	str.w	sl, [sp]
 8018f80:	464b      	mov	r3, r9
 8018f82:	aa03      	add	r2, sp, #12
 8018f84:	4621      	mov	r1, r4
 8018f86:	4640      	mov	r0, r8
 8018f88:	f7ff fee2 	bl	8018d50 <_printf_common>
 8018f8c:	3001      	adds	r0, #1
 8018f8e:	d14c      	bne.n	801902a <_printf_i+0x1fe>
 8018f90:	f04f 30ff 	mov.w	r0, #4294967295
 8018f94:	b004      	add	sp, #16
 8018f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018f9a:	4835      	ldr	r0, [pc, #212]	; (8019070 <_printf_i+0x244>)
 8018f9c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8018fa0:	6829      	ldr	r1, [r5, #0]
 8018fa2:	6823      	ldr	r3, [r4, #0]
 8018fa4:	f851 6b04 	ldr.w	r6, [r1], #4
 8018fa8:	6029      	str	r1, [r5, #0]
 8018faa:	061d      	lsls	r5, r3, #24
 8018fac:	d514      	bpl.n	8018fd8 <_printf_i+0x1ac>
 8018fae:	07df      	lsls	r7, r3, #31
 8018fb0:	bf44      	itt	mi
 8018fb2:	f043 0320 	orrmi.w	r3, r3, #32
 8018fb6:	6023      	strmi	r3, [r4, #0]
 8018fb8:	b91e      	cbnz	r6, 8018fc2 <_printf_i+0x196>
 8018fba:	6823      	ldr	r3, [r4, #0]
 8018fbc:	f023 0320 	bic.w	r3, r3, #32
 8018fc0:	6023      	str	r3, [r4, #0]
 8018fc2:	2310      	movs	r3, #16
 8018fc4:	e7b0      	b.n	8018f28 <_printf_i+0xfc>
 8018fc6:	6823      	ldr	r3, [r4, #0]
 8018fc8:	f043 0320 	orr.w	r3, r3, #32
 8018fcc:	6023      	str	r3, [r4, #0]
 8018fce:	2378      	movs	r3, #120	; 0x78
 8018fd0:	4828      	ldr	r0, [pc, #160]	; (8019074 <_printf_i+0x248>)
 8018fd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018fd6:	e7e3      	b.n	8018fa0 <_printf_i+0x174>
 8018fd8:	0659      	lsls	r1, r3, #25
 8018fda:	bf48      	it	mi
 8018fdc:	b2b6      	uxthmi	r6, r6
 8018fde:	e7e6      	b.n	8018fae <_printf_i+0x182>
 8018fe0:	4615      	mov	r5, r2
 8018fe2:	e7bb      	b.n	8018f5c <_printf_i+0x130>
 8018fe4:	682b      	ldr	r3, [r5, #0]
 8018fe6:	6826      	ldr	r6, [r4, #0]
 8018fe8:	6961      	ldr	r1, [r4, #20]
 8018fea:	1d18      	adds	r0, r3, #4
 8018fec:	6028      	str	r0, [r5, #0]
 8018fee:	0635      	lsls	r5, r6, #24
 8018ff0:	681b      	ldr	r3, [r3, #0]
 8018ff2:	d501      	bpl.n	8018ff8 <_printf_i+0x1cc>
 8018ff4:	6019      	str	r1, [r3, #0]
 8018ff6:	e002      	b.n	8018ffe <_printf_i+0x1d2>
 8018ff8:	0670      	lsls	r0, r6, #25
 8018ffa:	d5fb      	bpl.n	8018ff4 <_printf_i+0x1c8>
 8018ffc:	8019      	strh	r1, [r3, #0]
 8018ffe:	2300      	movs	r3, #0
 8019000:	6123      	str	r3, [r4, #16]
 8019002:	4615      	mov	r5, r2
 8019004:	e7ba      	b.n	8018f7c <_printf_i+0x150>
 8019006:	682b      	ldr	r3, [r5, #0]
 8019008:	1d1a      	adds	r2, r3, #4
 801900a:	602a      	str	r2, [r5, #0]
 801900c:	681d      	ldr	r5, [r3, #0]
 801900e:	6862      	ldr	r2, [r4, #4]
 8019010:	2100      	movs	r1, #0
 8019012:	4628      	mov	r0, r5
 8019014:	f7e7 f8fc 	bl	8000210 <memchr>
 8019018:	b108      	cbz	r0, 801901e <_printf_i+0x1f2>
 801901a:	1b40      	subs	r0, r0, r5
 801901c:	6060      	str	r0, [r4, #4]
 801901e:	6863      	ldr	r3, [r4, #4]
 8019020:	6123      	str	r3, [r4, #16]
 8019022:	2300      	movs	r3, #0
 8019024:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019028:	e7a8      	b.n	8018f7c <_printf_i+0x150>
 801902a:	6923      	ldr	r3, [r4, #16]
 801902c:	462a      	mov	r2, r5
 801902e:	4649      	mov	r1, r9
 8019030:	4640      	mov	r0, r8
 8019032:	47d0      	blx	sl
 8019034:	3001      	adds	r0, #1
 8019036:	d0ab      	beq.n	8018f90 <_printf_i+0x164>
 8019038:	6823      	ldr	r3, [r4, #0]
 801903a:	079b      	lsls	r3, r3, #30
 801903c:	d413      	bmi.n	8019066 <_printf_i+0x23a>
 801903e:	68e0      	ldr	r0, [r4, #12]
 8019040:	9b03      	ldr	r3, [sp, #12]
 8019042:	4298      	cmp	r0, r3
 8019044:	bfb8      	it	lt
 8019046:	4618      	movlt	r0, r3
 8019048:	e7a4      	b.n	8018f94 <_printf_i+0x168>
 801904a:	2301      	movs	r3, #1
 801904c:	4632      	mov	r2, r6
 801904e:	4649      	mov	r1, r9
 8019050:	4640      	mov	r0, r8
 8019052:	47d0      	blx	sl
 8019054:	3001      	adds	r0, #1
 8019056:	d09b      	beq.n	8018f90 <_printf_i+0x164>
 8019058:	3501      	adds	r5, #1
 801905a:	68e3      	ldr	r3, [r4, #12]
 801905c:	9903      	ldr	r1, [sp, #12]
 801905e:	1a5b      	subs	r3, r3, r1
 8019060:	42ab      	cmp	r3, r5
 8019062:	dcf2      	bgt.n	801904a <_printf_i+0x21e>
 8019064:	e7eb      	b.n	801903e <_printf_i+0x212>
 8019066:	2500      	movs	r5, #0
 8019068:	f104 0619 	add.w	r6, r4, #25
 801906c:	e7f5      	b.n	801905a <_printf_i+0x22e>
 801906e:	bf00      	nop
 8019070:	08019889 	.word	0x08019889
 8019074:	0801989a 	.word	0x0801989a

08019078 <memmove>:
 8019078:	4288      	cmp	r0, r1
 801907a:	b510      	push	{r4, lr}
 801907c:	eb01 0402 	add.w	r4, r1, r2
 8019080:	d902      	bls.n	8019088 <memmove+0x10>
 8019082:	4284      	cmp	r4, r0
 8019084:	4623      	mov	r3, r4
 8019086:	d807      	bhi.n	8019098 <memmove+0x20>
 8019088:	1e43      	subs	r3, r0, #1
 801908a:	42a1      	cmp	r1, r4
 801908c:	d008      	beq.n	80190a0 <memmove+0x28>
 801908e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019092:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019096:	e7f8      	b.n	801908a <memmove+0x12>
 8019098:	4402      	add	r2, r0
 801909a:	4601      	mov	r1, r0
 801909c:	428a      	cmp	r2, r1
 801909e:	d100      	bne.n	80190a2 <memmove+0x2a>
 80190a0:	bd10      	pop	{r4, pc}
 80190a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80190a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80190aa:	e7f7      	b.n	801909c <memmove+0x24>

080190ac <_free_r>:
 80190ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80190ae:	2900      	cmp	r1, #0
 80190b0:	d044      	beq.n	801913c <_free_r+0x90>
 80190b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80190b6:	9001      	str	r0, [sp, #4]
 80190b8:	2b00      	cmp	r3, #0
 80190ba:	f1a1 0404 	sub.w	r4, r1, #4
 80190be:	bfb8      	it	lt
 80190c0:	18e4      	addlt	r4, r4, r3
 80190c2:	f000 f913 	bl	80192ec <__malloc_lock>
 80190c6:	4a1e      	ldr	r2, [pc, #120]	; (8019140 <_free_r+0x94>)
 80190c8:	9801      	ldr	r0, [sp, #4]
 80190ca:	6813      	ldr	r3, [r2, #0]
 80190cc:	b933      	cbnz	r3, 80190dc <_free_r+0x30>
 80190ce:	6063      	str	r3, [r4, #4]
 80190d0:	6014      	str	r4, [r2, #0]
 80190d2:	b003      	add	sp, #12
 80190d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80190d8:	f000 b90e 	b.w	80192f8 <__malloc_unlock>
 80190dc:	42a3      	cmp	r3, r4
 80190de:	d908      	bls.n	80190f2 <_free_r+0x46>
 80190e0:	6825      	ldr	r5, [r4, #0]
 80190e2:	1961      	adds	r1, r4, r5
 80190e4:	428b      	cmp	r3, r1
 80190e6:	bf01      	itttt	eq
 80190e8:	6819      	ldreq	r1, [r3, #0]
 80190ea:	685b      	ldreq	r3, [r3, #4]
 80190ec:	1949      	addeq	r1, r1, r5
 80190ee:	6021      	streq	r1, [r4, #0]
 80190f0:	e7ed      	b.n	80190ce <_free_r+0x22>
 80190f2:	461a      	mov	r2, r3
 80190f4:	685b      	ldr	r3, [r3, #4]
 80190f6:	b10b      	cbz	r3, 80190fc <_free_r+0x50>
 80190f8:	42a3      	cmp	r3, r4
 80190fa:	d9fa      	bls.n	80190f2 <_free_r+0x46>
 80190fc:	6811      	ldr	r1, [r2, #0]
 80190fe:	1855      	adds	r5, r2, r1
 8019100:	42a5      	cmp	r5, r4
 8019102:	d10b      	bne.n	801911c <_free_r+0x70>
 8019104:	6824      	ldr	r4, [r4, #0]
 8019106:	4421      	add	r1, r4
 8019108:	1854      	adds	r4, r2, r1
 801910a:	42a3      	cmp	r3, r4
 801910c:	6011      	str	r1, [r2, #0]
 801910e:	d1e0      	bne.n	80190d2 <_free_r+0x26>
 8019110:	681c      	ldr	r4, [r3, #0]
 8019112:	685b      	ldr	r3, [r3, #4]
 8019114:	6053      	str	r3, [r2, #4]
 8019116:	4421      	add	r1, r4
 8019118:	6011      	str	r1, [r2, #0]
 801911a:	e7da      	b.n	80190d2 <_free_r+0x26>
 801911c:	d902      	bls.n	8019124 <_free_r+0x78>
 801911e:	230c      	movs	r3, #12
 8019120:	6003      	str	r3, [r0, #0]
 8019122:	e7d6      	b.n	80190d2 <_free_r+0x26>
 8019124:	6825      	ldr	r5, [r4, #0]
 8019126:	1961      	adds	r1, r4, r5
 8019128:	428b      	cmp	r3, r1
 801912a:	bf04      	itt	eq
 801912c:	6819      	ldreq	r1, [r3, #0]
 801912e:	685b      	ldreq	r3, [r3, #4]
 8019130:	6063      	str	r3, [r4, #4]
 8019132:	bf04      	itt	eq
 8019134:	1949      	addeq	r1, r1, r5
 8019136:	6021      	streq	r1, [r4, #0]
 8019138:	6054      	str	r4, [r2, #4]
 801913a:	e7ca      	b.n	80190d2 <_free_r+0x26>
 801913c:	b003      	add	sp, #12
 801913e:	bd30      	pop	{r4, r5, pc}
 8019140:	20013630 	.word	0x20013630

08019144 <sbrk_aligned>:
 8019144:	b570      	push	{r4, r5, r6, lr}
 8019146:	4e0e      	ldr	r6, [pc, #56]	; (8019180 <sbrk_aligned+0x3c>)
 8019148:	460c      	mov	r4, r1
 801914a:	6831      	ldr	r1, [r6, #0]
 801914c:	4605      	mov	r5, r0
 801914e:	b911      	cbnz	r1, 8019156 <sbrk_aligned+0x12>
 8019150:	f000 f8bc 	bl	80192cc <_sbrk_r>
 8019154:	6030      	str	r0, [r6, #0]
 8019156:	4621      	mov	r1, r4
 8019158:	4628      	mov	r0, r5
 801915a:	f000 f8b7 	bl	80192cc <_sbrk_r>
 801915e:	1c43      	adds	r3, r0, #1
 8019160:	d00a      	beq.n	8019178 <sbrk_aligned+0x34>
 8019162:	1cc4      	adds	r4, r0, #3
 8019164:	f024 0403 	bic.w	r4, r4, #3
 8019168:	42a0      	cmp	r0, r4
 801916a:	d007      	beq.n	801917c <sbrk_aligned+0x38>
 801916c:	1a21      	subs	r1, r4, r0
 801916e:	4628      	mov	r0, r5
 8019170:	f000 f8ac 	bl	80192cc <_sbrk_r>
 8019174:	3001      	adds	r0, #1
 8019176:	d101      	bne.n	801917c <sbrk_aligned+0x38>
 8019178:	f04f 34ff 	mov.w	r4, #4294967295
 801917c:	4620      	mov	r0, r4
 801917e:	bd70      	pop	{r4, r5, r6, pc}
 8019180:	20013634 	.word	0x20013634

08019184 <_malloc_r>:
 8019184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019188:	1ccd      	adds	r5, r1, #3
 801918a:	f025 0503 	bic.w	r5, r5, #3
 801918e:	3508      	adds	r5, #8
 8019190:	2d0c      	cmp	r5, #12
 8019192:	bf38      	it	cc
 8019194:	250c      	movcc	r5, #12
 8019196:	2d00      	cmp	r5, #0
 8019198:	4607      	mov	r7, r0
 801919a:	db01      	blt.n	80191a0 <_malloc_r+0x1c>
 801919c:	42a9      	cmp	r1, r5
 801919e:	d905      	bls.n	80191ac <_malloc_r+0x28>
 80191a0:	230c      	movs	r3, #12
 80191a2:	603b      	str	r3, [r7, #0]
 80191a4:	2600      	movs	r6, #0
 80191a6:	4630      	mov	r0, r6
 80191a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80191ac:	4e2e      	ldr	r6, [pc, #184]	; (8019268 <_malloc_r+0xe4>)
 80191ae:	f000 f89d 	bl	80192ec <__malloc_lock>
 80191b2:	6833      	ldr	r3, [r6, #0]
 80191b4:	461c      	mov	r4, r3
 80191b6:	bb34      	cbnz	r4, 8019206 <_malloc_r+0x82>
 80191b8:	4629      	mov	r1, r5
 80191ba:	4638      	mov	r0, r7
 80191bc:	f7ff ffc2 	bl	8019144 <sbrk_aligned>
 80191c0:	1c43      	adds	r3, r0, #1
 80191c2:	4604      	mov	r4, r0
 80191c4:	d14d      	bne.n	8019262 <_malloc_r+0xde>
 80191c6:	6834      	ldr	r4, [r6, #0]
 80191c8:	4626      	mov	r6, r4
 80191ca:	2e00      	cmp	r6, #0
 80191cc:	d140      	bne.n	8019250 <_malloc_r+0xcc>
 80191ce:	6823      	ldr	r3, [r4, #0]
 80191d0:	4631      	mov	r1, r6
 80191d2:	4638      	mov	r0, r7
 80191d4:	eb04 0803 	add.w	r8, r4, r3
 80191d8:	f000 f878 	bl	80192cc <_sbrk_r>
 80191dc:	4580      	cmp	r8, r0
 80191de:	d13a      	bne.n	8019256 <_malloc_r+0xd2>
 80191e0:	6821      	ldr	r1, [r4, #0]
 80191e2:	3503      	adds	r5, #3
 80191e4:	1a6d      	subs	r5, r5, r1
 80191e6:	f025 0503 	bic.w	r5, r5, #3
 80191ea:	3508      	adds	r5, #8
 80191ec:	2d0c      	cmp	r5, #12
 80191ee:	bf38      	it	cc
 80191f0:	250c      	movcc	r5, #12
 80191f2:	4629      	mov	r1, r5
 80191f4:	4638      	mov	r0, r7
 80191f6:	f7ff ffa5 	bl	8019144 <sbrk_aligned>
 80191fa:	3001      	adds	r0, #1
 80191fc:	d02b      	beq.n	8019256 <_malloc_r+0xd2>
 80191fe:	6823      	ldr	r3, [r4, #0]
 8019200:	442b      	add	r3, r5
 8019202:	6023      	str	r3, [r4, #0]
 8019204:	e00e      	b.n	8019224 <_malloc_r+0xa0>
 8019206:	6822      	ldr	r2, [r4, #0]
 8019208:	1b52      	subs	r2, r2, r5
 801920a:	d41e      	bmi.n	801924a <_malloc_r+0xc6>
 801920c:	2a0b      	cmp	r2, #11
 801920e:	d916      	bls.n	801923e <_malloc_r+0xba>
 8019210:	1961      	adds	r1, r4, r5
 8019212:	42a3      	cmp	r3, r4
 8019214:	6025      	str	r5, [r4, #0]
 8019216:	bf18      	it	ne
 8019218:	6059      	strne	r1, [r3, #4]
 801921a:	6863      	ldr	r3, [r4, #4]
 801921c:	bf08      	it	eq
 801921e:	6031      	streq	r1, [r6, #0]
 8019220:	5162      	str	r2, [r4, r5]
 8019222:	604b      	str	r3, [r1, #4]
 8019224:	4638      	mov	r0, r7
 8019226:	f104 060b 	add.w	r6, r4, #11
 801922a:	f000 f865 	bl	80192f8 <__malloc_unlock>
 801922e:	f026 0607 	bic.w	r6, r6, #7
 8019232:	1d23      	adds	r3, r4, #4
 8019234:	1af2      	subs	r2, r6, r3
 8019236:	d0b6      	beq.n	80191a6 <_malloc_r+0x22>
 8019238:	1b9b      	subs	r3, r3, r6
 801923a:	50a3      	str	r3, [r4, r2]
 801923c:	e7b3      	b.n	80191a6 <_malloc_r+0x22>
 801923e:	6862      	ldr	r2, [r4, #4]
 8019240:	42a3      	cmp	r3, r4
 8019242:	bf0c      	ite	eq
 8019244:	6032      	streq	r2, [r6, #0]
 8019246:	605a      	strne	r2, [r3, #4]
 8019248:	e7ec      	b.n	8019224 <_malloc_r+0xa0>
 801924a:	4623      	mov	r3, r4
 801924c:	6864      	ldr	r4, [r4, #4]
 801924e:	e7b2      	b.n	80191b6 <_malloc_r+0x32>
 8019250:	4634      	mov	r4, r6
 8019252:	6876      	ldr	r6, [r6, #4]
 8019254:	e7b9      	b.n	80191ca <_malloc_r+0x46>
 8019256:	230c      	movs	r3, #12
 8019258:	603b      	str	r3, [r7, #0]
 801925a:	4638      	mov	r0, r7
 801925c:	f000 f84c 	bl	80192f8 <__malloc_unlock>
 8019260:	e7a1      	b.n	80191a6 <_malloc_r+0x22>
 8019262:	6025      	str	r5, [r4, #0]
 8019264:	e7de      	b.n	8019224 <_malloc_r+0xa0>
 8019266:	bf00      	nop
 8019268:	20013630 	.word	0x20013630

0801926c <_realloc_r>:
 801926c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019270:	4680      	mov	r8, r0
 8019272:	4614      	mov	r4, r2
 8019274:	460e      	mov	r6, r1
 8019276:	b921      	cbnz	r1, 8019282 <_realloc_r+0x16>
 8019278:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801927c:	4611      	mov	r1, r2
 801927e:	f7ff bf81 	b.w	8019184 <_malloc_r>
 8019282:	b92a      	cbnz	r2, 8019290 <_realloc_r+0x24>
 8019284:	f7ff ff12 	bl	80190ac <_free_r>
 8019288:	4625      	mov	r5, r4
 801928a:	4628      	mov	r0, r5
 801928c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019290:	f000 f838 	bl	8019304 <_malloc_usable_size_r>
 8019294:	4284      	cmp	r4, r0
 8019296:	4607      	mov	r7, r0
 8019298:	d802      	bhi.n	80192a0 <_realloc_r+0x34>
 801929a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801929e:	d812      	bhi.n	80192c6 <_realloc_r+0x5a>
 80192a0:	4621      	mov	r1, r4
 80192a2:	4640      	mov	r0, r8
 80192a4:	f7ff ff6e 	bl	8019184 <_malloc_r>
 80192a8:	4605      	mov	r5, r0
 80192aa:	2800      	cmp	r0, #0
 80192ac:	d0ed      	beq.n	801928a <_realloc_r+0x1e>
 80192ae:	42bc      	cmp	r4, r7
 80192b0:	4622      	mov	r2, r4
 80192b2:	4631      	mov	r1, r6
 80192b4:	bf28      	it	cs
 80192b6:	463a      	movcs	r2, r7
 80192b8:	f7ff fbb8 	bl	8018a2c <memcpy>
 80192bc:	4631      	mov	r1, r6
 80192be:	4640      	mov	r0, r8
 80192c0:	f7ff fef4 	bl	80190ac <_free_r>
 80192c4:	e7e1      	b.n	801928a <_realloc_r+0x1e>
 80192c6:	4635      	mov	r5, r6
 80192c8:	e7df      	b.n	801928a <_realloc_r+0x1e>
	...

080192cc <_sbrk_r>:
 80192cc:	b538      	push	{r3, r4, r5, lr}
 80192ce:	4d06      	ldr	r5, [pc, #24]	; (80192e8 <_sbrk_r+0x1c>)
 80192d0:	2300      	movs	r3, #0
 80192d2:	4604      	mov	r4, r0
 80192d4:	4608      	mov	r0, r1
 80192d6:	602b      	str	r3, [r5, #0]
 80192d8:	f7ed fc90 	bl	8006bfc <_sbrk>
 80192dc:	1c43      	adds	r3, r0, #1
 80192de:	d102      	bne.n	80192e6 <_sbrk_r+0x1a>
 80192e0:	682b      	ldr	r3, [r5, #0]
 80192e2:	b103      	cbz	r3, 80192e6 <_sbrk_r+0x1a>
 80192e4:	6023      	str	r3, [r4, #0]
 80192e6:	bd38      	pop	{r3, r4, r5, pc}
 80192e8:	20013638 	.word	0x20013638

080192ec <__malloc_lock>:
 80192ec:	4801      	ldr	r0, [pc, #4]	; (80192f4 <__malloc_lock+0x8>)
 80192ee:	f000 b811 	b.w	8019314 <__retarget_lock_acquire_recursive>
 80192f2:	bf00      	nop
 80192f4:	2001363c 	.word	0x2001363c

080192f8 <__malloc_unlock>:
 80192f8:	4801      	ldr	r0, [pc, #4]	; (8019300 <__malloc_unlock+0x8>)
 80192fa:	f000 b80c 	b.w	8019316 <__retarget_lock_release_recursive>
 80192fe:	bf00      	nop
 8019300:	2001363c 	.word	0x2001363c

08019304 <_malloc_usable_size_r>:
 8019304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019308:	1f18      	subs	r0, r3, #4
 801930a:	2b00      	cmp	r3, #0
 801930c:	bfbc      	itt	lt
 801930e:	580b      	ldrlt	r3, [r1, r0]
 8019310:	18c0      	addlt	r0, r0, r3
 8019312:	4770      	bx	lr

08019314 <__retarget_lock_acquire_recursive>:
 8019314:	4770      	bx	lr

08019316 <__retarget_lock_release_recursive>:
 8019316:	4770      	bx	lr

08019318 <_init>:
 8019318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801931a:	bf00      	nop
 801931c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801931e:	bc08      	pop	{r3}
 8019320:	469e      	mov	lr, r3
 8019322:	4770      	bx	lr

08019324 <_fini>:
 8019324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019326:	bf00      	nop
 8019328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801932a:	bc08      	pop	{r3}
 801932c:	469e      	mov	lr, r3
 801932e:	4770      	bx	lr
