
Firmware_Principal_E19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017e68  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  08018038  08018038  00028038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080185c4  080185c4  000301d8  2**0
                  CONTENTS
  4 .ARM          00000008  080185c4  080185c4  000285c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080185cc  080185cc  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080185cc  080185cc  000285cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080185d0  080185d0  000285d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  080185d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005614  200001d8  080187ac  000301d8  2**2
                  ALLOC
 10 ._user_heap_stack 00008004  200057ec  080187ac  000357ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000417b4  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000075f8  00000000  00000000  000719bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002368  00000000  00000000  00078fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002060  00000000  00000000  0007b320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002eb07  00000000  00000000  0007d380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035c21  00000000  00000000  000abe87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3993  00000000  00000000  000e1aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d543b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000096a0  00000000  00000000  001d5490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08018020 	.word	0x08018020

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	08018020 	.word	0x08018020

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <FT_CAN_FilterConfig>:
 */

#include "ft_can.h"

HAL_StatusTypeDef FT_CAN_FilterConfig(CAN_HandleTypeDef *hcan, uint16_t FT_Product, uint8_t filter_bank_position, uint32_t Filter_FIFO)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b090      	sub	sp, #64	; 0x40
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	460b      	mov	r3, r1
 80005b4:	817b      	strh	r3, [r7, #10]
 80005b6:	4613      	mov	r3, r2
 80005b8:	727b      	strb	r3, [r7, #9]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filter_id = FT_Product << 13, mask_id = 0x1FF80000;
 80005ba:	897b      	ldrh	r3, [r7, #10]
 80005bc:	035b      	lsls	r3, r3, #13
 80005be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005c0:	4b13      	ldr	r3, [pc, #76]	; (8000610 <FT_CAN_FilterConfig+0x68>)
 80005c2:	63bb      	str	r3, [r7, #56]	; 0x38

	sFilterConfig.FilterBank = filter_bank_position;
 80005c4:	7a7b      	ldrb	r3, [r7, #9]
 80005c6:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005c8:	2300      	movs	r3, #0
 80005ca:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005cc:	2301      	movs	r3, #1
 80005ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 80005d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005d2:	0b5b      	lsrs	r3, r3, #13
 80005d4:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 80005d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005d8:	00db      	lsls	r3, r3, #3
 80005da:	b29b      	uxth	r3, r3
 80005dc:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 80005de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80005e0:	0b5b      	lsrs	r3, r3, #13
 80005e2:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 80005e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80005e6:	00db      	lsls	r3, r3, #3
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterFIFOAssignment = Filter_FIFO;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterActivation = ENABLE;
 80005f0:	2301      	movs	r3, #1
 80005f2:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.SlaveStartFilterBank = 14 + filter_bank_position;
 80005f4:	7a7b      	ldrb	r3, [r7, #9]
 80005f6:	330e      	adds	r3, #14
 80005f8:	637b      	str	r3, [r7, #52]	; 0x34

	return HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 80005fa:	f107 0310 	add.w	r3, r7, #16
 80005fe:	4619      	mov	r1, r3
 8000600:	68f8      	ldr	r0, [r7, #12]
 8000602:	f006 fd83 	bl	800710c <HAL_CAN_ConfigFilter>
 8000606:	4603      	mov	r3, r0
}
 8000608:	4618      	mov	r0, r3
 800060a:	3740      	adds	r7, #64	; 0x40
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	1ff80000 	.word	0x1ff80000

08000614 <FT_CAN_ProcessData>:

#ifndef FT_CAN_SIMPLE

static void FT_CAN_ProcessData(FT_Data* FT_Data_Struct)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	uint16_t id = FT_Data_Struct->data_id;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8000622:	81fb      	strh	r3, [r7, #14]
	uint16_t data = FT_Data_Struct->data_content;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800062a:	81bb      	strh	r3, [r7, #12]

	if((id & 0x1) == 0x1)
 800062c:	89fb      	ldrh	r3, [r7, #14]
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	2b00      	cmp	r3, #0
 8000634:	f040 823a 	bne.w	8000aac <FT_CAN_ProcessData+0x498>
	{
		return;
	}

	switch(id >> 1)
 8000638:	89fb      	ldrh	r3, [r7, #14]
 800063a:	085b      	lsrs	r3, r3, #1
 800063c:	b29b      	uxth	r3, r3
 800063e:	2b8d      	cmp	r3, #141	; 0x8d
 8000640:	f300 8166 	bgt.w	8000910 <FT_CAN_ProcessData+0x2fc>
 8000644:	2b00      	cmp	r3, #0
 8000646:	dc41      	bgt.n	80006cc <FT_CAN_ProcessData+0xb8>
 8000648:	e229      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
 800064a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800064e:	2b1b      	cmp	r3, #27
 8000650:	f200 8225 	bhi.w	8000a9e <FT_CAN_ProcessData+0x48a>
 8000654:	a201      	add	r2, pc, #4	; (adr r2, 800065c <FT_CAN_ProcessData+0x48>)
 8000656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065a:	bf00      	nop
 800065c:	08000a63 	.word	0x08000a63
 8000660:	08000a9f 	.word	0x08000a9f
 8000664:	08000a9f 	.word	0x08000a9f
 8000668:	08000a9f 	.word	0x08000a9f
 800066c:	08000a9f 	.word	0x08000a9f
 8000670:	08000a9f 	.word	0x08000a9f
 8000674:	08000a9f 	.word	0x08000a9f
 8000678:	08000a9f 	.word	0x08000a9f
 800067c:	08000a9f 	.word	0x08000a9f
 8000680:	08000a9f 	.word	0x08000a9f
 8000684:	08000a9f 	.word	0x08000a9f
 8000688:	08000a9f 	.word	0x08000a9f
 800068c:	08000a9f 	.word	0x08000a9f
 8000690:	08000a9f 	.word	0x08000a9f
 8000694:	08000a9f 	.word	0x08000a9f
 8000698:	08000a9f 	.word	0x08000a9f
 800069c:	08000a9f 	.word	0x08000a9f
 80006a0:	08000a9f 	.word	0x08000a9f
 80006a4:	08000a6d 	.word	0x08000a6d
 80006a8:	08000a9f 	.word	0x08000a9f
 80006ac:	08000a9f 	.word	0x08000a9f
 80006b0:	08000a9f 	.word	0x08000a9f
 80006b4:	08000a9f 	.word	0x08000a9f
 80006b8:	08000a9f 	.word	0x08000a9f
 80006bc:	08000a77 	.word	0x08000a77
 80006c0:	08000a81 	.word	0x08000a81
 80006c4:	08000a8b 	.word	0x08000a8b
 80006c8:	08000a95 	.word	0x08000a95
 80006cc:	3b01      	subs	r3, #1
 80006ce:	2b8c      	cmp	r3, #140	; 0x8c
 80006d0:	f200 81e5 	bhi.w	8000a9e <FT_CAN_ProcessData+0x48a>
 80006d4:	a201      	add	r2, pc, #4	; (adr r2, 80006dc <FT_CAN_ProcessData+0xc8>)
 80006d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006da:	bf00      	nop
 80006dc:	08000923 	.word	0x08000923
 80006e0:	0800092f 	.word	0x0800092f
 80006e4:	08000939 	.word	0x08000939
 80006e8:	08000943 	.word	0x08000943
 80006ec:	0800094d 	.word	0x0800094d
 80006f0:	08000959 	.word	0x08000959
 80006f4:	08000963 	.word	0x08000963
 80006f8:	080009a5 	.word	0x080009a5
 80006fc:	080009af 	.word	0x080009af
 8000700:	080009b9 	.word	0x080009b9
 8000704:	080009c3 	.word	0x080009c3
 8000708:	080009cd 	.word	0x080009cd
 800070c:	080009d7 	.word	0x080009d7
 8000710:	080009e1 	.word	0x080009e1
 8000714:	080009eb 	.word	0x080009eb
 8000718:	080009f5 	.word	0x080009f5
 800071c:	0800096d 	.word	0x0800096d
 8000720:	08000a9f 	.word	0x08000a9f
 8000724:	08000a9f 	.word	0x08000a9f
 8000728:	08000a9f 	.word	0x08000a9f
 800072c:	08000a9f 	.word	0x08000a9f
 8000730:	08000a9f 	.word	0x08000a9f
 8000734:	08000a9f 	.word	0x08000a9f
 8000738:	08000a9f 	.word	0x08000a9f
 800073c:	08000a9f 	.word	0x08000a9f
 8000740:	08000a9f 	.word	0x08000a9f
 8000744:	08000a9f 	.word	0x08000a9f
 8000748:	08000a9f 	.word	0x08000a9f
 800074c:	08000a9f 	.word	0x08000a9f
 8000750:	08000a9f 	.word	0x08000a9f
 8000754:	08000a9f 	.word	0x08000a9f
 8000758:	08000a9f 	.word	0x08000a9f
 800075c:	08000a9f 	.word	0x08000a9f
 8000760:	08000a9f 	.word	0x08000a9f
 8000764:	08000a9f 	.word	0x08000a9f
 8000768:	08000a9f 	.word	0x08000a9f
 800076c:	08000a9f 	.word	0x08000a9f
 8000770:	08000a9f 	.word	0x08000a9f
 8000774:	08000977 	.word	0x08000977
 8000778:	08000a9f 	.word	0x08000a9f
 800077c:	08000a9f 	.word	0x08000a9f
 8000780:	08000a9f 	.word	0x08000a9f
 8000784:	08000a9f 	.word	0x08000a9f
 8000788:	08000a9f 	.word	0x08000a9f
 800078c:	08000a9f 	.word	0x08000a9f
 8000790:	08000a9f 	.word	0x08000a9f
 8000794:	08000a9f 	.word	0x08000a9f
 8000798:	08000a9f 	.word	0x08000a9f
 800079c:	08000a9f 	.word	0x08000a9f
 80007a0:	08000a9f 	.word	0x08000a9f
 80007a4:	08000a9f 	.word	0x08000a9f
 80007a8:	08000a9f 	.word	0x08000a9f
 80007ac:	08000a9f 	.word	0x08000a9f
 80007b0:	08000a9f 	.word	0x08000a9f
 80007b4:	08000a9f 	.word	0x08000a9f
 80007b8:	08000a9f 	.word	0x08000a9f
 80007bc:	08000a9f 	.word	0x08000a9f
 80007c0:	08000a9f 	.word	0x08000a9f
 80007c4:	08000a9f 	.word	0x08000a9f
 80007c8:	08000a9f 	.word	0x08000a9f
 80007cc:	08000a9f 	.word	0x08000a9f
 80007d0:	08000a9f 	.word	0x08000a9f
 80007d4:	08000a9f 	.word	0x08000a9f
 80007d8:	08000a9f 	.word	0x08000a9f
 80007dc:	08000a9f 	.word	0x08000a9f
 80007e0:	08000981 	.word	0x08000981
 80007e4:	08000a9f 	.word	0x08000a9f
 80007e8:	08000a9f 	.word	0x08000a9f
 80007ec:	08000a9f 	.word	0x08000a9f
 80007f0:	08000a9f 	.word	0x08000a9f
 80007f4:	08000a9f 	.word	0x08000a9f
 80007f8:	080009ff 	.word	0x080009ff
 80007fc:	08000a09 	.word	0x08000a09
 8000800:	08000a13 	.word	0x08000a13
 8000804:	08000a1d 	.word	0x08000a1d
 8000808:	08000a27 	.word	0x08000a27
 800080c:	08000a31 	.word	0x08000a31
 8000810:	08000a3b 	.word	0x08000a3b
 8000814:	08000a45 	.word	0x08000a45
 8000818:	08000a4f 	.word	0x08000a4f
 800081c:	08000a59 	.word	0x08000a59
 8000820:	08000a9f 	.word	0x08000a9f
 8000824:	08000a9f 	.word	0x08000a9f
 8000828:	08000a9f 	.word	0x08000a9f
 800082c:	08000a9f 	.word	0x08000a9f
 8000830:	08000a9f 	.word	0x08000a9f
 8000834:	08000a9f 	.word	0x08000a9f
 8000838:	08000a9f 	.word	0x08000a9f
 800083c:	08000a9f 	.word	0x08000a9f
 8000840:	08000a9f 	.word	0x08000a9f
 8000844:	08000a9f 	.word	0x08000a9f
 8000848:	08000a9f 	.word	0x08000a9f
 800084c:	08000a9f 	.word	0x08000a9f
 8000850:	08000a9f 	.word	0x08000a9f
 8000854:	08000a9f 	.word	0x08000a9f
 8000858:	08000a9f 	.word	0x08000a9f
 800085c:	08000a9f 	.word	0x08000a9f
 8000860:	08000a9f 	.word	0x08000a9f
 8000864:	08000a9f 	.word	0x08000a9f
 8000868:	08000a9f 	.word	0x08000a9f
 800086c:	08000a9f 	.word	0x08000a9f
 8000870:	08000a9f 	.word	0x08000a9f
 8000874:	08000a9f 	.word	0x08000a9f
 8000878:	08000a9f 	.word	0x08000a9f
 800087c:	08000a9f 	.word	0x08000a9f
 8000880:	08000a9f 	.word	0x08000a9f
 8000884:	08000a9f 	.word	0x08000a9f
 8000888:	08000a9f 	.word	0x08000a9f
 800088c:	08000a9f 	.word	0x08000a9f
 8000890:	08000a9f 	.word	0x08000a9f
 8000894:	08000a9f 	.word	0x08000a9f
 8000898:	08000a9f 	.word	0x08000a9f
 800089c:	08000a9f 	.word	0x08000a9f
 80008a0:	08000a9f 	.word	0x08000a9f
 80008a4:	08000a9f 	.word	0x08000a9f
 80008a8:	08000a9f 	.word	0x08000a9f
 80008ac:	08000a9f 	.word	0x08000a9f
 80008b0:	08000a9f 	.word	0x08000a9f
 80008b4:	08000a9f 	.word	0x08000a9f
 80008b8:	08000a9f 	.word	0x08000a9f
 80008bc:	08000a9f 	.word	0x08000a9f
 80008c0:	08000a9f 	.word	0x08000a9f
 80008c4:	08000a9f 	.word	0x08000a9f
 80008c8:	08000a9f 	.word	0x08000a9f
 80008cc:	08000a9f 	.word	0x08000a9f
 80008d0:	08000a9f 	.word	0x08000a9f
 80008d4:	08000a9f 	.word	0x08000a9f
 80008d8:	08000a9f 	.word	0x08000a9f
 80008dc:	08000a9f 	.word	0x08000a9f
 80008e0:	08000a9f 	.word	0x08000a9f
 80008e4:	08000a9f 	.word	0x08000a9f
 80008e8:	08000a9f 	.word	0x08000a9f
 80008ec:	08000a9f 	.word	0x08000a9f
 80008f0:	08000a9f 	.word	0x08000a9f
 80008f4:	08000a9f 	.word	0x08000a9f
 80008f8:	08000a9f 	.word	0x08000a9f
 80008fc:	08000a9f 	.word	0x08000a9f
 8000900:	08000a9f 	.word	0x08000a9f
 8000904:	08000a9f 	.word	0x08000a9f
 8000908:	0800098d 	.word	0x0800098d
 800090c:	08000999 	.word	0x08000999
 8000910:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8000914:	f280 80c3 	bge.w	8000a9e <FT_CAN_ProcessData+0x48a>
 8000918:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 800091c:	f6bf ae95 	bge.w	800064a <FT_CAN_ProcessData+0x36>
 8000920:	e0bd      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
	{
		case 0x0001: //TPS
			FT_Data_Struct->tps = data;
 8000922:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			break;
 800092c:	e0b7      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0002: //MAP
			FT_Data_Struct->map = data;
 800092e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	87da      	strh	r2, [r3, #62]	; 0x3e
			break;
 8000936:	e0b2      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0003: //IAT
			FT_Data_Struct->iat = data;
 8000938:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	86da      	strh	r2, [r3, #54]	; 0x36
			break;
 8000940:	e0ad      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0004: //ECT
			FT_Data_Struct->ect = data;
 8000942:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	865a      	strh	r2, [r3, #50]	; 0x32
			break;
 800094a:	e0a8      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0005: //Oil Pressure
			FT_Data_Struct->oil_pressure = data;
 800094c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			break;
 8000956:	e0a2      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0006: //Fuel Pressure
			FT_Data_Struct->fuel_pressure = data;
 8000958:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	871a      	strh	r2, [r3, #56]	; 0x38
			break;
 8000960:	e09d      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0007: //Coolant Pressure
			FT_Data_Struct->coolant_pressure = data;
 8000962:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	869a      	strh	r2, [r3, #52]	; 0x34
			break;
 800096a:	e098      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0011: //Gear
			FT_Data_Struct->gear = data;
 800096c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	875a      	strh	r2, [r3, #58]	; 0x3a
			break;
 8000974:	e093      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0027: //Exhaust Lambda
			FT_Data_Struct->lambda = data;
 8000976:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	879a      	strh	r2, [r3, #60]	; 0x3c
			break;
 800097e:	e08e      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0042: //RPM
			FT_Data_Struct->rpm = data;
 8000980:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			break;
 800098a:	e088      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x008C: //Oil Temperature
			FT_Data_Struct->oil_temperature = data;
 800098c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			break;
 8000996:	e082      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x008D: //Pit Limit Switch
			FT_Data_Struct->pit_limiter = data;
 8000998:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			break;
 80009a2:	e07c      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
			break;
#endif

#ifdef FT_CAN_EXTRA
		case 0x0008: //Launch Mode
			FT_Data_Struct->launch_mode = data;
 80009a4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	831a      	strh	r2, [r3, #24]
			break;
 80009ac:	e077      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0009: //Battery Voltage
			FT_Data_Struct->battery_voltage = data;
 80009ae:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	805a      	strh	r2, [r3, #2]
			break;
 80009b6:	e072      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x000A: //Traction Speed
			FT_Data_Struct->traction_speed = data;
 80009b8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	845a      	strh	r2, [r3, #34]	; 0x22
			break;
 80009c0:	e06d      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x000B: //Drag Speed
			FT_Data_Struct->drag_speed = data;
 80009c2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	841a      	strh	r2, [r3, #32]
			break;
 80009ca:	e068      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x000C: //Wheel Speed FL
			FT_Data_Struct->wheel_speed_fl = data;
 80009cc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	849a      	strh	r2, [r3, #36]	; 0x24
			break;
 80009d4:	e063      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x000D: //Wheel Speed FR
			FT_Data_Struct->wheel_speed_fr = data;
 80009d6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	84da      	strh	r2, [r3, #38]	; 0x26
			break;
 80009de:	e05e      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x000E: //Wheel Speed RL
			FT_Data_Struct->wheel_speed_rl = data;
 80009e0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	851a      	strh	r2, [r3, #40]	; 0x28
			break;
 80009e8:	e059      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x000F: //Wheel Speed RR
			FT_Data_Struct->wheel_speed_rr = data;
 80009ea:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
 80009f2:	e054      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0010: //Driveshaft RPM
			FT_Data_Struct->driveshaft_rpm = data;
 80009f4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	821a      	strh	r2, [r3, #16]
			break;
 80009fc:	e04f      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0048: //2-Step
			FT_Data_Struct->two_step_signal = data;
 80009fe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	839a      	strh	r2, [r3, #28]
			break;
 8000a06:	e04a      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0049: //3-Step
			FT_Data_Struct->three_step_signal = data;
 8000a08:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	83da      	strh	r2, [r3, #30]
			break;
 8000a10:	e045      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x004A: //Burnout
			FT_Data_Struct->burnout_signal = data;
 8000a12:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	835a      	strh	r2, [r3, #26]
			break;
 8000a1a:	e040      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x004B: //Fuel Cut
			FT_Data_Struct->fuel_cut = data;
 8000a1c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	819a      	strh	r2, [r3, #12]
			break;
 8000a24:	e03b      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x004C: //Air Conditioning
			FT_Data_Struct->air_conditioning = data;
 8000a26:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	801a      	strh	r2, [r3, #0]
			break;
 8000a2e:	e036      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x004D: //ElectroFAN
			FT_Data_Struct->electro_fan = data;
 8000a30:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	811a      	strh	r2, [r3, #8]
			break;
 8000a38:	e031      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x004E: //Gear Cut
			FT_Data_Struct->gear_cut = data;
 8000a3a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	825a      	strh	r2, [r3, #18]
			break;
 8000a42:	e02c      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x004F: //Gear Retard
			FT_Data_Struct->gear_retard = data;
 8000a44:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	829a      	strh	r2, [r3, #20]
			break;
 8000a4c:	e027      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0050: //Gear Sensor Voltage
			FT_Data_Struct->gear_sensor_voltage = data;
 8000a4e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	82da      	strh	r2, [r3, #22]
			break;
 8000a56:	e022      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0051: //Lambda Meter (Average)
			FT_Data_Struct->lambda_average = data;
 8000a58:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	815a      	strh	r2, [r3, #10]
			break;
 8000a60:	e01d      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0138: //Battery Temperature
			FT_Data_Struct->battery_temperature = data;
 8000a62:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	809a      	strh	r2, [r3, #4]
			break;
 8000a6a:	e018      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x014A: //Self Dial Time
			FT_Data_Struct->self_dial = data;
 8000a6c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	861a      	strh	r2, [r3, #48]	; 0x30
			break;
 8000a74:	e013      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0150: //Total Fuel Flow
			FT_Data_Struct->total_fuel_flow = data;
 8000a76:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	81da      	strh	r2, [r3, #14]
			break;
 8000a7e:	e00e      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0151: //Brake Pressure
			FT_Data_Struct->brake_pressure = data;
 8000a80:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	80da      	strh	r2, [r3, #6]
			break;
 8000a88:	e009      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0152: //Generic Outputs State
			FT_Data_Struct->generic_outputs_state = data;
 8000a8a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	85da      	strh	r2, [r3, #46]	; 0x2e
			break;
 8000a92:	e004      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0153: //Day/Night State
			FT_Data_Struct->day_night_state = data;
 8000a94:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	859a      	strh	r2, [r3, #44]	; 0x2c
			break;
 8000a9c:	bf00      	nop
	}
#endif

	FT_CAN_ProcessCustomData(id, data);
 8000a9e:	89ba      	ldrh	r2, [r7, #12]
 8000aa0:	89fb      	ldrh	r3, [r7, #14]
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f000 f805 	bl	8000ab4 <FT_CAN_ProcessCustomData>
 8000aaa:	e000      	b.n	8000aae <FT_CAN_ProcessData+0x49a>
		return;
 8000aac:	bf00      	nop
}
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <FT_CAN_ProcessCustomData>:

__weak void FT_CAN_ProcessCustomData(uint16_t id, uint16_t data)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	460a      	mov	r2, r1
 8000abe:	80fb      	strh	r3, [r7, #6]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	80bb      	strh	r3, [r7, #4]
	UNUSED(id);
	UNUSED(data);
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <FT_CAN_ReceiveData>:

#endif

void FT_CAN_ReceiveData(uint32_t RxID, uint32_t RxLength, uint8_t* pData, FT_Data* FT_Data_Struct)
{
 8000ad0:	b5b0      	push	{r4, r5, r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	466b      	mov	r3, sp
 8000ae0:	461d      	mov	r5, r3
	uint32_t extid = (RxID & 0x1FF80000) >> 13;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	0b5a      	lsrs	r2, r3, #13
 8000ae6:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8000aea:	4013      	ands	r3, r2
 8000aec:	61bb      	str	r3, [r7, #24]

	if(		   (extid != FT_Gear_Controller)
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000af4:	d02d      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Knock_Meter)
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	f240 1241 	movw	r2, #321	; 0x141
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d028      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Boost_Controller2)
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 8000b06:	d024      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Injector_Driver)
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 8000b0e:	d020      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_WBO2_Nano)
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8000b16:	d01c      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_WBO2_Slim)
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	f240 2241 	movw	r2, #577	; 0x241
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d017      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Alcohol_O2)
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	f240 2242 	movw	r2, #578	; 0x242
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d012      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FTSpark)
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	f240 2243 	movw	r2, #579	; 0x243
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d00d      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Switchpad)
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 8000b3c:	d009      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT500)
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8000b44:	d005      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT600))
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	f240 2281 	movw	r2, #641	; 0x281
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	f040 8381 	bne.w	8001254 <FT_CAN_ReceiveData+0x784>
		return;

	uint8_t buffer[RxLength];
 8000b52:	68bc      	ldr	r4, [r7, #8]
 8000b54:	4623      	mov	r3, r4
 8000b56:	3b01      	subs	r3, #1
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	4620      	mov	r0, r4
 8000b5c:	f04f 0100 	mov.w	r1, #0
 8000b60:	f04f 0200 	mov.w	r2, #0
 8000b64:	f04f 0300 	mov.w	r3, #0
 8000b68:	00cb      	lsls	r3, r1, #3
 8000b6a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b6e:	00c2      	lsls	r2, r0, #3
 8000b70:	4620      	mov	r0, r4
 8000b72:	f04f 0100 	mov.w	r1, #0
 8000b76:	f04f 0200 	mov.w	r2, #0
 8000b7a:	f04f 0300 	mov.w	r3, #0
 8000b7e:	00cb      	lsls	r3, r1, #3
 8000b80:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b84:	00c2      	lsls	r2, r0, #3
 8000b86:	1de3      	adds	r3, r4, #7
 8000b88:	08db      	lsrs	r3, r3, #3
 8000b8a:	00db      	lsls	r3, r3, #3
 8000b8c:	ebad 0d03 	sub.w	sp, sp, r3
 8000b90:	466b      	mov	r3, sp
 8000b92:	3300      	adds	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < RxLength; i++)
 8000b96:	2300      	movs	r3, #0
 8000b98:	77fb      	strb	r3, [r7, #31]
 8000b9a:	e009      	b.n	8000bb0 <FT_CAN_ReceiveData+0xe0>
		buffer[i] = pData[i];
 8000b9c:	7ffb      	ldrb	r3, [r7, #31]
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	441a      	add	r2, r3
 8000ba2:	7ffb      	ldrb	r3, [r7, #31]
 8000ba4:	7811      	ldrb	r1, [r2, #0]
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < RxLength; i++)
 8000baa:	7ffb      	ldrb	r3, [r7, #31]
 8000bac:	3301      	adds	r3, #1
 8000bae:	77fb      	strb	r3, [r7, #31]
 8000bb0:	7ffb      	ldrb	r3, [r7, #31]
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d8f1      	bhi.n	8000b9c <FT_CAN_ReceiveData+0xcc>

	if((((RxID / 0x800) & 0x7) == 0x00) || (((RxID / 0x800) & 0x7) == 0x01))
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	0adb      	lsrs	r3, r3, #11
 8000bbc:	f003 0307 	and.w	r3, r3, #7
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d006      	beq.n	8000bd2 <FT_CAN_ReceiveData+0x102>
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	0adb      	lsrs	r3, r3, #11
 8000bc8:	f003 0307 	and.w	r3, r3, #7
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	f040 8139 	bne.w	8000e44 <FT_CAN_ReceiveData+0x374>
	{
		if((RxID & 0xFFF) == 0x600)
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bd8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000bdc:	d142      	bne.n	8000c64 <FT_CAN_ReceiveData+0x194>
		{
			FT_Data_Struct->tps  = buffer[0] << 8;
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	021b      	lsls	r3, r3, #8
 8000be4:	b21a      	sxth	r2, r3
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			FT_Data_Struct->tps |= buffer[1];
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	785b      	ldrb	r3, [r3, #1]
 8000bf6:	b21b      	sxth	r3, r3
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	b21a      	sxth	r2, r3
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			FT_Data_Struct->map  = buffer[2] << 8;
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	789b      	ldrb	r3, [r3, #2]
 8000c06:	021b      	lsls	r3, r3, #8
 8000c08:	b21a      	sxth	r2, r3
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	87da      	strh	r2, [r3, #62]	; 0x3e
			FT_Data_Struct->map |= buffer[3];
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	78db      	ldrb	r3, [r3, #3]
 8000c18:	b21b      	sxth	r3, r3
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	b21a      	sxth	r2, r3
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	87da      	strh	r2, [r3, #62]	; 0x3e
			FT_Data_Struct->iat  = buffer[4] << 8;
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	791b      	ldrb	r3, [r3, #4]
 8000c26:	021b      	lsls	r3, r3, #8
 8000c28:	b21a      	sxth	r2, r3
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	86da      	strh	r2, [r3, #54]	; 0x36
			FT_Data_Struct->iat |= buffer[5];
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	f9b3 2036 	ldrsh.w	r2, [r3, #54]	; 0x36
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	795b      	ldrb	r3, [r3, #5]
 8000c38:	b21b      	sxth	r3, r3
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	b21a      	sxth	r2, r3
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	86da      	strh	r2, [r3, #54]	; 0x36
			FT_Data_Struct->ect  = buffer[6] << 8;
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	799b      	ldrb	r3, [r3, #6]
 8000c46:	021b      	lsls	r3, r3, #8
 8000c48:	b21a      	sxth	r2, r3
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	865a      	strh	r2, [r3, #50]	; 0x32
			FT_Data_Struct->ect |= buffer[7];
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	f9b3 2032 	ldrsh.w	r2, [r3, #50]	; 0x32
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	79db      	ldrb	r3, [r3, #7]
 8000c58:	b21b      	sxth	r3, r3
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	b21a      	sxth	r2, r3
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	865a      	strh	r2, [r3, #50]	; 0x32

			return;
 8000c62:	e2f8      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}
		else if((RxID & 0xFFF) == 0x601)
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c6a:	f240 6201 	movw	r2, #1537	; 0x601
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d142      	bne.n	8000cf8 <FT_CAN_ReceiveData+0x228>
		{
			FT_Data_Struct->oil_pressure  	  = buffer[0] << 8;
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	021b      	lsls	r3, r3, #8
 8000c78:	b21a      	sxth	r2, r3
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			FT_Data_Struct->oil_pressure 	 |= buffer[1];
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	785b      	ldrb	r3, [r3, #1]
 8000c8a:	b21b      	sxth	r3, r3
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	b21a      	sxth	r2, r3
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			FT_Data_Struct->fuel_pressure 	  = buffer[2] << 8;
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	789b      	ldrb	r3, [r3, #2]
 8000c9a:	021b      	lsls	r3, r3, #8
 8000c9c:	b21a      	sxth	r2, r3
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	871a      	strh	r2, [r3, #56]	; 0x38
			FT_Data_Struct->fuel_pressure 	 |= buffer[3];
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	f9b3 2038 	ldrsh.w	r2, [r3, #56]	; 0x38
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	78db      	ldrb	r3, [r3, #3]
 8000cac:	b21b      	sxth	r3, r3
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	b21a      	sxth	r2, r3
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	871a      	strh	r2, [r3, #56]	; 0x38
			FT_Data_Struct->coolant_pressure  = buffer[4] << 8;
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	791b      	ldrb	r3, [r3, #4]
 8000cba:	021b      	lsls	r3, r3, #8
 8000cbc:	b21a      	sxth	r2, r3
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	869a      	strh	r2, [r3, #52]	; 0x34
			FT_Data_Struct->coolant_pressure |= buffer[5];
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	; 0x34
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	795b      	ldrb	r3, [r3, #5]
 8000ccc:	b21b      	sxth	r3, r3
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	b21a      	sxth	r2, r3
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	869a      	strh	r2, [r3, #52]	; 0x34
			FT_Data_Struct->gear  			  = buffer[6] << 8;
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	799b      	ldrb	r3, [r3, #6]
 8000cda:	021b      	lsls	r3, r3, #8
 8000cdc:	b21a      	sxth	r2, r3
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	875a      	strh	r2, [r3, #58]	; 0x3a
			FT_Data_Struct->gear 			 |= buffer[7];
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	f9b3 203a 	ldrsh.w	r2, [r3, #58]	; 0x3a
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	79db      	ldrb	r3, [r3, #7]
 8000cec:	b21b      	sxth	r3, r3
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	b21a      	sxth	r2, r3
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	875a      	strh	r2, [r3, #58]	; 0x3a

			return;
 8000cf6:	e2ae      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}
		else if((RxID & 0xFFF) == 0x602)
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cfe:	f240 6202 	movw	r2, #1538	; 0x602
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d146      	bne.n	8000d94 <FT_CAN_ReceiveData+0x2c4>
		{
			FT_Data_Struct->lambda  		 = buffer[0] << 8;
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	021b      	lsls	r3, r3, #8
 8000d0c:	b21a      	sxth	r2, r3
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	879a      	strh	r2, [r3, #60]	; 0x3c
			FT_Data_Struct->lambda 			|= buffer[1];
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	785b      	ldrb	r3, [r3, #1]
 8000d1c:	b21b      	sxth	r3, r3
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	b21a      	sxth	r2, r3
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	879a      	strh	r2, [r3, #60]	; 0x3c
			FT_Data_Struct->rpm  			 = buffer[2] << 8;
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	789b      	ldrb	r3, [r3, #2]
 8000d2a:	021b      	lsls	r3, r3, #8
 8000d2c:	b21a      	sxth	r2, r3
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			FT_Data_Struct->rpm 			|= buffer[3];
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	78db      	ldrb	r3, [r3, #3]
 8000d3e:	b21b      	sxth	r3, r3
 8000d40:	4313      	orrs	r3, r2
 8000d42:	b21a      	sxth	r2, r3
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			FT_Data_Struct->oil_temperature  = buffer[4] << 8;
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	791b      	ldrb	r3, [r3, #4]
 8000d4e:	021b      	lsls	r3, r3, #8
 8000d50:	b21a      	sxth	r2, r3
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			FT_Data_Struct->oil_temperature |= buffer[5];
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	795b      	ldrb	r3, [r3, #5]
 8000d62:	b21b      	sxth	r3, r3
 8000d64:	4313      	orrs	r3, r2
 8000d66:	b21a      	sxth	r2, r3
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			FT_Data_Struct->pit_limiter  	 = buffer[6] << 8;
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	799b      	ldrb	r3, [r3, #6]
 8000d72:	021b      	lsls	r3, r3, #8
 8000d74:	b21a      	sxth	r2, r3
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			FT_Data_Struct->pit_limiter 	|= buffer[7];
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	79db      	ldrb	r3, [r3, #7]
 8000d86:	b21b      	sxth	r3, r3
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	b21a      	sxth	r2, r3
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

			return;
 8000d92:	e260      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}

#ifndef FT_CAN_SIMPLE
		else if((RxID & 0xFF) == 0xFF)
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	2bff      	cmp	r3, #255	; 0xff
 8000d9a:	f040 8258 	bne.w	800124e <FT_CAN_ReceiveData+0x77e>
		{
			FT_Data_Struct->data_id  	  = buffer[0] << 8;
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	021b      	lsls	r3, r3, #8
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_id 	 |= buffer[1];
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	785b      	ldrb	r3, [r3, #1]
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_content  = buffer[2] << 8;
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	789b      	ldrb	r3, [r3, #2]
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	021b      	lsls	r3, r3, #8
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->data_content |= buffer[3];
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	78db      	ldrb	r3, [r3, #3]
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	4313      	orrs	r3, r2
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			FT_CAN_ProcessData(FT_Data_Struct);
 8000dea:	6838      	ldr	r0, [r7, #0]
 8000dec:	f7ff fc12 	bl	8000614 <FT_CAN_ProcessData>

			FT_Data_Struct->data_id  	  = buffer[4] << 8;
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	791b      	ldrb	r3, [r3, #4]
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	021b      	lsls	r3, r3, #8
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_id 	 |= buffer[5];
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	795b      	ldrb	r3, [r3, #5]
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_content  = buffer[6] << 8;
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	799b      	ldrb	r3, [r3, #6]
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	021b      	lsls	r3, r3, #8
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->data_content |= buffer[7];
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	79db      	ldrb	r3, [r3, #7]
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	4313      	orrs	r3, r2
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			FT_CAN_ProcessData(FT_Data_Struct);
 8000e3c:	6838      	ldr	r0, [r7, #0]
 8000e3e:	f7ff fbe9 	bl	8000614 <FT_CAN_ProcessData>

			return;
 8000e42:	e208      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}
	}

	else if(buffer[0] == 0xFF)
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2bff      	cmp	r3, #255	; 0xff
 8000e4a:	d129      	bne.n	8000ea0 <FT_CAN_ReceiveData+0x3d0>
	{
		FT_Data_Struct->data_id  	  = buffer[1] << 8;
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	785b      	ldrb	r3, [r3, #1]
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	021b      	lsls	r3, r3, #8
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		FT_Data_Struct->data_id 	 |= buffer[2];
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	789b      	ldrb	r3, [r3, #2]
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		FT_Data_Struct->data_content  = buffer[3] << 8;
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	78db      	ldrb	r3, [r3, #3]
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	021b      	lsls	r3, r3, #8
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		FT_Data_Struct->data_content |= buffer[4];
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	791b      	ldrb	r3, [r3, #4]
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

		FT_CAN_ProcessData(FT_Data_Struct);
 8000e98:	6838      	ldr	r0, [r7, #0]
 8000e9a:	f7ff fbbb 	bl	8000614 <FT_CAN_ProcessData>

		return;
 8000e9e:	e1da      	b.n	8001256 <FT_CAN_ReceiveData+0x786>

	//Segmented Messages
	else
	{
		//First Message
		if(buffer[0] == 0)
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d14b      	bne.n	8000f40 <FT_CAN_ReceiveData+0x470>
		{
			FT_Data_Struct->data_length   = buffer[1] << 8;
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	785b      	ldrb	r3, [r3, #1]
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	021b      	lsls	r3, r3, #8
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
			FT_Data_Struct->data_length  |= buffer[2];
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	789b      	ldrb	r3, [r3, #2]
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

			FT_Data_Struct->data_id  	  = buffer[3] << 8;
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	78db      	ldrb	r3, [r3, #3]
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	021b      	lsls	r3, r3, #8
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_id 	 |= buffer[4];
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	791b      	ldrb	r3, [r3, #4]
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	4313      	orrs	r3, r2
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_content  = buffer[5] << 8;
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	795b      	ldrb	r3, [r3, #5]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	021b      	lsls	r3, r3, #8
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->data_content |= buffer[6];
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	799b      	ldrb	r3, [r3, #6]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	4313      	orrs	r3, r2
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			FT_CAN_ProcessData(FT_Data_Struct);
 8000f1a:	6838      	ldr	r0, [r7, #0]
 8000f1c:	f7ff fb7a 	bl	8000614 <FT_CAN_ProcessData>

			if(RxLength == 8)
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	2b08      	cmp	r3, #8
 8000f24:	d107      	bne.n	8000f36 <FT_CAN_ReceiveData+0x466>
				FT_Data_Struct->data_id   = buffer[7] << 8;
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	79db      	ldrb	r3, [r3, #7]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	021b      	lsls	r3, r3, #8
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

			FT_Data_Struct->data_last_seg = 0;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 8000f3e:	e18a      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}
		//Messages 1, 5, etc
		else if((buffer[0]-1)%4 == 0)
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	3b01      	subs	r3, #1
 8000f46:	f003 0303 	and.w	r3, r3, #3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d15c      	bne.n	8001008 <FT_CAN_ReceiveData+0x538>
		{
			if(buffer[0] == FT_Data_Struct->data_last_seg + 1)
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d120      	bne.n	8000fa2 <FT_CAN_ReceiveData+0x4d2>
			{
				FT_Data_Struct->data_id 	 |= buffer[1];
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	785b      	ldrb	r3, [r3, #1]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[2] << 8;
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	789b      	ldrb	r3, [r3, #2]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	021b      	lsls	r3, r3, #8
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[3];
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	78db      	ldrb	r3, [r3, #3]
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	4313      	orrs	r3, r2
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8000f9c:	6838      	ldr	r0, [r7, #0]
 8000f9e:	f7ff fb39 	bl	8000614 <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	2b08      	cmp	r3, #8
 8000fa6:	d128      	bne.n	8000ffa <FT_CAN_ReceiveData+0x52a>
			{
				FT_Data_Struct->data_id  	  = buffer[4] << 8;
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	791b      	ldrb	r3, [r3, #4]
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	021b      	lsls	r3, r3, #8
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[5];
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	795b      	ldrb	r3, [r3, #5]
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[6] << 8;
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	799b      	ldrb	r3, [r3, #6]
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[7];
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	79db      	ldrb	r3, [r3, #7]
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	4313      	orrs	r3, r2
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8000ff4:	6838      	ldr	r0, [r7, #0]
 8000ff6:	f7ff fb0d 	bl	8000614 <FT_CAN_ProcessData>
			}

			FT_Data_Struct->data_last_seg 	  = buffer[0];
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 8001006:	e126      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}
		//messages 2, 6, etc
		else if((buffer[0]-2)%4 == 0)
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	3b02      	subs	r3, #2
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	2b00      	cmp	r3, #0
 8001014:	d150      	bne.n	80010b8 <FT_CAN_ReceiveData+0x5e8>
		{
			if(RxLength >= 5)
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	2b04      	cmp	r3, #4
 800101a:	d928      	bls.n	800106e <FT_CAN_ReceiveData+0x59e>
			{
				FT_Data_Struct->data_id  	  = buffer[1] << 8;
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	785b      	ldrb	r3, [r3, #1]
 8001020:	b29b      	uxth	r3, r3
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	b29a      	uxth	r2, r3
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[2];
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	789b      	ldrb	r3, [r3, #2]
 8001036:	b29b      	uxth	r3, r3
 8001038:	4313      	orrs	r3, r2
 800103a:	b29a      	uxth	r2, r3
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[3] << 8;
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	78db      	ldrb	r3, [r3, #3]
 8001046:	b29b      	uxth	r3, r3
 8001048:	021b      	lsls	r3, r3, #8
 800104a:	b29a      	uxth	r2, r3
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[4];
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	791b      	ldrb	r3, [r3, #4]
 800105c:	b29b      	uxth	r3, r3
 800105e:	4313      	orrs	r3, r2
 8001060:	b29a      	uxth	r2, r3
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8001068:	6838      	ldr	r0, [r7, #0]
 800106a:	f7ff fad3 	bl	8000614 <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	2b08      	cmp	r3, #8
 8001072:	d11a      	bne.n	80010aa <FT_CAN_ReceiveData+0x5da>
			{
				FT_Data_Struct->data_id  	 = buffer[5] << 8;
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	795b      	ldrb	r3, [r3, #5]
 8001078:	b29b      	uxth	r3, r3
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	b29a      	uxth	r2, r3
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	|= buffer[6];
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	799b      	ldrb	r3, [r3, #6]
 800108e:	b29b      	uxth	r3, r3
 8001090:	4313      	orrs	r3, r2
 8001092:	b29a      	uxth	r2, r3
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content = buffer[7] << 8;
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	79db      	ldrb	r3, [r3, #7]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			}

			FT_Data_Struct->data_last_seg 	 = buffer[0];
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 80010b6:	e0ce      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}
		//Messages 3, 7, etc
		else if((buffer[0]-3)%4 == 0)
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	3b03      	subs	r3, #3
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d15f      	bne.n	8001186 <FT_CAN_ReceiveData+0x6b6>
		{
			if(buffer[0] == FT_Data_Struct->data_last_seg + 1)
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	461a      	mov	r2, r3
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80010d2:	3301      	adds	r3, #1
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d10d      	bne.n	80010f4 <FT_CAN_ReceiveData+0x624>
			{
				FT_Data_Struct->data_content |= buffer[1];
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	785b      	ldrb	r3, [r3, #1]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 80010ee:	6838      	ldr	r0, [r7, #0]
 80010f0:	f7ff fa90 	bl	8000614 <FT_CAN_ProcessData>
			}

			if(RxLength >= 6)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	2b05      	cmp	r3, #5
 80010f8:	d928      	bls.n	800114c <FT_CAN_ReceiveData+0x67c>
			{
				FT_Data_Struct->data_id  	  = buffer[2] << 8;
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	789b      	ldrb	r3, [r3, #2]
 80010fe:	b29b      	uxth	r3, r3
 8001100:	021b      	lsls	r3, r3, #8
 8001102:	b29a      	uxth	r2, r3
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[3];
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	78db      	ldrb	r3, [r3, #3]
 8001114:	b29b      	uxth	r3, r3
 8001116:	4313      	orrs	r3, r2
 8001118:	b29a      	uxth	r2, r3
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[4] << 8;
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	791b      	ldrb	r3, [r3, #4]
 8001124:	b29b      	uxth	r3, r3
 8001126:	021b      	lsls	r3, r3, #8
 8001128:	b29a      	uxth	r2, r3
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[5];
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	795b      	ldrb	r3, [r3, #5]
 800113a:	b29b      	uxth	r3, r3
 800113c:	4313      	orrs	r3, r2
 800113e:	b29a      	uxth	r2, r3
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8001146:	6838      	ldr	r0, [r7, #0]
 8001148:	f7ff fa64 	bl	8000614 <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	2b08      	cmp	r3, #8
 8001150:	d112      	bne.n	8001178 <FT_CAN_ReceiveData+0x6a8>
			{
				FT_Data_Struct->data_id 	  = buffer[6] << 8;
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	799b      	ldrb	r3, [r3, #6]
 8001156:	b29b      	uxth	r3, r3
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	b29a      	uxth	r2, r3
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[7];
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	79db      	ldrb	r3, [r3, #7]
 800116c:	b29b      	uxth	r3, r3
 800116e:	4313      	orrs	r3, r2
 8001170:	b29a      	uxth	r2, r3
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			}

			FT_Data_Struct->data_last_seg 	  = buffer[0];
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b29a      	uxth	r2, r3
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 8001184:	e067      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}
		//Messages 4, 8, etc
		else if(buffer[0]%4 == 0)
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	f003 0303 	and.w	r3, r3, #3
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b00      	cmp	r3, #0
 8001192:	d15d      	bne.n	8001250 <FT_CAN_ReceiveData+0x780>
		{
			if(buffer[0] == FT_Data_Struct->data_last_seg + 1)
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80011a0:	3301      	adds	r3, #1
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d115      	bne.n	80011d2 <FT_CAN_ReceiveData+0x702>
			{
				FT_Data_Struct->data_content  = buffer[1] << 8;
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	785b      	ldrb	r3, [r3, #1]
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[2];
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	789b      	ldrb	r3, [r3, #2]
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	4313      	orrs	r3, r2
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 80011cc:	6838      	ldr	r0, [r7, #0]
 80011ce:	f7ff fa21 	bl	8000614 <FT_CAN_ProcessData>
			}

			if(RxLength >= 7)
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	2b06      	cmp	r3, #6
 80011d6:	d928      	bls.n	800122a <FT_CAN_ReceiveData+0x75a>
			{
				FT_Data_Struct->data_id  	  = buffer[3] << 8;
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	78db      	ldrb	r3, [r3, #3]
 80011dc:	b29b      	uxth	r3, r3
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[4];
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	791b      	ldrb	r3, [r3, #4]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	4313      	orrs	r3, r2
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[5] << 8;
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	795b      	ldrb	r3, [r3, #5]
 8001202:	b29b      	uxth	r3, r3
 8001204:	021b      	lsls	r3, r3, #8
 8001206:	b29a      	uxth	r2, r3
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[6];
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	799b      	ldrb	r3, [r3, #6]
 8001218:	b29b      	uxth	r3, r3
 800121a:	4313      	orrs	r3, r2
 800121c:	b29a      	uxth	r2, r3
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8001224:	6838      	ldr	r0, [r7, #0]
 8001226:	f7ff f9f5 	bl	8000614 <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	2b08      	cmp	r3, #8
 800122e:	d107      	bne.n	8001240 <FT_CAN_ReceiveData+0x770>
			FT_Data_Struct->data_id 	  	  = buffer[7] << 8;
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	79db      	ldrb	r3, [r3, #7]
 8001234:	b29b      	uxth	r3, r3
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	b29a      	uxth	r2, r3
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

			FT_Data_Struct->data_last_seg 	  = buffer[0];
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	b29a      	uxth	r2, r3
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 800124c:	e003      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		if((RxID & 0xFFF) == 0x600)
 800124e:	bf00      	nop
 8001250:	46ad      	mov	sp, r5
 8001252:	e001      	b.n	8001258 <FT_CAN_ReceiveData+0x788>
		return;
 8001254:	bf00      	nop
 8001256:	46ad      	mov	sp, r5
		}
#endif
	}
}
 8001258:	3720      	adds	r7, #32
 800125a:	46bd      	mov	sp, r7
 800125c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001264:	f005 f99e 	bl	80065a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001268:	f000 f902 	bl	8001470 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800126c:	f000 f978 	bl	8001560 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001270:	f000 fc18 	bl	8001aa4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001274:	f000 fbde 	bl	8001a34 <MX_DMA_Init>
  MX_IWDG_Init();
 8001278:	f000 fb3c 	bl	80018f4 <MX_IWDG_Init>
  MX_SDIO_SD_Init();
 800127c:	f000 fb84 	bl	8001988 <MX_SDIO_SD_Init>
  MX_ADC1_Init();
 8001280:	f000 f996 	bl	80015b0 <MX_ADC1_Init>
  MX_RTC_Init();
 8001284:	f000 fb50 	bl	8001928 <MX_RTC_Init>
  MX_FATFS_Init();
 8001288:	f00f fc20 	bl	8010acc <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 800128c:	f015 fcfa 	bl	8016c84 <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 8001290:	f000 fa34 	bl	80016fc <MX_ADC2_Init>
  MX_CAN1_Init();
 8001294:	f000 faca 	bl	800182c <MX_CAN1_Init>
  MX_I2C1_Init();
 8001298:	f000 fafe 	bl	8001898 <MX_I2C1_Init>
  MX_TIM7_Init();
 800129c:	f000 fb94 	bl	80019c8 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  Principal_Init(&hcan1, &hi2c1, &htim7);
 80012a0:	4a64      	ldr	r2, [pc, #400]	; (8001434 <main+0x1d4>)
 80012a2:	4965      	ldr	r1, [pc, #404]	; (8001438 <main+0x1d8>)
 80012a4:	4865      	ldr	r0, [pc, #404]	; (800143c <main+0x1dc>)
 80012a6:	f003 fd45 	bl	8004d34 <Principal_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Checks if data is being saved and starts saving if conditions are met
	  if(Flag_Datalogger == DL_No_Save)
 80012aa:	4b65      	ldr	r3, [pc, #404]	; (8001440 <main+0x1e0>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d105      	bne.n	80012be <main+0x5e>
		  Principal_Datalogger_Start(Dir_String, Log_String, &Dir_Struct, &File_Struct);
 80012b2:	4b64      	ldr	r3, [pc, #400]	; (8001444 <main+0x1e4>)
 80012b4:	4a64      	ldr	r2, [pc, #400]	; (8001448 <main+0x1e8>)
 80012b6:	4965      	ldr	r1, [pc, #404]	; (800144c <main+0x1ec>)
 80012b8:	4865      	ldr	r0, [pc, #404]	; (8001450 <main+0x1f0>)
 80012ba:	f004 fa05 	bl	80056c8 <Principal_Datalogger_Start>

	  //Checks card detect pin level change for datalogger initialization or deinitialization
	  Principal_Card_Detection(&Fatfs_Struct, &Dir_Struct, &File_Struct);
 80012be:	4a61      	ldr	r2, [pc, #388]	; (8001444 <main+0x1e4>)
 80012c0:	4961      	ldr	r1, [pc, #388]	; (8001448 <main+0x1e8>)
 80012c2:	4864      	ldr	r0, [pc, #400]	; (8001454 <main+0x1f4>)
 80012c4:	f004 fc12 	bl	8005aec <Principal_Card_Detection>

	  //Checks USB cable connection, if connected will disable logging
	  if((HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_SET) && (Flag_Datalogger == DL_Save))
 80012c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012cc:	4862      	ldr	r0, [pc, #392]	; (8001458 <main+0x1f8>)
 80012ce:	f007 fafd 	bl	80088cc <HAL_GPIO_ReadPin>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d107      	bne.n	80012e8 <main+0x88>
 80012d8:	4b59      	ldr	r3, [pc, #356]	; (8001440 <main+0x1e0>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d103      	bne.n	80012e8 <main+0x88>
		  Principal_Datalogger_Finish(&Dir_Struct, &File_Struct);
 80012e0:	4958      	ldr	r1, [pc, #352]	; (8001444 <main+0x1e4>)
 80012e2:	4859      	ldr	r0, [pc, #356]	; (8001448 <main+0x1e8>)
 80012e4:	f004 fade 	bl	80058a4 <Principal_Datalogger_Finish>

	  //Analog inputs 1-4 CAN message
	  if((Acc_Msg[Analog_1_4] >= Per_Msg[Analog_1_4]) && (Per_Msg[Analog_1_4] != 0))
 80012e8:	4b5c      	ldr	r3, [pc, #368]	; (800145c <main+0x1fc>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a5c      	ldr	r2, [pc, #368]	; (8001460 <main+0x200>)
 80012ee:	8812      	ldrh	r2, [r2, #0]
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d30e      	bcc.n	8001312 <main+0xb2>
 80012f4:	4b5a      	ldr	r3, [pc, #360]	; (8001460 <main+0x200>)
 80012f6:	881b      	ldrh	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d00a      	beq.n	8001312 <main+0xb2>
	  {
		  Acc_Msg[Analog_1_4] -= Per_Msg[Analog_1_4];
 80012fc:	4b57      	ldr	r3, [pc, #348]	; (800145c <main+0x1fc>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a57      	ldr	r2, [pc, #348]	; (8001460 <main+0x200>)
 8001302:	8812      	ldrh	r2, [r2, #0]
 8001304:	1a9b      	subs	r3, r3, r2
 8001306:	4a55      	ldr	r2, [pc, #340]	; (800145c <main+0x1fc>)
 8001308:	6013      	str	r3, [r2, #0]
		  Principal_Transmit_Msg(&hcan1, Analog_1_4);
 800130a:	2100      	movs	r1, #0
 800130c:	484b      	ldr	r0, [pc, #300]	; (800143c <main+0x1dc>)
 800130e:	f002 f96f 	bl	80035f0 <Principal_Transmit_Msg>
	  }

	  //Analog inputs 5-8 CAN message
	  if((Acc_Msg[Analog_5_8] >= Per_Msg[Analog_5_8]) && (Per_Msg[Analog_5_8] != 0))
 8001312:	4b52      	ldr	r3, [pc, #328]	; (800145c <main+0x1fc>)
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	4a52      	ldr	r2, [pc, #328]	; (8001460 <main+0x200>)
 8001318:	8852      	ldrh	r2, [r2, #2]
 800131a:	4293      	cmp	r3, r2
 800131c:	d30e      	bcc.n	800133c <main+0xdc>
 800131e:	4b50      	ldr	r3, [pc, #320]	; (8001460 <main+0x200>)
 8001320:	885b      	ldrh	r3, [r3, #2]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00a      	beq.n	800133c <main+0xdc>
	  {
		  Acc_Msg[Analog_5_8] -= Per_Msg[Analog_5_8];
 8001326:	4b4d      	ldr	r3, [pc, #308]	; (800145c <main+0x1fc>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	4a4d      	ldr	r2, [pc, #308]	; (8001460 <main+0x200>)
 800132c:	8852      	ldrh	r2, [r2, #2]
 800132e:	1a9b      	subs	r3, r3, r2
 8001330:	4a4a      	ldr	r2, [pc, #296]	; (800145c <main+0x1fc>)
 8001332:	6053      	str	r3, [r2, #4]
		  Principal_Transmit_Msg(&hcan1, Analog_5_8);
 8001334:	2101      	movs	r1, #1
 8001336:	4841      	ldr	r0, [pc, #260]	; (800143c <main+0x1dc>)
 8001338:	f002 f95a 	bl	80035f0 <Principal_Transmit_Msg>
	  }

	  //Analog inputs 9-12 CAN message
	  if((Acc_Msg[Analog_9_12] >= Per_Msg[Analog_9_12]) && (Per_Msg[Analog_9_12] != 0))
 800133c:	4b47      	ldr	r3, [pc, #284]	; (800145c <main+0x1fc>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	4a47      	ldr	r2, [pc, #284]	; (8001460 <main+0x200>)
 8001342:	8892      	ldrh	r2, [r2, #4]
 8001344:	4293      	cmp	r3, r2
 8001346:	d30e      	bcc.n	8001366 <main+0x106>
 8001348:	4b45      	ldr	r3, [pc, #276]	; (8001460 <main+0x200>)
 800134a:	889b      	ldrh	r3, [r3, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d00a      	beq.n	8001366 <main+0x106>
	  {
		  Acc_Msg[Analog_9_12] -= Per_Msg[Analog_9_12];
 8001350:	4b42      	ldr	r3, [pc, #264]	; (800145c <main+0x1fc>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	4a42      	ldr	r2, [pc, #264]	; (8001460 <main+0x200>)
 8001356:	8892      	ldrh	r2, [r2, #4]
 8001358:	1a9b      	subs	r3, r3, r2
 800135a:	4a40      	ldr	r2, [pc, #256]	; (800145c <main+0x1fc>)
 800135c:	6093      	str	r3, [r2, #8]
		  Principal_Transmit_Msg(&hcan1, Analog_9_12);
 800135e:	2102      	movs	r1, #2
 8001360:	4836      	ldr	r0, [pc, #216]	; (800143c <main+0x1dc>)
 8001362:	f002 f945 	bl	80035f0 <Principal_Transmit_Msg>
	  }

	  //RTC, both date and time
	  if((Acc_Msg[RTC_Msg] >= Per_Msg[RTC_Msg]) && (Per_Msg[RTC_Msg] != 0))
 8001366:	4b3d      	ldr	r3, [pc, #244]	; (800145c <main+0x1fc>)
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	4a3d      	ldr	r2, [pc, #244]	; (8001460 <main+0x200>)
 800136c:	88d2      	ldrh	r2, [r2, #6]
 800136e:	4293      	cmp	r3, r2
 8001370:	d30e      	bcc.n	8001390 <main+0x130>
 8001372:	4b3b      	ldr	r3, [pc, #236]	; (8001460 <main+0x200>)
 8001374:	88db      	ldrh	r3, [r3, #6]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00a      	beq.n	8001390 <main+0x130>
	  {
		  Acc_Msg[RTC_Msg] -= Per_Msg[RTC_Msg];
 800137a:	4b38      	ldr	r3, [pc, #224]	; (800145c <main+0x1fc>)
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	4a38      	ldr	r2, [pc, #224]	; (8001460 <main+0x200>)
 8001380:	88d2      	ldrh	r2, [r2, #6]
 8001382:	1a9b      	subs	r3, r3, r2
 8001384:	4a35      	ldr	r2, [pc, #212]	; (800145c <main+0x1fc>)
 8001386:	60d3      	str	r3, [r2, #12]
		  Principal_Transmit_Msg(&hcan1, RTC_Msg);
 8001388:	2103      	movs	r1, #3
 800138a:	482c      	ldr	r0, [pc, #176]	; (800143c <main+0x1dc>)
 800138c:	f002 f930 	bl	80035f0 <Principal_Transmit_Msg>
	  }

	  //Inputs and datalogger verify CAN message
	  if((Acc_Msg[Verify_Msg] >= Per_Msg[Verify_Msg]) && (Per_Msg[Verify_Msg] != 0))
 8001390:	4b32      	ldr	r3, [pc, #200]	; (800145c <main+0x1fc>)
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	4a32      	ldr	r2, [pc, #200]	; (8001460 <main+0x200>)
 8001396:	8912      	ldrh	r2, [r2, #8]
 8001398:	4293      	cmp	r3, r2
 800139a:	d30e      	bcc.n	80013ba <main+0x15a>
 800139c:	4b30      	ldr	r3, [pc, #192]	; (8001460 <main+0x200>)
 800139e:	891b      	ldrh	r3, [r3, #8]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d00a      	beq.n	80013ba <main+0x15a>
	  {
		  Acc_Msg[Verify_Msg] -= Per_Msg[Verify_Msg];
 80013a4:	4b2d      	ldr	r3, [pc, #180]	; (800145c <main+0x1fc>)
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	4a2d      	ldr	r2, [pc, #180]	; (8001460 <main+0x200>)
 80013aa:	8912      	ldrh	r2, [r2, #8]
 80013ac:	1a9b      	subs	r3, r3, r2
 80013ae:	4a2b      	ldr	r2, [pc, #172]	; (800145c <main+0x1fc>)
 80013b0:	6113      	str	r3, [r2, #16]
		  Principal_Transmit_Msg(&hcan1, Verify_Msg);
 80013b2:	2104      	movs	r1, #4
 80013b4:	4821      	ldr	r0, [pc, #132]	; (800143c <main+0x1dc>)
 80013b6:	f002 f91b 	bl	80035f0 <Principal_Transmit_Msg>
	  }

	  //ECU saved data (no transmission)
	  if((Acc_Msg[ECU_Save] >= Per_Msg[ECU_Save]) && (Per_Msg[ECU_Save] != 0))
 80013ba:	4b28      	ldr	r3, [pc, #160]	; (800145c <main+0x1fc>)
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	4a28      	ldr	r2, [pc, #160]	; (8001460 <main+0x200>)
 80013c0:	8952      	ldrh	r2, [r2, #10]
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d30e      	bcc.n	80013e4 <main+0x184>
 80013c6:	4b26      	ldr	r3, [pc, #152]	; (8001460 <main+0x200>)
 80013c8:	895b      	ldrh	r3, [r3, #10]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d00a      	beq.n	80013e4 <main+0x184>
	  {
		  Acc_Msg[ECU_Save] -= Per_Msg[ECU_Save];
 80013ce:	4b23      	ldr	r3, [pc, #140]	; (800145c <main+0x1fc>)
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	4a23      	ldr	r2, [pc, #140]	; (8001460 <main+0x200>)
 80013d4:	8952      	ldrh	r2, [r2, #10]
 80013d6:	1a9b      	subs	r3, r3, r2
 80013d8:	4a20      	ldr	r2, [pc, #128]	; (800145c <main+0x1fc>)
 80013da:	6153      	str	r3, [r2, #20]
		  Principal_Transmit_Msg(&hcan1, ECU_Save);
 80013dc:	2105      	movs	r1, #5
 80013de:	4817      	ldr	r0, [pc, #92]	; (800143c <main+0x1dc>)
 80013e0:	f002 f906 	bl	80035f0 <Principal_Transmit_Msg>
	  }

	  //PDM saved data (no transmission)
	  if((Acc_Msg[PDM_Save] >= Per_Msg[PDM_Save]) && (Per_Msg[PDM_Save] != 0))
 80013e4:	4b1d      	ldr	r3, [pc, #116]	; (800145c <main+0x1fc>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	4a1d      	ldr	r2, [pc, #116]	; (8001460 <main+0x200>)
 80013ea:	8992      	ldrh	r2, [r2, #12]
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d30e      	bcc.n	800140e <main+0x1ae>
 80013f0:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <main+0x200>)
 80013f2:	899b      	ldrh	r3, [r3, #12]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d00a      	beq.n	800140e <main+0x1ae>
	  {
		  Acc_Msg[PDM_Save] -= Per_Msg[PDM_Save];
 80013f8:	4b18      	ldr	r3, [pc, #96]	; (800145c <main+0x1fc>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	4a18      	ldr	r2, [pc, #96]	; (8001460 <main+0x200>)
 80013fe:	8992      	ldrh	r2, [r2, #12]
 8001400:	1a9b      	subs	r3, r3, r2
 8001402:	4a16      	ldr	r2, [pc, #88]	; (800145c <main+0x1fc>)
 8001404:	6193      	str	r3, [r2, #24]
		  Principal_Transmit_Msg(&hcan1, PDM_Save);
 8001406:	2106      	movs	r1, #6
 8001408:	480c      	ldr	r0, [pc, #48]	; (800143c <main+0x1dc>)
 800140a:	f002 f8f1 	bl	80035f0 <Principal_Transmit_Msg>
	  }

	  if((Verify != 0) && (Verify_CAN != 0) && (Flag_Datalogger != DL_Error))
 800140e:	4b15      	ldr	r3, [pc, #84]	; (8001464 <main+0x204>)
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	f43f af49 	beq.w	80012aa <main+0x4a>
 8001418:	4b13      	ldr	r3, [pc, #76]	; (8001468 <main+0x208>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	f43f af44 	beq.w	80012aa <main+0x4a>
 8001422:	4b07      	ldr	r3, [pc, #28]	; (8001440 <main+0x1e0>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b04      	cmp	r3, #4
 8001428:	f43f af3f 	beq.w	80012aa <main+0x4a>
		  HAL_IWDG_Refresh(&hiwdg);
 800142c:	480f      	ldr	r0, [pc, #60]	; (800146c <main+0x20c>)
 800142e:	f008 fa88 	bl	8009942 <HAL_IWDG_Refresh>
	  if(Flag_Datalogger == DL_No_Save)
 8001432:	e73a      	b.n	80012aa <main+0x4a>
 8001434:	20002dcc 	.word	0x20002dcc
 8001438:	20000768 	.word	0x20000768
 800143c:	20002d2c 	.word	0x20002d2c
 8001440:	20001bd0 	.word	0x20001bd0
 8001444:	20001c84 	.word	0x20001c84
 8001448:	20001a64 	.word	0x20001a64
 800144c:	20002d64 	.word	0x20002d64
 8001450:	200009cc 	.word	0x200009cc
 8001454:	200009d8 	.word	0x200009d8
 8001458:	40020000 	.word	0x40020000
 800145c:	20001c60 	.word	0x20001c60
 8001460:	20002e7c 	.word	0x20002e7c
 8001464:	20002e78 	.word	0x20002e78
 8001468:	20001a58 	.word	0x20001a58
 800146c:	200007c0 	.word	0x200007c0

08001470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b094      	sub	sp, #80	; 0x50
 8001474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001476:	f107 031c 	add.w	r3, r7, #28
 800147a:	2234      	movs	r2, #52	; 0x34
 800147c:	2100      	movs	r1, #0
 800147e:	4618      	mov	r0, r3
 8001480:	f016 f9a6 	bl	80177d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001484:	f107 0308 	add.w	r3, r7, #8
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001494:	2300      	movs	r3, #0
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	4b2f      	ldr	r3, [pc, #188]	; (8001558 <SystemClock_Config+0xe8>)
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	4a2e      	ldr	r2, [pc, #184]	; (8001558 <SystemClock_Config+0xe8>)
 800149e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a2:	6413      	str	r3, [r2, #64]	; 0x40
 80014a4:	4b2c      	ldr	r3, [pc, #176]	; (8001558 <SystemClock_Config+0xe8>)
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014b0:	2300      	movs	r3, #0
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	4b29      	ldr	r3, [pc, #164]	; (800155c <SystemClock_Config+0xec>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a28      	ldr	r2, [pc, #160]	; (800155c <SystemClock_Config+0xec>)
 80014ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	4b26      	ldr	r3, [pc, #152]	; (800155c <SystemClock_Config+0xec>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 80014cc:	230d      	movs	r3, #13
 80014ce:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014d6:	2301      	movs	r3, #1
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80014da:	2301      	movs	r3, #1
 80014dc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014de:	2302      	movs	r3, #2
 80014e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014e8:	2308      	movs	r3, #8
 80014ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 80014ec:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80014f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014f2:	2302      	movs	r3, #2
 80014f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 80014f6:	2306      	movs	r3, #6
 80014f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014fa:	2302      	movs	r3, #2
 80014fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fe:	f107 031c 	add.w	r3, r7, #28
 8001502:	4618      	mov	r0, r3
 8001504:	f00a fa5c 	bl	800b9c0 <HAL_RCC_OscConfig>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800150e:	f000 fb6f 	bl	8001bf0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001512:	f009 fc23 	bl	800ad5c <HAL_PWREx_EnableOverDrive>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800151c:	f000 fb68 	bl	8001bf0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001520:	230f      	movs	r3, #15
 8001522:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001524:	2302      	movs	r3, #2
 8001526:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001528:	2300      	movs	r3, #0
 800152a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800152c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001530:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001532:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001536:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001538:	f107 0308 	add.w	r3, r7, #8
 800153c:	2105      	movs	r1, #5
 800153e:	4618      	mov	r0, r3
 8001540:	f009 fc5c 	bl	800adfc <HAL_RCC_ClockConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <SystemClock_Config+0xde>
  {
    Error_Handler();
 800154a:	f000 fb51 	bl	8001bf0 <Error_Handler>
  }
}
 800154e:	bf00      	nop
 8001550:	3750      	adds	r7, #80	; 0x50
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40023800 	.word	0x40023800
 800155c:	40007000 	.word	0x40007000

08001560 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b098      	sub	sp, #96	; 0x60
 8001564:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001566:	1d3b      	adds	r3, r7, #4
 8001568:	225c      	movs	r2, #92	; 0x5c
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f016 f92f 	bl	80177d0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8001572:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001576:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 8;
 8001578:	2308      	movs	r3, #8
 800157a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800157c:	23c0      	movs	r3, #192	; 0xc0
 800157e:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001580:	2302      	movs	r3, #2
 8001582:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8001584:	2304      	movs	r3, #4
 8001586:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001588:	2301      	movs	r3, #1
 800158a:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 800158c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001590:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8001592:	2300      	movs	r3, #0
 8001594:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	4618      	mov	r0, r3
 800159a:	f009 fd35 	bl	800b008 <HAL_RCCEx_PeriphCLKConfig>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <PeriphCommonClock_Config+0x48>
  {
    Error_Handler();
 80015a4:	f000 fb24 	bl	8001bf0 <Error_Handler>
  }
}
 80015a8:	bf00      	nop
 80015aa:	3760      	adds	r7, #96	; 0x60
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015b6:	463b      	mov	r3, r7
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015c2:	4b4b      	ldr	r3, [pc, #300]	; (80016f0 <MX_ADC1_Init+0x140>)
 80015c4:	4a4b      	ldr	r2, [pc, #300]	; (80016f4 <MX_ADC1_Init+0x144>)
 80015c6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015c8:	4b49      	ldr	r3, [pc, #292]	; (80016f0 <MX_ADC1_Init+0x140>)
 80015ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015ce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015d0:	4b47      	ldr	r3, [pc, #284]	; (80016f0 <MX_ADC1_Init+0x140>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80015d6:	4b46      	ldr	r3, [pc, #280]	; (80016f0 <MX_ADC1_Init+0x140>)
 80015d8:	2201      	movs	r2, #1
 80015da:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015dc:	4b44      	ldr	r3, [pc, #272]	; (80016f0 <MX_ADC1_Init+0x140>)
 80015de:	2201      	movs	r2, #1
 80015e0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015e2:	4b43      	ldr	r3, [pc, #268]	; (80016f0 <MX_ADC1_Init+0x140>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015ea:	4b41      	ldr	r3, [pc, #260]	; (80016f0 <MX_ADC1_Init+0x140>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015f0:	4b3f      	ldr	r3, [pc, #252]	; (80016f0 <MX_ADC1_Init+0x140>)
 80015f2:	4a41      	ldr	r2, [pc, #260]	; (80016f8 <MX_ADC1_Init+0x148>)
 80015f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015f6:	4b3e      	ldr	r3, [pc, #248]	; (80016f0 <MX_ADC1_Init+0x140>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 80015fc:	4b3c      	ldr	r3, [pc, #240]	; (80016f0 <MX_ADC1_Init+0x140>)
 80015fe:	2207      	movs	r2, #7
 8001600:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001602:	4b3b      	ldr	r3, [pc, #236]	; (80016f0 <MX_ADC1_Init+0x140>)
 8001604:	2201      	movs	r2, #1
 8001606:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800160a:	4b39      	ldr	r3, [pc, #228]	; (80016f0 <MX_ADC1_Init+0x140>)
 800160c:	2201      	movs	r2, #1
 800160e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001610:	4837      	ldr	r0, [pc, #220]	; (80016f0 <MX_ADC1_Init+0x140>)
 8001612:	f005 f85d 	bl	80066d0 <HAL_ADC_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800161c:	f000 fae8 	bl	8001bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001620:	2306      	movs	r3, #6
 8001622:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001624:	2301      	movs	r3, #1
 8001626:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001628:	2307      	movs	r3, #7
 800162a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800162c:	463b      	mov	r3, r7
 800162e:	4619      	mov	r1, r3
 8001630:	482f      	ldr	r0, [pc, #188]	; (80016f0 <MX_ADC1_Init+0x140>)
 8001632:	f005 f9bf 	bl	80069b4 <HAL_ADC_ConfigChannel>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800163c:	f000 fad8 	bl	8001bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001640:	2307      	movs	r3, #7
 8001642:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001644:	2302      	movs	r3, #2
 8001646:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001648:	463b      	mov	r3, r7
 800164a:	4619      	mov	r1, r3
 800164c:	4828      	ldr	r0, [pc, #160]	; (80016f0 <MX_ADC1_Init+0x140>)
 800164e:	f005 f9b1 	bl	80069b4 <HAL_ADC_ConfigChannel>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001658:	f000 faca 	bl	8001bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800165c:	230e      	movs	r3, #14
 800165e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001660:	2303      	movs	r3, #3
 8001662:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001664:	463b      	mov	r3, r7
 8001666:	4619      	mov	r1, r3
 8001668:	4821      	ldr	r0, [pc, #132]	; (80016f0 <MX_ADC1_Init+0x140>)
 800166a:	f005 f9a3 	bl	80069b4 <HAL_ADC_ConfigChannel>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001674:	f000 fabc 	bl	8001bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001678:	230f      	movs	r3, #15
 800167a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800167c:	2304      	movs	r3, #4
 800167e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001680:	463b      	mov	r3, r7
 8001682:	4619      	mov	r1, r3
 8001684:	481a      	ldr	r0, [pc, #104]	; (80016f0 <MX_ADC1_Init+0x140>)
 8001686:	f005 f995 	bl	80069b4 <HAL_ADC_ConfigChannel>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001690:	f000 faae 	bl	8001bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001694:	2308      	movs	r3, #8
 8001696:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001698:	2305      	movs	r3, #5
 800169a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800169c:	463b      	mov	r3, r7
 800169e:	4619      	mov	r1, r3
 80016a0:	4813      	ldr	r0, [pc, #76]	; (80016f0 <MX_ADC1_Init+0x140>)
 80016a2:	f005 f987 	bl	80069b4 <HAL_ADC_ConfigChannel>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80016ac:	f000 faa0 	bl	8001bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80016b0:	2309      	movs	r3, #9
 80016b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80016b4:	2306      	movs	r3, #6
 80016b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016b8:	463b      	mov	r3, r7
 80016ba:	4619      	mov	r1, r3
 80016bc:	480c      	ldr	r0, [pc, #48]	; (80016f0 <MX_ADC1_Init+0x140>)
 80016be:	f005 f979 	bl	80069b4 <HAL_ADC_ConfigChannel>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80016c8:	f000 fa92 	bl	8001bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 80016cc:	2312      	movs	r3, #18
 80016ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80016d0:	2307      	movs	r3, #7
 80016d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016d4:	463b      	mov	r3, r7
 80016d6:	4619      	mov	r1, r3
 80016d8:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_ADC1_Init+0x140>)
 80016da:	f005 f96b 	bl	80069b4 <HAL_ADC_ConfigChannel>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80016e4:	f000 fa84 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016e8:	bf00      	nop
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20001a94 	.word	0x20001a94
 80016f4:	40012000 	.word	0x40012000
 80016f8:	0f000001 	.word	0x0f000001

080016fc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b084      	sub	sp, #16
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001702:	463b      	mov	r3, r7
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800170e:	4b44      	ldr	r3, [pc, #272]	; (8001820 <MX_ADC2_Init+0x124>)
 8001710:	4a44      	ldr	r2, [pc, #272]	; (8001824 <MX_ADC2_Init+0x128>)
 8001712:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001714:	4b42      	ldr	r3, [pc, #264]	; (8001820 <MX_ADC2_Init+0x124>)
 8001716:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800171a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800171c:	4b40      	ldr	r3, [pc, #256]	; (8001820 <MX_ADC2_Init+0x124>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8001722:	4b3f      	ldr	r3, [pc, #252]	; (8001820 <MX_ADC2_Init+0x124>)
 8001724:	2201      	movs	r2, #1
 8001726:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001728:	4b3d      	ldr	r3, [pc, #244]	; (8001820 <MX_ADC2_Init+0x124>)
 800172a:	2201      	movs	r2, #1
 800172c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800172e:	4b3c      	ldr	r3, [pc, #240]	; (8001820 <MX_ADC2_Init+0x124>)
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001736:	4b3a      	ldr	r3, [pc, #232]	; (8001820 <MX_ADC2_Init+0x124>)
 8001738:	2200      	movs	r2, #0
 800173a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800173c:	4b38      	ldr	r3, [pc, #224]	; (8001820 <MX_ADC2_Init+0x124>)
 800173e:	4a3a      	ldr	r2, [pc, #232]	; (8001828 <MX_ADC2_Init+0x12c>)
 8001740:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001742:	4b37      	ldr	r3, [pc, #220]	; (8001820 <MX_ADC2_Init+0x124>)
 8001744:	2200      	movs	r2, #0
 8001746:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 6;
 8001748:	4b35      	ldr	r3, [pc, #212]	; (8001820 <MX_ADC2_Init+0x124>)
 800174a:	2206      	movs	r2, #6
 800174c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800174e:	4b34      	ldr	r3, [pc, #208]	; (8001820 <MX_ADC2_Init+0x124>)
 8001750:	2201      	movs	r2, #1
 8001752:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001756:	4b32      	ldr	r3, [pc, #200]	; (8001820 <MX_ADC2_Init+0x124>)
 8001758:	2201      	movs	r2, #1
 800175a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800175c:	4830      	ldr	r0, [pc, #192]	; (8001820 <MX_ADC2_Init+0x124>)
 800175e:	f004 ffb7 	bl	80066d0 <HAL_ADC_Init>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001768:	f000 fa42 	bl	8001bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800176c:	2300      	movs	r3, #0
 800176e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001770:	2301      	movs	r3, #1
 8001772:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001774:	2307      	movs	r3, #7
 8001776:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001778:	463b      	mov	r3, r7
 800177a:	4619      	mov	r1, r3
 800177c:	4828      	ldr	r0, [pc, #160]	; (8001820 <MX_ADC2_Init+0x124>)
 800177e:	f005 f919 	bl	80069b4 <HAL_ADC_ConfigChannel>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001788:	f000 fa32 	bl	8001bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800178c:	2301      	movs	r3, #1
 800178e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001790:	2302      	movs	r3, #2
 8001792:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001794:	463b      	mov	r3, r7
 8001796:	4619      	mov	r1, r3
 8001798:	4821      	ldr	r0, [pc, #132]	; (8001820 <MX_ADC2_Init+0x124>)
 800179a:	f005 f90b 	bl	80069b4 <HAL_ADC_ConfigChannel>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80017a4:	f000 fa24 	bl	8001bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80017a8:	2302      	movs	r3, #2
 80017aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80017ac:	2303      	movs	r3, #3
 80017ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017b0:	463b      	mov	r3, r7
 80017b2:	4619      	mov	r1, r3
 80017b4:	481a      	ldr	r0, [pc, #104]	; (8001820 <MX_ADC2_Init+0x124>)
 80017b6:	f005 f8fd 	bl	80069b4 <HAL_ADC_ConfigChannel>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80017c0:	f000 fa16 	bl	8001bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80017c4:	2303      	movs	r3, #3
 80017c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80017c8:	2304      	movs	r3, #4
 80017ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017cc:	463b      	mov	r3, r7
 80017ce:	4619      	mov	r1, r3
 80017d0:	4813      	ldr	r0, [pc, #76]	; (8001820 <MX_ADC2_Init+0x124>)
 80017d2:	f005 f8ef 	bl	80069b4 <HAL_ADC_ConfigChannel>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80017dc:	f000 fa08 	bl	8001bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80017e0:	2304      	movs	r3, #4
 80017e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80017e4:	2305      	movs	r3, #5
 80017e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017e8:	463b      	mov	r3, r7
 80017ea:	4619      	mov	r1, r3
 80017ec:	480c      	ldr	r0, [pc, #48]	; (8001820 <MX_ADC2_Init+0x124>)
 80017ee:	f005 f8e1 	bl	80069b4 <HAL_ADC_ConfigChannel>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80017f8:	f000 f9fa 	bl	8001bf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80017fc:	2305      	movs	r3, #5
 80017fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001800:	2306      	movs	r3, #6
 8001802:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001804:	463b      	mov	r3, r7
 8001806:	4619      	mov	r1, r3
 8001808:	4805      	ldr	r0, [pc, #20]	; (8001820 <MX_ADC2_Init+0x124>)
 800180a:	f005 f8d3 	bl	80069b4 <HAL_ADC_ConfigChannel>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8001814:	f000 f9ec 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001818:	bf00      	nop
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000720 	.word	0x20000720
 8001824:	40012100 	.word	0x40012100
 8001828:	0f000001 	.word	0x0f000001

0800182c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001830:	4b17      	ldr	r3, [pc, #92]	; (8001890 <MX_CAN1_Init+0x64>)
 8001832:	4a18      	ldr	r2, [pc, #96]	; (8001894 <MX_CAN1_Init+0x68>)
 8001834:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8001836:	4b16      	ldr	r3, [pc, #88]	; (8001890 <MX_CAN1_Init+0x64>)
 8001838:	2205      	movs	r2, #5
 800183a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800183c:	4b14      	ldr	r3, [pc, #80]	; (8001890 <MX_CAN1_Init+0x64>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001842:	4b13      	ldr	r3, [pc, #76]	; (8001890 <MX_CAN1_Init+0x64>)
 8001844:	2200      	movs	r2, #0
 8001846:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <MX_CAN1_Init+0x64>)
 800184a:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800184e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001850:	4b0f      	ldr	r3, [pc, #60]	; (8001890 <MX_CAN1_Init+0x64>)
 8001852:	2200      	movs	r2, #0
 8001854:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001856:	4b0e      	ldr	r3, [pc, #56]	; (8001890 <MX_CAN1_Init+0x64>)
 8001858:	2200      	movs	r2, #0
 800185a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <MX_CAN1_Init+0x64>)
 800185e:	2200      	movs	r2, #0
 8001860:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001862:	4b0b      	ldr	r3, [pc, #44]	; (8001890 <MX_CAN1_Init+0x64>)
 8001864:	2200      	movs	r2, #0
 8001866:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001868:	4b09      	ldr	r3, [pc, #36]	; (8001890 <MX_CAN1_Init+0x64>)
 800186a:	2200      	movs	r2, #0
 800186c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800186e:	4b08      	ldr	r3, [pc, #32]	; (8001890 <MX_CAN1_Init+0x64>)
 8001870:	2200      	movs	r2, #0
 8001872:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <MX_CAN1_Init+0x64>)
 8001876:	2200      	movs	r2, #0
 8001878:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800187a:	4805      	ldr	r0, [pc, #20]	; (8001890 <MX_CAN1_Init+0x64>)
 800187c:	f005 fb4a 	bl	8006f14 <HAL_CAN_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001886:	f000 f9b3 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20002d2c 	.word	0x20002d2c
 8001894:	40006400 	.word	0x40006400

08001898 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <MX_I2C1_Init+0x50>)
 800189e:	4a13      	ldr	r2, [pc, #76]	; (80018ec <MX_I2C1_Init+0x54>)
 80018a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018a4:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <MX_I2C1_Init+0x58>)
 80018a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018a8:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018ae:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018b4:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018bc:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018be:	2200      	movs	r2, #0
 80018c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018c8:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018d4:	4804      	ldr	r0, [pc, #16]	; (80018e8 <MX_I2C1_Init+0x50>)
 80018d6:	f007 f85d 	bl	8008994 <HAL_I2C_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018e0:	f000 f986 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000768 	.word	0x20000768
 80018ec:	40005400 	.word	0x40005400
 80018f0:	00061a80 	.word	0x00061a80

080018f4 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80018f8:	4b09      	ldr	r3, [pc, #36]	; (8001920 <MX_IWDG_Init+0x2c>)
 80018fa:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <MX_IWDG_Init+0x30>)
 80018fc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <MX_IWDG_Init+0x2c>)
 8001900:	2206      	movs	r2, #6
 8001902:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 59;
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <MX_IWDG_Init+0x2c>)
 8001906:	223b      	movs	r2, #59	; 0x3b
 8001908:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800190a:	4805      	ldr	r0, [pc, #20]	; (8001920 <MX_IWDG_Init+0x2c>)
 800190c:	f007 ffd7 	bl	80098be <HAL_IWDG_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_IWDG_Init+0x26>
  {
    Error_Handler();
 8001916:	f000 f96b 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	200007c0 	.word	0x200007c0
 8001924:	40003000 	.word	0x40003000

08001928 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800193c:	2300      	movs	r3, #0
 800193e:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001940:	4b0f      	ldr	r3, [pc, #60]	; (8001980 <MX_RTC_Init+0x58>)
 8001942:	4a10      	ldr	r2, [pc, #64]	; (8001984 <MX_RTC_Init+0x5c>)
 8001944:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001946:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <MX_RTC_Init+0x58>)
 8001948:	2200      	movs	r2, #0
 800194a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <MX_RTC_Init+0x58>)
 800194e:	227f      	movs	r2, #127	; 0x7f
 8001950:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <MX_RTC_Init+0x58>)
 8001954:	22ff      	movs	r2, #255	; 0xff
 8001956:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <MX_RTC_Init+0x58>)
 800195a:	2200      	movs	r2, #0
 800195c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800195e:	4b08      	ldr	r3, [pc, #32]	; (8001980 <MX_RTC_Init+0x58>)
 8001960:	2200      	movs	r2, #0
 8001962:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <MX_RTC_Init+0x58>)
 8001966:	2200      	movs	r2, #0
 8001968:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800196a:	4805      	ldr	r0, [pc, #20]	; (8001980 <MX_RTC_Init+0x58>)
 800196c:	f00a fac6 	bl	800befc <HAL_RTC_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001976:	f000 f93b 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800197a:	3718      	adds	r7, #24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20001b44 	.word	0x20001b44
 8001984:	40002800 	.word	0x40002800

08001988 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800198c:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <MX_SDIO_SD_Init+0x38>)
 800198e:	4a0d      	ldr	r2, [pc, #52]	; (80019c4 <MX_SDIO_SD_Init+0x3c>)
 8001990:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001992:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <MX_SDIO_SD_Init+0x38>)
 8001994:	2200      	movs	r2, #0
 8001996:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001998:	4b09      	ldr	r3, [pc, #36]	; (80019c0 <MX_SDIO_SD_Init+0x38>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800199e:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <MX_SDIO_SD_Init+0x38>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <MX_SDIO_SD_Init+0x38>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80019aa:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <MX_SDIO_SD_Init+0x38>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 3;
 80019b0:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <MX_SDIO_SD_Init+0x38>)
 80019b2:	2203      	movs	r2, #3
 80019b4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80019b6:	bf00      	nop
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	20001bd4 	.word	0x20001bd4
 80019c4:	40012c00 	.word	0x40012c00

080019c8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ce:	463b      	mov	r3, r7
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80019d6:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <MX_TIM7_Init+0x64>)
 80019d8:	4a15      	ldr	r2, [pc, #84]	; (8001a30 <MX_TIM7_Init+0x68>)
 80019da:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80019dc:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <MX_TIM7_Init+0x64>)
 80019de:	2200      	movs	r2, #0
 80019e0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e2:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <MX_TIM7_Init+0x64>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80019e8:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <MX_TIM7_Init+0x64>)
 80019ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019ee:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f0:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <MX_TIM7_Init+0x64>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80019f6:	480d      	ldr	r0, [pc, #52]	; (8001a2c <MX_TIM7_Init+0x64>)
 80019f8:	f00c fc61 	bl	800e2be <HAL_TIM_Base_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001a02:	f000 f8f5 	bl	8001bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001a0e:	463b      	mov	r3, r7
 8001a10:	4619      	mov	r1, r3
 8001a12:	4806      	ldr	r0, [pc, #24]	; (8001a2c <MX_TIM7_Init+0x64>)
 8001a14:	f00c fee2 	bl	800e7dc <HAL_TIMEx_MasterConfigSynchronization>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001a1e:	f000 f8e7 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001a22:	bf00      	nop
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20002dcc 	.word	0x20002dcc
 8001a30:	40001400 	.word	0x40001400

08001a34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	607b      	str	r3, [r7, #4]
 8001a3e:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <MX_DMA_Init+0x6c>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a17      	ldr	r2, [pc, #92]	; (8001aa0 <MX_DMA_Init+0x6c>)
 8001a44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <MX_DMA_Init+0x6c>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a52:	607b      	str	r3, [r7, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2102      	movs	r1, #2
 8001a5a:	2038      	movs	r0, #56	; 0x38
 8001a5c:	f006 f9cd 	bl	8007dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a60:	2038      	movs	r0, #56	; 0x38
 8001a62:	f006 f9e6 	bl	8007e32 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 2, 0);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2102      	movs	r1, #2
 8001a6a:	203a      	movs	r0, #58	; 0x3a
 8001a6c:	f006 f9c5 	bl	8007dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001a70:	203a      	movs	r0, #58	; 0x3a
 8001a72:	f006 f9de 	bl	8007e32 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2100      	movs	r1, #0
 8001a7a:	203b      	movs	r0, #59	; 0x3b
 8001a7c:	f006 f9bd 	bl	8007dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001a80:	203b      	movs	r0, #59	; 0x3b
 8001a82:	f006 f9d6 	bl	8007e32 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2100      	movs	r1, #0
 8001a8a:	2045      	movs	r0, #69	; 0x45
 8001a8c:	f006 f9b5 	bl	8007dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001a90:	2045      	movs	r0, #69	; 0x45
 8001a92:	f006 f9ce 	bl	8007e32 <HAL_NVIC_EnableIRQ>

}
 8001a96:	bf00      	nop
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40023800 	.word	0x40023800

08001aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08a      	sub	sp, #40	; 0x28
 8001aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aaa:	f107 0314 	add.w	r3, r7, #20
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
 8001ab8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	4b49      	ldr	r3, [pc, #292]	; (8001be4 <MX_GPIO_Init+0x140>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a48      	ldr	r2, [pc, #288]	; (8001be4 <MX_GPIO_Init+0x140>)
 8001ac4:	f043 0304 	orr.w	r3, r3, #4
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b46      	ldr	r3, [pc, #280]	; (8001be4 <MX_GPIO_Init+0x140>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	4b42      	ldr	r3, [pc, #264]	; (8001be4 <MX_GPIO_Init+0x140>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a41      	ldr	r2, [pc, #260]	; (8001be4 <MX_GPIO_Init+0x140>)
 8001ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b3f      	ldr	r3, [pc, #252]	; (8001be4 <MX_GPIO_Init+0x140>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	4b3b      	ldr	r3, [pc, #236]	; (8001be4 <MX_GPIO_Init+0x140>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a3a      	ldr	r2, [pc, #232]	; (8001be4 <MX_GPIO_Init+0x140>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b38      	ldr	r3, [pc, #224]	; (8001be4 <MX_GPIO_Init+0x140>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	4b34      	ldr	r3, [pc, #208]	; (8001be4 <MX_GPIO_Init+0x140>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a33      	ldr	r2, [pc, #204]	; (8001be4 <MX_GPIO_Init+0x140>)
 8001b18:	f043 0302 	orr.w	r3, r3, #2
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b31      	ldr	r3, [pc, #196]	; (8001be4 <MX_GPIO_Init+0x140>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	603b      	str	r3, [r7, #0]
 8001b2e:	4b2d      	ldr	r3, [pc, #180]	; (8001be4 <MX_GPIO_Init+0x140>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a2c      	ldr	r2, [pc, #176]	; (8001be4 <MX_GPIO_Init+0x140>)
 8001b34:	f043 0308 	orr.w	r3, r3, #8
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b2a      	ldr	r3, [pc, #168]	; (8001be4 <MX_GPIO_Init+0x140>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0308 	and.w	r3, r3, #8
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001b46:	2200      	movs	r2, #0
 8001b48:	210f      	movs	r1, #15
 8001b4a:	4827      	ldr	r0, [pc, #156]	; (8001be8 <MX_GPIO_Init+0x144>)
 8001b4c:	f006 fed6 	bl	80088fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT0_Pin|OUT1_Pin, GPIO_PIN_RESET);
 8001b50:	2200      	movs	r2, #0
 8001b52:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001b56:	4825      	ldr	r0, [pc, #148]	; (8001bec <MX_GPIO_Init+0x148>)
 8001b58:	f006 fed0 	bl	80088fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8001b5c:	230f      	movs	r3, #15
 8001b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b60:	2301      	movs	r3, #1
 8001b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	4619      	mov	r1, r3
 8001b72:	481d      	ldr	r0, [pc, #116]	; (8001be8 <MX_GPIO_Init+0x144>)
 8001b74:	f006 fd16 	bl	80085a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_Pin OUT1_Pin */
  GPIO_InitStruct.Pin = OUT0_Pin|OUT1_Pin;
 8001b78:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b86:	2300      	movs	r3, #0
 8001b88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4816      	ldr	r0, [pc, #88]	; (8001bec <MX_GPIO_Init+0x148>)
 8001b92:	f006 fd07 	bl	80085a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI0_Pin EXTI1_Pin */
  GPIO_InitStruct.Pin = EXTI0_Pin|EXTI1_Pin;
 8001b96:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b9c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	4619      	mov	r1, r3
 8001bac:	480f      	ldr	r0, [pc, #60]	; (8001bec <MX_GPIO_Init+0x148>)
 8001bae:	f006 fcf9 	bl	80085a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CD_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin;
 8001bb2:	2380      	movs	r3, #128	; 0x80
 8001bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_CD_GPIO_Port, &GPIO_InitStruct);
 8001bbe:	f107 0314 	add.w	r3, r7, #20
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4808      	ldr	r0, [pc, #32]	; (8001be8 <MX_GPIO_Init+0x144>)
 8001bc6:	f006 fced 	bl	80085a4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2101      	movs	r1, #1
 8001bce:	2028      	movs	r0, #40	; 0x28
 8001bd0:	f006 f913 	bl	8007dfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001bd4:	2028      	movs	r0, #40	; 0x28
 8001bd6:	f006 f92c 	bl	8007e32 <HAL_NVIC_EnableIRQ>

}
 8001bda:	bf00      	nop
 8001bdc:	3728      	adds	r7, #40	; 0x28
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40020800 	.word	0x40020800
 8001bec:	40020400 	.word	0x40020400

08001bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bf4:	b672      	cpsid	i
}
 8001bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <Error_Handler+0x8>
	...

08001bfc <Process_Data>:
 */

#include "pdm_can.h"

static void Process_Data(uint16_t id, uint16_t data, PDM_Data* data_struct)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	603a      	str	r2, [r7, #0]
 8001c06:	80fb      	strh	r3, [r7, #6]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	80bb      	strh	r3, [r7, #4]
	switch(id >> 1){
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	085b      	lsrs	r3, r3, #1
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	3b01      	subs	r3, #1
 8001c14:	2b1d      	cmp	r3, #29
 8001c16:	f200 81f9 	bhi.w	800200c <Process_Data+0x410>
 8001c1a:	a201      	add	r2, pc, #4	; (adr r2, 8001c20 <Process_Data+0x24>)
 8001c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c20:	08001c99 	.word	0x08001c99
 8001c24:	08001cc9 	.word	0x08001cc9
 8001c28:	08001cf9 	.word	0x08001cf9
 8001c2c:	08001d29 	.word	0x08001d29
 8001c30:	08001d59 	.word	0x08001d59
 8001c34:	08001d89 	.word	0x08001d89
 8001c38:	08001db9 	.word	0x08001db9
 8001c3c:	08001de9 	.word	0x08001de9
 8001c40:	08001e19 	.word	0x08001e19
 8001c44:	08001e49 	.word	0x08001e49
 8001c48:	08001e79 	.word	0x08001e79
 8001c4c:	08001ea9 	.word	0x08001ea9
 8001c50:	08001ed9 	.word	0x08001ed9
 8001c54:	08001f09 	.word	0x08001f09
 8001c58:	08001f39 	.word	0x08001f39
 8001c5c:	08001f69 	.word	0x08001f69
 8001c60:	08001f9d 	.word	0x08001f9d
 8001c64:	08001fa5 	.word	0x08001fa5
 8001c68:	08001fad 	.word	0x08001fad
 8001c6c:	08001fb5 	.word	0x08001fb5
 8001c70:	08001fbd 	.word	0x08001fbd
 8001c74:	08001fc5 	.word	0x08001fc5
 8001c78:	08001fcd 	.word	0x08001fcd
 8001c7c:	08001fd5 	.word	0x08001fd5
 8001c80:	08001fdd 	.word	0x08001fdd
 8001c84:	08001fe5 	.word	0x08001fe5
 8001c88:	08001fed 	.word	0x08001fed
 8001c8c:	08001ff5 	.word	0x08001ff5
 8001c90:	08001ffd 	.word	0x08001ffd
 8001c94:	08002005 	.word	0x08002005
		case 0x0001:
			data_struct->Current_Buffer[0] = data;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	88ba      	ldrh	r2, [r7, #4]
 8001c9c:	809a      	strh	r2, [r3, #4]
			if((id & 0x0001) == 1)
 8001c9e:	88fb      	ldrh	r3, [r7, #6]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d007      	beq.n	8001cb8 <Process_Data+0xbc>
				data_struct->Output_Verify |= 1;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	885b      	ldrh	r3, [r3, #2]
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~1;
			break;
 8001cb6:	e1aa      	b.n	800200e <Process_Data+0x412>
				data_struct->Output_Verify &= ~1;
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	885b      	ldrh	r3, [r3, #2]
 8001cbc:	f023 0301 	bic.w	r3, r3, #1
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	805a      	strh	r2, [r3, #2]
			break;
 8001cc6:	e1a2      	b.n	800200e <Process_Data+0x412>

		case 0x0002:
			data_struct->Current_Buffer[1] = data;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	88ba      	ldrh	r2, [r7, #4]
 8001ccc:	80da      	strh	r2, [r3, #6]
			if((id & 0x0001) == 1)
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d007      	beq.n	8001ce8 <Process_Data+0xec>
				data_struct->Output_Verify |= (1 << 1);
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	885b      	ldrh	r3, [r3, #2]
 8001cdc:	f043 0302 	orr.w	r3, r3, #2
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 1);
			break;
 8001ce6:	e192      	b.n	800200e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 1);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	885b      	ldrh	r3, [r3, #2]
 8001cec:	f023 0302 	bic.w	r3, r3, #2
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	805a      	strh	r2, [r3, #2]
			break;
 8001cf6:	e18a      	b.n	800200e <Process_Data+0x412>

		case 0x0003:
			data_struct->Current_Buffer[2] = data;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	88ba      	ldrh	r2, [r7, #4]
 8001cfc:	811a      	strh	r2, [r3, #8]
			if((id & 0x0001) == 1)
 8001cfe:	88fb      	ldrh	r3, [r7, #6]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d007      	beq.n	8001d18 <Process_Data+0x11c>
				data_struct->Output_Verify |= (1 << 2);
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	885b      	ldrh	r3, [r3, #2]
 8001d0c:	f043 0304 	orr.w	r3, r3, #4
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 2);
			break;
 8001d16:	e17a      	b.n	800200e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 2);
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	885b      	ldrh	r3, [r3, #2]
 8001d1c:	f023 0304 	bic.w	r3, r3, #4
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	805a      	strh	r2, [r3, #2]
			break;
 8001d26:	e172      	b.n	800200e <Process_Data+0x412>

		case 0x0004:
			data_struct->Current_Buffer[3] = data;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	88ba      	ldrh	r2, [r7, #4]
 8001d2c:	815a      	strh	r2, [r3, #10]
			if((id & 0x0001) == 1)
 8001d2e:	88fb      	ldrh	r3, [r7, #6]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d007      	beq.n	8001d48 <Process_Data+0x14c>
				data_struct->Output_Verify |= (1 << 3);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	885b      	ldrh	r3, [r3, #2]
 8001d3c:	f043 0308 	orr.w	r3, r3, #8
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 3);
			break;
 8001d46:	e162      	b.n	800200e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 3);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	885b      	ldrh	r3, [r3, #2]
 8001d4c:	f023 0308 	bic.w	r3, r3, #8
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	805a      	strh	r2, [r3, #2]
			break;
 8001d56:	e15a      	b.n	800200e <Process_Data+0x412>

		case 0x0005:
			data_struct->Current_Buffer[4] = data;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	88ba      	ldrh	r2, [r7, #4]
 8001d5c:	819a      	strh	r2, [r3, #12]
			if((id & 0x0001) == 1)
 8001d5e:	88fb      	ldrh	r3, [r7, #6]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d007      	beq.n	8001d78 <Process_Data+0x17c>
				data_struct->Output_Verify |= (1 << 4);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	885b      	ldrh	r3, [r3, #2]
 8001d6c:	f043 0310 	orr.w	r3, r3, #16
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 4);
			break;
 8001d76:	e14a      	b.n	800200e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 4);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	885b      	ldrh	r3, [r3, #2]
 8001d7c:	f023 0310 	bic.w	r3, r3, #16
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	805a      	strh	r2, [r3, #2]
			break;
 8001d86:	e142      	b.n	800200e <Process_Data+0x412>

		case 0x0006:
			data_struct->Current_Buffer[5] = data;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	88ba      	ldrh	r2, [r7, #4]
 8001d8c:	81da      	strh	r2, [r3, #14]
			if((id & 0x0001) == 1)
 8001d8e:	88fb      	ldrh	r3, [r7, #6]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d007      	beq.n	8001da8 <Process_Data+0x1ac>
				data_struct->Output_Verify |= (1 << 5);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	885b      	ldrh	r3, [r3, #2]
 8001d9c:	f043 0320 	orr.w	r3, r3, #32
 8001da0:	b29a      	uxth	r2, r3
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 5);
			break;
 8001da6:	e132      	b.n	800200e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 5);
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	885b      	ldrh	r3, [r3, #2]
 8001dac:	f023 0320 	bic.w	r3, r3, #32
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	805a      	strh	r2, [r3, #2]
			break;
 8001db6:	e12a      	b.n	800200e <Process_Data+0x412>

		case 0x0007:
			data_struct->Current_Buffer[6] = data;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	88ba      	ldrh	r2, [r7, #4]
 8001dbc:	821a      	strh	r2, [r3, #16]
			if((id & 0x0001) == 1)
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d007      	beq.n	8001dd8 <Process_Data+0x1dc>
				data_struct->Output_Verify |= (1 << 6);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	885b      	ldrh	r3, [r3, #2]
 8001dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 6);
			break;
 8001dd6:	e11a      	b.n	800200e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 6);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	885b      	ldrh	r3, [r3, #2]
 8001ddc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	805a      	strh	r2, [r3, #2]
			break;
 8001de6:	e112      	b.n	800200e <Process_Data+0x412>

		case 0x0008:
			data_struct->Current_Buffer[7] = data;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	88ba      	ldrh	r2, [r7, #4]
 8001dec:	825a      	strh	r2, [r3, #18]
			if((id & 0x0001) == 1)
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d007      	beq.n	8001e08 <Process_Data+0x20c>
				data_struct->Output_Verify |= (1 << 7);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	885b      	ldrh	r3, [r3, #2]
 8001dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 7);
			break;
 8001e06:	e102      	b.n	800200e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 7);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	885b      	ldrh	r3, [r3, #2]
 8001e0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	805a      	strh	r2, [r3, #2]
			break;
 8001e16:	e0fa      	b.n	800200e <Process_Data+0x412>

		case 0x0009:
			data_struct->Current_Buffer[8] = data;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	88ba      	ldrh	r2, [r7, #4]
 8001e1c:	829a      	strh	r2, [r3, #20]
			if((id & 0x0001) == 1)
 8001e1e:	88fb      	ldrh	r3, [r7, #6]
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d007      	beq.n	8001e38 <Process_Data+0x23c>
				data_struct->Output_Verify |= (1 << 8);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	885b      	ldrh	r3, [r3, #2]
 8001e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 8);
			break;
 8001e36:	e0ea      	b.n	800200e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 8);
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	885b      	ldrh	r3, [r3, #2]
 8001e3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	805a      	strh	r2, [r3, #2]
			break;
 8001e46:	e0e2      	b.n	800200e <Process_Data+0x412>

		case 0x000A:
			data_struct->Current_Buffer[9] = data;
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	88ba      	ldrh	r2, [r7, #4]
 8001e4c:	82da      	strh	r2, [r3, #22]
			if((id & 0x0001) == 1)
 8001e4e:	88fb      	ldrh	r3, [r7, #6]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d007      	beq.n	8001e68 <Process_Data+0x26c>
				data_struct->Output_Verify |= (1 << 9);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	885b      	ldrh	r3, [r3, #2]
 8001e5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 9);
			break;
 8001e66:	e0d2      	b.n	800200e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 9);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	885b      	ldrh	r3, [r3, #2]
 8001e6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e70:	b29a      	uxth	r2, r3
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	805a      	strh	r2, [r3, #2]
			break;
 8001e76:	e0ca      	b.n	800200e <Process_Data+0x412>

		case 0x000B:
			data_struct->Current_Buffer[10] = data;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	88ba      	ldrh	r2, [r7, #4]
 8001e7c:	831a      	strh	r2, [r3, #24]
			if((id & 0x0001) == 1)
 8001e7e:	88fb      	ldrh	r3, [r7, #6]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d007      	beq.n	8001e98 <Process_Data+0x29c>
				data_struct->Output_Verify |= (1 << 10);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	885b      	ldrh	r3, [r3, #2]
 8001e8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 10);
			break;
 8001e96:	e0ba      	b.n	800200e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 10);
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	885b      	ldrh	r3, [r3, #2]
 8001e9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	805a      	strh	r2, [r3, #2]
			break;
 8001ea6:	e0b2      	b.n	800200e <Process_Data+0x412>

		case 0x000C:
			data_struct->Current_Buffer[11] = data;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	88ba      	ldrh	r2, [r7, #4]
 8001eac:	835a      	strh	r2, [r3, #26]
			if((id & 0x0001) == 1)
 8001eae:	88fb      	ldrh	r3, [r7, #6]
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d007      	beq.n	8001ec8 <Process_Data+0x2cc>
				data_struct->Output_Verify |= (1 << 11);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	885b      	ldrh	r3, [r3, #2]
 8001ebc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 11);
			break;
 8001ec6:	e0a2      	b.n	800200e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 11);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	885b      	ldrh	r3, [r3, #2]
 8001ecc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	805a      	strh	r2, [r3, #2]
			break;
 8001ed6:	e09a      	b.n	800200e <Process_Data+0x412>

		case 0x000D:
			data_struct->Current_Buffer[12] = data;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	88ba      	ldrh	r2, [r7, #4]
 8001edc:	839a      	strh	r2, [r3, #28]
			if((id & 0x0001) == 1)
 8001ede:	88fb      	ldrh	r3, [r7, #6]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d007      	beq.n	8001ef8 <Process_Data+0x2fc>
				data_struct->Output_Verify |= (1 << 12);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	885b      	ldrh	r3, [r3, #2]
 8001eec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 12);
			break;
 8001ef6:	e08a      	b.n	800200e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 12);
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	885b      	ldrh	r3, [r3, #2]
 8001efc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	805a      	strh	r2, [r3, #2]
			break;
 8001f06:	e082      	b.n	800200e <Process_Data+0x412>

		case 0x000E:
			data_struct->Current_Buffer[13] = data;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	88ba      	ldrh	r2, [r7, #4]
 8001f0c:	83da      	strh	r2, [r3, #30]
			if((id & 0x0001) == 1)
 8001f0e:	88fb      	ldrh	r3, [r7, #6]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d007      	beq.n	8001f28 <Process_Data+0x32c>
				data_struct->Output_Verify |= (1 << 13);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	885b      	ldrh	r3, [r3, #2]
 8001f1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 13);
			break;
 8001f26:	e072      	b.n	800200e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 13);
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	885b      	ldrh	r3, [r3, #2]
 8001f2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	805a      	strh	r2, [r3, #2]
			break;
 8001f36:	e06a      	b.n	800200e <Process_Data+0x412>

		case 0x000F:
			data_struct->Current_Buffer[14] = data;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	88ba      	ldrh	r2, [r7, #4]
 8001f3c:	841a      	strh	r2, [r3, #32]
			if((id & 0x0001) == 1)
 8001f3e:	88fb      	ldrh	r3, [r7, #6]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d007      	beq.n	8001f58 <Process_Data+0x35c>
				data_struct->Output_Verify |= (1 << 14);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	885b      	ldrh	r3, [r3, #2]
 8001f4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 14);
			break;
 8001f56:	e05a      	b.n	800200e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 14);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	885b      	ldrh	r3, [r3, #2]
 8001f5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f60:	b29a      	uxth	r2, r3
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	805a      	strh	r2, [r3, #2]
			break;
 8001f66:	e052      	b.n	800200e <Process_Data+0x412>

		case 0x0010:
			data_struct->Current_Buffer[15] = data;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	88ba      	ldrh	r2, [r7, #4]
 8001f6c:	845a      	strh	r2, [r3, #34]	; 0x22
			if((id & 0x0001) == 1)
 8001f6e:	88fb      	ldrh	r3, [r7, #6]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d009      	beq.n	8001f8c <Process_Data+0x390>
				data_struct->Output_Verify |= (1 << 15);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	885b      	ldrh	r3, [r3, #2]
 8001f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f84:	b29a      	uxth	r2, r3
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 15);
			break;
 8001f8a:	e040      	b.n	800200e <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 15);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	885b      	ldrh	r3, [r3, #2]
 8001f90:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	805a      	strh	r2, [r3, #2]
			break;
 8001f9a:	e038      	b.n	800200e <Process_Data+0x412>

		case 0x0011:
			data_struct->Tempetature_Buffer[0] = data;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	88ba      	ldrh	r2, [r7, #4]
 8001fa0:	859a      	strh	r2, [r3, #44]	; 0x2c
			break;
 8001fa2:	e034      	b.n	800200e <Process_Data+0x412>

		case 0x0012:
			data_struct->Tempetature_Buffer[1] = data;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	88ba      	ldrh	r2, [r7, #4]
 8001fa8:	85da      	strh	r2, [r3, #46]	; 0x2e
			break;
 8001faa:	e030      	b.n	800200e <Process_Data+0x412>

		case 0x0013:
			data_struct->Tempetature_Buffer[2] = data;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	88ba      	ldrh	r2, [r7, #4]
 8001fb0:	861a      	strh	r2, [r3, #48]	; 0x30
			break;
 8001fb2:	e02c      	b.n	800200e <Process_Data+0x412>

		case 0x0014:
			data_struct->Tempetature_Buffer[3] = data;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	88ba      	ldrh	r2, [r7, #4]
 8001fb8:	865a      	strh	r2, [r3, #50]	; 0x32
			break;
 8001fba:	e028      	b.n	800200e <Process_Data+0x412>

		case 0x0015:
			data_struct->Tempetature_Buffer[4] = data;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	88ba      	ldrh	r2, [r7, #4]
 8001fc0:	869a      	strh	r2, [r3, #52]	; 0x34
			break;
 8001fc2:	e024      	b.n	800200e <Process_Data+0x412>

		case 0x0016:
			data_struct->Tempetature_Buffer[5] = data;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	88ba      	ldrh	r2, [r7, #4]
 8001fc8:	86da      	strh	r2, [r3, #54]	; 0x36
			break;
 8001fca:	e020      	b.n	800200e <Process_Data+0x412>

		case 0x0017:
			data_struct->Tempetature_Buffer[6] = data;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	88ba      	ldrh	r2, [r7, #4]
 8001fd0:	871a      	strh	r2, [r3, #56]	; 0x38
			break;
 8001fd2:	e01c      	b.n	800200e <Process_Data+0x412>

		case 0x0018:
			data_struct->Tempetature_Buffer[7] = data;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	88ba      	ldrh	r2, [r7, #4]
 8001fd8:	875a      	strh	r2, [r3, #58]	; 0x3a
			break;
 8001fda:	e018      	b.n	800200e <Process_Data+0x412>

		case 0x0019:
			data_struct->Tempetature_Buffer[8] = data;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	88ba      	ldrh	r2, [r7, #4]
 8001fe0:	879a      	strh	r2, [r3, #60]	; 0x3c
			break;
 8001fe2:	e014      	b.n	800200e <Process_Data+0x412>

		case 0x001A:
			data_struct->Input_Voltage = data;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	88ba      	ldrh	r2, [r7, #4]
 8001fe8:	801a      	strh	r2, [r3, #0]
			break;
 8001fea:	e010      	b.n	800200e <Process_Data+0x412>

		case 0x001B:
			data_struct->Duty_Cycle_Buffer[0] = data;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	88ba      	ldrh	r2, [r7, #4]
 8001ff0:	849a      	strh	r2, [r3, #36]	; 0x24
			break;
 8001ff2:	e00c      	b.n	800200e <Process_Data+0x412>

		case 0x001C:
			data_struct->Duty_Cycle_Buffer[1] = data;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	88ba      	ldrh	r2, [r7, #4]
 8001ff8:	84da      	strh	r2, [r3, #38]	; 0x26
			break;
 8001ffa:	e008      	b.n	800200e <Process_Data+0x412>

		case 0x001D:
			data_struct->Duty_Cycle_Buffer[2] = data;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	88ba      	ldrh	r2, [r7, #4]
 8002000:	851a      	strh	r2, [r3, #40]	; 0x28
			break;
 8002002:	e004      	b.n	800200e <Process_Data+0x412>

		case 0x001E:
			data_struct->Duty_Cycle_Buffer[3] = data;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	88ba      	ldrh	r2, [r7, #4]
 8002008:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
 800200a:	e000      	b.n	800200e <Process_Data+0x412>

		default:
			break;
 800200c:	bf00      	nop
	}

	return;
 800200e:	bf00      	nop
}
 8002010:	370c      	adds	r7, #12
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop

0800201c <PDM_CAN_FilterConfig>:

HAL_StatusTypeDef PDM_CAN_FilterConfig(CAN_HandleTypeDef* hcan, uint32_t bank_position, uint32_t fifo_assignment)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b090      	sub	sp, #64	; 0x40
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filterID = 0x1E35C000, filterMask = 0x1FFFF000;
 8002028:	4b13      	ldr	r3, [pc, #76]	; (8002078 <PDM_CAN_FilterConfig+0x5c>)
 800202a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800202c:	4b13      	ldr	r3, [pc, #76]	; (800207c <PDM_CAN_FilterConfig+0x60>)
 800202e:	63bb      	str	r3, [r7, #56]	; 0x38

	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002030:	2300      	movs	r3, #0
 8002032:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002034:	2301      	movs	r3, #1
 8002036:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterIdHigh = filterID >> 13;
 8002038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800203a:	0b5b      	lsrs	r3, r3, #13
 800203c:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow = (filterID << 3) & 0xFFF8;
 800203e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	b29b      	uxth	r3, r3
 8002044:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh = filterMask >> 13;
 8002046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002048:	0b5b      	lsrs	r3, r3, #13
 800204a:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow = (filterMask << 3) & 0xFFF8;
 800204c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	b29b      	uxth	r3, r3
 8002052:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterBank = bank_position;
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterFIFOAssignment = fifo_assignment;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterActivation = ENABLE;
 800205c:	2301      	movs	r3, #1
 800205e:	633b      	str	r3, [r7, #48]	; 0x30

	return HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 8002060:	f107 0310 	add.w	r3, r7, #16
 8002064:	4619      	mov	r1, r3
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f005 f850 	bl	800710c <HAL_CAN_ConfigFilter>
 800206c:	4603      	mov	r3, r0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3740      	adds	r7, #64	; 0x40
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	1e35c000 	.word	0x1e35c000
 800207c:	1ffff000 	.word	0x1ffff000

08002080 <PDM_CAN_Process_Data>:

void PDM_CAN_Process_Data(uint32_t data_id, uint8_t data_length, uint8_t* data_buffer, PDM_Data* data_struct)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	607a      	str	r2, [r7, #4]
 800208a:	603b      	str	r3, [r7, #0]
 800208c:	460b      	mov	r3, r1
 800208e:	72fb      	strb	r3, [r7, #11]
	uint16_t id = 0, data = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	82fb      	strh	r3, [r7, #22]
 8002094:	2300      	movs	r3, #0
 8002096:	82bb      	strh	r3, [r7, #20]

	if((data_id & 0x1FFFF000) != 0x1E35C000)
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	4b26      	ldr	r3, [pc, #152]	; (8002134 <PDM_CAN_Process_Data+0xb4>)
 800209c:	4013      	ands	r3, r2
 800209e:	4a26      	ldr	r2, [pc, #152]	; (8002138 <PDM_CAN_Process_Data+0xb8>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d142      	bne.n	800212a <PDM_CAN_Process_Data+0xaa>
		return;

	id  = data_buffer[0] << 8;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	021b      	lsls	r3, r3, #8
 80020ac:	82fb      	strh	r3, [r7, #22]
	id |= data_buffer[1] & 0xff;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3301      	adds	r3, #1
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	8afb      	ldrh	r3, [r7, #22]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	82fb      	strh	r3, [r7, #22]
	data  = data_buffer[2] << 8;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3302      	adds	r3, #2
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	021b      	lsls	r3, r3, #8
 80020c6:	82bb      	strh	r3, [r7, #20]
	data |= data_buffer[3] & 0xff;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3303      	adds	r3, #3
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	8abb      	ldrh	r3, [r7, #20]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	82bb      	strh	r3, [r7, #20]

	Process_Data(id, data, data_struct);
 80020d6:	8ab9      	ldrh	r1, [r7, #20]
 80020d8:	8afb      	ldrh	r3, [r7, #22]
 80020da:	683a      	ldr	r2, [r7, #0]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff fd8d 	bl	8001bfc <Process_Data>

	if(data_length == 8)
 80020e2:	7afb      	ldrb	r3, [r7, #11]
 80020e4:	2b08      	cmp	r3, #8
 80020e6:	d121      	bne.n	800212c <PDM_CAN_Process_Data+0xac>
	{
		id  = data_buffer[4] << 8;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3304      	adds	r3, #4
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	021b      	lsls	r3, r3, #8
 80020f2:	82fb      	strh	r3, [r7, #22]
		id |= data_buffer[5] & 0xff;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3305      	adds	r3, #5
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	8afb      	ldrh	r3, [r7, #22]
 80020fe:	4313      	orrs	r3, r2
 8002100:	82fb      	strh	r3, [r7, #22]
		data  = data_buffer[6] << 8;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3306      	adds	r3, #6
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	b29b      	uxth	r3, r3
 800210a:	021b      	lsls	r3, r3, #8
 800210c:	82bb      	strh	r3, [r7, #20]
		data |= data_buffer[7] & 0xff;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3307      	adds	r3, #7
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	b29a      	uxth	r2, r3
 8002116:	8abb      	ldrh	r3, [r7, #20]
 8002118:	4313      	orrs	r3, r2
 800211a:	82bb      	strh	r3, [r7, #20]

		Process_Data(id, data, data_struct);
 800211c:	8ab9      	ldrh	r1, [r7, #20]
 800211e:	8afb      	ldrh	r3, [r7, #22]
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff fd6a 	bl	8001bfc <Process_Data>
 8002128:	e000      	b.n	800212c <PDM_CAN_Process_Data+0xac>
		return;
 800212a:	bf00      	nop
	}
}
 800212c:	3718      	adds	r7, #24
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	1ffff000 	.word	0x1ffff000
 8002138:	1e35c000 	.word	0x1e35c000

0800213c <Verify_Data>:
 */

#include "principal.h"

static void Verify_Data()
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
	Verify = 0;
 8002142:	4b2b      	ldr	r3, [pc, #172]	; (80021f0 <Verify_Data+0xb4>)
 8002144:	2200      	movs	r2, #0
 8002146:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < NBR_OF_CHANNELS; i++)
 8002148:	2300      	movs	r3, #0
 800214a:	71fb      	strb	r3, [r7, #7]
 800214c:	e015      	b.n	800217a <Verify_Data+0x3e>
		if(ADC_Buffer[i] > ADC_THRESHOLD)
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	4a28      	ldr	r2, [pc, #160]	; (80021f4 <Verify_Data+0xb8>)
 8002152:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002156:	2b1e      	cmp	r3, #30
 8002158:	d90c      	bls.n	8002174 <Verify_Data+0x38>
			Verify |= (1 << i);
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	2201      	movs	r2, #1
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	b21a      	sxth	r2, r3
 8002164:	4b22      	ldr	r3, [pc, #136]	; (80021f0 <Verify_Data+0xb4>)
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	b21b      	sxth	r3, r3
 800216a:	4313      	orrs	r3, r2
 800216c:	b21b      	sxth	r3, r3
 800216e:	b29a      	uxth	r2, r3
 8002170:	4b1f      	ldr	r3, [pc, #124]	; (80021f0 <Verify_Data+0xb4>)
 8002172:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < NBR_OF_CHANNELS; i++)
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	3301      	adds	r3, #1
 8002178:	71fb      	strb	r3, [r7, #7]
 800217a:	79fb      	ldrb	r3, [r7, #7]
 800217c:	2b0c      	cmp	r3, #12
 800217e:	d9e6      	bls.n	800214e <Verify_Data+0x12>

	HAL_GPIO_TogglePin(LED_OK);
 8002180:	2101      	movs	r1, #1
 8002182:	481d      	ldr	r0, [pc, #116]	; (80021f8 <Verify_Data+0xbc>)
 8002184:	f006 fbd3 	bl	800892e <HAL_GPIO_TogglePin>

	if(Verify_Datalogger == 1)
 8002188:	4b1c      	ldr	r3, [pc, #112]	; (80021fc <Verify_Data+0xc0>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d105      	bne.n	800219c <Verify_Data+0x60>
		HAL_GPIO_WritePin(LED_DATALOGGER, GPIO_PIN_SET);
 8002190:	2201      	movs	r2, #1
 8002192:	2102      	movs	r1, #2
 8002194:	4818      	ldr	r0, [pc, #96]	; (80021f8 <Verify_Data+0xbc>)
 8002196:	f006 fbb1 	bl	80088fc <HAL_GPIO_WritePin>
 800219a:	e004      	b.n	80021a6 <Verify_Data+0x6a>
	else
		HAL_GPIO_WritePin(LED_DATALOGGER, GPIO_PIN_RESET);
 800219c:	2200      	movs	r2, #0
 800219e:	2102      	movs	r1, #2
 80021a0:	4815      	ldr	r0, [pc, #84]	; (80021f8 <Verify_Data+0xbc>)
 80021a2:	f006 fbab 	bl	80088fc <HAL_GPIO_WritePin>

	if((Verify_CAN & 1) == 1)
 80021a6:	4b16      	ldr	r3, [pc, #88]	; (8002200 <Verify_Data+0xc4>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d004      	beq.n	80021bc <Verify_Data+0x80>
		HAL_GPIO_TogglePin(LED_CAN_TX);
 80021b2:	2104      	movs	r1, #4
 80021b4:	4810      	ldr	r0, [pc, #64]	; (80021f8 <Verify_Data+0xbc>)
 80021b6:	f006 fbba 	bl	800892e <HAL_GPIO_TogglePin>
 80021ba:	e004      	b.n	80021c6 <Verify_Data+0x8a>
	else
		HAL_GPIO_WritePin(LED_CAN_TX, GPIO_PIN_RESET);
 80021bc:	2200      	movs	r2, #0
 80021be:	2104      	movs	r1, #4
 80021c0:	480d      	ldr	r0, [pc, #52]	; (80021f8 <Verify_Data+0xbc>)
 80021c2:	f006 fb9b 	bl	80088fc <HAL_GPIO_WritePin>

	if((Verify_CAN & 2) == 2)
 80021c6:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <Verify_Data+0xc4>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d004      	beq.n	80021dc <Verify_Data+0xa0>
		HAL_GPIO_TogglePin(LED_CAN_RX);
 80021d2:	2108      	movs	r1, #8
 80021d4:	4808      	ldr	r0, [pc, #32]	; (80021f8 <Verify_Data+0xbc>)
 80021d6:	f006 fbaa 	bl	800892e <HAL_GPIO_TogglePin>
	else
		HAL_GPIO_WritePin(LED_CAN_RX, GPIO_PIN_RESET);
}
 80021da:	e004      	b.n	80021e6 <Verify_Data+0xaa>
		HAL_GPIO_WritePin(LED_CAN_RX, GPIO_PIN_RESET);
 80021dc:	2200      	movs	r2, #0
 80021de:	2108      	movs	r1, #8
 80021e0:	4805      	ldr	r0, [pc, #20]	; (80021f8 <Verify_Data+0xbc>)
 80021e2:	f006 fb8b 	bl	80088fc <HAL_GPIO_WritePin>
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20002e78 	.word	0x20002e78
 80021f4:	20000704 	.word	0x20000704
 80021f8:	40020800 	.word	0x40020800
 80021fc:	20001a10 	.word	0x20001a10
 8002200:	20001a58 	.word	0x20001a58

08002204 <Tx_Analog_1_4>:

static void Tx_Analog_1_4(CAN_HandleTypeDef* hcan)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 800220c:	4b43      	ldr	r3, [pc, #268]	; (800231c <Tx_Analog_1_4+0x118>)
 800220e:	2200      	movs	r2, #0
 8002210:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8002212:	4b42      	ldr	r3, [pc, #264]	; (800231c <Tx_Analog_1_4+0x118>)
 8002214:	2200      	movs	r2, #0
 8002216:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8002218:	4b40      	ldr	r3, [pc, #256]	; (800231c <Tx_Analog_1_4+0x118>)
 800221a:	2200      	movs	r2, #0
 800221c:	751a      	strb	r2, [r3, #20]
	TxHeader.StdId = FIRST_ID + Analog_1_4;
 800221e:	4b3f      	ldr	r3, [pc, #252]	; (800231c <Tx_Analog_1_4+0x118>)
 8002220:	2201      	movs	r2, #1
 8002222:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 8;
 8002224:	4b3d      	ldr	r3, [pc, #244]	; (800231c <Tx_Analog_1_4+0x118>)
 8002226:	2208      	movs	r2, #8
 8002228:	611a      	str	r2, [r3, #16]

	TxData[0] = ADC_Buffer[0] >> 8;
 800222a:	4b3d      	ldr	r3, [pc, #244]	; (8002320 <Tx_Analog_1_4+0x11c>)
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	0a1b      	lsrs	r3, r3, #8
 8002230:	b29b      	uxth	r3, r3
 8002232:	b2da      	uxtb	r2, r3
 8002234:	4b3b      	ldr	r3, [pc, #236]	; (8002324 <Tx_Analog_1_4+0x120>)
 8002236:	701a      	strb	r2, [r3, #0]
	TxData[1] = ADC_Buffer[0] & 0xff;
 8002238:	4b39      	ldr	r3, [pc, #228]	; (8002320 <Tx_Analog_1_4+0x11c>)
 800223a:	881b      	ldrh	r3, [r3, #0]
 800223c:	b2da      	uxtb	r2, r3
 800223e:	4b39      	ldr	r3, [pc, #228]	; (8002324 <Tx_Analog_1_4+0x120>)
 8002240:	705a      	strb	r2, [r3, #1]
	TxData[2] = ADC_Buffer[1] >> 8;
 8002242:	4b37      	ldr	r3, [pc, #220]	; (8002320 <Tx_Analog_1_4+0x11c>)
 8002244:	885b      	ldrh	r3, [r3, #2]
 8002246:	0a1b      	lsrs	r3, r3, #8
 8002248:	b29b      	uxth	r3, r3
 800224a:	b2da      	uxtb	r2, r3
 800224c:	4b35      	ldr	r3, [pc, #212]	; (8002324 <Tx_Analog_1_4+0x120>)
 800224e:	709a      	strb	r2, [r3, #2]
	TxData[3] = ADC_Buffer[1] & 0xff;
 8002250:	4b33      	ldr	r3, [pc, #204]	; (8002320 <Tx_Analog_1_4+0x11c>)
 8002252:	885b      	ldrh	r3, [r3, #2]
 8002254:	b2da      	uxtb	r2, r3
 8002256:	4b33      	ldr	r3, [pc, #204]	; (8002324 <Tx_Analog_1_4+0x120>)
 8002258:	70da      	strb	r2, [r3, #3]
	TxData[4] = ADC_Buffer[2] >> 8;
 800225a:	4b31      	ldr	r3, [pc, #196]	; (8002320 <Tx_Analog_1_4+0x11c>)
 800225c:	889b      	ldrh	r3, [r3, #4]
 800225e:	0a1b      	lsrs	r3, r3, #8
 8002260:	b29b      	uxth	r3, r3
 8002262:	b2da      	uxtb	r2, r3
 8002264:	4b2f      	ldr	r3, [pc, #188]	; (8002324 <Tx_Analog_1_4+0x120>)
 8002266:	711a      	strb	r2, [r3, #4]
	TxData[5] = ADC_Buffer[2] & 0xff;
 8002268:	4b2d      	ldr	r3, [pc, #180]	; (8002320 <Tx_Analog_1_4+0x11c>)
 800226a:	889b      	ldrh	r3, [r3, #4]
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4b2d      	ldr	r3, [pc, #180]	; (8002324 <Tx_Analog_1_4+0x120>)
 8002270:	715a      	strb	r2, [r3, #5]
	TxData[6] = ADC_Buffer[3] >> 8;
 8002272:	4b2b      	ldr	r3, [pc, #172]	; (8002320 <Tx_Analog_1_4+0x11c>)
 8002274:	88db      	ldrh	r3, [r3, #6]
 8002276:	0a1b      	lsrs	r3, r3, #8
 8002278:	b29b      	uxth	r3, r3
 800227a:	b2da      	uxtb	r2, r3
 800227c:	4b29      	ldr	r3, [pc, #164]	; (8002324 <Tx_Analog_1_4+0x120>)
 800227e:	719a      	strb	r2, [r3, #6]
	TxData[7] = ADC_Buffer[3] & 0xff;
 8002280:	4b27      	ldr	r3, [pc, #156]	; (8002320 <Tx_Analog_1_4+0x11c>)
 8002282:	88db      	ldrh	r3, [r3, #6]
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4b27      	ldr	r3, [pc, #156]	; (8002324 <Tx_Analog_1_4+0x120>)
 8002288:	71da      	strb	r2, [r3, #7]

	if(Flag_Datalogger == DL_Save)
 800228a:	4b27      	ldr	r3, [pc, #156]	; (8002328 <Tx_Analog_1_4+0x124>)
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2b01      	cmp	r3, #1
 8002290:	d108      	bne.n	80022a4 <Tx_Analog_1_4+0xa0>
		Principal_Datalogger_Save_Buffer(TxHeader.StdId, TxHeader.DLC, TxData, &File_Struct);
 8002292:	4b22      	ldr	r3, [pc, #136]	; (800231c <Tx_Analog_1_4+0x118>)
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	4b21      	ldr	r3, [pc, #132]	; (800231c <Tx_Analog_1_4+0x118>)
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	b2d9      	uxtb	r1, r3
 800229c:	4b23      	ldr	r3, [pc, #140]	; (800232c <Tx_Analog_1_4+0x128>)
 800229e:	4a21      	ldr	r2, [pc, #132]	; (8002324 <Tx_Analog_1_4+0x120>)
 80022a0:	f003 fb32 	bl	8005908 <Principal_Datalogger_Save_Buffer>

	if((Acc_CAN[Analog_1_4] >= Per_CAN[Analog_1_4]) && (Per_CAN[Analog_1_4] != 0))
 80022a4:	4b22      	ldr	r3, [pc, #136]	; (8002330 <Tx_Analog_1_4+0x12c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a22      	ldr	r2, [pc, #136]	; (8002334 <Tx_Analog_1_4+0x130>)
 80022aa:	8812      	ldrh	r2, [r2, #0]
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d331      	bcc.n	8002314 <Tx_Analog_1_4+0x110>
 80022b0:	4b20      	ldr	r3, [pc, #128]	; (8002334 <Tx_Analog_1_4+0x130>)
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d02d      	beq.n	8002314 <Tx_Analog_1_4+0x110>
	{
		Acc_CAN[Analog_1_4] -= Per_CAN[Analog_1_4];
 80022b8:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <Tx_Analog_1_4+0x12c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a1d      	ldr	r2, [pc, #116]	; (8002334 <Tx_Analog_1_4+0x130>)
 80022be:	8812      	ldrh	r2, [r2, #0]
 80022c0:	1a9b      	subs	r3, r3, r2
 80022c2:	4a1b      	ldr	r2, [pc, #108]	; (8002330 <Tx_Analog_1_4+0x12c>)
 80022c4:	6013      	str	r3, [r2, #0]
		if(HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK)
 80022c6:	4b1c      	ldr	r3, [pc, #112]	; (8002338 <Tx_Analog_1_4+0x134>)
 80022c8:	4a16      	ldr	r2, [pc, #88]	; (8002324 <Tx_Analog_1_4+0x120>)
 80022ca:	4914      	ldr	r1, [pc, #80]	; (800231c <Tx_Analog_1_4+0x118>)
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f005 f841 	bl	8007354 <HAL_CAN_AddTxMessage>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d107      	bne.n	80022e8 <Tx_Analog_1_4+0xe4>
			Verify_CAN |= 1;
 80022d8:	4b18      	ldr	r3, [pc, #96]	; (800233c <Tx_Analog_1_4+0x138>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	4b16      	ldr	r3, [pc, #88]	; (800233c <Tx_Analog_1_4+0x138>)
 80022e4:	701a      	strb	r2, [r3, #0]
 80022e6:	e006      	b.n	80022f6 <Tx_Analog_1_4+0xf2>
		else
			Verify_CAN &= 0x02;
 80022e8:	4b14      	ldr	r3, [pc, #80]	; (800233c <Tx_Analog_1_4+0x138>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4b12      	ldr	r3, [pc, #72]	; (800233c <Tx_Analog_1_4+0x138>)
 80022f4:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 80022f6:	2300      	movs	r3, #0
 80022f8:	73fb      	strb	r3, [r7, #15]
 80022fa:	e002      	b.n	8002302 <Tx_Analog_1_4+0xfe>
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	3301      	adds	r3, #1
 8002300:	73fb      	strb	r3, [r7, #15]
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f005 f901 	bl	800750a <HAL_CAN_GetTxMailboxesFreeLevel>
 8002308:	4603      	mov	r3, r0
 800230a:	2b03      	cmp	r3, #3
 800230c:	d002      	beq.n	8002314 <Tx_Analog_1_4+0x110>
 800230e:	7bfb      	ldrb	r3, [r7, #15]
 8002310:	2b02      	cmp	r3, #2
 8002312:	d9f3      	bls.n	80022fc <Tx_Analog_1_4+0xf8>
	}
}
 8002314:	bf00      	nop
 8002316:	3710      	adds	r7, #16
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20002d98 	.word	0x20002d98
 8002320:	20000704 	.word	0x20000704
 8002324:	20001bc8 	.word	0x20001bc8
 8002328:	20001bd0 	.word	0x20001bd0
 800232c:	20001c84 	.word	0x20001c84
 8002330:	20002d54 	.word	0x20002d54
 8002334:	200006fc 	.word	0x200006fc
 8002338:	20001c58 	.word	0x20001c58
 800233c:	20001a58 	.word	0x20001a58

08002340 <Tx_Analog_5_8>:

static void Tx_Analog_5_8(CAN_HandleTypeDef* hcan)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 8002348:	4b43      	ldr	r3, [pc, #268]	; (8002458 <Tx_Analog_5_8+0x118>)
 800234a:	2200      	movs	r2, #0
 800234c:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 800234e:	4b42      	ldr	r3, [pc, #264]	; (8002458 <Tx_Analog_5_8+0x118>)
 8002350:	2200      	movs	r2, #0
 8002352:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8002354:	4b40      	ldr	r3, [pc, #256]	; (8002458 <Tx_Analog_5_8+0x118>)
 8002356:	2200      	movs	r2, #0
 8002358:	751a      	strb	r2, [r3, #20]
	TxHeader.StdId = FIRST_ID + Analog_5_8;
 800235a:	4b3f      	ldr	r3, [pc, #252]	; (8002458 <Tx_Analog_5_8+0x118>)
 800235c:	2202      	movs	r2, #2
 800235e:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 8;
 8002360:	4b3d      	ldr	r3, [pc, #244]	; (8002458 <Tx_Analog_5_8+0x118>)
 8002362:	2208      	movs	r2, #8
 8002364:	611a      	str	r2, [r3, #16]

	TxData[0] = ADC_Buffer[4] >> 8;
 8002366:	4b3d      	ldr	r3, [pc, #244]	; (800245c <Tx_Analog_5_8+0x11c>)
 8002368:	891b      	ldrh	r3, [r3, #8]
 800236a:	0a1b      	lsrs	r3, r3, #8
 800236c:	b29b      	uxth	r3, r3
 800236e:	b2da      	uxtb	r2, r3
 8002370:	4b3b      	ldr	r3, [pc, #236]	; (8002460 <Tx_Analog_5_8+0x120>)
 8002372:	701a      	strb	r2, [r3, #0]
	TxData[1] = ADC_Buffer[4] & 0xff;
 8002374:	4b39      	ldr	r3, [pc, #228]	; (800245c <Tx_Analog_5_8+0x11c>)
 8002376:	891b      	ldrh	r3, [r3, #8]
 8002378:	b2da      	uxtb	r2, r3
 800237a:	4b39      	ldr	r3, [pc, #228]	; (8002460 <Tx_Analog_5_8+0x120>)
 800237c:	705a      	strb	r2, [r3, #1]
	TxData[2] = ADC_Buffer[5] >> 8;
 800237e:	4b37      	ldr	r3, [pc, #220]	; (800245c <Tx_Analog_5_8+0x11c>)
 8002380:	895b      	ldrh	r3, [r3, #10]
 8002382:	0a1b      	lsrs	r3, r3, #8
 8002384:	b29b      	uxth	r3, r3
 8002386:	b2da      	uxtb	r2, r3
 8002388:	4b35      	ldr	r3, [pc, #212]	; (8002460 <Tx_Analog_5_8+0x120>)
 800238a:	709a      	strb	r2, [r3, #2]
	TxData[3] = ADC_Buffer[5] & 0xff;
 800238c:	4b33      	ldr	r3, [pc, #204]	; (800245c <Tx_Analog_5_8+0x11c>)
 800238e:	895b      	ldrh	r3, [r3, #10]
 8002390:	b2da      	uxtb	r2, r3
 8002392:	4b33      	ldr	r3, [pc, #204]	; (8002460 <Tx_Analog_5_8+0x120>)
 8002394:	70da      	strb	r2, [r3, #3]
	TxData[4] = ADC_Buffer[6] >> 8;
 8002396:	4b31      	ldr	r3, [pc, #196]	; (800245c <Tx_Analog_5_8+0x11c>)
 8002398:	899b      	ldrh	r3, [r3, #12]
 800239a:	0a1b      	lsrs	r3, r3, #8
 800239c:	b29b      	uxth	r3, r3
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	4b2f      	ldr	r3, [pc, #188]	; (8002460 <Tx_Analog_5_8+0x120>)
 80023a2:	711a      	strb	r2, [r3, #4]
	TxData[5] = ADC_Buffer[6] & 0xff;
 80023a4:	4b2d      	ldr	r3, [pc, #180]	; (800245c <Tx_Analog_5_8+0x11c>)
 80023a6:	899b      	ldrh	r3, [r3, #12]
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	4b2d      	ldr	r3, [pc, #180]	; (8002460 <Tx_Analog_5_8+0x120>)
 80023ac:	715a      	strb	r2, [r3, #5]
	TxData[6] = ADC_Buffer[7] >> 8;
 80023ae:	4b2b      	ldr	r3, [pc, #172]	; (800245c <Tx_Analog_5_8+0x11c>)
 80023b0:	89db      	ldrh	r3, [r3, #14]
 80023b2:	0a1b      	lsrs	r3, r3, #8
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	4b29      	ldr	r3, [pc, #164]	; (8002460 <Tx_Analog_5_8+0x120>)
 80023ba:	719a      	strb	r2, [r3, #6]
	TxData[7] = ADC_Buffer[7] & 0xff;
 80023bc:	4b27      	ldr	r3, [pc, #156]	; (800245c <Tx_Analog_5_8+0x11c>)
 80023be:	89db      	ldrh	r3, [r3, #14]
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	4b27      	ldr	r3, [pc, #156]	; (8002460 <Tx_Analog_5_8+0x120>)
 80023c4:	71da      	strb	r2, [r3, #7]

	if(Flag_Datalogger == DL_Save)
 80023c6:	4b27      	ldr	r3, [pc, #156]	; (8002464 <Tx_Analog_5_8+0x124>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d108      	bne.n	80023e0 <Tx_Analog_5_8+0xa0>
		Principal_Datalogger_Save_Buffer(TxHeader.StdId, TxHeader.DLC, TxData, &File_Struct);
 80023ce:	4b22      	ldr	r3, [pc, #136]	; (8002458 <Tx_Analog_5_8+0x118>)
 80023d0:	6818      	ldr	r0, [r3, #0]
 80023d2:	4b21      	ldr	r3, [pc, #132]	; (8002458 <Tx_Analog_5_8+0x118>)
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	b2d9      	uxtb	r1, r3
 80023d8:	4b23      	ldr	r3, [pc, #140]	; (8002468 <Tx_Analog_5_8+0x128>)
 80023da:	4a21      	ldr	r2, [pc, #132]	; (8002460 <Tx_Analog_5_8+0x120>)
 80023dc:	f003 fa94 	bl	8005908 <Principal_Datalogger_Save_Buffer>

	if((Acc_CAN[Analog_5_8] >= Per_CAN[Analog_5_8]) && (Per_CAN[Analog_5_8] != 0))
 80023e0:	4b22      	ldr	r3, [pc, #136]	; (800246c <Tx_Analog_5_8+0x12c>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	4a22      	ldr	r2, [pc, #136]	; (8002470 <Tx_Analog_5_8+0x130>)
 80023e6:	8852      	ldrh	r2, [r2, #2]
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d331      	bcc.n	8002450 <Tx_Analog_5_8+0x110>
 80023ec:	4b20      	ldr	r3, [pc, #128]	; (8002470 <Tx_Analog_5_8+0x130>)
 80023ee:	885b      	ldrh	r3, [r3, #2]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d02d      	beq.n	8002450 <Tx_Analog_5_8+0x110>
	{
		Acc_CAN[Analog_5_8] -= Per_CAN[Analog_5_8];
 80023f4:	4b1d      	ldr	r3, [pc, #116]	; (800246c <Tx_Analog_5_8+0x12c>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	4a1d      	ldr	r2, [pc, #116]	; (8002470 <Tx_Analog_5_8+0x130>)
 80023fa:	8852      	ldrh	r2, [r2, #2]
 80023fc:	1a9b      	subs	r3, r3, r2
 80023fe:	4a1b      	ldr	r2, [pc, #108]	; (800246c <Tx_Analog_5_8+0x12c>)
 8002400:	6053      	str	r3, [r2, #4]
		if(HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK)
 8002402:	4b1c      	ldr	r3, [pc, #112]	; (8002474 <Tx_Analog_5_8+0x134>)
 8002404:	4a16      	ldr	r2, [pc, #88]	; (8002460 <Tx_Analog_5_8+0x120>)
 8002406:	4914      	ldr	r1, [pc, #80]	; (8002458 <Tx_Analog_5_8+0x118>)
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f004 ffa3 	bl	8007354 <HAL_CAN_AddTxMessage>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d107      	bne.n	8002424 <Tx_Analog_5_8+0xe4>
			Verify_CAN |= 1;
 8002414:	4b18      	ldr	r3, [pc, #96]	; (8002478 <Tx_Analog_5_8+0x138>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	b2da      	uxtb	r2, r3
 800241e:	4b16      	ldr	r3, [pc, #88]	; (8002478 <Tx_Analog_5_8+0x138>)
 8002420:	701a      	strb	r2, [r3, #0]
 8002422:	e006      	b.n	8002432 <Tx_Analog_5_8+0xf2>
		else
			Verify_CAN &= 0x02;
 8002424:	4b14      	ldr	r3, [pc, #80]	; (8002478 <Tx_Analog_5_8+0x138>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	b2da      	uxtb	r2, r3
 800242e:	4b12      	ldr	r3, [pc, #72]	; (8002478 <Tx_Analog_5_8+0x138>)
 8002430:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8002432:	2300      	movs	r3, #0
 8002434:	73fb      	strb	r3, [r7, #15]
 8002436:	e002      	b.n	800243e <Tx_Analog_5_8+0xfe>
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	3301      	adds	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f005 f863 	bl	800750a <HAL_CAN_GetTxMailboxesFreeLevel>
 8002444:	4603      	mov	r3, r0
 8002446:	2b03      	cmp	r3, #3
 8002448:	d002      	beq.n	8002450 <Tx_Analog_5_8+0x110>
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	2b02      	cmp	r3, #2
 800244e:	d9f3      	bls.n	8002438 <Tx_Analog_5_8+0xf8>
	}
}
 8002450:	bf00      	nop
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20002d98 	.word	0x20002d98
 800245c:	20000704 	.word	0x20000704
 8002460:	20001bc8 	.word	0x20001bc8
 8002464:	20001bd0 	.word	0x20001bd0
 8002468:	20001c84 	.word	0x20001c84
 800246c:	20002d54 	.word	0x20002d54
 8002470:	200006fc 	.word	0x200006fc
 8002474:	20001c58 	.word	0x20001c58
 8002478:	20001a58 	.word	0x20001a58

0800247c <Tx_Analog_9_12>:

static void Tx_Analog_9_12(CAN_HandleTypeDef* hcan)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 8002484:	4b43      	ldr	r3, [pc, #268]	; (8002594 <Tx_Analog_9_12+0x118>)
 8002486:	2200      	movs	r2, #0
 8002488:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 800248a:	4b42      	ldr	r3, [pc, #264]	; (8002594 <Tx_Analog_9_12+0x118>)
 800248c:	2200      	movs	r2, #0
 800248e:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8002490:	4b40      	ldr	r3, [pc, #256]	; (8002594 <Tx_Analog_9_12+0x118>)
 8002492:	2200      	movs	r2, #0
 8002494:	751a      	strb	r2, [r3, #20]
	TxHeader.StdId = FIRST_ID + Analog_9_12;
 8002496:	4b3f      	ldr	r3, [pc, #252]	; (8002594 <Tx_Analog_9_12+0x118>)
 8002498:	2203      	movs	r2, #3
 800249a:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 8;
 800249c:	4b3d      	ldr	r3, [pc, #244]	; (8002594 <Tx_Analog_9_12+0x118>)
 800249e:	2208      	movs	r2, #8
 80024a0:	611a      	str	r2, [r3, #16]

	TxData[0] = ADC_Buffer[8] >> 8;
 80024a2:	4b3d      	ldr	r3, [pc, #244]	; (8002598 <Tx_Analog_9_12+0x11c>)
 80024a4:	8a1b      	ldrh	r3, [r3, #16]
 80024a6:	0a1b      	lsrs	r3, r3, #8
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	4b3b      	ldr	r3, [pc, #236]	; (800259c <Tx_Analog_9_12+0x120>)
 80024ae:	701a      	strb	r2, [r3, #0]
	TxData[1] = ADC_Buffer[8] & 0xff;
 80024b0:	4b39      	ldr	r3, [pc, #228]	; (8002598 <Tx_Analog_9_12+0x11c>)
 80024b2:	8a1b      	ldrh	r3, [r3, #16]
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	4b39      	ldr	r3, [pc, #228]	; (800259c <Tx_Analog_9_12+0x120>)
 80024b8:	705a      	strb	r2, [r3, #1]
	TxData[2] = ADC_Buffer[9] >> 8;
 80024ba:	4b37      	ldr	r3, [pc, #220]	; (8002598 <Tx_Analog_9_12+0x11c>)
 80024bc:	8a5b      	ldrh	r3, [r3, #18]
 80024be:	0a1b      	lsrs	r3, r3, #8
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	4b35      	ldr	r3, [pc, #212]	; (800259c <Tx_Analog_9_12+0x120>)
 80024c6:	709a      	strb	r2, [r3, #2]
	TxData[3] = ADC_Buffer[9] & 0xff;
 80024c8:	4b33      	ldr	r3, [pc, #204]	; (8002598 <Tx_Analog_9_12+0x11c>)
 80024ca:	8a5b      	ldrh	r3, [r3, #18]
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	4b33      	ldr	r3, [pc, #204]	; (800259c <Tx_Analog_9_12+0x120>)
 80024d0:	70da      	strb	r2, [r3, #3]
	TxData[4] = ADC_Buffer[10] >> 8;
 80024d2:	4b31      	ldr	r3, [pc, #196]	; (8002598 <Tx_Analog_9_12+0x11c>)
 80024d4:	8a9b      	ldrh	r3, [r3, #20]
 80024d6:	0a1b      	lsrs	r3, r3, #8
 80024d8:	b29b      	uxth	r3, r3
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	4b2f      	ldr	r3, [pc, #188]	; (800259c <Tx_Analog_9_12+0x120>)
 80024de:	711a      	strb	r2, [r3, #4]
	TxData[5] = ADC_Buffer[10] & 0xff;
 80024e0:	4b2d      	ldr	r3, [pc, #180]	; (8002598 <Tx_Analog_9_12+0x11c>)
 80024e2:	8a9b      	ldrh	r3, [r3, #20]
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	4b2d      	ldr	r3, [pc, #180]	; (800259c <Tx_Analog_9_12+0x120>)
 80024e8:	715a      	strb	r2, [r3, #5]
	TxData[6] = ADC_Buffer[11] >> 8;
 80024ea:	4b2b      	ldr	r3, [pc, #172]	; (8002598 <Tx_Analog_9_12+0x11c>)
 80024ec:	8adb      	ldrh	r3, [r3, #22]
 80024ee:	0a1b      	lsrs	r3, r3, #8
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	b2da      	uxtb	r2, r3
 80024f4:	4b29      	ldr	r3, [pc, #164]	; (800259c <Tx_Analog_9_12+0x120>)
 80024f6:	719a      	strb	r2, [r3, #6]
	TxData[7] = ADC_Buffer[11] & 0xff;
 80024f8:	4b27      	ldr	r3, [pc, #156]	; (8002598 <Tx_Analog_9_12+0x11c>)
 80024fa:	8adb      	ldrh	r3, [r3, #22]
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	4b27      	ldr	r3, [pc, #156]	; (800259c <Tx_Analog_9_12+0x120>)
 8002500:	71da      	strb	r2, [r3, #7]

	if(Flag_Datalogger == DL_Save)
 8002502:	4b27      	ldr	r3, [pc, #156]	; (80025a0 <Tx_Analog_9_12+0x124>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d108      	bne.n	800251c <Tx_Analog_9_12+0xa0>
		Principal_Datalogger_Save_Buffer(TxHeader.StdId, TxHeader.DLC, TxData, &File_Struct);
 800250a:	4b22      	ldr	r3, [pc, #136]	; (8002594 <Tx_Analog_9_12+0x118>)
 800250c:	6818      	ldr	r0, [r3, #0]
 800250e:	4b21      	ldr	r3, [pc, #132]	; (8002594 <Tx_Analog_9_12+0x118>)
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	b2d9      	uxtb	r1, r3
 8002514:	4b23      	ldr	r3, [pc, #140]	; (80025a4 <Tx_Analog_9_12+0x128>)
 8002516:	4a21      	ldr	r2, [pc, #132]	; (800259c <Tx_Analog_9_12+0x120>)
 8002518:	f003 f9f6 	bl	8005908 <Principal_Datalogger_Save_Buffer>

	if((Acc_CAN[Analog_9_12] >= Per_CAN[Analog_9_12]) && (Per_CAN[Analog_9_12] != 0))
 800251c:	4b22      	ldr	r3, [pc, #136]	; (80025a8 <Tx_Analog_9_12+0x12c>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	4a22      	ldr	r2, [pc, #136]	; (80025ac <Tx_Analog_9_12+0x130>)
 8002522:	8892      	ldrh	r2, [r2, #4]
 8002524:	4293      	cmp	r3, r2
 8002526:	d331      	bcc.n	800258c <Tx_Analog_9_12+0x110>
 8002528:	4b20      	ldr	r3, [pc, #128]	; (80025ac <Tx_Analog_9_12+0x130>)
 800252a:	889b      	ldrh	r3, [r3, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d02d      	beq.n	800258c <Tx_Analog_9_12+0x110>
	{
		Acc_CAN[Analog_9_12] -= Per_CAN[Analog_9_12];
 8002530:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <Tx_Analog_9_12+0x12c>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	4a1d      	ldr	r2, [pc, #116]	; (80025ac <Tx_Analog_9_12+0x130>)
 8002536:	8892      	ldrh	r2, [r2, #4]
 8002538:	1a9b      	subs	r3, r3, r2
 800253a:	4a1b      	ldr	r2, [pc, #108]	; (80025a8 <Tx_Analog_9_12+0x12c>)
 800253c:	6093      	str	r3, [r2, #8]
		if(HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK)
 800253e:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <Tx_Analog_9_12+0x134>)
 8002540:	4a16      	ldr	r2, [pc, #88]	; (800259c <Tx_Analog_9_12+0x120>)
 8002542:	4914      	ldr	r1, [pc, #80]	; (8002594 <Tx_Analog_9_12+0x118>)
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f004 ff05 	bl	8007354 <HAL_CAN_AddTxMessage>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d107      	bne.n	8002560 <Tx_Analog_9_12+0xe4>
			Verify_CAN |= 1;
 8002550:	4b18      	ldr	r3, [pc, #96]	; (80025b4 <Tx_Analog_9_12+0x138>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	b2da      	uxtb	r2, r3
 800255a:	4b16      	ldr	r3, [pc, #88]	; (80025b4 <Tx_Analog_9_12+0x138>)
 800255c:	701a      	strb	r2, [r3, #0]
 800255e:	e006      	b.n	800256e <Tx_Analog_9_12+0xf2>
		else
			Verify_CAN &= 0x02;
 8002560:	4b14      	ldr	r3, [pc, #80]	; (80025b4 <Tx_Analog_9_12+0x138>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	b2da      	uxtb	r2, r3
 800256a:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <Tx_Analog_9_12+0x138>)
 800256c:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 800256e:	2300      	movs	r3, #0
 8002570:	73fb      	strb	r3, [r7, #15]
 8002572:	e002      	b.n	800257a <Tx_Analog_9_12+0xfe>
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	3301      	adds	r3, #1
 8002578:	73fb      	strb	r3, [r7, #15]
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f004 ffc5 	bl	800750a <HAL_CAN_GetTxMailboxesFreeLevel>
 8002580:	4603      	mov	r3, r0
 8002582:	2b03      	cmp	r3, #3
 8002584:	d002      	beq.n	800258c <Tx_Analog_9_12+0x110>
 8002586:	7bfb      	ldrb	r3, [r7, #15]
 8002588:	2b02      	cmp	r3, #2
 800258a:	d9f3      	bls.n	8002574 <Tx_Analog_9_12+0xf8>
	}
}
 800258c:	bf00      	nop
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	20002d98 	.word	0x20002d98
 8002598:	20000704 	.word	0x20000704
 800259c:	20001bc8 	.word	0x20001bc8
 80025a0:	20001bd0 	.word	0x20001bd0
 80025a4:	20001c84 	.word	0x20001c84
 80025a8:	20002d54 	.word	0x20002d54
 80025ac:	200006fc 	.word	0x200006fc
 80025b0:	20001c58 	.word	0x20001c58
 80025b4:	20001a58 	.word	0x20001a58

080025b8 <Tx_RTC>:

static void Tx_RTC(CAN_HandleTypeDef* hcan)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 80025c0:	4b42      	ldr	r3, [pc, #264]	; (80026cc <Tx_RTC+0x114>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80025c6:	4b41      	ldr	r3, [pc, #260]	; (80026cc <Tx_RTC+0x114>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 80025cc:	4b3f      	ldr	r3, [pc, #252]	; (80026cc <Tx_RTC+0x114>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	751a      	strb	r2, [r3, #20]
	TxHeader.StdId = FIRST_ID + RTC_Msg;
 80025d2:	4b3e      	ldr	r3, [pc, #248]	; (80026cc <Tx_RTC+0x114>)
 80025d4:	2204      	movs	r2, #4
 80025d6:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 8;
 80025d8:	4b3c      	ldr	r3, [pc, #240]	; (80026cc <Tx_RTC+0x114>)
 80025da:	2208      	movs	r2, #8
 80025dc:	611a      	str	r2, [r3, #16]

	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 80025de:	2200      	movs	r2, #0
 80025e0:	493b      	ldr	r1, [pc, #236]	; (80026d0 <Tx_RTC+0x118>)
 80025e2:	483c      	ldr	r0, [pc, #240]	; (80026d4 <Tx_RTC+0x11c>)
 80025e4:	f009 fdd8 	bl	800c198 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 80025e8:	2200      	movs	r2, #0
 80025ea:	493b      	ldr	r1, [pc, #236]	; (80026d8 <Tx_RTC+0x120>)
 80025ec:	4839      	ldr	r0, [pc, #228]	; (80026d4 <Tx_RTC+0x11c>)
 80025ee:	f009 fed8 	bl	800c3a2 <HAL_RTC_GetDate>

	TxData[0] = Date.Year;
 80025f2:	4b39      	ldr	r3, [pc, #228]	; (80026d8 <Tx_RTC+0x120>)
 80025f4:	78da      	ldrb	r2, [r3, #3]
 80025f6:	4b39      	ldr	r3, [pc, #228]	; (80026dc <Tx_RTC+0x124>)
 80025f8:	701a      	strb	r2, [r3, #0]
	TxData[1] = Date.Month;
 80025fa:	4b37      	ldr	r3, [pc, #220]	; (80026d8 <Tx_RTC+0x120>)
 80025fc:	785a      	ldrb	r2, [r3, #1]
 80025fe:	4b37      	ldr	r3, [pc, #220]	; (80026dc <Tx_RTC+0x124>)
 8002600:	705a      	strb	r2, [r3, #1]
	TxData[2] = Date.Date;
 8002602:	4b35      	ldr	r3, [pc, #212]	; (80026d8 <Tx_RTC+0x120>)
 8002604:	789a      	ldrb	r2, [r3, #2]
 8002606:	4b35      	ldr	r3, [pc, #212]	; (80026dc <Tx_RTC+0x124>)
 8002608:	709a      	strb	r2, [r3, #2]
	TxData[3] = Time.Hours;
 800260a:	4b31      	ldr	r3, [pc, #196]	; (80026d0 <Tx_RTC+0x118>)
 800260c:	781a      	ldrb	r2, [r3, #0]
 800260e:	4b33      	ldr	r3, [pc, #204]	; (80026dc <Tx_RTC+0x124>)
 8002610:	70da      	strb	r2, [r3, #3]
	TxData[4] = Time.Minutes;
 8002612:	4b2f      	ldr	r3, [pc, #188]	; (80026d0 <Tx_RTC+0x118>)
 8002614:	785a      	ldrb	r2, [r3, #1]
 8002616:	4b31      	ldr	r3, [pc, #196]	; (80026dc <Tx_RTC+0x124>)
 8002618:	711a      	strb	r2, [r3, #4]
	TxData[5] = Time.Seconds;
 800261a:	4b2d      	ldr	r3, [pc, #180]	; (80026d0 <Tx_RTC+0x118>)
 800261c:	789a      	ldrb	r2, [r3, #2]
 800261e:	4b2f      	ldr	r3, [pc, #188]	; (80026dc <Tx_RTC+0x124>)
 8002620:	715a      	strb	r2, [r3, #5]
	TxData[6] = ADC_Buffer[12] >> 8;
 8002622:	4b2f      	ldr	r3, [pc, #188]	; (80026e0 <Tx_RTC+0x128>)
 8002624:	8b1b      	ldrh	r3, [r3, #24]
 8002626:	0a1b      	lsrs	r3, r3, #8
 8002628:	b29b      	uxth	r3, r3
 800262a:	b2da      	uxtb	r2, r3
 800262c:	4b2b      	ldr	r3, [pc, #172]	; (80026dc <Tx_RTC+0x124>)
 800262e:	719a      	strb	r2, [r3, #6]
	TxData[7] = ADC_Buffer[12] & 0xff;
 8002630:	4b2b      	ldr	r3, [pc, #172]	; (80026e0 <Tx_RTC+0x128>)
 8002632:	8b1b      	ldrh	r3, [r3, #24]
 8002634:	b2da      	uxtb	r2, r3
 8002636:	4b29      	ldr	r3, [pc, #164]	; (80026dc <Tx_RTC+0x124>)
 8002638:	71da      	strb	r2, [r3, #7]

	if(Flag_Datalogger == DL_Save)
 800263a:	4b2a      	ldr	r3, [pc, #168]	; (80026e4 <Tx_RTC+0x12c>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d108      	bne.n	8002654 <Tx_RTC+0x9c>
		Principal_Datalogger_Save_Buffer(TxHeader.StdId, TxHeader.DLC, TxData, &File_Struct);
 8002642:	4b22      	ldr	r3, [pc, #136]	; (80026cc <Tx_RTC+0x114>)
 8002644:	6818      	ldr	r0, [r3, #0]
 8002646:	4b21      	ldr	r3, [pc, #132]	; (80026cc <Tx_RTC+0x114>)
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	b2d9      	uxtb	r1, r3
 800264c:	4b26      	ldr	r3, [pc, #152]	; (80026e8 <Tx_RTC+0x130>)
 800264e:	4a23      	ldr	r2, [pc, #140]	; (80026dc <Tx_RTC+0x124>)
 8002650:	f003 f95a 	bl	8005908 <Principal_Datalogger_Save_Buffer>

	if((Acc_CAN[RTC_Msg] >= Per_CAN[RTC_Msg]) && (Per_CAN[RTC_Msg] != 0))
 8002654:	4b25      	ldr	r3, [pc, #148]	; (80026ec <Tx_RTC+0x134>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	4a25      	ldr	r2, [pc, #148]	; (80026f0 <Tx_RTC+0x138>)
 800265a:	88d2      	ldrh	r2, [r2, #6]
 800265c:	4293      	cmp	r3, r2
 800265e:	d331      	bcc.n	80026c4 <Tx_RTC+0x10c>
 8002660:	4b23      	ldr	r3, [pc, #140]	; (80026f0 <Tx_RTC+0x138>)
 8002662:	88db      	ldrh	r3, [r3, #6]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d02d      	beq.n	80026c4 <Tx_RTC+0x10c>
	{
		Acc_CAN[RTC_Msg] -= Per_CAN[RTC_Msg];
 8002668:	4b20      	ldr	r3, [pc, #128]	; (80026ec <Tx_RTC+0x134>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	4a20      	ldr	r2, [pc, #128]	; (80026f0 <Tx_RTC+0x138>)
 800266e:	88d2      	ldrh	r2, [r2, #6]
 8002670:	1a9b      	subs	r3, r3, r2
 8002672:	4a1e      	ldr	r2, [pc, #120]	; (80026ec <Tx_RTC+0x134>)
 8002674:	60d3      	str	r3, [r2, #12]
		if(HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK)
 8002676:	4b1f      	ldr	r3, [pc, #124]	; (80026f4 <Tx_RTC+0x13c>)
 8002678:	4a18      	ldr	r2, [pc, #96]	; (80026dc <Tx_RTC+0x124>)
 800267a:	4914      	ldr	r1, [pc, #80]	; (80026cc <Tx_RTC+0x114>)
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f004 fe69 	bl	8007354 <HAL_CAN_AddTxMessage>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d107      	bne.n	8002698 <Tx_RTC+0xe0>
			Verify_CAN |= 1;
 8002688:	4b1b      	ldr	r3, [pc, #108]	; (80026f8 <Tx_RTC+0x140>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	b2da      	uxtb	r2, r3
 8002692:	4b19      	ldr	r3, [pc, #100]	; (80026f8 <Tx_RTC+0x140>)
 8002694:	701a      	strb	r2, [r3, #0]
 8002696:	e006      	b.n	80026a6 <Tx_RTC+0xee>
		else
			Verify_CAN &= 0x02;
 8002698:	4b17      	ldr	r3, [pc, #92]	; (80026f8 <Tx_RTC+0x140>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	4b15      	ldr	r3, [pc, #84]	; (80026f8 <Tx_RTC+0x140>)
 80026a4:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 80026a6:	2300      	movs	r3, #0
 80026a8:	73fb      	strb	r3, [r7, #15]
 80026aa:	e002      	b.n	80026b2 <Tx_RTC+0xfa>
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
 80026ae:	3301      	adds	r3, #1
 80026b0:	73fb      	strb	r3, [r7, #15]
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f004 ff29 	bl	800750a <HAL_CAN_GetTxMailboxesFreeLevel>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b03      	cmp	r3, #3
 80026bc:	d002      	beq.n	80026c4 <Tx_RTC+0x10c>
 80026be:	7bfb      	ldrb	r3, [r7, #15]
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d9f3      	bls.n	80026ac <Tx_RTC+0xf4>
	}
}
 80026c4:	bf00      	nop
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20002d98 	.word	0x20002d98
 80026d0:	20002cb0 	.word	0x20002cb0
 80026d4:	20001b44 	.word	0x20001b44
 80026d8:	20001a5c 	.word	0x20001a5c
 80026dc:	20001bc8 	.word	0x20001bc8
 80026e0:	20000704 	.word	0x20000704
 80026e4:	20001bd0 	.word	0x20001bd0
 80026e8:	20001c84 	.word	0x20001c84
 80026ec:	20002d54 	.word	0x20002d54
 80026f0:	200006fc 	.word	0x200006fc
 80026f4:	20001c58 	.word	0x20001c58
 80026f8:	20001a58 	.word	0x20001a58

080026fc <Tx_Verify>:

static void Tx_Verify(CAN_HandleTypeDef* hcan)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 8002704:	4bcb      	ldr	r3, [pc, #812]	; (8002a34 <Tx_Verify+0x338>)
 8002706:	2200      	movs	r2, #0
 8002708:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 800270a:	4bca      	ldr	r3, [pc, #808]	; (8002a34 <Tx_Verify+0x338>)
 800270c:	2200      	movs	r2, #0
 800270e:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8002710:	4bc8      	ldr	r3, [pc, #800]	; (8002a34 <Tx_Verify+0x338>)
 8002712:	2200      	movs	r2, #0
 8002714:	751a      	strb	r2, [r3, #20]
	TxHeader.StdId = FIRST_ID + Verify_Msg;
 8002716:	4bc7      	ldr	r3, [pc, #796]	; (8002a34 <Tx_Verify+0x338>)
 8002718:	2205      	movs	r2, #5
 800271a:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 8;
 800271c:	4bc5      	ldr	r3, [pc, #788]	; (8002a34 <Tx_Verify+0x338>)
 800271e:	2208      	movs	r2, #8
 8002720:	611a      	str	r2, [r3, #16]

	Verify_Data();
 8002722:	f7ff fd0b 	bl	800213c <Verify_Data>

	TxData[0]  = Verify >> 8;
 8002726:	4bc4      	ldr	r3, [pc, #784]	; (8002a38 <Tx_Verify+0x33c>)
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	0a1b      	lsrs	r3, r3, #8
 800272c:	b29b      	uxth	r3, r3
 800272e:	b2da      	uxtb	r2, r3
 8002730:	4bc2      	ldr	r3, [pc, #776]	; (8002a3c <Tx_Verify+0x340>)
 8002732:	701a      	strb	r2, [r3, #0]
	TxData[1]  = Verify & 0x0f;
 8002734:	4bc0      	ldr	r3, [pc, #768]	; (8002a38 <Tx_Verify+0x33c>)
 8002736:	881b      	ldrh	r3, [r3, #0]
 8002738:	b2db      	uxtb	r3, r3
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	b2da      	uxtb	r2, r3
 8002740:	4bbe      	ldr	r3, [pc, #760]	; (8002a3c <Tx_Verify+0x340>)
 8002742:	705a      	strb	r2, [r3, #1]
	TxData[1] |= Verify_Datalogger << 4;
 8002744:	4bbd      	ldr	r3, [pc, #756]	; (8002a3c <Tx_Verify+0x340>)
 8002746:	785b      	ldrb	r3, [r3, #1]
 8002748:	b25a      	sxtb	r2, r3
 800274a:	4bbd      	ldr	r3, [pc, #756]	; (8002a40 <Tx_Verify+0x344>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	b25b      	sxtb	r3, r3
 8002752:	4313      	orrs	r3, r2
 8002754:	b25b      	sxtb	r3, r3
 8002756:	b2da      	uxtb	r2, r3
 8002758:	4bb8      	ldr	r3, [pc, #736]	; (8002a3c <Tx_Verify+0x340>)
 800275a:	705a      	strb	r2, [r3, #1]

	__SAVE_FREQ(TxData[2], Per_Msg[Analog_1_4]);
 800275c:	4bb9      	ldr	r3, [pc, #740]	; (8002a44 <Tx_Verify+0x348>)
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002764:	f000 8081 	beq.w	800286a <Tx_Verify+0x16e>
 8002768:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800276c:	f300 80a9 	bgt.w	80028c2 <Tx_Verify+0x1c6>
 8002770:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002774:	d07d      	beq.n	8002872 <Tx_Verify+0x176>
 8002776:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800277a:	f300 80a2 	bgt.w	80028c2 <Tx_Verify+0x1c6>
 800277e:	2bc8      	cmp	r3, #200	; 0xc8
 8002780:	d07b      	beq.n	800287a <Tx_Verify+0x17e>
 8002782:	2bc8      	cmp	r3, #200	; 0xc8
 8002784:	f300 809d 	bgt.w	80028c2 <Tx_Verify+0x1c6>
 8002788:	2b32      	cmp	r3, #50	; 0x32
 800278a:	dc6b      	bgt.n	8002864 <Tx_Verify+0x168>
 800278c:	2b02      	cmp	r3, #2
 800278e:	f2c0 8098 	blt.w	80028c2 <Tx_Verify+0x1c6>
 8002792:	3b02      	subs	r3, #2
 8002794:	2b30      	cmp	r3, #48	; 0x30
 8002796:	f200 8094 	bhi.w	80028c2 <Tx_Verify+0x1c6>
 800279a:	a201      	add	r2, pc, #4	; (adr r2, 80027a0 <Tx_Verify+0xa4>)
 800279c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a0:	080028bb 	.word	0x080028bb
 80027a4:	080028b3 	.word	0x080028b3
 80027a8:	080028c3 	.word	0x080028c3
 80027ac:	080028ab 	.word	0x080028ab
 80027b0:	080028c3 	.word	0x080028c3
 80027b4:	080028c3 	.word	0x080028c3
 80027b8:	080028c3 	.word	0x080028c3
 80027bc:	080028c3 	.word	0x080028c3
 80027c0:	080028a3 	.word	0x080028a3
 80027c4:	080028c3 	.word	0x080028c3
 80027c8:	080028c3 	.word	0x080028c3
 80027cc:	080028c3 	.word	0x080028c3
 80027d0:	080028c3 	.word	0x080028c3
 80027d4:	080028c3 	.word	0x080028c3
 80027d8:	080028c3 	.word	0x080028c3
 80027dc:	080028c3 	.word	0x080028c3
 80027e0:	080028c3 	.word	0x080028c3
 80027e4:	080028c3 	.word	0x080028c3
 80027e8:	0800289b 	.word	0x0800289b
 80027ec:	080028c3 	.word	0x080028c3
 80027f0:	080028c3 	.word	0x080028c3
 80027f4:	080028c3 	.word	0x080028c3
 80027f8:	080028c3 	.word	0x080028c3
 80027fc:	080028c3 	.word	0x080028c3
 8002800:	080028c3 	.word	0x080028c3
 8002804:	080028c3 	.word	0x080028c3
 8002808:	080028c3 	.word	0x080028c3
 800280c:	080028c3 	.word	0x080028c3
 8002810:	080028c3 	.word	0x080028c3
 8002814:	080028c3 	.word	0x080028c3
 8002818:	080028c3 	.word	0x080028c3
 800281c:	080028c3 	.word	0x080028c3
 8002820:	080028c3 	.word	0x080028c3
 8002824:	080028c3 	.word	0x080028c3
 8002828:	080028c3 	.word	0x080028c3
 800282c:	080028c3 	.word	0x080028c3
 8002830:	080028c3 	.word	0x080028c3
 8002834:	080028c3 	.word	0x080028c3
 8002838:	08002893 	.word	0x08002893
 800283c:	080028c3 	.word	0x080028c3
 8002840:	080028c3 	.word	0x080028c3
 8002844:	080028c3 	.word	0x080028c3
 8002848:	080028c3 	.word	0x080028c3
 800284c:	080028c3 	.word	0x080028c3
 8002850:	080028c3 	.word	0x080028c3
 8002854:	080028c3 	.word	0x080028c3
 8002858:	080028c3 	.word	0x080028c3
 800285c:	080028c3 	.word	0x080028c3
 8002860:	0800288b 	.word	0x0800288b
 8002864:	2b64      	cmp	r3, #100	; 0x64
 8002866:	d00c      	beq.n	8002882 <Tx_Verify+0x186>
 8002868:	e02b      	b.n	80028c2 <Tx_Verify+0x1c6>
 800286a:	4b74      	ldr	r3, [pc, #464]	; (8002a3c <Tx_Verify+0x340>)
 800286c:	2201      	movs	r2, #1
 800286e:	709a      	strb	r2, [r3, #2]
 8002870:	e02a      	b.n	80028c8 <Tx_Verify+0x1cc>
 8002872:	4b72      	ldr	r3, [pc, #456]	; (8002a3c <Tx_Verify+0x340>)
 8002874:	2202      	movs	r2, #2
 8002876:	709a      	strb	r2, [r3, #2]
 8002878:	e026      	b.n	80028c8 <Tx_Verify+0x1cc>
 800287a:	4b70      	ldr	r3, [pc, #448]	; (8002a3c <Tx_Verify+0x340>)
 800287c:	2203      	movs	r2, #3
 800287e:	709a      	strb	r2, [r3, #2]
 8002880:	e022      	b.n	80028c8 <Tx_Verify+0x1cc>
 8002882:	4b6e      	ldr	r3, [pc, #440]	; (8002a3c <Tx_Verify+0x340>)
 8002884:	2204      	movs	r2, #4
 8002886:	709a      	strb	r2, [r3, #2]
 8002888:	e01e      	b.n	80028c8 <Tx_Verify+0x1cc>
 800288a:	4b6c      	ldr	r3, [pc, #432]	; (8002a3c <Tx_Verify+0x340>)
 800288c:	2205      	movs	r2, #5
 800288e:	709a      	strb	r2, [r3, #2]
 8002890:	e01a      	b.n	80028c8 <Tx_Verify+0x1cc>
 8002892:	4b6a      	ldr	r3, [pc, #424]	; (8002a3c <Tx_Verify+0x340>)
 8002894:	2206      	movs	r2, #6
 8002896:	709a      	strb	r2, [r3, #2]
 8002898:	e016      	b.n	80028c8 <Tx_Verify+0x1cc>
 800289a:	4b68      	ldr	r3, [pc, #416]	; (8002a3c <Tx_Verify+0x340>)
 800289c:	2207      	movs	r2, #7
 800289e:	709a      	strb	r2, [r3, #2]
 80028a0:	e012      	b.n	80028c8 <Tx_Verify+0x1cc>
 80028a2:	4b66      	ldr	r3, [pc, #408]	; (8002a3c <Tx_Verify+0x340>)
 80028a4:	2208      	movs	r2, #8
 80028a6:	709a      	strb	r2, [r3, #2]
 80028a8:	e00e      	b.n	80028c8 <Tx_Verify+0x1cc>
 80028aa:	4b64      	ldr	r3, [pc, #400]	; (8002a3c <Tx_Verify+0x340>)
 80028ac:	2209      	movs	r2, #9
 80028ae:	709a      	strb	r2, [r3, #2]
 80028b0:	e00a      	b.n	80028c8 <Tx_Verify+0x1cc>
 80028b2:	4b62      	ldr	r3, [pc, #392]	; (8002a3c <Tx_Verify+0x340>)
 80028b4:	220a      	movs	r2, #10
 80028b6:	709a      	strb	r2, [r3, #2]
 80028b8:	e006      	b.n	80028c8 <Tx_Verify+0x1cc>
 80028ba:	4b60      	ldr	r3, [pc, #384]	; (8002a3c <Tx_Verify+0x340>)
 80028bc:	220b      	movs	r2, #11
 80028be:	709a      	strb	r2, [r3, #2]
 80028c0:	e002      	b.n	80028c8 <Tx_Verify+0x1cc>
 80028c2:	4b5e      	ldr	r3, [pc, #376]	; (8002a3c <Tx_Verify+0x340>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	709a      	strb	r2, [r3, #2]
 80028c8:	bf00      	nop
	__SAVE_FREQ(TxData[3], Per_Msg[Analog_5_8]);
 80028ca:	4b5e      	ldr	r3, [pc, #376]	; (8002a44 <Tx_Verify+0x348>)
 80028cc:	885b      	ldrh	r3, [r3, #2]
 80028ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028d2:	f000 8082 	beq.w	80029da <Tx_Verify+0x2de>
 80028d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028da:	f300 80b5 	bgt.w	8002a48 <Tx_Verify+0x34c>
 80028de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80028e2:	d07e      	beq.n	80029e2 <Tx_Verify+0x2e6>
 80028e4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80028e8:	f300 80ae 	bgt.w	8002a48 <Tx_Verify+0x34c>
 80028ec:	2bc8      	cmp	r3, #200	; 0xc8
 80028ee:	d07c      	beq.n	80029ea <Tx_Verify+0x2ee>
 80028f0:	2bc8      	cmp	r3, #200	; 0xc8
 80028f2:	f300 80a9 	bgt.w	8002a48 <Tx_Verify+0x34c>
 80028f6:	2b32      	cmp	r3, #50	; 0x32
 80028f8:	dc6c      	bgt.n	80029d4 <Tx_Verify+0x2d8>
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	f2c0 80a4 	blt.w	8002a48 <Tx_Verify+0x34c>
 8002900:	3b02      	subs	r3, #2
 8002902:	2b30      	cmp	r3, #48	; 0x30
 8002904:	f200 80a0 	bhi.w	8002a48 <Tx_Verify+0x34c>
 8002908:	a201      	add	r2, pc, #4	; (adr r2, 8002910 <Tx_Verify+0x214>)
 800290a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290e:	bf00      	nop
 8002910:	08002a2b 	.word	0x08002a2b
 8002914:	08002a23 	.word	0x08002a23
 8002918:	08002a49 	.word	0x08002a49
 800291c:	08002a1b 	.word	0x08002a1b
 8002920:	08002a49 	.word	0x08002a49
 8002924:	08002a49 	.word	0x08002a49
 8002928:	08002a49 	.word	0x08002a49
 800292c:	08002a49 	.word	0x08002a49
 8002930:	08002a13 	.word	0x08002a13
 8002934:	08002a49 	.word	0x08002a49
 8002938:	08002a49 	.word	0x08002a49
 800293c:	08002a49 	.word	0x08002a49
 8002940:	08002a49 	.word	0x08002a49
 8002944:	08002a49 	.word	0x08002a49
 8002948:	08002a49 	.word	0x08002a49
 800294c:	08002a49 	.word	0x08002a49
 8002950:	08002a49 	.word	0x08002a49
 8002954:	08002a49 	.word	0x08002a49
 8002958:	08002a0b 	.word	0x08002a0b
 800295c:	08002a49 	.word	0x08002a49
 8002960:	08002a49 	.word	0x08002a49
 8002964:	08002a49 	.word	0x08002a49
 8002968:	08002a49 	.word	0x08002a49
 800296c:	08002a49 	.word	0x08002a49
 8002970:	08002a49 	.word	0x08002a49
 8002974:	08002a49 	.word	0x08002a49
 8002978:	08002a49 	.word	0x08002a49
 800297c:	08002a49 	.word	0x08002a49
 8002980:	08002a49 	.word	0x08002a49
 8002984:	08002a49 	.word	0x08002a49
 8002988:	08002a49 	.word	0x08002a49
 800298c:	08002a49 	.word	0x08002a49
 8002990:	08002a49 	.word	0x08002a49
 8002994:	08002a49 	.word	0x08002a49
 8002998:	08002a49 	.word	0x08002a49
 800299c:	08002a49 	.word	0x08002a49
 80029a0:	08002a49 	.word	0x08002a49
 80029a4:	08002a49 	.word	0x08002a49
 80029a8:	08002a03 	.word	0x08002a03
 80029ac:	08002a49 	.word	0x08002a49
 80029b0:	08002a49 	.word	0x08002a49
 80029b4:	08002a49 	.word	0x08002a49
 80029b8:	08002a49 	.word	0x08002a49
 80029bc:	08002a49 	.word	0x08002a49
 80029c0:	08002a49 	.word	0x08002a49
 80029c4:	08002a49 	.word	0x08002a49
 80029c8:	08002a49 	.word	0x08002a49
 80029cc:	08002a49 	.word	0x08002a49
 80029d0:	080029fb 	.word	0x080029fb
 80029d4:	2b64      	cmp	r3, #100	; 0x64
 80029d6:	d00c      	beq.n	80029f2 <Tx_Verify+0x2f6>
 80029d8:	e036      	b.n	8002a48 <Tx_Verify+0x34c>
 80029da:	4b18      	ldr	r3, [pc, #96]	; (8002a3c <Tx_Verify+0x340>)
 80029dc:	2201      	movs	r2, #1
 80029de:	70da      	strb	r2, [r3, #3]
 80029e0:	e035      	b.n	8002a4e <Tx_Verify+0x352>
 80029e2:	4b16      	ldr	r3, [pc, #88]	; (8002a3c <Tx_Verify+0x340>)
 80029e4:	2202      	movs	r2, #2
 80029e6:	70da      	strb	r2, [r3, #3]
 80029e8:	e031      	b.n	8002a4e <Tx_Verify+0x352>
 80029ea:	4b14      	ldr	r3, [pc, #80]	; (8002a3c <Tx_Verify+0x340>)
 80029ec:	2203      	movs	r2, #3
 80029ee:	70da      	strb	r2, [r3, #3]
 80029f0:	e02d      	b.n	8002a4e <Tx_Verify+0x352>
 80029f2:	4b12      	ldr	r3, [pc, #72]	; (8002a3c <Tx_Verify+0x340>)
 80029f4:	2204      	movs	r2, #4
 80029f6:	70da      	strb	r2, [r3, #3]
 80029f8:	e029      	b.n	8002a4e <Tx_Verify+0x352>
 80029fa:	4b10      	ldr	r3, [pc, #64]	; (8002a3c <Tx_Verify+0x340>)
 80029fc:	2205      	movs	r2, #5
 80029fe:	70da      	strb	r2, [r3, #3]
 8002a00:	e025      	b.n	8002a4e <Tx_Verify+0x352>
 8002a02:	4b0e      	ldr	r3, [pc, #56]	; (8002a3c <Tx_Verify+0x340>)
 8002a04:	2206      	movs	r2, #6
 8002a06:	70da      	strb	r2, [r3, #3]
 8002a08:	e021      	b.n	8002a4e <Tx_Verify+0x352>
 8002a0a:	4b0c      	ldr	r3, [pc, #48]	; (8002a3c <Tx_Verify+0x340>)
 8002a0c:	2207      	movs	r2, #7
 8002a0e:	70da      	strb	r2, [r3, #3]
 8002a10:	e01d      	b.n	8002a4e <Tx_Verify+0x352>
 8002a12:	4b0a      	ldr	r3, [pc, #40]	; (8002a3c <Tx_Verify+0x340>)
 8002a14:	2208      	movs	r2, #8
 8002a16:	70da      	strb	r2, [r3, #3]
 8002a18:	e019      	b.n	8002a4e <Tx_Verify+0x352>
 8002a1a:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <Tx_Verify+0x340>)
 8002a1c:	2209      	movs	r2, #9
 8002a1e:	70da      	strb	r2, [r3, #3]
 8002a20:	e015      	b.n	8002a4e <Tx_Verify+0x352>
 8002a22:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <Tx_Verify+0x340>)
 8002a24:	220a      	movs	r2, #10
 8002a26:	70da      	strb	r2, [r3, #3]
 8002a28:	e011      	b.n	8002a4e <Tx_Verify+0x352>
 8002a2a:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <Tx_Verify+0x340>)
 8002a2c:	220b      	movs	r2, #11
 8002a2e:	70da      	strb	r2, [r3, #3]
 8002a30:	e00d      	b.n	8002a4e <Tx_Verify+0x352>
 8002a32:	bf00      	nop
 8002a34:	20002d98 	.word	0x20002d98
 8002a38:	20002e78 	.word	0x20002e78
 8002a3c:	20001bc8 	.word	0x20001bc8
 8002a40:	20001a10 	.word	0x20001a10
 8002a44:	20002e7c 	.word	0x20002e7c
 8002a48:	4bb7      	ldr	r3, [pc, #732]	; (8002d28 <Tx_Verify+0x62c>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	70da      	strb	r2, [r3, #3]
 8002a4e:	bf00      	nop
	__SAVE_FREQ(TxData[4], Per_Msg[Analog_9_12]);
 8002a50:	4bb6      	ldr	r3, [pc, #728]	; (8002d2c <Tx_Verify+0x630>)
 8002a52:	889b      	ldrh	r3, [r3, #4]
 8002a54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a58:	f000 8081 	beq.w	8002b5e <Tx_Verify+0x462>
 8002a5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a60:	f300 80a9 	bgt.w	8002bb6 <Tx_Verify+0x4ba>
 8002a64:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a68:	d07d      	beq.n	8002b66 <Tx_Verify+0x46a>
 8002a6a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a6e:	f300 80a2 	bgt.w	8002bb6 <Tx_Verify+0x4ba>
 8002a72:	2bc8      	cmp	r3, #200	; 0xc8
 8002a74:	d07b      	beq.n	8002b6e <Tx_Verify+0x472>
 8002a76:	2bc8      	cmp	r3, #200	; 0xc8
 8002a78:	f300 809d 	bgt.w	8002bb6 <Tx_Verify+0x4ba>
 8002a7c:	2b32      	cmp	r3, #50	; 0x32
 8002a7e:	dc6b      	bgt.n	8002b58 <Tx_Verify+0x45c>
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	f2c0 8098 	blt.w	8002bb6 <Tx_Verify+0x4ba>
 8002a86:	3b02      	subs	r3, #2
 8002a88:	2b30      	cmp	r3, #48	; 0x30
 8002a8a:	f200 8094 	bhi.w	8002bb6 <Tx_Verify+0x4ba>
 8002a8e:	a201      	add	r2, pc, #4	; (adr r2, 8002a94 <Tx_Verify+0x398>)
 8002a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a94:	08002baf 	.word	0x08002baf
 8002a98:	08002ba7 	.word	0x08002ba7
 8002a9c:	08002bb7 	.word	0x08002bb7
 8002aa0:	08002b9f 	.word	0x08002b9f
 8002aa4:	08002bb7 	.word	0x08002bb7
 8002aa8:	08002bb7 	.word	0x08002bb7
 8002aac:	08002bb7 	.word	0x08002bb7
 8002ab0:	08002bb7 	.word	0x08002bb7
 8002ab4:	08002b97 	.word	0x08002b97
 8002ab8:	08002bb7 	.word	0x08002bb7
 8002abc:	08002bb7 	.word	0x08002bb7
 8002ac0:	08002bb7 	.word	0x08002bb7
 8002ac4:	08002bb7 	.word	0x08002bb7
 8002ac8:	08002bb7 	.word	0x08002bb7
 8002acc:	08002bb7 	.word	0x08002bb7
 8002ad0:	08002bb7 	.word	0x08002bb7
 8002ad4:	08002bb7 	.word	0x08002bb7
 8002ad8:	08002bb7 	.word	0x08002bb7
 8002adc:	08002b8f 	.word	0x08002b8f
 8002ae0:	08002bb7 	.word	0x08002bb7
 8002ae4:	08002bb7 	.word	0x08002bb7
 8002ae8:	08002bb7 	.word	0x08002bb7
 8002aec:	08002bb7 	.word	0x08002bb7
 8002af0:	08002bb7 	.word	0x08002bb7
 8002af4:	08002bb7 	.word	0x08002bb7
 8002af8:	08002bb7 	.word	0x08002bb7
 8002afc:	08002bb7 	.word	0x08002bb7
 8002b00:	08002bb7 	.word	0x08002bb7
 8002b04:	08002bb7 	.word	0x08002bb7
 8002b08:	08002bb7 	.word	0x08002bb7
 8002b0c:	08002bb7 	.word	0x08002bb7
 8002b10:	08002bb7 	.word	0x08002bb7
 8002b14:	08002bb7 	.word	0x08002bb7
 8002b18:	08002bb7 	.word	0x08002bb7
 8002b1c:	08002bb7 	.word	0x08002bb7
 8002b20:	08002bb7 	.word	0x08002bb7
 8002b24:	08002bb7 	.word	0x08002bb7
 8002b28:	08002bb7 	.word	0x08002bb7
 8002b2c:	08002b87 	.word	0x08002b87
 8002b30:	08002bb7 	.word	0x08002bb7
 8002b34:	08002bb7 	.word	0x08002bb7
 8002b38:	08002bb7 	.word	0x08002bb7
 8002b3c:	08002bb7 	.word	0x08002bb7
 8002b40:	08002bb7 	.word	0x08002bb7
 8002b44:	08002bb7 	.word	0x08002bb7
 8002b48:	08002bb7 	.word	0x08002bb7
 8002b4c:	08002bb7 	.word	0x08002bb7
 8002b50:	08002bb7 	.word	0x08002bb7
 8002b54:	08002b7f 	.word	0x08002b7f
 8002b58:	2b64      	cmp	r3, #100	; 0x64
 8002b5a:	d00c      	beq.n	8002b76 <Tx_Verify+0x47a>
 8002b5c:	e02b      	b.n	8002bb6 <Tx_Verify+0x4ba>
 8002b5e:	4b72      	ldr	r3, [pc, #456]	; (8002d28 <Tx_Verify+0x62c>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	711a      	strb	r2, [r3, #4]
 8002b64:	e02a      	b.n	8002bbc <Tx_Verify+0x4c0>
 8002b66:	4b70      	ldr	r3, [pc, #448]	; (8002d28 <Tx_Verify+0x62c>)
 8002b68:	2202      	movs	r2, #2
 8002b6a:	711a      	strb	r2, [r3, #4]
 8002b6c:	e026      	b.n	8002bbc <Tx_Verify+0x4c0>
 8002b6e:	4b6e      	ldr	r3, [pc, #440]	; (8002d28 <Tx_Verify+0x62c>)
 8002b70:	2203      	movs	r2, #3
 8002b72:	711a      	strb	r2, [r3, #4]
 8002b74:	e022      	b.n	8002bbc <Tx_Verify+0x4c0>
 8002b76:	4b6c      	ldr	r3, [pc, #432]	; (8002d28 <Tx_Verify+0x62c>)
 8002b78:	2204      	movs	r2, #4
 8002b7a:	711a      	strb	r2, [r3, #4]
 8002b7c:	e01e      	b.n	8002bbc <Tx_Verify+0x4c0>
 8002b7e:	4b6a      	ldr	r3, [pc, #424]	; (8002d28 <Tx_Verify+0x62c>)
 8002b80:	2205      	movs	r2, #5
 8002b82:	711a      	strb	r2, [r3, #4]
 8002b84:	e01a      	b.n	8002bbc <Tx_Verify+0x4c0>
 8002b86:	4b68      	ldr	r3, [pc, #416]	; (8002d28 <Tx_Verify+0x62c>)
 8002b88:	2206      	movs	r2, #6
 8002b8a:	711a      	strb	r2, [r3, #4]
 8002b8c:	e016      	b.n	8002bbc <Tx_Verify+0x4c0>
 8002b8e:	4b66      	ldr	r3, [pc, #408]	; (8002d28 <Tx_Verify+0x62c>)
 8002b90:	2207      	movs	r2, #7
 8002b92:	711a      	strb	r2, [r3, #4]
 8002b94:	e012      	b.n	8002bbc <Tx_Verify+0x4c0>
 8002b96:	4b64      	ldr	r3, [pc, #400]	; (8002d28 <Tx_Verify+0x62c>)
 8002b98:	2208      	movs	r2, #8
 8002b9a:	711a      	strb	r2, [r3, #4]
 8002b9c:	e00e      	b.n	8002bbc <Tx_Verify+0x4c0>
 8002b9e:	4b62      	ldr	r3, [pc, #392]	; (8002d28 <Tx_Verify+0x62c>)
 8002ba0:	2209      	movs	r2, #9
 8002ba2:	711a      	strb	r2, [r3, #4]
 8002ba4:	e00a      	b.n	8002bbc <Tx_Verify+0x4c0>
 8002ba6:	4b60      	ldr	r3, [pc, #384]	; (8002d28 <Tx_Verify+0x62c>)
 8002ba8:	220a      	movs	r2, #10
 8002baa:	711a      	strb	r2, [r3, #4]
 8002bac:	e006      	b.n	8002bbc <Tx_Verify+0x4c0>
 8002bae:	4b5e      	ldr	r3, [pc, #376]	; (8002d28 <Tx_Verify+0x62c>)
 8002bb0:	220b      	movs	r2, #11
 8002bb2:	711a      	strb	r2, [r3, #4]
 8002bb4:	e002      	b.n	8002bbc <Tx_Verify+0x4c0>
 8002bb6:	4b5c      	ldr	r3, [pc, #368]	; (8002d28 <Tx_Verify+0x62c>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	711a      	strb	r2, [r3, #4]
 8002bbc:	bf00      	nop
	__SAVE_FREQ(TxData[5], Per_Msg[RTC_Msg]);
 8002bbe:	4b5b      	ldr	r3, [pc, #364]	; (8002d2c <Tx_Verify+0x630>)
 8002bc0:	88db      	ldrh	r3, [r3, #6]
 8002bc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bc6:	f000 8082 	beq.w	8002cce <Tx_Verify+0x5d2>
 8002bca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bce:	f300 80af 	bgt.w	8002d30 <Tx_Verify+0x634>
 8002bd2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002bd6:	d07e      	beq.n	8002cd6 <Tx_Verify+0x5da>
 8002bd8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002bdc:	f300 80a8 	bgt.w	8002d30 <Tx_Verify+0x634>
 8002be0:	2bc8      	cmp	r3, #200	; 0xc8
 8002be2:	d07c      	beq.n	8002cde <Tx_Verify+0x5e2>
 8002be4:	2bc8      	cmp	r3, #200	; 0xc8
 8002be6:	f300 80a3 	bgt.w	8002d30 <Tx_Verify+0x634>
 8002bea:	2b32      	cmp	r3, #50	; 0x32
 8002bec:	dc6c      	bgt.n	8002cc8 <Tx_Verify+0x5cc>
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	f2c0 809e 	blt.w	8002d30 <Tx_Verify+0x634>
 8002bf4:	3b02      	subs	r3, #2
 8002bf6:	2b30      	cmp	r3, #48	; 0x30
 8002bf8:	f200 809a 	bhi.w	8002d30 <Tx_Verify+0x634>
 8002bfc:	a201      	add	r2, pc, #4	; (adr r2, 8002c04 <Tx_Verify+0x508>)
 8002bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c02:	bf00      	nop
 8002c04:	08002d1f 	.word	0x08002d1f
 8002c08:	08002d17 	.word	0x08002d17
 8002c0c:	08002d31 	.word	0x08002d31
 8002c10:	08002d0f 	.word	0x08002d0f
 8002c14:	08002d31 	.word	0x08002d31
 8002c18:	08002d31 	.word	0x08002d31
 8002c1c:	08002d31 	.word	0x08002d31
 8002c20:	08002d31 	.word	0x08002d31
 8002c24:	08002d07 	.word	0x08002d07
 8002c28:	08002d31 	.word	0x08002d31
 8002c2c:	08002d31 	.word	0x08002d31
 8002c30:	08002d31 	.word	0x08002d31
 8002c34:	08002d31 	.word	0x08002d31
 8002c38:	08002d31 	.word	0x08002d31
 8002c3c:	08002d31 	.word	0x08002d31
 8002c40:	08002d31 	.word	0x08002d31
 8002c44:	08002d31 	.word	0x08002d31
 8002c48:	08002d31 	.word	0x08002d31
 8002c4c:	08002cff 	.word	0x08002cff
 8002c50:	08002d31 	.word	0x08002d31
 8002c54:	08002d31 	.word	0x08002d31
 8002c58:	08002d31 	.word	0x08002d31
 8002c5c:	08002d31 	.word	0x08002d31
 8002c60:	08002d31 	.word	0x08002d31
 8002c64:	08002d31 	.word	0x08002d31
 8002c68:	08002d31 	.word	0x08002d31
 8002c6c:	08002d31 	.word	0x08002d31
 8002c70:	08002d31 	.word	0x08002d31
 8002c74:	08002d31 	.word	0x08002d31
 8002c78:	08002d31 	.word	0x08002d31
 8002c7c:	08002d31 	.word	0x08002d31
 8002c80:	08002d31 	.word	0x08002d31
 8002c84:	08002d31 	.word	0x08002d31
 8002c88:	08002d31 	.word	0x08002d31
 8002c8c:	08002d31 	.word	0x08002d31
 8002c90:	08002d31 	.word	0x08002d31
 8002c94:	08002d31 	.word	0x08002d31
 8002c98:	08002d31 	.word	0x08002d31
 8002c9c:	08002cf7 	.word	0x08002cf7
 8002ca0:	08002d31 	.word	0x08002d31
 8002ca4:	08002d31 	.word	0x08002d31
 8002ca8:	08002d31 	.word	0x08002d31
 8002cac:	08002d31 	.word	0x08002d31
 8002cb0:	08002d31 	.word	0x08002d31
 8002cb4:	08002d31 	.word	0x08002d31
 8002cb8:	08002d31 	.word	0x08002d31
 8002cbc:	08002d31 	.word	0x08002d31
 8002cc0:	08002d31 	.word	0x08002d31
 8002cc4:	08002cef 	.word	0x08002cef
 8002cc8:	2b64      	cmp	r3, #100	; 0x64
 8002cca:	d00c      	beq.n	8002ce6 <Tx_Verify+0x5ea>
 8002ccc:	e030      	b.n	8002d30 <Tx_Verify+0x634>
 8002cce:	4b16      	ldr	r3, [pc, #88]	; (8002d28 <Tx_Verify+0x62c>)
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	715a      	strb	r2, [r3, #5]
 8002cd4:	e02f      	b.n	8002d36 <Tx_Verify+0x63a>
 8002cd6:	4b14      	ldr	r3, [pc, #80]	; (8002d28 <Tx_Verify+0x62c>)
 8002cd8:	2202      	movs	r2, #2
 8002cda:	715a      	strb	r2, [r3, #5]
 8002cdc:	e02b      	b.n	8002d36 <Tx_Verify+0x63a>
 8002cde:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <Tx_Verify+0x62c>)
 8002ce0:	2203      	movs	r2, #3
 8002ce2:	715a      	strb	r2, [r3, #5]
 8002ce4:	e027      	b.n	8002d36 <Tx_Verify+0x63a>
 8002ce6:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <Tx_Verify+0x62c>)
 8002ce8:	2204      	movs	r2, #4
 8002cea:	715a      	strb	r2, [r3, #5]
 8002cec:	e023      	b.n	8002d36 <Tx_Verify+0x63a>
 8002cee:	4b0e      	ldr	r3, [pc, #56]	; (8002d28 <Tx_Verify+0x62c>)
 8002cf0:	2205      	movs	r2, #5
 8002cf2:	715a      	strb	r2, [r3, #5]
 8002cf4:	e01f      	b.n	8002d36 <Tx_Verify+0x63a>
 8002cf6:	4b0c      	ldr	r3, [pc, #48]	; (8002d28 <Tx_Verify+0x62c>)
 8002cf8:	2206      	movs	r2, #6
 8002cfa:	715a      	strb	r2, [r3, #5]
 8002cfc:	e01b      	b.n	8002d36 <Tx_Verify+0x63a>
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <Tx_Verify+0x62c>)
 8002d00:	2207      	movs	r2, #7
 8002d02:	715a      	strb	r2, [r3, #5]
 8002d04:	e017      	b.n	8002d36 <Tx_Verify+0x63a>
 8002d06:	4b08      	ldr	r3, [pc, #32]	; (8002d28 <Tx_Verify+0x62c>)
 8002d08:	2208      	movs	r2, #8
 8002d0a:	715a      	strb	r2, [r3, #5]
 8002d0c:	e013      	b.n	8002d36 <Tx_Verify+0x63a>
 8002d0e:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <Tx_Verify+0x62c>)
 8002d10:	2209      	movs	r2, #9
 8002d12:	715a      	strb	r2, [r3, #5]
 8002d14:	e00f      	b.n	8002d36 <Tx_Verify+0x63a>
 8002d16:	4b04      	ldr	r3, [pc, #16]	; (8002d28 <Tx_Verify+0x62c>)
 8002d18:	220a      	movs	r2, #10
 8002d1a:	715a      	strb	r2, [r3, #5]
 8002d1c:	e00b      	b.n	8002d36 <Tx_Verify+0x63a>
 8002d1e:	4b02      	ldr	r3, [pc, #8]	; (8002d28 <Tx_Verify+0x62c>)
 8002d20:	220b      	movs	r2, #11
 8002d22:	715a      	strb	r2, [r3, #5]
 8002d24:	e007      	b.n	8002d36 <Tx_Verify+0x63a>
 8002d26:	bf00      	nop
 8002d28:	20001bc8 	.word	0x20001bc8
 8002d2c:	20002e7c 	.word	0x20002e7c
 8002d30:	4bcd      	ldr	r3, [pc, #820]	; (8003068 <Tx_Verify+0x96c>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	715a      	strb	r2, [r3, #5]
 8002d36:	bf00      	nop
	__SAVE_FREQ(TxData[6], Per_Msg[PDM_Save]);
 8002d38:	4bcc      	ldr	r3, [pc, #816]	; (800306c <Tx_Verify+0x970>)
 8002d3a:	899b      	ldrh	r3, [r3, #12]
 8002d3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d40:	f000 8081 	beq.w	8002e46 <Tx_Verify+0x74a>
 8002d44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d48:	f300 80a9 	bgt.w	8002e9e <Tx_Verify+0x7a2>
 8002d4c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d50:	d07d      	beq.n	8002e4e <Tx_Verify+0x752>
 8002d52:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d56:	f300 80a2 	bgt.w	8002e9e <Tx_Verify+0x7a2>
 8002d5a:	2bc8      	cmp	r3, #200	; 0xc8
 8002d5c:	d07b      	beq.n	8002e56 <Tx_Verify+0x75a>
 8002d5e:	2bc8      	cmp	r3, #200	; 0xc8
 8002d60:	f300 809d 	bgt.w	8002e9e <Tx_Verify+0x7a2>
 8002d64:	2b32      	cmp	r3, #50	; 0x32
 8002d66:	dc6b      	bgt.n	8002e40 <Tx_Verify+0x744>
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	f2c0 8098 	blt.w	8002e9e <Tx_Verify+0x7a2>
 8002d6e:	3b02      	subs	r3, #2
 8002d70:	2b30      	cmp	r3, #48	; 0x30
 8002d72:	f200 8094 	bhi.w	8002e9e <Tx_Verify+0x7a2>
 8002d76:	a201      	add	r2, pc, #4	; (adr r2, 8002d7c <Tx_Verify+0x680>)
 8002d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7c:	08002e97 	.word	0x08002e97
 8002d80:	08002e8f 	.word	0x08002e8f
 8002d84:	08002e9f 	.word	0x08002e9f
 8002d88:	08002e87 	.word	0x08002e87
 8002d8c:	08002e9f 	.word	0x08002e9f
 8002d90:	08002e9f 	.word	0x08002e9f
 8002d94:	08002e9f 	.word	0x08002e9f
 8002d98:	08002e9f 	.word	0x08002e9f
 8002d9c:	08002e7f 	.word	0x08002e7f
 8002da0:	08002e9f 	.word	0x08002e9f
 8002da4:	08002e9f 	.word	0x08002e9f
 8002da8:	08002e9f 	.word	0x08002e9f
 8002dac:	08002e9f 	.word	0x08002e9f
 8002db0:	08002e9f 	.word	0x08002e9f
 8002db4:	08002e9f 	.word	0x08002e9f
 8002db8:	08002e9f 	.word	0x08002e9f
 8002dbc:	08002e9f 	.word	0x08002e9f
 8002dc0:	08002e9f 	.word	0x08002e9f
 8002dc4:	08002e77 	.word	0x08002e77
 8002dc8:	08002e9f 	.word	0x08002e9f
 8002dcc:	08002e9f 	.word	0x08002e9f
 8002dd0:	08002e9f 	.word	0x08002e9f
 8002dd4:	08002e9f 	.word	0x08002e9f
 8002dd8:	08002e9f 	.word	0x08002e9f
 8002ddc:	08002e9f 	.word	0x08002e9f
 8002de0:	08002e9f 	.word	0x08002e9f
 8002de4:	08002e9f 	.word	0x08002e9f
 8002de8:	08002e9f 	.word	0x08002e9f
 8002dec:	08002e9f 	.word	0x08002e9f
 8002df0:	08002e9f 	.word	0x08002e9f
 8002df4:	08002e9f 	.word	0x08002e9f
 8002df8:	08002e9f 	.word	0x08002e9f
 8002dfc:	08002e9f 	.word	0x08002e9f
 8002e00:	08002e9f 	.word	0x08002e9f
 8002e04:	08002e9f 	.word	0x08002e9f
 8002e08:	08002e9f 	.word	0x08002e9f
 8002e0c:	08002e9f 	.word	0x08002e9f
 8002e10:	08002e9f 	.word	0x08002e9f
 8002e14:	08002e6f 	.word	0x08002e6f
 8002e18:	08002e9f 	.word	0x08002e9f
 8002e1c:	08002e9f 	.word	0x08002e9f
 8002e20:	08002e9f 	.word	0x08002e9f
 8002e24:	08002e9f 	.word	0x08002e9f
 8002e28:	08002e9f 	.word	0x08002e9f
 8002e2c:	08002e9f 	.word	0x08002e9f
 8002e30:	08002e9f 	.word	0x08002e9f
 8002e34:	08002e9f 	.word	0x08002e9f
 8002e38:	08002e9f 	.word	0x08002e9f
 8002e3c:	08002e67 	.word	0x08002e67
 8002e40:	2b64      	cmp	r3, #100	; 0x64
 8002e42:	d00c      	beq.n	8002e5e <Tx_Verify+0x762>
 8002e44:	e02b      	b.n	8002e9e <Tx_Verify+0x7a2>
 8002e46:	4b88      	ldr	r3, [pc, #544]	; (8003068 <Tx_Verify+0x96c>)
 8002e48:	2201      	movs	r2, #1
 8002e4a:	719a      	strb	r2, [r3, #6]
 8002e4c:	e02a      	b.n	8002ea4 <Tx_Verify+0x7a8>
 8002e4e:	4b86      	ldr	r3, [pc, #536]	; (8003068 <Tx_Verify+0x96c>)
 8002e50:	2202      	movs	r2, #2
 8002e52:	719a      	strb	r2, [r3, #6]
 8002e54:	e026      	b.n	8002ea4 <Tx_Verify+0x7a8>
 8002e56:	4b84      	ldr	r3, [pc, #528]	; (8003068 <Tx_Verify+0x96c>)
 8002e58:	2203      	movs	r2, #3
 8002e5a:	719a      	strb	r2, [r3, #6]
 8002e5c:	e022      	b.n	8002ea4 <Tx_Verify+0x7a8>
 8002e5e:	4b82      	ldr	r3, [pc, #520]	; (8003068 <Tx_Verify+0x96c>)
 8002e60:	2204      	movs	r2, #4
 8002e62:	719a      	strb	r2, [r3, #6]
 8002e64:	e01e      	b.n	8002ea4 <Tx_Verify+0x7a8>
 8002e66:	4b80      	ldr	r3, [pc, #512]	; (8003068 <Tx_Verify+0x96c>)
 8002e68:	2205      	movs	r2, #5
 8002e6a:	719a      	strb	r2, [r3, #6]
 8002e6c:	e01a      	b.n	8002ea4 <Tx_Verify+0x7a8>
 8002e6e:	4b7e      	ldr	r3, [pc, #504]	; (8003068 <Tx_Verify+0x96c>)
 8002e70:	2206      	movs	r2, #6
 8002e72:	719a      	strb	r2, [r3, #6]
 8002e74:	e016      	b.n	8002ea4 <Tx_Verify+0x7a8>
 8002e76:	4b7c      	ldr	r3, [pc, #496]	; (8003068 <Tx_Verify+0x96c>)
 8002e78:	2207      	movs	r2, #7
 8002e7a:	719a      	strb	r2, [r3, #6]
 8002e7c:	e012      	b.n	8002ea4 <Tx_Verify+0x7a8>
 8002e7e:	4b7a      	ldr	r3, [pc, #488]	; (8003068 <Tx_Verify+0x96c>)
 8002e80:	2208      	movs	r2, #8
 8002e82:	719a      	strb	r2, [r3, #6]
 8002e84:	e00e      	b.n	8002ea4 <Tx_Verify+0x7a8>
 8002e86:	4b78      	ldr	r3, [pc, #480]	; (8003068 <Tx_Verify+0x96c>)
 8002e88:	2209      	movs	r2, #9
 8002e8a:	719a      	strb	r2, [r3, #6]
 8002e8c:	e00a      	b.n	8002ea4 <Tx_Verify+0x7a8>
 8002e8e:	4b76      	ldr	r3, [pc, #472]	; (8003068 <Tx_Verify+0x96c>)
 8002e90:	220a      	movs	r2, #10
 8002e92:	719a      	strb	r2, [r3, #6]
 8002e94:	e006      	b.n	8002ea4 <Tx_Verify+0x7a8>
 8002e96:	4b74      	ldr	r3, [pc, #464]	; (8003068 <Tx_Verify+0x96c>)
 8002e98:	220b      	movs	r2, #11
 8002e9a:	719a      	strb	r2, [r3, #6]
 8002e9c:	e002      	b.n	8002ea4 <Tx_Verify+0x7a8>
 8002e9e:	4b72      	ldr	r3, [pc, #456]	; (8003068 <Tx_Verify+0x96c>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	719a      	strb	r2, [r3, #6]
 8002ea4:	bf00      	nop
	__SAVE_FREQ(TxData[7], Per_Msg[ECU_Save]);
 8002ea6:	4b71      	ldr	r3, [pc, #452]	; (800306c <Tx_Verify+0x970>)
 8002ea8:	895b      	ldrh	r3, [r3, #10]
 8002eaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002eae:	f000 8082 	beq.w	8002fb6 <Tx_Verify+0x8ba>
 8002eb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002eb6:	f300 80aa 	bgt.w	800300e <Tx_Verify+0x912>
 8002eba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ebe:	d07e      	beq.n	8002fbe <Tx_Verify+0x8c2>
 8002ec0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ec4:	f300 80a3 	bgt.w	800300e <Tx_Verify+0x912>
 8002ec8:	2bc8      	cmp	r3, #200	; 0xc8
 8002eca:	d07c      	beq.n	8002fc6 <Tx_Verify+0x8ca>
 8002ecc:	2bc8      	cmp	r3, #200	; 0xc8
 8002ece:	f300 809e 	bgt.w	800300e <Tx_Verify+0x912>
 8002ed2:	2b32      	cmp	r3, #50	; 0x32
 8002ed4:	dc6c      	bgt.n	8002fb0 <Tx_Verify+0x8b4>
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	f2c0 8099 	blt.w	800300e <Tx_Verify+0x912>
 8002edc:	3b02      	subs	r3, #2
 8002ede:	2b30      	cmp	r3, #48	; 0x30
 8002ee0:	f200 8095 	bhi.w	800300e <Tx_Verify+0x912>
 8002ee4:	a201      	add	r2, pc, #4	; (adr r2, 8002eec <Tx_Verify+0x7f0>)
 8002ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eea:	bf00      	nop
 8002eec:	08003007 	.word	0x08003007
 8002ef0:	08002fff 	.word	0x08002fff
 8002ef4:	0800300f 	.word	0x0800300f
 8002ef8:	08002ff7 	.word	0x08002ff7
 8002efc:	0800300f 	.word	0x0800300f
 8002f00:	0800300f 	.word	0x0800300f
 8002f04:	0800300f 	.word	0x0800300f
 8002f08:	0800300f 	.word	0x0800300f
 8002f0c:	08002fef 	.word	0x08002fef
 8002f10:	0800300f 	.word	0x0800300f
 8002f14:	0800300f 	.word	0x0800300f
 8002f18:	0800300f 	.word	0x0800300f
 8002f1c:	0800300f 	.word	0x0800300f
 8002f20:	0800300f 	.word	0x0800300f
 8002f24:	0800300f 	.word	0x0800300f
 8002f28:	0800300f 	.word	0x0800300f
 8002f2c:	0800300f 	.word	0x0800300f
 8002f30:	0800300f 	.word	0x0800300f
 8002f34:	08002fe7 	.word	0x08002fe7
 8002f38:	0800300f 	.word	0x0800300f
 8002f3c:	0800300f 	.word	0x0800300f
 8002f40:	0800300f 	.word	0x0800300f
 8002f44:	0800300f 	.word	0x0800300f
 8002f48:	0800300f 	.word	0x0800300f
 8002f4c:	0800300f 	.word	0x0800300f
 8002f50:	0800300f 	.word	0x0800300f
 8002f54:	0800300f 	.word	0x0800300f
 8002f58:	0800300f 	.word	0x0800300f
 8002f5c:	0800300f 	.word	0x0800300f
 8002f60:	0800300f 	.word	0x0800300f
 8002f64:	0800300f 	.word	0x0800300f
 8002f68:	0800300f 	.word	0x0800300f
 8002f6c:	0800300f 	.word	0x0800300f
 8002f70:	0800300f 	.word	0x0800300f
 8002f74:	0800300f 	.word	0x0800300f
 8002f78:	0800300f 	.word	0x0800300f
 8002f7c:	0800300f 	.word	0x0800300f
 8002f80:	0800300f 	.word	0x0800300f
 8002f84:	08002fdf 	.word	0x08002fdf
 8002f88:	0800300f 	.word	0x0800300f
 8002f8c:	0800300f 	.word	0x0800300f
 8002f90:	0800300f 	.word	0x0800300f
 8002f94:	0800300f 	.word	0x0800300f
 8002f98:	0800300f 	.word	0x0800300f
 8002f9c:	0800300f 	.word	0x0800300f
 8002fa0:	0800300f 	.word	0x0800300f
 8002fa4:	0800300f 	.word	0x0800300f
 8002fa8:	0800300f 	.word	0x0800300f
 8002fac:	08002fd7 	.word	0x08002fd7
 8002fb0:	2b64      	cmp	r3, #100	; 0x64
 8002fb2:	d00c      	beq.n	8002fce <Tx_Verify+0x8d2>
 8002fb4:	e02b      	b.n	800300e <Tx_Verify+0x912>
 8002fb6:	4b2c      	ldr	r3, [pc, #176]	; (8003068 <Tx_Verify+0x96c>)
 8002fb8:	2201      	movs	r2, #1
 8002fba:	71da      	strb	r2, [r3, #7]
 8002fbc:	e02a      	b.n	8003014 <Tx_Verify+0x918>
 8002fbe:	4b2a      	ldr	r3, [pc, #168]	; (8003068 <Tx_Verify+0x96c>)
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	71da      	strb	r2, [r3, #7]
 8002fc4:	e026      	b.n	8003014 <Tx_Verify+0x918>
 8002fc6:	4b28      	ldr	r3, [pc, #160]	; (8003068 <Tx_Verify+0x96c>)
 8002fc8:	2203      	movs	r2, #3
 8002fca:	71da      	strb	r2, [r3, #7]
 8002fcc:	e022      	b.n	8003014 <Tx_Verify+0x918>
 8002fce:	4b26      	ldr	r3, [pc, #152]	; (8003068 <Tx_Verify+0x96c>)
 8002fd0:	2204      	movs	r2, #4
 8002fd2:	71da      	strb	r2, [r3, #7]
 8002fd4:	e01e      	b.n	8003014 <Tx_Verify+0x918>
 8002fd6:	4b24      	ldr	r3, [pc, #144]	; (8003068 <Tx_Verify+0x96c>)
 8002fd8:	2205      	movs	r2, #5
 8002fda:	71da      	strb	r2, [r3, #7]
 8002fdc:	e01a      	b.n	8003014 <Tx_Verify+0x918>
 8002fde:	4b22      	ldr	r3, [pc, #136]	; (8003068 <Tx_Verify+0x96c>)
 8002fe0:	2206      	movs	r2, #6
 8002fe2:	71da      	strb	r2, [r3, #7]
 8002fe4:	e016      	b.n	8003014 <Tx_Verify+0x918>
 8002fe6:	4b20      	ldr	r3, [pc, #128]	; (8003068 <Tx_Verify+0x96c>)
 8002fe8:	2207      	movs	r2, #7
 8002fea:	71da      	strb	r2, [r3, #7]
 8002fec:	e012      	b.n	8003014 <Tx_Verify+0x918>
 8002fee:	4b1e      	ldr	r3, [pc, #120]	; (8003068 <Tx_Verify+0x96c>)
 8002ff0:	2208      	movs	r2, #8
 8002ff2:	71da      	strb	r2, [r3, #7]
 8002ff4:	e00e      	b.n	8003014 <Tx_Verify+0x918>
 8002ff6:	4b1c      	ldr	r3, [pc, #112]	; (8003068 <Tx_Verify+0x96c>)
 8002ff8:	2209      	movs	r2, #9
 8002ffa:	71da      	strb	r2, [r3, #7]
 8002ffc:	e00a      	b.n	8003014 <Tx_Verify+0x918>
 8002ffe:	4b1a      	ldr	r3, [pc, #104]	; (8003068 <Tx_Verify+0x96c>)
 8003000:	220a      	movs	r2, #10
 8003002:	71da      	strb	r2, [r3, #7]
 8003004:	e006      	b.n	8003014 <Tx_Verify+0x918>
 8003006:	4b18      	ldr	r3, [pc, #96]	; (8003068 <Tx_Verify+0x96c>)
 8003008:	220b      	movs	r2, #11
 800300a:	71da      	strb	r2, [r3, #7]
 800300c:	e002      	b.n	8003014 <Tx_Verify+0x918>
 800300e:	4b16      	ldr	r3, [pc, #88]	; (8003068 <Tx_Verify+0x96c>)
 8003010:	2200      	movs	r2, #0
 8003012:	71da      	strb	r2, [r3, #7]
 8003014:	bf00      	nop

	if(Flag_Datalogger == DL_Save)
 8003016:	4b16      	ldr	r3, [pc, #88]	; (8003070 <Tx_Verify+0x974>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d108      	bne.n	8003030 <Tx_Verify+0x934>
		Principal_Datalogger_Save_Buffer(TxHeader.StdId, TxHeader.DLC, TxData, &File_Struct);
 800301e:	4b15      	ldr	r3, [pc, #84]	; (8003074 <Tx_Verify+0x978>)
 8003020:	6818      	ldr	r0, [r3, #0]
 8003022:	4b14      	ldr	r3, [pc, #80]	; (8003074 <Tx_Verify+0x978>)
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	b2d9      	uxtb	r1, r3
 8003028:	4b13      	ldr	r3, [pc, #76]	; (8003078 <Tx_Verify+0x97c>)
 800302a:	4a0f      	ldr	r2, [pc, #60]	; (8003068 <Tx_Verify+0x96c>)
 800302c:	f002 fc6c 	bl	8005908 <Principal_Datalogger_Save_Buffer>

	if(HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK)
 8003030:	4b12      	ldr	r3, [pc, #72]	; (800307c <Tx_Verify+0x980>)
 8003032:	4a0d      	ldr	r2, [pc, #52]	; (8003068 <Tx_Verify+0x96c>)
 8003034:	490f      	ldr	r1, [pc, #60]	; (8003074 <Tx_Verify+0x978>)
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f004 f98c 	bl	8007354 <HAL_CAN_AddTxMessage>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d107      	bne.n	8003052 <Tx_Verify+0x956>
		Verify_CAN |= 1;
 8003042:	4b0f      	ldr	r3, [pc, #60]	; (8003080 <Tx_Verify+0x984>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	f043 0301 	orr.w	r3, r3, #1
 800304a:	b2da      	uxtb	r2, r3
 800304c:	4b0c      	ldr	r3, [pc, #48]	; (8003080 <Tx_Verify+0x984>)
 800304e:	701a      	strb	r2, [r3, #0]
 8003050:	e006      	b.n	8003060 <Tx_Verify+0x964>
	else
		Verify_CAN &= 0x02;
 8003052:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <Tx_Verify+0x984>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	b2da      	uxtb	r2, r3
 800305c:	4b08      	ldr	r3, [pc, #32]	; (8003080 <Tx_Verify+0x984>)
 800305e:	701a      	strb	r2, [r3, #0]

	//Wait Transmission finish
	for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8003060:	2300      	movs	r3, #0
 8003062:	73fb      	strb	r3, [r7, #15]
 8003064:	e011      	b.n	800308a <Tx_Verify+0x98e>
 8003066:	bf00      	nop
 8003068:	20001bc8 	.word	0x20001bc8
 800306c:	20002e7c 	.word	0x20002e7c
 8003070:	20001bd0 	.word	0x20001bd0
 8003074:	20002d98 	.word	0x20002d98
 8003078:	20001c84 	.word	0x20001c84
 800307c:	20001c58 	.word	0x20001c58
 8003080:	20001a58 	.word	0x20001a58
 8003084:	7bfb      	ldrb	r3, [r7, #15]
 8003086:	3301      	adds	r3, #1
 8003088:	73fb      	strb	r3, [r7, #15]
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f004 fa3d 	bl	800750a <HAL_CAN_GetTxMailboxesFreeLevel>
 8003090:	4603      	mov	r3, r0
 8003092:	2b03      	cmp	r3, #3
 8003094:	d002      	beq.n	800309c <Tx_Verify+0x9a0>
 8003096:	7bfb      	ldrb	r3, [r7, #15]
 8003098:	2b02      	cmp	r3, #2
 800309a:	d9f3      	bls.n	8003084 <Tx_Verify+0x988>
}
 800309c:	bf00      	nop
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <Tx_Beacon>:

static void Tx_Beacon(CAN_HandleTypeDef* hcan)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 80030ac:	4b11      	ldr	r3, [pc, #68]	; (80030f4 <Tx_Beacon+0x50>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80030b2:	4b10      	ldr	r3, [pc, #64]	; (80030f4 <Tx_Beacon+0x50>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 80030b8:	4b0e      	ldr	r3, [pc, #56]	; (80030f4 <Tx_Beacon+0x50>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	751a      	strb	r2, [r3, #20]
	TxHeader.StdId = BEACON_ID;
 80030be:	4b0d      	ldr	r3, [pc, #52]	; (80030f4 <Tx_Beacon+0x50>)
 80030c0:	2264      	movs	r2, #100	; 0x64
 80030c2:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 1;
 80030c4:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <Tx_Beacon+0x50>)
 80030c6:	2201      	movs	r2, #1
 80030c8:	611a      	str	r2, [r3, #16]

	TxData[0] = Lap_Number;
 80030ca:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <Tx_Beacon+0x54>)
 80030cc:	781a      	ldrb	r2, [r3, #0]
 80030ce:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <Tx_Beacon+0x58>)
 80030d0:	701a      	strb	r2, [r3, #0]

	if(Flag_Datalogger == DL_Save)
 80030d2:	4b0b      	ldr	r3, [pc, #44]	; (8003100 <Tx_Beacon+0x5c>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d108      	bne.n	80030ec <Tx_Beacon+0x48>
		Principal_Datalogger_Save_Buffer(TxHeader.StdId, TxHeader.DLC, TxData, &File_Struct);
 80030da:	4b06      	ldr	r3, [pc, #24]	; (80030f4 <Tx_Beacon+0x50>)
 80030dc:	6818      	ldr	r0, [r3, #0]
 80030de:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <Tx_Beacon+0x50>)
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	b2d9      	uxtb	r1, r3
 80030e4:	4b07      	ldr	r3, [pc, #28]	; (8003104 <Tx_Beacon+0x60>)
 80030e6:	4a05      	ldr	r2, [pc, #20]	; (80030fc <Tx_Beacon+0x58>)
 80030e8:	f002 fc0e 	bl	8005908 <Principal_Datalogger_Save_Buffer>
//	else
//		Verify_CAN &= 0x02;
//
//	//Wait Transmission finish
//	for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
}
 80030ec:	bf00      	nop
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	20002d98 	.word	0x20002d98
 80030f8:	20002cc4 	.word	0x20002cc4
 80030fc:	20001bc8 	.word	0x20001bc8
 8003100:	20001bd0 	.word	0x20001bd0
 8003104:	20001c84 	.word	0x20001c84

08003108 <Save_PDM>:

static void Save_PDM()
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
	uint8_t id = 0, length = 0, buffer[8];
 800310e:	2300      	movs	r3, #0
 8003110:	73fb      	strb	r3, [r7, #15]
 8003112:	2300      	movs	r3, #0
 8003114:	73bb      	strb	r3, [r7, #14]

	if(Flag_Datalogger == DL_Save)
 8003116:	4b87      	ldr	r3, [pc, #540]	; (8003334 <Save_PDM+0x22c>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b01      	cmp	r3, #1
 800311c:	f000 8105 	beq.w	800332a <Save_PDM+0x222>
		return;

	id = PDM_FIRST_ID;
 8003120:	2332      	movs	r3, #50	; 0x32
 8003122:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003124:	2308      	movs	r3, #8
 8003126:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Current_Buffer[0] << 8;
 8003128:	2300      	movs	r3, #0
 800312a:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Current_Buffer[0] & 0xff;
 800312c:	4b82      	ldr	r3, [pc, #520]	; (8003338 <Save_PDM+0x230>)
 800312e:	889b      	ldrh	r3, [r3, #4]
 8003130:	b2db      	uxtb	r3, r3
 8003132:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Current_Buffer[1] << 8;
 8003134:	2300      	movs	r3, #0
 8003136:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Current_Buffer[1] & 0xff;
 8003138:	4b7f      	ldr	r3, [pc, #508]	; (8003338 <Save_PDM+0x230>)
 800313a:	88db      	ldrh	r3, [r3, #6]
 800313c:	b2db      	uxtb	r3, r3
 800313e:	71fb      	strb	r3, [r7, #7]
	buffer[4] = PDM_Readings.Current_Buffer[2] << 8;
 8003140:	2300      	movs	r3, #0
 8003142:	723b      	strb	r3, [r7, #8]
	buffer[5] = PDM_Readings.Current_Buffer[2] & 0xff;
 8003144:	4b7c      	ldr	r3, [pc, #496]	; (8003338 <Save_PDM+0x230>)
 8003146:	891b      	ldrh	r3, [r3, #8]
 8003148:	b2db      	uxtb	r3, r3
 800314a:	727b      	strb	r3, [r7, #9]
	buffer[6] = PDM_Readings.Current_Buffer[3] << 8;
 800314c:	2300      	movs	r3, #0
 800314e:	72bb      	strb	r3, [r7, #10]
	buffer[7] = PDM_Readings.Current_Buffer[3] & 0xff;
 8003150:	4b79      	ldr	r3, [pc, #484]	; (8003338 <Save_PDM+0x230>)
 8003152:	895b      	ldrh	r3, [r3, #10]
 8003154:	b2db      	uxtb	r3, r3
 8003156:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 8003158:	7bf8      	ldrb	r0, [r7, #15]
 800315a:	1d3a      	adds	r2, r7, #4
 800315c:	7bb9      	ldrb	r1, [r7, #14]
 800315e:	4b77      	ldr	r3, [pc, #476]	; (800333c <Save_PDM+0x234>)
 8003160:	f002 fbd2 	bl	8005908 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 1;
 8003164:	2333      	movs	r3, #51	; 0x33
 8003166:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003168:	2308      	movs	r3, #8
 800316a:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Current_Buffer[4] << 8;
 800316c:	2300      	movs	r3, #0
 800316e:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Current_Buffer[4] & 0xff;
 8003170:	4b71      	ldr	r3, [pc, #452]	; (8003338 <Save_PDM+0x230>)
 8003172:	899b      	ldrh	r3, [r3, #12]
 8003174:	b2db      	uxtb	r3, r3
 8003176:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Current_Buffer[5] << 8;
 8003178:	2300      	movs	r3, #0
 800317a:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Current_Buffer[5] & 0xff;
 800317c:	4b6e      	ldr	r3, [pc, #440]	; (8003338 <Save_PDM+0x230>)
 800317e:	89db      	ldrh	r3, [r3, #14]
 8003180:	b2db      	uxtb	r3, r3
 8003182:	71fb      	strb	r3, [r7, #7]
	buffer[4] = PDM_Readings.Current_Buffer[6] << 8;
 8003184:	2300      	movs	r3, #0
 8003186:	723b      	strb	r3, [r7, #8]
	buffer[5] = PDM_Readings.Current_Buffer[6] & 0xff;
 8003188:	4b6b      	ldr	r3, [pc, #428]	; (8003338 <Save_PDM+0x230>)
 800318a:	8a1b      	ldrh	r3, [r3, #16]
 800318c:	b2db      	uxtb	r3, r3
 800318e:	727b      	strb	r3, [r7, #9]
	buffer[6] = PDM_Readings.Current_Buffer[7] << 8;
 8003190:	2300      	movs	r3, #0
 8003192:	72bb      	strb	r3, [r7, #10]
	buffer[7] = PDM_Readings.Current_Buffer[7] & 0xff;
 8003194:	4b68      	ldr	r3, [pc, #416]	; (8003338 <Save_PDM+0x230>)
 8003196:	8a5b      	ldrh	r3, [r3, #18]
 8003198:	b2db      	uxtb	r3, r3
 800319a:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 800319c:	7bf8      	ldrb	r0, [r7, #15]
 800319e:	1d3a      	adds	r2, r7, #4
 80031a0:	7bb9      	ldrb	r1, [r7, #14]
 80031a2:	4b66      	ldr	r3, [pc, #408]	; (800333c <Save_PDM+0x234>)
 80031a4:	f002 fbb0 	bl	8005908 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 2;
 80031a8:	2334      	movs	r3, #52	; 0x34
 80031aa:	73fb      	strb	r3, [r7, #15]
	length = 8;
 80031ac:	2308      	movs	r3, #8
 80031ae:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Current_Buffer[8] << 8;
 80031b0:	2300      	movs	r3, #0
 80031b2:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Current_Buffer[8] & 0xff;
 80031b4:	4b60      	ldr	r3, [pc, #384]	; (8003338 <Save_PDM+0x230>)
 80031b6:	8a9b      	ldrh	r3, [r3, #20]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Current_Buffer[9] << 8;
 80031bc:	2300      	movs	r3, #0
 80031be:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Current_Buffer[9] & 0xff;
 80031c0:	4b5d      	ldr	r3, [pc, #372]	; (8003338 <Save_PDM+0x230>)
 80031c2:	8adb      	ldrh	r3, [r3, #22]
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	71fb      	strb	r3, [r7, #7]
	buffer[4] = PDM_Readings.Current_Buffer[10] << 8;
 80031c8:	2300      	movs	r3, #0
 80031ca:	723b      	strb	r3, [r7, #8]
	buffer[5] = PDM_Readings.Current_Buffer[10] & 0xff;
 80031cc:	4b5a      	ldr	r3, [pc, #360]	; (8003338 <Save_PDM+0x230>)
 80031ce:	8b1b      	ldrh	r3, [r3, #24]
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	727b      	strb	r3, [r7, #9]
	buffer[6] = PDM_Readings.Current_Buffer[11] << 8;
 80031d4:	2300      	movs	r3, #0
 80031d6:	72bb      	strb	r3, [r7, #10]
	buffer[7] = PDM_Readings.Current_Buffer[11] & 0xff;
 80031d8:	4b57      	ldr	r3, [pc, #348]	; (8003338 <Save_PDM+0x230>)
 80031da:	8b5b      	ldrh	r3, [r3, #26]
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 80031e0:	7bf8      	ldrb	r0, [r7, #15]
 80031e2:	1d3a      	adds	r2, r7, #4
 80031e4:	7bb9      	ldrb	r1, [r7, #14]
 80031e6:	4b55      	ldr	r3, [pc, #340]	; (800333c <Save_PDM+0x234>)
 80031e8:	f002 fb8e 	bl	8005908 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 3;
 80031ec:	2335      	movs	r3, #53	; 0x35
 80031ee:	73fb      	strb	r3, [r7, #15]
	length = 8;
 80031f0:	2308      	movs	r3, #8
 80031f2:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Current_Buffer[12] << 8;
 80031f4:	2300      	movs	r3, #0
 80031f6:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Current_Buffer[12] & 0xff;
 80031f8:	4b4f      	ldr	r3, [pc, #316]	; (8003338 <Save_PDM+0x230>)
 80031fa:	8b9b      	ldrh	r3, [r3, #28]
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Current_Buffer[13] << 8;
 8003200:	2300      	movs	r3, #0
 8003202:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Current_Buffer[13] & 0xff;
 8003204:	4b4c      	ldr	r3, [pc, #304]	; (8003338 <Save_PDM+0x230>)
 8003206:	8bdb      	ldrh	r3, [r3, #30]
 8003208:	b2db      	uxtb	r3, r3
 800320a:	71fb      	strb	r3, [r7, #7]
	buffer[4] = PDM_Readings.Current_Buffer[14] << 8;
 800320c:	2300      	movs	r3, #0
 800320e:	723b      	strb	r3, [r7, #8]
	buffer[5] = PDM_Readings.Current_Buffer[14] & 0xff;
 8003210:	4b49      	ldr	r3, [pc, #292]	; (8003338 <Save_PDM+0x230>)
 8003212:	8c1b      	ldrh	r3, [r3, #32]
 8003214:	b2db      	uxtb	r3, r3
 8003216:	727b      	strb	r3, [r7, #9]
	buffer[6] = PDM_Readings.Current_Buffer[15] << 8;
 8003218:	2300      	movs	r3, #0
 800321a:	72bb      	strb	r3, [r7, #10]
	buffer[7] = PDM_Readings.Current_Buffer[15] & 0xff;
 800321c:	4b46      	ldr	r3, [pc, #280]	; (8003338 <Save_PDM+0x230>)
 800321e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003220:	b2db      	uxtb	r3, r3
 8003222:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 8003224:	7bf8      	ldrb	r0, [r7, #15]
 8003226:	1d3a      	adds	r2, r7, #4
 8003228:	7bb9      	ldrb	r1, [r7, #14]
 800322a:	4b44      	ldr	r3, [pc, #272]	; (800333c <Save_PDM+0x234>)
 800322c:	f002 fb6c 	bl	8005908 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 4;
 8003230:	2336      	movs	r3, #54	; 0x36
 8003232:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003234:	2308      	movs	r3, #8
 8003236:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Tempetature_Buffer[0] << 8;
 8003238:	2300      	movs	r3, #0
 800323a:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Tempetature_Buffer[0] & 0xff;
 800323c:	4b3e      	ldr	r3, [pc, #248]	; (8003338 <Save_PDM+0x230>)
 800323e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003240:	b2db      	uxtb	r3, r3
 8003242:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Tempetature_Buffer[1] << 8;
 8003244:	2300      	movs	r3, #0
 8003246:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Tempetature_Buffer[1] & 0xff;
 8003248:	4b3b      	ldr	r3, [pc, #236]	; (8003338 <Save_PDM+0x230>)
 800324a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800324c:	b2db      	uxtb	r3, r3
 800324e:	71fb      	strb	r3, [r7, #7]
	buffer[4] = PDM_Readings.Tempetature_Buffer[2] << 8;
 8003250:	2300      	movs	r3, #0
 8003252:	723b      	strb	r3, [r7, #8]
	buffer[5] = PDM_Readings.Tempetature_Buffer[2] & 0xff;
 8003254:	4b38      	ldr	r3, [pc, #224]	; (8003338 <Save_PDM+0x230>)
 8003256:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003258:	b2db      	uxtb	r3, r3
 800325a:	727b      	strb	r3, [r7, #9]
	buffer[6] = PDM_Readings.Tempetature_Buffer[3] << 8;
 800325c:	2300      	movs	r3, #0
 800325e:	72bb      	strb	r3, [r7, #10]
	buffer[7] = PDM_Readings.Tempetature_Buffer[3] & 0xff;
 8003260:	4b35      	ldr	r3, [pc, #212]	; (8003338 <Save_PDM+0x230>)
 8003262:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003264:	b2db      	uxtb	r3, r3
 8003266:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 8003268:	7bf8      	ldrb	r0, [r7, #15]
 800326a:	1d3a      	adds	r2, r7, #4
 800326c:	7bb9      	ldrb	r1, [r7, #14]
 800326e:	4b33      	ldr	r3, [pc, #204]	; (800333c <Save_PDM+0x234>)
 8003270:	f002 fb4a 	bl	8005908 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 5;
 8003274:	2337      	movs	r3, #55	; 0x37
 8003276:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003278:	2308      	movs	r3, #8
 800327a:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Tempetature_Buffer[4] << 8;
 800327c:	2300      	movs	r3, #0
 800327e:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Tempetature_Buffer[4] & 0xff;
 8003280:	4b2d      	ldr	r3, [pc, #180]	; (8003338 <Save_PDM+0x230>)
 8003282:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003284:	b2db      	uxtb	r3, r3
 8003286:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Tempetature_Buffer[5] << 8;
 8003288:	2300      	movs	r3, #0
 800328a:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Tempetature_Buffer[5] & 0xff;
 800328c:	4b2a      	ldr	r3, [pc, #168]	; (8003338 <Save_PDM+0x230>)
 800328e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003290:	b2db      	uxtb	r3, r3
 8003292:	71fb      	strb	r3, [r7, #7]
	buffer[4] = PDM_Readings.Tempetature_Buffer[6] << 8;
 8003294:	2300      	movs	r3, #0
 8003296:	723b      	strb	r3, [r7, #8]
	buffer[5] = PDM_Readings.Tempetature_Buffer[6] & 0xff;
 8003298:	4b27      	ldr	r3, [pc, #156]	; (8003338 <Save_PDM+0x230>)
 800329a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800329c:	b2db      	uxtb	r3, r3
 800329e:	727b      	strb	r3, [r7, #9]
	buffer[6] = PDM_Readings.Tempetature_Buffer[7] << 8;
 80032a0:	2300      	movs	r3, #0
 80032a2:	72bb      	strb	r3, [r7, #10]
	buffer[7] = PDM_Readings.Tempetature_Buffer[7] & 0xff;
 80032a4:	4b24      	ldr	r3, [pc, #144]	; (8003338 <Save_PDM+0x230>)
 80032a6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 80032ac:	7bf8      	ldrb	r0, [r7, #15]
 80032ae:	1d3a      	adds	r2, r7, #4
 80032b0:	7bb9      	ldrb	r1, [r7, #14]
 80032b2:	4b22      	ldr	r3, [pc, #136]	; (800333c <Save_PDM+0x234>)
 80032b4:	f002 fb28 	bl	8005908 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 6;
 80032b8:	2338      	movs	r3, #56	; 0x38
 80032ba:	73fb      	strb	r3, [r7, #15]
	length = 8;
 80032bc:	2308      	movs	r3, #8
 80032be:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Duty_Cycle_Buffer[0] << 8;
 80032c0:	2300      	movs	r3, #0
 80032c2:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Duty_Cycle_Buffer[0] & 0xff;
 80032c4:	4b1c      	ldr	r3, [pc, #112]	; (8003338 <Save_PDM+0x230>)
 80032c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Duty_Cycle_Buffer[1] << 8;
 80032cc:	2300      	movs	r3, #0
 80032ce:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Duty_Cycle_Buffer[1] & 0xff;
 80032d0:	4b19      	ldr	r3, [pc, #100]	; (8003338 <Save_PDM+0x230>)
 80032d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	71fb      	strb	r3, [r7, #7]
	buffer[4] = PDM_Readings.Duty_Cycle_Buffer[2] << 8;
 80032d8:	2300      	movs	r3, #0
 80032da:	723b      	strb	r3, [r7, #8]
	buffer[5] = PDM_Readings.Duty_Cycle_Buffer[2] & 0xff;
 80032dc:	4b16      	ldr	r3, [pc, #88]	; (8003338 <Save_PDM+0x230>)
 80032de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	727b      	strb	r3, [r7, #9]
	buffer[6] = PDM_Readings.Duty_Cycle_Buffer[3] << 8;
 80032e4:	2300      	movs	r3, #0
 80032e6:	72bb      	strb	r3, [r7, #10]
	buffer[7] = PDM_Readings.Duty_Cycle_Buffer[3] & 0xff;
 80032e8:	4b13      	ldr	r3, [pc, #76]	; (8003338 <Save_PDM+0x230>)
 80032ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 80032f0:	7bf8      	ldrb	r0, [r7, #15]
 80032f2:	1d3a      	adds	r2, r7, #4
 80032f4:	7bb9      	ldrb	r1, [r7, #14]
 80032f6:	4b11      	ldr	r3, [pc, #68]	; (800333c <Save_PDM+0x234>)
 80032f8:	f002 fb06 	bl	8005908 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 7;
 80032fc:	2339      	movs	r3, #57	; 0x39
 80032fe:	73fb      	strb	r3, [r7, #15]
	length = 4;
 8003300:	2304      	movs	r3, #4
 8003302:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Input_Voltage << 8;
 8003304:	2300      	movs	r3, #0
 8003306:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Input_Voltage & 0xff;
 8003308:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <Save_PDM+0x230>)
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	b2db      	uxtb	r3, r3
 800330e:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Output_Verify << 8;
 8003310:	2300      	movs	r3, #0
 8003312:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Output_Verify & 0xff;
 8003314:	4b08      	ldr	r3, [pc, #32]	; (8003338 <Save_PDM+0x230>)
 8003316:	885b      	ldrh	r3, [r3, #2]
 8003318:	b2db      	uxtb	r3, r3
 800331a:	71fb      	strb	r3, [r7, #7]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 800331c:	7bf8      	ldrb	r0, [r7, #15]
 800331e:	1d3a      	adds	r2, r7, #4
 8003320:	7bb9      	ldrb	r1, [r7, #14]
 8003322:	4b06      	ldr	r3, [pc, #24]	; (800333c <Save_PDM+0x234>)
 8003324:	f002 faf0 	bl	8005908 <Principal_Datalogger_Save_Buffer>
 8003328:	e000      	b.n	800332c <Save_PDM+0x224>
		return;
 800332a:	bf00      	nop
}
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	20001bd0 	.word	0x20001bd0
 8003338:	20001a14 	.word	0x20001a14
 800333c:	20001c84 	.word	0x20001c84

08003340 <Save_ECU>:

static void Save_ECU()
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
	uint8_t id = 0, length = 0, buffer[8];
 8003346:	2300      	movs	r3, #0
 8003348:	73fb      	strb	r3, [r7, #15]
 800334a:	2300      	movs	r3, #0
 800334c:	73bb      	strb	r3, [r7, #14]

	if(Flag_Datalogger == DL_Save)
 800334e:	4b70      	ldr	r3, [pc, #448]	; (8003510 <Save_ECU+0x1d0>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b01      	cmp	r3, #1
 8003354:	f000 80d7 	beq.w	8003506 <Save_ECU+0x1c6>
		return;

	id = ECU_FIRST_ID;
 8003358:	231a      	movs	r3, #26
 800335a:	73fb      	strb	r3, [r7, #15]
	length = 8;
 800335c:	2308      	movs	r3, #8
 800335e:	73bb      	strb	r3, [r7, #14]

	buffer[0] = ECU_Data.rpm >> 8;
 8003360:	4b6c      	ldr	r3, [pc, #432]	; (8003514 <Save_ECU+0x1d4>)
 8003362:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8003366:	121b      	asrs	r3, r3, #8
 8003368:	b21b      	sxth	r3, r3
 800336a:	b2db      	uxtb	r3, r3
 800336c:	713b      	strb	r3, [r7, #4]
	buffer[1] = ECU_Data.rpm & 0xff;
 800336e:	4b69      	ldr	r3, [pc, #420]	; (8003514 <Save_ECU+0x1d4>)
 8003370:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8003374:	b2db      	uxtb	r3, r3
 8003376:	717b      	strb	r3, [r7, #5]
	buffer[2] = ECU_Data.tps >> 8;
 8003378:	4b66      	ldr	r3, [pc, #408]	; (8003514 <Save_ECU+0x1d4>)
 800337a:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800337e:	121b      	asrs	r3, r3, #8
 8003380:	b21b      	sxth	r3, r3
 8003382:	b2db      	uxtb	r3, r3
 8003384:	71bb      	strb	r3, [r7, #6]
	buffer[3] = ECU_Data.tps & 0xff;
 8003386:	4b63      	ldr	r3, [pc, #396]	; (8003514 <Save_ECU+0x1d4>)
 8003388:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800338c:	b2db      	uxtb	r3, r3
 800338e:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ECU_Data.iat >> 8;
 8003390:	4b60      	ldr	r3, [pc, #384]	; (8003514 <Save_ECU+0x1d4>)
 8003392:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8003396:	121b      	asrs	r3, r3, #8
 8003398:	b21b      	sxth	r3, r3
 800339a:	b2db      	uxtb	r3, r3
 800339c:	723b      	strb	r3, [r7, #8]
	buffer[5] = ECU_Data.iat & 0xff;
 800339e:	4b5d      	ldr	r3, [pc, #372]	; (8003514 <Save_ECU+0x1d4>)
 80033a0:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	727b      	strb	r3, [r7, #9]
	buffer[6] = ECU_Data.ect >> 8;
 80033a8:	4b5a      	ldr	r3, [pc, #360]	; (8003514 <Save_ECU+0x1d4>)
 80033aa:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80033ae:	121b      	asrs	r3, r3, #8
 80033b0:	b21b      	sxth	r3, r3
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	72bb      	strb	r3, [r7, #10]
	buffer[7] = ECU_Data.ect & 0xff;
 80033b6:	4b57      	ldr	r3, [pc, #348]	; (8003514 <Save_ECU+0x1d4>)
 80033b8:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 80033c0:	7bf8      	ldrb	r0, [r7, #15]
 80033c2:	1d3a      	adds	r2, r7, #4
 80033c4:	7bb9      	ldrb	r1, [r7, #14]
 80033c6:	4b54      	ldr	r3, [pc, #336]	; (8003518 <Save_ECU+0x1d8>)
 80033c8:	f002 fa9e 	bl	8005908 <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 1;
 80033cc:	231b      	movs	r3, #27
 80033ce:	73fb      	strb	r3, [r7, #15]
	length = 8;
 80033d0:	2308      	movs	r3, #8
 80033d2:	73bb      	strb	r3, [r7, #14]

	buffer[0] = ECU_Data.map >> 8;
 80033d4:	4b4f      	ldr	r3, [pc, #316]	; (8003514 <Save_ECU+0x1d4>)
 80033d6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80033da:	121b      	asrs	r3, r3, #8
 80033dc:	b21b      	sxth	r3, r3
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	713b      	strb	r3, [r7, #4]
	buffer[1] = ECU_Data.map & 0xff;
 80033e2:	4b4c      	ldr	r3, [pc, #304]	; (8003514 <Save_ECU+0x1d4>)
 80033e4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	717b      	strb	r3, [r7, #5]
	buffer[2] = ECU_Data.fuel_pressure >> 8;
 80033ec:	4b49      	ldr	r3, [pc, #292]	; (8003514 <Save_ECU+0x1d4>)
 80033ee:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 80033f2:	121b      	asrs	r3, r3, #8
 80033f4:	b21b      	sxth	r3, r3
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	71bb      	strb	r3, [r7, #6]
	buffer[3] = ECU_Data.fuel_pressure & 0xff;
 80033fa:	4b46      	ldr	r3, [pc, #280]	; (8003514 <Save_ECU+0x1d4>)
 80033fc:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8003400:	b2db      	uxtb	r3, r3
 8003402:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ECU_Data.oil_pressure >> 8;
 8003404:	4b43      	ldr	r3, [pc, #268]	; (8003514 <Save_ECU+0x1d4>)
 8003406:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800340a:	121b      	asrs	r3, r3, #8
 800340c:	b21b      	sxth	r3, r3
 800340e:	b2db      	uxtb	r3, r3
 8003410:	723b      	strb	r3, [r7, #8]
	buffer[5] = ECU_Data.oil_pressure & 0xff;
 8003412:	4b40      	ldr	r3, [pc, #256]	; (8003514 <Save_ECU+0x1d4>)
 8003414:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8003418:	b2db      	uxtb	r3, r3
 800341a:	727b      	strb	r3, [r7, #9]
	buffer[6] = ECU_Data.coolant_pressure >> 8;
 800341c:	4b3d      	ldr	r3, [pc, #244]	; (8003514 <Save_ECU+0x1d4>)
 800341e:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8003422:	121b      	asrs	r3, r3, #8
 8003424:	b21b      	sxth	r3, r3
 8003426:	b2db      	uxtb	r3, r3
 8003428:	72bb      	strb	r3, [r7, #10]
	buffer[7] = ECU_Data.coolant_pressure & 0xff;
 800342a:	4b3a      	ldr	r3, [pc, #232]	; (8003514 <Save_ECU+0x1d4>)
 800342c:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8003430:	b2db      	uxtb	r3, r3
 8003432:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 8003434:	7bf8      	ldrb	r0, [r7, #15]
 8003436:	1d3a      	adds	r2, r7, #4
 8003438:	7bb9      	ldrb	r1, [r7, #14]
 800343a:	4b37      	ldr	r3, [pc, #220]	; (8003518 <Save_ECU+0x1d8>)
 800343c:	f002 fa64 	bl	8005908 <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 2;
 8003440:	231c      	movs	r3, #28
 8003442:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003444:	2308      	movs	r3, #8
 8003446:	73bb      	strb	r3, [r7, #14]

	buffer[0] = ECU_Data.lambda >> 8;
 8003448:	4b32      	ldr	r3, [pc, #200]	; (8003514 <Save_ECU+0x1d4>)
 800344a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800344e:	121b      	asrs	r3, r3, #8
 8003450:	b21b      	sxth	r3, r3
 8003452:	b2db      	uxtb	r3, r3
 8003454:	713b      	strb	r3, [r7, #4]
	buffer[1] = ECU_Data.lambda & 0xff;
 8003456:	4b2f      	ldr	r3, [pc, #188]	; (8003514 <Save_ECU+0x1d4>)
 8003458:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800345c:	b2db      	uxtb	r3, r3
 800345e:	717b      	strb	r3, [r7, #5]
	buffer[2] = ECU_Data.oil_temperature >> 8;
 8003460:	4b2c      	ldr	r3, [pc, #176]	; (8003514 <Save_ECU+0x1d4>)
 8003462:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8003466:	121b      	asrs	r3, r3, #8
 8003468:	b21b      	sxth	r3, r3
 800346a:	b2db      	uxtb	r3, r3
 800346c:	71bb      	strb	r3, [r7, #6]
	buffer[3] = ECU_Data.oil_temperature & 0xff;
 800346e:	4b29      	ldr	r3, [pc, #164]	; (8003514 <Save_ECU+0x1d4>)
 8003470:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8003474:	b2db      	uxtb	r3, r3
 8003476:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ECU_Data.wheel_speed_fl;
 8003478:	4b26      	ldr	r3, [pc, #152]	; (8003514 <Save_ECU+0x1d4>)
 800347a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800347e:	b2db      	uxtb	r3, r3
 8003480:	723b      	strb	r3, [r7, #8]
	buffer[5] = ECU_Data.wheel_speed_fr;
 8003482:	4b24      	ldr	r3, [pc, #144]	; (8003514 <Save_ECU+0x1d4>)
 8003484:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003488:	b2db      	uxtb	r3, r3
 800348a:	727b      	strb	r3, [r7, #9]
	buffer[6] = ECU_Data.wheel_speed_rl;
 800348c:	4b21      	ldr	r3, [pc, #132]	; (8003514 <Save_ECU+0x1d4>)
 800348e:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8003492:	b2db      	uxtb	r3, r3
 8003494:	72bb      	strb	r3, [r7, #10]
	buffer[7] = ECU_Data.wheel_speed_rr;
 8003496:	4b1f      	ldr	r3, [pc, #124]	; (8003514 <Save_ECU+0x1d4>)
 8003498:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 800349c:	b2db      	uxtb	r3, r3
 800349e:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 80034a0:	7bf8      	ldrb	r0, [r7, #15]
 80034a2:	1d3a      	adds	r2, r7, #4
 80034a4:	7bb9      	ldrb	r1, [r7, #14]
 80034a6:	4b1c      	ldr	r3, [pc, #112]	; (8003518 <Save_ECU+0x1d8>)
 80034a8:	f002 fa2e 	bl	8005908 <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 3;
 80034ac:	231d      	movs	r3, #29
 80034ae:	73fb      	strb	r3, [r7, #15]
	length = 6;
 80034b0:	2306      	movs	r3, #6
 80034b2:	73bb      	strb	r3, [r7, #14]

	buffer[0] = ECU_Data.battery_voltage >> 8;
 80034b4:	4b17      	ldr	r3, [pc, #92]	; (8003514 <Save_ECU+0x1d4>)
 80034b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80034ba:	121b      	asrs	r3, r3, #8
 80034bc:	b21b      	sxth	r3, r3
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	713b      	strb	r3, [r7, #4]
	buffer[1] = ECU_Data.battery_voltage & 0xff;
 80034c2:	4b14      	ldr	r3, [pc, #80]	; (8003514 <Save_ECU+0x1d4>)
 80034c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	717b      	strb	r3, [r7, #5]
	buffer[2] = ECU_Data.total_fuel_flow >> 8;
 80034cc:	4b11      	ldr	r3, [pc, #68]	; (8003514 <Save_ECU+0x1d4>)
 80034ce:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80034d2:	121b      	asrs	r3, r3, #8
 80034d4:	b21b      	sxth	r3, r3
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	71bb      	strb	r3, [r7, #6]
	buffer[3] = ECU_Data.total_fuel_flow & 0xff;
 80034da:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <Save_ECU+0x1d4>)
 80034dc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ECU_Data.gear & 0xff;
 80034e4:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <Save_ECU+0x1d4>)
 80034e6:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	723b      	strb	r3, [r7, #8]
	buffer[5] = ECU_Data.electro_fan & 0xff;
 80034ee:	4b09      	ldr	r3, [pc, #36]	; (8003514 <Save_ECU+0x1d4>)
 80034f0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	727b      	strb	r3, [r7, #9]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 80034f8:	7bf8      	ldrb	r0, [r7, #15]
 80034fa:	1d3a      	adds	r2, r7, #4
 80034fc:	7bb9      	ldrb	r1, [r7, #14]
 80034fe:	4b06      	ldr	r3, [pc, #24]	; (8003518 <Save_ECU+0x1d8>)
 8003500:	f002 fa02 	bl	8005908 <Principal_Datalogger_Save_Buffer>

	return;
 8003504:	e000      	b.n	8003508 <Save_ECU+0x1c8>
		return;
 8003506:	bf00      	nop
}
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	20001bd0 	.word	0x20001bd0
 8003514:	20002e24 	.word	0x20002e24
 8003518:	20001c84 	.word	0x20001c84

0800351c <Principal_CAN_Start>:

void Principal_CAN_Start(CAN_HandleTypeDef* hcan)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b08e      	sub	sp, #56	; 0x38
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filter_id = 0, mask_id = 0;
 8003524:	2300      	movs	r3, #0
 8003526:	637b      	str	r3, [r7, #52]	; 0x34
 8003528:	2300      	movs	r3, #0
 800352a:	633b      	str	r3, [r7, #48]	; 0x30

	filter_id = CAN_DAQ_FILTER;
 800352c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8003530:	637b      	str	r3, [r7, #52]	; 0x34
	mask_id = CAN_DAQ_MASK;
 8003532:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003536:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8003538:	2300      	movs	r3, #0
 800353a:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800353c:	2301      	movs	r3, #1
 800353e:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 8003540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003542:	0b5b      	lsrs	r3, r3, #13
 8003544:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 8003546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003548:	00db      	lsls	r3, r3, #3
 800354a:	b29b      	uxth	r3, r3
 800354c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 800354e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003550:	0b5b      	lsrs	r3, r3, #13
 8003552:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 8003554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	b29b      	uxth	r3, r3
 800355a:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800355c:	2300      	movs	r3, #0
 800355e:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterActivation = ENABLE;
 8003560:	2301      	movs	r3, #1
 8003562:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterBank = 0;
 8003564:	2300      	movs	r3, #0
 8003566:	61fb      	str	r3, [r7, #28]
	sFilterConfig.SlaveStartFilterBank = 14;
 8003568:	230e      	movs	r3, #14
 800356a:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 800356c:	f107 0308 	add.w	r3, r7, #8
 8003570:	4619      	mov	r1, r3
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f003 fdca 	bl	800710c <HAL_CAN_ConfigFilter>

	filter_id = CAN_CFG_FILTER;
 8003578:	2300      	movs	r3, #0
 800357a:	637b      	str	r3, [r7, #52]	; 0x34
	mask_id = CAN_CFG_MASK;
 800357c:	2300      	movs	r3, #0
 800357e:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8003580:	2300      	movs	r3, #0
 8003582:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8003584:	2301      	movs	r3, #1
 8003586:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 8003588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800358a:	0b5b      	lsrs	r3, r3, #13
 800358c:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 800358e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003590:	00db      	lsls	r3, r3, #3
 8003592:	b29b      	uxth	r3, r3
 8003594:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 8003596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003598:	0b5b      	lsrs	r3, r3, #13
 800359a:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 800359c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80035a4:	2300      	movs	r3, #0
 80035a6:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterActivation = ENABLE;
 80035a8:	2301      	movs	r3, #1
 80035aa:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterBank = 1;
 80035ac:	2301      	movs	r3, #1
 80035ae:	61fb      	str	r3, [r7, #28]
	sFilterConfig.SlaveStartFilterBank = 15;
 80035b0:	230f      	movs	r3, #15
 80035b2:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 80035b4:	f107 0308 	add.w	r3, r7, #8
 80035b8:	4619      	mov	r1, r3
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f003 fda6 	bl	800710c <HAL_CAN_ConfigFilter>

	FT_CAN_FilterConfig(hcan, FT600, 2, CAN_RX_FIFO0);
 80035c0:	2300      	movs	r3, #0
 80035c2:	2202      	movs	r2, #2
 80035c4:	f240 2181 	movw	r1, #641	; 0x281
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7fc ffed 	bl	80005a8 <FT_CAN_FilterConfig>
	PDM_CAN_FilterConfig(hcan, 3, CAN_RX_FIFO0);
 80035ce:	2200      	movs	r2, #0
 80035d0:	2103      	movs	r1, #3
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7fe fd22 	bl	800201c <PDM_CAN_FilterConfig>

	HAL_CAN_Start(hcan);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f003 fe77 	bl	80072cc <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80035de:	2102      	movs	r1, #2
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f004 f8d9 	bl	8007798 <HAL_CAN_ActivateNotification>
}
 80035e6:	bf00      	nop
 80035e8:	3738      	adds	r7, #56	; 0x38
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
	...

080035f0 <Principal_Transmit_Msg>:

void Principal_Transmit_Msg(CAN_HandleTypeDef* hcan, uint8_t msg_number)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	460b      	mov	r3, r1
 80035fa:	70fb      	strb	r3, [r7, #3]
	switch(msg_number)
 80035fc:	78fb      	ldrb	r3, [r7, #3]
 80035fe:	2b07      	cmp	r3, #7
 8003600:	d830      	bhi.n	8003664 <Principal_Transmit_Msg+0x74>
 8003602:	a201      	add	r2, pc, #4	; (adr r2, 8003608 <Principal_Transmit_Msg+0x18>)
 8003604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003608:	08003629 	.word	0x08003629
 800360c:	08003631 	.word	0x08003631
 8003610:	08003639 	.word	0x08003639
 8003614:	08003649 	.word	0x08003649
 8003618:	08003641 	.word	0x08003641
 800361c:	08003659 	.word	0x08003659
 8003620:	0800365f 	.word	0x0800365f
 8003624:	08003651 	.word	0x08003651
	{
		case Analog_1_4:
			Tx_Analog_1_4(hcan);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f7fe fdeb 	bl	8002204 <Tx_Analog_1_4>
			break;
 800362e:	e01a      	b.n	8003666 <Principal_Transmit_Msg+0x76>

		case Analog_5_8:
			Tx_Analog_5_8(hcan);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7fe fe85 	bl	8002340 <Tx_Analog_5_8>
			break;
 8003636:	e016      	b.n	8003666 <Principal_Transmit_Msg+0x76>

		case Analog_9_12:
			Tx_Analog_9_12(hcan);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7fe ff1f 	bl	800247c <Tx_Analog_9_12>
			break;
 800363e:	e012      	b.n	8003666 <Principal_Transmit_Msg+0x76>

		case Verify_Msg:
			Tx_Verify(hcan);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f7ff f85b 	bl	80026fc <Tx_Verify>
			break;
 8003646:	e00e      	b.n	8003666 <Principal_Transmit_Msg+0x76>

		case RTC_Msg:
			Tx_RTC(hcan);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f7fe ffb5 	bl	80025b8 <Tx_RTC>
			break;
 800364e:	e00a      	b.n	8003666 <Principal_Transmit_Msg+0x76>

		case Beacon_Msg:
			Tx_Beacon(hcan);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7ff fd27 	bl	80030a4 <Tx_Beacon>
			break;
 8003656:	e006      	b.n	8003666 <Principal_Transmit_Msg+0x76>

		case ECU_Save:
			Save_ECU();
 8003658:	f7ff fe72 	bl	8003340 <Save_ECU>
			break;
 800365c:	e003      	b.n	8003666 <Principal_Transmit_Msg+0x76>

		case PDM_Save:
			Save_PDM();
 800365e:	f7ff fd53 	bl	8003108 <Save_PDM>
			break;
 8003662:	e000      	b.n	8003666 <Principal_Transmit_Msg+0x76>

		default:
			return;
 8003664:	bf00      	nop
	}
}
 8003666:	3708      	adds	r7, #8
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <Load_EEPROM>:
 */

#include "principal.h"

static HAL_StatusTypeDef Load_EEPROM(I2C_HandleTypeDef* hi2c)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b08a      	sub	sp, #40	; 0x28
 8003670:	af02      	add	r7, sp, #8
 8003672:	6078      	str	r0, [r7, #4]
	uint8_t buffer[EEPROM_BUFFER_SIZE];
	HAL_StatusTypeDef retVal;

	retVal = HAL_I2C_Master_Transmit(hi2c, 0xA0, 0x00, 1, 5);
 8003674:	2305      	movs	r3, #5
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	2301      	movs	r3, #1
 800367a:	2200      	movs	r2, #0
 800367c:	21a0      	movs	r1, #160	; 0xa0
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f005 facc 	bl	8008c1c <HAL_I2C_Master_Transmit>
 8003684:	4603      	mov	r3, r0
 8003686:	77fb      	strb	r3, [r7, #31]

	if(retVal == HAL_OK)
 8003688:	7ffb      	ldrb	r3, [r7, #31]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d128      	bne.n	80036e0 <Load_EEPROM+0x74>
		retVal = HAL_I2C_Master_Receive(hi2c, 0xA1, buffer, EEPROM_BUFFER_SIZE, 5);
 800368e:	f107 020c 	add.w	r2, r7, #12
 8003692:	2305      	movs	r3, #5
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	2310      	movs	r3, #16
 8003698:	21a1      	movs	r1, #161	; 0xa1
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f005 fbbc 	bl	8008e18 <HAL_I2C_Master_Receive>
 80036a0:	4603      	mov	r3, r0
 80036a2:	77fb      	strb	r3, [r7, #31]
	else
		return retVal;

	__LOAD_FREQ(buffer[0], Per_Msg[Analog_1_4]);
 80036a4:	7b3b      	ldrb	r3, [r7, #12]
 80036a6:	3b01      	subs	r3, #1
 80036a8:	2b0a      	cmp	r3, #10
 80036aa:	d849      	bhi.n	8003740 <Load_EEPROM+0xd4>
 80036ac:	a201      	add	r2, pc, #4	; (adr r2, 80036b4 <Load_EEPROM+0x48>)
 80036ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b2:	bf00      	nop
 80036b4:	080036e5 	.word	0x080036e5
 80036b8:	080036ef 	.word	0x080036ef
 80036bc:	080036f9 	.word	0x080036f9
 80036c0:	08003701 	.word	0x08003701
 80036c4:	08003709 	.word	0x08003709
 80036c8:	08003711 	.word	0x08003711
 80036cc:	08003719 	.word	0x08003719
 80036d0:	08003721 	.word	0x08003721
 80036d4:	08003729 	.word	0x08003729
 80036d8:	08003731 	.word	0x08003731
 80036dc:	08003739 	.word	0x08003739
		return retVal;
 80036e0:	7ffb      	ldrb	r3, [r7, #31]
 80036e2:	e377      	b.n	8003dd4 <Load_EEPROM+0x768>
	__LOAD_FREQ(buffer[0], Per_Msg[Analog_1_4]);
 80036e4:	4ba8      	ldr	r3, [pc, #672]	; (8003988 <Load_EEPROM+0x31c>)
 80036e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036ea:	801a      	strh	r2, [r3, #0]
 80036ec:	e02b      	b.n	8003746 <Load_EEPROM+0xda>
 80036ee:	4ba6      	ldr	r3, [pc, #664]	; (8003988 <Load_EEPROM+0x31c>)
 80036f0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80036f4:	801a      	strh	r2, [r3, #0]
 80036f6:	e026      	b.n	8003746 <Load_EEPROM+0xda>
 80036f8:	4ba3      	ldr	r3, [pc, #652]	; (8003988 <Load_EEPROM+0x31c>)
 80036fa:	22c8      	movs	r2, #200	; 0xc8
 80036fc:	801a      	strh	r2, [r3, #0]
 80036fe:	e022      	b.n	8003746 <Load_EEPROM+0xda>
 8003700:	4ba1      	ldr	r3, [pc, #644]	; (8003988 <Load_EEPROM+0x31c>)
 8003702:	2264      	movs	r2, #100	; 0x64
 8003704:	801a      	strh	r2, [r3, #0]
 8003706:	e01e      	b.n	8003746 <Load_EEPROM+0xda>
 8003708:	4b9f      	ldr	r3, [pc, #636]	; (8003988 <Load_EEPROM+0x31c>)
 800370a:	2232      	movs	r2, #50	; 0x32
 800370c:	801a      	strh	r2, [r3, #0]
 800370e:	e01a      	b.n	8003746 <Load_EEPROM+0xda>
 8003710:	4b9d      	ldr	r3, [pc, #628]	; (8003988 <Load_EEPROM+0x31c>)
 8003712:	2228      	movs	r2, #40	; 0x28
 8003714:	801a      	strh	r2, [r3, #0]
 8003716:	e016      	b.n	8003746 <Load_EEPROM+0xda>
 8003718:	4b9b      	ldr	r3, [pc, #620]	; (8003988 <Load_EEPROM+0x31c>)
 800371a:	2214      	movs	r2, #20
 800371c:	801a      	strh	r2, [r3, #0]
 800371e:	e012      	b.n	8003746 <Load_EEPROM+0xda>
 8003720:	4b99      	ldr	r3, [pc, #612]	; (8003988 <Load_EEPROM+0x31c>)
 8003722:	220a      	movs	r2, #10
 8003724:	801a      	strh	r2, [r3, #0]
 8003726:	e00e      	b.n	8003746 <Load_EEPROM+0xda>
 8003728:	4b97      	ldr	r3, [pc, #604]	; (8003988 <Load_EEPROM+0x31c>)
 800372a:	2205      	movs	r2, #5
 800372c:	801a      	strh	r2, [r3, #0]
 800372e:	e00a      	b.n	8003746 <Load_EEPROM+0xda>
 8003730:	4b95      	ldr	r3, [pc, #596]	; (8003988 <Load_EEPROM+0x31c>)
 8003732:	2203      	movs	r2, #3
 8003734:	801a      	strh	r2, [r3, #0]
 8003736:	e006      	b.n	8003746 <Load_EEPROM+0xda>
 8003738:	4b93      	ldr	r3, [pc, #588]	; (8003988 <Load_EEPROM+0x31c>)
 800373a:	2202      	movs	r2, #2
 800373c:	801a      	strh	r2, [r3, #0]
 800373e:	e002      	b.n	8003746 <Load_EEPROM+0xda>
 8003740:	4b91      	ldr	r3, [pc, #580]	; (8003988 <Load_EEPROM+0x31c>)
 8003742:	2200      	movs	r2, #0
 8003744:	801a      	strh	r2, [r3, #0]
 8003746:	bf00      	nop
	__LOAD_FREQ(buffer[1], Per_Msg[Analog_5_8]);
 8003748:	7b7b      	ldrb	r3, [r7, #13]
 800374a:	3b01      	subs	r3, #1
 800374c:	2b0a      	cmp	r3, #10
 800374e:	d847      	bhi.n	80037e0 <Load_EEPROM+0x174>
 8003750:	a201      	add	r2, pc, #4	; (adr r2, 8003758 <Load_EEPROM+0xec>)
 8003752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003756:	bf00      	nop
 8003758:	08003785 	.word	0x08003785
 800375c:	0800378f 	.word	0x0800378f
 8003760:	08003799 	.word	0x08003799
 8003764:	080037a1 	.word	0x080037a1
 8003768:	080037a9 	.word	0x080037a9
 800376c:	080037b1 	.word	0x080037b1
 8003770:	080037b9 	.word	0x080037b9
 8003774:	080037c1 	.word	0x080037c1
 8003778:	080037c9 	.word	0x080037c9
 800377c:	080037d1 	.word	0x080037d1
 8003780:	080037d9 	.word	0x080037d9
 8003784:	4b80      	ldr	r3, [pc, #512]	; (8003988 <Load_EEPROM+0x31c>)
 8003786:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800378a:	805a      	strh	r2, [r3, #2]
 800378c:	e02b      	b.n	80037e6 <Load_EEPROM+0x17a>
 800378e:	4b7e      	ldr	r3, [pc, #504]	; (8003988 <Load_EEPROM+0x31c>)
 8003790:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003794:	805a      	strh	r2, [r3, #2]
 8003796:	e026      	b.n	80037e6 <Load_EEPROM+0x17a>
 8003798:	4b7b      	ldr	r3, [pc, #492]	; (8003988 <Load_EEPROM+0x31c>)
 800379a:	22c8      	movs	r2, #200	; 0xc8
 800379c:	805a      	strh	r2, [r3, #2]
 800379e:	e022      	b.n	80037e6 <Load_EEPROM+0x17a>
 80037a0:	4b79      	ldr	r3, [pc, #484]	; (8003988 <Load_EEPROM+0x31c>)
 80037a2:	2264      	movs	r2, #100	; 0x64
 80037a4:	805a      	strh	r2, [r3, #2]
 80037a6:	e01e      	b.n	80037e6 <Load_EEPROM+0x17a>
 80037a8:	4b77      	ldr	r3, [pc, #476]	; (8003988 <Load_EEPROM+0x31c>)
 80037aa:	2232      	movs	r2, #50	; 0x32
 80037ac:	805a      	strh	r2, [r3, #2]
 80037ae:	e01a      	b.n	80037e6 <Load_EEPROM+0x17a>
 80037b0:	4b75      	ldr	r3, [pc, #468]	; (8003988 <Load_EEPROM+0x31c>)
 80037b2:	2228      	movs	r2, #40	; 0x28
 80037b4:	805a      	strh	r2, [r3, #2]
 80037b6:	e016      	b.n	80037e6 <Load_EEPROM+0x17a>
 80037b8:	4b73      	ldr	r3, [pc, #460]	; (8003988 <Load_EEPROM+0x31c>)
 80037ba:	2214      	movs	r2, #20
 80037bc:	805a      	strh	r2, [r3, #2]
 80037be:	e012      	b.n	80037e6 <Load_EEPROM+0x17a>
 80037c0:	4b71      	ldr	r3, [pc, #452]	; (8003988 <Load_EEPROM+0x31c>)
 80037c2:	220a      	movs	r2, #10
 80037c4:	805a      	strh	r2, [r3, #2]
 80037c6:	e00e      	b.n	80037e6 <Load_EEPROM+0x17a>
 80037c8:	4b6f      	ldr	r3, [pc, #444]	; (8003988 <Load_EEPROM+0x31c>)
 80037ca:	2205      	movs	r2, #5
 80037cc:	805a      	strh	r2, [r3, #2]
 80037ce:	e00a      	b.n	80037e6 <Load_EEPROM+0x17a>
 80037d0:	4b6d      	ldr	r3, [pc, #436]	; (8003988 <Load_EEPROM+0x31c>)
 80037d2:	2203      	movs	r2, #3
 80037d4:	805a      	strh	r2, [r3, #2]
 80037d6:	e006      	b.n	80037e6 <Load_EEPROM+0x17a>
 80037d8:	4b6b      	ldr	r3, [pc, #428]	; (8003988 <Load_EEPROM+0x31c>)
 80037da:	2202      	movs	r2, #2
 80037dc:	805a      	strh	r2, [r3, #2]
 80037de:	e002      	b.n	80037e6 <Load_EEPROM+0x17a>
 80037e0:	4b69      	ldr	r3, [pc, #420]	; (8003988 <Load_EEPROM+0x31c>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	805a      	strh	r2, [r3, #2]
 80037e6:	bf00      	nop
	__LOAD_FREQ(buffer[2], Per_Msg[Analog_9_12]);
 80037e8:	7bbb      	ldrb	r3, [r7, #14]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	2b0a      	cmp	r3, #10
 80037ee:	d847      	bhi.n	8003880 <Load_EEPROM+0x214>
 80037f0:	a201      	add	r2, pc, #4	; (adr r2, 80037f8 <Load_EEPROM+0x18c>)
 80037f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f6:	bf00      	nop
 80037f8:	08003825 	.word	0x08003825
 80037fc:	0800382f 	.word	0x0800382f
 8003800:	08003839 	.word	0x08003839
 8003804:	08003841 	.word	0x08003841
 8003808:	08003849 	.word	0x08003849
 800380c:	08003851 	.word	0x08003851
 8003810:	08003859 	.word	0x08003859
 8003814:	08003861 	.word	0x08003861
 8003818:	08003869 	.word	0x08003869
 800381c:	08003871 	.word	0x08003871
 8003820:	08003879 	.word	0x08003879
 8003824:	4b58      	ldr	r3, [pc, #352]	; (8003988 <Load_EEPROM+0x31c>)
 8003826:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800382a:	809a      	strh	r2, [r3, #4]
 800382c:	e02b      	b.n	8003886 <Load_EEPROM+0x21a>
 800382e:	4b56      	ldr	r3, [pc, #344]	; (8003988 <Load_EEPROM+0x31c>)
 8003830:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003834:	809a      	strh	r2, [r3, #4]
 8003836:	e026      	b.n	8003886 <Load_EEPROM+0x21a>
 8003838:	4b53      	ldr	r3, [pc, #332]	; (8003988 <Load_EEPROM+0x31c>)
 800383a:	22c8      	movs	r2, #200	; 0xc8
 800383c:	809a      	strh	r2, [r3, #4]
 800383e:	e022      	b.n	8003886 <Load_EEPROM+0x21a>
 8003840:	4b51      	ldr	r3, [pc, #324]	; (8003988 <Load_EEPROM+0x31c>)
 8003842:	2264      	movs	r2, #100	; 0x64
 8003844:	809a      	strh	r2, [r3, #4]
 8003846:	e01e      	b.n	8003886 <Load_EEPROM+0x21a>
 8003848:	4b4f      	ldr	r3, [pc, #316]	; (8003988 <Load_EEPROM+0x31c>)
 800384a:	2232      	movs	r2, #50	; 0x32
 800384c:	809a      	strh	r2, [r3, #4]
 800384e:	e01a      	b.n	8003886 <Load_EEPROM+0x21a>
 8003850:	4b4d      	ldr	r3, [pc, #308]	; (8003988 <Load_EEPROM+0x31c>)
 8003852:	2228      	movs	r2, #40	; 0x28
 8003854:	809a      	strh	r2, [r3, #4]
 8003856:	e016      	b.n	8003886 <Load_EEPROM+0x21a>
 8003858:	4b4b      	ldr	r3, [pc, #300]	; (8003988 <Load_EEPROM+0x31c>)
 800385a:	2214      	movs	r2, #20
 800385c:	809a      	strh	r2, [r3, #4]
 800385e:	e012      	b.n	8003886 <Load_EEPROM+0x21a>
 8003860:	4b49      	ldr	r3, [pc, #292]	; (8003988 <Load_EEPROM+0x31c>)
 8003862:	220a      	movs	r2, #10
 8003864:	809a      	strh	r2, [r3, #4]
 8003866:	e00e      	b.n	8003886 <Load_EEPROM+0x21a>
 8003868:	4b47      	ldr	r3, [pc, #284]	; (8003988 <Load_EEPROM+0x31c>)
 800386a:	2205      	movs	r2, #5
 800386c:	809a      	strh	r2, [r3, #4]
 800386e:	e00a      	b.n	8003886 <Load_EEPROM+0x21a>
 8003870:	4b45      	ldr	r3, [pc, #276]	; (8003988 <Load_EEPROM+0x31c>)
 8003872:	2203      	movs	r2, #3
 8003874:	809a      	strh	r2, [r3, #4]
 8003876:	e006      	b.n	8003886 <Load_EEPROM+0x21a>
 8003878:	4b43      	ldr	r3, [pc, #268]	; (8003988 <Load_EEPROM+0x31c>)
 800387a:	2202      	movs	r2, #2
 800387c:	809a      	strh	r2, [r3, #4]
 800387e:	e002      	b.n	8003886 <Load_EEPROM+0x21a>
 8003880:	4b41      	ldr	r3, [pc, #260]	; (8003988 <Load_EEPROM+0x31c>)
 8003882:	2200      	movs	r2, #0
 8003884:	809a      	strh	r2, [r3, #4]
 8003886:	bf00      	nop
	__LOAD_FREQ(buffer[3], Per_Msg[RTC_Msg]);
 8003888:	7bfb      	ldrb	r3, [r7, #15]
 800388a:	3b01      	subs	r3, #1
 800388c:	2b0a      	cmp	r3, #10
 800388e:	d847      	bhi.n	8003920 <Load_EEPROM+0x2b4>
 8003890:	a201      	add	r2, pc, #4	; (adr r2, 8003898 <Load_EEPROM+0x22c>)
 8003892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003896:	bf00      	nop
 8003898:	080038c5 	.word	0x080038c5
 800389c:	080038cf 	.word	0x080038cf
 80038a0:	080038d9 	.word	0x080038d9
 80038a4:	080038e1 	.word	0x080038e1
 80038a8:	080038e9 	.word	0x080038e9
 80038ac:	080038f1 	.word	0x080038f1
 80038b0:	080038f9 	.word	0x080038f9
 80038b4:	08003901 	.word	0x08003901
 80038b8:	08003909 	.word	0x08003909
 80038bc:	08003911 	.word	0x08003911
 80038c0:	08003919 	.word	0x08003919
 80038c4:	4b30      	ldr	r3, [pc, #192]	; (8003988 <Load_EEPROM+0x31c>)
 80038c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038ca:	80da      	strh	r2, [r3, #6]
 80038cc:	e02b      	b.n	8003926 <Load_EEPROM+0x2ba>
 80038ce:	4b2e      	ldr	r3, [pc, #184]	; (8003988 <Load_EEPROM+0x31c>)
 80038d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80038d4:	80da      	strh	r2, [r3, #6]
 80038d6:	e026      	b.n	8003926 <Load_EEPROM+0x2ba>
 80038d8:	4b2b      	ldr	r3, [pc, #172]	; (8003988 <Load_EEPROM+0x31c>)
 80038da:	22c8      	movs	r2, #200	; 0xc8
 80038dc:	80da      	strh	r2, [r3, #6]
 80038de:	e022      	b.n	8003926 <Load_EEPROM+0x2ba>
 80038e0:	4b29      	ldr	r3, [pc, #164]	; (8003988 <Load_EEPROM+0x31c>)
 80038e2:	2264      	movs	r2, #100	; 0x64
 80038e4:	80da      	strh	r2, [r3, #6]
 80038e6:	e01e      	b.n	8003926 <Load_EEPROM+0x2ba>
 80038e8:	4b27      	ldr	r3, [pc, #156]	; (8003988 <Load_EEPROM+0x31c>)
 80038ea:	2232      	movs	r2, #50	; 0x32
 80038ec:	80da      	strh	r2, [r3, #6]
 80038ee:	e01a      	b.n	8003926 <Load_EEPROM+0x2ba>
 80038f0:	4b25      	ldr	r3, [pc, #148]	; (8003988 <Load_EEPROM+0x31c>)
 80038f2:	2228      	movs	r2, #40	; 0x28
 80038f4:	80da      	strh	r2, [r3, #6]
 80038f6:	e016      	b.n	8003926 <Load_EEPROM+0x2ba>
 80038f8:	4b23      	ldr	r3, [pc, #140]	; (8003988 <Load_EEPROM+0x31c>)
 80038fa:	2214      	movs	r2, #20
 80038fc:	80da      	strh	r2, [r3, #6]
 80038fe:	e012      	b.n	8003926 <Load_EEPROM+0x2ba>
 8003900:	4b21      	ldr	r3, [pc, #132]	; (8003988 <Load_EEPROM+0x31c>)
 8003902:	220a      	movs	r2, #10
 8003904:	80da      	strh	r2, [r3, #6]
 8003906:	e00e      	b.n	8003926 <Load_EEPROM+0x2ba>
 8003908:	4b1f      	ldr	r3, [pc, #124]	; (8003988 <Load_EEPROM+0x31c>)
 800390a:	2205      	movs	r2, #5
 800390c:	80da      	strh	r2, [r3, #6]
 800390e:	e00a      	b.n	8003926 <Load_EEPROM+0x2ba>
 8003910:	4b1d      	ldr	r3, [pc, #116]	; (8003988 <Load_EEPROM+0x31c>)
 8003912:	2203      	movs	r2, #3
 8003914:	80da      	strh	r2, [r3, #6]
 8003916:	e006      	b.n	8003926 <Load_EEPROM+0x2ba>
 8003918:	4b1b      	ldr	r3, [pc, #108]	; (8003988 <Load_EEPROM+0x31c>)
 800391a:	2202      	movs	r2, #2
 800391c:	80da      	strh	r2, [r3, #6]
 800391e:	e002      	b.n	8003926 <Load_EEPROM+0x2ba>
 8003920:	4b19      	ldr	r3, [pc, #100]	; (8003988 <Load_EEPROM+0x31c>)
 8003922:	2200      	movs	r2, #0
 8003924:	80da      	strh	r2, [r3, #6]
 8003926:	bf00      	nop
	__LOAD_FREQ(buffer[4], Per_Msg[Verify_Msg]);
 8003928:	7c3b      	ldrb	r3, [r7, #16]
 800392a:	3b01      	subs	r3, #1
 800392c:	2b0a      	cmp	r3, #10
 800392e:	d849      	bhi.n	80039c4 <Load_EEPROM+0x358>
 8003930:	a201      	add	r2, pc, #4	; (adr r2, 8003938 <Load_EEPROM+0x2cc>)
 8003932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003936:	bf00      	nop
 8003938:	08003965 	.word	0x08003965
 800393c:	0800396f 	.word	0x0800396f
 8003940:	08003979 	.word	0x08003979
 8003944:	08003981 	.word	0x08003981
 8003948:	0800398d 	.word	0x0800398d
 800394c:	08003995 	.word	0x08003995
 8003950:	0800399d 	.word	0x0800399d
 8003954:	080039a5 	.word	0x080039a5
 8003958:	080039ad 	.word	0x080039ad
 800395c:	080039b5 	.word	0x080039b5
 8003960:	080039bd 	.word	0x080039bd
 8003964:	4b08      	ldr	r3, [pc, #32]	; (8003988 <Load_EEPROM+0x31c>)
 8003966:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800396a:	811a      	strh	r2, [r3, #8]
 800396c:	e02d      	b.n	80039ca <Load_EEPROM+0x35e>
 800396e:	4b06      	ldr	r3, [pc, #24]	; (8003988 <Load_EEPROM+0x31c>)
 8003970:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003974:	811a      	strh	r2, [r3, #8]
 8003976:	e028      	b.n	80039ca <Load_EEPROM+0x35e>
 8003978:	4b03      	ldr	r3, [pc, #12]	; (8003988 <Load_EEPROM+0x31c>)
 800397a:	22c8      	movs	r2, #200	; 0xc8
 800397c:	811a      	strh	r2, [r3, #8]
 800397e:	e024      	b.n	80039ca <Load_EEPROM+0x35e>
 8003980:	4b01      	ldr	r3, [pc, #4]	; (8003988 <Load_EEPROM+0x31c>)
 8003982:	2264      	movs	r2, #100	; 0x64
 8003984:	811a      	strh	r2, [r3, #8]
 8003986:	e020      	b.n	80039ca <Load_EEPROM+0x35e>
 8003988:	20002e7c 	.word	0x20002e7c
 800398c:	4ba7      	ldr	r3, [pc, #668]	; (8003c2c <Load_EEPROM+0x5c0>)
 800398e:	2232      	movs	r2, #50	; 0x32
 8003990:	811a      	strh	r2, [r3, #8]
 8003992:	e01a      	b.n	80039ca <Load_EEPROM+0x35e>
 8003994:	4ba5      	ldr	r3, [pc, #660]	; (8003c2c <Load_EEPROM+0x5c0>)
 8003996:	2228      	movs	r2, #40	; 0x28
 8003998:	811a      	strh	r2, [r3, #8]
 800399a:	e016      	b.n	80039ca <Load_EEPROM+0x35e>
 800399c:	4ba3      	ldr	r3, [pc, #652]	; (8003c2c <Load_EEPROM+0x5c0>)
 800399e:	2214      	movs	r2, #20
 80039a0:	811a      	strh	r2, [r3, #8]
 80039a2:	e012      	b.n	80039ca <Load_EEPROM+0x35e>
 80039a4:	4ba1      	ldr	r3, [pc, #644]	; (8003c2c <Load_EEPROM+0x5c0>)
 80039a6:	220a      	movs	r2, #10
 80039a8:	811a      	strh	r2, [r3, #8]
 80039aa:	e00e      	b.n	80039ca <Load_EEPROM+0x35e>
 80039ac:	4b9f      	ldr	r3, [pc, #636]	; (8003c2c <Load_EEPROM+0x5c0>)
 80039ae:	2205      	movs	r2, #5
 80039b0:	811a      	strh	r2, [r3, #8]
 80039b2:	e00a      	b.n	80039ca <Load_EEPROM+0x35e>
 80039b4:	4b9d      	ldr	r3, [pc, #628]	; (8003c2c <Load_EEPROM+0x5c0>)
 80039b6:	2203      	movs	r2, #3
 80039b8:	811a      	strh	r2, [r3, #8]
 80039ba:	e006      	b.n	80039ca <Load_EEPROM+0x35e>
 80039bc:	4b9b      	ldr	r3, [pc, #620]	; (8003c2c <Load_EEPROM+0x5c0>)
 80039be:	2202      	movs	r2, #2
 80039c0:	811a      	strh	r2, [r3, #8]
 80039c2:	e002      	b.n	80039ca <Load_EEPROM+0x35e>
 80039c4:	4b99      	ldr	r3, [pc, #612]	; (8003c2c <Load_EEPROM+0x5c0>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	811a      	strh	r2, [r3, #8]
 80039ca:	bf00      	nop
	__LOAD_FREQ(buffer[5], Per_Msg[ECU_Save]);
 80039cc:	7c7b      	ldrb	r3, [r7, #17]
 80039ce:	3b01      	subs	r3, #1
 80039d0:	2b0a      	cmp	r3, #10
 80039d2:	d847      	bhi.n	8003a64 <Load_EEPROM+0x3f8>
 80039d4:	a201      	add	r2, pc, #4	; (adr r2, 80039dc <Load_EEPROM+0x370>)
 80039d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039da:	bf00      	nop
 80039dc:	08003a09 	.word	0x08003a09
 80039e0:	08003a13 	.word	0x08003a13
 80039e4:	08003a1d 	.word	0x08003a1d
 80039e8:	08003a25 	.word	0x08003a25
 80039ec:	08003a2d 	.word	0x08003a2d
 80039f0:	08003a35 	.word	0x08003a35
 80039f4:	08003a3d 	.word	0x08003a3d
 80039f8:	08003a45 	.word	0x08003a45
 80039fc:	08003a4d 	.word	0x08003a4d
 8003a00:	08003a55 	.word	0x08003a55
 8003a04:	08003a5d 	.word	0x08003a5d
 8003a08:	4b88      	ldr	r3, [pc, #544]	; (8003c2c <Load_EEPROM+0x5c0>)
 8003a0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a0e:	815a      	strh	r2, [r3, #10]
 8003a10:	e02b      	b.n	8003a6a <Load_EEPROM+0x3fe>
 8003a12:	4b86      	ldr	r3, [pc, #536]	; (8003c2c <Load_EEPROM+0x5c0>)
 8003a14:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003a18:	815a      	strh	r2, [r3, #10]
 8003a1a:	e026      	b.n	8003a6a <Load_EEPROM+0x3fe>
 8003a1c:	4b83      	ldr	r3, [pc, #524]	; (8003c2c <Load_EEPROM+0x5c0>)
 8003a1e:	22c8      	movs	r2, #200	; 0xc8
 8003a20:	815a      	strh	r2, [r3, #10]
 8003a22:	e022      	b.n	8003a6a <Load_EEPROM+0x3fe>
 8003a24:	4b81      	ldr	r3, [pc, #516]	; (8003c2c <Load_EEPROM+0x5c0>)
 8003a26:	2264      	movs	r2, #100	; 0x64
 8003a28:	815a      	strh	r2, [r3, #10]
 8003a2a:	e01e      	b.n	8003a6a <Load_EEPROM+0x3fe>
 8003a2c:	4b7f      	ldr	r3, [pc, #508]	; (8003c2c <Load_EEPROM+0x5c0>)
 8003a2e:	2232      	movs	r2, #50	; 0x32
 8003a30:	815a      	strh	r2, [r3, #10]
 8003a32:	e01a      	b.n	8003a6a <Load_EEPROM+0x3fe>
 8003a34:	4b7d      	ldr	r3, [pc, #500]	; (8003c2c <Load_EEPROM+0x5c0>)
 8003a36:	2228      	movs	r2, #40	; 0x28
 8003a38:	815a      	strh	r2, [r3, #10]
 8003a3a:	e016      	b.n	8003a6a <Load_EEPROM+0x3fe>
 8003a3c:	4b7b      	ldr	r3, [pc, #492]	; (8003c2c <Load_EEPROM+0x5c0>)
 8003a3e:	2214      	movs	r2, #20
 8003a40:	815a      	strh	r2, [r3, #10]
 8003a42:	e012      	b.n	8003a6a <Load_EEPROM+0x3fe>
 8003a44:	4b79      	ldr	r3, [pc, #484]	; (8003c2c <Load_EEPROM+0x5c0>)
 8003a46:	220a      	movs	r2, #10
 8003a48:	815a      	strh	r2, [r3, #10]
 8003a4a:	e00e      	b.n	8003a6a <Load_EEPROM+0x3fe>
 8003a4c:	4b77      	ldr	r3, [pc, #476]	; (8003c2c <Load_EEPROM+0x5c0>)
 8003a4e:	2205      	movs	r2, #5
 8003a50:	815a      	strh	r2, [r3, #10]
 8003a52:	e00a      	b.n	8003a6a <Load_EEPROM+0x3fe>
 8003a54:	4b75      	ldr	r3, [pc, #468]	; (8003c2c <Load_EEPROM+0x5c0>)
 8003a56:	2203      	movs	r2, #3
 8003a58:	815a      	strh	r2, [r3, #10]
 8003a5a:	e006      	b.n	8003a6a <Load_EEPROM+0x3fe>
 8003a5c:	4b73      	ldr	r3, [pc, #460]	; (8003c2c <Load_EEPROM+0x5c0>)
 8003a5e:	2202      	movs	r2, #2
 8003a60:	815a      	strh	r2, [r3, #10]
 8003a62:	e002      	b.n	8003a6a <Load_EEPROM+0x3fe>
 8003a64:	4b71      	ldr	r3, [pc, #452]	; (8003c2c <Load_EEPROM+0x5c0>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	815a      	strh	r2, [r3, #10]
 8003a6a:	bf00      	nop
	__LOAD_FREQ(buffer[6], Per_Msg[PDM_Save]);
 8003a6c:	7cbb      	ldrb	r3, [r7, #18]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	2b0a      	cmp	r3, #10
 8003a72:	d847      	bhi.n	8003b04 <Load_EEPROM+0x498>
 8003a74:	a201      	add	r2, pc, #4	; (adr r2, 8003a7c <Load_EEPROM+0x410>)
 8003a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7a:	bf00      	nop
 8003a7c:	08003aa9 	.word	0x08003aa9
 8003a80:	08003ab3 	.word	0x08003ab3
 8003a84:	08003abd 	.word	0x08003abd
 8003a88:	08003ac5 	.word	0x08003ac5
 8003a8c:	08003acd 	.word	0x08003acd
 8003a90:	08003ad5 	.word	0x08003ad5
 8003a94:	08003add 	.word	0x08003add
 8003a98:	08003ae5 	.word	0x08003ae5
 8003a9c:	08003aed 	.word	0x08003aed
 8003aa0:	08003af5 	.word	0x08003af5
 8003aa4:	08003afd 	.word	0x08003afd
 8003aa8:	4b60      	ldr	r3, [pc, #384]	; (8003c2c <Load_EEPROM+0x5c0>)
 8003aaa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003aae:	819a      	strh	r2, [r3, #12]
 8003ab0:	e02b      	b.n	8003b0a <Load_EEPROM+0x49e>
 8003ab2:	4b5e      	ldr	r3, [pc, #376]	; (8003c2c <Load_EEPROM+0x5c0>)
 8003ab4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003ab8:	819a      	strh	r2, [r3, #12]
 8003aba:	e026      	b.n	8003b0a <Load_EEPROM+0x49e>
 8003abc:	4b5b      	ldr	r3, [pc, #364]	; (8003c2c <Load_EEPROM+0x5c0>)
 8003abe:	22c8      	movs	r2, #200	; 0xc8
 8003ac0:	819a      	strh	r2, [r3, #12]
 8003ac2:	e022      	b.n	8003b0a <Load_EEPROM+0x49e>
 8003ac4:	4b59      	ldr	r3, [pc, #356]	; (8003c2c <Load_EEPROM+0x5c0>)
 8003ac6:	2264      	movs	r2, #100	; 0x64
 8003ac8:	819a      	strh	r2, [r3, #12]
 8003aca:	e01e      	b.n	8003b0a <Load_EEPROM+0x49e>
 8003acc:	4b57      	ldr	r3, [pc, #348]	; (8003c2c <Load_EEPROM+0x5c0>)
 8003ace:	2232      	movs	r2, #50	; 0x32
 8003ad0:	819a      	strh	r2, [r3, #12]
 8003ad2:	e01a      	b.n	8003b0a <Load_EEPROM+0x49e>
 8003ad4:	4b55      	ldr	r3, [pc, #340]	; (8003c2c <Load_EEPROM+0x5c0>)
 8003ad6:	2228      	movs	r2, #40	; 0x28
 8003ad8:	819a      	strh	r2, [r3, #12]
 8003ada:	e016      	b.n	8003b0a <Load_EEPROM+0x49e>
 8003adc:	4b53      	ldr	r3, [pc, #332]	; (8003c2c <Load_EEPROM+0x5c0>)
 8003ade:	2214      	movs	r2, #20
 8003ae0:	819a      	strh	r2, [r3, #12]
 8003ae2:	e012      	b.n	8003b0a <Load_EEPROM+0x49e>
 8003ae4:	4b51      	ldr	r3, [pc, #324]	; (8003c2c <Load_EEPROM+0x5c0>)
 8003ae6:	220a      	movs	r2, #10
 8003ae8:	819a      	strh	r2, [r3, #12]
 8003aea:	e00e      	b.n	8003b0a <Load_EEPROM+0x49e>
 8003aec:	4b4f      	ldr	r3, [pc, #316]	; (8003c2c <Load_EEPROM+0x5c0>)
 8003aee:	2205      	movs	r2, #5
 8003af0:	819a      	strh	r2, [r3, #12]
 8003af2:	e00a      	b.n	8003b0a <Load_EEPROM+0x49e>
 8003af4:	4b4d      	ldr	r3, [pc, #308]	; (8003c2c <Load_EEPROM+0x5c0>)
 8003af6:	2203      	movs	r2, #3
 8003af8:	819a      	strh	r2, [r3, #12]
 8003afa:	e006      	b.n	8003b0a <Load_EEPROM+0x49e>
 8003afc:	4b4b      	ldr	r3, [pc, #300]	; (8003c2c <Load_EEPROM+0x5c0>)
 8003afe:	2202      	movs	r2, #2
 8003b00:	819a      	strh	r2, [r3, #12]
 8003b02:	e002      	b.n	8003b0a <Load_EEPROM+0x49e>
 8003b04:	4b49      	ldr	r3, [pc, #292]	; (8003c2c <Load_EEPROM+0x5c0>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	819a      	strh	r2, [r3, #12]
 8003b0a:	bf00      	nop

	__LOAD_FREQ(buffer[7], Per_CAN[Analog_1_4]);
 8003b0c:	7cfb      	ldrb	r3, [r7, #19]
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	2b0a      	cmp	r3, #10
 8003b12:	d847      	bhi.n	8003ba4 <Load_EEPROM+0x538>
 8003b14:	a201      	add	r2, pc, #4	; (adr r2, 8003b1c <Load_EEPROM+0x4b0>)
 8003b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1a:	bf00      	nop
 8003b1c:	08003b49 	.word	0x08003b49
 8003b20:	08003b53 	.word	0x08003b53
 8003b24:	08003b5d 	.word	0x08003b5d
 8003b28:	08003b65 	.word	0x08003b65
 8003b2c:	08003b6d 	.word	0x08003b6d
 8003b30:	08003b75 	.word	0x08003b75
 8003b34:	08003b7d 	.word	0x08003b7d
 8003b38:	08003b85 	.word	0x08003b85
 8003b3c:	08003b8d 	.word	0x08003b8d
 8003b40:	08003b95 	.word	0x08003b95
 8003b44:	08003b9d 	.word	0x08003b9d
 8003b48:	4b39      	ldr	r3, [pc, #228]	; (8003c30 <Load_EEPROM+0x5c4>)
 8003b4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b4e:	801a      	strh	r2, [r3, #0]
 8003b50:	e02b      	b.n	8003baa <Load_EEPROM+0x53e>
 8003b52:	4b37      	ldr	r3, [pc, #220]	; (8003c30 <Load_EEPROM+0x5c4>)
 8003b54:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003b58:	801a      	strh	r2, [r3, #0]
 8003b5a:	e026      	b.n	8003baa <Load_EEPROM+0x53e>
 8003b5c:	4b34      	ldr	r3, [pc, #208]	; (8003c30 <Load_EEPROM+0x5c4>)
 8003b5e:	22c8      	movs	r2, #200	; 0xc8
 8003b60:	801a      	strh	r2, [r3, #0]
 8003b62:	e022      	b.n	8003baa <Load_EEPROM+0x53e>
 8003b64:	4b32      	ldr	r3, [pc, #200]	; (8003c30 <Load_EEPROM+0x5c4>)
 8003b66:	2264      	movs	r2, #100	; 0x64
 8003b68:	801a      	strh	r2, [r3, #0]
 8003b6a:	e01e      	b.n	8003baa <Load_EEPROM+0x53e>
 8003b6c:	4b30      	ldr	r3, [pc, #192]	; (8003c30 <Load_EEPROM+0x5c4>)
 8003b6e:	2232      	movs	r2, #50	; 0x32
 8003b70:	801a      	strh	r2, [r3, #0]
 8003b72:	e01a      	b.n	8003baa <Load_EEPROM+0x53e>
 8003b74:	4b2e      	ldr	r3, [pc, #184]	; (8003c30 <Load_EEPROM+0x5c4>)
 8003b76:	2228      	movs	r2, #40	; 0x28
 8003b78:	801a      	strh	r2, [r3, #0]
 8003b7a:	e016      	b.n	8003baa <Load_EEPROM+0x53e>
 8003b7c:	4b2c      	ldr	r3, [pc, #176]	; (8003c30 <Load_EEPROM+0x5c4>)
 8003b7e:	2214      	movs	r2, #20
 8003b80:	801a      	strh	r2, [r3, #0]
 8003b82:	e012      	b.n	8003baa <Load_EEPROM+0x53e>
 8003b84:	4b2a      	ldr	r3, [pc, #168]	; (8003c30 <Load_EEPROM+0x5c4>)
 8003b86:	220a      	movs	r2, #10
 8003b88:	801a      	strh	r2, [r3, #0]
 8003b8a:	e00e      	b.n	8003baa <Load_EEPROM+0x53e>
 8003b8c:	4b28      	ldr	r3, [pc, #160]	; (8003c30 <Load_EEPROM+0x5c4>)
 8003b8e:	2205      	movs	r2, #5
 8003b90:	801a      	strh	r2, [r3, #0]
 8003b92:	e00a      	b.n	8003baa <Load_EEPROM+0x53e>
 8003b94:	4b26      	ldr	r3, [pc, #152]	; (8003c30 <Load_EEPROM+0x5c4>)
 8003b96:	2203      	movs	r2, #3
 8003b98:	801a      	strh	r2, [r3, #0]
 8003b9a:	e006      	b.n	8003baa <Load_EEPROM+0x53e>
 8003b9c:	4b24      	ldr	r3, [pc, #144]	; (8003c30 <Load_EEPROM+0x5c4>)
 8003b9e:	2202      	movs	r2, #2
 8003ba0:	801a      	strh	r2, [r3, #0]
 8003ba2:	e002      	b.n	8003baa <Load_EEPROM+0x53e>
 8003ba4:	4b22      	ldr	r3, [pc, #136]	; (8003c30 <Load_EEPROM+0x5c4>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	801a      	strh	r2, [r3, #0]
 8003baa:	bf00      	nop
	__LOAD_FREQ(buffer[8], Per_CAN[Analog_5_8]);
 8003bac:	7d3b      	ldrb	r3, [r7, #20]
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	2b0a      	cmp	r3, #10
 8003bb2:	d84b      	bhi.n	8003c4c <Load_EEPROM+0x5e0>
 8003bb4:	a201      	add	r2, pc, #4	; (adr r2, 8003bbc <Load_EEPROM+0x550>)
 8003bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bba:	bf00      	nop
 8003bbc:	08003be9 	.word	0x08003be9
 8003bc0:	08003bf3 	.word	0x08003bf3
 8003bc4:	08003bfd 	.word	0x08003bfd
 8003bc8:	08003c05 	.word	0x08003c05
 8003bcc:	08003c0d 	.word	0x08003c0d
 8003bd0:	08003c15 	.word	0x08003c15
 8003bd4:	08003c1d 	.word	0x08003c1d
 8003bd8:	08003c25 	.word	0x08003c25
 8003bdc:	08003c35 	.word	0x08003c35
 8003be0:	08003c3d 	.word	0x08003c3d
 8003be4:	08003c45 	.word	0x08003c45
 8003be8:	4b11      	ldr	r3, [pc, #68]	; (8003c30 <Load_EEPROM+0x5c4>)
 8003bea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003bee:	805a      	strh	r2, [r3, #2]
 8003bf0:	e02f      	b.n	8003c52 <Load_EEPROM+0x5e6>
 8003bf2:	4b0f      	ldr	r3, [pc, #60]	; (8003c30 <Load_EEPROM+0x5c4>)
 8003bf4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003bf8:	805a      	strh	r2, [r3, #2]
 8003bfa:	e02a      	b.n	8003c52 <Load_EEPROM+0x5e6>
 8003bfc:	4b0c      	ldr	r3, [pc, #48]	; (8003c30 <Load_EEPROM+0x5c4>)
 8003bfe:	22c8      	movs	r2, #200	; 0xc8
 8003c00:	805a      	strh	r2, [r3, #2]
 8003c02:	e026      	b.n	8003c52 <Load_EEPROM+0x5e6>
 8003c04:	4b0a      	ldr	r3, [pc, #40]	; (8003c30 <Load_EEPROM+0x5c4>)
 8003c06:	2264      	movs	r2, #100	; 0x64
 8003c08:	805a      	strh	r2, [r3, #2]
 8003c0a:	e022      	b.n	8003c52 <Load_EEPROM+0x5e6>
 8003c0c:	4b08      	ldr	r3, [pc, #32]	; (8003c30 <Load_EEPROM+0x5c4>)
 8003c0e:	2232      	movs	r2, #50	; 0x32
 8003c10:	805a      	strh	r2, [r3, #2]
 8003c12:	e01e      	b.n	8003c52 <Load_EEPROM+0x5e6>
 8003c14:	4b06      	ldr	r3, [pc, #24]	; (8003c30 <Load_EEPROM+0x5c4>)
 8003c16:	2228      	movs	r2, #40	; 0x28
 8003c18:	805a      	strh	r2, [r3, #2]
 8003c1a:	e01a      	b.n	8003c52 <Load_EEPROM+0x5e6>
 8003c1c:	4b04      	ldr	r3, [pc, #16]	; (8003c30 <Load_EEPROM+0x5c4>)
 8003c1e:	2214      	movs	r2, #20
 8003c20:	805a      	strh	r2, [r3, #2]
 8003c22:	e016      	b.n	8003c52 <Load_EEPROM+0x5e6>
 8003c24:	4b02      	ldr	r3, [pc, #8]	; (8003c30 <Load_EEPROM+0x5c4>)
 8003c26:	220a      	movs	r2, #10
 8003c28:	805a      	strh	r2, [r3, #2]
 8003c2a:	e012      	b.n	8003c52 <Load_EEPROM+0x5e6>
 8003c2c:	20002e7c 	.word	0x20002e7c
 8003c30:	200006fc 	.word	0x200006fc
 8003c34:	4b69      	ldr	r3, [pc, #420]	; (8003ddc <Load_EEPROM+0x770>)
 8003c36:	2205      	movs	r2, #5
 8003c38:	805a      	strh	r2, [r3, #2]
 8003c3a:	e00a      	b.n	8003c52 <Load_EEPROM+0x5e6>
 8003c3c:	4b67      	ldr	r3, [pc, #412]	; (8003ddc <Load_EEPROM+0x770>)
 8003c3e:	2203      	movs	r2, #3
 8003c40:	805a      	strh	r2, [r3, #2]
 8003c42:	e006      	b.n	8003c52 <Load_EEPROM+0x5e6>
 8003c44:	4b65      	ldr	r3, [pc, #404]	; (8003ddc <Load_EEPROM+0x770>)
 8003c46:	2202      	movs	r2, #2
 8003c48:	805a      	strh	r2, [r3, #2]
 8003c4a:	e002      	b.n	8003c52 <Load_EEPROM+0x5e6>
 8003c4c:	4b63      	ldr	r3, [pc, #396]	; (8003ddc <Load_EEPROM+0x770>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	805a      	strh	r2, [r3, #2]
 8003c52:	bf00      	nop
	__LOAD_FREQ(buffer[9], Per_CAN[Analog_9_12]);
 8003c54:	7d7b      	ldrb	r3, [r7, #21]
 8003c56:	3b01      	subs	r3, #1
 8003c58:	2b0a      	cmp	r3, #10
 8003c5a:	d847      	bhi.n	8003cec <Load_EEPROM+0x680>
 8003c5c:	a201      	add	r2, pc, #4	; (adr r2, 8003c64 <Load_EEPROM+0x5f8>)
 8003c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c62:	bf00      	nop
 8003c64:	08003c91 	.word	0x08003c91
 8003c68:	08003c9b 	.word	0x08003c9b
 8003c6c:	08003ca5 	.word	0x08003ca5
 8003c70:	08003cad 	.word	0x08003cad
 8003c74:	08003cb5 	.word	0x08003cb5
 8003c78:	08003cbd 	.word	0x08003cbd
 8003c7c:	08003cc5 	.word	0x08003cc5
 8003c80:	08003ccd 	.word	0x08003ccd
 8003c84:	08003cd5 	.word	0x08003cd5
 8003c88:	08003cdd 	.word	0x08003cdd
 8003c8c:	08003ce5 	.word	0x08003ce5
 8003c90:	4b52      	ldr	r3, [pc, #328]	; (8003ddc <Load_EEPROM+0x770>)
 8003c92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c96:	809a      	strh	r2, [r3, #4]
 8003c98:	e02b      	b.n	8003cf2 <Load_EEPROM+0x686>
 8003c9a:	4b50      	ldr	r3, [pc, #320]	; (8003ddc <Load_EEPROM+0x770>)
 8003c9c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003ca0:	809a      	strh	r2, [r3, #4]
 8003ca2:	e026      	b.n	8003cf2 <Load_EEPROM+0x686>
 8003ca4:	4b4d      	ldr	r3, [pc, #308]	; (8003ddc <Load_EEPROM+0x770>)
 8003ca6:	22c8      	movs	r2, #200	; 0xc8
 8003ca8:	809a      	strh	r2, [r3, #4]
 8003caa:	e022      	b.n	8003cf2 <Load_EEPROM+0x686>
 8003cac:	4b4b      	ldr	r3, [pc, #300]	; (8003ddc <Load_EEPROM+0x770>)
 8003cae:	2264      	movs	r2, #100	; 0x64
 8003cb0:	809a      	strh	r2, [r3, #4]
 8003cb2:	e01e      	b.n	8003cf2 <Load_EEPROM+0x686>
 8003cb4:	4b49      	ldr	r3, [pc, #292]	; (8003ddc <Load_EEPROM+0x770>)
 8003cb6:	2232      	movs	r2, #50	; 0x32
 8003cb8:	809a      	strh	r2, [r3, #4]
 8003cba:	e01a      	b.n	8003cf2 <Load_EEPROM+0x686>
 8003cbc:	4b47      	ldr	r3, [pc, #284]	; (8003ddc <Load_EEPROM+0x770>)
 8003cbe:	2228      	movs	r2, #40	; 0x28
 8003cc0:	809a      	strh	r2, [r3, #4]
 8003cc2:	e016      	b.n	8003cf2 <Load_EEPROM+0x686>
 8003cc4:	4b45      	ldr	r3, [pc, #276]	; (8003ddc <Load_EEPROM+0x770>)
 8003cc6:	2214      	movs	r2, #20
 8003cc8:	809a      	strh	r2, [r3, #4]
 8003cca:	e012      	b.n	8003cf2 <Load_EEPROM+0x686>
 8003ccc:	4b43      	ldr	r3, [pc, #268]	; (8003ddc <Load_EEPROM+0x770>)
 8003cce:	220a      	movs	r2, #10
 8003cd0:	809a      	strh	r2, [r3, #4]
 8003cd2:	e00e      	b.n	8003cf2 <Load_EEPROM+0x686>
 8003cd4:	4b41      	ldr	r3, [pc, #260]	; (8003ddc <Load_EEPROM+0x770>)
 8003cd6:	2205      	movs	r2, #5
 8003cd8:	809a      	strh	r2, [r3, #4]
 8003cda:	e00a      	b.n	8003cf2 <Load_EEPROM+0x686>
 8003cdc:	4b3f      	ldr	r3, [pc, #252]	; (8003ddc <Load_EEPROM+0x770>)
 8003cde:	2203      	movs	r2, #3
 8003ce0:	809a      	strh	r2, [r3, #4]
 8003ce2:	e006      	b.n	8003cf2 <Load_EEPROM+0x686>
 8003ce4:	4b3d      	ldr	r3, [pc, #244]	; (8003ddc <Load_EEPROM+0x770>)
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	809a      	strh	r2, [r3, #4]
 8003cea:	e002      	b.n	8003cf2 <Load_EEPROM+0x686>
 8003cec:	4b3b      	ldr	r3, [pc, #236]	; (8003ddc <Load_EEPROM+0x770>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	809a      	strh	r2, [r3, #4]
 8003cf2:	bf00      	nop
	__LOAD_FREQ(buffer[10], Per_CAN[RTC_Msg]);
 8003cf4:	7dbb      	ldrb	r3, [r7, #22]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	2b0a      	cmp	r3, #10
 8003cfa:	d847      	bhi.n	8003d8c <Load_EEPROM+0x720>
 8003cfc:	a201      	add	r2, pc, #4	; (adr r2, 8003d04 <Load_EEPROM+0x698>)
 8003cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d02:	bf00      	nop
 8003d04:	08003d31 	.word	0x08003d31
 8003d08:	08003d3b 	.word	0x08003d3b
 8003d0c:	08003d45 	.word	0x08003d45
 8003d10:	08003d4d 	.word	0x08003d4d
 8003d14:	08003d55 	.word	0x08003d55
 8003d18:	08003d5d 	.word	0x08003d5d
 8003d1c:	08003d65 	.word	0x08003d65
 8003d20:	08003d6d 	.word	0x08003d6d
 8003d24:	08003d75 	.word	0x08003d75
 8003d28:	08003d7d 	.word	0x08003d7d
 8003d2c:	08003d85 	.word	0x08003d85
 8003d30:	4b2a      	ldr	r3, [pc, #168]	; (8003ddc <Load_EEPROM+0x770>)
 8003d32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d36:	80da      	strh	r2, [r3, #6]
 8003d38:	e02b      	b.n	8003d92 <Load_EEPROM+0x726>
 8003d3a:	4b28      	ldr	r3, [pc, #160]	; (8003ddc <Load_EEPROM+0x770>)
 8003d3c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003d40:	80da      	strh	r2, [r3, #6]
 8003d42:	e026      	b.n	8003d92 <Load_EEPROM+0x726>
 8003d44:	4b25      	ldr	r3, [pc, #148]	; (8003ddc <Load_EEPROM+0x770>)
 8003d46:	22c8      	movs	r2, #200	; 0xc8
 8003d48:	80da      	strh	r2, [r3, #6]
 8003d4a:	e022      	b.n	8003d92 <Load_EEPROM+0x726>
 8003d4c:	4b23      	ldr	r3, [pc, #140]	; (8003ddc <Load_EEPROM+0x770>)
 8003d4e:	2264      	movs	r2, #100	; 0x64
 8003d50:	80da      	strh	r2, [r3, #6]
 8003d52:	e01e      	b.n	8003d92 <Load_EEPROM+0x726>
 8003d54:	4b21      	ldr	r3, [pc, #132]	; (8003ddc <Load_EEPROM+0x770>)
 8003d56:	2232      	movs	r2, #50	; 0x32
 8003d58:	80da      	strh	r2, [r3, #6]
 8003d5a:	e01a      	b.n	8003d92 <Load_EEPROM+0x726>
 8003d5c:	4b1f      	ldr	r3, [pc, #124]	; (8003ddc <Load_EEPROM+0x770>)
 8003d5e:	2228      	movs	r2, #40	; 0x28
 8003d60:	80da      	strh	r2, [r3, #6]
 8003d62:	e016      	b.n	8003d92 <Load_EEPROM+0x726>
 8003d64:	4b1d      	ldr	r3, [pc, #116]	; (8003ddc <Load_EEPROM+0x770>)
 8003d66:	2214      	movs	r2, #20
 8003d68:	80da      	strh	r2, [r3, #6]
 8003d6a:	e012      	b.n	8003d92 <Load_EEPROM+0x726>
 8003d6c:	4b1b      	ldr	r3, [pc, #108]	; (8003ddc <Load_EEPROM+0x770>)
 8003d6e:	220a      	movs	r2, #10
 8003d70:	80da      	strh	r2, [r3, #6]
 8003d72:	e00e      	b.n	8003d92 <Load_EEPROM+0x726>
 8003d74:	4b19      	ldr	r3, [pc, #100]	; (8003ddc <Load_EEPROM+0x770>)
 8003d76:	2205      	movs	r2, #5
 8003d78:	80da      	strh	r2, [r3, #6]
 8003d7a:	e00a      	b.n	8003d92 <Load_EEPROM+0x726>
 8003d7c:	4b17      	ldr	r3, [pc, #92]	; (8003ddc <Load_EEPROM+0x770>)
 8003d7e:	2203      	movs	r2, #3
 8003d80:	80da      	strh	r2, [r3, #6]
 8003d82:	e006      	b.n	8003d92 <Load_EEPROM+0x726>
 8003d84:	4b15      	ldr	r3, [pc, #84]	; (8003ddc <Load_EEPROM+0x770>)
 8003d86:	2202      	movs	r2, #2
 8003d88:	80da      	strh	r2, [r3, #6]
 8003d8a:	e002      	b.n	8003d92 <Load_EEPROM+0x726>
 8003d8c:	4b13      	ldr	r3, [pc, #76]	; (8003ddc <Load_EEPROM+0x770>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	80da      	strh	r2, [r3, #6]
 8003d92:	bf00      	nop

	Input_Config = buffer[11];
 8003d94:	7dfa      	ldrb	r2, [r7, #23]
 8003d96:	4b12      	ldr	r3, [pc, #72]	; (8003de0 <Load_EEPROM+0x774>)
 8003d98:	701a      	strb	r2, [r3, #0]
	Threshold_RPM	 = buffer[12] << 8;
 8003d9a:	7e3b      	ldrb	r3, [r7, #24]
 8003d9c:	021b      	lsls	r3, r3, #8
 8003d9e:	b21a      	sxth	r2, r3
 8003da0:	4b10      	ldr	r3, [pc, #64]	; (8003de4 <Load_EEPROM+0x778>)
 8003da2:	801a      	strh	r2, [r3, #0]
	Threshold_RPM	|= buffer[13] & 0xff;
 8003da4:	7e7b      	ldrb	r3, [r7, #25]
 8003da6:	b21a      	sxth	r2, r3
 8003da8:	4b0e      	ldr	r3, [pc, #56]	; (8003de4 <Load_EEPROM+0x778>)
 8003daa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	b21a      	sxth	r2, r3
 8003db2:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <Load_EEPROM+0x778>)
 8003db4:	801a      	strh	r2, [r3, #0]
	Threshold_Speed	 = buffer[14] << 8;
 8003db6:	7ebb      	ldrb	r3, [r7, #26]
 8003db8:	021b      	lsls	r3, r3, #8
 8003dba:	b21a      	sxth	r2, r3
 8003dbc:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <Load_EEPROM+0x77c>)
 8003dbe:	801a      	strh	r2, [r3, #0]
	Threshold_Speed |= buffer[15] & 0xff;
 8003dc0:	7efb      	ldrb	r3, [r7, #27]
 8003dc2:	b21a      	sxth	r2, r3
 8003dc4:	4b08      	ldr	r3, [pc, #32]	; (8003de8 <Load_EEPROM+0x77c>)
 8003dc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	b21a      	sxth	r2, r3
 8003dce:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <Load_EEPROM+0x77c>)
 8003dd0:	801a      	strh	r2, [r3, #0]

	return retVal;
 8003dd2:	7ffb      	ldrb	r3, [r7, #31]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3720      	adds	r7, #32
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	200006fc 	.word	0x200006fc
 8003de0:	200006f8 	.word	0x200006f8
 8003de4:	20001c5c 	.word	0x20001c5c
 8003de8:	20001a60 	.word	0x20001a60

08003dec <Save_EEPROM>:

static HAL_StatusTypeDef Save_EEPROM(I2C_HandleTypeDef* hi2c)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b088      	sub	sp, #32
 8003df0:	af02      	add	r7, sp, #8
 8003df2:	6078      	str	r0, [r7, #4]
	uint8_t buffer[EEPROM_BUFFER_SIZE];

	__SAVE_FREQ(buffer[0], Per_Msg[Analog_1_4]);
 8003df4:	4ba9      	ldr	r3, [pc, #676]	; (800409c <Save_EEPROM+0x2b0>)
 8003df6:	881b      	ldrh	r3, [r3, #0]
 8003df8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dfc:	f000 8081 	beq.w	8003f02 <Save_EEPROM+0x116>
 8003e00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e04:	f300 809e 	bgt.w	8003f44 <Save_EEPROM+0x158>
 8003e08:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003e0c:	d07c      	beq.n	8003f08 <Save_EEPROM+0x11c>
 8003e0e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003e12:	f300 8097 	bgt.w	8003f44 <Save_EEPROM+0x158>
 8003e16:	2bc8      	cmp	r3, #200	; 0xc8
 8003e18:	d079      	beq.n	8003f0e <Save_EEPROM+0x122>
 8003e1a:	2bc8      	cmp	r3, #200	; 0xc8
 8003e1c:	f300 8092 	bgt.w	8003f44 <Save_EEPROM+0x158>
 8003e20:	2b32      	cmp	r3, #50	; 0x32
 8003e22:	dc6b      	bgt.n	8003efc <Save_EEPROM+0x110>
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	f2c0 808d 	blt.w	8003f44 <Save_EEPROM+0x158>
 8003e2a:	3b02      	subs	r3, #2
 8003e2c:	2b30      	cmp	r3, #48	; 0x30
 8003e2e:	f200 8089 	bhi.w	8003f44 <Save_EEPROM+0x158>
 8003e32:	a201      	add	r2, pc, #4	; (adr r2, 8003e38 <Save_EEPROM+0x4c>)
 8003e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e38:	08003f3f 	.word	0x08003f3f
 8003e3c:	08003f39 	.word	0x08003f39
 8003e40:	08003f45 	.word	0x08003f45
 8003e44:	08003f33 	.word	0x08003f33
 8003e48:	08003f45 	.word	0x08003f45
 8003e4c:	08003f45 	.word	0x08003f45
 8003e50:	08003f45 	.word	0x08003f45
 8003e54:	08003f45 	.word	0x08003f45
 8003e58:	08003f2d 	.word	0x08003f2d
 8003e5c:	08003f45 	.word	0x08003f45
 8003e60:	08003f45 	.word	0x08003f45
 8003e64:	08003f45 	.word	0x08003f45
 8003e68:	08003f45 	.word	0x08003f45
 8003e6c:	08003f45 	.word	0x08003f45
 8003e70:	08003f45 	.word	0x08003f45
 8003e74:	08003f45 	.word	0x08003f45
 8003e78:	08003f45 	.word	0x08003f45
 8003e7c:	08003f45 	.word	0x08003f45
 8003e80:	08003f27 	.word	0x08003f27
 8003e84:	08003f45 	.word	0x08003f45
 8003e88:	08003f45 	.word	0x08003f45
 8003e8c:	08003f45 	.word	0x08003f45
 8003e90:	08003f45 	.word	0x08003f45
 8003e94:	08003f45 	.word	0x08003f45
 8003e98:	08003f45 	.word	0x08003f45
 8003e9c:	08003f45 	.word	0x08003f45
 8003ea0:	08003f45 	.word	0x08003f45
 8003ea4:	08003f45 	.word	0x08003f45
 8003ea8:	08003f45 	.word	0x08003f45
 8003eac:	08003f45 	.word	0x08003f45
 8003eb0:	08003f45 	.word	0x08003f45
 8003eb4:	08003f45 	.word	0x08003f45
 8003eb8:	08003f45 	.word	0x08003f45
 8003ebc:	08003f45 	.word	0x08003f45
 8003ec0:	08003f45 	.word	0x08003f45
 8003ec4:	08003f45 	.word	0x08003f45
 8003ec8:	08003f45 	.word	0x08003f45
 8003ecc:	08003f45 	.word	0x08003f45
 8003ed0:	08003f21 	.word	0x08003f21
 8003ed4:	08003f45 	.word	0x08003f45
 8003ed8:	08003f45 	.word	0x08003f45
 8003edc:	08003f45 	.word	0x08003f45
 8003ee0:	08003f45 	.word	0x08003f45
 8003ee4:	08003f45 	.word	0x08003f45
 8003ee8:	08003f45 	.word	0x08003f45
 8003eec:	08003f45 	.word	0x08003f45
 8003ef0:	08003f45 	.word	0x08003f45
 8003ef4:	08003f45 	.word	0x08003f45
 8003ef8:	08003f1b 	.word	0x08003f1b
 8003efc:	2b64      	cmp	r3, #100	; 0x64
 8003efe:	d009      	beq.n	8003f14 <Save_EEPROM+0x128>
 8003f00:	e020      	b.n	8003f44 <Save_EEPROM+0x158>
 8003f02:	2301      	movs	r3, #1
 8003f04:	723b      	strb	r3, [r7, #8]
 8003f06:	e01f      	b.n	8003f48 <Save_EEPROM+0x15c>
 8003f08:	2302      	movs	r3, #2
 8003f0a:	723b      	strb	r3, [r7, #8]
 8003f0c:	e01c      	b.n	8003f48 <Save_EEPROM+0x15c>
 8003f0e:	2303      	movs	r3, #3
 8003f10:	723b      	strb	r3, [r7, #8]
 8003f12:	e019      	b.n	8003f48 <Save_EEPROM+0x15c>
 8003f14:	2304      	movs	r3, #4
 8003f16:	723b      	strb	r3, [r7, #8]
 8003f18:	e016      	b.n	8003f48 <Save_EEPROM+0x15c>
 8003f1a:	2305      	movs	r3, #5
 8003f1c:	723b      	strb	r3, [r7, #8]
 8003f1e:	e013      	b.n	8003f48 <Save_EEPROM+0x15c>
 8003f20:	2306      	movs	r3, #6
 8003f22:	723b      	strb	r3, [r7, #8]
 8003f24:	e010      	b.n	8003f48 <Save_EEPROM+0x15c>
 8003f26:	2307      	movs	r3, #7
 8003f28:	723b      	strb	r3, [r7, #8]
 8003f2a:	e00d      	b.n	8003f48 <Save_EEPROM+0x15c>
 8003f2c:	2308      	movs	r3, #8
 8003f2e:	723b      	strb	r3, [r7, #8]
 8003f30:	e00a      	b.n	8003f48 <Save_EEPROM+0x15c>
 8003f32:	2309      	movs	r3, #9
 8003f34:	723b      	strb	r3, [r7, #8]
 8003f36:	e007      	b.n	8003f48 <Save_EEPROM+0x15c>
 8003f38:	230a      	movs	r3, #10
 8003f3a:	723b      	strb	r3, [r7, #8]
 8003f3c:	e004      	b.n	8003f48 <Save_EEPROM+0x15c>
 8003f3e:	230b      	movs	r3, #11
 8003f40:	723b      	strb	r3, [r7, #8]
 8003f42:	e001      	b.n	8003f48 <Save_EEPROM+0x15c>
 8003f44:	2300      	movs	r3, #0
 8003f46:	723b      	strb	r3, [r7, #8]
 8003f48:	bf00      	nop
	__SAVE_FREQ(buffer[1], Per_Msg[Analog_5_8]);
 8003f4a:	4b54      	ldr	r3, [pc, #336]	; (800409c <Save_EEPROM+0x2b0>)
 8003f4c:	885b      	ldrh	r3, [r3, #2]
 8003f4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f52:	f000 8082 	beq.w	800405a <Save_EEPROM+0x26e>
 8003f56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f5a:	f300 80a1 	bgt.w	80040a0 <Save_EEPROM+0x2b4>
 8003f5e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003f62:	d07d      	beq.n	8004060 <Save_EEPROM+0x274>
 8003f64:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003f68:	f300 809a 	bgt.w	80040a0 <Save_EEPROM+0x2b4>
 8003f6c:	2bc8      	cmp	r3, #200	; 0xc8
 8003f6e:	d07a      	beq.n	8004066 <Save_EEPROM+0x27a>
 8003f70:	2bc8      	cmp	r3, #200	; 0xc8
 8003f72:	f300 8095 	bgt.w	80040a0 <Save_EEPROM+0x2b4>
 8003f76:	2b32      	cmp	r3, #50	; 0x32
 8003f78:	dc6c      	bgt.n	8004054 <Save_EEPROM+0x268>
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	f2c0 8090 	blt.w	80040a0 <Save_EEPROM+0x2b4>
 8003f80:	3b02      	subs	r3, #2
 8003f82:	2b30      	cmp	r3, #48	; 0x30
 8003f84:	f200 808c 	bhi.w	80040a0 <Save_EEPROM+0x2b4>
 8003f88:	a201      	add	r2, pc, #4	; (adr r2, 8003f90 <Save_EEPROM+0x1a4>)
 8003f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8e:	bf00      	nop
 8003f90:	08004097 	.word	0x08004097
 8003f94:	08004091 	.word	0x08004091
 8003f98:	080040a1 	.word	0x080040a1
 8003f9c:	0800408b 	.word	0x0800408b
 8003fa0:	080040a1 	.word	0x080040a1
 8003fa4:	080040a1 	.word	0x080040a1
 8003fa8:	080040a1 	.word	0x080040a1
 8003fac:	080040a1 	.word	0x080040a1
 8003fb0:	08004085 	.word	0x08004085
 8003fb4:	080040a1 	.word	0x080040a1
 8003fb8:	080040a1 	.word	0x080040a1
 8003fbc:	080040a1 	.word	0x080040a1
 8003fc0:	080040a1 	.word	0x080040a1
 8003fc4:	080040a1 	.word	0x080040a1
 8003fc8:	080040a1 	.word	0x080040a1
 8003fcc:	080040a1 	.word	0x080040a1
 8003fd0:	080040a1 	.word	0x080040a1
 8003fd4:	080040a1 	.word	0x080040a1
 8003fd8:	0800407f 	.word	0x0800407f
 8003fdc:	080040a1 	.word	0x080040a1
 8003fe0:	080040a1 	.word	0x080040a1
 8003fe4:	080040a1 	.word	0x080040a1
 8003fe8:	080040a1 	.word	0x080040a1
 8003fec:	080040a1 	.word	0x080040a1
 8003ff0:	080040a1 	.word	0x080040a1
 8003ff4:	080040a1 	.word	0x080040a1
 8003ff8:	080040a1 	.word	0x080040a1
 8003ffc:	080040a1 	.word	0x080040a1
 8004000:	080040a1 	.word	0x080040a1
 8004004:	080040a1 	.word	0x080040a1
 8004008:	080040a1 	.word	0x080040a1
 800400c:	080040a1 	.word	0x080040a1
 8004010:	080040a1 	.word	0x080040a1
 8004014:	080040a1 	.word	0x080040a1
 8004018:	080040a1 	.word	0x080040a1
 800401c:	080040a1 	.word	0x080040a1
 8004020:	080040a1 	.word	0x080040a1
 8004024:	080040a1 	.word	0x080040a1
 8004028:	08004079 	.word	0x08004079
 800402c:	080040a1 	.word	0x080040a1
 8004030:	080040a1 	.word	0x080040a1
 8004034:	080040a1 	.word	0x080040a1
 8004038:	080040a1 	.word	0x080040a1
 800403c:	080040a1 	.word	0x080040a1
 8004040:	080040a1 	.word	0x080040a1
 8004044:	080040a1 	.word	0x080040a1
 8004048:	080040a1 	.word	0x080040a1
 800404c:	080040a1 	.word	0x080040a1
 8004050:	08004073 	.word	0x08004073
 8004054:	2b64      	cmp	r3, #100	; 0x64
 8004056:	d009      	beq.n	800406c <Save_EEPROM+0x280>
 8004058:	e022      	b.n	80040a0 <Save_EEPROM+0x2b4>
 800405a:	2301      	movs	r3, #1
 800405c:	727b      	strb	r3, [r7, #9]
 800405e:	e021      	b.n	80040a4 <Save_EEPROM+0x2b8>
 8004060:	2302      	movs	r3, #2
 8004062:	727b      	strb	r3, [r7, #9]
 8004064:	e01e      	b.n	80040a4 <Save_EEPROM+0x2b8>
 8004066:	2303      	movs	r3, #3
 8004068:	727b      	strb	r3, [r7, #9]
 800406a:	e01b      	b.n	80040a4 <Save_EEPROM+0x2b8>
 800406c:	2304      	movs	r3, #4
 800406e:	727b      	strb	r3, [r7, #9]
 8004070:	e018      	b.n	80040a4 <Save_EEPROM+0x2b8>
 8004072:	2305      	movs	r3, #5
 8004074:	727b      	strb	r3, [r7, #9]
 8004076:	e015      	b.n	80040a4 <Save_EEPROM+0x2b8>
 8004078:	2306      	movs	r3, #6
 800407a:	727b      	strb	r3, [r7, #9]
 800407c:	e012      	b.n	80040a4 <Save_EEPROM+0x2b8>
 800407e:	2307      	movs	r3, #7
 8004080:	727b      	strb	r3, [r7, #9]
 8004082:	e00f      	b.n	80040a4 <Save_EEPROM+0x2b8>
 8004084:	2308      	movs	r3, #8
 8004086:	727b      	strb	r3, [r7, #9]
 8004088:	e00c      	b.n	80040a4 <Save_EEPROM+0x2b8>
 800408a:	2309      	movs	r3, #9
 800408c:	727b      	strb	r3, [r7, #9]
 800408e:	e009      	b.n	80040a4 <Save_EEPROM+0x2b8>
 8004090:	230a      	movs	r3, #10
 8004092:	727b      	strb	r3, [r7, #9]
 8004094:	e006      	b.n	80040a4 <Save_EEPROM+0x2b8>
 8004096:	230b      	movs	r3, #11
 8004098:	727b      	strb	r3, [r7, #9]
 800409a:	e003      	b.n	80040a4 <Save_EEPROM+0x2b8>
 800409c:	20002e7c 	.word	0x20002e7c
 80040a0:	2300      	movs	r3, #0
 80040a2:	727b      	strb	r3, [r7, #9]
 80040a4:	bf00      	nop
	__SAVE_FREQ(buffer[2], Per_Msg[Analog_9_12]);
 80040a6:	4baa      	ldr	r3, [pc, #680]	; (8004350 <Save_EEPROM+0x564>)
 80040a8:	889b      	ldrh	r3, [r3, #4]
 80040aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040ae:	f000 8082 	beq.w	80041b6 <Save_EEPROM+0x3ca>
 80040b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80040b6:	f300 809f 	bgt.w	80041f8 <Save_EEPROM+0x40c>
 80040ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80040be:	d07d      	beq.n	80041bc <Save_EEPROM+0x3d0>
 80040c0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80040c4:	f300 8098 	bgt.w	80041f8 <Save_EEPROM+0x40c>
 80040c8:	2bc8      	cmp	r3, #200	; 0xc8
 80040ca:	d07a      	beq.n	80041c2 <Save_EEPROM+0x3d6>
 80040cc:	2bc8      	cmp	r3, #200	; 0xc8
 80040ce:	f300 8093 	bgt.w	80041f8 <Save_EEPROM+0x40c>
 80040d2:	2b32      	cmp	r3, #50	; 0x32
 80040d4:	dc6c      	bgt.n	80041b0 <Save_EEPROM+0x3c4>
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	f2c0 808e 	blt.w	80041f8 <Save_EEPROM+0x40c>
 80040dc:	3b02      	subs	r3, #2
 80040de:	2b30      	cmp	r3, #48	; 0x30
 80040e0:	f200 808a 	bhi.w	80041f8 <Save_EEPROM+0x40c>
 80040e4:	a201      	add	r2, pc, #4	; (adr r2, 80040ec <Save_EEPROM+0x300>)
 80040e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ea:	bf00      	nop
 80040ec:	080041f3 	.word	0x080041f3
 80040f0:	080041ed 	.word	0x080041ed
 80040f4:	080041f9 	.word	0x080041f9
 80040f8:	080041e7 	.word	0x080041e7
 80040fc:	080041f9 	.word	0x080041f9
 8004100:	080041f9 	.word	0x080041f9
 8004104:	080041f9 	.word	0x080041f9
 8004108:	080041f9 	.word	0x080041f9
 800410c:	080041e1 	.word	0x080041e1
 8004110:	080041f9 	.word	0x080041f9
 8004114:	080041f9 	.word	0x080041f9
 8004118:	080041f9 	.word	0x080041f9
 800411c:	080041f9 	.word	0x080041f9
 8004120:	080041f9 	.word	0x080041f9
 8004124:	080041f9 	.word	0x080041f9
 8004128:	080041f9 	.word	0x080041f9
 800412c:	080041f9 	.word	0x080041f9
 8004130:	080041f9 	.word	0x080041f9
 8004134:	080041db 	.word	0x080041db
 8004138:	080041f9 	.word	0x080041f9
 800413c:	080041f9 	.word	0x080041f9
 8004140:	080041f9 	.word	0x080041f9
 8004144:	080041f9 	.word	0x080041f9
 8004148:	080041f9 	.word	0x080041f9
 800414c:	080041f9 	.word	0x080041f9
 8004150:	080041f9 	.word	0x080041f9
 8004154:	080041f9 	.word	0x080041f9
 8004158:	080041f9 	.word	0x080041f9
 800415c:	080041f9 	.word	0x080041f9
 8004160:	080041f9 	.word	0x080041f9
 8004164:	080041f9 	.word	0x080041f9
 8004168:	080041f9 	.word	0x080041f9
 800416c:	080041f9 	.word	0x080041f9
 8004170:	080041f9 	.word	0x080041f9
 8004174:	080041f9 	.word	0x080041f9
 8004178:	080041f9 	.word	0x080041f9
 800417c:	080041f9 	.word	0x080041f9
 8004180:	080041f9 	.word	0x080041f9
 8004184:	080041d5 	.word	0x080041d5
 8004188:	080041f9 	.word	0x080041f9
 800418c:	080041f9 	.word	0x080041f9
 8004190:	080041f9 	.word	0x080041f9
 8004194:	080041f9 	.word	0x080041f9
 8004198:	080041f9 	.word	0x080041f9
 800419c:	080041f9 	.word	0x080041f9
 80041a0:	080041f9 	.word	0x080041f9
 80041a4:	080041f9 	.word	0x080041f9
 80041a8:	080041f9 	.word	0x080041f9
 80041ac:	080041cf 	.word	0x080041cf
 80041b0:	2b64      	cmp	r3, #100	; 0x64
 80041b2:	d009      	beq.n	80041c8 <Save_EEPROM+0x3dc>
 80041b4:	e020      	b.n	80041f8 <Save_EEPROM+0x40c>
 80041b6:	2301      	movs	r3, #1
 80041b8:	72bb      	strb	r3, [r7, #10]
 80041ba:	e01f      	b.n	80041fc <Save_EEPROM+0x410>
 80041bc:	2302      	movs	r3, #2
 80041be:	72bb      	strb	r3, [r7, #10]
 80041c0:	e01c      	b.n	80041fc <Save_EEPROM+0x410>
 80041c2:	2303      	movs	r3, #3
 80041c4:	72bb      	strb	r3, [r7, #10]
 80041c6:	e019      	b.n	80041fc <Save_EEPROM+0x410>
 80041c8:	2304      	movs	r3, #4
 80041ca:	72bb      	strb	r3, [r7, #10]
 80041cc:	e016      	b.n	80041fc <Save_EEPROM+0x410>
 80041ce:	2305      	movs	r3, #5
 80041d0:	72bb      	strb	r3, [r7, #10]
 80041d2:	e013      	b.n	80041fc <Save_EEPROM+0x410>
 80041d4:	2306      	movs	r3, #6
 80041d6:	72bb      	strb	r3, [r7, #10]
 80041d8:	e010      	b.n	80041fc <Save_EEPROM+0x410>
 80041da:	2307      	movs	r3, #7
 80041dc:	72bb      	strb	r3, [r7, #10]
 80041de:	e00d      	b.n	80041fc <Save_EEPROM+0x410>
 80041e0:	2308      	movs	r3, #8
 80041e2:	72bb      	strb	r3, [r7, #10]
 80041e4:	e00a      	b.n	80041fc <Save_EEPROM+0x410>
 80041e6:	2309      	movs	r3, #9
 80041e8:	72bb      	strb	r3, [r7, #10]
 80041ea:	e007      	b.n	80041fc <Save_EEPROM+0x410>
 80041ec:	230a      	movs	r3, #10
 80041ee:	72bb      	strb	r3, [r7, #10]
 80041f0:	e004      	b.n	80041fc <Save_EEPROM+0x410>
 80041f2:	230b      	movs	r3, #11
 80041f4:	72bb      	strb	r3, [r7, #10]
 80041f6:	e001      	b.n	80041fc <Save_EEPROM+0x410>
 80041f8:	2300      	movs	r3, #0
 80041fa:	72bb      	strb	r3, [r7, #10]
 80041fc:	bf00      	nop
	__SAVE_FREQ(buffer[3], Per_Msg[RTC_Msg]);
 80041fe:	4b54      	ldr	r3, [pc, #336]	; (8004350 <Save_EEPROM+0x564>)
 8004200:	88db      	ldrh	r3, [r3, #6]
 8004202:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004206:	f000 8082 	beq.w	800430e <Save_EEPROM+0x522>
 800420a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800420e:	f300 80a1 	bgt.w	8004354 <Save_EEPROM+0x568>
 8004212:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004216:	d07d      	beq.n	8004314 <Save_EEPROM+0x528>
 8004218:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800421c:	f300 809a 	bgt.w	8004354 <Save_EEPROM+0x568>
 8004220:	2bc8      	cmp	r3, #200	; 0xc8
 8004222:	d07a      	beq.n	800431a <Save_EEPROM+0x52e>
 8004224:	2bc8      	cmp	r3, #200	; 0xc8
 8004226:	f300 8095 	bgt.w	8004354 <Save_EEPROM+0x568>
 800422a:	2b32      	cmp	r3, #50	; 0x32
 800422c:	dc6c      	bgt.n	8004308 <Save_EEPROM+0x51c>
 800422e:	2b02      	cmp	r3, #2
 8004230:	f2c0 8090 	blt.w	8004354 <Save_EEPROM+0x568>
 8004234:	3b02      	subs	r3, #2
 8004236:	2b30      	cmp	r3, #48	; 0x30
 8004238:	f200 808c 	bhi.w	8004354 <Save_EEPROM+0x568>
 800423c:	a201      	add	r2, pc, #4	; (adr r2, 8004244 <Save_EEPROM+0x458>)
 800423e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004242:	bf00      	nop
 8004244:	0800434b 	.word	0x0800434b
 8004248:	08004345 	.word	0x08004345
 800424c:	08004355 	.word	0x08004355
 8004250:	0800433f 	.word	0x0800433f
 8004254:	08004355 	.word	0x08004355
 8004258:	08004355 	.word	0x08004355
 800425c:	08004355 	.word	0x08004355
 8004260:	08004355 	.word	0x08004355
 8004264:	08004339 	.word	0x08004339
 8004268:	08004355 	.word	0x08004355
 800426c:	08004355 	.word	0x08004355
 8004270:	08004355 	.word	0x08004355
 8004274:	08004355 	.word	0x08004355
 8004278:	08004355 	.word	0x08004355
 800427c:	08004355 	.word	0x08004355
 8004280:	08004355 	.word	0x08004355
 8004284:	08004355 	.word	0x08004355
 8004288:	08004355 	.word	0x08004355
 800428c:	08004333 	.word	0x08004333
 8004290:	08004355 	.word	0x08004355
 8004294:	08004355 	.word	0x08004355
 8004298:	08004355 	.word	0x08004355
 800429c:	08004355 	.word	0x08004355
 80042a0:	08004355 	.word	0x08004355
 80042a4:	08004355 	.word	0x08004355
 80042a8:	08004355 	.word	0x08004355
 80042ac:	08004355 	.word	0x08004355
 80042b0:	08004355 	.word	0x08004355
 80042b4:	08004355 	.word	0x08004355
 80042b8:	08004355 	.word	0x08004355
 80042bc:	08004355 	.word	0x08004355
 80042c0:	08004355 	.word	0x08004355
 80042c4:	08004355 	.word	0x08004355
 80042c8:	08004355 	.word	0x08004355
 80042cc:	08004355 	.word	0x08004355
 80042d0:	08004355 	.word	0x08004355
 80042d4:	08004355 	.word	0x08004355
 80042d8:	08004355 	.word	0x08004355
 80042dc:	0800432d 	.word	0x0800432d
 80042e0:	08004355 	.word	0x08004355
 80042e4:	08004355 	.word	0x08004355
 80042e8:	08004355 	.word	0x08004355
 80042ec:	08004355 	.word	0x08004355
 80042f0:	08004355 	.word	0x08004355
 80042f4:	08004355 	.word	0x08004355
 80042f8:	08004355 	.word	0x08004355
 80042fc:	08004355 	.word	0x08004355
 8004300:	08004355 	.word	0x08004355
 8004304:	08004327 	.word	0x08004327
 8004308:	2b64      	cmp	r3, #100	; 0x64
 800430a:	d009      	beq.n	8004320 <Save_EEPROM+0x534>
 800430c:	e022      	b.n	8004354 <Save_EEPROM+0x568>
 800430e:	2301      	movs	r3, #1
 8004310:	72fb      	strb	r3, [r7, #11]
 8004312:	e021      	b.n	8004358 <Save_EEPROM+0x56c>
 8004314:	2302      	movs	r3, #2
 8004316:	72fb      	strb	r3, [r7, #11]
 8004318:	e01e      	b.n	8004358 <Save_EEPROM+0x56c>
 800431a:	2303      	movs	r3, #3
 800431c:	72fb      	strb	r3, [r7, #11]
 800431e:	e01b      	b.n	8004358 <Save_EEPROM+0x56c>
 8004320:	2304      	movs	r3, #4
 8004322:	72fb      	strb	r3, [r7, #11]
 8004324:	e018      	b.n	8004358 <Save_EEPROM+0x56c>
 8004326:	2305      	movs	r3, #5
 8004328:	72fb      	strb	r3, [r7, #11]
 800432a:	e015      	b.n	8004358 <Save_EEPROM+0x56c>
 800432c:	2306      	movs	r3, #6
 800432e:	72fb      	strb	r3, [r7, #11]
 8004330:	e012      	b.n	8004358 <Save_EEPROM+0x56c>
 8004332:	2307      	movs	r3, #7
 8004334:	72fb      	strb	r3, [r7, #11]
 8004336:	e00f      	b.n	8004358 <Save_EEPROM+0x56c>
 8004338:	2308      	movs	r3, #8
 800433a:	72fb      	strb	r3, [r7, #11]
 800433c:	e00c      	b.n	8004358 <Save_EEPROM+0x56c>
 800433e:	2309      	movs	r3, #9
 8004340:	72fb      	strb	r3, [r7, #11]
 8004342:	e009      	b.n	8004358 <Save_EEPROM+0x56c>
 8004344:	230a      	movs	r3, #10
 8004346:	72fb      	strb	r3, [r7, #11]
 8004348:	e006      	b.n	8004358 <Save_EEPROM+0x56c>
 800434a:	230b      	movs	r3, #11
 800434c:	72fb      	strb	r3, [r7, #11]
 800434e:	e003      	b.n	8004358 <Save_EEPROM+0x56c>
 8004350:	20002e7c 	.word	0x20002e7c
 8004354:	2300      	movs	r3, #0
 8004356:	72fb      	strb	r3, [r7, #11]
 8004358:	bf00      	nop
	__SAVE_FREQ(buffer[4], Per_Msg[Verify_Msg]);
 800435a:	4baa      	ldr	r3, [pc, #680]	; (8004604 <Save_EEPROM+0x818>)
 800435c:	891b      	ldrh	r3, [r3, #8]
 800435e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004362:	f000 8082 	beq.w	800446a <Save_EEPROM+0x67e>
 8004366:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800436a:	f300 809f 	bgt.w	80044ac <Save_EEPROM+0x6c0>
 800436e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004372:	d07d      	beq.n	8004470 <Save_EEPROM+0x684>
 8004374:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004378:	f300 8098 	bgt.w	80044ac <Save_EEPROM+0x6c0>
 800437c:	2bc8      	cmp	r3, #200	; 0xc8
 800437e:	d07a      	beq.n	8004476 <Save_EEPROM+0x68a>
 8004380:	2bc8      	cmp	r3, #200	; 0xc8
 8004382:	f300 8093 	bgt.w	80044ac <Save_EEPROM+0x6c0>
 8004386:	2b32      	cmp	r3, #50	; 0x32
 8004388:	dc6c      	bgt.n	8004464 <Save_EEPROM+0x678>
 800438a:	2b02      	cmp	r3, #2
 800438c:	f2c0 808e 	blt.w	80044ac <Save_EEPROM+0x6c0>
 8004390:	3b02      	subs	r3, #2
 8004392:	2b30      	cmp	r3, #48	; 0x30
 8004394:	f200 808a 	bhi.w	80044ac <Save_EEPROM+0x6c0>
 8004398:	a201      	add	r2, pc, #4	; (adr r2, 80043a0 <Save_EEPROM+0x5b4>)
 800439a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439e:	bf00      	nop
 80043a0:	080044a7 	.word	0x080044a7
 80043a4:	080044a1 	.word	0x080044a1
 80043a8:	080044ad 	.word	0x080044ad
 80043ac:	0800449b 	.word	0x0800449b
 80043b0:	080044ad 	.word	0x080044ad
 80043b4:	080044ad 	.word	0x080044ad
 80043b8:	080044ad 	.word	0x080044ad
 80043bc:	080044ad 	.word	0x080044ad
 80043c0:	08004495 	.word	0x08004495
 80043c4:	080044ad 	.word	0x080044ad
 80043c8:	080044ad 	.word	0x080044ad
 80043cc:	080044ad 	.word	0x080044ad
 80043d0:	080044ad 	.word	0x080044ad
 80043d4:	080044ad 	.word	0x080044ad
 80043d8:	080044ad 	.word	0x080044ad
 80043dc:	080044ad 	.word	0x080044ad
 80043e0:	080044ad 	.word	0x080044ad
 80043e4:	080044ad 	.word	0x080044ad
 80043e8:	0800448f 	.word	0x0800448f
 80043ec:	080044ad 	.word	0x080044ad
 80043f0:	080044ad 	.word	0x080044ad
 80043f4:	080044ad 	.word	0x080044ad
 80043f8:	080044ad 	.word	0x080044ad
 80043fc:	080044ad 	.word	0x080044ad
 8004400:	080044ad 	.word	0x080044ad
 8004404:	080044ad 	.word	0x080044ad
 8004408:	080044ad 	.word	0x080044ad
 800440c:	080044ad 	.word	0x080044ad
 8004410:	080044ad 	.word	0x080044ad
 8004414:	080044ad 	.word	0x080044ad
 8004418:	080044ad 	.word	0x080044ad
 800441c:	080044ad 	.word	0x080044ad
 8004420:	080044ad 	.word	0x080044ad
 8004424:	080044ad 	.word	0x080044ad
 8004428:	080044ad 	.word	0x080044ad
 800442c:	080044ad 	.word	0x080044ad
 8004430:	080044ad 	.word	0x080044ad
 8004434:	080044ad 	.word	0x080044ad
 8004438:	08004489 	.word	0x08004489
 800443c:	080044ad 	.word	0x080044ad
 8004440:	080044ad 	.word	0x080044ad
 8004444:	080044ad 	.word	0x080044ad
 8004448:	080044ad 	.word	0x080044ad
 800444c:	080044ad 	.word	0x080044ad
 8004450:	080044ad 	.word	0x080044ad
 8004454:	080044ad 	.word	0x080044ad
 8004458:	080044ad 	.word	0x080044ad
 800445c:	080044ad 	.word	0x080044ad
 8004460:	08004483 	.word	0x08004483
 8004464:	2b64      	cmp	r3, #100	; 0x64
 8004466:	d009      	beq.n	800447c <Save_EEPROM+0x690>
 8004468:	e020      	b.n	80044ac <Save_EEPROM+0x6c0>
 800446a:	2301      	movs	r3, #1
 800446c:	733b      	strb	r3, [r7, #12]
 800446e:	e01f      	b.n	80044b0 <Save_EEPROM+0x6c4>
 8004470:	2302      	movs	r3, #2
 8004472:	733b      	strb	r3, [r7, #12]
 8004474:	e01c      	b.n	80044b0 <Save_EEPROM+0x6c4>
 8004476:	2303      	movs	r3, #3
 8004478:	733b      	strb	r3, [r7, #12]
 800447a:	e019      	b.n	80044b0 <Save_EEPROM+0x6c4>
 800447c:	2304      	movs	r3, #4
 800447e:	733b      	strb	r3, [r7, #12]
 8004480:	e016      	b.n	80044b0 <Save_EEPROM+0x6c4>
 8004482:	2305      	movs	r3, #5
 8004484:	733b      	strb	r3, [r7, #12]
 8004486:	e013      	b.n	80044b0 <Save_EEPROM+0x6c4>
 8004488:	2306      	movs	r3, #6
 800448a:	733b      	strb	r3, [r7, #12]
 800448c:	e010      	b.n	80044b0 <Save_EEPROM+0x6c4>
 800448e:	2307      	movs	r3, #7
 8004490:	733b      	strb	r3, [r7, #12]
 8004492:	e00d      	b.n	80044b0 <Save_EEPROM+0x6c4>
 8004494:	2308      	movs	r3, #8
 8004496:	733b      	strb	r3, [r7, #12]
 8004498:	e00a      	b.n	80044b0 <Save_EEPROM+0x6c4>
 800449a:	2309      	movs	r3, #9
 800449c:	733b      	strb	r3, [r7, #12]
 800449e:	e007      	b.n	80044b0 <Save_EEPROM+0x6c4>
 80044a0:	230a      	movs	r3, #10
 80044a2:	733b      	strb	r3, [r7, #12]
 80044a4:	e004      	b.n	80044b0 <Save_EEPROM+0x6c4>
 80044a6:	230b      	movs	r3, #11
 80044a8:	733b      	strb	r3, [r7, #12]
 80044aa:	e001      	b.n	80044b0 <Save_EEPROM+0x6c4>
 80044ac:	2300      	movs	r3, #0
 80044ae:	733b      	strb	r3, [r7, #12]
 80044b0:	bf00      	nop
	__SAVE_FREQ(buffer[5], Per_Msg[ECU_Save]);
 80044b2:	4b54      	ldr	r3, [pc, #336]	; (8004604 <Save_EEPROM+0x818>)
 80044b4:	895b      	ldrh	r3, [r3, #10]
 80044b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044ba:	f000 8082 	beq.w	80045c2 <Save_EEPROM+0x7d6>
 80044be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044c2:	f300 80a1 	bgt.w	8004608 <Save_EEPROM+0x81c>
 80044c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80044ca:	d07d      	beq.n	80045c8 <Save_EEPROM+0x7dc>
 80044cc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80044d0:	f300 809a 	bgt.w	8004608 <Save_EEPROM+0x81c>
 80044d4:	2bc8      	cmp	r3, #200	; 0xc8
 80044d6:	d07a      	beq.n	80045ce <Save_EEPROM+0x7e2>
 80044d8:	2bc8      	cmp	r3, #200	; 0xc8
 80044da:	f300 8095 	bgt.w	8004608 <Save_EEPROM+0x81c>
 80044de:	2b32      	cmp	r3, #50	; 0x32
 80044e0:	dc6c      	bgt.n	80045bc <Save_EEPROM+0x7d0>
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	f2c0 8090 	blt.w	8004608 <Save_EEPROM+0x81c>
 80044e8:	3b02      	subs	r3, #2
 80044ea:	2b30      	cmp	r3, #48	; 0x30
 80044ec:	f200 808c 	bhi.w	8004608 <Save_EEPROM+0x81c>
 80044f0:	a201      	add	r2, pc, #4	; (adr r2, 80044f8 <Save_EEPROM+0x70c>)
 80044f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f6:	bf00      	nop
 80044f8:	080045ff 	.word	0x080045ff
 80044fc:	080045f9 	.word	0x080045f9
 8004500:	08004609 	.word	0x08004609
 8004504:	080045f3 	.word	0x080045f3
 8004508:	08004609 	.word	0x08004609
 800450c:	08004609 	.word	0x08004609
 8004510:	08004609 	.word	0x08004609
 8004514:	08004609 	.word	0x08004609
 8004518:	080045ed 	.word	0x080045ed
 800451c:	08004609 	.word	0x08004609
 8004520:	08004609 	.word	0x08004609
 8004524:	08004609 	.word	0x08004609
 8004528:	08004609 	.word	0x08004609
 800452c:	08004609 	.word	0x08004609
 8004530:	08004609 	.word	0x08004609
 8004534:	08004609 	.word	0x08004609
 8004538:	08004609 	.word	0x08004609
 800453c:	08004609 	.word	0x08004609
 8004540:	080045e7 	.word	0x080045e7
 8004544:	08004609 	.word	0x08004609
 8004548:	08004609 	.word	0x08004609
 800454c:	08004609 	.word	0x08004609
 8004550:	08004609 	.word	0x08004609
 8004554:	08004609 	.word	0x08004609
 8004558:	08004609 	.word	0x08004609
 800455c:	08004609 	.word	0x08004609
 8004560:	08004609 	.word	0x08004609
 8004564:	08004609 	.word	0x08004609
 8004568:	08004609 	.word	0x08004609
 800456c:	08004609 	.word	0x08004609
 8004570:	08004609 	.word	0x08004609
 8004574:	08004609 	.word	0x08004609
 8004578:	08004609 	.word	0x08004609
 800457c:	08004609 	.word	0x08004609
 8004580:	08004609 	.word	0x08004609
 8004584:	08004609 	.word	0x08004609
 8004588:	08004609 	.word	0x08004609
 800458c:	08004609 	.word	0x08004609
 8004590:	080045e1 	.word	0x080045e1
 8004594:	08004609 	.word	0x08004609
 8004598:	08004609 	.word	0x08004609
 800459c:	08004609 	.word	0x08004609
 80045a0:	08004609 	.word	0x08004609
 80045a4:	08004609 	.word	0x08004609
 80045a8:	08004609 	.word	0x08004609
 80045ac:	08004609 	.word	0x08004609
 80045b0:	08004609 	.word	0x08004609
 80045b4:	08004609 	.word	0x08004609
 80045b8:	080045db 	.word	0x080045db
 80045bc:	2b64      	cmp	r3, #100	; 0x64
 80045be:	d009      	beq.n	80045d4 <Save_EEPROM+0x7e8>
 80045c0:	e022      	b.n	8004608 <Save_EEPROM+0x81c>
 80045c2:	2301      	movs	r3, #1
 80045c4:	737b      	strb	r3, [r7, #13]
 80045c6:	e021      	b.n	800460c <Save_EEPROM+0x820>
 80045c8:	2302      	movs	r3, #2
 80045ca:	737b      	strb	r3, [r7, #13]
 80045cc:	e01e      	b.n	800460c <Save_EEPROM+0x820>
 80045ce:	2303      	movs	r3, #3
 80045d0:	737b      	strb	r3, [r7, #13]
 80045d2:	e01b      	b.n	800460c <Save_EEPROM+0x820>
 80045d4:	2304      	movs	r3, #4
 80045d6:	737b      	strb	r3, [r7, #13]
 80045d8:	e018      	b.n	800460c <Save_EEPROM+0x820>
 80045da:	2305      	movs	r3, #5
 80045dc:	737b      	strb	r3, [r7, #13]
 80045de:	e015      	b.n	800460c <Save_EEPROM+0x820>
 80045e0:	2306      	movs	r3, #6
 80045e2:	737b      	strb	r3, [r7, #13]
 80045e4:	e012      	b.n	800460c <Save_EEPROM+0x820>
 80045e6:	2307      	movs	r3, #7
 80045e8:	737b      	strb	r3, [r7, #13]
 80045ea:	e00f      	b.n	800460c <Save_EEPROM+0x820>
 80045ec:	2308      	movs	r3, #8
 80045ee:	737b      	strb	r3, [r7, #13]
 80045f0:	e00c      	b.n	800460c <Save_EEPROM+0x820>
 80045f2:	2309      	movs	r3, #9
 80045f4:	737b      	strb	r3, [r7, #13]
 80045f6:	e009      	b.n	800460c <Save_EEPROM+0x820>
 80045f8:	230a      	movs	r3, #10
 80045fa:	737b      	strb	r3, [r7, #13]
 80045fc:	e006      	b.n	800460c <Save_EEPROM+0x820>
 80045fe:	230b      	movs	r3, #11
 8004600:	737b      	strb	r3, [r7, #13]
 8004602:	e003      	b.n	800460c <Save_EEPROM+0x820>
 8004604:	20002e7c 	.word	0x20002e7c
 8004608:	2300      	movs	r3, #0
 800460a:	737b      	strb	r3, [r7, #13]
 800460c:	bf00      	nop
	__SAVE_FREQ(buffer[6], Per_Msg[PDM_Save]);
 800460e:	4baa      	ldr	r3, [pc, #680]	; (80048b8 <Save_EEPROM+0xacc>)
 8004610:	899b      	ldrh	r3, [r3, #12]
 8004612:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004616:	f000 8082 	beq.w	800471e <Save_EEPROM+0x932>
 800461a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800461e:	f300 809f 	bgt.w	8004760 <Save_EEPROM+0x974>
 8004622:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004626:	d07d      	beq.n	8004724 <Save_EEPROM+0x938>
 8004628:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800462c:	f300 8098 	bgt.w	8004760 <Save_EEPROM+0x974>
 8004630:	2bc8      	cmp	r3, #200	; 0xc8
 8004632:	d07a      	beq.n	800472a <Save_EEPROM+0x93e>
 8004634:	2bc8      	cmp	r3, #200	; 0xc8
 8004636:	f300 8093 	bgt.w	8004760 <Save_EEPROM+0x974>
 800463a:	2b32      	cmp	r3, #50	; 0x32
 800463c:	dc6c      	bgt.n	8004718 <Save_EEPROM+0x92c>
 800463e:	2b02      	cmp	r3, #2
 8004640:	f2c0 808e 	blt.w	8004760 <Save_EEPROM+0x974>
 8004644:	3b02      	subs	r3, #2
 8004646:	2b30      	cmp	r3, #48	; 0x30
 8004648:	f200 808a 	bhi.w	8004760 <Save_EEPROM+0x974>
 800464c:	a201      	add	r2, pc, #4	; (adr r2, 8004654 <Save_EEPROM+0x868>)
 800464e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004652:	bf00      	nop
 8004654:	0800475b 	.word	0x0800475b
 8004658:	08004755 	.word	0x08004755
 800465c:	08004761 	.word	0x08004761
 8004660:	0800474f 	.word	0x0800474f
 8004664:	08004761 	.word	0x08004761
 8004668:	08004761 	.word	0x08004761
 800466c:	08004761 	.word	0x08004761
 8004670:	08004761 	.word	0x08004761
 8004674:	08004749 	.word	0x08004749
 8004678:	08004761 	.word	0x08004761
 800467c:	08004761 	.word	0x08004761
 8004680:	08004761 	.word	0x08004761
 8004684:	08004761 	.word	0x08004761
 8004688:	08004761 	.word	0x08004761
 800468c:	08004761 	.word	0x08004761
 8004690:	08004761 	.word	0x08004761
 8004694:	08004761 	.word	0x08004761
 8004698:	08004761 	.word	0x08004761
 800469c:	08004743 	.word	0x08004743
 80046a0:	08004761 	.word	0x08004761
 80046a4:	08004761 	.word	0x08004761
 80046a8:	08004761 	.word	0x08004761
 80046ac:	08004761 	.word	0x08004761
 80046b0:	08004761 	.word	0x08004761
 80046b4:	08004761 	.word	0x08004761
 80046b8:	08004761 	.word	0x08004761
 80046bc:	08004761 	.word	0x08004761
 80046c0:	08004761 	.word	0x08004761
 80046c4:	08004761 	.word	0x08004761
 80046c8:	08004761 	.word	0x08004761
 80046cc:	08004761 	.word	0x08004761
 80046d0:	08004761 	.word	0x08004761
 80046d4:	08004761 	.word	0x08004761
 80046d8:	08004761 	.word	0x08004761
 80046dc:	08004761 	.word	0x08004761
 80046e0:	08004761 	.word	0x08004761
 80046e4:	08004761 	.word	0x08004761
 80046e8:	08004761 	.word	0x08004761
 80046ec:	0800473d 	.word	0x0800473d
 80046f0:	08004761 	.word	0x08004761
 80046f4:	08004761 	.word	0x08004761
 80046f8:	08004761 	.word	0x08004761
 80046fc:	08004761 	.word	0x08004761
 8004700:	08004761 	.word	0x08004761
 8004704:	08004761 	.word	0x08004761
 8004708:	08004761 	.word	0x08004761
 800470c:	08004761 	.word	0x08004761
 8004710:	08004761 	.word	0x08004761
 8004714:	08004737 	.word	0x08004737
 8004718:	2b64      	cmp	r3, #100	; 0x64
 800471a:	d009      	beq.n	8004730 <Save_EEPROM+0x944>
 800471c:	e020      	b.n	8004760 <Save_EEPROM+0x974>
 800471e:	2301      	movs	r3, #1
 8004720:	73bb      	strb	r3, [r7, #14]
 8004722:	e01f      	b.n	8004764 <Save_EEPROM+0x978>
 8004724:	2302      	movs	r3, #2
 8004726:	73bb      	strb	r3, [r7, #14]
 8004728:	e01c      	b.n	8004764 <Save_EEPROM+0x978>
 800472a:	2303      	movs	r3, #3
 800472c:	73bb      	strb	r3, [r7, #14]
 800472e:	e019      	b.n	8004764 <Save_EEPROM+0x978>
 8004730:	2304      	movs	r3, #4
 8004732:	73bb      	strb	r3, [r7, #14]
 8004734:	e016      	b.n	8004764 <Save_EEPROM+0x978>
 8004736:	2305      	movs	r3, #5
 8004738:	73bb      	strb	r3, [r7, #14]
 800473a:	e013      	b.n	8004764 <Save_EEPROM+0x978>
 800473c:	2306      	movs	r3, #6
 800473e:	73bb      	strb	r3, [r7, #14]
 8004740:	e010      	b.n	8004764 <Save_EEPROM+0x978>
 8004742:	2307      	movs	r3, #7
 8004744:	73bb      	strb	r3, [r7, #14]
 8004746:	e00d      	b.n	8004764 <Save_EEPROM+0x978>
 8004748:	2308      	movs	r3, #8
 800474a:	73bb      	strb	r3, [r7, #14]
 800474c:	e00a      	b.n	8004764 <Save_EEPROM+0x978>
 800474e:	2309      	movs	r3, #9
 8004750:	73bb      	strb	r3, [r7, #14]
 8004752:	e007      	b.n	8004764 <Save_EEPROM+0x978>
 8004754:	230a      	movs	r3, #10
 8004756:	73bb      	strb	r3, [r7, #14]
 8004758:	e004      	b.n	8004764 <Save_EEPROM+0x978>
 800475a:	230b      	movs	r3, #11
 800475c:	73bb      	strb	r3, [r7, #14]
 800475e:	e001      	b.n	8004764 <Save_EEPROM+0x978>
 8004760:	2300      	movs	r3, #0
 8004762:	73bb      	strb	r3, [r7, #14]
 8004764:	bf00      	nop

	__SAVE_FREQ(buffer[7], Per_CAN[Analog_1_4]);
 8004766:	4b55      	ldr	r3, [pc, #340]	; (80048bc <Save_EEPROM+0xad0>)
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800476e:	f000 8082 	beq.w	8004876 <Save_EEPROM+0xa8a>
 8004772:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004776:	f300 80a3 	bgt.w	80048c0 <Save_EEPROM+0xad4>
 800477a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800477e:	d07d      	beq.n	800487c <Save_EEPROM+0xa90>
 8004780:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004784:	f300 809c 	bgt.w	80048c0 <Save_EEPROM+0xad4>
 8004788:	2bc8      	cmp	r3, #200	; 0xc8
 800478a:	d07a      	beq.n	8004882 <Save_EEPROM+0xa96>
 800478c:	2bc8      	cmp	r3, #200	; 0xc8
 800478e:	f300 8097 	bgt.w	80048c0 <Save_EEPROM+0xad4>
 8004792:	2b32      	cmp	r3, #50	; 0x32
 8004794:	dc6c      	bgt.n	8004870 <Save_EEPROM+0xa84>
 8004796:	2b02      	cmp	r3, #2
 8004798:	f2c0 8092 	blt.w	80048c0 <Save_EEPROM+0xad4>
 800479c:	3b02      	subs	r3, #2
 800479e:	2b30      	cmp	r3, #48	; 0x30
 80047a0:	f200 808e 	bhi.w	80048c0 <Save_EEPROM+0xad4>
 80047a4:	a201      	add	r2, pc, #4	; (adr r2, 80047ac <Save_EEPROM+0x9c0>)
 80047a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047aa:	bf00      	nop
 80047ac:	080048b3 	.word	0x080048b3
 80047b0:	080048ad 	.word	0x080048ad
 80047b4:	080048c1 	.word	0x080048c1
 80047b8:	080048a7 	.word	0x080048a7
 80047bc:	080048c1 	.word	0x080048c1
 80047c0:	080048c1 	.word	0x080048c1
 80047c4:	080048c1 	.word	0x080048c1
 80047c8:	080048c1 	.word	0x080048c1
 80047cc:	080048a1 	.word	0x080048a1
 80047d0:	080048c1 	.word	0x080048c1
 80047d4:	080048c1 	.word	0x080048c1
 80047d8:	080048c1 	.word	0x080048c1
 80047dc:	080048c1 	.word	0x080048c1
 80047e0:	080048c1 	.word	0x080048c1
 80047e4:	080048c1 	.word	0x080048c1
 80047e8:	080048c1 	.word	0x080048c1
 80047ec:	080048c1 	.word	0x080048c1
 80047f0:	080048c1 	.word	0x080048c1
 80047f4:	0800489b 	.word	0x0800489b
 80047f8:	080048c1 	.word	0x080048c1
 80047fc:	080048c1 	.word	0x080048c1
 8004800:	080048c1 	.word	0x080048c1
 8004804:	080048c1 	.word	0x080048c1
 8004808:	080048c1 	.word	0x080048c1
 800480c:	080048c1 	.word	0x080048c1
 8004810:	080048c1 	.word	0x080048c1
 8004814:	080048c1 	.word	0x080048c1
 8004818:	080048c1 	.word	0x080048c1
 800481c:	080048c1 	.word	0x080048c1
 8004820:	080048c1 	.word	0x080048c1
 8004824:	080048c1 	.word	0x080048c1
 8004828:	080048c1 	.word	0x080048c1
 800482c:	080048c1 	.word	0x080048c1
 8004830:	080048c1 	.word	0x080048c1
 8004834:	080048c1 	.word	0x080048c1
 8004838:	080048c1 	.word	0x080048c1
 800483c:	080048c1 	.word	0x080048c1
 8004840:	080048c1 	.word	0x080048c1
 8004844:	08004895 	.word	0x08004895
 8004848:	080048c1 	.word	0x080048c1
 800484c:	080048c1 	.word	0x080048c1
 8004850:	080048c1 	.word	0x080048c1
 8004854:	080048c1 	.word	0x080048c1
 8004858:	080048c1 	.word	0x080048c1
 800485c:	080048c1 	.word	0x080048c1
 8004860:	080048c1 	.word	0x080048c1
 8004864:	080048c1 	.word	0x080048c1
 8004868:	080048c1 	.word	0x080048c1
 800486c:	0800488f 	.word	0x0800488f
 8004870:	2b64      	cmp	r3, #100	; 0x64
 8004872:	d009      	beq.n	8004888 <Save_EEPROM+0xa9c>
 8004874:	e024      	b.n	80048c0 <Save_EEPROM+0xad4>
 8004876:	2301      	movs	r3, #1
 8004878:	73fb      	strb	r3, [r7, #15]
 800487a:	e023      	b.n	80048c4 <Save_EEPROM+0xad8>
 800487c:	2302      	movs	r3, #2
 800487e:	73fb      	strb	r3, [r7, #15]
 8004880:	e020      	b.n	80048c4 <Save_EEPROM+0xad8>
 8004882:	2303      	movs	r3, #3
 8004884:	73fb      	strb	r3, [r7, #15]
 8004886:	e01d      	b.n	80048c4 <Save_EEPROM+0xad8>
 8004888:	2304      	movs	r3, #4
 800488a:	73fb      	strb	r3, [r7, #15]
 800488c:	e01a      	b.n	80048c4 <Save_EEPROM+0xad8>
 800488e:	2305      	movs	r3, #5
 8004890:	73fb      	strb	r3, [r7, #15]
 8004892:	e017      	b.n	80048c4 <Save_EEPROM+0xad8>
 8004894:	2306      	movs	r3, #6
 8004896:	73fb      	strb	r3, [r7, #15]
 8004898:	e014      	b.n	80048c4 <Save_EEPROM+0xad8>
 800489a:	2307      	movs	r3, #7
 800489c:	73fb      	strb	r3, [r7, #15]
 800489e:	e011      	b.n	80048c4 <Save_EEPROM+0xad8>
 80048a0:	2308      	movs	r3, #8
 80048a2:	73fb      	strb	r3, [r7, #15]
 80048a4:	e00e      	b.n	80048c4 <Save_EEPROM+0xad8>
 80048a6:	2309      	movs	r3, #9
 80048a8:	73fb      	strb	r3, [r7, #15]
 80048aa:	e00b      	b.n	80048c4 <Save_EEPROM+0xad8>
 80048ac:	230a      	movs	r3, #10
 80048ae:	73fb      	strb	r3, [r7, #15]
 80048b0:	e008      	b.n	80048c4 <Save_EEPROM+0xad8>
 80048b2:	230b      	movs	r3, #11
 80048b4:	73fb      	strb	r3, [r7, #15]
 80048b6:	e005      	b.n	80048c4 <Save_EEPROM+0xad8>
 80048b8:	20002e7c 	.word	0x20002e7c
 80048bc:	200006fc 	.word	0x200006fc
 80048c0:	2300      	movs	r3, #0
 80048c2:	73fb      	strb	r3, [r7, #15]
 80048c4:	bf00      	nop
	__SAVE_FREQ(buffer[8], Per_CAN[Analog_5_8]);
 80048c6:	4baa      	ldr	r3, [pc, #680]	; (8004b70 <Save_EEPROM+0xd84>)
 80048c8:	885b      	ldrh	r3, [r3, #2]
 80048ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048ce:	f000 8082 	beq.w	80049d6 <Save_EEPROM+0xbea>
 80048d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048d6:	f300 809f 	bgt.w	8004a18 <Save_EEPROM+0xc2c>
 80048da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80048de:	d07d      	beq.n	80049dc <Save_EEPROM+0xbf0>
 80048e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80048e4:	f300 8098 	bgt.w	8004a18 <Save_EEPROM+0xc2c>
 80048e8:	2bc8      	cmp	r3, #200	; 0xc8
 80048ea:	d07a      	beq.n	80049e2 <Save_EEPROM+0xbf6>
 80048ec:	2bc8      	cmp	r3, #200	; 0xc8
 80048ee:	f300 8093 	bgt.w	8004a18 <Save_EEPROM+0xc2c>
 80048f2:	2b32      	cmp	r3, #50	; 0x32
 80048f4:	dc6c      	bgt.n	80049d0 <Save_EEPROM+0xbe4>
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	f2c0 808e 	blt.w	8004a18 <Save_EEPROM+0xc2c>
 80048fc:	3b02      	subs	r3, #2
 80048fe:	2b30      	cmp	r3, #48	; 0x30
 8004900:	f200 808a 	bhi.w	8004a18 <Save_EEPROM+0xc2c>
 8004904:	a201      	add	r2, pc, #4	; (adr r2, 800490c <Save_EEPROM+0xb20>)
 8004906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800490a:	bf00      	nop
 800490c:	08004a13 	.word	0x08004a13
 8004910:	08004a0d 	.word	0x08004a0d
 8004914:	08004a19 	.word	0x08004a19
 8004918:	08004a07 	.word	0x08004a07
 800491c:	08004a19 	.word	0x08004a19
 8004920:	08004a19 	.word	0x08004a19
 8004924:	08004a19 	.word	0x08004a19
 8004928:	08004a19 	.word	0x08004a19
 800492c:	08004a01 	.word	0x08004a01
 8004930:	08004a19 	.word	0x08004a19
 8004934:	08004a19 	.word	0x08004a19
 8004938:	08004a19 	.word	0x08004a19
 800493c:	08004a19 	.word	0x08004a19
 8004940:	08004a19 	.word	0x08004a19
 8004944:	08004a19 	.word	0x08004a19
 8004948:	08004a19 	.word	0x08004a19
 800494c:	08004a19 	.word	0x08004a19
 8004950:	08004a19 	.word	0x08004a19
 8004954:	080049fb 	.word	0x080049fb
 8004958:	08004a19 	.word	0x08004a19
 800495c:	08004a19 	.word	0x08004a19
 8004960:	08004a19 	.word	0x08004a19
 8004964:	08004a19 	.word	0x08004a19
 8004968:	08004a19 	.word	0x08004a19
 800496c:	08004a19 	.word	0x08004a19
 8004970:	08004a19 	.word	0x08004a19
 8004974:	08004a19 	.word	0x08004a19
 8004978:	08004a19 	.word	0x08004a19
 800497c:	08004a19 	.word	0x08004a19
 8004980:	08004a19 	.word	0x08004a19
 8004984:	08004a19 	.word	0x08004a19
 8004988:	08004a19 	.word	0x08004a19
 800498c:	08004a19 	.word	0x08004a19
 8004990:	08004a19 	.word	0x08004a19
 8004994:	08004a19 	.word	0x08004a19
 8004998:	08004a19 	.word	0x08004a19
 800499c:	08004a19 	.word	0x08004a19
 80049a0:	08004a19 	.word	0x08004a19
 80049a4:	080049f5 	.word	0x080049f5
 80049a8:	08004a19 	.word	0x08004a19
 80049ac:	08004a19 	.word	0x08004a19
 80049b0:	08004a19 	.word	0x08004a19
 80049b4:	08004a19 	.word	0x08004a19
 80049b8:	08004a19 	.word	0x08004a19
 80049bc:	08004a19 	.word	0x08004a19
 80049c0:	08004a19 	.word	0x08004a19
 80049c4:	08004a19 	.word	0x08004a19
 80049c8:	08004a19 	.word	0x08004a19
 80049cc:	080049ef 	.word	0x080049ef
 80049d0:	2b64      	cmp	r3, #100	; 0x64
 80049d2:	d009      	beq.n	80049e8 <Save_EEPROM+0xbfc>
 80049d4:	e020      	b.n	8004a18 <Save_EEPROM+0xc2c>
 80049d6:	2301      	movs	r3, #1
 80049d8:	743b      	strb	r3, [r7, #16]
 80049da:	e01f      	b.n	8004a1c <Save_EEPROM+0xc30>
 80049dc:	2302      	movs	r3, #2
 80049de:	743b      	strb	r3, [r7, #16]
 80049e0:	e01c      	b.n	8004a1c <Save_EEPROM+0xc30>
 80049e2:	2303      	movs	r3, #3
 80049e4:	743b      	strb	r3, [r7, #16]
 80049e6:	e019      	b.n	8004a1c <Save_EEPROM+0xc30>
 80049e8:	2304      	movs	r3, #4
 80049ea:	743b      	strb	r3, [r7, #16]
 80049ec:	e016      	b.n	8004a1c <Save_EEPROM+0xc30>
 80049ee:	2305      	movs	r3, #5
 80049f0:	743b      	strb	r3, [r7, #16]
 80049f2:	e013      	b.n	8004a1c <Save_EEPROM+0xc30>
 80049f4:	2306      	movs	r3, #6
 80049f6:	743b      	strb	r3, [r7, #16]
 80049f8:	e010      	b.n	8004a1c <Save_EEPROM+0xc30>
 80049fa:	2307      	movs	r3, #7
 80049fc:	743b      	strb	r3, [r7, #16]
 80049fe:	e00d      	b.n	8004a1c <Save_EEPROM+0xc30>
 8004a00:	2308      	movs	r3, #8
 8004a02:	743b      	strb	r3, [r7, #16]
 8004a04:	e00a      	b.n	8004a1c <Save_EEPROM+0xc30>
 8004a06:	2309      	movs	r3, #9
 8004a08:	743b      	strb	r3, [r7, #16]
 8004a0a:	e007      	b.n	8004a1c <Save_EEPROM+0xc30>
 8004a0c:	230a      	movs	r3, #10
 8004a0e:	743b      	strb	r3, [r7, #16]
 8004a10:	e004      	b.n	8004a1c <Save_EEPROM+0xc30>
 8004a12:	230b      	movs	r3, #11
 8004a14:	743b      	strb	r3, [r7, #16]
 8004a16:	e001      	b.n	8004a1c <Save_EEPROM+0xc30>
 8004a18:	2300      	movs	r3, #0
 8004a1a:	743b      	strb	r3, [r7, #16]
 8004a1c:	bf00      	nop
	__SAVE_FREQ(buffer[9], Per_CAN[Analog_9_12]);
 8004a1e:	4b54      	ldr	r3, [pc, #336]	; (8004b70 <Save_EEPROM+0xd84>)
 8004a20:	889b      	ldrh	r3, [r3, #4]
 8004a22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a26:	f000 8082 	beq.w	8004b2e <Save_EEPROM+0xd42>
 8004a2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a2e:	f300 80a1 	bgt.w	8004b74 <Save_EEPROM+0xd88>
 8004a32:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004a36:	d07d      	beq.n	8004b34 <Save_EEPROM+0xd48>
 8004a38:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004a3c:	f300 809a 	bgt.w	8004b74 <Save_EEPROM+0xd88>
 8004a40:	2bc8      	cmp	r3, #200	; 0xc8
 8004a42:	d07a      	beq.n	8004b3a <Save_EEPROM+0xd4e>
 8004a44:	2bc8      	cmp	r3, #200	; 0xc8
 8004a46:	f300 8095 	bgt.w	8004b74 <Save_EEPROM+0xd88>
 8004a4a:	2b32      	cmp	r3, #50	; 0x32
 8004a4c:	dc6c      	bgt.n	8004b28 <Save_EEPROM+0xd3c>
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	f2c0 8090 	blt.w	8004b74 <Save_EEPROM+0xd88>
 8004a54:	3b02      	subs	r3, #2
 8004a56:	2b30      	cmp	r3, #48	; 0x30
 8004a58:	f200 808c 	bhi.w	8004b74 <Save_EEPROM+0xd88>
 8004a5c:	a201      	add	r2, pc, #4	; (adr r2, 8004a64 <Save_EEPROM+0xc78>)
 8004a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a62:	bf00      	nop
 8004a64:	08004b6b 	.word	0x08004b6b
 8004a68:	08004b65 	.word	0x08004b65
 8004a6c:	08004b75 	.word	0x08004b75
 8004a70:	08004b5f 	.word	0x08004b5f
 8004a74:	08004b75 	.word	0x08004b75
 8004a78:	08004b75 	.word	0x08004b75
 8004a7c:	08004b75 	.word	0x08004b75
 8004a80:	08004b75 	.word	0x08004b75
 8004a84:	08004b59 	.word	0x08004b59
 8004a88:	08004b75 	.word	0x08004b75
 8004a8c:	08004b75 	.word	0x08004b75
 8004a90:	08004b75 	.word	0x08004b75
 8004a94:	08004b75 	.word	0x08004b75
 8004a98:	08004b75 	.word	0x08004b75
 8004a9c:	08004b75 	.word	0x08004b75
 8004aa0:	08004b75 	.word	0x08004b75
 8004aa4:	08004b75 	.word	0x08004b75
 8004aa8:	08004b75 	.word	0x08004b75
 8004aac:	08004b53 	.word	0x08004b53
 8004ab0:	08004b75 	.word	0x08004b75
 8004ab4:	08004b75 	.word	0x08004b75
 8004ab8:	08004b75 	.word	0x08004b75
 8004abc:	08004b75 	.word	0x08004b75
 8004ac0:	08004b75 	.word	0x08004b75
 8004ac4:	08004b75 	.word	0x08004b75
 8004ac8:	08004b75 	.word	0x08004b75
 8004acc:	08004b75 	.word	0x08004b75
 8004ad0:	08004b75 	.word	0x08004b75
 8004ad4:	08004b75 	.word	0x08004b75
 8004ad8:	08004b75 	.word	0x08004b75
 8004adc:	08004b75 	.word	0x08004b75
 8004ae0:	08004b75 	.word	0x08004b75
 8004ae4:	08004b75 	.word	0x08004b75
 8004ae8:	08004b75 	.word	0x08004b75
 8004aec:	08004b75 	.word	0x08004b75
 8004af0:	08004b75 	.word	0x08004b75
 8004af4:	08004b75 	.word	0x08004b75
 8004af8:	08004b75 	.word	0x08004b75
 8004afc:	08004b4d 	.word	0x08004b4d
 8004b00:	08004b75 	.word	0x08004b75
 8004b04:	08004b75 	.word	0x08004b75
 8004b08:	08004b75 	.word	0x08004b75
 8004b0c:	08004b75 	.word	0x08004b75
 8004b10:	08004b75 	.word	0x08004b75
 8004b14:	08004b75 	.word	0x08004b75
 8004b18:	08004b75 	.word	0x08004b75
 8004b1c:	08004b75 	.word	0x08004b75
 8004b20:	08004b75 	.word	0x08004b75
 8004b24:	08004b47 	.word	0x08004b47
 8004b28:	2b64      	cmp	r3, #100	; 0x64
 8004b2a:	d009      	beq.n	8004b40 <Save_EEPROM+0xd54>
 8004b2c:	e022      	b.n	8004b74 <Save_EEPROM+0xd88>
 8004b2e:	2301      	movs	r3, #1
 8004b30:	747b      	strb	r3, [r7, #17]
 8004b32:	e021      	b.n	8004b78 <Save_EEPROM+0xd8c>
 8004b34:	2302      	movs	r3, #2
 8004b36:	747b      	strb	r3, [r7, #17]
 8004b38:	e01e      	b.n	8004b78 <Save_EEPROM+0xd8c>
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	747b      	strb	r3, [r7, #17]
 8004b3e:	e01b      	b.n	8004b78 <Save_EEPROM+0xd8c>
 8004b40:	2304      	movs	r3, #4
 8004b42:	747b      	strb	r3, [r7, #17]
 8004b44:	e018      	b.n	8004b78 <Save_EEPROM+0xd8c>
 8004b46:	2305      	movs	r3, #5
 8004b48:	747b      	strb	r3, [r7, #17]
 8004b4a:	e015      	b.n	8004b78 <Save_EEPROM+0xd8c>
 8004b4c:	2306      	movs	r3, #6
 8004b4e:	747b      	strb	r3, [r7, #17]
 8004b50:	e012      	b.n	8004b78 <Save_EEPROM+0xd8c>
 8004b52:	2307      	movs	r3, #7
 8004b54:	747b      	strb	r3, [r7, #17]
 8004b56:	e00f      	b.n	8004b78 <Save_EEPROM+0xd8c>
 8004b58:	2308      	movs	r3, #8
 8004b5a:	747b      	strb	r3, [r7, #17]
 8004b5c:	e00c      	b.n	8004b78 <Save_EEPROM+0xd8c>
 8004b5e:	2309      	movs	r3, #9
 8004b60:	747b      	strb	r3, [r7, #17]
 8004b62:	e009      	b.n	8004b78 <Save_EEPROM+0xd8c>
 8004b64:	230a      	movs	r3, #10
 8004b66:	747b      	strb	r3, [r7, #17]
 8004b68:	e006      	b.n	8004b78 <Save_EEPROM+0xd8c>
 8004b6a:	230b      	movs	r3, #11
 8004b6c:	747b      	strb	r3, [r7, #17]
 8004b6e:	e003      	b.n	8004b78 <Save_EEPROM+0xd8c>
 8004b70:	200006fc 	.word	0x200006fc
 8004b74:	2300      	movs	r3, #0
 8004b76:	747b      	strb	r3, [r7, #17]
 8004b78:	bf00      	nop
	__SAVE_FREQ(buffer[10], Per_CAN[RTC_Msg]);
 8004b7a:	4b6a      	ldr	r3, [pc, #424]	; (8004d24 <Save_EEPROM+0xf38>)
 8004b7c:	88db      	ldrh	r3, [r3, #6]
 8004b7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b82:	f000 8082 	beq.w	8004c8a <Save_EEPROM+0xe9e>
 8004b86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b8a:	f300 809f 	bgt.w	8004ccc <Save_EEPROM+0xee0>
 8004b8e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004b92:	d07d      	beq.n	8004c90 <Save_EEPROM+0xea4>
 8004b94:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004b98:	f300 8098 	bgt.w	8004ccc <Save_EEPROM+0xee0>
 8004b9c:	2bc8      	cmp	r3, #200	; 0xc8
 8004b9e:	d07a      	beq.n	8004c96 <Save_EEPROM+0xeaa>
 8004ba0:	2bc8      	cmp	r3, #200	; 0xc8
 8004ba2:	f300 8093 	bgt.w	8004ccc <Save_EEPROM+0xee0>
 8004ba6:	2b32      	cmp	r3, #50	; 0x32
 8004ba8:	dc6c      	bgt.n	8004c84 <Save_EEPROM+0xe98>
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	f2c0 808e 	blt.w	8004ccc <Save_EEPROM+0xee0>
 8004bb0:	3b02      	subs	r3, #2
 8004bb2:	2b30      	cmp	r3, #48	; 0x30
 8004bb4:	f200 808a 	bhi.w	8004ccc <Save_EEPROM+0xee0>
 8004bb8:	a201      	add	r2, pc, #4	; (adr r2, 8004bc0 <Save_EEPROM+0xdd4>)
 8004bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bbe:	bf00      	nop
 8004bc0:	08004cc7 	.word	0x08004cc7
 8004bc4:	08004cc1 	.word	0x08004cc1
 8004bc8:	08004ccd 	.word	0x08004ccd
 8004bcc:	08004cbb 	.word	0x08004cbb
 8004bd0:	08004ccd 	.word	0x08004ccd
 8004bd4:	08004ccd 	.word	0x08004ccd
 8004bd8:	08004ccd 	.word	0x08004ccd
 8004bdc:	08004ccd 	.word	0x08004ccd
 8004be0:	08004cb5 	.word	0x08004cb5
 8004be4:	08004ccd 	.word	0x08004ccd
 8004be8:	08004ccd 	.word	0x08004ccd
 8004bec:	08004ccd 	.word	0x08004ccd
 8004bf0:	08004ccd 	.word	0x08004ccd
 8004bf4:	08004ccd 	.word	0x08004ccd
 8004bf8:	08004ccd 	.word	0x08004ccd
 8004bfc:	08004ccd 	.word	0x08004ccd
 8004c00:	08004ccd 	.word	0x08004ccd
 8004c04:	08004ccd 	.word	0x08004ccd
 8004c08:	08004caf 	.word	0x08004caf
 8004c0c:	08004ccd 	.word	0x08004ccd
 8004c10:	08004ccd 	.word	0x08004ccd
 8004c14:	08004ccd 	.word	0x08004ccd
 8004c18:	08004ccd 	.word	0x08004ccd
 8004c1c:	08004ccd 	.word	0x08004ccd
 8004c20:	08004ccd 	.word	0x08004ccd
 8004c24:	08004ccd 	.word	0x08004ccd
 8004c28:	08004ccd 	.word	0x08004ccd
 8004c2c:	08004ccd 	.word	0x08004ccd
 8004c30:	08004ccd 	.word	0x08004ccd
 8004c34:	08004ccd 	.word	0x08004ccd
 8004c38:	08004ccd 	.word	0x08004ccd
 8004c3c:	08004ccd 	.word	0x08004ccd
 8004c40:	08004ccd 	.word	0x08004ccd
 8004c44:	08004ccd 	.word	0x08004ccd
 8004c48:	08004ccd 	.word	0x08004ccd
 8004c4c:	08004ccd 	.word	0x08004ccd
 8004c50:	08004ccd 	.word	0x08004ccd
 8004c54:	08004ccd 	.word	0x08004ccd
 8004c58:	08004ca9 	.word	0x08004ca9
 8004c5c:	08004ccd 	.word	0x08004ccd
 8004c60:	08004ccd 	.word	0x08004ccd
 8004c64:	08004ccd 	.word	0x08004ccd
 8004c68:	08004ccd 	.word	0x08004ccd
 8004c6c:	08004ccd 	.word	0x08004ccd
 8004c70:	08004ccd 	.word	0x08004ccd
 8004c74:	08004ccd 	.word	0x08004ccd
 8004c78:	08004ccd 	.word	0x08004ccd
 8004c7c:	08004ccd 	.word	0x08004ccd
 8004c80:	08004ca3 	.word	0x08004ca3
 8004c84:	2b64      	cmp	r3, #100	; 0x64
 8004c86:	d009      	beq.n	8004c9c <Save_EEPROM+0xeb0>
 8004c88:	e020      	b.n	8004ccc <Save_EEPROM+0xee0>
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	74bb      	strb	r3, [r7, #18]
 8004c8e:	e01f      	b.n	8004cd0 <Save_EEPROM+0xee4>
 8004c90:	2302      	movs	r3, #2
 8004c92:	74bb      	strb	r3, [r7, #18]
 8004c94:	e01c      	b.n	8004cd0 <Save_EEPROM+0xee4>
 8004c96:	2303      	movs	r3, #3
 8004c98:	74bb      	strb	r3, [r7, #18]
 8004c9a:	e019      	b.n	8004cd0 <Save_EEPROM+0xee4>
 8004c9c:	2304      	movs	r3, #4
 8004c9e:	74bb      	strb	r3, [r7, #18]
 8004ca0:	e016      	b.n	8004cd0 <Save_EEPROM+0xee4>
 8004ca2:	2305      	movs	r3, #5
 8004ca4:	74bb      	strb	r3, [r7, #18]
 8004ca6:	e013      	b.n	8004cd0 <Save_EEPROM+0xee4>
 8004ca8:	2306      	movs	r3, #6
 8004caa:	74bb      	strb	r3, [r7, #18]
 8004cac:	e010      	b.n	8004cd0 <Save_EEPROM+0xee4>
 8004cae:	2307      	movs	r3, #7
 8004cb0:	74bb      	strb	r3, [r7, #18]
 8004cb2:	e00d      	b.n	8004cd0 <Save_EEPROM+0xee4>
 8004cb4:	2308      	movs	r3, #8
 8004cb6:	74bb      	strb	r3, [r7, #18]
 8004cb8:	e00a      	b.n	8004cd0 <Save_EEPROM+0xee4>
 8004cba:	2309      	movs	r3, #9
 8004cbc:	74bb      	strb	r3, [r7, #18]
 8004cbe:	e007      	b.n	8004cd0 <Save_EEPROM+0xee4>
 8004cc0:	230a      	movs	r3, #10
 8004cc2:	74bb      	strb	r3, [r7, #18]
 8004cc4:	e004      	b.n	8004cd0 <Save_EEPROM+0xee4>
 8004cc6:	230b      	movs	r3, #11
 8004cc8:	74bb      	strb	r3, [r7, #18]
 8004cca:	e001      	b.n	8004cd0 <Save_EEPROM+0xee4>
 8004ccc:	2300      	movs	r3, #0
 8004cce:	74bb      	strb	r3, [r7, #18]
 8004cd0:	bf00      	nop

	buffer[11] = Input_Config;
 8004cd2:	4b15      	ldr	r3, [pc, #84]	; (8004d28 <Save_EEPROM+0xf3c>)
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	74fb      	strb	r3, [r7, #19]
	buffer[12] = Threshold_RPM >> 8;
 8004cd8:	4b14      	ldr	r3, [pc, #80]	; (8004d2c <Save_EEPROM+0xf40>)
 8004cda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cde:	121b      	asrs	r3, r3, #8
 8004ce0:	b21b      	sxth	r3, r3
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	753b      	strb	r3, [r7, #20]
	buffer[13] = Threshold_RPM & 0xff;
 8004ce6:	4b11      	ldr	r3, [pc, #68]	; (8004d2c <Save_EEPROM+0xf40>)
 8004ce8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	757b      	strb	r3, [r7, #21]
	buffer[14] = Threshold_Speed >> 8;
 8004cf0:	4b0f      	ldr	r3, [pc, #60]	; (8004d30 <Save_EEPROM+0xf44>)
 8004cf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004cf6:	121b      	asrs	r3, r3, #8
 8004cf8:	b21b      	sxth	r3, r3
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	75bb      	strb	r3, [r7, #22]
	buffer[15] = Threshold_Speed & 0xff;
 8004cfe:	4b0c      	ldr	r3, [pc, #48]	; (8004d30 <Save_EEPROM+0xf44>)
 8004d00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	75fb      	strb	r3, [r7, #23]

	return HAL_I2C_Master_Transmit(hi2c, 0xA0, buffer, EEPROM_BUFFER_SIZE, 5);
 8004d08:	f107 0208 	add.w	r2, r7, #8
 8004d0c:	2305      	movs	r3, #5
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	2310      	movs	r3, #16
 8004d12:	21a0      	movs	r1, #160	; 0xa0
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f003 ff81 	bl	8008c1c <HAL_I2C_Master_Transmit>
 8004d1a:	4603      	mov	r3, r0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3718      	adds	r7, #24
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	200006fc 	.word	0x200006fc
 8004d28:	200006f8 	.word	0x200006f8
 8004d2c:	20001c5c 	.word	0x20001c5c
 8004d30:	20001a60 	.word	0x20001a60

08004d34 <Principal_Init>:

void Principal_Init(CAN_HandleTypeDef* hcan, I2C_HandleTypeDef* hi2c, TIM_HandleTypeDef* htim)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
	if(Load_EEPROM(hi2c) != HAL_OK)
 8004d40:	68b8      	ldr	r0, [r7, #8]
 8004d42:	f7fe fc93 	bl	800366c <Load_EEPROM>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d001      	beq.n	8004d50 <Principal_Init+0x1c>
		Principal_Hard_Code_Config();
 8004d4c:	f000 fc6c 	bl	8005628 <Principal_Hard_Code_Config>

	if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) == RTC_STORE_DATA)
 8004d50:	2101      	movs	r1, #1
 8004d52:	4813      	ldr	r0, [pc, #76]	; (8004da0 <Principal_Init+0x6c>)
 8004d54:	f007 fc1e 	bl	800c594 <HAL_RTCEx_BKUPRead>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	f24e 325c 	movw	r2, #58204	; 0xe35c
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d103      	bne.n	8004d6a <Principal_Init+0x36>
		Flag_RTC = RTC_OK;
 8004d62:	4b10      	ldr	r3, [pc, #64]	; (8004da4 <Principal_Init+0x70>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	701a      	strb	r2, [r3, #0]
 8004d68:	e002      	b.n	8004d70 <Principal_Init+0x3c>
	else
		Flag_RTC = RTC_Lost;
 8004d6a:	4b0e      	ldr	r3, [pc, #56]	; (8004da4 <Principal_Init+0x70>)
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	701a      	strb	r2, [r3, #0]

	Principal_Datalogger_Init(&Fatfs_Struct);
 8004d70:	480d      	ldr	r0, [pc, #52]	; (8004da8 <Principal_Init+0x74>)
 8004d72:	f000 fc75 	bl	8005660 <Principal_Datalogger_Init>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADC_Buffer[6], 7);
 8004d76:	2207      	movs	r2, #7
 8004d78:	490c      	ldr	r1, [pc, #48]	; (8004dac <Principal_Init+0x78>)
 8004d7a:	480d      	ldr	r0, [pc, #52]	; (8004db0 <Principal_Init+0x7c>)
 8004d7c:	f001 fcec 	bl	8006758 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) &ADC_Buffer[0], 6);
 8004d80:	2206      	movs	r2, #6
 8004d82:	490c      	ldr	r1, [pc, #48]	; (8004db4 <Principal_Init+0x80>)
 8004d84:	480c      	ldr	r0, [pc, #48]	; (8004db8 <Principal_Init+0x84>)
 8004d86:	f001 fce7 	bl	8006758 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f009 fae6 	bl	800e35c <HAL_TIM_Base_Start_IT>

	Principal_CAN_Start(hcan);
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f7fe fbc3 	bl	800351c <Principal_CAN_Start>
}
 8004d96:	bf00      	nop
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	20001b44 	.word	0x20001b44
 8004da4:	20001a52 	.word	0x20001a52
 8004da8:	200009d8 	.word	0x200009d8
 8004dac:	20000710 	.word	0x20000710
 8004db0:	20001a94 	.word	0x20001a94
 8004db4:	20000704 	.word	0x20000704
 8004db8:	20000720 	.word	0x20000720

08004dbc <Principal_Receive_Config>:

HAL_StatusTypeDef Principal_Receive_Config(I2C_HandleTypeDef* hi2c, uint8_t* data, uint32_t length)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
	HAL_SD_StateTypeDef retVal = HAL_OK;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	75fb      	strb	r3, [r7, #23]

	switch(data[0])
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	2b03      	cmp	r3, #3
 8004dd2:	f200 840b 	bhi.w	80055ec <Principal_Receive_Config+0x830>
 8004dd6:	a201      	add	r2, pc, #4	; (adr r2, 8004ddc <Principal_Receive_Config+0x20>)
 8004dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ddc:	08004ded 	.word	0x08004ded
 8004de0:	08005281 	.word	0x08005281
 8004de4:	08005535 	.word	0x08005535
 8004de8:	0800558f 	.word	0x0800558f
	{
		case 0:
			if(length != 8)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b08      	cmp	r3, #8
 8004df0:	f040 83fe 	bne.w	80055f0 <Principal_Receive_Config+0x834>
				break;

			__LOAD_FREQ(data[1], Per_Msg[Analog_1_4]);
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	3301      	adds	r3, #1
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	2b0a      	cmp	r3, #10
 8004dfe:	d847      	bhi.n	8004e90 <Principal_Receive_Config+0xd4>
 8004e00:	a201      	add	r2, pc, #4	; (adr r2, 8004e08 <Principal_Receive_Config+0x4c>)
 8004e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e06:	bf00      	nop
 8004e08:	08004e35 	.word	0x08004e35
 8004e0c:	08004e3f 	.word	0x08004e3f
 8004e10:	08004e49 	.word	0x08004e49
 8004e14:	08004e51 	.word	0x08004e51
 8004e18:	08004e59 	.word	0x08004e59
 8004e1c:	08004e61 	.word	0x08004e61
 8004e20:	08004e69 	.word	0x08004e69
 8004e24:	08004e71 	.word	0x08004e71
 8004e28:	08004e79 	.word	0x08004e79
 8004e2c:	08004e81 	.word	0x08004e81
 8004e30:	08004e89 	.word	0x08004e89
 8004e34:	4ba8      	ldr	r3, [pc, #672]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8004e36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e3a:	801a      	strh	r2, [r3, #0]
 8004e3c:	e02b      	b.n	8004e96 <Principal_Receive_Config+0xda>
 8004e3e:	4ba6      	ldr	r3, [pc, #664]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8004e40:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004e44:	801a      	strh	r2, [r3, #0]
 8004e46:	e026      	b.n	8004e96 <Principal_Receive_Config+0xda>
 8004e48:	4ba3      	ldr	r3, [pc, #652]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8004e4a:	22c8      	movs	r2, #200	; 0xc8
 8004e4c:	801a      	strh	r2, [r3, #0]
 8004e4e:	e022      	b.n	8004e96 <Principal_Receive_Config+0xda>
 8004e50:	4ba1      	ldr	r3, [pc, #644]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8004e52:	2264      	movs	r2, #100	; 0x64
 8004e54:	801a      	strh	r2, [r3, #0]
 8004e56:	e01e      	b.n	8004e96 <Principal_Receive_Config+0xda>
 8004e58:	4b9f      	ldr	r3, [pc, #636]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8004e5a:	2232      	movs	r2, #50	; 0x32
 8004e5c:	801a      	strh	r2, [r3, #0]
 8004e5e:	e01a      	b.n	8004e96 <Principal_Receive_Config+0xda>
 8004e60:	4b9d      	ldr	r3, [pc, #628]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8004e62:	2228      	movs	r2, #40	; 0x28
 8004e64:	801a      	strh	r2, [r3, #0]
 8004e66:	e016      	b.n	8004e96 <Principal_Receive_Config+0xda>
 8004e68:	4b9b      	ldr	r3, [pc, #620]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8004e6a:	2214      	movs	r2, #20
 8004e6c:	801a      	strh	r2, [r3, #0]
 8004e6e:	e012      	b.n	8004e96 <Principal_Receive_Config+0xda>
 8004e70:	4b99      	ldr	r3, [pc, #612]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8004e72:	220a      	movs	r2, #10
 8004e74:	801a      	strh	r2, [r3, #0]
 8004e76:	e00e      	b.n	8004e96 <Principal_Receive_Config+0xda>
 8004e78:	4b97      	ldr	r3, [pc, #604]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8004e7a:	2205      	movs	r2, #5
 8004e7c:	801a      	strh	r2, [r3, #0]
 8004e7e:	e00a      	b.n	8004e96 <Principal_Receive_Config+0xda>
 8004e80:	4b95      	ldr	r3, [pc, #596]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8004e82:	2203      	movs	r2, #3
 8004e84:	801a      	strh	r2, [r3, #0]
 8004e86:	e006      	b.n	8004e96 <Principal_Receive_Config+0xda>
 8004e88:	4b93      	ldr	r3, [pc, #588]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	801a      	strh	r2, [r3, #0]
 8004e8e:	e002      	b.n	8004e96 <Principal_Receive_Config+0xda>
 8004e90:	4b91      	ldr	r3, [pc, #580]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	801a      	strh	r2, [r3, #0]
 8004e96:	bf00      	nop
			__LOAD_FREQ(data[2], Per_Msg[Analog_5_8]);
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	3302      	adds	r3, #2
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	2b0a      	cmp	r3, #10
 8004ea2:	d847      	bhi.n	8004f34 <Principal_Receive_Config+0x178>
 8004ea4:	a201      	add	r2, pc, #4	; (adr r2, 8004eac <Principal_Receive_Config+0xf0>)
 8004ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eaa:	bf00      	nop
 8004eac:	08004ed9 	.word	0x08004ed9
 8004eb0:	08004ee3 	.word	0x08004ee3
 8004eb4:	08004eed 	.word	0x08004eed
 8004eb8:	08004ef5 	.word	0x08004ef5
 8004ebc:	08004efd 	.word	0x08004efd
 8004ec0:	08004f05 	.word	0x08004f05
 8004ec4:	08004f0d 	.word	0x08004f0d
 8004ec8:	08004f15 	.word	0x08004f15
 8004ecc:	08004f1d 	.word	0x08004f1d
 8004ed0:	08004f25 	.word	0x08004f25
 8004ed4:	08004f2d 	.word	0x08004f2d
 8004ed8:	4b7f      	ldr	r3, [pc, #508]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8004eda:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ede:	805a      	strh	r2, [r3, #2]
 8004ee0:	e02b      	b.n	8004f3a <Principal_Receive_Config+0x17e>
 8004ee2:	4b7d      	ldr	r3, [pc, #500]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8004ee4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004ee8:	805a      	strh	r2, [r3, #2]
 8004eea:	e026      	b.n	8004f3a <Principal_Receive_Config+0x17e>
 8004eec:	4b7a      	ldr	r3, [pc, #488]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8004eee:	22c8      	movs	r2, #200	; 0xc8
 8004ef0:	805a      	strh	r2, [r3, #2]
 8004ef2:	e022      	b.n	8004f3a <Principal_Receive_Config+0x17e>
 8004ef4:	4b78      	ldr	r3, [pc, #480]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8004ef6:	2264      	movs	r2, #100	; 0x64
 8004ef8:	805a      	strh	r2, [r3, #2]
 8004efa:	e01e      	b.n	8004f3a <Principal_Receive_Config+0x17e>
 8004efc:	4b76      	ldr	r3, [pc, #472]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8004efe:	2232      	movs	r2, #50	; 0x32
 8004f00:	805a      	strh	r2, [r3, #2]
 8004f02:	e01a      	b.n	8004f3a <Principal_Receive_Config+0x17e>
 8004f04:	4b74      	ldr	r3, [pc, #464]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8004f06:	2228      	movs	r2, #40	; 0x28
 8004f08:	805a      	strh	r2, [r3, #2]
 8004f0a:	e016      	b.n	8004f3a <Principal_Receive_Config+0x17e>
 8004f0c:	4b72      	ldr	r3, [pc, #456]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8004f0e:	2214      	movs	r2, #20
 8004f10:	805a      	strh	r2, [r3, #2]
 8004f12:	e012      	b.n	8004f3a <Principal_Receive_Config+0x17e>
 8004f14:	4b70      	ldr	r3, [pc, #448]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8004f16:	220a      	movs	r2, #10
 8004f18:	805a      	strh	r2, [r3, #2]
 8004f1a:	e00e      	b.n	8004f3a <Principal_Receive_Config+0x17e>
 8004f1c:	4b6e      	ldr	r3, [pc, #440]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8004f1e:	2205      	movs	r2, #5
 8004f20:	805a      	strh	r2, [r3, #2]
 8004f22:	e00a      	b.n	8004f3a <Principal_Receive_Config+0x17e>
 8004f24:	4b6c      	ldr	r3, [pc, #432]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8004f26:	2203      	movs	r2, #3
 8004f28:	805a      	strh	r2, [r3, #2]
 8004f2a:	e006      	b.n	8004f3a <Principal_Receive_Config+0x17e>
 8004f2c:	4b6a      	ldr	r3, [pc, #424]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8004f2e:	2202      	movs	r2, #2
 8004f30:	805a      	strh	r2, [r3, #2]
 8004f32:	e002      	b.n	8004f3a <Principal_Receive_Config+0x17e>
 8004f34:	4b68      	ldr	r3, [pc, #416]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8004f36:	2200      	movs	r2, #0
 8004f38:	805a      	strh	r2, [r3, #2]
 8004f3a:	bf00      	nop
			__LOAD_FREQ(data[3], Per_Msg[Analog_9_12]);
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	3303      	adds	r3, #3
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	3b01      	subs	r3, #1
 8004f44:	2b0a      	cmp	r3, #10
 8004f46:	d847      	bhi.n	8004fd8 <Principal_Receive_Config+0x21c>
 8004f48:	a201      	add	r2, pc, #4	; (adr r2, 8004f50 <Principal_Receive_Config+0x194>)
 8004f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4e:	bf00      	nop
 8004f50:	08004f7d 	.word	0x08004f7d
 8004f54:	08004f87 	.word	0x08004f87
 8004f58:	08004f91 	.word	0x08004f91
 8004f5c:	08004f99 	.word	0x08004f99
 8004f60:	08004fa1 	.word	0x08004fa1
 8004f64:	08004fa9 	.word	0x08004fa9
 8004f68:	08004fb1 	.word	0x08004fb1
 8004f6c:	08004fb9 	.word	0x08004fb9
 8004f70:	08004fc1 	.word	0x08004fc1
 8004f74:	08004fc9 	.word	0x08004fc9
 8004f78:	08004fd1 	.word	0x08004fd1
 8004f7c:	4b56      	ldr	r3, [pc, #344]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8004f7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f82:	809a      	strh	r2, [r3, #4]
 8004f84:	e02b      	b.n	8004fde <Principal_Receive_Config+0x222>
 8004f86:	4b54      	ldr	r3, [pc, #336]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8004f88:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004f8c:	809a      	strh	r2, [r3, #4]
 8004f8e:	e026      	b.n	8004fde <Principal_Receive_Config+0x222>
 8004f90:	4b51      	ldr	r3, [pc, #324]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8004f92:	22c8      	movs	r2, #200	; 0xc8
 8004f94:	809a      	strh	r2, [r3, #4]
 8004f96:	e022      	b.n	8004fde <Principal_Receive_Config+0x222>
 8004f98:	4b4f      	ldr	r3, [pc, #316]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8004f9a:	2264      	movs	r2, #100	; 0x64
 8004f9c:	809a      	strh	r2, [r3, #4]
 8004f9e:	e01e      	b.n	8004fde <Principal_Receive_Config+0x222>
 8004fa0:	4b4d      	ldr	r3, [pc, #308]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8004fa2:	2232      	movs	r2, #50	; 0x32
 8004fa4:	809a      	strh	r2, [r3, #4]
 8004fa6:	e01a      	b.n	8004fde <Principal_Receive_Config+0x222>
 8004fa8:	4b4b      	ldr	r3, [pc, #300]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8004faa:	2228      	movs	r2, #40	; 0x28
 8004fac:	809a      	strh	r2, [r3, #4]
 8004fae:	e016      	b.n	8004fde <Principal_Receive_Config+0x222>
 8004fb0:	4b49      	ldr	r3, [pc, #292]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8004fb2:	2214      	movs	r2, #20
 8004fb4:	809a      	strh	r2, [r3, #4]
 8004fb6:	e012      	b.n	8004fde <Principal_Receive_Config+0x222>
 8004fb8:	4b47      	ldr	r3, [pc, #284]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8004fba:	220a      	movs	r2, #10
 8004fbc:	809a      	strh	r2, [r3, #4]
 8004fbe:	e00e      	b.n	8004fde <Principal_Receive_Config+0x222>
 8004fc0:	4b45      	ldr	r3, [pc, #276]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8004fc2:	2205      	movs	r2, #5
 8004fc4:	809a      	strh	r2, [r3, #4]
 8004fc6:	e00a      	b.n	8004fde <Principal_Receive_Config+0x222>
 8004fc8:	4b43      	ldr	r3, [pc, #268]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8004fca:	2203      	movs	r2, #3
 8004fcc:	809a      	strh	r2, [r3, #4]
 8004fce:	e006      	b.n	8004fde <Principal_Receive_Config+0x222>
 8004fd0:	4b41      	ldr	r3, [pc, #260]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	809a      	strh	r2, [r3, #4]
 8004fd6:	e002      	b.n	8004fde <Principal_Receive_Config+0x222>
 8004fd8:	4b3f      	ldr	r3, [pc, #252]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	809a      	strh	r2, [r3, #4]
 8004fde:	bf00      	nop
			__LOAD_FREQ(data[4], Per_Msg[RTC_Msg]);
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	2b0a      	cmp	r3, #10
 8004fea:	d847      	bhi.n	800507c <Principal_Receive_Config+0x2c0>
 8004fec:	a201      	add	r2, pc, #4	; (adr r2, 8004ff4 <Principal_Receive_Config+0x238>)
 8004fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff2:	bf00      	nop
 8004ff4:	08005021 	.word	0x08005021
 8004ff8:	0800502b 	.word	0x0800502b
 8004ffc:	08005035 	.word	0x08005035
 8005000:	0800503d 	.word	0x0800503d
 8005004:	08005045 	.word	0x08005045
 8005008:	0800504d 	.word	0x0800504d
 800500c:	08005055 	.word	0x08005055
 8005010:	0800505d 	.word	0x0800505d
 8005014:	08005065 	.word	0x08005065
 8005018:	0800506d 	.word	0x0800506d
 800501c:	08005075 	.word	0x08005075
 8005020:	4b2d      	ldr	r3, [pc, #180]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8005022:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005026:	80da      	strh	r2, [r3, #6]
 8005028:	e02b      	b.n	8005082 <Principal_Receive_Config+0x2c6>
 800502a:	4b2b      	ldr	r3, [pc, #172]	; (80050d8 <Principal_Receive_Config+0x31c>)
 800502c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005030:	80da      	strh	r2, [r3, #6]
 8005032:	e026      	b.n	8005082 <Principal_Receive_Config+0x2c6>
 8005034:	4b28      	ldr	r3, [pc, #160]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8005036:	22c8      	movs	r2, #200	; 0xc8
 8005038:	80da      	strh	r2, [r3, #6]
 800503a:	e022      	b.n	8005082 <Principal_Receive_Config+0x2c6>
 800503c:	4b26      	ldr	r3, [pc, #152]	; (80050d8 <Principal_Receive_Config+0x31c>)
 800503e:	2264      	movs	r2, #100	; 0x64
 8005040:	80da      	strh	r2, [r3, #6]
 8005042:	e01e      	b.n	8005082 <Principal_Receive_Config+0x2c6>
 8005044:	4b24      	ldr	r3, [pc, #144]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8005046:	2232      	movs	r2, #50	; 0x32
 8005048:	80da      	strh	r2, [r3, #6]
 800504a:	e01a      	b.n	8005082 <Principal_Receive_Config+0x2c6>
 800504c:	4b22      	ldr	r3, [pc, #136]	; (80050d8 <Principal_Receive_Config+0x31c>)
 800504e:	2228      	movs	r2, #40	; 0x28
 8005050:	80da      	strh	r2, [r3, #6]
 8005052:	e016      	b.n	8005082 <Principal_Receive_Config+0x2c6>
 8005054:	4b20      	ldr	r3, [pc, #128]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8005056:	2214      	movs	r2, #20
 8005058:	80da      	strh	r2, [r3, #6]
 800505a:	e012      	b.n	8005082 <Principal_Receive_Config+0x2c6>
 800505c:	4b1e      	ldr	r3, [pc, #120]	; (80050d8 <Principal_Receive_Config+0x31c>)
 800505e:	220a      	movs	r2, #10
 8005060:	80da      	strh	r2, [r3, #6]
 8005062:	e00e      	b.n	8005082 <Principal_Receive_Config+0x2c6>
 8005064:	4b1c      	ldr	r3, [pc, #112]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8005066:	2205      	movs	r2, #5
 8005068:	80da      	strh	r2, [r3, #6]
 800506a:	e00a      	b.n	8005082 <Principal_Receive_Config+0x2c6>
 800506c:	4b1a      	ldr	r3, [pc, #104]	; (80050d8 <Principal_Receive_Config+0x31c>)
 800506e:	2203      	movs	r2, #3
 8005070:	80da      	strh	r2, [r3, #6]
 8005072:	e006      	b.n	8005082 <Principal_Receive_Config+0x2c6>
 8005074:	4b18      	ldr	r3, [pc, #96]	; (80050d8 <Principal_Receive_Config+0x31c>)
 8005076:	2202      	movs	r2, #2
 8005078:	80da      	strh	r2, [r3, #6]
 800507a:	e002      	b.n	8005082 <Principal_Receive_Config+0x2c6>
 800507c:	4b16      	ldr	r3, [pc, #88]	; (80050d8 <Principal_Receive_Config+0x31c>)
 800507e:	2200      	movs	r2, #0
 8005080:	80da      	strh	r2, [r3, #6]
 8005082:	bf00      	nop
			__LOAD_FREQ(data[5], Per_Msg[Verify_Msg]);
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	3305      	adds	r3, #5
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	3b01      	subs	r3, #1
 800508c:	2b0a      	cmp	r3, #10
 800508e:	d849      	bhi.n	8005124 <Principal_Receive_Config+0x368>
 8005090:	a201      	add	r2, pc, #4	; (adr r2, 8005098 <Principal_Receive_Config+0x2dc>)
 8005092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005096:	bf00      	nop
 8005098:	080050c5 	.word	0x080050c5
 800509c:	080050cf 	.word	0x080050cf
 80050a0:	080050dd 	.word	0x080050dd
 80050a4:	080050e5 	.word	0x080050e5
 80050a8:	080050ed 	.word	0x080050ed
 80050ac:	080050f5 	.word	0x080050f5
 80050b0:	080050fd 	.word	0x080050fd
 80050b4:	08005105 	.word	0x08005105
 80050b8:	0800510d 	.word	0x0800510d
 80050bc:	08005115 	.word	0x08005115
 80050c0:	0800511d 	.word	0x0800511d
 80050c4:	4b04      	ldr	r3, [pc, #16]	; (80050d8 <Principal_Receive_Config+0x31c>)
 80050c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050ca:	811a      	strh	r2, [r3, #8]
 80050cc:	e02d      	b.n	800512a <Principal_Receive_Config+0x36e>
 80050ce:	4b02      	ldr	r3, [pc, #8]	; (80050d8 <Principal_Receive_Config+0x31c>)
 80050d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80050d4:	811a      	strh	r2, [r3, #8]
 80050d6:	e028      	b.n	800512a <Principal_Receive_Config+0x36e>
 80050d8:	20002e7c 	.word	0x20002e7c
 80050dc:	4baa      	ldr	r3, [pc, #680]	; (8005388 <Principal_Receive_Config+0x5cc>)
 80050de:	22c8      	movs	r2, #200	; 0xc8
 80050e0:	811a      	strh	r2, [r3, #8]
 80050e2:	e022      	b.n	800512a <Principal_Receive_Config+0x36e>
 80050e4:	4ba8      	ldr	r3, [pc, #672]	; (8005388 <Principal_Receive_Config+0x5cc>)
 80050e6:	2264      	movs	r2, #100	; 0x64
 80050e8:	811a      	strh	r2, [r3, #8]
 80050ea:	e01e      	b.n	800512a <Principal_Receive_Config+0x36e>
 80050ec:	4ba6      	ldr	r3, [pc, #664]	; (8005388 <Principal_Receive_Config+0x5cc>)
 80050ee:	2232      	movs	r2, #50	; 0x32
 80050f0:	811a      	strh	r2, [r3, #8]
 80050f2:	e01a      	b.n	800512a <Principal_Receive_Config+0x36e>
 80050f4:	4ba4      	ldr	r3, [pc, #656]	; (8005388 <Principal_Receive_Config+0x5cc>)
 80050f6:	2228      	movs	r2, #40	; 0x28
 80050f8:	811a      	strh	r2, [r3, #8]
 80050fa:	e016      	b.n	800512a <Principal_Receive_Config+0x36e>
 80050fc:	4ba2      	ldr	r3, [pc, #648]	; (8005388 <Principal_Receive_Config+0x5cc>)
 80050fe:	2214      	movs	r2, #20
 8005100:	811a      	strh	r2, [r3, #8]
 8005102:	e012      	b.n	800512a <Principal_Receive_Config+0x36e>
 8005104:	4ba0      	ldr	r3, [pc, #640]	; (8005388 <Principal_Receive_Config+0x5cc>)
 8005106:	220a      	movs	r2, #10
 8005108:	811a      	strh	r2, [r3, #8]
 800510a:	e00e      	b.n	800512a <Principal_Receive_Config+0x36e>
 800510c:	4b9e      	ldr	r3, [pc, #632]	; (8005388 <Principal_Receive_Config+0x5cc>)
 800510e:	2205      	movs	r2, #5
 8005110:	811a      	strh	r2, [r3, #8]
 8005112:	e00a      	b.n	800512a <Principal_Receive_Config+0x36e>
 8005114:	4b9c      	ldr	r3, [pc, #624]	; (8005388 <Principal_Receive_Config+0x5cc>)
 8005116:	2203      	movs	r2, #3
 8005118:	811a      	strh	r2, [r3, #8]
 800511a:	e006      	b.n	800512a <Principal_Receive_Config+0x36e>
 800511c:	4b9a      	ldr	r3, [pc, #616]	; (8005388 <Principal_Receive_Config+0x5cc>)
 800511e:	2202      	movs	r2, #2
 8005120:	811a      	strh	r2, [r3, #8]
 8005122:	e002      	b.n	800512a <Principal_Receive_Config+0x36e>
 8005124:	4b98      	ldr	r3, [pc, #608]	; (8005388 <Principal_Receive_Config+0x5cc>)
 8005126:	2200      	movs	r2, #0
 8005128:	811a      	strh	r2, [r3, #8]
 800512a:	bf00      	nop
			__LOAD_FREQ(data[6], Per_Msg[ECU_Save]);
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	3306      	adds	r3, #6
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	3b01      	subs	r3, #1
 8005134:	2b0a      	cmp	r3, #10
 8005136:	d847      	bhi.n	80051c8 <Principal_Receive_Config+0x40c>
 8005138:	a201      	add	r2, pc, #4	; (adr r2, 8005140 <Principal_Receive_Config+0x384>)
 800513a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800513e:	bf00      	nop
 8005140:	0800516d 	.word	0x0800516d
 8005144:	08005177 	.word	0x08005177
 8005148:	08005181 	.word	0x08005181
 800514c:	08005189 	.word	0x08005189
 8005150:	08005191 	.word	0x08005191
 8005154:	08005199 	.word	0x08005199
 8005158:	080051a1 	.word	0x080051a1
 800515c:	080051a9 	.word	0x080051a9
 8005160:	080051b1 	.word	0x080051b1
 8005164:	080051b9 	.word	0x080051b9
 8005168:	080051c1 	.word	0x080051c1
 800516c:	4b86      	ldr	r3, [pc, #536]	; (8005388 <Principal_Receive_Config+0x5cc>)
 800516e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005172:	815a      	strh	r2, [r3, #10]
 8005174:	e02b      	b.n	80051ce <Principal_Receive_Config+0x412>
 8005176:	4b84      	ldr	r3, [pc, #528]	; (8005388 <Principal_Receive_Config+0x5cc>)
 8005178:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800517c:	815a      	strh	r2, [r3, #10]
 800517e:	e026      	b.n	80051ce <Principal_Receive_Config+0x412>
 8005180:	4b81      	ldr	r3, [pc, #516]	; (8005388 <Principal_Receive_Config+0x5cc>)
 8005182:	22c8      	movs	r2, #200	; 0xc8
 8005184:	815a      	strh	r2, [r3, #10]
 8005186:	e022      	b.n	80051ce <Principal_Receive_Config+0x412>
 8005188:	4b7f      	ldr	r3, [pc, #508]	; (8005388 <Principal_Receive_Config+0x5cc>)
 800518a:	2264      	movs	r2, #100	; 0x64
 800518c:	815a      	strh	r2, [r3, #10]
 800518e:	e01e      	b.n	80051ce <Principal_Receive_Config+0x412>
 8005190:	4b7d      	ldr	r3, [pc, #500]	; (8005388 <Principal_Receive_Config+0x5cc>)
 8005192:	2232      	movs	r2, #50	; 0x32
 8005194:	815a      	strh	r2, [r3, #10]
 8005196:	e01a      	b.n	80051ce <Principal_Receive_Config+0x412>
 8005198:	4b7b      	ldr	r3, [pc, #492]	; (8005388 <Principal_Receive_Config+0x5cc>)
 800519a:	2228      	movs	r2, #40	; 0x28
 800519c:	815a      	strh	r2, [r3, #10]
 800519e:	e016      	b.n	80051ce <Principal_Receive_Config+0x412>
 80051a0:	4b79      	ldr	r3, [pc, #484]	; (8005388 <Principal_Receive_Config+0x5cc>)
 80051a2:	2214      	movs	r2, #20
 80051a4:	815a      	strh	r2, [r3, #10]
 80051a6:	e012      	b.n	80051ce <Principal_Receive_Config+0x412>
 80051a8:	4b77      	ldr	r3, [pc, #476]	; (8005388 <Principal_Receive_Config+0x5cc>)
 80051aa:	220a      	movs	r2, #10
 80051ac:	815a      	strh	r2, [r3, #10]
 80051ae:	e00e      	b.n	80051ce <Principal_Receive_Config+0x412>
 80051b0:	4b75      	ldr	r3, [pc, #468]	; (8005388 <Principal_Receive_Config+0x5cc>)
 80051b2:	2205      	movs	r2, #5
 80051b4:	815a      	strh	r2, [r3, #10]
 80051b6:	e00a      	b.n	80051ce <Principal_Receive_Config+0x412>
 80051b8:	4b73      	ldr	r3, [pc, #460]	; (8005388 <Principal_Receive_Config+0x5cc>)
 80051ba:	2203      	movs	r2, #3
 80051bc:	815a      	strh	r2, [r3, #10]
 80051be:	e006      	b.n	80051ce <Principal_Receive_Config+0x412>
 80051c0:	4b71      	ldr	r3, [pc, #452]	; (8005388 <Principal_Receive_Config+0x5cc>)
 80051c2:	2202      	movs	r2, #2
 80051c4:	815a      	strh	r2, [r3, #10]
 80051c6:	e002      	b.n	80051ce <Principal_Receive_Config+0x412>
 80051c8:	4b6f      	ldr	r3, [pc, #444]	; (8005388 <Principal_Receive_Config+0x5cc>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	815a      	strh	r2, [r3, #10]
 80051ce:	bf00      	nop
			__LOAD_FREQ(data[7], Per_Msg[PDM_Save]);
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	3307      	adds	r3, #7
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	3b01      	subs	r3, #1
 80051d8:	2b0a      	cmp	r3, #10
 80051da:	d847      	bhi.n	800526c <Principal_Receive_Config+0x4b0>
 80051dc:	a201      	add	r2, pc, #4	; (adr r2, 80051e4 <Principal_Receive_Config+0x428>)
 80051de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e2:	bf00      	nop
 80051e4:	08005211 	.word	0x08005211
 80051e8:	0800521b 	.word	0x0800521b
 80051ec:	08005225 	.word	0x08005225
 80051f0:	0800522d 	.word	0x0800522d
 80051f4:	08005235 	.word	0x08005235
 80051f8:	0800523d 	.word	0x0800523d
 80051fc:	08005245 	.word	0x08005245
 8005200:	0800524d 	.word	0x0800524d
 8005204:	08005255 	.word	0x08005255
 8005208:	0800525d 	.word	0x0800525d
 800520c:	08005265 	.word	0x08005265
 8005210:	4b5d      	ldr	r3, [pc, #372]	; (8005388 <Principal_Receive_Config+0x5cc>)
 8005212:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005216:	819a      	strh	r2, [r3, #12]
 8005218:	e02b      	b.n	8005272 <Principal_Receive_Config+0x4b6>
 800521a:	4b5b      	ldr	r3, [pc, #364]	; (8005388 <Principal_Receive_Config+0x5cc>)
 800521c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005220:	819a      	strh	r2, [r3, #12]
 8005222:	e026      	b.n	8005272 <Principal_Receive_Config+0x4b6>
 8005224:	4b58      	ldr	r3, [pc, #352]	; (8005388 <Principal_Receive_Config+0x5cc>)
 8005226:	22c8      	movs	r2, #200	; 0xc8
 8005228:	819a      	strh	r2, [r3, #12]
 800522a:	e022      	b.n	8005272 <Principal_Receive_Config+0x4b6>
 800522c:	4b56      	ldr	r3, [pc, #344]	; (8005388 <Principal_Receive_Config+0x5cc>)
 800522e:	2264      	movs	r2, #100	; 0x64
 8005230:	819a      	strh	r2, [r3, #12]
 8005232:	e01e      	b.n	8005272 <Principal_Receive_Config+0x4b6>
 8005234:	4b54      	ldr	r3, [pc, #336]	; (8005388 <Principal_Receive_Config+0x5cc>)
 8005236:	2232      	movs	r2, #50	; 0x32
 8005238:	819a      	strh	r2, [r3, #12]
 800523a:	e01a      	b.n	8005272 <Principal_Receive_Config+0x4b6>
 800523c:	4b52      	ldr	r3, [pc, #328]	; (8005388 <Principal_Receive_Config+0x5cc>)
 800523e:	2228      	movs	r2, #40	; 0x28
 8005240:	819a      	strh	r2, [r3, #12]
 8005242:	e016      	b.n	8005272 <Principal_Receive_Config+0x4b6>
 8005244:	4b50      	ldr	r3, [pc, #320]	; (8005388 <Principal_Receive_Config+0x5cc>)
 8005246:	2214      	movs	r2, #20
 8005248:	819a      	strh	r2, [r3, #12]
 800524a:	e012      	b.n	8005272 <Principal_Receive_Config+0x4b6>
 800524c:	4b4e      	ldr	r3, [pc, #312]	; (8005388 <Principal_Receive_Config+0x5cc>)
 800524e:	220a      	movs	r2, #10
 8005250:	819a      	strh	r2, [r3, #12]
 8005252:	e00e      	b.n	8005272 <Principal_Receive_Config+0x4b6>
 8005254:	4b4c      	ldr	r3, [pc, #304]	; (8005388 <Principal_Receive_Config+0x5cc>)
 8005256:	2205      	movs	r2, #5
 8005258:	819a      	strh	r2, [r3, #12]
 800525a:	e00a      	b.n	8005272 <Principal_Receive_Config+0x4b6>
 800525c:	4b4a      	ldr	r3, [pc, #296]	; (8005388 <Principal_Receive_Config+0x5cc>)
 800525e:	2203      	movs	r2, #3
 8005260:	819a      	strh	r2, [r3, #12]
 8005262:	e006      	b.n	8005272 <Principal_Receive_Config+0x4b6>
 8005264:	4b48      	ldr	r3, [pc, #288]	; (8005388 <Principal_Receive_Config+0x5cc>)
 8005266:	2202      	movs	r2, #2
 8005268:	819a      	strh	r2, [r3, #12]
 800526a:	e002      	b.n	8005272 <Principal_Receive_Config+0x4b6>
 800526c:	4b46      	ldr	r3, [pc, #280]	; (8005388 <Principal_Receive_Config+0x5cc>)
 800526e:	2200      	movs	r2, #0
 8005270:	819a      	strh	r2, [r3, #12]
 8005272:	bf00      	nop

			retVal = Save_EEPROM(hi2c);
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f7fe fdb9 	bl	8003dec <Save_EEPROM>
 800527a:	4603      	mov	r3, r0
 800527c:	75fb      	strb	r3, [r7, #23]
			break;
 800527e:	e1be      	b.n	80055fe <Principal_Receive_Config+0x842>

		case 1:
			if(length != 6)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b06      	cmp	r3, #6
 8005284:	f040 81b6 	bne.w	80055f4 <Principal_Receive_Config+0x838>
				break;

			__LOAD_FREQ(data[1], Per_CAN[Analog_1_4]);
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	3301      	adds	r3, #1
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	3b01      	subs	r3, #1
 8005290:	2b0a      	cmp	r3, #10
 8005292:	d847      	bhi.n	8005324 <Principal_Receive_Config+0x568>
 8005294:	a201      	add	r2, pc, #4	; (adr r2, 800529c <Principal_Receive_Config+0x4e0>)
 8005296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529a:	bf00      	nop
 800529c:	080052c9 	.word	0x080052c9
 80052a0:	080052d3 	.word	0x080052d3
 80052a4:	080052dd 	.word	0x080052dd
 80052a8:	080052e5 	.word	0x080052e5
 80052ac:	080052ed 	.word	0x080052ed
 80052b0:	080052f5 	.word	0x080052f5
 80052b4:	080052fd 	.word	0x080052fd
 80052b8:	08005305 	.word	0x08005305
 80052bc:	0800530d 	.word	0x0800530d
 80052c0:	08005315 	.word	0x08005315
 80052c4:	0800531d 	.word	0x0800531d
 80052c8:	4b30      	ldr	r3, [pc, #192]	; (800538c <Principal_Receive_Config+0x5d0>)
 80052ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052ce:	801a      	strh	r2, [r3, #0]
 80052d0:	e02b      	b.n	800532a <Principal_Receive_Config+0x56e>
 80052d2:	4b2e      	ldr	r3, [pc, #184]	; (800538c <Principal_Receive_Config+0x5d0>)
 80052d4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80052d8:	801a      	strh	r2, [r3, #0]
 80052da:	e026      	b.n	800532a <Principal_Receive_Config+0x56e>
 80052dc:	4b2b      	ldr	r3, [pc, #172]	; (800538c <Principal_Receive_Config+0x5d0>)
 80052de:	22c8      	movs	r2, #200	; 0xc8
 80052e0:	801a      	strh	r2, [r3, #0]
 80052e2:	e022      	b.n	800532a <Principal_Receive_Config+0x56e>
 80052e4:	4b29      	ldr	r3, [pc, #164]	; (800538c <Principal_Receive_Config+0x5d0>)
 80052e6:	2264      	movs	r2, #100	; 0x64
 80052e8:	801a      	strh	r2, [r3, #0]
 80052ea:	e01e      	b.n	800532a <Principal_Receive_Config+0x56e>
 80052ec:	4b27      	ldr	r3, [pc, #156]	; (800538c <Principal_Receive_Config+0x5d0>)
 80052ee:	2232      	movs	r2, #50	; 0x32
 80052f0:	801a      	strh	r2, [r3, #0]
 80052f2:	e01a      	b.n	800532a <Principal_Receive_Config+0x56e>
 80052f4:	4b25      	ldr	r3, [pc, #148]	; (800538c <Principal_Receive_Config+0x5d0>)
 80052f6:	2228      	movs	r2, #40	; 0x28
 80052f8:	801a      	strh	r2, [r3, #0]
 80052fa:	e016      	b.n	800532a <Principal_Receive_Config+0x56e>
 80052fc:	4b23      	ldr	r3, [pc, #140]	; (800538c <Principal_Receive_Config+0x5d0>)
 80052fe:	2214      	movs	r2, #20
 8005300:	801a      	strh	r2, [r3, #0]
 8005302:	e012      	b.n	800532a <Principal_Receive_Config+0x56e>
 8005304:	4b21      	ldr	r3, [pc, #132]	; (800538c <Principal_Receive_Config+0x5d0>)
 8005306:	220a      	movs	r2, #10
 8005308:	801a      	strh	r2, [r3, #0]
 800530a:	e00e      	b.n	800532a <Principal_Receive_Config+0x56e>
 800530c:	4b1f      	ldr	r3, [pc, #124]	; (800538c <Principal_Receive_Config+0x5d0>)
 800530e:	2205      	movs	r2, #5
 8005310:	801a      	strh	r2, [r3, #0]
 8005312:	e00a      	b.n	800532a <Principal_Receive_Config+0x56e>
 8005314:	4b1d      	ldr	r3, [pc, #116]	; (800538c <Principal_Receive_Config+0x5d0>)
 8005316:	2203      	movs	r2, #3
 8005318:	801a      	strh	r2, [r3, #0]
 800531a:	e006      	b.n	800532a <Principal_Receive_Config+0x56e>
 800531c:	4b1b      	ldr	r3, [pc, #108]	; (800538c <Principal_Receive_Config+0x5d0>)
 800531e:	2202      	movs	r2, #2
 8005320:	801a      	strh	r2, [r3, #0]
 8005322:	e002      	b.n	800532a <Principal_Receive_Config+0x56e>
 8005324:	4b19      	ldr	r3, [pc, #100]	; (800538c <Principal_Receive_Config+0x5d0>)
 8005326:	2200      	movs	r2, #0
 8005328:	801a      	strh	r2, [r3, #0]
 800532a:	bf00      	nop
			__LOAD_FREQ(data[2], Per_CAN[Analog_5_8]);
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	3302      	adds	r3, #2
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	3b01      	subs	r3, #1
 8005334:	2b0a      	cmp	r3, #10
 8005336:	d84b      	bhi.n	80053d0 <Principal_Receive_Config+0x614>
 8005338:	a201      	add	r2, pc, #4	; (adr r2, 8005340 <Principal_Receive_Config+0x584>)
 800533a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533e:	bf00      	nop
 8005340:	0800536d 	.word	0x0800536d
 8005344:	08005377 	.word	0x08005377
 8005348:	08005381 	.word	0x08005381
 800534c:	08005391 	.word	0x08005391
 8005350:	08005399 	.word	0x08005399
 8005354:	080053a1 	.word	0x080053a1
 8005358:	080053a9 	.word	0x080053a9
 800535c:	080053b1 	.word	0x080053b1
 8005360:	080053b9 	.word	0x080053b9
 8005364:	080053c1 	.word	0x080053c1
 8005368:	080053c9 	.word	0x080053c9
 800536c:	4b07      	ldr	r3, [pc, #28]	; (800538c <Principal_Receive_Config+0x5d0>)
 800536e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005372:	805a      	strh	r2, [r3, #2]
 8005374:	e02f      	b.n	80053d6 <Principal_Receive_Config+0x61a>
 8005376:	4b05      	ldr	r3, [pc, #20]	; (800538c <Principal_Receive_Config+0x5d0>)
 8005378:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800537c:	805a      	strh	r2, [r3, #2]
 800537e:	e02a      	b.n	80053d6 <Principal_Receive_Config+0x61a>
 8005380:	4b02      	ldr	r3, [pc, #8]	; (800538c <Principal_Receive_Config+0x5d0>)
 8005382:	22c8      	movs	r2, #200	; 0xc8
 8005384:	805a      	strh	r2, [r3, #2]
 8005386:	e026      	b.n	80053d6 <Principal_Receive_Config+0x61a>
 8005388:	20002e7c 	.word	0x20002e7c
 800538c:	200006fc 	.word	0x200006fc
 8005390:	4b9d      	ldr	r3, [pc, #628]	; (8005608 <Principal_Receive_Config+0x84c>)
 8005392:	2264      	movs	r2, #100	; 0x64
 8005394:	805a      	strh	r2, [r3, #2]
 8005396:	e01e      	b.n	80053d6 <Principal_Receive_Config+0x61a>
 8005398:	4b9b      	ldr	r3, [pc, #620]	; (8005608 <Principal_Receive_Config+0x84c>)
 800539a:	2232      	movs	r2, #50	; 0x32
 800539c:	805a      	strh	r2, [r3, #2]
 800539e:	e01a      	b.n	80053d6 <Principal_Receive_Config+0x61a>
 80053a0:	4b99      	ldr	r3, [pc, #612]	; (8005608 <Principal_Receive_Config+0x84c>)
 80053a2:	2228      	movs	r2, #40	; 0x28
 80053a4:	805a      	strh	r2, [r3, #2]
 80053a6:	e016      	b.n	80053d6 <Principal_Receive_Config+0x61a>
 80053a8:	4b97      	ldr	r3, [pc, #604]	; (8005608 <Principal_Receive_Config+0x84c>)
 80053aa:	2214      	movs	r2, #20
 80053ac:	805a      	strh	r2, [r3, #2]
 80053ae:	e012      	b.n	80053d6 <Principal_Receive_Config+0x61a>
 80053b0:	4b95      	ldr	r3, [pc, #596]	; (8005608 <Principal_Receive_Config+0x84c>)
 80053b2:	220a      	movs	r2, #10
 80053b4:	805a      	strh	r2, [r3, #2]
 80053b6:	e00e      	b.n	80053d6 <Principal_Receive_Config+0x61a>
 80053b8:	4b93      	ldr	r3, [pc, #588]	; (8005608 <Principal_Receive_Config+0x84c>)
 80053ba:	2205      	movs	r2, #5
 80053bc:	805a      	strh	r2, [r3, #2]
 80053be:	e00a      	b.n	80053d6 <Principal_Receive_Config+0x61a>
 80053c0:	4b91      	ldr	r3, [pc, #580]	; (8005608 <Principal_Receive_Config+0x84c>)
 80053c2:	2203      	movs	r2, #3
 80053c4:	805a      	strh	r2, [r3, #2]
 80053c6:	e006      	b.n	80053d6 <Principal_Receive_Config+0x61a>
 80053c8:	4b8f      	ldr	r3, [pc, #572]	; (8005608 <Principal_Receive_Config+0x84c>)
 80053ca:	2202      	movs	r2, #2
 80053cc:	805a      	strh	r2, [r3, #2]
 80053ce:	e002      	b.n	80053d6 <Principal_Receive_Config+0x61a>
 80053d0:	4b8d      	ldr	r3, [pc, #564]	; (8005608 <Principal_Receive_Config+0x84c>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	805a      	strh	r2, [r3, #2]
 80053d6:	bf00      	nop
			__LOAD_FREQ(data[3], Per_CAN[Analog_9_12]);
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	3303      	adds	r3, #3
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	3b01      	subs	r3, #1
 80053e0:	2b0a      	cmp	r3, #10
 80053e2:	d847      	bhi.n	8005474 <Principal_Receive_Config+0x6b8>
 80053e4:	a201      	add	r2, pc, #4	; (adr r2, 80053ec <Principal_Receive_Config+0x630>)
 80053e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ea:	bf00      	nop
 80053ec:	08005419 	.word	0x08005419
 80053f0:	08005423 	.word	0x08005423
 80053f4:	0800542d 	.word	0x0800542d
 80053f8:	08005435 	.word	0x08005435
 80053fc:	0800543d 	.word	0x0800543d
 8005400:	08005445 	.word	0x08005445
 8005404:	0800544d 	.word	0x0800544d
 8005408:	08005455 	.word	0x08005455
 800540c:	0800545d 	.word	0x0800545d
 8005410:	08005465 	.word	0x08005465
 8005414:	0800546d 	.word	0x0800546d
 8005418:	4b7b      	ldr	r3, [pc, #492]	; (8005608 <Principal_Receive_Config+0x84c>)
 800541a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800541e:	809a      	strh	r2, [r3, #4]
 8005420:	e02b      	b.n	800547a <Principal_Receive_Config+0x6be>
 8005422:	4b79      	ldr	r3, [pc, #484]	; (8005608 <Principal_Receive_Config+0x84c>)
 8005424:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005428:	809a      	strh	r2, [r3, #4]
 800542a:	e026      	b.n	800547a <Principal_Receive_Config+0x6be>
 800542c:	4b76      	ldr	r3, [pc, #472]	; (8005608 <Principal_Receive_Config+0x84c>)
 800542e:	22c8      	movs	r2, #200	; 0xc8
 8005430:	809a      	strh	r2, [r3, #4]
 8005432:	e022      	b.n	800547a <Principal_Receive_Config+0x6be>
 8005434:	4b74      	ldr	r3, [pc, #464]	; (8005608 <Principal_Receive_Config+0x84c>)
 8005436:	2264      	movs	r2, #100	; 0x64
 8005438:	809a      	strh	r2, [r3, #4]
 800543a:	e01e      	b.n	800547a <Principal_Receive_Config+0x6be>
 800543c:	4b72      	ldr	r3, [pc, #456]	; (8005608 <Principal_Receive_Config+0x84c>)
 800543e:	2232      	movs	r2, #50	; 0x32
 8005440:	809a      	strh	r2, [r3, #4]
 8005442:	e01a      	b.n	800547a <Principal_Receive_Config+0x6be>
 8005444:	4b70      	ldr	r3, [pc, #448]	; (8005608 <Principal_Receive_Config+0x84c>)
 8005446:	2228      	movs	r2, #40	; 0x28
 8005448:	809a      	strh	r2, [r3, #4]
 800544a:	e016      	b.n	800547a <Principal_Receive_Config+0x6be>
 800544c:	4b6e      	ldr	r3, [pc, #440]	; (8005608 <Principal_Receive_Config+0x84c>)
 800544e:	2214      	movs	r2, #20
 8005450:	809a      	strh	r2, [r3, #4]
 8005452:	e012      	b.n	800547a <Principal_Receive_Config+0x6be>
 8005454:	4b6c      	ldr	r3, [pc, #432]	; (8005608 <Principal_Receive_Config+0x84c>)
 8005456:	220a      	movs	r2, #10
 8005458:	809a      	strh	r2, [r3, #4]
 800545a:	e00e      	b.n	800547a <Principal_Receive_Config+0x6be>
 800545c:	4b6a      	ldr	r3, [pc, #424]	; (8005608 <Principal_Receive_Config+0x84c>)
 800545e:	2205      	movs	r2, #5
 8005460:	809a      	strh	r2, [r3, #4]
 8005462:	e00a      	b.n	800547a <Principal_Receive_Config+0x6be>
 8005464:	4b68      	ldr	r3, [pc, #416]	; (8005608 <Principal_Receive_Config+0x84c>)
 8005466:	2203      	movs	r2, #3
 8005468:	809a      	strh	r2, [r3, #4]
 800546a:	e006      	b.n	800547a <Principal_Receive_Config+0x6be>
 800546c:	4b66      	ldr	r3, [pc, #408]	; (8005608 <Principal_Receive_Config+0x84c>)
 800546e:	2202      	movs	r2, #2
 8005470:	809a      	strh	r2, [r3, #4]
 8005472:	e002      	b.n	800547a <Principal_Receive_Config+0x6be>
 8005474:	4b64      	ldr	r3, [pc, #400]	; (8005608 <Principal_Receive_Config+0x84c>)
 8005476:	2200      	movs	r2, #0
 8005478:	809a      	strh	r2, [r3, #4]
 800547a:	bf00      	nop
			__LOAD_FREQ(data[4], Per_CAN[RTC_Msg]);
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	3304      	adds	r3, #4
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	3b01      	subs	r3, #1
 8005484:	2b0a      	cmp	r3, #10
 8005486:	d847      	bhi.n	8005518 <Principal_Receive_Config+0x75c>
 8005488:	a201      	add	r2, pc, #4	; (adr r2, 8005490 <Principal_Receive_Config+0x6d4>)
 800548a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548e:	bf00      	nop
 8005490:	080054bd 	.word	0x080054bd
 8005494:	080054c7 	.word	0x080054c7
 8005498:	080054d1 	.word	0x080054d1
 800549c:	080054d9 	.word	0x080054d9
 80054a0:	080054e1 	.word	0x080054e1
 80054a4:	080054e9 	.word	0x080054e9
 80054a8:	080054f1 	.word	0x080054f1
 80054ac:	080054f9 	.word	0x080054f9
 80054b0:	08005501 	.word	0x08005501
 80054b4:	08005509 	.word	0x08005509
 80054b8:	08005511 	.word	0x08005511
 80054bc:	4b52      	ldr	r3, [pc, #328]	; (8005608 <Principal_Receive_Config+0x84c>)
 80054be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80054c2:	80da      	strh	r2, [r3, #6]
 80054c4:	e02b      	b.n	800551e <Principal_Receive_Config+0x762>
 80054c6:	4b50      	ldr	r3, [pc, #320]	; (8005608 <Principal_Receive_Config+0x84c>)
 80054c8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80054cc:	80da      	strh	r2, [r3, #6]
 80054ce:	e026      	b.n	800551e <Principal_Receive_Config+0x762>
 80054d0:	4b4d      	ldr	r3, [pc, #308]	; (8005608 <Principal_Receive_Config+0x84c>)
 80054d2:	22c8      	movs	r2, #200	; 0xc8
 80054d4:	80da      	strh	r2, [r3, #6]
 80054d6:	e022      	b.n	800551e <Principal_Receive_Config+0x762>
 80054d8:	4b4b      	ldr	r3, [pc, #300]	; (8005608 <Principal_Receive_Config+0x84c>)
 80054da:	2264      	movs	r2, #100	; 0x64
 80054dc:	80da      	strh	r2, [r3, #6]
 80054de:	e01e      	b.n	800551e <Principal_Receive_Config+0x762>
 80054e0:	4b49      	ldr	r3, [pc, #292]	; (8005608 <Principal_Receive_Config+0x84c>)
 80054e2:	2232      	movs	r2, #50	; 0x32
 80054e4:	80da      	strh	r2, [r3, #6]
 80054e6:	e01a      	b.n	800551e <Principal_Receive_Config+0x762>
 80054e8:	4b47      	ldr	r3, [pc, #284]	; (8005608 <Principal_Receive_Config+0x84c>)
 80054ea:	2228      	movs	r2, #40	; 0x28
 80054ec:	80da      	strh	r2, [r3, #6]
 80054ee:	e016      	b.n	800551e <Principal_Receive_Config+0x762>
 80054f0:	4b45      	ldr	r3, [pc, #276]	; (8005608 <Principal_Receive_Config+0x84c>)
 80054f2:	2214      	movs	r2, #20
 80054f4:	80da      	strh	r2, [r3, #6]
 80054f6:	e012      	b.n	800551e <Principal_Receive_Config+0x762>
 80054f8:	4b43      	ldr	r3, [pc, #268]	; (8005608 <Principal_Receive_Config+0x84c>)
 80054fa:	220a      	movs	r2, #10
 80054fc:	80da      	strh	r2, [r3, #6]
 80054fe:	e00e      	b.n	800551e <Principal_Receive_Config+0x762>
 8005500:	4b41      	ldr	r3, [pc, #260]	; (8005608 <Principal_Receive_Config+0x84c>)
 8005502:	2205      	movs	r2, #5
 8005504:	80da      	strh	r2, [r3, #6]
 8005506:	e00a      	b.n	800551e <Principal_Receive_Config+0x762>
 8005508:	4b3f      	ldr	r3, [pc, #252]	; (8005608 <Principal_Receive_Config+0x84c>)
 800550a:	2203      	movs	r2, #3
 800550c:	80da      	strh	r2, [r3, #6]
 800550e:	e006      	b.n	800551e <Principal_Receive_Config+0x762>
 8005510:	4b3d      	ldr	r3, [pc, #244]	; (8005608 <Principal_Receive_Config+0x84c>)
 8005512:	2202      	movs	r2, #2
 8005514:	80da      	strh	r2, [r3, #6]
 8005516:	e002      	b.n	800551e <Principal_Receive_Config+0x762>
 8005518:	4b3b      	ldr	r3, [pc, #236]	; (8005608 <Principal_Receive_Config+0x84c>)
 800551a:	2200      	movs	r2, #0
 800551c:	80da      	strh	r2, [r3, #6]
 800551e:	bf00      	nop
			Input_Config = data[5];
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	795a      	ldrb	r2, [r3, #5]
 8005524:	4b39      	ldr	r3, [pc, #228]	; (800560c <Principal_Receive_Config+0x850>)
 8005526:	701a      	strb	r2, [r3, #0]

			retVal = Save_EEPROM(hi2c);
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	f7fe fc5f 	bl	8003dec <Save_EEPROM>
 800552e:	4603      	mov	r3, r0
 8005530:	75fb      	strb	r3, [r7, #23]
			break;
 8005532:	e064      	b.n	80055fe <Principal_Receive_Config+0x842>

		case 2:
			if(length != 5)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2b05      	cmp	r3, #5
 8005538:	d15e      	bne.n	80055f8 <Principal_Receive_Config+0x83c>
				break;

			Threshold_RPM	 = data[1] << 8;
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	3301      	adds	r3, #1
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	021b      	lsls	r3, r3, #8
 8005542:	b21a      	sxth	r2, r3
 8005544:	4b32      	ldr	r3, [pc, #200]	; (8005610 <Principal_Receive_Config+0x854>)
 8005546:	801a      	strh	r2, [r3, #0]
			Threshold_RPM	|= data[2] & 0xff;
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	3302      	adds	r3, #2
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	b21a      	sxth	r2, r3
 8005550:	4b2f      	ldr	r3, [pc, #188]	; (8005610 <Principal_Receive_Config+0x854>)
 8005552:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005556:	4313      	orrs	r3, r2
 8005558:	b21a      	sxth	r2, r3
 800555a:	4b2d      	ldr	r3, [pc, #180]	; (8005610 <Principal_Receive_Config+0x854>)
 800555c:	801a      	strh	r2, [r3, #0]
			Threshold_Speed  = data[3] << 8;
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	3303      	adds	r3, #3
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	021b      	lsls	r3, r3, #8
 8005566:	b21a      	sxth	r2, r3
 8005568:	4b2a      	ldr	r3, [pc, #168]	; (8005614 <Principal_Receive_Config+0x858>)
 800556a:	801a      	strh	r2, [r3, #0]
			Threshold_Speed |= data[4] & 0xff;
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	3304      	adds	r3, #4
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	b21a      	sxth	r2, r3
 8005574:	4b27      	ldr	r3, [pc, #156]	; (8005614 <Principal_Receive_Config+0x858>)
 8005576:	f9b3 3000 	ldrsh.w	r3, [r3]
 800557a:	4313      	orrs	r3, r2
 800557c:	b21a      	sxth	r2, r3
 800557e:	4b25      	ldr	r3, [pc, #148]	; (8005614 <Principal_Receive_Config+0x858>)
 8005580:	801a      	strh	r2, [r3, #0]

			retVal = Save_EEPROM(hi2c);
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f7fe fc32 	bl	8003dec <Save_EEPROM>
 8005588:	4603      	mov	r3, r0
 800558a:	75fb      	strb	r3, [r7, #23]
			break;
 800558c:	e037      	b.n	80055fe <Principal_Receive_Config+0x842>

		case 3:
			if(length != 7)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b07      	cmp	r3, #7
 8005592:	d133      	bne.n	80055fc <Principal_Receive_Config+0x840>
				break;

			Date.Year	 = data[1];
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	785a      	ldrb	r2, [r3, #1]
 8005598:	4b1f      	ldr	r3, [pc, #124]	; (8005618 <Principal_Receive_Config+0x85c>)
 800559a:	70da      	strb	r2, [r3, #3]
			Date.Month	 = data[2];
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	789a      	ldrb	r2, [r3, #2]
 80055a0:	4b1d      	ldr	r3, [pc, #116]	; (8005618 <Principal_Receive_Config+0x85c>)
 80055a2:	705a      	strb	r2, [r3, #1]
			Date.Date	 = data[3];
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	78da      	ldrb	r2, [r3, #3]
 80055a8:	4b1b      	ldr	r3, [pc, #108]	; (8005618 <Principal_Receive_Config+0x85c>)
 80055aa:	709a      	strb	r2, [r3, #2]
			Time.Hours	 = data[4];
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	791a      	ldrb	r2, [r3, #4]
 80055b0:	4b1a      	ldr	r3, [pc, #104]	; (800561c <Principal_Receive_Config+0x860>)
 80055b2:	701a      	strb	r2, [r3, #0]
			Time.Minutes = data[5];
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	795a      	ldrb	r2, [r3, #5]
 80055b8:	4b18      	ldr	r3, [pc, #96]	; (800561c <Principal_Receive_Config+0x860>)
 80055ba:	705a      	strb	r2, [r3, #1]
			Time.Seconds = data[6];
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	799a      	ldrb	r2, [r3, #6]
 80055c0:	4b16      	ldr	r3, [pc, #88]	; (800561c <Principal_Receive_Config+0x860>)
 80055c2:	709a      	strb	r2, [r3, #2]

			HAL_RTC_SetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 80055c4:	2200      	movs	r2, #0
 80055c6:	4914      	ldr	r1, [pc, #80]	; (8005618 <Principal_Receive_Config+0x85c>)
 80055c8:	4815      	ldr	r0, [pc, #84]	; (8005620 <Principal_Receive_Config+0x864>)
 80055ca:	f006 fe43 	bl	800c254 <HAL_RTC_SetDate>
			HAL_RTC_SetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 80055ce:	2200      	movs	r2, #0
 80055d0:	4912      	ldr	r1, [pc, #72]	; (800561c <Principal_Receive_Config+0x860>)
 80055d2:	4813      	ldr	r0, [pc, #76]	; (8005620 <Principal_Receive_Config+0x864>)
 80055d4:	f006 fd23 	bl	800c01e <HAL_RTC_SetTime>
			HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, RTC_STORE_DATA);
 80055d8:	f24e 325c 	movw	r2, #58204	; 0xe35c
 80055dc:	2101      	movs	r1, #1
 80055de:	4810      	ldr	r0, [pc, #64]	; (8005620 <Principal_Receive_Config+0x864>)
 80055e0:	f006 ffbe 	bl	800c560 <HAL_RTCEx_BKUPWrite>
			Flag_RTC = RTC_OK;
 80055e4:	4b0f      	ldr	r3, [pc, #60]	; (8005624 <Principal_Receive_Config+0x868>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	701a      	strb	r2, [r3, #0]
			break;
 80055ea:	e008      	b.n	80055fe <Principal_Receive_Config+0x842>

		default:
			break;
 80055ec:	bf00      	nop
 80055ee:	e006      	b.n	80055fe <Principal_Receive_Config+0x842>
				break;
 80055f0:	bf00      	nop
 80055f2:	e004      	b.n	80055fe <Principal_Receive_Config+0x842>
				break;
 80055f4:	bf00      	nop
 80055f6:	e002      	b.n	80055fe <Principal_Receive_Config+0x842>
				break;
 80055f8:	bf00      	nop
 80055fa:	e000      	b.n	80055fe <Principal_Receive_Config+0x842>
				break;
 80055fc:	bf00      	nop
	}

	return retVal;
 80055fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	200006fc 	.word	0x200006fc
 800560c:	200006f8 	.word	0x200006f8
 8005610:	20001c5c 	.word	0x20001c5c
 8005614:	20001a60 	.word	0x20001a60
 8005618:	20001a5c 	.word	0x20001a5c
 800561c:	20002cb0 	.word	0x20002cb0
 8005620:	20001b44 	.word	0x20001b44
 8005624:	20001a52 	.word	0x20001a52

08005628 <Principal_Hard_Code_Config>:

__weak void Principal_Hard_Code_Config(){
 8005628:	b480      	push	{r7}
 800562a:	af00      	add	r7, sp, #0
	Per_Msg[Analog_1_4] = MSG_FREQ_20HZ;
 800562c:	4b09      	ldr	r3, [pc, #36]	; (8005654 <Principal_Hard_Code_Config+0x2c>)
 800562e:	2232      	movs	r2, #50	; 0x32
 8005630:	801a      	strh	r2, [r3, #0]
	Per_Msg[RTC_Msg] = MSG_FREQ_2HZ;
 8005632:	4b08      	ldr	r3, [pc, #32]	; (8005654 <Principal_Hard_Code_Config+0x2c>)
 8005634:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005638:	80da      	strh	r2, [r3, #6]
	Threshold_RPM = 7000;
 800563a:	4b07      	ldr	r3, [pc, #28]	; (8005658 <Principal_Hard_Code_Config+0x30>)
 800563c:	f641 3258 	movw	r2, #7000	; 0x1b58
 8005640:	801a      	strh	r2, [r3, #0]
	Threshold_Speed = 1;
 8005642:	4b06      	ldr	r3, [pc, #24]	; (800565c <Principal_Hard_Code_Config+0x34>)
 8005644:	2201      	movs	r2, #1
 8005646:	801a      	strh	r2, [r3, #0]
}
 8005648:	bf00      	nop
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	20002e7c 	.word	0x20002e7c
 8005658:	20001c5c 	.word	0x20001c5c
 800565c:	20001a60 	.word	0x20001a60

08005660 <Principal_Datalogger_Init>:
#include "string.h"

FRESULT res[5];

FRESULT Principal_Datalogger_Init(FATFS* fatfs_struct)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
	FRESULT retVal = FR_OK;
 8005668:	2300      	movs	r3, #0
 800566a:	73fb      	strb	r3, [r7, #15]

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 800566c:	2180      	movs	r1, #128	; 0x80
 800566e:	4813      	ldr	r0, [pc, #76]	; (80056bc <Principal_Datalogger_Init+0x5c>)
 8005670:	f003 f92c 	bl	80088cc <HAL_GPIO_ReadPin>
 8005674:	4603      	mov	r3, r0
 8005676:	2b01      	cmp	r3, #1
 8005678:	d104      	bne.n	8005684 <Principal_Datalogger_Init+0x24>
	{
		Flag_Datalogger = DL_No_Card;
 800567a:	4b11      	ldr	r3, [pc, #68]	; (80056c0 <Principal_Datalogger_Init+0x60>)
 800567c:	2202      	movs	r2, #2
 800567e:	701a      	strb	r2, [r3, #0]
		return FR_DISK_ERR;
 8005680:	2301      	movs	r3, #1
 8005682:	e017      	b.n	80056b4 <Principal_Datalogger_Init+0x54>
	}

	BSP_SD_Init();
 8005684:	f00b fa3c 	bl	8010b00 <BSP_SD_Init>

	retVal = f_mount(fatfs_struct, SDPath, 1);
 8005688:	2201      	movs	r2, #1
 800568a:	490e      	ldr	r1, [pc, #56]	; (80056c4 <Principal_Datalogger_Init+0x64>)
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f010 fc47 	bl	8015f20 <f_mount>
 8005692:	4603      	mov	r3, r0
 8005694:	73fb      	strb	r3, [r7, #15]

	Flag_Datalogger = DL_No_Save;
 8005696:	4b0a      	ldr	r3, [pc, #40]	; (80056c0 <Principal_Datalogger_Init+0x60>)
 8005698:	2200      	movs	r2, #0
 800569a:	701a      	strb	r2, [r3, #0]

	if(retVal != FR_OK)
 800569c:	7bfb      	ldrb	r3, [r7, #15]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d007      	beq.n	80056b2 <Principal_Datalogger_Init+0x52>
	{
		Flag_Datalogger = DL_Error;
 80056a2:	4b07      	ldr	r3, [pc, #28]	; (80056c0 <Principal_Datalogger_Init+0x60>)
 80056a4:	2204      	movs	r2, #4
 80056a6:	701a      	strb	r2, [r3, #0]
		f_mount(0, SDPath, 0);
 80056a8:	2200      	movs	r2, #0
 80056aa:	4906      	ldr	r1, [pc, #24]	; (80056c4 <Principal_Datalogger_Init+0x64>)
 80056ac:	2000      	movs	r0, #0
 80056ae:	f010 fc37 	bl	8015f20 <f_mount>
	}

	return retVal;
 80056b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	3710      	adds	r7, #16
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	40020800 	.word	0x40020800
 80056c0:	20001bd0 	.word	0x20001bd0
 80056c4:	20002e9c 	.word	0x20002e9c

080056c8 <Principal_Datalogger_Start>:

FRESULT Principal_Datalogger_Start(char* dir, char* file, DIR* dir_struct, FIL* file_struct)
{
 80056c8:	b5b0      	push	{r4, r5, r7, lr}
 80056ca:	b092      	sub	sp, #72	; 0x48
 80056cc:	af06      	add	r7, sp, #24
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
 80056d4:	603b      	str	r3, [r7, #0]
	FRESULT retVal = FR_OK;
 80056d6:	2300      	movs	r3, #0
 80056d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 80056dc:	2180      	movs	r1, #128	; 0x80
 80056de:	4864      	ldr	r0, [pc, #400]	; (8005870 <Principal_Datalogger_Start+0x1a8>)
 80056e0:	f003 f8f4 	bl	80088cc <HAL_GPIO_ReadPin>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d104      	bne.n	80056f4 <Principal_Datalogger_Start+0x2c>
	{
		Flag_Datalogger = DL_No_Card;
 80056ea:	4b62      	ldr	r3, [pc, #392]	; (8005874 <Principal_Datalogger_Start+0x1ac>)
 80056ec:	2202      	movs	r2, #2
 80056ee:	701a      	strb	r2, [r3, #0]
		return FR_DISK_ERR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e0b9      	b.n	8005868 <Principal_Datalogger_Start+0x1a0>
	}

	if((HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_SET)
 80056f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80056f8:	485f      	ldr	r0, [pc, #380]	; (8005878 <Principal_Datalogger_Start+0x1b0>)
 80056fa:	f003 f8e7 	bl	80088cc <HAL_GPIO_ReadPin>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b01      	cmp	r3, #1
 8005702:	d02f      	beq.n	8005764 <Principal_Datalogger_Start+0x9c>
			|| (Flag_RTC != RTC_OK)
 8005704:	4b5d      	ldr	r3, [pc, #372]	; (800587c <Principal_Datalogger_Start+0x1b4>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d12b      	bne.n	8005764 <Principal_Datalogger_Start+0x9c>
			|| ((Flag_Datalogger != DL_But_Press)
 800570c:	4b59      	ldr	r3, [pc, #356]	; (8005874 <Principal_Datalogger_Start+0x1ac>)
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	2b03      	cmp	r3, #3
 8005712:	d029      	beq.n	8005768 <Principal_Datalogger_Start+0xa0>
			&& (ECU_Data.rpm < Threshold_RPM)
 8005714:	4b5a      	ldr	r3, [pc, #360]	; (8005880 <Principal_Datalogger_Start+0x1b8>)
 8005716:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 800571a:	4b5a      	ldr	r3, [pc, #360]	; (8005884 <Principal_Datalogger_Start+0x1bc>)
 800571c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005720:	429a      	cmp	r2, r3
 8005722:	da21      	bge.n	8005768 <Principal_Datalogger_Start+0xa0>
			&& (ECU_Data.wheel_speed_fl < Threshold_Speed)
 8005724:	4b56      	ldr	r3, [pc, #344]	; (8005880 <Principal_Datalogger_Start+0x1b8>)
 8005726:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800572a:	4b57      	ldr	r3, [pc, #348]	; (8005888 <Principal_Datalogger_Start+0x1c0>)
 800572c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005730:	429a      	cmp	r2, r3
 8005732:	da19      	bge.n	8005768 <Principal_Datalogger_Start+0xa0>
			&& (ECU_Data.wheel_speed_fr < Threshold_Speed)
 8005734:	4b52      	ldr	r3, [pc, #328]	; (8005880 <Principal_Datalogger_Start+0x1b8>)
 8005736:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800573a:	4b53      	ldr	r3, [pc, #332]	; (8005888 <Principal_Datalogger_Start+0x1c0>)
 800573c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005740:	429a      	cmp	r2, r3
 8005742:	da11      	bge.n	8005768 <Principal_Datalogger_Start+0xa0>
			&& (ECU_Data.wheel_speed_rl < Threshold_Speed)
 8005744:	4b4e      	ldr	r3, [pc, #312]	; (8005880 <Principal_Datalogger_Start+0x1b8>)
 8005746:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 800574a:	4b4f      	ldr	r3, [pc, #316]	; (8005888 <Principal_Datalogger_Start+0x1c0>)
 800574c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005750:	429a      	cmp	r2, r3
 8005752:	da09      	bge.n	8005768 <Principal_Datalogger_Start+0xa0>
			&& (ECU_Data.wheel_speed_rr < Threshold_Speed)))
 8005754:	4b4a      	ldr	r3, [pc, #296]	; (8005880 <Principal_Datalogger_Start+0x1b8>)
 8005756:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 800575a:	4b4b      	ldr	r3, [pc, #300]	; (8005888 <Principal_Datalogger_Start+0x1c0>)
 800575c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005760:	429a      	cmp	r2, r3
 8005762:	da01      	bge.n	8005768 <Principal_Datalogger_Start+0xa0>
		return FR_OK;
 8005764:	2300      	movs	r3, #0
 8005766:	e07f      	b.n	8005868 <Principal_Datalogger_Start+0x1a0>

	RTC_DateTypeDef sDate;
	RTC_TimeTypeDef sTime;

	Datalogger_Buffer_Position = 0;
 8005768:	4b48      	ldr	r3, [pc, #288]	; (800588c <Principal_Datalogger_Start+0x1c4>)
 800576a:	2200      	movs	r2, #0
 800576c:	801a      	strh	r2, [r3, #0]
	memset(Datalogger_Buffer, '\0', DATALOGGER_BUFFER_SIZE);
 800576e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005772:	2100      	movs	r1, #0
 8005774:	4846      	ldr	r0, [pc, #280]	; (8005890 <Principal_Datalogger_Start+0x1c8>)
 8005776:	f012 f82b 	bl	80177d0 <memset>

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800577a:	f107 0314 	add.w	r3, r7, #20
 800577e:	2200      	movs	r2, #0
 8005780:	4619      	mov	r1, r3
 8005782:	4844      	ldr	r0, [pc, #272]	; (8005894 <Principal_Datalogger_Start+0x1cc>)
 8005784:	f006 fd08 	bl	800c198 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8005788:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800578c:	2200      	movs	r2, #0
 800578e:	4619      	mov	r1, r3
 8005790:	4840      	ldr	r0, [pc, #256]	; (8005894 <Principal_Datalogger_Start+0x1cc>)
 8005792:	f006 fe06 	bl	800c3a2 <HAL_RTC_GetDate>

	sprintf(dir, "%02d_%02d_%02d", sDate.Year, sDate.Month, sDate.Date);
 8005796:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800579a:	461a      	mov	r2, r3
 800579c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80057a0:	4619      	mov	r1, r3
 80057a2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	460b      	mov	r3, r1
 80057aa:	493b      	ldr	r1, [pc, #236]	; (8005898 <Principal_Datalogger_Start+0x1d0>)
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f012 f817 	bl	80177e0 <siprintf>

	sprintf(file, "%s/%02d_%02d_%02d_%02d_%02d_%02d.sd", dir, sDate.Year, sDate.Month, sDate.Date, sTime.Hours, sTime.Minutes, sTime.Seconds);
 80057b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80057b6:	461d      	mov	r5, r3
 80057b8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80057bc:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 80057c0:	7d39      	ldrb	r1, [r7, #20]
 80057c2:	7d78      	ldrb	r0, [r7, #21]
 80057c4:	7dbc      	ldrb	r4, [r7, #22]
 80057c6:	9404      	str	r4, [sp, #16]
 80057c8:	9003      	str	r0, [sp, #12]
 80057ca:	9102      	str	r1, [sp, #8]
 80057cc:	9201      	str	r2, [sp, #4]
 80057ce:	9300      	str	r3, [sp, #0]
 80057d0:	462b      	mov	r3, r5
 80057d2:	68fa      	ldr	r2, [r7, #12]
 80057d4:	4931      	ldr	r1, [pc, #196]	; (800589c <Principal_Datalogger_Start+0x1d4>)
 80057d6:	68b8      	ldr	r0, [r7, #8]
 80057d8:	f012 f802 	bl	80177e0 <siprintf>

	retVal = f_mkdir(dir);
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f011 f821 	bl	8016824 <f_mkdir>
 80057e2:	4603      	mov	r3, r0
 80057e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	res[0] = retVal;
 80057e8:	4a2d      	ldr	r2, [pc, #180]	; (80058a0 <Principal_Datalogger_Start+0x1d8>)
 80057ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057ee:	7013      	strb	r3, [r2, #0]

	if((retVal != FR_OK) && (retVal != FR_EXIST))
 80057f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d009      	beq.n	800580c <Principal_Datalogger_Start+0x144>
 80057f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	d005      	beq.n	800580c <Principal_Datalogger_Start+0x144>
	{
		Flag_Datalogger = DL_Error;
 8005800:	4b1c      	ldr	r3, [pc, #112]	; (8005874 <Principal_Datalogger_Start+0x1ac>)
 8005802:	2204      	movs	r2, #4
 8005804:	701a      	strb	r2, [r3, #0]
		return retVal;
 8005806:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800580a:	e02d      	b.n	8005868 <Principal_Datalogger_Start+0x1a0>
	}

	retVal = f_opendir(dir_struct, dir);
 800580c:	68f9      	ldr	r1, [r7, #12]
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f010 ff95 	bl	801673e <f_opendir>
 8005814:	4603      	mov	r3, r0
 8005816:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	res[1] = retVal;
 800581a:	4a21      	ldr	r2, [pc, #132]	; (80058a0 <Principal_Datalogger_Start+0x1d8>)
 800581c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005820:	7053      	strb	r3, [r2, #1]

	if(retVal != FR_OK)
 8005822:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005826:	2b00      	cmp	r3, #0
 8005828:	d005      	beq.n	8005836 <Principal_Datalogger_Start+0x16e>
	{
		Flag_Datalogger = DL_Error;
 800582a:	4b12      	ldr	r3, [pc, #72]	; (8005874 <Principal_Datalogger_Start+0x1ac>)
 800582c:	2204      	movs	r2, #4
 800582e:	701a      	strb	r2, [r3, #0]
		return retVal;
 8005830:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005834:	e018      	b.n	8005868 <Principal_Datalogger_Start+0x1a0>
	}

	retVal = f_open(file_struct, file, FA_WRITE | FA_CREATE_ALWAYS);
 8005836:	220a      	movs	r2, #10
 8005838:	68b9      	ldr	r1, [r7, #8]
 800583a:	6838      	ldr	r0, [r7, #0]
 800583c:	f010 fbb4 	bl	8015fa8 <f_open>
 8005840:	4603      	mov	r3, r0
 8005842:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	res[2] = retVal;
 8005846:	4a16      	ldr	r2, [pc, #88]	; (80058a0 <Principal_Datalogger_Start+0x1d8>)
 8005848:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800584c:	7093      	strb	r3, [r2, #2]

	if(retVal == FR_OK)
 800584e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005852:	2b00      	cmp	r3, #0
 8005854:	d103      	bne.n	800585e <Principal_Datalogger_Start+0x196>
		Flag_Datalogger = DL_Save;
 8005856:	4b07      	ldr	r3, [pc, #28]	; (8005874 <Principal_Datalogger_Start+0x1ac>)
 8005858:	2201      	movs	r2, #1
 800585a:	701a      	strb	r2, [r3, #0]
 800585c:	e002      	b.n	8005864 <Principal_Datalogger_Start+0x19c>
	else
		Flag_Datalogger = DL_Error;
 800585e:	4b05      	ldr	r3, [pc, #20]	; (8005874 <Principal_Datalogger_Start+0x1ac>)
 8005860:	2204      	movs	r2, #4
 8005862:	701a      	strb	r2, [r3, #0]

	return retVal;
 8005864:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005868:	4618      	mov	r0, r3
 800586a:	3730      	adds	r7, #48	; 0x30
 800586c:	46bd      	mov	sp, r7
 800586e:	bdb0      	pop	{r4, r5, r7, pc}
 8005870:	40020800 	.word	0x40020800
 8005874:	20001bd0 	.word	0x20001bd0
 8005878:	40020000 	.word	0x40020000
 800587c:	20001a52 	.word	0x20001a52
 8005880:	20002e24 	.word	0x20002e24
 8005884:	20001c5c 	.word	0x20001c5c
 8005888:	20001a60 	.word	0x20001a60
 800588c:	200007bc 	.word	0x200007bc
 8005890:	200007cc 	.word	0x200007cc
 8005894:	20001b44 	.word	0x20001b44
 8005898:	08018038 	.word	0x08018038
 800589c:	08018048 	.word	0x08018048
 80058a0:	20002e8c 	.word	0x20002e8c

080058a4 <Principal_Datalogger_Finish>:

FRESULT Principal_Datalogger_Finish(DIR* dir_struct, FIL* file_struct)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
	FRESULT retVal = FR_OK;
 80058ae:	2300      	movs	r3, #0
 80058b0:	73fb      	strb	r3, [r7, #15]

	retVal = f_close(file_struct);
 80058b2:	6838      	ldr	r0, [r7, #0]
 80058b4:	f010 ff23 	bl	80166fe <f_close>
 80058b8:	4603      	mov	r3, r0
 80058ba:	73fb      	strb	r3, [r7, #15]
	f_closedir(dir_struct);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f010 ff99 	bl	80167f4 <f_closedir>

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 80058c2:	2180      	movs	r1, #128	; 0x80
 80058c4:	480c      	ldr	r0, [pc, #48]	; (80058f8 <Principal_Datalogger_Finish+0x54>)
 80058c6:	f003 f801 	bl	80088cc <HAL_GPIO_ReadPin>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d108      	bne.n	80058e2 <Principal_Datalogger_Finish+0x3e>
	{
		f_mount(0, SDPath, 0);
 80058d0:	2200      	movs	r2, #0
 80058d2:	490a      	ldr	r1, [pc, #40]	; (80058fc <Principal_Datalogger_Finish+0x58>)
 80058d4:	2000      	movs	r0, #0
 80058d6:	f010 fb23 	bl	8015f20 <f_mount>
		Flag_Datalogger = DL_No_Card;
 80058da:	4b09      	ldr	r3, [pc, #36]	; (8005900 <Principal_Datalogger_Finish+0x5c>)
 80058dc:	2202      	movs	r2, #2
 80058de:	701a      	strb	r2, [r3, #0]
 80058e0:	e002      	b.n	80058e8 <Principal_Datalogger_Finish+0x44>
	}

	else
		Flag_Datalogger = DL_No_Save;
 80058e2:	4b07      	ldr	r3, [pc, #28]	; (8005900 <Principal_Datalogger_Finish+0x5c>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	701a      	strb	r2, [r3, #0]

	Verify_Datalogger = 0;
 80058e8:	4b06      	ldr	r3, [pc, #24]	; (8005904 <Principal_Datalogger_Finish+0x60>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	701a      	strb	r2, [r3, #0]

	return retVal;
 80058ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	40020800 	.word	0x40020800
 80058fc:	20002e9c 	.word	0x20002e9c
 8005900:	20001bd0 	.word	0x20001bd0
 8005904:	20001a10 	.word	0x20001a10

08005908 <Principal_Datalogger_Save_Buffer>:

void Principal_Datalogger_Save_Buffer(uint32_t Data_ID, uint8_t Data_Length, uint8_t* Data_Buffer, FIL* file_struct)
{
 8005908:	b5b0      	push	{r4, r5, r7, lr}
 800590a:	b08a      	sub	sp, #40	; 0x28
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	607a      	str	r2, [r7, #4]
 8005912:	603b      	str	r3, [r7, #0]
 8005914:	460b      	mov	r3, r1
 8005916:	72fb      	strb	r3, [r7, #11]
 8005918:	466b      	mov	r3, sp
 800591a:	461d      	mov	r5, r3
	uint8_t buffer[5 + Data_Length];
 800591c:	7afb      	ldrb	r3, [r7, #11]
 800591e:	1d5c      	adds	r4, r3, #5
 8005920:	1e63      	subs	r3, r4, #1
 8005922:	623b      	str	r3, [r7, #32]
 8005924:	4623      	mov	r3, r4
 8005926:	4618      	mov	r0, r3
 8005928:	f04f 0100 	mov.w	r1, #0
 800592c:	f04f 0200 	mov.w	r2, #0
 8005930:	f04f 0300 	mov.w	r3, #0
 8005934:	00cb      	lsls	r3, r1, #3
 8005936:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800593a:	00c2      	lsls	r2, r0, #3
 800593c:	4623      	mov	r3, r4
 800593e:	4618      	mov	r0, r3
 8005940:	f04f 0100 	mov.w	r1, #0
 8005944:	f04f 0200 	mov.w	r2, #0
 8005948:	f04f 0300 	mov.w	r3, #0
 800594c:	00cb      	lsls	r3, r1, #3
 800594e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8005952:	00c2      	lsls	r2, r0, #3
 8005954:	4623      	mov	r3, r4
 8005956:	3307      	adds	r3, #7
 8005958:	08db      	lsrs	r3, r3, #3
 800595a:	00db      	lsls	r3, r3, #3
 800595c:	ebad 0d03 	sub.w	sp, sp, r3
 8005960:	466b      	mov	r3, sp
 8005962:	3300      	adds	r3, #0
 8005964:	61fb      	str	r3, [r7, #28]
	UINT byte;
	FRESULT verify[2];

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 8005966:	2180      	movs	r1, #128	; 0x80
 8005968:	4848      	ldr	r0, [pc, #288]	; (8005a8c <Principal_Datalogger_Save_Buffer+0x184>)
 800596a:	f002 ffaf 	bl	80088cc <HAL_GPIO_ReadPin>
 800596e:	4603      	mov	r3, r0
 8005970:	2b01      	cmp	r3, #1
 8005972:	f000 8083 	beq.w	8005a7c <Principal_Datalogger_Save_Buffer+0x174>
		return;

	else if(HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_SET)
 8005976:	f44f 7100 	mov.w	r1, #512	; 0x200
 800597a:	4845      	ldr	r0, [pc, #276]	; (8005a90 <Principal_Datalogger_Save_Buffer+0x188>)
 800597c:	f002 ffa6 	bl	80088cc <HAL_GPIO_ReadPin>
 8005980:	4603      	mov	r3, r0
 8005982:	2b01      	cmp	r3, #1
 8005984:	d07c      	beq.n	8005a80 <Principal_Datalogger_Save_Buffer+0x178>
		return;

	buffer[0] = 'D';
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	2244      	movs	r2, #68	; 0x44
 800598a:	701a      	strb	r2, [r3, #0]
	buffer[1] = 'L';
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	224c      	movs	r2, #76	; 0x4c
 8005990:	705a      	strb	r2, [r3, #1]
	buffer[2] = Data_ID & 0xff;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	b2da      	uxtb	r2, r3
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	709a      	strb	r2, [r3, #2]
	buffer[3] = Data_Length;
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	7afa      	ldrb	r2, [r7, #11]
 800599e:	70da      	strb	r2, [r3, #3]
	buffer[4] = Acc_Datalogger[0];
 80059a0:	4b3c      	ldr	r3, [pc, #240]	; (8005a94 <Principal_Datalogger_Save_Buffer+0x18c>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	b2da      	uxtb	r2, r3
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	711a      	strb	r2, [r3, #4]

	Acc_Datalogger[0] = 0;
 80059aa:	4b3a      	ldr	r3, [pc, #232]	; (8005a94 <Principal_Datalogger_Save_Buffer+0x18c>)
 80059ac:	2200      	movs	r2, #0
 80059ae:	601a      	str	r2, [r3, #0]

	for(uint8_t i = 0; i < Data_Length; i++)
 80059b0:	2300      	movs	r3, #0
 80059b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80059b6:	e00e      	b.n	80059d6 <Principal_Datalogger_Save_Buffer+0xce>
		buffer[5 + i] = Data_Buffer[i];
 80059b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	441a      	add	r2, r3
 80059c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059c4:	3305      	adds	r3, #5
 80059c6:	7811      	ldrb	r1, [r2, #0]
 80059c8:	69fa      	ldr	r2, [r7, #28]
 80059ca:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < Data_Length; i++)
 80059cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80059d0:	3301      	adds	r3, #1
 80059d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80059d6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80059da:	7afb      	ldrb	r3, [r7, #11]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d3eb      	bcc.n	80059b8 <Principal_Datalogger_Save_Buffer+0xb0>

//	memcpy(&buffer[5], Data_Buffer, Data_Length);

	memcpy(Datalogger_Buffer + Datalogger_Buffer_Position, buffer, 5 + Data_Length);
 80059e0:	4b2d      	ldr	r3, [pc, #180]	; (8005a98 <Principal_Datalogger_Save_Buffer+0x190>)
 80059e2:	881b      	ldrh	r3, [r3, #0]
 80059e4:	461a      	mov	r2, r3
 80059e6:	4b2d      	ldr	r3, [pc, #180]	; (8005a9c <Principal_Datalogger_Save_Buffer+0x194>)
 80059e8:	18d0      	adds	r0, r2, r3
 80059ea:	69f9      	ldr	r1, [r7, #28]
 80059ec:	7afb      	ldrb	r3, [r7, #11]
 80059ee:	3305      	adds	r3, #5
 80059f0:	461a      	mov	r2, r3
 80059f2:	f011 fedf 	bl	80177b4 <memcpy>

	Datalogger_Buffer_Position += (5 + Data_Length);
 80059f6:	7afb      	ldrb	r3, [r7, #11]
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	4b27      	ldr	r3, [pc, #156]	; (8005a98 <Principal_Datalogger_Save_Buffer+0x190>)
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	4413      	add	r3, r2
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	3305      	adds	r3, #5
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	4b24      	ldr	r3, [pc, #144]	; (8005a98 <Principal_Datalogger_Save_Buffer+0x190>)
 8005a08:	801a      	strh	r2, [r3, #0]

	if(Datalogger_Buffer_Position > DATALOGGER_SAVE_THR)
 8005a0a:	4b23      	ldr	r3, [pc, #140]	; (8005a98 <Principal_Datalogger_Save_Buffer+0x190>)
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005a12:	d331      	bcc.n	8005a78 <Principal_Datalogger_Save_Buffer+0x170>
	{
		Datalogger_Buffer_Position++;
 8005a14:	4b20      	ldr	r3, [pc, #128]	; (8005a98 <Principal_Datalogger_Save_Buffer+0x190>)
 8005a16:	881b      	ldrh	r3, [r3, #0]
 8005a18:	3301      	adds	r3, #1
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	4b1e      	ldr	r3, [pc, #120]	; (8005a98 <Principal_Datalogger_Save_Buffer+0x190>)
 8005a1e:	801a      	strh	r2, [r3, #0]

		verify[0] = f_write(file_struct, Datalogger_Buffer, Datalogger_Buffer_Position, &byte);
 8005a20:	4b1d      	ldr	r3, [pc, #116]	; (8005a98 <Principal_Datalogger_Save_Buffer+0x190>)
 8005a22:	881b      	ldrh	r3, [r3, #0]
 8005a24:	461a      	mov	r2, r3
 8005a26:	f107 0318 	add.w	r3, r7, #24
 8005a2a:	491c      	ldr	r1, [pc, #112]	; (8005a9c <Principal_Datalogger_Save_Buffer+0x194>)
 8005a2c:	6838      	ldr	r0, [r7, #0]
 8005a2e:	f010 fc54 	bl	80162da <f_write>
 8005a32:	4603      	mov	r3, r0
 8005a34:	753b      	strb	r3, [r7, #20]
		verify[1] = f_sync(file_struct);
 8005a36:	6838      	ldr	r0, [r7, #0]
 8005a38:	f010 fde3 	bl	8016602 <f_sync>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	757b      	strb	r3, [r7, #21]

		res[3] = verify[0];
 8005a40:	7d3a      	ldrb	r2, [r7, #20]
 8005a42:	4b17      	ldr	r3, [pc, #92]	; (8005aa0 <Principal_Datalogger_Save_Buffer+0x198>)
 8005a44:	70da      	strb	r2, [r3, #3]
		res[4] = verify[1];
 8005a46:	7d7a      	ldrb	r2, [r7, #21]
 8005a48:	4b15      	ldr	r3, [pc, #84]	; (8005aa0 <Principal_Datalogger_Save_Buffer+0x198>)
 8005a4a:	711a      	strb	r2, [r3, #4]

		if((verify[0] == FR_OK) && (verify[1] == FR_OK) && (Datalogger_Buffer_Position == byte))
 8005a4c:	7d3b      	ldrb	r3, [r7, #20]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10c      	bne.n	8005a6c <Principal_Datalogger_Save_Buffer+0x164>
 8005a52:	7d7b      	ldrb	r3, [r7, #21]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d109      	bne.n	8005a6c <Principal_Datalogger_Save_Buffer+0x164>
 8005a58:	4b0f      	ldr	r3, [pc, #60]	; (8005a98 <Principal_Datalogger_Save_Buffer+0x190>)
 8005a5a:	881b      	ldrh	r3, [r3, #0]
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d103      	bne.n	8005a6c <Principal_Datalogger_Save_Buffer+0x164>
			Verify_Datalogger = 1;
 8005a64:	4b0f      	ldr	r3, [pc, #60]	; (8005aa4 <Principal_Datalogger_Save_Buffer+0x19c>)
 8005a66:	2201      	movs	r2, #1
 8005a68:	701a      	strb	r2, [r3, #0]
 8005a6a:	e002      	b.n	8005a72 <Principal_Datalogger_Save_Buffer+0x16a>
		else
			Verify_Datalogger = 0;
 8005a6c:	4b0d      	ldr	r3, [pc, #52]	; (8005aa4 <Principal_Datalogger_Save_Buffer+0x19c>)
 8005a6e:	2200      	movs	r2, #0
 8005a70:	701a      	strb	r2, [r3, #0]

		Datalogger_Buffer_Position = 0;
 8005a72:	4b09      	ldr	r3, [pc, #36]	; (8005a98 <Principal_Datalogger_Save_Buffer+0x190>)
 8005a74:	2200      	movs	r2, #0
 8005a76:	801a      	strh	r2, [r3, #0]
 8005a78:	46ad      	mov	sp, r5
 8005a7a:	e003      	b.n	8005a84 <Principal_Datalogger_Save_Buffer+0x17c>
		return;
 8005a7c:	bf00      	nop
 8005a7e:	e000      	b.n	8005a82 <Principal_Datalogger_Save_Buffer+0x17a>
		return;
 8005a80:	bf00      	nop
 8005a82:	46ad      	mov	sp, r5
	}
}
 8005a84:	3728      	adds	r7, #40	; 0x28
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bdb0      	pop	{r4, r5, r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	40020800 	.word	0x40020800
 8005a90:	40020000 	.word	0x40020000
 8005a94:	20002e1c 	.word	0x20002e1c
 8005a98:	200007bc 	.word	0x200007bc
 8005a9c:	200007cc 	.word	0x200007cc
 8005aa0:	20002e8c 	.word	0x20002e8c
 8005aa4:	20001a10 	.word	0x20001a10

08005aa8 <Principal_Datalogger_Button>:

void Principal_Datalogger_Button(DIR* dir_struct, FIL* file_struct)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	6039      	str	r1, [r7, #0]
	if(Acc_Datalogger[1] == 0)
 8005ab2:	4b0c      	ldr	r3, [pc, #48]	; (8005ae4 <Principal_Datalogger_Button+0x3c>)
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10f      	bne.n	8005ada <Principal_Datalogger_Button+0x32>
	{
		Acc_Datalogger[1] = BUTTON_COOLDOWN;
 8005aba:	4b0a      	ldr	r3, [pc, #40]	; (8005ae4 <Principal_Datalogger_Button+0x3c>)
 8005abc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005ac0:	605a      	str	r2, [r3, #4]

		if(Flag_Datalogger == DL_No_Save)
 8005ac2:	4b09      	ldr	r3, [pc, #36]	; (8005ae8 <Principal_Datalogger_Button+0x40>)
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d103      	bne.n	8005ad2 <Principal_Datalogger_Button+0x2a>
			Flag_Datalogger = DL_But_Press;
 8005aca:	4b07      	ldr	r3, [pc, #28]	; (8005ae8 <Principal_Datalogger_Button+0x40>)
 8005acc:	2203      	movs	r2, #3
 8005ace:	701a      	strb	r2, [r3, #0]

		else
			Principal_Datalogger_Finish(dir_struct, file_struct);
	}
}
 8005ad0:	e003      	b.n	8005ada <Principal_Datalogger_Button+0x32>
			Principal_Datalogger_Finish(dir_struct, file_struct);
 8005ad2:	6839      	ldr	r1, [r7, #0]
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f7ff fee5 	bl	80058a4 <Principal_Datalogger_Finish>
}
 8005ada:	bf00      	nop
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	20002e1c 	.word	0x20002e1c
 8005ae8:	20001bd0 	.word	0x20001bd0

08005aec <Principal_Card_Detection>:

void Principal_Card_Detection(FATFS* fatfs_struct, DIR* dir_struct, FIL* file_struct)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b086      	sub	sp, #24
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
	GPIO_PinState cd_pin = HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin);
 8005af8:	2180      	movs	r1, #128	; 0x80
 8005afa:	4811      	ldr	r0, [pc, #68]	; (8005b40 <Principal_Card_Detection+0x54>)
 8005afc:	f002 fee6 	bl	80088cc <HAL_GPIO_ReadPin>
 8005b00:	4603      	mov	r3, r0
 8005b02:	75fb      	strb	r3, [r7, #23]

	if((cd_pin == GPIO_PIN_SET) && ((Flag_Datalogger == DL_Save) || (Flag_Datalogger == DL_Error)))
 8005b04:	7dfb      	ldrb	r3, [r7, #23]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d10c      	bne.n	8005b24 <Principal_Card_Detection+0x38>
 8005b0a:	4b0e      	ldr	r3, [pc, #56]	; (8005b44 <Principal_Card_Detection+0x58>)
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d003      	beq.n	8005b1a <Principal_Card_Detection+0x2e>
 8005b12:	4b0c      	ldr	r3, [pc, #48]	; (8005b44 <Principal_Card_Detection+0x58>)
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	2b04      	cmp	r3, #4
 8005b18:	d104      	bne.n	8005b24 <Principal_Card_Detection+0x38>
		Principal_Datalogger_Finish(dir_struct, file_struct);
 8005b1a:	6879      	ldr	r1, [r7, #4]
 8005b1c:	68b8      	ldr	r0, [r7, #8]
 8005b1e:	f7ff fec1 	bl	80058a4 <Principal_Datalogger_Finish>

	else if((cd_pin == GPIO_PIN_RESET) && (Flag_Datalogger == DL_No_Card))
		Principal_Datalogger_Init(fatfs_struct);
}
 8005b22:	e009      	b.n	8005b38 <Principal_Card_Detection+0x4c>
	else if((cd_pin == GPIO_PIN_RESET) && (Flag_Datalogger == DL_No_Card))
 8005b24:	7dfb      	ldrb	r3, [r7, #23]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d106      	bne.n	8005b38 <Principal_Card_Detection+0x4c>
 8005b2a:	4b06      	ldr	r3, [pc, #24]	; (8005b44 <Principal_Card_Detection+0x58>)
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	2b02      	cmp	r3, #2
 8005b30:	d102      	bne.n	8005b38 <Principal_Card_Detection+0x4c>
		Principal_Datalogger_Init(fatfs_struct);
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f7ff fd94 	bl	8005660 <Principal_Datalogger_Init>
}
 8005b38:	bf00      	nop
 8005b3a:	3718      	adds	r7, #24
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	40020800 	.word	0x40020800
 8005b44:	20001bd0 	.word	0x20001bd0

08005b48 <Principal_Beacon_Detect>:

void Principal_Beacon_Detect()
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	af00      	add	r7, sp, #0
	Lap_Number++;
 8005b4c:	4b05      	ldr	r3, [pc, #20]	; (8005b64 <Principal_Beacon_Detect+0x1c>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	3301      	adds	r3, #1
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	4b03      	ldr	r3, [pc, #12]	; (8005b64 <Principal_Beacon_Detect+0x1c>)
 8005b56:	701a      	strb	r2, [r3, #0]

	Principal_Transmit_Msg(&hcan1, Beacon_Msg);
 8005b58:	2107      	movs	r1, #7
 8005b5a:	4803      	ldr	r0, [pc, #12]	; (8005b68 <Principal_Beacon_Detect+0x20>)
 8005b5c:	f7fd fd48 	bl	80035f0 <Principal_Transmit_Msg>
}
 8005b60:	bf00      	nop
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	20002cc4 	.word	0x20002cc4
 8005b68:	20002d2c 	.word	0x20002d2c

08005b6c <HAL_CAN_RxFifo0MsgPendingCallback>:
 */

#include "principal.h"

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8005b74:	4b2d      	ldr	r3, [pc, #180]	; (8005c2c <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8005b76:	4a2e      	ldr	r2, [pc, #184]	; (8005c30 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8005b78:	2100      	movs	r1, #0
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f001 fcfa 	bl	8007574 <HAL_CAN_GetRxMessage>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d146      	bne.n	8005c14 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
	{
		Verify_CAN |= 2;
 8005b86:	4b2b      	ldr	r3, [pc, #172]	; (8005c34 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	f043 0302 	orr.w	r3, r3, #2
 8005b8e:	b2da      	uxtb	r2, r3
 8005b90:	4b28      	ldr	r3, [pc, #160]	; (8005c34 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8005b92:	701a      	strb	r2, [r3, #0]

		if((RxHeader.IDE == CAN_ID_STD) && (Flag_Datalogger == DL_Save))
 8005b94:	4b26      	ldr	r3, [pc, #152]	; (8005c30 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10d      	bne.n	8005bb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
 8005b9c:	4b26      	ldr	r3, [pc, #152]	; (8005c38 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d109      	bne.n	8005bb8 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
			Principal_Datalogger_Save_Buffer(RxHeader.StdId, RxHeader.DLC, RxData, &File_Struct);
 8005ba4:	4b22      	ldr	r3, [pc, #136]	; (8005c30 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8005ba6:	6818      	ldr	r0, [r3, #0]
 8005ba8:	4b21      	ldr	r3, [pc, #132]	; (8005c30 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	b2d9      	uxtb	r1, r3
 8005bae:	4b23      	ldr	r3, [pc, #140]	; (8005c3c <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8005bb0:	4a1e      	ldr	r2, [pc, #120]	; (8005c2c <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8005bb2:	f7ff fea9 	bl	8005908 <Principal_Datalogger_Save_Buffer>
 8005bb6:	e035      	b.n	8005c24 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>

		else if(((RxHeader.ExtId & 0x1FFFF000) == 0x1E35C000) && (RxHeader.IDE == CAN_ID_EXT))
 8005bb8:	4b1d      	ldr	r3, [pc, #116]	; (8005c30 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	4b20      	ldr	r3, [pc, #128]	; (8005c40 <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	4a20      	ldr	r2, [pc, #128]	; (8005c44 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d10d      	bne.n	8005be2 <HAL_CAN_RxFifo0MsgPendingCallback+0x76>
 8005bc6:	4b1a      	ldr	r3, [pc, #104]	; (8005c30 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	2b04      	cmp	r3, #4
 8005bcc:	d109      	bne.n	8005be2 <HAL_CAN_RxFifo0MsgPendingCallback+0x76>
			PDM_CAN_Process_Data(RxHeader.ExtId, RxHeader.DLC, RxData, &PDM_Readings);
 8005bce:	4b18      	ldr	r3, [pc, #96]	; (8005c30 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8005bd0:	6858      	ldr	r0, [r3, #4]
 8005bd2:	4b17      	ldr	r3, [pc, #92]	; (8005c30 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	b2d9      	uxtb	r1, r3
 8005bd8:	4b1b      	ldr	r3, [pc, #108]	; (8005c48 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8005bda:	4a14      	ldr	r2, [pc, #80]	; (8005c2c <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8005bdc:	f7fc fa50 	bl	8002080 <PDM_CAN_Process_Data>
 8005be0:	e020      	b.n	8005c24 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>

		else if((RxHeader.ExtId == CONFIG_ID) && (RxHeader.IDE == CAN_ID_EXT))
 8005be2:	4b13      	ldr	r3, [pc, #76]	; (8005c30 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10b      	bne.n	8005c02 <HAL_CAN_RxFifo0MsgPendingCallback+0x96>
 8005bea:	4b11      	ldr	r3, [pc, #68]	; (8005c30 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	2b04      	cmp	r3, #4
 8005bf0:	d107      	bne.n	8005c02 <HAL_CAN_RxFifo0MsgPendingCallback+0x96>
			Principal_Receive_Config(&hi2c1, RxData, RxHeader.DLC);
 8005bf2:	4b0f      	ldr	r3, [pc, #60]	; (8005c30 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	490c      	ldr	r1, [pc, #48]	; (8005c2c <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8005bfa:	4814      	ldr	r0, [pc, #80]	; (8005c4c <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8005bfc:	f7ff f8de 	bl	8004dbc <Principal_Receive_Config>
 8005c00:	e010      	b.n	8005c24 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>

		else
			FT_CAN_ReceiveData(RxHeader.ExtId, RxHeader.DLC, RxData, &ECU_Data);
 8005c02:	4b0b      	ldr	r3, [pc, #44]	; (8005c30 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8005c04:	6858      	ldr	r0, [r3, #4]
 8005c06:	4b0a      	ldr	r3, [pc, #40]	; (8005c30 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8005c08:	6919      	ldr	r1, [r3, #16]
 8005c0a:	4b11      	ldr	r3, [pc, #68]	; (8005c50 <HAL_CAN_RxFifo0MsgPendingCallback+0xe4>)
 8005c0c:	4a07      	ldr	r2, [pc, #28]	; (8005c2c <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8005c0e:	f7fa ff5f 	bl	8000ad0 <FT_CAN_ReceiveData>
	}

	else
		Verify_CAN &= 1;
}
 8005c12:	e007      	b.n	8005c24 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>
		Verify_CAN &= 1;
 8005c14:	4b07      	ldr	r3, [pc, #28]	; (8005c34 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	f003 0301 	and.w	r3, r3, #1
 8005c1c:	b2da      	uxtb	r2, r3
 8005c1e:	4b05      	ldr	r3, [pc, #20]	; (8005c34 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8005c20:	701a      	strb	r2, [r3, #0]
}
 8005c22:	e7ff      	b.n	8005c24 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>
 8005c24:	bf00      	nop
 8005c26:	3708      	adds	r7, #8
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	20001c7c 	.word	0x20001c7c
 8005c30:	20002db0 	.word	0x20002db0
 8005c34:	20001a58 	.word	0x20001a58
 8005c38:	20001bd0 	.word	0x20001bd0
 8005c3c:	20001c84 	.word	0x20001c84
 8005c40:	1ffff000 	.word	0x1ffff000
 8005c44:	1e35c000 	.word	0x1e35c000
 8005c48:	20001a14 	.word	0x20001a14
 8005c4c:	20000768 	.word	0x20000768
 8005c50:	20002e24 	.word	0x20002e24

08005c54 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == EXTI0_Pin)
 8005c5e:	88fb      	ldrh	r3, [r7, #6]
 8005c60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c64:	d111      	bne.n	8005c8a <HAL_GPIO_EXTI_Callback+0x36>
	{
		if((Input_Config & 0x01) == 0)
 8005c66:	4b16      	ldr	r3, [pc, #88]	; (8005cc0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <HAL_GPIO_EXTI_Callback+0x22>
			Principal_Beacon_Detect();
 8005c72:	f7ff ff69 	bl	8005b48 <Principal_Beacon_Detect>

		if((Input_Config & 0x02) == 0)
 8005c76:	4b12      	ldr	r3, [pc, #72]	; (8005cc0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d103      	bne.n	8005c8a <HAL_GPIO_EXTI_Callback+0x36>
			Principal_Datalogger_Button(&Dir_Struct, &File_Struct);
 8005c82:	4910      	ldr	r1, [pc, #64]	; (8005cc4 <HAL_GPIO_EXTI_Callback+0x70>)
 8005c84:	4810      	ldr	r0, [pc, #64]	; (8005cc8 <HAL_GPIO_EXTI_Callback+0x74>)
 8005c86:	f7ff ff0f 	bl	8005aa8 <Principal_Datalogger_Button>
	}

	if(GPIO_Pin == EXTI1_Pin)
 8005c8a:	88fb      	ldrh	r3, [r7, #6]
 8005c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c90:	d111      	bne.n	8005cb6 <HAL_GPIO_EXTI_Callback+0x62>
	{
		if((Input_Config & 0x01) == 1)
 8005c92:	4b0b      	ldr	r3, [pc, #44]	; (8005cc0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	f003 0301 	and.w	r3, r3, #1
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <HAL_GPIO_EXTI_Callback+0x4e>
			Principal_Beacon_Detect();
 8005c9e:	f7ff ff53 	bl	8005b48 <Principal_Beacon_Detect>

		if((Input_Config & 0x02) == 2)
 8005ca2:	4b07      	ldr	r3, [pc, #28]	; (8005cc0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	f003 0302 	and.w	r3, r3, #2
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d003      	beq.n	8005cb6 <HAL_GPIO_EXTI_Callback+0x62>
			Principal_Datalogger_Button(&Dir_Struct, &File_Struct);
 8005cae:	4905      	ldr	r1, [pc, #20]	; (8005cc4 <HAL_GPIO_EXTI_Callback+0x70>)
 8005cb0:	4805      	ldr	r0, [pc, #20]	; (8005cc8 <HAL_GPIO_EXTI_Callback+0x74>)
 8005cb2:	f7ff fef9 	bl	8005aa8 <Principal_Datalogger_Button>
	}
}
 8005cb6:	bf00      	nop
 8005cb8:	3708      	adds	r7, #8
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
 8005cbe:	bf00      	nop
 8005cc0:	200006f8 	.word	0x200006f8
 8005cc4:	20001c84 	.word	0x20001c84
 8005cc8:	20001a64 	.word	0x20001a64

08005ccc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a26      	ldr	r2, [pc, #152]	; (8005d74 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d144      	bne.n	8005d68 <HAL_TIM_PeriodElapsedCallback+0x9c>
	{
		Acc_Datalogger[0]++;
 8005cde:	4b26      	ldr	r3, [pc, #152]	; (8005d78 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	4a24      	ldr	r2, [pc, #144]	; (8005d78 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8005ce6:	6013      	str	r3, [r2, #0]
		if(Acc_Datalogger[1] > 0) Acc_Datalogger[1]--;
 8005ce8:	4b23      	ldr	r3, [pc, #140]	; (8005d78 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d004      	beq.n	8005cfa <HAL_TIM_PeriodElapsedCallback+0x2e>
 8005cf0:	4b21      	ldr	r3, [pc, #132]	; (8005d78 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	4a20      	ldr	r2, [pc, #128]	; (8005d78 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8005cf8:	6053      	str	r3, [r2, #4]

		Acc_CAN[Analog_1_4]++;
 8005cfa:	4b20      	ldr	r3, [pc, #128]	; (8005d7c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	3301      	adds	r3, #1
 8005d00:	4a1e      	ldr	r2, [pc, #120]	; (8005d7c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005d02:	6013      	str	r3, [r2, #0]
		Acc_CAN[Analog_5_8]++;
 8005d04:	4b1d      	ldr	r3, [pc, #116]	; (8005d7c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	4a1c      	ldr	r2, [pc, #112]	; (8005d7c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005d0c:	6053      	str	r3, [r2, #4]
		Acc_CAN[Analog_9_12]++;
 8005d0e:	4b1b      	ldr	r3, [pc, #108]	; (8005d7c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	3301      	adds	r3, #1
 8005d14:	4a19      	ldr	r2, [pc, #100]	; (8005d7c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005d16:	6093      	str	r3, [r2, #8]
		Acc_CAN[RTC_Msg]++;
 8005d18:	4b18      	ldr	r3, [pc, #96]	; (8005d7c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	4a17      	ldr	r2, [pc, #92]	; (8005d7c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005d20:	60d3      	str	r3, [r2, #12]

		Acc_Msg[Analog_1_4]++;
 8005d22:	4b17      	ldr	r3, [pc, #92]	; (8005d80 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	3301      	adds	r3, #1
 8005d28:	4a15      	ldr	r2, [pc, #84]	; (8005d80 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005d2a:	6013      	str	r3, [r2, #0]
		Acc_Msg[Analog_5_8]++;
 8005d2c:	4b14      	ldr	r3, [pc, #80]	; (8005d80 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	3301      	adds	r3, #1
 8005d32:	4a13      	ldr	r2, [pc, #76]	; (8005d80 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005d34:	6053      	str	r3, [r2, #4]
		Acc_Msg[Analog_9_12]++;
 8005d36:	4b12      	ldr	r3, [pc, #72]	; (8005d80 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	4a10      	ldr	r2, [pc, #64]	; (8005d80 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005d3e:	6093      	str	r3, [r2, #8]
		Acc_Msg[RTC_Msg]++;
 8005d40:	4b0f      	ldr	r3, [pc, #60]	; (8005d80 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	3301      	adds	r3, #1
 8005d46:	4a0e      	ldr	r2, [pc, #56]	; (8005d80 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005d48:	60d3      	str	r3, [r2, #12]
		Acc_Msg[Verify_Msg]++;
 8005d4a:	4b0d      	ldr	r3, [pc, #52]	; (8005d80 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	4a0b      	ldr	r2, [pc, #44]	; (8005d80 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005d52:	6113      	str	r3, [r2, #16]
		Acc_Msg[ECU_Save]++;
 8005d54:	4b0a      	ldr	r3, [pc, #40]	; (8005d80 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005d56:	695b      	ldr	r3, [r3, #20]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	4a09      	ldr	r2, [pc, #36]	; (8005d80 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005d5c:	6153      	str	r3, [r2, #20]
		Acc_Msg[PDM_Save]++;
 8005d5e:	4b08      	ldr	r3, [pc, #32]	; (8005d80 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	3301      	adds	r3, #1
 8005d64:	4a06      	ldr	r2, [pc, #24]	; (8005d80 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005d66:	6193      	str	r3, [r2, #24]
	}
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	40001400 	.word	0x40001400
 8005d78:	20002e1c 	.word	0x20002e1c
 8005d7c:	20002d54 	.word	0x20002d54
 8005d80:	20001c60 	.word	0x20001c60

08005d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	607b      	str	r3, [r7, #4]
 8005d8e:	4b10      	ldr	r3, [pc, #64]	; (8005dd0 <HAL_MspInit+0x4c>)
 8005d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d92:	4a0f      	ldr	r2, [pc, #60]	; (8005dd0 <HAL_MspInit+0x4c>)
 8005d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d98:	6453      	str	r3, [r2, #68]	; 0x44
 8005d9a:	4b0d      	ldr	r3, [pc, #52]	; (8005dd0 <HAL_MspInit+0x4c>)
 8005d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005da2:	607b      	str	r3, [r7, #4]
 8005da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005da6:	2300      	movs	r3, #0
 8005da8:	603b      	str	r3, [r7, #0]
 8005daa:	4b09      	ldr	r3, [pc, #36]	; (8005dd0 <HAL_MspInit+0x4c>)
 8005dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dae:	4a08      	ldr	r2, [pc, #32]	; (8005dd0 <HAL_MspInit+0x4c>)
 8005db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005db4:	6413      	str	r3, [r2, #64]	; 0x40
 8005db6:	4b06      	ldr	r3, [pc, #24]	; (8005dd0 <HAL_MspInit+0x4c>)
 8005db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dbe:	603b      	str	r3, [r7, #0]
 8005dc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005dc2:	bf00      	nop
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	40023800 	.word	0x40023800

08005dd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b08e      	sub	sp, #56	; 0x38
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005de0:	2200      	movs	r2, #0
 8005de2:	601a      	str	r2, [r3, #0]
 8005de4:	605a      	str	r2, [r3, #4]
 8005de6:	609a      	str	r2, [r3, #8]
 8005de8:	60da      	str	r2, [r3, #12]
 8005dea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a79      	ldr	r2, [pc, #484]	; (8005fd8 <HAL_ADC_MspInit+0x204>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	f040 808d 	bne.w	8005f12 <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005df8:	2300      	movs	r3, #0
 8005dfa:	623b      	str	r3, [r7, #32]
 8005dfc:	4b77      	ldr	r3, [pc, #476]	; (8005fdc <HAL_ADC_MspInit+0x208>)
 8005dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e00:	4a76      	ldr	r2, [pc, #472]	; (8005fdc <HAL_ADC_MspInit+0x208>)
 8005e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e06:	6453      	str	r3, [r2, #68]	; 0x44
 8005e08:	4b74      	ldr	r3, [pc, #464]	; (8005fdc <HAL_ADC_MspInit+0x208>)
 8005e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e10:	623b      	str	r3, [r7, #32]
 8005e12:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e14:	2300      	movs	r3, #0
 8005e16:	61fb      	str	r3, [r7, #28]
 8005e18:	4b70      	ldr	r3, [pc, #448]	; (8005fdc <HAL_ADC_MspInit+0x208>)
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1c:	4a6f      	ldr	r2, [pc, #444]	; (8005fdc <HAL_ADC_MspInit+0x208>)
 8005e1e:	f043 0301 	orr.w	r3, r3, #1
 8005e22:	6313      	str	r3, [r2, #48]	; 0x30
 8005e24:	4b6d      	ldr	r3, [pc, #436]	; (8005fdc <HAL_ADC_MspInit+0x208>)
 8005e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e28:	f003 0301 	and.w	r3, r3, #1
 8005e2c:	61fb      	str	r3, [r7, #28]
 8005e2e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e30:	2300      	movs	r3, #0
 8005e32:	61bb      	str	r3, [r7, #24]
 8005e34:	4b69      	ldr	r3, [pc, #420]	; (8005fdc <HAL_ADC_MspInit+0x208>)
 8005e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e38:	4a68      	ldr	r2, [pc, #416]	; (8005fdc <HAL_ADC_MspInit+0x208>)
 8005e3a:	f043 0304 	orr.w	r3, r3, #4
 8005e3e:	6313      	str	r3, [r2, #48]	; 0x30
 8005e40:	4b66      	ldr	r3, [pc, #408]	; (8005fdc <HAL_ADC_MspInit+0x208>)
 8005e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e44:	f003 0304 	and.w	r3, r3, #4
 8005e48:	61bb      	str	r3, [r7, #24]
 8005e4a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	617b      	str	r3, [r7, #20]
 8005e50:	4b62      	ldr	r3, [pc, #392]	; (8005fdc <HAL_ADC_MspInit+0x208>)
 8005e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e54:	4a61      	ldr	r2, [pc, #388]	; (8005fdc <HAL_ADC_MspInit+0x208>)
 8005e56:	f043 0302 	orr.w	r3, r3, #2
 8005e5a:	6313      	str	r3, [r2, #48]	; 0x30
 8005e5c:	4b5f      	ldr	r3, [pc, #380]	; (8005fdc <HAL_ADC_MspInit+0x208>)
 8005e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e60:	f003 0302 	and.w	r3, r3, #2
 8005e64:	617b      	str	r3, [r7, #20]
 8005e66:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005e68:	23c0      	movs	r3, #192	; 0xc0
 8005e6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e70:	2300      	movs	r3, #0
 8005e72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e78:	4619      	mov	r1, r3
 8005e7a:	4859      	ldr	r0, [pc, #356]	; (8005fe0 <HAL_ADC_MspInit+0x20c>)
 8005e7c:	f002 fb92 	bl	80085a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005e80:	2330      	movs	r3, #48	; 0x30
 8005e82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e84:	2303      	movs	r3, #3
 8005e86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e90:	4619      	mov	r1, r3
 8005e92:	4854      	ldr	r0, [pc, #336]	; (8005fe4 <HAL_ADC_MspInit+0x210>)
 8005e94:	f002 fb86 	bl	80085a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	484f      	ldr	r0, [pc, #316]	; (8005fe8 <HAL_ADC_MspInit+0x214>)
 8005eac:	f002 fb7a 	bl	80085a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005eb0:	4b4e      	ldr	r3, [pc, #312]	; (8005fec <HAL_ADC_MspInit+0x218>)
 8005eb2:	4a4f      	ldr	r2, [pc, #316]	; (8005ff0 <HAL_ADC_MspInit+0x21c>)
 8005eb4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005eb6:	4b4d      	ldr	r3, [pc, #308]	; (8005fec <HAL_ADC_MspInit+0x218>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005ebc:	4b4b      	ldr	r3, [pc, #300]	; (8005fec <HAL_ADC_MspInit+0x218>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ec2:	4b4a      	ldr	r3, [pc, #296]	; (8005fec <HAL_ADC_MspInit+0x218>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005ec8:	4b48      	ldr	r3, [pc, #288]	; (8005fec <HAL_ADC_MspInit+0x218>)
 8005eca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ece:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005ed0:	4b46      	ldr	r3, [pc, #280]	; (8005fec <HAL_ADC_MspInit+0x218>)
 8005ed2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ed6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005ed8:	4b44      	ldr	r3, [pc, #272]	; (8005fec <HAL_ADC_MspInit+0x218>)
 8005eda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ede:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005ee0:	4b42      	ldr	r3, [pc, #264]	; (8005fec <HAL_ADC_MspInit+0x218>)
 8005ee2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ee6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005ee8:	4b40      	ldr	r3, [pc, #256]	; (8005fec <HAL_ADC_MspInit+0x218>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005eee:	4b3f      	ldr	r3, [pc, #252]	; (8005fec <HAL_ADC_MspInit+0x218>)
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005ef4:	483d      	ldr	r0, [pc, #244]	; (8005fec <HAL_ADC_MspInit+0x218>)
 8005ef6:	f001 ffb7 	bl	8007e68 <HAL_DMA_Init>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d001      	beq.n	8005f04 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8005f00:	f7fb fe76 	bl	8001bf0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a39      	ldr	r2, [pc, #228]	; (8005fec <HAL_ADC_MspInit+0x218>)
 8005f08:	639a      	str	r2, [r3, #56]	; 0x38
 8005f0a:	4a38      	ldr	r2, [pc, #224]	; (8005fec <HAL_ADC_MspInit+0x218>)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005f10:	e05d      	b.n	8005fce <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a37      	ldr	r2, [pc, #220]	; (8005ff4 <HAL_ADC_MspInit+0x220>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d158      	bne.n	8005fce <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	613b      	str	r3, [r7, #16]
 8005f20:	4b2e      	ldr	r3, [pc, #184]	; (8005fdc <HAL_ADC_MspInit+0x208>)
 8005f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f24:	4a2d      	ldr	r2, [pc, #180]	; (8005fdc <HAL_ADC_MspInit+0x208>)
 8005f26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f2a:	6453      	str	r3, [r2, #68]	; 0x44
 8005f2c:	4b2b      	ldr	r3, [pc, #172]	; (8005fdc <HAL_ADC_MspInit+0x208>)
 8005f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f34:	613b      	str	r3, [r7, #16]
 8005f36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f38:	2300      	movs	r3, #0
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	4b27      	ldr	r3, [pc, #156]	; (8005fdc <HAL_ADC_MspInit+0x208>)
 8005f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f40:	4a26      	ldr	r2, [pc, #152]	; (8005fdc <HAL_ADC_MspInit+0x208>)
 8005f42:	f043 0301 	orr.w	r3, r3, #1
 8005f46:	6313      	str	r3, [r2, #48]	; 0x30
 8005f48:	4b24      	ldr	r3, [pc, #144]	; (8005fdc <HAL_ADC_MspInit+0x208>)
 8005f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	60fb      	str	r3, [r7, #12]
 8005f52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005f54:	233f      	movs	r3, #63	; 0x3f
 8005f56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005f58:	2303      	movs	r3, #3
 8005f5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f64:	4619      	mov	r1, r3
 8005f66:	481e      	ldr	r0, [pc, #120]	; (8005fe0 <HAL_ADC_MspInit+0x20c>)
 8005f68:	f002 fb1c 	bl	80085a4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8005f6c:	4b22      	ldr	r3, [pc, #136]	; (8005ff8 <HAL_ADC_MspInit+0x224>)
 8005f6e:	4a23      	ldr	r2, [pc, #140]	; (8005ffc <HAL_ADC_MspInit+0x228>)
 8005f70:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8005f72:	4b21      	ldr	r3, [pc, #132]	; (8005ff8 <HAL_ADC_MspInit+0x224>)
 8005f74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005f78:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005f7a:	4b1f      	ldr	r3, [pc, #124]	; (8005ff8 <HAL_ADC_MspInit+0x224>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005f80:	4b1d      	ldr	r3, [pc, #116]	; (8005ff8 <HAL_ADC_MspInit+0x224>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005f86:	4b1c      	ldr	r3, [pc, #112]	; (8005ff8 <HAL_ADC_MspInit+0x224>)
 8005f88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f8c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005f8e:	4b1a      	ldr	r3, [pc, #104]	; (8005ff8 <HAL_ADC_MspInit+0x224>)
 8005f90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f94:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005f96:	4b18      	ldr	r3, [pc, #96]	; (8005ff8 <HAL_ADC_MspInit+0x224>)
 8005f98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005f9c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005f9e:	4b16      	ldr	r3, [pc, #88]	; (8005ff8 <HAL_ADC_MspInit+0x224>)
 8005fa0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fa4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8005fa6:	4b14      	ldr	r3, [pc, #80]	; (8005ff8 <HAL_ADC_MspInit+0x224>)
 8005fa8:	2200      	movs	r2, #0
 8005faa:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005fac:	4b12      	ldr	r3, [pc, #72]	; (8005ff8 <HAL_ADC_MspInit+0x224>)
 8005fae:	2200      	movs	r2, #0
 8005fb0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005fb2:	4811      	ldr	r0, [pc, #68]	; (8005ff8 <HAL_ADC_MspInit+0x224>)
 8005fb4:	f001 ff58 	bl	8007e68 <HAL_DMA_Init>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <HAL_ADC_MspInit+0x1ee>
      Error_Handler();
 8005fbe:	f7fb fe17 	bl	8001bf0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a0c      	ldr	r2, [pc, #48]	; (8005ff8 <HAL_ADC_MspInit+0x224>)
 8005fc6:	639a      	str	r2, [r3, #56]	; 0x38
 8005fc8:	4a0b      	ldr	r2, [pc, #44]	; (8005ff8 <HAL_ADC_MspInit+0x224>)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005fce:	bf00      	nop
 8005fd0:	3738      	adds	r7, #56	; 0x38
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	40012000 	.word	0x40012000
 8005fdc:	40023800 	.word	0x40023800
 8005fe0:	40020000 	.word	0x40020000
 8005fe4:	40020800 	.word	0x40020800
 8005fe8:	40020400 	.word	0x40020400
 8005fec:	20001ae4 	.word	0x20001ae4
 8005ff0:	40026410 	.word	0x40026410
 8005ff4:	40012100 	.word	0x40012100
 8005ff8:	20002ccc 	.word	0x20002ccc
 8005ffc:	40026440 	.word	0x40026440

08006000 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b08a      	sub	sp, #40	; 0x28
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006008:	f107 0314 	add.w	r3, r7, #20
 800600c:	2200      	movs	r2, #0
 800600e:	601a      	str	r2, [r3, #0]
 8006010:	605a      	str	r2, [r3, #4]
 8006012:	609a      	str	r2, [r3, #8]
 8006014:	60da      	str	r2, [r3, #12]
 8006016:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a1d      	ldr	r2, [pc, #116]	; (8006094 <HAL_CAN_MspInit+0x94>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d134      	bne.n	800608c <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8006022:	2300      	movs	r3, #0
 8006024:	613b      	str	r3, [r7, #16]
 8006026:	4b1c      	ldr	r3, [pc, #112]	; (8006098 <HAL_CAN_MspInit+0x98>)
 8006028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602a:	4a1b      	ldr	r2, [pc, #108]	; (8006098 <HAL_CAN_MspInit+0x98>)
 800602c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006030:	6413      	str	r3, [r2, #64]	; 0x40
 8006032:	4b19      	ldr	r3, [pc, #100]	; (8006098 <HAL_CAN_MspInit+0x98>)
 8006034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800603a:	613b      	str	r3, [r7, #16]
 800603c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800603e:	2300      	movs	r3, #0
 8006040:	60fb      	str	r3, [r7, #12]
 8006042:	4b15      	ldr	r3, [pc, #84]	; (8006098 <HAL_CAN_MspInit+0x98>)
 8006044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006046:	4a14      	ldr	r2, [pc, #80]	; (8006098 <HAL_CAN_MspInit+0x98>)
 8006048:	f043 0302 	orr.w	r3, r3, #2
 800604c:	6313      	str	r3, [r2, #48]	; 0x30
 800604e:	4b12      	ldr	r3, [pc, #72]	; (8006098 <HAL_CAN_MspInit+0x98>)
 8006050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006052:	f003 0302 	and.w	r3, r3, #2
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800605a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800605e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006060:	2302      	movs	r3, #2
 8006062:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006064:	2300      	movs	r3, #0
 8006066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006068:	2303      	movs	r3, #3
 800606a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800606c:	2309      	movs	r3, #9
 800606e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006070:	f107 0314 	add.w	r3, r7, #20
 8006074:	4619      	mov	r1, r3
 8006076:	4809      	ldr	r0, [pc, #36]	; (800609c <HAL_CAN_MspInit+0x9c>)
 8006078:	f002 fa94 	bl	80085a4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 800607c:	2200      	movs	r2, #0
 800607e:	2102      	movs	r1, #2
 8006080:	2014      	movs	r0, #20
 8006082:	f001 feba 	bl	8007dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8006086:	2014      	movs	r0, #20
 8006088:	f001 fed3 	bl	8007e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800608c:	bf00      	nop
 800608e:	3728      	adds	r7, #40	; 0x28
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	40006400 	.word	0x40006400
 8006098:	40023800 	.word	0x40023800
 800609c:	40020400 	.word	0x40020400

080060a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b08a      	sub	sp, #40	; 0x28
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060a8:	f107 0314 	add.w	r3, r7, #20
 80060ac:	2200      	movs	r2, #0
 80060ae:	601a      	str	r2, [r3, #0]
 80060b0:	605a      	str	r2, [r3, #4]
 80060b2:	609a      	str	r2, [r3, #8]
 80060b4:	60da      	str	r2, [r3, #12]
 80060b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a19      	ldr	r2, [pc, #100]	; (8006124 <HAL_I2C_MspInit+0x84>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d12b      	bne.n	800611a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060c2:	2300      	movs	r3, #0
 80060c4:	613b      	str	r3, [r7, #16]
 80060c6:	4b18      	ldr	r3, [pc, #96]	; (8006128 <HAL_I2C_MspInit+0x88>)
 80060c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ca:	4a17      	ldr	r2, [pc, #92]	; (8006128 <HAL_I2C_MspInit+0x88>)
 80060cc:	f043 0302 	orr.w	r3, r3, #2
 80060d0:	6313      	str	r3, [r2, #48]	; 0x30
 80060d2:	4b15      	ldr	r3, [pc, #84]	; (8006128 <HAL_I2C_MspInit+0x88>)
 80060d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	613b      	str	r3, [r7, #16]
 80060dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80060de:	23c0      	movs	r3, #192	; 0xc0
 80060e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80060e2:	2312      	movs	r3, #18
 80060e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060e6:	2300      	movs	r3, #0
 80060e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060ea:	2303      	movs	r3, #3
 80060ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80060ee:	2304      	movs	r3, #4
 80060f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060f2:	f107 0314 	add.w	r3, r7, #20
 80060f6:	4619      	mov	r1, r3
 80060f8:	480c      	ldr	r0, [pc, #48]	; (800612c <HAL_I2C_MspInit+0x8c>)
 80060fa:	f002 fa53 	bl	80085a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80060fe:	2300      	movs	r3, #0
 8006100:	60fb      	str	r3, [r7, #12]
 8006102:	4b09      	ldr	r3, [pc, #36]	; (8006128 <HAL_I2C_MspInit+0x88>)
 8006104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006106:	4a08      	ldr	r2, [pc, #32]	; (8006128 <HAL_I2C_MspInit+0x88>)
 8006108:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800610c:	6413      	str	r3, [r2, #64]	; 0x40
 800610e:	4b06      	ldr	r3, [pc, #24]	; (8006128 <HAL_I2C_MspInit+0x88>)
 8006110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006112:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006116:	60fb      	str	r3, [r7, #12]
 8006118:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800611a:	bf00      	nop
 800611c:	3728      	adds	r7, #40	; 0x28
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	40005400 	.word	0x40005400
 8006128:	40023800 	.word	0x40023800
 800612c:	40020400 	.word	0x40020400

08006130 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b09a      	sub	sp, #104	; 0x68
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006138:	f107 030c 	add.w	r3, r7, #12
 800613c:	225c      	movs	r2, #92	; 0x5c
 800613e:	2100      	movs	r1, #0
 8006140:	4618      	mov	r0, r3
 8006142:	f011 fb45 	bl	80177d0 <memset>
  if(hrtc->Instance==RTC)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a0c      	ldr	r2, [pc, #48]	; (800617c <HAL_RTC_MspInit+0x4c>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d111      	bne.n	8006174 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006150:	2320      	movs	r3, #32
 8006152:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006154:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006158:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800615a:	f107 030c 	add.w	r3, r7, #12
 800615e:	4618      	mov	r0, r3
 8006160:	f004 ff52 	bl	800b008 <HAL_RCCEx_PeriphCLKConfig>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800616a:	f7fb fd41 	bl	8001bf0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800616e:	4b04      	ldr	r3, [pc, #16]	; (8006180 <HAL_RTC_MspInit+0x50>)
 8006170:	2201      	movs	r2, #1
 8006172:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006174:	bf00      	nop
 8006176:	3768      	adds	r7, #104	; 0x68
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	40002800 	.word	0x40002800
 8006180:	42470e3c 	.word	0x42470e3c

08006184 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b08a      	sub	sp, #40	; 0x28
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800618c:	f107 0314 	add.w	r3, r7, #20
 8006190:	2200      	movs	r2, #0
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	605a      	str	r2, [r3, #4]
 8006196:	609a      	str	r2, [r3, #8]
 8006198:	60da      	str	r2, [r3, #12]
 800619a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a68      	ldr	r2, [pc, #416]	; (8006344 <HAL_SD_MspInit+0x1c0>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	f040 80c9 	bne.w	800633a <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80061a8:	2300      	movs	r3, #0
 80061aa:	613b      	str	r3, [r7, #16]
 80061ac:	4b66      	ldr	r3, [pc, #408]	; (8006348 <HAL_SD_MspInit+0x1c4>)
 80061ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b0:	4a65      	ldr	r2, [pc, #404]	; (8006348 <HAL_SD_MspInit+0x1c4>)
 80061b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80061b6:	6453      	str	r3, [r2, #68]	; 0x44
 80061b8:	4b63      	ldr	r3, [pc, #396]	; (8006348 <HAL_SD_MspInit+0x1c4>)
 80061ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061c0:	613b      	str	r3, [r7, #16]
 80061c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80061c4:	2300      	movs	r3, #0
 80061c6:	60fb      	str	r3, [r7, #12]
 80061c8:	4b5f      	ldr	r3, [pc, #380]	; (8006348 <HAL_SD_MspInit+0x1c4>)
 80061ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061cc:	4a5e      	ldr	r2, [pc, #376]	; (8006348 <HAL_SD_MspInit+0x1c4>)
 80061ce:	f043 0304 	orr.w	r3, r3, #4
 80061d2:	6313      	str	r3, [r2, #48]	; 0x30
 80061d4:	4b5c      	ldr	r3, [pc, #368]	; (8006348 <HAL_SD_MspInit+0x1c4>)
 80061d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d8:	f003 0304 	and.w	r3, r3, #4
 80061dc:	60fb      	str	r3, [r7, #12]
 80061de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80061e0:	2300      	movs	r3, #0
 80061e2:	60bb      	str	r3, [r7, #8]
 80061e4:	4b58      	ldr	r3, [pc, #352]	; (8006348 <HAL_SD_MspInit+0x1c4>)
 80061e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e8:	4a57      	ldr	r2, [pc, #348]	; (8006348 <HAL_SD_MspInit+0x1c4>)
 80061ea:	f043 0308 	orr.w	r3, r3, #8
 80061ee:	6313      	str	r3, [r2, #48]	; 0x30
 80061f0:	4b55      	ldr	r3, [pc, #340]	; (8006348 <HAL_SD_MspInit+0x1c4>)
 80061f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f4:	f003 0308 	and.w	r3, r3, #8
 80061f8:	60bb      	str	r3, [r7, #8]
 80061fa:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80061fc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006200:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006202:	2302      	movs	r3, #2
 8006204:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006206:	2300      	movs	r3, #0
 8006208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800620a:	2303      	movs	r3, #3
 800620c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800620e:	230c      	movs	r3, #12
 8006210:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006212:	f107 0314 	add.w	r3, r7, #20
 8006216:	4619      	mov	r1, r3
 8006218:	484c      	ldr	r0, [pc, #304]	; (800634c <HAL_SD_MspInit+0x1c8>)
 800621a:	f002 f9c3 	bl	80085a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800621e:	2304      	movs	r3, #4
 8006220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006222:	2302      	movs	r3, #2
 8006224:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006226:	2300      	movs	r3, #0
 8006228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800622a:	2303      	movs	r3, #3
 800622c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800622e:	230c      	movs	r3, #12
 8006230:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006232:	f107 0314 	add.w	r3, r7, #20
 8006236:	4619      	mov	r1, r3
 8006238:	4845      	ldr	r0, [pc, #276]	; (8006350 <HAL_SD_MspInit+0x1cc>)
 800623a:	f002 f9b3 	bl	80085a4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800623e:	4b45      	ldr	r3, [pc, #276]	; (8006354 <HAL_SD_MspInit+0x1d0>)
 8006240:	4a45      	ldr	r2, [pc, #276]	; (8006358 <HAL_SD_MspInit+0x1d4>)
 8006242:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006244:	4b43      	ldr	r3, [pc, #268]	; (8006354 <HAL_SD_MspInit+0x1d0>)
 8006246:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800624a:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800624c:	4b41      	ldr	r3, [pc, #260]	; (8006354 <HAL_SD_MspInit+0x1d0>)
 800624e:	2200      	movs	r2, #0
 8006250:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006252:	4b40      	ldr	r3, [pc, #256]	; (8006354 <HAL_SD_MspInit+0x1d0>)
 8006254:	2200      	movs	r2, #0
 8006256:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006258:	4b3e      	ldr	r3, [pc, #248]	; (8006354 <HAL_SD_MspInit+0x1d0>)
 800625a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800625e:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006260:	4b3c      	ldr	r3, [pc, #240]	; (8006354 <HAL_SD_MspInit+0x1d0>)
 8006262:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006266:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006268:	4b3a      	ldr	r3, [pc, #232]	; (8006354 <HAL_SD_MspInit+0x1d0>)
 800626a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800626e:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8006270:	4b38      	ldr	r3, [pc, #224]	; (8006354 <HAL_SD_MspInit+0x1d0>)
 8006272:	2220      	movs	r2, #32
 8006274:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006276:	4b37      	ldr	r3, [pc, #220]	; (8006354 <HAL_SD_MspInit+0x1d0>)
 8006278:	2200      	movs	r2, #0
 800627a:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800627c:	4b35      	ldr	r3, [pc, #212]	; (8006354 <HAL_SD_MspInit+0x1d0>)
 800627e:	2204      	movs	r2, #4
 8006280:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006282:	4b34      	ldr	r3, [pc, #208]	; (8006354 <HAL_SD_MspInit+0x1d0>)
 8006284:	2203      	movs	r2, #3
 8006286:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8006288:	4b32      	ldr	r3, [pc, #200]	; (8006354 <HAL_SD_MspInit+0x1d0>)
 800628a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800628e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006290:	4b30      	ldr	r3, [pc, #192]	; (8006354 <HAL_SD_MspInit+0x1d0>)
 8006292:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006296:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8006298:	482e      	ldr	r0, [pc, #184]	; (8006354 <HAL_SD_MspInit+0x1d0>)
 800629a:	f001 fde5 	bl	8007e68 <HAL_DMA_Init>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 80062a4:	f7fb fca4 	bl	8001bf0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	4a2a      	ldr	r2, [pc, #168]	; (8006354 <HAL_SD_MspInit+0x1d0>)
 80062ac:	641a      	str	r2, [r3, #64]	; 0x40
 80062ae:	4a29      	ldr	r2, [pc, #164]	; (8006354 <HAL_SD_MspInit+0x1d0>)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80062b4:	4b29      	ldr	r3, [pc, #164]	; (800635c <HAL_SD_MspInit+0x1d8>)
 80062b6:	4a2a      	ldr	r2, [pc, #168]	; (8006360 <HAL_SD_MspInit+0x1dc>)
 80062b8:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80062ba:	4b28      	ldr	r3, [pc, #160]	; (800635c <HAL_SD_MspInit+0x1d8>)
 80062bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80062c0:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80062c2:	4b26      	ldr	r3, [pc, #152]	; (800635c <HAL_SD_MspInit+0x1d8>)
 80062c4:	2240      	movs	r2, #64	; 0x40
 80062c6:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80062c8:	4b24      	ldr	r3, [pc, #144]	; (800635c <HAL_SD_MspInit+0x1d8>)
 80062ca:	2200      	movs	r2, #0
 80062cc:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80062ce:	4b23      	ldr	r3, [pc, #140]	; (800635c <HAL_SD_MspInit+0x1d8>)
 80062d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062d4:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80062d6:	4b21      	ldr	r3, [pc, #132]	; (800635c <HAL_SD_MspInit+0x1d8>)
 80062d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80062dc:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80062de:	4b1f      	ldr	r3, [pc, #124]	; (800635c <HAL_SD_MspInit+0x1d8>)
 80062e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80062e4:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80062e6:	4b1d      	ldr	r3, [pc, #116]	; (800635c <HAL_SD_MspInit+0x1d8>)
 80062e8:	2220      	movs	r2, #32
 80062ea:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80062ec:	4b1b      	ldr	r3, [pc, #108]	; (800635c <HAL_SD_MspInit+0x1d8>)
 80062ee:	2200      	movs	r2, #0
 80062f0:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80062f2:	4b1a      	ldr	r3, [pc, #104]	; (800635c <HAL_SD_MspInit+0x1d8>)
 80062f4:	2204      	movs	r2, #4
 80062f6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80062f8:	4b18      	ldr	r3, [pc, #96]	; (800635c <HAL_SD_MspInit+0x1d8>)
 80062fa:	2203      	movs	r2, #3
 80062fc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80062fe:	4b17      	ldr	r3, [pc, #92]	; (800635c <HAL_SD_MspInit+0x1d8>)
 8006300:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006304:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006306:	4b15      	ldr	r3, [pc, #84]	; (800635c <HAL_SD_MspInit+0x1d8>)
 8006308:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800630c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800630e:	4813      	ldr	r0, [pc, #76]	; (800635c <HAL_SD_MspInit+0x1d8>)
 8006310:	f001 fdaa 	bl	8007e68 <HAL_DMA_Init>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d001      	beq.n	800631e <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 800631a:	f7fb fc69 	bl	8001bf0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a0e      	ldr	r2, [pc, #56]	; (800635c <HAL_SD_MspInit+0x1d8>)
 8006322:	63da      	str	r2, [r3, #60]	; 0x3c
 8006324:	4a0d      	ldr	r2, [pc, #52]	; (800635c <HAL_SD_MspInit+0x1d8>)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800632a:	2200      	movs	r2, #0
 800632c:	2100      	movs	r1, #0
 800632e:	2031      	movs	r0, #49	; 0x31
 8006330:	f001 fd63 	bl	8007dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8006334:	2031      	movs	r0, #49	; 0x31
 8006336:	f001 fd7c 	bl	8007e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800633a:	bf00      	nop
 800633c:	3728      	adds	r7, #40	; 0x28
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	40012c00 	.word	0x40012c00
 8006348:	40023800 	.word	0x40023800
 800634c:	40020800 	.word	0x40020800
 8006350:	40020c00 	.word	0x40020c00
 8006354:	20000698 	.word	0x20000698
 8006358:	40026458 	.word	0x40026458
 800635c:	20001b68 	.word	0x20001b68
 8006360:	400264a0 	.word	0x400264a0

08006364 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a0e      	ldr	r2, [pc, #56]	; (80063ac <HAL_TIM_Base_MspInit+0x48>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d115      	bne.n	80063a2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006376:	2300      	movs	r3, #0
 8006378:	60fb      	str	r3, [r7, #12]
 800637a:	4b0d      	ldr	r3, [pc, #52]	; (80063b0 <HAL_TIM_Base_MspInit+0x4c>)
 800637c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637e:	4a0c      	ldr	r2, [pc, #48]	; (80063b0 <HAL_TIM_Base_MspInit+0x4c>)
 8006380:	f043 0320 	orr.w	r3, r3, #32
 8006384:	6413      	str	r3, [r2, #64]	; 0x40
 8006386:	4b0a      	ldr	r3, [pc, #40]	; (80063b0 <HAL_TIM_Base_MspInit+0x4c>)
 8006388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638a:	f003 0320 	and.w	r3, r3, #32
 800638e:	60fb      	str	r3, [r7, #12]
 8006390:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006392:	2200      	movs	r2, #0
 8006394:	2100      	movs	r1, #0
 8006396:	2037      	movs	r0, #55	; 0x37
 8006398:	f001 fd2f 	bl	8007dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800639c:	2037      	movs	r0, #55	; 0x37
 800639e:	f001 fd48 	bl	8007e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80063a2:	bf00      	nop
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	40001400 	.word	0x40001400
 80063b0:	40023800 	.word	0x40023800

080063b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80063b4:	b480      	push	{r7}
 80063b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80063b8:	e7fe      	b.n	80063b8 <NMI_Handler+0x4>

080063ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80063ba:	b480      	push	{r7}
 80063bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80063be:	e7fe      	b.n	80063be <HardFault_Handler+0x4>

080063c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80063c0:	b480      	push	{r7}
 80063c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80063c4:	e7fe      	b.n	80063c4 <MemManage_Handler+0x4>

080063c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80063c6:	b480      	push	{r7}
 80063c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80063ca:	e7fe      	b.n	80063ca <BusFault_Handler+0x4>

080063cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80063cc:	b480      	push	{r7}
 80063ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80063d0:	e7fe      	b.n	80063d0 <UsageFault_Handler+0x4>

080063d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80063d2:	b480      	push	{r7}
 80063d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80063d6:	bf00      	nop
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80063e0:	b480      	push	{r7}
 80063e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80063e4:	bf00      	nop
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr

080063ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80063ee:	b480      	push	{r7}
 80063f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80063f2:	bf00      	nop
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006400:	f000 f922 	bl	8006648 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006404:	bf00      	nop
 8006406:	bd80      	pop	{r7, pc}

08006408 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800640c:	4802      	ldr	r0, [pc, #8]	; (8006418 <CAN1_RX0_IRQHandler+0x10>)
 800640e:	f001 f9e9 	bl	80077e4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8006412:	bf00      	nop
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	20002d2c 	.word	0x20002d2c

0800641c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI0_Pin);
 8006420:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006424:	f002 fa9e 	bl	8008964 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI1_Pin);
 8006428:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800642c:	f002 fa9a 	bl	8008964 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006430:	bf00      	nop
 8006432:	bd80      	pop	{r7, pc}

08006434 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8006438:	4802      	ldr	r0, [pc, #8]	; (8006444 <SDIO_IRQHandler+0x10>)
 800643a:	f006 fe97 	bl	800d16c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800643e:	bf00      	nop
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	20001bd4 	.word	0x20001bd4

08006448 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800644c:	4802      	ldr	r0, [pc, #8]	; (8006458 <TIM7_IRQHandler+0x10>)
 800644e:	f007 fff5 	bl	800e43c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006452:	bf00      	nop
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	20002dcc 	.word	0x20002dcc

0800645c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006460:	4802      	ldr	r0, [pc, #8]	; (800646c <DMA2_Stream0_IRQHandler+0x10>)
 8006462:	f001 fe29 	bl	80080b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006466:	bf00      	nop
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	20001ae4 	.word	0x20001ae4

08006470 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8006474:	4802      	ldr	r0, [pc, #8]	; (8006480 <DMA2_Stream2_IRQHandler+0x10>)
 8006476:	f001 fe1f 	bl	80080b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800647a:	bf00      	nop
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	20002ccc 	.word	0x20002ccc

08006484 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8006488:	4802      	ldr	r0, [pc, #8]	; (8006494 <DMA2_Stream3_IRQHandler+0x10>)
 800648a:	f001 fe15 	bl	80080b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800648e:	bf00      	nop
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	20000698 	.word	0x20000698

08006498 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800649c:	4802      	ldr	r0, [pc, #8]	; (80064a8 <OTG_FS_IRQHandler+0x10>)
 800649e:	f003 fbb7 	bl	8009c10 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80064a2:	bf00      	nop
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	200053d4 	.word	0x200053d4

080064ac <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80064b0:	4802      	ldr	r0, [pc, #8]	; (80064bc <DMA2_Stream6_IRQHandler+0x10>)
 80064b2:	f001 fe01 	bl	80080b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80064b6:	bf00      	nop
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	20001b68 	.word	0x20001b68

080064c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b086      	sub	sp, #24
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80064c8:	4a14      	ldr	r2, [pc, #80]	; (800651c <_sbrk+0x5c>)
 80064ca:	4b15      	ldr	r3, [pc, #84]	; (8006520 <_sbrk+0x60>)
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80064d4:	4b13      	ldr	r3, [pc, #76]	; (8006524 <_sbrk+0x64>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d102      	bne.n	80064e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80064dc:	4b11      	ldr	r3, [pc, #68]	; (8006524 <_sbrk+0x64>)
 80064de:	4a12      	ldr	r2, [pc, #72]	; (8006528 <_sbrk+0x68>)
 80064e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80064e2:	4b10      	ldr	r3, [pc, #64]	; (8006524 <_sbrk+0x64>)
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4413      	add	r3, r2
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d207      	bcs.n	8006500 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80064f0:	f011 f936 	bl	8017760 <__errno>
 80064f4:	4603      	mov	r3, r0
 80064f6:	220c      	movs	r2, #12
 80064f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80064fa:	f04f 33ff 	mov.w	r3, #4294967295
 80064fe:	e009      	b.n	8006514 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006500:	4b08      	ldr	r3, [pc, #32]	; (8006524 <_sbrk+0x64>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006506:	4b07      	ldr	r3, [pc, #28]	; (8006524 <_sbrk+0x64>)
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4413      	add	r3, r2
 800650e:	4a05      	ldr	r2, [pc, #20]	; (8006524 <_sbrk+0x64>)
 8006510:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006512:	68fb      	ldr	r3, [r7, #12]
}
 8006514:	4618      	mov	r0, r3
 8006516:	3718      	adds	r7, #24
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	20020000 	.word	0x20020000
 8006520:	00006000 	.word	0x00006000
 8006524:	200001f4 	.word	0x200001f4
 8006528:	200057f0 	.word	0x200057f0

0800652c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800652c:	b480      	push	{r7}
 800652e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006530:	4b06      	ldr	r3, [pc, #24]	; (800654c <SystemInit+0x20>)
 8006532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006536:	4a05      	ldr	r2, [pc, #20]	; (800654c <SystemInit+0x20>)
 8006538:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800653c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006540:	bf00      	nop
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	e000ed00 	.word	0xe000ed00

08006550 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006550:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006588 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006554:	480d      	ldr	r0, [pc, #52]	; (800658c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006556:	490e      	ldr	r1, [pc, #56]	; (8006590 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006558:	4a0e      	ldr	r2, [pc, #56]	; (8006594 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800655a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800655c:	e002      	b.n	8006564 <LoopCopyDataInit>

0800655e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800655e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006560:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006562:	3304      	adds	r3, #4

08006564 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006564:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006566:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006568:	d3f9      	bcc.n	800655e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800656a:	4a0b      	ldr	r2, [pc, #44]	; (8006598 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800656c:	4c0b      	ldr	r4, [pc, #44]	; (800659c <LoopFillZerobss+0x26>)
  movs r3, #0
 800656e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006570:	e001      	b.n	8006576 <LoopFillZerobss>

08006572 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006572:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006574:	3204      	adds	r2, #4

08006576 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006576:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006578:	d3fb      	bcc.n	8006572 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800657a:	f7ff ffd7 	bl	800652c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800657e:	f011 f8f5 	bl	801776c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006582:	f7fa fe6d 	bl	8001260 <main>
  bx  lr    
 8006586:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006588:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800658c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006590:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8006594:	080185d4 	.word	0x080185d4
  ldr r2, =_sbss
 8006598:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800659c:	200057ec 	.word	0x200057ec

080065a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80065a0:	e7fe      	b.n	80065a0 <ADC_IRQHandler>
	...

080065a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80065a8:	4b0e      	ldr	r3, [pc, #56]	; (80065e4 <HAL_Init+0x40>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a0d      	ldr	r2, [pc, #52]	; (80065e4 <HAL_Init+0x40>)
 80065ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80065b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80065b4:	4b0b      	ldr	r3, [pc, #44]	; (80065e4 <HAL_Init+0x40>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a0a      	ldr	r2, [pc, #40]	; (80065e4 <HAL_Init+0x40>)
 80065ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80065be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80065c0:	4b08      	ldr	r3, [pc, #32]	; (80065e4 <HAL_Init+0x40>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a07      	ldr	r2, [pc, #28]	; (80065e4 <HAL_Init+0x40>)
 80065c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80065cc:	2003      	movs	r0, #3
 80065ce:	f001 fc09 	bl	8007de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80065d2:	200f      	movs	r0, #15
 80065d4:	f000 f808 	bl	80065e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80065d8:	f7ff fbd4 	bl	8005d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	40023c00 	.word	0x40023c00

080065e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80065f0:	4b12      	ldr	r3, [pc, #72]	; (800663c <HAL_InitTick+0x54>)
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	4b12      	ldr	r3, [pc, #72]	; (8006640 <HAL_InitTick+0x58>)
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	4619      	mov	r1, r3
 80065fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80065fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8006602:	fbb2 f3f3 	udiv	r3, r2, r3
 8006606:	4618      	mov	r0, r3
 8006608:	f001 fc21 	bl	8007e4e <HAL_SYSTICK_Config>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	d001      	beq.n	8006616 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e00e      	b.n	8006634 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2b0f      	cmp	r3, #15
 800661a:	d80a      	bhi.n	8006632 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800661c:	2200      	movs	r2, #0
 800661e:	6879      	ldr	r1, [r7, #4]
 8006620:	f04f 30ff 	mov.w	r0, #4294967295
 8006624:	f001 fbe9 	bl	8007dfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006628:	4a06      	ldr	r2, [pc, #24]	; (8006644 <HAL_InitTick+0x5c>)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	e000      	b.n	8006634 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
}
 8006634:	4618      	mov	r0, r3
 8006636:	3708      	adds	r7, #8
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	20000000 	.word	0x20000000
 8006640:	20000008 	.word	0x20000008
 8006644:	20000004 	.word	0x20000004

08006648 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006648:	b480      	push	{r7}
 800664a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800664c:	4b06      	ldr	r3, [pc, #24]	; (8006668 <HAL_IncTick+0x20>)
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	461a      	mov	r2, r3
 8006652:	4b06      	ldr	r3, [pc, #24]	; (800666c <HAL_IncTick+0x24>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4413      	add	r3, r2
 8006658:	4a04      	ldr	r2, [pc, #16]	; (800666c <HAL_IncTick+0x24>)
 800665a:	6013      	str	r3, [r2, #0]
}
 800665c:	bf00      	nop
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	20000008 	.word	0x20000008
 800666c:	20002e94 	.word	0x20002e94

08006670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006670:	b480      	push	{r7}
 8006672:	af00      	add	r7, sp, #0
  return uwTick;
 8006674:	4b03      	ldr	r3, [pc, #12]	; (8006684 <HAL_GetTick+0x14>)
 8006676:	681b      	ldr	r3, [r3, #0]
}
 8006678:	4618      	mov	r0, r3
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	20002e94 	.word	0x20002e94

08006688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006690:	f7ff ffee 	bl	8006670 <HAL_GetTick>
 8006694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a0:	d005      	beq.n	80066ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80066a2:	4b0a      	ldr	r3, [pc, #40]	; (80066cc <HAL_Delay+0x44>)
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	461a      	mov	r2, r3
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	4413      	add	r3, r2
 80066ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80066ae:	bf00      	nop
 80066b0:	f7ff ffde 	bl	8006670 <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	429a      	cmp	r2, r3
 80066be:	d8f7      	bhi.n	80066b0 <HAL_Delay+0x28>
  {
  }
}
 80066c0:	bf00      	nop
 80066c2:	bf00      	nop
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	20000008 	.word	0x20000008

080066d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80066d8:	2300      	movs	r3, #0
 80066da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e033      	b.n	800674e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d109      	bne.n	8006702 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f7ff fb70 	bl	8005dd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006706:	f003 0310 	and.w	r3, r3, #16
 800670a:	2b00      	cmp	r3, #0
 800670c:	d118      	bne.n	8006740 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006712:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006716:	f023 0302 	bic.w	r3, r3, #2
 800671a:	f043 0202 	orr.w	r2, r3, #2
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 fa78 	bl	8006c18 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006732:	f023 0303 	bic.w	r3, r3, #3
 8006736:	f043 0201 	orr.w	r2, r3, #1
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	641a      	str	r2, [r3, #64]	; 0x40
 800673e:	e001      	b.n	8006744 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800674c:	7bfb      	ldrb	r3, [r7, #15]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
	...

08006758 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b086      	sub	sp, #24
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006764:	2300      	movs	r3, #0
 8006766:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800676e:	2b01      	cmp	r3, #1
 8006770:	d101      	bne.n	8006776 <HAL_ADC_Start_DMA+0x1e>
 8006772:	2302      	movs	r3, #2
 8006774:	e0e9      	b.n	800694a <HAL_ADC_Start_DMA+0x1f2>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2201      	movs	r2, #1
 800677a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	2b01      	cmp	r3, #1
 800678a:	d018      	beq.n	80067be <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	689a      	ldr	r2, [r3, #8]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f042 0201 	orr.w	r2, r2, #1
 800679a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800679c:	4b6d      	ldr	r3, [pc, #436]	; (8006954 <HAL_ADC_Start_DMA+0x1fc>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a6d      	ldr	r2, [pc, #436]	; (8006958 <HAL_ADC_Start_DMA+0x200>)
 80067a2:	fba2 2303 	umull	r2, r3, r2, r3
 80067a6:	0c9a      	lsrs	r2, r3, #18
 80067a8:	4613      	mov	r3, r2
 80067aa:	005b      	lsls	r3, r3, #1
 80067ac:	4413      	add	r3, r2
 80067ae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80067b0:	e002      	b.n	80067b8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	3b01      	subs	r3, #1
 80067b6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d1f9      	bne.n	80067b2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067cc:	d107      	bne.n	80067de <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	689a      	ldr	r2, [r3, #8]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80067dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f003 0301 	and.w	r3, r3, #1
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	f040 80a1 	bne.w	8006930 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80067f6:	f023 0301 	bic.w	r3, r3, #1
 80067fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800680c:	2b00      	cmp	r3, #0
 800680e:	d007      	beq.n	8006820 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006814:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006818:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006824:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800682c:	d106      	bne.n	800683c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006832:	f023 0206 	bic.w	r2, r3, #6
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	645a      	str	r2, [r3, #68]	; 0x44
 800683a:	e002      	b.n	8006842 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800684a:	4b44      	ldr	r3, [pc, #272]	; (800695c <HAL_ADC_Start_DMA+0x204>)
 800684c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006852:	4a43      	ldr	r2, [pc, #268]	; (8006960 <HAL_ADC_Start_DMA+0x208>)
 8006854:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685a:	4a42      	ldr	r2, [pc, #264]	; (8006964 <HAL_ADC_Start_DMA+0x20c>)
 800685c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006862:	4a41      	ldr	r2, [pc, #260]	; (8006968 <HAL_ADC_Start_DMA+0x210>)
 8006864:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800686e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800687e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	689a      	ldr	r2, [r3, #8]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800688e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	334c      	adds	r3, #76	; 0x4c
 800689a:	4619      	mov	r1, r3
 800689c:	68ba      	ldr	r2, [r7, #8]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f001 fb90 	bl	8007fc4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	f003 031f 	and.w	r3, r3, #31
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d12a      	bne.n	8006906 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a2d      	ldr	r2, [pc, #180]	; (800696c <HAL_ADC_Start_DMA+0x214>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d015      	beq.n	80068e6 <HAL_ADC_Start_DMA+0x18e>
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a2c      	ldr	r2, [pc, #176]	; (8006970 <HAL_ADC_Start_DMA+0x218>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d105      	bne.n	80068d0 <HAL_ADC_Start_DMA+0x178>
 80068c4:	4b25      	ldr	r3, [pc, #148]	; (800695c <HAL_ADC_Start_DMA+0x204>)
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	f003 031f 	and.w	r3, r3, #31
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d00a      	beq.n	80068e6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a27      	ldr	r2, [pc, #156]	; (8006974 <HAL_ADC_Start_DMA+0x21c>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d136      	bne.n	8006948 <HAL_ADC_Start_DMA+0x1f0>
 80068da:	4b20      	ldr	r3, [pc, #128]	; (800695c <HAL_ADC_Start_DMA+0x204>)
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f003 0310 	and.w	r3, r3, #16
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d130      	bne.n	8006948 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d129      	bne.n	8006948 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	689a      	ldr	r2, [r3, #8]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006902:	609a      	str	r2, [r3, #8]
 8006904:	e020      	b.n	8006948 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a18      	ldr	r2, [pc, #96]	; (800696c <HAL_ADC_Start_DMA+0x214>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d11b      	bne.n	8006948 <HAL_ADC_Start_DMA+0x1f0>
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d114      	bne.n	8006948 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	689a      	ldr	r2, [r3, #8]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800692c:	609a      	str	r2, [r3, #8]
 800692e:	e00b      	b.n	8006948 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006934:	f043 0210 	orr.w	r2, r3, #16
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006940:	f043 0201 	orr.w	r2, r3, #1
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3718      	adds	r7, #24
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	20000000 	.word	0x20000000
 8006958:	431bde83 	.word	0x431bde83
 800695c:	40012300 	.word	0x40012300
 8006960:	08006e11 	.word	0x08006e11
 8006964:	08006ecb 	.word	0x08006ecb
 8006968:	08006ee7 	.word	0x08006ee7
 800696c:	40012000 	.word	0x40012000
 8006970:	40012100 	.word	0x40012100
 8006974:	40012200 	.word	0x40012200

08006978 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006994:	bf00      	nop
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80069a8:	bf00      	nop
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b085      	sub	sp, #20
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80069be:	2300      	movs	r3, #0
 80069c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d101      	bne.n	80069d0 <HAL_ADC_ConfigChannel+0x1c>
 80069cc:	2302      	movs	r3, #2
 80069ce:	e113      	b.n	8006bf8 <HAL_ADC_ConfigChannel+0x244>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2b09      	cmp	r3, #9
 80069de:	d925      	bls.n	8006a2c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68d9      	ldr	r1, [r3, #12]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	461a      	mov	r2, r3
 80069ee:	4613      	mov	r3, r2
 80069f0:	005b      	lsls	r3, r3, #1
 80069f2:	4413      	add	r3, r2
 80069f4:	3b1e      	subs	r3, #30
 80069f6:	2207      	movs	r2, #7
 80069f8:	fa02 f303 	lsl.w	r3, r2, r3
 80069fc:	43da      	mvns	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	400a      	ands	r2, r1
 8006a04:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68d9      	ldr	r1, [r3, #12]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	689a      	ldr	r2, [r3, #8]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	4618      	mov	r0, r3
 8006a18:	4603      	mov	r3, r0
 8006a1a:	005b      	lsls	r3, r3, #1
 8006a1c:	4403      	add	r3, r0
 8006a1e:	3b1e      	subs	r3, #30
 8006a20:	409a      	lsls	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	60da      	str	r2, [r3, #12]
 8006a2a:	e022      	b.n	8006a72 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6919      	ldr	r1, [r3, #16]
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	461a      	mov	r2, r3
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	005b      	lsls	r3, r3, #1
 8006a3e:	4413      	add	r3, r2
 8006a40:	2207      	movs	r2, #7
 8006a42:	fa02 f303 	lsl.w	r3, r2, r3
 8006a46:	43da      	mvns	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	400a      	ands	r2, r1
 8006a4e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	6919      	ldr	r1, [r3, #16]
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	689a      	ldr	r2, [r3, #8]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	4618      	mov	r0, r3
 8006a62:	4603      	mov	r3, r0
 8006a64:	005b      	lsls	r3, r3, #1
 8006a66:	4403      	add	r3, r0
 8006a68:	409a      	lsls	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	430a      	orrs	r2, r1
 8006a70:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	2b06      	cmp	r3, #6
 8006a78:	d824      	bhi.n	8006ac4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	685a      	ldr	r2, [r3, #4]
 8006a84:	4613      	mov	r3, r2
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	4413      	add	r3, r2
 8006a8a:	3b05      	subs	r3, #5
 8006a8c:	221f      	movs	r2, #31
 8006a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a92:	43da      	mvns	r2, r3
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	400a      	ands	r2, r1
 8006a9a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	685a      	ldr	r2, [r3, #4]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	4413      	add	r3, r2
 8006ab4:	3b05      	subs	r3, #5
 8006ab6:	fa00 f203 	lsl.w	r2, r0, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	430a      	orrs	r2, r1
 8006ac0:	635a      	str	r2, [r3, #52]	; 0x34
 8006ac2:	e04c      	b.n	8006b5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	2b0c      	cmp	r3, #12
 8006aca:	d824      	bhi.n	8006b16 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	685a      	ldr	r2, [r3, #4]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	009b      	lsls	r3, r3, #2
 8006ada:	4413      	add	r3, r2
 8006adc:	3b23      	subs	r3, #35	; 0x23
 8006ade:	221f      	movs	r2, #31
 8006ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae4:	43da      	mvns	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	400a      	ands	r2, r1
 8006aec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	4618      	mov	r0, r3
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	685a      	ldr	r2, [r3, #4]
 8006b00:	4613      	mov	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	3b23      	subs	r3, #35	; 0x23
 8006b08:	fa00 f203 	lsl.w	r2, r0, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	430a      	orrs	r2, r1
 8006b12:	631a      	str	r2, [r3, #48]	; 0x30
 8006b14:	e023      	b.n	8006b5e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	685a      	ldr	r2, [r3, #4]
 8006b20:	4613      	mov	r3, r2
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	4413      	add	r3, r2
 8006b26:	3b41      	subs	r3, #65	; 0x41
 8006b28:	221f      	movs	r2, #31
 8006b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b2e:	43da      	mvns	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	400a      	ands	r2, r1
 8006b36:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	4618      	mov	r0, r3
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	685a      	ldr	r2, [r3, #4]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	4413      	add	r3, r2
 8006b50:	3b41      	subs	r3, #65	; 0x41
 8006b52:	fa00 f203 	lsl.w	r2, r0, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	430a      	orrs	r2, r1
 8006b5c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006b5e:	4b29      	ldr	r3, [pc, #164]	; (8006c04 <HAL_ADC_ConfigChannel+0x250>)
 8006b60:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a28      	ldr	r2, [pc, #160]	; (8006c08 <HAL_ADC_ConfigChannel+0x254>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d10f      	bne.n	8006b8c <HAL_ADC_ConfigChannel+0x1d8>
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2b12      	cmp	r3, #18
 8006b72:	d10b      	bne.n	8006b8c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a1d      	ldr	r2, [pc, #116]	; (8006c08 <HAL_ADC_ConfigChannel+0x254>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d12b      	bne.n	8006bee <HAL_ADC_ConfigChannel+0x23a>
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a1c      	ldr	r2, [pc, #112]	; (8006c0c <HAL_ADC_ConfigChannel+0x258>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d003      	beq.n	8006ba8 <HAL_ADC_ConfigChannel+0x1f4>
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2b11      	cmp	r3, #17
 8006ba6:	d122      	bne.n	8006bee <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a11      	ldr	r2, [pc, #68]	; (8006c0c <HAL_ADC_ConfigChannel+0x258>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d111      	bne.n	8006bee <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006bca:	4b11      	ldr	r3, [pc, #68]	; (8006c10 <HAL_ADC_ConfigChannel+0x25c>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a11      	ldr	r2, [pc, #68]	; (8006c14 <HAL_ADC_ConfigChannel+0x260>)
 8006bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8006bd4:	0c9a      	lsrs	r2, r3, #18
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	4413      	add	r3, r2
 8006bdc:	005b      	lsls	r3, r3, #1
 8006bde:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006be0:	e002      	b.n	8006be8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	3b01      	subs	r3, #1
 8006be6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1f9      	bne.n	8006be2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3714      	adds	r7, #20
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr
 8006c04:	40012300 	.word	0x40012300
 8006c08:	40012000 	.word	0x40012000
 8006c0c:	10000012 	.word	0x10000012
 8006c10:	20000000 	.word	0x20000000
 8006c14:	431bde83 	.word	0x431bde83

08006c18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006c20:	4b79      	ldr	r3, [pc, #484]	; (8006e08 <ADC_Init+0x1f0>)
 8006c22:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	685a      	ldr	r2, [r3, #4]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	431a      	orrs	r2, r3
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685a      	ldr	r2, [r3, #4]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	6859      	ldr	r1, [r3, #4]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	691b      	ldr	r3, [r3, #16]
 8006c58:	021a      	lsls	r2, r3, #8
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	430a      	orrs	r2, r1
 8006c60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	685a      	ldr	r2, [r3, #4]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006c70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	6859      	ldr	r1, [r3, #4]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	689a      	ldr	r2, [r3, #8]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	430a      	orrs	r2, r1
 8006c82:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	689a      	ldr	r2, [r3, #8]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	6899      	ldr	r1, [r3, #8]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68da      	ldr	r2, [r3, #12]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006caa:	4a58      	ldr	r2, [pc, #352]	; (8006e0c <ADC_Init+0x1f4>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d022      	beq.n	8006cf6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	689a      	ldr	r2, [r3, #8]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006cbe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6899      	ldr	r1, [r3, #8]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	689a      	ldr	r2, [r3, #8]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006ce0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	6899      	ldr	r1, [r3, #8]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	430a      	orrs	r2, r1
 8006cf2:	609a      	str	r2, [r3, #8]
 8006cf4:	e00f      	b.n	8006d16 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	689a      	ldr	r2, [r3, #8]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006d04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	689a      	ldr	r2, [r3, #8]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006d14:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	689a      	ldr	r2, [r3, #8]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f022 0202 	bic.w	r2, r2, #2
 8006d24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6899      	ldr	r1, [r3, #8]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	7e1b      	ldrb	r3, [r3, #24]
 8006d30:	005a      	lsls	r2, r3, #1
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	430a      	orrs	r2, r1
 8006d38:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d01b      	beq.n	8006d7c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	685a      	ldr	r2, [r3, #4]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d52:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	685a      	ldr	r2, [r3, #4]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006d62:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	6859      	ldr	r1, [r3, #4]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	035a      	lsls	r2, r3, #13
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	430a      	orrs	r2, r1
 8006d78:	605a      	str	r2, [r3, #4]
 8006d7a:	e007      	b.n	8006d8c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	685a      	ldr	r2, [r3, #4]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	69db      	ldr	r3, [r3, #28]
 8006da6:	3b01      	subs	r3, #1
 8006da8:	051a      	lsls	r2, r3, #20
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	430a      	orrs	r2, r1
 8006db0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	689a      	ldr	r2, [r3, #8]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006dc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6899      	ldr	r1, [r3, #8]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006dce:	025a      	lsls	r2, r3, #9
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	430a      	orrs	r2, r1
 8006dd6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689a      	ldr	r2, [r3, #8]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006de6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	6899      	ldr	r1, [r3, #8]
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	695b      	ldr	r3, [r3, #20]
 8006df2:	029a      	lsls	r2, r3, #10
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	430a      	orrs	r2, r1
 8006dfa:	609a      	str	r2, [r3, #8]
}
 8006dfc:	bf00      	nop
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr
 8006e08:	40012300 	.word	0x40012300
 8006e0c:	0f000001 	.word	0x0f000001

08006e10 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e1c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e22:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d13c      	bne.n	8006ea4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e2e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d12b      	bne.n	8006e9c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d127      	bne.n	8006e9c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e52:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d006      	beq.n	8006e68 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d119      	bne.n	8006e9c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f022 0220 	bic.w	r2, r2, #32
 8006e76:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d105      	bne.n	8006e9c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e94:	f043 0201 	orr.w	r2, r3, #1
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f7ff fd6b 	bl	8006978 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006ea2:	e00e      	b.n	8006ec2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea8:	f003 0310 	and.w	r3, r3, #16
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d003      	beq.n	8006eb8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006eb0:	68f8      	ldr	r0, [r7, #12]
 8006eb2:	f7ff fd75 	bl	80069a0 <HAL_ADC_ErrorCallback>
}
 8006eb6:	e004      	b.n	8006ec2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	4798      	blx	r3
}
 8006ec2:	bf00      	nop
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b084      	sub	sp, #16
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f7ff fd57 	bl	800698c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006ede:	bf00      	nop
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b084      	sub	sp, #16
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2240      	movs	r2, #64	; 0x40
 8006ef8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006efe:	f043 0204 	orr.w	r2, r3, #4
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006f06:	68f8      	ldr	r0, [r7, #12]
 8006f08:	f7ff fd4a 	bl	80069a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006f0c:	bf00      	nop
 8006f0e:	3710      	adds	r7, #16
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e0ed      	b.n	8007102 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d102      	bne.n	8006f38 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f7ff f864 	bl	8006000 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f042 0201 	orr.w	r2, r2, #1
 8006f46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f48:	f7ff fb92 	bl	8006670 <HAL_GetTick>
 8006f4c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006f4e:	e012      	b.n	8006f76 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006f50:	f7ff fb8e 	bl	8006670 <HAL_GetTick>
 8006f54:	4602      	mov	r2, r0
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	2b0a      	cmp	r3, #10
 8006f5c:	d90b      	bls.n	8006f76 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2205      	movs	r2, #5
 8006f6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e0c5      	b.n	8007102 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	f003 0301 	and.w	r3, r3, #1
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d0e5      	beq.n	8006f50 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f022 0202 	bic.w	r2, r2, #2
 8006f92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f94:	f7ff fb6c 	bl	8006670 <HAL_GetTick>
 8006f98:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006f9a:	e012      	b.n	8006fc2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006f9c:	f7ff fb68 	bl	8006670 <HAL_GetTick>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	2b0a      	cmp	r3, #10
 8006fa8:	d90b      	bls.n	8006fc2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2205      	movs	r2, #5
 8006fba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	e09f      	b.n	8007102 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	f003 0302 	and.w	r3, r3, #2
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1e5      	bne.n	8006f9c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	7e1b      	ldrb	r3, [r3, #24]
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	d108      	bne.n	8006fea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006fe6:	601a      	str	r2, [r3, #0]
 8006fe8:	e007      	b.n	8006ffa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ff8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	7e5b      	ldrb	r3, [r3, #25]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d108      	bne.n	8007014 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007010:	601a      	str	r2, [r3, #0]
 8007012:	e007      	b.n	8007024 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681a      	ldr	r2, [r3, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007022:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	7e9b      	ldrb	r3, [r3, #26]
 8007028:	2b01      	cmp	r3, #1
 800702a:	d108      	bne.n	800703e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f042 0220 	orr.w	r2, r2, #32
 800703a:	601a      	str	r2, [r3, #0]
 800703c:	e007      	b.n	800704e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f022 0220 	bic.w	r2, r2, #32
 800704c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	7edb      	ldrb	r3, [r3, #27]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d108      	bne.n	8007068 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f022 0210 	bic.w	r2, r2, #16
 8007064:	601a      	str	r2, [r3, #0]
 8007066:	e007      	b.n	8007078 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f042 0210 	orr.w	r2, r2, #16
 8007076:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	7f1b      	ldrb	r3, [r3, #28]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d108      	bne.n	8007092 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f042 0208 	orr.w	r2, r2, #8
 800708e:	601a      	str	r2, [r3, #0]
 8007090:	e007      	b.n	80070a2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f022 0208 	bic.w	r2, r2, #8
 80070a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	7f5b      	ldrb	r3, [r3, #29]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d108      	bne.n	80070bc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f042 0204 	orr.w	r2, r2, #4
 80070b8:	601a      	str	r2, [r3, #0]
 80070ba:	e007      	b.n	80070cc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f022 0204 	bic.w	r2, r2, #4
 80070ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	689a      	ldr	r2, [r3, #8]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	431a      	orrs	r2, r3
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	431a      	orrs	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	695b      	ldr	r3, [r3, #20]
 80070e0:	ea42 0103 	orr.w	r1, r2, r3
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	1e5a      	subs	r2, r3, #1
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	430a      	orrs	r2, r1
 80070f0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}
	...

0800710c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800710c:	b480      	push	{r7}
 800710e:	b087      	sub	sp, #28
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007122:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8007124:	7cfb      	ldrb	r3, [r7, #19]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d003      	beq.n	8007132 <HAL_CAN_ConfigFilter+0x26>
 800712a:	7cfb      	ldrb	r3, [r7, #19]
 800712c:	2b02      	cmp	r3, #2
 800712e:	f040 80be 	bne.w	80072ae <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8007132:	4b65      	ldr	r3, [pc, #404]	; (80072c8 <HAL_CAN_ConfigFilter+0x1bc>)
 8007134:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800713c:	f043 0201 	orr.w	r2, r3, #1
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800714c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007160:	021b      	lsls	r3, r3, #8
 8007162:	431a      	orrs	r2, r3
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	695b      	ldr	r3, [r3, #20]
 800716e:	f003 031f 	and.w	r3, r3, #31
 8007172:	2201      	movs	r2, #1
 8007174:	fa02 f303 	lsl.w	r3, r2, r3
 8007178:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	43db      	mvns	r3, r3
 8007184:	401a      	ands	r2, r3
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	69db      	ldr	r3, [r3, #28]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d123      	bne.n	80071dc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	43db      	mvns	r3, r3
 800719e:	401a      	ands	r2, r3
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80071b2:	683a      	ldr	r2, [r7, #0]
 80071b4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80071b6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	3248      	adds	r2, #72	; 0x48
 80071bc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80071d0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80071d2:	6979      	ldr	r1, [r7, #20]
 80071d4:	3348      	adds	r3, #72	; 0x48
 80071d6:	00db      	lsls	r3, r3, #3
 80071d8:	440b      	add	r3, r1
 80071da:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	69db      	ldr	r3, [r3, #28]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d122      	bne.n	800722a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	431a      	orrs	r2, r3
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007200:	683a      	ldr	r2, [r7, #0]
 8007202:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007204:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	3248      	adds	r2, #72	; 0x48
 800720a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800721e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007220:	6979      	ldr	r1, [r7, #20]
 8007222:	3348      	adds	r3, #72	; 0x48
 8007224:	00db      	lsls	r3, r3, #3
 8007226:	440b      	add	r3, r1
 8007228:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d109      	bne.n	8007246 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	43db      	mvns	r3, r3
 800723c:	401a      	ands	r2, r3
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8007244:	e007      	b.n	8007256 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	431a      	orrs	r2, r3
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d109      	bne.n	8007272 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	43db      	mvns	r3, r3
 8007268:	401a      	ands	r2, r3
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8007270:	e007      	b.n	8007282 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	431a      	orrs	r2, r3
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	2b01      	cmp	r3, #1
 8007288:	d107      	bne.n	800729a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	431a      	orrs	r2, r3
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80072a0:	f023 0201 	bic.w	r2, r3, #1
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80072aa:	2300      	movs	r3, #0
 80072ac:	e006      	b.n	80072bc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
  }
}
 80072bc:	4618      	mov	r0, r3
 80072be:	371c      	adds	r7, #28
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr
 80072c8:	40006400 	.word	0x40006400

080072cc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d12e      	bne.n	800733e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2202      	movs	r2, #2
 80072e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f022 0201 	bic.w	r2, r2, #1
 80072f6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80072f8:	f7ff f9ba 	bl	8006670 <HAL_GetTick>
 80072fc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80072fe:	e012      	b.n	8007326 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007300:	f7ff f9b6 	bl	8006670 <HAL_GetTick>
 8007304:	4602      	mov	r2, r0
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	1ad3      	subs	r3, r2, r3
 800730a:	2b0a      	cmp	r3, #10
 800730c:	d90b      	bls.n	8007326 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007312:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2205      	movs	r2, #5
 800731e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007322:	2301      	movs	r3, #1
 8007324:	e012      	b.n	800734c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	2b00      	cmp	r3, #0
 8007332:	d1e5      	bne.n	8007300 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800733a:	2300      	movs	r3, #0
 800733c:	e006      	b.n	800734c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007342:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
  }
}
 800734c:	4618      	mov	r0, r3
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8007354:	b480      	push	{r7}
 8007356:	b089      	sub	sp, #36	; 0x24
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
 8007360:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007368:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8007372:	7ffb      	ldrb	r3, [r7, #31]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d003      	beq.n	8007380 <HAL_CAN_AddTxMessage+0x2c>
 8007378:	7ffb      	ldrb	r3, [r7, #31]
 800737a:	2b02      	cmp	r3, #2
 800737c:	f040 80b8 	bne.w	80074f0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10a      	bne.n	80073a0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007390:	2b00      	cmp	r3, #0
 8007392:	d105      	bne.n	80073a0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800739a:	2b00      	cmp	r3, #0
 800739c:	f000 80a0 	beq.w	80074e0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	0e1b      	lsrs	r3, r3, #24
 80073a4:	f003 0303 	and.w	r3, r3, #3
 80073a8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d907      	bls.n	80073c0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	e09e      	b.n	80074fe <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80073c0:	2201      	movs	r2, #1
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	409a      	lsls	r2, r3
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10d      	bne.n	80073ee <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80073dc:	68f9      	ldr	r1, [r7, #12]
 80073de:	6809      	ldr	r1, [r1, #0]
 80073e0:	431a      	orrs	r2, r3
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	3318      	adds	r3, #24
 80073e6:	011b      	lsls	r3, r3, #4
 80073e8:	440b      	add	r3, r1
 80073ea:	601a      	str	r2, [r3, #0]
 80073ec:	e00f      	b.n	800740e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80073f8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80073fe:	68f9      	ldr	r1, [r7, #12]
 8007400:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8007402:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	3318      	adds	r3, #24
 8007408:	011b      	lsls	r3, r3, #4
 800740a:	440b      	add	r3, r1
 800740c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6819      	ldr	r1, [r3, #0]
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	691a      	ldr	r2, [r3, #16]
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	3318      	adds	r3, #24
 800741a:	011b      	lsls	r3, r3, #4
 800741c:	440b      	add	r3, r1
 800741e:	3304      	adds	r3, #4
 8007420:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	7d1b      	ldrb	r3, [r3, #20]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d111      	bne.n	800744e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	3318      	adds	r3, #24
 8007432:	011b      	lsls	r3, r3, #4
 8007434:	4413      	add	r3, r2
 8007436:	3304      	adds	r3, #4
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	6811      	ldr	r1, [r2, #0]
 800743e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	3318      	adds	r3, #24
 8007446:	011b      	lsls	r3, r3, #4
 8007448:	440b      	add	r3, r1
 800744a:	3304      	adds	r3, #4
 800744c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	3307      	adds	r3, #7
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	061a      	lsls	r2, r3, #24
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	3306      	adds	r3, #6
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	041b      	lsls	r3, r3, #16
 800745e:	431a      	orrs	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	3305      	adds	r3, #5
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	021b      	lsls	r3, r3, #8
 8007468:	4313      	orrs	r3, r2
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	3204      	adds	r2, #4
 800746e:	7812      	ldrb	r2, [r2, #0]
 8007470:	4610      	mov	r0, r2
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	6811      	ldr	r1, [r2, #0]
 8007476:	ea43 0200 	orr.w	r2, r3, r0
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	011b      	lsls	r3, r3, #4
 800747e:	440b      	add	r3, r1
 8007480:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8007484:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	3303      	adds	r3, #3
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	061a      	lsls	r2, r3, #24
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	3302      	adds	r3, #2
 8007492:	781b      	ldrb	r3, [r3, #0]
 8007494:	041b      	lsls	r3, r3, #16
 8007496:	431a      	orrs	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	3301      	adds	r3, #1
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	021b      	lsls	r3, r3, #8
 80074a0:	4313      	orrs	r3, r2
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	7812      	ldrb	r2, [r2, #0]
 80074a6:	4610      	mov	r0, r2
 80074a8:	68fa      	ldr	r2, [r7, #12]
 80074aa:	6811      	ldr	r1, [r2, #0]
 80074ac:	ea43 0200 	orr.w	r2, r3, r0
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	011b      	lsls	r3, r3, #4
 80074b4:	440b      	add	r3, r1
 80074b6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80074ba:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	3318      	adds	r3, #24
 80074c4:	011b      	lsls	r3, r3, #4
 80074c6:	4413      	add	r3, r2
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	6811      	ldr	r1, [r2, #0]
 80074ce:	f043 0201 	orr.w	r2, r3, #1
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	3318      	adds	r3, #24
 80074d6:	011b      	lsls	r3, r3, #4
 80074d8:	440b      	add	r3, r1
 80074da:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80074dc:	2300      	movs	r3, #0
 80074de:	e00e      	b.n	80074fe <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	e006      	b.n	80074fe <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
  }
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3724      	adds	r7, #36	; 0x24
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800750a:	b480      	push	{r7}
 800750c:	b085      	sub	sp, #20
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8007512:	2300      	movs	r3, #0
 8007514:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 3020 	ldrb.w	r3, [r3, #32]
 800751c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800751e:	7afb      	ldrb	r3, [r7, #11]
 8007520:	2b01      	cmp	r3, #1
 8007522:	d002      	beq.n	800752a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8007524:	7afb      	ldrb	r3, [r7, #11]
 8007526:	2b02      	cmp	r3, #2
 8007528:	d11d      	bne.n	8007566 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007534:	2b00      	cmp	r3, #0
 8007536:	d002      	beq.n	800753e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	3301      	adds	r3, #1
 800753c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007548:	2b00      	cmp	r3, #0
 800754a:	d002      	beq.n	8007552 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	3301      	adds	r3, #1
 8007550:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800755c:	2b00      	cmp	r3, #0
 800755e:	d002      	beq.n	8007566 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	3301      	adds	r3, #1
 8007564:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8007566:	68fb      	ldr	r3, [r7, #12]
}
 8007568:	4618      	mov	r0, r3
 800756a:	3714      	adds	r7, #20
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8007574:	b480      	push	{r7}
 8007576:	b087      	sub	sp, #28
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	607a      	str	r2, [r7, #4]
 8007580:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007588:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800758a:	7dfb      	ldrb	r3, [r7, #23]
 800758c:	2b01      	cmp	r3, #1
 800758e:	d003      	beq.n	8007598 <HAL_CAN_GetRxMessage+0x24>
 8007590:	7dfb      	ldrb	r3, [r7, #23]
 8007592:	2b02      	cmp	r3, #2
 8007594:	f040 80f3 	bne.w	800777e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10e      	bne.n	80075bc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	f003 0303 	and.w	r3, r3, #3
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d116      	bne.n	80075da <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	e0e7      	b.n	800778c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	f003 0303 	and.w	r3, r3, #3
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d107      	bne.n	80075da <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e0d8      	b.n	800778c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	331b      	adds	r3, #27
 80075e2:	011b      	lsls	r3, r3, #4
 80075e4:	4413      	add	r3, r2
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 0204 	and.w	r2, r3, #4
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10c      	bne.n	8007612 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	331b      	adds	r3, #27
 8007600:	011b      	lsls	r3, r3, #4
 8007602:	4413      	add	r3, r2
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	0d5b      	lsrs	r3, r3, #21
 8007608:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	601a      	str	r2, [r3, #0]
 8007610:	e00b      	b.n	800762a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	331b      	adds	r3, #27
 800761a:	011b      	lsls	r3, r3, #4
 800761c:	4413      	add	r3, r2
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	08db      	lsrs	r3, r3, #3
 8007622:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	331b      	adds	r3, #27
 8007632:	011b      	lsls	r3, r3, #4
 8007634:	4413      	add	r3, r2
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0202 	and.w	r2, r3, #2
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	331b      	adds	r3, #27
 8007648:	011b      	lsls	r3, r3, #4
 800764a:	4413      	add	r3, r2
 800764c:	3304      	adds	r3, #4
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f003 020f 	and.w	r2, r3, #15
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	331b      	adds	r3, #27
 8007660:	011b      	lsls	r3, r3, #4
 8007662:	4413      	add	r3, r2
 8007664:	3304      	adds	r3, #4
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	0a1b      	lsrs	r3, r3, #8
 800766a:	b2da      	uxtb	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	331b      	adds	r3, #27
 8007678:	011b      	lsls	r3, r3, #4
 800767a:	4413      	add	r3, r2
 800767c:	3304      	adds	r3, #4
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	0c1b      	lsrs	r3, r3, #16
 8007682:	b29a      	uxth	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	011b      	lsls	r3, r3, #4
 8007690:	4413      	add	r3, r2
 8007692:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	b2da      	uxtb	r2, r3
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681a      	ldr	r2, [r3, #0]
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	011b      	lsls	r3, r3, #4
 80076a6:	4413      	add	r3, r2
 80076a8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	0a1a      	lsrs	r2, r3, #8
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	3301      	adds	r3, #1
 80076b4:	b2d2      	uxtb	r2, r2
 80076b6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	011b      	lsls	r3, r3, #4
 80076c0:	4413      	add	r3, r2
 80076c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	0c1a      	lsrs	r2, r3, #16
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	3302      	adds	r3, #2
 80076ce:	b2d2      	uxtb	r2, r2
 80076d0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	011b      	lsls	r3, r3, #4
 80076da:	4413      	add	r3, r2
 80076dc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	0e1a      	lsrs	r2, r3, #24
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	3303      	adds	r3, #3
 80076e8:	b2d2      	uxtb	r2, r2
 80076ea:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	011b      	lsls	r3, r3, #4
 80076f4:	4413      	add	r3, r2
 80076f6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	3304      	adds	r3, #4
 8007700:	b2d2      	uxtb	r2, r2
 8007702:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	011b      	lsls	r3, r3, #4
 800770c:	4413      	add	r3, r2
 800770e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	0a1a      	lsrs	r2, r3, #8
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	3305      	adds	r3, #5
 800771a:	b2d2      	uxtb	r2, r2
 800771c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	011b      	lsls	r3, r3, #4
 8007726:	4413      	add	r3, r2
 8007728:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	0c1a      	lsrs	r2, r3, #16
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	3306      	adds	r3, #6
 8007734:	b2d2      	uxtb	r2, r2
 8007736:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681a      	ldr	r2, [r3, #0]
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	011b      	lsls	r3, r3, #4
 8007740:	4413      	add	r3, r2
 8007742:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	0e1a      	lsrs	r2, r3, #24
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	3307      	adds	r3, #7
 800774e:	b2d2      	uxtb	r2, r2
 8007750:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d108      	bne.n	800776a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68da      	ldr	r2, [r3, #12]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f042 0220 	orr.w	r2, r2, #32
 8007766:	60da      	str	r2, [r3, #12]
 8007768:	e007      	b.n	800777a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	691a      	ldr	r2, [r3, #16]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f042 0220 	orr.w	r2, r2, #32
 8007778:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800777a:	2300      	movs	r3, #0
 800777c:	e006      	b.n	800778c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007782:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
  }
}
 800778c:	4618      	mov	r0, r3
 800778e:	371c      	adds	r7, #28
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077a8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80077aa:	7bfb      	ldrb	r3, [r7, #15]
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d002      	beq.n	80077b6 <HAL_CAN_ActivateNotification+0x1e>
 80077b0:	7bfb      	ldrb	r3, [r7, #15]
 80077b2:	2b02      	cmp	r3, #2
 80077b4:	d109      	bne.n	80077ca <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	6959      	ldr	r1, [r3, #20]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	683a      	ldr	r2, [r7, #0]
 80077c2:	430a      	orrs	r2, r1
 80077c4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80077c6:	2300      	movs	r3, #0
 80077c8:	e006      	b.n	80077d8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
  }
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3714      	adds	r7, #20
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b08a      	sub	sp, #40	; 0x28
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80077ec:	2300      	movs	r3, #0
 80077ee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007820:	6a3b      	ldr	r3, [r7, #32]
 8007822:	f003 0301 	and.w	r3, r3, #1
 8007826:	2b00      	cmp	r3, #0
 8007828:	d07c      	beq.n	8007924 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	f003 0301 	and.w	r3, r3, #1
 8007830:	2b00      	cmp	r3, #0
 8007832:	d023      	beq.n	800787c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2201      	movs	r2, #1
 800783a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	f003 0302 	and.w	r3, r3, #2
 8007842:	2b00      	cmp	r3, #0
 8007844:	d003      	beq.n	800784e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f983 	bl	8007b52 <HAL_CAN_TxMailbox0CompleteCallback>
 800784c:	e016      	b.n	800787c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	f003 0304 	and.w	r3, r3, #4
 8007854:	2b00      	cmp	r3, #0
 8007856:	d004      	beq.n	8007862 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800785e:	627b      	str	r3, [r7, #36]	; 0x24
 8007860:	e00c      	b.n	800787c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	f003 0308 	and.w	r3, r3, #8
 8007868:	2b00      	cmp	r3, #0
 800786a:	d004      	beq.n	8007876 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800786c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007872:	627b      	str	r3, [r7, #36]	; 0x24
 8007874:	e002      	b.n	800787c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 f989 	bl	8007b8e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007882:	2b00      	cmp	r3, #0
 8007884:	d024      	beq.n	80078d0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800788e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007890:	69bb      	ldr	r3, [r7, #24]
 8007892:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 f963 	bl	8007b66 <HAL_CAN_TxMailbox1CompleteCallback>
 80078a0:	e016      	b.n	80078d0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d004      	beq.n	80078b6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80078ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80078b2:	627b      	str	r3, [r7, #36]	; 0x24
 80078b4:	e00c      	b.n	80078d0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d004      	beq.n	80078ca <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078c6:	627b      	str	r3, [r7, #36]	; 0x24
 80078c8:	e002      	b.n	80078d0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f969 	bl	8007ba2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d024      	beq.n	8007924 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80078e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d003      	beq.n	80078f6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 f943 	bl	8007b7a <HAL_CAN_TxMailbox2CompleteCallback>
 80078f4:	e016      	b.n	8007924 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d004      	beq.n	800790a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007906:	627b      	str	r3, [r7, #36]	; 0x24
 8007908:	e00c      	b.n	8007924 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007910:	2b00      	cmp	r3, #0
 8007912:	d004      	beq.n	800791e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800791a:	627b      	str	r3, [r7, #36]	; 0x24
 800791c:	e002      	b.n	8007924 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f949 	bl	8007bb6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007924:	6a3b      	ldr	r3, [r7, #32]
 8007926:	f003 0308 	and.w	r3, r3, #8
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00c      	beq.n	8007948 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	f003 0310 	and.w	r3, r3, #16
 8007934:	2b00      	cmp	r3, #0
 8007936:	d007      	beq.n	8007948 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800793e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2210      	movs	r2, #16
 8007946:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007948:	6a3b      	ldr	r3, [r7, #32]
 800794a:	f003 0304 	and.w	r3, r3, #4
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00b      	beq.n	800796a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	f003 0308 	and.w	r3, r3, #8
 8007958:	2b00      	cmp	r3, #0
 800795a:	d006      	beq.n	800796a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	2208      	movs	r2, #8
 8007962:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 f930 	bl	8007bca <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800796a:	6a3b      	ldr	r3, [r7, #32]
 800796c:	f003 0302 	and.w	r3, r3, #2
 8007970:	2b00      	cmp	r3, #0
 8007972:	d009      	beq.n	8007988 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	f003 0303 	and.w	r3, r3, #3
 800797e:	2b00      	cmp	r3, #0
 8007980:	d002      	beq.n	8007988 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f7fe f8f2 	bl	8005b6c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8007988:	6a3b      	ldr	r3, [r7, #32]
 800798a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800798e:	2b00      	cmp	r3, #0
 8007990:	d00c      	beq.n	80079ac <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	f003 0310 	and.w	r3, r3, #16
 8007998:	2b00      	cmp	r3, #0
 800799a:	d007      	beq.n	80079ac <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800799c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80079a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2210      	movs	r2, #16
 80079aa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80079ac:	6a3b      	ldr	r3, [r7, #32]
 80079ae:	f003 0320 	and.w	r3, r3, #32
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00b      	beq.n	80079ce <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	f003 0308 	and.w	r3, r3, #8
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d006      	beq.n	80079ce <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2208      	movs	r2, #8
 80079c6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 f912 	bl	8007bf2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80079ce:	6a3b      	ldr	r3, [r7, #32]
 80079d0:	f003 0310 	and.w	r3, r3, #16
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d009      	beq.n	80079ec <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	f003 0303 	and.w	r3, r3, #3
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d002      	beq.n	80079ec <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 f8f9 	bl	8007bde <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80079ec:	6a3b      	ldr	r3, [r7, #32]
 80079ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00b      	beq.n	8007a0e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	f003 0310 	and.w	r3, r3, #16
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d006      	beq.n	8007a0e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2210      	movs	r2, #16
 8007a06:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 f8fc 	bl	8007c06 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007a0e:	6a3b      	ldr	r3, [r7, #32]
 8007a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00b      	beq.n	8007a30 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	f003 0308 	and.w	r3, r3, #8
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d006      	beq.n	8007a30 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2208      	movs	r2, #8
 8007a28:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 f8f5 	bl	8007c1a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007a30:	6a3b      	ldr	r3, [r7, #32]
 8007a32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d07b      	beq.n	8007b32 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	f003 0304 	and.w	r3, r3, #4
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d072      	beq.n	8007b2a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007a44:	6a3b      	ldr	r3, [r7, #32]
 8007a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d008      	beq.n	8007a60 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d003      	beq.n	8007a60 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5a:	f043 0301 	orr.w	r3, r3, #1
 8007a5e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007a60:	6a3b      	ldr	r3, [r7, #32]
 8007a62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d008      	beq.n	8007a7c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d003      	beq.n	8007a7c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8007a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a76:	f043 0302 	orr.w	r3, r3, #2
 8007a7a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007a7c:	6a3b      	ldr	r3, [r7, #32]
 8007a7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d008      	beq.n	8007a98 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d003      	beq.n	8007a98 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8007a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a92:	f043 0304 	orr.w	r3, r3, #4
 8007a96:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007a98:	6a3b      	ldr	r3, [r7, #32]
 8007a9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d043      	beq.n	8007b2a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d03e      	beq.n	8007b2a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ab2:	2b60      	cmp	r3, #96	; 0x60
 8007ab4:	d02b      	beq.n	8007b0e <HAL_CAN_IRQHandler+0x32a>
 8007ab6:	2b60      	cmp	r3, #96	; 0x60
 8007ab8:	d82e      	bhi.n	8007b18 <HAL_CAN_IRQHandler+0x334>
 8007aba:	2b50      	cmp	r3, #80	; 0x50
 8007abc:	d022      	beq.n	8007b04 <HAL_CAN_IRQHandler+0x320>
 8007abe:	2b50      	cmp	r3, #80	; 0x50
 8007ac0:	d82a      	bhi.n	8007b18 <HAL_CAN_IRQHandler+0x334>
 8007ac2:	2b40      	cmp	r3, #64	; 0x40
 8007ac4:	d019      	beq.n	8007afa <HAL_CAN_IRQHandler+0x316>
 8007ac6:	2b40      	cmp	r3, #64	; 0x40
 8007ac8:	d826      	bhi.n	8007b18 <HAL_CAN_IRQHandler+0x334>
 8007aca:	2b30      	cmp	r3, #48	; 0x30
 8007acc:	d010      	beq.n	8007af0 <HAL_CAN_IRQHandler+0x30c>
 8007ace:	2b30      	cmp	r3, #48	; 0x30
 8007ad0:	d822      	bhi.n	8007b18 <HAL_CAN_IRQHandler+0x334>
 8007ad2:	2b10      	cmp	r3, #16
 8007ad4:	d002      	beq.n	8007adc <HAL_CAN_IRQHandler+0x2f8>
 8007ad6:	2b20      	cmp	r3, #32
 8007ad8:	d005      	beq.n	8007ae6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007ada:	e01d      	b.n	8007b18 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ade:	f043 0308 	orr.w	r3, r3, #8
 8007ae2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007ae4:	e019      	b.n	8007b1a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae8:	f043 0310 	orr.w	r3, r3, #16
 8007aec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007aee:	e014      	b.n	8007b1a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af2:	f043 0320 	orr.w	r3, r3, #32
 8007af6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007af8:	e00f      	b.n	8007b1a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8007afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007b02:	e00a      	b.n	8007b1a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007b0c:	e005      	b.n	8007b1a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007b16:	e000      	b.n	8007b1a <HAL_CAN_IRQHandler+0x336>
            break;
 8007b18:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	699a      	ldr	r2, [r3, #24]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007b28:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2204      	movs	r2, #4
 8007b30:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d008      	beq.n	8007b4a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3e:	431a      	orrs	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 f872 	bl	8007c2e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007b4a:	bf00      	nop
 8007b4c:	3728      	adds	r7, #40	; 0x28
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007b52:	b480      	push	{r7}
 8007b54:	b083      	sub	sp, #12
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8007b5a:	bf00      	nop
 8007b5c:	370c      	adds	r7, #12
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007b66:	b480      	push	{r7}
 8007b68:	b083      	sub	sp, #12
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8007b6e:	bf00      	nop
 8007b70:	370c      	adds	r7, #12
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr

08007b7a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	b083      	sub	sp, #12
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8007b82:	bf00      	nop
 8007b84:	370c      	adds	r7, #12
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr

08007b8e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007b8e:	b480      	push	{r7}
 8007b90:	b083      	sub	sp, #12
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8007b96:	bf00      	nop
 8007b98:	370c      	adds	r7, #12
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr

08007ba2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007ba2:	b480      	push	{r7}
 8007ba4:	b083      	sub	sp, #12
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007baa:	bf00      	nop
 8007bac:	370c      	adds	r7, #12
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b083      	sub	sp, #12
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007bbe:	bf00      	nop
 8007bc0:	370c      	adds	r7, #12
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr

08007bca <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007bca:	b480      	push	{r7}
 8007bcc:	b083      	sub	sp, #12
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007bd2:	bf00      	nop
 8007bd4:	370c      	adds	r7, #12
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr

08007bde <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007bde:	b480      	push	{r7}
 8007be0:	b083      	sub	sp, #12
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8007be6:	bf00      	nop
 8007be8:	370c      	adds	r7, #12
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr

08007bf2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007bf2:	b480      	push	{r7}
 8007bf4:	b083      	sub	sp, #12
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007bfa:	bf00      	nop
 8007bfc:	370c      	adds	r7, #12
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c04:	4770      	bx	lr

08007c06 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007c06:	b480      	push	{r7}
 8007c08:	b083      	sub	sp, #12
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007c0e:	bf00      	nop
 8007c10:	370c      	adds	r7, #12
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr

08007c1a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007c1a:	b480      	push	{r7}
 8007c1c:	b083      	sub	sp, #12
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007c22:	bf00      	nop
 8007c24:	370c      	adds	r7, #12
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr

08007c2e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8007c2e:	b480      	push	{r7}
 8007c30:	b083      	sub	sp, #12
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007c36:	bf00      	nop
 8007c38:	370c      	adds	r7, #12
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
	...

08007c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f003 0307 	and.w	r3, r3, #7
 8007c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007c54:	4b0c      	ldr	r3, [pc, #48]	; (8007c88 <__NVIC_SetPriorityGrouping+0x44>)
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007c5a:	68ba      	ldr	r2, [r7, #8]
 8007c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007c60:	4013      	ands	r3, r2
 8007c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007c76:	4a04      	ldr	r2, [pc, #16]	; (8007c88 <__NVIC_SetPriorityGrouping+0x44>)
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	60d3      	str	r3, [r2, #12]
}
 8007c7c:	bf00      	nop
 8007c7e:	3714      	adds	r7, #20
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	e000ed00 	.word	0xe000ed00

08007c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007c90:	4b04      	ldr	r3, [pc, #16]	; (8007ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	0a1b      	lsrs	r3, r3, #8
 8007c96:	f003 0307 	and.w	r3, r3, #7
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr
 8007ca4:	e000ed00 	.word	0xe000ed00

08007ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	4603      	mov	r3, r0
 8007cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	db0b      	blt.n	8007cd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007cba:	79fb      	ldrb	r3, [r7, #7]
 8007cbc:	f003 021f 	and.w	r2, r3, #31
 8007cc0:	4907      	ldr	r1, [pc, #28]	; (8007ce0 <__NVIC_EnableIRQ+0x38>)
 8007cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cc6:	095b      	lsrs	r3, r3, #5
 8007cc8:	2001      	movs	r0, #1
 8007cca:	fa00 f202 	lsl.w	r2, r0, r2
 8007cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007cd2:	bf00      	nop
 8007cd4:	370c      	adds	r7, #12
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	e000e100 	.word	0xe000e100

08007ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	4603      	mov	r3, r0
 8007cec:	6039      	str	r1, [r7, #0]
 8007cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	db0a      	blt.n	8007d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	b2da      	uxtb	r2, r3
 8007cfc:	490c      	ldr	r1, [pc, #48]	; (8007d30 <__NVIC_SetPriority+0x4c>)
 8007cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d02:	0112      	lsls	r2, r2, #4
 8007d04:	b2d2      	uxtb	r2, r2
 8007d06:	440b      	add	r3, r1
 8007d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007d0c:	e00a      	b.n	8007d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	b2da      	uxtb	r2, r3
 8007d12:	4908      	ldr	r1, [pc, #32]	; (8007d34 <__NVIC_SetPriority+0x50>)
 8007d14:	79fb      	ldrb	r3, [r7, #7]
 8007d16:	f003 030f 	and.w	r3, r3, #15
 8007d1a:	3b04      	subs	r3, #4
 8007d1c:	0112      	lsls	r2, r2, #4
 8007d1e:	b2d2      	uxtb	r2, r2
 8007d20:	440b      	add	r3, r1
 8007d22:	761a      	strb	r2, [r3, #24]
}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr
 8007d30:	e000e100 	.word	0xe000e100
 8007d34:	e000ed00 	.word	0xe000ed00

08007d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b089      	sub	sp, #36	; 0x24
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f003 0307 	and.w	r3, r3, #7
 8007d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	f1c3 0307 	rsb	r3, r3, #7
 8007d52:	2b04      	cmp	r3, #4
 8007d54:	bf28      	it	cs
 8007d56:	2304      	movcs	r3, #4
 8007d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007d5a:	69fb      	ldr	r3, [r7, #28]
 8007d5c:	3304      	adds	r3, #4
 8007d5e:	2b06      	cmp	r3, #6
 8007d60:	d902      	bls.n	8007d68 <NVIC_EncodePriority+0x30>
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	3b03      	subs	r3, #3
 8007d66:	e000      	b.n	8007d6a <NVIC_EncodePriority+0x32>
 8007d68:	2300      	movs	r3, #0
 8007d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	fa02 f303 	lsl.w	r3, r2, r3
 8007d76:	43da      	mvns	r2, r3
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	401a      	ands	r2, r3
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007d80:	f04f 31ff 	mov.w	r1, #4294967295
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	fa01 f303 	lsl.w	r3, r1, r3
 8007d8a:	43d9      	mvns	r1, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d90:	4313      	orrs	r3, r2
         );
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3724      	adds	r7, #36	; 0x24
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr
	...

08007da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	3b01      	subs	r3, #1
 8007dac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007db0:	d301      	bcc.n	8007db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007db2:	2301      	movs	r3, #1
 8007db4:	e00f      	b.n	8007dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007db6:	4a0a      	ldr	r2, [pc, #40]	; (8007de0 <SysTick_Config+0x40>)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007dbe:	210f      	movs	r1, #15
 8007dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007dc4:	f7ff ff8e 	bl	8007ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007dc8:	4b05      	ldr	r3, [pc, #20]	; (8007de0 <SysTick_Config+0x40>)
 8007dca:	2200      	movs	r2, #0
 8007dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007dce:	4b04      	ldr	r3, [pc, #16]	; (8007de0 <SysTick_Config+0x40>)
 8007dd0:	2207      	movs	r2, #7
 8007dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3708      	adds	r7, #8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
 8007dde:	bf00      	nop
 8007de0:	e000e010 	.word	0xe000e010

08007de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f7ff ff29 	bl	8007c44 <__NVIC_SetPriorityGrouping>
}
 8007df2:	bf00      	nop
 8007df4:	3708      	adds	r7, #8
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b086      	sub	sp, #24
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	4603      	mov	r3, r0
 8007e02:	60b9      	str	r1, [r7, #8]
 8007e04:	607a      	str	r2, [r7, #4]
 8007e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007e0c:	f7ff ff3e 	bl	8007c8c <__NVIC_GetPriorityGrouping>
 8007e10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	68b9      	ldr	r1, [r7, #8]
 8007e16:	6978      	ldr	r0, [r7, #20]
 8007e18:	f7ff ff8e 	bl	8007d38 <NVIC_EncodePriority>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e22:	4611      	mov	r1, r2
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7ff ff5d 	bl	8007ce4 <__NVIC_SetPriority>
}
 8007e2a:	bf00      	nop
 8007e2c:	3718      	adds	r7, #24
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e32:	b580      	push	{r7, lr}
 8007e34:	b082      	sub	sp, #8
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	4603      	mov	r3, r0
 8007e3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7ff ff31 	bl	8007ca8 <__NVIC_EnableIRQ>
}
 8007e46:	bf00      	nop
 8007e48:	3708      	adds	r7, #8
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007e4e:	b580      	push	{r7, lr}
 8007e50:	b082      	sub	sp, #8
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f7ff ffa2 	bl	8007da0 <SysTick_Config>
 8007e5c:	4603      	mov	r3, r0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3708      	adds	r7, #8
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
	...

08007e68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007e70:	2300      	movs	r3, #0
 8007e72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007e74:	f7fe fbfc 	bl	8006670 <HAL_GetTick>
 8007e78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d101      	bne.n	8007e84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	e099      	b.n	8007fb8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2202      	movs	r2, #2
 8007e88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f022 0201 	bic.w	r2, r2, #1
 8007ea2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007ea4:	e00f      	b.n	8007ec6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007ea6:	f7fe fbe3 	bl	8006670 <HAL_GetTick>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	1ad3      	subs	r3, r2, r3
 8007eb0:	2b05      	cmp	r3, #5
 8007eb2:	d908      	bls.n	8007ec6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2220      	movs	r2, #32
 8007eb8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2203      	movs	r2, #3
 8007ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e078      	b.n	8007fb8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0301 	and.w	r3, r3, #1
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d1e8      	bne.n	8007ea6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007edc:	697a      	ldr	r2, [r7, #20]
 8007ede:	4b38      	ldr	r3, [pc, #224]	; (8007fc0 <HAL_DMA_Init+0x158>)
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	685a      	ldr	r2, [r3, #4]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007ef2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	691b      	ldr	r3, [r3, #16]
 8007ef8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007efe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	699b      	ldr	r3, [r3, #24]
 8007f04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6a1b      	ldr	r3, [r3, #32]
 8007f10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007f12:	697a      	ldr	r2, [r7, #20]
 8007f14:	4313      	orrs	r3, r2
 8007f16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1c:	2b04      	cmp	r3, #4
 8007f1e:	d107      	bne.n	8007f30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	697a      	ldr	r2, [r7, #20]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	697a      	ldr	r2, [r7, #20]
 8007f36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	695b      	ldr	r3, [r3, #20]
 8007f3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	f023 0307 	bic.w	r3, r3, #7
 8007f46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4c:	697a      	ldr	r2, [r7, #20]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f56:	2b04      	cmp	r3, #4
 8007f58:	d117      	bne.n	8007f8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f5e:	697a      	ldr	r2, [r7, #20]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00e      	beq.n	8007f8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fa9d 	bl	80084ac <DMA_CheckFifoParam>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d008      	beq.n	8007f8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2240      	movs	r2, #64	; 0x40
 8007f7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2201      	movs	r2, #1
 8007f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007f86:	2301      	movs	r3, #1
 8007f88:	e016      	b.n	8007fb8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 fa54 	bl	8008440 <DMA_CalcBaseAndBitshift>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fa0:	223f      	movs	r2, #63	; 0x3f
 8007fa2:	409a      	lsls	r2, r3
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007fb6:	2300      	movs	r3, #0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3718      	adds	r7, #24
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	f010803f 	.word	0xf010803f

08007fc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b086      	sub	sp, #24
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	607a      	str	r2, [r7, #4]
 8007fd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fda:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d101      	bne.n	8007fea <HAL_DMA_Start_IT+0x26>
 8007fe6:	2302      	movs	r3, #2
 8007fe8:	e040      	b.n	800806c <HAL_DMA_Start_IT+0xa8>
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2201      	movs	r2, #1
 8007fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d12f      	bne.n	800805e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2202      	movs	r2, #2
 8008002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	68b9      	ldr	r1, [r7, #8]
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	f000 f9e6 	bl	80083e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800801c:	223f      	movs	r2, #63	; 0x3f
 800801e:	409a      	lsls	r2, r3
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	681a      	ldr	r2, [r3, #0]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f042 0216 	orr.w	r2, r2, #22
 8008032:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008038:	2b00      	cmp	r3, #0
 800803a:	d007      	beq.n	800804c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f042 0208 	orr.w	r2, r2, #8
 800804a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f042 0201 	orr.w	r2, r2, #1
 800805a:	601a      	str	r2, [r3, #0]
 800805c:	e005      	b.n	800806a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2200      	movs	r2, #0
 8008062:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008066:	2302      	movs	r3, #2
 8008068:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800806a:	7dfb      	ldrb	r3, [r7, #23]
}
 800806c:	4618      	mov	r0, r3
 800806e:	3718      	adds	r7, #24
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008082:	b2db      	uxtb	r3, r3
 8008084:	2b02      	cmp	r3, #2
 8008086:	d004      	beq.n	8008092 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2280      	movs	r2, #128	; 0x80
 800808c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	e00c      	b.n	80080ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2205      	movs	r2, #5
 8008096:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f022 0201 	bic.w	r2, r2, #1
 80080a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	370c      	adds	r7, #12
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b086      	sub	sp, #24
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80080c0:	2300      	movs	r3, #0
 80080c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80080c4:	4b92      	ldr	r3, [pc, #584]	; (8008310 <HAL_DMA_IRQHandler+0x258>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a92      	ldr	r2, [pc, #584]	; (8008314 <HAL_DMA_IRQHandler+0x25c>)
 80080ca:	fba2 2303 	umull	r2, r3, r2, r3
 80080ce:	0a9b      	lsrs	r3, r3, #10
 80080d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080e2:	2208      	movs	r2, #8
 80080e4:	409a      	lsls	r2, r3
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	4013      	ands	r3, r2
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d01a      	beq.n	8008124 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f003 0304 	and.w	r3, r3, #4
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d013      	beq.n	8008124 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f022 0204 	bic.w	r2, r2, #4
 800810a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008110:	2208      	movs	r2, #8
 8008112:	409a      	lsls	r2, r3
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800811c:	f043 0201 	orr.w	r2, r3, #1
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008128:	2201      	movs	r2, #1
 800812a:	409a      	lsls	r2, r3
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	4013      	ands	r3, r2
 8008130:	2b00      	cmp	r3, #0
 8008132:	d012      	beq.n	800815a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	695b      	ldr	r3, [r3, #20]
 800813a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00b      	beq.n	800815a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008146:	2201      	movs	r2, #1
 8008148:	409a      	lsls	r2, r3
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008152:	f043 0202 	orr.w	r2, r3, #2
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800815e:	2204      	movs	r2, #4
 8008160:	409a      	lsls	r2, r3
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	4013      	ands	r3, r2
 8008166:	2b00      	cmp	r3, #0
 8008168:	d012      	beq.n	8008190 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 0302 	and.w	r3, r3, #2
 8008174:	2b00      	cmp	r3, #0
 8008176:	d00b      	beq.n	8008190 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800817c:	2204      	movs	r2, #4
 800817e:	409a      	lsls	r2, r3
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008188:	f043 0204 	orr.w	r2, r3, #4
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008194:	2210      	movs	r2, #16
 8008196:	409a      	lsls	r2, r3
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	4013      	ands	r3, r2
 800819c:	2b00      	cmp	r3, #0
 800819e:	d043      	beq.n	8008228 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f003 0308 	and.w	r3, r3, #8
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d03c      	beq.n	8008228 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081b2:	2210      	movs	r2, #16
 80081b4:	409a      	lsls	r2, r3
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d018      	beq.n	80081fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d108      	bne.n	80081e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d024      	beq.n	8008228 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	4798      	blx	r3
 80081e6:	e01f      	b.n	8008228 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d01b      	beq.n	8008228 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	4798      	blx	r3
 80081f8:	e016      	b.n	8008228 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008204:	2b00      	cmp	r3, #0
 8008206:	d107      	bne.n	8008218 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f022 0208 	bic.w	r2, r2, #8
 8008216:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800821c:	2b00      	cmp	r3, #0
 800821e:	d003      	beq.n	8008228 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800822c:	2220      	movs	r2, #32
 800822e:	409a      	lsls	r2, r3
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	4013      	ands	r3, r2
 8008234:	2b00      	cmp	r3, #0
 8008236:	f000 808e 	beq.w	8008356 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 0310 	and.w	r3, r3, #16
 8008244:	2b00      	cmp	r3, #0
 8008246:	f000 8086 	beq.w	8008356 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800824e:	2220      	movs	r2, #32
 8008250:	409a      	lsls	r2, r3
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800825c:	b2db      	uxtb	r3, r3
 800825e:	2b05      	cmp	r3, #5
 8008260:	d136      	bne.n	80082d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f022 0216 	bic.w	r2, r2, #22
 8008270:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	695a      	ldr	r2, [r3, #20]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008280:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008286:	2b00      	cmp	r3, #0
 8008288:	d103      	bne.n	8008292 <HAL_DMA_IRQHandler+0x1da>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800828e:	2b00      	cmp	r3, #0
 8008290:	d007      	beq.n	80082a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f022 0208 	bic.w	r2, r2, #8
 80082a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082a6:	223f      	movs	r2, #63	; 0x3f
 80082a8:	409a      	lsls	r2, r3
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d07d      	beq.n	80083c2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	4798      	blx	r3
        }
        return;
 80082ce:	e078      	b.n	80083c2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d01c      	beq.n	8008318 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d108      	bne.n	80082fe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d030      	beq.n	8008356 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	4798      	blx	r3
 80082fc:	e02b      	b.n	8008356 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008302:	2b00      	cmp	r3, #0
 8008304:	d027      	beq.n	8008356 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	4798      	blx	r3
 800830e:	e022      	b.n	8008356 <HAL_DMA_IRQHandler+0x29e>
 8008310:	20000000 	.word	0x20000000
 8008314:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008322:	2b00      	cmp	r3, #0
 8008324:	d10f      	bne.n	8008346 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f022 0210 	bic.w	r2, r2, #16
 8008334:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2201      	movs	r2, #1
 800833a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2200      	movs	r2, #0
 8008342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800834a:	2b00      	cmp	r3, #0
 800834c:	d003      	beq.n	8008356 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800835a:	2b00      	cmp	r3, #0
 800835c:	d032      	beq.n	80083c4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008362:	f003 0301 	and.w	r3, r3, #1
 8008366:	2b00      	cmp	r3, #0
 8008368:	d022      	beq.n	80083b0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2205      	movs	r2, #5
 800836e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f022 0201 	bic.w	r2, r2, #1
 8008380:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	3301      	adds	r3, #1
 8008386:	60bb      	str	r3, [r7, #8]
 8008388:	697a      	ldr	r2, [r7, #20]
 800838a:	429a      	cmp	r2, r3
 800838c:	d307      	bcc.n	800839e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f003 0301 	and.w	r3, r3, #1
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1f2      	bne.n	8008382 <HAL_DMA_IRQHandler+0x2ca>
 800839c:	e000      	b.n	80083a0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800839e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d005      	beq.n	80083c4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	4798      	blx	r3
 80083c0:	e000      	b.n	80083c4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80083c2:	bf00      	nop
    }
  }
}
 80083c4:	3718      	adds	r7, #24
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop

080083cc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80083d8:	4618      	mov	r0, r3
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
 80083f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008400:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	683a      	ldr	r2, [r7, #0]
 8008408:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	2b40      	cmp	r3, #64	; 0x40
 8008410:	d108      	bne.n	8008424 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	68ba      	ldr	r2, [r7, #8]
 8008420:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008422:	e007      	b.n	8008434 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	68ba      	ldr	r2, [r7, #8]
 800842a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	60da      	str	r2, [r3, #12]
}
 8008434:	bf00      	nop
 8008436:	3714      	adds	r7, #20
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008440:	b480      	push	{r7}
 8008442:	b085      	sub	sp, #20
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	b2db      	uxtb	r3, r3
 800844e:	3b10      	subs	r3, #16
 8008450:	4a14      	ldr	r2, [pc, #80]	; (80084a4 <DMA_CalcBaseAndBitshift+0x64>)
 8008452:	fba2 2303 	umull	r2, r3, r2, r3
 8008456:	091b      	lsrs	r3, r3, #4
 8008458:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800845a:	4a13      	ldr	r2, [pc, #76]	; (80084a8 <DMA_CalcBaseAndBitshift+0x68>)
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	4413      	add	r3, r2
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	461a      	mov	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2b03      	cmp	r3, #3
 800846c:	d909      	bls.n	8008482 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008476:	f023 0303 	bic.w	r3, r3, #3
 800847a:	1d1a      	adds	r2, r3, #4
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	659a      	str	r2, [r3, #88]	; 0x58
 8008480:	e007      	b.n	8008492 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800848a:	f023 0303 	bic.w	r3, r3, #3
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008496:	4618      	mov	r0, r3
 8008498:	3714      	adds	r7, #20
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr
 80084a2:	bf00      	nop
 80084a4:	aaaaaaab 	.word	0xaaaaaaab
 80084a8:	08018110 	.word	0x08018110

080084ac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b085      	sub	sp, #20
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084b4:	2300      	movs	r3, #0
 80084b6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084bc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	699b      	ldr	r3, [r3, #24]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d11f      	bne.n	8008506 <DMA_CheckFifoParam+0x5a>
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	2b03      	cmp	r3, #3
 80084ca:	d856      	bhi.n	800857a <DMA_CheckFifoParam+0xce>
 80084cc:	a201      	add	r2, pc, #4	; (adr r2, 80084d4 <DMA_CheckFifoParam+0x28>)
 80084ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d2:	bf00      	nop
 80084d4:	080084e5 	.word	0x080084e5
 80084d8:	080084f7 	.word	0x080084f7
 80084dc:	080084e5 	.word	0x080084e5
 80084e0:	0800857b 	.word	0x0800857b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d046      	beq.n	800857e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80084f4:	e043      	b.n	800857e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084fa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80084fe:	d140      	bne.n	8008582 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008500:	2301      	movs	r3, #1
 8008502:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008504:	e03d      	b.n	8008582 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	699b      	ldr	r3, [r3, #24]
 800850a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800850e:	d121      	bne.n	8008554 <DMA_CheckFifoParam+0xa8>
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	2b03      	cmp	r3, #3
 8008514:	d837      	bhi.n	8008586 <DMA_CheckFifoParam+0xda>
 8008516:	a201      	add	r2, pc, #4	; (adr r2, 800851c <DMA_CheckFifoParam+0x70>)
 8008518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800851c:	0800852d 	.word	0x0800852d
 8008520:	08008533 	.word	0x08008533
 8008524:	0800852d 	.word	0x0800852d
 8008528:	08008545 	.word	0x08008545
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	73fb      	strb	r3, [r7, #15]
      break;
 8008530:	e030      	b.n	8008594 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008536:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800853a:	2b00      	cmp	r3, #0
 800853c:	d025      	beq.n	800858a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800853e:	2301      	movs	r3, #1
 8008540:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008542:	e022      	b.n	800858a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008548:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800854c:	d11f      	bne.n	800858e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800854e:	2301      	movs	r3, #1
 8008550:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008552:	e01c      	b.n	800858e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	2b02      	cmp	r3, #2
 8008558:	d903      	bls.n	8008562 <DMA_CheckFifoParam+0xb6>
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	2b03      	cmp	r3, #3
 800855e:	d003      	beq.n	8008568 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008560:	e018      	b.n	8008594 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008562:	2301      	movs	r3, #1
 8008564:	73fb      	strb	r3, [r7, #15]
      break;
 8008566:	e015      	b.n	8008594 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800856c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00e      	beq.n	8008592 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008574:	2301      	movs	r3, #1
 8008576:	73fb      	strb	r3, [r7, #15]
      break;
 8008578:	e00b      	b.n	8008592 <DMA_CheckFifoParam+0xe6>
      break;
 800857a:	bf00      	nop
 800857c:	e00a      	b.n	8008594 <DMA_CheckFifoParam+0xe8>
      break;
 800857e:	bf00      	nop
 8008580:	e008      	b.n	8008594 <DMA_CheckFifoParam+0xe8>
      break;
 8008582:	bf00      	nop
 8008584:	e006      	b.n	8008594 <DMA_CheckFifoParam+0xe8>
      break;
 8008586:	bf00      	nop
 8008588:	e004      	b.n	8008594 <DMA_CheckFifoParam+0xe8>
      break;
 800858a:	bf00      	nop
 800858c:	e002      	b.n	8008594 <DMA_CheckFifoParam+0xe8>
      break;   
 800858e:	bf00      	nop
 8008590:	e000      	b.n	8008594 <DMA_CheckFifoParam+0xe8>
      break;
 8008592:	bf00      	nop
    }
  } 
  
  return status; 
 8008594:	7bfb      	ldrb	r3, [r7, #15]
}
 8008596:	4618      	mov	r0, r3
 8008598:	3714      	adds	r7, #20
 800859a:	46bd      	mov	sp, r7
 800859c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a0:	4770      	bx	lr
 80085a2:	bf00      	nop

080085a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b089      	sub	sp, #36	; 0x24
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80085ae:	2300      	movs	r3, #0
 80085b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80085b2:	2300      	movs	r3, #0
 80085b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80085b6:	2300      	movs	r3, #0
 80085b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80085ba:	2300      	movs	r3, #0
 80085bc:	61fb      	str	r3, [r7, #28]
 80085be:	e165      	b.n	800888c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80085c0:	2201      	movs	r2, #1
 80085c2:	69fb      	ldr	r3, [r7, #28]
 80085c4:	fa02 f303 	lsl.w	r3, r2, r3
 80085c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	697a      	ldr	r2, [r7, #20]
 80085d0:	4013      	ands	r3, r2
 80085d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80085d4:	693a      	ldr	r2, [r7, #16]
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	429a      	cmp	r2, r3
 80085da:	f040 8154 	bne.w	8008886 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	f003 0303 	and.w	r3, r3, #3
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d005      	beq.n	80085f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	d130      	bne.n	8008658 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	005b      	lsls	r3, r3, #1
 8008600:	2203      	movs	r2, #3
 8008602:	fa02 f303 	lsl.w	r3, r2, r3
 8008606:	43db      	mvns	r3, r3
 8008608:	69ba      	ldr	r2, [r7, #24]
 800860a:	4013      	ands	r3, r2
 800860c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	68da      	ldr	r2, [r3, #12]
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	005b      	lsls	r3, r3, #1
 8008616:	fa02 f303 	lsl.w	r3, r2, r3
 800861a:	69ba      	ldr	r2, [r7, #24]
 800861c:	4313      	orrs	r3, r2
 800861e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	69ba      	ldr	r2, [r7, #24]
 8008624:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800862c:	2201      	movs	r2, #1
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	fa02 f303 	lsl.w	r3, r2, r3
 8008634:	43db      	mvns	r3, r3
 8008636:	69ba      	ldr	r2, [r7, #24]
 8008638:	4013      	ands	r3, r2
 800863a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	091b      	lsrs	r3, r3, #4
 8008642:	f003 0201 	and.w	r2, r3, #1
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	fa02 f303 	lsl.w	r3, r2, r3
 800864c:	69ba      	ldr	r2, [r7, #24]
 800864e:	4313      	orrs	r3, r2
 8008650:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	69ba      	ldr	r2, [r7, #24]
 8008656:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	f003 0303 	and.w	r3, r3, #3
 8008660:	2b03      	cmp	r3, #3
 8008662:	d017      	beq.n	8008694 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	005b      	lsls	r3, r3, #1
 800866e:	2203      	movs	r2, #3
 8008670:	fa02 f303 	lsl.w	r3, r2, r3
 8008674:	43db      	mvns	r3, r3
 8008676:	69ba      	ldr	r2, [r7, #24]
 8008678:	4013      	ands	r3, r2
 800867a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	689a      	ldr	r2, [r3, #8]
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	005b      	lsls	r3, r3, #1
 8008684:	fa02 f303 	lsl.w	r3, r2, r3
 8008688:	69ba      	ldr	r2, [r7, #24]
 800868a:	4313      	orrs	r3, r2
 800868c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	69ba      	ldr	r2, [r7, #24]
 8008692:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	f003 0303 	and.w	r3, r3, #3
 800869c:	2b02      	cmp	r3, #2
 800869e:	d123      	bne.n	80086e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	08da      	lsrs	r2, r3, #3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	3208      	adds	r2, #8
 80086a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	f003 0307 	and.w	r3, r3, #7
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	220f      	movs	r2, #15
 80086b8:	fa02 f303 	lsl.w	r3, r2, r3
 80086bc:	43db      	mvns	r3, r3
 80086be:	69ba      	ldr	r2, [r7, #24]
 80086c0:	4013      	ands	r3, r2
 80086c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	691a      	ldr	r2, [r3, #16]
 80086c8:	69fb      	ldr	r3, [r7, #28]
 80086ca:	f003 0307 	and.w	r3, r3, #7
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	fa02 f303 	lsl.w	r3, r2, r3
 80086d4:	69ba      	ldr	r2, [r7, #24]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	08da      	lsrs	r2, r3, #3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	3208      	adds	r2, #8
 80086e2:	69b9      	ldr	r1, [r7, #24]
 80086e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80086ee:	69fb      	ldr	r3, [r7, #28]
 80086f0:	005b      	lsls	r3, r3, #1
 80086f2:	2203      	movs	r2, #3
 80086f4:	fa02 f303 	lsl.w	r3, r2, r3
 80086f8:	43db      	mvns	r3, r3
 80086fa:	69ba      	ldr	r2, [r7, #24]
 80086fc:	4013      	ands	r3, r2
 80086fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	f003 0203 	and.w	r2, r3, #3
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	005b      	lsls	r3, r3, #1
 800870c:	fa02 f303 	lsl.w	r3, r2, r3
 8008710:	69ba      	ldr	r2, [r7, #24]
 8008712:	4313      	orrs	r3, r2
 8008714:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	69ba      	ldr	r2, [r7, #24]
 800871a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008724:	2b00      	cmp	r3, #0
 8008726:	f000 80ae 	beq.w	8008886 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800872a:	2300      	movs	r3, #0
 800872c:	60fb      	str	r3, [r7, #12]
 800872e:	4b5d      	ldr	r3, [pc, #372]	; (80088a4 <HAL_GPIO_Init+0x300>)
 8008730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008732:	4a5c      	ldr	r2, [pc, #368]	; (80088a4 <HAL_GPIO_Init+0x300>)
 8008734:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008738:	6453      	str	r3, [r2, #68]	; 0x44
 800873a:	4b5a      	ldr	r3, [pc, #360]	; (80088a4 <HAL_GPIO_Init+0x300>)
 800873c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800873e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008742:	60fb      	str	r3, [r7, #12]
 8008744:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008746:	4a58      	ldr	r2, [pc, #352]	; (80088a8 <HAL_GPIO_Init+0x304>)
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	089b      	lsrs	r3, r3, #2
 800874c:	3302      	adds	r3, #2
 800874e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008752:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	f003 0303 	and.w	r3, r3, #3
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	220f      	movs	r2, #15
 800875e:	fa02 f303 	lsl.w	r3, r2, r3
 8008762:	43db      	mvns	r3, r3
 8008764:	69ba      	ldr	r2, [r7, #24]
 8008766:	4013      	ands	r3, r2
 8008768:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a4f      	ldr	r2, [pc, #316]	; (80088ac <HAL_GPIO_Init+0x308>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d025      	beq.n	80087be <HAL_GPIO_Init+0x21a>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4a4e      	ldr	r2, [pc, #312]	; (80088b0 <HAL_GPIO_Init+0x30c>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d01f      	beq.n	80087ba <HAL_GPIO_Init+0x216>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a4d      	ldr	r2, [pc, #308]	; (80088b4 <HAL_GPIO_Init+0x310>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d019      	beq.n	80087b6 <HAL_GPIO_Init+0x212>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a4c      	ldr	r2, [pc, #304]	; (80088b8 <HAL_GPIO_Init+0x314>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d013      	beq.n	80087b2 <HAL_GPIO_Init+0x20e>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a4b      	ldr	r2, [pc, #300]	; (80088bc <HAL_GPIO_Init+0x318>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d00d      	beq.n	80087ae <HAL_GPIO_Init+0x20a>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a4a      	ldr	r2, [pc, #296]	; (80088c0 <HAL_GPIO_Init+0x31c>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d007      	beq.n	80087aa <HAL_GPIO_Init+0x206>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a49      	ldr	r2, [pc, #292]	; (80088c4 <HAL_GPIO_Init+0x320>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d101      	bne.n	80087a6 <HAL_GPIO_Init+0x202>
 80087a2:	2306      	movs	r3, #6
 80087a4:	e00c      	b.n	80087c0 <HAL_GPIO_Init+0x21c>
 80087a6:	2307      	movs	r3, #7
 80087a8:	e00a      	b.n	80087c0 <HAL_GPIO_Init+0x21c>
 80087aa:	2305      	movs	r3, #5
 80087ac:	e008      	b.n	80087c0 <HAL_GPIO_Init+0x21c>
 80087ae:	2304      	movs	r3, #4
 80087b0:	e006      	b.n	80087c0 <HAL_GPIO_Init+0x21c>
 80087b2:	2303      	movs	r3, #3
 80087b4:	e004      	b.n	80087c0 <HAL_GPIO_Init+0x21c>
 80087b6:	2302      	movs	r3, #2
 80087b8:	e002      	b.n	80087c0 <HAL_GPIO_Init+0x21c>
 80087ba:	2301      	movs	r3, #1
 80087bc:	e000      	b.n	80087c0 <HAL_GPIO_Init+0x21c>
 80087be:	2300      	movs	r3, #0
 80087c0:	69fa      	ldr	r2, [r7, #28]
 80087c2:	f002 0203 	and.w	r2, r2, #3
 80087c6:	0092      	lsls	r2, r2, #2
 80087c8:	4093      	lsls	r3, r2
 80087ca:	69ba      	ldr	r2, [r7, #24]
 80087cc:	4313      	orrs	r3, r2
 80087ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80087d0:	4935      	ldr	r1, [pc, #212]	; (80088a8 <HAL_GPIO_Init+0x304>)
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	089b      	lsrs	r3, r3, #2
 80087d6:	3302      	adds	r3, #2
 80087d8:	69ba      	ldr	r2, [r7, #24]
 80087da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80087de:	4b3a      	ldr	r3, [pc, #232]	; (80088c8 <HAL_GPIO_Init+0x324>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	43db      	mvns	r3, r3
 80087e8:	69ba      	ldr	r2, [r7, #24]
 80087ea:	4013      	ands	r3, r2
 80087ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d003      	beq.n	8008802 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80087fa:	69ba      	ldr	r2, [r7, #24]
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	4313      	orrs	r3, r2
 8008800:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008802:	4a31      	ldr	r2, [pc, #196]	; (80088c8 <HAL_GPIO_Init+0x324>)
 8008804:	69bb      	ldr	r3, [r7, #24]
 8008806:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008808:	4b2f      	ldr	r3, [pc, #188]	; (80088c8 <HAL_GPIO_Init+0x324>)
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	43db      	mvns	r3, r3
 8008812:	69ba      	ldr	r2, [r7, #24]
 8008814:	4013      	ands	r3, r2
 8008816:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008820:	2b00      	cmp	r3, #0
 8008822:	d003      	beq.n	800882c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008824:	69ba      	ldr	r2, [r7, #24]
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	4313      	orrs	r3, r2
 800882a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800882c:	4a26      	ldr	r2, [pc, #152]	; (80088c8 <HAL_GPIO_Init+0x324>)
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008832:	4b25      	ldr	r3, [pc, #148]	; (80088c8 <HAL_GPIO_Init+0x324>)
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	43db      	mvns	r3, r3
 800883c:	69ba      	ldr	r2, [r7, #24]
 800883e:	4013      	ands	r3, r2
 8008840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800884a:	2b00      	cmp	r3, #0
 800884c:	d003      	beq.n	8008856 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800884e:	69ba      	ldr	r2, [r7, #24]
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	4313      	orrs	r3, r2
 8008854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008856:	4a1c      	ldr	r2, [pc, #112]	; (80088c8 <HAL_GPIO_Init+0x324>)
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800885c:	4b1a      	ldr	r3, [pc, #104]	; (80088c8 <HAL_GPIO_Init+0x324>)
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	43db      	mvns	r3, r3
 8008866:	69ba      	ldr	r2, [r7, #24]
 8008868:	4013      	ands	r3, r2
 800886a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008874:	2b00      	cmp	r3, #0
 8008876:	d003      	beq.n	8008880 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008878:	69ba      	ldr	r2, [r7, #24]
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	4313      	orrs	r3, r2
 800887e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008880:	4a11      	ldr	r2, [pc, #68]	; (80088c8 <HAL_GPIO_Init+0x324>)
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	3301      	adds	r3, #1
 800888a:	61fb      	str	r3, [r7, #28]
 800888c:	69fb      	ldr	r3, [r7, #28]
 800888e:	2b0f      	cmp	r3, #15
 8008890:	f67f ae96 	bls.w	80085c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008894:	bf00      	nop
 8008896:	bf00      	nop
 8008898:	3724      	adds	r7, #36	; 0x24
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	40023800 	.word	0x40023800
 80088a8:	40013800 	.word	0x40013800
 80088ac:	40020000 	.word	0x40020000
 80088b0:	40020400 	.word	0x40020400
 80088b4:	40020800 	.word	0x40020800
 80088b8:	40020c00 	.word	0x40020c00
 80088bc:	40021000 	.word	0x40021000
 80088c0:	40021400 	.word	0x40021400
 80088c4:	40021800 	.word	0x40021800
 80088c8:	40013c00 	.word	0x40013c00

080088cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b085      	sub	sp, #20
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	460b      	mov	r3, r1
 80088d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	691a      	ldr	r2, [r3, #16]
 80088dc:	887b      	ldrh	r3, [r7, #2]
 80088de:	4013      	ands	r3, r2
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d002      	beq.n	80088ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80088e4:	2301      	movs	r3, #1
 80088e6:	73fb      	strb	r3, [r7, #15]
 80088e8:	e001      	b.n	80088ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80088ea:	2300      	movs	r3, #0
 80088ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80088ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3714      	adds	r7, #20
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr

080088fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
 8008904:	460b      	mov	r3, r1
 8008906:	807b      	strh	r3, [r7, #2]
 8008908:	4613      	mov	r3, r2
 800890a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800890c:	787b      	ldrb	r3, [r7, #1]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d003      	beq.n	800891a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008912:	887a      	ldrh	r2, [r7, #2]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008918:	e003      	b.n	8008922 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800891a:	887b      	ldrh	r3, [r7, #2]
 800891c:	041a      	lsls	r2, r3, #16
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	619a      	str	r2, [r3, #24]
}
 8008922:	bf00      	nop
 8008924:	370c      	adds	r7, #12
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr

0800892e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800892e:	b480      	push	{r7}
 8008930:	b085      	sub	sp, #20
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
 8008936:	460b      	mov	r3, r1
 8008938:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	695b      	ldr	r3, [r3, #20]
 800893e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008940:	887a      	ldrh	r2, [r7, #2]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	4013      	ands	r3, r2
 8008946:	041a      	lsls	r2, r3, #16
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	43d9      	mvns	r1, r3
 800894c:	887b      	ldrh	r3, [r7, #2]
 800894e:	400b      	ands	r3, r1
 8008950:	431a      	orrs	r2, r3
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	619a      	str	r2, [r3, #24]
}
 8008956:	bf00      	nop
 8008958:	3714      	adds	r7, #20
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr
	...

08008964 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	4603      	mov	r3, r0
 800896c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800896e:	4b08      	ldr	r3, [pc, #32]	; (8008990 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008970:	695a      	ldr	r2, [r3, #20]
 8008972:	88fb      	ldrh	r3, [r7, #6]
 8008974:	4013      	ands	r3, r2
 8008976:	2b00      	cmp	r3, #0
 8008978:	d006      	beq.n	8008988 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800897a:	4a05      	ldr	r2, [pc, #20]	; (8008990 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800897c:	88fb      	ldrh	r3, [r7, #6]
 800897e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008980:	88fb      	ldrh	r3, [r7, #6]
 8008982:	4618      	mov	r0, r3
 8008984:	f7fd f966 	bl	8005c54 <HAL_GPIO_EXTI_Callback>
  }
}
 8008988:	bf00      	nop
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	40013c00 	.word	0x40013c00

08008994 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d101      	bne.n	80089a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	e12b      	b.n	8008bfe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d106      	bne.n	80089c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f7fd fb70 	bl	80060a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2224      	movs	r2, #36	; 0x24
 80089c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f022 0201 	bic.w	r2, r2, #1
 80089d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80089e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80089f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80089f8:	f002 faf2 	bl	800afe0 <HAL_RCC_GetPCLK1Freq>
 80089fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	4a81      	ldr	r2, [pc, #516]	; (8008c08 <HAL_I2C_Init+0x274>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d807      	bhi.n	8008a18 <HAL_I2C_Init+0x84>
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	4a80      	ldr	r2, [pc, #512]	; (8008c0c <HAL_I2C_Init+0x278>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	bf94      	ite	ls
 8008a10:	2301      	movls	r3, #1
 8008a12:	2300      	movhi	r3, #0
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	e006      	b.n	8008a26 <HAL_I2C_Init+0x92>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	4a7d      	ldr	r2, [pc, #500]	; (8008c10 <HAL_I2C_Init+0x27c>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	bf94      	ite	ls
 8008a20:	2301      	movls	r3, #1
 8008a22:	2300      	movhi	r3, #0
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d001      	beq.n	8008a2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e0e7      	b.n	8008bfe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	4a78      	ldr	r2, [pc, #480]	; (8008c14 <HAL_I2C_Init+0x280>)
 8008a32:	fba2 2303 	umull	r2, r3, r2, r3
 8008a36:	0c9b      	lsrs	r3, r3, #18
 8008a38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68ba      	ldr	r2, [r7, #8]
 8008a4a:	430a      	orrs	r2, r1
 8008a4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	6a1b      	ldr	r3, [r3, #32]
 8008a54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	4a6a      	ldr	r2, [pc, #424]	; (8008c08 <HAL_I2C_Init+0x274>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d802      	bhi.n	8008a68 <HAL_I2C_Init+0xd4>
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	3301      	adds	r3, #1
 8008a66:	e009      	b.n	8008a7c <HAL_I2C_Init+0xe8>
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008a6e:	fb02 f303 	mul.w	r3, r2, r3
 8008a72:	4a69      	ldr	r2, [pc, #420]	; (8008c18 <HAL_I2C_Init+0x284>)
 8008a74:	fba2 2303 	umull	r2, r3, r2, r3
 8008a78:	099b      	lsrs	r3, r3, #6
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	6812      	ldr	r2, [r2, #0]
 8008a80:	430b      	orrs	r3, r1
 8008a82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	69db      	ldr	r3, [r3, #28]
 8008a8a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008a8e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	495c      	ldr	r1, [pc, #368]	; (8008c08 <HAL_I2C_Init+0x274>)
 8008a98:	428b      	cmp	r3, r1
 8008a9a:	d819      	bhi.n	8008ad0 <HAL_I2C_Init+0x13c>
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	1e59      	subs	r1, r3, #1
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	005b      	lsls	r3, r3, #1
 8008aa6:	fbb1 f3f3 	udiv	r3, r1, r3
 8008aaa:	1c59      	adds	r1, r3, #1
 8008aac:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008ab0:	400b      	ands	r3, r1
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00a      	beq.n	8008acc <HAL_I2C_Init+0x138>
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	1e59      	subs	r1, r3, #1
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	005b      	lsls	r3, r3, #1
 8008ac0:	fbb1 f3f3 	udiv	r3, r1, r3
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008aca:	e051      	b.n	8008b70 <HAL_I2C_Init+0x1dc>
 8008acc:	2304      	movs	r3, #4
 8008ace:	e04f      	b.n	8008b70 <HAL_I2C_Init+0x1dc>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d111      	bne.n	8008afc <HAL_I2C_Init+0x168>
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	1e58      	subs	r0, r3, #1
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6859      	ldr	r1, [r3, #4]
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	005b      	lsls	r3, r3, #1
 8008ae4:	440b      	add	r3, r1
 8008ae6:	fbb0 f3f3 	udiv	r3, r0, r3
 8008aea:	3301      	adds	r3, #1
 8008aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	bf0c      	ite	eq
 8008af4:	2301      	moveq	r3, #1
 8008af6:	2300      	movne	r3, #0
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	e012      	b.n	8008b22 <HAL_I2C_Init+0x18e>
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	1e58      	subs	r0, r3, #1
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6859      	ldr	r1, [r3, #4]
 8008b04:	460b      	mov	r3, r1
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	440b      	add	r3, r1
 8008b0a:	0099      	lsls	r1, r3, #2
 8008b0c:	440b      	add	r3, r1
 8008b0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b12:	3301      	adds	r3, #1
 8008b14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	bf0c      	ite	eq
 8008b1c:	2301      	moveq	r3, #1
 8008b1e:	2300      	movne	r3, #0
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d001      	beq.n	8008b2a <HAL_I2C_Init+0x196>
 8008b26:	2301      	movs	r3, #1
 8008b28:	e022      	b.n	8008b70 <HAL_I2C_Init+0x1dc>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d10e      	bne.n	8008b50 <HAL_I2C_Init+0x1bc>
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	1e58      	subs	r0, r3, #1
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6859      	ldr	r1, [r3, #4]
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	005b      	lsls	r3, r3, #1
 8008b3e:	440b      	add	r3, r1
 8008b40:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b44:	3301      	adds	r3, #1
 8008b46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b4e:	e00f      	b.n	8008b70 <HAL_I2C_Init+0x1dc>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	1e58      	subs	r0, r3, #1
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6859      	ldr	r1, [r3, #4]
 8008b58:	460b      	mov	r3, r1
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	440b      	add	r3, r1
 8008b5e:	0099      	lsls	r1, r3, #2
 8008b60:	440b      	add	r3, r1
 8008b62:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b66:	3301      	adds	r3, #1
 8008b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b70:	6879      	ldr	r1, [r7, #4]
 8008b72:	6809      	ldr	r1, [r1, #0]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	69da      	ldr	r2, [r3, #28]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6a1b      	ldr	r3, [r3, #32]
 8008b8a:	431a      	orrs	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	430a      	orrs	r2, r1
 8008b92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008b9e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	6911      	ldr	r1, [r2, #16]
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	68d2      	ldr	r2, [r2, #12]
 8008baa:	4311      	orrs	r1, r2
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	6812      	ldr	r2, [r2, #0]
 8008bb0:	430b      	orrs	r3, r1
 8008bb2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	695a      	ldr	r2, [r3, #20]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	699b      	ldr	r3, [r3, #24]
 8008bc6:	431a      	orrs	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	430a      	orrs	r2, r1
 8008bce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f042 0201 	orr.w	r2, r2, #1
 8008bde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2220      	movs	r2, #32
 8008bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008bfc:	2300      	movs	r3, #0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	000186a0 	.word	0x000186a0
 8008c0c:	001e847f 	.word	0x001e847f
 8008c10:	003d08ff 	.word	0x003d08ff
 8008c14:	431bde83 	.word	0x431bde83
 8008c18:	10624dd3 	.word	0x10624dd3

08008c1c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b088      	sub	sp, #32
 8008c20:	af02      	add	r7, sp, #8
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	607a      	str	r2, [r7, #4]
 8008c26:	461a      	mov	r2, r3
 8008c28:	460b      	mov	r3, r1
 8008c2a:	817b      	strh	r3, [r7, #10]
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008c30:	f7fd fd1e 	bl	8006670 <HAL_GetTick>
 8008c34:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	2b20      	cmp	r3, #32
 8008c40:	f040 80e0 	bne.w	8008e04 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	9300      	str	r3, [sp, #0]
 8008c48:	2319      	movs	r3, #25
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	4970      	ldr	r1, [pc, #448]	; (8008e10 <HAL_I2C_Master_Transmit+0x1f4>)
 8008c4e:	68f8      	ldr	r0, [r7, #12]
 8008c50:	f000 fc58 	bl	8009504 <I2C_WaitOnFlagUntilTimeout>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d001      	beq.n	8008c5e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008c5a:	2302      	movs	r3, #2
 8008c5c:	e0d3      	b.n	8008e06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d101      	bne.n	8008c6c <HAL_I2C_Master_Transmit+0x50>
 8008c68:	2302      	movs	r3, #2
 8008c6a:	e0cc      	b.n	8008e06 <HAL_I2C_Master_Transmit+0x1ea>
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f003 0301 	and.w	r3, r3, #1
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d007      	beq.n	8008c92 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f042 0201 	orr.w	r2, r2, #1
 8008c90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ca0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2221      	movs	r2, #33	; 0x21
 8008ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2210      	movs	r2, #16
 8008cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	687a      	ldr	r2, [r7, #4]
 8008cbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	893a      	ldrh	r2, [r7, #8]
 8008cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008cc8:	b29a      	uxth	r2, r3
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	4a50      	ldr	r2, [pc, #320]	; (8008e14 <HAL_I2C_Master_Transmit+0x1f8>)
 8008cd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008cd4:	8979      	ldrh	r1, [r7, #10]
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	6a3a      	ldr	r2, [r7, #32]
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f000 fac2 	bl	8009264 <I2C_MasterRequestWrite>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d001      	beq.n	8008cea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e08d      	b.n	8008e06 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008cea:	2300      	movs	r3, #0
 8008cec:	613b      	str	r3, [r7, #16]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	695b      	ldr	r3, [r3, #20]
 8008cf4:	613b      	str	r3, [r7, #16]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	699b      	ldr	r3, [r3, #24]
 8008cfc:	613b      	str	r3, [r7, #16]
 8008cfe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008d00:	e066      	b.n	8008dd0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d02:	697a      	ldr	r2, [r7, #20]
 8008d04:	6a39      	ldr	r1, [r7, #32]
 8008d06:	68f8      	ldr	r0, [r7, #12]
 8008d08:	f000 fcd2 	bl	80096b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00d      	beq.n	8008d2e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d16:	2b04      	cmp	r3, #4
 8008d18:	d107      	bne.n	8008d2a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d28:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	e06b      	b.n	8008e06 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d32:	781a      	ldrb	r2, [r3, #0]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3e:	1c5a      	adds	r2, r3, #1
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	b29a      	uxth	r2, r3
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d56:	3b01      	subs	r3, #1
 8008d58:	b29a      	uxth	r2, r3
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	695b      	ldr	r3, [r3, #20]
 8008d64:	f003 0304 	and.w	r3, r3, #4
 8008d68:	2b04      	cmp	r3, #4
 8008d6a:	d11b      	bne.n	8008da4 <HAL_I2C_Master_Transmit+0x188>
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d017      	beq.n	8008da4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d78:	781a      	ldrb	r2, [r3, #0]
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d84:	1c5a      	adds	r2, r3, #1
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	3b01      	subs	r3, #1
 8008d92:	b29a      	uxth	r2, r3
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008da4:	697a      	ldr	r2, [r7, #20]
 8008da6:	6a39      	ldr	r1, [r7, #32]
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	f000 fcc2 	bl	8009732 <I2C_WaitOnBTFFlagUntilTimeout>
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d00d      	beq.n	8008dd0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db8:	2b04      	cmp	r3, #4
 8008dba:	d107      	bne.n	8008dcc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008dca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e01a      	b.n	8008e06 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d194      	bne.n	8008d02 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008de6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2220      	movs	r2, #32
 8008dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2200      	movs	r2, #0
 8008df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008e00:	2300      	movs	r3, #0
 8008e02:	e000      	b.n	8008e06 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008e04:	2302      	movs	r3, #2
  }
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3718      	adds	r7, #24
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	00100002 	.word	0x00100002
 8008e14:	ffff0000 	.word	0xffff0000

08008e18 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b08c      	sub	sp, #48	; 0x30
 8008e1c:	af02      	add	r7, sp, #8
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	607a      	str	r2, [r7, #4]
 8008e22:	461a      	mov	r2, r3
 8008e24:	460b      	mov	r3, r1
 8008e26:	817b      	strh	r3, [r7, #10]
 8008e28:	4613      	mov	r3, r2
 8008e2a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008e2c:	f7fd fc20 	bl	8006670 <HAL_GetTick>
 8008e30:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	2b20      	cmp	r3, #32
 8008e3c:	f040 820b 	bne.w	8009256 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e42:	9300      	str	r3, [sp, #0]
 8008e44:	2319      	movs	r3, #25
 8008e46:	2201      	movs	r2, #1
 8008e48:	497c      	ldr	r1, [pc, #496]	; (800903c <HAL_I2C_Master_Receive+0x224>)
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	f000 fb5a 	bl	8009504 <I2C_WaitOnFlagUntilTimeout>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d001      	beq.n	8008e5a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008e56:	2302      	movs	r3, #2
 8008e58:	e1fe      	b.n	8009258 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d101      	bne.n	8008e68 <HAL_I2C_Master_Receive+0x50>
 8008e64:	2302      	movs	r3, #2
 8008e66:	e1f7      	b.n	8009258 <HAL_I2C_Master_Receive+0x440>
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f003 0301 	and.w	r3, r3, #1
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d007      	beq.n	8008e8e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f042 0201 	orr.w	r2, r2, #1
 8008e8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2222      	movs	r2, #34	; 0x22
 8008ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2210      	movs	r2, #16
 8008eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	893a      	ldrh	r2, [r7, #8]
 8008ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ec4:	b29a      	uxth	r2, r3
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	4a5c      	ldr	r2, [pc, #368]	; (8009040 <HAL_I2C_Master_Receive+0x228>)
 8008ece:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008ed0:	8979      	ldrh	r1, [r7, #10]
 8008ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ed6:	68f8      	ldr	r0, [r7, #12]
 8008ed8:	f000 fa46 	bl	8009368 <I2C_MasterRequestRead>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d001      	beq.n	8008ee6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e1b8      	b.n	8009258 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d113      	bne.n	8008f16 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008eee:	2300      	movs	r3, #0
 8008ef0:	623b      	str	r3, [r7, #32]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	695b      	ldr	r3, [r3, #20]
 8008ef8:	623b      	str	r3, [r7, #32]
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	699b      	ldr	r3, [r3, #24]
 8008f00:	623b      	str	r3, [r7, #32]
 8008f02:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f12:	601a      	str	r2, [r3, #0]
 8008f14:	e18c      	b.n	8009230 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d11b      	bne.n	8008f56 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f2e:	2300      	movs	r3, #0
 8008f30:	61fb      	str	r3, [r7, #28]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	695b      	ldr	r3, [r3, #20]
 8008f38:	61fb      	str	r3, [r7, #28]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	699b      	ldr	r3, [r3, #24]
 8008f40:	61fb      	str	r3, [r7, #28]
 8008f42:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f52:	601a      	str	r2, [r3, #0]
 8008f54:	e16c      	b.n	8009230 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f5a:	2b02      	cmp	r3, #2
 8008f5c:	d11b      	bne.n	8008f96 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	681a      	ldr	r2, [r3, #0]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f6c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f7e:	2300      	movs	r3, #0
 8008f80:	61bb      	str	r3, [r7, #24]
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	695b      	ldr	r3, [r3, #20]
 8008f88:	61bb      	str	r3, [r7, #24]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	699b      	ldr	r3, [r3, #24]
 8008f90:	61bb      	str	r3, [r7, #24]
 8008f92:	69bb      	ldr	r3, [r7, #24]
 8008f94:	e14c      	b.n	8009230 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008fa4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	617b      	str	r3, [r7, #20]
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	695b      	ldr	r3, [r3, #20]
 8008fb0:	617b      	str	r3, [r7, #20]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	699b      	ldr	r3, [r3, #24]
 8008fb8:	617b      	str	r3, [r7, #20]
 8008fba:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008fbc:	e138      	b.n	8009230 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fc2:	2b03      	cmp	r3, #3
 8008fc4:	f200 80f1 	bhi.w	80091aa <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d123      	bne.n	8009018 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f000 fbed 	bl	80097b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d001      	beq.n	8008fe4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e139      	b.n	8009258 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	691a      	ldr	r2, [r3, #16]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fee:	b2d2      	uxtb	r2, r2
 8008ff0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff6:	1c5a      	adds	r2, r3, #1
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009000:	3b01      	subs	r3, #1
 8009002:	b29a      	uxth	r2, r3
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800900c:	b29b      	uxth	r3, r3
 800900e:	3b01      	subs	r3, #1
 8009010:	b29a      	uxth	r2, r3
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009016:	e10b      	b.n	8009230 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800901c:	2b02      	cmp	r3, #2
 800901e:	d14e      	bne.n	80090be <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009022:	9300      	str	r3, [sp, #0]
 8009024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009026:	2200      	movs	r2, #0
 8009028:	4906      	ldr	r1, [pc, #24]	; (8009044 <HAL_I2C_Master_Receive+0x22c>)
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f000 fa6a 	bl	8009504 <I2C_WaitOnFlagUntilTimeout>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d008      	beq.n	8009048 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	e10e      	b.n	8009258 <HAL_I2C_Master_Receive+0x440>
 800903a:	bf00      	nop
 800903c:	00100002 	.word	0x00100002
 8009040:	ffff0000 	.word	0xffff0000
 8009044:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009056:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	691a      	ldr	r2, [r3, #16]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009062:	b2d2      	uxtb	r2, r2
 8009064:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906a:	1c5a      	adds	r2, r3, #1
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009074:	3b01      	subs	r3, #1
 8009076:	b29a      	uxth	r2, r3
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009080:	b29b      	uxth	r3, r3
 8009082:	3b01      	subs	r3, #1
 8009084:	b29a      	uxth	r2, r3
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	691a      	ldr	r2, [r3, #16]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009094:	b2d2      	uxtb	r2, r2
 8009096:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909c:	1c5a      	adds	r2, r3, #1
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090a6:	3b01      	subs	r3, #1
 80090a8:	b29a      	uxth	r2, r3
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	3b01      	subs	r3, #1
 80090b6:	b29a      	uxth	r2, r3
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80090bc:	e0b8      	b.n	8009230 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80090be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090c0:	9300      	str	r3, [sp, #0]
 80090c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c4:	2200      	movs	r2, #0
 80090c6:	4966      	ldr	r1, [pc, #408]	; (8009260 <HAL_I2C_Master_Receive+0x448>)
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	f000 fa1b 	bl	8009504 <I2C_WaitOnFlagUntilTimeout>
 80090ce:	4603      	mov	r3, r0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d001      	beq.n	80090d8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80090d4:	2301      	movs	r3, #1
 80090d6:	e0bf      	b.n	8009258 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	691a      	ldr	r2, [r3, #16]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f2:	b2d2      	uxtb	r2, r2
 80090f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fa:	1c5a      	adds	r2, r3, #1
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009104:	3b01      	subs	r3, #1
 8009106:	b29a      	uxth	r2, r3
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009110:	b29b      	uxth	r3, r3
 8009112:	3b01      	subs	r3, #1
 8009114:	b29a      	uxth	r2, r3
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800911a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911c:	9300      	str	r3, [sp, #0]
 800911e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009120:	2200      	movs	r2, #0
 8009122:	494f      	ldr	r1, [pc, #316]	; (8009260 <HAL_I2C_Master_Receive+0x448>)
 8009124:	68f8      	ldr	r0, [r7, #12]
 8009126:	f000 f9ed 	bl	8009504 <I2C_WaitOnFlagUntilTimeout>
 800912a:	4603      	mov	r3, r0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d001      	beq.n	8009134 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009130:	2301      	movs	r3, #1
 8009132:	e091      	b.n	8009258 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009142:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	691a      	ldr	r2, [r3, #16]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914e:	b2d2      	uxtb	r2, r2
 8009150:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009156:	1c5a      	adds	r2, r3, #1
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009160:	3b01      	subs	r3, #1
 8009162:	b29a      	uxth	r2, r3
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800916c:	b29b      	uxth	r3, r3
 800916e:	3b01      	subs	r3, #1
 8009170:	b29a      	uxth	r2, r3
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	691a      	ldr	r2, [r3, #16]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009180:	b2d2      	uxtb	r2, r2
 8009182:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009188:	1c5a      	adds	r2, r3, #1
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009192:	3b01      	subs	r3, #1
 8009194:	b29a      	uxth	r2, r3
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800919e:	b29b      	uxth	r3, r3
 80091a0:	3b01      	subs	r3, #1
 80091a2:	b29a      	uxth	r2, r3
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80091a8:	e042      	b.n	8009230 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80091ae:	68f8      	ldr	r0, [r7, #12]
 80091b0:	f000 fb00 	bl	80097b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d001      	beq.n	80091be <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80091ba:	2301      	movs	r3, #1
 80091bc:	e04c      	b.n	8009258 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	691a      	ldr	r2, [r3, #16]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c8:	b2d2      	uxtb	r2, r2
 80091ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d0:	1c5a      	adds	r2, r3, #1
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091da:	3b01      	subs	r3, #1
 80091dc:	b29a      	uxth	r2, r3
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	3b01      	subs	r3, #1
 80091ea:	b29a      	uxth	r2, r3
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	695b      	ldr	r3, [r3, #20]
 80091f6:	f003 0304 	and.w	r3, r3, #4
 80091fa:	2b04      	cmp	r3, #4
 80091fc:	d118      	bne.n	8009230 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	691a      	ldr	r2, [r3, #16]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009208:	b2d2      	uxtb	r2, r2
 800920a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009210:	1c5a      	adds	r2, r3, #1
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800921a:	3b01      	subs	r3, #1
 800921c:	b29a      	uxth	r2, r3
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009226:	b29b      	uxth	r3, r3
 8009228:	3b01      	subs	r3, #1
 800922a:	b29a      	uxth	r2, r3
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009234:	2b00      	cmp	r3, #0
 8009236:	f47f aec2 	bne.w	8008fbe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2220      	movs	r2, #32
 800923e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2200      	movs	r2, #0
 8009246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2200      	movs	r2, #0
 800924e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009252:	2300      	movs	r3, #0
 8009254:	e000      	b.n	8009258 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009256:	2302      	movs	r3, #2
  }
}
 8009258:	4618      	mov	r0, r3
 800925a:	3728      	adds	r7, #40	; 0x28
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}
 8009260:	00010004 	.word	0x00010004

08009264 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b088      	sub	sp, #32
 8009268:	af02      	add	r7, sp, #8
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	607a      	str	r2, [r7, #4]
 800926e:	603b      	str	r3, [r7, #0]
 8009270:	460b      	mov	r3, r1
 8009272:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009278:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	2b08      	cmp	r3, #8
 800927e:	d006      	beq.n	800928e <I2C_MasterRequestWrite+0x2a>
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	2b01      	cmp	r3, #1
 8009284:	d003      	beq.n	800928e <I2C_MasterRequestWrite+0x2a>
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800928c:	d108      	bne.n	80092a0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800929c:	601a      	str	r2, [r3, #0]
 800929e:	e00b      	b.n	80092b8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a4:	2b12      	cmp	r3, #18
 80092a6:	d107      	bne.n	80092b8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	9300      	str	r3, [sp, #0]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f000 f91d 	bl	8009504 <I2C_WaitOnFlagUntilTimeout>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d00d      	beq.n	80092ec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092de:	d103      	bne.n	80092e8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80092e8:	2303      	movs	r3, #3
 80092ea:	e035      	b.n	8009358 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	691b      	ldr	r3, [r3, #16]
 80092f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092f4:	d108      	bne.n	8009308 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80092f6:	897b      	ldrh	r3, [r7, #10]
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	461a      	mov	r2, r3
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009304:	611a      	str	r2, [r3, #16]
 8009306:	e01b      	b.n	8009340 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009308:	897b      	ldrh	r3, [r7, #10]
 800930a:	11db      	asrs	r3, r3, #7
 800930c:	b2db      	uxtb	r3, r3
 800930e:	f003 0306 	and.w	r3, r3, #6
 8009312:	b2db      	uxtb	r3, r3
 8009314:	f063 030f 	orn	r3, r3, #15
 8009318:	b2da      	uxtb	r2, r3
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	490e      	ldr	r1, [pc, #56]	; (8009360 <I2C_MasterRequestWrite+0xfc>)
 8009326:	68f8      	ldr	r0, [r7, #12]
 8009328:	f000 f943 	bl	80095b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	d001      	beq.n	8009336 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009332:	2301      	movs	r3, #1
 8009334:	e010      	b.n	8009358 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009336:	897b      	ldrh	r3, [r7, #10]
 8009338:	b2da      	uxtb	r2, r3
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	4907      	ldr	r1, [pc, #28]	; (8009364 <I2C_MasterRequestWrite+0x100>)
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f000 f933 	bl	80095b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800934c:	4603      	mov	r3, r0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d001      	beq.n	8009356 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	e000      	b.n	8009358 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009356:	2300      	movs	r3, #0
}
 8009358:	4618      	mov	r0, r3
 800935a:	3718      	adds	r7, #24
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}
 8009360:	00010008 	.word	0x00010008
 8009364:	00010002 	.word	0x00010002

08009368 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b088      	sub	sp, #32
 800936c:	af02      	add	r7, sp, #8
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	607a      	str	r2, [r7, #4]
 8009372:	603b      	str	r3, [r7, #0]
 8009374:	460b      	mov	r3, r1
 8009376:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800937c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800938c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	2b08      	cmp	r3, #8
 8009392:	d006      	beq.n	80093a2 <I2C_MasterRequestRead+0x3a>
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	2b01      	cmp	r3, #1
 8009398:	d003      	beq.n	80093a2 <I2C_MasterRequestRead+0x3a>
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80093a0:	d108      	bne.n	80093b4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80093b0:	601a      	str	r2, [r3, #0]
 80093b2:	e00b      	b.n	80093cc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093b8:	2b11      	cmp	r3, #17
 80093ba:	d107      	bne.n	80093cc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80093ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	9300      	str	r3, [sp, #0]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80093d8:	68f8      	ldr	r0, [r7, #12]
 80093da:	f000 f893 	bl	8009504 <I2C_WaitOnFlagUntilTimeout>
 80093de:	4603      	mov	r3, r0
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d00d      	beq.n	8009400 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093f2:	d103      	bne.n	80093fc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80093fc:	2303      	movs	r3, #3
 80093fe:	e079      	b.n	80094f4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	691b      	ldr	r3, [r3, #16]
 8009404:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009408:	d108      	bne.n	800941c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800940a:	897b      	ldrh	r3, [r7, #10]
 800940c:	b2db      	uxtb	r3, r3
 800940e:	f043 0301 	orr.w	r3, r3, #1
 8009412:	b2da      	uxtb	r2, r3
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	611a      	str	r2, [r3, #16]
 800941a:	e05f      	b.n	80094dc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800941c:	897b      	ldrh	r3, [r7, #10]
 800941e:	11db      	asrs	r3, r3, #7
 8009420:	b2db      	uxtb	r3, r3
 8009422:	f003 0306 	and.w	r3, r3, #6
 8009426:	b2db      	uxtb	r3, r3
 8009428:	f063 030f 	orn	r3, r3, #15
 800942c:	b2da      	uxtb	r2, r3
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	4930      	ldr	r1, [pc, #192]	; (80094fc <I2C_MasterRequestRead+0x194>)
 800943a:	68f8      	ldr	r0, [r7, #12]
 800943c:	f000 f8b9 	bl	80095b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009440:	4603      	mov	r3, r0
 8009442:	2b00      	cmp	r3, #0
 8009444:	d001      	beq.n	800944a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009446:	2301      	movs	r3, #1
 8009448:	e054      	b.n	80094f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800944a:	897b      	ldrh	r3, [r7, #10]
 800944c:	b2da      	uxtb	r2, r3
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	4929      	ldr	r1, [pc, #164]	; (8009500 <I2C_MasterRequestRead+0x198>)
 800945a:	68f8      	ldr	r0, [r7, #12]
 800945c:	f000 f8a9 	bl	80095b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d001      	beq.n	800946a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009466:	2301      	movs	r3, #1
 8009468:	e044      	b.n	80094f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800946a:	2300      	movs	r3, #0
 800946c:	613b      	str	r3, [r7, #16]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	695b      	ldr	r3, [r3, #20]
 8009474:	613b      	str	r3, [r7, #16]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	699b      	ldr	r3, [r3, #24]
 800947c:	613b      	str	r3, [r7, #16]
 800947e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800948e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	9300      	str	r3, [sp, #0]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800949c:	68f8      	ldr	r0, [r7, #12]
 800949e:	f000 f831 	bl	8009504 <I2C_WaitOnFlagUntilTimeout>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d00d      	beq.n	80094c4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094b6:	d103      	bne.n	80094c0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094be:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80094c0:	2303      	movs	r3, #3
 80094c2:	e017      	b.n	80094f4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80094c4:	897b      	ldrh	r3, [r7, #10]
 80094c6:	11db      	asrs	r3, r3, #7
 80094c8:	b2db      	uxtb	r3, r3
 80094ca:	f003 0306 	and.w	r3, r3, #6
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	f063 030e 	orn	r3, r3, #14
 80094d4:	b2da      	uxtb	r2, r3
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	687a      	ldr	r2, [r7, #4]
 80094e0:	4907      	ldr	r1, [pc, #28]	; (8009500 <I2C_MasterRequestRead+0x198>)
 80094e2:	68f8      	ldr	r0, [r7, #12]
 80094e4:	f000 f865 	bl	80095b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80094e8:	4603      	mov	r3, r0
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d001      	beq.n	80094f2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80094ee:	2301      	movs	r3, #1
 80094f0:	e000      	b.n	80094f4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80094f2:	2300      	movs	r3, #0
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3718      	adds	r7, #24
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	00010008 	.word	0x00010008
 8009500:	00010002 	.word	0x00010002

08009504 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	603b      	str	r3, [r7, #0]
 8009510:	4613      	mov	r3, r2
 8009512:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009514:	e025      	b.n	8009562 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800951c:	d021      	beq.n	8009562 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800951e:	f7fd f8a7 	bl	8006670 <HAL_GetTick>
 8009522:	4602      	mov	r2, r0
 8009524:	69bb      	ldr	r3, [r7, #24]
 8009526:	1ad3      	subs	r3, r2, r3
 8009528:	683a      	ldr	r2, [r7, #0]
 800952a:	429a      	cmp	r2, r3
 800952c:	d302      	bcc.n	8009534 <I2C_WaitOnFlagUntilTimeout+0x30>
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d116      	bne.n	8009562 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2200      	movs	r2, #0
 8009538:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2220      	movs	r2, #32
 800953e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2200      	movs	r2, #0
 8009546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800954e:	f043 0220 	orr.w	r2, r3, #32
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2200      	movs	r2, #0
 800955a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	e023      	b.n	80095aa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	0c1b      	lsrs	r3, r3, #16
 8009566:	b2db      	uxtb	r3, r3
 8009568:	2b01      	cmp	r3, #1
 800956a:	d10d      	bne.n	8009588 <I2C_WaitOnFlagUntilTimeout+0x84>
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	695b      	ldr	r3, [r3, #20]
 8009572:	43da      	mvns	r2, r3
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	4013      	ands	r3, r2
 8009578:	b29b      	uxth	r3, r3
 800957a:	2b00      	cmp	r3, #0
 800957c:	bf0c      	ite	eq
 800957e:	2301      	moveq	r3, #1
 8009580:	2300      	movne	r3, #0
 8009582:	b2db      	uxtb	r3, r3
 8009584:	461a      	mov	r2, r3
 8009586:	e00c      	b.n	80095a2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	699b      	ldr	r3, [r3, #24]
 800958e:	43da      	mvns	r2, r3
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	4013      	ands	r3, r2
 8009594:	b29b      	uxth	r3, r3
 8009596:	2b00      	cmp	r3, #0
 8009598:	bf0c      	ite	eq
 800959a:	2301      	moveq	r3, #1
 800959c:	2300      	movne	r3, #0
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	461a      	mov	r2, r3
 80095a2:	79fb      	ldrb	r3, [r7, #7]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d0b6      	beq.n	8009516 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80095a8:	2300      	movs	r3, #0
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	3710      	adds	r7, #16
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b084      	sub	sp, #16
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	60f8      	str	r0, [r7, #12]
 80095ba:	60b9      	str	r1, [r7, #8]
 80095bc:	607a      	str	r2, [r7, #4]
 80095be:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80095c0:	e051      	b.n	8009666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	695b      	ldr	r3, [r3, #20]
 80095c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095d0:	d123      	bne.n	800961a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095e0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80095ea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2200      	movs	r2, #0
 80095f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2220      	movs	r2, #32
 80095f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009606:	f043 0204 	orr.w	r2, r3, #4
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2200      	movs	r2, #0
 8009612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	e046      	b.n	80096a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009620:	d021      	beq.n	8009666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009622:	f7fd f825 	bl	8006670 <HAL_GetTick>
 8009626:	4602      	mov	r2, r0
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	1ad3      	subs	r3, r2, r3
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	429a      	cmp	r2, r3
 8009630:	d302      	bcc.n	8009638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d116      	bne.n	8009666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2200      	movs	r2, #0
 800963c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2220      	movs	r2, #32
 8009642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2200      	movs	r2, #0
 800964a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009652:	f043 0220 	orr.w	r2, r3, #32
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2200      	movs	r2, #0
 800965e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	e020      	b.n	80096a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	0c1b      	lsrs	r3, r3, #16
 800966a:	b2db      	uxtb	r3, r3
 800966c:	2b01      	cmp	r3, #1
 800966e:	d10c      	bne.n	800968a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	695b      	ldr	r3, [r3, #20]
 8009676:	43da      	mvns	r2, r3
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	4013      	ands	r3, r2
 800967c:	b29b      	uxth	r3, r3
 800967e:	2b00      	cmp	r3, #0
 8009680:	bf14      	ite	ne
 8009682:	2301      	movne	r3, #1
 8009684:	2300      	moveq	r3, #0
 8009686:	b2db      	uxtb	r3, r3
 8009688:	e00b      	b.n	80096a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	699b      	ldr	r3, [r3, #24]
 8009690:	43da      	mvns	r2, r3
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	4013      	ands	r3, r2
 8009696:	b29b      	uxth	r3, r3
 8009698:	2b00      	cmp	r3, #0
 800969a:	bf14      	ite	ne
 800969c:	2301      	movne	r3, #1
 800969e:	2300      	moveq	r3, #0
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d18d      	bne.n	80095c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3710      	adds	r7, #16
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	60b9      	str	r1, [r7, #8]
 80096ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80096bc:	e02d      	b.n	800971a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80096be:	68f8      	ldr	r0, [r7, #12]
 80096c0:	f000 f8ce 	bl	8009860 <I2C_IsAcknowledgeFailed>
 80096c4:	4603      	mov	r3, r0
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d001      	beq.n	80096ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	e02d      	b.n	800972a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096d4:	d021      	beq.n	800971a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096d6:	f7fc ffcb 	bl	8006670 <HAL_GetTick>
 80096da:	4602      	mov	r2, r0
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	1ad3      	subs	r3, r2, r3
 80096e0:	68ba      	ldr	r2, [r7, #8]
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d302      	bcc.n	80096ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d116      	bne.n	800971a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2200      	movs	r2, #0
 80096f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2220      	movs	r2, #32
 80096f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009706:	f043 0220 	orr.w	r2, r3, #32
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2200      	movs	r2, #0
 8009712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009716:	2301      	movs	r3, #1
 8009718:	e007      	b.n	800972a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	695b      	ldr	r3, [r3, #20]
 8009720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009724:	2b80      	cmp	r3, #128	; 0x80
 8009726:	d1ca      	bne.n	80096be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3710      	adds	r7, #16
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b084      	sub	sp, #16
 8009736:	af00      	add	r7, sp, #0
 8009738:	60f8      	str	r0, [r7, #12]
 800973a:	60b9      	str	r1, [r7, #8]
 800973c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800973e:	e02d      	b.n	800979c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009740:	68f8      	ldr	r0, [r7, #12]
 8009742:	f000 f88d 	bl	8009860 <I2C_IsAcknowledgeFailed>
 8009746:	4603      	mov	r3, r0
 8009748:	2b00      	cmp	r3, #0
 800974a:	d001      	beq.n	8009750 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	e02d      	b.n	80097ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009756:	d021      	beq.n	800979c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009758:	f7fc ff8a 	bl	8006670 <HAL_GetTick>
 800975c:	4602      	mov	r2, r0
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	1ad3      	subs	r3, r2, r3
 8009762:	68ba      	ldr	r2, [r7, #8]
 8009764:	429a      	cmp	r2, r3
 8009766:	d302      	bcc.n	800976e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d116      	bne.n	800979c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2200      	movs	r2, #0
 8009772:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2220      	movs	r2, #32
 8009778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2200      	movs	r2, #0
 8009780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009788:	f043 0220 	orr.w	r2, r3, #32
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2200      	movs	r2, #0
 8009794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009798:	2301      	movs	r3, #1
 800979a:	e007      	b.n	80097ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	695b      	ldr	r3, [r3, #20]
 80097a2:	f003 0304 	and.w	r3, r3, #4
 80097a6:	2b04      	cmp	r3, #4
 80097a8:	d1ca      	bne.n	8009740 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3710      	adds	r7, #16
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80097c0:	e042      	b.n	8009848 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	695b      	ldr	r3, [r3, #20]
 80097c8:	f003 0310 	and.w	r3, r3, #16
 80097cc:	2b10      	cmp	r3, #16
 80097ce:	d119      	bne.n	8009804 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f06f 0210 	mvn.w	r2, #16
 80097d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2200      	movs	r2, #0
 80097de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	2220      	movs	r2, #32
 80097e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2200      	movs	r2, #0
 80097ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2200      	movs	r2, #0
 80097fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009800:	2301      	movs	r3, #1
 8009802:	e029      	b.n	8009858 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009804:	f7fc ff34 	bl	8006670 <HAL_GetTick>
 8009808:	4602      	mov	r2, r0
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	1ad3      	subs	r3, r2, r3
 800980e:	68ba      	ldr	r2, [r7, #8]
 8009810:	429a      	cmp	r2, r3
 8009812:	d302      	bcc.n	800981a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d116      	bne.n	8009848 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2200      	movs	r2, #0
 800981e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	2220      	movs	r2, #32
 8009824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2200      	movs	r2, #0
 800982c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009834:	f043 0220 	orr.w	r2, r3, #32
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2200      	movs	r2, #0
 8009840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009844:	2301      	movs	r3, #1
 8009846:	e007      	b.n	8009858 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	695b      	ldr	r3, [r3, #20]
 800984e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009852:	2b40      	cmp	r3, #64	; 0x40
 8009854:	d1b5      	bne.n	80097c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009856:	2300      	movs	r3, #0
}
 8009858:	4618      	mov	r0, r3
 800985a:	3710      	adds	r7, #16
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}

08009860 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	695b      	ldr	r3, [r3, #20]
 800986e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009876:	d11b      	bne.n	80098b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009880:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2200      	movs	r2, #0
 8009886:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2220      	movs	r2, #32
 800988c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2200      	movs	r2, #0
 8009894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800989c:	f043 0204 	orr.w	r2, r3, #4
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80098ac:	2301      	movs	r3, #1
 80098ae:	e000      	b.n	80098b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80098b0:	2300      	movs	r3, #0
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	370c      	adds	r7, #12
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr

080098be <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80098be:	b580      	push	{r7, lr}
 80098c0:	b084      	sub	sp, #16
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d101      	bne.n	80098d0 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80098cc:	2301      	movs	r3, #1
 80098ce:	e034      	b.n	800993a <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80098d8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f245 5255 	movw	r2, #21845	; 0x5555
 80098e2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	6852      	ldr	r2, [r2, #4]
 80098ec:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	6892      	ldr	r2, [r2, #8]
 80098f6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80098f8:	f7fc feba 	bl	8006670 <HAL_GetTick>
 80098fc:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80098fe:	e00f      	b.n	8009920 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8009900:	f7fc feb6 	bl	8006670 <HAL_GetTick>
 8009904:	4602      	mov	r2, r0
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	1ad3      	subs	r3, r2, r3
 800990a:	2b31      	cmp	r3, #49	; 0x31
 800990c:	d908      	bls.n	8009920 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	68db      	ldr	r3, [r3, #12]
 8009914:	f003 0303 	and.w	r3, r3, #3
 8009918:	2b00      	cmp	r3, #0
 800991a:	d001      	beq.n	8009920 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800991c:	2303      	movs	r3, #3
 800991e:	e00c      	b.n	800993a <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	f003 0303 	and.w	r3, r3, #3
 800992a:	2b00      	cmp	r3, #0
 800992c:	d1e8      	bne.n	8009900 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8009936:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009938:	2300      	movs	r3, #0
}
 800993a:	4618      	mov	r0, r3
 800993c:	3710      	adds	r7, #16
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8009942:	b480      	push	{r7}
 8009944:	b083      	sub	sp, #12
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8009952:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	370c      	adds	r7, #12
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr

08009962 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009962:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009964:	b08f      	sub	sp, #60	; 0x3c
 8009966:	af0a      	add	r7, sp, #40	; 0x28
 8009968:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d101      	bne.n	8009974 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009970:	2301      	movs	r3, #1
 8009972:	e116      	b.n	8009ba2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8009980:	b2db      	uxtb	r3, r3
 8009982:	2b00      	cmp	r3, #0
 8009984:	d106      	bne.n	8009994 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2200      	movs	r2, #0
 800998a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f00d fb56 	bl	8017040 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2203      	movs	r2, #3
 8009998:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d102      	bne.n	80099ae <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4618      	mov	r0, r3
 80099b4:	f005 fe2b 	bl	800f60e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	603b      	str	r3, [r7, #0]
 80099be:	687e      	ldr	r6, [r7, #4]
 80099c0:	466d      	mov	r5, sp
 80099c2:	f106 0410 	add.w	r4, r6, #16
 80099c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80099c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80099ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80099cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80099ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80099d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80099d6:	1d33      	adds	r3, r6, #4
 80099d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80099da:	6838      	ldr	r0, [r7, #0]
 80099dc:	f005 fd02 	bl	800f3e4 <USB_CoreInit>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d005      	beq.n	80099f2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2202      	movs	r2, #2
 80099ea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80099ee:	2301      	movs	r3, #1
 80099f0:	e0d7      	b.n	8009ba2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2100      	movs	r1, #0
 80099f8:	4618      	mov	r0, r3
 80099fa:	f005 fe19 	bl	800f630 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80099fe:	2300      	movs	r3, #0
 8009a00:	73fb      	strb	r3, [r7, #15]
 8009a02:	e04a      	b.n	8009a9a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009a04:	7bfa      	ldrb	r2, [r7, #15]
 8009a06:	6879      	ldr	r1, [r7, #4]
 8009a08:	4613      	mov	r3, r2
 8009a0a:	00db      	lsls	r3, r3, #3
 8009a0c:	1a9b      	subs	r3, r3, r2
 8009a0e:	009b      	lsls	r3, r3, #2
 8009a10:	440b      	add	r3, r1
 8009a12:	333d      	adds	r3, #61	; 0x3d
 8009a14:	2201      	movs	r2, #1
 8009a16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009a18:	7bfa      	ldrb	r2, [r7, #15]
 8009a1a:	6879      	ldr	r1, [r7, #4]
 8009a1c:	4613      	mov	r3, r2
 8009a1e:	00db      	lsls	r3, r3, #3
 8009a20:	1a9b      	subs	r3, r3, r2
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	440b      	add	r3, r1
 8009a26:	333c      	adds	r3, #60	; 0x3c
 8009a28:	7bfa      	ldrb	r2, [r7, #15]
 8009a2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009a2c:	7bfa      	ldrb	r2, [r7, #15]
 8009a2e:	7bfb      	ldrb	r3, [r7, #15]
 8009a30:	b298      	uxth	r0, r3
 8009a32:	6879      	ldr	r1, [r7, #4]
 8009a34:	4613      	mov	r3, r2
 8009a36:	00db      	lsls	r3, r3, #3
 8009a38:	1a9b      	subs	r3, r3, r2
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	440b      	add	r3, r1
 8009a3e:	3342      	adds	r3, #66	; 0x42
 8009a40:	4602      	mov	r2, r0
 8009a42:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009a44:	7bfa      	ldrb	r2, [r7, #15]
 8009a46:	6879      	ldr	r1, [r7, #4]
 8009a48:	4613      	mov	r3, r2
 8009a4a:	00db      	lsls	r3, r3, #3
 8009a4c:	1a9b      	subs	r3, r3, r2
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	440b      	add	r3, r1
 8009a52:	333f      	adds	r3, #63	; 0x3f
 8009a54:	2200      	movs	r2, #0
 8009a56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009a58:	7bfa      	ldrb	r2, [r7, #15]
 8009a5a:	6879      	ldr	r1, [r7, #4]
 8009a5c:	4613      	mov	r3, r2
 8009a5e:	00db      	lsls	r3, r3, #3
 8009a60:	1a9b      	subs	r3, r3, r2
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	440b      	add	r3, r1
 8009a66:	3344      	adds	r3, #68	; 0x44
 8009a68:	2200      	movs	r2, #0
 8009a6a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009a6c:	7bfa      	ldrb	r2, [r7, #15]
 8009a6e:	6879      	ldr	r1, [r7, #4]
 8009a70:	4613      	mov	r3, r2
 8009a72:	00db      	lsls	r3, r3, #3
 8009a74:	1a9b      	subs	r3, r3, r2
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	440b      	add	r3, r1
 8009a7a:	3348      	adds	r3, #72	; 0x48
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009a80:	7bfa      	ldrb	r2, [r7, #15]
 8009a82:	6879      	ldr	r1, [r7, #4]
 8009a84:	4613      	mov	r3, r2
 8009a86:	00db      	lsls	r3, r3, #3
 8009a88:	1a9b      	subs	r3, r3, r2
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	440b      	add	r3, r1
 8009a8e:	3350      	adds	r3, #80	; 0x50
 8009a90:	2200      	movs	r2, #0
 8009a92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a94:	7bfb      	ldrb	r3, [r7, #15]
 8009a96:	3301      	adds	r3, #1
 8009a98:	73fb      	strb	r3, [r7, #15]
 8009a9a:	7bfa      	ldrb	r2, [r7, #15]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	685b      	ldr	r3, [r3, #4]
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d3af      	bcc.n	8009a04 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	73fb      	strb	r3, [r7, #15]
 8009aa8:	e044      	b.n	8009b34 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009aaa:	7bfa      	ldrb	r2, [r7, #15]
 8009aac:	6879      	ldr	r1, [r7, #4]
 8009aae:	4613      	mov	r3, r2
 8009ab0:	00db      	lsls	r3, r3, #3
 8009ab2:	1a9b      	subs	r3, r3, r2
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	440b      	add	r3, r1
 8009ab8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8009abc:	2200      	movs	r2, #0
 8009abe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009ac0:	7bfa      	ldrb	r2, [r7, #15]
 8009ac2:	6879      	ldr	r1, [r7, #4]
 8009ac4:	4613      	mov	r3, r2
 8009ac6:	00db      	lsls	r3, r3, #3
 8009ac8:	1a9b      	subs	r3, r3, r2
 8009aca:	009b      	lsls	r3, r3, #2
 8009acc:	440b      	add	r3, r1
 8009ace:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8009ad2:	7bfa      	ldrb	r2, [r7, #15]
 8009ad4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009ad6:	7bfa      	ldrb	r2, [r7, #15]
 8009ad8:	6879      	ldr	r1, [r7, #4]
 8009ada:	4613      	mov	r3, r2
 8009adc:	00db      	lsls	r3, r3, #3
 8009ade:	1a9b      	subs	r3, r3, r2
 8009ae0:	009b      	lsls	r3, r3, #2
 8009ae2:	440b      	add	r3, r1
 8009ae4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009ae8:	2200      	movs	r2, #0
 8009aea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009aec:	7bfa      	ldrb	r2, [r7, #15]
 8009aee:	6879      	ldr	r1, [r7, #4]
 8009af0:	4613      	mov	r3, r2
 8009af2:	00db      	lsls	r3, r3, #3
 8009af4:	1a9b      	subs	r3, r3, r2
 8009af6:	009b      	lsls	r3, r3, #2
 8009af8:	440b      	add	r3, r1
 8009afa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009afe:	2200      	movs	r2, #0
 8009b00:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009b02:	7bfa      	ldrb	r2, [r7, #15]
 8009b04:	6879      	ldr	r1, [r7, #4]
 8009b06:	4613      	mov	r3, r2
 8009b08:	00db      	lsls	r3, r3, #3
 8009b0a:	1a9b      	subs	r3, r3, r2
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	440b      	add	r3, r1
 8009b10:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009b14:	2200      	movs	r2, #0
 8009b16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009b18:	7bfa      	ldrb	r2, [r7, #15]
 8009b1a:	6879      	ldr	r1, [r7, #4]
 8009b1c:	4613      	mov	r3, r2
 8009b1e:	00db      	lsls	r3, r3, #3
 8009b20:	1a9b      	subs	r3, r3, r2
 8009b22:	009b      	lsls	r3, r3, #2
 8009b24:	440b      	add	r3, r1
 8009b26:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009b2e:	7bfb      	ldrb	r3, [r7, #15]
 8009b30:	3301      	adds	r3, #1
 8009b32:	73fb      	strb	r3, [r7, #15]
 8009b34:	7bfa      	ldrb	r2, [r7, #15]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d3b5      	bcc.n	8009aaa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	603b      	str	r3, [r7, #0]
 8009b44:	687e      	ldr	r6, [r7, #4]
 8009b46:	466d      	mov	r5, sp
 8009b48:	f106 0410 	add.w	r4, r6, #16
 8009b4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009b4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009b50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009b52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009b54:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009b58:	e885 0003 	stmia.w	r5, {r0, r1}
 8009b5c:	1d33      	adds	r3, r6, #4
 8009b5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009b60:	6838      	ldr	r0, [r7, #0]
 8009b62:	f005 fdb1 	bl	800f6c8 <USB_DevInit>
 8009b66:	4603      	mov	r3, r0
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d005      	beq.n	8009b78 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2202      	movs	r2, #2
 8009b70:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009b74:	2301      	movs	r3, #1
 8009b76:	e014      	b.n	8009ba2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2201      	movs	r2, #1
 8009b84:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d102      	bne.n	8009b96 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f001 f8bf 	bl	800ad14 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f006 fe20 	bl	80107e0 <USB_DevDisconnect>

  return HAL_OK;
 8009ba0:	2300      	movs	r3, #0
}
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	3714      	adds	r7, #20
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009baa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b084      	sub	sp, #16
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d101      	bne.n	8009bc6 <HAL_PCD_Start+0x1c>
 8009bc2:	2302      	movs	r3, #2
 8009bc4:	e020      	b.n	8009c08 <HAL_PCD_Start+0x5e>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	2201      	movs	r2, #1
 8009bca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d109      	bne.n	8009bea <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d005      	beq.n	8009bea <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009be2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4618      	mov	r0, r3
 8009bf0:	f005 fcfc 	bl	800f5ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f006 fdd0 	bl	801079e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009c06:	2300      	movs	r3, #0
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3710      	adds	r7, #16
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009c10:	b590      	push	{r4, r7, lr}
 8009c12:	b08d      	sub	sp, #52	; 0x34
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c1e:	6a3b      	ldr	r3, [r7, #32]
 8009c20:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4618      	mov	r0, r3
 8009c28:	f006 fe8e 	bl	8010948 <USB_GetMode>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	f040 83ca 	bne.w	800a3c8 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f006 fdf2 	bl	8010822 <USB_ReadInterrupts>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	f000 83c0 	beq.w	800a3c6 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f006 fde9 	bl	8010822 <USB_ReadInterrupts>
 8009c50:	4603      	mov	r3, r0
 8009c52:	f003 0302 	and.w	r3, r3, #2
 8009c56:	2b02      	cmp	r3, #2
 8009c58:	d107      	bne.n	8009c6a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	695a      	ldr	r2, [r3, #20]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f002 0202 	and.w	r2, r2, #2
 8009c68:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f006 fdd7 	bl	8010822 <USB_ReadInterrupts>
 8009c74:	4603      	mov	r3, r0
 8009c76:	f003 0310 	and.w	r3, r3, #16
 8009c7a:	2b10      	cmp	r3, #16
 8009c7c:	d161      	bne.n	8009d42 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	699a      	ldr	r2, [r3, #24]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f022 0210 	bic.w	r2, r2, #16
 8009c8c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8009c8e:	6a3b      	ldr	r3, [r7, #32]
 8009c90:	6a1b      	ldr	r3, [r3, #32]
 8009c92:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8009c94:	69bb      	ldr	r3, [r7, #24]
 8009c96:	f003 020f 	and.w	r2, r3, #15
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	00db      	lsls	r3, r3, #3
 8009c9e:	1a9b      	subs	r3, r3, r2
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009ca6:	687a      	ldr	r2, [r7, #4]
 8009ca8:	4413      	add	r3, r2
 8009caa:	3304      	adds	r3, #4
 8009cac:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009cae:	69bb      	ldr	r3, [r7, #24]
 8009cb0:	0c5b      	lsrs	r3, r3, #17
 8009cb2:	f003 030f 	and.w	r3, r3, #15
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	d124      	bne.n	8009d04 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009cba:	69ba      	ldr	r2, [r7, #24]
 8009cbc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009cc0:	4013      	ands	r3, r2
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d035      	beq.n	8009d32 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009cca:	69bb      	ldr	r3, [r7, #24]
 8009ccc:	091b      	lsrs	r3, r3, #4
 8009cce:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009cd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	6a38      	ldr	r0, [r7, #32]
 8009cda:	f006 fc0e 	bl	80104fa <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	68da      	ldr	r2, [r3, #12]
 8009ce2:	69bb      	ldr	r3, [r7, #24]
 8009ce4:	091b      	lsrs	r3, r3, #4
 8009ce6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009cea:	441a      	add	r2, r3
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	699a      	ldr	r2, [r3, #24]
 8009cf4:	69bb      	ldr	r3, [r7, #24]
 8009cf6:	091b      	lsrs	r3, r3, #4
 8009cf8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009cfc:	441a      	add	r2, r3
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	619a      	str	r2, [r3, #24]
 8009d02:	e016      	b.n	8009d32 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8009d04:	69bb      	ldr	r3, [r7, #24]
 8009d06:	0c5b      	lsrs	r3, r3, #17
 8009d08:	f003 030f 	and.w	r3, r3, #15
 8009d0c:	2b06      	cmp	r3, #6
 8009d0e:	d110      	bne.n	8009d32 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009d16:	2208      	movs	r2, #8
 8009d18:	4619      	mov	r1, r3
 8009d1a:	6a38      	ldr	r0, [r7, #32]
 8009d1c:	f006 fbed 	bl	80104fa <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	699a      	ldr	r2, [r3, #24]
 8009d24:	69bb      	ldr	r3, [r7, #24]
 8009d26:	091b      	lsrs	r3, r3, #4
 8009d28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d2c:	441a      	add	r2, r3
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	699a      	ldr	r2, [r3, #24]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f042 0210 	orr.w	r2, r2, #16
 8009d40:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4618      	mov	r0, r3
 8009d48:	f006 fd6b 	bl	8010822 <USB_ReadInterrupts>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d52:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009d56:	d16e      	bne.n	8009e36 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4618      	mov	r0, r3
 8009d62:	f006 fd71 	bl	8010848 <USB_ReadDevAllOutEpInterrupt>
 8009d66:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009d68:	e062      	b.n	8009e30 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d6c:	f003 0301 	and.w	r3, r3, #1
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d057      	beq.n	8009e24 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d7a:	b2d2      	uxtb	r2, r2
 8009d7c:	4611      	mov	r1, r2
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f006 fd96 	bl	80108b0 <USB_ReadDevOutEPInterrupt>
 8009d84:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	f003 0301 	and.w	r3, r3, #1
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d00c      	beq.n	8009daa <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d92:	015a      	lsls	r2, r3, #5
 8009d94:	69fb      	ldr	r3, [r7, #28]
 8009d96:	4413      	add	r3, r2
 8009d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d9c:	461a      	mov	r2, r3
 8009d9e:	2301      	movs	r3, #1
 8009da0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009da2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 fe0b 	bl	800a9c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	f003 0308 	and.w	r3, r3, #8
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d00c      	beq.n	8009dce <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db6:	015a      	lsls	r2, r3, #5
 8009db8:	69fb      	ldr	r3, [r7, #28]
 8009dba:	4413      	add	r3, r2
 8009dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dc0:	461a      	mov	r2, r3
 8009dc2:	2308      	movs	r3, #8
 8009dc4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009dc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 ff05 	bl	800abd8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	f003 0310 	and.w	r3, r3, #16
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d008      	beq.n	8009dea <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dda:	015a      	lsls	r2, r3, #5
 8009ddc:	69fb      	ldr	r3, [r7, #28]
 8009dde:	4413      	add	r3, r2
 8009de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009de4:	461a      	mov	r2, r3
 8009de6:	2310      	movs	r3, #16
 8009de8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	f003 0320 	and.w	r3, r3, #32
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d008      	beq.n	8009e06 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df6:	015a      	lsls	r2, r3, #5
 8009df8:	69fb      	ldr	r3, [r7, #28]
 8009dfa:	4413      	add	r3, r2
 8009dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e00:	461a      	mov	r2, r3
 8009e02:	2320      	movs	r3, #32
 8009e04:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d009      	beq.n	8009e24 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e12:	015a      	lsls	r2, r3, #5
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	4413      	add	r3, r2
 8009e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009e22:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e26:	3301      	adds	r3, #1
 8009e28:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e2c:	085b      	lsrs	r3, r3, #1
 8009e2e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d199      	bne.n	8009d6a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f006 fcf1 	bl	8010822 <USB_ReadInterrupts>
 8009e40:	4603      	mov	r3, r0
 8009e42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009e4a:	f040 80c0 	bne.w	8009fce <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4618      	mov	r0, r3
 8009e54:	f006 fd12 	bl	801087c <USB_ReadDevAllInEpInterrupt>
 8009e58:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009e5e:	e0b2      	b.n	8009fc6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e62:	f003 0301 	and.w	r3, r3, #1
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	f000 80a7 	beq.w	8009fba <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e72:	b2d2      	uxtb	r2, r2
 8009e74:	4611      	mov	r1, r2
 8009e76:	4618      	mov	r0, r3
 8009e78:	f006 fd38 	bl	80108ec <USB_ReadDevInEPInterrupt>
 8009e7c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	f003 0301 	and.w	r3, r3, #1
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d057      	beq.n	8009f38 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8a:	f003 030f 	and.w	r3, r3, #15
 8009e8e:	2201      	movs	r2, #1
 8009e90:	fa02 f303 	lsl.w	r3, r2, r3
 8009e94:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	43db      	mvns	r3, r3
 8009ea2:	69f9      	ldr	r1, [r7, #28]
 8009ea4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ea8:	4013      	ands	r3, r2
 8009eaa:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eae:	015a      	lsls	r2, r3, #5
 8009eb0:	69fb      	ldr	r3, [r7, #28]
 8009eb2:	4413      	add	r3, r2
 8009eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eb8:	461a      	mov	r2, r3
 8009eba:	2301      	movs	r3, #1
 8009ebc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	691b      	ldr	r3, [r3, #16]
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	d132      	bne.n	8009f2c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009ec6:	6879      	ldr	r1, [r7, #4]
 8009ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eca:	4613      	mov	r3, r2
 8009ecc:	00db      	lsls	r3, r3, #3
 8009ece:	1a9b      	subs	r3, r3, r2
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	440b      	add	r3, r1
 8009ed4:	3348      	adds	r3, #72	; 0x48
 8009ed6:	6819      	ldr	r1, [r3, #0]
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009edc:	4613      	mov	r3, r2
 8009ede:	00db      	lsls	r3, r3, #3
 8009ee0:	1a9b      	subs	r3, r3, r2
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	4403      	add	r3, r0
 8009ee6:	3344      	adds	r3, #68	; 0x44
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4419      	add	r1, r3
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ef0:	4613      	mov	r3, r2
 8009ef2:	00db      	lsls	r3, r3, #3
 8009ef4:	1a9b      	subs	r3, r3, r2
 8009ef6:	009b      	lsls	r3, r3, #2
 8009ef8:	4403      	add	r3, r0
 8009efa:	3348      	adds	r3, #72	; 0x48
 8009efc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d113      	bne.n	8009f2c <HAL_PCD_IRQHandler+0x31c>
 8009f04:	6879      	ldr	r1, [r7, #4]
 8009f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f08:	4613      	mov	r3, r2
 8009f0a:	00db      	lsls	r3, r3, #3
 8009f0c:	1a9b      	subs	r3, r3, r2
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	440b      	add	r3, r1
 8009f12:	3350      	adds	r3, #80	; 0x50
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d108      	bne.n	8009f2c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6818      	ldr	r0, [r3, #0]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009f24:	461a      	mov	r2, r3
 8009f26:	2101      	movs	r1, #1
 8009f28:	f006 fd40 	bl	80109ac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2e:	b2db      	uxtb	r3, r3
 8009f30:	4619      	mov	r1, r3
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f00d f913 	bl	801715e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	f003 0308 	and.w	r3, r3, #8
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d008      	beq.n	8009f54 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f44:	015a      	lsls	r2, r3, #5
 8009f46:	69fb      	ldr	r3, [r7, #28]
 8009f48:	4413      	add	r3, r2
 8009f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f4e:	461a      	mov	r2, r3
 8009f50:	2308      	movs	r3, #8
 8009f52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	f003 0310 	and.w	r3, r3, #16
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d008      	beq.n	8009f70 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f60:	015a      	lsls	r2, r3, #5
 8009f62:	69fb      	ldr	r3, [r7, #28]
 8009f64:	4413      	add	r3, r2
 8009f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	2310      	movs	r3, #16
 8009f6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d008      	beq.n	8009f8c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7c:	015a      	lsls	r2, r3, #5
 8009f7e:	69fb      	ldr	r3, [r7, #28]
 8009f80:	4413      	add	r3, r2
 8009f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f86:	461a      	mov	r2, r3
 8009f88:	2340      	movs	r3, #64	; 0x40
 8009f8a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	f003 0302 	and.w	r3, r3, #2
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d008      	beq.n	8009fa8 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f98:	015a      	lsls	r2, r3, #5
 8009f9a:	69fb      	ldr	r3, [r7, #28]
 8009f9c:	4413      	add	r3, r2
 8009f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fa2:	461a      	mov	r2, r3
 8009fa4:	2302      	movs	r3, #2
 8009fa6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d003      	beq.n	8009fba <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009fb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f000 fc75 	bl	800a8a4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fbc:	3301      	adds	r3, #1
 8009fbe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc2:	085b      	lsrs	r3, r3, #1
 8009fc4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	f47f af49 	bne.w	8009e60 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f006 fc25 	bl	8010822 <USB_ReadInterrupts>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009fde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009fe2:	d122      	bne.n	800a02a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009fe4:	69fb      	ldr	r3, [r7, #28]
 8009fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	69fa      	ldr	r2, [r7, #28]
 8009fee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ff2:	f023 0301 	bic.w	r3, r3, #1
 8009ff6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d108      	bne.n	800a014 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a00a:	2100      	movs	r1, #0
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f00d fb15 	bl	801763c <HAL_PCDEx_LPM_Callback>
 800a012:	e002      	b.n	800a01a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f00d f919 	bl	801724c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	695a      	ldr	r2, [r3, #20]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800a028:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4618      	mov	r0, r3
 800a030:	f006 fbf7 	bl	8010822 <USB_ReadInterrupts>
 800a034:	4603      	mov	r3, r0
 800a036:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a03a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a03e:	d112      	bne.n	800a066 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a046:	689b      	ldr	r3, [r3, #8]
 800a048:	f003 0301 	and.w	r3, r3, #1
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d102      	bne.n	800a056 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f00d f8d5 	bl	8017200 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	695a      	ldr	r2, [r3, #20]
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800a064:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4618      	mov	r0, r3
 800a06c:	f006 fbd9 	bl	8010822 <USB_ReadInterrupts>
 800a070:	4603      	mov	r3, r0
 800a072:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a076:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a07a:	d121      	bne.n	800a0c0 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	695a      	ldr	r2, [r3, #20]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800a08a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800a092:	2b00      	cmp	r3, #0
 800a094:	d111      	bne.n	800a0ba <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2201      	movs	r2, #1
 800a09a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0a4:	089b      	lsrs	r3, r3, #2
 800a0a6:	f003 020f 	and.w	r2, r3, #15
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a0b0:	2101      	movs	r1, #1
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f00d fac2 	bl	801763c <HAL_PCDEx_LPM_Callback>
 800a0b8:	e002      	b.n	800a0c0 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f00d f8a0 	bl	8017200 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f006 fbac 	bl	8010822 <USB_ReadInterrupts>
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a0d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0d4:	f040 80c7 	bne.w	800a266 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a0d8:	69fb      	ldr	r3, [r7, #28]
 800a0da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	69fa      	ldr	r2, [r7, #28]
 800a0e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0e6:	f023 0301 	bic.w	r3, r3, #1
 800a0ea:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2110      	movs	r1, #16
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f005 fc46 	bl	800f984 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a0fc:	e056      	b.n	800a1ac <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a100:	015a      	lsls	r2, r3, #5
 800a102:	69fb      	ldr	r3, [r7, #28]
 800a104:	4413      	add	r3, r2
 800a106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a10a:	461a      	mov	r2, r3
 800a10c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a110:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a114:	015a      	lsls	r2, r3, #5
 800a116:	69fb      	ldr	r3, [r7, #28]
 800a118:	4413      	add	r3, r2
 800a11a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a122:	0151      	lsls	r1, r2, #5
 800a124:	69fa      	ldr	r2, [r7, #28]
 800a126:	440a      	add	r2, r1
 800a128:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a12c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a130:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a134:	015a      	lsls	r2, r3, #5
 800a136:	69fb      	ldr	r3, [r7, #28]
 800a138:	4413      	add	r3, r2
 800a13a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a142:	0151      	lsls	r1, r2, #5
 800a144:	69fa      	ldr	r2, [r7, #28]
 800a146:	440a      	add	r2, r1
 800a148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a14c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a150:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a154:	015a      	lsls	r2, r3, #5
 800a156:	69fb      	ldr	r3, [r7, #28]
 800a158:	4413      	add	r3, r2
 800a15a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a15e:	461a      	mov	r2, r3
 800a160:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a164:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a168:	015a      	lsls	r2, r3, #5
 800a16a:	69fb      	ldr	r3, [r7, #28]
 800a16c:	4413      	add	r3, r2
 800a16e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a176:	0151      	lsls	r1, r2, #5
 800a178:	69fa      	ldr	r2, [r7, #28]
 800a17a:	440a      	add	r2, r1
 800a17c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a180:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a184:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a188:	015a      	lsls	r2, r3, #5
 800a18a:	69fb      	ldr	r3, [r7, #28]
 800a18c:	4413      	add	r3, r2
 800a18e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a196:	0151      	lsls	r1, r2, #5
 800a198:	69fa      	ldr	r2, [r7, #28]
 800a19a:	440a      	add	r2, r1
 800a19c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a1a4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d3a3      	bcc.n	800a0fe <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a1b6:	69fb      	ldr	r3, [r7, #28]
 800a1b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1bc:	69db      	ldr	r3, [r3, #28]
 800a1be:	69fa      	ldr	r2, [r7, #28]
 800a1c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1c4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a1c8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d016      	beq.n	800a200 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a1d2:	69fb      	ldr	r3, [r7, #28]
 800a1d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a1dc:	69fa      	ldr	r2, [r7, #28]
 800a1de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1e2:	f043 030b 	orr.w	r3, r3, #11
 800a1e6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1f2:	69fa      	ldr	r2, [r7, #28]
 800a1f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1f8:	f043 030b 	orr.w	r3, r3, #11
 800a1fc:	6453      	str	r3, [r2, #68]	; 0x44
 800a1fe:	e015      	b.n	800a22c <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a200:	69fb      	ldr	r3, [r7, #28]
 800a202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a206:	695b      	ldr	r3, [r3, #20]
 800a208:	69fa      	ldr	r2, [r7, #28]
 800a20a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a20e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a212:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800a216:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a218:	69fb      	ldr	r3, [r7, #28]
 800a21a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a21e:	691b      	ldr	r3, [r3, #16]
 800a220:	69fa      	ldr	r2, [r7, #28]
 800a222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a226:	f043 030b 	orr.w	r3, r3, #11
 800a22a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a22c:	69fb      	ldr	r3, [r7, #28]
 800a22e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	69fa      	ldr	r2, [r7, #28]
 800a236:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a23a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a23e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6818      	ldr	r0, [r3, #0]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	691b      	ldr	r3, [r3, #16]
 800a248:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a250:	461a      	mov	r2, r3
 800a252:	f006 fbab 	bl	80109ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	695a      	ldr	r2, [r3, #20]
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a264:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4618      	mov	r0, r3
 800a26c:	f006 fad9 	bl	8010822 <USB_ReadInterrupts>
 800a270:	4603      	mov	r3, r0
 800a272:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a27a:	d124      	bne.n	800a2c6 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4618      	mov	r0, r3
 800a282:	f006 fb6f 	bl	8010964 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4618      	mov	r0, r3
 800a28c:	f005 fbd7 	bl	800fa3e <USB_GetDevSpeed>
 800a290:	4603      	mov	r3, r0
 800a292:	461a      	mov	r2, r3
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681c      	ldr	r4, [r3, #0]
 800a29c:	f000 fe94 	bl	800afc8 <HAL_RCC_GetHCLKFreq>
 800a2a0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	461a      	mov	r2, r3
 800a2aa:	4620      	mov	r0, r4
 800a2ac:	f005 f8fc 	bl	800f4a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f00c ff7c 	bl	80171ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	695a      	ldr	r2, [r3, #20]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a2c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f006 faa9 	bl	8010822 <USB_ReadInterrupts>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	f003 0308 	and.w	r3, r3, #8
 800a2d6:	2b08      	cmp	r3, #8
 800a2d8:	d10a      	bne.n	800a2f0 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f00c ff59 	bl	8017192 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	695a      	ldr	r2, [r3, #20]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f002 0208 	and.w	r2, r2, #8
 800a2ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f006 fa94 	bl	8010822 <USB_ReadInterrupts>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a300:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a304:	d10f      	bne.n	800a326 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a306:	2300      	movs	r3, #0
 800a308:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30c:	b2db      	uxtb	r3, r3
 800a30e:	4619      	mov	r1, r3
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f00c ffbb 	bl	801728c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	695a      	ldr	r2, [r3, #20]
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a324:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4618      	mov	r0, r3
 800a32c:	f006 fa79 	bl	8010822 <USB_ReadInterrupts>
 800a330:	4603      	mov	r3, r0
 800a332:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a336:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a33a:	d10f      	bne.n	800a35c <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a33c:	2300      	movs	r3, #0
 800a33e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a342:	b2db      	uxtb	r3, r3
 800a344:	4619      	mov	r1, r3
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f00c ff8e 	bl	8017268 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	695a      	ldr	r2, [r3, #20]
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a35a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4618      	mov	r0, r3
 800a362:	f006 fa5e 	bl	8010822 <USB_ReadInterrupts>
 800a366:	4603      	mov	r3, r0
 800a368:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a36c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a370:	d10a      	bne.n	800a388 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f00c ff9c 	bl	80172b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	695a      	ldr	r2, [r3, #20]
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a386:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4618      	mov	r0, r3
 800a38e:	f006 fa48 	bl	8010822 <USB_ReadInterrupts>
 800a392:	4603      	mov	r3, r0
 800a394:	f003 0304 	and.w	r3, r3, #4
 800a398:	2b04      	cmp	r3, #4
 800a39a:	d115      	bne.n	800a3c8 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a3a4:	69bb      	ldr	r3, [r7, #24]
 800a3a6:	f003 0304 	and.w	r3, r3, #4
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d002      	beq.n	800a3b4 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f00c ff8c 	bl	80172cc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	6859      	ldr	r1, [r3, #4]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	69ba      	ldr	r2, [r7, #24]
 800a3c0:	430a      	orrs	r2, r1
 800a3c2:	605a      	str	r2, [r3, #4]
 800a3c4:	e000      	b.n	800a3c8 <HAL_PCD_IRQHandler+0x7b8>
      return;
 800a3c6:	bf00      	nop
    }
  }
}
 800a3c8:	3734      	adds	r7, #52	; 0x34
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd90      	pop	{r4, r7, pc}

0800a3ce <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a3ce:	b580      	push	{r7, lr}
 800a3d0:	b082      	sub	sp, #8
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d101      	bne.n	800a3e8 <HAL_PCD_SetAddress+0x1a>
 800a3e4:	2302      	movs	r3, #2
 800a3e6:	e013      	b.n	800a410 <HAL_PCD_SetAddress+0x42>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	78fa      	ldrb	r2, [r7, #3]
 800a3f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	78fa      	ldrb	r2, [r7, #3]
 800a3fe:	4611      	mov	r1, r2
 800a400:	4618      	mov	r0, r3
 800a402:	f006 f9a6 	bl	8010752 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a40e:	2300      	movs	r3, #0
}
 800a410:	4618      	mov	r0, r3
 800a412:	3708      	adds	r7, #8
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	4608      	mov	r0, r1
 800a422:	4611      	mov	r1, r2
 800a424:	461a      	mov	r2, r3
 800a426:	4603      	mov	r3, r0
 800a428:	70fb      	strb	r3, [r7, #3]
 800a42a:	460b      	mov	r3, r1
 800a42c:	803b      	strh	r3, [r7, #0]
 800a42e:	4613      	mov	r3, r2
 800a430:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a432:	2300      	movs	r3, #0
 800a434:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a436:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	da0f      	bge.n	800a45e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a43e:	78fb      	ldrb	r3, [r7, #3]
 800a440:	f003 020f 	and.w	r2, r3, #15
 800a444:	4613      	mov	r3, r2
 800a446:	00db      	lsls	r3, r3, #3
 800a448:	1a9b      	subs	r3, r3, r2
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	3338      	adds	r3, #56	; 0x38
 800a44e:	687a      	ldr	r2, [r7, #4]
 800a450:	4413      	add	r3, r2
 800a452:	3304      	adds	r3, #4
 800a454:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2201      	movs	r2, #1
 800a45a:	705a      	strb	r2, [r3, #1]
 800a45c:	e00f      	b.n	800a47e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a45e:	78fb      	ldrb	r3, [r7, #3]
 800a460:	f003 020f 	and.w	r2, r3, #15
 800a464:	4613      	mov	r3, r2
 800a466:	00db      	lsls	r3, r3, #3
 800a468:	1a9b      	subs	r3, r3, r2
 800a46a:	009b      	lsls	r3, r3, #2
 800a46c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a470:	687a      	ldr	r2, [r7, #4]
 800a472:	4413      	add	r3, r2
 800a474:	3304      	adds	r3, #4
 800a476:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2200      	movs	r2, #0
 800a47c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a47e:	78fb      	ldrb	r3, [r7, #3]
 800a480:	f003 030f 	and.w	r3, r3, #15
 800a484:	b2da      	uxtb	r2, r3
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a48a:	883a      	ldrh	r2, [r7, #0]
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	78ba      	ldrb	r2, [r7, #2]
 800a494:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	785b      	ldrb	r3, [r3, #1]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d004      	beq.n	800a4a8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	b29a      	uxth	r2, r3
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a4a8:	78bb      	ldrb	r3, [r7, #2]
 800a4aa:	2b02      	cmp	r3, #2
 800a4ac:	d102      	bne.n	800a4b4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d101      	bne.n	800a4c2 <HAL_PCD_EP_Open+0xaa>
 800a4be:	2302      	movs	r3, #2
 800a4c0:	e00e      	b.n	800a4e0 <HAL_PCD_EP_Open+0xc8>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	68f9      	ldr	r1, [r7, #12]
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f005 fad9 	bl	800fa88 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800a4de:	7afb      	ldrb	r3, [r7, #11]
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3710      	adds	r7, #16
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b084      	sub	sp, #16
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a4f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	da0f      	bge.n	800a51c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a4fc:	78fb      	ldrb	r3, [r7, #3]
 800a4fe:	f003 020f 	and.w	r2, r3, #15
 800a502:	4613      	mov	r3, r2
 800a504:	00db      	lsls	r3, r3, #3
 800a506:	1a9b      	subs	r3, r3, r2
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	3338      	adds	r3, #56	; 0x38
 800a50c:	687a      	ldr	r2, [r7, #4]
 800a50e:	4413      	add	r3, r2
 800a510:	3304      	adds	r3, #4
 800a512:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	2201      	movs	r2, #1
 800a518:	705a      	strb	r2, [r3, #1]
 800a51a:	e00f      	b.n	800a53c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a51c:	78fb      	ldrb	r3, [r7, #3]
 800a51e:	f003 020f 	and.w	r2, r3, #15
 800a522:	4613      	mov	r3, r2
 800a524:	00db      	lsls	r3, r3, #3
 800a526:	1a9b      	subs	r3, r3, r2
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	4413      	add	r3, r2
 800a532:	3304      	adds	r3, #4
 800a534:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2200      	movs	r2, #0
 800a53a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a53c:	78fb      	ldrb	r3, [r7, #3]
 800a53e:	f003 030f 	and.w	r3, r3, #15
 800a542:	b2da      	uxtb	r2, r3
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a54e:	2b01      	cmp	r3, #1
 800a550:	d101      	bne.n	800a556 <HAL_PCD_EP_Close+0x6e>
 800a552:	2302      	movs	r3, #2
 800a554:	e00e      	b.n	800a574 <HAL_PCD_EP_Close+0x8c>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2201      	movs	r2, #1
 800a55a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	68f9      	ldr	r1, [r7, #12]
 800a564:	4618      	mov	r0, r3
 800a566:	f005 fb17 	bl	800fb98 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	2200      	movs	r2, #0
 800a56e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800a572:	2300      	movs	r3, #0
}
 800a574:	4618      	mov	r0, r3
 800a576:	3710      	adds	r7, #16
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b086      	sub	sp, #24
 800a580:	af00      	add	r7, sp, #0
 800a582:	60f8      	str	r0, [r7, #12]
 800a584:	607a      	str	r2, [r7, #4]
 800a586:	603b      	str	r3, [r7, #0]
 800a588:	460b      	mov	r3, r1
 800a58a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a58c:	7afb      	ldrb	r3, [r7, #11]
 800a58e:	f003 020f 	and.w	r2, r3, #15
 800a592:	4613      	mov	r3, r2
 800a594:	00db      	lsls	r3, r3, #3
 800a596:	1a9b      	subs	r3, r3, r2
 800a598:	009b      	lsls	r3, r3, #2
 800a59a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a59e:	68fa      	ldr	r2, [r7, #12]
 800a5a0:	4413      	add	r3, r2
 800a5a2:	3304      	adds	r3, #4
 800a5a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	687a      	ldr	r2, [r7, #4]
 800a5aa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a5ac:	697b      	ldr	r3, [r7, #20]
 800a5ae:	683a      	ldr	r2, [r7, #0]
 800a5b0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a5be:	7afb      	ldrb	r3, [r7, #11]
 800a5c0:	f003 030f 	and.w	r3, r3, #15
 800a5c4:	b2da      	uxtb	r2, r3
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	691b      	ldr	r3, [r3, #16]
 800a5ce:	2b01      	cmp	r3, #1
 800a5d0:	d102      	bne.n	800a5d8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a5d8:	7afb      	ldrb	r3, [r7, #11]
 800a5da:	f003 030f 	and.w	r3, r3, #15
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d109      	bne.n	800a5f6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	6818      	ldr	r0, [r3, #0]
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	691b      	ldr	r3, [r3, #16]
 800a5ea:	b2db      	uxtb	r3, r3
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	6979      	ldr	r1, [r7, #20]
 800a5f0:	f005 fdf2 	bl	80101d8 <USB_EP0StartXfer>
 800a5f4:	e008      	b.n	800a608 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	6818      	ldr	r0, [r3, #0]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	691b      	ldr	r3, [r3, #16]
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	461a      	mov	r2, r3
 800a602:	6979      	ldr	r1, [r7, #20]
 800a604:	f005 fba4 	bl	800fd50 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3718      	adds	r7, #24
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}

0800a612 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a612:	b480      	push	{r7}
 800a614:	b083      	sub	sp, #12
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
 800a61a:	460b      	mov	r3, r1
 800a61c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a61e:	78fb      	ldrb	r3, [r7, #3]
 800a620:	f003 020f 	and.w	r2, r3, #15
 800a624:	6879      	ldr	r1, [r7, #4]
 800a626:	4613      	mov	r3, r2
 800a628:	00db      	lsls	r3, r3, #3
 800a62a:	1a9b      	subs	r3, r3, r2
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	440b      	add	r3, r1
 800a630:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a634:	681b      	ldr	r3, [r3, #0]
}
 800a636:	4618      	mov	r0, r3
 800a638:	370c      	adds	r7, #12
 800a63a:	46bd      	mov	sp, r7
 800a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a640:	4770      	bx	lr

0800a642 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a642:	b580      	push	{r7, lr}
 800a644:	b086      	sub	sp, #24
 800a646:	af00      	add	r7, sp, #0
 800a648:	60f8      	str	r0, [r7, #12]
 800a64a:	607a      	str	r2, [r7, #4]
 800a64c:	603b      	str	r3, [r7, #0]
 800a64e:	460b      	mov	r3, r1
 800a650:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a652:	7afb      	ldrb	r3, [r7, #11]
 800a654:	f003 020f 	and.w	r2, r3, #15
 800a658:	4613      	mov	r3, r2
 800a65a:	00db      	lsls	r3, r3, #3
 800a65c:	1a9b      	subs	r3, r3, r2
 800a65e:	009b      	lsls	r3, r3, #2
 800a660:	3338      	adds	r3, #56	; 0x38
 800a662:	68fa      	ldr	r2, [r7, #12]
 800a664:	4413      	add	r3, r2
 800a666:	3304      	adds	r3, #4
 800a668:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	687a      	ldr	r2, [r7, #4]
 800a66e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	683a      	ldr	r2, [r7, #0]
 800a674:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	2200      	movs	r2, #0
 800a67a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	2201      	movs	r2, #1
 800a680:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a682:	7afb      	ldrb	r3, [r7, #11]
 800a684:	f003 030f 	and.w	r3, r3, #15
 800a688:	b2da      	uxtb	r2, r3
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	691b      	ldr	r3, [r3, #16]
 800a692:	2b01      	cmp	r3, #1
 800a694:	d102      	bne.n	800a69c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a696:	687a      	ldr	r2, [r7, #4]
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a69c:	7afb      	ldrb	r3, [r7, #11]
 800a69e:	f003 030f 	and.w	r3, r3, #15
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d109      	bne.n	800a6ba <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	6818      	ldr	r0, [r3, #0]
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	691b      	ldr	r3, [r3, #16]
 800a6ae:	b2db      	uxtb	r3, r3
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	6979      	ldr	r1, [r7, #20]
 800a6b4:	f005 fd90 	bl	80101d8 <USB_EP0StartXfer>
 800a6b8:	e008      	b.n	800a6cc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	6818      	ldr	r0, [r3, #0]
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	691b      	ldr	r3, [r3, #16]
 800a6c2:	b2db      	uxtb	r3, r3
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	6979      	ldr	r1, [r7, #20]
 800a6c8:	f005 fb42 	bl	800fd50 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a6cc:	2300      	movs	r3, #0
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3718      	adds	r7, #24
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b084      	sub	sp, #16
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
 800a6de:	460b      	mov	r3, r1
 800a6e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a6e2:	78fb      	ldrb	r3, [r7, #3]
 800a6e4:	f003 020f 	and.w	r2, r3, #15
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d901      	bls.n	800a6f4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	e050      	b.n	800a796 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a6f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	da0f      	bge.n	800a71c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a6fc:	78fb      	ldrb	r3, [r7, #3]
 800a6fe:	f003 020f 	and.w	r2, r3, #15
 800a702:	4613      	mov	r3, r2
 800a704:	00db      	lsls	r3, r3, #3
 800a706:	1a9b      	subs	r3, r3, r2
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	3338      	adds	r3, #56	; 0x38
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	4413      	add	r3, r2
 800a710:	3304      	adds	r3, #4
 800a712:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2201      	movs	r2, #1
 800a718:	705a      	strb	r2, [r3, #1]
 800a71a:	e00d      	b.n	800a738 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a71c:	78fa      	ldrb	r2, [r7, #3]
 800a71e:	4613      	mov	r3, r2
 800a720:	00db      	lsls	r3, r3, #3
 800a722:	1a9b      	subs	r3, r3, r2
 800a724:	009b      	lsls	r3, r3, #2
 800a726:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a72a:	687a      	ldr	r2, [r7, #4]
 800a72c:	4413      	add	r3, r2
 800a72e:	3304      	adds	r3, #4
 800a730:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2200      	movs	r2, #0
 800a736:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2201      	movs	r2, #1
 800a73c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a73e:	78fb      	ldrb	r3, [r7, #3]
 800a740:	f003 030f 	and.w	r3, r3, #15
 800a744:	b2da      	uxtb	r2, r3
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a750:	2b01      	cmp	r3, #1
 800a752:	d101      	bne.n	800a758 <HAL_PCD_EP_SetStall+0x82>
 800a754:	2302      	movs	r3, #2
 800a756:	e01e      	b.n	800a796 <HAL_PCD_EP_SetStall+0xc0>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2201      	movs	r2, #1
 800a75c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	68f9      	ldr	r1, [r7, #12]
 800a766:	4618      	mov	r0, r3
 800a768:	f005 ff1f 	bl	80105aa <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a76c:	78fb      	ldrb	r3, [r7, #3]
 800a76e:	f003 030f 	and.w	r3, r3, #15
 800a772:	2b00      	cmp	r3, #0
 800a774:	d10a      	bne.n	800a78c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6818      	ldr	r0, [r3, #0]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	691b      	ldr	r3, [r3, #16]
 800a77e:	b2d9      	uxtb	r1, r3
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a786:	461a      	mov	r2, r3
 800a788:	f006 f910 	bl	80109ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2200      	movs	r2, #0
 800a790:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a794:	2300      	movs	r3, #0
}
 800a796:	4618      	mov	r0, r3
 800a798:	3710      	adds	r7, #16
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}

0800a79e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a79e:	b580      	push	{r7, lr}
 800a7a0:	b084      	sub	sp, #16
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	6078      	str	r0, [r7, #4]
 800a7a6:	460b      	mov	r3, r1
 800a7a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a7aa:	78fb      	ldrb	r3, [r7, #3]
 800a7ac:	f003 020f 	and.w	r2, r3, #15
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	685b      	ldr	r3, [r3, #4]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d901      	bls.n	800a7bc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	e042      	b.n	800a842 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a7bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	da0f      	bge.n	800a7e4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a7c4:	78fb      	ldrb	r3, [r7, #3]
 800a7c6:	f003 020f 	and.w	r2, r3, #15
 800a7ca:	4613      	mov	r3, r2
 800a7cc:	00db      	lsls	r3, r3, #3
 800a7ce:	1a9b      	subs	r3, r3, r2
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	3338      	adds	r3, #56	; 0x38
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	4413      	add	r3, r2
 800a7d8:	3304      	adds	r3, #4
 800a7da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	705a      	strb	r2, [r3, #1]
 800a7e2:	e00f      	b.n	800a804 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a7e4:	78fb      	ldrb	r3, [r7, #3]
 800a7e6:	f003 020f 	and.w	r2, r3, #15
 800a7ea:	4613      	mov	r3, r2
 800a7ec:	00db      	lsls	r3, r3, #3
 800a7ee:	1a9b      	subs	r3, r3, r2
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	4413      	add	r3, r2
 800a7fa:	3304      	adds	r3, #4
 800a7fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2200      	movs	r2, #0
 800a802:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2200      	movs	r2, #0
 800a808:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a80a:	78fb      	ldrb	r3, [r7, #3]
 800a80c:	f003 030f 	and.w	r3, r3, #15
 800a810:	b2da      	uxtb	r2, r3
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a81c:	2b01      	cmp	r3, #1
 800a81e:	d101      	bne.n	800a824 <HAL_PCD_EP_ClrStall+0x86>
 800a820:	2302      	movs	r3, #2
 800a822:	e00e      	b.n	800a842 <HAL_PCD_EP_ClrStall+0xa4>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2201      	movs	r2, #1
 800a828:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	68f9      	ldr	r1, [r7, #12]
 800a832:	4618      	mov	r0, r3
 800a834:	f005 ff27 	bl	8010686 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a840:	2300      	movs	r3, #0
}
 800a842:	4618      	mov	r0, r3
 800a844:	3710      	adds	r7, #16
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}

0800a84a <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a84a:	b580      	push	{r7, lr}
 800a84c:	b082      	sub	sp, #8
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
 800a852:	460b      	mov	r3, r1
 800a854:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d101      	bne.n	800a864 <HAL_PCD_EP_Flush+0x1a>
 800a860:	2302      	movs	r3, #2
 800a862:	e01b      	b.n	800a89c <HAL_PCD_EP_Flush+0x52>
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2201      	movs	r2, #1
 800a868:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 800a86c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a870:	2b00      	cmp	r3, #0
 800a872:	da09      	bge.n	800a888 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	78fb      	ldrb	r3, [r7, #3]
 800a87a:	f003 030f 	and.w	r3, r3, #15
 800a87e:	4619      	mov	r1, r3
 800a880:	4610      	mov	r0, r2
 800a882:	f005 f87f 	bl	800f984 <USB_FlushTxFifo>
 800a886:	e004      	b.n	800a892 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4618      	mov	r0, r3
 800a88e:	f005 f89d 	bl	800f9cc <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2200      	movs	r2, #0
 800a896:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a89a:	2300      	movs	r3, #0
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3708      	adds	r7, #8
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b08a      	sub	sp, #40	; 0x28
 800a8a8:	af02      	add	r7, sp, #8
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a8b8:	683a      	ldr	r2, [r7, #0]
 800a8ba:	4613      	mov	r3, r2
 800a8bc:	00db      	lsls	r3, r3, #3
 800a8be:	1a9b      	subs	r3, r3, r2
 800a8c0:	009b      	lsls	r3, r3, #2
 800a8c2:	3338      	adds	r3, #56	; 0x38
 800a8c4:	687a      	ldr	r2, [r7, #4]
 800a8c6:	4413      	add	r3, r2
 800a8c8:	3304      	adds	r3, #4
 800a8ca:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	699a      	ldr	r2, [r3, #24]
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	695b      	ldr	r3, [r3, #20]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d901      	bls.n	800a8dc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a8d8:	2301      	movs	r3, #1
 800a8da:	e06c      	b.n	800a9b6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	695a      	ldr	r2, [r3, #20]
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	699b      	ldr	r3, [r3, #24]
 800a8e4:	1ad3      	subs	r3, r2, r3
 800a8e6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	689b      	ldr	r3, [r3, #8]
 800a8ec:	69fa      	ldr	r2, [r7, #28]
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d902      	bls.n	800a8f8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	689b      	ldr	r3, [r3, #8]
 800a8f6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a8f8:	69fb      	ldr	r3, [r7, #28]
 800a8fa:	3303      	adds	r3, #3
 800a8fc:	089b      	lsrs	r3, r3, #2
 800a8fe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a900:	e02b      	b.n	800a95a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	695a      	ldr	r2, [r3, #20]
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	699b      	ldr	r3, [r3, #24]
 800a90a:	1ad3      	subs	r3, r2, r3
 800a90c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	69fa      	ldr	r2, [r7, #28]
 800a914:	429a      	cmp	r2, r3
 800a916:	d902      	bls.n	800a91e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	689b      	ldr	r3, [r3, #8]
 800a91c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a91e:	69fb      	ldr	r3, [r7, #28]
 800a920:	3303      	adds	r3, #3
 800a922:	089b      	lsrs	r3, r3, #2
 800a924:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	68d9      	ldr	r1, [r3, #12]
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	b2da      	uxtb	r2, r3
 800a92e:	69fb      	ldr	r3, [r7, #28]
 800a930:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a936:	b2db      	uxtb	r3, r3
 800a938:	9300      	str	r3, [sp, #0]
 800a93a:	4603      	mov	r3, r0
 800a93c:	6978      	ldr	r0, [r7, #20]
 800a93e:	f005 fd9e 	bl	801047e <USB_WritePacket>

    ep->xfer_buff  += len;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	68da      	ldr	r2, [r3, #12]
 800a946:	69fb      	ldr	r3, [r7, #28]
 800a948:	441a      	add	r2, r3
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	699a      	ldr	r2, [r3, #24]
 800a952:	69fb      	ldr	r3, [r7, #28]
 800a954:	441a      	add	r2, r3
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	015a      	lsls	r2, r3, #5
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	4413      	add	r3, r2
 800a962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a966:	699b      	ldr	r3, [r3, #24]
 800a968:	b29b      	uxth	r3, r3
 800a96a:	69ba      	ldr	r2, [r7, #24]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d809      	bhi.n	800a984 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	699a      	ldr	r2, [r3, #24]
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a978:	429a      	cmp	r2, r3
 800a97a:	d203      	bcs.n	800a984 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	695b      	ldr	r3, [r3, #20]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d1be      	bne.n	800a902 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	695a      	ldr	r2, [r3, #20]
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	699b      	ldr	r3, [r3, #24]
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d811      	bhi.n	800a9b4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	f003 030f 	and.w	r3, r3, #15
 800a996:	2201      	movs	r2, #1
 800a998:	fa02 f303 	lsl.w	r3, r2, r3
 800a99c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	43db      	mvns	r3, r3
 800a9aa:	6939      	ldr	r1, [r7, #16]
 800a9ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a9b0:	4013      	ands	r3, r2
 800a9b2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a9b4:	2300      	movs	r3, #0
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3720      	adds	r7, #32
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
	...

0800a9c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b086      	sub	sp, #24
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
 800a9c8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	333c      	adds	r3, #60	; 0x3c
 800a9d8:	3304      	adds	r3, #4
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	015a      	lsls	r2, r3, #5
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	4413      	add	r3, r2
 800a9e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9ea:	689b      	ldr	r3, [r3, #8]
 800a9ec:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	691b      	ldr	r3, [r3, #16]
 800a9f2:	2b01      	cmp	r3, #1
 800a9f4:	f040 80a0 	bne.w	800ab38 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	f003 0308 	and.w	r3, r3, #8
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d015      	beq.n	800aa2e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	4a72      	ldr	r2, [pc, #456]	; (800abd0 <PCD_EP_OutXfrComplete_int+0x210>)
 800aa06:	4293      	cmp	r3, r2
 800aa08:	f240 80dd 	bls.w	800abc6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	f000 80d7 	beq.w	800abc6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	015a      	lsls	r2, r3, #5
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	4413      	add	r3, r2
 800aa20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa24:	461a      	mov	r2, r3
 800aa26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa2a:	6093      	str	r3, [r2, #8]
 800aa2c:	e0cb      	b.n	800abc6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	f003 0320 	and.w	r3, r3, #32
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d009      	beq.n	800aa4c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	015a      	lsls	r2, r3, #5
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	4413      	add	r3, r2
 800aa40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa44:	461a      	mov	r2, r3
 800aa46:	2320      	movs	r3, #32
 800aa48:	6093      	str	r3, [r2, #8]
 800aa4a:	e0bc      	b.n	800abc6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	f040 80b7 	bne.w	800abc6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	4a5d      	ldr	r2, [pc, #372]	; (800abd0 <PCD_EP_OutXfrComplete_int+0x210>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d90f      	bls.n	800aa80 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d00a      	beq.n	800aa80 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	015a      	lsls	r2, r3, #5
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	4413      	add	r3, r2
 800aa72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa76:	461a      	mov	r2, r3
 800aa78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa7c:	6093      	str	r3, [r2, #8]
 800aa7e:	e0a2      	b.n	800abc6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800aa80:	6879      	ldr	r1, [r7, #4]
 800aa82:	683a      	ldr	r2, [r7, #0]
 800aa84:	4613      	mov	r3, r2
 800aa86:	00db      	lsls	r3, r3, #3
 800aa88:	1a9b      	subs	r3, r3, r2
 800aa8a:	009b      	lsls	r3, r3, #2
 800aa8c:	440b      	add	r3, r1
 800aa8e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800aa92:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	0159      	lsls	r1, r3, #5
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	440b      	add	r3, r1
 800aa9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaa0:	691b      	ldr	r3, [r3, #16]
 800aaa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800aaa6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	683a      	ldr	r2, [r7, #0]
 800aaac:	4613      	mov	r3, r2
 800aaae:	00db      	lsls	r3, r3, #3
 800aab0:	1a9b      	subs	r3, r3, r2
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	4403      	add	r3, r0
 800aab6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800aaba:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800aabc:	6879      	ldr	r1, [r7, #4]
 800aabe:	683a      	ldr	r2, [r7, #0]
 800aac0:	4613      	mov	r3, r2
 800aac2:	00db      	lsls	r3, r3, #3
 800aac4:	1a9b      	subs	r3, r3, r2
 800aac6:	009b      	lsls	r3, r3, #2
 800aac8:	440b      	add	r3, r1
 800aaca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800aace:	6819      	ldr	r1, [r3, #0]
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	683a      	ldr	r2, [r7, #0]
 800aad4:	4613      	mov	r3, r2
 800aad6:	00db      	lsls	r3, r3, #3
 800aad8:	1a9b      	subs	r3, r3, r2
 800aada:	009b      	lsls	r3, r3, #2
 800aadc:	4403      	add	r3, r0
 800aade:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	4419      	add	r1, r3
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	683a      	ldr	r2, [r7, #0]
 800aaea:	4613      	mov	r3, r2
 800aaec:	00db      	lsls	r3, r3, #3
 800aaee:	1a9b      	subs	r3, r3, r2
 800aaf0:	009b      	lsls	r3, r3, #2
 800aaf2:	4403      	add	r3, r0
 800aaf4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800aaf8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d114      	bne.n	800ab2a <PCD_EP_OutXfrComplete_int+0x16a>
 800ab00:	6879      	ldr	r1, [r7, #4]
 800ab02:	683a      	ldr	r2, [r7, #0]
 800ab04:	4613      	mov	r3, r2
 800ab06:	00db      	lsls	r3, r3, #3
 800ab08:	1a9b      	subs	r3, r3, r2
 800ab0a:	009b      	lsls	r3, r3, #2
 800ab0c:	440b      	add	r3, r1
 800ab0e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d108      	bne.n	800ab2a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6818      	ldr	r0, [r3, #0]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ab22:	461a      	mov	r2, r3
 800ab24:	2101      	movs	r1, #1
 800ab26:	f005 ff41 	bl	80109ac <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	b2db      	uxtb	r3, r3
 800ab2e:	4619      	mov	r1, r3
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f00c faf9 	bl	8017128 <HAL_PCD_DataOutStageCallback>
 800ab36:	e046      	b.n	800abc6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	4a26      	ldr	r2, [pc, #152]	; (800abd4 <PCD_EP_OutXfrComplete_int+0x214>)
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	d124      	bne.n	800ab8a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d00a      	beq.n	800ab60 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	015a      	lsls	r2, r3, #5
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	4413      	add	r3, r2
 800ab52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab56:	461a      	mov	r2, r3
 800ab58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab5c:	6093      	str	r3, [r2, #8]
 800ab5e:	e032      	b.n	800abc6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	f003 0320 	and.w	r3, r3, #32
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d008      	beq.n	800ab7c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	015a      	lsls	r2, r3, #5
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	4413      	add	r3, r2
 800ab72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab76:	461a      	mov	r2, r3
 800ab78:	2320      	movs	r3, #32
 800ab7a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	b2db      	uxtb	r3, r3
 800ab80:	4619      	mov	r1, r3
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f00c fad0 	bl	8017128 <HAL_PCD_DataOutStageCallback>
 800ab88:	e01d      	b.n	800abc6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d114      	bne.n	800abba <PCD_EP_OutXfrComplete_int+0x1fa>
 800ab90:	6879      	ldr	r1, [r7, #4]
 800ab92:	683a      	ldr	r2, [r7, #0]
 800ab94:	4613      	mov	r3, r2
 800ab96:	00db      	lsls	r3, r3, #3
 800ab98:	1a9b      	subs	r3, r3, r2
 800ab9a:	009b      	lsls	r3, r3, #2
 800ab9c:	440b      	add	r3, r1
 800ab9e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d108      	bne.n	800abba <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6818      	ldr	r0, [r3, #0]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800abb2:	461a      	mov	r2, r3
 800abb4:	2100      	movs	r1, #0
 800abb6:	f005 fef9 	bl	80109ac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	b2db      	uxtb	r3, r3
 800abbe:	4619      	mov	r1, r3
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f00c fab1 	bl	8017128 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800abc6:	2300      	movs	r3, #0
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3718      	adds	r7, #24
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}
 800abd0:	4f54300a 	.word	0x4f54300a
 800abd4:	4f54310a 	.word	0x4f54310a

0800abd8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b086      	sub	sp, #24
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
 800abe0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	333c      	adds	r3, #60	; 0x3c
 800abf0:	3304      	adds	r3, #4
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	015a      	lsls	r2, r3, #5
 800abfa:	693b      	ldr	r3, [r7, #16]
 800abfc:	4413      	add	r3, r2
 800abfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	4a15      	ldr	r2, [pc, #84]	; (800ac60 <PCD_EP_OutSetupPacket_int+0x88>)
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	d90e      	bls.n	800ac2c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d009      	beq.n	800ac2c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	015a      	lsls	r2, r3, #5
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	4413      	add	r3, r2
 800ac20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac24:	461a      	mov	r2, r3
 800ac26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac2a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f00c fa69 	bl	8017104 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	4a0a      	ldr	r2, [pc, #40]	; (800ac60 <PCD_EP_OutSetupPacket_int+0x88>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d90c      	bls.n	800ac54 <PCD_EP_OutSetupPacket_int+0x7c>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	691b      	ldr	r3, [r3, #16]
 800ac3e:	2b01      	cmp	r3, #1
 800ac40:	d108      	bne.n	800ac54 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6818      	ldr	r0, [r3, #0]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	2101      	movs	r1, #1
 800ac50:	f005 feac 	bl	80109ac <USB_EP0_OutStart>
  }

  return HAL_OK;
 800ac54:	2300      	movs	r3, #0
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3718      	adds	r7, #24
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}
 800ac5e:	bf00      	nop
 800ac60:	4f54300a 	.word	0x4f54300a

0800ac64 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b085      	sub	sp, #20
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	460b      	mov	r3, r1
 800ac6e:	70fb      	strb	r3, [r7, #3]
 800ac70:	4613      	mov	r3, r2
 800ac72:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac7a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800ac7c:	78fb      	ldrb	r3, [r7, #3]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d107      	bne.n	800ac92 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800ac82:	883b      	ldrh	r3, [r7, #0]
 800ac84:	0419      	lsls	r1, r3, #16
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	68ba      	ldr	r2, [r7, #8]
 800ac8c:	430a      	orrs	r2, r1
 800ac8e:	629a      	str	r2, [r3, #40]	; 0x28
 800ac90:	e028      	b.n	800ace4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac98:	0c1b      	lsrs	r3, r3, #16
 800ac9a:	68ba      	ldr	r2, [r7, #8]
 800ac9c:	4413      	add	r3, r2
 800ac9e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800aca0:	2300      	movs	r3, #0
 800aca2:	73fb      	strb	r3, [r7, #15]
 800aca4:	e00d      	b.n	800acc2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	7bfb      	ldrb	r3, [r7, #15]
 800acac:	3340      	adds	r3, #64	; 0x40
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	4413      	add	r3, r2
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	0c1b      	lsrs	r3, r3, #16
 800acb6:	68ba      	ldr	r2, [r7, #8]
 800acb8:	4413      	add	r3, r2
 800acba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800acbc:	7bfb      	ldrb	r3, [r7, #15]
 800acbe:	3301      	adds	r3, #1
 800acc0:	73fb      	strb	r3, [r7, #15]
 800acc2:	7bfa      	ldrb	r2, [r7, #15]
 800acc4:	78fb      	ldrb	r3, [r7, #3]
 800acc6:	3b01      	subs	r3, #1
 800acc8:	429a      	cmp	r2, r3
 800acca:	d3ec      	bcc.n	800aca6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800accc:	883b      	ldrh	r3, [r7, #0]
 800acce:	0418      	lsls	r0, r3, #16
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6819      	ldr	r1, [r3, #0]
 800acd4:	78fb      	ldrb	r3, [r7, #3]
 800acd6:	3b01      	subs	r3, #1
 800acd8:	68ba      	ldr	r2, [r7, #8]
 800acda:	4302      	orrs	r2, r0
 800acdc:	3340      	adds	r3, #64	; 0x40
 800acde:	009b      	lsls	r3, r3, #2
 800ace0:	440b      	add	r3, r1
 800ace2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800ace4:	2300      	movs	r3, #0
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3714      	adds	r7, #20
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr

0800acf2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800acf2:	b480      	push	{r7}
 800acf4:	b083      	sub	sp, #12
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
 800acfa:	460b      	mov	r3, r1
 800acfc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	887a      	ldrh	r2, [r7, #2]
 800ad04:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800ad06:	2300      	movs	r3, #0
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	370c      	adds	r7, #12
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr

0800ad14 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b085      	sub	sp, #20
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2201      	movs	r2, #1
 800ad26:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	699b      	ldr	r3, [r3, #24]
 800ad36:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad46:	f043 0303 	orr.w	r3, r3, #3
 800ad4a:	68fa      	ldr	r2, [r7, #12]
 800ad4c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800ad4e:	2300      	movs	r3, #0
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3714      	adds	r7, #20
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr

0800ad5c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b082      	sub	sp, #8
 800ad60:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800ad62:	2300      	movs	r3, #0
 800ad64:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800ad66:	2300      	movs	r3, #0
 800ad68:	603b      	str	r3, [r7, #0]
 800ad6a:	4b20      	ldr	r3, [pc, #128]	; (800adec <HAL_PWREx_EnableOverDrive+0x90>)
 800ad6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad6e:	4a1f      	ldr	r2, [pc, #124]	; (800adec <HAL_PWREx_EnableOverDrive+0x90>)
 800ad70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad74:	6413      	str	r3, [r2, #64]	; 0x40
 800ad76:	4b1d      	ldr	r3, [pc, #116]	; (800adec <HAL_PWREx_EnableOverDrive+0x90>)
 800ad78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad7e:	603b      	str	r3, [r7, #0]
 800ad80:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800ad82:	4b1b      	ldr	r3, [pc, #108]	; (800adf0 <HAL_PWREx_EnableOverDrive+0x94>)
 800ad84:	2201      	movs	r2, #1
 800ad86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ad88:	f7fb fc72 	bl	8006670 <HAL_GetTick>
 800ad8c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ad8e:	e009      	b.n	800ada4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ad90:	f7fb fc6e 	bl	8006670 <HAL_GetTick>
 800ad94:	4602      	mov	r2, r0
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	1ad3      	subs	r3, r2, r3
 800ad9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad9e:	d901      	bls.n	800ada4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800ada0:	2303      	movs	r3, #3
 800ada2:	e01f      	b.n	800ade4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ada4:	4b13      	ldr	r3, [pc, #76]	; (800adf4 <HAL_PWREx_EnableOverDrive+0x98>)
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800adac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adb0:	d1ee      	bne.n	800ad90 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800adb2:	4b11      	ldr	r3, [pc, #68]	; (800adf8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800adb4:	2201      	movs	r2, #1
 800adb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800adb8:	f7fb fc5a 	bl	8006670 <HAL_GetTick>
 800adbc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800adbe:	e009      	b.n	800add4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800adc0:	f7fb fc56 	bl	8006670 <HAL_GetTick>
 800adc4:	4602      	mov	r2, r0
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	1ad3      	subs	r3, r2, r3
 800adca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800adce:	d901      	bls.n	800add4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800add0:	2303      	movs	r3, #3
 800add2:	e007      	b.n	800ade4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800add4:	4b07      	ldr	r3, [pc, #28]	; (800adf4 <HAL_PWREx_EnableOverDrive+0x98>)
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800addc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ade0:	d1ee      	bne.n	800adc0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800ade2:	2300      	movs	r3, #0
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3708      	adds	r7, #8
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}
 800adec:	40023800 	.word	0x40023800
 800adf0:	420e0040 	.word	0x420e0040
 800adf4:	40007000 	.word	0x40007000
 800adf8:	420e0044 	.word	0x420e0044

0800adfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d101      	bne.n	800ae10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	e0cc      	b.n	800afaa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ae10:	4b68      	ldr	r3, [pc, #416]	; (800afb4 <HAL_RCC_ClockConfig+0x1b8>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f003 030f 	and.w	r3, r3, #15
 800ae18:	683a      	ldr	r2, [r7, #0]
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d90c      	bls.n	800ae38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae1e:	4b65      	ldr	r3, [pc, #404]	; (800afb4 <HAL_RCC_ClockConfig+0x1b8>)
 800ae20:	683a      	ldr	r2, [r7, #0]
 800ae22:	b2d2      	uxtb	r2, r2
 800ae24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae26:	4b63      	ldr	r3, [pc, #396]	; (800afb4 <HAL_RCC_ClockConfig+0x1b8>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	f003 030f 	and.w	r3, r3, #15
 800ae2e:	683a      	ldr	r2, [r7, #0]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d001      	beq.n	800ae38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ae34:	2301      	movs	r3, #1
 800ae36:	e0b8      	b.n	800afaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f003 0302 	and.w	r3, r3, #2
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d020      	beq.n	800ae86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f003 0304 	and.w	r3, r3, #4
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d005      	beq.n	800ae5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ae50:	4b59      	ldr	r3, [pc, #356]	; (800afb8 <HAL_RCC_ClockConfig+0x1bc>)
 800ae52:	689b      	ldr	r3, [r3, #8]
 800ae54:	4a58      	ldr	r2, [pc, #352]	; (800afb8 <HAL_RCC_ClockConfig+0x1bc>)
 800ae56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ae5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f003 0308 	and.w	r3, r3, #8
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d005      	beq.n	800ae74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ae68:	4b53      	ldr	r3, [pc, #332]	; (800afb8 <HAL_RCC_ClockConfig+0x1bc>)
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	4a52      	ldr	r2, [pc, #328]	; (800afb8 <HAL_RCC_ClockConfig+0x1bc>)
 800ae6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ae72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae74:	4b50      	ldr	r3, [pc, #320]	; (800afb8 <HAL_RCC_ClockConfig+0x1bc>)
 800ae76:	689b      	ldr	r3, [r3, #8]
 800ae78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	689b      	ldr	r3, [r3, #8]
 800ae80:	494d      	ldr	r1, [pc, #308]	; (800afb8 <HAL_RCC_ClockConfig+0x1bc>)
 800ae82:	4313      	orrs	r3, r2
 800ae84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f003 0301 	and.w	r3, r3, #1
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d044      	beq.n	800af1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	685b      	ldr	r3, [r3, #4]
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d107      	bne.n	800aeaa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae9a:	4b47      	ldr	r3, [pc, #284]	; (800afb8 <HAL_RCC_ClockConfig+0x1bc>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d119      	bne.n	800aeda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aea6:	2301      	movs	r3, #1
 800aea8:	e07f      	b.n	800afaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	685b      	ldr	r3, [r3, #4]
 800aeae:	2b02      	cmp	r3, #2
 800aeb0:	d003      	beq.n	800aeba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800aeb6:	2b03      	cmp	r3, #3
 800aeb8:	d107      	bne.n	800aeca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aeba:	4b3f      	ldr	r3, [pc, #252]	; (800afb8 <HAL_RCC_ClockConfig+0x1bc>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d109      	bne.n	800aeda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aec6:	2301      	movs	r3, #1
 800aec8:	e06f      	b.n	800afaa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aeca:	4b3b      	ldr	r3, [pc, #236]	; (800afb8 <HAL_RCC_ClockConfig+0x1bc>)
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f003 0302 	and.w	r3, r3, #2
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d101      	bne.n	800aeda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aed6:	2301      	movs	r3, #1
 800aed8:	e067      	b.n	800afaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800aeda:	4b37      	ldr	r3, [pc, #220]	; (800afb8 <HAL_RCC_ClockConfig+0x1bc>)
 800aedc:	689b      	ldr	r3, [r3, #8]
 800aede:	f023 0203 	bic.w	r2, r3, #3
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	685b      	ldr	r3, [r3, #4]
 800aee6:	4934      	ldr	r1, [pc, #208]	; (800afb8 <HAL_RCC_ClockConfig+0x1bc>)
 800aee8:	4313      	orrs	r3, r2
 800aeea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800aeec:	f7fb fbc0 	bl	8006670 <HAL_GetTick>
 800aef0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aef2:	e00a      	b.n	800af0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aef4:	f7fb fbbc 	bl	8006670 <HAL_GetTick>
 800aef8:	4602      	mov	r2, r0
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	1ad3      	subs	r3, r2, r3
 800aefe:	f241 3288 	movw	r2, #5000	; 0x1388
 800af02:	4293      	cmp	r3, r2
 800af04:	d901      	bls.n	800af0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800af06:	2303      	movs	r3, #3
 800af08:	e04f      	b.n	800afaa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800af0a:	4b2b      	ldr	r3, [pc, #172]	; (800afb8 <HAL_RCC_ClockConfig+0x1bc>)
 800af0c:	689b      	ldr	r3, [r3, #8]
 800af0e:	f003 020c 	and.w	r2, r3, #12
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	429a      	cmp	r2, r3
 800af1a:	d1eb      	bne.n	800aef4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800af1c:	4b25      	ldr	r3, [pc, #148]	; (800afb4 <HAL_RCC_ClockConfig+0x1b8>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f003 030f 	and.w	r3, r3, #15
 800af24:	683a      	ldr	r2, [r7, #0]
 800af26:	429a      	cmp	r2, r3
 800af28:	d20c      	bcs.n	800af44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af2a:	4b22      	ldr	r3, [pc, #136]	; (800afb4 <HAL_RCC_ClockConfig+0x1b8>)
 800af2c:	683a      	ldr	r2, [r7, #0]
 800af2e:	b2d2      	uxtb	r2, r2
 800af30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800af32:	4b20      	ldr	r3, [pc, #128]	; (800afb4 <HAL_RCC_ClockConfig+0x1b8>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f003 030f 	and.w	r3, r3, #15
 800af3a:	683a      	ldr	r2, [r7, #0]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d001      	beq.n	800af44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800af40:	2301      	movs	r3, #1
 800af42:	e032      	b.n	800afaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f003 0304 	and.w	r3, r3, #4
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d008      	beq.n	800af62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800af50:	4b19      	ldr	r3, [pc, #100]	; (800afb8 <HAL_RCC_ClockConfig+0x1bc>)
 800af52:	689b      	ldr	r3, [r3, #8]
 800af54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	68db      	ldr	r3, [r3, #12]
 800af5c:	4916      	ldr	r1, [pc, #88]	; (800afb8 <HAL_RCC_ClockConfig+0x1bc>)
 800af5e:	4313      	orrs	r3, r2
 800af60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f003 0308 	and.w	r3, r3, #8
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d009      	beq.n	800af82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800af6e:	4b12      	ldr	r3, [pc, #72]	; (800afb8 <HAL_RCC_ClockConfig+0x1bc>)
 800af70:	689b      	ldr	r3, [r3, #8]
 800af72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	691b      	ldr	r3, [r3, #16]
 800af7a:	00db      	lsls	r3, r3, #3
 800af7c:	490e      	ldr	r1, [pc, #56]	; (800afb8 <HAL_RCC_ClockConfig+0x1bc>)
 800af7e:	4313      	orrs	r3, r2
 800af80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800af82:	f000 fb6b 	bl	800b65c <HAL_RCC_GetSysClockFreq>
 800af86:	4602      	mov	r2, r0
 800af88:	4b0b      	ldr	r3, [pc, #44]	; (800afb8 <HAL_RCC_ClockConfig+0x1bc>)
 800af8a:	689b      	ldr	r3, [r3, #8]
 800af8c:	091b      	lsrs	r3, r3, #4
 800af8e:	f003 030f 	and.w	r3, r3, #15
 800af92:	490a      	ldr	r1, [pc, #40]	; (800afbc <HAL_RCC_ClockConfig+0x1c0>)
 800af94:	5ccb      	ldrb	r3, [r1, r3]
 800af96:	fa22 f303 	lsr.w	r3, r2, r3
 800af9a:	4a09      	ldr	r2, [pc, #36]	; (800afc0 <HAL_RCC_ClockConfig+0x1c4>)
 800af9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800af9e:	4b09      	ldr	r3, [pc, #36]	; (800afc4 <HAL_RCC_ClockConfig+0x1c8>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	4618      	mov	r0, r3
 800afa4:	f7fb fb20 	bl	80065e8 <HAL_InitTick>

  return HAL_OK;
 800afa8:	2300      	movs	r3, #0
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3710      	adds	r7, #16
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	40023c00 	.word	0x40023c00
 800afb8:	40023800 	.word	0x40023800
 800afbc:	080180f8 	.word	0x080180f8
 800afc0:	20000000 	.word	0x20000000
 800afc4:	20000004 	.word	0x20000004

0800afc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800afc8:	b480      	push	{r7}
 800afca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800afcc:	4b03      	ldr	r3, [pc, #12]	; (800afdc <HAL_RCC_GetHCLKFreq+0x14>)
 800afce:	681b      	ldr	r3, [r3, #0]
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr
 800afda:	bf00      	nop
 800afdc:	20000000 	.word	0x20000000

0800afe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800afe4:	f7ff fff0 	bl	800afc8 <HAL_RCC_GetHCLKFreq>
 800afe8:	4602      	mov	r2, r0
 800afea:	4b05      	ldr	r3, [pc, #20]	; (800b000 <HAL_RCC_GetPCLK1Freq+0x20>)
 800afec:	689b      	ldr	r3, [r3, #8]
 800afee:	0a9b      	lsrs	r3, r3, #10
 800aff0:	f003 0307 	and.w	r3, r3, #7
 800aff4:	4903      	ldr	r1, [pc, #12]	; (800b004 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aff6:	5ccb      	ldrb	r3, [r1, r3]
 800aff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800affc:	4618      	mov	r0, r3
 800affe:	bd80      	pop	{r7, pc}
 800b000:	40023800 	.word	0x40023800
 800b004:	08018108 	.word	0x08018108

0800b008 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b08c      	sub	sp, #48	; 0x30
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b010:	2300      	movs	r3, #0
 800b012:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800b014:	2300      	movs	r3, #0
 800b016:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800b018:	2300      	movs	r3, #0
 800b01a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800b01c:	2300      	movs	r3, #0
 800b01e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800b020:	2300      	movs	r3, #0
 800b022:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800b024:	2300      	movs	r3, #0
 800b026:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800b028:	2300      	movs	r3, #0
 800b02a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800b02c:	2300      	movs	r3, #0
 800b02e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800b030:	2300      	movs	r3, #0
 800b032:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f003 0301 	and.w	r3, r3, #1
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d010      	beq.n	800b062 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800b040:	4b6f      	ldr	r3, [pc, #444]	; (800b200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b042:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b046:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b04e:	496c      	ldr	r1, [pc, #432]	; (800b200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b050:	4313      	orrs	r3, r2
 800b052:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d101      	bne.n	800b062 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800b05e:	2301      	movs	r3, #1
 800b060:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f003 0302 	and.w	r3, r3, #2
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d010      	beq.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800b06e:	4b64      	ldr	r3, [pc, #400]	; (800b200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b074:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b07c:	4960      	ldr	r1, [pc, #384]	; (800b200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b07e:	4313      	orrs	r3, r2
 800b080:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d101      	bne.n	800b090 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800b08c:	2301      	movs	r3, #1
 800b08e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f003 0304 	and.w	r3, r3, #4
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d017      	beq.n	800b0cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b09c:	4b58      	ldr	r3, [pc, #352]	; (800b200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b09e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0aa:	4955      	ldr	r1, [pc, #340]	; (800b200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b0ba:	d101      	bne.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800b0bc:	2301      	movs	r3, #1
 800b0be:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d101      	bne.n	800b0cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f003 0308 	and.w	r3, r3, #8
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d017      	beq.n	800b108 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b0d8:	4b49      	ldr	r3, [pc, #292]	; (800b200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b0da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0e6:	4946      	ldr	r1, [pc, #280]	; (800b200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b0f6:	d101      	bne.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b100:	2b00      	cmp	r3, #0
 800b102:	d101      	bne.n	800b108 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800b104:	2301      	movs	r3, #1
 800b106:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f003 0320 	and.w	r3, r3, #32
 800b110:	2b00      	cmp	r3, #0
 800b112:	f000 808a 	beq.w	800b22a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b116:	2300      	movs	r3, #0
 800b118:	60bb      	str	r3, [r7, #8]
 800b11a:	4b39      	ldr	r3, [pc, #228]	; (800b200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b11c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b11e:	4a38      	ldr	r2, [pc, #224]	; (800b200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b124:	6413      	str	r3, [r2, #64]	; 0x40
 800b126:	4b36      	ldr	r3, [pc, #216]	; (800b200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b12a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b12e:	60bb      	str	r3, [r7, #8]
 800b130:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b132:	4b34      	ldr	r3, [pc, #208]	; (800b204 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	4a33      	ldr	r2, [pc, #204]	; (800b204 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800b138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b13c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b13e:	f7fb fa97 	bl	8006670 <HAL_GetTick>
 800b142:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b144:	e008      	b.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b146:	f7fb fa93 	bl	8006670 <HAL_GetTick>
 800b14a:	4602      	mov	r2, r0
 800b14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b14e:	1ad3      	subs	r3, r2, r3
 800b150:	2b02      	cmp	r3, #2
 800b152:	d901      	bls.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800b154:	2303      	movs	r3, #3
 800b156:	e278      	b.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b158:	4b2a      	ldr	r3, [pc, #168]	; (800b204 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b160:	2b00      	cmp	r3, #0
 800b162:	d0f0      	beq.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b164:	4b26      	ldr	r3, [pc, #152]	; (800b200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b168:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b16c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b16e:	6a3b      	ldr	r3, [r7, #32]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d02f      	beq.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b178:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b17c:	6a3a      	ldr	r2, [r7, #32]
 800b17e:	429a      	cmp	r2, r3
 800b180:	d028      	beq.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b182:	4b1f      	ldr	r3, [pc, #124]	; (800b200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b18a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b18c:	4b1e      	ldr	r3, [pc, #120]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800b18e:	2201      	movs	r2, #1
 800b190:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b192:	4b1d      	ldr	r3, [pc, #116]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800b194:	2200      	movs	r2, #0
 800b196:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800b198:	4a19      	ldr	r2, [pc, #100]	; (800b200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b19a:	6a3b      	ldr	r3, [r7, #32]
 800b19c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b19e:	4b18      	ldr	r3, [pc, #96]	; (800b200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b1a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1a2:	f003 0301 	and.w	r3, r3, #1
 800b1a6:	2b01      	cmp	r3, #1
 800b1a8:	d114      	bne.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800b1aa:	f7fb fa61 	bl	8006670 <HAL_GetTick>
 800b1ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b1b0:	e00a      	b.n	800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b1b2:	f7fb fa5d 	bl	8006670 <HAL_GetTick>
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ba:	1ad3      	subs	r3, r2, r3
 800b1bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d901      	bls.n	800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800b1c4:	2303      	movs	r3, #3
 800b1c6:	e240      	b.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b1c8:	4b0d      	ldr	r3, [pc, #52]	; (800b200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b1ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1cc:	f003 0302 	and.w	r3, r3, #2
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d0ee      	beq.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b1e0:	d114      	bne.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0x204>
 800b1e2:	4b07      	ldr	r3, [pc, #28]	; (800b200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b1e4:	689b      	ldr	r3, [r3, #8]
 800b1e6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b1f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1f6:	4902      	ldr	r1, [pc, #8]	; (800b200 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	608b      	str	r3, [r1, #8]
 800b1fc:	e00c      	b.n	800b218 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800b1fe:	bf00      	nop
 800b200:	40023800 	.word	0x40023800
 800b204:	40007000 	.word	0x40007000
 800b208:	42470e40 	.word	0x42470e40
 800b20c:	4b4a      	ldr	r3, [pc, #296]	; (800b338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b20e:	689b      	ldr	r3, [r3, #8]
 800b210:	4a49      	ldr	r2, [pc, #292]	; (800b338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b212:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b216:	6093      	str	r3, [r2, #8]
 800b218:	4b47      	ldr	r3, [pc, #284]	; (800b338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b21a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b220:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b224:	4944      	ldr	r1, [pc, #272]	; (800b338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b226:	4313      	orrs	r3, r2
 800b228:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f003 0310 	and.w	r3, r3, #16
 800b232:	2b00      	cmp	r3, #0
 800b234:	d004      	beq.n	800b240 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800b23c:	4b3f      	ldr	r3, [pc, #252]	; (800b33c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800b23e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d00a      	beq.n	800b262 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800b24c:	4b3a      	ldr	r3, [pc, #232]	; (800b338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b24e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b252:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b25a:	4937      	ldr	r1, [pc, #220]	; (800b338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b25c:	4313      	orrs	r3, r2
 800b25e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d00a      	beq.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b26e:	4b32      	ldr	r3, [pc, #200]	; (800b338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b270:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b274:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b27c:	492e      	ldr	r1, [pc, #184]	; (800b338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b27e:	4313      	orrs	r3, r2
 800b280:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d011      	beq.n	800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b290:	4b29      	ldr	r3, [pc, #164]	; (800b338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b296:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b29e:	4926      	ldr	r1, [pc, #152]	; (800b338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b2a0:	4313      	orrs	r3, r2
 800b2a2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b2ae:	d101      	bne.n	800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d00a      	beq.n	800b2d6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800b2c0:	4b1d      	ldr	r3, [pc, #116]	; (800b338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b2c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b2c6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2ce:	491a      	ldr	r1, [pc, #104]	; (800b338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b2d0:	4313      	orrs	r3, r2
 800b2d2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d011      	beq.n	800b306 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800b2e2:	4b15      	ldr	r3, [pc, #84]	; (800b338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b2e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b2e8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2f0:	4911      	ldr	r1, [pc, #68]	; (800b338 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b300:	d101      	bne.n	800b306 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800b302:	2301      	movs	r3, #1
 800b304:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800b306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b308:	2b01      	cmp	r3, #1
 800b30a:	d005      	beq.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b314:	f040 80ff 	bne.w	800b516 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b318:	4b09      	ldr	r3, [pc, #36]	; (800b340 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b31a:	2200      	movs	r2, #0
 800b31c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b31e:	f7fb f9a7 	bl	8006670 <HAL_GetTick>
 800b322:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b324:	e00e      	b.n	800b344 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b326:	f7fb f9a3 	bl	8006670 <HAL_GetTick>
 800b32a:	4602      	mov	r2, r0
 800b32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b32e:	1ad3      	subs	r3, r2, r3
 800b330:	2b02      	cmp	r3, #2
 800b332:	d907      	bls.n	800b344 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b334:	2303      	movs	r3, #3
 800b336:	e188      	b.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800b338:	40023800 	.word	0x40023800
 800b33c:	424711e0 	.word	0x424711e0
 800b340:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b344:	4b7e      	ldr	r3, [pc, #504]	; (800b540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d1ea      	bne.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	f003 0301 	and.w	r3, r3, #1
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d003      	beq.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b360:	2b00      	cmp	r3, #0
 800b362:	d009      	beq.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d028      	beq.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b374:	2b00      	cmp	r3, #0
 800b376:	d124      	bne.n	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800b378:	4b71      	ldr	r3, [pc, #452]	; (800b540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b37a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b37e:	0c1b      	lsrs	r3, r3, #16
 800b380:	f003 0303 	and.w	r3, r3, #3
 800b384:	3301      	adds	r3, #1
 800b386:	005b      	lsls	r3, r3, #1
 800b388:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b38a:	4b6d      	ldr	r3, [pc, #436]	; (800b540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b38c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b390:	0e1b      	lsrs	r3, r3, #24
 800b392:	f003 030f 	and.w	r3, r3, #15
 800b396:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	685a      	ldr	r2, [r3, #4]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	689b      	ldr	r3, [r3, #8]
 800b3a0:	019b      	lsls	r3, r3, #6
 800b3a2:	431a      	orrs	r2, r3
 800b3a4:	69fb      	ldr	r3, [r7, #28]
 800b3a6:	085b      	lsrs	r3, r3, #1
 800b3a8:	3b01      	subs	r3, #1
 800b3aa:	041b      	lsls	r3, r3, #16
 800b3ac:	431a      	orrs	r2, r3
 800b3ae:	69bb      	ldr	r3, [r7, #24]
 800b3b0:	061b      	lsls	r3, r3, #24
 800b3b2:	431a      	orrs	r2, r3
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	695b      	ldr	r3, [r3, #20]
 800b3b8:	071b      	lsls	r3, r3, #28
 800b3ba:	4961      	ldr	r1, [pc, #388]	; (800b540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b3bc:	4313      	orrs	r3, r2
 800b3be:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f003 0304 	and.w	r3, r3, #4
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d004      	beq.n	800b3d8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3d6:	d00a      	beq.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d035      	beq.n	800b450 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b3ec:	d130      	bne.n	800b450 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800b3ee:	4b54      	ldr	r3, [pc, #336]	; (800b540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b3f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3f4:	0c1b      	lsrs	r3, r3, #16
 800b3f6:	f003 0303 	and.w	r3, r3, #3
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	005b      	lsls	r3, r3, #1
 800b3fe:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b400:	4b4f      	ldr	r3, [pc, #316]	; (800b540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b406:	0f1b      	lsrs	r3, r3, #28
 800b408:	f003 0307 	and.w	r3, r3, #7
 800b40c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	685a      	ldr	r2, [r3, #4]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	689b      	ldr	r3, [r3, #8]
 800b416:	019b      	lsls	r3, r3, #6
 800b418:	431a      	orrs	r2, r3
 800b41a:	69fb      	ldr	r3, [r7, #28]
 800b41c:	085b      	lsrs	r3, r3, #1
 800b41e:	3b01      	subs	r3, #1
 800b420:	041b      	lsls	r3, r3, #16
 800b422:	431a      	orrs	r2, r3
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	691b      	ldr	r3, [r3, #16]
 800b428:	061b      	lsls	r3, r3, #24
 800b42a:	431a      	orrs	r2, r3
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	071b      	lsls	r3, r3, #28
 800b430:	4943      	ldr	r1, [pc, #268]	; (800b540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b432:	4313      	orrs	r3, r2
 800b434:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b438:	4b41      	ldr	r3, [pc, #260]	; (800b540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b43a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b43e:	f023 021f 	bic.w	r2, r3, #31
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b446:	3b01      	subs	r3, #1
 800b448:	493d      	ldr	r1, [pc, #244]	; (800b540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b44a:	4313      	orrs	r3, r2
 800b44c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d029      	beq.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b460:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b464:	d124      	bne.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800b466:	4b36      	ldr	r3, [pc, #216]	; (800b540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b46c:	0c1b      	lsrs	r3, r3, #16
 800b46e:	f003 0303 	and.w	r3, r3, #3
 800b472:	3301      	adds	r3, #1
 800b474:	005b      	lsls	r3, r3, #1
 800b476:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b478:	4b31      	ldr	r3, [pc, #196]	; (800b540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b47a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b47e:	0f1b      	lsrs	r3, r3, #28
 800b480:	f003 0307 	and.w	r3, r3, #7
 800b484:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	685a      	ldr	r2, [r3, #4]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	689b      	ldr	r3, [r3, #8]
 800b48e:	019b      	lsls	r3, r3, #6
 800b490:	431a      	orrs	r2, r3
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	68db      	ldr	r3, [r3, #12]
 800b496:	085b      	lsrs	r3, r3, #1
 800b498:	3b01      	subs	r3, #1
 800b49a:	041b      	lsls	r3, r3, #16
 800b49c:	431a      	orrs	r2, r3
 800b49e:	69bb      	ldr	r3, [r7, #24]
 800b4a0:	061b      	lsls	r3, r3, #24
 800b4a2:	431a      	orrs	r2, r3
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	071b      	lsls	r3, r3, #28
 800b4a8:	4925      	ldr	r1, [pc, #148]	; (800b540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b4aa:	4313      	orrs	r3, r2
 800b4ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d016      	beq.n	800b4ea <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	685a      	ldr	r2, [r3, #4]
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	689b      	ldr	r3, [r3, #8]
 800b4c4:	019b      	lsls	r3, r3, #6
 800b4c6:	431a      	orrs	r2, r3
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	68db      	ldr	r3, [r3, #12]
 800b4cc:	085b      	lsrs	r3, r3, #1
 800b4ce:	3b01      	subs	r3, #1
 800b4d0:	041b      	lsls	r3, r3, #16
 800b4d2:	431a      	orrs	r2, r3
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	691b      	ldr	r3, [r3, #16]
 800b4d8:	061b      	lsls	r3, r3, #24
 800b4da:	431a      	orrs	r2, r3
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	695b      	ldr	r3, [r3, #20]
 800b4e0:	071b      	lsls	r3, r3, #28
 800b4e2:	4917      	ldr	r1, [pc, #92]	; (800b540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b4ea:	4b16      	ldr	r3, [pc, #88]	; (800b544 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800b4ec:	2201      	movs	r2, #1
 800b4ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b4f0:	f7fb f8be 	bl	8006670 <HAL_GetTick>
 800b4f4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b4f6:	e008      	b.n	800b50a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b4f8:	f7fb f8ba 	bl	8006670 <HAL_GetTick>
 800b4fc:	4602      	mov	r2, r0
 800b4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b500:	1ad3      	subs	r3, r2, r3
 800b502:	2b02      	cmp	r3, #2
 800b504:	d901      	bls.n	800b50a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b506:	2303      	movs	r3, #3
 800b508:	e09f      	b.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b50a:	4b0d      	ldr	r3, [pc, #52]	; (800b540 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b512:	2b00      	cmp	r3, #0
 800b514:	d0f0      	beq.n	800b4f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800b516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b518:	2b01      	cmp	r3, #1
 800b51a:	f040 8095 	bne.w	800b648 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b51e:	4b0a      	ldr	r3, [pc, #40]	; (800b548 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800b520:	2200      	movs	r2, #0
 800b522:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b524:	f7fb f8a4 	bl	8006670 <HAL_GetTick>
 800b528:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b52a:	e00f      	b.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b52c:	f7fb f8a0 	bl	8006670 <HAL_GetTick>
 800b530:	4602      	mov	r2, r0
 800b532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b534:	1ad3      	subs	r3, r2, r3
 800b536:	2b02      	cmp	r3, #2
 800b538:	d908      	bls.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b53a:	2303      	movs	r3, #3
 800b53c:	e085      	b.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800b53e:	bf00      	nop
 800b540:	40023800 	.word	0x40023800
 800b544:	42470068 	.word	0x42470068
 800b548:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b54c:	4b41      	ldr	r3, [pc, #260]	; (800b654 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b558:	d0e8      	beq.n	800b52c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f003 0304 	and.w	r3, r3, #4
 800b562:	2b00      	cmp	r3, #0
 800b564:	d003      	beq.n	800b56e <HAL_RCCEx_PeriphCLKConfig+0x566>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d009      	beq.n	800b582 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800b576:	2b00      	cmp	r3, #0
 800b578:	d02b      	beq.n	800b5d2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d127      	bne.n	800b5d2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800b582:	4b34      	ldr	r3, [pc, #208]	; (800b654 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b588:	0c1b      	lsrs	r3, r3, #16
 800b58a:	f003 0303 	and.w	r3, r3, #3
 800b58e:	3301      	adds	r3, #1
 800b590:	005b      	lsls	r3, r3, #1
 800b592:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	699a      	ldr	r2, [r3, #24]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	69db      	ldr	r3, [r3, #28]
 800b59c:	019b      	lsls	r3, r3, #6
 800b59e:	431a      	orrs	r2, r3
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	085b      	lsrs	r3, r3, #1
 800b5a4:	3b01      	subs	r3, #1
 800b5a6:	041b      	lsls	r3, r3, #16
 800b5a8:	431a      	orrs	r2, r3
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ae:	061b      	lsls	r3, r3, #24
 800b5b0:	4928      	ldr	r1, [pc, #160]	; (800b654 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b5b2:	4313      	orrs	r3, r2
 800b5b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b5b8:	4b26      	ldr	r3, [pc, #152]	; (800b654 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b5ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b5be:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c6:	3b01      	subs	r3, #1
 800b5c8:	021b      	lsls	r3, r3, #8
 800b5ca:	4922      	ldr	r1, [pc, #136]	; (800b654 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d01d      	beq.n	800b61a <HAL_RCCEx_PeriphCLKConfig+0x612>
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b5e6:	d118      	bne.n	800b61a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b5e8:	4b1a      	ldr	r3, [pc, #104]	; (800b654 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b5ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5ee:	0e1b      	lsrs	r3, r3, #24
 800b5f0:	f003 030f 	and.w	r3, r3, #15
 800b5f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	699a      	ldr	r2, [r3, #24]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	69db      	ldr	r3, [r3, #28]
 800b5fe:	019b      	lsls	r3, r3, #6
 800b600:	431a      	orrs	r2, r3
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6a1b      	ldr	r3, [r3, #32]
 800b606:	085b      	lsrs	r3, r3, #1
 800b608:	3b01      	subs	r3, #1
 800b60a:	041b      	lsls	r3, r3, #16
 800b60c:	431a      	orrs	r2, r3
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	061b      	lsls	r3, r3, #24
 800b612:	4910      	ldr	r1, [pc, #64]	; (800b654 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b614:	4313      	orrs	r3, r2
 800b616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b61a:	4b0f      	ldr	r3, [pc, #60]	; (800b658 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800b61c:	2201      	movs	r2, #1
 800b61e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b620:	f7fb f826 	bl	8006670 <HAL_GetTick>
 800b624:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b626:	e008      	b.n	800b63a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b628:	f7fb f822 	bl	8006670 <HAL_GetTick>
 800b62c:	4602      	mov	r2, r0
 800b62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b630:	1ad3      	subs	r3, r2, r3
 800b632:	2b02      	cmp	r3, #2
 800b634:	d901      	bls.n	800b63a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b636:	2303      	movs	r3, #3
 800b638:	e007      	b.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b63a:	4b06      	ldr	r3, [pc, #24]	; (800b654 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b642:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b646:	d1ef      	bne.n	800b628 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800b648:	2300      	movs	r3, #0
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3730      	adds	r7, #48	; 0x30
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop
 800b654:	40023800 	.word	0x40023800
 800b658:	42470070 	.word	0x42470070

0800b65c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b65c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b660:	b088      	sub	sp, #32
 800b662:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800b664:	2300      	movs	r3, #0
 800b666:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800b668:	2300      	movs	r3, #0
 800b66a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800b66c:	2300      	movs	r3, #0
 800b66e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800b670:	2300      	movs	r3, #0
 800b672:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800b674:	2300      	movs	r3, #0
 800b676:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b678:	4bce      	ldr	r3, [pc, #824]	; (800b9b4 <HAL_RCC_GetSysClockFreq+0x358>)
 800b67a:	689b      	ldr	r3, [r3, #8]
 800b67c:	f003 030c 	and.w	r3, r3, #12
 800b680:	2b0c      	cmp	r3, #12
 800b682:	f200 818d 	bhi.w	800b9a0 <HAL_RCC_GetSysClockFreq+0x344>
 800b686:	a201      	add	r2, pc, #4	; (adr r2, 800b68c <HAL_RCC_GetSysClockFreq+0x30>)
 800b688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b68c:	0800b6c1 	.word	0x0800b6c1
 800b690:	0800b9a1 	.word	0x0800b9a1
 800b694:	0800b9a1 	.word	0x0800b9a1
 800b698:	0800b9a1 	.word	0x0800b9a1
 800b69c:	0800b6c7 	.word	0x0800b6c7
 800b6a0:	0800b9a1 	.word	0x0800b9a1
 800b6a4:	0800b9a1 	.word	0x0800b9a1
 800b6a8:	0800b9a1 	.word	0x0800b9a1
 800b6ac:	0800b6cd 	.word	0x0800b6cd
 800b6b0:	0800b9a1 	.word	0x0800b9a1
 800b6b4:	0800b9a1 	.word	0x0800b9a1
 800b6b8:	0800b9a1 	.word	0x0800b9a1
 800b6bc:	0800b841 	.word	0x0800b841
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b6c0:	4bbd      	ldr	r3, [pc, #756]	; (800b9b8 <HAL_RCC_GetSysClockFreq+0x35c>)
 800b6c2:	61bb      	str	r3, [r7, #24]
       break;
 800b6c4:	e16f      	b.n	800b9a6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b6c6:	4bbd      	ldr	r3, [pc, #756]	; (800b9bc <HAL_RCC_GetSysClockFreq+0x360>)
 800b6c8:	61bb      	str	r3, [r7, #24]
      break;
 800b6ca:	e16c      	b.n	800b9a6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b6cc:	4bb9      	ldr	r3, [pc, #740]	; (800b9b4 <HAL_RCC_GetSysClockFreq+0x358>)
 800b6ce:	685b      	ldr	r3, [r3, #4]
 800b6d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b6d4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b6d6:	4bb7      	ldr	r3, [pc, #732]	; (800b9b4 <HAL_RCC_GetSysClockFreq+0x358>)
 800b6d8:	685b      	ldr	r3, [r3, #4]
 800b6da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d053      	beq.n	800b78a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b6e2:	4bb4      	ldr	r3, [pc, #720]	; (800b9b4 <HAL_RCC_GetSysClockFreq+0x358>)
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	099b      	lsrs	r3, r3, #6
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	f04f 0300 	mov.w	r3, #0
 800b6ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b6f2:	f04f 0100 	mov.w	r1, #0
 800b6f6:	ea02 0400 	and.w	r4, r2, r0
 800b6fa:	603c      	str	r4, [r7, #0]
 800b6fc:	400b      	ands	r3, r1
 800b6fe:	607b      	str	r3, [r7, #4]
 800b700:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b704:	4620      	mov	r0, r4
 800b706:	4629      	mov	r1, r5
 800b708:	f04f 0200 	mov.w	r2, #0
 800b70c:	f04f 0300 	mov.w	r3, #0
 800b710:	014b      	lsls	r3, r1, #5
 800b712:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b716:	0142      	lsls	r2, r0, #5
 800b718:	4610      	mov	r0, r2
 800b71a:	4619      	mov	r1, r3
 800b71c:	4623      	mov	r3, r4
 800b71e:	1ac0      	subs	r0, r0, r3
 800b720:	462b      	mov	r3, r5
 800b722:	eb61 0103 	sbc.w	r1, r1, r3
 800b726:	f04f 0200 	mov.w	r2, #0
 800b72a:	f04f 0300 	mov.w	r3, #0
 800b72e:	018b      	lsls	r3, r1, #6
 800b730:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b734:	0182      	lsls	r2, r0, #6
 800b736:	1a12      	subs	r2, r2, r0
 800b738:	eb63 0301 	sbc.w	r3, r3, r1
 800b73c:	f04f 0000 	mov.w	r0, #0
 800b740:	f04f 0100 	mov.w	r1, #0
 800b744:	00d9      	lsls	r1, r3, #3
 800b746:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b74a:	00d0      	lsls	r0, r2, #3
 800b74c:	4602      	mov	r2, r0
 800b74e:	460b      	mov	r3, r1
 800b750:	4621      	mov	r1, r4
 800b752:	1852      	adds	r2, r2, r1
 800b754:	4629      	mov	r1, r5
 800b756:	eb43 0101 	adc.w	r1, r3, r1
 800b75a:	460b      	mov	r3, r1
 800b75c:	f04f 0000 	mov.w	r0, #0
 800b760:	f04f 0100 	mov.w	r1, #0
 800b764:	0259      	lsls	r1, r3, #9
 800b766:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800b76a:	0250      	lsls	r0, r2, #9
 800b76c:	4602      	mov	r2, r0
 800b76e:	460b      	mov	r3, r1
 800b770:	4610      	mov	r0, r2
 800b772:	4619      	mov	r1, r3
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	461a      	mov	r2, r3
 800b778:	f04f 0300 	mov.w	r3, #0
 800b77c:	f7f4 fd98 	bl	80002b0 <__aeabi_uldivmod>
 800b780:	4602      	mov	r2, r0
 800b782:	460b      	mov	r3, r1
 800b784:	4613      	mov	r3, r2
 800b786:	61fb      	str	r3, [r7, #28]
 800b788:	e04c      	b.n	800b824 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b78a:	4b8a      	ldr	r3, [pc, #552]	; (800b9b4 <HAL_RCC_GetSysClockFreq+0x358>)
 800b78c:	685b      	ldr	r3, [r3, #4]
 800b78e:	099b      	lsrs	r3, r3, #6
 800b790:	461a      	mov	r2, r3
 800b792:	f04f 0300 	mov.w	r3, #0
 800b796:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b79a:	f04f 0100 	mov.w	r1, #0
 800b79e:	ea02 0a00 	and.w	sl, r2, r0
 800b7a2:	ea03 0b01 	and.w	fp, r3, r1
 800b7a6:	4650      	mov	r0, sl
 800b7a8:	4659      	mov	r1, fp
 800b7aa:	f04f 0200 	mov.w	r2, #0
 800b7ae:	f04f 0300 	mov.w	r3, #0
 800b7b2:	014b      	lsls	r3, r1, #5
 800b7b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b7b8:	0142      	lsls	r2, r0, #5
 800b7ba:	4610      	mov	r0, r2
 800b7bc:	4619      	mov	r1, r3
 800b7be:	ebb0 000a 	subs.w	r0, r0, sl
 800b7c2:	eb61 010b 	sbc.w	r1, r1, fp
 800b7c6:	f04f 0200 	mov.w	r2, #0
 800b7ca:	f04f 0300 	mov.w	r3, #0
 800b7ce:	018b      	lsls	r3, r1, #6
 800b7d0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b7d4:	0182      	lsls	r2, r0, #6
 800b7d6:	1a12      	subs	r2, r2, r0
 800b7d8:	eb63 0301 	sbc.w	r3, r3, r1
 800b7dc:	f04f 0000 	mov.w	r0, #0
 800b7e0:	f04f 0100 	mov.w	r1, #0
 800b7e4:	00d9      	lsls	r1, r3, #3
 800b7e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b7ea:	00d0      	lsls	r0, r2, #3
 800b7ec:	4602      	mov	r2, r0
 800b7ee:	460b      	mov	r3, r1
 800b7f0:	eb12 020a 	adds.w	r2, r2, sl
 800b7f4:	eb43 030b 	adc.w	r3, r3, fp
 800b7f8:	f04f 0000 	mov.w	r0, #0
 800b7fc:	f04f 0100 	mov.w	r1, #0
 800b800:	0299      	lsls	r1, r3, #10
 800b802:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b806:	0290      	lsls	r0, r2, #10
 800b808:	4602      	mov	r2, r0
 800b80a:	460b      	mov	r3, r1
 800b80c:	4610      	mov	r0, r2
 800b80e:	4619      	mov	r1, r3
 800b810:	697b      	ldr	r3, [r7, #20]
 800b812:	461a      	mov	r2, r3
 800b814:	f04f 0300 	mov.w	r3, #0
 800b818:	f7f4 fd4a 	bl	80002b0 <__aeabi_uldivmod>
 800b81c:	4602      	mov	r2, r0
 800b81e:	460b      	mov	r3, r1
 800b820:	4613      	mov	r3, r2
 800b822:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b824:	4b63      	ldr	r3, [pc, #396]	; (800b9b4 <HAL_RCC_GetSysClockFreq+0x358>)
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	0c1b      	lsrs	r3, r3, #16
 800b82a:	f003 0303 	and.w	r3, r3, #3
 800b82e:	3301      	adds	r3, #1
 800b830:	005b      	lsls	r3, r3, #1
 800b832:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800b834:	69fa      	ldr	r2, [r7, #28]
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	fbb2 f3f3 	udiv	r3, r2, r3
 800b83c:	61bb      	str	r3, [r7, #24]
      break;
 800b83e:	e0b2      	b.n	800b9a6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b840:	4b5c      	ldr	r3, [pc, #368]	; (800b9b4 <HAL_RCC_GetSysClockFreq+0x358>)
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b848:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b84a:	4b5a      	ldr	r3, [pc, #360]	; (800b9b4 <HAL_RCC_GetSysClockFreq+0x358>)
 800b84c:	685b      	ldr	r3, [r3, #4]
 800b84e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b852:	2b00      	cmp	r3, #0
 800b854:	d04d      	beq.n	800b8f2 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b856:	4b57      	ldr	r3, [pc, #348]	; (800b9b4 <HAL_RCC_GetSysClockFreq+0x358>)
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	099b      	lsrs	r3, r3, #6
 800b85c:	461a      	mov	r2, r3
 800b85e:	f04f 0300 	mov.w	r3, #0
 800b862:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b866:	f04f 0100 	mov.w	r1, #0
 800b86a:	ea02 0800 	and.w	r8, r2, r0
 800b86e:	ea03 0901 	and.w	r9, r3, r1
 800b872:	4640      	mov	r0, r8
 800b874:	4649      	mov	r1, r9
 800b876:	f04f 0200 	mov.w	r2, #0
 800b87a:	f04f 0300 	mov.w	r3, #0
 800b87e:	014b      	lsls	r3, r1, #5
 800b880:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b884:	0142      	lsls	r2, r0, #5
 800b886:	4610      	mov	r0, r2
 800b888:	4619      	mov	r1, r3
 800b88a:	ebb0 0008 	subs.w	r0, r0, r8
 800b88e:	eb61 0109 	sbc.w	r1, r1, r9
 800b892:	f04f 0200 	mov.w	r2, #0
 800b896:	f04f 0300 	mov.w	r3, #0
 800b89a:	018b      	lsls	r3, r1, #6
 800b89c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b8a0:	0182      	lsls	r2, r0, #6
 800b8a2:	1a12      	subs	r2, r2, r0
 800b8a4:	eb63 0301 	sbc.w	r3, r3, r1
 800b8a8:	f04f 0000 	mov.w	r0, #0
 800b8ac:	f04f 0100 	mov.w	r1, #0
 800b8b0:	00d9      	lsls	r1, r3, #3
 800b8b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b8b6:	00d0      	lsls	r0, r2, #3
 800b8b8:	4602      	mov	r2, r0
 800b8ba:	460b      	mov	r3, r1
 800b8bc:	eb12 0208 	adds.w	r2, r2, r8
 800b8c0:	eb43 0309 	adc.w	r3, r3, r9
 800b8c4:	f04f 0000 	mov.w	r0, #0
 800b8c8:	f04f 0100 	mov.w	r1, #0
 800b8cc:	0259      	lsls	r1, r3, #9
 800b8ce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800b8d2:	0250      	lsls	r0, r2, #9
 800b8d4:	4602      	mov	r2, r0
 800b8d6:	460b      	mov	r3, r1
 800b8d8:	4610      	mov	r0, r2
 800b8da:	4619      	mov	r1, r3
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	461a      	mov	r2, r3
 800b8e0:	f04f 0300 	mov.w	r3, #0
 800b8e4:	f7f4 fce4 	bl	80002b0 <__aeabi_uldivmod>
 800b8e8:	4602      	mov	r2, r0
 800b8ea:	460b      	mov	r3, r1
 800b8ec:	4613      	mov	r3, r2
 800b8ee:	61fb      	str	r3, [r7, #28]
 800b8f0:	e04a      	b.n	800b988 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b8f2:	4b30      	ldr	r3, [pc, #192]	; (800b9b4 <HAL_RCC_GetSysClockFreq+0x358>)
 800b8f4:	685b      	ldr	r3, [r3, #4]
 800b8f6:	099b      	lsrs	r3, r3, #6
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	f04f 0300 	mov.w	r3, #0
 800b8fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b902:	f04f 0100 	mov.w	r1, #0
 800b906:	ea02 0400 	and.w	r4, r2, r0
 800b90a:	ea03 0501 	and.w	r5, r3, r1
 800b90e:	4620      	mov	r0, r4
 800b910:	4629      	mov	r1, r5
 800b912:	f04f 0200 	mov.w	r2, #0
 800b916:	f04f 0300 	mov.w	r3, #0
 800b91a:	014b      	lsls	r3, r1, #5
 800b91c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b920:	0142      	lsls	r2, r0, #5
 800b922:	4610      	mov	r0, r2
 800b924:	4619      	mov	r1, r3
 800b926:	1b00      	subs	r0, r0, r4
 800b928:	eb61 0105 	sbc.w	r1, r1, r5
 800b92c:	f04f 0200 	mov.w	r2, #0
 800b930:	f04f 0300 	mov.w	r3, #0
 800b934:	018b      	lsls	r3, r1, #6
 800b936:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b93a:	0182      	lsls	r2, r0, #6
 800b93c:	1a12      	subs	r2, r2, r0
 800b93e:	eb63 0301 	sbc.w	r3, r3, r1
 800b942:	f04f 0000 	mov.w	r0, #0
 800b946:	f04f 0100 	mov.w	r1, #0
 800b94a:	00d9      	lsls	r1, r3, #3
 800b94c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b950:	00d0      	lsls	r0, r2, #3
 800b952:	4602      	mov	r2, r0
 800b954:	460b      	mov	r3, r1
 800b956:	1912      	adds	r2, r2, r4
 800b958:	eb45 0303 	adc.w	r3, r5, r3
 800b95c:	f04f 0000 	mov.w	r0, #0
 800b960:	f04f 0100 	mov.w	r1, #0
 800b964:	0299      	lsls	r1, r3, #10
 800b966:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b96a:	0290      	lsls	r0, r2, #10
 800b96c:	4602      	mov	r2, r0
 800b96e:	460b      	mov	r3, r1
 800b970:	4610      	mov	r0, r2
 800b972:	4619      	mov	r1, r3
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	461a      	mov	r2, r3
 800b978:	f04f 0300 	mov.w	r3, #0
 800b97c:	f7f4 fc98 	bl	80002b0 <__aeabi_uldivmod>
 800b980:	4602      	mov	r2, r0
 800b982:	460b      	mov	r3, r1
 800b984:	4613      	mov	r3, r2
 800b986:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800b988:	4b0a      	ldr	r3, [pc, #40]	; (800b9b4 <HAL_RCC_GetSysClockFreq+0x358>)
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	0f1b      	lsrs	r3, r3, #28
 800b98e:	f003 0307 	and.w	r3, r3, #7
 800b992:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800b994:	69fa      	ldr	r2, [r7, #28]
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	fbb2 f3f3 	udiv	r3, r2, r3
 800b99c:	61bb      	str	r3, [r7, #24]
      break;
 800b99e:	e002      	b.n	800b9a6 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b9a0:	4b05      	ldr	r3, [pc, #20]	; (800b9b8 <HAL_RCC_GetSysClockFreq+0x35c>)
 800b9a2:	61bb      	str	r3, [r7, #24]
      break;
 800b9a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b9a6:	69bb      	ldr	r3, [r7, #24]
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3720      	adds	r7, #32
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b9b2:	bf00      	nop
 800b9b4:	40023800 	.word	0x40023800
 800b9b8:	00f42400 	.word	0x00f42400
 800b9bc:	007a1200 	.word	0x007a1200

0800b9c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b086      	sub	sp, #24
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d101      	bne.n	800b9d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	e28d      	b.n	800beee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f003 0301 	and.w	r3, r3, #1
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	f000 8083 	beq.w	800bae6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b9e0:	4b94      	ldr	r3, [pc, #592]	; (800bc34 <HAL_RCC_OscConfig+0x274>)
 800b9e2:	689b      	ldr	r3, [r3, #8]
 800b9e4:	f003 030c 	and.w	r3, r3, #12
 800b9e8:	2b04      	cmp	r3, #4
 800b9ea:	d019      	beq.n	800ba20 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b9ec:	4b91      	ldr	r3, [pc, #580]	; (800bc34 <HAL_RCC_OscConfig+0x274>)
 800b9ee:	689b      	ldr	r3, [r3, #8]
 800b9f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b9f4:	2b08      	cmp	r3, #8
 800b9f6:	d106      	bne.n	800ba06 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b9f8:	4b8e      	ldr	r3, [pc, #568]	; (800bc34 <HAL_RCC_OscConfig+0x274>)
 800b9fa:	685b      	ldr	r3, [r3, #4]
 800b9fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba04:	d00c      	beq.n	800ba20 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ba06:	4b8b      	ldr	r3, [pc, #556]	; (800bc34 <HAL_RCC_OscConfig+0x274>)
 800ba08:	689b      	ldr	r3, [r3, #8]
 800ba0a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800ba0e:	2b0c      	cmp	r3, #12
 800ba10:	d112      	bne.n	800ba38 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ba12:	4b88      	ldr	r3, [pc, #544]	; (800bc34 <HAL_RCC_OscConfig+0x274>)
 800ba14:	685b      	ldr	r3, [r3, #4]
 800ba16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba1e:	d10b      	bne.n	800ba38 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ba20:	4b84      	ldr	r3, [pc, #528]	; (800bc34 <HAL_RCC_OscConfig+0x274>)
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d05b      	beq.n	800bae4 <HAL_RCC_OscConfig+0x124>
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d157      	bne.n	800bae4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800ba34:	2301      	movs	r3, #1
 800ba36:	e25a      	b.n	800beee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba40:	d106      	bne.n	800ba50 <HAL_RCC_OscConfig+0x90>
 800ba42:	4b7c      	ldr	r3, [pc, #496]	; (800bc34 <HAL_RCC_OscConfig+0x274>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	4a7b      	ldr	r2, [pc, #492]	; (800bc34 <HAL_RCC_OscConfig+0x274>)
 800ba48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba4c:	6013      	str	r3, [r2, #0]
 800ba4e:	e01d      	b.n	800ba8c <HAL_RCC_OscConfig+0xcc>
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ba58:	d10c      	bne.n	800ba74 <HAL_RCC_OscConfig+0xb4>
 800ba5a:	4b76      	ldr	r3, [pc, #472]	; (800bc34 <HAL_RCC_OscConfig+0x274>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	4a75      	ldr	r2, [pc, #468]	; (800bc34 <HAL_RCC_OscConfig+0x274>)
 800ba60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ba64:	6013      	str	r3, [r2, #0]
 800ba66:	4b73      	ldr	r3, [pc, #460]	; (800bc34 <HAL_RCC_OscConfig+0x274>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4a72      	ldr	r2, [pc, #456]	; (800bc34 <HAL_RCC_OscConfig+0x274>)
 800ba6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba70:	6013      	str	r3, [r2, #0]
 800ba72:	e00b      	b.n	800ba8c <HAL_RCC_OscConfig+0xcc>
 800ba74:	4b6f      	ldr	r3, [pc, #444]	; (800bc34 <HAL_RCC_OscConfig+0x274>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4a6e      	ldr	r2, [pc, #440]	; (800bc34 <HAL_RCC_OscConfig+0x274>)
 800ba7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba7e:	6013      	str	r3, [r2, #0]
 800ba80:	4b6c      	ldr	r3, [pc, #432]	; (800bc34 <HAL_RCC_OscConfig+0x274>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4a6b      	ldr	r2, [pc, #428]	; (800bc34 <HAL_RCC_OscConfig+0x274>)
 800ba86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ba8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d013      	beq.n	800babc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba94:	f7fa fdec 	bl	8006670 <HAL_GetTick>
 800ba98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ba9a:	e008      	b.n	800baae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ba9c:	f7fa fde8 	bl	8006670 <HAL_GetTick>
 800baa0:	4602      	mov	r2, r0
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	1ad3      	subs	r3, r2, r3
 800baa6:	2b64      	cmp	r3, #100	; 0x64
 800baa8:	d901      	bls.n	800baae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800baaa:	2303      	movs	r3, #3
 800baac:	e21f      	b.n	800beee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800baae:	4b61      	ldr	r3, [pc, #388]	; (800bc34 <HAL_RCC_OscConfig+0x274>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d0f0      	beq.n	800ba9c <HAL_RCC_OscConfig+0xdc>
 800baba:	e014      	b.n	800bae6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800babc:	f7fa fdd8 	bl	8006670 <HAL_GetTick>
 800bac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bac2:	e008      	b.n	800bad6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bac4:	f7fa fdd4 	bl	8006670 <HAL_GetTick>
 800bac8:	4602      	mov	r2, r0
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	1ad3      	subs	r3, r2, r3
 800bace:	2b64      	cmp	r3, #100	; 0x64
 800bad0:	d901      	bls.n	800bad6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800bad2:	2303      	movs	r3, #3
 800bad4:	e20b      	b.n	800beee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bad6:	4b57      	ldr	r3, [pc, #348]	; (800bc34 <HAL_RCC_OscConfig+0x274>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d1f0      	bne.n	800bac4 <HAL_RCC_OscConfig+0x104>
 800bae2:	e000      	b.n	800bae6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bae4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f003 0302 	and.w	r3, r3, #2
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d06f      	beq.n	800bbd2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800baf2:	4b50      	ldr	r3, [pc, #320]	; (800bc34 <HAL_RCC_OscConfig+0x274>)
 800baf4:	689b      	ldr	r3, [r3, #8]
 800baf6:	f003 030c 	and.w	r3, r3, #12
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d017      	beq.n	800bb2e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800bafe:	4b4d      	ldr	r3, [pc, #308]	; (800bc34 <HAL_RCC_OscConfig+0x274>)
 800bb00:	689b      	ldr	r3, [r3, #8]
 800bb02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800bb06:	2b08      	cmp	r3, #8
 800bb08:	d105      	bne.n	800bb16 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800bb0a:	4b4a      	ldr	r3, [pc, #296]	; (800bc34 <HAL_RCC_OscConfig+0x274>)
 800bb0c:	685b      	ldr	r3, [r3, #4]
 800bb0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d00b      	beq.n	800bb2e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bb16:	4b47      	ldr	r3, [pc, #284]	; (800bc34 <HAL_RCC_OscConfig+0x274>)
 800bb18:	689b      	ldr	r3, [r3, #8]
 800bb1a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800bb1e:	2b0c      	cmp	r3, #12
 800bb20:	d11c      	bne.n	800bb5c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bb22:	4b44      	ldr	r3, [pc, #272]	; (800bc34 <HAL_RCC_OscConfig+0x274>)
 800bb24:	685b      	ldr	r3, [r3, #4]
 800bb26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d116      	bne.n	800bb5c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bb2e:	4b41      	ldr	r3, [pc, #260]	; (800bc34 <HAL_RCC_OscConfig+0x274>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	f003 0302 	and.w	r3, r3, #2
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d005      	beq.n	800bb46 <HAL_RCC_OscConfig+0x186>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	68db      	ldr	r3, [r3, #12]
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	d001      	beq.n	800bb46 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800bb42:	2301      	movs	r3, #1
 800bb44:	e1d3      	b.n	800beee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb46:	4b3b      	ldr	r3, [pc, #236]	; (800bc34 <HAL_RCC_OscConfig+0x274>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	691b      	ldr	r3, [r3, #16]
 800bb52:	00db      	lsls	r3, r3, #3
 800bb54:	4937      	ldr	r1, [pc, #220]	; (800bc34 <HAL_RCC_OscConfig+0x274>)
 800bb56:	4313      	orrs	r3, r2
 800bb58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bb5a:	e03a      	b.n	800bbd2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	68db      	ldr	r3, [r3, #12]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d020      	beq.n	800bba6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bb64:	4b34      	ldr	r3, [pc, #208]	; (800bc38 <HAL_RCC_OscConfig+0x278>)
 800bb66:	2201      	movs	r2, #1
 800bb68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb6a:	f7fa fd81 	bl	8006670 <HAL_GetTick>
 800bb6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bb70:	e008      	b.n	800bb84 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bb72:	f7fa fd7d 	bl	8006670 <HAL_GetTick>
 800bb76:	4602      	mov	r2, r0
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	1ad3      	subs	r3, r2, r3
 800bb7c:	2b02      	cmp	r3, #2
 800bb7e:	d901      	bls.n	800bb84 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800bb80:	2303      	movs	r3, #3
 800bb82:	e1b4      	b.n	800beee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bb84:	4b2b      	ldr	r3, [pc, #172]	; (800bc34 <HAL_RCC_OscConfig+0x274>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f003 0302 	and.w	r3, r3, #2
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d0f0      	beq.n	800bb72 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb90:	4b28      	ldr	r3, [pc, #160]	; (800bc34 <HAL_RCC_OscConfig+0x274>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	691b      	ldr	r3, [r3, #16]
 800bb9c:	00db      	lsls	r3, r3, #3
 800bb9e:	4925      	ldr	r1, [pc, #148]	; (800bc34 <HAL_RCC_OscConfig+0x274>)
 800bba0:	4313      	orrs	r3, r2
 800bba2:	600b      	str	r3, [r1, #0]
 800bba4:	e015      	b.n	800bbd2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bba6:	4b24      	ldr	r3, [pc, #144]	; (800bc38 <HAL_RCC_OscConfig+0x278>)
 800bba8:	2200      	movs	r2, #0
 800bbaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbac:	f7fa fd60 	bl	8006670 <HAL_GetTick>
 800bbb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bbb2:	e008      	b.n	800bbc6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bbb4:	f7fa fd5c 	bl	8006670 <HAL_GetTick>
 800bbb8:	4602      	mov	r2, r0
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	1ad3      	subs	r3, r2, r3
 800bbbe:	2b02      	cmp	r3, #2
 800bbc0:	d901      	bls.n	800bbc6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800bbc2:	2303      	movs	r3, #3
 800bbc4:	e193      	b.n	800beee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bbc6:	4b1b      	ldr	r3, [pc, #108]	; (800bc34 <HAL_RCC_OscConfig+0x274>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f003 0302 	and.w	r3, r3, #2
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d1f0      	bne.n	800bbb4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f003 0308 	and.w	r3, r3, #8
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d036      	beq.n	800bc4c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	695b      	ldr	r3, [r3, #20]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d016      	beq.n	800bc14 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bbe6:	4b15      	ldr	r3, [pc, #84]	; (800bc3c <HAL_RCC_OscConfig+0x27c>)
 800bbe8:	2201      	movs	r2, #1
 800bbea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bbec:	f7fa fd40 	bl	8006670 <HAL_GetTick>
 800bbf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bbf2:	e008      	b.n	800bc06 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bbf4:	f7fa fd3c 	bl	8006670 <HAL_GetTick>
 800bbf8:	4602      	mov	r2, r0
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	1ad3      	subs	r3, r2, r3
 800bbfe:	2b02      	cmp	r3, #2
 800bc00:	d901      	bls.n	800bc06 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800bc02:	2303      	movs	r3, #3
 800bc04:	e173      	b.n	800beee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bc06:	4b0b      	ldr	r3, [pc, #44]	; (800bc34 <HAL_RCC_OscConfig+0x274>)
 800bc08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc0a:	f003 0302 	and.w	r3, r3, #2
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d0f0      	beq.n	800bbf4 <HAL_RCC_OscConfig+0x234>
 800bc12:	e01b      	b.n	800bc4c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bc14:	4b09      	ldr	r3, [pc, #36]	; (800bc3c <HAL_RCC_OscConfig+0x27c>)
 800bc16:	2200      	movs	r2, #0
 800bc18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc1a:	f7fa fd29 	bl	8006670 <HAL_GetTick>
 800bc1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bc20:	e00e      	b.n	800bc40 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bc22:	f7fa fd25 	bl	8006670 <HAL_GetTick>
 800bc26:	4602      	mov	r2, r0
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	1ad3      	subs	r3, r2, r3
 800bc2c:	2b02      	cmp	r3, #2
 800bc2e:	d907      	bls.n	800bc40 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800bc30:	2303      	movs	r3, #3
 800bc32:	e15c      	b.n	800beee <HAL_RCC_OscConfig+0x52e>
 800bc34:	40023800 	.word	0x40023800
 800bc38:	42470000 	.word	0x42470000
 800bc3c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bc40:	4b8a      	ldr	r3, [pc, #552]	; (800be6c <HAL_RCC_OscConfig+0x4ac>)
 800bc42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc44:	f003 0302 	and.w	r3, r3, #2
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d1ea      	bne.n	800bc22 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f003 0304 	and.w	r3, r3, #4
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	f000 8097 	beq.w	800bd88 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bc5e:	4b83      	ldr	r3, [pc, #524]	; (800be6c <HAL_RCC_OscConfig+0x4ac>)
 800bc60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d10f      	bne.n	800bc8a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	60bb      	str	r3, [r7, #8]
 800bc6e:	4b7f      	ldr	r3, [pc, #508]	; (800be6c <HAL_RCC_OscConfig+0x4ac>)
 800bc70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc72:	4a7e      	ldr	r2, [pc, #504]	; (800be6c <HAL_RCC_OscConfig+0x4ac>)
 800bc74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc78:	6413      	str	r3, [r2, #64]	; 0x40
 800bc7a:	4b7c      	ldr	r3, [pc, #496]	; (800be6c <HAL_RCC_OscConfig+0x4ac>)
 800bc7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc82:	60bb      	str	r3, [r7, #8]
 800bc84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bc86:	2301      	movs	r3, #1
 800bc88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bc8a:	4b79      	ldr	r3, [pc, #484]	; (800be70 <HAL_RCC_OscConfig+0x4b0>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d118      	bne.n	800bcc8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bc96:	4b76      	ldr	r3, [pc, #472]	; (800be70 <HAL_RCC_OscConfig+0x4b0>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	4a75      	ldr	r2, [pc, #468]	; (800be70 <HAL_RCC_OscConfig+0x4b0>)
 800bc9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bca0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bca2:	f7fa fce5 	bl	8006670 <HAL_GetTick>
 800bca6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bca8:	e008      	b.n	800bcbc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bcaa:	f7fa fce1 	bl	8006670 <HAL_GetTick>
 800bcae:	4602      	mov	r2, r0
 800bcb0:	693b      	ldr	r3, [r7, #16]
 800bcb2:	1ad3      	subs	r3, r2, r3
 800bcb4:	2b02      	cmp	r3, #2
 800bcb6:	d901      	bls.n	800bcbc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800bcb8:	2303      	movs	r3, #3
 800bcba:	e118      	b.n	800beee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bcbc:	4b6c      	ldr	r3, [pc, #432]	; (800be70 <HAL_RCC_OscConfig+0x4b0>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d0f0      	beq.n	800bcaa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	689b      	ldr	r3, [r3, #8]
 800bccc:	2b01      	cmp	r3, #1
 800bcce:	d106      	bne.n	800bcde <HAL_RCC_OscConfig+0x31e>
 800bcd0:	4b66      	ldr	r3, [pc, #408]	; (800be6c <HAL_RCC_OscConfig+0x4ac>)
 800bcd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcd4:	4a65      	ldr	r2, [pc, #404]	; (800be6c <HAL_RCC_OscConfig+0x4ac>)
 800bcd6:	f043 0301 	orr.w	r3, r3, #1
 800bcda:	6713      	str	r3, [r2, #112]	; 0x70
 800bcdc:	e01c      	b.n	800bd18 <HAL_RCC_OscConfig+0x358>
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	689b      	ldr	r3, [r3, #8]
 800bce2:	2b05      	cmp	r3, #5
 800bce4:	d10c      	bne.n	800bd00 <HAL_RCC_OscConfig+0x340>
 800bce6:	4b61      	ldr	r3, [pc, #388]	; (800be6c <HAL_RCC_OscConfig+0x4ac>)
 800bce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcea:	4a60      	ldr	r2, [pc, #384]	; (800be6c <HAL_RCC_OscConfig+0x4ac>)
 800bcec:	f043 0304 	orr.w	r3, r3, #4
 800bcf0:	6713      	str	r3, [r2, #112]	; 0x70
 800bcf2:	4b5e      	ldr	r3, [pc, #376]	; (800be6c <HAL_RCC_OscConfig+0x4ac>)
 800bcf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcf6:	4a5d      	ldr	r2, [pc, #372]	; (800be6c <HAL_RCC_OscConfig+0x4ac>)
 800bcf8:	f043 0301 	orr.w	r3, r3, #1
 800bcfc:	6713      	str	r3, [r2, #112]	; 0x70
 800bcfe:	e00b      	b.n	800bd18 <HAL_RCC_OscConfig+0x358>
 800bd00:	4b5a      	ldr	r3, [pc, #360]	; (800be6c <HAL_RCC_OscConfig+0x4ac>)
 800bd02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd04:	4a59      	ldr	r2, [pc, #356]	; (800be6c <HAL_RCC_OscConfig+0x4ac>)
 800bd06:	f023 0301 	bic.w	r3, r3, #1
 800bd0a:	6713      	str	r3, [r2, #112]	; 0x70
 800bd0c:	4b57      	ldr	r3, [pc, #348]	; (800be6c <HAL_RCC_OscConfig+0x4ac>)
 800bd0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd10:	4a56      	ldr	r2, [pc, #344]	; (800be6c <HAL_RCC_OscConfig+0x4ac>)
 800bd12:	f023 0304 	bic.w	r3, r3, #4
 800bd16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	689b      	ldr	r3, [r3, #8]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d015      	beq.n	800bd4c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd20:	f7fa fca6 	bl	8006670 <HAL_GetTick>
 800bd24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bd26:	e00a      	b.n	800bd3e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bd28:	f7fa fca2 	bl	8006670 <HAL_GetTick>
 800bd2c:	4602      	mov	r2, r0
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	1ad3      	subs	r3, r2, r3
 800bd32:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d901      	bls.n	800bd3e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800bd3a:	2303      	movs	r3, #3
 800bd3c:	e0d7      	b.n	800beee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bd3e:	4b4b      	ldr	r3, [pc, #300]	; (800be6c <HAL_RCC_OscConfig+0x4ac>)
 800bd40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd42:	f003 0302 	and.w	r3, r3, #2
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d0ee      	beq.n	800bd28 <HAL_RCC_OscConfig+0x368>
 800bd4a:	e014      	b.n	800bd76 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd4c:	f7fa fc90 	bl	8006670 <HAL_GetTick>
 800bd50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bd52:	e00a      	b.n	800bd6a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bd54:	f7fa fc8c 	bl	8006670 <HAL_GetTick>
 800bd58:	4602      	mov	r2, r0
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	1ad3      	subs	r3, r2, r3
 800bd5e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d901      	bls.n	800bd6a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800bd66:	2303      	movs	r3, #3
 800bd68:	e0c1      	b.n	800beee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bd6a:	4b40      	ldr	r3, [pc, #256]	; (800be6c <HAL_RCC_OscConfig+0x4ac>)
 800bd6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd6e:	f003 0302 	and.w	r3, r3, #2
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d1ee      	bne.n	800bd54 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bd76:	7dfb      	ldrb	r3, [r7, #23]
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d105      	bne.n	800bd88 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bd7c:	4b3b      	ldr	r3, [pc, #236]	; (800be6c <HAL_RCC_OscConfig+0x4ac>)
 800bd7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd80:	4a3a      	ldr	r2, [pc, #232]	; (800be6c <HAL_RCC_OscConfig+0x4ac>)
 800bd82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bd86:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	699b      	ldr	r3, [r3, #24]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	f000 80ad 	beq.w	800beec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bd92:	4b36      	ldr	r3, [pc, #216]	; (800be6c <HAL_RCC_OscConfig+0x4ac>)
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	f003 030c 	and.w	r3, r3, #12
 800bd9a:	2b08      	cmp	r3, #8
 800bd9c:	d060      	beq.n	800be60 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	699b      	ldr	r3, [r3, #24]
 800bda2:	2b02      	cmp	r3, #2
 800bda4:	d145      	bne.n	800be32 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bda6:	4b33      	ldr	r3, [pc, #204]	; (800be74 <HAL_RCC_OscConfig+0x4b4>)
 800bda8:	2200      	movs	r2, #0
 800bdaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdac:	f7fa fc60 	bl	8006670 <HAL_GetTick>
 800bdb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bdb2:	e008      	b.n	800bdc6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bdb4:	f7fa fc5c 	bl	8006670 <HAL_GetTick>
 800bdb8:	4602      	mov	r2, r0
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	1ad3      	subs	r3, r2, r3
 800bdbe:	2b02      	cmp	r3, #2
 800bdc0:	d901      	bls.n	800bdc6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800bdc2:	2303      	movs	r3, #3
 800bdc4:	e093      	b.n	800beee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bdc6:	4b29      	ldr	r3, [pc, #164]	; (800be6c <HAL_RCC_OscConfig+0x4ac>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d1f0      	bne.n	800bdb4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	69da      	ldr	r2, [r3, #28]
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6a1b      	ldr	r3, [r3, #32]
 800bdda:	431a      	orrs	r2, r3
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bde0:	019b      	lsls	r3, r3, #6
 800bde2:	431a      	orrs	r2, r3
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bde8:	085b      	lsrs	r3, r3, #1
 800bdea:	3b01      	subs	r3, #1
 800bdec:	041b      	lsls	r3, r3, #16
 800bdee:	431a      	orrs	r2, r3
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf4:	061b      	lsls	r3, r3, #24
 800bdf6:	431a      	orrs	r2, r3
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdfc:	071b      	lsls	r3, r3, #28
 800bdfe:	491b      	ldr	r1, [pc, #108]	; (800be6c <HAL_RCC_OscConfig+0x4ac>)
 800be00:	4313      	orrs	r3, r2
 800be02:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800be04:	4b1b      	ldr	r3, [pc, #108]	; (800be74 <HAL_RCC_OscConfig+0x4b4>)
 800be06:	2201      	movs	r2, #1
 800be08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be0a:	f7fa fc31 	bl	8006670 <HAL_GetTick>
 800be0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800be10:	e008      	b.n	800be24 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800be12:	f7fa fc2d 	bl	8006670 <HAL_GetTick>
 800be16:	4602      	mov	r2, r0
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	1ad3      	subs	r3, r2, r3
 800be1c:	2b02      	cmp	r3, #2
 800be1e:	d901      	bls.n	800be24 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800be20:	2303      	movs	r3, #3
 800be22:	e064      	b.n	800beee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800be24:	4b11      	ldr	r3, [pc, #68]	; (800be6c <HAL_RCC_OscConfig+0x4ac>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d0f0      	beq.n	800be12 <HAL_RCC_OscConfig+0x452>
 800be30:	e05c      	b.n	800beec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800be32:	4b10      	ldr	r3, [pc, #64]	; (800be74 <HAL_RCC_OscConfig+0x4b4>)
 800be34:	2200      	movs	r2, #0
 800be36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be38:	f7fa fc1a 	bl	8006670 <HAL_GetTick>
 800be3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800be3e:	e008      	b.n	800be52 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800be40:	f7fa fc16 	bl	8006670 <HAL_GetTick>
 800be44:	4602      	mov	r2, r0
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	1ad3      	subs	r3, r2, r3
 800be4a:	2b02      	cmp	r3, #2
 800be4c:	d901      	bls.n	800be52 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800be4e:	2303      	movs	r3, #3
 800be50:	e04d      	b.n	800beee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800be52:	4b06      	ldr	r3, [pc, #24]	; (800be6c <HAL_RCC_OscConfig+0x4ac>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d1f0      	bne.n	800be40 <HAL_RCC_OscConfig+0x480>
 800be5e:	e045      	b.n	800beec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	699b      	ldr	r3, [r3, #24]
 800be64:	2b01      	cmp	r3, #1
 800be66:	d107      	bne.n	800be78 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800be68:	2301      	movs	r3, #1
 800be6a:	e040      	b.n	800beee <HAL_RCC_OscConfig+0x52e>
 800be6c:	40023800 	.word	0x40023800
 800be70:	40007000 	.word	0x40007000
 800be74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800be78:	4b1f      	ldr	r3, [pc, #124]	; (800bef8 <HAL_RCC_OscConfig+0x538>)
 800be7a:	685b      	ldr	r3, [r3, #4]
 800be7c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	699b      	ldr	r3, [r3, #24]
 800be82:	2b01      	cmp	r3, #1
 800be84:	d030      	beq.n	800bee8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800be90:	429a      	cmp	r2, r3
 800be92:	d129      	bne.n	800bee8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800be9e:	429a      	cmp	r2, r3
 800bea0:	d122      	bne.n	800bee8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800bea2:	68fa      	ldr	r2, [r7, #12]
 800bea4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800bea8:	4013      	ands	r3, r2
 800beaa:	687a      	ldr	r2, [r7, #4]
 800beac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800beae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800beb0:	4293      	cmp	r3, r2
 800beb2:	d119      	bne.n	800bee8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bebe:	085b      	lsrs	r3, r3, #1
 800bec0:	3b01      	subs	r3, #1
 800bec2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d10f      	bne.n	800bee8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d107      	bne.n	800bee8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bee2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bee4:	429a      	cmp	r2, r3
 800bee6:	d001      	beq.n	800beec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800bee8:	2301      	movs	r3, #1
 800beea:	e000      	b.n	800beee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800beec:	2300      	movs	r3, #0
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3718      	adds	r7, #24
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}
 800bef6:	bf00      	nop
 800bef8:	40023800 	.word	0x40023800

0800befc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b082      	sub	sp, #8
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d101      	bne.n	800bf0e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	e083      	b.n	800c016 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	7f5b      	ldrb	r3, [r3, #29]
 800bf12:	b2db      	uxtb	r3, r3
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d105      	bne.n	800bf24 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f7fa f906 	bl	8006130 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2202      	movs	r2, #2
 800bf28:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	22ca      	movs	r2, #202	; 0xca
 800bf30:	625a      	str	r2, [r3, #36]	; 0x24
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	2253      	movs	r2, #83	; 0x53
 800bf38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800bf3a:	6878      	ldr	r0, [r7, #4]
 800bf3c:	f000 faa8 	bl	800c490 <RTC_EnterInitMode>
 800bf40:	4603      	mov	r3, r0
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d008      	beq.n	800bf58 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	22ff      	movs	r2, #255	; 0xff
 800bf4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2204      	movs	r2, #4
 800bf52:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800bf54:	2301      	movs	r3, #1
 800bf56:	e05e      	b.n	800c016 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	689b      	ldr	r3, [r3, #8]
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	6812      	ldr	r2, [r2, #0]
 800bf62:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bf66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf6a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	6899      	ldr	r1, [r3, #8]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	685a      	ldr	r2, [r3, #4]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	691b      	ldr	r3, [r3, #16]
 800bf7a:	431a      	orrs	r2, r3
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	695b      	ldr	r3, [r3, #20]
 800bf80:	431a      	orrs	r2, r3
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	430a      	orrs	r2, r1
 800bf88:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	687a      	ldr	r2, [r7, #4]
 800bf90:	68d2      	ldr	r2, [r2, #12]
 800bf92:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	6919      	ldr	r1, [r3, #16]
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	689b      	ldr	r3, [r3, #8]
 800bf9e:	041a      	lsls	r2, r3, #16
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	430a      	orrs	r2, r1
 800bfa6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	68da      	ldr	r2, [r3, #12]
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bfb6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	689b      	ldr	r3, [r3, #8]
 800bfbe:	f003 0320 	and.w	r3, r3, #32
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d10e      	bne.n	800bfe4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f000 fa3a 	bl	800c440 <HAL_RTC_WaitForSynchro>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d008      	beq.n	800bfe4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	22ff      	movs	r2, #255	; 0xff
 800bfd8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	2204      	movs	r2, #4
 800bfde:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	e018      	b.n	800c016 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bff2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	699a      	ldr	r2, [r3, #24]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	430a      	orrs	r2, r1
 800c004:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	22ff      	movs	r2, #255	; 0xff
 800c00c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2201      	movs	r2, #1
 800c012:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800c014:	2300      	movs	r3, #0
  }
}
 800c016:	4618      	mov	r0, r3
 800c018:	3708      	adds	r7, #8
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}

0800c01e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c01e:	b590      	push	{r4, r7, lr}
 800c020:	b087      	sub	sp, #28
 800c022:	af00      	add	r7, sp, #0
 800c024:	60f8      	str	r0, [r7, #12]
 800c026:	60b9      	str	r1, [r7, #8]
 800c028:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c02a:	2300      	movs	r3, #0
 800c02c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	7f1b      	ldrb	r3, [r3, #28]
 800c032:	2b01      	cmp	r3, #1
 800c034:	d101      	bne.n	800c03a <HAL_RTC_SetTime+0x1c>
 800c036:	2302      	movs	r3, #2
 800c038:	e0aa      	b.n	800c190 <HAL_RTC_SetTime+0x172>
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	2201      	movs	r2, #1
 800c03e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	2202      	movs	r2, #2
 800c044:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d126      	bne.n	800c09a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	689b      	ldr	r3, [r3, #8]
 800c052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c056:	2b00      	cmp	r3, #0
 800c058:	d102      	bne.n	800c060 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c05a:	68bb      	ldr	r3, [r7, #8]
 800c05c:	2200      	movs	r2, #0
 800c05e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	4618      	mov	r0, r3
 800c066:	f000 fa3f 	bl	800c4e8 <RTC_ByteToBcd2>
 800c06a:	4603      	mov	r3, r0
 800c06c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	785b      	ldrb	r3, [r3, #1]
 800c072:	4618      	mov	r0, r3
 800c074:	f000 fa38 	bl	800c4e8 <RTC_ByteToBcd2>
 800c078:	4603      	mov	r3, r0
 800c07a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c07c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800c07e:	68bb      	ldr	r3, [r7, #8]
 800c080:	789b      	ldrb	r3, [r3, #2]
 800c082:	4618      	mov	r0, r3
 800c084:	f000 fa30 	bl	800c4e8 <RTC_ByteToBcd2>
 800c088:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800c08a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	78db      	ldrb	r3, [r3, #3]
 800c092:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c094:	4313      	orrs	r3, r2
 800c096:	617b      	str	r3, [r7, #20]
 800c098:	e018      	b.n	800c0cc <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	689b      	ldr	r3, [r3, #8]
 800c0a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d102      	bne.n	800c0ae <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	781b      	ldrb	r3, [r3, #0]
 800c0b2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	785b      	ldrb	r3, [r3, #1]
 800c0b8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c0ba:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800c0bc:	68ba      	ldr	r2, [r7, #8]
 800c0be:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800c0c0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	78db      	ldrb	r3, [r3, #3]
 800c0c6:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c0c8:	4313      	orrs	r3, r2
 800c0ca:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	22ca      	movs	r2, #202	; 0xca
 800c0d2:	625a      	str	r2, [r3, #36]	; 0x24
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	2253      	movs	r2, #83	; 0x53
 800c0da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c0dc:	68f8      	ldr	r0, [r7, #12]
 800c0de:	f000 f9d7 	bl	800c490 <RTC_EnterInitMode>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d00b      	beq.n	800c100 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	22ff      	movs	r2, #255	; 0xff
 800c0ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	2204      	movs	r2, #4
 800c0f4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	e047      	b.n	800c190 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681a      	ldr	r2, [r3, #0]
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c10a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c10e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	689a      	ldr	r2, [r3, #8]
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c11e:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	6899      	ldr	r1, [r3, #8]
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	68da      	ldr	r2, [r3, #12]
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	691b      	ldr	r3, [r3, #16]
 800c12e:	431a      	orrs	r2, r3
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	430a      	orrs	r2, r1
 800c136:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	68da      	ldr	r2, [r3, #12]
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c146:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	689b      	ldr	r3, [r3, #8]
 800c14e:	f003 0320 	and.w	r3, r3, #32
 800c152:	2b00      	cmp	r3, #0
 800c154:	d111      	bne.n	800c17a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c156:	68f8      	ldr	r0, [r7, #12]
 800c158:	f000 f972 	bl	800c440 <HAL_RTC_WaitForSynchro>
 800c15c:	4603      	mov	r3, r0
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d00b      	beq.n	800c17a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	22ff      	movs	r2, #255	; 0xff
 800c168:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2204      	movs	r2, #4
 800c16e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	2200      	movs	r2, #0
 800c174:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800c176:	2301      	movs	r3, #1
 800c178:	e00a      	b.n	800c190 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	22ff      	movs	r2, #255	; 0xff
 800c180:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	2201      	movs	r2, #1
 800c186:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	2200      	movs	r2, #0
 800c18c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800c18e:	2300      	movs	r3, #0
  }
}
 800c190:	4618      	mov	r0, r3
 800c192:	371c      	adds	r7, #28
 800c194:	46bd      	mov	sp, r7
 800c196:	bd90      	pop	{r4, r7, pc}

0800c198 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b086      	sub	sp, #24
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	60f8      	str	r0, [r7, #12]
 800c1a0:	60b9      	str	r1, [r7, #8]
 800c1a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	691b      	ldr	r3, [r3, #16]
 800c1b8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c1ca:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c1ce:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	0c1b      	lsrs	r3, r3, #16
 800c1d4:	b2db      	uxtb	r3, r3
 800c1d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c1da:	b2da      	uxtb	r2, r3
 800c1dc:	68bb      	ldr	r3, [r7, #8]
 800c1de:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	0a1b      	lsrs	r3, r3, #8
 800c1e4:	b2db      	uxtb	r3, r3
 800c1e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1ea:	b2da      	uxtb	r2, r3
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	b2db      	uxtb	r3, r3
 800c1f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1f8:	b2da      	uxtb	r2, r3
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	0c1b      	lsrs	r3, r3, #16
 800c202:	b2db      	uxtb	r3, r3
 800c204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c208:	b2da      	uxtb	r2, r3
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d11a      	bne.n	800c24a <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c214:	68bb      	ldr	r3, [r7, #8]
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	4618      	mov	r0, r3
 800c21a:	f000 f983 	bl	800c524 <RTC_Bcd2ToByte>
 800c21e:	4603      	mov	r3, r0
 800c220:	461a      	mov	r2, r3
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	785b      	ldrb	r3, [r3, #1]
 800c22a:	4618      	mov	r0, r3
 800c22c:	f000 f97a 	bl	800c524 <RTC_Bcd2ToByte>
 800c230:	4603      	mov	r3, r0
 800c232:	461a      	mov	r2, r3
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c238:	68bb      	ldr	r3, [r7, #8]
 800c23a:	789b      	ldrb	r3, [r3, #2]
 800c23c:	4618      	mov	r0, r3
 800c23e:	f000 f971 	bl	800c524 <RTC_Bcd2ToByte>
 800c242:	4603      	mov	r3, r0
 800c244:	461a      	mov	r2, r3
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c24a:	2300      	movs	r3, #0
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3718      	adds	r7, #24
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}

0800c254 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c254:	b590      	push	{r4, r7, lr}
 800c256:	b087      	sub	sp, #28
 800c258:	af00      	add	r7, sp, #0
 800c25a:	60f8      	str	r0, [r7, #12]
 800c25c:	60b9      	str	r1, [r7, #8]
 800c25e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c260:	2300      	movs	r3, #0
 800c262:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	7f1b      	ldrb	r3, [r3, #28]
 800c268:	2b01      	cmp	r3, #1
 800c26a:	d101      	bne.n	800c270 <HAL_RTC_SetDate+0x1c>
 800c26c:	2302      	movs	r3, #2
 800c26e:	e094      	b.n	800c39a <HAL_RTC_SetDate+0x146>
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	2201      	movs	r2, #1
 800c274:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	2202      	movs	r2, #2
 800c27a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d10e      	bne.n	800c2a0 <HAL_RTC_SetDate+0x4c>
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	785b      	ldrb	r3, [r3, #1]
 800c286:	f003 0310 	and.w	r3, r3, #16
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d008      	beq.n	800c2a0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	785b      	ldrb	r3, [r3, #1]
 800c292:	f023 0310 	bic.w	r3, r3, #16
 800c296:	b2db      	uxtb	r3, r3
 800c298:	330a      	adds	r3, #10
 800c29a:	b2da      	uxtb	r2, r3
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d11c      	bne.n	800c2e0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	78db      	ldrb	r3, [r3, #3]
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f000 f91c 	bl	800c4e8 <RTC_ByteToBcd2>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	785b      	ldrb	r3, [r3, #1]
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f000 f915 	bl	800c4e8 <RTC_ByteToBcd2>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c2c2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	789b      	ldrb	r3, [r3, #2]
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f000 f90d 	bl	800c4e8 <RTC_ByteToBcd2>
 800c2ce:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800c2d0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	781b      	ldrb	r3, [r3, #0]
 800c2d8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800c2da:	4313      	orrs	r3, r2
 800c2dc:	617b      	str	r3, [r7, #20]
 800c2de:	e00e      	b.n	800c2fe <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	78db      	ldrb	r3, [r3, #3]
 800c2e4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	785b      	ldrb	r3, [r3, #1]
 800c2ea:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c2ec:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800c2ee:	68ba      	ldr	r2, [r7, #8]
 800c2f0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800c2f2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	22ca      	movs	r2, #202	; 0xca
 800c304:	625a      	str	r2, [r3, #36]	; 0x24
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	2253      	movs	r2, #83	; 0x53
 800c30c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800c30e:	68f8      	ldr	r0, [r7, #12]
 800c310:	f000 f8be 	bl	800c490 <RTC_EnterInitMode>
 800c314:	4603      	mov	r3, r0
 800c316:	2b00      	cmp	r3, #0
 800c318:	d00b      	beq.n	800c332 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	22ff      	movs	r2, #255	; 0xff
 800c320:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	2204      	movs	r2, #4
 800c326:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	2200      	movs	r2, #0
 800c32c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800c32e:	2301      	movs	r3, #1
 800c330:	e033      	b.n	800c39a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681a      	ldr	r2, [r3, #0]
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c33c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c340:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	68da      	ldr	r2, [r3, #12]
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c350:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	689b      	ldr	r3, [r3, #8]
 800c358:	f003 0320 	and.w	r3, r3, #32
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d111      	bne.n	800c384 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c360:	68f8      	ldr	r0, [r7, #12]
 800c362:	f000 f86d 	bl	800c440 <HAL_RTC_WaitForSynchro>
 800c366:	4603      	mov	r3, r0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d00b      	beq.n	800c384 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	22ff      	movs	r2, #255	; 0xff
 800c372:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	2204      	movs	r2, #4
 800c378:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	2200      	movs	r2, #0
 800c37e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800c380:	2301      	movs	r3, #1
 800c382:	e00a      	b.n	800c39a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	22ff      	movs	r2, #255	; 0xff
 800c38a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	2201      	movs	r2, #1
 800c390:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	2200      	movs	r2, #0
 800c396:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800c398:	2300      	movs	r3, #0
  }
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	371c      	adds	r7, #28
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd90      	pop	{r4, r7, pc}

0800c3a2 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c3a2:	b580      	push	{r7, lr}
 800c3a4:	b086      	sub	sp, #24
 800c3a6:	af00      	add	r7, sp, #0
 800c3a8:	60f8      	str	r0, [r7, #12]
 800c3aa:	60b9      	str	r1, [r7, #8]
 800c3ac:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c3bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c3c0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	0c1b      	lsrs	r3, r3, #16
 800c3c6:	b2da      	uxtb	r2, r3
 800c3c8:	68bb      	ldr	r3, [r7, #8]
 800c3ca:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800c3cc:	697b      	ldr	r3, [r7, #20]
 800c3ce:	0a1b      	lsrs	r3, r3, #8
 800c3d0:	b2db      	uxtb	r3, r3
 800c3d2:	f003 031f 	and.w	r3, r3, #31
 800c3d6:	b2da      	uxtb	r2, r3
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800c3dc:	697b      	ldr	r3, [r7, #20]
 800c3de:	b2db      	uxtb	r3, r3
 800c3e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c3e4:	b2da      	uxtb	r2, r3
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800c3ea:	697b      	ldr	r3, [r7, #20]
 800c3ec:	0b5b      	lsrs	r3, r3, #13
 800c3ee:	b2db      	uxtb	r3, r3
 800c3f0:	f003 0307 	and.w	r3, r3, #7
 800c3f4:	b2da      	uxtb	r2, r3
 800c3f6:	68bb      	ldr	r3, [r7, #8]
 800c3f8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d11a      	bne.n	800c436 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	78db      	ldrb	r3, [r3, #3]
 800c404:	4618      	mov	r0, r3
 800c406:	f000 f88d 	bl	800c524 <RTC_Bcd2ToByte>
 800c40a:	4603      	mov	r3, r0
 800c40c:	461a      	mov	r2, r3
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	785b      	ldrb	r3, [r3, #1]
 800c416:	4618      	mov	r0, r3
 800c418:	f000 f884 	bl	800c524 <RTC_Bcd2ToByte>
 800c41c:	4603      	mov	r3, r0
 800c41e:	461a      	mov	r2, r3
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	789b      	ldrb	r3, [r3, #2]
 800c428:	4618      	mov	r0, r3
 800c42a:	f000 f87b 	bl	800c524 <RTC_Bcd2ToByte>
 800c42e:	4603      	mov	r3, r0
 800c430:	461a      	mov	r2, r3
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c436:	2300      	movs	r3, #0
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3718      	adds	r7, #24
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}

0800c440 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b084      	sub	sp, #16
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c448:	2300      	movs	r3, #0
 800c44a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	68da      	ldr	r2, [r3, #12]
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c45a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c45c:	f7fa f908 	bl	8006670 <HAL_GetTick>
 800c460:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c462:	e009      	b.n	800c478 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c464:	f7fa f904 	bl	8006670 <HAL_GetTick>
 800c468:	4602      	mov	r2, r0
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	1ad3      	subs	r3, r2, r3
 800c46e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c472:	d901      	bls.n	800c478 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800c474:	2303      	movs	r3, #3
 800c476:	e007      	b.n	800c488 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	68db      	ldr	r3, [r3, #12]
 800c47e:	f003 0320 	and.w	r3, r3, #32
 800c482:	2b00      	cmp	r3, #0
 800c484:	d0ee      	beq.n	800c464 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800c486:	2300      	movs	r3, #0
}
 800c488:	4618      	mov	r0, r3
 800c48a:	3710      	adds	r7, #16
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}

0800c490 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b084      	sub	sp, #16
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c498:	2300      	movs	r3, #0
 800c49a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	68db      	ldr	r3, [r3, #12]
 800c4a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d119      	bne.n	800c4de <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f04f 32ff 	mov.w	r2, #4294967295
 800c4b2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c4b4:	f7fa f8dc 	bl	8006670 <HAL_GetTick>
 800c4b8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c4ba:	e009      	b.n	800c4d0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c4bc:	f7fa f8d8 	bl	8006670 <HAL_GetTick>
 800c4c0:	4602      	mov	r2, r0
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	1ad3      	subs	r3, r2, r3
 800c4c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c4ca:	d901      	bls.n	800c4d0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800c4cc:	2303      	movs	r3, #3
 800c4ce:	e007      	b.n	800c4e0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	68db      	ldr	r3, [r3, #12]
 800c4d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d0ee      	beq.n	800c4bc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800c4de:	2300      	movs	r3, #0
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3710      	adds	r7, #16
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}

0800c4e8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b085      	sub	sp, #20
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800c4f6:	e005      	b.n	800c504 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	3301      	adds	r3, #1
 800c4fc:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800c4fe:	79fb      	ldrb	r3, [r7, #7]
 800c500:	3b0a      	subs	r3, #10
 800c502:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800c504:	79fb      	ldrb	r3, [r7, #7]
 800c506:	2b09      	cmp	r3, #9
 800c508:	d8f6      	bhi.n	800c4f8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	011b      	lsls	r3, r3, #4
 800c510:	b2da      	uxtb	r2, r3
 800c512:	79fb      	ldrb	r3, [r7, #7]
 800c514:	4313      	orrs	r3, r2
 800c516:	b2db      	uxtb	r3, r3
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3714      	adds	r7, #20
 800c51c:	46bd      	mov	sp, r7
 800c51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c522:	4770      	bx	lr

0800c524 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c524:	b480      	push	{r7}
 800c526:	b085      	sub	sp, #20
 800c528:	af00      	add	r7, sp, #0
 800c52a:	4603      	mov	r3, r0
 800c52c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800c52e:	2300      	movs	r3, #0
 800c530:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800c532:	79fb      	ldrb	r3, [r7, #7]
 800c534:	091b      	lsrs	r3, r3, #4
 800c536:	b2db      	uxtb	r3, r3
 800c538:	461a      	mov	r2, r3
 800c53a:	4613      	mov	r3, r2
 800c53c:	009b      	lsls	r3, r3, #2
 800c53e:	4413      	add	r3, r2
 800c540:	005b      	lsls	r3, r3, #1
 800c542:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800c544:	79fb      	ldrb	r3, [r7, #7]
 800c546:	f003 030f 	and.w	r3, r3, #15
 800c54a:	b2da      	uxtb	r2, r3
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	b2db      	uxtb	r3, r3
 800c550:	4413      	add	r3, r2
 800c552:	b2db      	uxtb	r3, r3
}
 800c554:	4618      	mov	r0, r3
 800c556:	3714      	adds	r7, #20
 800c558:	46bd      	mov	sp, r7
 800c55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55e:	4770      	bx	lr

0800c560 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800c560:	b480      	push	{r7}
 800c562:	b087      	sub	sp, #28
 800c564:	af00      	add	r7, sp, #0
 800c566:	60f8      	str	r0, [r7, #12]
 800c568:	60b9      	str	r1, [r7, #8]
 800c56a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800c56c:	2300      	movs	r3, #0
 800c56e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	3350      	adds	r3, #80	; 0x50
 800c576:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	009b      	lsls	r3, r3, #2
 800c57c:	697a      	ldr	r2, [r7, #20]
 800c57e:	4413      	add	r3, r2
 800c580:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	687a      	ldr	r2, [r7, #4]
 800c586:	601a      	str	r2, [r3, #0]
}
 800c588:	bf00      	nop
 800c58a:	371c      	adds	r7, #28
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr

0800c594 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800c594:	b480      	push	{r7}
 800c596:	b085      	sub	sp, #20
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	3350      	adds	r3, #80	; 0x50
 800c5a8:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	009b      	lsls	r3, r3, #2
 800c5ae:	68fa      	ldr	r2, [r7, #12]
 800c5b0:	4413      	add	r3, r2
 800c5b2:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	681b      	ldr	r3, [r3, #0]
}
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	3714      	adds	r7, #20
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c2:	4770      	bx	lr

0800c5c4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c5c4:	b580      	push	{r7, lr}
 800c5c6:	b082      	sub	sp, #8
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d101      	bne.n	800c5d6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c5d2:	2301      	movs	r3, #1
 800c5d4:	e022      	b.n	800c61c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c5dc:	b2db      	uxtb	r3, r3
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d105      	bne.n	800c5ee <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f7f9 fdcb 	bl	8006184 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	2203      	movs	r2, #3
 800c5f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f000 f814 	bl	800c624 <HAL_SD_InitCard>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d001      	beq.n	800c606 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c602:	2301      	movs	r3, #1
 800c604:	e00a      	b.n	800c61c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2200      	movs	r2, #0
 800c60a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2200      	movs	r2, #0
 800c610:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2201      	movs	r2, #1
 800c616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c61a:	2300      	movs	r3, #0
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3708      	adds	r7, #8
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c624:	b5b0      	push	{r4, r5, r7, lr}
 800c626:	b08e      	sub	sp, #56	; 0x38
 800c628:	af04      	add	r7, sp, #16
 800c62a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800c62c:	2300      	movs	r3, #0
 800c62e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800c630:	2300      	movs	r3, #0
 800c632:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800c634:	2300      	movs	r3, #0
 800c636:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800c638:	2300      	movs	r3, #0
 800c63a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800c63c:	2300      	movs	r3, #0
 800c63e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800c640:	2376      	movs	r3, #118	; 0x76
 800c642:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681d      	ldr	r5, [r3, #0]
 800c648:	466c      	mov	r4, sp
 800c64a:	f107 0314 	add.w	r3, r7, #20
 800c64e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c652:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c656:	f107 0308 	add.w	r3, r7, #8
 800c65a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c65c:	4628      	mov	r0, r5
 800c65e:	f002 f94d 	bl	800e8fc <SDIO_Init>
 800c662:	4603      	mov	r3, r0
 800c664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800c668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d001      	beq.n	800c674 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800c670:	2301      	movs	r3, #1
 800c672:	e04c      	b.n	800c70e <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800c674:	4b28      	ldr	r3, [pc, #160]	; (800c718 <HAL_SD_InitCard+0xf4>)
 800c676:	2200      	movs	r2, #0
 800c678:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	4618      	mov	r0, r3
 800c680:	f002 f985 	bl	800e98e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800c684:	4b24      	ldr	r3, [pc, #144]	; (800c718 <HAL_SD_InitCard+0xf4>)
 800c686:	2201      	movs	r2, #1
 800c688:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f001 fb52 	bl	800dd34 <SD_PowerON>
 800c690:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c692:	6a3b      	ldr	r3, [r7, #32]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d00b      	beq.n	800c6b0 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2201      	movs	r2, #1
 800c69c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c6a4:	6a3b      	ldr	r3, [r7, #32]
 800c6a6:	431a      	orrs	r2, r3
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	e02e      	b.n	800c70e <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f001 fa73 	bl	800db9c <SD_InitCard>
 800c6b6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c6b8:	6a3b      	ldr	r3, [r7, #32]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d00b      	beq.n	800c6d6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c6ca:	6a3b      	ldr	r3, [r7, #32]
 800c6cc:	431a      	orrs	r2, r3
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c6d2:	2301      	movs	r3, #1
 800c6d4:	e01b      	b.n	800c70e <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f002 f9e8 	bl	800eab4 <SDMMC_CmdBlockLength>
 800c6e4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c6e6:	6a3b      	ldr	r3, [r7, #32]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d00f      	beq.n	800c70c <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	4a0a      	ldr	r2, [pc, #40]	; (800c71c <HAL_SD_InitCard+0xf8>)
 800c6f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c6f8:	6a3b      	ldr	r3, [r7, #32]
 800c6fa:	431a      	orrs	r2, r3
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2201      	movs	r2, #1
 800c704:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c708:	2301      	movs	r3, #1
 800c70a:	e000      	b.n	800c70e <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 800c70c:	2300      	movs	r3, #0
}
 800c70e:	4618      	mov	r0, r3
 800c710:	3728      	adds	r7, #40	; 0x28
 800c712:	46bd      	mov	sp, r7
 800c714:	bdb0      	pop	{r4, r5, r7, pc}
 800c716:	bf00      	nop
 800c718:	422580a0 	.word	0x422580a0
 800c71c:	004005ff 	.word	0x004005ff

0800c720 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b092      	sub	sp, #72	; 0x48
 800c724:	af00      	add	r7, sp, #0
 800c726:	60f8      	str	r0, [r7, #12]
 800c728:	60b9      	str	r1, [r7, #8]
 800c72a:	607a      	str	r2, [r7, #4]
 800c72c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c72e:	f7f9 ff9f 	bl	8006670 <HAL_GetTick>
 800c732:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d107      	bne.n	800c752 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c746:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c74e:	2301      	movs	r3, #1
 800c750:	e1bd      	b.n	800cace <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c758:	b2db      	uxtb	r3, r3
 800c75a:	2b01      	cmp	r3, #1
 800c75c:	f040 81b0 	bne.w	800cac0 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	2200      	movs	r2, #0
 800c764:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c766:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	441a      	add	r2, r3
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c770:	429a      	cmp	r2, r3
 800c772:	d907      	bls.n	800c784 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c778:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c780:	2301      	movs	r3, #1
 800c782:	e1a4      	b.n	800cace <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	2203      	movs	r2, #3
 800c788:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	2200      	movs	r2, #0
 800c792:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c798:	2b01      	cmp	r3, #1
 800c79a:	d002      	beq.n	800c7a2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800c79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c79e:	025b      	lsls	r3, r3, #9
 800c7a0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c7a2:	f04f 33ff 	mov.w	r3, #4294967295
 800c7a6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	025b      	lsls	r3, r3, #9
 800c7ac:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800c7ae:	2390      	movs	r3, #144	; 0x90
 800c7b0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800c7b2:	2302      	movs	r3, #2
 800c7b4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f107 0214 	add.w	r2, r7, #20
 800c7c6:	4611      	mov	r1, r2
 800c7c8:	4618      	mov	r0, r3
 800c7ca:	f002 f947 	bl	800ea5c <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	2b01      	cmp	r3, #1
 800c7d2:	d90a      	bls.n	800c7ea <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2202      	movs	r2, #2
 800c7d8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f002 f9ab 	bl	800eb3c <SDMMC_CmdReadMultiBlock>
 800c7e6:	6478      	str	r0, [r7, #68]	; 0x44
 800c7e8:	e009      	b.n	800c7fe <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	2201      	movs	r2, #1
 800c7ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f002 f97e 	bl	800eaf8 <SDMMC_CmdReadSingleBlock>
 800c7fc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c7fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c800:	2b00      	cmp	r3, #0
 800c802:	d012      	beq.n	800c82a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	4a7a      	ldr	r2, [pc, #488]	; (800c9f4 <HAL_SD_ReadBlocks+0x2d4>)
 800c80a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c812:	431a      	orrs	r2, r3
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	2201      	movs	r2, #1
 800c81c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	2200      	movs	r2, #0
 800c824:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c826:	2301      	movs	r3, #1
 800c828:	e151      	b.n	800cace <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800c82a:	69bb      	ldr	r3, [r7, #24]
 800c82c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800c82e:	e061      	b.n	800c8f4 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c836:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d03c      	beq.n	800c8b8 <HAL_SD_ReadBlocks+0x198>
 800c83e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c840:	2b00      	cmp	r3, #0
 800c842:	d039      	beq.n	800c8b8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800c844:	2300      	movs	r3, #0
 800c846:	643b      	str	r3, [r7, #64]	; 0x40
 800c848:	e033      	b.n	800c8b2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	4618      	mov	r0, r3
 800c850:	f002 f87f 	bl	800e952 <SDIO_ReadFIFO>
 800c854:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800c856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c858:	b2da      	uxtb	r2, r3
 800c85a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c85c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c85e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c860:	3301      	adds	r3, #1
 800c862:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800c864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c866:	3b01      	subs	r3, #1
 800c868:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800c86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c86c:	0a1b      	lsrs	r3, r3, #8
 800c86e:	b2da      	uxtb	r2, r3
 800c870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c872:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c876:	3301      	adds	r3, #1
 800c878:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800c87a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c87c:	3b01      	subs	r3, #1
 800c87e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800c880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c882:	0c1b      	lsrs	r3, r3, #16
 800c884:	b2da      	uxtb	r2, r3
 800c886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c888:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c88a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c88c:	3301      	adds	r3, #1
 800c88e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800c890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c892:	3b01      	subs	r3, #1
 800c894:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800c896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c898:	0e1b      	lsrs	r3, r3, #24
 800c89a:	b2da      	uxtb	r2, r3
 800c89c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c89e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800c8a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8a2:	3301      	adds	r3, #1
 800c8a4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800c8a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c8a8:	3b01      	subs	r3, #1
 800c8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800c8ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	643b      	str	r3, [r7, #64]	; 0x40
 800c8b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8b4:	2b07      	cmp	r3, #7
 800c8b6:	d9c8      	bls.n	800c84a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800c8b8:	f7f9 feda 	bl	8006670 <HAL_GetTick>
 800c8bc:	4602      	mov	r2, r0
 800c8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c0:	1ad3      	subs	r3, r2, r3
 800c8c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	d902      	bls.n	800c8ce <HAL_SD_ReadBlocks+0x1ae>
 800c8c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d112      	bne.n	800c8f4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	4a48      	ldr	r2, [pc, #288]	; (800c9f4 <HAL_SD_ReadBlocks+0x2d4>)
 800c8d4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8da:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	2201      	movs	r2, #1
 800c8e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800c8f0:	2303      	movs	r3, #3
 800c8f2:	e0ec      	b.n	800cace <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8fa:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d096      	beq.n	800c830 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d022      	beq.n	800c956 <HAL_SD_ReadBlocks+0x236>
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	2b01      	cmp	r3, #1
 800c914:	d91f      	bls.n	800c956 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c91a:	2b03      	cmp	r3, #3
 800c91c:	d01b      	beq.n	800c956 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	4618      	mov	r0, r3
 800c924:	f002 f970 	bl	800ec08 <SDMMC_CmdStopTransfer>
 800c928:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800c92a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d012      	beq.n	800c956 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	4a2f      	ldr	r2, [pc, #188]	; (800c9f4 <HAL_SD_ReadBlocks+0x2d4>)
 800c936:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c93c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c93e:	431a      	orrs	r2, r3
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	2201      	movs	r2, #1
 800c948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	2200      	movs	r2, #0
 800c950:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800c952:	2301      	movs	r3, #1
 800c954:	e0bb      	b.n	800cace <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c95c:	f003 0308 	and.w	r3, r3, #8
 800c960:	2b00      	cmp	r3, #0
 800c962:	d012      	beq.n	800c98a <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	4a22      	ldr	r2, [pc, #136]	; (800c9f4 <HAL_SD_ReadBlocks+0x2d4>)
 800c96a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c970:	f043 0208 	orr.w	r2, r3, #8
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	2201      	movs	r2, #1
 800c97c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	2200      	movs	r2, #0
 800c984:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c986:	2301      	movs	r3, #1
 800c988:	e0a1      	b.n	800cace <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c990:	f003 0302 	and.w	r3, r3, #2
 800c994:	2b00      	cmp	r3, #0
 800c996:	d012      	beq.n	800c9be <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4a15      	ldr	r2, [pc, #84]	; (800c9f4 <HAL_SD_ReadBlocks+0x2d4>)
 800c99e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9a4:	f043 0202 	orr.w	r2, r3, #2
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	2201      	movs	r2, #1
 800c9b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	e087      	b.n	800cace <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9c4:	f003 0320 	and.w	r3, r3, #32
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d064      	beq.n	800ca96 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	4a08      	ldr	r2, [pc, #32]	; (800c9f4 <HAL_SD_ReadBlocks+0x2d4>)
 800c9d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9d8:	f043 0220 	orr.w	r2, r3, #32
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	2201      	movs	r2, #1
 800c9e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	e06d      	b.n	800cace <HAL_SD_ReadBlocks+0x3ae>
 800c9f2:	bf00      	nop
 800c9f4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	f001 ffa8 	bl	800e952 <SDIO_ReadFIFO>
 800ca02:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800ca04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca06:	b2da      	uxtb	r2, r3
 800ca08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca0a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800ca0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca0e:	3301      	adds	r3, #1
 800ca10:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800ca12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca14:	3b01      	subs	r3, #1
 800ca16:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800ca18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca1a:	0a1b      	lsrs	r3, r3, #8
 800ca1c:	b2da      	uxtb	r2, r3
 800ca1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca20:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800ca22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca24:	3301      	adds	r3, #1
 800ca26:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800ca28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca2a:	3b01      	subs	r3, #1
 800ca2c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800ca2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca30:	0c1b      	lsrs	r3, r3, #16
 800ca32:	b2da      	uxtb	r2, r3
 800ca34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca36:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800ca38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca3a:	3301      	adds	r3, #1
 800ca3c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800ca3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca40:	3b01      	subs	r3, #1
 800ca42:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800ca44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca46:	0e1b      	lsrs	r3, r3, #24
 800ca48:	b2da      	uxtb	r2, r3
 800ca4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca4c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800ca4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca50:	3301      	adds	r3, #1
 800ca52:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800ca54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca56:	3b01      	subs	r3, #1
 800ca58:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800ca5a:	f7f9 fe09 	bl	8006670 <HAL_GetTick>
 800ca5e:	4602      	mov	r2, r0
 800ca60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca62:	1ad3      	subs	r3, r2, r3
 800ca64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ca66:	429a      	cmp	r2, r3
 800ca68:	d902      	bls.n	800ca70 <HAL_SD_ReadBlocks+0x350>
 800ca6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d112      	bne.n	800ca96 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4a18      	ldr	r2, [pc, #96]	; (800cad8 <HAL_SD_ReadBlocks+0x3b8>)
 800ca76:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca7c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	2201      	movs	r2, #1
 800ca88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800ca92:	2301      	movs	r3, #1
 800ca94:	e01b      	b.n	800cace <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d002      	beq.n	800caaa <HAL_SD_ReadBlocks+0x38a>
 800caa4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d1a6      	bne.n	800c9f8 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f240 523a 	movw	r2, #1338	; 0x53a
 800cab2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	2201      	movs	r2, #1
 800cab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800cabc:	2300      	movs	r3, #0
 800cabe:	e006      	b.n	800cace <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cac4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cacc:	2301      	movs	r3, #1
  }
}
 800cace:	4618      	mov	r0, r3
 800cad0:	3748      	adds	r7, #72	; 0x48
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}
 800cad6:	bf00      	nop
 800cad8:	004005ff 	.word	0x004005ff

0800cadc <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b092      	sub	sp, #72	; 0x48
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	60f8      	str	r0, [r7, #12]
 800cae4:	60b9      	str	r1, [r7, #8]
 800cae6:	607a      	str	r2, [r7, #4]
 800cae8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800caea:	f7f9 fdc1 	bl	8006670 <HAL_GetTick>
 800caee:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d107      	bne.n	800cb0e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb02:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	e165      	b.n	800cdda <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cb14:	b2db      	uxtb	r3, r3
 800cb16:	2b01      	cmp	r3, #1
 800cb18:	f040 8158 	bne.w	800cdcc <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cb22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	441a      	add	r2, r3
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d907      	bls.n	800cb40 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb34:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	e14c      	b.n	800cdda <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	2203      	movs	r2, #3
 800cb44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb54:	2b01      	cmp	r3, #1
 800cb56:	d002      	beq.n	800cb5e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800cb58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb5a:	025b      	lsls	r3, r3, #9
 800cb5c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cb5e:	f04f 33ff 	mov.w	r3, #4294967295
 800cb62:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	025b      	lsls	r3, r3, #9
 800cb68:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800cb6a:	2390      	movs	r3, #144	; 0x90
 800cb6c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800cb72:	2300      	movs	r3, #0
 800cb74:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800cb76:	2301      	movs	r3, #1
 800cb78:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f107 0218 	add.w	r2, r7, #24
 800cb82:	4611      	mov	r1, r2
 800cb84:	4618      	mov	r0, r3
 800cb86:	f001 ff69 	bl	800ea5c <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	2b01      	cmp	r3, #1
 800cb8e:	d90a      	bls.n	800cba6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	2220      	movs	r2, #32
 800cb94:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f002 f811 	bl	800ebc4 <SDMMC_CmdWriteMultiBlock>
 800cba2:	6478      	str	r0, [r7, #68]	; 0x44
 800cba4:	e009      	b.n	800cbba <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	2210      	movs	r2, #16
 800cbaa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f001 ffe4 	bl	800eb80 <SDMMC_CmdWriteSingleBlock>
 800cbb8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cbba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d012      	beq.n	800cbe6 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	4a87      	ldr	r2, [pc, #540]	; (800cde4 <HAL_SD_WriteBlocks+0x308>)
 800cbc6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbce:	431a      	orrs	r2, r3
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	2201      	movs	r2, #1
 800cbd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	2200      	movs	r2, #0
 800cbe0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	e0f9      	b.n	800cdda <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800cbe6:	69fb      	ldr	r3, [r7, #28]
 800cbe8:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800cbea:	e065      	b.n	800ccb8 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d040      	beq.n	800cc7c <HAL_SD_WriteBlocks+0x1a0>
 800cbfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d03d      	beq.n	800cc7c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800cc00:	2300      	movs	r3, #0
 800cc02:	643b      	str	r3, [r7, #64]	; 0x40
 800cc04:	e037      	b.n	800cc76 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800cc06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc08:	781b      	ldrb	r3, [r3, #0]
 800cc0a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800cc0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc0e:	3301      	adds	r3, #1
 800cc10:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800cc12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc14:	3b01      	subs	r3, #1
 800cc16:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800cc18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc1a:	781b      	ldrb	r3, [r3, #0]
 800cc1c:	021a      	lsls	r2, r3, #8
 800cc1e:	697b      	ldr	r3, [r7, #20]
 800cc20:	4313      	orrs	r3, r2
 800cc22:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800cc24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc26:	3301      	adds	r3, #1
 800cc28:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800cc2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc2c:	3b01      	subs	r3, #1
 800cc2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800cc30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc32:	781b      	ldrb	r3, [r3, #0]
 800cc34:	041a      	lsls	r2, r3, #16
 800cc36:	697b      	ldr	r3, [r7, #20]
 800cc38:	4313      	orrs	r3, r2
 800cc3a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800cc3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc3e:	3301      	adds	r3, #1
 800cc40:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800cc42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc44:	3b01      	subs	r3, #1
 800cc46:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800cc48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc4a:	781b      	ldrb	r3, [r3, #0]
 800cc4c:	061a      	lsls	r2, r3, #24
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	4313      	orrs	r3, r2
 800cc52:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800cc54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc56:	3301      	adds	r3, #1
 800cc58:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800cc5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cc5c:	3b01      	subs	r3, #1
 800cc5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	f107 0214 	add.w	r2, r7, #20
 800cc68:	4611      	mov	r1, r2
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f001 fe7e 	bl	800e96c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800cc70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc72:	3301      	adds	r3, #1
 800cc74:	643b      	str	r3, [r7, #64]	; 0x40
 800cc76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc78:	2b07      	cmp	r3, #7
 800cc7a:	d9c4      	bls.n	800cc06 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800cc7c:	f7f9 fcf8 	bl	8006670 <HAL_GetTick>
 800cc80:	4602      	mov	r2, r0
 800cc82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc84:	1ad3      	subs	r3, r2, r3
 800cc86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cc88:	429a      	cmp	r2, r3
 800cc8a:	d902      	bls.n	800cc92 <HAL_SD_WriteBlocks+0x1b6>
 800cc8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d112      	bne.n	800ccb8 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	4a53      	ldr	r2, [pc, #332]	; (800cde4 <HAL_SD_WriteBlocks+0x308>)
 800cc98:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cca0:	431a      	orrs	r2, r3
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	2201      	movs	r2, #1
 800ccaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800ccb4:	2303      	movs	r3, #3
 800ccb6:	e090      	b.n	800cdda <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccbe:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d092      	beq.n	800cbec <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d022      	beq.n	800cd1a <HAL_SD_WriteBlocks+0x23e>
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	2b01      	cmp	r3, #1
 800ccd8:	d91f      	bls.n	800cd1a <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccde:	2b03      	cmp	r3, #3
 800cce0:	d01b      	beq.n	800cd1a <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	4618      	mov	r0, r3
 800cce8:	f001 ff8e 	bl	800ec08 <SDMMC_CmdStopTransfer>
 800ccec:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800ccee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d012      	beq.n	800cd1a <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	4a3a      	ldr	r2, [pc, #232]	; (800cde4 <HAL_SD_WriteBlocks+0x308>)
 800ccfa:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd02:	431a      	orrs	r2, r3
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	2201      	movs	r2, #1
 800cd0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	2200      	movs	r2, #0
 800cd14:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800cd16:	2301      	movs	r3, #1
 800cd18:	e05f      	b.n	800cdda <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd20:	f003 0308 	and.w	r3, r3, #8
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d012      	beq.n	800cd4e <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	4a2d      	ldr	r2, [pc, #180]	; (800cde4 <HAL_SD_WriteBlocks+0x308>)
 800cd2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd34:	f043 0208 	orr.w	r2, r3, #8
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	2201      	movs	r2, #1
 800cd40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	2200      	movs	r2, #0
 800cd48:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	e045      	b.n	800cdda <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd54:	f003 0302 	and.w	r3, r3, #2
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d012      	beq.n	800cd82 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	4a20      	ldr	r2, [pc, #128]	; (800cde4 <HAL_SD_WriteBlocks+0x308>)
 800cd62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd68:	f043 0202 	orr.w	r2, r3, #2
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	2201      	movs	r2, #1
 800cd74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cd7e:	2301      	movs	r3, #1
 800cd80:	e02b      	b.n	800cdda <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd88:	f003 0310 	and.w	r3, r3, #16
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d012      	beq.n	800cdb6 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	4a13      	ldr	r2, [pc, #76]	; (800cde4 <HAL_SD_WriteBlocks+0x308>)
 800cd96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd9c:	f043 0210 	orr.w	r2, r3, #16
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	2201      	movs	r2, #1
 800cda8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	2200      	movs	r2, #0
 800cdb0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	e011      	b.n	800cdda <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	f240 523a 	movw	r2, #1338	; 0x53a
 800cdbe:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	2201      	movs	r2, #1
 800cdc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800cdc8:	2300      	movs	r3, #0
 800cdca:	e006      	b.n	800cdda <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdd0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cdd8:	2301      	movs	r3, #1
  }
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	3748      	adds	r7, #72	; 0x48
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}
 800cde2:	bf00      	nop
 800cde4:	004005ff 	.word	0x004005ff

0800cde8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b08c      	sub	sp, #48	; 0x30
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	60f8      	str	r0, [r7, #12]
 800cdf0:	60b9      	str	r1, [r7, #8]
 800cdf2:	607a      	str	r2, [r7, #4]
 800cdf4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d107      	bne.n	800ce10 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce04:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	e0be      	b.n	800cf8e <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ce16:	b2db      	uxtb	r3, r3
 800ce18:	2b01      	cmp	r3, #1
 800ce1a:	f040 80b7 	bne.w	800cf8c <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	2200      	movs	r2, #0
 800ce22:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ce24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	441a      	add	r2, r3
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce2e:	429a      	cmp	r2, r3
 800ce30:	d907      	bls.n	800ce42 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce36:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ce3e:	2301      	movs	r3, #1
 800ce40:	e0a5      	b.n	800cf8e <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	2203      	movs	r2, #3
 800ce46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800ce60:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce66:	4a4c      	ldr	r2, [pc, #304]	; (800cf98 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 800ce68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce6e:	4a4b      	ldr	r2, [pc, #300]	; (800cf9c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800ce70:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce76:	2200      	movs	r2, #0
 800ce78:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce7e:	2200      	movs	r2, #0
 800ce80:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce92:	689a      	ldr	r2, [r3, #8]
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	430a      	orrs	r2, r1
 800ce9c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	3380      	adds	r3, #128	; 0x80
 800cea8:	4619      	mov	r1, r3
 800ceaa:	68ba      	ldr	r2, [r7, #8]
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	025b      	lsls	r3, r3, #9
 800ceb0:	089b      	lsrs	r3, r3, #2
 800ceb2:	f7fb f887 	bl	8007fc4 <HAL_DMA_Start_IT>
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d017      	beq.n	800ceec <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800ceca:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4a33      	ldr	r2, [pc, #204]	; (800cfa0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800ced2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ced8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	2201      	movs	r2, #1
 800cee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800cee8:	2301      	movs	r3, #1
 800ceea:	e050      	b.n	800cf8e <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800ceec:	4b2d      	ldr	r3, [pc, #180]	; (800cfa4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800ceee:	2201      	movs	r2, #1
 800cef0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cef6:	2b01      	cmp	r3, #1
 800cef8:	d002      	beq.n	800cf00 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 800cefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cefc:	025b      	lsls	r3, r3, #9
 800cefe:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cf00:	f04f 33ff 	mov.w	r3, #4294967295
 800cf04:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	025b      	lsls	r3, r3, #9
 800cf0a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800cf0c:	2390      	movs	r3, #144	; 0x90
 800cf0e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800cf10:	2302      	movs	r3, #2
 800cf12:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800cf14:	2300      	movs	r3, #0
 800cf16:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800cf18:	2301      	movs	r3, #1
 800cf1a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	f107 0210 	add.w	r2, r7, #16
 800cf24:	4611      	mov	r1, r2
 800cf26:	4618      	mov	r0, r3
 800cf28:	f001 fd98 	bl	800ea5c <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	2b01      	cmp	r3, #1
 800cf30:	d90a      	bls.n	800cf48 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	2282      	movs	r2, #130	; 0x82
 800cf36:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f001 fdfc 	bl	800eb3c <SDMMC_CmdReadMultiBlock>
 800cf44:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cf46:	e009      	b.n	800cf5c <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	2281      	movs	r2, #129	; 0x81
 800cf4c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf54:	4618      	mov	r0, r3
 800cf56:	f001 fdcf 	bl	800eaf8 <SDMMC_CmdReadSingleBlock>
 800cf5a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800cf5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d012      	beq.n	800cf88 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	4a0e      	ldr	r2, [pc, #56]	; (800cfa0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800cf68:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf70:	431a      	orrs	r2, r3
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	2201      	movs	r2, #1
 800cf7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	2200      	movs	r2, #0
 800cf82:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800cf84:	2301      	movs	r3, #1
 800cf86:	e002      	b.n	800cf8e <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	e000      	b.n	800cf8e <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 800cf8c:	2302      	movs	r3, #2
  }
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	3730      	adds	r7, #48	; 0x30
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}
 800cf96:	bf00      	nop
 800cf98:	0800d9ab 	.word	0x0800d9ab
 800cf9c:	0800da1d 	.word	0x0800da1d
 800cfa0:	004005ff 	.word	0x004005ff
 800cfa4:	4225858c 	.word	0x4225858c

0800cfa8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b08c      	sub	sp, #48	; 0x30
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	60f8      	str	r0, [r7, #12]
 800cfb0:	60b9      	str	r1, [r7, #8]
 800cfb2:	607a      	str	r2, [r7, #4]
 800cfb4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d107      	bne.n	800cfd0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfc4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cfcc:	2301      	movs	r3, #1
 800cfce:	e0c1      	b.n	800d154 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cfd6:	b2db      	uxtb	r3, r3
 800cfd8:	2b01      	cmp	r3, #1
 800cfda:	f040 80ba 	bne.w	800d152 <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cfe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cfe6:	683b      	ldr	r3, [r7, #0]
 800cfe8:	441a      	add	r2, r3
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cfee:	429a      	cmp	r2, r3
 800cff0:	d907      	bls.n	800d002 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cff6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cffe:	2301      	movs	r3, #1
 800d000:	e0a8      	b.n	800d154 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	2203      	movs	r2, #3
 800d006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	2200      	movs	r2, #0
 800d010:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	f042 021a 	orr.w	r2, r2, #26
 800d020:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d026:	4a4d      	ldr	r2, [pc, #308]	; (800d15c <HAL_SD_WriteBlocks_DMA+0x1b4>)
 800d028:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d02e:	4a4c      	ldr	r2, [pc, #304]	; (800d160 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 800d030:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d036:	2200      	movs	r2, #0
 800d038:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d03e:	2b01      	cmp	r3, #1
 800d040:	d002      	beq.n	800d048 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800d042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d044:	025b      	lsls	r3, r3, #9
 800d046:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	2b01      	cmp	r3, #1
 800d04c:	d90a      	bls.n	800d064 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	22a0      	movs	r2, #160	; 0xa0
 800d052:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d05a:	4618      	mov	r0, r3
 800d05c:	f001 fdb2 	bl	800ebc4 <SDMMC_CmdWriteMultiBlock>
 800d060:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d062:	e009      	b.n	800d078 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2290      	movs	r2, #144	; 0x90
 800d068:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d070:	4618      	mov	r0, r3
 800d072:	f001 fd85 	bl	800eb80 <SDMMC_CmdWriteSingleBlock>
 800d076:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d012      	beq.n	800d0a4 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	4a38      	ldr	r2, [pc, #224]	; (800d164 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800d084:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d08c:	431a      	orrs	r2, r3
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	2201      	movs	r2, #1
 800d096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	2200      	movs	r2, #0
 800d09e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	e057      	b.n	800d154 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800d0a4:	4b30      	ldr	r3, [pc, #192]	; (800d168 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800d0a6:	2201      	movs	r2, #1
 800d0a8:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0ae:	2240      	movs	r2, #64	; 0x40
 800d0b0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0c2:	689a      	ldr	r2, [r3, #8]
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	430a      	orrs	r2, r1
 800d0cc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d0d2:	68b9      	ldr	r1, [r7, #8]
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	3380      	adds	r3, #128	; 0x80
 800d0da:	461a      	mov	r2, r3
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	025b      	lsls	r3, r3, #9
 800d0e0:	089b      	lsrs	r3, r3, #2
 800d0e2:	f7fa ff6f 	bl	8007fc4 <HAL_DMA_Start_IT>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d01a      	beq.n	800d122 <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	f022 021a 	bic.w	r2, r2, #26
 800d0fa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	4a18      	ldr	r2, [pc, #96]	; (800d164 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800d102:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d108:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	2201      	movs	r2, #1
 800d114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	2200      	movs	r2, #0
 800d11c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d11e:	2301      	movs	r3, #1
 800d120:	e018      	b.n	800d154 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d122:	f04f 33ff 	mov.w	r3, #4294967295
 800d126:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d128:	683b      	ldr	r3, [r7, #0]
 800d12a:	025b      	lsls	r3, r3, #9
 800d12c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d12e:	2390      	movs	r3, #144	; 0x90
 800d130:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d132:	2300      	movs	r3, #0
 800d134:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d136:	2300      	movs	r3, #0
 800d138:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d13a:	2301      	movs	r3, #1
 800d13c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	f107 0210 	add.w	r2, r7, #16
 800d146:	4611      	mov	r1, r2
 800d148:	4618      	mov	r0, r3
 800d14a:	f001 fc87 	bl	800ea5c <SDIO_ConfigData>

      return HAL_OK;
 800d14e:	2300      	movs	r3, #0
 800d150:	e000      	b.n	800d154 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 800d152:	2302      	movs	r3, #2
  }
}
 800d154:	4618      	mov	r0, r3
 800d156:	3730      	adds	r7, #48	; 0x30
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}
 800d15c:	0800d981 	.word	0x0800d981
 800d160:	0800da1d 	.word	0x0800da1d
 800d164:	004005ff 	.word	0x004005ff
 800d168:	4225858c 	.word	0x4225858c

0800d16c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b084      	sub	sp, #16
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d178:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d180:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d184:	2b00      	cmp	r3, #0
 800d186:	d008      	beq.n	800d19a <HAL_SD_IRQHandler+0x2e>
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	f003 0308 	and.w	r3, r3, #8
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d003      	beq.n	800d19a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d192:	6878      	ldr	r0, [r7, #4]
 800d194:	f000 ffed 	bl	800e172 <SD_Read_IT>
 800d198:	e155      	b.n	800d446 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	f000 808f 	beq.w	800d2c8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d1b2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1ba:	687a      	ldr	r2, [r7, #4]
 800d1bc:	6812      	ldr	r2, [r2, #0]
 800d1be:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800d1c2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800d1c6:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	f022 0201 	bic.w	r2, r2, #1
 800d1d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	f003 0308 	and.w	r3, r3, #8
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d039      	beq.n	800d256 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	f003 0302 	and.w	r3, r3, #2
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d104      	bne.n	800d1f6 <HAL_SD_IRQHandler+0x8a>
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	f003 0320 	and.w	r3, r3, #32
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d011      	beq.n	800d21a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	f001 fd04 	bl	800ec08 <SDMMC_CmdStopTransfer>
 800d200:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d202:	68bb      	ldr	r3, [r7, #8]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d008      	beq.n	800d21a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	431a      	orrs	r2, r3
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f000 f91f 	bl	800d458 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f240 523a 	movw	r2, #1338	; 0x53a
 800d222:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2201      	movs	r2, #1
 800d228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2200      	movs	r2, #0
 800d230:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	f003 0301 	and.w	r3, r3, #1
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d104      	bne.n	800d246 <HAL_SD_IRQHandler+0xda>
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	f003 0302 	and.w	r3, r3, #2
 800d242:	2b00      	cmp	r3, #0
 800d244:	d003      	beq.n	800d24e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f003 fce6 	bl	8010c18 <HAL_SD_RxCpltCallback>
 800d24c:	e0fb      	b.n	800d446 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f003 fcd8 	bl	8010c04 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d254:	e0f7      	b.n	800d446 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	f000 80f2 	beq.w	800d446 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	f003 0320 	and.w	r3, r3, #32
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d011      	beq.n	800d290 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4618      	mov	r0, r3
 800d272:	f001 fcc9 	bl	800ec08 <SDMMC_CmdStopTransfer>
 800d276:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d008      	beq.n	800d290 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	431a      	orrs	r2, r3
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f000 f8e4 	bl	800d458 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	f003 0301 	and.w	r3, r3, #1
 800d296:	2b00      	cmp	r3, #0
 800d298:	f040 80d5 	bne.w	800d446 <HAL_SD_IRQHandler+0x2da>
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	f003 0302 	and.w	r3, r3, #2
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	f040 80cf 	bne.w	800d446 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	f022 0208 	bic.w	r2, r2, #8
 800d2b6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2201      	movs	r2, #1
 800d2bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f003 fc9f 	bl	8010c04 <HAL_SD_TxCpltCallback>
}
 800d2c6:	e0be      	b.n	800d446 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d008      	beq.n	800d2e8 <HAL_SD_IRQHandler+0x17c>
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	f003 0308 	and.w	r3, r3, #8
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d003      	beq.n	800d2e8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f000 ff97 	bl	800e214 <SD_Write_IT>
 800d2e6:	e0ae      	b.n	800d446 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2ee:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	f000 80a7 	beq.w	800d446 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2fe:	f003 0302 	and.w	r3, r3, #2
 800d302:	2b00      	cmp	r3, #0
 800d304:	d005      	beq.n	800d312 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d30a:	f043 0202 	orr.w	r2, r3, #2
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d318:	f003 0308 	and.w	r3, r3, #8
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d005      	beq.n	800d32c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d324:	f043 0208 	orr.w	r2, r3, #8
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d332:	f003 0320 	and.w	r3, r3, #32
 800d336:	2b00      	cmp	r3, #0
 800d338:	d005      	beq.n	800d346 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d33e:	f043 0220 	orr.w	r2, r3, #32
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d34c:	f003 0310 	and.w	r3, r3, #16
 800d350:	2b00      	cmp	r3, #0
 800d352:	d005      	beq.n	800d360 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d358:	f043 0210 	orr.w	r2, r3, #16
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	f240 523a 	movw	r2, #1338	; 0x53a
 800d368:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d378:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	4618      	mov	r0, r3
 800d380:	f001 fc42 	bl	800ec08 <SDMMC_CmdStopTransfer>
 800d384:	4602      	mov	r2, r0
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d38a:	431a      	orrs	r2, r3
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	f003 0308 	and.w	r3, r3, #8
 800d396:	2b00      	cmp	r3, #0
 800d398:	d00a      	beq.n	800d3b0 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2201      	movs	r2, #1
 800d39e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d3a8:	6878      	ldr	r0, [r7, #4]
 800d3aa:	f000 f855 	bl	800d458 <HAL_SD_ErrorCallback>
}
 800d3ae:	e04a      	b.n	800d446 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d045      	beq.n	800d446 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	f003 0310 	and.w	r3, r3, #16
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d104      	bne.n	800d3ce <HAL_SD_IRQHandler+0x262>
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	f003 0320 	and.w	r3, r3, #32
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d011      	beq.n	800d3f2 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3d2:	4a1f      	ldr	r2, [pc, #124]	; (800d450 <HAL_SD_IRQHandler+0x2e4>)
 800d3d4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f7fa fe4a 	bl	8008074 <HAL_DMA_Abort_IT>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d02f      	beq.n	800d446 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f000 fb68 	bl	800dac0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d3f0:	e029      	b.n	800d446 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	f003 0301 	and.w	r3, r3, #1
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d104      	bne.n	800d406 <HAL_SD_IRQHandler+0x29a>
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	f003 0302 	and.w	r3, r3, #2
 800d402:	2b00      	cmp	r3, #0
 800d404:	d011      	beq.n	800d42a <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d40a:	4a12      	ldr	r2, [pc, #72]	; (800d454 <HAL_SD_IRQHandler+0x2e8>)
 800d40c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d412:	4618      	mov	r0, r3
 800d414:	f7fa fe2e 	bl	8008074 <HAL_DMA_Abort_IT>
 800d418:	4603      	mov	r3, r0
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d013      	beq.n	800d446 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d422:	4618      	mov	r0, r3
 800d424:	f000 fb83 	bl	800db2e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d428:	e00d      	b.n	800d446 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2200      	movs	r2, #0
 800d42e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	2201      	movs	r2, #1
 800d434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2200      	movs	r2, #0
 800d43c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f003 fbd6 	bl	8010bf0 <HAL_SD_AbortCallback>
}
 800d444:	e7ff      	b.n	800d446 <HAL_SD_IRQHandler+0x2da>
 800d446:	bf00      	nop
 800d448:	3710      	adds	r7, #16
 800d44a:	46bd      	mov	sp, r7
 800d44c:	bd80      	pop	{r7, pc}
 800d44e:	bf00      	nop
 800d450:	0800dac1 	.word	0x0800dac1
 800d454:	0800db2f 	.word	0x0800db2f

0800d458 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d458:	b480      	push	{r7}
 800d45a:	b083      	sub	sp, #12
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d460:	bf00      	nop
 800d462:	370c      	adds	r7, #12
 800d464:	46bd      	mov	sp, r7
 800d466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46a:	4770      	bx	lr

0800d46c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d46c:	b480      	push	{r7}
 800d46e:	b083      	sub	sp, #12
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d47a:	0f9b      	lsrs	r3, r3, #30
 800d47c:	b2da      	uxtb	r2, r3
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d486:	0e9b      	lsrs	r3, r3, #26
 800d488:	b2db      	uxtb	r3, r3
 800d48a:	f003 030f 	and.w	r3, r3, #15
 800d48e:	b2da      	uxtb	r2, r3
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d498:	0e1b      	lsrs	r3, r3, #24
 800d49a:	b2db      	uxtb	r3, r3
 800d49c:	f003 0303 	and.w	r3, r3, #3
 800d4a0:	b2da      	uxtb	r2, r3
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d4aa:	0c1b      	lsrs	r3, r3, #16
 800d4ac:	b2da      	uxtb	r2, r3
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d4b6:	0a1b      	lsrs	r3, r3, #8
 800d4b8:	b2da      	uxtb	r2, r3
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d4c2:	b2da      	uxtb	r2, r3
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d4cc:	0d1b      	lsrs	r3, r3, #20
 800d4ce:	b29a      	uxth	r2, r3
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d4d8:	0c1b      	lsrs	r3, r3, #16
 800d4da:	b2db      	uxtb	r3, r3
 800d4dc:	f003 030f 	and.w	r3, r3, #15
 800d4e0:	b2da      	uxtb	r2, r3
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d4ea:	0bdb      	lsrs	r3, r3, #15
 800d4ec:	b2db      	uxtb	r3, r3
 800d4ee:	f003 0301 	and.w	r3, r3, #1
 800d4f2:	b2da      	uxtb	r2, r3
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d4fc:	0b9b      	lsrs	r3, r3, #14
 800d4fe:	b2db      	uxtb	r3, r3
 800d500:	f003 0301 	and.w	r3, r3, #1
 800d504:	b2da      	uxtb	r2, r3
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d50e:	0b5b      	lsrs	r3, r3, #13
 800d510:	b2db      	uxtb	r3, r3
 800d512:	f003 0301 	and.w	r3, r3, #1
 800d516:	b2da      	uxtb	r2, r3
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d520:	0b1b      	lsrs	r3, r3, #12
 800d522:	b2db      	uxtb	r3, r3
 800d524:	f003 0301 	and.w	r3, r3, #1
 800d528:	b2da      	uxtb	r2, r3
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	2200      	movs	r2, #0
 800d532:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d163      	bne.n	800d604 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d540:	009a      	lsls	r2, r3, #2
 800d542:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d546:	4013      	ands	r3, r2
 800d548:	687a      	ldr	r2, [r7, #4]
 800d54a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d54c:	0f92      	lsrs	r2, r2, #30
 800d54e:	431a      	orrs	r2, r3
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d558:	0edb      	lsrs	r3, r3, #27
 800d55a:	b2db      	uxtb	r3, r3
 800d55c:	f003 0307 	and.w	r3, r3, #7
 800d560:	b2da      	uxtb	r2, r3
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d56a:	0e1b      	lsrs	r3, r3, #24
 800d56c:	b2db      	uxtb	r3, r3
 800d56e:	f003 0307 	and.w	r3, r3, #7
 800d572:	b2da      	uxtb	r2, r3
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d57c:	0d5b      	lsrs	r3, r3, #21
 800d57e:	b2db      	uxtb	r3, r3
 800d580:	f003 0307 	and.w	r3, r3, #7
 800d584:	b2da      	uxtb	r2, r3
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d58e:	0c9b      	lsrs	r3, r3, #18
 800d590:	b2db      	uxtb	r3, r3
 800d592:	f003 0307 	and.w	r3, r3, #7
 800d596:	b2da      	uxtb	r2, r3
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d5a0:	0bdb      	lsrs	r3, r3, #15
 800d5a2:	b2db      	uxtb	r3, r3
 800d5a4:	f003 0307 	and.w	r3, r3, #7
 800d5a8:	b2da      	uxtb	r2, r3
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	691b      	ldr	r3, [r3, #16]
 800d5b2:	1c5a      	adds	r2, r3, #1
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	7e1b      	ldrb	r3, [r3, #24]
 800d5bc:	b2db      	uxtb	r3, r3
 800d5be:	f003 0307 	and.w	r3, r3, #7
 800d5c2:	3302      	adds	r3, #2
 800d5c4:	2201      	movs	r2, #1
 800d5c6:	fa02 f303 	lsl.w	r3, r2, r3
 800d5ca:	687a      	ldr	r2, [r7, #4]
 800d5cc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d5ce:	fb02 f203 	mul.w	r2, r2, r3
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	7a1b      	ldrb	r3, [r3, #8]
 800d5da:	b2db      	uxtb	r3, r3
 800d5dc:	f003 030f 	and.w	r3, r3, #15
 800d5e0:	2201      	movs	r2, #1
 800d5e2:	409a      	lsls	r2, r3
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5ec:	687a      	ldr	r2, [r7, #4]
 800d5ee:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d5f0:	0a52      	lsrs	r2, r2, #9
 800d5f2:	fb02 f203 	mul.w	r2, r2, r3
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d600:	661a      	str	r2, [r3, #96]	; 0x60
 800d602:	e031      	b.n	800d668 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d608:	2b01      	cmp	r3, #1
 800d60a:	d11d      	bne.n	800d648 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d610:	041b      	lsls	r3, r3, #16
 800d612:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d61a:	0c1b      	lsrs	r3, r3, #16
 800d61c:	431a      	orrs	r2, r3
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	691b      	ldr	r3, [r3, #16]
 800d626:	3301      	adds	r3, #1
 800d628:	029a      	lsls	r2, r3, #10
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d63c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	661a      	str	r2, [r3, #96]	; 0x60
 800d646:	e00f      	b.n	800d668 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	4a58      	ldr	r2, [pc, #352]	; (800d7b0 <HAL_SD_GetCardCSD+0x344>)
 800d64e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d654:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2201      	movs	r2, #1
 800d660:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d664:	2301      	movs	r3, #1
 800d666:	e09d      	b.n	800d7a4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d66c:	0b9b      	lsrs	r3, r3, #14
 800d66e:	b2db      	uxtb	r3, r3
 800d670:	f003 0301 	and.w	r3, r3, #1
 800d674:	b2da      	uxtb	r2, r3
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d67e:	09db      	lsrs	r3, r3, #7
 800d680:	b2db      	uxtb	r3, r3
 800d682:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d686:	b2da      	uxtb	r2, r3
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d690:	b2db      	uxtb	r3, r3
 800d692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d696:	b2da      	uxtb	r2, r3
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6a0:	0fdb      	lsrs	r3, r3, #31
 800d6a2:	b2da      	uxtb	r2, r3
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6ac:	0f5b      	lsrs	r3, r3, #29
 800d6ae:	b2db      	uxtb	r3, r3
 800d6b0:	f003 0303 	and.w	r3, r3, #3
 800d6b4:	b2da      	uxtb	r2, r3
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6be:	0e9b      	lsrs	r3, r3, #26
 800d6c0:	b2db      	uxtb	r3, r3
 800d6c2:	f003 0307 	and.w	r3, r3, #7
 800d6c6:	b2da      	uxtb	r2, r3
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6d0:	0d9b      	lsrs	r3, r3, #22
 800d6d2:	b2db      	uxtb	r3, r3
 800d6d4:	f003 030f 	and.w	r3, r3, #15
 800d6d8:	b2da      	uxtb	r2, r3
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6e2:	0d5b      	lsrs	r3, r3, #21
 800d6e4:	b2db      	uxtb	r3, r3
 800d6e6:	f003 0301 	and.w	r3, r3, #1
 800d6ea:	b2da      	uxtb	r2, r3
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6fe:	0c1b      	lsrs	r3, r3, #16
 800d700:	b2db      	uxtb	r3, r3
 800d702:	f003 0301 	and.w	r3, r3, #1
 800d706:	b2da      	uxtb	r2, r3
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d712:	0bdb      	lsrs	r3, r3, #15
 800d714:	b2db      	uxtb	r3, r3
 800d716:	f003 0301 	and.w	r3, r3, #1
 800d71a:	b2da      	uxtb	r2, r3
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d726:	0b9b      	lsrs	r3, r3, #14
 800d728:	b2db      	uxtb	r3, r3
 800d72a:	f003 0301 	and.w	r3, r3, #1
 800d72e:	b2da      	uxtb	r2, r3
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d73a:	0b5b      	lsrs	r3, r3, #13
 800d73c:	b2db      	uxtb	r3, r3
 800d73e:	f003 0301 	and.w	r3, r3, #1
 800d742:	b2da      	uxtb	r2, r3
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d74e:	0b1b      	lsrs	r3, r3, #12
 800d750:	b2db      	uxtb	r3, r3
 800d752:	f003 0301 	and.w	r3, r3, #1
 800d756:	b2da      	uxtb	r2, r3
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d762:	0a9b      	lsrs	r3, r3, #10
 800d764:	b2db      	uxtb	r3, r3
 800d766:	f003 0303 	and.w	r3, r3, #3
 800d76a:	b2da      	uxtb	r2, r3
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d776:	0a1b      	lsrs	r3, r3, #8
 800d778:	b2db      	uxtb	r3, r3
 800d77a:	f003 0303 	and.w	r3, r3, #3
 800d77e:	b2da      	uxtb	r2, r3
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d78a:	085b      	lsrs	r3, r3, #1
 800d78c:	b2db      	uxtb	r3, r3
 800d78e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d792:	b2da      	uxtb	r2, r3
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	2201      	movs	r2, #1
 800d79e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d7a2:	2300      	movs	r3, #0
}
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	370c      	adds	r7, #12
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ae:	4770      	bx	lr
 800d7b0:	004005ff 	.word	0x004005ff

0800d7b4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d7b4:	b480      	push	{r7}
 800d7b6:	b083      	sub	sp, #12
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
 800d7bc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d7fe:	2300      	movs	r3, #0
}
 800d800:	4618      	mov	r0, r3
 800d802:	370c      	adds	r7, #12
 800d804:	46bd      	mov	sp, r7
 800d806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80a:	4770      	bx	lr

0800d80c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d80c:	b5b0      	push	{r4, r5, r7, lr}
 800d80e:	b08e      	sub	sp, #56	; 0x38
 800d810:	af04      	add	r7, sp, #16
 800d812:	6078      	str	r0, [r7, #4]
 800d814:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d816:	2300      	movs	r3, #0
 800d818:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2203      	movs	r2, #3
 800d820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d828:	2b03      	cmp	r3, #3
 800d82a:	d02e      	beq.n	800d88a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d832:	d106      	bne.n	800d842 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d838:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	639a      	str	r2, [r3, #56]	; 0x38
 800d840:	e029      	b.n	800d896 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d848:	d10a      	bne.n	800d860 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f000 fb28 	bl	800dea0 <SD_WideBus_Enable>
 800d850:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d856:	6a3b      	ldr	r3, [r7, #32]
 800d858:	431a      	orrs	r2, r3
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	639a      	str	r2, [r3, #56]	; 0x38
 800d85e:	e01a      	b.n	800d896 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d10a      	bne.n	800d87c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f000 fb65 	bl	800df36 <SD_WideBus_Disable>
 800d86c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d872:	6a3b      	ldr	r3, [r7, #32]
 800d874:	431a      	orrs	r2, r3
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	639a      	str	r2, [r3, #56]	; 0x38
 800d87a:	e00c      	b.n	800d896 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d880:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	639a      	str	r2, [r3, #56]	; 0x38
 800d888:	e005      	b.n	800d896 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d88e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d00b      	beq.n	800d8b6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	4a26      	ldr	r2, [pc, #152]	; (800d93c <HAL_SD_ConfigWideBusOperation+0x130>)
 800d8a4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	2201      	movs	r2, #1
 800d8aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800d8ae:	2301      	movs	r3, #1
 800d8b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d8b4:	e01f      	b.n	800d8f6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	685b      	ldr	r3, [r3, #4]
 800d8ba:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	689b      	ldr	r3, [r3, #8]
 800d8c0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	68db      	ldr	r3, [r3, #12]
 800d8c6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	695b      	ldr	r3, [r3, #20]
 800d8d0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	699b      	ldr	r3, [r3, #24]
 800d8d6:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681d      	ldr	r5, [r3, #0]
 800d8dc:	466c      	mov	r4, sp
 800d8de:	f107 0314 	add.w	r3, r7, #20
 800d8e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d8e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d8ea:	f107 0308 	add.w	r3, r7, #8
 800d8ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d8f0:	4628      	mov	r0, r5
 800d8f2:	f001 f803 	bl	800e8fc <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d8fe:	4618      	mov	r0, r3
 800d900:	f001 f8d8 	bl	800eab4 <SDMMC_CmdBlockLength>
 800d904:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d906:	6a3b      	ldr	r3, [r7, #32]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d00c      	beq.n	800d926 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	4a0a      	ldr	r2, [pc, #40]	; (800d93c <HAL_SD_ConfigWideBusOperation+0x130>)
 800d912:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d918:	6a3b      	ldr	r3, [r7, #32]
 800d91a:	431a      	orrs	r2, r3
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800d920:	2301      	movs	r3, #1
 800d922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2201      	movs	r2, #1
 800d92a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800d92e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d932:	4618      	mov	r0, r3
 800d934:	3728      	adds	r7, #40	; 0x28
 800d936:	46bd      	mov	sp, r7
 800d938:	bdb0      	pop	{r4, r5, r7, pc}
 800d93a:	bf00      	nop
 800d93c:	004005ff 	.word	0x004005ff

0800d940 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b086      	sub	sp, #24
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d948:	2300      	movs	r3, #0
 800d94a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d94c:	f107 030c 	add.w	r3, r7, #12
 800d950:	4619      	mov	r1, r3
 800d952:	6878      	ldr	r0, [r7, #4]
 800d954:	f000 fa7c 	bl	800de50 <SD_SendStatus>
 800d958:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d005      	beq.n	800d96c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	431a      	orrs	r2, r3
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	0a5b      	lsrs	r3, r3, #9
 800d970:	f003 030f 	and.w	r3, r3, #15
 800d974:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d976:	693b      	ldr	r3, [r7, #16]
}
 800d978:	4618      	mov	r0, r3
 800d97a:	3718      	adds	r7, #24
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}

0800d980 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d980:	b480      	push	{r7}
 800d982:	b085      	sub	sp, #20
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d98c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d99c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800d99e:	bf00      	nop
 800d9a0:	3714      	adds	r7, #20
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a8:	4770      	bx	lr

0800d9aa <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d9aa:	b580      	push	{r7, lr}
 800d9ac:	b084      	sub	sp, #16
 800d9ae:	af00      	add	r7, sp, #0
 800d9b0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9b6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9bc:	2b82      	cmp	r3, #130	; 0x82
 800d9be:	d111      	bne.n	800d9e4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f001 f91f 	bl	800ec08 <SDMMC_CmdStopTransfer>
 800d9ca:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d008      	beq.n	800d9e4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	431a      	orrs	r2, r3
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800d9de:	68f8      	ldr	r0, [r7, #12]
 800d9e0:	f7ff fd3a 	bl	800d458 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	f022 0208 	bic.w	r2, r2, #8
 800d9f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	f240 523a 	movw	r2, #1338	; 0x53a
 800d9fc:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	2201      	movs	r2, #1
 800da02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	2200      	movs	r2, #0
 800da0a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800da0c:	68f8      	ldr	r0, [r7, #12]
 800da0e:	f003 f903 	bl	8010c18 <HAL_SD_RxCpltCallback>
#endif
}
 800da12:	bf00      	nop
 800da14:	3710      	adds	r7, #16
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}
	...

0800da1c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b086      	sub	sp, #24
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da28:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f7fa fcce 	bl	80083cc <HAL_DMA_GetError>
 800da30:	4603      	mov	r3, r0
 800da32:	2b02      	cmp	r3, #2
 800da34:	d03e      	beq.n	800dab4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800da36:	697b      	ldr	r3, [r7, #20]
 800da38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da3c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800da3e:	697b      	ldr	r3, [r7, #20]
 800da40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da44:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800da46:	693b      	ldr	r3, [r7, #16]
 800da48:	2b01      	cmp	r3, #1
 800da4a:	d002      	beq.n	800da52 <SD_DMAError+0x36>
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	2b01      	cmp	r3, #1
 800da50:	d12d      	bne.n	800daae <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800da52:	697b      	ldr	r3, [r7, #20]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	4a19      	ldr	r2, [pc, #100]	; (800dabc <SD_DMAError+0xa0>)
 800da58:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800da60:	697b      	ldr	r3, [r7, #20]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800da68:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800da6a:	697b      	ldr	r3, [r7, #20]
 800da6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da6e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800da76:	6978      	ldr	r0, [r7, #20]
 800da78:	f7ff ff62 	bl	800d940 <HAL_SD_GetCardState>
 800da7c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800da7e:	68bb      	ldr	r3, [r7, #8]
 800da80:	2b06      	cmp	r3, #6
 800da82:	d002      	beq.n	800da8a <SD_DMAError+0x6e>
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	2b05      	cmp	r3, #5
 800da88:	d10a      	bne.n	800daa0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800da8a:	697b      	ldr	r3, [r7, #20]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	4618      	mov	r0, r3
 800da90:	f001 f8ba 	bl	800ec08 <SDMMC_CmdStopTransfer>
 800da94:	4602      	mov	r2, r0
 800da96:	697b      	ldr	r3, [r7, #20]
 800da98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da9a:	431a      	orrs	r2, r3
 800da9c:	697b      	ldr	r3, [r7, #20]
 800da9e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800daa0:	697b      	ldr	r3, [r7, #20]
 800daa2:	2201      	movs	r2, #1
 800daa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	2200      	movs	r2, #0
 800daac:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800daae:	6978      	ldr	r0, [r7, #20]
 800dab0:	f7ff fcd2 	bl	800d458 <HAL_SD_ErrorCallback>
#endif
  }
}
 800dab4:	bf00      	nop
 800dab6:	3718      	adds	r7, #24
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}
 800dabc:	004005ff 	.word	0x004005ff

0800dac0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b084      	sub	sp, #16
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dacc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	f240 523a 	movw	r2, #1338	; 0x53a
 800dad6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800dad8:	68f8      	ldr	r0, [r7, #12]
 800dada:	f7ff ff31 	bl	800d940 <HAL_SD_GetCardState>
 800dade:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	2201      	movs	r2, #1
 800dae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	2200      	movs	r2, #0
 800daec:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	2b06      	cmp	r3, #6
 800daf2:	d002      	beq.n	800dafa <SD_DMATxAbort+0x3a>
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	2b05      	cmp	r3, #5
 800daf8:	d10a      	bne.n	800db10 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	4618      	mov	r0, r3
 800db00:	f001 f882 	bl	800ec08 <SDMMC_CmdStopTransfer>
 800db04:	4602      	mov	r2, r0
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db0a:	431a      	orrs	r2, r3
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db14:	2b00      	cmp	r3, #0
 800db16:	d103      	bne.n	800db20 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800db18:	68f8      	ldr	r0, [r7, #12]
 800db1a:	f003 f869 	bl	8010bf0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800db1e:	e002      	b.n	800db26 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800db20:	68f8      	ldr	r0, [r7, #12]
 800db22:	f7ff fc99 	bl	800d458 <HAL_SD_ErrorCallback>
}
 800db26:	bf00      	nop
 800db28:	3710      	adds	r7, #16
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}

0800db2e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800db2e:	b580      	push	{r7, lr}
 800db30:	b084      	sub	sp, #16
 800db32:	af00      	add	r7, sp, #0
 800db34:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db3a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	f240 523a 	movw	r2, #1338	; 0x53a
 800db44:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800db46:	68f8      	ldr	r0, [r7, #12]
 800db48:	f7ff fefa 	bl	800d940 <HAL_SD_GetCardState>
 800db4c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	2201      	movs	r2, #1
 800db52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	2200      	movs	r2, #0
 800db5a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	2b06      	cmp	r3, #6
 800db60:	d002      	beq.n	800db68 <SD_DMARxAbort+0x3a>
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	2b05      	cmp	r3, #5
 800db66:	d10a      	bne.n	800db7e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	4618      	mov	r0, r3
 800db6e:	f001 f84b 	bl	800ec08 <SDMMC_CmdStopTransfer>
 800db72:	4602      	mov	r2, r0
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db78:	431a      	orrs	r2, r3
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db82:	2b00      	cmp	r3, #0
 800db84:	d103      	bne.n	800db8e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800db86:	68f8      	ldr	r0, [r7, #12]
 800db88:	f003 f832 	bl	8010bf0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800db8c:	e002      	b.n	800db94 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800db8e:	68f8      	ldr	r0, [r7, #12]
 800db90:	f7ff fc62 	bl	800d458 <HAL_SD_ErrorCallback>
}
 800db94:	bf00      	nop
 800db96:	3710      	adds	r7, #16
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}

0800db9c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800db9c:	b5b0      	push	{r4, r5, r7, lr}
 800db9e:	b094      	sub	sp, #80	; 0x50
 800dba0:	af04      	add	r7, sp, #16
 800dba2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800dba4:	2301      	movs	r3, #1
 800dba6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	4618      	mov	r0, r3
 800dbae:	f000 fefd 	bl	800e9ac <SDIO_GetPowerState>
 800dbb2:	4603      	mov	r3, r0
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d102      	bne.n	800dbbe <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dbb8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800dbbc:	e0b6      	b.n	800dd2c <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbc2:	2b03      	cmp	r3, #3
 800dbc4:	d02f      	beq.n	800dc26 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f001 f926 	bl	800ee1c <SDMMC_CmdSendCID>
 800dbd0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dbd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d001      	beq.n	800dbdc <SD_InitCard+0x40>
    {
      return errorstate;
 800dbd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbda:	e0a7      	b.n	800dd2c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	2100      	movs	r1, #0
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f000 ff27 	bl	800ea36 <SDIO_GetResponse>
 800dbe8:	4602      	mov	r2, r0
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	2104      	movs	r1, #4
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f000 ff1e 	bl	800ea36 <SDIO_GetResponse>
 800dbfa:	4602      	mov	r2, r0
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	2108      	movs	r1, #8
 800dc06:	4618      	mov	r0, r3
 800dc08:	f000 ff15 	bl	800ea36 <SDIO_GetResponse>
 800dc0c:	4602      	mov	r2, r0
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	210c      	movs	r1, #12
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f000 ff0c 	bl	800ea36 <SDIO_GetResponse>
 800dc1e:	4602      	mov	r2, r0
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc2a:	2b03      	cmp	r3, #3
 800dc2c:	d00d      	beq.n	800dc4a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	f107 020e 	add.w	r2, r7, #14
 800dc36:	4611      	mov	r1, r2
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f001 f92c 	bl	800ee96 <SDMMC_CmdSetRelAdd>
 800dc3e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d001      	beq.n	800dc4a <SD_InitCard+0xae>
    {
      return errorstate;
 800dc46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc48:	e070      	b.n	800dd2c <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc4e:	2b03      	cmp	r3, #3
 800dc50:	d036      	beq.n	800dcc0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800dc52:	89fb      	ldrh	r3, [r7, #14]
 800dc54:	461a      	mov	r2, r3
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681a      	ldr	r2, [r3, #0]
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc62:	041b      	lsls	r3, r3, #16
 800dc64:	4619      	mov	r1, r3
 800dc66:	4610      	mov	r0, r2
 800dc68:	f001 f8f6 	bl	800ee58 <SDMMC_CmdSendCSD>
 800dc6c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d001      	beq.n	800dc78 <SD_InitCard+0xdc>
    {
      return errorstate;
 800dc74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc76:	e059      	b.n	800dd2c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	2100      	movs	r1, #0
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f000 fed9 	bl	800ea36 <SDIO_GetResponse>
 800dc84:	4602      	mov	r2, r0
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	2104      	movs	r1, #4
 800dc90:	4618      	mov	r0, r3
 800dc92:	f000 fed0 	bl	800ea36 <SDIO_GetResponse>
 800dc96:	4602      	mov	r2, r0
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	2108      	movs	r1, #8
 800dca2:	4618      	mov	r0, r3
 800dca4:	f000 fec7 	bl	800ea36 <SDIO_GetResponse>
 800dca8:	4602      	mov	r2, r0
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	210c      	movs	r1, #12
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f000 febe 	bl	800ea36 <SDIO_GetResponse>
 800dcba:	4602      	mov	r2, r0
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	2104      	movs	r1, #4
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f000 feb5 	bl	800ea36 <SDIO_GetResponse>
 800dccc:	4603      	mov	r3, r0
 800dcce:	0d1a      	lsrs	r2, r3, #20
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800dcd4:	f107 0310 	add.w	r3, r7, #16
 800dcd8:	4619      	mov	r1, r3
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	f7ff fbc6 	bl	800d46c <HAL_SD_GetCardCSD>
 800dce0:	4603      	mov	r3, r0
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d002      	beq.n	800dcec <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dce6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dcea:	e01f      	b.n	800dd2c <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	6819      	ldr	r1, [r3, #0]
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcf4:	041b      	lsls	r3, r3, #16
 800dcf6:	461a      	mov	r2, r3
 800dcf8:	f04f 0300 	mov.w	r3, #0
 800dcfc:	4608      	mov	r0, r1
 800dcfe:	f000 ffa5 	bl	800ec4c <SDMMC_CmdSelDesel>
 800dd02:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800dd04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d001      	beq.n	800dd0e <SD_InitCard+0x172>
  {
    return errorstate;
 800dd0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd0c:	e00e      	b.n	800dd2c <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681d      	ldr	r5, [r3, #0]
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	466c      	mov	r4, sp
 800dd16:	f103 0210 	add.w	r2, r3, #16
 800dd1a:	ca07      	ldmia	r2, {r0, r1, r2}
 800dd1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dd20:	3304      	adds	r3, #4
 800dd22:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dd24:	4628      	mov	r0, r5
 800dd26:	f000 fde9 	bl	800e8fc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800dd2a:	2300      	movs	r3, #0
}
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	3740      	adds	r7, #64	; 0x40
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bdb0      	pop	{r4, r5, r7, pc}

0800dd34 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b086      	sub	sp, #24
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800dd40:	2300      	movs	r3, #0
 800dd42:	617b      	str	r3, [r7, #20]
 800dd44:	2300      	movs	r3, #0
 800dd46:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	f000 ffa0 	bl	800ec92 <SDMMC_CmdGoIdleState>
 800dd52:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d001      	beq.n	800dd5e <SD_PowerON+0x2a>
  {
    return errorstate;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	e072      	b.n	800de44 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	4618      	mov	r0, r3
 800dd64:	f000 ffb3 	bl	800ecce <SDMMC_CmdOperCond>
 800dd68:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d00d      	beq.n	800dd8c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2200      	movs	r2, #0
 800dd74:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f000 ff89 	bl	800ec92 <SDMMC_CmdGoIdleState>
 800dd80:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d004      	beq.n	800dd92 <SD_PowerON+0x5e>
    {
      return errorstate;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	e05b      	b.n	800de44 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2201      	movs	r2, #1
 800dd90:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dd96:	2b01      	cmp	r3, #1
 800dd98:	d137      	bne.n	800de0a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	2100      	movs	r1, #0
 800dda0:	4618      	mov	r0, r3
 800dda2:	f000 ffb3 	bl	800ed0c <SDMMC_CmdAppCommand>
 800dda6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d02d      	beq.n	800de0a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ddae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ddb2:	e047      	b.n	800de44 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	2100      	movs	r1, #0
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f000 ffa6 	bl	800ed0c <SDMMC_CmdAppCommand>
 800ddc0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d001      	beq.n	800ddcc <SD_PowerON+0x98>
    {
      return errorstate;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	e03b      	b.n	800de44 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	491e      	ldr	r1, [pc, #120]	; (800de4c <SD_PowerON+0x118>)
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f000 ffbc 	bl	800ed50 <SDMMC_CmdAppOperCommand>
 800ddd8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d002      	beq.n	800dde6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dde0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dde4:	e02e      	b.n	800de44 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	2100      	movs	r1, #0
 800ddec:	4618      	mov	r0, r3
 800ddee:	f000 fe22 	bl	800ea36 <SDIO_GetResponse>
 800ddf2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	0fdb      	lsrs	r3, r3, #31
 800ddf8:	2b01      	cmp	r3, #1
 800ddfa:	d101      	bne.n	800de00 <SD_PowerON+0xcc>
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	e000      	b.n	800de02 <SD_PowerON+0xce>
 800de00:	2300      	movs	r3, #0
 800de02:	613b      	str	r3, [r7, #16]

    count++;
 800de04:	68bb      	ldr	r3, [r7, #8]
 800de06:	3301      	adds	r3, #1
 800de08:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800de10:	4293      	cmp	r3, r2
 800de12:	d802      	bhi.n	800de1a <SD_PowerON+0xe6>
 800de14:	693b      	ldr	r3, [r7, #16]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d0cc      	beq.n	800ddb4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800de20:	4293      	cmp	r3, r2
 800de22:	d902      	bls.n	800de2a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800de24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800de28:	e00c      	b.n	800de44 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800de2a:	697b      	ldr	r3, [r7, #20]
 800de2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800de30:	2b00      	cmp	r3, #0
 800de32:	d003      	beq.n	800de3c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2201      	movs	r2, #1
 800de38:	645a      	str	r2, [r3, #68]	; 0x44
 800de3a:	e002      	b.n	800de42 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2200      	movs	r2, #0
 800de40:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800de42:	2300      	movs	r3, #0
}
 800de44:	4618      	mov	r0, r3
 800de46:	3718      	adds	r7, #24
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}
 800de4c:	c1100000 	.word	0xc1100000

0800de50 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b084      	sub	sp, #16
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
 800de58:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d102      	bne.n	800de66 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800de60:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800de64:	e018      	b.n	800de98 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	681a      	ldr	r2, [r3, #0]
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de6e:	041b      	lsls	r3, r3, #16
 800de70:	4619      	mov	r1, r3
 800de72:	4610      	mov	r0, r2
 800de74:	f001 f830 	bl	800eed8 <SDMMC_CmdSendStatus>
 800de78:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d001      	beq.n	800de84 <SD_SendStatus+0x34>
  {
    return errorstate;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	e009      	b.n	800de98 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	2100      	movs	r1, #0
 800de8a:	4618      	mov	r0, r3
 800de8c:	f000 fdd3 	bl	800ea36 <SDIO_GetResponse>
 800de90:	4602      	mov	r2, r0
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800de96:	2300      	movs	r3, #0
}
 800de98:	4618      	mov	r0, r3
 800de9a:	3710      	adds	r7, #16
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bd80      	pop	{r7, pc}

0800dea0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b086      	sub	sp, #24
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800dea8:	2300      	movs	r3, #0
 800deaa:	60fb      	str	r3, [r7, #12]
 800deac:	2300      	movs	r3, #0
 800deae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	2100      	movs	r1, #0
 800deb6:	4618      	mov	r0, r3
 800deb8:	f000 fdbd 	bl	800ea36 <SDIO_GetResponse>
 800debc:	4603      	mov	r3, r0
 800debe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dec2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dec6:	d102      	bne.n	800dece <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dec8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800decc:	e02f      	b.n	800df2e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dece:	f107 030c 	add.w	r3, r7, #12
 800ded2:	4619      	mov	r1, r3
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f000 f879 	bl	800dfcc <SD_FindSCR>
 800deda:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dedc:	697b      	ldr	r3, [r7, #20]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d001      	beq.n	800dee6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800dee2:	697b      	ldr	r3, [r7, #20]
 800dee4:	e023      	b.n	800df2e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dee6:	693b      	ldr	r3, [r7, #16]
 800dee8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800deec:	2b00      	cmp	r3, #0
 800deee:	d01c      	beq.n	800df2a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	681a      	ldr	r2, [r3, #0]
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800def8:	041b      	lsls	r3, r3, #16
 800defa:	4619      	mov	r1, r3
 800defc:	4610      	mov	r0, r2
 800defe:	f000 ff05 	bl	800ed0c <SDMMC_CmdAppCommand>
 800df02:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800df04:	697b      	ldr	r3, [r7, #20]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d001      	beq.n	800df0e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800df0a:	697b      	ldr	r3, [r7, #20]
 800df0c:	e00f      	b.n	800df2e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	2102      	movs	r1, #2
 800df14:	4618      	mov	r0, r3
 800df16:	f000 ff3e 	bl	800ed96 <SDMMC_CmdBusWidth>
 800df1a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800df1c:	697b      	ldr	r3, [r7, #20]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d001      	beq.n	800df26 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	e003      	b.n	800df2e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800df26:	2300      	movs	r3, #0
 800df28:	e001      	b.n	800df2e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800df2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800df2e:	4618      	mov	r0, r3
 800df30:	3718      	adds	r7, #24
 800df32:	46bd      	mov	sp, r7
 800df34:	bd80      	pop	{r7, pc}

0800df36 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800df36:	b580      	push	{r7, lr}
 800df38:	b086      	sub	sp, #24
 800df3a:	af00      	add	r7, sp, #0
 800df3c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800df3e:	2300      	movs	r3, #0
 800df40:	60fb      	str	r3, [r7, #12]
 800df42:	2300      	movs	r3, #0
 800df44:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	2100      	movs	r1, #0
 800df4c:	4618      	mov	r0, r3
 800df4e:	f000 fd72 	bl	800ea36 <SDIO_GetResponse>
 800df52:	4603      	mov	r3, r0
 800df54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800df58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800df5c:	d102      	bne.n	800df64 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800df5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800df62:	e02f      	b.n	800dfc4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800df64:	f107 030c 	add.w	r3, r7, #12
 800df68:	4619      	mov	r1, r3
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f000 f82e 	bl	800dfcc <SD_FindSCR>
 800df70:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d001      	beq.n	800df7c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800df78:	697b      	ldr	r3, [r7, #20]
 800df7a:	e023      	b.n	800dfc4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800df7c:	693b      	ldr	r3, [r7, #16]
 800df7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800df82:	2b00      	cmp	r3, #0
 800df84:	d01c      	beq.n	800dfc0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681a      	ldr	r2, [r3, #0]
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df8e:	041b      	lsls	r3, r3, #16
 800df90:	4619      	mov	r1, r3
 800df92:	4610      	mov	r0, r2
 800df94:	f000 feba 	bl	800ed0c <SDMMC_CmdAppCommand>
 800df98:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800df9a:	697b      	ldr	r3, [r7, #20]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d001      	beq.n	800dfa4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800dfa0:	697b      	ldr	r3, [r7, #20]
 800dfa2:	e00f      	b.n	800dfc4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	2100      	movs	r1, #0
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f000 fef3 	bl	800ed96 <SDMMC_CmdBusWidth>
 800dfb0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d001      	beq.n	800dfbc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	e003      	b.n	800dfc4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	e001      	b.n	800dfc4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dfc0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	3718      	adds	r7, #24
 800dfc8:	46bd      	mov	sp, r7
 800dfca:	bd80      	pop	{r7, pc}

0800dfcc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800dfcc:	b590      	push	{r4, r7, lr}
 800dfce:	b08f      	sub	sp, #60	; 0x3c
 800dfd0:	af00      	add	r7, sp, #0
 800dfd2:	6078      	str	r0, [r7, #4]
 800dfd4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dfd6:	f7f8 fb4b 	bl	8006670 <HAL_GetTick>
 800dfda:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	60bb      	str	r3, [r7, #8]
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	2108      	movs	r1, #8
 800dff2:	4618      	mov	r0, r3
 800dff4:	f000 fd5e 	bl	800eab4 <SDMMC_CmdBlockLength>
 800dff8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d001      	beq.n	800e004 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e002:	e0b2      	b.n	800e16a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681a      	ldr	r2, [r3, #0]
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e00c:	041b      	lsls	r3, r3, #16
 800e00e:	4619      	mov	r1, r3
 800e010:	4610      	mov	r0, r2
 800e012:	f000 fe7b 	bl	800ed0c <SDMMC_CmdAppCommand>
 800e016:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d001      	beq.n	800e022 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e020:	e0a3      	b.n	800e16a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e022:	f04f 33ff 	mov.w	r3, #4294967295
 800e026:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e028:	2308      	movs	r3, #8
 800e02a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800e02c:	2330      	movs	r3, #48	; 0x30
 800e02e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e030:	2302      	movs	r3, #2
 800e032:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e034:	2300      	movs	r3, #0
 800e036:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800e038:	2301      	movs	r3, #1
 800e03a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	f107 0210 	add.w	r2, r7, #16
 800e044:	4611      	mov	r1, r2
 800e046:	4618      	mov	r0, r3
 800e048:	f000 fd08 	bl	800ea5c <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	4618      	mov	r0, r3
 800e052:	f000 fec2 	bl	800edda <SDMMC_CmdSendSCR>
 800e056:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d02a      	beq.n	800e0b4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800e05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e060:	e083      	b.n	800e16a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d00f      	beq.n	800e090 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6819      	ldr	r1, [r3, #0]
 800e074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e076:	009b      	lsls	r3, r3, #2
 800e078:	f107 0208 	add.w	r2, r7, #8
 800e07c:	18d4      	adds	r4, r2, r3
 800e07e:	4608      	mov	r0, r1
 800e080:	f000 fc67 	bl	800e952 <SDIO_ReadFIFO>
 800e084:	4603      	mov	r3, r0
 800e086:	6023      	str	r3, [r4, #0]
      index++;
 800e088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e08a:	3301      	adds	r3, #1
 800e08c:	637b      	str	r3, [r7, #52]	; 0x34
 800e08e:	e006      	b.n	800e09e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e096:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d012      	beq.n	800e0c4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e09e:	f7f8 fae7 	bl	8006670 <HAL_GetTick>
 800e0a2:	4602      	mov	r2, r0
 800e0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0a6:	1ad3      	subs	r3, r2, r3
 800e0a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0ac:	d102      	bne.n	800e0b4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e0ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e0b2:	e05a      	b.n	800e16a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0ba:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d0cf      	beq.n	800e062 <SD_FindSCR+0x96>
 800e0c2:	e000      	b.n	800e0c6 <SD_FindSCR+0xfa>
      break;
 800e0c4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0cc:	f003 0308 	and.w	r3, r3, #8
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d005      	beq.n	800e0e0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	2208      	movs	r2, #8
 800e0da:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e0dc:	2308      	movs	r3, #8
 800e0de:	e044      	b.n	800e16a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0e6:	f003 0302 	and.w	r3, r3, #2
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d005      	beq.n	800e0fa <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	2202      	movs	r2, #2
 800e0f4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e0f6:	2302      	movs	r3, #2
 800e0f8:	e037      	b.n	800e16a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e100:	f003 0320 	and.w	r3, r3, #32
 800e104:	2b00      	cmp	r3, #0
 800e106:	d005      	beq.n	800e114 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	2220      	movs	r2, #32
 800e10e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e110:	2320      	movs	r3, #32
 800e112:	e02a      	b.n	800e16a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	f240 523a 	movw	r2, #1338	; 0x53a
 800e11c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	061a      	lsls	r2, r3, #24
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	021b      	lsls	r3, r3, #8
 800e126:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e12a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	0a1b      	lsrs	r3, r3, #8
 800e130:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e134:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	0e1b      	lsrs	r3, r3, #24
 800e13a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e13e:	601a      	str	r2, [r3, #0]
    scr++;
 800e140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e142:	3304      	adds	r3, #4
 800e144:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	061a      	lsls	r2, r3, #24
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	021b      	lsls	r3, r3, #8
 800e14e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e152:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	0a1b      	lsrs	r3, r3, #8
 800e158:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e15c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	0e1b      	lsrs	r3, r3, #24
 800e162:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e166:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e168:	2300      	movs	r3, #0
}
 800e16a:	4618      	mov	r0, r3
 800e16c:	373c      	adds	r7, #60	; 0x3c
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd90      	pop	{r4, r7, pc}

0800e172 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e172:	b580      	push	{r7, lr}
 800e174:	b086      	sub	sp, #24
 800e176:	af00      	add	r7, sp, #0
 800e178:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e17e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e184:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d03f      	beq.n	800e20c <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e18c:	2300      	movs	r3, #0
 800e18e:	617b      	str	r3, [r7, #20]
 800e190:	e033      	b.n	800e1fa <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	4618      	mov	r0, r3
 800e198:	f000 fbdb 	bl	800e952 <SDIO_ReadFIFO>
 800e19c:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	b2da      	uxtb	r2, r3
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	3301      	adds	r3, #1
 800e1aa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e1ac:	693b      	ldr	r3, [r7, #16]
 800e1ae:	3b01      	subs	r3, #1
 800e1b0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e1b2:	68bb      	ldr	r3, [r7, #8]
 800e1b4:	0a1b      	lsrs	r3, r3, #8
 800e1b6:	b2da      	uxtb	r2, r3
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	3301      	adds	r3, #1
 800e1c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e1c2:	693b      	ldr	r3, [r7, #16]
 800e1c4:	3b01      	subs	r3, #1
 800e1c6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	0c1b      	lsrs	r3, r3, #16
 800e1cc:	b2da      	uxtb	r2, r3
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	3301      	adds	r3, #1
 800e1d6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	3b01      	subs	r3, #1
 800e1dc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	0e1b      	lsrs	r3, r3, #24
 800e1e2:	b2da      	uxtb	r2, r3
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	3301      	adds	r3, #1
 800e1ec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	3b01      	subs	r3, #1
 800e1f2:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e1f4:	697b      	ldr	r3, [r7, #20]
 800e1f6:	3301      	adds	r3, #1
 800e1f8:	617b      	str	r3, [r7, #20]
 800e1fa:	697b      	ldr	r3, [r7, #20]
 800e1fc:	2b07      	cmp	r3, #7
 800e1fe:	d9c8      	bls.n	800e192 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	68fa      	ldr	r2, [r7, #12]
 800e204:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	693a      	ldr	r2, [r7, #16]
 800e20a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e20c:	bf00      	nop
 800e20e:	3718      	adds	r7, #24
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}

0800e214 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b086      	sub	sp, #24
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	6a1b      	ldr	r3, [r3, #32]
 800e220:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e226:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e228:	693b      	ldr	r3, [r7, #16]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d043      	beq.n	800e2b6 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e22e:	2300      	movs	r3, #0
 800e230:	617b      	str	r3, [r7, #20]
 800e232:	e037      	b.n	800e2a4 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	781b      	ldrb	r3, [r3, #0]
 800e238:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	3301      	adds	r3, #1
 800e23e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e240:	693b      	ldr	r3, [r7, #16]
 800e242:	3b01      	subs	r3, #1
 800e244:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	781b      	ldrb	r3, [r3, #0]
 800e24a:	021a      	lsls	r2, r3, #8
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	4313      	orrs	r3, r2
 800e250:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	3301      	adds	r3, #1
 800e256:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e258:	693b      	ldr	r3, [r7, #16]
 800e25a:	3b01      	subs	r3, #1
 800e25c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	781b      	ldrb	r3, [r3, #0]
 800e262:	041a      	lsls	r2, r3, #16
 800e264:	68bb      	ldr	r3, [r7, #8]
 800e266:	4313      	orrs	r3, r2
 800e268:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	3301      	adds	r3, #1
 800e26e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e270:	693b      	ldr	r3, [r7, #16]
 800e272:	3b01      	subs	r3, #1
 800e274:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	781b      	ldrb	r3, [r3, #0]
 800e27a:	061a      	lsls	r2, r3, #24
 800e27c:	68bb      	ldr	r3, [r7, #8]
 800e27e:	4313      	orrs	r3, r2
 800e280:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	3301      	adds	r3, #1
 800e286:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e288:	693b      	ldr	r3, [r7, #16]
 800e28a:	3b01      	subs	r3, #1
 800e28c:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	f107 0208 	add.w	r2, r7, #8
 800e296:	4611      	mov	r1, r2
 800e298:	4618      	mov	r0, r3
 800e29a:	f000 fb67 	bl	800e96c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e29e:	697b      	ldr	r3, [r7, #20]
 800e2a0:	3301      	adds	r3, #1
 800e2a2:	617b      	str	r3, [r7, #20]
 800e2a4:	697b      	ldr	r3, [r7, #20]
 800e2a6:	2b07      	cmp	r3, #7
 800e2a8:	d9c4      	bls.n	800e234 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	68fa      	ldr	r2, [r7, #12]
 800e2ae:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	693a      	ldr	r2, [r7, #16]
 800e2b4:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e2b6:	bf00      	nop
 800e2b8:	3718      	adds	r7, #24
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}

0800e2be <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e2be:	b580      	push	{r7, lr}
 800e2c0:	b082      	sub	sp, #8
 800e2c2:	af00      	add	r7, sp, #0
 800e2c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d101      	bne.n	800e2d0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e2cc:	2301      	movs	r3, #1
 800e2ce:	e041      	b.n	800e354 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e2d6:	b2db      	uxtb	r3, r3
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d106      	bne.n	800e2ea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2200      	movs	r2, #0
 800e2e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e2e4:	6878      	ldr	r0, [r7, #4]
 800e2e6:	f7f8 f83d 	bl	8006364 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2202      	movs	r2, #2
 800e2ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681a      	ldr	r2, [r3, #0]
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	3304      	adds	r3, #4
 800e2fa:	4619      	mov	r1, r3
 800e2fc:	4610      	mov	r0, r2
 800e2fe:	f000 f9cd 	bl	800e69c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	2201      	movs	r2, #1
 800e306:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2201      	movs	r2, #1
 800e30e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	2201      	movs	r2, #1
 800e316:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2201      	movs	r2, #1
 800e31e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	2201      	movs	r2, #1
 800e326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	2201      	movs	r2, #1
 800e32e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	2201      	movs	r2, #1
 800e336:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2201      	movs	r2, #1
 800e33e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	2201      	movs	r2, #1
 800e346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	2201      	movs	r2, #1
 800e34e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e352:	2300      	movs	r3, #0
}
 800e354:	4618      	mov	r0, r3
 800e356:	3708      	adds	r7, #8
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}

0800e35c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e35c:	b480      	push	{r7}
 800e35e:	b085      	sub	sp, #20
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e36a:	b2db      	uxtb	r3, r3
 800e36c:	2b01      	cmp	r3, #1
 800e36e:	d001      	beq.n	800e374 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e370:	2301      	movs	r3, #1
 800e372:	e04e      	b.n	800e412 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2202      	movs	r2, #2
 800e378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	68da      	ldr	r2, [r3, #12]
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	f042 0201 	orr.w	r2, r2, #1
 800e38a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	4a23      	ldr	r2, [pc, #140]	; (800e420 <HAL_TIM_Base_Start_IT+0xc4>)
 800e392:	4293      	cmp	r3, r2
 800e394:	d022      	beq.n	800e3dc <HAL_TIM_Base_Start_IT+0x80>
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e39e:	d01d      	beq.n	800e3dc <HAL_TIM_Base_Start_IT+0x80>
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	4a1f      	ldr	r2, [pc, #124]	; (800e424 <HAL_TIM_Base_Start_IT+0xc8>)
 800e3a6:	4293      	cmp	r3, r2
 800e3a8:	d018      	beq.n	800e3dc <HAL_TIM_Base_Start_IT+0x80>
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	4a1e      	ldr	r2, [pc, #120]	; (800e428 <HAL_TIM_Base_Start_IT+0xcc>)
 800e3b0:	4293      	cmp	r3, r2
 800e3b2:	d013      	beq.n	800e3dc <HAL_TIM_Base_Start_IT+0x80>
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	4a1c      	ldr	r2, [pc, #112]	; (800e42c <HAL_TIM_Base_Start_IT+0xd0>)
 800e3ba:	4293      	cmp	r3, r2
 800e3bc:	d00e      	beq.n	800e3dc <HAL_TIM_Base_Start_IT+0x80>
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	4a1b      	ldr	r2, [pc, #108]	; (800e430 <HAL_TIM_Base_Start_IT+0xd4>)
 800e3c4:	4293      	cmp	r3, r2
 800e3c6:	d009      	beq.n	800e3dc <HAL_TIM_Base_Start_IT+0x80>
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	4a19      	ldr	r2, [pc, #100]	; (800e434 <HAL_TIM_Base_Start_IT+0xd8>)
 800e3ce:	4293      	cmp	r3, r2
 800e3d0:	d004      	beq.n	800e3dc <HAL_TIM_Base_Start_IT+0x80>
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	4a18      	ldr	r2, [pc, #96]	; (800e438 <HAL_TIM_Base_Start_IT+0xdc>)
 800e3d8:	4293      	cmp	r3, r2
 800e3da:	d111      	bne.n	800e400 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	689b      	ldr	r3, [r3, #8]
 800e3e2:	f003 0307 	and.w	r3, r3, #7
 800e3e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	2b06      	cmp	r3, #6
 800e3ec:	d010      	beq.n	800e410 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	681a      	ldr	r2, [r3, #0]
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	f042 0201 	orr.w	r2, r2, #1
 800e3fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3fe:	e007      	b.n	800e410 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	681a      	ldr	r2, [r3, #0]
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	f042 0201 	orr.w	r2, r2, #1
 800e40e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e410:	2300      	movs	r3, #0
}
 800e412:	4618      	mov	r0, r3
 800e414:	3714      	adds	r7, #20
 800e416:	46bd      	mov	sp, r7
 800e418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e41c:	4770      	bx	lr
 800e41e:	bf00      	nop
 800e420:	40010000 	.word	0x40010000
 800e424:	40000400 	.word	0x40000400
 800e428:	40000800 	.word	0x40000800
 800e42c:	40000c00 	.word	0x40000c00
 800e430:	40010400 	.word	0x40010400
 800e434:	40014000 	.word	0x40014000
 800e438:	40001800 	.word	0x40001800

0800e43c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	b082      	sub	sp, #8
 800e440:	af00      	add	r7, sp, #0
 800e442:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	691b      	ldr	r3, [r3, #16]
 800e44a:	f003 0302 	and.w	r3, r3, #2
 800e44e:	2b02      	cmp	r3, #2
 800e450:	d122      	bne.n	800e498 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	68db      	ldr	r3, [r3, #12]
 800e458:	f003 0302 	and.w	r3, r3, #2
 800e45c:	2b02      	cmp	r3, #2
 800e45e:	d11b      	bne.n	800e498 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	f06f 0202 	mvn.w	r2, #2
 800e468:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	2201      	movs	r2, #1
 800e46e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	699b      	ldr	r3, [r3, #24]
 800e476:	f003 0303 	and.w	r3, r3, #3
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d003      	beq.n	800e486 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f000 f8ee 	bl	800e660 <HAL_TIM_IC_CaptureCallback>
 800e484:	e005      	b.n	800e492 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e486:	6878      	ldr	r0, [r7, #4]
 800e488:	f000 f8e0 	bl	800e64c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f000 f8f1 	bl	800e674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	2200      	movs	r2, #0
 800e496:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	691b      	ldr	r3, [r3, #16]
 800e49e:	f003 0304 	and.w	r3, r3, #4
 800e4a2:	2b04      	cmp	r3, #4
 800e4a4:	d122      	bne.n	800e4ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	68db      	ldr	r3, [r3, #12]
 800e4ac:	f003 0304 	and.w	r3, r3, #4
 800e4b0:	2b04      	cmp	r3, #4
 800e4b2:	d11b      	bne.n	800e4ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	f06f 0204 	mvn.w	r2, #4
 800e4bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	2202      	movs	r2, #2
 800e4c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	699b      	ldr	r3, [r3, #24]
 800e4ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d003      	beq.n	800e4da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f000 f8c4 	bl	800e660 <HAL_TIM_IC_CaptureCallback>
 800e4d8:	e005      	b.n	800e4e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	f000 f8b6 	bl	800e64c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f000 f8c7 	bl	800e674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	691b      	ldr	r3, [r3, #16]
 800e4f2:	f003 0308 	and.w	r3, r3, #8
 800e4f6:	2b08      	cmp	r3, #8
 800e4f8:	d122      	bne.n	800e540 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	68db      	ldr	r3, [r3, #12]
 800e500:	f003 0308 	and.w	r3, r3, #8
 800e504:	2b08      	cmp	r3, #8
 800e506:	d11b      	bne.n	800e540 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	f06f 0208 	mvn.w	r2, #8
 800e510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	2204      	movs	r2, #4
 800e516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	69db      	ldr	r3, [r3, #28]
 800e51e:	f003 0303 	and.w	r3, r3, #3
 800e522:	2b00      	cmp	r3, #0
 800e524:	d003      	beq.n	800e52e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e526:	6878      	ldr	r0, [r7, #4]
 800e528:	f000 f89a 	bl	800e660 <HAL_TIM_IC_CaptureCallback>
 800e52c:	e005      	b.n	800e53a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e52e:	6878      	ldr	r0, [r7, #4]
 800e530:	f000 f88c 	bl	800e64c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	f000 f89d 	bl	800e674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2200      	movs	r2, #0
 800e53e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	691b      	ldr	r3, [r3, #16]
 800e546:	f003 0310 	and.w	r3, r3, #16
 800e54a:	2b10      	cmp	r3, #16
 800e54c:	d122      	bne.n	800e594 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	68db      	ldr	r3, [r3, #12]
 800e554:	f003 0310 	and.w	r3, r3, #16
 800e558:	2b10      	cmp	r3, #16
 800e55a:	d11b      	bne.n	800e594 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	f06f 0210 	mvn.w	r2, #16
 800e564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	2208      	movs	r2, #8
 800e56a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	69db      	ldr	r3, [r3, #28]
 800e572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e576:	2b00      	cmp	r3, #0
 800e578:	d003      	beq.n	800e582 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e57a:	6878      	ldr	r0, [r7, #4]
 800e57c:	f000 f870 	bl	800e660 <HAL_TIM_IC_CaptureCallback>
 800e580:	e005      	b.n	800e58e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e582:	6878      	ldr	r0, [r7, #4]
 800e584:	f000 f862 	bl	800e64c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f000 f873 	bl	800e674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	2200      	movs	r2, #0
 800e592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	691b      	ldr	r3, [r3, #16]
 800e59a:	f003 0301 	and.w	r3, r3, #1
 800e59e:	2b01      	cmp	r3, #1
 800e5a0:	d10e      	bne.n	800e5c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	68db      	ldr	r3, [r3, #12]
 800e5a8:	f003 0301 	and.w	r3, r3, #1
 800e5ac:	2b01      	cmp	r3, #1
 800e5ae:	d107      	bne.n	800e5c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	f06f 0201 	mvn.w	r2, #1
 800e5b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f7f7 fb86 	bl	8005ccc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	691b      	ldr	r3, [r3, #16]
 800e5c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5ca:	2b80      	cmp	r3, #128	; 0x80
 800e5cc:	d10e      	bne.n	800e5ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	68db      	ldr	r3, [r3, #12]
 800e5d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e5d8:	2b80      	cmp	r3, #128	; 0x80
 800e5da:	d107      	bne.n	800e5ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e5e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e5e6:	6878      	ldr	r0, [r7, #4]
 800e5e8:	f000 f97e 	bl	800e8e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	691b      	ldr	r3, [r3, #16]
 800e5f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5f6:	2b40      	cmp	r3, #64	; 0x40
 800e5f8:	d10e      	bne.n	800e618 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	68db      	ldr	r3, [r3, #12]
 800e600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e604:	2b40      	cmp	r3, #64	; 0x40
 800e606:	d107      	bne.n	800e618 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f000 f838 	bl	800e688 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	691b      	ldr	r3, [r3, #16]
 800e61e:	f003 0320 	and.w	r3, r3, #32
 800e622:	2b20      	cmp	r3, #32
 800e624:	d10e      	bne.n	800e644 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	68db      	ldr	r3, [r3, #12]
 800e62c:	f003 0320 	and.w	r3, r3, #32
 800e630:	2b20      	cmp	r3, #32
 800e632:	d107      	bne.n	800e644 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	f06f 0220 	mvn.w	r2, #32
 800e63c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e63e:	6878      	ldr	r0, [r7, #4]
 800e640:	f000 f948 	bl	800e8d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e644:	bf00      	nop
 800e646:	3708      	adds	r7, #8
 800e648:	46bd      	mov	sp, r7
 800e64a:	bd80      	pop	{r7, pc}

0800e64c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e64c:	b480      	push	{r7}
 800e64e:	b083      	sub	sp, #12
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e654:	bf00      	nop
 800e656:	370c      	adds	r7, #12
 800e658:	46bd      	mov	sp, r7
 800e65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65e:	4770      	bx	lr

0800e660 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e660:	b480      	push	{r7}
 800e662:	b083      	sub	sp, #12
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e668:	bf00      	nop
 800e66a:	370c      	adds	r7, #12
 800e66c:	46bd      	mov	sp, r7
 800e66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e672:	4770      	bx	lr

0800e674 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e674:	b480      	push	{r7}
 800e676:	b083      	sub	sp, #12
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e67c:	bf00      	nop
 800e67e:	370c      	adds	r7, #12
 800e680:	46bd      	mov	sp, r7
 800e682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e686:	4770      	bx	lr

0800e688 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e688:	b480      	push	{r7}
 800e68a:	b083      	sub	sp, #12
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e690:	bf00      	nop
 800e692:	370c      	adds	r7, #12
 800e694:	46bd      	mov	sp, r7
 800e696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69a:	4770      	bx	lr

0800e69c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e69c:	b480      	push	{r7}
 800e69e:	b085      	sub	sp, #20
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
 800e6a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	4a40      	ldr	r2, [pc, #256]	; (800e7b0 <TIM_Base_SetConfig+0x114>)
 800e6b0:	4293      	cmp	r3, r2
 800e6b2:	d013      	beq.n	800e6dc <TIM_Base_SetConfig+0x40>
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6ba:	d00f      	beq.n	800e6dc <TIM_Base_SetConfig+0x40>
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	4a3d      	ldr	r2, [pc, #244]	; (800e7b4 <TIM_Base_SetConfig+0x118>)
 800e6c0:	4293      	cmp	r3, r2
 800e6c2:	d00b      	beq.n	800e6dc <TIM_Base_SetConfig+0x40>
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	4a3c      	ldr	r2, [pc, #240]	; (800e7b8 <TIM_Base_SetConfig+0x11c>)
 800e6c8:	4293      	cmp	r3, r2
 800e6ca:	d007      	beq.n	800e6dc <TIM_Base_SetConfig+0x40>
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	4a3b      	ldr	r2, [pc, #236]	; (800e7bc <TIM_Base_SetConfig+0x120>)
 800e6d0:	4293      	cmp	r3, r2
 800e6d2:	d003      	beq.n	800e6dc <TIM_Base_SetConfig+0x40>
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	4a3a      	ldr	r2, [pc, #232]	; (800e7c0 <TIM_Base_SetConfig+0x124>)
 800e6d8:	4293      	cmp	r3, r2
 800e6da:	d108      	bne.n	800e6ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e6e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e6e4:	683b      	ldr	r3, [r7, #0]
 800e6e6:	685b      	ldr	r3, [r3, #4]
 800e6e8:	68fa      	ldr	r2, [r7, #12]
 800e6ea:	4313      	orrs	r3, r2
 800e6ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	4a2f      	ldr	r2, [pc, #188]	; (800e7b0 <TIM_Base_SetConfig+0x114>)
 800e6f2:	4293      	cmp	r3, r2
 800e6f4:	d02b      	beq.n	800e74e <TIM_Base_SetConfig+0xb2>
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6fc:	d027      	beq.n	800e74e <TIM_Base_SetConfig+0xb2>
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	4a2c      	ldr	r2, [pc, #176]	; (800e7b4 <TIM_Base_SetConfig+0x118>)
 800e702:	4293      	cmp	r3, r2
 800e704:	d023      	beq.n	800e74e <TIM_Base_SetConfig+0xb2>
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	4a2b      	ldr	r2, [pc, #172]	; (800e7b8 <TIM_Base_SetConfig+0x11c>)
 800e70a:	4293      	cmp	r3, r2
 800e70c:	d01f      	beq.n	800e74e <TIM_Base_SetConfig+0xb2>
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	4a2a      	ldr	r2, [pc, #168]	; (800e7bc <TIM_Base_SetConfig+0x120>)
 800e712:	4293      	cmp	r3, r2
 800e714:	d01b      	beq.n	800e74e <TIM_Base_SetConfig+0xb2>
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	4a29      	ldr	r2, [pc, #164]	; (800e7c0 <TIM_Base_SetConfig+0x124>)
 800e71a:	4293      	cmp	r3, r2
 800e71c:	d017      	beq.n	800e74e <TIM_Base_SetConfig+0xb2>
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	4a28      	ldr	r2, [pc, #160]	; (800e7c4 <TIM_Base_SetConfig+0x128>)
 800e722:	4293      	cmp	r3, r2
 800e724:	d013      	beq.n	800e74e <TIM_Base_SetConfig+0xb2>
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	4a27      	ldr	r2, [pc, #156]	; (800e7c8 <TIM_Base_SetConfig+0x12c>)
 800e72a:	4293      	cmp	r3, r2
 800e72c:	d00f      	beq.n	800e74e <TIM_Base_SetConfig+0xb2>
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	4a26      	ldr	r2, [pc, #152]	; (800e7cc <TIM_Base_SetConfig+0x130>)
 800e732:	4293      	cmp	r3, r2
 800e734:	d00b      	beq.n	800e74e <TIM_Base_SetConfig+0xb2>
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	4a25      	ldr	r2, [pc, #148]	; (800e7d0 <TIM_Base_SetConfig+0x134>)
 800e73a:	4293      	cmp	r3, r2
 800e73c:	d007      	beq.n	800e74e <TIM_Base_SetConfig+0xb2>
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	4a24      	ldr	r2, [pc, #144]	; (800e7d4 <TIM_Base_SetConfig+0x138>)
 800e742:	4293      	cmp	r3, r2
 800e744:	d003      	beq.n	800e74e <TIM_Base_SetConfig+0xb2>
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	4a23      	ldr	r2, [pc, #140]	; (800e7d8 <TIM_Base_SetConfig+0x13c>)
 800e74a:	4293      	cmp	r3, r2
 800e74c:	d108      	bne.n	800e760 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e754:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	68db      	ldr	r3, [r3, #12]
 800e75a:	68fa      	ldr	r2, [r7, #12]
 800e75c:	4313      	orrs	r3, r2
 800e75e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	695b      	ldr	r3, [r3, #20]
 800e76a:	4313      	orrs	r3, r2
 800e76c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	68fa      	ldr	r2, [r7, #12]
 800e772:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	689a      	ldr	r2, [r3, #8]
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	681a      	ldr	r2, [r3, #0]
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	4a0a      	ldr	r2, [pc, #40]	; (800e7b0 <TIM_Base_SetConfig+0x114>)
 800e788:	4293      	cmp	r3, r2
 800e78a:	d003      	beq.n	800e794 <TIM_Base_SetConfig+0xf8>
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	4a0c      	ldr	r2, [pc, #48]	; (800e7c0 <TIM_Base_SetConfig+0x124>)
 800e790:	4293      	cmp	r3, r2
 800e792:	d103      	bne.n	800e79c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	691a      	ldr	r2, [r3, #16]
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2201      	movs	r2, #1
 800e7a0:	615a      	str	r2, [r3, #20]
}
 800e7a2:	bf00      	nop
 800e7a4:	3714      	adds	r7, #20
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ac:	4770      	bx	lr
 800e7ae:	bf00      	nop
 800e7b0:	40010000 	.word	0x40010000
 800e7b4:	40000400 	.word	0x40000400
 800e7b8:	40000800 	.word	0x40000800
 800e7bc:	40000c00 	.word	0x40000c00
 800e7c0:	40010400 	.word	0x40010400
 800e7c4:	40014000 	.word	0x40014000
 800e7c8:	40014400 	.word	0x40014400
 800e7cc:	40014800 	.word	0x40014800
 800e7d0:	40001800 	.word	0x40001800
 800e7d4:	40001c00 	.word	0x40001c00
 800e7d8:	40002000 	.word	0x40002000

0800e7dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e7dc:	b480      	push	{r7}
 800e7de:	b085      	sub	sp, #20
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
 800e7e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e7ec:	2b01      	cmp	r3, #1
 800e7ee:	d101      	bne.n	800e7f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e7f0:	2302      	movs	r3, #2
 800e7f2:	e05a      	b.n	800e8aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2201      	movs	r2, #1
 800e7f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	2202      	movs	r2, #2
 800e800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	685b      	ldr	r3, [r3, #4]
 800e80a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	689b      	ldr	r3, [r3, #8]
 800e812:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e81a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	68fa      	ldr	r2, [r7, #12]
 800e822:	4313      	orrs	r3, r2
 800e824:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	68fa      	ldr	r2, [r7, #12]
 800e82c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	4a21      	ldr	r2, [pc, #132]	; (800e8b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e834:	4293      	cmp	r3, r2
 800e836:	d022      	beq.n	800e87e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e840:	d01d      	beq.n	800e87e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	4a1d      	ldr	r2, [pc, #116]	; (800e8bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e848:	4293      	cmp	r3, r2
 800e84a:	d018      	beq.n	800e87e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	4a1b      	ldr	r2, [pc, #108]	; (800e8c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e852:	4293      	cmp	r3, r2
 800e854:	d013      	beq.n	800e87e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	4a1a      	ldr	r2, [pc, #104]	; (800e8c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e85c:	4293      	cmp	r3, r2
 800e85e:	d00e      	beq.n	800e87e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	4a18      	ldr	r2, [pc, #96]	; (800e8c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e866:	4293      	cmp	r3, r2
 800e868:	d009      	beq.n	800e87e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	4a17      	ldr	r2, [pc, #92]	; (800e8cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e870:	4293      	cmp	r3, r2
 800e872:	d004      	beq.n	800e87e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	4a15      	ldr	r2, [pc, #84]	; (800e8d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e87a:	4293      	cmp	r3, r2
 800e87c:	d10c      	bne.n	800e898 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e884:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e886:	683b      	ldr	r3, [r7, #0]
 800e888:	685b      	ldr	r3, [r3, #4]
 800e88a:	68ba      	ldr	r2, [r7, #8]
 800e88c:	4313      	orrs	r3, r2
 800e88e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	68ba      	ldr	r2, [r7, #8]
 800e896:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2201      	movs	r2, #1
 800e89c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e8a8:	2300      	movs	r3, #0
}
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	3714      	adds	r7, #20
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b4:	4770      	bx	lr
 800e8b6:	bf00      	nop
 800e8b8:	40010000 	.word	0x40010000
 800e8bc:	40000400 	.word	0x40000400
 800e8c0:	40000800 	.word	0x40000800
 800e8c4:	40000c00 	.word	0x40000c00
 800e8c8:	40010400 	.word	0x40010400
 800e8cc:	40014000 	.word	0x40014000
 800e8d0:	40001800 	.word	0x40001800

0800e8d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e8d4:	b480      	push	{r7}
 800e8d6:	b083      	sub	sp, #12
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e8dc:	bf00      	nop
 800e8de:	370c      	adds	r7, #12
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e6:	4770      	bx	lr

0800e8e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e8e8:	b480      	push	{r7}
 800e8ea:	b083      	sub	sp, #12
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e8f0:	bf00      	nop
 800e8f2:	370c      	adds	r7, #12
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fa:	4770      	bx	lr

0800e8fc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800e8fc:	b084      	sub	sp, #16
 800e8fe:	b480      	push	{r7}
 800e900:	b085      	sub	sp, #20
 800e902:	af00      	add	r7, sp, #0
 800e904:	6078      	str	r0, [r7, #4]
 800e906:	f107 001c 	add.w	r0, r7, #28
 800e90a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e90e:	2300      	movs	r3, #0
 800e910:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800e912:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800e914:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800e916:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800e918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800e91a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800e91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800e91e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800e920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800e922:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800e926:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800e928:	68fa      	ldr	r2, [r7, #12]
 800e92a:	4313      	orrs	r3, r2
 800e92c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	685b      	ldr	r3, [r3, #4]
 800e932:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800e936:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e93a:	68fa      	ldr	r2, [r7, #12]
 800e93c:	431a      	orrs	r2, r3
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e942:	2300      	movs	r3, #0
}
 800e944:	4618      	mov	r0, r3
 800e946:	3714      	adds	r7, #20
 800e948:	46bd      	mov	sp, r7
 800e94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94e:	b004      	add	sp, #16
 800e950:	4770      	bx	lr

0800e952 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800e952:	b480      	push	{r7}
 800e954:	b083      	sub	sp, #12
 800e956:	af00      	add	r7, sp, #0
 800e958:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800e960:	4618      	mov	r0, r3
 800e962:	370c      	adds	r7, #12
 800e964:	46bd      	mov	sp, r7
 800e966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96a:	4770      	bx	lr

0800e96c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800e96c:	b480      	push	{r7}
 800e96e:	b083      	sub	sp, #12
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
 800e974:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	681a      	ldr	r2, [r3, #0]
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e980:	2300      	movs	r3, #0
}
 800e982:	4618      	mov	r0, r3
 800e984:	370c      	adds	r7, #12
 800e986:	46bd      	mov	sp, r7
 800e988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98c:	4770      	bx	lr

0800e98e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800e98e:	b580      	push	{r7, lr}
 800e990:	b082      	sub	sp, #8
 800e992:	af00      	add	r7, sp, #0
 800e994:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	2203      	movs	r2, #3
 800e99a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800e99c:	2002      	movs	r0, #2
 800e99e:	f7f7 fe73 	bl	8006688 <HAL_Delay>
  
  return HAL_OK;
 800e9a2:	2300      	movs	r3, #0
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	3708      	adds	r7, #8
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}

0800e9ac <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800e9ac:	b480      	push	{r7}
 800e9ae:	b083      	sub	sp, #12
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	f003 0303 	and.w	r3, r3, #3
}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	370c      	adds	r7, #12
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c6:	4770      	bx	lr

0800e9c8 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	b085      	sub	sp, #20
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
 800e9d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	681a      	ldr	r2, [r3, #0]
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800e9e2:	683b      	ldr	r3, [r7, #0]
 800e9e4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e9e6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800e9ec:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e9ee:	683b      	ldr	r3, [r7, #0]
 800e9f0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800e9f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e9f4:	68fa      	ldr	r2, [r7, #12]
 800e9f6:	4313      	orrs	r3, r2
 800e9f8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	68db      	ldr	r3, [r3, #12]
 800e9fe:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ea02:	f023 030f 	bic.w	r3, r3, #15
 800ea06:	68fa      	ldr	r2, [r7, #12]
 800ea08:	431a      	orrs	r2, r3
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ea0e:	2300      	movs	r3, #0
}
 800ea10:	4618      	mov	r0, r3
 800ea12:	3714      	adds	r7, #20
 800ea14:	46bd      	mov	sp, r7
 800ea16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1a:	4770      	bx	lr

0800ea1c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800ea1c:	b480      	push	{r7}
 800ea1e:	b083      	sub	sp, #12
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	691b      	ldr	r3, [r3, #16]
 800ea28:	b2db      	uxtb	r3, r3
}
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	370c      	adds	r7, #12
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea34:	4770      	bx	lr

0800ea36 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800ea36:	b480      	push	{r7}
 800ea38:	b085      	sub	sp, #20
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	6078      	str	r0, [r7, #4]
 800ea3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	3314      	adds	r3, #20
 800ea44:	461a      	mov	r2, r3
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	4413      	add	r3, r2
 800ea4a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	681b      	ldr	r3, [r3, #0]
}  
 800ea50:	4618      	mov	r0, r3
 800ea52:	3714      	adds	r7, #20
 800ea54:	46bd      	mov	sp, r7
 800ea56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5a:	4770      	bx	lr

0800ea5c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800ea5c:	b480      	push	{r7}
 800ea5e:	b085      	sub	sp, #20
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
 800ea64:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ea66:	2300      	movs	r3, #0
 800ea68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800ea6a:	683b      	ldr	r3, [r7, #0]
 800ea6c:	681a      	ldr	r2, [r3, #0]
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	685a      	ldr	r2, [r3, #4]
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ea82:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ea88:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ea8e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ea90:	68fa      	ldr	r2, [r7, #12]
 800ea92:	4313      	orrs	r3, r2
 800ea94:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea9a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	431a      	orrs	r2, r3
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800eaa6:	2300      	movs	r3, #0

}
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	3714      	adds	r7, #20
 800eaac:	46bd      	mov	sp, r7
 800eaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab2:	4770      	bx	lr

0800eab4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b088      	sub	sp, #32
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
 800eabc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800eac2:	2310      	movs	r3, #16
 800eac4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eac6:	2340      	movs	r3, #64	; 0x40
 800eac8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eaca:	2300      	movs	r3, #0
 800eacc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eace:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ead2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ead4:	f107 0308 	add.w	r3, r7, #8
 800ead8:	4619      	mov	r1, r3
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	f7ff ff74 	bl	800e9c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800eae0:	f241 3288 	movw	r2, #5000	; 0x1388
 800eae4:	2110      	movs	r1, #16
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f000 fa44 	bl	800ef74 <SDMMC_GetCmdResp1>
 800eaec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eaee:	69fb      	ldr	r3, [r7, #28]
}
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	3720      	adds	r7, #32
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	bd80      	pop	{r7, pc}

0800eaf8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b088      	sub	sp, #32
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
 800eb00:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800eb06:	2311      	movs	r3, #17
 800eb08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eb0a:	2340      	movs	r3, #64	; 0x40
 800eb0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eb0e:	2300      	movs	r3, #0
 800eb10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eb12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb16:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eb18:	f107 0308 	add.w	r3, r7, #8
 800eb1c:	4619      	mov	r1, r3
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f7ff ff52 	bl	800e9c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800eb24:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb28:	2111      	movs	r1, #17
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	f000 fa22 	bl	800ef74 <SDMMC_GetCmdResp1>
 800eb30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb32:	69fb      	ldr	r3, [r7, #28]
}
 800eb34:	4618      	mov	r0, r3
 800eb36:	3720      	adds	r7, #32
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd80      	pop	{r7, pc}

0800eb3c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b088      	sub	sp, #32
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
 800eb44:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800eb4a:	2312      	movs	r3, #18
 800eb4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eb4e:	2340      	movs	r3, #64	; 0x40
 800eb50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eb52:	2300      	movs	r3, #0
 800eb54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eb56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eb5c:	f107 0308 	add.w	r3, r7, #8
 800eb60:	4619      	mov	r1, r3
 800eb62:	6878      	ldr	r0, [r7, #4]
 800eb64:	f7ff ff30 	bl	800e9c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800eb68:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb6c:	2112      	movs	r1, #18
 800eb6e:	6878      	ldr	r0, [r7, #4]
 800eb70:	f000 fa00 	bl	800ef74 <SDMMC_GetCmdResp1>
 800eb74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb76:	69fb      	ldr	r3, [r7, #28]
}
 800eb78:	4618      	mov	r0, r3
 800eb7a:	3720      	adds	r7, #32
 800eb7c:	46bd      	mov	sp, r7
 800eb7e:	bd80      	pop	{r7, pc}

0800eb80 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b088      	sub	sp, #32
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
 800eb88:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800eb8e:	2318      	movs	r3, #24
 800eb90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eb92:	2340      	movs	r3, #64	; 0x40
 800eb94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eb96:	2300      	movs	r3, #0
 800eb98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eb9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eba0:	f107 0308 	add.w	r3, r7, #8
 800eba4:	4619      	mov	r1, r3
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f7ff ff0e 	bl	800e9c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ebac:	f241 3288 	movw	r2, #5000	; 0x1388
 800ebb0:	2118      	movs	r1, #24
 800ebb2:	6878      	ldr	r0, [r7, #4]
 800ebb4:	f000 f9de 	bl	800ef74 <SDMMC_GetCmdResp1>
 800ebb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ebba:	69fb      	ldr	r3, [r7, #28]
}
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	3720      	adds	r7, #32
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}

0800ebc4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ebc4:	b580      	push	{r7, lr}
 800ebc6:	b088      	sub	sp, #32
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	6078      	str	r0, [r7, #4]
 800ebcc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ebce:	683b      	ldr	r3, [r7, #0]
 800ebd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ebd2:	2319      	movs	r3, #25
 800ebd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ebd6:	2340      	movs	r3, #64	; 0x40
 800ebd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ebda:	2300      	movs	r3, #0
 800ebdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ebde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ebe2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ebe4:	f107 0308 	add.w	r3, r7, #8
 800ebe8:	4619      	mov	r1, r3
 800ebea:	6878      	ldr	r0, [r7, #4]
 800ebec:	f7ff feec 	bl	800e9c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ebf0:	f241 3288 	movw	r2, #5000	; 0x1388
 800ebf4:	2119      	movs	r1, #25
 800ebf6:	6878      	ldr	r0, [r7, #4]
 800ebf8:	f000 f9bc 	bl	800ef74 <SDMMC_GetCmdResp1>
 800ebfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ebfe:	69fb      	ldr	r3, [r7, #28]
}
 800ec00:	4618      	mov	r0, r3
 800ec02:	3720      	adds	r7, #32
 800ec04:	46bd      	mov	sp, r7
 800ec06:	bd80      	pop	{r7, pc}

0800ec08 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b088      	sub	sp, #32
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ec10:	2300      	movs	r3, #0
 800ec12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ec14:	230c      	movs	r3, #12
 800ec16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ec18:	2340      	movs	r3, #64	; 0x40
 800ec1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ec20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec24:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ec26:	f107 0308 	add.w	r3, r7, #8
 800ec2a:	4619      	mov	r1, r3
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f7ff fecb 	bl	800e9c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800ec32:	4a05      	ldr	r2, [pc, #20]	; (800ec48 <SDMMC_CmdStopTransfer+0x40>)
 800ec34:	210c      	movs	r1, #12
 800ec36:	6878      	ldr	r0, [r7, #4]
 800ec38:	f000 f99c 	bl	800ef74 <SDMMC_GetCmdResp1>
 800ec3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec3e:	69fb      	ldr	r3, [r7, #28]
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	3720      	adds	r7, #32
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd80      	pop	{r7, pc}
 800ec48:	05f5e100 	.word	0x05f5e100

0800ec4c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b08a      	sub	sp, #40	; 0x28
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	60f8      	str	r0, [r7, #12]
 800ec54:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ec5c:	2307      	movs	r3, #7
 800ec5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ec60:	2340      	movs	r3, #64	; 0x40
 800ec62:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ec64:	2300      	movs	r3, #0
 800ec66:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ec68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec6c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ec6e:	f107 0310 	add.w	r3, r7, #16
 800ec72:	4619      	mov	r1, r3
 800ec74:	68f8      	ldr	r0, [r7, #12]
 800ec76:	f7ff fea7 	bl	800e9c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800ec7a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec7e:	2107      	movs	r1, #7
 800ec80:	68f8      	ldr	r0, [r7, #12]
 800ec82:	f000 f977 	bl	800ef74 <SDMMC_GetCmdResp1>
 800ec86:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ec88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	3728      	adds	r7, #40	; 0x28
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}

0800ec92 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800ec92:	b580      	push	{r7, lr}
 800ec94:	b088      	sub	sp, #32
 800ec96:	af00      	add	r7, sp, #0
 800ec98:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800eca2:	2300      	movs	r3, #0
 800eca4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eca6:	2300      	movs	r3, #0
 800eca8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ecaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ecae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ecb0:	f107 0308 	add.w	r3, r7, #8
 800ecb4:	4619      	mov	r1, r3
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	f7ff fe86 	bl	800e9c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800ecbc:	6878      	ldr	r0, [r7, #4]
 800ecbe:	f000 f92d 	bl	800ef1c <SDMMC_GetCmdError>
 800ecc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ecc4:	69fb      	ldr	r3, [r7, #28]
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3720      	adds	r7, #32
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}

0800ecce <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800ecce:	b580      	push	{r7, lr}
 800ecd0:	b088      	sub	sp, #32
 800ecd2:	af00      	add	r7, sp, #0
 800ecd4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ecd6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ecda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ecdc:	2308      	movs	r3, #8
 800ecde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ece0:	2340      	movs	r3, #64	; 0x40
 800ece2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ece4:	2300      	movs	r3, #0
 800ece6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ece8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ecec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ecee:	f107 0308 	add.w	r3, r7, #8
 800ecf2:	4619      	mov	r1, r3
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f7ff fe67 	bl	800e9c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800ecfa:	6878      	ldr	r0, [r7, #4]
 800ecfc:	f000 fb24 	bl	800f348 <SDMMC_GetCmdResp7>
 800ed00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed02:	69fb      	ldr	r3, [r7, #28]
}
 800ed04:	4618      	mov	r0, r3
 800ed06:	3720      	adds	r7, #32
 800ed08:	46bd      	mov	sp, r7
 800ed0a:	bd80      	pop	{r7, pc}

0800ed0c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b088      	sub	sp, #32
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	6078      	str	r0, [r7, #4]
 800ed14:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ed16:	683b      	ldr	r3, [r7, #0]
 800ed18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ed1a:	2337      	movs	r3, #55	; 0x37
 800ed1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ed1e:	2340      	movs	r3, #64	; 0x40
 800ed20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ed22:	2300      	movs	r3, #0
 800ed24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ed26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ed2c:	f107 0308 	add.w	r3, r7, #8
 800ed30:	4619      	mov	r1, r3
 800ed32:	6878      	ldr	r0, [r7, #4]
 800ed34:	f7ff fe48 	bl	800e9c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800ed38:	f241 3288 	movw	r2, #5000	; 0x1388
 800ed3c:	2137      	movs	r1, #55	; 0x37
 800ed3e:	6878      	ldr	r0, [r7, #4]
 800ed40:	f000 f918 	bl	800ef74 <SDMMC_GetCmdResp1>
 800ed44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed46:	69fb      	ldr	r3, [r7, #28]
}
 800ed48:	4618      	mov	r0, r3
 800ed4a:	3720      	adds	r7, #32
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd80      	pop	{r7, pc}

0800ed50 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b088      	sub	sp, #32
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
 800ed58:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ed60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ed64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ed66:	2329      	movs	r3, #41	; 0x29
 800ed68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ed6a:	2340      	movs	r3, #64	; 0x40
 800ed6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ed6e:	2300      	movs	r3, #0
 800ed70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ed72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ed78:	f107 0308 	add.w	r3, r7, #8
 800ed7c:	4619      	mov	r1, r3
 800ed7e:	6878      	ldr	r0, [r7, #4]
 800ed80:	f7ff fe22 	bl	800e9c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f000 fa2b 	bl	800f1e0 <SDMMC_GetCmdResp3>
 800ed8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed8c:	69fb      	ldr	r3, [r7, #28]
}
 800ed8e:	4618      	mov	r0, r3
 800ed90:	3720      	adds	r7, #32
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}

0800ed96 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800ed96:	b580      	push	{r7, lr}
 800ed98:	b088      	sub	sp, #32
 800ed9a:	af00      	add	r7, sp, #0
 800ed9c:	6078      	str	r0, [r7, #4]
 800ed9e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800eda4:	2306      	movs	r3, #6
 800eda6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eda8:	2340      	movs	r3, #64	; 0x40
 800edaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800edac:	2300      	movs	r3, #0
 800edae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800edb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800edb4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800edb6:	f107 0308 	add.w	r3, r7, #8
 800edba:	4619      	mov	r1, r3
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f7ff fe03 	bl	800e9c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800edc2:	f241 3288 	movw	r2, #5000	; 0x1388
 800edc6:	2106      	movs	r1, #6
 800edc8:	6878      	ldr	r0, [r7, #4]
 800edca:	f000 f8d3 	bl	800ef74 <SDMMC_GetCmdResp1>
 800edce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800edd0:	69fb      	ldr	r3, [r7, #28]
}
 800edd2:	4618      	mov	r0, r3
 800edd4:	3720      	adds	r7, #32
 800edd6:	46bd      	mov	sp, r7
 800edd8:	bd80      	pop	{r7, pc}

0800edda <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800edda:	b580      	push	{r7, lr}
 800eddc:	b088      	sub	sp, #32
 800edde:	af00      	add	r7, sp, #0
 800ede0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ede2:	2300      	movs	r3, #0
 800ede4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ede6:	2333      	movs	r3, #51	; 0x33
 800ede8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800edea:	2340      	movs	r3, #64	; 0x40
 800edec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800edee:	2300      	movs	r3, #0
 800edf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800edf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800edf6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800edf8:	f107 0308 	add.w	r3, r7, #8
 800edfc:	4619      	mov	r1, r3
 800edfe:	6878      	ldr	r0, [r7, #4]
 800ee00:	f7ff fde2 	bl	800e9c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800ee04:	f241 3288 	movw	r2, #5000	; 0x1388
 800ee08:	2133      	movs	r1, #51	; 0x33
 800ee0a:	6878      	ldr	r0, [r7, #4]
 800ee0c:	f000 f8b2 	bl	800ef74 <SDMMC_GetCmdResp1>
 800ee10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee12:	69fb      	ldr	r3, [r7, #28]
}
 800ee14:	4618      	mov	r0, r3
 800ee16:	3720      	adds	r7, #32
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}

0800ee1c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b088      	sub	sp, #32
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ee24:	2300      	movs	r3, #0
 800ee26:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ee28:	2302      	movs	r3, #2
 800ee2a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ee2c:	23c0      	movs	r3, #192	; 0xc0
 800ee2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ee30:	2300      	movs	r3, #0
 800ee32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ee34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee38:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ee3a:	f107 0308 	add.w	r3, r7, #8
 800ee3e:	4619      	mov	r1, r3
 800ee40:	6878      	ldr	r0, [r7, #4]
 800ee42:	f7ff fdc1 	bl	800e9c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ee46:	6878      	ldr	r0, [r7, #4]
 800ee48:	f000 f982 	bl	800f150 <SDMMC_GetCmdResp2>
 800ee4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee4e:	69fb      	ldr	r3, [r7, #28]
}
 800ee50:	4618      	mov	r0, r3
 800ee52:	3720      	adds	r7, #32
 800ee54:	46bd      	mov	sp, r7
 800ee56:	bd80      	pop	{r7, pc}

0800ee58 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b088      	sub	sp, #32
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
 800ee60:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ee66:	2309      	movs	r3, #9
 800ee68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ee6a:	23c0      	movs	r3, #192	; 0xc0
 800ee6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ee6e:	2300      	movs	r3, #0
 800ee70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ee72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ee78:	f107 0308 	add.w	r3, r7, #8
 800ee7c:	4619      	mov	r1, r3
 800ee7e:	6878      	ldr	r0, [r7, #4]
 800ee80:	f7ff fda2 	bl	800e9c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ee84:	6878      	ldr	r0, [r7, #4]
 800ee86:	f000 f963 	bl	800f150 <SDMMC_GetCmdResp2>
 800ee8a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee8c:	69fb      	ldr	r3, [r7, #28]
}
 800ee8e:	4618      	mov	r0, r3
 800ee90:	3720      	adds	r7, #32
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bd80      	pop	{r7, pc}

0800ee96 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800ee96:	b580      	push	{r7, lr}
 800ee98:	b088      	sub	sp, #32
 800ee9a:	af00      	add	r7, sp, #0
 800ee9c:	6078      	str	r0, [r7, #4]
 800ee9e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800eea0:	2300      	movs	r3, #0
 800eea2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800eea4:	2303      	movs	r3, #3
 800eea6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eea8:	2340      	movs	r3, #64	; 0x40
 800eeaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eeac:	2300      	movs	r3, #0
 800eeae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eeb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eeb4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eeb6:	f107 0308 	add.w	r3, r7, #8
 800eeba:	4619      	mov	r1, r3
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	f7ff fd83 	bl	800e9c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800eec2:	683a      	ldr	r2, [r7, #0]
 800eec4:	2103      	movs	r1, #3
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f000 f9c8 	bl	800f25c <SDMMC_GetCmdResp6>
 800eecc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eece:	69fb      	ldr	r3, [r7, #28]
}
 800eed0:	4618      	mov	r0, r3
 800eed2:	3720      	adds	r7, #32
 800eed4:	46bd      	mov	sp, r7
 800eed6:	bd80      	pop	{r7, pc}

0800eed8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b088      	sub	sp, #32
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
 800eee0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800eee6:	230d      	movs	r3, #13
 800eee8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eeea:	2340      	movs	r3, #64	; 0x40
 800eeec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eeee:	2300      	movs	r3, #0
 800eef0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eef6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eef8:	f107 0308 	add.w	r3, r7, #8
 800eefc:	4619      	mov	r1, r3
 800eefe:	6878      	ldr	r0, [r7, #4]
 800ef00:	f7ff fd62 	bl	800e9c8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800ef04:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef08:	210d      	movs	r1, #13
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f000 f832 	bl	800ef74 <SDMMC_GetCmdResp1>
 800ef10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef12:	69fb      	ldr	r3, [r7, #28]
}
 800ef14:	4618      	mov	r0, r3
 800ef16:	3720      	adds	r7, #32
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}

0800ef1c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800ef1c:	b480      	push	{r7}
 800ef1e:	b085      	sub	sp, #20
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ef24:	4b11      	ldr	r3, [pc, #68]	; (800ef6c <SDMMC_GetCmdError+0x50>)
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	4a11      	ldr	r2, [pc, #68]	; (800ef70 <SDMMC_GetCmdError+0x54>)
 800ef2a:	fba2 2303 	umull	r2, r3, r2, r3
 800ef2e:	0a5b      	lsrs	r3, r3, #9
 800ef30:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef34:	fb02 f303 	mul.w	r3, r2, r3
 800ef38:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	1e5a      	subs	r2, r3, #1
 800ef3e:	60fa      	str	r2, [r7, #12]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d102      	bne.n	800ef4a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ef44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ef48:	e009      	b.n	800ef5e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d0f1      	beq.n	800ef3a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	22c5      	movs	r2, #197	; 0xc5
 800ef5a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ef5c:	2300      	movs	r3, #0
}
 800ef5e:	4618      	mov	r0, r3
 800ef60:	3714      	adds	r7, #20
 800ef62:	46bd      	mov	sp, r7
 800ef64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef68:	4770      	bx	lr
 800ef6a:	bf00      	nop
 800ef6c:	20000000 	.word	0x20000000
 800ef70:	10624dd3 	.word	0x10624dd3

0800ef74 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b088      	sub	sp, #32
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	60f8      	str	r0, [r7, #12]
 800ef7c:	460b      	mov	r3, r1
 800ef7e:	607a      	str	r2, [r7, #4]
 800ef80:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ef82:	4b70      	ldr	r3, [pc, #448]	; (800f144 <SDMMC_GetCmdResp1+0x1d0>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	4a70      	ldr	r2, [pc, #448]	; (800f148 <SDMMC_GetCmdResp1+0x1d4>)
 800ef88:	fba2 2303 	umull	r2, r3, r2, r3
 800ef8c:	0a5a      	lsrs	r2, r3, #9
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	fb02 f303 	mul.w	r3, r2, r3
 800ef94:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ef96:	69fb      	ldr	r3, [r7, #28]
 800ef98:	1e5a      	subs	r2, r3, #1
 800ef9a:	61fa      	str	r2, [r7, #28]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d102      	bne.n	800efa6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800efa0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800efa4:	e0c9      	b.n	800f13a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efaa:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800efac:	69bb      	ldr	r3, [r7, #24]
 800efae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d0ef      	beq.n	800ef96 <SDMMC_GetCmdResp1+0x22>
 800efb6:	69bb      	ldr	r3, [r7, #24]
 800efb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d1ea      	bne.n	800ef96 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efc4:	f003 0304 	and.w	r3, r3, #4
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d004      	beq.n	800efd6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	2204      	movs	r2, #4
 800efd0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800efd2:	2304      	movs	r3, #4
 800efd4:	e0b1      	b.n	800f13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efda:	f003 0301 	and.w	r3, r3, #1
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d004      	beq.n	800efec <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	2201      	movs	r2, #1
 800efe6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800efe8:	2301      	movs	r3, #1
 800efea:	e0a6      	b.n	800f13a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	22c5      	movs	r2, #197	; 0xc5
 800eff0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800eff2:	68f8      	ldr	r0, [r7, #12]
 800eff4:	f7ff fd12 	bl	800ea1c <SDIO_GetCommandResponse>
 800eff8:	4603      	mov	r3, r0
 800effa:	461a      	mov	r2, r3
 800effc:	7afb      	ldrb	r3, [r7, #11]
 800effe:	4293      	cmp	r3, r2
 800f000:	d001      	beq.n	800f006 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f002:	2301      	movs	r3, #1
 800f004:	e099      	b.n	800f13a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800f006:	2100      	movs	r1, #0
 800f008:	68f8      	ldr	r0, [r7, #12]
 800f00a:	f7ff fd14 	bl	800ea36 <SDIO_GetResponse>
 800f00e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f010:	697a      	ldr	r2, [r7, #20]
 800f012:	4b4e      	ldr	r3, [pc, #312]	; (800f14c <SDMMC_GetCmdResp1+0x1d8>)
 800f014:	4013      	ands	r3, r2
 800f016:	2b00      	cmp	r3, #0
 800f018:	d101      	bne.n	800f01e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800f01a:	2300      	movs	r3, #0
 800f01c:	e08d      	b.n	800f13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f01e:	697b      	ldr	r3, [r7, #20]
 800f020:	2b00      	cmp	r3, #0
 800f022:	da02      	bge.n	800f02a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f024:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f028:	e087      	b.n	800f13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f02a:	697b      	ldr	r3, [r7, #20]
 800f02c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f030:	2b00      	cmp	r3, #0
 800f032:	d001      	beq.n	800f038 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f034:	2340      	movs	r3, #64	; 0x40
 800f036:	e080      	b.n	800f13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f038:	697b      	ldr	r3, [r7, #20]
 800f03a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d001      	beq.n	800f046 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f042:	2380      	movs	r3, #128	; 0x80
 800f044:	e079      	b.n	800f13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f046:	697b      	ldr	r3, [r7, #20]
 800f048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d002      	beq.n	800f056 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f050:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f054:	e071      	b.n	800f13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f056:	697b      	ldr	r3, [r7, #20]
 800f058:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d002      	beq.n	800f066 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f060:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f064:	e069      	b.n	800f13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d002      	beq.n	800f076 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f074:	e061      	b.n	800f13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d002      	beq.n	800f086 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f080:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f084:	e059      	b.n	800f13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f086:	697b      	ldr	r3, [r7, #20]
 800f088:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d002      	beq.n	800f096 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f094:	e051      	b.n	800f13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f096:	697b      	ldr	r3, [r7, #20]
 800f098:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d002      	beq.n	800f0a6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f0a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f0a4:	e049      	b.n	800f13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f0a6:	697b      	ldr	r3, [r7, #20]
 800f0a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d002      	beq.n	800f0b6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f0b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f0b4:	e041      	b.n	800f13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f0b6:	697b      	ldr	r3, [r7, #20]
 800f0b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d002      	beq.n	800f0c6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800f0c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f0c4:	e039      	b.n	800f13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f0c6:	697b      	ldr	r3, [r7, #20]
 800f0c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d002      	beq.n	800f0d6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f0d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f0d4:	e031      	b.n	800f13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d002      	beq.n	800f0e6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f0e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f0e4:	e029      	b.n	800f13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f0e6:	697b      	ldr	r3, [r7, #20]
 800f0e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d002      	beq.n	800f0f6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f0f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f0f4:	e021      	b.n	800f13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d002      	beq.n	800f106 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f100:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f104:	e019      	b.n	800f13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f106:	697b      	ldr	r3, [r7, #20]
 800f108:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d002      	beq.n	800f116 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f110:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f114:	e011      	b.n	800f13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f116:	697b      	ldr	r3, [r7, #20]
 800f118:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d002      	beq.n	800f126 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f120:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f124:	e009      	b.n	800f13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f126:	697b      	ldr	r3, [r7, #20]
 800f128:	f003 0308 	and.w	r3, r3, #8
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d002      	beq.n	800f136 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800f130:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f134:	e001      	b.n	800f13a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f136:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f13a:	4618      	mov	r0, r3
 800f13c:	3720      	adds	r7, #32
 800f13e:	46bd      	mov	sp, r7
 800f140:	bd80      	pop	{r7, pc}
 800f142:	bf00      	nop
 800f144:	20000000 	.word	0x20000000
 800f148:	10624dd3 	.word	0x10624dd3
 800f14c:	fdffe008 	.word	0xfdffe008

0800f150 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800f150:	b480      	push	{r7}
 800f152:	b085      	sub	sp, #20
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f158:	4b1f      	ldr	r3, [pc, #124]	; (800f1d8 <SDMMC_GetCmdResp2+0x88>)
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	4a1f      	ldr	r2, [pc, #124]	; (800f1dc <SDMMC_GetCmdResp2+0x8c>)
 800f15e:	fba2 2303 	umull	r2, r3, r2, r3
 800f162:	0a5b      	lsrs	r3, r3, #9
 800f164:	f241 3288 	movw	r2, #5000	; 0x1388
 800f168:	fb02 f303 	mul.w	r3, r2, r3
 800f16c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	1e5a      	subs	r2, r3, #1
 800f172:	60fa      	str	r2, [r7, #12]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d102      	bne.n	800f17e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f178:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f17c:	e026      	b.n	800f1cc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f182:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d0ef      	beq.n	800f16e <SDMMC_GetCmdResp2+0x1e>
 800f18e:	68bb      	ldr	r3, [r7, #8]
 800f190:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f194:	2b00      	cmp	r3, #0
 800f196:	d1ea      	bne.n	800f16e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f19c:	f003 0304 	and.w	r3, r3, #4
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d004      	beq.n	800f1ae <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2204      	movs	r2, #4
 800f1a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f1aa:	2304      	movs	r3, #4
 800f1ac:	e00e      	b.n	800f1cc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1b2:	f003 0301 	and.w	r3, r3, #1
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d004      	beq.n	800f1c4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2201      	movs	r2, #1
 800f1be:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f1c0:	2301      	movs	r3, #1
 800f1c2:	e003      	b.n	800f1cc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	22c5      	movs	r2, #197	; 0xc5
 800f1c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f1ca:	2300      	movs	r3, #0
}
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	3714      	adds	r7, #20
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d6:	4770      	bx	lr
 800f1d8:	20000000 	.word	0x20000000
 800f1dc:	10624dd3 	.word	0x10624dd3

0800f1e0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800f1e0:	b480      	push	{r7}
 800f1e2:	b085      	sub	sp, #20
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f1e8:	4b1a      	ldr	r3, [pc, #104]	; (800f254 <SDMMC_GetCmdResp3+0x74>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	4a1a      	ldr	r2, [pc, #104]	; (800f258 <SDMMC_GetCmdResp3+0x78>)
 800f1ee:	fba2 2303 	umull	r2, r3, r2, r3
 800f1f2:	0a5b      	lsrs	r3, r3, #9
 800f1f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800f1f8:	fb02 f303 	mul.w	r3, r2, r3
 800f1fc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	1e5a      	subs	r2, r3, #1
 800f202:	60fa      	str	r2, [r7, #12]
 800f204:	2b00      	cmp	r3, #0
 800f206:	d102      	bne.n	800f20e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f208:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f20c:	e01b      	b.n	800f246 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f212:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f214:	68bb      	ldr	r3, [r7, #8]
 800f216:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d0ef      	beq.n	800f1fe <SDMMC_GetCmdResp3+0x1e>
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f224:	2b00      	cmp	r3, #0
 800f226:	d1ea      	bne.n	800f1fe <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f22c:	f003 0304 	and.w	r3, r3, #4
 800f230:	2b00      	cmp	r3, #0
 800f232:	d004      	beq.n	800f23e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2204      	movs	r2, #4
 800f238:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f23a:	2304      	movs	r3, #4
 800f23c:	e003      	b.n	800f246 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	22c5      	movs	r2, #197	; 0xc5
 800f242:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f244:	2300      	movs	r3, #0
}
 800f246:	4618      	mov	r0, r3
 800f248:	3714      	adds	r7, #20
 800f24a:	46bd      	mov	sp, r7
 800f24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f250:	4770      	bx	lr
 800f252:	bf00      	nop
 800f254:	20000000 	.word	0x20000000
 800f258:	10624dd3 	.word	0x10624dd3

0800f25c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b088      	sub	sp, #32
 800f260:	af00      	add	r7, sp, #0
 800f262:	60f8      	str	r0, [r7, #12]
 800f264:	460b      	mov	r3, r1
 800f266:	607a      	str	r2, [r7, #4]
 800f268:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f26a:	4b35      	ldr	r3, [pc, #212]	; (800f340 <SDMMC_GetCmdResp6+0xe4>)
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	4a35      	ldr	r2, [pc, #212]	; (800f344 <SDMMC_GetCmdResp6+0xe8>)
 800f270:	fba2 2303 	umull	r2, r3, r2, r3
 800f274:	0a5b      	lsrs	r3, r3, #9
 800f276:	f241 3288 	movw	r2, #5000	; 0x1388
 800f27a:	fb02 f303 	mul.w	r3, r2, r3
 800f27e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800f280:	69fb      	ldr	r3, [r7, #28]
 800f282:	1e5a      	subs	r2, r3, #1
 800f284:	61fa      	str	r2, [r7, #28]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d102      	bne.n	800f290 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f28a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f28e:	e052      	b.n	800f336 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f294:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f296:	69bb      	ldr	r3, [r7, #24]
 800f298:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d0ef      	beq.n	800f280 <SDMMC_GetCmdResp6+0x24>
 800f2a0:	69bb      	ldr	r3, [r7, #24]
 800f2a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d1ea      	bne.n	800f280 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2ae:	f003 0304 	and.w	r3, r3, #4
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d004      	beq.n	800f2c0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	2204      	movs	r2, #4
 800f2ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f2bc:	2304      	movs	r3, #4
 800f2be:	e03a      	b.n	800f336 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f2c4:	f003 0301 	and.w	r3, r3, #1
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d004      	beq.n	800f2d6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	2201      	movs	r2, #1
 800f2d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	e02f      	b.n	800f336 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800f2d6:	68f8      	ldr	r0, [r7, #12]
 800f2d8:	f7ff fba0 	bl	800ea1c <SDIO_GetCommandResponse>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	461a      	mov	r2, r3
 800f2e0:	7afb      	ldrb	r3, [r7, #11]
 800f2e2:	4293      	cmp	r3, r2
 800f2e4:	d001      	beq.n	800f2ea <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f2e6:	2301      	movs	r3, #1
 800f2e8:	e025      	b.n	800f336 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	22c5      	movs	r2, #197	; 0xc5
 800f2ee:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800f2f0:	2100      	movs	r1, #0
 800f2f2:	68f8      	ldr	r0, [r7, #12]
 800f2f4:	f7ff fb9f 	bl	800ea36 <SDIO_GetResponse>
 800f2f8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800f2fa:	697b      	ldr	r3, [r7, #20]
 800f2fc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f300:	2b00      	cmp	r3, #0
 800f302:	d106      	bne.n	800f312 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	0c1b      	lsrs	r3, r3, #16
 800f308:	b29a      	uxth	r2, r3
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800f30e:	2300      	movs	r3, #0
 800f310:	e011      	b.n	800f336 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d002      	beq.n	800f322 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f31c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f320:	e009      	b.n	800f336 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800f322:	697b      	ldr	r3, [r7, #20]
 800f324:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d002      	beq.n	800f332 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f32c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f330:	e001      	b.n	800f336 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f332:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f336:	4618      	mov	r0, r3
 800f338:	3720      	adds	r7, #32
 800f33a:	46bd      	mov	sp, r7
 800f33c:	bd80      	pop	{r7, pc}
 800f33e:	bf00      	nop
 800f340:	20000000 	.word	0x20000000
 800f344:	10624dd3 	.word	0x10624dd3

0800f348 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800f348:	b480      	push	{r7}
 800f34a:	b085      	sub	sp, #20
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f350:	4b22      	ldr	r3, [pc, #136]	; (800f3dc <SDMMC_GetCmdResp7+0x94>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	4a22      	ldr	r2, [pc, #136]	; (800f3e0 <SDMMC_GetCmdResp7+0x98>)
 800f356:	fba2 2303 	umull	r2, r3, r2, r3
 800f35a:	0a5b      	lsrs	r3, r3, #9
 800f35c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f360:	fb02 f303 	mul.w	r3, r2, r3
 800f364:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	1e5a      	subs	r2, r3, #1
 800f36a:	60fa      	str	r2, [r7, #12]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d102      	bne.n	800f376 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f370:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f374:	e02c      	b.n	800f3d0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f37a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f37c:	68bb      	ldr	r3, [r7, #8]
 800f37e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f382:	2b00      	cmp	r3, #0
 800f384:	d0ef      	beq.n	800f366 <SDMMC_GetCmdResp7+0x1e>
 800f386:	68bb      	ldr	r3, [r7, #8]
 800f388:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d1ea      	bne.n	800f366 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f394:	f003 0304 	and.w	r3, r3, #4
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d004      	beq.n	800f3a6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	2204      	movs	r2, #4
 800f3a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f3a2:	2304      	movs	r3, #4
 800f3a4:	e014      	b.n	800f3d0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3aa:	f003 0301 	and.w	r3, r3, #1
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d004      	beq.n	800f3bc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	2201      	movs	r2, #1
 800f3b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f3b8:	2301      	movs	r3, #1
 800f3ba:	e009      	b.n	800f3d0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d002      	beq.n	800f3ce <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	2240      	movs	r2, #64	; 0x40
 800f3cc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f3ce:	2300      	movs	r3, #0
  
}
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	3714      	adds	r7, #20
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3da:	4770      	bx	lr
 800f3dc:	20000000 	.word	0x20000000
 800f3e0:	10624dd3 	.word	0x10624dd3

0800f3e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f3e4:	b084      	sub	sp, #16
 800f3e6:	b580      	push	{r7, lr}
 800f3e8:	b084      	sub	sp, #16
 800f3ea:	af00      	add	r7, sp, #0
 800f3ec:	6078      	str	r0, [r7, #4]
 800f3ee:	f107 001c 	add.w	r0, r7, #28
 800f3f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3f8:	2b01      	cmp	r3, #1
 800f3fa:	d122      	bne.n	800f442 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f400:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	68db      	ldr	r3, [r3, #12]
 800f40c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800f410:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f414:	687a      	ldr	r2, [r7, #4]
 800f416:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	68db      	ldr	r3, [r3, #12]
 800f41c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f426:	2b01      	cmp	r3, #1
 800f428:	d105      	bne.n	800f436 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	68db      	ldr	r3, [r3, #12]
 800f42e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f436:	6878      	ldr	r0, [r7, #4]
 800f438:	f001 fb16 	bl	8010a68 <USB_CoreReset>
 800f43c:	4603      	mov	r3, r0
 800f43e:	73fb      	strb	r3, [r7, #15]
 800f440:	e01a      	b.n	800f478 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	68db      	ldr	r3, [r3, #12]
 800f446:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f44e:	6878      	ldr	r0, [r7, #4]
 800f450:	f001 fb0a 	bl	8010a68 <USB_CoreReset>
 800f454:	4603      	mov	r3, r0
 800f456:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d106      	bne.n	800f46c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f462:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	639a      	str	r2, [r3, #56]	; 0x38
 800f46a:	e005      	b.n	800f478 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f470:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f47a:	2b01      	cmp	r3, #1
 800f47c:	d10b      	bne.n	800f496 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	689b      	ldr	r3, [r3, #8]
 800f482:	f043 0206 	orr.w	r2, r3, #6
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	689b      	ldr	r3, [r3, #8]
 800f48e:	f043 0220 	orr.w	r2, r3, #32
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f496:	7bfb      	ldrb	r3, [r7, #15]
}
 800f498:	4618      	mov	r0, r3
 800f49a:	3710      	adds	r7, #16
 800f49c:	46bd      	mov	sp, r7
 800f49e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f4a2:	b004      	add	sp, #16
 800f4a4:	4770      	bx	lr
	...

0800f4a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f4a8:	b480      	push	{r7}
 800f4aa:	b087      	sub	sp, #28
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	60f8      	str	r0, [r7, #12]
 800f4b0:	60b9      	str	r1, [r7, #8]
 800f4b2:	4613      	mov	r3, r2
 800f4b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f4b6:	79fb      	ldrb	r3, [r7, #7]
 800f4b8:	2b02      	cmp	r3, #2
 800f4ba:	d165      	bne.n	800f588 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f4bc:	68bb      	ldr	r3, [r7, #8]
 800f4be:	4a41      	ldr	r2, [pc, #260]	; (800f5c4 <USB_SetTurnaroundTime+0x11c>)
 800f4c0:	4293      	cmp	r3, r2
 800f4c2:	d906      	bls.n	800f4d2 <USB_SetTurnaroundTime+0x2a>
 800f4c4:	68bb      	ldr	r3, [r7, #8]
 800f4c6:	4a40      	ldr	r2, [pc, #256]	; (800f5c8 <USB_SetTurnaroundTime+0x120>)
 800f4c8:	4293      	cmp	r3, r2
 800f4ca:	d202      	bcs.n	800f4d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f4cc:	230f      	movs	r3, #15
 800f4ce:	617b      	str	r3, [r7, #20]
 800f4d0:	e062      	b.n	800f598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f4d2:	68bb      	ldr	r3, [r7, #8]
 800f4d4:	4a3c      	ldr	r2, [pc, #240]	; (800f5c8 <USB_SetTurnaroundTime+0x120>)
 800f4d6:	4293      	cmp	r3, r2
 800f4d8:	d306      	bcc.n	800f4e8 <USB_SetTurnaroundTime+0x40>
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	4a3b      	ldr	r2, [pc, #236]	; (800f5cc <USB_SetTurnaroundTime+0x124>)
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	d202      	bcs.n	800f4e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f4e2:	230e      	movs	r3, #14
 800f4e4:	617b      	str	r3, [r7, #20]
 800f4e6:	e057      	b.n	800f598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	4a38      	ldr	r2, [pc, #224]	; (800f5cc <USB_SetTurnaroundTime+0x124>)
 800f4ec:	4293      	cmp	r3, r2
 800f4ee:	d306      	bcc.n	800f4fe <USB_SetTurnaroundTime+0x56>
 800f4f0:	68bb      	ldr	r3, [r7, #8]
 800f4f2:	4a37      	ldr	r2, [pc, #220]	; (800f5d0 <USB_SetTurnaroundTime+0x128>)
 800f4f4:	4293      	cmp	r3, r2
 800f4f6:	d202      	bcs.n	800f4fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f4f8:	230d      	movs	r3, #13
 800f4fa:	617b      	str	r3, [r7, #20]
 800f4fc:	e04c      	b.n	800f598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f4fe:	68bb      	ldr	r3, [r7, #8]
 800f500:	4a33      	ldr	r2, [pc, #204]	; (800f5d0 <USB_SetTurnaroundTime+0x128>)
 800f502:	4293      	cmp	r3, r2
 800f504:	d306      	bcc.n	800f514 <USB_SetTurnaroundTime+0x6c>
 800f506:	68bb      	ldr	r3, [r7, #8]
 800f508:	4a32      	ldr	r2, [pc, #200]	; (800f5d4 <USB_SetTurnaroundTime+0x12c>)
 800f50a:	4293      	cmp	r3, r2
 800f50c:	d802      	bhi.n	800f514 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f50e:	230c      	movs	r3, #12
 800f510:	617b      	str	r3, [r7, #20]
 800f512:	e041      	b.n	800f598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f514:	68bb      	ldr	r3, [r7, #8]
 800f516:	4a2f      	ldr	r2, [pc, #188]	; (800f5d4 <USB_SetTurnaroundTime+0x12c>)
 800f518:	4293      	cmp	r3, r2
 800f51a:	d906      	bls.n	800f52a <USB_SetTurnaroundTime+0x82>
 800f51c:	68bb      	ldr	r3, [r7, #8]
 800f51e:	4a2e      	ldr	r2, [pc, #184]	; (800f5d8 <USB_SetTurnaroundTime+0x130>)
 800f520:	4293      	cmp	r3, r2
 800f522:	d802      	bhi.n	800f52a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f524:	230b      	movs	r3, #11
 800f526:	617b      	str	r3, [r7, #20]
 800f528:	e036      	b.n	800f598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f52a:	68bb      	ldr	r3, [r7, #8]
 800f52c:	4a2a      	ldr	r2, [pc, #168]	; (800f5d8 <USB_SetTurnaroundTime+0x130>)
 800f52e:	4293      	cmp	r3, r2
 800f530:	d906      	bls.n	800f540 <USB_SetTurnaroundTime+0x98>
 800f532:	68bb      	ldr	r3, [r7, #8]
 800f534:	4a29      	ldr	r2, [pc, #164]	; (800f5dc <USB_SetTurnaroundTime+0x134>)
 800f536:	4293      	cmp	r3, r2
 800f538:	d802      	bhi.n	800f540 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f53a:	230a      	movs	r3, #10
 800f53c:	617b      	str	r3, [r7, #20]
 800f53e:	e02b      	b.n	800f598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	4a26      	ldr	r2, [pc, #152]	; (800f5dc <USB_SetTurnaroundTime+0x134>)
 800f544:	4293      	cmp	r3, r2
 800f546:	d906      	bls.n	800f556 <USB_SetTurnaroundTime+0xae>
 800f548:	68bb      	ldr	r3, [r7, #8]
 800f54a:	4a25      	ldr	r2, [pc, #148]	; (800f5e0 <USB_SetTurnaroundTime+0x138>)
 800f54c:	4293      	cmp	r3, r2
 800f54e:	d202      	bcs.n	800f556 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f550:	2309      	movs	r3, #9
 800f552:	617b      	str	r3, [r7, #20]
 800f554:	e020      	b.n	800f598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f556:	68bb      	ldr	r3, [r7, #8]
 800f558:	4a21      	ldr	r2, [pc, #132]	; (800f5e0 <USB_SetTurnaroundTime+0x138>)
 800f55a:	4293      	cmp	r3, r2
 800f55c:	d306      	bcc.n	800f56c <USB_SetTurnaroundTime+0xc4>
 800f55e:	68bb      	ldr	r3, [r7, #8]
 800f560:	4a20      	ldr	r2, [pc, #128]	; (800f5e4 <USB_SetTurnaroundTime+0x13c>)
 800f562:	4293      	cmp	r3, r2
 800f564:	d802      	bhi.n	800f56c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f566:	2308      	movs	r3, #8
 800f568:	617b      	str	r3, [r7, #20]
 800f56a:	e015      	b.n	800f598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f56c:	68bb      	ldr	r3, [r7, #8]
 800f56e:	4a1d      	ldr	r2, [pc, #116]	; (800f5e4 <USB_SetTurnaroundTime+0x13c>)
 800f570:	4293      	cmp	r3, r2
 800f572:	d906      	bls.n	800f582 <USB_SetTurnaroundTime+0xda>
 800f574:	68bb      	ldr	r3, [r7, #8]
 800f576:	4a1c      	ldr	r2, [pc, #112]	; (800f5e8 <USB_SetTurnaroundTime+0x140>)
 800f578:	4293      	cmp	r3, r2
 800f57a:	d202      	bcs.n	800f582 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f57c:	2307      	movs	r3, #7
 800f57e:	617b      	str	r3, [r7, #20]
 800f580:	e00a      	b.n	800f598 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f582:	2306      	movs	r3, #6
 800f584:	617b      	str	r3, [r7, #20]
 800f586:	e007      	b.n	800f598 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f588:	79fb      	ldrb	r3, [r7, #7]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d102      	bne.n	800f594 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f58e:	2309      	movs	r3, #9
 800f590:	617b      	str	r3, [r7, #20]
 800f592:	e001      	b.n	800f598 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f594:	2309      	movs	r3, #9
 800f596:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	68db      	ldr	r3, [r3, #12]
 800f59c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	68da      	ldr	r2, [r3, #12]
 800f5a8:	697b      	ldr	r3, [r7, #20]
 800f5aa:	029b      	lsls	r3, r3, #10
 800f5ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800f5b0:	431a      	orrs	r2, r3
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f5b6:	2300      	movs	r3, #0
}
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	371c      	adds	r7, #28
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c2:	4770      	bx	lr
 800f5c4:	00d8acbf 	.word	0x00d8acbf
 800f5c8:	00e4e1c0 	.word	0x00e4e1c0
 800f5cc:	00f42400 	.word	0x00f42400
 800f5d0:	01067380 	.word	0x01067380
 800f5d4:	011a499f 	.word	0x011a499f
 800f5d8:	01312cff 	.word	0x01312cff
 800f5dc:	014ca43f 	.word	0x014ca43f
 800f5e0:	016e3600 	.word	0x016e3600
 800f5e4:	01a6ab1f 	.word	0x01a6ab1f
 800f5e8:	01e84800 	.word	0x01e84800

0800f5ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f5ec:	b480      	push	{r7}
 800f5ee:	b083      	sub	sp, #12
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	689b      	ldr	r3, [r3, #8]
 800f5f8:	f043 0201 	orr.w	r2, r3, #1
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f600:	2300      	movs	r3, #0
}
 800f602:	4618      	mov	r0, r3
 800f604:	370c      	adds	r7, #12
 800f606:	46bd      	mov	sp, r7
 800f608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60c:	4770      	bx	lr

0800f60e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f60e:	b480      	push	{r7}
 800f610:	b083      	sub	sp, #12
 800f612:	af00      	add	r7, sp, #0
 800f614:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	689b      	ldr	r3, [r3, #8]
 800f61a:	f023 0201 	bic.w	r2, r3, #1
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f622:	2300      	movs	r3, #0
}
 800f624:	4618      	mov	r0, r3
 800f626:	370c      	adds	r7, #12
 800f628:	46bd      	mov	sp, r7
 800f62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62e:	4770      	bx	lr

0800f630 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f630:	b580      	push	{r7, lr}
 800f632:	b084      	sub	sp, #16
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
 800f638:	460b      	mov	r3, r1
 800f63a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f63c:	2300      	movs	r3, #0
 800f63e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	68db      	ldr	r3, [r3, #12]
 800f644:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f64c:	78fb      	ldrb	r3, [r7, #3]
 800f64e:	2b01      	cmp	r3, #1
 800f650:	d115      	bne.n	800f67e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	68db      	ldr	r3, [r3, #12]
 800f656:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f65e:	2001      	movs	r0, #1
 800f660:	f7f7 f812 	bl	8006688 <HAL_Delay>
      ms++;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	3301      	adds	r3, #1
 800f668:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800f66a:	6878      	ldr	r0, [r7, #4]
 800f66c:	f001 f96c 	bl	8010948 <USB_GetMode>
 800f670:	4603      	mov	r3, r0
 800f672:	2b01      	cmp	r3, #1
 800f674:	d01e      	beq.n	800f6b4 <USB_SetCurrentMode+0x84>
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	2b31      	cmp	r3, #49	; 0x31
 800f67a:	d9f0      	bls.n	800f65e <USB_SetCurrentMode+0x2e>
 800f67c:	e01a      	b.n	800f6b4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f67e:	78fb      	ldrb	r3, [r7, #3]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d115      	bne.n	800f6b0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	68db      	ldr	r3, [r3, #12]
 800f688:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f690:	2001      	movs	r0, #1
 800f692:	f7f6 fff9 	bl	8006688 <HAL_Delay>
      ms++;
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	3301      	adds	r3, #1
 800f69a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800f69c:	6878      	ldr	r0, [r7, #4]
 800f69e:	f001 f953 	bl	8010948 <USB_GetMode>
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d005      	beq.n	800f6b4 <USB_SetCurrentMode+0x84>
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	2b31      	cmp	r3, #49	; 0x31
 800f6ac:	d9f0      	bls.n	800f690 <USB_SetCurrentMode+0x60>
 800f6ae:	e001      	b.n	800f6b4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f6b0:	2301      	movs	r3, #1
 800f6b2:	e005      	b.n	800f6c0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	2b32      	cmp	r3, #50	; 0x32
 800f6b8:	d101      	bne.n	800f6be <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f6ba:	2301      	movs	r3, #1
 800f6bc:	e000      	b.n	800f6c0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f6be:	2300      	movs	r3, #0
}
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	3710      	adds	r7, #16
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}

0800f6c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f6c8:	b084      	sub	sp, #16
 800f6ca:	b580      	push	{r7, lr}
 800f6cc:	b086      	sub	sp, #24
 800f6ce:	af00      	add	r7, sp, #0
 800f6d0:	6078      	str	r0, [r7, #4]
 800f6d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f6d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f6da:	2300      	movs	r3, #0
 800f6dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	613b      	str	r3, [r7, #16]
 800f6e6:	e009      	b.n	800f6fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f6e8:	687a      	ldr	r2, [r7, #4]
 800f6ea:	693b      	ldr	r3, [r7, #16]
 800f6ec:	3340      	adds	r3, #64	; 0x40
 800f6ee:	009b      	lsls	r3, r3, #2
 800f6f0:	4413      	add	r3, r2
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f6f6:	693b      	ldr	r3, [r7, #16]
 800f6f8:	3301      	adds	r3, #1
 800f6fa:	613b      	str	r3, [r7, #16]
 800f6fc:	693b      	ldr	r3, [r7, #16]
 800f6fe:	2b0e      	cmp	r3, #14
 800f700:	d9f2      	bls.n	800f6e8 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f704:	2b00      	cmp	r3, #0
 800f706:	d11c      	bne.n	800f742 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f70e:	685b      	ldr	r3, [r3, #4]
 800f710:	68fa      	ldr	r2, [r7, #12]
 800f712:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f716:	f043 0302 	orr.w	r3, r3, #2
 800f71a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f720:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	601a      	str	r2, [r3, #0]
 800f740:	e005      	b.n	800f74e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f746:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f754:	461a      	mov	r2, r3
 800f756:	2300      	movs	r3, #0
 800f758:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f760:	4619      	mov	r1, r3
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f768:	461a      	mov	r2, r3
 800f76a:	680b      	ldr	r3, [r1, #0]
 800f76c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f770:	2b01      	cmp	r3, #1
 800f772:	d10c      	bne.n	800f78e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f776:	2b00      	cmp	r3, #0
 800f778:	d104      	bne.n	800f784 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f77a:	2100      	movs	r1, #0
 800f77c:	6878      	ldr	r0, [r7, #4]
 800f77e:	f000 f945 	bl	800fa0c <USB_SetDevSpeed>
 800f782:	e008      	b.n	800f796 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f784:	2101      	movs	r1, #1
 800f786:	6878      	ldr	r0, [r7, #4]
 800f788:	f000 f940 	bl	800fa0c <USB_SetDevSpeed>
 800f78c:	e003      	b.n	800f796 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f78e:	2103      	movs	r1, #3
 800f790:	6878      	ldr	r0, [r7, #4]
 800f792:	f000 f93b 	bl	800fa0c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f796:	2110      	movs	r1, #16
 800f798:	6878      	ldr	r0, [r7, #4]
 800f79a:	f000 f8f3 	bl	800f984 <USB_FlushTxFifo>
 800f79e:	4603      	mov	r3, r0
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d001      	beq.n	800f7a8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800f7a4:	2301      	movs	r3, #1
 800f7a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f7a8:	6878      	ldr	r0, [r7, #4]
 800f7aa:	f000 f90f 	bl	800f9cc <USB_FlushRxFifo>
 800f7ae:	4603      	mov	r3, r0
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d001      	beq.n	800f7b8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800f7b4:	2301      	movs	r3, #1
 800f7b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7be:	461a      	mov	r2, r3
 800f7c0:	2300      	movs	r3, #0
 800f7c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7ca:	461a      	mov	r2, r3
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7d6:	461a      	mov	r2, r3
 800f7d8:	2300      	movs	r3, #0
 800f7da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f7dc:	2300      	movs	r3, #0
 800f7de:	613b      	str	r3, [r7, #16]
 800f7e0:	e043      	b.n	800f86a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f7e2:	693b      	ldr	r3, [r7, #16]
 800f7e4:	015a      	lsls	r2, r3, #5
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	4413      	add	r3, r2
 800f7ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f7f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f7f8:	d118      	bne.n	800f82c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800f7fa:	693b      	ldr	r3, [r7, #16]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d10a      	bne.n	800f816 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f800:	693b      	ldr	r3, [r7, #16]
 800f802:	015a      	lsls	r2, r3, #5
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	4413      	add	r3, r2
 800f808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f80c:	461a      	mov	r2, r3
 800f80e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f812:	6013      	str	r3, [r2, #0]
 800f814:	e013      	b.n	800f83e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f816:	693b      	ldr	r3, [r7, #16]
 800f818:	015a      	lsls	r2, r3, #5
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	4413      	add	r3, r2
 800f81e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f822:	461a      	mov	r2, r3
 800f824:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f828:	6013      	str	r3, [r2, #0]
 800f82a:	e008      	b.n	800f83e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f82c:	693b      	ldr	r3, [r7, #16]
 800f82e:	015a      	lsls	r2, r3, #5
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	4413      	add	r3, r2
 800f834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f838:	461a      	mov	r2, r3
 800f83a:	2300      	movs	r3, #0
 800f83c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f83e:	693b      	ldr	r3, [r7, #16]
 800f840:	015a      	lsls	r2, r3, #5
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	4413      	add	r3, r2
 800f846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f84a:	461a      	mov	r2, r3
 800f84c:	2300      	movs	r3, #0
 800f84e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f850:	693b      	ldr	r3, [r7, #16]
 800f852:	015a      	lsls	r2, r3, #5
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	4413      	add	r3, r2
 800f858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f85c:	461a      	mov	r2, r3
 800f85e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f862:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f864:	693b      	ldr	r3, [r7, #16]
 800f866:	3301      	adds	r3, #1
 800f868:	613b      	str	r3, [r7, #16]
 800f86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f86c:	693a      	ldr	r2, [r7, #16]
 800f86e:	429a      	cmp	r2, r3
 800f870:	d3b7      	bcc.n	800f7e2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f872:	2300      	movs	r3, #0
 800f874:	613b      	str	r3, [r7, #16]
 800f876:	e043      	b.n	800f900 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f878:	693b      	ldr	r3, [r7, #16]
 800f87a:	015a      	lsls	r2, r3, #5
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	4413      	add	r3, r2
 800f880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f88a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f88e:	d118      	bne.n	800f8c2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800f890:	693b      	ldr	r3, [r7, #16]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d10a      	bne.n	800f8ac <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f896:	693b      	ldr	r3, [r7, #16]
 800f898:	015a      	lsls	r2, r3, #5
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	4413      	add	r3, r2
 800f89e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8a2:	461a      	mov	r2, r3
 800f8a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f8a8:	6013      	str	r3, [r2, #0]
 800f8aa:	e013      	b.n	800f8d4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f8ac:	693b      	ldr	r3, [r7, #16]
 800f8ae:	015a      	lsls	r2, r3, #5
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	4413      	add	r3, r2
 800f8b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8b8:	461a      	mov	r2, r3
 800f8ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f8be:	6013      	str	r3, [r2, #0]
 800f8c0:	e008      	b.n	800f8d4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f8c2:	693b      	ldr	r3, [r7, #16]
 800f8c4:	015a      	lsls	r2, r3, #5
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	4413      	add	r3, r2
 800f8ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8ce:	461a      	mov	r2, r3
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f8d4:	693b      	ldr	r3, [r7, #16]
 800f8d6:	015a      	lsls	r2, r3, #5
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	4413      	add	r3, r2
 800f8dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8e0:	461a      	mov	r2, r3
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f8e6:	693b      	ldr	r3, [r7, #16]
 800f8e8:	015a      	lsls	r2, r3, #5
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	4413      	add	r3, r2
 800f8ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8f2:	461a      	mov	r2, r3
 800f8f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f8f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f8fa:	693b      	ldr	r3, [r7, #16]
 800f8fc:	3301      	adds	r3, #1
 800f8fe:	613b      	str	r3, [r7, #16]
 800f900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f902:	693a      	ldr	r2, [r7, #16]
 800f904:	429a      	cmp	r2, r3
 800f906:	d3b7      	bcc.n	800f878 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f90e:	691b      	ldr	r3, [r3, #16]
 800f910:	68fa      	ldr	r2, [r7, #12]
 800f912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f916:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f91a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	2200      	movs	r2, #0
 800f920:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f928:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d105      	bne.n	800f93c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	699b      	ldr	r3, [r3, #24]
 800f934:	f043 0210 	orr.w	r2, r3, #16
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	699a      	ldr	r2, [r3, #24]
 800f940:	4b0f      	ldr	r3, [pc, #60]	; (800f980 <USB_DevInit+0x2b8>)
 800f942:	4313      	orrs	r3, r2
 800f944:	687a      	ldr	r2, [r7, #4]
 800f946:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d005      	beq.n	800f95a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	699b      	ldr	r3, [r3, #24]
 800f952:	f043 0208 	orr.w	r2, r3, #8
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f95a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f95c:	2b01      	cmp	r3, #1
 800f95e:	d107      	bne.n	800f970 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	699b      	ldr	r3, [r3, #24]
 800f964:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f968:	f043 0304 	orr.w	r3, r3, #4
 800f96c:	687a      	ldr	r2, [r7, #4]
 800f96e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f970:	7dfb      	ldrb	r3, [r7, #23]
}
 800f972:	4618      	mov	r0, r3
 800f974:	3718      	adds	r7, #24
 800f976:	46bd      	mov	sp, r7
 800f978:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f97c:	b004      	add	sp, #16
 800f97e:	4770      	bx	lr
 800f980:	803c3800 	.word	0x803c3800

0800f984 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f984:	b480      	push	{r7}
 800f986:	b085      	sub	sp, #20
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
 800f98c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f98e:	2300      	movs	r3, #0
 800f990:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	019b      	lsls	r3, r3, #6
 800f996:	f043 0220 	orr.w	r2, r3, #32
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	3301      	adds	r3, #1
 800f9a2:	60fb      	str	r3, [r7, #12]
 800f9a4:	4a08      	ldr	r2, [pc, #32]	; (800f9c8 <USB_FlushTxFifo+0x44>)
 800f9a6:	4293      	cmp	r3, r2
 800f9a8:	d901      	bls.n	800f9ae <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800f9aa:	2303      	movs	r3, #3
 800f9ac:	e006      	b.n	800f9bc <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	691b      	ldr	r3, [r3, #16]
 800f9b2:	f003 0320 	and.w	r3, r3, #32
 800f9b6:	2b20      	cmp	r3, #32
 800f9b8:	d0f1      	beq.n	800f99e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800f9ba:	2300      	movs	r3, #0
}
 800f9bc:	4618      	mov	r0, r3
 800f9be:	3714      	adds	r7, #20
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c6:	4770      	bx	lr
 800f9c8:	00030d40 	.word	0x00030d40

0800f9cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f9cc:	b480      	push	{r7}
 800f9ce:	b085      	sub	sp, #20
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	2210      	movs	r2, #16
 800f9dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	3301      	adds	r3, #1
 800f9e2:	60fb      	str	r3, [r7, #12]
 800f9e4:	4a08      	ldr	r2, [pc, #32]	; (800fa08 <USB_FlushRxFifo+0x3c>)
 800f9e6:	4293      	cmp	r3, r2
 800f9e8:	d901      	bls.n	800f9ee <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800f9ea:	2303      	movs	r3, #3
 800f9ec:	e006      	b.n	800f9fc <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	691b      	ldr	r3, [r3, #16]
 800f9f2:	f003 0310 	and.w	r3, r3, #16
 800f9f6:	2b10      	cmp	r3, #16
 800f9f8:	d0f1      	beq.n	800f9de <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800f9fa:	2300      	movs	r3, #0
}
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	3714      	adds	r7, #20
 800fa00:	46bd      	mov	sp, r7
 800fa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa06:	4770      	bx	lr
 800fa08:	00030d40 	.word	0x00030d40

0800fa0c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fa0c:	b480      	push	{r7}
 800fa0e:	b085      	sub	sp, #20
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
 800fa14:	460b      	mov	r3, r1
 800fa16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa22:	681a      	ldr	r2, [r3, #0]
 800fa24:	78fb      	ldrb	r3, [r7, #3]
 800fa26:	68f9      	ldr	r1, [r7, #12]
 800fa28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fa2c:	4313      	orrs	r3, r2
 800fa2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fa30:	2300      	movs	r3, #0
}
 800fa32:	4618      	mov	r0, r3
 800fa34:	3714      	adds	r7, #20
 800fa36:	46bd      	mov	sp, r7
 800fa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3c:	4770      	bx	lr

0800fa3e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800fa3e:	b480      	push	{r7}
 800fa40:	b087      	sub	sp, #28
 800fa42:	af00      	add	r7, sp, #0
 800fa44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800fa4a:	693b      	ldr	r3, [r7, #16]
 800fa4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa50:	689b      	ldr	r3, [r3, #8]
 800fa52:	f003 0306 	and.w	r3, r3, #6
 800fa56:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d102      	bne.n	800fa64 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800fa5e:	2300      	movs	r3, #0
 800fa60:	75fb      	strb	r3, [r7, #23]
 800fa62:	e00a      	b.n	800fa7a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	2b02      	cmp	r3, #2
 800fa68:	d002      	beq.n	800fa70 <USB_GetDevSpeed+0x32>
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	2b06      	cmp	r3, #6
 800fa6e:	d102      	bne.n	800fa76 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800fa70:	2302      	movs	r3, #2
 800fa72:	75fb      	strb	r3, [r7, #23]
 800fa74:	e001      	b.n	800fa7a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800fa76:	230f      	movs	r3, #15
 800fa78:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800fa7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	371c      	adds	r7, #28
 800fa80:	46bd      	mov	sp, r7
 800fa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa86:	4770      	bx	lr

0800fa88 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fa88:	b480      	push	{r7}
 800fa8a:	b085      	sub	sp, #20
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
 800fa90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fa96:	683b      	ldr	r3, [r7, #0]
 800fa98:	781b      	ldrb	r3, [r3, #0]
 800fa9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fa9c:	683b      	ldr	r3, [r7, #0]
 800fa9e:	785b      	ldrb	r3, [r3, #1]
 800faa0:	2b01      	cmp	r3, #1
 800faa2:	d13a      	bne.n	800fb1a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800faaa:	69da      	ldr	r2, [r3, #28]
 800faac:	683b      	ldr	r3, [r7, #0]
 800faae:	781b      	ldrb	r3, [r3, #0]
 800fab0:	f003 030f 	and.w	r3, r3, #15
 800fab4:	2101      	movs	r1, #1
 800fab6:	fa01 f303 	lsl.w	r3, r1, r3
 800faba:	b29b      	uxth	r3, r3
 800fabc:	68f9      	ldr	r1, [r7, #12]
 800fabe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fac2:	4313      	orrs	r3, r2
 800fac4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800fac6:	68bb      	ldr	r3, [r7, #8]
 800fac8:	015a      	lsls	r2, r3, #5
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	4413      	add	r3, r2
 800face:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d155      	bne.n	800fb88 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fadc:	68bb      	ldr	r3, [r7, #8]
 800fade:	015a      	lsls	r2, r3, #5
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	4413      	add	r3, r2
 800fae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fae8:	681a      	ldr	r2, [r3, #0]
 800faea:	683b      	ldr	r3, [r7, #0]
 800faec:	689b      	ldr	r3, [r3, #8]
 800faee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800faf2:	683b      	ldr	r3, [r7, #0]
 800faf4:	78db      	ldrb	r3, [r3, #3]
 800faf6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800faf8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fafa:	68bb      	ldr	r3, [r7, #8]
 800fafc:	059b      	lsls	r3, r3, #22
 800fafe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fb00:	4313      	orrs	r3, r2
 800fb02:	68ba      	ldr	r2, [r7, #8]
 800fb04:	0151      	lsls	r1, r2, #5
 800fb06:	68fa      	ldr	r2, [r7, #12]
 800fb08:	440a      	add	r2, r1
 800fb0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fb12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fb16:	6013      	str	r3, [r2, #0]
 800fb18:	e036      	b.n	800fb88 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb20:	69da      	ldr	r2, [r3, #28]
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	781b      	ldrb	r3, [r3, #0]
 800fb26:	f003 030f 	and.w	r3, r3, #15
 800fb2a:	2101      	movs	r1, #1
 800fb2c:	fa01 f303 	lsl.w	r3, r1, r3
 800fb30:	041b      	lsls	r3, r3, #16
 800fb32:	68f9      	ldr	r1, [r7, #12]
 800fb34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fb38:	4313      	orrs	r3, r2
 800fb3a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800fb3c:	68bb      	ldr	r3, [r7, #8]
 800fb3e:	015a      	lsls	r2, r3, #5
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	4413      	add	r3, r2
 800fb44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d11a      	bne.n	800fb88 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fb52:	68bb      	ldr	r3, [r7, #8]
 800fb54:	015a      	lsls	r2, r3, #5
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	4413      	add	r3, r2
 800fb5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb5e:	681a      	ldr	r2, [r3, #0]
 800fb60:	683b      	ldr	r3, [r7, #0]
 800fb62:	689b      	ldr	r3, [r3, #8]
 800fb64:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800fb68:	683b      	ldr	r3, [r7, #0]
 800fb6a:	78db      	ldrb	r3, [r3, #3]
 800fb6c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fb6e:	430b      	orrs	r3, r1
 800fb70:	4313      	orrs	r3, r2
 800fb72:	68ba      	ldr	r2, [r7, #8]
 800fb74:	0151      	lsls	r1, r2, #5
 800fb76:	68fa      	ldr	r2, [r7, #12]
 800fb78:	440a      	add	r2, r1
 800fb7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fb82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fb86:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800fb88:	2300      	movs	r3, #0
}
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	3714      	adds	r7, #20
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb94:	4770      	bx	lr
	...

0800fb98 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fb98:	b480      	push	{r7}
 800fb9a:	b085      	sub	sp, #20
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
 800fba0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fba6:	683b      	ldr	r3, [r7, #0]
 800fba8:	781b      	ldrb	r3, [r3, #0]
 800fbaa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800fbac:	683b      	ldr	r3, [r7, #0]
 800fbae:	785b      	ldrb	r3, [r3, #1]
 800fbb0:	2b01      	cmp	r3, #1
 800fbb2:	d161      	bne.n	800fc78 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fbb4:	68bb      	ldr	r3, [r7, #8]
 800fbb6:	015a      	lsls	r2, r3, #5
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	4413      	add	r3, r2
 800fbbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fbc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fbca:	d11f      	bne.n	800fc0c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800fbcc:	68bb      	ldr	r3, [r7, #8]
 800fbce:	015a      	lsls	r2, r3, #5
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	4413      	add	r3, r2
 800fbd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	68ba      	ldr	r2, [r7, #8]
 800fbdc:	0151      	lsls	r1, r2, #5
 800fbde:	68fa      	ldr	r2, [r7, #12]
 800fbe0:	440a      	add	r2, r1
 800fbe2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fbe6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fbea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800fbec:	68bb      	ldr	r3, [r7, #8]
 800fbee:	015a      	lsls	r2, r3, #5
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	4413      	add	r3, r2
 800fbf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	68ba      	ldr	r2, [r7, #8]
 800fbfc:	0151      	lsls	r1, r2, #5
 800fbfe:	68fa      	ldr	r2, [r7, #12]
 800fc00:	440a      	add	r2, r1
 800fc02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fc06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fc0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fc14:	683b      	ldr	r3, [r7, #0]
 800fc16:	781b      	ldrb	r3, [r3, #0]
 800fc18:	f003 030f 	and.w	r3, r3, #15
 800fc1c:	2101      	movs	r1, #1
 800fc1e:	fa01 f303 	lsl.w	r3, r1, r3
 800fc22:	b29b      	uxth	r3, r3
 800fc24:	43db      	mvns	r3, r3
 800fc26:	68f9      	ldr	r1, [r7, #12]
 800fc28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fc2c:	4013      	ands	r3, r2
 800fc2e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc36:	69da      	ldr	r2, [r3, #28]
 800fc38:	683b      	ldr	r3, [r7, #0]
 800fc3a:	781b      	ldrb	r3, [r3, #0]
 800fc3c:	f003 030f 	and.w	r3, r3, #15
 800fc40:	2101      	movs	r1, #1
 800fc42:	fa01 f303 	lsl.w	r3, r1, r3
 800fc46:	b29b      	uxth	r3, r3
 800fc48:	43db      	mvns	r3, r3
 800fc4a:	68f9      	ldr	r1, [r7, #12]
 800fc4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fc50:	4013      	ands	r3, r2
 800fc52:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800fc54:	68bb      	ldr	r3, [r7, #8]
 800fc56:	015a      	lsls	r2, r3, #5
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	4413      	add	r3, r2
 800fc5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc60:	681a      	ldr	r2, [r3, #0]
 800fc62:	68bb      	ldr	r3, [r7, #8]
 800fc64:	0159      	lsls	r1, r3, #5
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	440b      	add	r3, r1
 800fc6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc6e:	4619      	mov	r1, r3
 800fc70:	4b35      	ldr	r3, [pc, #212]	; (800fd48 <USB_DeactivateEndpoint+0x1b0>)
 800fc72:	4013      	ands	r3, r2
 800fc74:	600b      	str	r3, [r1, #0]
 800fc76:	e060      	b.n	800fd3a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fc78:	68bb      	ldr	r3, [r7, #8]
 800fc7a:	015a      	lsls	r2, r3, #5
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	4413      	add	r3, r2
 800fc80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fc8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fc8e:	d11f      	bne.n	800fcd0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800fc90:	68bb      	ldr	r3, [r7, #8]
 800fc92:	015a      	lsls	r2, r3, #5
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	4413      	add	r3, r2
 800fc98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	68ba      	ldr	r2, [r7, #8]
 800fca0:	0151      	lsls	r1, r2, #5
 800fca2:	68fa      	ldr	r2, [r7, #12]
 800fca4:	440a      	add	r2, r1
 800fca6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fcaa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fcae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800fcb0:	68bb      	ldr	r3, [r7, #8]
 800fcb2:	015a      	lsls	r2, r3, #5
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	4413      	add	r3, r2
 800fcb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	68ba      	ldr	r2, [r7, #8]
 800fcc0:	0151      	lsls	r1, r2, #5
 800fcc2:	68fa      	ldr	r2, [r7, #12]
 800fcc4:	440a      	add	r2, r1
 800fcc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fcca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fcce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fcd8:	683b      	ldr	r3, [r7, #0]
 800fcda:	781b      	ldrb	r3, [r3, #0]
 800fcdc:	f003 030f 	and.w	r3, r3, #15
 800fce0:	2101      	movs	r1, #1
 800fce2:	fa01 f303 	lsl.w	r3, r1, r3
 800fce6:	041b      	lsls	r3, r3, #16
 800fce8:	43db      	mvns	r3, r3
 800fcea:	68f9      	ldr	r1, [r7, #12]
 800fcec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fcf0:	4013      	ands	r3, r2
 800fcf2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcfa:	69da      	ldr	r2, [r3, #28]
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	781b      	ldrb	r3, [r3, #0]
 800fd00:	f003 030f 	and.w	r3, r3, #15
 800fd04:	2101      	movs	r1, #1
 800fd06:	fa01 f303 	lsl.w	r3, r1, r3
 800fd0a:	041b      	lsls	r3, r3, #16
 800fd0c:	43db      	mvns	r3, r3
 800fd0e:	68f9      	ldr	r1, [r7, #12]
 800fd10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fd14:	4013      	ands	r3, r2
 800fd16:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800fd18:	68bb      	ldr	r3, [r7, #8]
 800fd1a:	015a      	lsls	r2, r3, #5
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	4413      	add	r3, r2
 800fd20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd24:	681a      	ldr	r2, [r3, #0]
 800fd26:	68bb      	ldr	r3, [r7, #8]
 800fd28:	0159      	lsls	r1, r3, #5
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	440b      	add	r3, r1
 800fd2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd32:	4619      	mov	r1, r3
 800fd34:	4b05      	ldr	r3, [pc, #20]	; (800fd4c <USB_DeactivateEndpoint+0x1b4>)
 800fd36:	4013      	ands	r3, r2
 800fd38:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800fd3a:	2300      	movs	r3, #0
}
 800fd3c:	4618      	mov	r0, r3
 800fd3e:	3714      	adds	r7, #20
 800fd40:	46bd      	mov	sp, r7
 800fd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd46:	4770      	bx	lr
 800fd48:	ec337800 	.word	0xec337800
 800fd4c:	eff37800 	.word	0xeff37800

0800fd50 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b08a      	sub	sp, #40	; 0x28
 800fd54:	af02      	add	r7, sp, #8
 800fd56:	60f8      	str	r0, [r7, #12]
 800fd58:	60b9      	str	r1, [r7, #8]
 800fd5a:	4613      	mov	r3, r2
 800fd5c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800fd62:	68bb      	ldr	r3, [r7, #8]
 800fd64:	781b      	ldrb	r3, [r3, #0]
 800fd66:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fd68:	68bb      	ldr	r3, [r7, #8]
 800fd6a:	785b      	ldrb	r3, [r3, #1]
 800fd6c:	2b01      	cmp	r3, #1
 800fd6e:	f040 815c 	bne.w	801002a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800fd72:	68bb      	ldr	r3, [r7, #8]
 800fd74:	695b      	ldr	r3, [r3, #20]
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d132      	bne.n	800fde0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fd7a:	69bb      	ldr	r3, [r7, #24]
 800fd7c:	015a      	lsls	r2, r3, #5
 800fd7e:	69fb      	ldr	r3, [r7, #28]
 800fd80:	4413      	add	r3, r2
 800fd82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd86:	691b      	ldr	r3, [r3, #16]
 800fd88:	69ba      	ldr	r2, [r7, #24]
 800fd8a:	0151      	lsls	r1, r2, #5
 800fd8c:	69fa      	ldr	r2, [r7, #28]
 800fd8e:	440a      	add	r2, r1
 800fd90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd94:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fd98:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fd9c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fd9e:	69bb      	ldr	r3, [r7, #24]
 800fda0:	015a      	lsls	r2, r3, #5
 800fda2:	69fb      	ldr	r3, [r7, #28]
 800fda4:	4413      	add	r3, r2
 800fda6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdaa:	691b      	ldr	r3, [r3, #16]
 800fdac:	69ba      	ldr	r2, [r7, #24]
 800fdae:	0151      	lsls	r1, r2, #5
 800fdb0:	69fa      	ldr	r2, [r7, #28]
 800fdb2:	440a      	add	r2, r1
 800fdb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fdb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fdbc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fdbe:	69bb      	ldr	r3, [r7, #24]
 800fdc0:	015a      	lsls	r2, r3, #5
 800fdc2:	69fb      	ldr	r3, [r7, #28]
 800fdc4:	4413      	add	r3, r2
 800fdc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdca:	691b      	ldr	r3, [r3, #16]
 800fdcc:	69ba      	ldr	r2, [r7, #24]
 800fdce:	0151      	lsls	r1, r2, #5
 800fdd0:	69fa      	ldr	r2, [r7, #28]
 800fdd2:	440a      	add	r2, r1
 800fdd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fdd8:	0cdb      	lsrs	r3, r3, #19
 800fdda:	04db      	lsls	r3, r3, #19
 800fddc:	6113      	str	r3, [r2, #16]
 800fdde:	e074      	b.n	800feca <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fde0:	69bb      	ldr	r3, [r7, #24]
 800fde2:	015a      	lsls	r2, r3, #5
 800fde4:	69fb      	ldr	r3, [r7, #28]
 800fde6:	4413      	add	r3, r2
 800fde8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdec:	691b      	ldr	r3, [r3, #16]
 800fdee:	69ba      	ldr	r2, [r7, #24]
 800fdf0:	0151      	lsls	r1, r2, #5
 800fdf2:	69fa      	ldr	r2, [r7, #28]
 800fdf4:	440a      	add	r2, r1
 800fdf6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fdfa:	0cdb      	lsrs	r3, r3, #19
 800fdfc:	04db      	lsls	r3, r3, #19
 800fdfe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fe00:	69bb      	ldr	r3, [r7, #24]
 800fe02:	015a      	lsls	r2, r3, #5
 800fe04:	69fb      	ldr	r3, [r7, #28]
 800fe06:	4413      	add	r3, r2
 800fe08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe0c:	691b      	ldr	r3, [r3, #16]
 800fe0e:	69ba      	ldr	r2, [r7, #24]
 800fe10:	0151      	lsls	r1, r2, #5
 800fe12:	69fa      	ldr	r2, [r7, #28]
 800fe14:	440a      	add	r2, r1
 800fe16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe1a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800fe1e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800fe22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800fe24:	69bb      	ldr	r3, [r7, #24]
 800fe26:	015a      	lsls	r2, r3, #5
 800fe28:	69fb      	ldr	r3, [r7, #28]
 800fe2a:	4413      	add	r3, r2
 800fe2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe30:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800fe32:	68bb      	ldr	r3, [r7, #8]
 800fe34:	6959      	ldr	r1, [r3, #20]
 800fe36:	68bb      	ldr	r3, [r7, #8]
 800fe38:	689b      	ldr	r3, [r3, #8]
 800fe3a:	440b      	add	r3, r1
 800fe3c:	1e59      	subs	r1, r3, #1
 800fe3e:	68bb      	ldr	r3, [r7, #8]
 800fe40:	689b      	ldr	r3, [r3, #8]
 800fe42:	fbb1 f3f3 	udiv	r3, r1, r3
 800fe46:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800fe48:	4b9d      	ldr	r3, [pc, #628]	; (80100c0 <USB_EPStartXfer+0x370>)
 800fe4a:	400b      	ands	r3, r1
 800fe4c:	69b9      	ldr	r1, [r7, #24]
 800fe4e:	0148      	lsls	r0, r1, #5
 800fe50:	69f9      	ldr	r1, [r7, #28]
 800fe52:	4401      	add	r1, r0
 800fe54:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fe58:	4313      	orrs	r3, r2
 800fe5a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800fe5c:	69bb      	ldr	r3, [r7, #24]
 800fe5e:	015a      	lsls	r2, r3, #5
 800fe60:	69fb      	ldr	r3, [r7, #28]
 800fe62:	4413      	add	r3, r2
 800fe64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe68:	691a      	ldr	r2, [r3, #16]
 800fe6a:	68bb      	ldr	r3, [r7, #8]
 800fe6c:	695b      	ldr	r3, [r3, #20]
 800fe6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fe72:	69b9      	ldr	r1, [r7, #24]
 800fe74:	0148      	lsls	r0, r1, #5
 800fe76:	69f9      	ldr	r1, [r7, #28]
 800fe78:	4401      	add	r1, r0
 800fe7a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800fe7e:	4313      	orrs	r3, r2
 800fe80:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800fe82:	68bb      	ldr	r3, [r7, #8]
 800fe84:	78db      	ldrb	r3, [r3, #3]
 800fe86:	2b01      	cmp	r3, #1
 800fe88:	d11f      	bne.n	800feca <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800fe8a:	69bb      	ldr	r3, [r7, #24]
 800fe8c:	015a      	lsls	r2, r3, #5
 800fe8e:	69fb      	ldr	r3, [r7, #28]
 800fe90:	4413      	add	r3, r2
 800fe92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe96:	691b      	ldr	r3, [r3, #16]
 800fe98:	69ba      	ldr	r2, [r7, #24]
 800fe9a:	0151      	lsls	r1, r2, #5
 800fe9c:	69fa      	ldr	r2, [r7, #28]
 800fe9e:	440a      	add	r2, r1
 800fea0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fea4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800fea8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800feaa:	69bb      	ldr	r3, [r7, #24]
 800feac:	015a      	lsls	r2, r3, #5
 800feae:	69fb      	ldr	r3, [r7, #28]
 800feb0:	4413      	add	r3, r2
 800feb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800feb6:	691b      	ldr	r3, [r3, #16]
 800feb8:	69ba      	ldr	r2, [r7, #24]
 800feba:	0151      	lsls	r1, r2, #5
 800febc:	69fa      	ldr	r2, [r7, #28]
 800febe:	440a      	add	r2, r1
 800fec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fec4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fec8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800feca:	79fb      	ldrb	r3, [r7, #7]
 800fecc:	2b01      	cmp	r3, #1
 800fece:	d14b      	bne.n	800ff68 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800fed0:	68bb      	ldr	r3, [r7, #8]
 800fed2:	691b      	ldr	r3, [r3, #16]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d009      	beq.n	800feec <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800fed8:	69bb      	ldr	r3, [r7, #24]
 800feda:	015a      	lsls	r2, r3, #5
 800fedc:	69fb      	ldr	r3, [r7, #28]
 800fede:	4413      	add	r3, r2
 800fee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fee4:	461a      	mov	r2, r3
 800fee6:	68bb      	ldr	r3, [r7, #8]
 800fee8:	691b      	ldr	r3, [r3, #16]
 800feea:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800feec:	68bb      	ldr	r3, [r7, #8]
 800feee:	78db      	ldrb	r3, [r3, #3]
 800fef0:	2b01      	cmp	r3, #1
 800fef2:	d128      	bne.n	800ff46 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fef4:	69fb      	ldr	r3, [r7, #28]
 800fef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fefa:	689b      	ldr	r3, [r3, #8]
 800fefc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d110      	bne.n	800ff26 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ff04:	69bb      	ldr	r3, [r7, #24]
 800ff06:	015a      	lsls	r2, r3, #5
 800ff08:	69fb      	ldr	r3, [r7, #28]
 800ff0a:	4413      	add	r3, r2
 800ff0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	69ba      	ldr	r2, [r7, #24]
 800ff14:	0151      	lsls	r1, r2, #5
 800ff16:	69fa      	ldr	r2, [r7, #28]
 800ff18:	440a      	add	r2, r1
 800ff1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ff22:	6013      	str	r3, [r2, #0]
 800ff24:	e00f      	b.n	800ff46 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ff26:	69bb      	ldr	r3, [r7, #24]
 800ff28:	015a      	lsls	r2, r3, #5
 800ff2a:	69fb      	ldr	r3, [r7, #28]
 800ff2c:	4413      	add	r3, r2
 800ff2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	69ba      	ldr	r2, [r7, #24]
 800ff36:	0151      	lsls	r1, r2, #5
 800ff38:	69fa      	ldr	r2, [r7, #28]
 800ff3a:	440a      	add	r2, r1
 800ff3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ff44:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ff46:	69bb      	ldr	r3, [r7, #24]
 800ff48:	015a      	lsls	r2, r3, #5
 800ff4a:	69fb      	ldr	r3, [r7, #28]
 800ff4c:	4413      	add	r3, r2
 800ff4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	69ba      	ldr	r2, [r7, #24]
 800ff56:	0151      	lsls	r1, r2, #5
 800ff58:	69fa      	ldr	r2, [r7, #28]
 800ff5a:	440a      	add	r2, r1
 800ff5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff60:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ff64:	6013      	str	r3, [r2, #0]
 800ff66:	e12f      	b.n	80101c8 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ff68:	69bb      	ldr	r3, [r7, #24]
 800ff6a:	015a      	lsls	r2, r3, #5
 800ff6c:	69fb      	ldr	r3, [r7, #28]
 800ff6e:	4413      	add	r3, r2
 800ff70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	69ba      	ldr	r2, [r7, #24]
 800ff78:	0151      	lsls	r1, r2, #5
 800ff7a:	69fa      	ldr	r2, [r7, #28]
 800ff7c:	440a      	add	r2, r1
 800ff7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ff86:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ff88:	68bb      	ldr	r3, [r7, #8]
 800ff8a:	78db      	ldrb	r3, [r3, #3]
 800ff8c:	2b01      	cmp	r3, #1
 800ff8e:	d015      	beq.n	800ffbc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ff90:	68bb      	ldr	r3, [r7, #8]
 800ff92:	695b      	ldr	r3, [r3, #20]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	f000 8117 	beq.w	80101c8 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ff9a:	69fb      	ldr	r3, [r7, #28]
 800ff9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ffa2:	68bb      	ldr	r3, [r7, #8]
 800ffa4:	781b      	ldrb	r3, [r3, #0]
 800ffa6:	f003 030f 	and.w	r3, r3, #15
 800ffaa:	2101      	movs	r1, #1
 800ffac:	fa01 f303 	lsl.w	r3, r1, r3
 800ffb0:	69f9      	ldr	r1, [r7, #28]
 800ffb2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ffb6:	4313      	orrs	r3, r2
 800ffb8:	634b      	str	r3, [r1, #52]	; 0x34
 800ffba:	e105      	b.n	80101c8 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ffbc:	69fb      	ldr	r3, [r7, #28]
 800ffbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffc2:	689b      	ldr	r3, [r3, #8]
 800ffc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d110      	bne.n	800ffee <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ffcc:	69bb      	ldr	r3, [r7, #24]
 800ffce:	015a      	lsls	r2, r3, #5
 800ffd0:	69fb      	ldr	r3, [r7, #28]
 800ffd2:	4413      	add	r3, r2
 800ffd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffd8:	681b      	ldr	r3, [r3, #0]
 800ffda:	69ba      	ldr	r2, [r7, #24]
 800ffdc:	0151      	lsls	r1, r2, #5
 800ffde:	69fa      	ldr	r2, [r7, #28]
 800ffe0:	440a      	add	r2, r1
 800ffe2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ffe6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ffea:	6013      	str	r3, [r2, #0]
 800ffec:	e00f      	b.n	801000e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ffee:	69bb      	ldr	r3, [r7, #24]
 800fff0:	015a      	lsls	r2, r3, #5
 800fff2:	69fb      	ldr	r3, [r7, #28]
 800fff4:	4413      	add	r3, r2
 800fff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	69ba      	ldr	r2, [r7, #24]
 800fffe:	0151      	lsls	r1, r2, #5
 8010000:	69fa      	ldr	r2, [r7, #28]
 8010002:	440a      	add	r2, r1
 8010004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801000c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801000e:	68bb      	ldr	r3, [r7, #8]
 8010010:	68d9      	ldr	r1, [r3, #12]
 8010012:	68bb      	ldr	r3, [r7, #8]
 8010014:	781a      	ldrb	r2, [r3, #0]
 8010016:	68bb      	ldr	r3, [r7, #8]
 8010018:	695b      	ldr	r3, [r3, #20]
 801001a:	b298      	uxth	r0, r3
 801001c:	79fb      	ldrb	r3, [r7, #7]
 801001e:	9300      	str	r3, [sp, #0]
 8010020:	4603      	mov	r3, r0
 8010022:	68f8      	ldr	r0, [r7, #12]
 8010024:	f000 fa2b 	bl	801047e <USB_WritePacket>
 8010028:	e0ce      	b.n	80101c8 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801002a:	69bb      	ldr	r3, [r7, #24]
 801002c:	015a      	lsls	r2, r3, #5
 801002e:	69fb      	ldr	r3, [r7, #28]
 8010030:	4413      	add	r3, r2
 8010032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010036:	691b      	ldr	r3, [r3, #16]
 8010038:	69ba      	ldr	r2, [r7, #24]
 801003a:	0151      	lsls	r1, r2, #5
 801003c:	69fa      	ldr	r2, [r7, #28]
 801003e:	440a      	add	r2, r1
 8010040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010044:	0cdb      	lsrs	r3, r3, #19
 8010046:	04db      	lsls	r3, r3, #19
 8010048:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801004a:	69bb      	ldr	r3, [r7, #24]
 801004c:	015a      	lsls	r2, r3, #5
 801004e:	69fb      	ldr	r3, [r7, #28]
 8010050:	4413      	add	r3, r2
 8010052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010056:	691b      	ldr	r3, [r3, #16]
 8010058:	69ba      	ldr	r2, [r7, #24]
 801005a:	0151      	lsls	r1, r2, #5
 801005c:	69fa      	ldr	r2, [r7, #28]
 801005e:	440a      	add	r2, r1
 8010060:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010064:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010068:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801006c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801006e:	68bb      	ldr	r3, [r7, #8]
 8010070:	695b      	ldr	r3, [r3, #20]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d126      	bne.n	80100c4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8010076:	69bb      	ldr	r3, [r7, #24]
 8010078:	015a      	lsls	r2, r3, #5
 801007a:	69fb      	ldr	r3, [r7, #28]
 801007c:	4413      	add	r3, r2
 801007e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010082:	691a      	ldr	r2, [r3, #16]
 8010084:	68bb      	ldr	r3, [r7, #8]
 8010086:	689b      	ldr	r3, [r3, #8]
 8010088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801008c:	69b9      	ldr	r1, [r7, #24]
 801008e:	0148      	lsls	r0, r1, #5
 8010090:	69f9      	ldr	r1, [r7, #28]
 8010092:	4401      	add	r1, r0
 8010094:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010098:	4313      	orrs	r3, r2
 801009a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801009c:	69bb      	ldr	r3, [r7, #24]
 801009e:	015a      	lsls	r2, r3, #5
 80100a0:	69fb      	ldr	r3, [r7, #28]
 80100a2:	4413      	add	r3, r2
 80100a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100a8:	691b      	ldr	r3, [r3, #16]
 80100aa:	69ba      	ldr	r2, [r7, #24]
 80100ac:	0151      	lsls	r1, r2, #5
 80100ae:	69fa      	ldr	r2, [r7, #28]
 80100b0:	440a      	add	r2, r1
 80100b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80100b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80100ba:	6113      	str	r3, [r2, #16]
 80100bc:	e036      	b.n	801012c <USB_EPStartXfer+0x3dc>
 80100be:	bf00      	nop
 80100c0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80100c4:	68bb      	ldr	r3, [r7, #8]
 80100c6:	695a      	ldr	r2, [r3, #20]
 80100c8:	68bb      	ldr	r3, [r7, #8]
 80100ca:	689b      	ldr	r3, [r3, #8]
 80100cc:	4413      	add	r3, r2
 80100ce:	1e5a      	subs	r2, r3, #1
 80100d0:	68bb      	ldr	r3, [r7, #8]
 80100d2:	689b      	ldr	r3, [r3, #8]
 80100d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80100d8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80100da:	69bb      	ldr	r3, [r7, #24]
 80100dc:	015a      	lsls	r2, r3, #5
 80100de:	69fb      	ldr	r3, [r7, #28]
 80100e0:	4413      	add	r3, r2
 80100e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100e6:	691a      	ldr	r2, [r3, #16]
 80100e8:	8afb      	ldrh	r3, [r7, #22]
 80100ea:	04d9      	lsls	r1, r3, #19
 80100ec:	4b39      	ldr	r3, [pc, #228]	; (80101d4 <USB_EPStartXfer+0x484>)
 80100ee:	400b      	ands	r3, r1
 80100f0:	69b9      	ldr	r1, [r7, #24]
 80100f2:	0148      	lsls	r0, r1, #5
 80100f4:	69f9      	ldr	r1, [r7, #28]
 80100f6:	4401      	add	r1, r0
 80100f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80100fc:	4313      	orrs	r3, r2
 80100fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8010100:	69bb      	ldr	r3, [r7, #24]
 8010102:	015a      	lsls	r2, r3, #5
 8010104:	69fb      	ldr	r3, [r7, #28]
 8010106:	4413      	add	r3, r2
 8010108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801010c:	691a      	ldr	r2, [r3, #16]
 801010e:	68bb      	ldr	r3, [r7, #8]
 8010110:	689b      	ldr	r3, [r3, #8]
 8010112:	8af9      	ldrh	r1, [r7, #22]
 8010114:	fb01 f303 	mul.w	r3, r1, r3
 8010118:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801011c:	69b9      	ldr	r1, [r7, #24]
 801011e:	0148      	lsls	r0, r1, #5
 8010120:	69f9      	ldr	r1, [r7, #28]
 8010122:	4401      	add	r1, r0
 8010124:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010128:	4313      	orrs	r3, r2
 801012a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801012c:	79fb      	ldrb	r3, [r7, #7]
 801012e:	2b01      	cmp	r3, #1
 8010130:	d10d      	bne.n	801014e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010132:	68bb      	ldr	r3, [r7, #8]
 8010134:	68db      	ldr	r3, [r3, #12]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d009      	beq.n	801014e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801013a:	68bb      	ldr	r3, [r7, #8]
 801013c:	68d9      	ldr	r1, [r3, #12]
 801013e:	69bb      	ldr	r3, [r7, #24]
 8010140:	015a      	lsls	r2, r3, #5
 8010142:	69fb      	ldr	r3, [r7, #28]
 8010144:	4413      	add	r3, r2
 8010146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801014a:	460a      	mov	r2, r1
 801014c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801014e:	68bb      	ldr	r3, [r7, #8]
 8010150:	78db      	ldrb	r3, [r3, #3]
 8010152:	2b01      	cmp	r3, #1
 8010154:	d128      	bne.n	80101a8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010156:	69fb      	ldr	r3, [r7, #28]
 8010158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801015c:	689b      	ldr	r3, [r3, #8]
 801015e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010162:	2b00      	cmp	r3, #0
 8010164:	d110      	bne.n	8010188 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8010166:	69bb      	ldr	r3, [r7, #24]
 8010168:	015a      	lsls	r2, r3, #5
 801016a:	69fb      	ldr	r3, [r7, #28]
 801016c:	4413      	add	r3, r2
 801016e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	69ba      	ldr	r2, [r7, #24]
 8010176:	0151      	lsls	r1, r2, #5
 8010178:	69fa      	ldr	r2, [r7, #28]
 801017a:	440a      	add	r2, r1
 801017c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010180:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010184:	6013      	str	r3, [r2, #0]
 8010186:	e00f      	b.n	80101a8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010188:	69bb      	ldr	r3, [r7, #24]
 801018a:	015a      	lsls	r2, r3, #5
 801018c:	69fb      	ldr	r3, [r7, #28]
 801018e:	4413      	add	r3, r2
 8010190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	69ba      	ldr	r2, [r7, #24]
 8010198:	0151      	lsls	r1, r2, #5
 801019a:	69fa      	ldr	r2, [r7, #28]
 801019c:	440a      	add	r2, r1
 801019e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80101a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80101a6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80101a8:	69bb      	ldr	r3, [r7, #24]
 80101aa:	015a      	lsls	r2, r3, #5
 80101ac:	69fb      	ldr	r3, [r7, #28]
 80101ae:	4413      	add	r3, r2
 80101b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	69ba      	ldr	r2, [r7, #24]
 80101b8:	0151      	lsls	r1, r2, #5
 80101ba:	69fa      	ldr	r2, [r7, #28]
 80101bc:	440a      	add	r2, r1
 80101be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80101c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80101c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80101c8:	2300      	movs	r3, #0
}
 80101ca:	4618      	mov	r0, r3
 80101cc:	3720      	adds	r7, #32
 80101ce:	46bd      	mov	sp, r7
 80101d0:	bd80      	pop	{r7, pc}
 80101d2:	bf00      	nop
 80101d4:	1ff80000 	.word	0x1ff80000

080101d8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80101d8:	b480      	push	{r7}
 80101da:	b087      	sub	sp, #28
 80101dc:	af00      	add	r7, sp, #0
 80101de:	60f8      	str	r0, [r7, #12]
 80101e0:	60b9      	str	r1, [r7, #8]
 80101e2:	4613      	mov	r3, r2
 80101e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80101ea:	68bb      	ldr	r3, [r7, #8]
 80101ec:	781b      	ldrb	r3, [r3, #0]
 80101ee:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80101f0:	68bb      	ldr	r3, [r7, #8]
 80101f2:	785b      	ldrb	r3, [r3, #1]
 80101f4:	2b01      	cmp	r3, #1
 80101f6:	f040 80cd 	bne.w	8010394 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80101fa:	68bb      	ldr	r3, [r7, #8]
 80101fc:	695b      	ldr	r3, [r3, #20]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d132      	bne.n	8010268 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010202:	693b      	ldr	r3, [r7, #16]
 8010204:	015a      	lsls	r2, r3, #5
 8010206:	697b      	ldr	r3, [r7, #20]
 8010208:	4413      	add	r3, r2
 801020a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801020e:	691b      	ldr	r3, [r3, #16]
 8010210:	693a      	ldr	r2, [r7, #16]
 8010212:	0151      	lsls	r1, r2, #5
 8010214:	697a      	ldr	r2, [r7, #20]
 8010216:	440a      	add	r2, r1
 8010218:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801021c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010220:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010224:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010226:	693b      	ldr	r3, [r7, #16]
 8010228:	015a      	lsls	r2, r3, #5
 801022a:	697b      	ldr	r3, [r7, #20]
 801022c:	4413      	add	r3, r2
 801022e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010232:	691b      	ldr	r3, [r3, #16]
 8010234:	693a      	ldr	r2, [r7, #16]
 8010236:	0151      	lsls	r1, r2, #5
 8010238:	697a      	ldr	r2, [r7, #20]
 801023a:	440a      	add	r2, r1
 801023c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010240:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010244:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010246:	693b      	ldr	r3, [r7, #16]
 8010248:	015a      	lsls	r2, r3, #5
 801024a:	697b      	ldr	r3, [r7, #20]
 801024c:	4413      	add	r3, r2
 801024e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010252:	691b      	ldr	r3, [r3, #16]
 8010254:	693a      	ldr	r2, [r7, #16]
 8010256:	0151      	lsls	r1, r2, #5
 8010258:	697a      	ldr	r2, [r7, #20]
 801025a:	440a      	add	r2, r1
 801025c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010260:	0cdb      	lsrs	r3, r3, #19
 8010262:	04db      	lsls	r3, r3, #19
 8010264:	6113      	str	r3, [r2, #16]
 8010266:	e04e      	b.n	8010306 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010268:	693b      	ldr	r3, [r7, #16]
 801026a:	015a      	lsls	r2, r3, #5
 801026c:	697b      	ldr	r3, [r7, #20]
 801026e:	4413      	add	r3, r2
 8010270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010274:	691b      	ldr	r3, [r3, #16]
 8010276:	693a      	ldr	r2, [r7, #16]
 8010278:	0151      	lsls	r1, r2, #5
 801027a:	697a      	ldr	r2, [r7, #20]
 801027c:	440a      	add	r2, r1
 801027e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010282:	0cdb      	lsrs	r3, r3, #19
 8010284:	04db      	lsls	r3, r3, #19
 8010286:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010288:	693b      	ldr	r3, [r7, #16]
 801028a:	015a      	lsls	r2, r3, #5
 801028c:	697b      	ldr	r3, [r7, #20]
 801028e:	4413      	add	r3, r2
 8010290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010294:	691b      	ldr	r3, [r3, #16]
 8010296:	693a      	ldr	r2, [r7, #16]
 8010298:	0151      	lsls	r1, r2, #5
 801029a:	697a      	ldr	r2, [r7, #20]
 801029c:	440a      	add	r2, r1
 801029e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80102a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80102aa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80102ac:	68bb      	ldr	r3, [r7, #8]
 80102ae:	695a      	ldr	r2, [r3, #20]
 80102b0:	68bb      	ldr	r3, [r7, #8]
 80102b2:	689b      	ldr	r3, [r3, #8]
 80102b4:	429a      	cmp	r2, r3
 80102b6:	d903      	bls.n	80102c0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80102b8:	68bb      	ldr	r3, [r7, #8]
 80102ba:	689a      	ldr	r2, [r3, #8]
 80102bc:	68bb      	ldr	r3, [r7, #8]
 80102be:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80102c0:	693b      	ldr	r3, [r7, #16]
 80102c2:	015a      	lsls	r2, r3, #5
 80102c4:	697b      	ldr	r3, [r7, #20]
 80102c6:	4413      	add	r3, r2
 80102c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102cc:	691b      	ldr	r3, [r3, #16]
 80102ce:	693a      	ldr	r2, [r7, #16]
 80102d0:	0151      	lsls	r1, r2, #5
 80102d2:	697a      	ldr	r2, [r7, #20]
 80102d4:	440a      	add	r2, r1
 80102d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80102de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80102e0:	693b      	ldr	r3, [r7, #16]
 80102e2:	015a      	lsls	r2, r3, #5
 80102e4:	697b      	ldr	r3, [r7, #20]
 80102e6:	4413      	add	r3, r2
 80102e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102ec:	691a      	ldr	r2, [r3, #16]
 80102ee:	68bb      	ldr	r3, [r7, #8]
 80102f0:	695b      	ldr	r3, [r3, #20]
 80102f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80102f6:	6939      	ldr	r1, [r7, #16]
 80102f8:	0148      	lsls	r0, r1, #5
 80102fa:	6979      	ldr	r1, [r7, #20]
 80102fc:	4401      	add	r1, r0
 80102fe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010302:	4313      	orrs	r3, r2
 8010304:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010306:	79fb      	ldrb	r3, [r7, #7]
 8010308:	2b01      	cmp	r3, #1
 801030a:	d11e      	bne.n	801034a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801030c:	68bb      	ldr	r3, [r7, #8]
 801030e:	691b      	ldr	r3, [r3, #16]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d009      	beq.n	8010328 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010314:	693b      	ldr	r3, [r7, #16]
 8010316:	015a      	lsls	r2, r3, #5
 8010318:	697b      	ldr	r3, [r7, #20]
 801031a:	4413      	add	r3, r2
 801031c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010320:	461a      	mov	r2, r3
 8010322:	68bb      	ldr	r3, [r7, #8]
 8010324:	691b      	ldr	r3, [r3, #16]
 8010326:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010328:	693b      	ldr	r3, [r7, #16]
 801032a:	015a      	lsls	r2, r3, #5
 801032c:	697b      	ldr	r3, [r7, #20]
 801032e:	4413      	add	r3, r2
 8010330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	693a      	ldr	r2, [r7, #16]
 8010338:	0151      	lsls	r1, r2, #5
 801033a:	697a      	ldr	r2, [r7, #20]
 801033c:	440a      	add	r2, r1
 801033e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010342:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010346:	6013      	str	r3, [r2, #0]
 8010348:	e092      	b.n	8010470 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801034a:	693b      	ldr	r3, [r7, #16]
 801034c:	015a      	lsls	r2, r3, #5
 801034e:	697b      	ldr	r3, [r7, #20]
 8010350:	4413      	add	r3, r2
 8010352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	693a      	ldr	r2, [r7, #16]
 801035a:	0151      	lsls	r1, r2, #5
 801035c:	697a      	ldr	r2, [r7, #20]
 801035e:	440a      	add	r2, r1
 8010360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010364:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010368:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801036a:	68bb      	ldr	r3, [r7, #8]
 801036c:	695b      	ldr	r3, [r3, #20]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d07e      	beq.n	8010470 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010372:	697b      	ldr	r3, [r7, #20]
 8010374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010378:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801037a:	68bb      	ldr	r3, [r7, #8]
 801037c:	781b      	ldrb	r3, [r3, #0]
 801037e:	f003 030f 	and.w	r3, r3, #15
 8010382:	2101      	movs	r1, #1
 8010384:	fa01 f303 	lsl.w	r3, r1, r3
 8010388:	6979      	ldr	r1, [r7, #20]
 801038a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801038e:	4313      	orrs	r3, r2
 8010390:	634b      	str	r3, [r1, #52]	; 0x34
 8010392:	e06d      	b.n	8010470 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010394:	693b      	ldr	r3, [r7, #16]
 8010396:	015a      	lsls	r2, r3, #5
 8010398:	697b      	ldr	r3, [r7, #20]
 801039a:	4413      	add	r3, r2
 801039c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103a0:	691b      	ldr	r3, [r3, #16]
 80103a2:	693a      	ldr	r2, [r7, #16]
 80103a4:	0151      	lsls	r1, r2, #5
 80103a6:	697a      	ldr	r2, [r7, #20]
 80103a8:	440a      	add	r2, r1
 80103aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80103ae:	0cdb      	lsrs	r3, r3, #19
 80103b0:	04db      	lsls	r3, r3, #19
 80103b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80103b4:	693b      	ldr	r3, [r7, #16]
 80103b6:	015a      	lsls	r2, r3, #5
 80103b8:	697b      	ldr	r3, [r7, #20]
 80103ba:	4413      	add	r3, r2
 80103bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103c0:	691b      	ldr	r3, [r3, #16]
 80103c2:	693a      	ldr	r2, [r7, #16]
 80103c4:	0151      	lsls	r1, r2, #5
 80103c6:	697a      	ldr	r2, [r7, #20]
 80103c8:	440a      	add	r2, r1
 80103ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80103ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80103d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80103d6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80103d8:	68bb      	ldr	r3, [r7, #8]
 80103da:	695b      	ldr	r3, [r3, #20]
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d003      	beq.n	80103e8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80103e0:	68bb      	ldr	r3, [r7, #8]
 80103e2:	689a      	ldr	r2, [r3, #8]
 80103e4:	68bb      	ldr	r3, [r7, #8]
 80103e6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80103e8:	693b      	ldr	r3, [r7, #16]
 80103ea:	015a      	lsls	r2, r3, #5
 80103ec:	697b      	ldr	r3, [r7, #20]
 80103ee:	4413      	add	r3, r2
 80103f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103f4:	691b      	ldr	r3, [r3, #16]
 80103f6:	693a      	ldr	r2, [r7, #16]
 80103f8:	0151      	lsls	r1, r2, #5
 80103fa:	697a      	ldr	r2, [r7, #20]
 80103fc:	440a      	add	r2, r1
 80103fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010402:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010406:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8010408:	693b      	ldr	r3, [r7, #16]
 801040a:	015a      	lsls	r2, r3, #5
 801040c:	697b      	ldr	r3, [r7, #20]
 801040e:	4413      	add	r3, r2
 8010410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010414:	691a      	ldr	r2, [r3, #16]
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	689b      	ldr	r3, [r3, #8]
 801041a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801041e:	6939      	ldr	r1, [r7, #16]
 8010420:	0148      	lsls	r0, r1, #5
 8010422:	6979      	ldr	r1, [r7, #20]
 8010424:	4401      	add	r1, r0
 8010426:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801042a:	4313      	orrs	r3, r2
 801042c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801042e:	79fb      	ldrb	r3, [r7, #7]
 8010430:	2b01      	cmp	r3, #1
 8010432:	d10d      	bne.n	8010450 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010434:	68bb      	ldr	r3, [r7, #8]
 8010436:	68db      	ldr	r3, [r3, #12]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d009      	beq.n	8010450 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801043c:	68bb      	ldr	r3, [r7, #8]
 801043e:	68d9      	ldr	r1, [r3, #12]
 8010440:	693b      	ldr	r3, [r7, #16]
 8010442:	015a      	lsls	r2, r3, #5
 8010444:	697b      	ldr	r3, [r7, #20]
 8010446:	4413      	add	r3, r2
 8010448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801044c:	460a      	mov	r2, r1
 801044e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010450:	693b      	ldr	r3, [r7, #16]
 8010452:	015a      	lsls	r2, r3, #5
 8010454:	697b      	ldr	r3, [r7, #20]
 8010456:	4413      	add	r3, r2
 8010458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	693a      	ldr	r2, [r7, #16]
 8010460:	0151      	lsls	r1, r2, #5
 8010462:	697a      	ldr	r2, [r7, #20]
 8010464:	440a      	add	r2, r1
 8010466:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801046a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801046e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010470:	2300      	movs	r3, #0
}
 8010472:	4618      	mov	r0, r3
 8010474:	371c      	adds	r7, #28
 8010476:	46bd      	mov	sp, r7
 8010478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047c:	4770      	bx	lr

0801047e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801047e:	b480      	push	{r7}
 8010480:	b089      	sub	sp, #36	; 0x24
 8010482:	af00      	add	r7, sp, #0
 8010484:	60f8      	str	r0, [r7, #12]
 8010486:	60b9      	str	r1, [r7, #8]
 8010488:	4611      	mov	r1, r2
 801048a:	461a      	mov	r2, r3
 801048c:	460b      	mov	r3, r1
 801048e:	71fb      	strb	r3, [r7, #7]
 8010490:	4613      	mov	r3, r2
 8010492:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8010498:	68bb      	ldr	r3, [r7, #8]
 801049a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801049c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d123      	bne.n	80104ec <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80104a4:	88bb      	ldrh	r3, [r7, #4]
 80104a6:	3303      	adds	r3, #3
 80104a8:	089b      	lsrs	r3, r3, #2
 80104aa:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80104ac:	2300      	movs	r3, #0
 80104ae:	61bb      	str	r3, [r7, #24]
 80104b0:	e018      	b.n	80104e4 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80104b2:	79fb      	ldrb	r3, [r7, #7]
 80104b4:	031a      	lsls	r2, r3, #12
 80104b6:	697b      	ldr	r3, [r7, #20]
 80104b8:	4413      	add	r3, r2
 80104ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80104be:	461a      	mov	r2, r3
 80104c0:	69fb      	ldr	r3, [r7, #28]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	6013      	str	r3, [r2, #0]
      pSrc++;
 80104c6:	69fb      	ldr	r3, [r7, #28]
 80104c8:	3301      	adds	r3, #1
 80104ca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80104cc:	69fb      	ldr	r3, [r7, #28]
 80104ce:	3301      	adds	r3, #1
 80104d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80104d2:	69fb      	ldr	r3, [r7, #28]
 80104d4:	3301      	adds	r3, #1
 80104d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80104d8:	69fb      	ldr	r3, [r7, #28]
 80104da:	3301      	adds	r3, #1
 80104dc:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80104de:	69bb      	ldr	r3, [r7, #24]
 80104e0:	3301      	adds	r3, #1
 80104e2:	61bb      	str	r3, [r7, #24]
 80104e4:	69ba      	ldr	r2, [r7, #24]
 80104e6:	693b      	ldr	r3, [r7, #16]
 80104e8:	429a      	cmp	r2, r3
 80104ea:	d3e2      	bcc.n	80104b2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80104ec:	2300      	movs	r3, #0
}
 80104ee:	4618      	mov	r0, r3
 80104f0:	3724      	adds	r7, #36	; 0x24
 80104f2:	46bd      	mov	sp, r7
 80104f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f8:	4770      	bx	lr

080104fa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80104fa:	b480      	push	{r7}
 80104fc:	b08b      	sub	sp, #44	; 0x2c
 80104fe:	af00      	add	r7, sp, #0
 8010500:	60f8      	str	r0, [r7, #12]
 8010502:	60b9      	str	r1, [r7, #8]
 8010504:	4613      	mov	r3, r2
 8010506:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801050c:	68bb      	ldr	r3, [r7, #8]
 801050e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8010510:	88fb      	ldrh	r3, [r7, #6]
 8010512:	089b      	lsrs	r3, r3, #2
 8010514:	b29b      	uxth	r3, r3
 8010516:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8010518:	88fb      	ldrh	r3, [r7, #6]
 801051a:	f003 0303 	and.w	r3, r3, #3
 801051e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8010520:	2300      	movs	r3, #0
 8010522:	623b      	str	r3, [r7, #32]
 8010524:	e014      	b.n	8010550 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010526:	69bb      	ldr	r3, [r7, #24]
 8010528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801052c:	681a      	ldr	r2, [r3, #0]
 801052e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010530:	601a      	str	r2, [r3, #0]
    pDest++;
 8010532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010534:	3301      	adds	r3, #1
 8010536:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801053a:	3301      	adds	r3, #1
 801053c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801053e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010540:	3301      	adds	r3, #1
 8010542:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010546:	3301      	adds	r3, #1
 8010548:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 801054a:	6a3b      	ldr	r3, [r7, #32]
 801054c:	3301      	adds	r3, #1
 801054e:	623b      	str	r3, [r7, #32]
 8010550:	6a3a      	ldr	r2, [r7, #32]
 8010552:	697b      	ldr	r3, [r7, #20]
 8010554:	429a      	cmp	r2, r3
 8010556:	d3e6      	bcc.n	8010526 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8010558:	8bfb      	ldrh	r3, [r7, #30]
 801055a:	2b00      	cmp	r3, #0
 801055c:	d01e      	beq.n	801059c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801055e:	2300      	movs	r3, #0
 8010560:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8010562:	69bb      	ldr	r3, [r7, #24]
 8010564:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010568:	461a      	mov	r2, r3
 801056a:	f107 0310 	add.w	r3, r7, #16
 801056e:	6812      	ldr	r2, [r2, #0]
 8010570:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8010572:	693a      	ldr	r2, [r7, #16]
 8010574:	6a3b      	ldr	r3, [r7, #32]
 8010576:	b2db      	uxtb	r3, r3
 8010578:	00db      	lsls	r3, r3, #3
 801057a:	fa22 f303 	lsr.w	r3, r2, r3
 801057e:	b2da      	uxtb	r2, r3
 8010580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010582:	701a      	strb	r2, [r3, #0]
      i++;
 8010584:	6a3b      	ldr	r3, [r7, #32]
 8010586:	3301      	adds	r3, #1
 8010588:	623b      	str	r3, [r7, #32]
      pDest++;
 801058a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801058c:	3301      	adds	r3, #1
 801058e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8010590:	8bfb      	ldrh	r3, [r7, #30]
 8010592:	3b01      	subs	r3, #1
 8010594:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8010596:	8bfb      	ldrh	r3, [r7, #30]
 8010598:	2b00      	cmp	r3, #0
 801059a:	d1ea      	bne.n	8010572 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801059c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801059e:	4618      	mov	r0, r3
 80105a0:	372c      	adds	r7, #44	; 0x2c
 80105a2:	46bd      	mov	sp, r7
 80105a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a8:	4770      	bx	lr

080105aa <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80105aa:	b480      	push	{r7}
 80105ac:	b085      	sub	sp, #20
 80105ae:	af00      	add	r7, sp, #0
 80105b0:	6078      	str	r0, [r7, #4]
 80105b2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80105b8:	683b      	ldr	r3, [r7, #0]
 80105ba:	781b      	ldrb	r3, [r3, #0]
 80105bc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80105be:	683b      	ldr	r3, [r7, #0]
 80105c0:	785b      	ldrb	r3, [r3, #1]
 80105c2:	2b01      	cmp	r3, #1
 80105c4:	d12c      	bne.n	8010620 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80105c6:	68bb      	ldr	r3, [r7, #8]
 80105c8:	015a      	lsls	r2, r3, #5
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	4413      	add	r3, r2
 80105ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	db12      	blt.n	80105fe <USB_EPSetStall+0x54>
 80105d8:	68bb      	ldr	r3, [r7, #8]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d00f      	beq.n	80105fe <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80105de:	68bb      	ldr	r3, [r7, #8]
 80105e0:	015a      	lsls	r2, r3, #5
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	4413      	add	r3, r2
 80105e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	68ba      	ldr	r2, [r7, #8]
 80105ee:	0151      	lsls	r1, r2, #5
 80105f0:	68fa      	ldr	r2, [r7, #12]
 80105f2:	440a      	add	r2, r1
 80105f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80105f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80105fc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80105fe:	68bb      	ldr	r3, [r7, #8]
 8010600:	015a      	lsls	r2, r3, #5
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	4413      	add	r3, r2
 8010606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	68ba      	ldr	r2, [r7, #8]
 801060e:	0151      	lsls	r1, r2, #5
 8010610:	68fa      	ldr	r2, [r7, #12]
 8010612:	440a      	add	r2, r1
 8010614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010618:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801061c:	6013      	str	r3, [r2, #0]
 801061e:	e02b      	b.n	8010678 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010620:	68bb      	ldr	r3, [r7, #8]
 8010622:	015a      	lsls	r2, r3, #5
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	4413      	add	r3, r2
 8010628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	2b00      	cmp	r3, #0
 8010630:	db12      	blt.n	8010658 <USB_EPSetStall+0xae>
 8010632:	68bb      	ldr	r3, [r7, #8]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d00f      	beq.n	8010658 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010638:	68bb      	ldr	r3, [r7, #8]
 801063a:	015a      	lsls	r2, r3, #5
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	4413      	add	r3, r2
 8010640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010644:	681b      	ldr	r3, [r3, #0]
 8010646:	68ba      	ldr	r2, [r7, #8]
 8010648:	0151      	lsls	r1, r2, #5
 801064a:	68fa      	ldr	r2, [r7, #12]
 801064c:	440a      	add	r2, r1
 801064e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010652:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010656:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010658:	68bb      	ldr	r3, [r7, #8]
 801065a:	015a      	lsls	r2, r3, #5
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	4413      	add	r3, r2
 8010660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	68ba      	ldr	r2, [r7, #8]
 8010668:	0151      	lsls	r1, r2, #5
 801066a:	68fa      	ldr	r2, [r7, #12]
 801066c:	440a      	add	r2, r1
 801066e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010672:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010676:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010678:	2300      	movs	r3, #0
}
 801067a:	4618      	mov	r0, r3
 801067c:	3714      	adds	r7, #20
 801067e:	46bd      	mov	sp, r7
 8010680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010684:	4770      	bx	lr

08010686 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010686:	b480      	push	{r7}
 8010688:	b085      	sub	sp, #20
 801068a:	af00      	add	r7, sp, #0
 801068c:	6078      	str	r0, [r7, #4]
 801068e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010694:	683b      	ldr	r3, [r7, #0]
 8010696:	781b      	ldrb	r3, [r3, #0]
 8010698:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801069a:	683b      	ldr	r3, [r7, #0]
 801069c:	785b      	ldrb	r3, [r3, #1]
 801069e:	2b01      	cmp	r3, #1
 80106a0:	d128      	bne.n	80106f4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80106a2:	68bb      	ldr	r3, [r7, #8]
 80106a4:	015a      	lsls	r2, r3, #5
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	4413      	add	r3, r2
 80106aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	68ba      	ldr	r2, [r7, #8]
 80106b2:	0151      	lsls	r1, r2, #5
 80106b4:	68fa      	ldr	r2, [r7, #12]
 80106b6:	440a      	add	r2, r1
 80106b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80106bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80106c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80106c2:	683b      	ldr	r3, [r7, #0]
 80106c4:	78db      	ldrb	r3, [r3, #3]
 80106c6:	2b03      	cmp	r3, #3
 80106c8:	d003      	beq.n	80106d2 <USB_EPClearStall+0x4c>
 80106ca:	683b      	ldr	r3, [r7, #0]
 80106cc:	78db      	ldrb	r3, [r3, #3]
 80106ce:	2b02      	cmp	r3, #2
 80106d0:	d138      	bne.n	8010744 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80106d2:	68bb      	ldr	r3, [r7, #8]
 80106d4:	015a      	lsls	r2, r3, #5
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	4413      	add	r3, r2
 80106da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	68ba      	ldr	r2, [r7, #8]
 80106e2:	0151      	lsls	r1, r2, #5
 80106e4:	68fa      	ldr	r2, [r7, #12]
 80106e6:	440a      	add	r2, r1
 80106e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80106ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80106f0:	6013      	str	r3, [r2, #0]
 80106f2:	e027      	b.n	8010744 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80106f4:	68bb      	ldr	r3, [r7, #8]
 80106f6:	015a      	lsls	r2, r3, #5
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	4413      	add	r3, r2
 80106fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	68ba      	ldr	r2, [r7, #8]
 8010704:	0151      	lsls	r1, r2, #5
 8010706:	68fa      	ldr	r2, [r7, #12]
 8010708:	440a      	add	r2, r1
 801070a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801070e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010712:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010714:	683b      	ldr	r3, [r7, #0]
 8010716:	78db      	ldrb	r3, [r3, #3]
 8010718:	2b03      	cmp	r3, #3
 801071a:	d003      	beq.n	8010724 <USB_EPClearStall+0x9e>
 801071c:	683b      	ldr	r3, [r7, #0]
 801071e:	78db      	ldrb	r3, [r3, #3]
 8010720:	2b02      	cmp	r3, #2
 8010722:	d10f      	bne.n	8010744 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010724:	68bb      	ldr	r3, [r7, #8]
 8010726:	015a      	lsls	r2, r3, #5
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	4413      	add	r3, r2
 801072c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	68ba      	ldr	r2, [r7, #8]
 8010734:	0151      	lsls	r1, r2, #5
 8010736:	68fa      	ldr	r2, [r7, #12]
 8010738:	440a      	add	r2, r1
 801073a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801073e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010742:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010744:	2300      	movs	r3, #0
}
 8010746:	4618      	mov	r0, r3
 8010748:	3714      	adds	r7, #20
 801074a:	46bd      	mov	sp, r7
 801074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010750:	4770      	bx	lr

08010752 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010752:	b480      	push	{r7}
 8010754:	b085      	sub	sp, #20
 8010756:	af00      	add	r7, sp, #0
 8010758:	6078      	str	r0, [r7, #4]
 801075a:	460b      	mov	r3, r1
 801075c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	68fa      	ldr	r2, [r7, #12]
 801076c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010770:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010774:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801077c:	681a      	ldr	r2, [r3, #0]
 801077e:	78fb      	ldrb	r3, [r7, #3]
 8010780:	011b      	lsls	r3, r3, #4
 8010782:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8010786:	68f9      	ldr	r1, [r7, #12]
 8010788:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801078c:	4313      	orrs	r3, r2
 801078e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010790:	2300      	movs	r3, #0
}
 8010792:	4618      	mov	r0, r3
 8010794:	3714      	adds	r7, #20
 8010796:	46bd      	mov	sp, r7
 8010798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079c:	4770      	bx	lr

0801079e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801079e:	b480      	push	{r7}
 80107a0:	b085      	sub	sp, #20
 80107a2:	af00      	add	r7, sp, #0
 80107a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	68fa      	ldr	r2, [r7, #12]
 80107b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80107b8:	f023 0303 	bic.w	r3, r3, #3
 80107bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80107c4:	685b      	ldr	r3, [r3, #4]
 80107c6:	68fa      	ldr	r2, [r7, #12]
 80107c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80107cc:	f023 0302 	bic.w	r3, r3, #2
 80107d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80107d2:	2300      	movs	r3, #0
}
 80107d4:	4618      	mov	r0, r3
 80107d6:	3714      	adds	r7, #20
 80107d8:	46bd      	mov	sp, r7
 80107da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107de:	4770      	bx	lr

080107e0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80107e0:	b480      	push	{r7}
 80107e2:	b085      	sub	sp, #20
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	68fa      	ldr	r2, [r7, #12]
 80107f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80107fa:	f023 0303 	bic.w	r3, r3, #3
 80107fe:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010806:	685b      	ldr	r3, [r3, #4]
 8010808:	68fa      	ldr	r2, [r7, #12]
 801080a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801080e:	f043 0302 	orr.w	r3, r3, #2
 8010812:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010814:	2300      	movs	r3, #0
}
 8010816:	4618      	mov	r0, r3
 8010818:	3714      	adds	r7, #20
 801081a:	46bd      	mov	sp, r7
 801081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010820:	4770      	bx	lr

08010822 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8010822:	b480      	push	{r7}
 8010824:	b085      	sub	sp, #20
 8010826:	af00      	add	r7, sp, #0
 8010828:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	695b      	ldr	r3, [r3, #20]
 801082e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	699b      	ldr	r3, [r3, #24]
 8010834:	68fa      	ldr	r2, [r7, #12]
 8010836:	4013      	ands	r3, r2
 8010838:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801083a:	68fb      	ldr	r3, [r7, #12]
}
 801083c:	4618      	mov	r0, r3
 801083e:	3714      	adds	r7, #20
 8010840:	46bd      	mov	sp, r7
 8010842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010846:	4770      	bx	lr

08010848 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010848:	b480      	push	{r7}
 801084a:	b085      	sub	sp, #20
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801085a:	699b      	ldr	r3, [r3, #24]
 801085c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010864:	69db      	ldr	r3, [r3, #28]
 8010866:	68ba      	ldr	r2, [r7, #8]
 8010868:	4013      	ands	r3, r2
 801086a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801086c:	68bb      	ldr	r3, [r7, #8]
 801086e:	0c1b      	lsrs	r3, r3, #16
}
 8010870:	4618      	mov	r0, r3
 8010872:	3714      	adds	r7, #20
 8010874:	46bd      	mov	sp, r7
 8010876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087a:	4770      	bx	lr

0801087c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801087c:	b480      	push	{r7}
 801087e:	b085      	sub	sp, #20
 8010880:	af00      	add	r7, sp, #0
 8010882:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801088e:	699b      	ldr	r3, [r3, #24]
 8010890:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010898:	69db      	ldr	r3, [r3, #28]
 801089a:	68ba      	ldr	r2, [r7, #8]
 801089c:	4013      	ands	r3, r2
 801089e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80108a0:	68bb      	ldr	r3, [r7, #8]
 80108a2:	b29b      	uxth	r3, r3
}
 80108a4:	4618      	mov	r0, r3
 80108a6:	3714      	adds	r7, #20
 80108a8:	46bd      	mov	sp, r7
 80108aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ae:	4770      	bx	lr

080108b0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80108b0:	b480      	push	{r7}
 80108b2:	b085      	sub	sp, #20
 80108b4:	af00      	add	r7, sp, #0
 80108b6:	6078      	str	r0, [r7, #4]
 80108b8:	460b      	mov	r3, r1
 80108ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80108c0:	78fb      	ldrb	r3, [r7, #3]
 80108c2:	015a      	lsls	r2, r3, #5
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	4413      	add	r3, r2
 80108c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108cc:	689b      	ldr	r3, [r3, #8]
 80108ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80108d6:	695b      	ldr	r3, [r3, #20]
 80108d8:	68ba      	ldr	r2, [r7, #8]
 80108da:	4013      	ands	r3, r2
 80108dc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80108de:	68bb      	ldr	r3, [r7, #8]
}
 80108e0:	4618      	mov	r0, r3
 80108e2:	3714      	adds	r7, #20
 80108e4:	46bd      	mov	sp, r7
 80108e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ea:	4770      	bx	lr

080108ec <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80108ec:	b480      	push	{r7}
 80108ee:	b087      	sub	sp, #28
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
 80108f4:	460b      	mov	r3, r1
 80108f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80108fc:	697b      	ldr	r3, [r7, #20]
 80108fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010902:	691b      	ldr	r3, [r3, #16]
 8010904:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010906:	697b      	ldr	r3, [r7, #20]
 8010908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801090c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801090e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010910:	78fb      	ldrb	r3, [r7, #3]
 8010912:	f003 030f 	and.w	r3, r3, #15
 8010916:	68fa      	ldr	r2, [r7, #12]
 8010918:	fa22 f303 	lsr.w	r3, r2, r3
 801091c:	01db      	lsls	r3, r3, #7
 801091e:	b2db      	uxtb	r3, r3
 8010920:	693a      	ldr	r2, [r7, #16]
 8010922:	4313      	orrs	r3, r2
 8010924:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010926:	78fb      	ldrb	r3, [r7, #3]
 8010928:	015a      	lsls	r2, r3, #5
 801092a:	697b      	ldr	r3, [r7, #20]
 801092c:	4413      	add	r3, r2
 801092e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010932:	689b      	ldr	r3, [r3, #8]
 8010934:	693a      	ldr	r2, [r7, #16]
 8010936:	4013      	ands	r3, r2
 8010938:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801093a:	68bb      	ldr	r3, [r7, #8]
}
 801093c:	4618      	mov	r0, r3
 801093e:	371c      	adds	r7, #28
 8010940:	46bd      	mov	sp, r7
 8010942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010946:	4770      	bx	lr

08010948 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010948:	b480      	push	{r7}
 801094a:	b083      	sub	sp, #12
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	695b      	ldr	r3, [r3, #20]
 8010954:	f003 0301 	and.w	r3, r3, #1
}
 8010958:	4618      	mov	r0, r3
 801095a:	370c      	adds	r7, #12
 801095c:	46bd      	mov	sp, r7
 801095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010962:	4770      	bx	lr

08010964 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010964:	b480      	push	{r7}
 8010966:	b085      	sub	sp, #20
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	68fa      	ldr	r2, [r7, #12]
 801097a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801097e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010982:	f023 0307 	bic.w	r3, r3, #7
 8010986:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010988:	68fb      	ldr	r3, [r7, #12]
 801098a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801098e:	685b      	ldr	r3, [r3, #4]
 8010990:	68fa      	ldr	r2, [r7, #12]
 8010992:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801099a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801099c:	2300      	movs	r3, #0
}
 801099e:	4618      	mov	r0, r3
 80109a0:	3714      	adds	r7, #20
 80109a2:	46bd      	mov	sp, r7
 80109a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a8:	4770      	bx	lr
	...

080109ac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80109ac:	b480      	push	{r7}
 80109ae:	b087      	sub	sp, #28
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	60f8      	str	r0, [r7, #12]
 80109b4:	460b      	mov	r3, r1
 80109b6:	607a      	str	r2, [r7, #4]
 80109b8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	333c      	adds	r3, #60	; 0x3c
 80109c2:	3304      	adds	r3, #4
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80109c8:	693b      	ldr	r3, [r7, #16]
 80109ca:	4a26      	ldr	r2, [pc, #152]	; (8010a64 <USB_EP0_OutStart+0xb8>)
 80109cc:	4293      	cmp	r3, r2
 80109ce:	d90a      	bls.n	80109e6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80109d0:	697b      	ldr	r3, [r7, #20]
 80109d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80109dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80109e0:	d101      	bne.n	80109e6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80109e2:	2300      	movs	r3, #0
 80109e4:	e037      	b.n	8010a56 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80109e6:	697b      	ldr	r3, [r7, #20]
 80109e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80109ec:	461a      	mov	r2, r3
 80109ee:	2300      	movs	r3, #0
 80109f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80109f2:	697b      	ldr	r3, [r7, #20]
 80109f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80109f8:	691b      	ldr	r3, [r3, #16]
 80109fa:	697a      	ldr	r2, [r7, #20]
 80109fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010a04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010a06:	697b      	ldr	r3, [r7, #20]
 8010a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a0c:	691b      	ldr	r3, [r3, #16]
 8010a0e:	697a      	ldr	r2, [r7, #20]
 8010a10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a14:	f043 0318 	orr.w	r3, r3, #24
 8010a18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010a1a:	697b      	ldr	r3, [r7, #20]
 8010a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a20:	691b      	ldr	r3, [r3, #16]
 8010a22:	697a      	ldr	r2, [r7, #20]
 8010a24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a28:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010a2c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010a2e:	7afb      	ldrb	r3, [r7, #11]
 8010a30:	2b01      	cmp	r3, #1
 8010a32:	d10f      	bne.n	8010a54 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010a34:	697b      	ldr	r3, [r7, #20]
 8010a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a3a:	461a      	mov	r2, r3
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010a40:	697b      	ldr	r3, [r7, #20]
 8010a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	697a      	ldr	r2, [r7, #20]
 8010a4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a4e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010a52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010a54:	2300      	movs	r3, #0
}
 8010a56:	4618      	mov	r0, r3
 8010a58:	371c      	adds	r7, #28
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a60:	4770      	bx	lr
 8010a62:	bf00      	nop
 8010a64:	4f54300a 	.word	0x4f54300a

08010a68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010a68:	b480      	push	{r7}
 8010a6a:	b085      	sub	sp, #20
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010a70:	2300      	movs	r3, #0
 8010a72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	3301      	adds	r3, #1
 8010a78:	60fb      	str	r3, [r7, #12]
 8010a7a:	4a13      	ldr	r2, [pc, #76]	; (8010ac8 <USB_CoreReset+0x60>)
 8010a7c:	4293      	cmp	r3, r2
 8010a7e:	d901      	bls.n	8010a84 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8010a80:	2303      	movs	r3, #3
 8010a82:	e01a      	b.n	8010aba <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	691b      	ldr	r3, [r3, #16]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	daf3      	bge.n	8010a74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	691b      	ldr	r3, [r3, #16]
 8010a94:	f043 0201 	orr.w	r2, r3, #1
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	3301      	adds	r3, #1
 8010aa0:	60fb      	str	r3, [r7, #12]
 8010aa2:	4a09      	ldr	r2, [pc, #36]	; (8010ac8 <USB_CoreReset+0x60>)
 8010aa4:	4293      	cmp	r3, r2
 8010aa6:	d901      	bls.n	8010aac <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8010aa8:	2303      	movs	r3, #3
 8010aaa:	e006      	b.n	8010aba <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	691b      	ldr	r3, [r3, #16]
 8010ab0:	f003 0301 	and.w	r3, r3, #1
 8010ab4:	2b01      	cmp	r3, #1
 8010ab6:	d0f1      	beq.n	8010a9c <USB_CoreReset+0x34>

  return HAL_OK;
 8010ab8:	2300      	movs	r3, #0
}
 8010aba:	4618      	mov	r0, r3
 8010abc:	3714      	adds	r7, #20
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac4:	4770      	bx	lr
 8010ac6:	bf00      	nop
 8010ac8:	00030d40 	.word	0x00030d40

08010acc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010ad0:	4904      	ldr	r1, [pc, #16]	; (8010ae4 <MX_FATFS_Init+0x18>)
 8010ad2:	4805      	ldr	r0, [pc, #20]	; (8010ae8 <MX_FATFS_Init+0x1c>)
 8010ad4:	f006 f800 	bl	8016ad8 <FATFS_LinkDriver>
 8010ad8:	4603      	mov	r3, r0
 8010ada:	461a      	mov	r2, r3
 8010adc:	4b03      	ldr	r3, [pc, #12]	; (8010aec <MX_FATFS_Init+0x20>)
 8010ade:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010ae0:	bf00      	nop
 8010ae2:	bd80      	pop	{r7, pc}
 8010ae4:	20002e9c 	.word	0x20002e9c
 8010ae8:	08018118 	.word	0x08018118
 8010aec:	20002e98 	.word	0x20002e98

08010af0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8010af0:	b480      	push	{r7}
 8010af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8010af4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8010af6:	4618      	mov	r0, r3
 8010af8:	46bd      	mov	sp, r7
 8010afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afe:	4770      	bx	lr

08010b00 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010b00:	b580      	push	{r7, lr}
 8010b02:	b082      	sub	sp, #8
 8010b04:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010b06:	2300      	movs	r3, #0
 8010b08:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010b0a:	f000 f896 	bl	8010c3a <BSP_SD_IsDetected>
 8010b0e:	4603      	mov	r3, r0
 8010b10:	2b01      	cmp	r3, #1
 8010b12:	d001      	beq.n	8010b18 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8010b14:	2301      	movs	r3, #1
 8010b16:	e012      	b.n	8010b3e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8010b18:	480b      	ldr	r0, [pc, #44]	; (8010b48 <BSP_SD_Init+0x48>)
 8010b1a:	f7fb fd53 	bl	800c5c4 <HAL_SD_Init>
 8010b1e:	4603      	mov	r3, r0
 8010b20:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010b22:	79fb      	ldrb	r3, [r7, #7]
 8010b24:	2b00      	cmp	r3, #0
 8010b26:	d109      	bne.n	8010b3c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8010b28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010b2c:	4806      	ldr	r0, [pc, #24]	; (8010b48 <BSP_SD_Init+0x48>)
 8010b2e:	f7fc fe6d 	bl	800d80c <HAL_SD_ConfigWideBusOperation>
 8010b32:	4603      	mov	r3, r0
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d001      	beq.n	8010b3c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010b38:	2301      	movs	r3, #1
 8010b3a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010b3c:	79fb      	ldrb	r3, [r7, #7]
}
 8010b3e:	4618      	mov	r0, r3
 8010b40:	3708      	adds	r7, #8
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bd80      	pop	{r7, pc}
 8010b46:	bf00      	nop
 8010b48:	20001bd4 	.word	0x20001bd4

08010b4c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b086      	sub	sp, #24
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	60f8      	str	r0, [r7, #12]
 8010b54:	60b9      	str	r1, [r7, #8]
 8010b56:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010b58:	2300      	movs	r3, #0
 8010b5a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	68ba      	ldr	r2, [r7, #8]
 8010b60:	68f9      	ldr	r1, [r7, #12]
 8010b62:	4806      	ldr	r0, [pc, #24]	; (8010b7c <BSP_SD_ReadBlocks_DMA+0x30>)
 8010b64:	f7fc f940 	bl	800cde8 <HAL_SD_ReadBlocks_DMA>
 8010b68:	4603      	mov	r3, r0
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d001      	beq.n	8010b72 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010b6e:	2301      	movs	r3, #1
 8010b70:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b74:	4618      	mov	r0, r3
 8010b76:	3718      	adds	r7, #24
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bd80      	pop	{r7, pc}
 8010b7c:	20001bd4 	.word	0x20001bd4

08010b80 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010b80:	b580      	push	{r7, lr}
 8010b82:	b086      	sub	sp, #24
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	60f8      	str	r0, [r7, #12]
 8010b88:	60b9      	str	r1, [r7, #8]
 8010b8a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	68ba      	ldr	r2, [r7, #8]
 8010b94:	68f9      	ldr	r1, [r7, #12]
 8010b96:	4806      	ldr	r0, [pc, #24]	; (8010bb0 <BSP_SD_WriteBlocks_DMA+0x30>)
 8010b98:	f7fc fa06 	bl	800cfa8 <HAL_SD_WriteBlocks_DMA>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d001      	beq.n	8010ba6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010ba2:	2301      	movs	r3, #1
 8010ba4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ba8:	4618      	mov	r0, r3
 8010baa:	3718      	adds	r7, #24
 8010bac:	46bd      	mov	sp, r7
 8010bae:	bd80      	pop	{r7, pc}
 8010bb0:	20001bd4 	.word	0x20001bd4

08010bb4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010bb8:	4805      	ldr	r0, [pc, #20]	; (8010bd0 <BSP_SD_GetCardState+0x1c>)
 8010bba:	f7fc fec1 	bl	800d940 <HAL_SD_GetCardState>
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	2b04      	cmp	r3, #4
 8010bc2:	bf14      	ite	ne
 8010bc4:	2301      	movne	r3, #1
 8010bc6:	2300      	moveq	r3, #0
 8010bc8:	b2db      	uxtb	r3, r3
}
 8010bca:	4618      	mov	r0, r3
 8010bcc:	bd80      	pop	{r7, pc}
 8010bce:	bf00      	nop
 8010bd0:	20001bd4 	.word	0x20001bd4

08010bd4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b082      	sub	sp, #8
 8010bd8:	af00      	add	r7, sp, #0
 8010bda:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8010bdc:	6879      	ldr	r1, [r7, #4]
 8010bde:	4803      	ldr	r0, [pc, #12]	; (8010bec <BSP_SD_GetCardInfo+0x18>)
 8010be0:	f7fc fde8 	bl	800d7b4 <HAL_SD_GetCardInfo>
}
 8010be4:	bf00      	nop
 8010be6:	3708      	adds	r7, #8
 8010be8:	46bd      	mov	sp, r7
 8010bea:	bd80      	pop	{r7, pc}
 8010bec:	20001bd4 	.word	0x20001bd4

08010bf0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b082      	sub	sp, #8
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8010bf8:	f000 f818 	bl	8010c2c <BSP_SD_AbortCallback>
}
 8010bfc:	bf00      	nop
 8010bfe:	3708      	adds	r7, #8
 8010c00:	46bd      	mov	sp, r7
 8010c02:	bd80      	pop	{r7, pc}

08010c04 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010c04:	b580      	push	{r7, lr}
 8010c06:	b082      	sub	sp, #8
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010c0c:	f000 f9a8 	bl	8010f60 <BSP_SD_WriteCpltCallback>
}
 8010c10:	bf00      	nop
 8010c12:	3708      	adds	r7, #8
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bd80      	pop	{r7, pc}

08010c18 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b082      	sub	sp, #8
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010c20:	f000 f9aa 	bl	8010f78 <BSP_SD_ReadCpltCallback>
}
 8010c24:	bf00      	nop
 8010c26:	3708      	adds	r7, #8
 8010c28:	46bd      	mov	sp, r7
 8010c2a:	bd80      	pop	{r7, pc}

08010c2c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8010c2c:	b480      	push	{r7}
 8010c2e:	af00      	add	r7, sp, #0

}
 8010c30:	bf00      	nop
 8010c32:	46bd      	mov	sp, r7
 8010c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c38:	4770      	bx	lr

08010c3a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010c3a:	b580      	push	{r7, lr}
 8010c3c:	b082      	sub	sp, #8
 8010c3e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010c40:	2301      	movs	r3, #1
 8010c42:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010c44:	f000 f80c 	bl	8010c60 <BSP_PlatformIsDetected>
 8010c48:	4603      	mov	r3, r0
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d101      	bne.n	8010c52 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010c4e:	2300      	movs	r3, #0
 8010c50:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010c52:	79fb      	ldrb	r3, [r7, #7]
 8010c54:	b2db      	uxtb	r3, r3
}
 8010c56:	4618      	mov	r0, r3
 8010c58:	3708      	adds	r7, #8
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	bd80      	pop	{r7, pc}
	...

08010c60 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010c60:	b580      	push	{r7, lr}
 8010c62:	b082      	sub	sp, #8
 8010c64:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8010c66:	2301      	movs	r3, #1
 8010c68:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8010c6a:	2180      	movs	r1, #128	; 0x80
 8010c6c:	4806      	ldr	r0, [pc, #24]	; (8010c88 <BSP_PlatformIsDetected+0x28>)
 8010c6e:	f7f7 fe2d 	bl	80088cc <HAL_GPIO_ReadPin>
 8010c72:	4603      	mov	r3, r0
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d001      	beq.n	8010c7c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8010c78:	2300      	movs	r3, #0
 8010c7a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010c7c:	79fb      	ldrb	r3, [r7, #7]
}
 8010c7e:	4618      	mov	r0, r3
 8010c80:	3708      	adds	r7, #8
 8010c82:	46bd      	mov	sp, r7
 8010c84:	bd80      	pop	{r7, pc}
 8010c86:	bf00      	nop
 8010c88:	40020800 	.word	0x40020800

08010c8c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b084      	sub	sp, #16
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010c94:	f7f5 fcec 	bl	8006670 <HAL_GetTick>
 8010c98:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8010c9a:	e006      	b.n	8010caa <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010c9c:	f7ff ff8a 	bl	8010bb4 <BSP_SD_GetCardState>
 8010ca0:	4603      	mov	r3, r0
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d101      	bne.n	8010caa <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	e009      	b.n	8010cbe <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8010caa:	f7f5 fce1 	bl	8006670 <HAL_GetTick>
 8010cae:	4602      	mov	r2, r0
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	1ad3      	subs	r3, r2, r3
 8010cb4:	687a      	ldr	r2, [r7, #4]
 8010cb6:	429a      	cmp	r2, r3
 8010cb8:	d8f0      	bhi.n	8010c9c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8010cba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	3710      	adds	r7, #16
 8010cc2:	46bd      	mov	sp, r7
 8010cc4:	bd80      	pop	{r7, pc}
	...

08010cc8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b082      	sub	sp, #8
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	4603      	mov	r3, r0
 8010cd0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010cd2:	4b0b      	ldr	r3, [pc, #44]	; (8010d00 <SD_CheckStatus+0x38>)
 8010cd4:	2201      	movs	r2, #1
 8010cd6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010cd8:	f7ff ff6c 	bl	8010bb4 <BSP_SD_GetCardState>
 8010cdc:	4603      	mov	r3, r0
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d107      	bne.n	8010cf2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010ce2:	4b07      	ldr	r3, [pc, #28]	; (8010d00 <SD_CheckStatus+0x38>)
 8010ce4:	781b      	ldrb	r3, [r3, #0]
 8010ce6:	b2db      	uxtb	r3, r3
 8010ce8:	f023 0301 	bic.w	r3, r3, #1
 8010cec:	b2da      	uxtb	r2, r3
 8010cee:	4b04      	ldr	r3, [pc, #16]	; (8010d00 <SD_CheckStatus+0x38>)
 8010cf0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010cf2:	4b03      	ldr	r3, [pc, #12]	; (8010d00 <SD_CheckStatus+0x38>)
 8010cf4:	781b      	ldrb	r3, [r3, #0]
 8010cf6:	b2db      	uxtb	r3, r3
}
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	3708      	adds	r7, #8
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	bd80      	pop	{r7, pc}
 8010d00:	20000009 	.word	0x20000009

08010d04 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	b082      	sub	sp, #8
 8010d08:	af00      	add	r7, sp, #0
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010d0e:	f7ff fef7 	bl	8010b00 <BSP_SD_Init>
 8010d12:	4603      	mov	r3, r0
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d107      	bne.n	8010d28 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010d18:	79fb      	ldrb	r3, [r7, #7]
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f7ff ffd4 	bl	8010cc8 <SD_CheckStatus>
 8010d20:	4603      	mov	r3, r0
 8010d22:	461a      	mov	r2, r3
 8010d24:	4b04      	ldr	r3, [pc, #16]	; (8010d38 <SD_initialize+0x34>)
 8010d26:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010d28:	4b03      	ldr	r3, [pc, #12]	; (8010d38 <SD_initialize+0x34>)
 8010d2a:	781b      	ldrb	r3, [r3, #0]
 8010d2c:	b2db      	uxtb	r3, r3
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	3708      	adds	r7, #8
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd80      	pop	{r7, pc}
 8010d36:	bf00      	nop
 8010d38:	20000009 	.word	0x20000009

08010d3c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b082      	sub	sp, #8
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	4603      	mov	r3, r0
 8010d44:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010d46:	79fb      	ldrb	r3, [r7, #7]
 8010d48:	4618      	mov	r0, r3
 8010d4a:	f7ff ffbd 	bl	8010cc8 <SD_CheckStatus>
 8010d4e:	4603      	mov	r3, r0
}
 8010d50:	4618      	mov	r0, r3
 8010d52:	3708      	adds	r7, #8
 8010d54:	46bd      	mov	sp, r7
 8010d56:	bd80      	pop	{r7, pc}

08010d58 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b086      	sub	sp, #24
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	60b9      	str	r1, [r7, #8]
 8010d60:	607a      	str	r2, [r7, #4]
 8010d62:	603b      	str	r3, [r7, #0]
 8010d64:	4603      	mov	r3, r0
 8010d66:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010d68:	2301      	movs	r3, #1
 8010d6a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010d6c:	f247 5030 	movw	r0, #30000	; 0x7530
 8010d70:	f7ff ff8c 	bl	8010c8c <SD_CheckStatusWithTimeout>
 8010d74:	4603      	mov	r3, r0
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	da01      	bge.n	8010d7e <SD_read+0x26>
  {
    return res;
 8010d7a:	7dfb      	ldrb	r3, [r7, #23]
 8010d7c:	e03b      	b.n	8010df6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010d7e:	683a      	ldr	r2, [r7, #0]
 8010d80:	6879      	ldr	r1, [r7, #4]
 8010d82:	68b8      	ldr	r0, [r7, #8]
 8010d84:	f7ff fee2 	bl	8010b4c <BSP_SD_ReadBlocks_DMA>
 8010d88:	4603      	mov	r3, r0
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d132      	bne.n	8010df4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010d8e:	4b1c      	ldr	r3, [pc, #112]	; (8010e00 <SD_read+0xa8>)
 8010d90:	2200      	movs	r2, #0
 8010d92:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010d94:	f7f5 fc6c 	bl	8006670 <HAL_GetTick>
 8010d98:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010d9a:	bf00      	nop
 8010d9c:	4b18      	ldr	r3, [pc, #96]	; (8010e00 <SD_read+0xa8>)
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d108      	bne.n	8010db6 <SD_read+0x5e>
 8010da4:	f7f5 fc64 	bl	8006670 <HAL_GetTick>
 8010da8:	4602      	mov	r2, r0
 8010daa:	693b      	ldr	r3, [r7, #16]
 8010dac:	1ad3      	subs	r3, r2, r3
 8010dae:	f247 522f 	movw	r2, #29999	; 0x752f
 8010db2:	4293      	cmp	r3, r2
 8010db4:	d9f2      	bls.n	8010d9c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8010db6:	4b12      	ldr	r3, [pc, #72]	; (8010e00 <SD_read+0xa8>)
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d102      	bne.n	8010dc4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010dbe:	2301      	movs	r3, #1
 8010dc0:	75fb      	strb	r3, [r7, #23]
 8010dc2:	e017      	b.n	8010df4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010dc4:	4b0e      	ldr	r3, [pc, #56]	; (8010e00 <SD_read+0xa8>)
 8010dc6:	2200      	movs	r2, #0
 8010dc8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010dca:	f7f5 fc51 	bl	8006670 <HAL_GetTick>
 8010dce:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010dd0:	e007      	b.n	8010de2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010dd2:	f7ff feef 	bl	8010bb4 <BSP_SD_GetCardState>
 8010dd6:	4603      	mov	r3, r0
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d102      	bne.n	8010de2 <SD_read+0x8a>
          {
            res = RES_OK;
 8010ddc:	2300      	movs	r3, #0
 8010dde:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010de0:	e008      	b.n	8010df4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010de2:	f7f5 fc45 	bl	8006670 <HAL_GetTick>
 8010de6:	4602      	mov	r2, r0
 8010de8:	693b      	ldr	r3, [r7, #16]
 8010dea:	1ad3      	subs	r3, r2, r3
 8010dec:	f247 522f 	movw	r2, #29999	; 0x752f
 8010df0:	4293      	cmp	r3, r2
 8010df2:	d9ee      	bls.n	8010dd2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010df6:	4618      	mov	r0, r3
 8010df8:	3718      	adds	r7, #24
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	bd80      	pop	{r7, pc}
 8010dfe:	bf00      	nop
 8010e00:	200001fc 	.word	0x200001fc

08010e04 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b086      	sub	sp, #24
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	60b9      	str	r1, [r7, #8]
 8010e0c:	607a      	str	r2, [r7, #4]
 8010e0e:	603b      	str	r3, [r7, #0]
 8010e10:	4603      	mov	r3, r0
 8010e12:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010e14:	2301      	movs	r3, #1
 8010e16:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010e18:	4b24      	ldr	r3, [pc, #144]	; (8010eac <SD_write+0xa8>)
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010e1e:	f247 5030 	movw	r0, #30000	; 0x7530
 8010e22:	f7ff ff33 	bl	8010c8c <SD_CheckStatusWithTimeout>
 8010e26:	4603      	mov	r3, r0
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	da01      	bge.n	8010e30 <SD_write+0x2c>
  {
    return res;
 8010e2c:	7dfb      	ldrb	r3, [r7, #23]
 8010e2e:	e038      	b.n	8010ea2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010e30:	683a      	ldr	r2, [r7, #0]
 8010e32:	6879      	ldr	r1, [r7, #4]
 8010e34:	68b8      	ldr	r0, [r7, #8]
 8010e36:	f7ff fea3 	bl	8010b80 <BSP_SD_WriteBlocks_DMA>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d12f      	bne.n	8010ea0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010e40:	f7f5 fc16 	bl	8006670 <HAL_GetTick>
 8010e44:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010e46:	bf00      	nop
 8010e48:	4b18      	ldr	r3, [pc, #96]	; (8010eac <SD_write+0xa8>)
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d108      	bne.n	8010e62 <SD_write+0x5e>
 8010e50:	f7f5 fc0e 	bl	8006670 <HAL_GetTick>
 8010e54:	4602      	mov	r2, r0
 8010e56:	693b      	ldr	r3, [r7, #16]
 8010e58:	1ad3      	subs	r3, r2, r3
 8010e5a:	f247 522f 	movw	r2, #29999	; 0x752f
 8010e5e:	4293      	cmp	r3, r2
 8010e60:	d9f2      	bls.n	8010e48 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8010e62:	4b12      	ldr	r3, [pc, #72]	; (8010eac <SD_write+0xa8>)
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d102      	bne.n	8010e70 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8010e6a:	2301      	movs	r3, #1
 8010e6c:	75fb      	strb	r3, [r7, #23]
 8010e6e:	e017      	b.n	8010ea0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010e70:	4b0e      	ldr	r3, [pc, #56]	; (8010eac <SD_write+0xa8>)
 8010e72:	2200      	movs	r2, #0
 8010e74:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010e76:	f7f5 fbfb 	bl	8006670 <HAL_GetTick>
 8010e7a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010e7c:	e007      	b.n	8010e8e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010e7e:	f7ff fe99 	bl	8010bb4 <BSP_SD_GetCardState>
 8010e82:	4603      	mov	r3, r0
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d102      	bne.n	8010e8e <SD_write+0x8a>
          {
            res = RES_OK;
 8010e88:	2300      	movs	r3, #0
 8010e8a:	75fb      	strb	r3, [r7, #23]
            break;
 8010e8c:	e008      	b.n	8010ea0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010e8e:	f7f5 fbef 	bl	8006670 <HAL_GetTick>
 8010e92:	4602      	mov	r2, r0
 8010e94:	693b      	ldr	r3, [r7, #16]
 8010e96:	1ad3      	subs	r3, r2, r3
 8010e98:	f247 522f 	movw	r2, #29999	; 0x752f
 8010e9c:	4293      	cmp	r3, r2
 8010e9e:	d9ee      	bls.n	8010e7e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8010ea0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	3718      	adds	r7, #24
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	bd80      	pop	{r7, pc}
 8010eaa:	bf00      	nop
 8010eac:	200001f8 	.word	0x200001f8

08010eb0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b08c      	sub	sp, #48	; 0x30
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	603a      	str	r2, [r7, #0]
 8010eba:	71fb      	strb	r3, [r7, #7]
 8010ebc:	460b      	mov	r3, r1
 8010ebe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010ec0:	2301      	movs	r3, #1
 8010ec2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010ec6:	4b25      	ldr	r3, [pc, #148]	; (8010f5c <SD_ioctl+0xac>)
 8010ec8:	781b      	ldrb	r3, [r3, #0]
 8010eca:	b2db      	uxtb	r3, r3
 8010ecc:	f003 0301 	and.w	r3, r3, #1
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d001      	beq.n	8010ed8 <SD_ioctl+0x28>
 8010ed4:	2303      	movs	r3, #3
 8010ed6:	e03c      	b.n	8010f52 <SD_ioctl+0xa2>

  switch (cmd)
 8010ed8:	79bb      	ldrb	r3, [r7, #6]
 8010eda:	2b03      	cmp	r3, #3
 8010edc:	d834      	bhi.n	8010f48 <SD_ioctl+0x98>
 8010ede:	a201      	add	r2, pc, #4	; (adr r2, 8010ee4 <SD_ioctl+0x34>)
 8010ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ee4:	08010ef5 	.word	0x08010ef5
 8010ee8:	08010efd 	.word	0x08010efd
 8010eec:	08010f15 	.word	0x08010f15
 8010ef0:	08010f2f 	.word	0x08010f2f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010efa:	e028      	b.n	8010f4e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010efc:	f107 030c 	add.w	r3, r7, #12
 8010f00:	4618      	mov	r0, r3
 8010f02:	f7ff fe67 	bl	8010bd4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f08:	683b      	ldr	r3, [r7, #0]
 8010f0a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010f12:	e01c      	b.n	8010f4e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010f14:	f107 030c 	add.w	r3, r7, #12
 8010f18:	4618      	mov	r0, r3
 8010f1a:	f7ff fe5b 	bl	8010bd4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f20:	b29a      	uxth	r2, r3
 8010f22:	683b      	ldr	r3, [r7, #0]
 8010f24:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010f26:	2300      	movs	r3, #0
 8010f28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010f2c:	e00f      	b.n	8010f4e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010f2e:	f107 030c 	add.w	r3, r7, #12
 8010f32:	4618      	mov	r0, r3
 8010f34:	f7ff fe4e 	bl	8010bd4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f3a:	0a5a      	lsrs	r2, r3, #9
 8010f3c:	683b      	ldr	r3, [r7, #0]
 8010f3e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010f40:	2300      	movs	r3, #0
 8010f42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010f46:	e002      	b.n	8010f4e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010f48:	2304      	movs	r3, #4
 8010f4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8010f4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010f52:	4618      	mov	r0, r3
 8010f54:	3730      	adds	r7, #48	; 0x30
 8010f56:	46bd      	mov	sp, r7
 8010f58:	bd80      	pop	{r7, pc}
 8010f5a:	bf00      	nop
 8010f5c:	20000009 	.word	0x20000009

08010f60 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8010f60:	b480      	push	{r7}
 8010f62:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8010f64:	4b03      	ldr	r3, [pc, #12]	; (8010f74 <BSP_SD_WriteCpltCallback+0x14>)
 8010f66:	2201      	movs	r2, #1
 8010f68:	601a      	str	r2, [r3, #0]
}
 8010f6a:	bf00      	nop
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f72:	4770      	bx	lr
 8010f74:	200001f8 	.word	0x200001f8

08010f78 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8010f78:	b480      	push	{r7}
 8010f7a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8010f7c:	4b03      	ldr	r3, [pc, #12]	; (8010f8c <BSP_SD_ReadCpltCallback+0x14>)
 8010f7e:	2201      	movs	r2, #1
 8010f80:	601a      	str	r2, [r3, #0]
}
 8010f82:	bf00      	nop
 8010f84:	46bd      	mov	sp, r7
 8010f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8a:	4770      	bx	lr
 8010f8c:	200001fc 	.word	0x200001fc

08010f90 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b084      	sub	sp, #16
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	6078      	str	r0, [r7, #4]
 8010f98:	460b      	mov	r3, r1
 8010f9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8010f9c:	f44f 701d 	mov.w	r0, #628	; 0x274
 8010fa0:	f006 fb9a 	bl	80176d8 <USBD_static_malloc>
 8010fa4:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d105      	bne.n	8010fb8 <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	2200      	movs	r2, #0
 8010fb0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8010fb4:	2302      	movs	r3, #2
 8010fb6:	e034      	b.n	8011022 <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	68fa      	ldr	r2, [r7, #12]
 8010fbc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	7c1b      	ldrb	r3, [r3, #16]
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d115      	bne.n	8010ff4 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8010fc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010fcc:	2202      	movs	r2, #2
 8010fce:	2101      	movs	r1, #1
 8010fd0:	6878      	ldr	r0, [r7, #4]
 8010fd2:	f006 f9f0 	bl	80173b6 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	2201      	movs	r2, #1
 8010fda:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8010fde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010fe2:	2202      	movs	r2, #2
 8010fe4:	2181      	movs	r1, #129	; 0x81
 8010fe6:	6878      	ldr	r0, [r7, #4]
 8010fe8:	f006 f9e5 	bl	80173b6 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	2201      	movs	r2, #1
 8010ff0:	871a      	strh	r2, [r3, #56]	; 0x38
 8010ff2:	e012      	b.n	801101a <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8010ff4:	2340      	movs	r3, #64	; 0x40
 8010ff6:	2202      	movs	r2, #2
 8010ff8:	2101      	movs	r1, #1
 8010ffa:	6878      	ldr	r0, [r7, #4]
 8010ffc:	f006 f9db 	bl	80173b6 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	2201      	movs	r2, #1
 8011004:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8011008:	2340      	movs	r3, #64	; 0x40
 801100a:	2202      	movs	r2, #2
 801100c:	2181      	movs	r1, #129	; 0x81
 801100e:	6878      	ldr	r0, [r7, #4]
 8011010:	f006 f9d1 	bl	80173b6 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2201      	movs	r2, #1
 8011018:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 801101a:	6878      	ldr	r0, [r7, #4]
 801101c:	f000 f999 	bl	8011352 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8011020:	2300      	movs	r3, #0
}
 8011022:	4618      	mov	r0, r3
 8011024:	3710      	adds	r7, #16
 8011026:	46bd      	mov	sp, r7
 8011028:	bd80      	pop	{r7, pc}

0801102a <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801102a:	b580      	push	{r7, lr}
 801102c:	b082      	sub	sp, #8
 801102e:	af00      	add	r7, sp, #0
 8011030:	6078      	str	r0, [r7, #4]
 8011032:	460b      	mov	r3, r1
 8011034:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8011036:	2101      	movs	r1, #1
 8011038:	6878      	ldr	r0, [r7, #4]
 801103a:	f006 f9e2 	bl	8017402 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	2200      	movs	r2, #0
 8011042:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8011046:	2181      	movs	r1, #129	; 0x81
 8011048:	6878      	ldr	r0, [r7, #4]
 801104a:	f006 f9da 	bl	8017402 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	2200      	movs	r2, #0
 8011052:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801105a:	2b00      	cmp	r3, #0
 801105c:	d00c      	beq.n	8011078 <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 801105e:	6878      	ldr	r0, [r7, #4]
 8011060:	f000 f9d5 	bl	801140e <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801106a:	4618      	mov	r0, r3
 801106c:	f006 fb42 	bl	80176f4 <USBD_static_free>
    pdev->pClassData = NULL;
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	2200      	movs	r2, #0
 8011074:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8011078:	2300      	movs	r3, #0
}
 801107a:	4618      	mov	r0, r3
 801107c:	3708      	adds	r7, #8
 801107e:	46bd      	mov	sp, r7
 8011080:	bd80      	pop	{r7, pc}
	...

08011084 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b086      	sub	sp, #24
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
 801108c:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011094:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8011096:	2300      	movs	r3, #0
 8011098:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 801109a:	2300      	movs	r3, #0
 801109c:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 801109e:	693b      	ldr	r3, [r7, #16]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d101      	bne.n	80110a8 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80110a4:	2303      	movs	r3, #3
 80110a6:	e0db      	b.n	8011260 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80110a8:	683b      	ldr	r3, [r7, #0]
 80110aa:	781b      	ldrb	r3, [r3, #0]
 80110ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d04e      	beq.n	8011152 <USBD_MSC_Setup+0xce>
 80110b4:	2b20      	cmp	r3, #32
 80110b6:	f040 80cb 	bne.w	8011250 <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80110ba:	683b      	ldr	r3, [r7, #0]
 80110bc:	785b      	ldrb	r3, [r3, #1]
 80110be:	2bfe      	cmp	r3, #254	; 0xfe
 80110c0:	d002      	beq.n	80110c8 <USBD_MSC_Setup+0x44>
 80110c2:	2bff      	cmp	r3, #255	; 0xff
 80110c4:	d025      	beq.n	8011112 <USBD_MSC_Setup+0x8e>
 80110c6:	e03c      	b.n	8011142 <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80110c8:	683b      	ldr	r3, [r7, #0]
 80110ca:	885b      	ldrh	r3, [r3, #2]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d119      	bne.n	8011104 <USBD_MSC_Setup+0x80>
 80110d0:	683b      	ldr	r3, [r7, #0]
 80110d2:	88db      	ldrh	r3, [r3, #6]
 80110d4:	2b01      	cmp	r3, #1
 80110d6:	d115      	bne.n	8011104 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 80110d8:	683b      	ldr	r3, [r7, #0]
 80110da:	781b      	ldrb	r3, [r3, #0]
 80110dc:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80110de:	2b00      	cmp	r3, #0
 80110e0:	da10      	bge.n	8011104 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80110e8:	699b      	ldr	r3, [r3, #24]
 80110ea:	4798      	blx	r3
 80110ec:	4603      	mov	r3, r0
 80110ee:	461a      	mov	r2, r3
 80110f0:	693b      	ldr	r3, [r7, #16]
 80110f2:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 80110f4:	693b      	ldr	r3, [r7, #16]
 80110f6:	2201      	movs	r2, #1
 80110f8:	4619      	mov	r1, r3
 80110fa:	6878      	ldr	r0, [r7, #4]
 80110fc:	f002 fe3d 	bl	8013d7a <USBD_CtlSendData>
 8011100:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011102:	e025      	b.n	8011150 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8011104:	6839      	ldr	r1, [r7, #0]
 8011106:	6878      	ldr	r0, [r7, #4]
 8011108:	f002 fdc6 	bl	8013c98 <USBD_CtlError>
            ret = USBD_FAIL;
 801110c:	2303      	movs	r3, #3
 801110e:	75fb      	strb	r3, [r7, #23]
          break;
 8011110:	e01e      	b.n	8011150 <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8011112:	683b      	ldr	r3, [r7, #0]
 8011114:	885b      	ldrh	r3, [r3, #2]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d10c      	bne.n	8011134 <USBD_MSC_Setup+0xb0>
 801111a:	683b      	ldr	r3, [r7, #0]
 801111c:	88db      	ldrh	r3, [r3, #6]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d108      	bne.n	8011134 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 8011122:	683b      	ldr	r3, [r7, #0]
 8011124:	781b      	ldrb	r3, [r3, #0]
 8011126:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8011128:	2b00      	cmp	r3, #0
 801112a:	db03      	blt.n	8011134 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 801112c:	6878      	ldr	r0, [r7, #4]
 801112e:	f000 f948 	bl	80113c2 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011132:	e00d      	b.n	8011150 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8011134:	6839      	ldr	r1, [r7, #0]
 8011136:	6878      	ldr	r0, [r7, #4]
 8011138:	f002 fdae 	bl	8013c98 <USBD_CtlError>
            ret = USBD_FAIL;
 801113c:	2303      	movs	r3, #3
 801113e:	75fb      	strb	r3, [r7, #23]
          break;
 8011140:	e006      	b.n	8011150 <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8011142:	6839      	ldr	r1, [r7, #0]
 8011144:	6878      	ldr	r0, [r7, #4]
 8011146:	f002 fda7 	bl	8013c98 <USBD_CtlError>
          ret = USBD_FAIL;
 801114a:	2303      	movs	r3, #3
 801114c:	75fb      	strb	r3, [r7, #23]
          break;
 801114e:	bf00      	nop
      }
      break;
 8011150:	e085      	b.n	801125e <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011152:	683b      	ldr	r3, [r7, #0]
 8011154:	785b      	ldrb	r3, [r3, #1]
 8011156:	2b0b      	cmp	r3, #11
 8011158:	d871      	bhi.n	801123e <USBD_MSC_Setup+0x1ba>
 801115a:	a201      	add	r2, pc, #4	; (adr r2, 8011160 <USBD_MSC_Setup+0xdc>)
 801115c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011160:	08011191 	.word	0x08011191
 8011164:	0801120d 	.word	0x0801120d
 8011168:	0801123f 	.word	0x0801123f
 801116c:	0801123f 	.word	0x0801123f
 8011170:	0801123f 	.word	0x0801123f
 8011174:	0801123f 	.word	0x0801123f
 8011178:	0801123f 	.word	0x0801123f
 801117c:	0801123f 	.word	0x0801123f
 8011180:	0801123f 	.word	0x0801123f
 8011184:	0801123f 	.word	0x0801123f
 8011188:	080111bb 	.word	0x080111bb
 801118c:	080111e5 	.word	0x080111e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011196:	b2db      	uxtb	r3, r3
 8011198:	2b03      	cmp	r3, #3
 801119a:	d107      	bne.n	80111ac <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801119c:	f107 030e 	add.w	r3, r7, #14
 80111a0:	2202      	movs	r2, #2
 80111a2:	4619      	mov	r1, r3
 80111a4:	6878      	ldr	r0, [r7, #4]
 80111a6:	f002 fde8 	bl	8013d7a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80111aa:	e050      	b.n	801124e <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 80111ac:	6839      	ldr	r1, [r7, #0]
 80111ae:	6878      	ldr	r0, [r7, #4]
 80111b0:	f002 fd72 	bl	8013c98 <USBD_CtlError>
            ret = USBD_FAIL;
 80111b4:	2303      	movs	r3, #3
 80111b6:	75fb      	strb	r3, [r7, #23]
          break;
 80111b8:	e049      	b.n	801124e <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80111c0:	b2db      	uxtb	r3, r3
 80111c2:	2b03      	cmp	r3, #3
 80111c4:	d107      	bne.n	80111d6 <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80111c6:	693b      	ldr	r3, [r7, #16]
 80111c8:	3304      	adds	r3, #4
 80111ca:	2201      	movs	r2, #1
 80111cc:	4619      	mov	r1, r3
 80111ce:	6878      	ldr	r0, [r7, #4]
 80111d0:	f002 fdd3 	bl	8013d7a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80111d4:	e03b      	b.n	801124e <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 80111d6:	6839      	ldr	r1, [r7, #0]
 80111d8:	6878      	ldr	r0, [r7, #4]
 80111da:	f002 fd5d 	bl	8013c98 <USBD_CtlError>
            ret = USBD_FAIL;
 80111de:	2303      	movs	r3, #3
 80111e0:	75fb      	strb	r3, [r7, #23]
          break;
 80111e2:	e034      	b.n	801124e <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80111ea:	b2db      	uxtb	r3, r3
 80111ec:	2b03      	cmp	r3, #3
 80111ee:	d106      	bne.n	80111fe <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 80111f0:	683b      	ldr	r3, [r7, #0]
 80111f2:	885b      	ldrh	r3, [r3, #2]
 80111f4:	b2db      	uxtb	r3, r3
 80111f6:	461a      	mov	r2, r3
 80111f8:	693b      	ldr	r3, [r7, #16]
 80111fa:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80111fc:	e027      	b.n	801124e <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 80111fe:	6839      	ldr	r1, [r7, #0]
 8011200:	6878      	ldr	r0, [r7, #4]
 8011202:	f002 fd49 	bl	8013c98 <USBD_CtlError>
            ret = USBD_FAIL;
 8011206:	2303      	movs	r3, #3
 8011208:	75fb      	strb	r3, [r7, #23]
          break;
 801120a:	e020      	b.n	801124e <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011212:	b2db      	uxtb	r3, r3
 8011214:	2b03      	cmp	r3, #3
 8011216:	d119      	bne.n	801124c <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8011218:	683b      	ldr	r3, [r7, #0]
 801121a:	885b      	ldrh	r3, [r3, #2]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d115      	bne.n	801124c <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	889b      	ldrh	r3, [r3, #4]
 8011224:	b2db      	uxtb	r3, r3
 8011226:	4619      	mov	r1, r3
 8011228:	6878      	ldr	r0, [r7, #4]
 801122a:	f006 f909 	bl	8017440 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801122e:	683b      	ldr	r3, [r7, #0]
 8011230:	889b      	ldrh	r3, [r3, #4]
 8011232:	b2db      	uxtb	r3, r3
 8011234:	4619      	mov	r1, r3
 8011236:	6878      	ldr	r0, [r7, #4]
 8011238:	f000 fa82 	bl	8011740 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 801123c:	e006      	b.n	801124c <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 801123e:	6839      	ldr	r1, [r7, #0]
 8011240:	6878      	ldr	r0, [r7, #4]
 8011242:	f002 fd29 	bl	8013c98 <USBD_CtlError>
          ret = USBD_FAIL;
 8011246:	2303      	movs	r3, #3
 8011248:	75fb      	strb	r3, [r7, #23]
          break;
 801124a:	e000      	b.n	801124e <USBD_MSC_Setup+0x1ca>
          break;
 801124c:	bf00      	nop
      }
      break;
 801124e:	e006      	b.n	801125e <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 8011250:	6839      	ldr	r1, [r7, #0]
 8011252:	6878      	ldr	r0, [r7, #4]
 8011254:	f002 fd20 	bl	8013c98 <USBD_CtlError>
      ret = USBD_FAIL;
 8011258:	2303      	movs	r3, #3
 801125a:	75fb      	strb	r3, [r7, #23]
      break;
 801125c:	bf00      	nop
  }

  return (uint8_t)ret;
 801125e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011260:	4618      	mov	r0, r3
 8011262:	3718      	adds	r7, #24
 8011264:	46bd      	mov	sp, r7
 8011266:	bd80      	pop	{r7, pc}

08011268 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b082      	sub	sp, #8
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
 8011270:	460b      	mov	r3, r1
 8011272:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8011274:	78fb      	ldrb	r3, [r7, #3]
 8011276:	4619      	mov	r1, r3
 8011278:	6878      	ldr	r0, [r7, #4]
 801127a:	f000 f8dc 	bl	8011436 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 801127e:	2300      	movs	r3, #0
}
 8011280:	4618      	mov	r0, r3
 8011282:	3708      	adds	r7, #8
 8011284:	46bd      	mov	sp, r7
 8011286:	bd80      	pop	{r7, pc}

08011288 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011288:	b580      	push	{r7, lr}
 801128a:	b082      	sub	sp, #8
 801128c:	af00      	add	r7, sp, #0
 801128e:	6078      	str	r0, [r7, #4]
 8011290:	460b      	mov	r3, r1
 8011292:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8011294:	78fb      	ldrb	r3, [r7, #3]
 8011296:	4619      	mov	r1, r3
 8011298:	6878      	ldr	r0, [r7, #4]
 801129a:	f000 f902 	bl	80114a2 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 801129e:	2300      	movs	r3, #0
}
 80112a0:	4618      	mov	r0, r3
 80112a2:	3708      	adds	r7, #8
 80112a4:	46bd      	mov	sp, r7
 80112a6:	bd80      	pop	{r7, pc}

080112a8 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80112a8:	b480      	push	{r7}
 80112aa:	b083      	sub	sp, #12
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	2220      	movs	r2, #32
 80112b4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 80112b6:	4b03      	ldr	r3, [pc, #12]	; (80112c4 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 80112b8:	4618      	mov	r0, r3
 80112ba:	370c      	adds	r7, #12
 80112bc:	46bd      	mov	sp, r7
 80112be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c2:	4770      	bx	lr
 80112c4:	20000044 	.word	0x20000044

080112c8 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80112c8:	b480      	push	{r7}
 80112ca:	b083      	sub	sp, #12
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	2220      	movs	r2, #32
 80112d4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 80112d6:	4b03      	ldr	r3, [pc, #12]	; (80112e4 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 80112d8:	4618      	mov	r0, r3
 80112da:	370c      	adds	r7, #12
 80112dc:	46bd      	mov	sp, r7
 80112de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e2:	4770      	bx	lr
 80112e4:	20000064 	.word	0x20000064

080112e8 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80112e8:	b480      	push	{r7}
 80112ea:	b083      	sub	sp, #12
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	2220      	movs	r2, #32
 80112f4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 80112f6:	4b03      	ldr	r3, [pc, #12]	; (8011304 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 80112f8:	4618      	mov	r0, r3
 80112fa:	370c      	adds	r7, #12
 80112fc:	46bd      	mov	sp, r7
 80112fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011302:	4770      	bx	lr
 8011304:	20000084 	.word	0x20000084

08011308 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011308:	b480      	push	{r7}
 801130a:	b083      	sub	sp, #12
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	220a      	movs	r2, #10
 8011314:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8011316:	4b03      	ldr	r3, [pc, #12]	; (8011324 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011318:	4618      	mov	r0, r3
 801131a:	370c      	adds	r7, #12
 801131c:	46bd      	mov	sp, r7
 801131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011322:	4770      	bx	lr
 8011324:	200000a4 	.word	0x200000a4

08011328 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8011328:	b480      	push	{r7}
 801132a:	b083      	sub	sp, #12
 801132c:	af00      	add	r7, sp, #0
 801132e:	6078      	str	r0, [r7, #4]
 8011330:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011332:	683b      	ldr	r3, [r7, #0]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d101      	bne.n	801133c <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011338:	2303      	movs	r3, #3
 801133a:	e004      	b.n	8011346 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	683a      	ldr	r2, [r7, #0]
 8011340:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8011344:	2300      	movs	r3, #0
}
 8011346:	4618      	mov	r0, r3
 8011348:	370c      	adds	r7, #12
 801134a:	46bd      	mov	sp, r7
 801134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011350:	4770      	bx	lr

08011352 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8011352:	b580      	push	{r7, lr}
 8011354:	b084      	sub	sp, #16
 8011356:	af00      	add	r7, sp, #0
 8011358:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011360:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d028      	beq.n	80113ba <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	2200      	movs	r2, #0
 801136c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	2200      	movs	r2, #0
 8011372:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	2200      	movs	r2, #0
 8011378:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	2200      	movs	r2, #0
 8011380:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	2200      	movs	r2, #0
 8011388:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	2000      	movs	r0, #0
 8011396:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8011398:	2101      	movs	r1, #1
 801139a:	6878      	ldr	r0, [r7, #4]
 801139c:	f006 f850 	bl	8017440 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 80113a0:	2181      	movs	r1, #129	; 0x81
 80113a2:	6878      	ldr	r0, [r7, #4]
 80113a4:	f006 f84c 	bl	8017440 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80113ae:	231f      	movs	r3, #31
 80113b0:	2101      	movs	r1, #1
 80113b2:	6878      	ldr	r0, [r7, #4]
 80113b4:	f006 f90d 	bl	80175d2 <USBD_LL_PrepareReceive>
 80113b8:	e000      	b.n	80113bc <MSC_BOT_Init+0x6a>
    return;
 80113ba:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80113bc:	3710      	adds	r7, #16
 80113be:	46bd      	mov	sp, r7
 80113c0:	bd80      	pop	{r7, pc}

080113c2 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 80113c2:	b580      	push	{r7, lr}
 80113c4:	b084      	sub	sp, #16
 80113c6:	af00      	add	r7, sp, #0
 80113c8:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80113d0:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d016      	beq.n	8011406 <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	2200      	movs	r2, #0
 80113dc:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	2201      	movs	r2, #1
 80113e2:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 80113e4:	2181      	movs	r1, #129	; 0x81
 80113e6:	6878      	ldr	r0, [r7, #4]
 80113e8:	f006 f868 	bl	80174bc <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 80113ec:	2101      	movs	r1, #1
 80113ee:	6878      	ldr	r0, [r7, #4]
 80113f0:	f006 f864 	bl	80174bc <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80113fa:	231f      	movs	r3, #31
 80113fc:	2101      	movs	r1, #1
 80113fe:	6878      	ldr	r0, [r7, #4]
 8011400:	f006 f8e7 	bl	80175d2 <USBD_LL_PrepareReceive>
 8011404:	e000      	b.n	8011408 <MSC_BOT_Reset+0x46>
    return;
 8011406:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8011408:	3710      	adds	r7, #16
 801140a:	46bd      	mov	sp, r7
 801140c:	bd80      	pop	{r7, pc}

0801140e <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 801140e:	b480      	push	{r7}
 8011410:	b085      	sub	sp, #20
 8011412:	af00      	add	r7, sp, #0
 8011414:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801141c:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d002      	beq.n	801142a <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	2200      	movs	r2, #0
 8011428:	721a      	strb	r2, [r3, #8]
  }
}
 801142a:	bf00      	nop
 801142c:	3714      	adds	r7, #20
 801142e:	46bd      	mov	sp, r7
 8011430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011434:	4770      	bx	lr

08011436 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011436:	b580      	push	{r7, lr}
 8011438:	b084      	sub	sp, #16
 801143a:	af00      	add	r7, sp, #0
 801143c:	6078      	str	r0, [r7, #4]
 801143e:	460b      	mov	r3, r1
 8011440:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011448:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	2b00      	cmp	r3, #0
 801144e:	d020      	beq.n	8011492 <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	7a1b      	ldrb	r3, [r3, #8]
 8011454:	2b02      	cmp	r3, #2
 8011456:	d005      	beq.n	8011464 <MSC_BOT_DataIn+0x2e>
 8011458:	2b02      	cmp	r3, #2
 801145a:	db1c      	blt.n	8011496 <MSC_BOT_DataIn+0x60>
 801145c:	3b03      	subs	r3, #3
 801145e:	2b01      	cmp	r3, #1
 8011460:	d819      	bhi.n	8011496 <MSC_BOT_DataIn+0x60>
 8011462:	e011      	b.n	8011488 <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8011470:	461a      	mov	r2, r3
 8011472:	6878      	ldr	r0, [r7, #4]
 8011474:	f000 f992 	bl	801179c <SCSI_ProcessCmd>
 8011478:	4603      	mov	r3, r0
 801147a:	2b00      	cmp	r3, #0
 801147c:	da0d      	bge.n	801149a <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801147e:	2101      	movs	r1, #1
 8011480:	6878      	ldr	r0, [r7, #4]
 8011482:	f000 f8fb 	bl	801167c <MSC_BOT_SendCSW>
      }
      break;
 8011486:	e008      	b.n	801149a <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8011488:	2100      	movs	r1, #0
 801148a:	6878      	ldr	r0, [r7, #4]
 801148c:	f000 f8f6 	bl	801167c <MSC_BOT_SendCSW>
      break;
 8011490:	e004      	b.n	801149c <MSC_BOT_DataIn+0x66>
    return;
 8011492:	bf00      	nop
 8011494:	e002      	b.n	801149c <MSC_BOT_DataIn+0x66>

    default:
      break;
 8011496:	bf00      	nop
 8011498:	e000      	b.n	801149c <MSC_BOT_DataIn+0x66>
      break;
 801149a:	bf00      	nop
  }
}
 801149c:	3710      	adds	r7, #16
 801149e:	46bd      	mov	sp, r7
 80114a0:	bd80      	pop	{r7, pc}

080114a2 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80114a2:	b580      	push	{r7, lr}
 80114a4:	b084      	sub	sp, #16
 80114a6:	af00      	add	r7, sp, #0
 80114a8:	6078      	str	r0, [r7, #4]
 80114aa:	460b      	mov	r3, r1
 80114ac:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80114b4:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d01c      	beq.n	80114f6 <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	7a1b      	ldrb	r3, [r3, #8]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d002      	beq.n	80114ca <MSC_BOT_DataOut+0x28>
 80114c4:	2b01      	cmp	r3, #1
 80114c6:	d004      	beq.n	80114d2 <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80114c8:	e018      	b.n	80114fc <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 80114ca:	6878      	ldr	r0, [r7, #4]
 80114cc:	f000 f81a 	bl	8011504 <MSC_BOT_CBW_Decode>
      break;
 80114d0:	e014      	b.n	80114fc <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80114de:	461a      	mov	r2, r3
 80114e0:	6878      	ldr	r0, [r7, #4]
 80114e2:	f000 f95b 	bl	801179c <SCSI_ProcessCmd>
 80114e6:	4603      	mov	r3, r0
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	da06      	bge.n	80114fa <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80114ec:	2101      	movs	r1, #1
 80114ee:	6878      	ldr	r0, [r7, #4]
 80114f0:	f000 f8c4 	bl	801167c <MSC_BOT_SendCSW>
      break;
 80114f4:	e001      	b.n	80114fa <MSC_BOT_DataOut+0x58>
    return;
 80114f6:	bf00      	nop
 80114f8:	e000      	b.n	80114fc <MSC_BOT_DataOut+0x5a>
      break;
 80114fa:	bf00      	nop
  }
}
 80114fc:	3710      	adds	r7, #16
 80114fe:	46bd      	mov	sp, r7
 8011500:	bd80      	pop	{r7, pc}
	...

08011504 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8011504:	b580      	push	{r7, lr}
 8011506:	b084      	sub	sp, #16
 8011508:	af00      	add	r7, sp, #0
 801150a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011512:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d077      	beq.n	801160a <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8011532:	2101      	movs	r1, #1
 8011534:	6878      	ldr	r0, [r7, #4]
 8011536:	f006 f86d 	bl	8017614 <USBD_LL_GetRxDataSize>
 801153a:	4603      	mov	r3, r0
 801153c:	2b1f      	cmp	r3, #31
 801153e:	d114      	bne.n	801156a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8011546:	4a34      	ldr	r2, [pc, #208]	; (8011618 <MSC_BOT_CBW_Decode+0x114>)
 8011548:	4293      	cmp	r3, r2
 801154a:	d10e      	bne.n	801156a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8011552:	2b01      	cmp	r3, #1
 8011554:	d809      	bhi.n	801156a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 801155c:	2b00      	cmp	r3, #0
 801155e:	d004      	beq.n	801156a <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8011566:	2b10      	cmp	r3, #16
 8011568:	d90e      	bls.n	8011588 <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011570:	2320      	movs	r3, #32
 8011572:	2205      	movs	r2, #5
 8011574:	6878      	ldr	r0, [r7, #4]
 8011576:	f000 fdbc 	bl	80120f2 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	2202      	movs	r2, #2
 801157e:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8011580:	6878      	ldr	r0, [r7, #4]
 8011582:	f000 f8ab 	bl	80116dc <MSC_BOT_Abort>
 8011586:	e043      	b.n	8011610 <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8011594:	461a      	mov	r2, r3
 8011596:	6878      	ldr	r0, [r7, #4]
 8011598:	f000 f900 	bl	801179c <SCSI_ProcessCmd>
 801159c:	4603      	mov	r3, r0
 801159e:	2b00      	cmp	r3, #0
 80115a0:	da0c      	bge.n	80115bc <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	7a1b      	ldrb	r3, [r3, #8]
 80115a6:	2b05      	cmp	r3, #5
 80115a8:	d104      	bne.n	80115b4 <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80115aa:	2101      	movs	r1, #1
 80115ac:	6878      	ldr	r0, [r7, #4]
 80115ae:	f000 f865 	bl	801167c <MSC_BOT_SendCSW>
 80115b2:	e02d      	b.n	8011610 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80115b4:	6878      	ldr	r0, [r7, #4]
 80115b6:	f000 f891 	bl	80116dc <MSC_BOT_Abort>
 80115ba:	e029      	b.n	8011610 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	7a1b      	ldrb	r3, [r3, #8]
 80115c0:	2b02      	cmp	r3, #2
 80115c2:	d024      	beq.n	801160e <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80115c8:	2b01      	cmp	r3, #1
 80115ca:	d020      	beq.n	801160e <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80115d0:	2b03      	cmp	r3, #3
 80115d2:	d01c      	beq.n	801160e <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	68db      	ldr	r3, [r3, #12]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d009      	beq.n	80115f0 <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	f103 0110 	add.w	r1, r3, #16
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	68db      	ldr	r3, [r3, #12]
 80115e6:	461a      	mov	r2, r3
 80115e8:	6878      	ldr	r0, [r7, #4]
 80115ea:	f000 f817 	bl	801161c <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80115ee:	e00f      	b.n	8011610 <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	68db      	ldr	r3, [r3, #12]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d104      	bne.n	8011602 <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80115f8:	2100      	movs	r1, #0
 80115fa:	6878      	ldr	r0, [r7, #4]
 80115fc:	f000 f83e 	bl	801167c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8011600:	e006      	b.n	8011610 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8011602:	6878      	ldr	r0, [r7, #4]
 8011604:	f000 f86a 	bl	80116dc <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8011608:	e002      	b.n	8011610 <MSC_BOT_CBW_Decode+0x10c>
    return;
 801160a:	bf00      	nop
 801160c:	e000      	b.n	8011610 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 801160e:	bf00      	nop
    }
  }
}
 8011610:	3710      	adds	r7, #16
 8011612:	46bd      	mov	sp, r7
 8011614:	bd80      	pop	{r7, pc}
 8011616:	bf00      	nop
 8011618:	43425355 	.word	0x43425355

0801161c <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 801161c:	b580      	push	{r7, lr}
 801161e:	b086      	sub	sp, #24
 8011620:	af00      	add	r7, sp, #0
 8011622:	60f8      	str	r0, [r7, #12]
 8011624:	60b9      	str	r1, [r7, #8]
 8011626:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801162e:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8011630:	697b      	ldr	r3, [r7, #20]
 8011632:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011636:	687a      	ldr	r2, [r7, #4]
 8011638:	4293      	cmp	r3, r2
 801163a:	bf28      	it	cs
 801163c:	4613      	movcs	r3, r2
 801163e:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8011640:	697b      	ldr	r3, [r7, #20]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d015      	beq.n	8011672 <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 8011646:	697b      	ldr	r3, [r7, #20]
 8011648:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	1ad2      	subs	r2, r2, r3
 8011650:	697b      	ldr	r3, [r7, #20]
 8011652:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8011656:	697b      	ldr	r3, [r7, #20]
 8011658:	2200      	movs	r2, #0
 801165a:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 801165e:	697b      	ldr	r3, [r7, #20]
 8011660:	2204      	movs	r2, #4
 8011662:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8011664:	693b      	ldr	r3, [r7, #16]
 8011666:	68ba      	ldr	r2, [r7, #8]
 8011668:	2181      	movs	r1, #129	; 0x81
 801166a:	68f8      	ldr	r0, [r7, #12]
 801166c:	f005 ff90 	bl	8017590 <USBD_LL_Transmit>
 8011670:	e000      	b.n	8011674 <MSC_BOT_SendData+0x58>
    return;
 8011672:	bf00      	nop
}
 8011674:	3718      	adds	r7, #24
 8011676:	46bd      	mov	sp, r7
 8011678:	bd80      	pop	{r7, pc}
	...

0801167c <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b084      	sub	sp, #16
 8011680:	af00      	add	r7, sp, #0
 8011682:	6078      	str	r0, [r7, #4]
 8011684:	460b      	mov	r3, r1
 8011686:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801168e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d01b      	beq.n	80116ce <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	4a0f      	ldr	r2, [pc, #60]	; (80116d8 <MSC_BOT_SendCSW+0x5c>)
 801169a:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	78fa      	ldrb	r2, [r7, #3]
 80116a2:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	2200      	movs	r2, #0
 80116aa:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	f503 720c 	add.w	r2, r3, #560	; 0x230
 80116b2:	230d      	movs	r3, #13
 80116b4:	2181      	movs	r1, #129	; 0x81
 80116b6:	6878      	ldr	r0, [r7, #4]
 80116b8:	f005 ff6a 	bl	8017590 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80116c2:	231f      	movs	r3, #31
 80116c4:	2101      	movs	r1, #1
 80116c6:	6878      	ldr	r0, [r7, #4]
 80116c8:	f005 ff83 	bl	80175d2 <USBD_LL_PrepareReceive>
 80116cc:	e000      	b.n	80116d0 <MSC_BOT_SendCSW+0x54>
    return;
 80116ce:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80116d0:	3710      	adds	r7, #16
 80116d2:	46bd      	mov	sp, r7
 80116d4:	bd80      	pop	{r7, pc}
 80116d6:	bf00      	nop
 80116d8:	53425355 	.word	0x53425355

080116dc <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80116dc:	b580      	push	{r7, lr}
 80116de:	b084      	sub	sp, #16
 80116e0:	af00      	add	r7, sp, #0
 80116e2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80116ea:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d022      	beq.n	8011738 <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d10c      	bne.n	8011716 <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8011702:	2b00      	cmp	r3, #0
 8011704:	d007      	beq.n	8011716 <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 801170a:	2b00      	cmp	r3, #0
 801170c:	d103      	bne.n	8011716 <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 801170e:	2101      	movs	r1, #1
 8011710:	6878      	ldr	r0, [r7, #4]
 8011712:	f005 feb4 	bl	801747e <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8011716:	2181      	movs	r1, #129	; 0x81
 8011718:	6878      	ldr	r0, [r7, #4]
 801171a:	f005 feb0 	bl	801747e <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	7a5b      	ldrb	r3, [r3, #9]
 8011722:	2b02      	cmp	r3, #2
 8011724:	d109      	bne.n	801173a <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8011726:	2181      	movs	r1, #129	; 0x81
 8011728:	6878      	ldr	r0, [r7, #4]
 801172a:	f005 fea8 	bl	801747e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 801172e:	2101      	movs	r1, #1
 8011730:	6878      	ldr	r0, [r7, #4]
 8011732:	f005 fea4 	bl	801747e <USBD_LL_StallEP>
 8011736:	e000      	b.n	801173a <MSC_BOT_Abort+0x5e>
    return;
 8011738:	bf00      	nop
  }
}
 801173a:	3710      	adds	r7, #16
 801173c:	46bd      	mov	sp, r7
 801173e:	bd80      	pop	{r7, pc}

08011740 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b084      	sub	sp, #16
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
 8011748:	460b      	mov	r3, r1
 801174a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011752:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d019      	beq.n	801178e <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	7a5b      	ldrb	r3, [r3, #9]
 801175e:	2b02      	cmp	r3, #2
 8011760:	d108      	bne.n	8011774 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8011762:	2181      	movs	r1, #129	; 0x81
 8011764:	6878      	ldr	r0, [r7, #4]
 8011766:	f005 fe8a 	bl	801747e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 801176a:	2101      	movs	r1, #1
 801176c:	6878      	ldr	r0, [r7, #4]
 801176e:	f005 fe86 	bl	801747e <USBD_LL_StallEP>
 8011772:	e00f      	b.n	8011794 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8011774:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011778:	2b00      	cmp	r3, #0
 801177a:	da0a      	bge.n	8011792 <MSC_BOT_CplClrFeature+0x52>
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	7a5b      	ldrb	r3, [r3, #9]
 8011780:	2b01      	cmp	r3, #1
 8011782:	d006      	beq.n	8011792 <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8011784:	2101      	movs	r1, #1
 8011786:	6878      	ldr	r0, [r7, #4]
 8011788:	f7ff ff78 	bl	801167c <MSC_BOT_SendCSW>
 801178c:	e002      	b.n	8011794 <MSC_BOT_CplClrFeature+0x54>
    return;
 801178e:	bf00      	nop
 8011790:	e000      	b.n	8011794 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 8011792:	bf00      	nop
  }
}
 8011794:	3710      	adds	r7, #16
 8011796:	46bd      	mov	sp, r7
 8011798:	bd80      	pop	{r7, pc}
	...

0801179c <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 801179c:	b580      	push	{r7, lr}
 801179e:	b086      	sub	sp, #24
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	60f8      	str	r0, [r7, #12]
 80117a4:	460b      	mov	r3, r1
 80117a6:	607a      	str	r2, [r7, #4]
 80117a8:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80117b0:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 80117b2:	693b      	ldr	r3, [r7, #16]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d102      	bne.n	80117be <SCSI_ProcessCmd+0x22>
  {
    return -1;
 80117b8:	f04f 33ff 	mov.w	r3, #4294967295
 80117bc:	e168      	b.n	8011a90 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	781b      	ldrb	r3, [r3, #0]
 80117c2:	2baa      	cmp	r3, #170	; 0xaa
 80117c4:	f000 8144 	beq.w	8011a50 <SCSI_ProcessCmd+0x2b4>
 80117c8:	2baa      	cmp	r3, #170	; 0xaa
 80117ca:	f300 8153 	bgt.w	8011a74 <SCSI_ProcessCmd+0x2d8>
 80117ce:	2ba8      	cmp	r3, #168	; 0xa8
 80117d0:	f000 812c 	beq.w	8011a2c <SCSI_ProcessCmd+0x290>
 80117d4:	2ba8      	cmp	r3, #168	; 0xa8
 80117d6:	f300 814d 	bgt.w	8011a74 <SCSI_ProcessCmd+0x2d8>
 80117da:	2b5a      	cmp	r3, #90	; 0x5a
 80117dc:	f300 80c0 	bgt.w	8011960 <SCSI_ProcessCmd+0x1c4>
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	f2c0 8147 	blt.w	8011a74 <SCSI_ProcessCmd+0x2d8>
 80117e6:	2b5a      	cmp	r3, #90	; 0x5a
 80117e8:	f200 8144 	bhi.w	8011a74 <SCSI_ProcessCmd+0x2d8>
 80117ec:	a201      	add	r2, pc, #4	; (adr r2, 80117f4 <SCSI_ProcessCmd+0x58>)
 80117ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117f2:	bf00      	nop
 80117f4:	08011967 	.word	0x08011967
 80117f8:	08011a75 	.word	0x08011a75
 80117fc:	08011a75 	.word	0x08011a75
 8011800:	08011979 	.word	0x08011979
 8011804:	08011a75 	.word	0x08011a75
 8011808:	08011a75 	.word	0x08011a75
 801180c:	08011a75 	.word	0x08011a75
 8011810:	08011a75 	.word	0x08011a75
 8011814:	08011a75 	.word	0x08011a75
 8011818:	08011a75 	.word	0x08011a75
 801181c:	08011a75 	.word	0x08011a75
 8011820:	08011a75 	.word	0x08011a75
 8011824:	08011a75 	.word	0x08011a75
 8011828:	08011a75 	.word	0x08011a75
 801182c:	08011a75 	.word	0x08011a75
 8011830:	08011a75 	.word	0x08011a75
 8011834:	08011a75 	.word	0x08011a75
 8011838:	08011a75 	.word	0x08011a75
 801183c:	0801198b 	.word	0x0801198b
 8011840:	08011a75 	.word	0x08011a75
 8011844:	08011a75 	.word	0x08011a75
 8011848:	08011a75 	.word	0x08011a75
 801184c:	08011a75 	.word	0x08011a75
 8011850:	08011a75 	.word	0x08011a75
 8011854:	08011a75 	.word	0x08011a75
 8011858:	08011a75 	.word	0x08011a75
 801185c:	080119c1 	.word	0x080119c1
 8011860:	0801199d 	.word	0x0801199d
 8011864:	08011a75 	.word	0x08011a75
 8011868:	08011a75 	.word	0x08011a75
 801186c:	080119af 	.word	0x080119af
 8011870:	08011a75 	.word	0x08011a75
 8011874:	08011a75 	.word	0x08011a75
 8011878:	08011a75 	.word	0x08011a75
 801187c:	08011a75 	.word	0x08011a75
 8011880:	080119e5 	.word	0x080119e5
 8011884:	08011a75 	.word	0x08011a75
 8011888:	080119f7 	.word	0x080119f7
 801188c:	08011a75 	.word	0x08011a75
 8011890:	08011a75 	.word	0x08011a75
 8011894:	08011a1b 	.word	0x08011a1b
 8011898:	08011a75 	.word	0x08011a75
 801189c:	08011a3f 	.word	0x08011a3f
 80118a0:	08011a75 	.word	0x08011a75
 80118a4:	08011a75 	.word	0x08011a75
 80118a8:	08011a75 	.word	0x08011a75
 80118ac:	08011a75 	.word	0x08011a75
 80118b0:	08011a63 	.word	0x08011a63
 80118b4:	08011a75 	.word	0x08011a75
 80118b8:	08011a75 	.word	0x08011a75
 80118bc:	08011a75 	.word	0x08011a75
 80118c0:	08011a75 	.word	0x08011a75
 80118c4:	08011a75 	.word	0x08011a75
 80118c8:	08011a75 	.word	0x08011a75
 80118cc:	08011a75 	.word	0x08011a75
 80118d0:	08011a75 	.word	0x08011a75
 80118d4:	08011a75 	.word	0x08011a75
 80118d8:	08011a75 	.word	0x08011a75
 80118dc:	08011a75 	.word	0x08011a75
 80118e0:	08011a75 	.word	0x08011a75
 80118e4:	08011a75 	.word	0x08011a75
 80118e8:	08011a75 	.word	0x08011a75
 80118ec:	08011a75 	.word	0x08011a75
 80118f0:	08011a75 	.word	0x08011a75
 80118f4:	08011a75 	.word	0x08011a75
 80118f8:	08011a75 	.word	0x08011a75
 80118fc:	08011a75 	.word	0x08011a75
 8011900:	08011a75 	.word	0x08011a75
 8011904:	08011a75 	.word	0x08011a75
 8011908:	08011a75 	.word	0x08011a75
 801190c:	08011a75 	.word	0x08011a75
 8011910:	08011a75 	.word	0x08011a75
 8011914:	08011a75 	.word	0x08011a75
 8011918:	08011a75 	.word	0x08011a75
 801191c:	08011a75 	.word	0x08011a75
 8011920:	08011a75 	.word	0x08011a75
 8011924:	08011a75 	.word	0x08011a75
 8011928:	08011a75 	.word	0x08011a75
 801192c:	08011a75 	.word	0x08011a75
 8011930:	08011a75 	.word	0x08011a75
 8011934:	08011a75 	.word	0x08011a75
 8011938:	08011a75 	.word	0x08011a75
 801193c:	08011a75 	.word	0x08011a75
 8011940:	08011a75 	.word	0x08011a75
 8011944:	08011a75 	.word	0x08011a75
 8011948:	08011a75 	.word	0x08011a75
 801194c:	08011a75 	.word	0x08011a75
 8011950:	08011a75 	.word	0x08011a75
 8011954:	08011a75 	.word	0x08011a75
 8011958:	08011a75 	.word	0x08011a75
 801195c:	080119d3 	.word	0x080119d3
 8011960:	2b9e      	cmp	r3, #158	; 0x9e
 8011962:	d051      	beq.n	8011a08 <SCSI_ProcessCmd+0x26c>
 8011964:	e086      	b.n	8011a74 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8011966:	7afb      	ldrb	r3, [r7, #11]
 8011968:	687a      	ldr	r2, [r7, #4]
 801196a:	4619      	mov	r1, r3
 801196c:	68f8      	ldr	r0, [r7, #12]
 801196e:	f000 f893 	bl	8011a98 <SCSI_TestUnitReady>
 8011972:	4603      	mov	r3, r0
 8011974:	75fb      	strb	r3, [r7, #23]
      break;
 8011976:	e089      	b.n	8011a8c <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8011978:	7afb      	ldrb	r3, [r7, #11]
 801197a:	687a      	ldr	r2, [r7, #4]
 801197c:	4619      	mov	r1, r3
 801197e:	68f8      	ldr	r0, [r7, #12]
 8011980:	f000 fb38 	bl	8011ff4 <SCSI_RequestSense>
 8011984:	4603      	mov	r3, r0
 8011986:	75fb      	strb	r3, [r7, #23]
      break;
 8011988:	e080      	b.n	8011a8c <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 801198a:	7afb      	ldrb	r3, [r7, #11]
 801198c:	687a      	ldr	r2, [r7, #4]
 801198e:	4619      	mov	r1, r3
 8011990:	68f8      	ldr	r0, [r7, #12]
 8011992:	f000 f8d1 	bl	8011b38 <SCSI_Inquiry>
 8011996:	4603      	mov	r3, r0
 8011998:	75fb      	strb	r3, [r7, #23]
      break;
 801199a:	e077      	b.n	8011a8c <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 801199c:	7afb      	ldrb	r3, [r7, #11]
 801199e:	687a      	ldr	r2, [r7, #4]
 80119a0:	4619      	mov	r1, r3
 80119a2:	68f8      	ldr	r0, [r7, #12]
 80119a4:	f000 fbec 	bl	8012180 <SCSI_StartStopUnit>
 80119a8:	4603      	mov	r3, r0
 80119aa:	75fb      	strb	r3, [r7, #23]
      break;
 80119ac:	e06e      	b.n	8011a8c <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 80119ae:	7afb      	ldrb	r3, [r7, #11]
 80119b0:	687a      	ldr	r2, [r7, #4]
 80119b2:	4619      	mov	r1, r3
 80119b4:	68f8      	ldr	r0, [r7, #12]
 80119b6:	f000 fc34 	bl	8012222 <SCSI_AllowPreventRemovable>
 80119ba:	4603      	mov	r3, r0
 80119bc:	75fb      	strb	r3, [r7, #23]
      break;
 80119be:	e065      	b.n	8011a8c <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 80119c0:	7afb      	ldrb	r3, [r7, #11]
 80119c2:	687a      	ldr	r2, [r7, #4]
 80119c4:	4619      	mov	r1, r3
 80119c6:	68f8      	ldr	r0, [r7, #12]
 80119c8:	f000 fabc 	bl	8011f44 <SCSI_ModeSense6>
 80119cc:	4603      	mov	r3, r0
 80119ce:	75fb      	strb	r3, [r7, #23]
      break;
 80119d0:	e05c      	b.n	8011a8c <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 80119d2:	7afb      	ldrb	r3, [r7, #11]
 80119d4:	687a      	ldr	r2, [r7, #4]
 80119d6:	4619      	mov	r1, r3
 80119d8:	68f8      	ldr	r0, [r7, #12]
 80119da:	f000 fadf 	bl	8011f9c <SCSI_ModeSense10>
 80119de:	4603      	mov	r3, r0
 80119e0:	75fb      	strb	r3, [r7, #23]
      break;
 80119e2:	e053      	b.n	8011a8c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 80119e4:	7afb      	ldrb	r3, [r7, #11]
 80119e6:	687a      	ldr	r2, [r7, #4]
 80119e8:	4619      	mov	r1, r3
 80119ea:	68f8      	ldr	r0, [r7, #12]
 80119ec:	f000 fa37 	bl	8011e5e <SCSI_ReadFormatCapacity>
 80119f0:	4603      	mov	r3, r0
 80119f2:	75fb      	strb	r3, [r7, #23]
      break;
 80119f4:	e04a      	b.n	8011a8c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 80119f6:	7afb      	ldrb	r3, [r7, #11]
 80119f8:	687a      	ldr	r2, [r7, #4]
 80119fa:	4619      	mov	r1, r3
 80119fc:	68f8      	ldr	r0, [r7, #12]
 80119fe:	f000 f90f 	bl	8011c20 <SCSI_ReadCapacity10>
 8011a02:	4603      	mov	r3, r0
 8011a04:	75fb      	strb	r3, [r7, #23]
      break;
 8011a06:	e041      	b.n	8011a8c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8011a08:	7afb      	ldrb	r3, [r7, #11]
 8011a0a:	687a      	ldr	r2, [r7, #4]
 8011a0c:	4619      	mov	r1, r3
 8011a0e:	68f8      	ldr	r0, [r7, #12]
 8011a10:	f000 f97b 	bl	8011d0a <SCSI_ReadCapacity16>
 8011a14:	4603      	mov	r3, r0
 8011a16:	75fb      	strb	r3, [r7, #23]
      break;
 8011a18:	e038      	b.n	8011a8c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8011a1a:	7afb      	ldrb	r3, [r7, #11]
 8011a1c:	687a      	ldr	r2, [r7, #4]
 8011a1e:	4619      	mov	r1, r3
 8011a20:	68f8      	ldr	r0, [r7, #12]
 8011a22:	f000 fc27 	bl	8012274 <SCSI_Read10>
 8011a26:	4603      	mov	r3, r0
 8011a28:	75fb      	strb	r3, [r7, #23]
      break;
 8011a2a:	e02f      	b.n	8011a8c <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8011a2c:	7afb      	ldrb	r3, [r7, #11]
 8011a2e:	687a      	ldr	r2, [r7, #4]
 8011a30:	4619      	mov	r1, r3
 8011a32:	68f8      	ldr	r0, [r7, #12]
 8011a34:	f000 fcbe 	bl	80123b4 <SCSI_Read12>
 8011a38:	4603      	mov	r3, r0
 8011a3a:	75fb      	strb	r3, [r7, #23]
      break;
 8011a3c:	e026      	b.n	8011a8c <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8011a3e:	7afb      	ldrb	r3, [r7, #11]
 8011a40:	687a      	ldr	r2, [r7, #4]
 8011a42:	4619      	mov	r1, r3
 8011a44:	68f8      	ldr	r0, [r7, #12]
 8011a46:	f000 fd60 	bl	801250a <SCSI_Write10>
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	75fb      	strb	r3, [r7, #23]
      break;
 8011a4e:	e01d      	b.n	8011a8c <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8011a50:	7afb      	ldrb	r3, [r7, #11]
 8011a52:	687a      	ldr	r2, [r7, #4]
 8011a54:	4619      	mov	r1, r3
 8011a56:	68f8      	ldr	r0, [r7, #12]
 8011a58:	f000 fe1c 	bl	8012694 <SCSI_Write12>
 8011a5c:	4603      	mov	r3, r0
 8011a5e:	75fb      	strb	r3, [r7, #23]
      break;
 8011a60:	e014      	b.n	8011a8c <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8011a62:	7afb      	ldrb	r3, [r7, #11]
 8011a64:	687a      	ldr	r2, [r7, #4]
 8011a66:	4619      	mov	r1, r3
 8011a68:	68f8      	ldr	r0, [r7, #12]
 8011a6a:	f000 fee8 	bl	801283e <SCSI_Verify10>
 8011a6e:	4603      	mov	r3, r0
 8011a70:	75fb      	strb	r3, [r7, #23]
      break;
 8011a72:	e00b      	b.n	8011a8c <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8011a74:	7af9      	ldrb	r1, [r7, #11]
 8011a76:	2320      	movs	r3, #32
 8011a78:	2205      	movs	r2, #5
 8011a7a:	68f8      	ldr	r0, [r7, #12]
 8011a7c:	f000 fb39 	bl	80120f2 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8011a80:	693b      	ldr	r3, [r7, #16]
 8011a82:	2202      	movs	r2, #2
 8011a84:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8011a86:	23ff      	movs	r3, #255	; 0xff
 8011a88:	75fb      	strb	r3, [r7, #23]
      break;
 8011a8a:	bf00      	nop
  }

  return ret;
 8011a8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011a90:	4618      	mov	r0, r3
 8011a92:	3718      	adds	r7, #24
 8011a94:	46bd      	mov	sp, r7
 8011a96:	bd80      	pop	{r7, pc}

08011a98 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b086      	sub	sp, #24
 8011a9c:	af00      	add	r7, sp, #0
 8011a9e:	60f8      	str	r0, [r7, #12]
 8011aa0:	460b      	mov	r3, r1
 8011aa2:	607a      	str	r2, [r7, #4]
 8011aa4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011aac:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011aae:	697b      	ldr	r3, [r7, #20]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d102      	bne.n	8011aba <SCSI_TestUnitReady+0x22>
  {
    return -1;
 8011ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8011ab8:	e03a      	b.n	8011b30 <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8011aba:	697b      	ldr	r3, [r7, #20]
 8011abc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d00a      	beq.n	8011ada <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011ac4:	697b      	ldr	r3, [r7, #20]
 8011ac6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011aca:	2320      	movs	r3, #32
 8011acc:	2205      	movs	r2, #5
 8011ace:	68f8      	ldr	r0, [r7, #12]
 8011ad0:	f000 fb0f 	bl	80120f2 <SCSI_SenseCode>

    return -1;
 8011ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8011ad8:	e02a      	b.n	8011b30 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8011ada:	697b      	ldr	r3, [r7, #20]
 8011adc:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8011ae0:	2b02      	cmp	r3, #2
 8011ae2:	d10b      	bne.n	8011afc <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011ae4:	7af9      	ldrb	r1, [r7, #11]
 8011ae6:	233a      	movs	r3, #58	; 0x3a
 8011ae8:	2202      	movs	r2, #2
 8011aea:	68f8      	ldr	r0, [r7, #12]
 8011aec:	f000 fb01 	bl	80120f2 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8011af0:	697b      	ldr	r3, [r7, #20]
 8011af2:	2205      	movs	r2, #5
 8011af4:	721a      	strb	r2, [r3, #8]
    return -1;
 8011af6:	f04f 33ff 	mov.w	r3, #4294967295
 8011afa:	e019      	b.n	8011b30 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011b02:	689b      	ldr	r3, [r3, #8]
 8011b04:	7afa      	ldrb	r2, [r7, #11]
 8011b06:	4610      	mov	r0, r2
 8011b08:	4798      	blx	r3
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d00b      	beq.n	8011b28 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011b10:	7af9      	ldrb	r1, [r7, #11]
 8011b12:	233a      	movs	r3, #58	; 0x3a
 8011b14:	2202      	movs	r2, #2
 8011b16:	68f8      	ldr	r0, [r7, #12]
 8011b18:	f000 faeb 	bl	80120f2 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8011b1c:	697b      	ldr	r3, [r7, #20]
 8011b1e:	2205      	movs	r2, #5
 8011b20:	721a      	strb	r2, [r3, #8]

    return -1;
 8011b22:	f04f 33ff 	mov.w	r3, #4294967295
 8011b26:	e003      	b.n	8011b30 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 8011b28:	697b      	ldr	r3, [r7, #20]
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	60da      	str	r2, [r3, #12]

  return 0;
 8011b2e:	2300      	movs	r3, #0
}
 8011b30:	4618      	mov	r0, r3
 8011b32:	3718      	adds	r7, #24
 8011b34:	46bd      	mov	sp, r7
 8011b36:	bd80      	pop	{r7, pc}

08011b38 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b088      	sub	sp, #32
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	60f8      	str	r0, [r7, #12]
 8011b40:	460b      	mov	r3, r1
 8011b42:	607a      	str	r2, [r7, #4]
 8011b44:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011b4c:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8011b4e:	69bb      	ldr	r3, [r7, #24]
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d102      	bne.n	8011b5a <SCSI_Inquiry+0x22>
  {
    return -1;
 8011b54:	f04f 33ff 	mov.w	r3, #4294967295
 8011b58:	e05a      	b.n	8011c10 <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8011b5a:	69bb      	ldr	r3, [r7, #24]
 8011b5c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d10a      	bne.n	8011b7a <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011b64:	69bb      	ldr	r3, [r7, #24]
 8011b66:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011b6a:	2320      	movs	r3, #32
 8011b6c:	2205      	movs	r2, #5
 8011b6e:	68f8      	ldr	r0, [r7, #12]
 8011b70:	f000 fabf 	bl	80120f2 <SCSI_SenseCode>
    return -1;
 8011b74:	f04f 33ff 	mov.w	r3, #4294967295
 8011b78:	e04a      	b.n	8011c10 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	3301      	adds	r3, #1
 8011b7e:	781b      	ldrb	r3, [r3, #0]
 8011b80:	f003 0301 	and.w	r3, r3, #1
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d020      	beq.n	8011bca <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	3302      	adds	r3, #2
 8011b8c:	781b      	ldrb	r3, [r3, #0]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d105      	bne.n	8011b9e <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8011b92:	2206      	movs	r2, #6
 8011b94:	4920      	ldr	r1, [pc, #128]	; (8011c18 <SCSI_Inquiry+0xe0>)
 8011b96:	69b8      	ldr	r0, [r7, #24]
 8011b98:	f000 ffb4 	bl	8012b04 <SCSI_UpdateBotData>
 8011b9c:	e037      	b.n	8011c0e <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	3302      	adds	r3, #2
 8011ba2:	781b      	ldrb	r3, [r3, #0]
 8011ba4:	2b80      	cmp	r3, #128	; 0x80
 8011ba6:	d105      	bne.n	8011bb4 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8011ba8:	2208      	movs	r2, #8
 8011baa:	491c      	ldr	r1, [pc, #112]	; (8011c1c <SCSI_Inquiry+0xe4>)
 8011bac:	69b8      	ldr	r0, [r7, #24]
 8011bae:	f000 ffa9 	bl	8012b04 <SCSI_UpdateBotData>
 8011bb2:	e02c      	b.n	8011c0e <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8011bb4:	69bb      	ldr	r3, [r7, #24]
 8011bb6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011bba:	2324      	movs	r3, #36	; 0x24
 8011bbc:	2205      	movs	r2, #5
 8011bbe:	68f8      	ldr	r0, [r7, #12]
 8011bc0:	f000 fa97 	bl	80120f2 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8011bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8011bc8:	e022      	b.n	8011c10 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011bd0:	69d9      	ldr	r1, [r3, #28]
 8011bd2:	7afa      	ldrb	r2, [r7, #11]
 8011bd4:	4613      	mov	r3, r2
 8011bd6:	00db      	lsls	r3, r3, #3
 8011bd8:	4413      	add	r3, r2
 8011bda:	009b      	lsls	r3, r3, #2
 8011bdc:	440b      	add	r3, r1
 8011bde:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8011be0:	697b      	ldr	r3, [r7, #20]
 8011be2:	3304      	adds	r3, #4
 8011be4:	781b      	ldrb	r3, [r3, #0]
 8011be6:	b29b      	uxth	r3, r3
 8011be8:	3305      	adds	r3, #5
 8011bea:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	3304      	adds	r3, #4
 8011bf0:	781b      	ldrb	r3, [r3, #0]
 8011bf2:	b29b      	uxth	r3, r3
 8011bf4:	8bfa      	ldrh	r2, [r7, #30]
 8011bf6:	429a      	cmp	r2, r3
 8011bf8:	d303      	bcc.n	8011c02 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	3304      	adds	r3, #4
 8011bfe:	781b      	ldrb	r3, [r3, #0]
 8011c00:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8011c02:	8bfb      	ldrh	r3, [r7, #30]
 8011c04:	461a      	mov	r2, r3
 8011c06:	6979      	ldr	r1, [r7, #20]
 8011c08:	69b8      	ldr	r0, [r7, #24]
 8011c0a:	f000 ff7b 	bl	8012b04 <SCSI_UpdateBotData>
  }

  return 0;
 8011c0e:	2300      	movs	r3, #0
}
 8011c10:	4618      	mov	r0, r3
 8011c12:	3720      	adds	r7, #32
 8011c14:	46bd      	mov	sp, r7
 8011c16:	bd80      	pop	{r7, pc}
 8011c18:	200000b0 	.word	0x200000b0
 8011c1c:	200000b8 	.word	0x200000b8

08011c20 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b086      	sub	sp, #24
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	60f8      	str	r0, [r7, #12]
 8011c28:	460b      	mov	r3, r1
 8011c2a:	607a      	str	r2, [r7, #4]
 8011c2c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011c34:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011c36:	697b      	ldr	r3, [r7, #20]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d102      	bne.n	8011c42 <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 8011c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8011c40:	e05f      	b.n	8011d02 <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011c48:	685b      	ldr	r3, [r3, #4]
 8011c4a:	697a      	ldr	r2, [r7, #20]
 8011c4c:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8011c50:	697a      	ldr	r2, [r7, #20]
 8011c52:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8011c56:	7af8      	ldrb	r0, [r7, #11]
 8011c58:	4798      	blx	r3
 8011c5a:	4603      	mov	r3, r0
 8011c5c:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8011c5e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d104      	bne.n	8011c70 <SCSI_ReadCapacity10+0x50>
 8011c66:	697b      	ldr	r3, [r7, #20]
 8011c68:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8011c6c:	2b02      	cmp	r3, #2
 8011c6e:	d108      	bne.n	8011c82 <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011c70:	7af9      	ldrb	r1, [r7, #11]
 8011c72:	233a      	movs	r3, #58	; 0x3a
 8011c74:	2202      	movs	r2, #2
 8011c76:	68f8      	ldr	r0, [r7, #12]
 8011c78:	f000 fa3b 	bl	80120f2 <SCSI_SenseCode>
    return -1;
 8011c7c:	f04f 33ff 	mov.w	r3, #4294967295
 8011c80:	e03f      	b.n	8011d02 <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8011c82:	697b      	ldr	r3, [r7, #20]
 8011c84:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8011c88:	3b01      	subs	r3, #1
 8011c8a:	0e1b      	lsrs	r3, r3, #24
 8011c8c:	b2da      	uxtb	r2, r3
 8011c8e:	697b      	ldr	r3, [r7, #20]
 8011c90:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8011c92:	697b      	ldr	r3, [r7, #20]
 8011c94:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8011c98:	3b01      	subs	r3, #1
 8011c9a:	0c1b      	lsrs	r3, r3, #16
 8011c9c:	b2da      	uxtb	r2, r3
 8011c9e:	697b      	ldr	r3, [r7, #20]
 8011ca0:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8011ca2:	697b      	ldr	r3, [r7, #20]
 8011ca4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8011ca8:	3b01      	subs	r3, #1
 8011caa:	0a1b      	lsrs	r3, r3, #8
 8011cac:	b2da      	uxtb	r2, r3
 8011cae:	697b      	ldr	r3, [r7, #20]
 8011cb0:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8011cb2:	697b      	ldr	r3, [r7, #20]
 8011cb4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8011cb8:	b2db      	uxtb	r3, r3
 8011cba:	3b01      	subs	r3, #1
 8011cbc:	b2da      	uxtb	r2, r3
 8011cbe:	697b      	ldr	r3, [r7, #20]
 8011cc0:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8011cc2:	697b      	ldr	r3, [r7, #20]
 8011cc4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011cc8:	161b      	asrs	r3, r3, #24
 8011cca:	b2da      	uxtb	r2, r3
 8011ccc:	697b      	ldr	r3, [r7, #20]
 8011cce:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8011cd0:	697b      	ldr	r3, [r7, #20]
 8011cd2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011cd6:	141b      	asrs	r3, r3, #16
 8011cd8:	b2da      	uxtb	r2, r3
 8011cda:	697b      	ldr	r3, [r7, #20]
 8011cdc:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8011cde:	697b      	ldr	r3, [r7, #20]
 8011ce0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011ce4:	0a1b      	lsrs	r3, r3, #8
 8011ce6:	b29b      	uxth	r3, r3
 8011ce8:	b2da      	uxtb	r2, r3
 8011cea:	697b      	ldr	r3, [r7, #20]
 8011cec:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8011cee:	697b      	ldr	r3, [r7, #20]
 8011cf0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011cf4:	b2da      	uxtb	r2, r3
 8011cf6:	697b      	ldr	r3, [r7, #20]
 8011cf8:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8011cfa:	697b      	ldr	r3, [r7, #20]
 8011cfc:	2208      	movs	r2, #8
 8011cfe:	60da      	str	r2, [r3, #12]

  return 0;
 8011d00:	2300      	movs	r3, #0

}
 8011d02:	4618      	mov	r0, r3
 8011d04:	3718      	adds	r7, #24
 8011d06:	46bd      	mov	sp, r7
 8011d08:	bd80      	pop	{r7, pc}

08011d0a <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011d0a:	b580      	push	{r7, lr}
 8011d0c:	b088      	sub	sp, #32
 8011d0e:	af00      	add	r7, sp, #0
 8011d10:	60f8      	str	r0, [r7, #12]
 8011d12:	460b      	mov	r3, r1
 8011d14:	607a      	str	r2, [r7, #4]
 8011d16:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011d1e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8011d20:	69bb      	ldr	r3, [r7, #24]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d102      	bne.n	8011d2c <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 8011d26:	f04f 33ff 	mov.w	r3, #4294967295
 8011d2a:	e094      	b.n	8011e56 <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011d32:	685b      	ldr	r3, [r3, #4]
 8011d34:	69ba      	ldr	r2, [r7, #24]
 8011d36:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8011d3a:	69ba      	ldr	r2, [r7, #24]
 8011d3c:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8011d40:	7af8      	ldrb	r0, [r7, #11]
 8011d42:	4798      	blx	r3
 8011d44:	4603      	mov	r3, r0
 8011d46:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8011d48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d104      	bne.n	8011d5a <SCSI_ReadCapacity16+0x50>
 8011d50:	69bb      	ldr	r3, [r7, #24]
 8011d52:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8011d56:	2b02      	cmp	r3, #2
 8011d58:	d108      	bne.n	8011d6c <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011d5a:	7af9      	ldrb	r1, [r7, #11]
 8011d5c:	233a      	movs	r3, #58	; 0x3a
 8011d5e:	2202      	movs	r2, #2
 8011d60:	68f8      	ldr	r0, [r7, #12]
 8011d62:	f000 f9c6 	bl	80120f2 <SCSI_SenseCode>
    return -1;
 8011d66:	f04f 33ff 	mov.w	r3, #4294967295
 8011d6a:	e074      	b.n	8011e56 <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	330a      	adds	r3, #10
 8011d70:	781b      	ldrb	r3, [r3, #0]
 8011d72:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	330b      	adds	r3, #11
 8011d78:	781b      	ldrb	r3, [r3, #0]
 8011d7a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8011d7c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	330c      	adds	r3, #12
 8011d82:	781b      	ldrb	r3, [r3, #0]
 8011d84:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8011d86:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8011d88:	687a      	ldr	r2, [r7, #4]
 8011d8a:	320d      	adds	r2, #13
 8011d8c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8011d8e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8011d90:	69bb      	ldr	r3, [r7, #24]
 8011d92:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8011d94:	2300      	movs	r3, #0
 8011d96:	77fb      	strb	r3, [r7, #31]
 8011d98:	e007      	b.n	8011daa <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 8011d9a:	7ffb      	ldrb	r3, [r7, #31]
 8011d9c:	69ba      	ldr	r2, [r7, #24]
 8011d9e:	4413      	add	r3, r2
 8011da0:	2200      	movs	r2, #0
 8011da2:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8011da4:	7ffb      	ldrb	r3, [r7, #31]
 8011da6:	3301      	adds	r3, #1
 8011da8:	77fb      	strb	r3, [r7, #31]
 8011daa:	7ffa      	ldrb	r2, [r7, #31]
 8011dac:	69bb      	ldr	r3, [r7, #24]
 8011dae:	68db      	ldr	r3, [r3, #12]
 8011db0:	429a      	cmp	r2, r3
 8011db2:	d3f2      	bcc.n	8011d9a <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8011db4:	69bb      	ldr	r3, [r7, #24]
 8011db6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8011dba:	3b01      	subs	r3, #1
 8011dbc:	0e1b      	lsrs	r3, r3, #24
 8011dbe:	b2da      	uxtb	r2, r3
 8011dc0:	69bb      	ldr	r3, [r7, #24]
 8011dc2:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8011dc4:	69bb      	ldr	r3, [r7, #24]
 8011dc6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8011dca:	3b01      	subs	r3, #1
 8011dcc:	0c1b      	lsrs	r3, r3, #16
 8011dce:	b2da      	uxtb	r2, r3
 8011dd0:	69bb      	ldr	r3, [r7, #24]
 8011dd2:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8011dd4:	69bb      	ldr	r3, [r7, #24]
 8011dd6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8011dda:	3b01      	subs	r3, #1
 8011ddc:	0a1b      	lsrs	r3, r3, #8
 8011dde:	b2da      	uxtb	r2, r3
 8011de0:	69bb      	ldr	r3, [r7, #24]
 8011de2:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8011de4:	69bb      	ldr	r3, [r7, #24]
 8011de6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8011dea:	b2db      	uxtb	r3, r3
 8011dec:	3b01      	subs	r3, #1
 8011dee:	b2da      	uxtb	r2, r3
 8011df0:	69bb      	ldr	r3, [r7, #24]
 8011df2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8011df4:	69bb      	ldr	r3, [r7, #24]
 8011df6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011dfa:	161b      	asrs	r3, r3, #24
 8011dfc:	b2da      	uxtb	r2, r3
 8011dfe:	69bb      	ldr	r3, [r7, #24]
 8011e00:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8011e02:	69bb      	ldr	r3, [r7, #24]
 8011e04:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011e08:	141b      	asrs	r3, r3, #16
 8011e0a:	b2da      	uxtb	r2, r3
 8011e0c:	69bb      	ldr	r3, [r7, #24]
 8011e0e:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8011e10:	69bb      	ldr	r3, [r7, #24]
 8011e12:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011e16:	0a1b      	lsrs	r3, r3, #8
 8011e18:	b29b      	uxth	r3, r3
 8011e1a:	b2da      	uxtb	r2, r3
 8011e1c:	69bb      	ldr	r3, [r7, #24]
 8011e1e:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8011e20:	69bb      	ldr	r3, [r7, #24]
 8011e22:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011e26:	b2da      	uxtb	r2, r3
 8011e28:	69bb      	ldr	r3, [r7, #24]
 8011e2a:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	330a      	adds	r3, #10
 8011e30:	781b      	ldrb	r3, [r3, #0]
 8011e32:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	330b      	adds	r3, #11
 8011e38:	781b      	ldrb	r3, [r3, #0]
 8011e3a:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8011e3c:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	330c      	adds	r3, #12
 8011e42:	781b      	ldrb	r3, [r3, #0]
 8011e44:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8011e46:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8011e48:	687a      	ldr	r2, [r7, #4]
 8011e4a:	320d      	adds	r2, #13
 8011e4c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8011e4e:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8011e50:	69bb      	ldr	r3, [r7, #24]
 8011e52:	60da      	str	r2, [r3, #12]

  return 0;
 8011e54:	2300      	movs	r3, #0
}
 8011e56:	4618      	mov	r0, r3
 8011e58:	3720      	adds	r7, #32
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	bd80      	pop	{r7, pc}

08011e5e <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011e5e:	b580      	push	{r7, lr}
 8011e60:	b088      	sub	sp, #32
 8011e62:	af00      	add	r7, sp, #0
 8011e64:	60f8      	str	r0, [r7, #12]
 8011e66:	460b      	mov	r3, r1
 8011e68:	607a      	str	r2, [r7, #4]
 8011e6a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011e72:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8011e74:	69bb      	ldr	r3, [r7, #24]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d102      	bne.n	8011e80 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 8011e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8011e7e:	e05c      	b.n	8011f3a <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011e86:	685b      	ldr	r3, [r3, #4]
 8011e88:	f107 0214 	add.w	r2, r7, #20
 8011e8c:	f107 0110 	add.w	r1, r7, #16
 8011e90:	7af8      	ldrb	r0, [r7, #11]
 8011e92:	4798      	blx	r3
 8011e94:	4603      	mov	r3, r0
 8011e96:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8011e98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d104      	bne.n	8011eaa <SCSI_ReadFormatCapacity+0x4c>
 8011ea0:	69bb      	ldr	r3, [r7, #24]
 8011ea2:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8011ea6:	2b02      	cmp	r3, #2
 8011ea8:	d108      	bne.n	8011ebc <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011eaa:	7af9      	ldrb	r1, [r7, #11]
 8011eac:	233a      	movs	r3, #58	; 0x3a
 8011eae:	2202      	movs	r2, #2
 8011eb0:	68f8      	ldr	r0, [r7, #12]
 8011eb2:	f000 f91e 	bl	80120f2 <SCSI_SenseCode>
    return -1;
 8011eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8011eba:	e03e      	b.n	8011f3a <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	83fb      	strh	r3, [r7, #30]
 8011ec0:	e007      	b.n	8011ed2 <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 8011ec2:	8bfb      	ldrh	r3, [r7, #30]
 8011ec4:	69ba      	ldr	r2, [r7, #24]
 8011ec6:	4413      	add	r3, r2
 8011ec8:	2200      	movs	r2, #0
 8011eca:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8011ecc:	8bfb      	ldrh	r3, [r7, #30]
 8011ece:	3301      	adds	r3, #1
 8011ed0:	83fb      	strh	r3, [r7, #30]
 8011ed2:	8bfb      	ldrh	r3, [r7, #30]
 8011ed4:	2b0b      	cmp	r3, #11
 8011ed6:	d9f4      	bls.n	8011ec2 <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 8011ed8:	69bb      	ldr	r3, [r7, #24]
 8011eda:	2208      	movs	r2, #8
 8011edc:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8011ede:	693b      	ldr	r3, [r7, #16]
 8011ee0:	3b01      	subs	r3, #1
 8011ee2:	0e1b      	lsrs	r3, r3, #24
 8011ee4:	b2da      	uxtb	r2, r3
 8011ee6:	69bb      	ldr	r3, [r7, #24]
 8011ee8:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8011eea:	693b      	ldr	r3, [r7, #16]
 8011eec:	3b01      	subs	r3, #1
 8011eee:	0c1b      	lsrs	r3, r3, #16
 8011ef0:	b2da      	uxtb	r2, r3
 8011ef2:	69bb      	ldr	r3, [r7, #24]
 8011ef4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8011ef6:	693b      	ldr	r3, [r7, #16]
 8011ef8:	3b01      	subs	r3, #1
 8011efa:	0a1b      	lsrs	r3, r3, #8
 8011efc:	b2da      	uxtb	r2, r3
 8011efe:	69bb      	ldr	r3, [r7, #24]
 8011f00:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8011f02:	693b      	ldr	r3, [r7, #16]
 8011f04:	b2db      	uxtb	r3, r3
 8011f06:	3b01      	subs	r3, #1
 8011f08:	b2da      	uxtb	r2, r3
 8011f0a:	69bb      	ldr	r3, [r7, #24]
 8011f0c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8011f0e:	69bb      	ldr	r3, [r7, #24]
 8011f10:	2202      	movs	r2, #2
 8011f12:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8011f14:	8abb      	ldrh	r3, [r7, #20]
 8011f16:	141b      	asrs	r3, r3, #16
 8011f18:	b2da      	uxtb	r2, r3
 8011f1a:	69bb      	ldr	r3, [r7, #24]
 8011f1c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8011f1e:	8abb      	ldrh	r3, [r7, #20]
 8011f20:	0a1b      	lsrs	r3, r3, #8
 8011f22:	b29b      	uxth	r3, r3
 8011f24:	b2da      	uxtb	r2, r3
 8011f26:	69bb      	ldr	r3, [r7, #24]
 8011f28:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8011f2a:	8abb      	ldrh	r3, [r7, #20]
 8011f2c:	b2da      	uxtb	r2, r3
 8011f2e:	69bb      	ldr	r3, [r7, #24]
 8011f30:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8011f32:	69bb      	ldr	r3, [r7, #24]
 8011f34:	220c      	movs	r2, #12
 8011f36:	60da      	str	r2, [r3, #12]

  return 0;
 8011f38:	2300      	movs	r3, #0
}
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	3720      	adds	r7, #32
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	bd80      	pop	{r7, pc}
	...

08011f44 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011f44:	b580      	push	{r7, lr}
 8011f46:	b086      	sub	sp, #24
 8011f48:	af00      	add	r7, sp, #0
 8011f4a:	60f8      	str	r0, [r7, #12]
 8011f4c:	460b      	mov	r3, r1
 8011f4e:	607a      	str	r2, [r7, #4]
 8011f50:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011f58:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8011f5a:	2317      	movs	r3, #23
 8011f5c:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8011f5e:	693b      	ldr	r3, [r7, #16]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d102      	bne.n	8011f6a <SCSI_ModeSense6+0x26>
  {
    return -1;
 8011f64:	f04f 33ff 	mov.w	r3, #4294967295
 8011f68:	e011      	b.n	8011f8e <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	3304      	adds	r3, #4
 8011f6e:	781b      	ldrb	r3, [r3, #0]
 8011f70:	b29b      	uxth	r3, r3
 8011f72:	8afa      	ldrh	r2, [r7, #22]
 8011f74:	429a      	cmp	r2, r3
 8011f76:	d303      	bcc.n	8011f80 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	3304      	adds	r3, #4
 8011f7c:	781b      	ldrb	r3, [r3, #0]
 8011f7e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8011f80:	8afb      	ldrh	r3, [r7, #22]
 8011f82:	461a      	mov	r2, r3
 8011f84:	4904      	ldr	r1, [pc, #16]	; (8011f98 <SCSI_ModeSense6+0x54>)
 8011f86:	6938      	ldr	r0, [r7, #16]
 8011f88:	f000 fdbc 	bl	8012b04 <SCSI_UpdateBotData>

  return 0;
 8011f8c:	2300      	movs	r3, #0
}
 8011f8e:	4618      	mov	r0, r3
 8011f90:	3718      	adds	r7, #24
 8011f92:	46bd      	mov	sp, r7
 8011f94:	bd80      	pop	{r7, pc}
 8011f96:	bf00      	nop
 8011f98:	200000c0 	.word	0x200000c0

08011f9c <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011f9c:	b580      	push	{r7, lr}
 8011f9e:	b086      	sub	sp, #24
 8011fa0:	af00      	add	r7, sp, #0
 8011fa2:	60f8      	str	r0, [r7, #12]
 8011fa4:	460b      	mov	r3, r1
 8011fa6:	607a      	str	r2, [r7, #4]
 8011fa8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011fb0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8011fb2:	231b      	movs	r3, #27
 8011fb4:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8011fb6:	693b      	ldr	r3, [r7, #16]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d102      	bne.n	8011fc2 <SCSI_ModeSense10+0x26>
  {
    return -1;
 8011fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8011fc0:	e011      	b.n	8011fe6 <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	3308      	adds	r3, #8
 8011fc6:	781b      	ldrb	r3, [r3, #0]
 8011fc8:	b29b      	uxth	r3, r3
 8011fca:	8afa      	ldrh	r2, [r7, #22]
 8011fcc:	429a      	cmp	r2, r3
 8011fce:	d303      	bcc.n	8011fd8 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	3308      	adds	r3, #8
 8011fd4:	781b      	ldrb	r3, [r3, #0]
 8011fd6:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8011fd8:	8afb      	ldrh	r3, [r7, #22]
 8011fda:	461a      	mov	r2, r3
 8011fdc:	4904      	ldr	r1, [pc, #16]	; (8011ff0 <SCSI_ModeSense10+0x54>)
 8011fde:	6938      	ldr	r0, [r7, #16]
 8011fe0:	f000 fd90 	bl	8012b04 <SCSI_UpdateBotData>

  return 0;
 8011fe4:	2300      	movs	r3, #0
}
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	3718      	adds	r7, #24
 8011fea:	46bd      	mov	sp, r7
 8011fec:	bd80      	pop	{r7, pc}
 8011fee:	bf00      	nop
 8011ff0:	200000d8 	.word	0x200000d8

08011ff4 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011ff4:	b580      	push	{r7, lr}
 8011ff6:	b086      	sub	sp, #24
 8011ff8:	af00      	add	r7, sp, #0
 8011ffa:	60f8      	str	r0, [r7, #12]
 8011ffc:	460b      	mov	r3, r1
 8011ffe:	607a      	str	r2, [r7, #4]
 8012000:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012008:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801200a:	693b      	ldr	r3, [r7, #16]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d102      	bne.n	8012016 <SCSI_RequestSense+0x22>
  {
    return -1;
 8012010:	f04f 33ff 	mov.w	r3, #4294967295
 8012014:	e069      	b.n	80120ea <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8012016:	693b      	ldr	r3, [r7, #16]
 8012018:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801201c:	2b00      	cmp	r3, #0
 801201e:	d10a      	bne.n	8012036 <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012020:	693b      	ldr	r3, [r7, #16]
 8012022:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012026:	2320      	movs	r3, #32
 8012028:	2205      	movs	r2, #5
 801202a:	68f8      	ldr	r0, [r7, #12]
 801202c:	f000 f861 	bl	80120f2 <SCSI_SenseCode>
    return -1;
 8012030:	f04f 33ff 	mov.w	r3, #4294967295
 8012034:	e059      	b.n	80120ea <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8012036:	2300      	movs	r3, #0
 8012038:	75fb      	strb	r3, [r7, #23]
 801203a:	e007      	b.n	801204c <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 801203c:	7dfb      	ldrb	r3, [r7, #23]
 801203e:	693a      	ldr	r2, [r7, #16]
 8012040:	4413      	add	r3, r2
 8012042:	2200      	movs	r2, #0
 8012044:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8012046:	7dfb      	ldrb	r3, [r7, #23]
 8012048:	3301      	adds	r3, #1
 801204a:	75fb      	strb	r3, [r7, #23]
 801204c:	7dfb      	ldrb	r3, [r7, #23]
 801204e:	2b11      	cmp	r3, #17
 8012050:	d9f4      	bls.n	801203c <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 8012052:	693b      	ldr	r3, [r7, #16]
 8012054:	2270      	movs	r2, #112	; 0x70
 8012056:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8012058:	693b      	ldr	r3, [r7, #16]
 801205a:	220c      	movs	r2, #12
 801205c:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 801205e:	693b      	ldr	r3, [r7, #16]
 8012060:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8012064:	693b      	ldr	r3, [r7, #16]
 8012066:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801206a:	429a      	cmp	r2, r3
 801206c:	d02e      	beq.n	80120cc <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 801206e:	693b      	ldr	r3, [r7, #16]
 8012070:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8012074:	461a      	mov	r2, r3
 8012076:	693b      	ldr	r3, [r7, #16]
 8012078:	3248      	adds	r2, #72	; 0x48
 801207a:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 801207e:	693b      	ldr	r3, [r7, #16]
 8012080:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8012082:	693b      	ldr	r3, [r7, #16]
 8012084:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8012088:	693a      	ldr	r2, [r7, #16]
 801208a:	3348      	adds	r3, #72	; 0x48
 801208c:	00db      	lsls	r3, r3, #3
 801208e:	4413      	add	r3, r2
 8012090:	791a      	ldrb	r2, [r3, #4]
 8012092:	693b      	ldr	r3, [r7, #16]
 8012094:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8012096:	693b      	ldr	r3, [r7, #16]
 8012098:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801209c:	693a      	ldr	r2, [r7, #16]
 801209e:	3348      	adds	r3, #72	; 0x48
 80120a0:	00db      	lsls	r3, r3, #3
 80120a2:	4413      	add	r3, r2
 80120a4:	795a      	ldrb	r2, [r3, #5]
 80120a6:	693b      	ldr	r3, [r7, #16]
 80120a8:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80120aa:	693b      	ldr	r3, [r7, #16]
 80120ac:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80120b0:	3301      	adds	r3, #1
 80120b2:	b2da      	uxtb	r2, r3
 80120b4:	693b      	ldr	r3, [r7, #16]
 80120b6:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80120ba:	693b      	ldr	r3, [r7, #16]
 80120bc:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80120c0:	2b04      	cmp	r3, #4
 80120c2:	d103      	bne.n	80120cc <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 80120c4:	693b      	ldr	r3, [r7, #16]
 80120c6:	2200      	movs	r2, #0
 80120c8:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80120cc:	693b      	ldr	r3, [r7, #16]
 80120ce:	2212      	movs	r2, #18
 80120d0:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	3304      	adds	r3, #4
 80120d6:	781b      	ldrb	r3, [r3, #0]
 80120d8:	2b12      	cmp	r3, #18
 80120da:	d805      	bhi.n	80120e8 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	3304      	adds	r3, #4
 80120e0:	781b      	ldrb	r3, [r3, #0]
 80120e2:	461a      	mov	r2, r3
 80120e4:	693b      	ldr	r3, [r7, #16]
 80120e6:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80120e8:	2300      	movs	r3, #0
}
 80120ea:	4618      	mov	r0, r3
 80120ec:	3718      	adds	r7, #24
 80120ee:	46bd      	mov	sp, r7
 80120f0:	bd80      	pop	{r7, pc}

080120f2 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80120f2:	b480      	push	{r7}
 80120f4:	b085      	sub	sp, #20
 80120f6:	af00      	add	r7, sp, #0
 80120f8:	6078      	str	r0, [r7, #4]
 80120fa:	4608      	mov	r0, r1
 80120fc:	4611      	mov	r1, r2
 80120fe:	461a      	mov	r2, r3
 8012100:	4603      	mov	r3, r0
 8012102:	70fb      	strb	r3, [r7, #3]
 8012104:	460b      	mov	r3, r1
 8012106:	70bb      	strb	r3, [r7, #2]
 8012108:	4613      	mov	r3, r2
 801210a:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012112:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d02c      	beq.n	8012174 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8012120:	461a      	mov	r2, r3
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	3248      	adds	r2, #72	; 0x48
 8012126:	78b9      	ldrb	r1, [r7, #2]
 8012128:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 801212c:	68fb      	ldr	r3, [r7, #12]
 801212e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8012132:	68fa      	ldr	r2, [r7, #12]
 8012134:	3348      	adds	r3, #72	; 0x48
 8012136:	00db      	lsls	r3, r3, #3
 8012138:	4413      	add	r3, r2
 801213a:	787a      	ldrb	r2, [r7, #1]
 801213c:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8012144:	68fa      	ldr	r2, [r7, #12]
 8012146:	3348      	adds	r3, #72	; 0x48
 8012148:	00db      	lsls	r3, r3, #3
 801214a:	4413      	add	r3, r2
 801214c:	2200      	movs	r2, #0
 801214e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8012156:	3301      	adds	r3, #1
 8012158:	b2da      	uxtb	r2, r3
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8012166:	2b04      	cmp	r3, #4
 8012168:	d105      	bne.n	8012176 <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	2200      	movs	r2, #0
 801216e:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8012172:	e000      	b.n	8012176 <SCSI_SenseCode+0x84>
    return;
 8012174:	bf00      	nop
  }
}
 8012176:	3714      	adds	r7, #20
 8012178:	46bd      	mov	sp, r7
 801217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801217e:	4770      	bx	lr

08012180 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012180:	b580      	push	{r7, lr}
 8012182:	b086      	sub	sp, #24
 8012184:	af00      	add	r7, sp, #0
 8012186:	60f8      	str	r0, [r7, #12]
 8012188:	460b      	mov	r3, r1
 801218a:	607a      	str	r2, [r7, #4]
 801218c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012194:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8012196:	697b      	ldr	r3, [r7, #20]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d102      	bne.n	80121a2 <SCSI_StartStopUnit+0x22>
  {
    return -1;
 801219c:	f04f 33ff 	mov.w	r3, #4294967295
 80121a0:	e03b      	b.n	801221a <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80121a2:	697b      	ldr	r3, [r7, #20]
 80121a4:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80121a8:	2b01      	cmp	r3, #1
 80121aa:	d10f      	bne.n	80121cc <SCSI_StartStopUnit+0x4c>
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	3304      	adds	r3, #4
 80121b0:	781b      	ldrb	r3, [r3, #0]
 80121b2:	f003 0303 	and.w	r3, r3, #3
 80121b6:	2b02      	cmp	r3, #2
 80121b8:	d108      	bne.n	80121cc <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80121ba:	7af9      	ldrb	r1, [r7, #11]
 80121bc:	2324      	movs	r3, #36	; 0x24
 80121be:	2205      	movs	r2, #5
 80121c0:	68f8      	ldr	r0, [r7, #12]
 80121c2:	f7ff ff96 	bl	80120f2 <SCSI_SenseCode>

    return -1;
 80121c6:	f04f 33ff 	mov.w	r3, #4294967295
 80121ca:	e026      	b.n	801221a <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	3304      	adds	r3, #4
 80121d0:	781b      	ldrb	r3, [r3, #0]
 80121d2:	f003 0303 	and.w	r3, r3, #3
 80121d6:	2b01      	cmp	r3, #1
 80121d8:	d104      	bne.n	80121e4 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80121da:	697b      	ldr	r3, [r7, #20]
 80121dc:	2200      	movs	r2, #0
 80121de:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80121e2:	e016      	b.n	8012212 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	3304      	adds	r3, #4
 80121e8:	781b      	ldrb	r3, [r3, #0]
 80121ea:	f003 0303 	and.w	r3, r3, #3
 80121ee:	2b02      	cmp	r3, #2
 80121f0:	d104      	bne.n	80121fc <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80121f2:	697b      	ldr	r3, [r7, #20]
 80121f4:	2202      	movs	r2, #2
 80121f6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80121fa:	e00a      	b.n	8012212 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	3304      	adds	r3, #4
 8012200:	781b      	ldrb	r3, [r3, #0]
 8012202:	f003 0303 	and.w	r3, r3, #3
 8012206:	2b03      	cmp	r3, #3
 8012208:	d103      	bne.n	8012212 <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801220a:	697b      	ldr	r3, [r7, #20]
 801220c:	2200      	movs	r2, #0
 801220e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8012212:	697b      	ldr	r3, [r7, #20]
 8012214:	2200      	movs	r2, #0
 8012216:	60da      	str	r2, [r3, #12]

  return 0;
 8012218:	2300      	movs	r3, #0
}
 801221a:	4618      	mov	r0, r3
 801221c:	3718      	adds	r7, #24
 801221e:	46bd      	mov	sp, r7
 8012220:	bd80      	pop	{r7, pc}

08012222 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012222:	b480      	push	{r7}
 8012224:	b087      	sub	sp, #28
 8012226:	af00      	add	r7, sp, #0
 8012228:	60f8      	str	r0, [r7, #12]
 801222a:	460b      	mov	r3, r1
 801222c:	607a      	str	r2, [r7, #4]
 801222e:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012236:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8012238:	697b      	ldr	r3, [r7, #20]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d102      	bne.n	8012244 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 801223e:	f04f 33ff 	mov.w	r3, #4294967295
 8012242:	e011      	b.n	8012268 <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	3304      	adds	r3, #4
 8012248:	781b      	ldrb	r3, [r3, #0]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d104      	bne.n	8012258 <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801224e:	697b      	ldr	r3, [r7, #20]
 8012250:	2200      	movs	r2, #0
 8012252:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8012256:	e003      	b.n	8012260 <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8012258:	697b      	ldr	r3, [r7, #20]
 801225a:	2201      	movs	r2, #1
 801225c:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8012260:	697b      	ldr	r3, [r7, #20]
 8012262:	2200      	movs	r2, #0
 8012264:	60da      	str	r2, [r3, #12]

  return 0;
 8012266:	2300      	movs	r3, #0
}
 8012268:	4618      	mov	r0, r3
 801226a:	371c      	adds	r7, #28
 801226c:	46bd      	mov	sp, r7
 801226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012272:	4770      	bx	lr

08012274 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b086      	sub	sp, #24
 8012278:	af00      	add	r7, sp, #0
 801227a:	60f8      	str	r0, [r7, #12]
 801227c:	460b      	mov	r3, r1
 801227e:	607a      	str	r2, [r7, #4]
 8012280:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012288:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801228a:	697b      	ldr	r3, [r7, #20]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d102      	bne.n	8012296 <SCSI_Read10+0x22>
  {
    return -1;
 8012290:	f04f 33ff 	mov.w	r3, #4294967295
 8012294:	e08a      	b.n	80123ac <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8012296:	697b      	ldr	r3, [r7, #20]
 8012298:	7a1b      	ldrb	r3, [r3, #8]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d17c      	bne.n	8012398 <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 801229e:	697b      	ldr	r3, [r7, #20]
 80122a0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80122a4:	b25b      	sxtb	r3, r3
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	db0a      	blt.n	80122c0 <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80122aa:	697b      	ldr	r3, [r7, #20]
 80122ac:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80122b0:	2320      	movs	r3, #32
 80122b2:	2205      	movs	r2, #5
 80122b4:	68f8      	ldr	r0, [r7, #12]
 80122b6:	f7ff ff1c 	bl	80120f2 <SCSI_SenseCode>
      return -1;
 80122ba:	f04f 33ff 	mov.w	r3, #4294967295
 80122be:	e075      	b.n	80123ac <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80122c0:	697b      	ldr	r3, [r7, #20]
 80122c2:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80122c6:	2b02      	cmp	r3, #2
 80122c8:	d108      	bne.n	80122dc <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80122ca:	7af9      	ldrb	r1, [r7, #11]
 80122cc:	233a      	movs	r3, #58	; 0x3a
 80122ce:	2202      	movs	r2, #2
 80122d0:	68f8      	ldr	r0, [r7, #12]
 80122d2:	f7ff ff0e 	bl	80120f2 <SCSI_SenseCode>

      return -1;
 80122d6:	f04f 33ff 	mov.w	r3, #4294967295
 80122da:	e067      	b.n	80123ac <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80122e2:	689b      	ldr	r3, [r3, #8]
 80122e4:	7afa      	ldrb	r2, [r7, #11]
 80122e6:	4610      	mov	r0, r2
 80122e8:	4798      	blx	r3
 80122ea:	4603      	mov	r3, r0
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d008      	beq.n	8012302 <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80122f0:	7af9      	ldrb	r1, [r7, #11]
 80122f2:	233a      	movs	r3, #58	; 0x3a
 80122f4:	2202      	movs	r2, #2
 80122f6:	68f8      	ldr	r0, [r7, #12]
 80122f8:	f7ff fefb 	bl	80120f2 <SCSI_SenseCode>
      return -1;
 80122fc:	f04f 33ff 	mov.w	r3, #4294967295
 8012300:	e054      	b.n	80123ac <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	3302      	adds	r3, #2
 8012306:	781b      	ldrb	r3, [r3, #0]
 8012308:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	3303      	adds	r3, #3
 801230e:	781b      	ldrb	r3, [r3, #0]
 8012310:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012312:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	3304      	adds	r3, #4
 8012318:	781b      	ldrb	r3, [r3, #0]
 801231a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801231c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801231e:	687a      	ldr	r2, [r7, #4]
 8012320:	3205      	adds	r2, #5
 8012322:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8012324:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012326:	697b      	ldr	r3, [r7, #20]
 8012328:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	3307      	adds	r3, #7
 8012330:	781b      	ldrb	r3, [r3, #0]
 8012332:	021b      	lsls	r3, r3, #8
 8012334:	687a      	ldr	r2, [r7, #4]
 8012336:	3208      	adds	r2, #8
 8012338:	7812      	ldrb	r2, [r2, #0]
 801233a:	431a      	orrs	r2, r3
 801233c:	697b      	ldr	r3, [r7, #20]
 801233e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8012342:	697b      	ldr	r3, [r7, #20]
 8012344:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8012348:	697b      	ldr	r3, [r7, #20]
 801234a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801234e:	7af9      	ldrb	r1, [r7, #11]
 8012350:	68f8      	ldr	r0, [r7, #12]
 8012352:	f000 faad 	bl	80128b0 <SCSI_CheckAddressRange>
 8012356:	4603      	mov	r3, r0
 8012358:	2b00      	cmp	r3, #0
 801235a:	da02      	bge.n	8012362 <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801235c:	f04f 33ff 	mov.w	r3, #4294967295
 8012360:	e024      	b.n	80123ac <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8012362:	697b      	ldr	r3, [r7, #20]
 8012364:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8012368:	697b      	ldr	r3, [r7, #20]
 801236a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801236e:	6979      	ldr	r1, [r7, #20]
 8012370:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8012374:	fb01 f303 	mul.w	r3, r1, r3
 8012378:	429a      	cmp	r2, r3
 801237a:	d00a      	beq.n	8012392 <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801237c:	697b      	ldr	r3, [r7, #20]
 801237e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012382:	2320      	movs	r3, #32
 8012384:	2205      	movs	r2, #5
 8012386:	68f8      	ldr	r0, [r7, #12]
 8012388:	f7ff feb3 	bl	80120f2 <SCSI_SenseCode>
      return -1;
 801238c:	f04f 33ff 	mov.w	r3, #4294967295
 8012390:	e00c      	b.n	80123ac <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8012392:	697b      	ldr	r3, [r7, #20]
 8012394:	2202      	movs	r2, #2
 8012396:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8012398:	697b      	ldr	r3, [r7, #20]
 801239a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801239e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80123a0:	7afb      	ldrb	r3, [r7, #11]
 80123a2:	4619      	mov	r1, r3
 80123a4:	68f8      	ldr	r0, [r7, #12]
 80123a6:	f000 faab 	bl	8012900 <SCSI_ProcessRead>
 80123aa:	4603      	mov	r3, r0
}
 80123ac:	4618      	mov	r0, r3
 80123ae:	3718      	adds	r7, #24
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bd80      	pop	{r7, pc}

080123b4 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b086      	sub	sp, #24
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	60f8      	str	r0, [r7, #12]
 80123bc:	460b      	mov	r3, r1
 80123be:	607a      	str	r2, [r7, #4]
 80123c0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80123c8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80123ca:	697b      	ldr	r3, [r7, #20]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d102      	bne.n	80123d6 <SCSI_Read12+0x22>
  {
    return -1;
 80123d0:	f04f 33ff 	mov.w	r3, #4294967295
 80123d4:	e095      	b.n	8012502 <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80123d6:	697b      	ldr	r3, [r7, #20]
 80123d8:	7a1b      	ldrb	r3, [r3, #8]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	f040 8087 	bne.w	80124ee <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80123e0:	697b      	ldr	r3, [r7, #20]
 80123e2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80123e6:	b25b      	sxtb	r3, r3
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	db0a      	blt.n	8012402 <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80123ec:	697b      	ldr	r3, [r7, #20]
 80123ee:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80123f2:	2320      	movs	r3, #32
 80123f4:	2205      	movs	r2, #5
 80123f6:	68f8      	ldr	r0, [r7, #12]
 80123f8:	f7ff fe7b 	bl	80120f2 <SCSI_SenseCode>
      return -1;
 80123fc:	f04f 33ff 	mov.w	r3, #4294967295
 8012400:	e07f      	b.n	8012502 <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8012402:	697b      	ldr	r3, [r7, #20]
 8012404:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8012408:	2b02      	cmp	r3, #2
 801240a:	d108      	bne.n	801241e <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801240c:	7af9      	ldrb	r1, [r7, #11]
 801240e:	233a      	movs	r3, #58	; 0x3a
 8012410:	2202      	movs	r2, #2
 8012412:	68f8      	ldr	r0, [r7, #12]
 8012414:	f7ff fe6d 	bl	80120f2 <SCSI_SenseCode>
      return -1;
 8012418:	f04f 33ff 	mov.w	r3, #4294967295
 801241c:	e071      	b.n	8012502 <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012424:	689b      	ldr	r3, [r3, #8]
 8012426:	7afa      	ldrb	r2, [r7, #11]
 8012428:	4610      	mov	r0, r2
 801242a:	4798      	blx	r3
 801242c:	4603      	mov	r3, r0
 801242e:	2b00      	cmp	r3, #0
 8012430:	d008      	beq.n	8012444 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012432:	7af9      	ldrb	r1, [r7, #11]
 8012434:	233a      	movs	r3, #58	; 0x3a
 8012436:	2202      	movs	r2, #2
 8012438:	68f8      	ldr	r0, [r7, #12]
 801243a:	f7ff fe5a 	bl	80120f2 <SCSI_SenseCode>
      return -1;
 801243e:	f04f 33ff 	mov.w	r3, #4294967295
 8012442:	e05e      	b.n	8012502 <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	3302      	adds	r3, #2
 8012448:	781b      	ldrb	r3, [r3, #0]
 801244a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	3303      	adds	r3, #3
 8012450:	781b      	ldrb	r3, [r3, #0]
 8012452:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012454:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	3304      	adds	r3, #4
 801245a:	781b      	ldrb	r3, [r3, #0]
 801245c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801245e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8012460:	687a      	ldr	r2, [r7, #4]
 8012462:	3205      	adds	r2, #5
 8012464:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8012466:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012468:	697b      	ldr	r3, [r7, #20]
 801246a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	3306      	adds	r3, #6
 8012472:	781b      	ldrb	r3, [r3, #0]
 8012474:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	3307      	adds	r3, #7
 801247a:	781b      	ldrb	r3, [r3, #0]
 801247c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801247e:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	3308      	adds	r3, #8
 8012484:	781b      	ldrb	r3, [r3, #0]
 8012486:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8012488:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 801248a:	687a      	ldr	r2, [r7, #4]
 801248c:	3209      	adds	r2, #9
 801248e:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8012490:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012492:	697b      	ldr	r3, [r7, #20]
 8012494:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8012498:	697b      	ldr	r3, [r7, #20]
 801249a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801249e:	697b      	ldr	r3, [r7, #20]
 80124a0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80124a4:	7af9      	ldrb	r1, [r7, #11]
 80124a6:	68f8      	ldr	r0, [r7, #12]
 80124a8:	f000 fa02 	bl	80128b0 <SCSI_CheckAddressRange>
 80124ac:	4603      	mov	r3, r0
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	da02      	bge.n	80124b8 <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80124b2:	f04f 33ff 	mov.w	r3, #4294967295
 80124b6:	e024      	b.n	8012502 <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80124b8:	697b      	ldr	r3, [r7, #20]
 80124ba:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80124be:	697b      	ldr	r3, [r7, #20]
 80124c0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80124c4:	6979      	ldr	r1, [r7, #20]
 80124c6:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 80124ca:	fb01 f303 	mul.w	r3, r1, r3
 80124ce:	429a      	cmp	r2, r3
 80124d0:	d00a      	beq.n	80124e8 <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80124d2:	697b      	ldr	r3, [r7, #20]
 80124d4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80124d8:	2320      	movs	r3, #32
 80124da:	2205      	movs	r2, #5
 80124dc:	68f8      	ldr	r0, [r7, #12]
 80124de:	f7ff fe08 	bl	80120f2 <SCSI_SenseCode>
      return -1;
 80124e2:	f04f 33ff 	mov.w	r3, #4294967295
 80124e6:	e00c      	b.n	8012502 <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80124e8:	697b      	ldr	r3, [r7, #20]
 80124ea:	2202      	movs	r2, #2
 80124ec:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80124ee:	697b      	ldr	r3, [r7, #20]
 80124f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80124f4:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80124f6:	7afb      	ldrb	r3, [r7, #11]
 80124f8:	4619      	mov	r1, r3
 80124fa:	68f8      	ldr	r0, [r7, #12]
 80124fc:	f000 fa00 	bl	8012900 <SCSI_ProcessRead>
 8012500:	4603      	mov	r3, r0
}
 8012502:	4618      	mov	r0, r3
 8012504:	3718      	adds	r7, #24
 8012506:	46bd      	mov	sp, r7
 8012508:	bd80      	pop	{r7, pc}

0801250a <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801250a:	b580      	push	{r7, lr}
 801250c:	b086      	sub	sp, #24
 801250e:	af00      	add	r7, sp, #0
 8012510:	60f8      	str	r0, [r7, #12]
 8012512:	460b      	mov	r3, r1
 8012514:	607a      	str	r2, [r7, #4]
 8012516:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8012518:	68fb      	ldr	r3, [r7, #12]
 801251a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801251e:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8012520:	697b      	ldr	r3, [r7, #20]
 8012522:	2b00      	cmp	r3, #0
 8012524:	d102      	bne.n	801252c <SCSI_Write10+0x22>
  {
    return -1;
 8012526:	f04f 33ff 	mov.w	r3, #4294967295
 801252a:	e0af      	b.n	801268c <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801252c:	697b      	ldr	r3, [r7, #20]
 801252e:	7a1b      	ldrb	r3, [r3, #8]
 8012530:	2b00      	cmp	r3, #0
 8012532:	f040 80a5 	bne.w	8012680 <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8012536:	697b      	ldr	r3, [r7, #20]
 8012538:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801253c:	2b00      	cmp	r3, #0
 801253e:	d10a      	bne.n	8012556 <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012540:	697b      	ldr	r3, [r7, #20]
 8012542:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012546:	2320      	movs	r3, #32
 8012548:	2205      	movs	r2, #5
 801254a:	68f8      	ldr	r0, [r7, #12]
 801254c:	f7ff fdd1 	bl	80120f2 <SCSI_SenseCode>
      return -1;
 8012550:	f04f 33ff 	mov.w	r3, #4294967295
 8012554:	e09a      	b.n	801268c <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8012556:	697b      	ldr	r3, [r7, #20]
 8012558:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801255c:	b25b      	sxtb	r3, r3
 801255e:	2b00      	cmp	r3, #0
 8012560:	da0a      	bge.n	8012578 <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012562:	697b      	ldr	r3, [r7, #20]
 8012564:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012568:	2320      	movs	r3, #32
 801256a:	2205      	movs	r2, #5
 801256c:	68f8      	ldr	r0, [r7, #12]
 801256e:	f7ff fdc0 	bl	80120f2 <SCSI_SenseCode>
      return -1;
 8012572:	f04f 33ff 	mov.w	r3, #4294967295
 8012576:	e089      	b.n	801268c <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801257e:	689b      	ldr	r3, [r3, #8]
 8012580:	7afa      	ldrb	r2, [r7, #11]
 8012582:	4610      	mov	r0, r2
 8012584:	4798      	blx	r3
 8012586:	4603      	mov	r3, r0
 8012588:	2b00      	cmp	r3, #0
 801258a:	d008      	beq.n	801259e <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801258c:	7af9      	ldrb	r1, [r7, #11]
 801258e:	233a      	movs	r3, #58	; 0x3a
 8012590:	2202      	movs	r2, #2
 8012592:	68f8      	ldr	r0, [r7, #12]
 8012594:	f7ff fdad 	bl	80120f2 <SCSI_SenseCode>
      return -1;
 8012598:	f04f 33ff 	mov.w	r3, #4294967295
 801259c:	e076      	b.n	801268c <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80125a4:	68db      	ldr	r3, [r3, #12]
 80125a6:	7afa      	ldrb	r2, [r7, #11]
 80125a8:	4610      	mov	r0, r2
 80125aa:	4798      	blx	r3
 80125ac:	4603      	mov	r3, r0
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d008      	beq.n	80125c4 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80125b2:	7af9      	ldrb	r1, [r7, #11]
 80125b4:	2327      	movs	r3, #39	; 0x27
 80125b6:	2202      	movs	r2, #2
 80125b8:	68f8      	ldr	r0, [r7, #12]
 80125ba:	f7ff fd9a 	bl	80120f2 <SCSI_SenseCode>
      return -1;
 80125be:	f04f 33ff 	mov.w	r3, #4294967295
 80125c2:	e063      	b.n	801268c <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	3302      	adds	r3, #2
 80125c8:	781b      	ldrb	r3, [r3, #0]
 80125ca:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	3303      	adds	r3, #3
 80125d0:	781b      	ldrb	r3, [r3, #0]
 80125d2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80125d4:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	3304      	adds	r3, #4
 80125da:	781b      	ldrb	r3, [r3, #0]
 80125dc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80125de:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80125e0:	687a      	ldr	r2, [r7, #4]
 80125e2:	3205      	adds	r2, #5
 80125e4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80125e6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80125e8:	697b      	ldr	r3, [r7, #20]
 80125ea:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	3307      	adds	r3, #7
 80125f2:	781b      	ldrb	r3, [r3, #0]
 80125f4:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 80125f6:	687a      	ldr	r2, [r7, #4]
 80125f8:	3208      	adds	r2, #8
 80125fa:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80125fc:	431a      	orrs	r2, r3
 80125fe:	697b      	ldr	r3, [r7, #20]
 8012600:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8012604:	697b      	ldr	r3, [r7, #20]
 8012606:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801260a:	697b      	ldr	r3, [r7, #20]
 801260c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012610:	7af9      	ldrb	r1, [r7, #11]
 8012612:	68f8      	ldr	r0, [r7, #12]
 8012614:	f000 f94c 	bl	80128b0 <SCSI_CheckAddressRange>
 8012618:	4603      	mov	r3, r0
 801261a:	2b00      	cmp	r3, #0
 801261c:	da02      	bge.n	8012624 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801261e:	f04f 33ff 	mov.w	r3, #4294967295
 8012622:	e033      	b.n	801268c <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8012624:	697b      	ldr	r3, [r7, #20]
 8012626:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801262a:	697a      	ldr	r2, [r7, #20]
 801262c:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8012630:	fb02 f303 	mul.w	r3, r2, r3
 8012634:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8012636:	697b      	ldr	r3, [r7, #20]
 8012638:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801263c:	693a      	ldr	r2, [r7, #16]
 801263e:	429a      	cmp	r2, r3
 8012640:	d00a      	beq.n	8012658 <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012642:	697b      	ldr	r3, [r7, #20]
 8012644:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012648:	2320      	movs	r3, #32
 801264a:	2205      	movs	r2, #5
 801264c:	68f8      	ldr	r0, [r7, #12]
 801264e:	f7ff fd50 	bl	80120f2 <SCSI_SenseCode>
      return -1;
 8012652:	f04f 33ff 	mov.w	r3, #4294967295
 8012656:	e019      	b.n	801268c <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8012658:	693b      	ldr	r3, [r7, #16]
 801265a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801265e:	bf28      	it	cs
 8012660:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8012664:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8012666:	697b      	ldr	r3, [r7, #20]
 8012668:	2201      	movs	r2, #1
 801266a:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 801266c:	697b      	ldr	r3, [r7, #20]
 801266e:	f103 0210 	add.w	r2, r3, #16
 8012672:	693b      	ldr	r3, [r7, #16]
 8012674:	2101      	movs	r1, #1
 8012676:	68f8      	ldr	r0, [r7, #12]
 8012678:	f004 ffab 	bl	80175d2 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 801267c:	2300      	movs	r3, #0
 801267e:	e005      	b.n	801268c <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 8012680:	7afb      	ldrb	r3, [r7, #11]
 8012682:	4619      	mov	r1, r3
 8012684:	68f8      	ldr	r0, [r7, #12]
 8012686:	f000 f9b4 	bl	80129f2 <SCSI_ProcessWrite>
 801268a:	4603      	mov	r3, r0
}
 801268c:	4618      	mov	r0, r3
 801268e:	3718      	adds	r7, #24
 8012690:	46bd      	mov	sp, r7
 8012692:	bd80      	pop	{r7, pc}

08012694 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012694:	b580      	push	{r7, lr}
 8012696:	b086      	sub	sp, #24
 8012698:	af00      	add	r7, sp, #0
 801269a:	60f8      	str	r0, [r7, #12]
 801269c:	460b      	mov	r3, r1
 801269e:	607a      	str	r2, [r7, #4]
 80126a0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80126a8:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80126aa:	697b      	ldr	r3, [r7, #20]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d102      	bne.n	80126b6 <SCSI_Write12+0x22>
  {
    return -1;
 80126b0:	f04f 33ff 	mov.w	r3, #4294967295
 80126b4:	e0bf      	b.n	8012836 <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80126b6:	697b      	ldr	r3, [r7, #20]
 80126b8:	7a1b      	ldrb	r3, [r3, #8]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	f040 80b5 	bne.w	801282a <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80126c0:	697b      	ldr	r3, [r7, #20]
 80126c2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d10a      	bne.n	80126e0 <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80126ca:	697b      	ldr	r3, [r7, #20]
 80126cc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80126d0:	2320      	movs	r3, #32
 80126d2:	2205      	movs	r2, #5
 80126d4:	68f8      	ldr	r0, [r7, #12]
 80126d6:	f7ff fd0c 	bl	80120f2 <SCSI_SenseCode>
      return -1;
 80126da:	f04f 33ff 	mov.w	r3, #4294967295
 80126de:	e0aa      	b.n	8012836 <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80126e0:	697b      	ldr	r3, [r7, #20]
 80126e2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80126e6:	b25b      	sxtb	r3, r3
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	da0a      	bge.n	8012702 <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80126ec:	697b      	ldr	r3, [r7, #20]
 80126ee:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80126f2:	2320      	movs	r3, #32
 80126f4:	2205      	movs	r2, #5
 80126f6:	68f8      	ldr	r0, [r7, #12]
 80126f8:	f7ff fcfb 	bl	80120f2 <SCSI_SenseCode>
      return -1;
 80126fc:	f04f 33ff 	mov.w	r3, #4294967295
 8012700:	e099      	b.n	8012836 <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8012702:	68fb      	ldr	r3, [r7, #12]
 8012704:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012708:	689b      	ldr	r3, [r3, #8]
 801270a:	7afa      	ldrb	r2, [r7, #11]
 801270c:	4610      	mov	r0, r2
 801270e:	4798      	blx	r3
 8012710:	4603      	mov	r3, r0
 8012712:	2b00      	cmp	r3, #0
 8012714:	d00b      	beq.n	801272e <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012716:	7af9      	ldrb	r1, [r7, #11]
 8012718:	233a      	movs	r3, #58	; 0x3a
 801271a:	2202      	movs	r2, #2
 801271c:	68f8      	ldr	r0, [r7, #12]
 801271e:	f7ff fce8 	bl	80120f2 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8012722:	697b      	ldr	r3, [r7, #20]
 8012724:	2205      	movs	r2, #5
 8012726:	721a      	strb	r2, [r3, #8]
      return -1;
 8012728:	f04f 33ff 	mov.w	r3, #4294967295
 801272c:	e083      	b.n	8012836 <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012734:	68db      	ldr	r3, [r3, #12]
 8012736:	7afa      	ldrb	r2, [r7, #11]
 8012738:	4610      	mov	r0, r2
 801273a:	4798      	blx	r3
 801273c:	4603      	mov	r3, r0
 801273e:	2b00      	cmp	r3, #0
 8012740:	d00b      	beq.n	801275a <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8012742:	7af9      	ldrb	r1, [r7, #11]
 8012744:	2327      	movs	r3, #39	; 0x27
 8012746:	2202      	movs	r2, #2
 8012748:	68f8      	ldr	r0, [r7, #12]
 801274a:	f7ff fcd2 	bl	80120f2 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 801274e:	697b      	ldr	r3, [r7, #20]
 8012750:	2205      	movs	r2, #5
 8012752:	721a      	strb	r2, [r3, #8]
      return -1;
 8012754:	f04f 33ff 	mov.w	r3, #4294967295
 8012758:	e06d      	b.n	8012836 <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801275a:	687b      	ldr	r3, [r7, #4]
 801275c:	3302      	adds	r3, #2
 801275e:	781b      	ldrb	r3, [r3, #0]
 8012760:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	3303      	adds	r3, #3
 8012766:	781b      	ldrb	r3, [r3, #0]
 8012768:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801276a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	3304      	adds	r3, #4
 8012770:	781b      	ldrb	r3, [r3, #0]
 8012772:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8012774:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8012776:	687a      	ldr	r2, [r7, #4]
 8012778:	3205      	adds	r2, #5
 801277a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 801277c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801277e:	697b      	ldr	r3, [r7, #20]
 8012780:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	3306      	adds	r3, #6
 8012788:	781b      	ldrb	r3, [r3, #0]
 801278a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	3307      	adds	r3, #7
 8012790:	781b      	ldrb	r3, [r3, #0]
 8012792:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012794:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	3308      	adds	r3, #8
 801279a:	781b      	ldrb	r3, [r3, #0]
 801279c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 801279e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80127a0:	687a      	ldr	r2, [r7, #4]
 80127a2:	3209      	adds	r2, #9
 80127a4:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80127a6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80127a8:	697b      	ldr	r3, [r7, #20]
 80127aa:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80127ae:	697b      	ldr	r3, [r7, #20]
 80127b0:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80127b4:	697b      	ldr	r3, [r7, #20]
 80127b6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80127ba:	7af9      	ldrb	r1, [r7, #11]
 80127bc:	68f8      	ldr	r0, [r7, #12]
 80127be:	f000 f877 	bl	80128b0 <SCSI_CheckAddressRange>
 80127c2:	4603      	mov	r3, r0
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	da02      	bge.n	80127ce <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80127c8:	f04f 33ff 	mov.w	r3, #4294967295
 80127cc:	e033      	b.n	8012836 <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80127ce:	697b      	ldr	r3, [r7, #20]
 80127d0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80127d4:	697a      	ldr	r2, [r7, #20]
 80127d6:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80127da:	fb02 f303 	mul.w	r3, r2, r3
 80127de:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80127e0:	697b      	ldr	r3, [r7, #20]
 80127e2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80127e6:	693a      	ldr	r2, [r7, #16]
 80127e8:	429a      	cmp	r2, r3
 80127ea:	d00a      	beq.n	8012802 <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80127ec:	697b      	ldr	r3, [r7, #20]
 80127ee:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80127f2:	2320      	movs	r3, #32
 80127f4:	2205      	movs	r2, #5
 80127f6:	68f8      	ldr	r0, [r7, #12]
 80127f8:	f7ff fc7b 	bl	80120f2 <SCSI_SenseCode>
      return -1;
 80127fc:	f04f 33ff 	mov.w	r3, #4294967295
 8012800:	e019      	b.n	8012836 <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8012802:	693b      	ldr	r3, [r7, #16]
 8012804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012808:	bf28      	it	cs
 801280a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801280e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8012810:	697b      	ldr	r3, [r7, #20]
 8012812:	2201      	movs	r2, #1
 8012814:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8012816:	697b      	ldr	r3, [r7, #20]
 8012818:	f103 0210 	add.w	r2, r3, #16
 801281c:	693b      	ldr	r3, [r7, #16]
 801281e:	2101      	movs	r1, #1
 8012820:	68f8      	ldr	r0, [r7, #12]
 8012822:	f004 fed6 	bl	80175d2 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8012826:	2300      	movs	r3, #0
 8012828:	e005      	b.n	8012836 <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 801282a:	7afb      	ldrb	r3, [r7, #11]
 801282c:	4619      	mov	r1, r3
 801282e:	68f8      	ldr	r0, [r7, #12]
 8012830:	f000 f8df 	bl	80129f2 <SCSI_ProcessWrite>
 8012834:	4603      	mov	r3, r0
}
 8012836:	4618      	mov	r0, r3
 8012838:	3718      	adds	r7, #24
 801283a:	46bd      	mov	sp, r7
 801283c:	bd80      	pop	{r7, pc}

0801283e <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801283e:	b580      	push	{r7, lr}
 8012840:	b086      	sub	sp, #24
 8012842:	af00      	add	r7, sp, #0
 8012844:	60f8      	str	r0, [r7, #12]
 8012846:	460b      	mov	r3, r1
 8012848:	607a      	str	r2, [r7, #4]
 801284a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012852:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8012854:	697b      	ldr	r3, [r7, #20]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d102      	bne.n	8012860 <SCSI_Verify10+0x22>
  {
    return -1;
 801285a:	f04f 33ff 	mov.w	r3, #4294967295
 801285e:	e023      	b.n	80128a8 <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	3301      	adds	r3, #1
 8012864:	781b      	ldrb	r3, [r3, #0]
 8012866:	f003 0302 	and.w	r3, r3, #2
 801286a:	2b00      	cmp	r3, #0
 801286c:	d008      	beq.n	8012880 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 801286e:	7af9      	ldrb	r1, [r7, #11]
 8012870:	2324      	movs	r3, #36	; 0x24
 8012872:	2205      	movs	r2, #5
 8012874:	68f8      	ldr	r0, [r7, #12]
 8012876:	f7ff fc3c 	bl	80120f2 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 801287a:	f04f 33ff 	mov.w	r3, #4294967295
 801287e:	e013      	b.n	80128a8 <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8012880:	697b      	ldr	r3, [r7, #20]
 8012882:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8012886:	697b      	ldr	r3, [r7, #20]
 8012888:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801288c:	7af9      	ldrb	r1, [r7, #11]
 801288e:	68f8      	ldr	r0, [r7, #12]
 8012890:	f000 f80e 	bl	80128b0 <SCSI_CheckAddressRange>
 8012894:	4603      	mov	r3, r0
 8012896:	2b00      	cmp	r3, #0
 8012898:	da02      	bge.n	80128a0 <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 801289a:	f04f 33ff 	mov.w	r3, #4294967295
 801289e:	e003      	b.n	80128a8 <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 80128a0:	697b      	ldr	r3, [r7, #20]
 80128a2:	2200      	movs	r2, #0
 80128a4:	60da      	str	r2, [r3, #12]

  return 0;
 80128a6:	2300      	movs	r3, #0
}
 80128a8:	4618      	mov	r0, r3
 80128aa:	3718      	adds	r7, #24
 80128ac:	46bd      	mov	sp, r7
 80128ae:	bd80      	pop	{r7, pc}

080128b0 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 80128b0:	b580      	push	{r7, lr}
 80128b2:	b086      	sub	sp, #24
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	60f8      	str	r0, [r7, #12]
 80128b8:	607a      	str	r2, [r7, #4]
 80128ba:	603b      	str	r3, [r7, #0]
 80128bc:	460b      	mov	r3, r1
 80128be:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80128c6:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80128c8:	697b      	ldr	r3, [r7, #20]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d102      	bne.n	80128d4 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 80128ce:	f04f 33ff 	mov.w	r3, #4294967295
 80128d2:	e011      	b.n	80128f8 <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 80128d4:	687a      	ldr	r2, [r7, #4]
 80128d6:	683b      	ldr	r3, [r7, #0]
 80128d8:	441a      	add	r2, r3
 80128da:	697b      	ldr	r3, [r7, #20]
 80128dc:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80128e0:	429a      	cmp	r2, r3
 80128e2:	d908      	bls.n	80128f6 <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 80128e4:	7af9      	ldrb	r1, [r7, #11]
 80128e6:	2321      	movs	r3, #33	; 0x21
 80128e8:	2205      	movs	r2, #5
 80128ea:	68f8      	ldr	r0, [r7, #12]
 80128ec:	f7ff fc01 	bl	80120f2 <SCSI_SenseCode>
    return -1;
 80128f0:	f04f 33ff 	mov.w	r3, #4294967295
 80128f4:	e000      	b.n	80128f8 <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 80128f6:	2300      	movs	r3, #0
}
 80128f8:	4618      	mov	r0, r3
 80128fa:	3718      	adds	r7, #24
 80128fc:	46bd      	mov	sp, r7
 80128fe:	bd80      	pop	{r7, pc}

08012900 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8012900:	b590      	push	{r4, r7, lr}
 8012902:	b085      	sub	sp, #20
 8012904:	af00      	add	r7, sp, #0
 8012906:	6078      	str	r0, [r7, #4]
 8012908:	460b      	mov	r3, r1
 801290a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012912:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801291a:	68fa      	ldr	r2, [r7, #12]
 801291c:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8012920:	fb02 f303 	mul.w	r3, r2, r3
 8012924:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	2b00      	cmp	r3, #0
 801292a:	d102      	bne.n	8012932 <SCSI_ProcessRead+0x32>
  {
    return -1;
 801292c:	f04f 33ff 	mov.w	r3, #4294967295
 8012930:	e05b      	b.n	80129ea <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8012932:	68bb      	ldr	r3, [r7, #8]
 8012934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012938:	bf28      	it	cs
 801293a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801293e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012946:	691c      	ldr	r4, [r3, #16]
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	f103 0110 	add.w	r1, r3, #16
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801295a:	4618      	mov	r0, r3
 801295c:	68bb      	ldr	r3, [r7, #8]
 801295e:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8012962:	b29b      	uxth	r3, r3
 8012964:	78f8      	ldrb	r0, [r7, #3]
 8012966:	47a0      	blx	r4
 8012968:	4603      	mov	r3, r0
 801296a:	2b00      	cmp	r3, #0
 801296c:	da08      	bge.n	8012980 <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 801296e:	78f9      	ldrb	r1, [r7, #3]
 8012970:	2311      	movs	r3, #17
 8012972:	2204      	movs	r2, #4
 8012974:	6878      	ldr	r0, [r7, #4]
 8012976:	f7ff fbbc 	bl	80120f2 <SCSI_SenseCode>
    return -1;
 801297a:	f04f 33ff 	mov.w	r3, #4294967295
 801297e:	e034      	b.n	80129ea <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	f103 0210 	add.w	r2, r3, #16
 8012986:	68bb      	ldr	r3, [r7, #8]
 8012988:	2181      	movs	r1, #129	; 0x81
 801298a:	6878      	ldr	r0, [r7, #4]
 801298c:	f004 fe00 	bl	8017590 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801299c:	4619      	mov	r1, r3
 801299e:	68bb      	ldr	r3, [r7, #8]
 80129a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80129a4:	441a      	add	r2, r3
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80129b8:	4619      	mov	r1, r3
 80129ba:	68bb      	ldr	r3, [r7, #8]
 80129bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80129c0:	1ad2      	subs	r2, r2, r3
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 80129ce:	68bb      	ldr	r3, [r7, #8]
 80129d0:	1ad2      	subs	r2, r2, r3
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d102      	bne.n	80129e8 <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	2203      	movs	r2, #3
 80129e6:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 80129e8:	2300      	movs	r3, #0
}
 80129ea:	4618      	mov	r0, r3
 80129ec:	3714      	adds	r7, #20
 80129ee:	46bd      	mov	sp, r7
 80129f0:	bd90      	pop	{r4, r7, pc}

080129f2 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80129f2:	b590      	push	{r4, r7, lr}
 80129f4:	b085      	sub	sp, #20
 80129f6:	af00      	add	r7, sp, #0
 80129f8:	6078      	str	r0, [r7, #4]
 80129fa:	460b      	mov	r3, r1
 80129fc:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012a04:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012a0c:	68fa      	ldr	r2, [r7, #12]
 8012a0e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8012a12:	fb02 f303 	mul.w	r3, r2, r3
 8012a16:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d102      	bne.n	8012a24 <SCSI_ProcessWrite+0x32>
  {
    return -1;
 8012a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8012a22:	e06b      	b.n	8012afc <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8012a24:	68bb      	ldr	r3, [r7, #8]
 8012a26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012a2a:	bf28      	it	cs
 8012a2c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8012a30:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012a38:	695c      	ldr	r4, [r3, #20]
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	f103 0110 	add.w	r1, r3, #16
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8012a46:	68fb      	ldr	r3, [r7, #12]
 8012a48:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	68bb      	ldr	r3, [r7, #8]
 8012a50:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8012a54:	b29b      	uxth	r3, r3
 8012a56:	78f8      	ldrb	r0, [r7, #3]
 8012a58:	47a0      	blx	r4
 8012a5a:	4603      	mov	r3, r0
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	da08      	bge.n	8012a72 <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8012a60:	78f9      	ldrb	r1, [r7, #3]
 8012a62:	2303      	movs	r3, #3
 8012a64:	2204      	movs	r2, #4
 8012a66:	6878      	ldr	r0, [r7, #4]
 8012a68:	f7ff fb43 	bl	80120f2 <SCSI_SenseCode>
    return -1;
 8012a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8012a70:	e044      	b.n	8012afc <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012a7e:	4619      	mov	r1, r3
 8012a80:	68bb      	ldr	r3, [r7, #8]
 8012a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8012a86:	441a      	add	r2, r3
 8012a88:	68fb      	ldr	r3, [r7, #12]
 8012a8a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012a9a:	4619      	mov	r1, r3
 8012a9c:	68bb      	ldr	r3, [r7, #8]
 8012a9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8012aa2:	1ad2      	subs	r2, r2, r3
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8012ab0:	68bb      	ldr	r3, [r7, #8]
 8012ab2:	1ad2      	subs	r2, r2, r3
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d104      	bne.n	8012ace <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8012ac4:	2100      	movs	r1, #0
 8012ac6:	6878      	ldr	r0, [r7, #4]
 8012ac8:	f7fe fdd8 	bl	801167c <MSC_BOT_SendCSW>
 8012acc:	e015      	b.n	8012afa <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012ad4:	68fa      	ldr	r2, [r7, #12]
 8012ad6:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8012ada:	fb02 f303 	mul.w	r3, r2, r3
 8012ade:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012ae2:	bf28      	it	cs
 8012ae4:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8012ae8:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	f103 0210 	add.w	r2, r3, #16
 8012af0:	68bb      	ldr	r3, [r7, #8]
 8012af2:	2101      	movs	r1, #1
 8012af4:	6878      	ldr	r0, [r7, #4]
 8012af6:	f004 fd6c 	bl	80175d2 <USBD_LL_PrepareReceive>
  }

  return 0;
 8012afa:	2300      	movs	r3, #0
}
 8012afc:	4618      	mov	r0, r3
 8012afe:	3714      	adds	r7, #20
 8012b00:	46bd      	mov	sp, r7
 8012b02:	bd90      	pop	{r4, r7, pc}

08012b04 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8012b04:	b480      	push	{r7}
 8012b06:	b087      	sub	sp, #28
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	60f8      	str	r0, [r7, #12]
 8012b0c:	60b9      	str	r1, [r7, #8]
 8012b0e:	4613      	mov	r3, r2
 8012b10:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8012b12:	88fb      	ldrh	r3, [r7, #6]
 8012b14:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d102      	bne.n	8012b22 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8012b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8012b20:	e013      	b.n	8012b4a <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8012b22:	8afa      	ldrh	r2, [r7, #22]
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8012b28:	e00b      	b.n	8012b42 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8012b2a:	8afb      	ldrh	r3, [r7, #22]
 8012b2c:	3b01      	subs	r3, #1
 8012b2e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8012b30:	8afb      	ldrh	r3, [r7, #22]
 8012b32:	68ba      	ldr	r2, [r7, #8]
 8012b34:	441a      	add	r2, r3
 8012b36:	8afb      	ldrh	r3, [r7, #22]
 8012b38:	7811      	ldrb	r1, [r2, #0]
 8012b3a:	68fa      	ldr	r2, [r7, #12]
 8012b3c:	4413      	add	r3, r2
 8012b3e:	460a      	mov	r2, r1
 8012b40:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8012b42:	8afb      	ldrh	r3, [r7, #22]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d1f0      	bne.n	8012b2a <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8012b48:	2300      	movs	r3, #0
}
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	371c      	adds	r7, #28
 8012b4e:	46bd      	mov	sp, r7
 8012b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b54:	4770      	bx	lr

08012b56 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8012b56:	b580      	push	{r7, lr}
 8012b58:	b086      	sub	sp, #24
 8012b5a:	af00      	add	r7, sp, #0
 8012b5c:	60f8      	str	r0, [r7, #12]
 8012b5e:	60b9      	str	r1, [r7, #8]
 8012b60:	4613      	mov	r3, r2
 8012b62:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d101      	bne.n	8012b6e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8012b6a:	2303      	movs	r3, #3
 8012b6c:	e01f      	b.n	8012bae <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	2200      	movs	r2, #0
 8012b72:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	2200      	movs	r2, #0
 8012b7a:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	2200      	movs	r2, #0
 8012b82:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8012b86:	68bb      	ldr	r3, [r7, #8]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d003      	beq.n	8012b94 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	68ba      	ldr	r2, [r7, #8]
 8012b90:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	2201      	movs	r2, #1
 8012b98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	79fa      	ldrb	r2, [r7, #7]
 8012ba0:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8012ba2:	68f8      	ldr	r0, [r7, #12]
 8012ba4:	f004 fba0 	bl	80172e8 <USBD_LL_Init>
 8012ba8:	4603      	mov	r3, r0
 8012baa:	75fb      	strb	r3, [r7, #23]

  return ret;
 8012bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8012bae:	4618      	mov	r0, r3
 8012bb0:	3718      	adds	r7, #24
 8012bb2:	46bd      	mov	sp, r7
 8012bb4:	bd80      	pop	{r7, pc}

08012bb6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8012bb6:	b580      	push	{r7, lr}
 8012bb8:	b084      	sub	sp, #16
 8012bba:	af00      	add	r7, sp, #0
 8012bbc:	6078      	str	r0, [r7, #4]
 8012bbe:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012bc0:	2300      	movs	r3, #0
 8012bc2:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8012bc4:	683b      	ldr	r3, [r7, #0]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d101      	bne.n	8012bce <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8012bca:	2303      	movs	r3, #3
 8012bcc:	e016      	b.n	8012bfc <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	683a      	ldr	r2, [r7, #0]
 8012bd2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d00b      	beq.n	8012bfa <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bea:	f107 020e 	add.w	r2, r7, #14
 8012bee:	4610      	mov	r0, r2
 8012bf0:	4798      	blx	r3
 8012bf2:	4602      	mov	r2, r0
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8012bfa:	2300      	movs	r3, #0
}
 8012bfc:	4618      	mov	r0, r3
 8012bfe:	3710      	adds	r7, #16
 8012c00:	46bd      	mov	sp, r7
 8012c02:	bd80      	pop	{r7, pc}

08012c04 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b082      	sub	sp, #8
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8012c0c:	6878      	ldr	r0, [r7, #4]
 8012c0e:	f004 fbb7 	bl	8017380 <USBD_LL_Start>
 8012c12:	4603      	mov	r3, r0
}
 8012c14:	4618      	mov	r0, r3
 8012c16:	3708      	adds	r7, #8
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	bd80      	pop	{r7, pc}

08012c1c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8012c1c:	b480      	push	{r7}
 8012c1e:	b083      	sub	sp, #12
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012c24:	2300      	movs	r3, #0
}
 8012c26:	4618      	mov	r0, r3
 8012c28:	370c      	adds	r7, #12
 8012c2a:	46bd      	mov	sp, r7
 8012c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c30:	4770      	bx	lr

08012c32 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012c32:	b580      	push	{r7, lr}
 8012c34:	b084      	sub	sp, #16
 8012c36:	af00      	add	r7, sp, #0
 8012c38:	6078      	str	r0, [r7, #4]
 8012c3a:	460b      	mov	r3, r1
 8012c3c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8012c3e:	2303      	movs	r3, #3
 8012c40:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d009      	beq.n	8012c60 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	78fa      	ldrb	r2, [r7, #3]
 8012c56:	4611      	mov	r1, r2
 8012c58:	6878      	ldr	r0, [r7, #4]
 8012c5a:	4798      	blx	r3
 8012c5c:	4603      	mov	r3, r0
 8012c5e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8012c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c62:	4618      	mov	r0, r3
 8012c64:	3710      	adds	r7, #16
 8012c66:	46bd      	mov	sp, r7
 8012c68:	bd80      	pop	{r7, pc}

08012c6a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012c6a:	b580      	push	{r7, lr}
 8012c6c:	b082      	sub	sp, #8
 8012c6e:	af00      	add	r7, sp, #0
 8012c70:	6078      	str	r0, [r7, #4]
 8012c72:	460b      	mov	r3, r1
 8012c74:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d007      	beq.n	8012c90 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012c86:	685b      	ldr	r3, [r3, #4]
 8012c88:	78fa      	ldrb	r2, [r7, #3]
 8012c8a:	4611      	mov	r1, r2
 8012c8c:	6878      	ldr	r0, [r7, #4]
 8012c8e:	4798      	blx	r3
  }

  return USBD_OK;
 8012c90:	2300      	movs	r3, #0
}
 8012c92:	4618      	mov	r0, r3
 8012c94:	3708      	adds	r7, #8
 8012c96:	46bd      	mov	sp, r7
 8012c98:	bd80      	pop	{r7, pc}

08012c9a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8012c9a:	b580      	push	{r7, lr}
 8012c9c:	b084      	sub	sp, #16
 8012c9e:	af00      	add	r7, sp, #0
 8012ca0:	6078      	str	r0, [r7, #4]
 8012ca2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8012caa:	6839      	ldr	r1, [r7, #0]
 8012cac:	4618      	mov	r0, r3
 8012cae:	f000 ffb9 	bl	8013c24 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	2201      	movs	r2, #1
 8012cb6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8012cc0:	461a      	mov	r2, r3
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8012cce:	f003 031f 	and.w	r3, r3, #31
 8012cd2:	2b02      	cmp	r3, #2
 8012cd4:	d01a      	beq.n	8012d0c <USBD_LL_SetupStage+0x72>
 8012cd6:	2b02      	cmp	r3, #2
 8012cd8:	d822      	bhi.n	8012d20 <USBD_LL_SetupStage+0x86>
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d002      	beq.n	8012ce4 <USBD_LL_SetupStage+0x4a>
 8012cde:	2b01      	cmp	r3, #1
 8012ce0:	d00a      	beq.n	8012cf8 <USBD_LL_SetupStage+0x5e>
 8012ce2:	e01d      	b.n	8012d20 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8012cea:	4619      	mov	r1, r3
 8012cec:	6878      	ldr	r0, [r7, #4]
 8012cee:	f000 fa61 	bl	80131b4 <USBD_StdDevReq>
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	73fb      	strb	r3, [r7, #15]
      break;
 8012cf6:	e020      	b.n	8012d3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8012cfe:	4619      	mov	r1, r3
 8012d00:	6878      	ldr	r0, [r7, #4]
 8012d02:	f000 fac5 	bl	8013290 <USBD_StdItfReq>
 8012d06:	4603      	mov	r3, r0
 8012d08:	73fb      	strb	r3, [r7, #15]
      break;
 8012d0a:	e016      	b.n	8012d3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8012d12:	4619      	mov	r1, r3
 8012d14:	6878      	ldr	r0, [r7, #4]
 8012d16:	f000 fb04 	bl	8013322 <USBD_StdEPReq>
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	73fb      	strb	r3, [r7, #15]
      break;
 8012d1e:	e00c      	b.n	8012d3a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8012d26:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012d2a:	b2db      	uxtb	r3, r3
 8012d2c:	4619      	mov	r1, r3
 8012d2e:	6878      	ldr	r0, [r7, #4]
 8012d30:	f004 fba5 	bl	801747e <USBD_LL_StallEP>
 8012d34:	4603      	mov	r3, r0
 8012d36:	73fb      	strb	r3, [r7, #15]
      break;
 8012d38:	bf00      	nop
  }

  return ret;
 8012d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	3710      	adds	r7, #16
 8012d40:	46bd      	mov	sp, r7
 8012d42:	bd80      	pop	{r7, pc}

08012d44 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012d44:	b580      	push	{r7, lr}
 8012d46:	b086      	sub	sp, #24
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	60f8      	str	r0, [r7, #12]
 8012d4c:	460b      	mov	r3, r1
 8012d4e:	607a      	str	r2, [r7, #4]
 8012d50:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8012d52:	7afb      	ldrb	r3, [r7, #11]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d138      	bne.n	8012dca <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8012d5e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012d66:	2b03      	cmp	r3, #3
 8012d68:	d14a      	bne.n	8012e00 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8012d6a:	693b      	ldr	r3, [r7, #16]
 8012d6c:	689a      	ldr	r2, [r3, #8]
 8012d6e:	693b      	ldr	r3, [r7, #16]
 8012d70:	68db      	ldr	r3, [r3, #12]
 8012d72:	429a      	cmp	r2, r3
 8012d74:	d913      	bls.n	8012d9e <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012d76:	693b      	ldr	r3, [r7, #16]
 8012d78:	689a      	ldr	r2, [r3, #8]
 8012d7a:	693b      	ldr	r3, [r7, #16]
 8012d7c:	68db      	ldr	r3, [r3, #12]
 8012d7e:	1ad2      	subs	r2, r2, r3
 8012d80:	693b      	ldr	r3, [r7, #16]
 8012d82:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8012d84:	693b      	ldr	r3, [r7, #16]
 8012d86:	68da      	ldr	r2, [r3, #12]
 8012d88:	693b      	ldr	r3, [r7, #16]
 8012d8a:	689b      	ldr	r3, [r3, #8]
 8012d8c:	4293      	cmp	r3, r2
 8012d8e:	bf28      	it	cs
 8012d90:	4613      	movcs	r3, r2
 8012d92:	461a      	mov	r2, r3
 8012d94:	6879      	ldr	r1, [r7, #4]
 8012d96:	68f8      	ldr	r0, [r7, #12]
 8012d98:	f001 f81b 	bl	8013dd2 <USBD_CtlContinueRx>
 8012d9c:	e030      	b.n	8012e00 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012da4:	b2db      	uxtb	r3, r3
 8012da6:	2b03      	cmp	r3, #3
 8012da8:	d10b      	bne.n	8012dc2 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012db0:	691b      	ldr	r3, [r3, #16]
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d005      	beq.n	8012dc2 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012dbc:	691b      	ldr	r3, [r3, #16]
 8012dbe:	68f8      	ldr	r0, [r7, #12]
 8012dc0:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8012dc2:	68f8      	ldr	r0, [r7, #12]
 8012dc4:	f001 f816 	bl	8013df4 <USBD_CtlSendStatus>
 8012dc8:	e01a      	b.n	8012e00 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012dd0:	b2db      	uxtb	r3, r3
 8012dd2:	2b03      	cmp	r3, #3
 8012dd4:	d114      	bne.n	8012e00 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012ddc:	699b      	ldr	r3, [r3, #24]
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d00e      	beq.n	8012e00 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012de8:	699b      	ldr	r3, [r3, #24]
 8012dea:	7afa      	ldrb	r2, [r7, #11]
 8012dec:	4611      	mov	r1, r2
 8012dee:	68f8      	ldr	r0, [r7, #12]
 8012df0:	4798      	blx	r3
 8012df2:	4603      	mov	r3, r0
 8012df4:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8012df6:	7dfb      	ldrb	r3, [r7, #23]
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d001      	beq.n	8012e00 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8012dfc:	7dfb      	ldrb	r3, [r7, #23]
 8012dfe:	e000      	b.n	8012e02 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8012e00:	2300      	movs	r3, #0
}
 8012e02:	4618      	mov	r0, r3
 8012e04:	3718      	adds	r7, #24
 8012e06:	46bd      	mov	sp, r7
 8012e08:	bd80      	pop	{r7, pc}

08012e0a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8012e0a:	b580      	push	{r7, lr}
 8012e0c:	b086      	sub	sp, #24
 8012e0e:	af00      	add	r7, sp, #0
 8012e10:	60f8      	str	r0, [r7, #12]
 8012e12:	460b      	mov	r3, r1
 8012e14:	607a      	str	r2, [r7, #4]
 8012e16:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8012e18:	7afb      	ldrb	r3, [r7, #11]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d16b      	bne.n	8012ef6 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	3314      	adds	r3, #20
 8012e22:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012e24:	68fb      	ldr	r3, [r7, #12]
 8012e26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012e2a:	2b02      	cmp	r3, #2
 8012e2c:	d156      	bne.n	8012edc <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8012e2e:	693b      	ldr	r3, [r7, #16]
 8012e30:	689a      	ldr	r2, [r3, #8]
 8012e32:	693b      	ldr	r3, [r7, #16]
 8012e34:	68db      	ldr	r3, [r3, #12]
 8012e36:	429a      	cmp	r2, r3
 8012e38:	d914      	bls.n	8012e64 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012e3a:	693b      	ldr	r3, [r7, #16]
 8012e3c:	689a      	ldr	r2, [r3, #8]
 8012e3e:	693b      	ldr	r3, [r7, #16]
 8012e40:	68db      	ldr	r3, [r3, #12]
 8012e42:	1ad2      	subs	r2, r2, r3
 8012e44:	693b      	ldr	r3, [r7, #16]
 8012e46:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8012e48:	693b      	ldr	r3, [r7, #16]
 8012e4a:	689b      	ldr	r3, [r3, #8]
 8012e4c:	461a      	mov	r2, r3
 8012e4e:	6879      	ldr	r1, [r7, #4]
 8012e50:	68f8      	ldr	r0, [r7, #12]
 8012e52:	f000 ffad 	bl	8013db0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012e56:	2300      	movs	r3, #0
 8012e58:	2200      	movs	r2, #0
 8012e5a:	2100      	movs	r1, #0
 8012e5c:	68f8      	ldr	r0, [r7, #12]
 8012e5e:	f004 fbb8 	bl	80175d2 <USBD_LL_PrepareReceive>
 8012e62:	e03b      	b.n	8012edc <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8012e64:	693b      	ldr	r3, [r7, #16]
 8012e66:	68da      	ldr	r2, [r3, #12]
 8012e68:	693b      	ldr	r3, [r7, #16]
 8012e6a:	689b      	ldr	r3, [r3, #8]
 8012e6c:	429a      	cmp	r2, r3
 8012e6e:	d11c      	bne.n	8012eaa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8012e70:	693b      	ldr	r3, [r7, #16]
 8012e72:	685a      	ldr	r2, [r3, #4]
 8012e74:	693b      	ldr	r3, [r7, #16]
 8012e76:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8012e78:	429a      	cmp	r2, r3
 8012e7a:	d316      	bcc.n	8012eaa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8012e7c:	693b      	ldr	r3, [r7, #16]
 8012e7e:	685a      	ldr	r2, [r3, #4]
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8012e86:	429a      	cmp	r2, r3
 8012e88:	d20f      	bcs.n	8012eaa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	2100      	movs	r1, #0
 8012e8e:	68f8      	ldr	r0, [r7, #12]
 8012e90:	f000 ff8e 	bl	8013db0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	2200      	movs	r2, #0
 8012e98:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012e9c:	2300      	movs	r3, #0
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	2100      	movs	r1, #0
 8012ea2:	68f8      	ldr	r0, [r7, #12]
 8012ea4:	f004 fb95 	bl	80175d2 <USBD_LL_PrepareReceive>
 8012ea8:	e018      	b.n	8012edc <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012eb0:	b2db      	uxtb	r3, r3
 8012eb2:	2b03      	cmp	r3, #3
 8012eb4:	d10b      	bne.n	8012ece <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012ebc:	68db      	ldr	r3, [r3, #12]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d005      	beq.n	8012ece <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012ec8:	68db      	ldr	r3, [r3, #12]
 8012eca:	68f8      	ldr	r0, [r7, #12]
 8012ecc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8012ece:	2180      	movs	r1, #128	; 0x80
 8012ed0:	68f8      	ldr	r0, [r7, #12]
 8012ed2:	f004 fad4 	bl	801747e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8012ed6:	68f8      	ldr	r0, [r7, #12]
 8012ed8:	f000 ff9f 	bl	8013e1a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8012ee2:	2b01      	cmp	r3, #1
 8012ee4:	d122      	bne.n	8012f2c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8012ee6:	68f8      	ldr	r0, [r7, #12]
 8012ee8:	f7ff fe98 	bl	8012c1c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	2200      	movs	r2, #0
 8012ef0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8012ef4:	e01a      	b.n	8012f2c <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012efc:	b2db      	uxtb	r3, r3
 8012efe:	2b03      	cmp	r3, #3
 8012f00:	d114      	bne.n	8012f2c <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012f08:	695b      	ldr	r3, [r3, #20]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d00e      	beq.n	8012f2c <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012f14:	695b      	ldr	r3, [r3, #20]
 8012f16:	7afa      	ldrb	r2, [r7, #11]
 8012f18:	4611      	mov	r1, r2
 8012f1a:	68f8      	ldr	r0, [r7, #12]
 8012f1c:	4798      	blx	r3
 8012f1e:	4603      	mov	r3, r0
 8012f20:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8012f22:	7dfb      	ldrb	r3, [r7, #23]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d001      	beq.n	8012f2c <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8012f28:	7dfb      	ldrb	r3, [r7, #23]
 8012f2a:	e000      	b.n	8012f2e <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8012f2c:	2300      	movs	r3, #0
}
 8012f2e:	4618      	mov	r0, r3
 8012f30:	3718      	adds	r7, #24
 8012f32:	46bd      	mov	sp, r7
 8012f34:	bd80      	pop	{r7, pc}

08012f36 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8012f36:	b580      	push	{r7, lr}
 8012f38:	b082      	sub	sp, #8
 8012f3a:	af00      	add	r7, sp, #0
 8012f3c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	2201      	movs	r2, #1
 8012f42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	2200      	movs	r2, #0
 8012f4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	2200      	movs	r2, #0
 8012f52:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	2200      	movs	r2, #0
 8012f58:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d101      	bne.n	8012f6a <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8012f66:	2303      	movs	r3, #3
 8012f68:	e02f      	b.n	8012fca <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d00f      	beq.n	8012f94 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012f7a:	685b      	ldr	r3, [r3, #4]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d009      	beq.n	8012f94 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012f86:	685b      	ldr	r3, [r3, #4]
 8012f88:	687a      	ldr	r2, [r7, #4]
 8012f8a:	6852      	ldr	r2, [r2, #4]
 8012f8c:	b2d2      	uxtb	r2, r2
 8012f8e:	4611      	mov	r1, r2
 8012f90:	6878      	ldr	r0, [r7, #4]
 8012f92:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012f94:	2340      	movs	r3, #64	; 0x40
 8012f96:	2200      	movs	r2, #0
 8012f98:	2100      	movs	r1, #0
 8012f9a:	6878      	ldr	r0, [r7, #4]
 8012f9c:	f004 fa0b 	bl	80173b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	2201      	movs	r2, #1
 8012fa4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	2240      	movs	r2, #64	; 0x40
 8012fac:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012fb0:	2340      	movs	r3, #64	; 0x40
 8012fb2:	2200      	movs	r2, #0
 8012fb4:	2180      	movs	r1, #128	; 0x80
 8012fb6:	6878      	ldr	r0, [r7, #4]
 8012fb8:	f004 f9fd 	bl	80173b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	2201      	movs	r2, #1
 8012fc0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	2240      	movs	r2, #64	; 0x40
 8012fc6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8012fc8:	2300      	movs	r3, #0
}
 8012fca:	4618      	mov	r0, r3
 8012fcc:	3708      	adds	r7, #8
 8012fce:	46bd      	mov	sp, r7
 8012fd0:	bd80      	pop	{r7, pc}

08012fd2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8012fd2:	b480      	push	{r7}
 8012fd4:	b083      	sub	sp, #12
 8012fd6:	af00      	add	r7, sp, #0
 8012fd8:	6078      	str	r0, [r7, #4]
 8012fda:	460b      	mov	r3, r1
 8012fdc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	78fa      	ldrb	r2, [r7, #3]
 8012fe2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8012fe4:	2300      	movs	r3, #0
}
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	370c      	adds	r7, #12
 8012fea:	46bd      	mov	sp, r7
 8012fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff0:	4770      	bx	lr

08012ff2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012ff2:	b480      	push	{r7}
 8012ff4:	b083      	sub	sp, #12
 8012ff6:	af00      	add	r7, sp, #0
 8012ff8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013000:	b2da      	uxtb	r2, r3
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	2204      	movs	r2, #4
 801300c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8013010:	2300      	movs	r3, #0
}
 8013012:	4618      	mov	r0, r3
 8013014:	370c      	adds	r7, #12
 8013016:	46bd      	mov	sp, r7
 8013018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801301c:	4770      	bx	lr

0801301e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801301e:	b480      	push	{r7}
 8013020:	b083      	sub	sp, #12
 8013022:	af00      	add	r7, sp, #0
 8013024:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801302c:	b2db      	uxtb	r3, r3
 801302e:	2b04      	cmp	r3, #4
 8013030:	d106      	bne.n	8013040 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8013038:	b2da      	uxtb	r2, r3
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8013040:	2300      	movs	r3, #0
}
 8013042:	4618      	mov	r0, r3
 8013044:	370c      	adds	r7, #12
 8013046:	46bd      	mov	sp, r7
 8013048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801304c:	4770      	bx	lr

0801304e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801304e:	b580      	push	{r7, lr}
 8013050:	b082      	sub	sp, #8
 8013052:	af00      	add	r7, sp, #0
 8013054:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801305c:	2b00      	cmp	r3, #0
 801305e:	d101      	bne.n	8013064 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8013060:	2303      	movs	r3, #3
 8013062:	e012      	b.n	801308a <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801306a:	b2db      	uxtb	r3, r3
 801306c:	2b03      	cmp	r3, #3
 801306e:	d10b      	bne.n	8013088 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013076:	69db      	ldr	r3, [r3, #28]
 8013078:	2b00      	cmp	r3, #0
 801307a:	d005      	beq.n	8013088 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013082:	69db      	ldr	r3, [r3, #28]
 8013084:	6878      	ldr	r0, [r7, #4]
 8013086:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013088:	2300      	movs	r3, #0
}
 801308a:	4618      	mov	r0, r3
 801308c:	3708      	adds	r7, #8
 801308e:	46bd      	mov	sp, r7
 8013090:	bd80      	pop	{r7, pc}

08013092 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8013092:	b580      	push	{r7, lr}
 8013094:	b082      	sub	sp, #8
 8013096:	af00      	add	r7, sp, #0
 8013098:	6078      	str	r0, [r7, #4]
 801309a:	460b      	mov	r3, r1
 801309c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d101      	bne.n	80130ac <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80130a8:	2303      	movs	r3, #3
 80130aa:	e014      	b.n	80130d6 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80130b2:	b2db      	uxtb	r3, r3
 80130b4:	2b03      	cmp	r3, #3
 80130b6:	d10d      	bne.n	80130d4 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80130be:	6a1b      	ldr	r3, [r3, #32]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d007      	beq.n	80130d4 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80130ca:	6a1b      	ldr	r3, [r3, #32]
 80130cc:	78fa      	ldrb	r2, [r7, #3]
 80130ce:	4611      	mov	r1, r2
 80130d0:	6878      	ldr	r0, [r7, #4]
 80130d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80130d4:	2300      	movs	r3, #0
}
 80130d6:	4618      	mov	r0, r3
 80130d8:	3708      	adds	r7, #8
 80130da:	46bd      	mov	sp, r7
 80130dc:	bd80      	pop	{r7, pc}

080130de <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80130de:	b580      	push	{r7, lr}
 80130e0:	b082      	sub	sp, #8
 80130e2:	af00      	add	r7, sp, #0
 80130e4:	6078      	str	r0, [r7, #4]
 80130e6:	460b      	mov	r3, r1
 80130e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d101      	bne.n	80130f8 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80130f4:	2303      	movs	r3, #3
 80130f6:	e014      	b.n	8013122 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80130fe:	b2db      	uxtb	r3, r3
 8013100:	2b03      	cmp	r3, #3
 8013102:	d10d      	bne.n	8013120 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801310c:	2b00      	cmp	r3, #0
 801310e:	d007      	beq.n	8013120 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013118:	78fa      	ldrb	r2, [r7, #3]
 801311a:	4611      	mov	r1, r2
 801311c:	6878      	ldr	r0, [r7, #4]
 801311e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013120:	2300      	movs	r3, #0
}
 8013122:	4618      	mov	r0, r3
 8013124:	3708      	adds	r7, #8
 8013126:	46bd      	mov	sp, r7
 8013128:	bd80      	pop	{r7, pc}

0801312a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801312a:	b480      	push	{r7}
 801312c:	b083      	sub	sp, #12
 801312e:	af00      	add	r7, sp, #0
 8013130:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013132:	2300      	movs	r3, #0
}
 8013134:	4618      	mov	r0, r3
 8013136:	370c      	adds	r7, #12
 8013138:	46bd      	mov	sp, r7
 801313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801313e:	4770      	bx	lr

08013140 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8013140:	b580      	push	{r7, lr}
 8013142:	b082      	sub	sp, #8
 8013144:	af00      	add	r7, sp, #0
 8013146:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	2201      	movs	r2, #1
 801314c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013156:	2b00      	cmp	r3, #0
 8013158:	d009      	beq.n	801316e <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013160:	685b      	ldr	r3, [r3, #4]
 8013162:	687a      	ldr	r2, [r7, #4]
 8013164:	6852      	ldr	r2, [r2, #4]
 8013166:	b2d2      	uxtb	r2, r2
 8013168:	4611      	mov	r1, r2
 801316a:	6878      	ldr	r0, [r7, #4]
 801316c:	4798      	blx	r3
  }

  return USBD_OK;
 801316e:	2300      	movs	r3, #0
}
 8013170:	4618      	mov	r0, r3
 8013172:	3708      	adds	r7, #8
 8013174:	46bd      	mov	sp, r7
 8013176:	bd80      	pop	{r7, pc}

08013178 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8013178:	b480      	push	{r7}
 801317a:	b087      	sub	sp, #28
 801317c:	af00      	add	r7, sp, #0
 801317e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8013184:	697b      	ldr	r3, [r7, #20]
 8013186:	781b      	ldrb	r3, [r3, #0]
 8013188:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801318a:	697b      	ldr	r3, [r7, #20]
 801318c:	3301      	adds	r3, #1
 801318e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8013190:	697b      	ldr	r3, [r7, #20]
 8013192:	781b      	ldrb	r3, [r3, #0]
 8013194:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013196:	8a3b      	ldrh	r3, [r7, #16]
 8013198:	021b      	lsls	r3, r3, #8
 801319a:	b21a      	sxth	r2, r3
 801319c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80131a0:	4313      	orrs	r3, r2
 80131a2:	b21b      	sxth	r3, r3
 80131a4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80131a6:	89fb      	ldrh	r3, [r7, #14]
}
 80131a8:	4618      	mov	r0, r3
 80131aa:	371c      	adds	r7, #28
 80131ac:	46bd      	mov	sp, r7
 80131ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131b2:	4770      	bx	lr

080131b4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80131b4:	b580      	push	{r7, lr}
 80131b6:	b084      	sub	sp, #16
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	6078      	str	r0, [r7, #4]
 80131bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80131be:	2300      	movs	r3, #0
 80131c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80131c2:	683b      	ldr	r3, [r7, #0]
 80131c4:	781b      	ldrb	r3, [r3, #0]
 80131c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80131ca:	2b40      	cmp	r3, #64	; 0x40
 80131cc:	d005      	beq.n	80131da <USBD_StdDevReq+0x26>
 80131ce:	2b40      	cmp	r3, #64	; 0x40
 80131d0:	d853      	bhi.n	801327a <USBD_StdDevReq+0xc6>
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d00b      	beq.n	80131ee <USBD_StdDevReq+0x3a>
 80131d6:	2b20      	cmp	r3, #32
 80131d8:	d14f      	bne.n	801327a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80131e0:	689b      	ldr	r3, [r3, #8]
 80131e2:	6839      	ldr	r1, [r7, #0]
 80131e4:	6878      	ldr	r0, [r7, #4]
 80131e6:	4798      	blx	r3
 80131e8:	4603      	mov	r3, r0
 80131ea:	73fb      	strb	r3, [r7, #15]
      break;
 80131ec:	e04a      	b.n	8013284 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80131ee:	683b      	ldr	r3, [r7, #0]
 80131f0:	785b      	ldrb	r3, [r3, #1]
 80131f2:	2b09      	cmp	r3, #9
 80131f4:	d83b      	bhi.n	801326e <USBD_StdDevReq+0xba>
 80131f6:	a201      	add	r2, pc, #4	; (adr r2, 80131fc <USBD_StdDevReq+0x48>)
 80131f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131fc:	08013251 	.word	0x08013251
 8013200:	08013265 	.word	0x08013265
 8013204:	0801326f 	.word	0x0801326f
 8013208:	0801325b 	.word	0x0801325b
 801320c:	0801326f 	.word	0x0801326f
 8013210:	0801322f 	.word	0x0801322f
 8013214:	08013225 	.word	0x08013225
 8013218:	0801326f 	.word	0x0801326f
 801321c:	08013247 	.word	0x08013247
 8013220:	08013239 	.word	0x08013239
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013224:	6839      	ldr	r1, [r7, #0]
 8013226:	6878      	ldr	r0, [r7, #4]
 8013228:	f000 f9de 	bl	80135e8 <USBD_GetDescriptor>
          break;
 801322c:	e024      	b.n	8013278 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801322e:	6839      	ldr	r1, [r7, #0]
 8013230:	6878      	ldr	r0, [r7, #4]
 8013232:	f000 fb6d 	bl	8013910 <USBD_SetAddress>
          break;
 8013236:	e01f      	b.n	8013278 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8013238:	6839      	ldr	r1, [r7, #0]
 801323a:	6878      	ldr	r0, [r7, #4]
 801323c:	f000 fbac 	bl	8013998 <USBD_SetConfig>
 8013240:	4603      	mov	r3, r0
 8013242:	73fb      	strb	r3, [r7, #15]
          break;
 8013244:	e018      	b.n	8013278 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8013246:	6839      	ldr	r1, [r7, #0]
 8013248:	6878      	ldr	r0, [r7, #4]
 801324a:	f000 fc4b 	bl	8013ae4 <USBD_GetConfig>
          break;
 801324e:	e013      	b.n	8013278 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013250:	6839      	ldr	r1, [r7, #0]
 8013252:	6878      	ldr	r0, [r7, #4]
 8013254:	f000 fc7c 	bl	8013b50 <USBD_GetStatus>
          break;
 8013258:	e00e      	b.n	8013278 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801325a:	6839      	ldr	r1, [r7, #0]
 801325c:	6878      	ldr	r0, [r7, #4]
 801325e:	f000 fcab 	bl	8013bb8 <USBD_SetFeature>
          break;
 8013262:	e009      	b.n	8013278 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8013264:	6839      	ldr	r1, [r7, #0]
 8013266:	6878      	ldr	r0, [r7, #4]
 8013268:	f000 fcba 	bl	8013be0 <USBD_ClrFeature>
          break;
 801326c:	e004      	b.n	8013278 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801326e:	6839      	ldr	r1, [r7, #0]
 8013270:	6878      	ldr	r0, [r7, #4]
 8013272:	f000 fd11 	bl	8013c98 <USBD_CtlError>
          break;
 8013276:	bf00      	nop
      }
      break;
 8013278:	e004      	b.n	8013284 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801327a:	6839      	ldr	r1, [r7, #0]
 801327c:	6878      	ldr	r0, [r7, #4]
 801327e:	f000 fd0b 	bl	8013c98 <USBD_CtlError>
      break;
 8013282:	bf00      	nop
  }

  return ret;
 8013284:	7bfb      	ldrb	r3, [r7, #15]
}
 8013286:	4618      	mov	r0, r3
 8013288:	3710      	adds	r7, #16
 801328a:	46bd      	mov	sp, r7
 801328c:	bd80      	pop	{r7, pc}
 801328e:	bf00      	nop

08013290 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013290:	b580      	push	{r7, lr}
 8013292:	b084      	sub	sp, #16
 8013294:	af00      	add	r7, sp, #0
 8013296:	6078      	str	r0, [r7, #4]
 8013298:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801329a:	2300      	movs	r3, #0
 801329c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801329e:	683b      	ldr	r3, [r7, #0]
 80132a0:	781b      	ldrb	r3, [r3, #0]
 80132a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80132a6:	2b40      	cmp	r3, #64	; 0x40
 80132a8:	d005      	beq.n	80132b6 <USBD_StdItfReq+0x26>
 80132aa:	2b40      	cmp	r3, #64	; 0x40
 80132ac:	d82f      	bhi.n	801330e <USBD_StdItfReq+0x7e>
 80132ae:	2b00      	cmp	r3, #0
 80132b0:	d001      	beq.n	80132b6 <USBD_StdItfReq+0x26>
 80132b2:	2b20      	cmp	r3, #32
 80132b4:	d12b      	bne.n	801330e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80132bc:	b2db      	uxtb	r3, r3
 80132be:	3b01      	subs	r3, #1
 80132c0:	2b02      	cmp	r3, #2
 80132c2:	d81d      	bhi.n	8013300 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80132c4:	683b      	ldr	r3, [r7, #0]
 80132c6:	889b      	ldrh	r3, [r3, #4]
 80132c8:	b2db      	uxtb	r3, r3
 80132ca:	2b01      	cmp	r3, #1
 80132cc:	d813      	bhi.n	80132f6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80132d4:	689b      	ldr	r3, [r3, #8]
 80132d6:	6839      	ldr	r1, [r7, #0]
 80132d8:	6878      	ldr	r0, [r7, #4]
 80132da:	4798      	blx	r3
 80132dc:	4603      	mov	r3, r0
 80132de:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80132e0:	683b      	ldr	r3, [r7, #0]
 80132e2:	88db      	ldrh	r3, [r3, #6]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d110      	bne.n	801330a <USBD_StdItfReq+0x7a>
 80132e8:	7bfb      	ldrb	r3, [r7, #15]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d10d      	bne.n	801330a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80132ee:	6878      	ldr	r0, [r7, #4]
 80132f0:	f000 fd80 	bl	8013df4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80132f4:	e009      	b.n	801330a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80132f6:	6839      	ldr	r1, [r7, #0]
 80132f8:	6878      	ldr	r0, [r7, #4]
 80132fa:	f000 fccd 	bl	8013c98 <USBD_CtlError>
          break;
 80132fe:	e004      	b.n	801330a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8013300:	6839      	ldr	r1, [r7, #0]
 8013302:	6878      	ldr	r0, [r7, #4]
 8013304:	f000 fcc8 	bl	8013c98 <USBD_CtlError>
          break;
 8013308:	e000      	b.n	801330c <USBD_StdItfReq+0x7c>
          break;
 801330a:	bf00      	nop
      }
      break;
 801330c:	e004      	b.n	8013318 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801330e:	6839      	ldr	r1, [r7, #0]
 8013310:	6878      	ldr	r0, [r7, #4]
 8013312:	f000 fcc1 	bl	8013c98 <USBD_CtlError>
      break;
 8013316:	bf00      	nop
  }

  return ret;
 8013318:	7bfb      	ldrb	r3, [r7, #15]
}
 801331a:	4618      	mov	r0, r3
 801331c:	3710      	adds	r7, #16
 801331e:	46bd      	mov	sp, r7
 8013320:	bd80      	pop	{r7, pc}

08013322 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013322:	b580      	push	{r7, lr}
 8013324:	b084      	sub	sp, #16
 8013326:	af00      	add	r7, sp, #0
 8013328:	6078      	str	r0, [r7, #4]
 801332a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801332c:	2300      	movs	r3, #0
 801332e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8013330:	683b      	ldr	r3, [r7, #0]
 8013332:	889b      	ldrh	r3, [r3, #4]
 8013334:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013336:	683b      	ldr	r3, [r7, #0]
 8013338:	781b      	ldrb	r3, [r3, #0]
 801333a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801333e:	2b40      	cmp	r3, #64	; 0x40
 8013340:	d007      	beq.n	8013352 <USBD_StdEPReq+0x30>
 8013342:	2b40      	cmp	r3, #64	; 0x40
 8013344:	f200 8145 	bhi.w	80135d2 <USBD_StdEPReq+0x2b0>
 8013348:	2b00      	cmp	r3, #0
 801334a:	d00c      	beq.n	8013366 <USBD_StdEPReq+0x44>
 801334c:	2b20      	cmp	r3, #32
 801334e:	f040 8140 	bne.w	80135d2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013358:	689b      	ldr	r3, [r3, #8]
 801335a:	6839      	ldr	r1, [r7, #0]
 801335c:	6878      	ldr	r0, [r7, #4]
 801335e:	4798      	blx	r3
 8013360:	4603      	mov	r3, r0
 8013362:	73fb      	strb	r3, [r7, #15]
      break;
 8013364:	e13a      	b.n	80135dc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013366:	683b      	ldr	r3, [r7, #0]
 8013368:	785b      	ldrb	r3, [r3, #1]
 801336a:	2b03      	cmp	r3, #3
 801336c:	d007      	beq.n	801337e <USBD_StdEPReq+0x5c>
 801336e:	2b03      	cmp	r3, #3
 8013370:	f300 8129 	bgt.w	80135c6 <USBD_StdEPReq+0x2a4>
 8013374:	2b00      	cmp	r3, #0
 8013376:	d07f      	beq.n	8013478 <USBD_StdEPReq+0x156>
 8013378:	2b01      	cmp	r3, #1
 801337a:	d03c      	beq.n	80133f6 <USBD_StdEPReq+0xd4>
 801337c:	e123      	b.n	80135c6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013384:	b2db      	uxtb	r3, r3
 8013386:	2b02      	cmp	r3, #2
 8013388:	d002      	beq.n	8013390 <USBD_StdEPReq+0x6e>
 801338a:	2b03      	cmp	r3, #3
 801338c:	d016      	beq.n	80133bc <USBD_StdEPReq+0x9a>
 801338e:	e02c      	b.n	80133ea <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013390:	7bbb      	ldrb	r3, [r7, #14]
 8013392:	2b00      	cmp	r3, #0
 8013394:	d00d      	beq.n	80133b2 <USBD_StdEPReq+0x90>
 8013396:	7bbb      	ldrb	r3, [r7, #14]
 8013398:	2b80      	cmp	r3, #128	; 0x80
 801339a:	d00a      	beq.n	80133b2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801339c:	7bbb      	ldrb	r3, [r7, #14]
 801339e:	4619      	mov	r1, r3
 80133a0:	6878      	ldr	r0, [r7, #4]
 80133a2:	f004 f86c 	bl	801747e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80133a6:	2180      	movs	r1, #128	; 0x80
 80133a8:	6878      	ldr	r0, [r7, #4]
 80133aa:	f004 f868 	bl	801747e <USBD_LL_StallEP>
 80133ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80133b0:	e020      	b.n	80133f4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80133b2:	6839      	ldr	r1, [r7, #0]
 80133b4:	6878      	ldr	r0, [r7, #4]
 80133b6:	f000 fc6f 	bl	8013c98 <USBD_CtlError>
              break;
 80133ba:	e01b      	b.n	80133f4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80133bc:	683b      	ldr	r3, [r7, #0]
 80133be:	885b      	ldrh	r3, [r3, #2]
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d10e      	bne.n	80133e2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80133c4:	7bbb      	ldrb	r3, [r7, #14]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d00b      	beq.n	80133e2 <USBD_StdEPReq+0xc0>
 80133ca:	7bbb      	ldrb	r3, [r7, #14]
 80133cc:	2b80      	cmp	r3, #128	; 0x80
 80133ce:	d008      	beq.n	80133e2 <USBD_StdEPReq+0xc0>
 80133d0:	683b      	ldr	r3, [r7, #0]
 80133d2:	88db      	ldrh	r3, [r3, #6]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d104      	bne.n	80133e2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80133d8:	7bbb      	ldrb	r3, [r7, #14]
 80133da:	4619      	mov	r1, r3
 80133dc:	6878      	ldr	r0, [r7, #4]
 80133de:	f004 f84e 	bl	801747e <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80133e2:	6878      	ldr	r0, [r7, #4]
 80133e4:	f000 fd06 	bl	8013df4 <USBD_CtlSendStatus>

              break;
 80133e8:	e004      	b.n	80133f4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80133ea:	6839      	ldr	r1, [r7, #0]
 80133ec:	6878      	ldr	r0, [r7, #4]
 80133ee:	f000 fc53 	bl	8013c98 <USBD_CtlError>
              break;
 80133f2:	bf00      	nop
          }
          break;
 80133f4:	e0ec      	b.n	80135d0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80133fc:	b2db      	uxtb	r3, r3
 80133fe:	2b02      	cmp	r3, #2
 8013400:	d002      	beq.n	8013408 <USBD_StdEPReq+0xe6>
 8013402:	2b03      	cmp	r3, #3
 8013404:	d016      	beq.n	8013434 <USBD_StdEPReq+0x112>
 8013406:	e030      	b.n	801346a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013408:	7bbb      	ldrb	r3, [r7, #14]
 801340a:	2b00      	cmp	r3, #0
 801340c:	d00d      	beq.n	801342a <USBD_StdEPReq+0x108>
 801340e:	7bbb      	ldrb	r3, [r7, #14]
 8013410:	2b80      	cmp	r3, #128	; 0x80
 8013412:	d00a      	beq.n	801342a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013414:	7bbb      	ldrb	r3, [r7, #14]
 8013416:	4619      	mov	r1, r3
 8013418:	6878      	ldr	r0, [r7, #4]
 801341a:	f004 f830 	bl	801747e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801341e:	2180      	movs	r1, #128	; 0x80
 8013420:	6878      	ldr	r0, [r7, #4]
 8013422:	f004 f82c 	bl	801747e <USBD_LL_StallEP>
 8013426:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013428:	e025      	b.n	8013476 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801342a:	6839      	ldr	r1, [r7, #0]
 801342c:	6878      	ldr	r0, [r7, #4]
 801342e:	f000 fc33 	bl	8013c98 <USBD_CtlError>
              break;
 8013432:	e020      	b.n	8013476 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013434:	683b      	ldr	r3, [r7, #0]
 8013436:	885b      	ldrh	r3, [r3, #2]
 8013438:	2b00      	cmp	r3, #0
 801343a:	d11b      	bne.n	8013474 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801343c:	7bbb      	ldrb	r3, [r7, #14]
 801343e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013442:	2b00      	cmp	r3, #0
 8013444:	d004      	beq.n	8013450 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8013446:	7bbb      	ldrb	r3, [r7, #14]
 8013448:	4619      	mov	r1, r3
 801344a:	6878      	ldr	r0, [r7, #4]
 801344c:	f004 f836 	bl	80174bc <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8013450:	6878      	ldr	r0, [r7, #4]
 8013452:	f000 fccf 	bl	8013df4 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801345c:	689b      	ldr	r3, [r3, #8]
 801345e:	6839      	ldr	r1, [r7, #0]
 8013460:	6878      	ldr	r0, [r7, #4]
 8013462:	4798      	blx	r3
 8013464:	4603      	mov	r3, r0
 8013466:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8013468:	e004      	b.n	8013474 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801346a:	6839      	ldr	r1, [r7, #0]
 801346c:	6878      	ldr	r0, [r7, #4]
 801346e:	f000 fc13 	bl	8013c98 <USBD_CtlError>
              break;
 8013472:	e000      	b.n	8013476 <USBD_StdEPReq+0x154>
              break;
 8013474:	bf00      	nop
          }
          break;
 8013476:	e0ab      	b.n	80135d0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801347e:	b2db      	uxtb	r3, r3
 8013480:	2b02      	cmp	r3, #2
 8013482:	d002      	beq.n	801348a <USBD_StdEPReq+0x168>
 8013484:	2b03      	cmp	r3, #3
 8013486:	d032      	beq.n	80134ee <USBD_StdEPReq+0x1cc>
 8013488:	e097      	b.n	80135ba <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801348a:	7bbb      	ldrb	r3, [r7, #14]
 801348c:	2b00      	cmp	r3, #0
 801348e:	d007      	beq.n	80134a0 <USBD_StdEPReq+0x17e>
 8013490:	7bbb      	ldrb	r3, [r7, #14]
 8013492:	2b80      	cmp	r3, #128	; 0x80
 8013494:	d004      	beq.n	80134a0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8013496:	6839      	ldr	r1, [r7, #0]
 8013498:	6878      	ldr	r0, [r7, #4]
 801349a:	f000 fbfd 	bl	8013c98 <USBD_CtlError>
                break;
 801349e:	e091      	b.n	80135c4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80134a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	da0b      	bge.n	80134c0 <USBD_StdEPReq+0x19e>
 80134a8:	7bbb      	ldrb	r3, [r7, #14]
 80134aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80134ae:	4613      	mov	r3, r2
 80134b0:	009b      	lsls	r3, r3, #2
 80134b2:	4413      	add	r3, r2
 80134b4:	009b      	lsls	r3, r3, #2
 80134b6:	3310      	adds	r3, #16
 80134b8:	687a      	ldr	r2, [r7, #4]
 80134ba:	4413      	add	r3, r2
 80134bc:	3304      	adds	r3, #4
 80134be:	e00b      	b.n	80134d8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80134c0:	7bbb      	ldrb	r3, [r7, #14]
 80134c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80134c6:	4613      	mov	r3, r2
 80134c8:	009b      	lsls	r3, r3, #2
 80134ca:	4413      	add	r3, r2
 80134cc:	009b      	lsls	r3, r3, #2
 80134ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80134d2:	687a      	ldr	r2, [r7, #4]
 80134d4:	4413      	add	r3, r2
 80134d6:	3304      	adds	r3, #4
 80134d8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80134da:	68bb      	ldr	r3, [r7, #8]
 80134dc:	2200      	movs	r2, #0
 80134de:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80134e0:	68bb      	ldr	r3, [r7, #8]
 80134e2:	2202      	movs	r2, #2
 80134e4:	4619      	mov	r1, r3
 80134e6:	6878      	ldr	r0, [r7, #4]
 80134e8:	f000 fc47 	bl	8013d7a <USBD_CtlSendData>
              break;
 80134ec:	e06a      	b.n	80135c4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80134ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	da11      	bge.n	801351a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80134f6:	7bbb      	ldrb	r3, [r7, #14]
 80134f8:	f003 020f 	and.w	r2, r3, #15
 80134fc:	6879      	ldr	r1, [r7, #4]
 80134fe:	4613      	mov	r3, r2
 8013500:	009b      	lsls	r3, r3, #2
 8013502:	4413      	add	r3, r2
 8013504:	009b      	lsls	r3, r3, #2
 8013506:	440b      	add	r3, r1
 8013508:	3324      	adds	r3, #36	; 0x24
 801350a:	881b      	ldrh	r3, [r3, #0]
 801350c:	2b00      	cmp	r3, #0
 801350e:	d117      	bne.n	8013540 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8013510:	6839      	ldr	r1, [r7, #0]
 8013512:	6878      	ldr	r0, [r7, #4]
 8013514:	f000 fbc0 	bl	8013c98 <USBD_CtlError>
                  break;
 8013518:	e054      	b.n	80135c4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801351a:	7bbb      	ldrb	r3, [r7, #14]
 801351c:	f003 020f 	and.w	r2, r3, #15
 8013520:	6879      	ldr	r1, [r7, #4]
 8013522:	4613      	mov	r3, r2
 8013524:	009b      	lsls	r3, r3, #2
 8013526:	4413      	add	r3, r2
 8013528:	009b      	lsls	r3, r3, #2
 801352a:	440b      	add	r3, r1
 801352c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013530:	881b      	ldrh	r3, [r3, #0]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d104      	bne.n	8013540 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8013536:	6839      	ldr	r1, [r7, #0]
 8013538:	6878      	ldr	r0, [r7, #4]
 801353a:	f000 fbad 	bl	8013c98 <USBD_CtlError>
                  break;
 801353e:	e041      	b.n	80135c4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013540:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013544:	2b00      	cmp	r3, #0
 8013546:	da0b      	bge.n	8013560 <USBD_StdEPReq+0x23e>
 8013548:	7bbb      	ldrb	r3, [r7, #14]
 801354a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801354e:	4613      	mov	r3, r2
 8013550:	009b      	lsls	r3, r3, #2
 8013552:	4413      	add	r3, r2
 8013554:	009b      	lsls	r3, r3, #2
 8013556:	3310      	adds	r3, #16
 8013558:	687a      	ldr	r2, [r7, #4]
 801355a:	4413      	add	r3, r2
 801355c:	3304      	adds	r3, #4
 801355e:	e00b      	b.n	8013578 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013560:	7bbb      	ldrb	r3, [r7, #14]
 8013562:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013566:	4613      	mov	r3, r2
 8013568:	009b      	lsls	r3, r3, #2
 801356a:	4413      	add	r3, r2
 801356c:	009b      	lsls	r3, r3, #2
 801356e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013572:	687a      	ldr	r2, [r7, #4]
 8013574:	4413      	add	r3, r2
 8013576:	3304      	adds	r3, #4
 8013578:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801357a:	7bbb      	ldrb	r3, [r7, #14]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d002      	beq.n	8013586 <USBD_StdEPReq+0x264>
 8013580:	7bbb      	ldrb	r3, [r7, #14]
 8013582:	2b80      	cmp	r3, #128	; 0x80
 8013584:	d103      	bne.n	801358e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8013586:	68bb      	ldr	r3, [r7, #8]
 8013588:	2200      	movs	r2, #0
 801358a:	601a      	str	r2, [r3, #0]
 801358c:	e00e      	b.n	80135ac <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801358e:	7bbb      	ldrb	r3, [r7, #14]
 8013590:	4619      	mov	r1, r3
 8013592:	6878      	ldr	r0, [r7, #4]
 8013594:	f003 ffb1 	bl	80174fa <USBD_LL_IsStallEP>
 8013598:	4603      	mov	r3, r0
 801359a:	2b00      	cmp	r3, #0
 801359c:	d003      	beq.n	80135a6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 801359e:	68bb      	ldr	r3, [r7, #8]
 80135a0:	2201      	movs	r2, #1
 80135a2:	601a      	str	r2, [r3, #0]
 80135a4:	e002      	b.n	80135ac <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80135a6:	68bb      	ldr	r3, [r7, #8]
 80135a8:	2200      	movs	r2, #0
 80135aa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80135ac:	68bb      	ldr	r3, [r7, #8]
 80135ae:	2202      	movs	r2, #2
 80135b0:	4619      	mov	r1, r3
 80135b2:	6878      	ldr	r0, [r7, #4]
 80135b4:	f000 fbe1 	bl	8013d7a <USBD_CtlSendData>
              break;
 80135b8:	e004      	b.n	80135c4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80135ba:	6839      	ldr	r1, [r7, #0]
 80135bc:	6878      	ldr	r0, [r7, #4]
 80135be:	f000 fb6b 	bl	8013c98 <USBD_CtlError>
              break;
 80135c2:	bf00      	nop
          }
          break;
 80135c4:	e004      	b.n	80135d0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80135c6:	6839      	ldr	r1, [r7, #0]
 80135c8:	6878      	ldr	r0, [r7, #4]
 80135ca:	f000 fb65 	bl	8013c98 <USBD_CtlError>
          break;
 80135ce:	bf00      	nop
      }
      break;
 80135d0:	e004      	b.n	80135dc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80135d2:	6839      	ldr	r1, [r7, #0]
 80135d4:	6878      	ldr	r0, [r7, #4]
 80135d6:	f000 fb5f 	bl	8013c98 <USBD_CtlError>
      break;
 80135da:	bf00      	nop
  }

  return ret;
 80135dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80135de:	4618      	mov	r0, r3
 80135e0:	3710      	adds	r7, #16
 80135e2:	46bd      	mov	sp, r7
 80135e4:	bd80      	pop	{r7, pc}
	...

080135e8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80135e8:	b580      	push	{r7, lr}
 80135ea:	b084      	sub	sp, #16
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	6078      	str	r0, [r7, #4]
 80135f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80135f2:	2300      	movs	r3, #0
 80135f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80135f6:	2300      	movs	r3, #0
 80135f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80135fa:	2300      	movs	r3, #0
 80135fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80135fe:	683b      	ldr	r3, [r7, #0]
 8013600:	885b      	ldrh	r3, [r3, #2]
 8013602:	0a1b      	lsrs	r3, r3, #8
 8013604:	b29b      	uxth	r3, r3
 8013606:	3b01      	subs	r3, #1
 8013608:	2b0e      	cmp	r3, #14
 801360a:	f200 8152 	bhi.w	80138b2 <USBD_GetDescriptor+0x2ca>
 801360e:	a201      	add	r2, pc, #4	; (adr r2, 8013614 <USBD_GetDescriptor+0x2c>)
 8013610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013614:	08013685 	.word	0x08013685
 8013618:	0801369d 	.word	0x0801369d
 801361c:	080136dd 	.word	0x080136dd
 8013620:	080138b3 	.word	0x080138b3
 8013624:	080138b3 	.word	0x080138b3
 8013628:	08013853 	.word	0x08013853
 801362c:	0801387f 	.word	0x0801387f
 8013630:	080138b3 	.word	0x080138b3
 8013634:	080138b3 	.word	0x080138b3
 8013638:	080138b3 	.word	0x080138b3
 801363c:	080138b3 	.word	0x080138b3
 8013640:	080138b3 	.word	0x080138b3
 8013644:	080138b3 	.word	0x080138b3
 8013648:	080138b3 	.word	0x080138b3
 801364c:	08013651 	.word	0x08013651
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013656:	69db      	ldr	r3, [r3, #28]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d00b      	beq.n	8013674 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013662:	69db      	ldr	r3, [r3, #28]
 8013664:	687a      	ldr	r2, [r7, #4]
 8013666:	7c12      	ldrb	r2, [r2, #16]
 8013668:	f107 0108 	add.w	r1, r7, #8
 801366c:	4610      	mov	r0, r2
 801366e:	4798      	blx	r3
 8013670:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013672:	e126      	b.n	80138c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8013674:	6839      	ldr	r1, [r7, #0]
 8013676:	6878      	ldr	r0, [r7, #4]
 8013678:	f000 fb0e 	bl	8013c98 <USBD_CtlError>
        err++;
 801367c:	7afb      	ldrb	r3, [r7, #11]
 801367e:	3301      	adds	r3, #1
 8013680:	72fb      	strb	r3, [r7, #11]
      break;
 8013682:	e11e      	b.n	80138c2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	687a      	ldr	r2, [r7, #4]
 801368e:	7c12      	ldrb	r2, [r2, #16]
 8013690:	f107 0108 	add.w	r1, r7, #8
 8013694:	4610      	mov	r0, r2
 8013696:	4798      	blx	r3
 8013698:	60f8      	str	r0, [r7, #12]
      break;
 801369a:	e112      	b.n	80138c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	7c1b      	ldrb	r3, [r3, #16]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d10d      	bne.n	80136c0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80136aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80136ac:	f107 0208 	add.w	r2, r7, #8
 80136b0:	4610      	mov	r0, r2
 80136b2:	4798      	blx	r3
 80136b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	3301      	adds	r3, #1
 80136ba:	2202      	movs	r2, #2
 80136bc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80136be:	e100      	b.n	80138c2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80136c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136c8:	f107 0208 	add.w	r2, r7, #8
 80136cc:	4610      	mov	r0, r2
 80136ce:	4798      	blx	r3
 80136d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	3301      	adds	r3, #1
 80136d6:	2202      	movs	r2, #2
 80136d8:	701a      	strb	r2, [r3, #0]
      break;
 80136da:	e0f2      	b.n	80138c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80136dc:	683b      	ldr	r3, [r7, #0]
 80136de:	885b      	ldrh	r3, [r3, #2]
 80136e0:	b2db      	uxtb	r3, r3
 80136e2:	2b05      	cmp	r3, #5
 80136e4:	f200 80ac 	bhi.w	8013840 <USBD_GetDescriptor+0x258>
 80136e8:	a201      	add	r2, pc, #4	; (adr r2, 80136f0 <USBD_GetDescriptor+0x108>)
 80136ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136ee:	bf00      	nop
 80136f0:	08013709 	.word	0x08013709
 80136f4:	0801373d 	.word	0x0801373d
 80136f8:	08013771 	.word	0x08013771
 80136fc:	080137a5 	.word	0x080137a5
 8013700:	080137d9 	.word	0x080137d9
 8013704:	0801380d 	.word	0x0801380d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801370e:	685b      	ldr	r3, [r3, #4]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d00b      	beq.n	801372c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801371a:	685b      	ldr	r3, [r3, #4]
 801371c:	687a      	ldr	r2, [r7, #4]
 801371e:	7c12      	ldrb	r2, [r2, #16]
 8013720:	f107 0108 	add.w	r1, r7, #8
 8013724:	4610      	mov	r0, r2
 8013726:	4798      	blx	r3
 8013728:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801372a:	e091      	b.n	8013850 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801372c:	6839      	ldr	r1, [r7, #0]
 801372e:	6878      	ldr	r0, [r7, #4]
 8013730:	f000 fab2 	bl	8013c98 <USBD_CtlError>
            err++;
 8013734:	7afb      	ldrb	r3, [r7, #11]
 8013736:	3301      	adds	r3, #1
 8013738:	72fb      	strb	r3, [r7, #11]
          break;
 801373a:	e089      	b.n	8013850 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013742:	689b      	ldr	r3, [r3, #8]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d00b      	beq.n	8013760 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801374e:	689b      	ldr	r3, [r3, #8]
 8013750:	687a      	ldr	r2, [r7, #4]
 8013752:	7c12      	ldrb	r2, [r2, #16]
 8013754:	f107 0108 	add.w	r1, r7, #8
 8013758:	4610      	mov	r0, r2
 801375a:	4798      	blx	r3
 801375c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801375e:	e077      	b.n	8013850 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013760:	6839      	ldr	r1, [r7, #0]
 8013762:	6878      	ldr	r0, [r7, #4]
 8013764:	f000 fa98 	bl	8013c98 <USBD_CtlError>
            err++;
 8013768:	7afb      	ldrb	r3, [r7, #11]
 801376a:	3301      	adds	r3, #1
 801376c:	72fb      	strb	r3, [r7, #11]
          break;
 801376e:	e06f      	b.n	8013850 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013776:	68db      	ldr	r3, [r3, #12]
 8013778:	2b00      	cmp	r3, #0
 801377a:	d00b      	beq.n	8013794 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013782:	68db      	ldr	r3, [r3, #12]
 8013784:	687a      	ldr	r2, [r7, #4]
 8013786:	7c12      	ldrb	r2, [r2, #16]
 8013788:	f107 0108 	add.w	r1, r7, #8
 801378c:	4610      	mov	r0, r2
 801378e:	4798      	blx	r3
 8013790:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013792:	e05d      	b.n	8013850 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013794:	6839      	ldr	r1, [r7, #0]
 8013796:	6878      	ldr	r0, [r7, #4]
 8013798:	f000 fa7e 	bl	8013c98 <USBD_CtlError>
            err++;
 801379c:	7afb      	ldrb	r3, [r7, #11]
 801379e:	3301      	adds	r3, #1
 80137a0:	72fb      	strb	r3, [r7, #11]
          break;
 80137a2:	e055      	b.n	8013850 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80137aa:	691b      	ldr	r3, [r3, #16]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d00b      	beq.n	80137c8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80137b6:	691b      	ldr	r3, [r3, #16]
 80137b8:	687a      	ldr	r2, [r7, #4]
 80137ba:	7c12      	ldrb	r2, [r2, #16]
 80137bc:	f107 0108 	add.w	r1, r7, #8
 80137c0:	4610      	mov	r0, r2
 80137c2:	4798      	blx	r3
 80137c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80137c6:	e043      	b.n	8013850 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80137c8:	6839      	ldr	r1, [r7, #0]
 80137ca:	6878      	ldr	r0, [r7, #4]
 80137cc:	f000 fa64 	bl	8013c98 <USBD_CtlError>
            err++;
 80137d0:	7afb      	ldrb	r3, [r7, #11]
 80137d2:	3301      	adds	r3, #1
 80137d4:	72fb      	strb	r3, [r7, #11]
          break;
 80137d6:	e03b      	b.n	8013850 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80137de:	695b      	ldr	r3, [r3, #20]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d00b      	beq.n	80137fc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80137ea:	695b      	ldr	r3, [r3, #20]
 80137ec:	687a      	ldr	r2, [r7, #4]
 80137ee:	7c12      	ldrb	r2, [r2, #16]
 80137f0:	f107 0108 	add.w	r1, r7, #8
 80137f4:	4610      	mov	r0, r2
 80137f6:	4798      	blx	r3
 80137f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80137fa:	e029      	b.n	8013850 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80137fc:	6839      	ldr	r1, [r7, #0]
 80137fe:	6878      	ldr	r0, [r7, #4]
 8013800:	f000 fa4a 	bl	8013c98 <USBD_CtlError>
            err++;
 8013804:	7afb      	ldrb	r3, [r7, #11]
 8013806:	3301      	adds	r3, #1
 8013808:	72fb      	strb	r3, [r7, #11]
          break;
 801380a:	e021      	b.n	8013850 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8013812:	699b      	ldr	r3, [r3, #24]
 8013814:	2b00      	cmp	r3, #0
 8013816:	d00b      	beq.n	8013830 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801381e:	699b      	ldr	r3, [r3, #24]
 8013820:	687a      	ldr	r2, [r7, #4]
 8013822:	7c12      	ldrb	r2, [r2, #16]
 8013824:	f107 0108 	add.w	r1, r7, #8
 8013828:	4610      	mov	r0, r2
 801382a:	4798      	blx	r3
 801382c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801382e:	e00f      	b.n	8013850 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8013830:	6839      	ldr	r1, [r7, #0]
 8013832:	6878      	ldr	r0, [r7, #4]
 8013834:	f000 fa30 	bl	8013c98 <USBD_CtlError>
            err++;
 8013838:	7afb      	ldrb	r3, [r7, #11]
 801383a:	3301      	adds	r3, #1
 801383c:	72fb      	strb	r3, [r7, #11]
          break;
 801383e:	e007      	b.n	8013850 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8013840:	6839      	ldr	r1, [r7, #0]
 8013842:	6878      	ldr	r0, [r7, #4]
 8013844:	f000 fa28 	bl	8013c98 <USBD_CtlError>
          err++;
 8013848:	7afb      	ldrb	r3, [r7, #11]
 801384a:	3301      	adds	r3, #1
 801384c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 801384e:	bf00      	nop
      }
      break;
 8013850:	e037      	b.n	80138c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	7c1b      	ldrb	r3, [r3, #16]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d109      	bne.n	801386e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013862:	f107 0208 	add.w	r2, r7, #8
 8013866:	4610      	mov	r0, r2
 8013868:	4798      	blx	r3
 801386a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801386c:	e029      	b.n	80138c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801386e:	6839      	ldr	r1, [r7, #0]
 8013870:	6878      	ldr	r0, [r7, #4]
 8013872:	f000 fa11 	bl	8013c98 <USBD_CtlError>
        err++;
 8013876:	7afb      	ldrb	r3, [r7, #11]
 8013878:	3301      	adds	r3, #1
 801387a:	72fb      	strb	r3, [r7, #11]
      break;
 801387c:	e021      	b.n	80138c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	7c1b      	ldrb	r3, [r3, #16]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d10d      	bne.n	80138a2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801388e:	f107 0208 	add.w	r2, r7, #8
 8013892:	4610      	mov	r0, r2
 8013894:	4798      	blx	r3
 8013896:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	3301      	adds	r3, #1
 801389c:	2207      	movs	r2, #7
 801389e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80138a0:	e00f      	b.n	80138c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80138a2:	6839      	ldr	r1, [r7, #0]
 80138a4:	6878      	ldr	r0, [r7, #4]
 80138a6:	f000 f9f7 	bl	8013c98 <USBD_CtlError>
        err++;
 80138aa:	7afb      	ldrb	r3, [r7, #11]
 80138ac:	3301      	adds	r3, #1
 80138ae:	72fb      	strb	r3, [r7, #11]
      break;
 80138b0:	e007      	b.n	80138c2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80138b2:	6839      	ldr	r1, [r7, #0]
 80138b4:	6878      	ldr	r0, [r7, #4]
 80138b6:	f000 f9ef 	bl	8013c98 <USBD_CtlError>
      err++;
 80138ba:	7afb      	ldrb	r3, [r7, #11]
 80138bc:	3301      	adds	r3, #1
 80138be:	72fb      	strb	r3, [r7, #11]
      break;
 80138c0:	bf00      	nop
  }

  if (err != 0U)
 80138c2:	7afb      	ldrb	r3, [r7, #11]
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d11e      	bne.n	8013906 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80138c8:	683b      	ldr	r3, [r7, #0]
 80138ca:	88db      	ldrh	r3, [r3, #6]
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d016      	beq.n	80138fe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80138d0:	893b      	ldrh	r3, [r7, #8]
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d00e      	beq.n	80138f4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80138d6:	683b      	ldr	r3, [r7, #0]
 80138d8:	88da      	ldrh	r2, [r3, #6]
 80138da:	893b      	ldrh	r3, [r7, #8]
 80138dc:	4293      	cmp	r3, r2
 80138de:	bf28      	it	cs
 80138e0:	4613      	movcs	r3, r2
 80138e2:	b29b      	uxth	r3, r3
 80138e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80138e6:	893b      	ldrh	r3, [r7, #8]
 80138e8:	461a      	mov	r2, r3
 80138ea:	68f9      	ldr	r1, [r7, #12]
 80138ec:	6878      	ldr	r0, [r7, #4]
 80138ee:	f000 fa44 	bl	8013d7a <USBD_CtlSendData>
 80138f2:	e009      	b.n	8013908 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80138f4:	6839      	ldr	r1, [r7, #0]
 80138f6:	6878      	ldr	r0, [r7, #4]
 80138f8:	f000 f9ce 	bl	8013c98 <USBD_CtlError>
 80138fc:	e004      	b.n	8013908 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80138fe:	6878      	ldr	r0, [r7, #4]
 8013900:	f000 fa78 	bl	8013df4 <USBD_CtlSendStatus>
 8013904:	e000      	b.n	8013908 <USBD_GetDescriptor+0x320>
    return;
 8013906:	bf00      	nop
  }
}
 8013908:	3710      	adds	r7, #16
 801390a:	46bd      	mov	sp, r7
 801390c:	bd80      	pop	{r7, pc}
 801390e:	bf00      	nop

08013910 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013910:	b580      	push	{r7, lr}
 8013912:	b084      	sub	sp, #16
 8013914:	af00      	add	r7, sp, #0
 8013916:	6078      	str	r0, [r7, #4]
 8013918:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801391a:	683b      	ldr	r3, [r7, #0]
 801391c:	889b      	ldrh	r3, [r3, #4]
 801391e:	2b00      	cmp	r3, #0
 8013920:	d131      	bne.n	8013986 <USBD_SetAddress+0x76>
 8013922:	683b      	ldr	r3, [r7, #0]
 8013924:	88db      	ldrh	r3, [r3, #6]
 8013926:	2b00      	cmp	r3, #0
 8013928:	d12d      	bne.n	8013986 <USBD_SetAddress+0x76>
 801392a:	683b      	ldr	r3, [r7, #0]
 801392c:	885b      	ldrh	r3, [r3, #2]
 801392e:	2b7f      	cmp	r3, #127	; 0x7f
 8013930:	d829      	bhi.n	8013986 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8013932:	683b      	ldr	r3, [r7, #0]
 8013934:	885b      	ldrh	r3, [r3, #2]
 8013936:	b2db      	uxtb	r3, r3
 8013938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801393c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013944:	b2db      	uxtb	r3, r3
 8013946:	2b03      	cmp	r3, #3
 8013948:	d104      	bne.n	8013954 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801394a:	6839      	ldr	r1, [r7, #0]
 801394c:	6878      	ldr	r0, [r7, #4]
 801394e:	f000 f9a3 	bl	8013c98 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013952:	e01d      	b.n	8013990 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	7bfa      	ldrb	r2, [r7, #15]
 8013958:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801395c:	7bfb      	ldrb	r3, [r7, #15]
 801395e:	4619      	mov	r1, r3
 8013960:	6878      	ldr	r0, [r7, #4]
 8013962:	f003 fdf6 	bl	8017552 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8013966:	6878      	ldr	r0, [r7, #4]
 8013968:	f000 fa44 	bl	8013df4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801396c:	7bfb      	ldrb	r3, [r7, #15]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d004      	beq.n	801397c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	2202      	movs	r2, #2
 8013976:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801397a:	e009      	b.n	8013990 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	2201      	movs	r2, #1
 8013980:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013984:	e004      	b.n	8013990 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8013986:	6839      	ldr	r1, [r7, #0]
 8013988:	6878      	ldr	r0, [r7, #4]
 801398a:	f000 f985 	bl	8013c98 <USBD_CtlError>
  }
}
 801398e:	bf00      	nop
 8013990:	bf00      	nop
 8013992:	3710      	adds	r7, #16
 8013994:	46bd      	mov	sp, r7
 8013996:	bd80      	pop	{r7, pc}

08013998 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013998:	b580      	push	{r7, lr}
 801399a:	b084      	sub	sp, #16
 801399c:	af00      	add	r7, sp, #0
 801399e:	6078      	str	r0, [r7, #4]
 80139a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80139a2:	2300      	movs	r3, #0
 80139a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80139a6:	683b      	ldr	r3, [r7, #0]
 80139a8:	885b      	ldrh	r3, [r3, #2]
 80139aa:	b2da      	uxtb	r2, r3
 80139ac:	4b4c      	ldr	r3, [pc, #304]	; (8013ae0 <USBD_SetConfig+0x148>)
 80139ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80139b0:	4b4b      	ldr	r3, [pc, #300]	; (8013ae0 <USBD_SetConfig+0x148>)
 80139b2:	781b      	ldrb	r3, [r3, #0]
 80139b4:	2b01      	cmp	r3, #1
 80139b6:	d905      	bls.n	80139c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80139b8:	6839      	ldr	r1, [r7, #0]
 80139ba:	6878      	ldr	r0, [r7, #4]
 80139bc:	f000 f96c 	bl	8013c98 <USBD_CtlError>
    return USBD_FAIL;
 80139c0:	2303      	movs	r3, #3
 80139c2:	e088      	b.n	8013ad6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80139ca:	b2db      	uxtb	r3, r3
 80139cc:	2b02      	cmp	r3, #2
 80139ce:	d002      	beq.n	80139d6 <USBD_SetConfig+0x3e>
 80139d0:	2b03      	cmp	r3, #3
 80139d2:	d025      	beq.n	8013a20 <USBD_SetConfig+0x88>
 80139d4:	e071      	b.n	8013aba <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80139d6:	4b42      	ldr	r3, [pc, #264]	; (8013ae0 <USBD_SetConfig+0x148>)
 80139d8:	781b      	ldrb	r3, [r3, #0]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d01c      	beq.n	8013a18 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80139de:	4b40      	ldr	r3, [pc, #256]	; (8013ae0 <USBD_SetConfig+0x148>)
 80139e0:	781b      	ldrb	r3, [r3, #0]
 80139e2:	461a      	mov	r2, r3
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80139e8:	4b3d      	ldr	r3, [pc, #244]	; (8013ae0 <USBD_SetConfig+0x148>)
 80139ea:	781b      	ldrb	r3, [r3, #0]
 80139ec:	4619      	mov	r1, r3
 80139ee:	6878      	ldr	r0, [r7, #4]
 80139f0:	f7ff f91f 	bl	8012c32 <USBD_SetClassConfig>
 80139f4:	4603      	mov	r3, r0
 80139f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80139f8:	7bfb      	ldrb	r3, [r7, #15]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d004      	beq.n	8013a08 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80139fe:	6839      	ldr	r1, [r7, #0]
 8013a00:	6878      	ldr	r0, [r7, #4]
 8013a02:	f000 f949 	bl	8013c98 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013a06:	e065      	b.n	8013ad4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8013a08:	6878      	ldr	r0, [r7, #4]
 8013a0a:	f000 f9f3 	bl	8013df4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	2203      	movs	r2, #3
 8013a12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8013a16:	e05d      	b.n	8013ad4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8013a18:	6878      	ldr	r0, [r7, #4]
 8013a1a:	f000 f9eb 	bl	8013df4 <USBD_CtlSendStatus>
      break;
 8013a1e:	e059      	b.n	8013ad4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8013a20:	4b2f      	ldr	r3, [pc, #188]	; (8013ae0 <USBD_SetConfig+0x148>)
 8013a22:	781b      	ldrb	r3, [r3, #0]
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d112      	bne.n	8013a4e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	2202      	movs	r2, #2
 8013a2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8013a30:	4b2b      	ldr	r3, [pc, #172]	; (8013ae0 <USBD_SetConfig+0x148>)
 8013a32:	781b      	ldrb	r3, [r3, #0]
 8013a34:	461a      	mov	r2, r3
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013a3a:	4b29      	ldr	r3, [pc, #164]	; (8013ae0 <USBD_SetConfig+0x148>)
 8013a3c:	781b      	ldrb	r3, [r3, #0]
 8013a3e:	4619      	mov	r1, r3
 8013a40:	6878      	ldr	r0, [r7, #4]
 8013a42:	f7ff f912 	bl	8012c6a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8013a46:	6878      	ldr	r0, [r7, #4]
 8013a48:	f000 f9d4 	bl	8013df4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013a4c:	e042      	b.n	8013ad4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8013a4e:	4b24      	ldr	r3, [pc, #144]	; (8013ae0 <USBD_SetConfig+0x148>)
 8013a50:	781b      	ldrb	r3, [r3, #0]
 8013a52:	461a      	mov	r2, r3
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	685b      	ldr	r3, [r3, #4]
 8013a58:	429a      	cmp	r2, r3
 8013a5a:	d02a      	beq.n	8013ab2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	685b      	ldr	r3, [r3, #4]
 8013a60:	b2db      	uxtb	r3, r3
 8013a62:	4619      	mov	r1, r3
 8013a64:	6878      	ldr	r0, [r7, #4]
 8013a66:	f7ff f900 	bl	8012c6a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8013a6a:	4b1d      	ldr	r3, [pc, #116]	; (8013ae0 <USBD_SetConfig+0x148>)
 8013a6c:	781b      	ldrb	r3, [r3, #0]
 8013a6e:	461a      	mov	r2, r3
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013a74:	4b1a      	ldr	r3, [pc, #104]	; (8013ae0 <USBD_SetConfig+0x148>)
 8013a76:	781b      	ldrb	r3, [r3, #0]
 8013a78:	4619      	mov	r1, r3
 8013a7a:	6878      	ldr	r0, [r7, #4]
 8013a7c:	f7ff f8d9 	bl	8012c32 <USBD_SetClassConfig>
 8013a80:	4603      	mov	r3, r0
 8013a82:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8013a84:	7bfb      	ldrb	r3, [r7, #15]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d00f      	beq.n	8013aaa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8013a8a:	6839      	ldr	r1, [r7, #0]
 8013a8c:	6878      	ldr	r0, [r7, #4]
 8013a8e:	f000 f903 	bl	8013c98 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	685b      	ldr	r3, [r3, #4]
 8013a96:	b2db      	uxtb	r3, r3
 8013a98:	4619      	mov	r1, r3
 8013a9a:	6878      	ldr	r0, [r7, #4]
 8013a9c:	f7ff f8e5 	bl	8012c6a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	2202      	movs	r2, #2
 8013aa4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8013aa8:	e014      	b.n	8013ad4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8013aaa:	6878      	ldr	r0, [r7, #4]
 8013aac:	f000 f9a2 	bl	8013df4 <USBD_CtlSendStatus>
      break;
 8013ab0:	e010      	b.n	8013ad4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8013ab2:	6878      	ldr	r0, [r7, #4]
 8013ab4:	f000 f99e 	bl	8013df4 <USBD_CtlSendStatus>
      break;
 8013ab8:	e00c      	b.n	8013ad4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8013aba:	6839      	ldr	r1, [r7, #0]
 8013abc:	6878      	ldr	r0, [r7, #4]
 8013abe:	f000 f8eb 	bl	8013c98 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013ac2:	4b07      	ldr	r3, [pc, #28]	; (8013ae0 <USBD_SetConfig+0x148>)
 8013ac4:	781b      	ldrb	r3, [r3, #0]
 8013ac6:	4619      	mov	r1, r3
 8013ac8:	6878      	ldr	r0, [r7, #4]
 8013aca:	f7ff f8ce 	bl	8012c6a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8013ace:	2303      	movs	r3, #3
 8013ad0:	73fb      	strb	r3, [r7, #15]
      break;
 8013ad2:	bf00      	nop
  }

  return ret;
 8013ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ad6:	4618      	mov	r0, r3
 8013ad8:	3710      	adds	r7, #16
 8013ada:	46bd      	mov	sp, r7
 8013adc:	bd80      	pop	{r7, pc}
 8013ade:	bf00      	nop
 8013ae0:	20000200 	.word	0x20000200

08013ae4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013ae4:	b580      	push	{r7, lr}
 8013ae6:	b082      	sub	sp, #8
 8013ae8:	af00      	add	r7, sp, #0
 8013aea:	6078      	str	r0, [r7, #4]
 8013aec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8013aee:	683b      	ldr	r3, [r7, #0]
 8013af0:	88db      	ldrh	r3, [r3, #6]
 8013af2:	2b01      	cmp	r3, #1
 8013af4:	d004      	beq.n	8013b00 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8013af6:	6839      	ldr	r1, [r7, #0]
 8013af8:	6878      	ldr	r0, [r7, #4]
 8013afa:	f000 f8cd 	bl	8013c98 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8013afe:	e023      	b.n	8013b48 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013b06:	b2db      	uxtb	r3, r3
 8013b08:	2b02      	cmp	r3, #2
 8013b0a:	dc02      	bgt.n	8013b12 <USBD_GetConfig+0x2e>
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	dc03      	bgt.n	8013b18 <USBD_GetConfig+0x34>
 8013b10:	e015      	b.n	8013b3e <USBD_GetConfig+0x5a>
 8013b12:	2b03      	cmp	r3, #3
 8013b14:	d00b      	beq.n	8013b2e <USBD_GetConfig+0x4a>
 8013b16:	e012      	b.n	8013b3e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	3308      	adds	r3, #8
 8013b22:	2201      	movs	r2, #1
 8013b24:	4619      	mov	r1, r3
 8013b26:	6878      	ldr	r0, [r7, #4]
 8013b28:	f000 f927 	bl	8013d7a <USBD_CtlSendData>
        break;
 8013b2c:	e00c      	b.n	8013b48 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	3304      	adds	r3, #4
 8013b32:	2201      	movs	r2, #1
 8013b34:	4619      	mov	r1, r3
 8013b36:	6878      	ldr	r0, [r7, #4]
 8013b38:	f000 f91f 	bl	8013d7a <USBD_CtlSendData>
        break;
 8013b3c:	e004      	b.n	8013b48 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8013b3e:	6839      	ldr	r1, [r7, #0]
 8013b40:	6878      	ldr	r0, [r7, #4]
 8013b42:	f000 f8a9 	bl	8013c98 <USBD_CtlError>
        break;
 8013b46:	bf00      	nop
}
 8013b48:	bf00      	nop
 8013b4a:	3708      	adds	r7, #8
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	bd80      	pop	{r7, pc}

08013b50 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b082      	sub	sp, #8
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	6078      	str	r0, [r7, #4]
 8013b58:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013b60:	b2db      	uxtb	r3, r3
 8013b62:	3b01      	subs	r3, #1
 8013b64:	2b02      	cmp	r3, #2
 8013b66:	d81e      	bhi.n	8013ba6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013b68:	683b      	ldr	r3, [r7, #0]
 8013b6a:	88db      	ldrh	r3, [r3, #6]
 8013b6c:	2b02      	cmp	r3, #2
 8013b6e:	d004      	beq.n	8013b7a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8013b70:	6839      	ldr	r1, [r7, #0]
 8013b72:	6878      	ldr	r0, [r7, #4]
 8013b74:	f000 f890 	bl	8013c98 <USBD_CtlError>
        break;
 8013b78:	e01a      	b.n	8013bb0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	2201      	movs	r2, #1
 8013b7e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d005      	beq.n	8013b96 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	68db      	ldr	r3, [r3, #12]
 8013b8e:	f043 0202 	orr.w	r2, r3, #2
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	330c      	adds	r3, #12
 8013b9a:	2202      	movs	r2, #2
 8013b9c:	4619      	mov	r1, r3
 8013b9e:	6878      	ldr	r0, [r7, #4]
 8013ba0:	f000 f8eb 	bl	8013d7a <USBD_CtlSendData>
      break;
 8013ba4:	e004      	b.n	8013bb0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8013ba6:	6839      	ldr	r1, [r7, #0]
 8013ba8:	6878      	ldr	r0, [r7, #4]
 8013baa:	f000 f875 	bl	8013c98 <USBD_CtlError>
      break;
 8013bae:	bf00      	nop
  }
}
 8013bb0:	bf00      	nop
 8013bb2:	3708      	adds	r7, #8
 8013bb4:	46bd      	mov	sp, r7
 8013bb6:	bd80      	pop	{r7, pc}

08013bb8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013bb8:	b580      	push	{r7, lr}
 8013bba:	b082      	sub	sp, #8
 8013bbc:	af00      	add	r7, sp, #0
 8013bbe:	6078      	str	r0, [r7, #4]
 8013bc0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013bc2:	683b      	ldr	r3, [r7, #0]
 8013bc4:	885b      	ldrh	r3, [r3, #2]
 8013bc6:	2b01      	cmp	r3, #1
 8013bc8:	d106      	bne.n	8013bd8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	2201      	movs	r2, #1
 8013bce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8013bd2:	6878      	ldr	r0, [r7, #4]
 8013bd4:	f000 f90e 	bl	8013df4 <USBD_CtlSendStatus>
  }
}
 8013bd8:	bf00      	nop
 8013bda:	3708      	adds	r7, #8
 8013bdc:	46bd      	mov	sp, r7
 8013bde:	bd80      	pop	{r7, pc}

08013be0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013be0:	b580      	push	{r7, lr}
 8013be2:	b082      	sub	sp, #8
 8013be4:	af00      	add	r7, sp, #0
 8013be6:	6078      	str	r0, [r7, #4]
 8013be8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013bf0:	b2db      	uxtb	r3, r3
 8013bf2:	3b01      	subs	r3, #1
 8013bf4:	2b02      	cmp	r3, #2
 8013bf6:	d80b      	bhi.n	8013c10 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013bf8:	683b      	ldr	r3, [r7, #0]
 8013bfa:	885b      	ldrh	r3, [r3, #2]
 8013bfc:	2b01      	cmp	r3, #1
 8013bfe:	d10c      	bne.n	8013c1a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	2200      	movs	r2, #0
 8013c04:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8013c08:	6878      	ldr	r0, [r7, #4]
 8013c0a:	f000 f8f3 	bl	8013df4 <USBD_CtlSendStatus>
      }
      break;
 8013c0e:	e004      	b.n	8013c1a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8013c10:	6839      	ldr	r1, [r7, #0]
 8013c12:	6878      	ldr	r0, [r7, #4]
 8013c14:	f000 f840 	bl	8013c98 <USBD_CtlError>
      break;
 8013c18:	e000      	b.n	8013c1c <USBD_ClrFeature+0x3c>
      break;
 8013c1a:	bf00      	nop
  }
}
 8013c1c:	bf00      	nop
 8013c1e:	3708      	adds	r7, #8
 8013c20:	46bd      	mov	sp, r7
 8013c22:	bd80      	pop	{r7, pc}

08013c24 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8013c24:	b580      	push	{r7, lr}
 8013c26:	b084      	sub	sp, #16
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	6078      	str	r0, [r7, #4]
 8013c2c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8013c2e:	683b      	ldr	r3, [r7, #0]
 8013c30:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	781a      	ldrb	r2, [r3, #0]
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	3301      	adds	r3, #1
 8013c3e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	781a      	ldrb	r2, [r3, #0]
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	3301      	adds	r3, #1
 8013c4c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8013c4e:	68f8      	ldr	r0, [r7, #12]
 8013c50:	f7ff fa92 	bl	8013178 <SWAPBYTE>
 8013c54:	4603      	mov	r3, r0
 8013c56:	461a      	mov	r2, r3
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	3301      	adds	r3, #1
 8013c60:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	3301      	adds	r3, #1
 8013c66:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8013c68:	68f8      	ldr	r0, [r7, #12]
 8013c6a:	f7ff fa85 	bl	8013178 <SWAPBYTE>
 8013c6e:	4603      	mov	r3, r0
 8013c70:	461a      	mov	r2, r3
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	3301      	adds	r3, #1
 8013c7a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	3301      	adds	r3, #1
 8013c80:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8013c82:	68f8      	ldr	r0, [r7, #12]
 8013c84:	f7ff fa78 	bl	8013178 <SWAPBYTE>
 8013c88:	4603      	mov	r3, r0
 8013c8a:	461a      	mov	r2, r3
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	80da      	strh	r2, [r3, #6]
}
 8013c90:	bf00      	nop
 8013c92:	3710      	adds	r7, #16
 8013c94:	46bd      	mov	sp, r7
 8013c96:	bd80      	pop	{r7, pc}

08013c98 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013c98:	b580      	push	{r7, lr}
 8013c9a:	b082      	sub	sp, #8
 8013c9c:	af00      	add	r7, sp, #0
 8013c9e:	6078      	str	r0, [r7, #4]
 8013ca0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013ca2:	2180      	movs	r1, #128	; 0x80
 8013ca4:	6878      	ldr	r0, [r7, #4]
 8013ca6:	f003 fbea 	bl	801747e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8013caa:	2100      	movs	r1, #0
 8013cac:	6878      	ldr	r0, [r7, #4]
 8013cae:	f003 fbe6 	bl	801747e <USBD_LL_StallEP>
}
 8013cb2:	bf00      	nop
 8013cb4:	3708      	adds	r7, #8
 8013cb6:	46bd      	mov	sp, r7
 8013cb8:	bd80      	pop	{r7, pc}

08013cba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8013cba:	b580      	push	{r7, lr}
 8013cbc:	b086      	sub	sp, #24
 8013cbe:	af00      	add	r7, sp, #0
 8013cc0:	60f8      	str	r0, [r7, #12]
 8013cc2:	60b9      	str	r1, [r7, #8]
 8013cc4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d036      	beq.n	8013d3e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8013cd4:	6938      	ldr	r0, [r7, #16]
 8013cd6:	f000 f836 	bl	8013d46 <USBD_GetLen>
 8013cda:	4603      	mov	r3, r0
 8013cdc:	3301      	adds	r3, #1
 8013cde:	b29b      	uxth	r3, r3
 8013ce0:	005b      	lsls	r3, r3, #1
 8013ce2:	b29a      	uxth	r2, r3
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8013ce8:	7dfb      	ldrb	r3, [r7, #23]
 8013cea:	68ba      	ldr	r2, [r7, #8]
 8013cec:	4413      	add	r3, r2
 8013cee:	687a      	ldr	r2, [r7, #4]
 8013cf0:	7812      	ldrb	r2, [r2, #0]
 8013cf2:	701a      	strb	r2, [r3, #0]
  idx++;
 8013cf4:	7dfb      	ldrb	r3, [r7, #23]
 8013cf6:	3301      	adds	r3, #1
 8013cf8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8013cfa:	7dfb      	ldrb	r3, [r7, #23]
 8013cfc:	68ba      	ldr	r2, [r7, #8]
 8013cfe:	4413      	add	r3, r2
 8013d00:	2203      	movs	r2, #3
 8013d02:	701a      	strb	r2, [r3, #0]
  idx++;
 8013d04:	7dfb      	ldrb	r3, [r7, #23]
 8013d06:	3301      	adds	r3, #1
 8013d08:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8013d0a:	e013      	b.n	8013d34 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8013d0c:	7dfb      	ldrb	r3, [r7, #23]
 8013d0e:	68ba      	ldr	r2, [r7, #8]
 8013d10:	4413      	add	r3, r2
 8013d12:	693a      	ldr	r2, [r7, #16]
 8013d14:	7812      	ldrb	r2, [r2, #0]
 8013d16:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8013d18:	693b      	ldr	r3, [r7, #16]
 8013d1a:	3301      	adds	r3, #1
 8013d1c:	613b      	str	r3, [r7, #16]
    idx++;
 8013d1e:	7dfb      	ldrb	r3, [r7, #23]
 8013d20:	3301      	adds	r3, #1
 8013d22:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8013d24:	7dfb      	ldrb	r3, [r7, #23]
 8013d26:	68ba      	ldr	r2, [r7, #8]
 8013d28:	4413      	add	r3, r2
 8013d2a:	2200      	movs	r2, #0
 8013d2c:	701a      	strb	r2, [r3, #0]
    idx++;
 8013d2e:	7dfb      	ldrb	r3, [r7, #23]
 8013d30:	3301      	adds	r3, #1
 8013d32:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8013d34:	693b      	ldr	r3, [r7, #16]
 8013d36:	781b      	ldrb	r3, [r3, #0]
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d1e7      	bne.n	8013d0c <USBD_GetString+0x52>
 8013d3c:	e000      	b.n	8013d40 <USBD_GetString+0x86>
    return;
 8013d3e:	bf00      	nop
  }
}
 8013d40:	3718      	adds	r7, #24
 8013d42:	46bd      	mov	sp, r7
 8013d44:	bd80      	pop	{r7, pc}

08013d46 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8013d46:	b480      	push	{r7}
 8013d48:	b085      	sub	sp, #20
 8013d4a:	af00      	add	r7, sp, #0
 8013d4c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8013d4e:	2300      	movs	r3, #0
 8013d50:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8013d56:	e005      	b.n	8013d64 <USBD_GetLen+0x1e>
  {
    len++;
 8013d58:	7bfb      	ldrb	r3, [r7, #15]
 8013d5a:	3301      	adds	r3, #1
 8013d5c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8013d5e:	68bb      	ldr	r3, [r7, #8]
 8013d60:	3301      	adds	r3, #1
 8013d62:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8013d64:	68bb      	ldr	r3, [r7, #8]
 8013d66:	781b      	ldrb	r3, [r3, #0]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d1f5      	bne.n	8013d58 <USBD_GetLen+0x12>
  }

  return len;
 8013d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013d6e:	4618      	mov	r0, r3
 8013d70:	3714      	adds	r7, #20
 8013d72:	46bd      	mov	sp, r7
 8013d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d78:	4770      	bx	lr

08013d7a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8013d7a:	b580      	push	{r7, lr}
 8013d7c:	b084      	sub	sp, #16
 8013d7e:	af00      	add	r7, sp, #0
 8013d80:	60f8      	str	r0, [r7, #12]
 8013d82:	60b9      	str	r1, [r7, #8]
 8013d84:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	2202      	movs	r2, #2
 8013d8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	687a      	ldr	r2, [r7, #4]
 8013d92:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8013d94:	68fb      	ldr	r3, [r7, #12]
 8013d96:	687a      	ldr	r2, [r7, #4]
 8013d98:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	68ba      	ldr	r2, [r7, #8]
 8013d9e:	2100      	movs	r1, #0
 8013da0:	68f8      	ldr	r0, [r7, #12]
 8013da2:	f003 fbf5 	bl	8017590 <USBD_LL_Transmit>

  return USBD_OK;
 8013da6:	2300      	movs	r3, #0
}
 8013da8:	4618      	mov	r0, r3
 8013daa:	3710      	adds	r7, #16
 8013dac:	46bd      	mov	sp, r7
 8013dae:	bd80      	pop	{r7, pc}

08013db0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8013db0:	b580      	push	{r7, lr}
 8013db2:	b084      	sub	sp, #16
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	60f8      	str	r0, [r7, #12]
 8013db8:	60b9      	str	r1, [r7, #8]
 8013dba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	68ba      	ldr	r2, [r7, #8]
 8013dc0:	2100      	movs	r1, #0
 8013dc2:	68f8      	ldr	r0, [r7, #12]
 8013dc4:	f003 fbe4 	bl	8017590 <USBD_LL_Transmit>

  return USBD_OK;
 8013dc8:	2300      	movs	r3, #0
}
 8013dca:	4618      	mov	r0, r3
 8013dcc:	3710      	adds	r7, #16
 8013dce:	46bd      	mov	sp, r7
 8013dd0:	bd80      	pop	{r7, pc}

08013dd2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8013dd2:	b580      	push	{r7, lr}
 8013dd4:	b084      	sub	sp, #16
 8013dd6:	af00      	add	r7, sp, #0
 8013dd8:	60f8      	str	r0, [r7, #12]
 8013dda:	60b9      	str	r1, [r7, #8]
 8013ddc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	68ba      	ldr	r2, [r7, #8]
 8013de2:	2100      	movs	r1, #0
 8013de4:	68f8      	ldr	r0, [r7, #12]
 8013de6:	f003 fbf4 	bl	80175d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013dea:	2300      	movs	r3, #0
}
 8013dec:	4618      	mov	r0, r3
 8013dee:	3710      	adds	r7, #16
 8013df0:	46bd      	mov	sp, r7
 8013df2:	bd80      	pop	{r7, pc}

08013df4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b082      	sub	sp, #8
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	2204      	movs	r2, #4
 8013e00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8013e04:	2300      	movs	r3, #0
 8013e06:	2200      	movs	r2, #0
 8013e08:	2100      	movs	r1, #0
 8013e0a:	6878      	ldr	r0, [r7, #4]
 8013e0c:	f003 fbc0 	bl	8017590 <USBD_LL_Transmit>

  return USBD_OK;
 8013e10:	2300      	movs	r3, #0
}
 8013e12:	4618      	mov	r0, r3
 8013e14:	3708      	adds	r7, #8
 8013e16:	46bd      	mov	sp, r7
 8013e18:	bd80      	pop	{r7, pc}

08013e1a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8013e1a:	b580      	push	{r7, lr}
 8013e1c:	b082      	sub	sp, #8
 8013e1e:	af00      	add	r7, sp, #0
 8013e20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	2205      	movs	r2, #5
 8013e26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013e2a:	2300      	movs	r3, #0
 8013e2c:	2200      	movs	r2, #0
 8013e2e:	2100      	movs	r1, #0
 8013e30:	6878      	ldr	r0, [r7, #4]
 8013e32:	f003 fbce 	bl	80175d2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013e36:	2300      	movs	r3, #0
}
 8013e38:	4618      	mov	r0, r3
 8013e3a:	3708      	adds	r7, #8
 8013e3c:	46bd      	mov	sp, r7
 8013e3e:	bd80      	pop	{r7, pc}

08013e40 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8013e40:	b580      	push	{r7, lr}
 8013e42:	b084      	sub	sp, #16
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	4603      	mov	r3, r0
 8013e48:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8013e4a:	79fb      	ldrb	r3, [r7, #7]
 8013e4c:	4a08      	ldr	r2, [pc, #32]	; (8013e70 <disk_status+0x30>)
 8013e4e:	009b      	lsls	r3, r3, #2
 8013e50:	4413      	add	r3, r2
 8013e52:	685b      	ldr	r3, [r3, #4]
 8013e54:	685b      	ldr	r3, [r3, #4]
 8013e56:	79fa      	ldrb	r2, [r7, #7]
 8013e58:	4905      	ldr	r1, [pc, #20]	; (8013e70 <disk_status+0x30>)
 8013e5a:	440a      	add	r2, r1
 8013e5c:	7a12      	ldrb	r2, [r2, #8]
 8013e5e:	4610      	mov	r0, r2
 8013e60:	4798      	blx	r3
 8013e62:	4603      	mov	r3, r0
 8013e64:	73fb      	strb	r3, [r7, #15]
  return stat;
 8013e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8013e68:	4618      	mov	r0, r3
 8013e6a:	3710      	adds	r7, #16
 8013e6c:	46bd      	mov	sp, r7
 8013e6e:	bd80      	pop	{r7, pc}
 8013e70:	2000040c 	.word	0x2000040c

08013e74 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b084      	sub	sp, #16
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	4603      	mov	r3, r0
 8013e7c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8013e7e:	2300      	movs	r3, #0
 8013e80:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8013e82:	79fb      	ldrb	r3, [r7, #7]
 8013e84:	4a0d      	ldr	r2, [pc, #52]	; (8013ebc <disk_initialize+0x48>)
 8013e86:	5cd3      	ldrb	r3, [r2, r3]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d111      	bne.n	8013eb0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8013e8c:	79fb      	ldrb	r3, [r7, #7]
 8013e8e:	4a0b      	ldr	r2, [pc, #44]	; (8013ebc <disk_initialize+0x48>)
 8013e90:	2101      	movs	r1, #1
 8013e92:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8013e94:	79fb      	ldrb	r3, [r7, #7]
 8013e96:	4a09      	ldr	r2, [pc, #36]	; (8013ebc <disk_initialize+0x48>)
 8013e98:	009b      	lsls	r3, r3, #2
 8013e9a:	4413      	add	r3, r2
 8013e9c:	685b      	ldr	r3, [r3, #4]
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	79fa      	ldrb	r2, [r7, #7]
 8013ea2:	4906      	ldr	r1, [pc, #24]	; (8013ebc <disk_initialize+0x48>)
 8013ea4:	440a      	add	r2, r1
 8013ea6:	7a12      	ldrb	r2, [r2, #8]
 8013ea8:	4610      	mov	r0, r2
 8013eaa:	4798      	blx	r3
 8013eac:	4603      	mov	r3, r0
 8013eae:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8013eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	3710      	adds	r7, #16
 8013eb6:	46bd      	mov	sp, r7
 8013eb8:	bd80      	pop	{r7, pc}
 8013eba:	bf00      	nop
 8013ebc:	2000040c 	.word	0x2000040c

08013ec0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8013ec0:	b590      	push	{r4, r7, lr}
 8013ec2:	b087      	sub	sp, #28
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	60b9      	str	r1, [r7, #8]
 8013ec8:	607a      	str	r2, [r7, #4]
 8013eca:	603b      	str	r3, [r7, #0]
 8013ecc:	4603      	mov	r3, r0
 8013ece:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8013ed0:	7bfb      	ldrb	r3, [r7, #15]
 8013ed2:	4a0a      	ldr	r2, [pc, #40]	; (8013efc <disk_read+0x3c>)
 8013ed4:	009b      	lsls	r3, r3, #2
 8013ed6:	4413      	add	r3, r2
 8013ed8:	685b      	ldr	r3, [r3, #4]
 8013eda:	689c      	ldr	r4, [r3, #8]
 8013edc:	7bfb      	ldrb	r3, [r7, #15]
 8013ede:	4a07      	ldr	r2, [pc, #28]	; (8013efc <disk_read+0x3c>)
 8013ee0:	4413      	add	r3, r2
 8013ee2:	7a18      	ldrb	r0, [r3, #8]
 8013ee4:	683b      	ldr	r3, [r7, #0]
 8013ee6:	687a      	ldr	r2, [r7, #4]
 8013ee8:	68b9      	ldr	r1, [r7, #8]
 8013eea:	47a0      	blx	r4
 8013eec:	4603      	mov	r3, r0
 8013eee:	75fb      	strb	r3, [r7, #23]
  return res;
 8013ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	371c      	adds	r7, #28
 8013ef6:	46bd      	mov	sp, r7
 8013ef8:	bd90      	pop	{r4, r7, pc}
 8013efa:	bf00      	nop
 8013efc:	2000040c 	.word	0x2000040c

08013f00 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8013f00:	b590      	push	{r4, r7, lr}
 8013f02:	b087      	sub	sp, #28
 8013f04:	af00      	add	r7, sp, #0
 8013f06:	60b9      	str	r1, [r7, #8]
 8013f08:	607a      	str	r2, [r7, #4]
 8013f0a:	603b      	str	r3, [r7, #0]
 8013f0c:	4603      	mov	r3, r0
 8013f0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8013f10:	7bfb      	ldrb	r3, [r7, #15]
 8013f12:	4a0a      	ldr	r2, [pc, #40]	; (8013f3c <disk_write+0x3c>)
 8013f14:	009b      	lsls	r3, r3, #2
 8013f16:	4413      	add	r3, r2
 8013f18:	685b      	ldr	r3, [r3, #4]
 8013f1a:	68dc      	ldr	r4, [r3, #12]
 8013f1c:	7bfb      	ldrb	r3, [r7, #15]
 8013f1e:	4a07      	ldr	r2, [pc, #28]	; (8013f3c <disk_write+0x3c>)
 8013f20:	4413      	add	r3, r2
 8013f22:	7a18      	ldrb	r0, [r3, #8]
 8013f24:	683b      	ldr	r3, [r7, #0]
 8013f26:	687a      	ldr	r2, [r7, #4]
 8013f28:	68b9      	ldr	r1, [r7, #8]
 8013f2a:	47a0      	blx	r4
 8013f2c:	4603      	mov	r3, r0
 8013f2e:	75fb      	strb	r3, [r7, #23]
  return res;
 8013f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f32:	4618      	mov	r0, r3
 8013f34:	371c      	adds	r7, #28
 8013f36:	46bd      	mov	sp, r7
 8013f38:	bd90      	pop	{r4, r7, pc}
 8013f3a:	bf00      	nop
 8013f3c:	2000040c 	.word	0x2000040c

08013f40 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b084      	sub	sp, #16
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	4603      	mov	r3, r0
 8013f48:	603a      	str	r2, [r7, #0]
 8013f4a:	71fb      	strb	r3, [r7, #7]
 8013f4c:	460b      	mov	r3, r1
 8013f4e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8013f50:	79fb      	ldrb	r3, [r7, #7]
 8013f52:	4a09      	ldr	r2, [pc, #36]	; (8013f78 <disk_ioctl+0x38>)
 8013f54:	009b      	lsls	r3, r3, #2
 8013f56:	4413      	add	r3, r2
 8013f58:	685b      	ldr	r3, [r3, #4]
 8013f5a:	691b      	ldr	r3, [r3, #16]
 8013f5c:	79fa      	ldrb	r2, [r7, #7]
 8013f5e:	4906      	ldr	r1, [pc, #24]	; (8013f78 <disk_ioctl+0x38>)
 8013f60:	440a      	add	r2, r1
 8013f62:	7a10      	ldrb	r0, [r2, #8]
 8013f64:	79b9      	ldrb	r1, [r7, #6]
 8013f66:	683a      	ldr	r2, [r7, #0]
 8013f68:	4798      	blx	r3
 8013f6a:	4603      	mov	r3, r0
 8013f6c:	73fb      	strb	r3, [r7, #15]
  return res;
 8013f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f70:	4618      	mov	r0, r3
 8013f72:	3710      	adds	r7, #16
 8013f74:	46bd      	mov	sp, r7
 8013f76:	bd80      	pop	{r7, pc}
 8013f78:	2000040c 	.word	0x2000040c

08013f7c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8013f7c:	b480      	push	{r7}
 8013f7e:	b085      	sub	sp, #20
 8013f80:	af00      	add	r7, sp, #0
 8013f82:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	3301      	adds	r3, #1
 8013f88:	781b      	ldrb	r3, [r3, #0]
 8013f8a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8013f8c:	89fb      	ldrh	r3, [r7, #14]
 8013f8e:	021b      	lsls	r3, r3, #8
 8013f90:	b21a      	sxth	r2, r3
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	781b      	ldrb	r3, [r3, #0]
 8013f96:	b21b      	sxth	r3, r3
 8013f98:	4313      	orrs	r3, r2
 8013f9a:	b21b      	sxth	r3, r3
 8013f9c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8013f9e:	89fb      	ldrh	r3, [r7, #14]
}
 8013fa0:	4618      	mov	r0, r3
 8013fa2:	3714      	adds	r7, #20
 8013fa4:	46bd      	mov	sp, r7
 8013fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013faa:	4770      	bx	lr

08013fac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8013fac:	b480      	push	{r7}
 8013fae:	b085      	sub	sp, #20
 8013fb0:	af00      	add	r7, sp, #0
 8013fb2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	3303      	adds	r3, #3
 8013fb8:	781b      	ldrb	r3, [r3, #0]
 8013fba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8013fbc:	68fb      	ldr	r3, [r7, #12]
 8013fbe:	021b      	lsls	r3, r3, #8
 8013fc0:	687a      	ldr	r2, [r7, #4]
 8013fc2:	3202      	adds	r2, #2
 8013fc4:	7812      	ldrb	r2, [r2, #0]
 8013fc6:	4313      	orrs	r3, r2
 8013fc8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	021b      	lsls	r3, r3, #8
 8013fce:	687a      	ldr	r2, [r7, #4]
 8013fd0:	3201      	adds	r2, #1
 8013fd2:	7812      	ldrb	r2, [r2, #0]
 8013fd4:	4313      	orrs	r3, r2
 8013fd6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8013fd8:	68fb      	ldr	r3, [r7, #12]
 8013fda:	021b      	lsls	r3, r3, #8
 8013fdc:	687a      	ldr	r2, [r7, #4]
 8013fde:	7812      	ldrb	r2, [r2, #0]
 8013fe0:	4313      	orrs	r3, r2
 8013fe2:	60fb      	str	r3, [r7, #12]
	return rv;
 8013fe4:	68fb      	ldr	r3, [r7, #12]
}
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	3714      	adds	r7, #20
 8013fea:	46bd      	mov	sp, r7
 8013fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff0:	4770      	bx	lr

08013ff2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8013ff2:	b480      	push	{r7}
 8013ff4:	b083      	sub	sp, #12
 8013ff6:	af00      	add	r7, sp, #0
 8013ff8:	6078      	str	r0, [r7, #4]
 8013ffa:	460b      	mov	r3, r1
 8013ffc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	1c5a      	adds	r2, r3, #1
 8014002:	607a      	str	r2, [r7, #4]
 8014004:	887a      	ldrh	r2, [r7, #2]
 8014006:	b2d2      	uxtb	r2, r2
 8014008:	701a      	strb	r2, [r3, #0]
 801400a:	887b      	ldrh	r3, [r7, #2]
 801400c:	0a1b      	lsrs	r3, r3, #8
 801400e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	1c5a      	adds	r2, r3, #1
 8014014:	607a      	str	r2, [r7, #4]
 8014016:	887a      	ldrh	r2, [r7, #2]
 8014018:	b2d2      	uxtb	r2, r2
 801401a:	701a      	strb	r2, [r3, #0]
}
 801401c:	bf00      	nop
 801401e:	370c      	adds	r7, #12
 8014020:	46bd      	mov	sp, r7
 8014022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014026:	4770      	bx	lr

08014028 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8014028:	b480      	push	{r7}
 801402a:	b083      	sub	sp, #12
 801402c:	af00      	add	r7, sp, #0
 801402e:	6078      	str	r0, [r7, #4]
 8014030:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	1c5a      	adds	r2, r3, #1
 8014036:	607a      	str	r2, [r7, #4]
 8014038:	683a      	ldr	r2, [r7, #0]
 801403a:	b2d2      	uxtb	r2, r2
 801403c:	701a      	strb	r2, [r3, #0]
 801403e:	683b      	ldr	r3, [r7, #0]
 8014040:	0a1b      	lsrs	r3, r3, #8
 8014042:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	1c5a      	adds	r2, r3, #1
 8014048:	607a      	str	r2, [r7, #4]
 801404a:	683a      	ldr	r2, [r7, #0]
 801404c:	b2d2      	uxtb	r2, r2
 801404e:	701a      	strb	r2, [r3, #0]
 8014050:	683b      	ldr	r3, [r7, #0]
 8014052:	0a1b      	lsrs	r3, r3, #8
 8014054:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	1c5a      	adds	r2, r3, #1
 801405a:	607a      	str	r2, [r7, #4]
 801405c:	683a      	ldr	r2, [r7, #0]
 801405e:	b2d2      	uxtb	r2, r2
 8014060:	701a      	strb	r2, [r3, #0]
 8014062:	683b      	ldr	r3, [r7, #0]
 8014064:	0a1b      	lsrs	r3, r3, #8
 8014066:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	1c5a      	adds	r2, r3, #1
 801406c:	607a      	str	r2, [r7, #4]
 801406e:	683a      	ldr	r2, [r7, #0]
 8014070:	b2d2      	uxtb	r2, r2
 8014072:	701a      	strb	r2, [r3, #0]
}
 8014074:	bf00      	nop
 8014076:	370c      	adds	r7, #12
 8014078:	46bd      	mov	sp, r7
 801407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801407e:	4770      	bx	lr

08014080 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8014080:	b480      	push	{r7}
 8014082:	b087      	sub	sp, #28
 8014084:	af00      	add	r7, sp, #0
 8014086:	60f8      	str	r0, [r7, #12]
 8014088:	60b9      	str	r1, [r7, #8]
 801408a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801408c:	68fb      	ldr	r3, [r7, #12]
 801408e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8014090:	68bb      	ldr	r3, [r7, #8]
 8014092:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	2b00      	cmp	r3, #0
 8014098:	d00d      	beq.n	80140b6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801409a:	693a      	ldr	r2, [r7, #16]
 801409c:	1c53      	adds	r3, r2, #1
 801409e:	613b      	str	r3, [r7, #16]
 80140a0:	697b      	ldr	r3, [r7, #20]
 80140a2:	1c59      	adds	r1, r3, #1
 80140a4:	6179      	str	r1, [r7, #20]
 80140a6:	7812      	ldrb	r2, [r2, #0]
 80140a8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	3b01      	subs	r3, #1
 80140ae:	607b      	str	r3, [r7, #4]
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d1f1      	bne.n	801409a <mem_cpy+0x1a>
	}
}
 80140b6:	bf00      	nop
 80140b8:	371c      	adds	r7, #28
 80140ba:	46bd      	mov	sp, r7
 80140bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140c0:	4770      	bx	lr

080140c2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80140c2:	b480      	push	{r7}
 80140c4:	b087      	sub	sp, #28
 80140c6:	af00      	add	r7, sp, #0
 80140c8:	60f8      	str	r0, [r7, #12]
 80140ca:	60b9      	str	r1, [r7, #8]
 80140cc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80140ce:	68fb      	ldr	r3, [r7, #12]
 80140d0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80140d2:	697b      	ldr	r3, [r7, #20]
 80140d4:	1c5a      	adds	r2, r3, #1
 80140d6:	617a      	str	r2, [r7, #20]
 80140d8:	68ba      	ldr	r2, [r7, #8]
 80140da:	b2d2      	uxtb	r2, r2
 80140dc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	3b01      	subs	r3, #1
 80140e2:	607b      	str	r3, [r7, #4]
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	d1f3      	bne.n	80140d2 <mem_set+0x10>
}
 80140ea:	bf00      	nop
 80140ec:	bf00      	nop
 80140ee:	371c      	adds	r7, #28
 80140f0:	46bd      	mov	sp, r7
 80140f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140f6:	4770      	bx	lr

080140f8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80140f8:	b480      	push	{r7}
 80140fa:	b089      	sub	sp, #36	; 0x24
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	60f8      	str	r0, [r7, #12]
 8014100:	60b9      	str	r1, [r7, #8]
 8014102:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	61fb      	str	r3, [r7, #28]
 8014108:	68bb      	ldr	r3, [r7, #8]
 801410a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801410c:	2300      	movs	r3, #0
 801410e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8014110:	69fb      	ldr	r3, [r7, #28]
 8014112:	1c5a      	adds	r2, r3, #1
 8014114:	61fa      	str	r2, [r7, #28]
 8014116:	781b      	ldrb	r3, [r3, #0]
 8014118:	4619      	mov	r1, r3
 801411a:	69bb      	ldr	r3, [r7, #24]
 801411c:	1c5a      	adds	r2, r3, #1
 801411e:	61ba      	str	r2, [r7, #24]
 8014120:	781b      	ldrb	r3, [r3, #0]
 8014122:	1acb      	subs	r3, r1, r3
 8014124:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	3b01      	subs	r3, #1
 801412a:	607b      	str	r3, [r7, #4]
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	2b00      	cmp	r3, #0
 8014130:	d002      	beq.n	8014138 <mem_cmp+0x40>
 8014132:	697b      	ldr	r3, [r7, #20]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d0eb      	beq.n	8014110 <mem_cmp+0x18>

	return r;
 8014138:	697b      	ldr	r3, [r7, #20]
}
 801413a:	4618      	mov	r0, r3
 801413c:	3724      	adds	r7, #36	; 0x24
 801413e:	46bd      	mov	sp, r7
 8014140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014144:	4770      	bx	lr

08014146 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8014146:	b480      	push	{r7}
 8014148:	b083      	sub	sp, #12
 801414a:	af00      	add	r7, sp, #0
 801414c:	6078      	str	r0, [r7, #4]
 801414e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8014150:	e002      	b.n	8014158 <chk_chr+0x12>
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	3301      	adds	r3, #1
 8014156:	607b      	str	r3, [r7, #4]
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	781b      	ldrb	r3, [r3, #0]
 801415c:	2b00      	cmp	r3, #0
 801415e:	d005      	beq.n	801416c <chk_chr+0x26>
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	781b      	ldrb	r3, [r3, #0]
 8014164:	461a      	mov	r2, r3
 8014166:	683b      	ldr	r3, [r7, #0]
 8014168:	4293      	cmp	r3, r2
 801416a:	d1f2      	bne.n	8014152 <chk_chr+0xc>
	return *str;
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	781b      	ldrb	r3, [r3, #0]
}
 8014170:	4618      	mov	r0, r3
 8014172:	370c      	adds	r7, #12
 8014174:	46bd      	mov	sp, r7
 8014176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801417a:	4770      	bx	lr

0801417c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801417c:	b580      	push	{r7, lr}
 801417e:	b086      	sub	sp, #24
 8014180:	af00      	add	r7, sp, #0
 8014182:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8014184:	2300      	movs	r3, #0
 8014186:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	78db      	ldrb	r3, [r3, #3]
 801418c:	2b00      	cmp	r3, #0
 801418e:	d034      	beq.n	80141fa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014194:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	7858      	ldrb	r0, [r3, #1]
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80141a0:	2301      	movs	r3, #1
 80141a2:	697a      	ldr	r2, [r7, #20]
 80141a4:	f7ff feac 	bl	8013f00 <disk_write>
 80141a8:	4603      	mov	r3, r0
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d002      	beq.n	80141b4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80141ae:	2301      	movs	r3, #1
 80141b0:	73fb      	strb	r3, [r7, #15]
 80141b2:	e022      	b.n	80141fa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	2200      	movs	r2, #0
 80141b8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80141be:	697a      	ldr	r2, [r7, #20]
 80141c0:	1ad2      	subs	r2, r2, r3
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	6a1b      	ldr	r3, [r3, #32]
 80141c6:	429a      	cmp	r2, r3
 80141c8:	d217      	bcs.n	80141fa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	789b      	ldrb	r3, [r3, #2]
 80141ce:	613b      	str	r3, [r7, #16]
 80141d0:	e010      	b.n	80141f4 <sync_window+0x78>
					wsect += fs->fsize;
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	6a1b      	ldr	r3, [r3, #32]
 80141d6:	697a      	ldr	r2, [r7, #20]
 80141d8:	4413      	add	r3, r2
 80141da:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	7858      	ldrb	r0, [r3, #1]
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80141e6:	2301      	movs	r3, #1
 80141e8:	697a      	ldr	r2, [r7, #20]
 80141ea:	f7ff fe89 	bl	8013f00 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80141ee:	693b      	ldr	r3, [r7, #16]
 80141f0:	3b01      	subs	r3, #1
 80141f2:	613b      	str	r3, [r7, #16]
 80141f4:	693b      	ldr	r3, [r7, #16]
 80141f6:	2b01      	cmp	r3, #1
 80141f8:	d8eb      	bhi.n	80141d2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80141fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80141fc:	4618      	mov	r0, r3
 80141fe:	3718      	adds	r7, #24
 8014200:	46bd      	mov	sp, r7
 8014202:	bd80      	pop	{r7, pc}

08014204 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8014204:	b580      	push	{r7, lr}
 8014206:	b084      	sub	sp, #16
 8014208:	af00      	add	r7, sp, #0
 801420a:	6078      	str	r0, [r7, #4]
 801420c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801420e:	2300      	movs	r3, #0
 8014210:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014216:	683a      	ldr	r2, [r7, #0]
 8014218:	429a      	cmp	r2, r3
 801421a:	d01b      	beq.n	8014254 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801421c:	6878      	ldr	r0, [r7, #4]
 801421e:	f7ff ffad 	bl	801417c <sync_window>
 8014222:	4603      	mov	r3, r0
 8014224:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8014226:	7bfb      	ldrb	r3, [r7, #15]
 8014228:	2b00      	cmp	r3, #0
 801422a:	d113      	bne.n	8014254 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	7858      	ldrb	r0, [r3, #1]
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014236:	2301      	movs	r3, #1
 8014238:	683a      	ldr	r2, [r7, #0]
 801423a:	f7ff fe41 	bl	8013ec0 <disk_read>
 801423e:	4603      	mov	r3, r0
 8014240:	2b00      	cmp	r3, #0
 8014242:	d004      	beq.n	801424e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8014244:	f04f 33ff 	mov.w	r3, #4294967295
 8014248:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801424a:	2301      	movs	r3, #1
 801424c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	683a      	ldr	r2, [r7, #0]
 8014252:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8014254:	7bfb      	ldrb	r3, [r7, #15]
}
 8014256:	4618      	mov	r0, r3
 8014258:	3710      	adds	r7, #16
 801425a:	46bd      	mov	sp, r7
 801425c:	bd80      	pop	{r7, pc}
	...

08014260 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8014260:	b580      	push	{r7, lr}
 8014262:	b084      	sub	sp, #16
 8014264:	af00      	add	r7, sp, #0
 8014266:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8014268:	6878      	ldr	r0, [r7, #4]
 801426a:	f7ff ff87 	bl	801417c <sync_window>
 801426e:	4603      	mov	r3, r0
 8014270:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8014272:	7bfb      	ldrb	r3, [r7, #15]
 8014274:	2b00      	cmp	r3, #0
 8014276:	d159      	bne.n	801432c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	781b      	ldrb	r3, [r3, #0]
 801427c:	2b03      	cmp	r3, #3
 801427e:	d149      	bne.n	8014314 <sync_fs+0xb4>
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	791b      	ldrb	r3, [r3, #4]
 8014284:	2b01      	cmp	r3, #1
 8014286:	d145      	bne.n	8014314 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	899b      	ldrh	r3, [r3, #12]
 8014292:	461a      	mov	r2, r3
 8014294:	2100      	movs	r1, #0
 8014296:	f7ff ff14 	bl	80140c2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	3338      	adds	r3, #56	; 0x38
 801429e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80142a2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80142a6:	4618      	mov	r0, r3
 80142a8:	f7ff fea3 	bl	8013ff2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	3338      	adds	r3, #56	; 0x38
 80142b0:	4921      	ldr	r1, [pc, #132]	; (8014338 <sync_fs+0xd8>)
 80142b2:	4618      	mov	r0, r3
 80142b4:	f7ff feb8 	bl	8014028 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	3338      	adds	r3, #56	; 0x38
 80142bc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80142c0:	491e      	ldr	r1, [pc, #120]	; (801433c <sync_fs+0xdc>)
 80142c2:	4618      	mov	r0, r3
 80142c4:	f7ff feb0 	bl	8014028 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	3338      	adds	r3, #56	; 0x38
 80142cc:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	699b      	ldr	r3, [r3, #24]
 80142d4:	4619      	mov	r1, r3
 80142d6:	4610      	mov	r0, r2
 80142d8:	f7ff fea6 	bl	8014028 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	3338      	adds	r3, #56	; 0x38
 80142e0:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	695b      	ldr	r3, [r3, #20]
 80142e8:	4619      	mov	r1, r3
 80142ea:	4610      	mov	r0, r2
 80142ec:	f7ff fe9c 	bl	8014028 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142f4:	1c5a      	adds	r2, r3, #1
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	7858      	ldrb	r0, [r3, #1]
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014308:	2301      	movs	r3, #1
 801430a:	f7ff fdf9 	bl	8013f00 <disk_write>
			fs->fsi_flag = 0;
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	2200      	movs	r2, #0
 8014312:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	785b      	ldrb	r3, [r3, #1]
 8014318:	2200      	movs	r2, #0
 801431a:	2100      	movs	r1, #0
 801431c:	4618      	mov	r0, r3
 801431e:	f7ff fe0f 	bl	8013f40 <disk_ioctl>
 8014322:	4603      	mov	r3, r0
 8014324:	2b00      	cmp	r3, #0
 8014326:	d001      	beq.n	801432c <sync_fs+0xcc>
 8014328:	2301      	movs	r3, #1
 801432a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801432c:	7bfb      	ldrb	r3, [r7, #15]
}
 801432e:	4618      	mov	r0, r3
 8014330:	3710      	adds	r7, #16
 8014332:	46bd      	mov	sp, r7
 8014334:	bd80      	pop	{r7, pc}
 8014336:	bf00      	nop
 8014338:	41615252 	.word	0x41615252
 801433c:	61417272 	.word	0x61417272

08014340 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8014340:	b480      	push	{r7}
 8014342:	b083      	sub	sp, #12
 8014344:	af00      	add	r7, sp, #0
 8014346:	6078      	str	r0, [r7, #4]
 8014348:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801434a:	683b      	ldr	r3, [r7, #0]
 801434c:	3b02      	subs	r3, #2
 801434e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	69db      	ldr	r3, [r3, #28]
 8014354:	3b02      	subs	r3, #2
 8014356:	683a      	ldr	r2, [r7, #0]
 8014358:	429a      	cmp	r2, r3
 801435a:	d301      	bcc.n	8014360 <clust2sect+0x20>
 801435c:	2300      	movs	r3, #0
 801435e:	e008      	b.n	8014372 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	895b      	ldrh	r3, [r3, #10]
 8014364:	461a      	mov	r2, r3
 8014366:	683b      	ldr	r3, [r7, #0]
 8014368:	fb03 f202 	mul.w	r2, r3, r2
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014370:	4413      	add	r3, r2
}
 8014372:	4618      	mov	r0, r3
 8014374:	370c      	adds	r7, #12
 8014376:	46bd      	mov	sp, r7
 8014378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801437c:	4770      	bx	lr

0801437e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801437e:	b580      	push	{r7, lr}
 8014380:	b086      	sub	sp, #24
 8014382:	af00      	add	r7, sp, #0
 8014384:	6078      	str	r0, [r7, #4]
 8014386:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801438e:	683b      	ldr	r3, [r7, #0]
 8014390:	2b01      	cmp	r3, #1
 8014392:	d904      	bls.n	801439e <get_fat+0x20>
 8014394:	693b      	ldr	r3, [r7, #16]
 8014396:	69db      	ldr	r3, [r3, #28]
 8014398:	683a      	ldr	r2, [r7, #0]
 801439a:	429a      	cmp	r2, r3
 801439c:	d302      	bcc.n	80143a4 <get_fat+0x26>
		val = 1;	/* Internal error */
 801439e:	2301      	movs	r3, #1
 80143a0:	617b      	str	r3, [r7, #20]
 80143a2:	e0bb      	b.n	801451c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80143a4:	f04f 33ff 	mov.w	r3, #4294967295
 80143a8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80143aa:	693b      	ldr	r3, [r7, #16]
 80143ac:	781b      	ldrb	r3, [r3, #0]
 80143ae:	2b03      	cmp	r3, #3
 80143b0:	f000 8083 	beq.w	80144ba <get_fat+0x13c>
 80143b4:	2b03      	cmp	r3, #3
 80143b6:	f300 80a7 	bgt.w	8014508 <get_fat+0x18a>
 80143ba:	2b01      	cmp	r3, #1
 80143bc:	d002      	beq.n	80143c4 <get_fat+0x46>
 80143be:	2b02      	cmp	r3, #2
 80143c0:	d056      	beq.n	8014470 <get_fat+0xf2>
 80143c2:	e0a1      	b.n	8014508 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80143c4:	683b      	ldr	r3, [r7, #0]
 80143c6:	60fb      	str	r3, [r7, #12]
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	085b      	lsrs	r3, r3, #1
 80143cc:	68fa      	ldr	r2, [r7, #12]
 80143ce:	4413      	add	r3, r2
 80143d0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80143d2:	693b      	ldr	r3, [r7, #16]
 80143d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80143d6:	693b      	ldr	r3, [r7, #16]
 80143d8:	899b      	ldrh	r3, [r3, #12]
 80143da:	4619      	mov	r1, r3
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	fbb3 f3f1 	udiv	r3, r3, r1
 80143e2:	4413      	add	r3, r2
 80143e4:	4619      	mov	r1, r3
 80143e6:	6938      	ldr	r0, [r7, #16]
 80143e8:	f7ff ff0c 	bl	8014204 <move_window>
 80143ec:	4603      	mov	r3, r0
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	f040 808d 	bne.w	801450e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	1c5a      	adds	r2, r3, #1
 80143f8:	60fa      	str	r2, [r7, #12]
 80143fa:	693a      	ldr	r2, [r7, #16]
 80143fc:	8992      	ldrh	r2, [r2, #12]
 80143fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8014402:	fb02 f201 	mul.w	r2, r2, r1
 8014406:	1a9b      	subs	r3, r3, r2
 8014408:	693a      	ldr	r2, [r7, #16]
 801440a:	4413      	add	r3, r2
 801440c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014410:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014412:	693b      	ldr	r3, [r7, #16]
 8014414:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014416:	693b      	ldr	r3, [r7, #16]
 8014418:	899b      	ldrh	r3, [r3, #12]
 801441a:	4619      	mov	r1, r3
 801441c:	68fb      	ldr	r3, [r7, #12]
 801441e:	fbb3 f3f1 	udiv	r3, r3, r1
 8014422:	4413      	add	r3, r2
 8014424:	4619      	mov	r1, r3
 8014426:	6938      	ldr	r0, [r7, #16]
 8014428:	f7ff feec 	bl	8014204 <move_window>
 801442c:	4603      	mov	r3, r0
 801442e:	2b00      	cmp	r3, #0
 8014430:	d16f      	bne.n	8014512 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8014432:	693b      	ldr	r3, [r7, #16]
 8014434:	899b      	ldrh	r3, [r3, #12]
 8014436:	461a      	mov	r2, r3
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	fbb3 f1f2 	udiv	r1, r3, r2
 801443e:	fb02 f201 	mul.w	r2, r2, r1
 8014442:	1a9b      	subs	r3, r3, r2
 8014444:	693a      	ldr	r2, [r7, #16]
 8014446:	4413      	add	r3, r2
 8014448:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801444c:	021b      	lsls	r3, r3, #8
 801444e:	461a      	mov	r2, r3
 8014450:	68bb      	ldr	r3, [r7, #8]
 8014452:	4313      	orrs	r3, r2
 8014454:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8014456:	683b      	ldr	r3, [r7, #0]
 8014458:	f003 0301 	and.w	r3, r3, #1
 801445c:	2b00      	cmp	r3, #0
 801445e:	d002      	beq.n	8014466 <get_fat+0xe8>
 8014460:	68bb      	ldr	r3, [r7, #8]
 8014462:	091b      	lsrs	r3, r3, #4
 8014464:	e002      	b.n	801446c <get_fat+0xee>
 8014466:	68bb      	ldr	r3, [r7, #8]
 8014468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801446c:	617b      	str	r3, [r7, #20]
			break;
 801446e:	e055      	b.n	801451c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014470:	693b      	ldr	r3, [r7, #16]
 8014472:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014474:	693b      	ldr	r3, [r7, #16]
 8014476:	899b      	ldrh	r3, [r3, #12]
 8014478:	085b      	lsrs	r3, r3, #1
 801447a:	b29b      	uxth	r3, r3
 801447c:	4619      	mov	r1, r3
 801447e:	683b      	ldr	r3, [r7, #0]
 8014480:	fbb3 f3f1 	udiv	r3, r3, r1
 8014484:	4413      	add	r3, r2
 8014486:	4619      	mov	r1, r3
 8014488:	6938      	ldr	r0, [r7, #16]
 801448a:	f7ff febb 	bl	8014204 <move_window>
 801448e:	4603      	mov	r3, r0
 8014490:	2b00      	cmp	r3, #0
 8014492:	d140      	bne.n	8014516 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8014494:	693b      	ldr	r3, [r7, #16]
 8014496:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801449a:	683b      	ldr	r3, [r7, #0]
 801449c:	005b      	lsls	r3, r3, #1
 801449e:	693a      	ldr	r2, [r7, #16]
 80144a0:	8992      	ldrh	r2, [r2, #12]
 80144a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80144a6:	fb02 f200 	mul.w	r2, r2, r0
 80144aa:	1a9b      	subs	r3, r3, r2
 80144ac:	440b      	add	r3, r1
 80144ae:	4618      	mov	r0, r3
 80144b0:	f7ff fd64 	bl	8013f7c <ld_word>
 80144b4:	4603      	mov	r3, r0
 80144b6:	617b      	str	r3, [r7, #20]
			break;
 80144b8:	e030      	b.n	801451c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80144ba:	693b      	ldr	r3, [r7, #16]
 80144bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80144be:	693b      	ldr	r3, [r7, #16]
 80144c0:	899b      	ldrh	r3, [r3, #12]
 80144c2:	089b      	lsrs	r3, r3, #2
 80144c4:	b29b      	uxth	r3, r3
 80144c6:	4619      	mov	r1, r3
 80144c8:	683b      	ldr	r3, [r7, #0]
 80144ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80144ce:	4413      	add	r3, r2
 80144d0:	4619      	mov	r1, r3
 80144d2:	6938      	ldr	r0, [r7, #16]
 80144d4:	f7ff fe96 	bl	8014204 <move_window>
 80144d8:	4603      	mov	r3, r0
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d11d      	bne.n	801451a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80144de:	693b      	ldr	r3, [r7, #16]
 80144e0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80144e4:	683b      	ldr	r3, [r7, #0]
 80144e6:	009b      	lsls	r3, r3, #2
 80144e8:	693a      	ldr	r2, [r7, #16]
 80144ea:	8992      	ldrh	r2, [r2, #12]
 80144ec:	fbb3 f0f2 	udiv	r0, r3, r2
 80144f0:	fb02 f200 	mul.w	r2, r2, r0
 80144f4:	1a9b      	subs	r3, r3, r2
 80144f6:	440b      	add	r3, r1
 80144f8:	4618      	mov	r0, r3
 80144fa:	f7ff fd57 	bl	8013fac <ld_dword>
 80144fe:	4603      	mov	r3, r0
 8014500:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8014504:	617b      	str	r3, [r7, #20]
			break;
 8014506:	e009      	b.n	801451c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8014508:	2301      	movs	r3, #1
 801450a:	617b      	str	r3, [r7, #20]
 801450c:	e006      	b.n	801451c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801450e:	bf00      	nop
 8014510:	e004      	b.n	801451c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014512:	bf00      	nop
 8014514:	e002      	b.n	801451c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014516:	bf00      	nop
 8014518:	e000      	b.n	801451c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801451a:	bf00      	nop
		}
	}

	return val;
 801451c:	697b      	ldr	r3, [r7, #20]
}
 801451e:	4618      	mov	r0, r3
 8014520:	3718      	adds	r7, #24
 8014522:	46bd      	mov	sp, r7
 8014524:	bd80      	pop	{r7, pc}

08014526 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8014526:	b590      	push	{r4, r7, lr}
 8014528:	b089      	sub	sp, #36	; 0x24
 801452a:	af00      	add	r7, sp, #0
 801452c:	60f8      	str	r0, [r7, #12]
 801452e:	60b9      	str	r1, [r7, #8]
 8014530:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8014532:	2302      	movs	r3, #2
 8014534:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8014536:	68bb      	ldr	r3, [r7, #8]
 8014538:	2b01      	cmp	r3, #1
 801453a:	f240 8102 	bls.w	8014742 <put_fat+0x21c>
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	69db      	ldr	r3, [r3, #28]
 8014542:	68ba      	ldr	r2, [r7, #8]
 8014544:	429a      	cmp	r2, r3
 8014546:	f080 80fc 	bcs.w	8014742 <put_fat+0x21c>
		switch (fs->fs_type) {
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	781b      	ldrb	r3, [r3, #0]
 801454e:	2b03      	cmp	r3, #3
 8014550:	f000 80b6 	beq.w	80146c0 <put_fat+0x19a>
 8014554:	2b03      	cmp	r3, #3
 8014556:	f300 80fd 	bgt.w	8014754 <put_fat+0x22e>
 801455a:	2b01      	cmp	r3, #1
 801455c:	d003      	beq.n	8014566 <put_fat+0x40>
 801455e:	2b02      	cmp	r3, #2
 8014560:	f000 8083 	beq.w	801466a <put_fat+0x144>
 8014564:	e0f6      	b.n	8014754 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8014566:	68bb      	ldr	r3, [r7, #8]
 8014568:	61bb      	str	r3, [r7, #24]
 801456a:	69bb      	ldr	r3, [r7, #24]
 801456c:	085b      	lsrs	r3, r3, #1
 801456e:	69ba      	ldr	r2, [r7, #24]
 8014570:	4413      	add	r3, r2
 8014572:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	899b      	ldrh	r3, [r3, #12]
 801457c:	4619      	mov	r1, r3
 801457e:	69bb      	ldr	r3, [r7, #24]
 8014580:	fbb3 f3f1 	udiv	r3, r3, r1
 8014584:	4413      	add	r3, r2
 8014586:	4619      	mov	r1, r3
 8014588:	68f8      	ldr	r0, [r7, #12]
 801458a:	f7ff fe3b 	bl	8014204 <move_window>
 801458e:	4603      	mov	r3, r0
 8014590:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014592:	7ffb      	ldrb	r3, [r7, #31]
 8014594:	2b00      	cmp	r3, #0
 8014596:	f040 80d6 	bne.w	8014746 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80145a0:	69bb      	ldr	r3, [r7, #24]
 80145a2:	1c5a      	adds	r2, r3, #1
 80145a4:	61ba      	str	r2, [r7, #24]
 80145a6:	68fa      	ldr	r2, [r7, #12]
 80145a8:	8992      	ldrh	r2, [r2, #12]
 80145aa:	fbb3 f0f2 	udiv	r0, r3, r2
 80145ae:	fb02 f200 	mul.w	r2, r2, r0
 80145b2:	1a9b      	subs	r3, r3, r2
 80145b4:	440b      	add	r3, r1
 80145b6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80145b8:	68bb      	ldr	r3, [r7, #8]
 80145ba:	f003 0301 	and.w	r3, r3, #1
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d00d      	beq.n	80145de <put_fat+0xb8>
 80145c2:	697b      	ldr	r3, [r7, #20]
 80145c4:	781b      	ldrb	r3, [r3, #0]
 80145c6:	b25b      	sxtb	r3, r3
 80145c8:	f003 030f 	and.w	r3, r3, #15
 80145cc:	b25a      	sxtb	r2, r3
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	b2db      	uxtb	r3, r3
 80145d2:	011b      	lsls	r3, r3, #4
 80145d4:	b25b      	sxtb	r3, r3
 80145d6:	4313      	orrs	r3, r2
 80145d8:	b25b      	sxtb	r3, r3
 80145da:	b2db      	uxtb	r3, r3
 80145dc:	e001      	b.n	80145e2 <put_fat+0xbc>
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	b2db      	uxtb	r3, r3
 80145e2:	697a      	ldr	r2, [r7, #20]
 80145e4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	2201      	movs	r2, #1
 80145ea:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	899b      	ldrh	r3, [r3, #12]
 80145f4:	4619      	mov	r1, r3
 80145f6:	69bb      	ldr	r3, [r7, #24]
 80145f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80145fc:	4413      	add	r3, r2
 80145fe:	4619      	mov	r1, r3
 8014600:	68f8      	ldr	r0, [r7, #12]
 8014602:	f7ff fdff 	bl	8014204 <move_window>
 8014606:	4603      	mov	r3, r0
 8014608:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801460a:	7ffb      	ldrb	r3, [r7, #31]
 801460c:	2b00      	cmp	r3, #0
 801460e:	f040 809c 	bne.w	801474a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	899b      	ldrh	r3, [r3, #12]
 801461c:	461a      	mov	r2, r3
 801461e:	69bb      	ldr	r3, [r7, #24]
 8014620:	fbb3 f0f2 	udiv	r0, r3, r2
 8014624:	fb02 f200 	mul.w	r2, r2, r0
 8014628:	1a9b      	subs	r3, r3, r2
 801462a:	440b      	add	r3, r1
 801462c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801462e:	68bb      	ldr	r3, [r7, #8]
 8014630:	f003 0301 	and.w	r3, r3, #1
 8014634:	2b00      	cmp	r3, #0
 8014636:	d003      	beq.n	8014640 <put_fat+0x11a>
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	091b      	lsrs	r3, r3, #4
 801463c:	b2db      	uxtb	r3, r3
 801463e:	e00e      	b.n	801465e <put_fat+0x138>
 8014640:	697b      	ldr	r3, [r7, #20]
 8014642:	781b      	ldrb	r3, [r3, #0]
 8014644:	b25b      	sxtb	r3, r3
 8014646:	f023 030f 	bic.w	r3, r3, #15
 801464a:	b25a      	sxtb	r2, r3
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	0a1b      	lsrs	r3, r3, #8
 8014650:	b25b      	sxtb	r3, r3
 8014652:	f003 030f 	and.w	r3, r3, #15
 8014656:	b25b      	sxtb	r3, r3
 8014658:	4313      	orrs	r3, r2
 801465a:	b25b      	sxtb	r3, r3
 801465c:	b2db      	uxtb	r3, r3
 801465e:	697a      	ldr	r2, [r7, #20]
 8014660:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8014662:	68fb      	ldr	r3, [r7, #12]
 8014664:	2201      	movs	r2, #1
 8014666:	70da      	strb	r2, [r3, #3]
			break;
 8014668:	e074      	b.n	8014754 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	899b      	ldrh	r3, [r3, #12]
 8014672:	085b      	lsrs	r3, r3, #1
 8014674:	b29b      	uxth	r3, r3
 8014676:	4619      	mov	r1, r3
 8014678:	68bb      	ldr	r3, [r7, #8]
 801467a:	fbb3 f3f1 	udiv	r3, r3, r1
 801467e:	4413      	add	r3, r2
 8014680:	4619      	mov	r1, r3
 8014682:	68f8      	ldr	r0, [r7, #12]
 8014684:	f7ff fdbe 	bl	8014204 <move_window>
 8014688:	4603      	mov	r3, r0
 801468a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801468c:	7ffb      	ldrb	r3, [r7, #31]
 801468e:	2b00      	cmp	r3, #0
 8014690:	d15d      	bne.n	801474e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014698:	68bb      	ldr	r3, [r7, #8]
 801469a:	005b      	lsls	r3, r3, #1
 801469c:	68fa      	ldr	r2, [r7, #12]
 801469e:	8992      	ldrh	r2, [r2, #12]
 80146a0:	fbb3 f0f2 	udiv	r0, r3, r2
 80146a4:	fb02 f200 	mul.w	r2, r2, r0
 80146a8:	1a9b      	subs	r3, r3, r2
 80146aa:	440b      	add	r3, r1
 80146ac:	687a      	ldr	r2, [r7, #4]
 80146ae:	b292      	uxth	r2, r2
 80146b0:	4611      	mov	r1, r2
 80146b2:	4618      	mov	r0, r3
 80146b4:	f7ff fc9d 	bl	8013ff2 <st_word>
			fs->wflag = 1;
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	2201      	movs	r2, #1
 80146bc:	70da      	strb	r2, [r3, #3]
			break;
 80146be:	e049      	b.n	8014754 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	899b      	ldrh	r3, [r3, #12]
 80146c8:	089b      	lsrs	r3, r3, #2
 80146ca:	b29b      	uxth	r3, r3
 80146cc:	4619      	mov	r1, r3
 80146ce:	68bb      	ldr	r3, [r7, #8]
 80146d0:	fbb3 f3f1 	udiv	r3, r3, r1
 80146d4:	4413      	add	r3, r2
 80146d6:	4619      	mov	r1, r3
 80146d8:	68f8      	ldr	r0, [r7, #12]
 80146da:	f7ff fd93 	bl	8014204 <move_window>
 80146de:	4603      	mov	r3, r0
 80146e0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80146e2:	7ffb      	ldrb	r3, [r7, #31]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d134      	bne.n	8014752 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80146f4:	68bb      	ldr	r3, [r7, #8]
 80146f6:	009b      	lsls	r3, r3, #2
 80146f8:	68fa      	ldr	r2, [r7, #12]
 80146fa:	8992      	ldrh	r2, [r2, #12]
 80146fc:	fbb3 f0f2 	udiv	r0, r3, r2
 8014700:	fb02 f200 	mul.w	r2, r2, r0
 8014704:	1a9b      	subs	r3, r3, r2
 8014706:	440b      	add	r3, r1
 8014708:	4618      	mov	r0, r3
 801470a:	f7ff fc4f 	bl	8013fac <ld_dword>
 801470e:	4603      	mov	r3, r0
 8014710:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8014714:	4323      	orrs	r3, r4
 8014716:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801471e:	68bb      	ldr	r3, [r7, #8]
 8014720:	009b      	lsls	r3, r3, #2
 8014722:	68fa      	ldr	r2, [r7, #12]
 8014724:	8992      	ldrh	r2, [r2, #12]
 8014726:	fbb3 f0f2 	udiv	r0, r3, r2
 801472a:	fb02 f200 	mul.w	r2, r2, r0
 801472e:	1a9b      	subs	r3, r3, r2
 8014730:	440b      	add	r3, r1
 8014732:	6879      	ldr	r1, [r7, #4]
 8014734:	4618      	mov	r0, r3
 8014736:	f7ff fc77 	bl	8014028 <st_dword>
			fs->wflag = 1;
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	2201      	movs	r2, #1
 801473e:	70da      	strb	r2, [r3, #3]
			break;
 8014740:	e008      	b.n	8014754 <put_fat+0x22e>
		}
	}
 8014742:	bf00      	nop
 8014744:	e006      	b.n	8014754 <put_fat+0x22e>
			if (res != FR_OK) break;
 8014746:	bf00      	nop
 8014748:	e004      	b.n	8014754 <put_fat+0x22e>
			if (res != FR_OK) break;
 801474a:	bf00      	nop
 801474c:	e002      	b.n	8014754 <put_fat+0x22e>
			if (res != FR_OK) break;
 801474e:	bf00      	nop
 8014750:	e000      	b.n	8014754 <put_fat+0x22e>
			if (res != FR_OK) break;
 8014752:	bf00      	nop
	return res;
 8014754:	7ffb      	ldrb	r3, [r7, #31]
}
 8014756:	4618      	mov	r0, r3
 8014758:	3724      	adds	r7, #36	; 0x24
 801475a:	46bd      	mov	sp, r7
 801475c:	bd90      	pop	{r4, r7, pc}

0801475e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801475e:	b580      	push	{r7, lr}
 8014760:	b088      	sub	sp, #32
 8014762:	af00      	add	r7, sp, #0
 8014764:	60f8      	str	r0, [r7, #12]
 8014766:	60b9      	str	r1, [r7, #8]
 8014768:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801476a:	2300      	movs	r3, #0
 801476c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8014774:	68bb      	ldr	r3, [r7, #8]
 8014776:	2b01      	cmp	r3, #1
 8014778:	d904      	bls.n	8014784 <remove_chain+0x26>
 801477a:	69bb      	ldr	r3, [r7, #24]
 801477c:	69db      	ldr	r3, [r3, #28]
 801477e:	68ba      	ldr	r2, [r7, #8]
 8014780:	429a      	cmp	r2, r3
 8014782:	d301      	bcc.n	8014788 <remove_chain+0x2a>
 8014784:	2302      	movs	r3, #2
 8014786:	e04b      	b.n	8014820 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	2b00      	cmp	r3, #0
 801478c:	d00c      	beq.n	80147a8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801478e:	f04f 32ff 	mov.w	r2, #4294967295
 8014792:	6879      	ldr	r1, [r7, #4]
 8014794:	69b8      	ldr	r0, [r7, #24]
 8014796:	f7ff fec6 	bl	8014526 <put_fat>
 801479a:	4603      	mov	r3, r0
 801479c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801479e:	7ffb      	ldrb	r3, [r7, #31]
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d001      	beq.n	80147a8 <remove_chain+0x4a>
 80147a4:	7ffb      	ldrb	r3, [r7, #31]
 80147a6:	e03b      	b.n	8014820 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80147a8:	68b9      	ldr	r1, [r7, #8]
 80147aa:	68f8      	ldr	r0, [r7, #12]
 80147ac:	f7ff fde7 	bl	801437e <get_fat>
 80147b0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80147b2:	697b      	ldr	r3, [r7, #20]
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d031      	beq.n	801481c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80147b8:	697b      	ldr	r3, [r7, #20]
 80147ba:	2b01      	cmp	r3, #1
 80147bc:	d101      	bne.n	80147c2 <remove_chain+0x64>
 80147be:	2302      	movs	r3, #2
 80147c0:	e02e      	b.n	8014820 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80147c2:	697b      	ldr	r3, [r7, #20]
 80147c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147c8:	d101      	bne.n	80147ce <remove_chain+0x70>
 80147ca:	2301      	movs	r3, #1
 80147cc:	e028      	b.n	8014820 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80147ce:	2200      	movs	r2, #0
 80147d0:	68b9      	ldr	r1, [r7, #8]
 80147d2:	69b8      	ldr	r0, [r7, #24]
 80147d4:	f7ff fea7 	bl	8014526 <put_fat>
 80147d8:	4603      	mov	r3, r0
 80147da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80147dc:	7ffb      	ldrb	r3, [r7, #31]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d001      	beq.n	80147e6 <remove_chain+0x88>
 80147e2:	7ffb      	ldrb	r3, [r7, #31]
 80147e4:	e01c      	b.n	8014820 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80147e6:	69bb      	ldr	r3, [r7, #24]
 80147e8:	699a      	ldr	r2, [r3, #24]
 80147ea:	69bb      	ldr	r3, [r7, #24]
 80147ec:	69db      	ldr	r3, [r3, #28]
 80147ee:	3b02      	subs	r3, #2
 80147f0:	429a      	cmp	r2, r3
 80147f2:	d20b      	bcs.n	801480c <remove_chain+0xae>
			fs->free_clst++;
 80147f4:	69bb      	ldr	r3, [r7, #24]
 80147f6:	699b      	ldr	r3, [r3, #24]
 80147f8:	1c5a      	adds	r2, r3, #1
 80147fa:	69bb      	ldr	r3, [r7, #24]
 80147fc:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80147fe:	69bb      	ldr	r3, [r7, #24]
 8014800:	791b      	ldrb	r3, [r3, #4]
 8014802:	f043 0301 	orr.w	r3, r3, #1
 8014806:	b2da      	uxtb	r2, r3
 8014808:	69bb      	ldr	r3, [r7, #24]
 801480a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801480c:	697b      	ldr	r3, [r7, #20]
 801480e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8014810:	69bb      	ldr	r3, [r7, #24]
 8014812:	69db      	ldr	r3, [r3, #28]
 8014814:	68ba      	ldr	r2, [r7, #8]
 8014816:	429a      	cmp	r2, r3
 8014818:	d3c6      	bcc.n	80147a8 <remove_chain+0x4a>
 801481a:	e000      	b.n	801481e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801481c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801481e:	2300      	movs	r3, #0
}
 8014820:	4618      	mov	r0, r3
 8014822:	3720      	adds	r7, #32
 8014824:	46bd      	mov	sp, r7
 8014826:	bd80      	pop	{r7, pc}

08014828 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8014828:	b580      	push	{r7, lr}
 801482a:	b088      	sub	sp, #32
 801482c:	af00      	add	r7, sp, #0
 801482e:	6078      	str	r0, [r7, #4]
 8014830:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8014838:	683b      	ldr	r3, [r7, #0]
 801483a:	2b00      	cmp	r3, #0
 801483c:	d10d      	bne.n	801485a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801483e:	693b      	ldr	r3, [r7, #16]
 8014840:	695b      	ldr	r3, [r3, #20]
 8014842:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8014844:	69bb      	ldr	r3, [r7, #24]
 8014846:	2b00      	cmp	r3, #0
 8014848:	d004      	beq.n	8014854 <create_chain+0x2c>
 801484a:	693b      	ldr	r3, [r7, #16]
 801484c:	69db      	ldr	r3, [r3, #28]
 801484e:	69ba      	ldr	r2, [r7, #24]
 8014850:	429a      	cmp	r2, r3
 8014852:	d31b      	bcc.n	801488c <create_chain+0x64>
 8014854:	2301      	movs	r3, #1
 8014856:	61bb      	str	r3, [r7, #24]
 8014858:	e018      	b.n	801488c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801485a:	6839      	ldr	r1, [r7, #0]
 801485c:	6878      	ldr	r0, [r7, #4]
 801485e:	f7ff fd8e 	bl	801437e <get_fat>
 8014862:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	2b01      	cmp	r3, #1
 8014868:	d801      	bhi.n	801486e <create_chain+0x46>
 801486a:	2301      	movs	r3, #1
 801486c:	e070      	b.n	8014950 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014874:	d101      	bne.n	801487a <create_chain+0x52>
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	e06a      	b.n	8014950 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801487a:	693b      	ldr	r3, [r7, #16]
 801487c:	69db      	ldr	r3, [r3, #28]
 801487e:	68fa      	ldr	r2, [r7, #12]
 8014880:	429a      	cmp	r2, r3
 8014882:	d201      	bcs.n	8014888 <create_chain+0x60>
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	e063      	b.n	8014950 <create_chain+0x128>
		scl = clst;
 8014888:	683b      	ldr	r3, [r7, #0]
 801488a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801488c:	69bb      	ldr	r3, [r7, #24]
 801488e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8014890:	69fb      	ldr	r3, [r7, #28]
 8014892:	3301      	adds	r3, #1
 8014894:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8014896:	693b      	ldr	r3, [r7, #16]
 8014898:	69db      	ldr	r3, [r3, #28]
 801489a:	69fa      	ldr	r2, [r7, #28]
 801489c:	429a      	cmp	r2, r3
 801489e:	d307      	bcc.n	80148b0 <create_chain+0x88>
				ncl = 2;
 80148a0:	2302      	movs	r3, #2
 80148a2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80148a4:	69fa      	ldr	r2, [r7, #28]
 80148a6:	69bb      	ldr	r3, [r7, #24]
 80148a8:	429a      	cmp	r2, r3
 80148aa:	d901      	bls.n	80148b0 <create_chain+0x88>
 80148ac:	2300      	movs	r3, #0
 80148ae:	e04f      	b.n	8014950 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80148b0:	69f9      	ldr	r1, [r7, #28]
 80148b2:	6878      	ldr	r0, [r7, #4]
 80148b4:	f7ff fd63 	bl	801437e <get_fat>
 80148b8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d00e      	beq.n	80148de <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	2b01      	cmp	r3, #1
 80148c4:	d003      	beq.n	80148ce <create_chain+0xa6>
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80148cc:	d101      	bne.n	80148d2 <create_chain+0xaa>
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	e03e      	b.n	8014950 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80148d2:	69fa      	ldr	r2, [r7, #28]
 80148d4:	69bb      	ldr	r3, [r7, #24]
 80148d6:	429a      	cmp	r2, r3
 80148d8:	d1da      	bne.n	8014890 <create_chain+0x68>
 80148da:	2300      	movs	r3, #0
 80148dc:	e038      	b.n	8014950 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80148de:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80148e0:	f04f 32ff 	mov.w	r2, #4294967295
 80148e4:	69f9      	ldr	r1, [r7, #28]
 80148e6:	6938      	ldr	r0, [r7, #16]
 80148e8:	f7ff fe1d 	bl	8014526 <put_fat>
 80148ec:	4603      	mov	r3, r0
 80148ee:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80148f0:	7dfb      	ldrb	r3, [r7, #23]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d109      	bne.n	801490a <create_chain+0xe2>
 80148f6:	683b      	ldr	r3, [r7, #0]
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d006      	beq.n	801490a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80148fc:	69fa      	ldr	r2, [r7, #28]
 80148fe:	6839      	ldr	r1, [r7, #0]
 8014900:	6938      	ldr	r0, [r7, #16]
 8014902:	f7ff fe10 	bl	8014526 <put_fat>
 8014906:	4603      	mov	r3, r0
 8014908:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801490a:	7dfb      	ldrb	r3, [r7, #23]
 801490c:	2b00      	cmp	r3, #0
 801490e:	d116      	bne.n	801493e <create_chain+0x116>
		fs->last_clst = ncl;
 8014910:	693b      	ldr	r3, [r7, #16]
 8014912:	69fa      	ldr	r2, [r7, #28]
 8014914:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8014916:	693b      	ldr	r3, [r7, #16]
 8014918:	699a      	ldr	r2, [r3, #24]
 801491a:	693b      	ldr	r3, [r7, #16]
 801491c:	69db      	ldr	r3, [r3, #28]
 801491e:	3b02      	subs	r3, #2
 8014920:	429a      	cmp	r2, r3
 8014922:	d804      	bhi.n	801492e <create_chain+0x106>
 8014924:	693b      	ldr	r3, [r7, #16]
 8014926:	699b      	ldr	r3, [r3, #24]
 8014928:	1e5a      	subs	r2, r3, #1
 801492a:	693b      	ldr	r3, [r7, #16]
 801492c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801492e:	693b      	ldr	r3, [r7, #16]
 8014930:	791b      	ldrb	r3, [r3, #4]
 8014932:	f043 0301 	orr.w	r3, r3, #1
 8014936:	b2da      	uxtb	r2, r3
 8014938:	693b      	ldr	r3, [r7, #16]
 801493a:	711a      	strb	r2, [r3, #4]
 801493c:	e007      	b.n	801494e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801493e:	7dfb      	ldrb	r3, [r7, #23]
 8014940:	2b01      	cmp	r3, #1
 8014942:	d102      	bne.n	801494a <create_chain+0x122>
 8014944:	f04f 33ff 	mov.w	r3, #4294967295
 8014948:	e000      	b.n	801494c <create_chain+0x124>
 801494a:	2301      	movs	r3, #1
 801494c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801494e:	69fb      	ldr	r3, [r7, #28]
}
 8014950:	4618      	mov	r0, r3
 8014952:	3720      	adds	r7, #32
 8014954:	46bd      	mov	sp, r7
 8014956:	bd80      	pop	{r7, pc}

08014958 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8014958:	b480      	push	{r7}
 801495a:	b087      	sub	sp, #28
 801495c:	af00      	add	r7, sp, #0
 801495e:	6078      	str	r0, [r7, #4]
 8014960:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801496c:	3304      	adds	r3, #4
 801496e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	899b      	ldrh	r3, [r3, #12]
 8014974:	461a      	mov	r2, r3
 8014976:	683b      	ldr	r3, [r7, #0]
 8014978:	fbb3 f3f2 	udiv	r3, r3, r2
 801497c:	68fa      	ldr	r2, [r7, #12]
 801497e:	8952      	ldrh	r2, [r2, #10]
 8014980:	fbb3 f3f2 	udiv	r3, r3, r2
 8014984:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8014986:	693b      	ldr	r3, [r7, #16]
 8014988:	1d1a      	adds	r2, r3, #4
 801498a:	613a      	str	r2, [r7, #16]
 801498c:	681b      	ldr	r3, [r3, #0]
 801498e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8014990:	68bb      	ldr	r3, [r7, #8]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d101      	bne.n	801499a <clmt_clust+0x42>
 8014996:	2300      	movs	r3, #0
 8014998:	e010      	b.n	80149bc <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 801499a:	697a      	ldr	r2, [r7, #20]
 801499c:	68bb      	ldr	r3, [r7, #8]
 801499e:	429a      	cmp	r2, r3
 80149a0:	d307      	bcc.n	80149b2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80149a2:	697a      	ldr	r2, [r7, #20]
 80149a4:	68bb      	ldr	r3, [r7, #8]
 80149a6:	1ad3      	subs	r3, r2, r3
 80149a8:	617b      	str	r3, [r7, #20]
 80149aa:	693b      	ldr	r3, [r7, #16]
 80149ac:	3304      	adds	r3, #4
 80149ae:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80149b0:	e7e9      	b.n	8014986 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80149b2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80149b4:	693b      	ldr	r3, [r7, #16]
 80149b6:	681a      	ldr	r2, [r3, #0]
 80149b8:	697b      	ldr	r3, [r7, #20]
 80149ba:	4413      	add	r3, r2
}
 80149bc:	4618      	mov	r0, r3
 80149be:	371c      	adds	r7, #28
 80149c0:	46bd      	mov	sp, r7
 80149c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149c6:	4770      	bx	lr

080149c8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80149c8:	b580      	push	{r7, lr}
 80149ca:	b086      	sub	sp, #24
 80149cc:	af00      	add	r7, sp, #0
 80149ce:	6078      	str	r0, [r7, #4]
 80149d0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80149d8:	683b      	ldr	r3, [r7, #0]
 80149da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80149de:	d204      	bcs.n	80149ea <dir_sdi+0x22>
 80149e0:	683b      	ldr	r3, [r7, #0]
 80149e2:	f003 031f 	and.w	r3, r3, #31
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d001      	beq.n	80149ee <dir_sdi+0x26>
		return FR_INT_ERR;
 80149ea:	2302      	movs	r3, #2
 80149ec:	e071      	b.n	8014ad2 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	683a      	ldr	r2, [r7, #0]
 80149f2:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	689b      	ldr	r3, [r3, #8]
 80149f8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80149fa:	697b      	ldr	r3, [r7, #20]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d106      	bne.n	8014a0e <dir_sdi+0x46>
 8014a00:	693b      	ldr	r3, [r7, #16]
 8014a02:	781b      	ldrb	r3, [r3, #0]
 8014a04:	2b02      	cmp	r3, #2
 8014a06:	d902      	bls.n	8014a0e <dir_sdi+0x46>
		clst = fs->dirbase;
 8014a08:	693b      	ldr	r3, [r7, #16]
 8014a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a0c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8014a0e:	697b      	ldr	r3, [r7, #20]
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d10c      	bne.n	8014a2e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8014a14:	683b      	ldr	r3, [r7, #0]
 8014a16:	095b      	lsrs	r3, r3, #5
 8014a18:	693a      	ldr	r2, [r7, #16]
 8014a1a:	8912      	ldrh	r2, [r2, #8]
 8014a1c:	4293      	cmp	r3, r2
 8014a1e:	d301      	bcc.n	8014a24 <dir_sdi+0x5c>
 8014a20:	2302      	movs	r3, #2
 8014a22:	e056      	b.n	8014ad2 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8014a24:	693b      	ldr	r3, [r7, #16]
 8014a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	619a      	str	r2, [r3, #24]
 8014a2c:	e02d      	b.n	8014a8a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8014a2e:	693b      	ldr	r3, [r7, #16]
 8014a30:	895b      	ldrh	r3, [r3, #10]
 8014a32:	461a      	mov	r2, r3
 8014a34:	693b      	ldr	r3, [r7, #16]
 8014a36:	899b      	ldrh	r3, [r3, #12]
 8014a38:	fb03 f302 	mul.w	r3, r3, r2
 8014a3c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8014a3e:	e019      	b.n	8014a74 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	6979      	ldr	r1, [r7, #20]
 8014a44:	4618      	mov	r0, r3
 8014a46:	f7ff fc9a 	bl	801437e <get_fat>
 8014a4a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014a4c:	697b      	ldr	r3, [r7, #20]
 8014a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a52:	d101      	bne.n	8014a58 <dir_sdi+0x90>
 8014a54:	2301      	movs	r3, #1
 8014a56:	e03c      	b.n	8014ad2 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8014a58:	697b      	ldr	r3, [r7, #20]
 8014a5a:	2b01      	cmp	r3, #1
 8014a5c:	d904      	bls.n	8014a68 <dir_sdi+0xa0>
 8014a5e:	693b      	ldr	r3, [r7, #16]
 8014a60:	69db      	ldr	r3, [r3, #28]
 8014a62:	697a      	ldr	r2, [r7, #20]
 8014a64:	429a      	cmp	r2, r3
 8014a66:	d301      	bcc.n	8014a6c <dir_sdi+0xa4>
 8014a68:	2302      	movs	r3, #2
 8014a6a:	e032      	b.n	8014ad2 <dir_sdi+0x10a>
			ofs -= csz;
 8014a6c:	683a      	ldr	r2, [r7, #0]
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	1ad3      	subs	r3, r2, r3
 8014a72:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8014a74:	683a      	ldr	r2, [r7, #0]
 8014a76:	68fb      	ldr	r3, [r7, #12]
 8014a78:	429a      	cmp	r2, r3
 8014a7a:	d2e1      	bcs.n	8014a40 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8014a7c:	6979      	ldr	r1, [r7, #20]
 8014a7e:	6938      	ldr	r0, [r7, #16]
 8014a80:	f7ff fc5e 	bl	8014340 <clust2sect>
 8014a84:	4602      	mov	r2, r0
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	697a      	ldr	r2, [r7, #20]
 8014a8e:	615a      	str	r2, [r3, #20]
	if (!dp->sect) return FR_INT_ERR;
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	699b      	ldr	r3, [r3, #24]
 8014a94:	2b00      	cmp	r3, #0
 8014a96:	d101      	bne.n	8014a9c <dir_sdi+0xd4>
 8014a98:	2302      	movs	r3, #2
 8014a9a:	e01a      	b.n	8014ad2 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	699a      	ldr	r2, [r3, #24]
 8014aa0:	693b      	ldr	r3, [r7, #16]
 8014aa2:	899b      	ldrh	r3, [r3, #12]
 8014aa4:	4619      	mov	r1, r3
 8014aa6:	683b      	ldr	r3, [r7, #0]
 8014aa8:	fbb3 f3f1 	udiv	r3, r3, r1
 8014aac:	441a      	add	r2, r3
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8014ab2:	693b      	ldr	r3, [r7, #16]
 8014ab4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014ab8:	693b      	ldr	r3, [r7, #16]
 8014aba:	899b      	ldrh	r3, [r3, #12]
 8014abc:	461a      	mov	r2, r3
 8014abe:	683b      	ldr	r3, [r7, #0]
 8014ac0:	fbb3 f0f2 	udiv	r0, r3, r2
 8014ac4:	fb02 f200 	mul.w	r2, r2, r0
 8014ac8:	1a9b      	subs	r3, r3, r2
 8014aca:	18ca      	adds	r2, r1, r3
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8014ad0:	2300      	movs	r3, #0
}
 8014ad2:	4618      	mov	r0, r3
 8014ad4:	3718      	adds	r7, #24
 8014ad6:	46bd      	mov	sp, r7
 8014ad8:	bd80      	pop	{r7, pc}

08014ada <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8014ada:	b580      	push	{r7, lr}
 8014adc:	b086      	sub	sp, #24
 8014ade:	af00      	add	r7, sp, #0
 8014ae0:	6078      	str	r0, [r7, #4]
 8014ae2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	691b      	ldr	r3, [r3, #16]
 8014aee:	3320      	adds	r3, #32
 8014af0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	699b      	ldr	r3, [r3, #24]
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d003      	beq.n	8014b02 <dir_next+0x28>
 8014afa:	68bb      	ldr	r3, [r7, #8]
 8014afc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8014b00:	d301      	bcc.n	8014b06 <dir_next+0x2c>
 8014b02:	2304      	movs	r3, #4
 8014b04:	e0bb      	b.n	8014c7e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	899b      	ldrh	r3, [r3, #12]
 8014b0a:	461a      	mov	r2, r3
 8014b0c:	68bb      	ldr	r3, [r7, #8]
 8014b0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8014b12:	fb02 f201 	mul.w	r2, r2, r1
 8014b16:	1a9b      	subs	r3, r3, r2
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	f040 809d 	bne.w	8014c58 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	699b      	ldr	r3, [r3, #24]
 8014b22:	1c5a      	adds	r2, r3, #1
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	619a      	str	r2, [r3, #24]

		if (!dp->clust) {		/* Static table */
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	695b      	ldr	r3, [r3, #20]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d10b      	bne.n	8014b48 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8014b30:	68bb      	ldr	r3, [r7, #8]
 8014b32:	095b      	lsrs	r3, r3, #5
 8014b34:	68fa      	ldr	r2, [r7, #12]
 8014b36:	8912      	ldrh	r2, [r2, #8]
 8014b38:	4293      	cmp	r3, r2
 8014b3a:	f0c0 808d 	bcc.w	8014c58 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	2200      	movs	r2, #0
 8014b42:	619a      	str	r2, [r3, #24]
 8014b44:	2304      	movs	r3, #4
 8014b46:	e09a      	b.n	8014c7e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	899b      	ldrh	r3, [r3, #12]
 8014b4c:	461a      	mov	r2, r3
 8014b4e:	68bb      	ldr	r3, [r7, #8]
 8014b50:	fbb3 f3f2 	udiv	r3, r3, r2
 8014b54:	68fa      	ldr	r2, [r7, #12]
 8014b56:	8952      	ldrh	r2, [r2, #10]
 8014b58:	3a01      	subs	r2, #1
 8014b5a:	4013      	ands	r3, r2
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d17b      	bne.n	8014c58 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8014b60:	687a      	ldr	r2, [r7, #4]
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	695b      	ldr	r3, [r3, #20]
 8014b66:	4619      	mov	r1, r3
 8014b68:	4610      	mov	r0, r2
 8014b6a:	f7ff fc08 	bl	801437e <get_fat>
 8014b6e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8014b70:	697b      	ldr	r3, [r7, #20]
 8014b72:	2b01      	cmp	r3, #1
 8014b74:	d801      	bhi.n	8014b7a <dir_next+0xa0>
 8014b76:	2302      	movs	r3, #2
 8014b78:	e081      	b.n	8014c7e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8014b7a:	697b      	ldr	r3, [r7, #20]
 8014b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b80:	d101      	bne.n	8014b86 <dir_next+0xac>
 8014b82:	2301      	movs	r3, #1
 8014b84:	e07b      	b.n	8014c7e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	69db      	ldr	r3, [r3, #28]
 8014b8a:	697a      	ldr	r2, [r7, #20]
 8014b8c:	429a      	cmp	r2, r3
 8014b8e:	d359      	bcc.n	8014c44 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8014b90:	683b      	ldr	r3, [r7, #0]
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d104      	bne.n	8014ba0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	2200      	movs	r2, #0
 8014b9a:	619a      	str	r2, [r3, #24]
 8014b9c:	2304      	movs	r3, #4
 8014b9e:	e06e      	b.n	8014c7e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8014ba0:	687a      	ldr	r2, [r7, #4]
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	695b      	ldr	r3, [r3, #20]
 8014ba6:	4619      	mov	r1, r3
 8014ba8:	4610      	mov	r0, r2
 8014baa:	f7ff fe3d 	bl	8014828 <create_chain>
 8014bae:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8014bb0:	697b      	ldr	r3, [r7, #20]
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d101      	bne.n	8014bba <dir_next+0xe0>
 8014bb6:	2307      	movs	r3, #7
 8014bb8:	e061      	b.n	8014c7e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8014bba:	697b      	ldr	r3, [r7, #20]
 8014bbc:	2b01      	cmp	r3, #1
 8014bbe:	d101      	bne.n	8014bc4 <dir_next+0xea>
 8014bc0:	2302      	movs	r3, #2
 8014bc2:	e05c      	b.n	8014c7e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8014bc4:	697b      	ldr	r3, [r7, #20]
 8014bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bca:	d101      	bne.n	8014bd0 <dir_next+0xf6>
 8014bcc:	2301      	movs	r3, #1
 8014bce:	e056      	b.n	8014c7e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8014bd0:	68f8      	ldr	r0, [r7, #12]
 8014bd2:	f7ff fad3 	bl	801417c <sync_window>
 8014bd6:	4603      	mov	r3, r0
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d001      	beq.n	8014be0 <dir_next+0x106>
 8014bdc:	2301      	movs	r3, #1
 8014bde:	e04e      	b.n	8014c7e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8014be6:	68fb      	ldr	r3, [r7, #12]
 8014be8:	899b      	ldrh	r3, [r3, #12]
 8014bea:	461a      	mov	r2, r3
 8014bec:	2100      	movs	r1, #0
 8014bee:	f7ff fa68 	bl	80140c2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8014bf2:	2300      	movs	r3, #0
 8014bf4:	613b      	str	r3, [r7, #16]
 8014bf6:	6979      	ldr	r1, [r7, #20]
 8014bf8:	68f8      	ldr	r0, [r7, #12]
 8014bfa:	f7ff fba1 	bl	8014340 <clust2sect>
 8014bfe:	4602      	mov	r2, r0
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	635a      	str	r2, [r3, #52]	; 0x34
 8014c04:	e012      	b.n	8014c2c <dir_next+0x152>
						fs->wflag = 1;
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	2201      	movs	r2, #1
 8014c0a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8014c0c:	68f8      	ldr	r0, [r7, #12]
 8014c0e:	f7ff fab5 	bl	801417c <sync_window>
 8014c12:	4603      	mov	r3, r0
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d001      	beq.n	8014c1c <dir_next+0x142>
 8014c18:	2301      	movs	r3, #1
 8014c1a:	e030      	b.n	8014c7e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8014c1c:	693b      	ldr	r3, [r7, #16]
 8014c1e:	3301      	adds	r3, #1
 8014c20:	613b      	str	r3, [r7, #16]
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014c26:	1c5a      	adds	r2, r3, #1
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	635a      	str	r2, [r3, #52]	; 0x34
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	895b      	ldrh	r3, [r3, #10]
 8014c30:	461a      	mov	r2, r3
 8014c32:	693b      	ldr	r3, [r7, #16]
 8014c34:	4293      	cmp	r3, r2
 8014c36:	d3e6      	bcc.n	8014c06 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014c3c:	693b      	ldr	r3, [r7, #16]
 8014c3e:	1ad2      	subs	r2, r2, r3
 8014c40:	68fb      	ldr	r3, [r7, #12]
 8014c42:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	697a      	ldr	r2, [r7, #20]
 8014c48:	615a      	str	r2, [r3, #20]
				dp->sect = clust2sect(fs, clst);
 8014c4a:	6979      	ldr	r1, [r7, #20]
 8014c4c:	68f8      	ldr	r0, [r7, #12]
 8014c4e:	f7ff fb77 	bl	8014340 <clust2sect>
 8014c52:	4602      	mov	r2, r0
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	68ba      	ldr	r2, [r7, #8]
 8014c5c:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	899b      	ldrh	r3, [r3, #12]
 8014c68:	461a      	mov	r2, r3
 8014c6a:	68bb      	ldr	r3, [r7, #8]
 8014c6c:	fbb3 f0f2 	udiv	r0, r3, r2
 8014c70:	fb02 f200 	mul.w	r2, r2, r0
 8014c74:	1a9b      	subs	r3, r3, r2
 8014c76:	18ca      	adds	r2, r1, r3
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8014c7c:	2300      	movs	r3, #0
}
 8014c7e:	4618      	mov	r0, r3
 8014c80:	3718      	adds	r7, #24
 8014c82:	46bd      	mov	sp, r7
 8014c84:	bd80      	pop	{r7, pc}

08014c86 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8014c86:	b580      	push	{r7, lr}
 8014c88:	b086      	sub	sp, #24
 8014c8a:	af00      	add	r7, sp, #0
 8014c8c:	6078      	str	r0, [r7, #4]
 8014c8e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8014c96:	2100      	movs	r1, #0
 8014c98:	6878      	ldr	r0, [r7, #4]
 8014c9a:	f7ff fe95 	bl	80149c8 <dir_sdi>
 8014c9e:	4603      	mov	r3, r0
 8014ca0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014ca2:	7dfb      	ldrb	r3, [r7, #23]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	d12b      	bne.n	8014d00 <dir_alloc+0x7a>
		n = 0;
 8014ca8:	2300      	movs	r3, #0
 8014caa:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	699b      	ldr	r3, [r3, #24]
 8014cb0:	4619      	mov	r1, r3
 8014cb2:	68f8      	ldr	r0, [r7, #12]
 8014cb4:	f7ff faa6 	bl	8014204 <move_window>
 8014cb8:	4603      	mov	r3, r0
 8014cba:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8014cbc:	7dfb      	ldrb	r3, [r7, #23]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d11d      	bne.n	8014cfe <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	69db      	ldr	r3, [r3, #28]
 8014cc6:	781b      	ldrb	r3, [r3, #0]
 8014cc8:	2be5      	cmp	r3, #229	; 0xe5
 8014cca:	d004      	beq.n	8014cd6 <dir_alloc+0x50>
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	69db      	ldr	r3, [r3, #28]
 8014cd0:	781b      	ldrb	r3, [r3, #0]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d107      	bne.n	8014ce6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8014cd6:	693b      	ldr	r3, [r7, #16]
 8014cd8:	3301      	adds	r3, #1
 8014cda:	613b      	str	r3, [r7, #16]
 8014cdc:	693a      	ldr	r2, [r7, #16]
 8014cde:	683b      	ldr	r3, [r7, #0]
 8014ce0:	429a      	cmp	r2, r3
 8014ce2:	d102      	bne.n	8014cea <dir_alloc+0x64>
 8014ce4:	e00c      	b.n	8014d00 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8014ce6:	2300      	movs	r3, #0
 8014ce8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8014cea:	2101      	movs	r1, #1
 8014cec:	6878      	ldr	r0, [r7, #4]
 8014cee:	f7ff fef4 	bl	8014ada <dir_next>
 8014cf2:	4603      	mov	r3, r0
 8014cf4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8014cf6:	7dfb      	ldrb	r3, [r7, #23]
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d0d7      	beq.n	8014cac <dir_alloc+0x26>
 8014cfc:	e000      	b.n	8014d00 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8014cfe:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8014d00:	7dfb      	ldrb	r3, [r7, #23]
 8014d02:	2b04      	cmp	r3, #4
 8014d04:	d101      	bne.n	8014d0a <dir_alloc+0x84>
 8014d06:	2307      	movs	r3, #7
 8014d08:	75fb      	strb	r3, [r7, #23]
	return res;
 8014d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	3718      	adds	r7, #24
 8014d10:	46bd      	mov	sp, r7
 8014d12:	bd80      	pop	{r7, pc}

08014d14 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8014d14:	b580      	push	{r7, lr}
 8014d16:	b084      	sub	sp, #16
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	6078      	str	r0, [r7, #4]
 8014d1c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8014d1e:	683b      	ldr	r3, [r7, #0]
 8014d20:	331a      	adds	r3, #26
 8014d22:	4618      	mov	r0, r3
 8014d24:	f7ff f92a 	bl	8013f7c <ld_word>
 8014d28:	4603      	mov	r3, r0
 8014d2a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	781b      	ldrb	r3, [r3, #0]
 8014d30:	2b03      	cmp	r3, #3
 8014d32:	d109      	bne.n	8014d48 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8014d34:	683b      	ldr	r3, [r7, #0]
 8014d36:	3314      	adds	r3, #20
 8014d38:	4618      	mov	r0, r3
 8014d3a:	f7ff f91f 	bl	8013f7c <ld_word>
 8014d3e:	4603      	mov	r3, r0
 8014d40:	041b      	lsls	r3, r3, #16
 8014d42:	68fa      	ldr	r2, [r7, #12]
 8014d44:	4313      	orrs	r3, r2
 8014d46:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8014d48:	68fb      	ldr	r3, [r7, #12]
}
 8014d4a:	4618      	mov	r0, r3
 8014d4c:	3710      	adds	r7, #16
 8014d4e:	46bd      	mov	sp, r7
 8014d50:	bd80      	pop	{r7, pc}

08014d52 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8014d52:	b580      	push	{r7, lr}
 8014d54:	b084      	sub	sp, #16
 8014d56:	af00      	add	r7, sp, #0
 8014d58:	60f8      	str	r0, [r7, #12]
 8014d5a:	60b9      	str	r1, [r7, #8]
 8014d5c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8014d5e:	68bb      	ldr	r3, [r7, #8]
 8014d60:	331a      	adds	r3, #26
 8014d62:	687a      	ldr	r2, [r7, #4]
 8014d64:	b292      	uxth	r2, r2
 8014d66:	4611      	mov	r1, r2
 8014d68:	4618      	mov	r0, r3
 8014d6a:	f7ff f942 	bl	8013ff2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	781b      	ldrb	r3, [r3, #0]
 8014d72:	2b03      	cmp	r3, #3
 8014d74:	d109      	bne.n	8014d8a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8014d76:	68bb      	ldr	r3, [r7, #8]
 8014d78:	f103 0214 	add.w	r2, r3, #20
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	0c1b      	lsrs	r3, r3, #16
 8014d80:	b29b      	uxth	r3, r3
 8014d82:	4619      	mov	r1, r3
 8014d84:	4610      	mov	r0, r2
 8014d86:	f7ff f934 	bl	8013ff2 <st_word>
	}
}
 8014d8a:	bf00      	nop
 8014d8c:	3710      	adds	r7, #16
 8014d8e:	46bd      	mov	sp, r7
 8014d90:	bd80      	pop	{r7, pc}
	...

08014d94 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8014d94:	b590      	push	{r4, r7, lr}
 8014d96:	b087      	sub	sp, #28
 8014d98:	af00      	add	r7, sp, #0
 8014d9a:	6078      	str	r0, [r7, #4]
 8014d9c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8014d9e:	683b      	ldr	r3, [r7, #0]
 8014da0:	331a      	adds	r3, #26
 8014da2:	4618      	mov	r0, r3
 8014da4:	f7ff f8ea 	bl	8013f7c <ld_word>
 8014da8:	4603      	mov	r3, r0
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d001      	beq.n	8014db2 <cmp_lfn+0x1e>
 8014dae:	2300      	movs	r3, #0
 8014db0:	e059      	b.n	8014e66 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8014db2:	683b      	ldr	r3, [r7, #0]
 8014db4:	781b      	ldrb	r3, [r3, #0]
 8014db6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014dba:	1e5a      	subs	r2, r3, #1
 8014dbc:	4613      	mov	r3, r2
 8014dbe:	005b      	lsls	r3, r3, #1
 8014dc0:	4413      	add	r3, r2
 8014dc2:	009b      	lsls	r3, r3, #2
 8014dc4:	4413      	add	r3, r2
 8014dc6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8014dc8:	2301      	movs	r3, #1
 8014dca:	81fb      	strh	r3, [r7, #14]
 8014dcc:	2300      	movs	r3, #0
 8014dce:	613b      	str	r3, [r7, #16]
 8014dd0:	e033      	b.n	8014e3a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8014dd2:	4a27      	ldr	r2, [pc, #156]	; (8014e70 <cmp_lfn+0xdc>)
 8014dd4:	693b      	ldr	r3, [r7, #16]
 8014dd6:	4413      	add	r3, r2
 8014dd8:	781b      	ldrb	r3, [r3, #0]
 8014dda:	461a      	mov	r2, r3
 8014ddc:	683b      	ldr	r3, [r7, #0]
 8014dde:	4413      	add	r3, r2
 8014de0:	4618      	mov	r0, r3
 8014de2:	f7ff f8cb 	bl	8013f7c <ld_word>
 8014de6:	4603      	mov	r3, r0
 8014de8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8014dea:	89fb      	ldrh	r3, [r7, #14]
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d01a      	beq.n	8014e26 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8014df0:	697b      	ldr	r3, [r7, #20]
 8014df2:	2bfe      	cmp	r3, #254	; 0xfe
 8014df4:	d812      	bhi.n	8014e1c <cmp_lfn+0x88>
 8014df6:	89bb      	ldrh	r3, [r7, #12]
 8014df8:	4618      	mov	r0, r3
 8014dfa:	f001 feb9 	bl	8016b70 <ff_wtoupper>
 8014dfe:	4603      	mov	r3, r0
 8014e00:	461c      	mov	r4, r3
 8014e02:	697b      	ldr	r3, [r7, #20]
 8014e04:	1c5a      	adds	r2, r3, #1
 8014e06:	617a      	str	r2, [r7, #20]
 8014e08:	005b      	lsls	r3, r3, #1
 8014e0a:	687a      	ldr	r2, [r7, #4]
 8014e0c:	4413      	add	r3, r2
 8014e0e:	881b      	ldrh	r3, [r3, #0]
 8014e10:	4618      	mov	r0, r3
 8014e12:	f001 fead 	bl	8016b70 <ff_wtoupper>
 8014e16:	4603      	mov	r3, r0
 8014e18:	429c      	cmp	r4, r3
 8014e1a:	d001      	beq.n	8014e20 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8014e1c:	2300      	movs	r3, #0
 8014e1e:	e022      	b.n	8014e66 <cmp_lfn+0xd2>
			}
			wc = uc;
 8014e20:	89bb      	ldrh	r3, [r7, #12]
 8014e22:	81fb      	strh	r3, [r7, #14]
 8014e24:	e006      	b.n	8014e34 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014e26:	89bb      	ldrh	r3, [r7, #12]
 8014e28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014e2c:	4293      	cmp	r3, r2
 8014e2e:	d001      	beq.n	8014e34 <cmp_lfn+0xa0>
 8014e30:	2300      	movs	r3, #0
 8014e32:	e018      	b.n	8014e66 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8014e34:	693b      	ldr	r3, [r7, #16]
 8014e36:	3301      	adds	r3, #1
 8014e38:	613b      	str	r3, [r7, #16]
 8014e3a:	693b      	ldr	r3, [r7, #16]
 8014e3c:	2b0c      	cmp	r3, #12
 8014e3e:	d9c8      	bls.n	8014dd2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8014e40:	683b      	ldr	r3, [r7, #0]
 8014e42:	781b      	ldrb	r3, [r3, #0]
 8014e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d00b      	beq.n	8014e64 <cmp_lfn+0xd0>
 8014e4c:	89fb      	ldrh	r3, [r7, #14]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d008      	beq.n	8014e64 <cmp_lfn+0xd0>
 8014e52:	697b      	ldr	r3, [r7, #20]
 8014e54:	005b      	lsls	r3, r3, #1
 8014e56:	687a      	ldr	r2, [r7, #4]
 8014e58:	4413      	add	r3, r2
 8014e5a:	881b      	ldrh	r3, [r3, #0]
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d001      	beq.n	8014e64 <cmp_lfn+0xd0>
 8014e60:	2300      	movs	r3, #0
 8014e62:	e000      	b.n	8014e66 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8014e64:	2301      	movs	r3, #1
}
 8014e66:	4618      	mov	r0, r3
 8014e68:	371c      	adds	r7, #28
 8014e6a:	46bd      	mov	sp, r7
 8014e6c:	bd90      	pop	{r4, r7, pc}
 8014e6e:	bf00      	nop
 8014e70:	080181ac 	.word	0x080181ac

08014e74 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8014e74:	b580      	push	{r7, lr}
 8014e76:	b088      	sub	sp, #32
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	60f8      	str	r0, [r7, #12]
 8014e7c:	60b9      	str	r1, [r7, #8]
 8014e7e:	4611      	mov	r1, r2
 8014e80:	461a      	mov	r2, r3
 8014e82:	460b      	mov	r3, r1
 8014e84:	71fb      	strb	r3, [r7, #7]
 8014e86:	4613      	mov	r3, r2
 8014e88:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8014e8a:	68bb      	ldr	r3, [r7, #8]
 8014e8c:	330d      	adds	r3, #13
 8014e8e:	79ba      	ldrb	r2, [r7, #6]
 8014e90:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8014e92:	68bb      	ldr	r3, [r7, #8]
 8014e94:	330b      	adds	r3, #11
 8014e96:	220f      	movs	r2, #15
 8014e98:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8014e9a:	68bb      	ldr	r3, [r7, #8]
 8014e9c:	330c      	adds	r3, #12
 8014e9e:	2200      	movs	r2, #0
 8014ea0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8014ea2:	68bb      	ldr	r3, [r7, #8]
 8014ea4:	331a      	adds	r3, #26
 8014ea6:	2100      	movs	r1, #0
 8014ea8:	4618      	mov	r0, r3
 8014eaa:	f7ff f8a2 	bl	8013ff2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8014eae:	79fb      	ldrb	r3, [r7, #7]
 8014eb0:	1e5a      	subs	r2, r3, #1
 8014eb2:	4613      	mov	r3, r2
 8014eb4:	005b      	lsls	r3, r3, #1
 8014eb6:	4413      	add	r3, r2
 8014eb8:	009b      	lsls	r3, r3, #2
 8014eba:	4413      	add	r3, r2
 8014ebc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8014ebe:	2300      	movs	r3, #0
 8014ec0:	82fb      	strh	r3, [r7, #22]
 8014ec2:	2300      	movs	r3, #0
 8014ec4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8014ec6:	8afb      	ldrh	r3, [r7, #22]
 8014ec8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014ecc:	4293      	cmp	r3, r2
 8014ece:	d007      	beq.n	8014ee0 <put_lfn+0x6c>
 8014ed0:	69fb      	ldr	r3, [r7, #28]
 8014ed2:	1c5a      	adds	r2, r3, #1
 8014ed4:	61fa      	str	r2, [r7, #28]
 8014ed6:	005b      	lsls	r3, r3, #1
 8014ed8:	68fa      	ldr	r2, [r7, #12]
 8014eda:	4413      	add	r3, r2
 8014edc:	881b      	ldrh	r3, [r3, #0]
 8014ede:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8014ee0:	4a17      	ldr	r2, [pc, #92]	; (8014f40 <put_lfn+0xcc>)
 8014ee2:	69bb      	ldr	r3, [r7, #24]
 8014ee4:	4413      	add	r3, r2
 8014ee6:	781b      	ldrb	r3, [r3, #0]
 8014ee8:	461a      	mov	r2, r3
 8014eea:	68bb      	ldr	r3, [r7, #8]
 8014eec:	4413      	add	r3, r2
 8014eee:	8afa      	ldrh	r2, [r7, #22]
 8014ef0:	4611      	mov	r1, r2
 8014ef2:	4618      	mov	r0, r3
 8014ef4:	f7ff f87d 	bl	8013ff2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8014ef8:	8afb      	ldrh	r3, [r7, #22]
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d102      	bne.n	8014f04 <put_lfn+0x90>
 8014efe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014f02:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8014f04:	69bb      	ldr	r3, [r7, #24]
 8014f06:	3301      	adds	r3, #1
 8014f08:	61bb      	str	r3, [r7, #24]
 8014f0a:	69bb      	ldr	r3, [r7, #24]
 8014f0c:	2b0c      	cmp	r3, #12
 8014f0e:	d9da      	bls.n	8014ec6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8014f10:	8afb      	ldrh	r3, [r7, #22]
 8014f12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014f16:	4293      	cmp	r3, r2
 8014f18:	d006      	beq.n	8014f28 <put_lfn+0xb4>
 8014f1a:	69fb      	ldr	r3, [r7, #28]
 8014f1c:	005b      	lsls	r3, r3, #1
 8014f1e:	68fa      	ldr	r2, [r7, #12]
 8014f20:	4413      	add	r3, r2
 8014f22:	881b      	ldrh	r3, [r3, #0]
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d103      	bne.n	8014f30 <put_lfn+0xbc>
 8014f28:	79fb      	ldrb	r3, [r7, #7]
 8014f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f2e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8014f30:	68bb      	ldr	r3, [r7, #8]
 8014f32:	79fa      	ldrb	r2, [r7, #7]
 8014f34:	701a      	strb	r2, [r3, #0]
}
 8014f36:	bf00      	nop
 8014f38:	3720      	adds	r7, #32
 8014f3a:	46bd      	mov	sp, r7
 8014f3c:	bd80      	pop	{r7, pc}
 8014f3e:	bf00      	nop
 8014f40:	080181ac 	.word	0x080181ac

08014f44 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8014f44:	b580      	push	{r7, lr}
 8014f46:	b08c      	sub	sp, #48	; 0x30
 8014f48:	af00      	add	r7, sp, #0
 8014f4a:	60f8      	str	r0, [r7, #12]
 8014f4c:	60b9      	str	r1, [r7, #8]
 8014f4e:	607a      	str	r2, [r7, #4]
 8014f50:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8014f52:	220b      	movs	r2, #11
 8014f54:	68b9      	ldr	r1, [r7, #8]
 8014f56:	68f8      	ldr	r0, [r7, #12]
 8014f58:	f7ff f892 	bl	8014080 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8014f5c:	683b      	ldr	r3, [r7, #0]
 8014f5e:	2b05      	cmp	r3, #5
 8014f60:	d92b      	bls.n	8014fba <gen_numname+0x76>
		sr = seq;
 8014f62:	683b      	ldr	r3, [r7, #0]
 8014f64:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8014f66:	e022      	b.n	8014fae <gen_numname+0x6a>
			wc = *lfn++;
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	1c9a      	adds	r2, r3, #2
 8014f6c:	607a      	str	r2, [r7, #4]
 8014f6e:	881b      	ldrh	r3, [r3, #0]
 8014f70:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8014f72:	2300      	movs	r3, #0
 8014f74:	62bb      	str	r3, [r7, #40]	; 0x28
 8014f76:	e017      	b.n	8014fa8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8014f78:	69fb      	ldr	r3, [r7, #28]
 8014f7a:	005a      	lsls	r2, r3, #1
 8014f7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014f7e:	f003 0301 	and.w	r3, r3, #1
 8014f82:	4413      	add	r3, r2
 8014f84:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8014f86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014f88:	085b      	lsrs	r3, r3, #1
 8014f8a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8014f8c:	69fb      	ldr	r3, [r7, #28]
 8014f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d005      	beq.n	8014fa2 <gen_numname+0x5e>
 8014f96:	69fb      	ldr	r3, [r7, #28]
 8014f98:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8014f9c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8014fa0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8014fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fa4:	3301      	adds	r3, #1
 8014fa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8014fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014faa:	2b0f      	cmp	r3, #15
 8014fac:	d9e4      	bls.n	8014f78 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	881b      	ldrh	r3, [r3, #0]
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d1d8      	bne.n	8014f68 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8014fb6:	69fb      	ldr	r3, [r7, #28]
 8014fb8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8014fba:	2307      	movs	r3, #7
 8014fbc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8014fbe:	683b      	ldr	r3, [r7, #0]
 8014fc0:	b2db      	uxtb	r3, r3
 8014fc2:	f003 030f 	and.w	r3, r3, #15
 8014fc6:	b2db      	uxtb	r3, r3
 8014fc8:	3330      	adds	r3, #48	; 0x30
 8014fca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8014fce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014fd2:	2b39      	cmp	r3, #57	; 0x39
 8014fd4:	d904      	bls.n	8014fe0 <gen_numname+0x9c>
 8014fd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014fda:	3307      	adds	r3, #7
 8014fdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8014fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fe2:	1e5a      	subs	r2, r3, #1
 8014fe4:	62ba      	str	r2, [r7, #40]	; 0x28
 8014fe6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014fea:	4413      	add	r3, r2
 8014fec:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8014ff0:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8014ff4:	683b      	ldr	r3, [r7, #0]
 8014ff6:	091b      	lsrs	r3, r3, #4
 8014ff8:	603b      	str	r3, [r7, #0]
	} while (seq);
 8014ffa:	683b      	ldr	r3, [r7, #0]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d1de      	bne.n	8014fbe <gen_numname+0x7a>
	ns[i] = '~';
 8015000:	f107 0214 	add.w	r2, r7, #20
 8015004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015006:	4413      	add	r3, r2
 8015008:	227e      	movs	r2, #126	; 0x7e
 801500a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801500c:	2300      	movs	r3, #0
 801500e:	627b      	str	r3, [r7, #36]	; 0x24
 8015010:	e002      	b.n	8015018 <gen_numname+0xd4>
 8015012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015014:	3301      	adds	r3, #1
 8015016:	627b      	str	r3, [r7, #36]	; 0x24
 8015018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801501a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801501c:	429a      	cmp	r2, r3
 801501e:	d205      	bcs.n	801502c <gen_numname+0xe8>
 8015020:	68fa      	ldr	r2, [r7, #12]
 8015022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015024:	4413      	add	r3, r2
 8015026:	781b      	ldrb	r3, [r3, #0]
 8015028:	2b20      	cmp	r3, #32
 801502a:	d1f2      	bne.n	8015012 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801502c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801502e:	2b07      	cmp	r3, #7
 8015030:	d808      	bhi.n	8015044 <gen_numname+0x100>
 8015032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015034:	1c5a      	adds	r2, r3, #1
 8015036:	62ba      	str	r2, [r7, #40]	; 0x28
 8015038:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801503c:	4413      	add	r3, r2
 801503e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8015042:	e000      	b.n	8015046 <gen_numname+0x102>
 8015044:	2120      	movs	r1, #32
 8015046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015048:	1c5a      	adds	r2, r3, #1
 801504a:	627a      	str	r2, [r7, #36]	; 0x24
 801504c:	68fa      	ldr	r2, [r7, #12]
 801504e:	4413      	add	r3, r2
 8015050:	460a      	mov	r2, r1
 8015052:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8015054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015056:	2b07      	cmp	r3, #7
 8015058:	d9e8      	bls.n	801502c <gen_numname+0xe8>
}
 801505a:	bf00      	nop
 801505c:	bf00      	nop
 801505e:	3730      	adds	r7, #48	; 0x30
 8015060:	46bd      	mov	sp, r7
 8015062:	bd80      	pop	{r7, pc}

08015064 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8015064:	b480      	push	{r7}
 8015066:	b085      	sub	sp, #20
 8015068:	af00      	add	r7, sp, #0
 801506a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801506c:	2300      	movs	r3, #0
 801506e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8015070:	230b      	movs	r3, #11
 8015072:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8015074:	7bfb      	ldrb	r3, [r7, #15]
 8015076:	b2da      	uxtb	r2, r3
 8015078:	0852      	lsrs	r2, r2, #1
 801507a:	01db      	lsls	r3, r3, #7
 801507c:	4313      	orrs	r3, r2
 801507e:	b2da      	uxtb	r2, r3
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	1c59      	adds	r1, r3, #1
 8015084:	6079      	str	r1, [r7, #4]
 8015086:	781b      	ldrb	r3, [r3, #0]
 8015088:	4413      	add	r3, r2
 801508a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801508c:	68bb      	ldr	r3, [r7, #8]
 801508e:	3b01      	subs	r3, #1
 8015090:	60bb      	str	r3, [r7, #8]
 8015092:	68bb      	ldr	r3, [r7, #8]
 8015094:	2b00      	cmp	r3, #0
 8015096:	d1ed      	bne.n	8015074 <sum_sfn+0x10>
	return sum;
 8015098:	7bfb      	ldrb	r3, [r7, #15]
}
 801509a:	4618      	mov	r0, r3
 801509c:	3714      	adds	r7, #20
 801509e:	46bd      	mov	sp, r7
 80150a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150a4:	4770      	bx	lr

080150a6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80150a6:	b580      	push	{r7, lr}
 80150a8:	b086      	sub	sp, #24
 80150aa:	af00      	add	r7, sp, #0
 80150ac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80150b4:	2100      	movs	r1, #0
 80150b6:	6878      	ldr	r0, [r7, #4]
 80150b8:	f7ff fc86 	bl	80149c8 <dir_sdi>
 80150bc:	4603      	mov	r3, r0
 80150be:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80150c0:	7dfb      	ldrb	r3, [r7, #23]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	d001      	beq.n	80150ca <dir_find+0x24>
 80150c6:	7dfb      	ldrb	r3, [r7, #23]
 80150c8:	e0a9      	b.n	801521e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80150ca:	23ff      	movs	r3, #255	; 0xff
 80150cc:	753b      	strb	r3, [r7, #20]
 80150ce:	7d3b      	ldrb	r3, [r7, #20]
 80150d0:	757b      	strb	r3, [r7, #21]
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	f04f 32ff 	mov.w	r2, #4294967295
 80150d8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
	do {
		res = move_window(fs, dp->sect);
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	699b      	ldr	r3, [r3, #24]
 80150de:	4619      	mov	r1, r3
 80150e0:	6938      	ldr	r0, [r7, #16]
 80150e2:	f7ff f88f 	bl	8014204 <move_window>
 80150e6:	4603      	mov	r3, r0
 80150e8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80150ea:	7dfb      	ldrb	r3, [r7, #23]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	f040 8090 	bne.w	8015212 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	69db      	ldr	r3, [r3, #28]
 80150f6:	781b      	ldrb	r3, [r3, #0]
 80150f8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80150fa:	7dbb      	ldrb	r3, [r7, #22]
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d102      	bne.n	8015106 <dir_find+0x60>
 8015100:	2304      	movs	r3, #4
 8015102:	75fb      	strb	r3, [r7, #23]
 8015104:	e08a      	b.n	801521c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	69db      	ldr	r3, [r3, #28]
 801510a:	330b      	adds	r3, #11
 801510c:	781b      	ldrb	r3, [r3, #0]
 801510e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015112:	73fb      	strb	r3, [r7, #15]
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	7bfa      	ldrb	r2, [r7, #15]
 8015118:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801511a:	7dbb      	ldrb	r3, [r7, #22]
 801511c:	2be5      	cmp	r3, #229	; 0xe5
 801511e:	d007      	beq.n	8015130 <dir_find+0x8a>
 8015120:	7bfb      	ldrb	r3, [r7, #15]
 8015122:	f003 0308 	and.w	r3, r3, #8
 8015126:	2b00      	cmp	r3, #0
 8015128:	d009      	beq.n	801513e <dir_find+0x98>
 801512a:	7bfb      	ldrb	r3, [r7, #15]
 801512c:	2b0f      	cmp	r3, #15
 801512e:	d006      	beq.n	801513e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8015130:	23ff      	movs	r3, #255	; 0xff
 8015132:	757b      	strb	r3, [r7, #21]
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	f04f 32ff 	mov.w	r2, #4294967295
 801513a:	62da      	str	r2, [r3, #44]	; 0x2c
 801513c:	e05e      	b.n	80151fc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801513e:	7bfb      	ldrb	r3, [r7, #15]
 8015140:	2b0f      	cmp	r3, #15
 8015142:	d136      	bne.n	80151b2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801514a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801514e:	2b00      	cmp	r3, #0
 8015150:	d154      	bne.n	80151fc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8015152:	7dbb      	ldrb	r3, [r7, #22]
 8015154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015158:	2b00      	cmp	r3, #0
 801515a:	d00d      	beq.n	8015178 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	69db      	ldr	r3, [r3, #28]
 8015160:	7b5b      	ldrb	r3, [r3, #13]
 8015162:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8015164:	7dbb      	ldrb	r3, [r7, #22]
 8015166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801516a:	75bb      	strb	r3, [r7, #22]
 801516c:	7dbb      	ldrb	r3, [r7, #22]
 801516e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	691a      	ldr	r2, [r3, #16]
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	62da      	str	r2, [r3, #44]	; 0x2c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8015178:	7dba      	ldrb	r2, [r7, #22]
 801517a:	7d7b      	ldrb	r3, [r7, #21]
 801517c:	429a      	cmp	r2, r3
 801517e:	d115      	bne.n	80151ac <dir_find+0x106>
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	69db      	ldr	r3, [r3, #28]
 8015184:	330d      	adds	r3, #13
 8015186:	781b      	ldrb	r3, [r3, #0]
 8015188:	7d3a      	ldrb	r2, [r7, #20]
 801518a:	429a      	cmp	r2, r3
 801518c:	d10e      	bne.n	80151ac <dir_find+0x106>
 801518e:	693b      	ldr	r3, [r7, #16]
 8015190:	691a      	ldr	r2, [r3, #16]
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	69db      	ldr	r3, [r3, #28]
 8015196:	4619      	mov	r1, r3
 8015198:	4610      	mov	r0, r2
 801519a:	f7ff fdfb 	bl	8014d94 <cmp_lfn>
 801519e:	4603      	mov	r3, r0
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d003      	beq.n	80151ac <dir_find+0x106>
 80151a4:	7d7b      	ldrb	r3, [r7, #21]
 80151a6:	3b01      	subs	r3, #1
 80151a8:	b2db      	uxtb	r3, r3
 80151aa:	e000      	b.n	80151ae <dir_find+0x108>
 80151ac:	23ff      	movs	r3, #255	; 0xff
 80151ae:	757b      	strb	r3, [r7, #21]
 80151b0:	e024      	b.n	80151fc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80151b2:	7d7b      	ldrb	r3, [r7, #21]
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d109      	bne.n	80151cc <dir_find+0x126>
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	69db      	ldr	r3, [r3, #28]
 80151bc:	4618      	mov	r0, r3
 80151be:	f7ff ff51 	bl	8015064 <sum_sfn>
 80151c2:	4603      	mov	r3, r0
 80151c4:	461a      	mov	r2, r3
 80151c6:	7d3b      	ldrb	r3, [r7, #20]
 80151c8:	4293      	cmp	r3, r2
 80151ca:	d024      	beq.n	8015216 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80151d2:	f003 0301 	and.w	r3, r3, #1
 80151d6:	2b00      	cmp	r3, #0
 80151d8:	d10a      	bne.n	80151f0 <dir_find+0x14a>
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	69d8      	ldr	r0, [r3, #28]
 80151de:	687b      	ldr	r3, [r7, #4]
 80151e0:	3320      	adds	r3, #32
 80151e2:	220b      	movs	r2, #11
 80151e4:	4619      	mov	r1, r3
 80151e6:	f7fe ff87 	bl	80140f8 <mem_cmp>
 80151ea:	4603      	mov	r3, r0
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d014      	beq.n	801521a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80151f0:	23ff      	movs	r3, #255	; 0xff
 80151f2:	757b      	strb	r3, [r7, #21]
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	f04f 32ff 	mov.w	r2, #4294967295
 80151fa:	62da      	str	r2, [r3, #44]	; 0x2c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80151fc:	2100      	movs	r1, #0
 80151fe:	6878      	ldr	r0, [r7, #4]
 8015200:	f7ff fc6b 	bl	8014ada <dir_next>
 8015204:	4603      	mov	r3, r0
 8015206:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8015208:	7dfb      	ldrb	r3, [r7, #23]
 801520a:	2b00      	cmp	r3, #0
 801520c:	f43f af65 	beq.w	80150da <dir_find+0x34>
 8015210:	e004      	b.n	801521c <dir_find+0x176>
		if (res != FR_OK) break;
 8015212:	bf00      	nop
 8015214:	e002      	b.n	801521c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8015216:	bf00      	nop
 8015218:	e000      	b.n	801521c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801521a:	bf00      	nop

	return res;
 801521c:	7dfb      	ldrb	r3, [r7, #23]
}
 801521e:	4618      	mov	r0, r3
 8015220:	3718      	adds	r7, #24
 8015222:	46bd      	mov	sp, r7
 8015224:	bd80      	pop	{r7, pc}
	...

08015228 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8015228:	b580      	push	{r7, lr}
 801522a:	b08c      	sub	sp, #48	; 0x30
 801522c:	af00      	add	r7, sp, #0
 801522e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801523c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8015240:	2b00      	cmp	r3, #0
 8015242:	d001      	beq.n	8015248 <dir_register+0x20>
 8015244:	2306      	movs	r3, #6
 8015246:	e0e0      	b.n	801540a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8015248:	2300      	movs	r3, #0
 801524a:	627b      	str	r3, [r7, #36]	; 0x24
 801524c:	e002      	b.n	8015254 <dir_register+0x2c>
 801524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015250:	3301      	adds	r3, #1
 8015252:	627b      	str	r3, [r7, #36]	; 0x24
 8015254:	69fb      	ldr	r3, [r7, #28]
 8015256:	691a      	ldr	r2, [r3, #16]
 8015258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801525a:	005b      	lsls	r3, r3, #1
 801525c:	4413      	add	r3, r2
 801525e:	881b      	ldrh	r3, [r3, #0]
 8015260:	2b00      	cmp	r3, #0
 8015262:	d1f4      	bne.n	801524e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	f103 0120 	add.w	r1, r3, #32
 801526a:	f107 030c 	add.w	r3, r7, #12
 801526e:	220c      	movs	r2, #12
 8015270:	4618      	mov	r0, r3
 8015272:	f7fe ff05 	bl	8014080 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8015276:	7dfb      	ldrb	r3, [r7, #23]
 8015278:	f003 0301 	and.w	r3, r3, #1
 801527c:	2b00      	cmp	r3, #0
 801527e:	d032      	beq.n	80152e6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	2240      	movs	r2, #64	; 0x40
 8015284:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		for (n = 1; n < 100; n++) {
 8015288:	2301      	movs	r3, #1
 801528a:	62bb      	str	r3, [r7, #40]	; 0x28
 801528c:	e016      	b.n	80152bc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	f103 0020 	add.w	r0, r3, #32
 8015294:	69fb      	ldr	r3, [r7, #28]
 8015296:	691a      	ldr	r2, [r3, #16]
 8015298:	f107 010c 	add.w	r1, r7, #12
 801529c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801529e:	f7ff fe51 	bl	8014f44 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80152a2:	6878      	ldr	r0, [r7, #4]
 80152a4:	f7ff feff 	bl	80150a6 <dir_find>
 80152a8:	4603      	mov	r3, r0
 80152aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80152ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d106      	bne.n	80152c4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80152b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152b8:	3301      	adds	r3, #1
 80152ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80152bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152be:	2b63      	cmp	r3, #99	; 0x63
 80152c0:	d9e5      	bls.n	801528e <dir_register+0x66>
 80152c2:	e000      	b.n	80152c6 <dir_register+0x9e>
			if (res != FR_OK) break;
 80152c4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80152c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152c8:	2b64      	cmp	r3, #100	; 0x64
 80152ca:	d101      	bne.n	80152d0 <dir_register+0xa8>
 80152cc:	2307      	movs	r3, #7
 80152ce:	e09c      	b.n	801540a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80152d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80152d4:	2b04      	cmp	r3, #4
 80152d6:	d002      	beq.n	80152de <dir_register+0xb6>
 80152d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80152dc:	e095      	b.n	801540a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80152de:	7dfa      	ldrb	r2, [r7, #23]
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80152e6:	7dfb      	ldrb	r3, [r7, #23]
 80152e8:	f003 0302 	and.w	r3, r3, #2
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d007      	beq.n	8015300 <dir_register+0xd8>
 80152f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152f2:	330c      	adds	r3, #12
 80152f4:	4a47      	ldr	r2, [pc, #284]	; (8015414 <dir_register+0x1ec>)
 80152f6:	fba2 2303 	umull	r2, r3, r2, r3
 80152fa:	089b      	lsrs	r3, r3, #2
 80152fc:	3301      	adds	r3, #1
 80152fe:	e000      	b.n	8015302 <dir_register+0xda>
 8015300:	2301      	movs	r3, #1
 8015302:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8015304:	6a39      	ldr	r1, [r7, #32]
 8015306:	6878      	ldr	r0, [r7, #4]
 8015308:	f7ff fcbd 	bl	8014c86 <dir_alloc>
 801530c:	4603      	mov	r3, r0
 801530e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8015312:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015316:	2b00      	cmp	r3, #0
 8015318:	d148      	bne.n	80153ac <dir_register+0x184>
 801531a:	6a3b      	ldr	r3, [r7, #32]
 801531c:	3b01      	subs	r3, #1
 801531e:	623b      	str	r3, [r7, #32]
 8015320:	6a3b      	ldr	r3, [r7, #32]
 8015322:	2b00      	cmp	r3, #0
 8015324:	d042      	beq.n	80153ac <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	691a      	ldr	r2, [r3, #16]
 801532a:	6a3b      	ldr	r3, [r7, #32]
 801532c:	015b      	lsls	r3, r3, #5
 801532e:	1ad3      	subs	r3, r2, r3
 8015330:	4619      	mov	r1, r3
 8015332:	6878      	ldr	r0, [r7, #4]
 8015334:	f7ff fb48 	bl	80149c8 <dir_sdi>
 8015338:	4603      	mov	r3, r0
 801533a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801533e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015342:	2b00      	cmp	r3, #0
 8015344:	d132      	bne.n	80153ac <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	3320      	adds	r3, #32
 801534a:	4618      	mov	r0, r3
 801534c:	f7ff fe8a 	bl	8015064 <sum_sfn>
 8015350:	4603      	mov	r3, r0
 8015352:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	699b      	ldr	r3, [r3, #24]
 8015358:	4619      	mov	r1, r3
 801535a:	69f8      	ldr	r0, [r7, #28]
 801535c:	f7fe ff52 	bl	8014204 <move_window>
 8015360:	4603      	mov	r3, r0
 8015362:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8015366:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801536a:	2b00      	cmp	r3, #0
 801536c:	d11d      	bne.n	80153aa <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801536e:	69fb      	ldr	r3, [r7, #28]
 8015370:	6918      	ldr	r0, [r3, #16]
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	69d9      	ldr	r1, [r3, #28]
 8015376:	6a3b      	ldr	r3, [r7, #32]
 8015378:	b2da      	uxtb	r2, r3
 801537a:	7efb      	ldrb	r3, [r7, #27]
 801537c:	f7ff fd7a 	bl	8014e74 <put_lfn>
				fs->wflag = 1;
 8015380:	69fb      	ldr	r3, [r7, #28]
 8015382:	2201      	movs	r2, #1
 8015384:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8015386:	2100      	movs	r1, #0
 8015388:	6878      	ldr	r0, [r7, #4]
 801538a:	f7ff fba6 	bl	8014ada <dir_next>
 801538e:	4603      	mov	r3, r0
 8015390:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8015394:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015398:	2b00      	cmp	r3, #0
 801539a:	d107      	bne.n	80153ac <dir_register+0x184>
 801539c:	6a3b      	ldr	r3, [r7, #32]
 801539e:	3b01      	subs	r3, #1
 80153a0:	623b      	str	r3, [r7, #32]
 80153a2:	6a3b      	ldr	r3, [r7, #32]
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d1d5      	bne.n	8015354 <dir_register+0x12c>
 80153a8:	e000      	b.n	80153ac <dir_register+0x184>
				if (res != FR_OK) break;
 80153aa:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80153ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d128      	bne.n	8015406 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	699b      	ldr	r3, [r3, #24]
 80153b8:	4619      	mov	r1, r3
 80153ba:	69f8      	ldr	r0, [r7, #28]
 80153bc:	f7fe ff22 	bl	8014204 <move_window>
 80153c0:	4603      	mov	r3, r0
 80153c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80153c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d11b      	bne.n	8015406 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	69db      	ldr	r3, [r3, #28]
 80153d2:	2220      	movs	r2, #32
 80153d4:	2100      	movs	r1, #0
 80153d6:	4618      	mov	r0, r3
 80153d8:	f7fe fe73 	bl	80140c2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	69d8      	ldr	r0, [r3, #28]
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	3320      	adds	r3, #32
 80153e4:	220b      	movs	r2, #11
 80153e6:	4619      	mov	r1, r3
 80153e8:	f7fe fe4a 	bl	8014080 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	69db      	ldr	r3, [r3, #28]
 80153f6:	330c      	adds	r3, #12
 80153f8:	f002 0218 	and.w	r2, r2, #24
 80153fc:	b2d2      	uxtb	r2, r2
 80153fe:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8015400:	69fb      	ldr	r3, [r7, #28]
 8015402:	2201      	movs	r2, #1
 8015404:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8015406:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801540a:	4618      	mov	r0, r3
 801540c:	3730      	adds	r7, #48	; 0x30
 801540e:	46bd      	mov	sp, r7
 8015410:	bd80      	pop	{r7, pc}
 8015412:	bf00      	nop
 8015414:	4ec4ec4f 	.word	0x4ec4ec4f

08015418 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8015418:	b580      	push	{r7, lr}
 801541a:	b08a      	sub	sp, #40	; 0x28
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
 8015420:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8015422:	683b      	ldr	r3, [r7, #0]
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	613b      	str	r3, [r7, #16]
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	691b      	ldr	r3, [r3, #16]
 801542e:	60fb      	str	r3, [r7, #12]
 8015430:	2300      	movs	r3, #0
 8015432:	617b      	str	r3, [r7, #20]
 8015434:	697b      	ldr	r3, [r7, #20]
 8015436:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8015438:	69bb      	ldr	r3, [r7, #24]
 801543a:	1c5a      	adds	r2, r3, #1
 801543c:	61ba      	str	r2, [r7, #24]
 801543e:	693a      	ldr	r2, [r7, #16]
 8015440:	4413      	add	r3, r2
 8015442:	781b      	ldrb	r3, [r3, #0]
 8015444:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8015446:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015448:	2b1f      	cmp	r3, #31
 801544a:	d940      	bls.n	80154ce <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801544c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801544e:	2b2f      	cmp	r3, #47	; 0x2f
 8015450:	d006      	beq.n	8015460 <create_name+0x48>
 8015452:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015454:	2b5c      	cmp	r3, #92	; 0x5c
 8015456:	d110      	bne.n	801547a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8015458:	e002      	b.n	8015460 <create_name+0x48>
 801545a:	69bb      	ldr	r3, [r7, #24]
 801545c:	3301      	adds	r3, #1
 801545e:	61bb      	str	r3, [r7, #24]
 8015460:	693a      	ldr	r2, [r7, #16]
 8015462:	69bb      	ldr	r3, [r7, #24]
 8015464:	4413      	add	r3, r2
 8015466:	781b      	ldrb	r3, [r3, #0]
 8015468:	2b2f      	cmp	r3, #47	; 0x2f
 801546a:	d0f6      	beq.n	801545a <create_name+0x42>
 801546c:	693a      	ldr	r2, [r7, #16]
 801546e:	69bb      	ldr	r3, [r7, #24]
 8015470:	4413      	add	r3, r2
 8015472:	781b      	ldrb	r3, [r3, #0]
 8015474:	2b5c      	cmp	r3, #92	; 0x5c
 8015476:	d0f0      	beq.n	801545a <create_name+0x42>
			break;
 8015478:	e02a      	b.n	80154d0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801547a:	697b      	ldr	r3, [r7, #20]
 801547c:	2bfe      	cmp	r3, #254	; 0xfe
 801547e:	d901      	bls.n	8015484 <create_name+0x6c>
 8015480:	2306      	movs	r3, #6
 8015482:	e177      	b.n	8015774 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8015484:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015486:	b2db      	uxtb	r3, r3
 8015488:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801548a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801548c:	2101      	movs	r1, #1
 801548e:	4618      	mov	r0, r3
 8015490:	f001 fb32 	bl	8016af8 <ff_convert>
 8015494:	4603      	mov	r3, r0
 8015496:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8015498:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801549a:	2b00      	cmp	r3, #0
 801549c:	d101      	bne.n	80154a2 <create_name+0x8a>
 801549e:	2306      	movs	r3, #6
 80154a0:	e168      	b.n	8015774 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80154a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80154a4:	2b7f      	cmp	r3, #127	; 0x7f
 80154a6:	d809      	bhi.n	80154bc <create_name+0xa4>
 80154a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80154aa:	4619      	mov	r1, r3
 80154ac:	48b3      	ldr	r0, [pc, #716]	; (801577c <create_name+0x364>)
 80154ae:	f7fe fe4a 	bl	8014146 <chk_chr>
 80154b2:	4603      	mov	r3, r0
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d001      	beq.n	80154bc <create_name+0xa4>
 80154b8:	2306      	movs	r3, #6
 80154ba:	e15b      	b.n	8015774 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 80154bc:	697b      	ldr	r3, [r7, #20]
 80154be:	1c5a      	adds	r2, r3, #1
 80154c0:	617a      	str	r2, [r7, #20]
 80154c2:	005b      	lsls	r3, r3, #1
 80154c4:	68fa      	ldr	r2, [r7, #12]
 80154c6:	4413      	add	r3, r2
 80154c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80154ca:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80154cc:	e7b4      	b.n	8015438 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80154ce:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80154d0:	693a      	ldr	r2, [r7, #16]
 80154d2:	69bb      	ldr	r3, [r7, #24]
 80154d4:	441a      	add	r2, r3
 80154d6:	683b      	ldr	r3, [r7, #0]
 80154d8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80154da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80154dc:	2b1f      	cmp	r3, #31
 80154de:	d801      	bhi.n	80154e4 <create_name+0xcc>
 80154e0:	2304      	movs	r3, #4
 80154e2:	e000      	b.n	80154e6 <create_name+0xce>
 80154e4:	2300      	movs	r3, #0
 80154e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80154ea:	e011      	b.n	8015510 <create_name+0xf8>
		w = lfn[di - 1];
 80154ec:	697b      	ldr	r3, [r7, #20]
 80154ee:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80154f2:	3b01      	subs	r3, #1
 80154f4:	005b      	lsls	r3, r3, #1
 80154f6:	68fa      	ldr	r2, [r7, #12]
 80154f8:	4413      	add	r3, r2
 80154fa:	881b      	ldrh	r3, [r3, #0]
 80154fc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80154fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015500:	2b20      	cmp	r3, #32
 8015502:	d002      	beq.n	801550a <create_name+0xf2>
 8015504:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015506:	2b2e      	cmp	r3, #46	; 0x2e
 8015508:	d106      	bne.n	8015518 <create_name+0x100>
		di--;
 801550a:	697b      	ldr	r3, [r7, #20]
 801550c:	3b01      	subs	r3, #1
 801550e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8015510:	697b      	ldr	r3, [r7, #20]
 8015512:	2b00      	cmp	r3, #0
 8015514:	d1ea      	bne.n	80154ec <create_name+0xd4>
 8015516:	e000      	b.n	801551a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8015518:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801551a:	697b      	ldr	r3, [r7, #20]
 801551c:	005b      	lsls	r3, r3, #1
 801551e:	68fa      	ldr	r2, [r7, #12]
 8015520:	4413      	add	r3, r2
 8015522:	2200      	movs	r2, #0
 8015524:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8015526:	697b      	ldr	r3, [r7, #20]
 8015528:	2b00      	cmp	r3, #0
 801552a:	d101      	bne.n	8015530 <create_name+0x118>
 801552c:	2306      	movs	r3, #6
 801552e:	e121      	b.n	8015774 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	3320      	adds	r3, #32
 8015534:	220b      	movs	r2, #11
 8015536:	2120      	movs	r1, #32
 8015538:	4618      	mov	r0, r3
 801553a:	f7fe fdc2 	bl	80140c2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801553e:	2300      	movs	r3, #0
 8015540:	61bb      	str	r3, [r7, #24]
 8015542:	e002      	b.n	801554a <create_name+0x132>
 8015544:	69bb      	ldr	r3, [r7, #24]
 8015546:	3301      	adds	r3, #1
 8015548:	61bb      	str	r3, [r7, #24]
 801554a:	69bb      	ldr	r3, [r7, #24]
 801554c:	005b      	lsls	r3, r3, #1
 801554e:	68fa      	ldr	r2, [r7, #12]
 8015550:	4413      	add	r3, r2
 8015552:	881b      	ldrh	r3, [r3, #0]
 8015554:	2b20      	cmp	r3, #32
 8015556:	d0f5      	beq.n	8015544 <create_name+0x12c>
 8015558:	69bb      	ldr	r3, [r7, #24]
 801555a:	005b      	lsls	r3, r3, #1
 801555c:	68fa      	ldr	r2, [r7, #12]
 801555e:	4413      	add	r3, r2
 8015560:	881b      	ldrh	r3, [r3, #0]
 8015562:	2b2e      	cmp	r3, #46	; 0x2e
 8015564:	d0ee      	beq.n	8015544 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8015566:	69bb      	ldr	r3, [r7, #24]
 8015568:	2b00      	cmp	r3, #0
 801556a:	d009      	beq.n	8015580 <create_name+0x168>
 801556c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015570:	f043 0303 	orr.w	r3, r3, #3
 8015574:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8015578:	e002      	b.n	8015580 <create_name+0x168>
 801557a:	697b      	ldr	r3, [r7, #20]
 801557c:	3b01      	subs	r3, #1
 801557e:	617b      	str	r3, [r7, #20]
 8015580:	697b      	ldr	r3, [r7, #20]
 8015582:	2b00      	cmp	r3, #0
 8015584:	d009      	beq.n	801559a <create_name+0x182>
 8015586:	697b      	ldr	r3, [r7, #20]
 8015588:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801558c:	3b01      	subs	r3, #1
 801558e:	005b      	lsls	r3, r3, #1
 8015590:	68fa      	ldr	r2, [r7, #12]
 8015592:	4413      	add	r3, r2
 8015594:	881b      	ldrh	r3, [r3, #0]
 8015596:	2b2e      	cmp	r3, #46	; 0x2e
 8015598:	d1ef      	bne.n	801557a <create_name+0x162>

	i = b = 0; ni = 8;
 801559a:	2300      	movs	r3, #0
 801559c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80155a0:	2300      	movs	r3, #0
 80155a2:	623b      	str	r3, [r7, #32]
 80155a4:	2308      	movs	r3, #8
 80155a6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80155a8:	69bb      	ldr	r3, [r7, #24]
 80155aa:	1c5a      	adds	r2, r3, #1
 80155ac:	61ba      	str	r2, [r7, #24]
 80155ae:	005b      	lsls	r3, r3, #1
 80155b0:	68fa      	ldr	r2, [r7, #12]
 80155b2:	4413      	add	r3, r2
 80155b4:	881b      	ldrh	r3, [r3, #0]
 80155b6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80155b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	f000 8090 	beq.w	80156e0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80155c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80155c2:	2b20      	cmp	r3, #32
 80155c4:	d006      	beq.n	80155d4 <create_name+0x1bc>
 80155c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80155c8:	2b2e      	cmp	r3, #46	; 0x2e
 80155ca:	d10a      	bne.n	80155e2 <create_name+0x1ca>
 80155cc:	69ba      	ldr	r2, [r7, #24]
 80155ce:	697b      	ldr	r3, [r7, #20]
 80155d0:	429a      	cmp	r2, r3
 80155d2:	d006      	beq.n	80155e2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80155d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80155d8:	f043 0303 	orr.w	r3, r3, #3
 80155dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80155e0:	e07d      	b.n	80156de <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80155e2:	6a3a      	ldr	r2, [r7, #32]
 80155e4:	69fb      	ldr	r3, [r7, #28]
 80155e6:	429a      	cmp	r2, r3
 80155e8:	d203      	bcs.n	80155f2 <create_name+0x1da>
 80155ea:	69ba      	ldr	r2, [r7, #24]
 80155ec:	697b      	ldr	r3, [r7, #20]
 80155ee:	429a      	cmp	r2, r3
 80155f0:	d123      	bne.n	801563a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80155f2:	69fb      	ldr	r3, [r7, #28]
 80155f4:	2b0b      	cmp	r3, #11
 80155f6:	d106      	bne.n	8015606 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80155f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80155fc:	f043 0303 	orr.w	r3, r3, #3
 8015600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015604:	e06f      	b.n	80156e6 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8015606:	69ba      	ldr	r2, [r7, #24]
 8015608:	697b      	ldr	r3, [r7, #20]
 801560a:	429a      	cmp	r2, r3
 801560c:	d005      	beq.n	801561a <create_name+0x202>
 801560e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015612:	f043 0303 	orr.w	r3, r3, #3
 8015616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 801561a:	69ba      	ldr	r2, [r7, #24]
 801561c:	697b      	ldr	r3, [r7, #20]
 801561e:	429a      	cmp	r2, r3
 8015620:	d860      	bhi.n	80156e4 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8015622:	697b      	ldr	r3, [r7, #20]
 8015624:	61bb      	str	r3, [r7, #24]
 8015626:	2308      	movs	r3, #8
 8015628:	623b      	str	r3, [r7, #32]
 801562a:	230b      	movs	r3, #11
 801562c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801562e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015632:	009b      	lsls	r3, r3, #2
 8015634:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015638:	e051      	b.n	80156de <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801563a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801563c:	2b7f      	cmp	r3, #127	; 0x7f
 801563e:	d914      	bls.n	801566a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8015640:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015642:	2100      	movs	r1, #0
 8015644:	4618      	mov	r0, r3
 8015646:	f001 fa57 	bl	8016af8 <ff_convert>
 801564a:	4603      	mov	r3, r0
 801564c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801564e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015650:	2b00      	cmp	r3, #0
 8015652:	d004      	beq.n	801565e <create_name+0x246>
 8015654:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015656:	3b80      	subs	r3, #128	; 0x80
 8015658:	4a49      	ldr	r2, [pc, #292]	; (8015780 <create_name+0x368>)
 801565a:	5cd3      	ldrb	r3, [r2, r3]
 801565c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801565e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015662:	f043 0302 	orr.w	r3, r3, #2
 8015666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801566a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801566c:	2b00      	cmp	r3, #0
 801566e:	d007      	beq.n	8015680 <create_name+0x268>
 8015670:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015672:	4619      	mov	r1, r3
 8015674:	4843      	ldr	r0, [pc, #268]	; (8015784 <create_name+0x36c>)
 8015676:	f7fe fd66 	bl	8014146 <chk_chr>
 801567a:	4603      	mov	r3, r0
 801567c:	2b00      	cmp	r3, #0
 801567e:	d008      	beq.n	8015692 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8015680:	235f      	movs	r3, #95	; 0x5f
 8015682:	84bb      	strh	r3, [r7, #36]	; 0x24
 8015684:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015688:	f043 0303 	orr.w	r3, r3, #3
 801568c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015690:	e01b      	b.n	80156ca <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8015692:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015694:	2b40      	cmp	r3, #64	; 0x40
 8015696:	d909      	bls.n	80156ac <create_name+0x294>
 8015698:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801569a:	2b5a      	cmp	r3, #90	; 0x5a
 801569c:	d806      	bhi.n	80156ac <create_name+0x294>
					b |= 2;
 801569e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80156a2:	f043 0302 	orr.w	r3, r3, #2
 80156a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80156aa:	e00e      	b.n	80156ca <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80156ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80156ae:	2b60      	cmp	r3, #96	; 0x60
 80156b0:	d90b      	bls.n	80156ca <create_name+0x2b2>
 80156b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80156b4:	2b7a      	cmp	r3, #122	; 0x7a
 80156b6:	d808      	bhi.n	80156ca <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80156b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80156bc:	f043 0301 	orr.w	r3, r3, #1
 80156c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80156c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80156c6:	3b20      	subs	r3, #32
 80156c8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80156ca:	6a3b      	ldr	r3, [r7, #32]
 80156cc:	1c5a      	adds	r2, r3, #1
 80156ce:	623a      	str	r2, [r7, #32]
 80156d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80156d2:	b2d1      	uxtb	r1, r2
 80156d4:	687a      	ldr	r2, [r7, #4]
 80156d6:	4413      	add	r3, r2
 80156d8:	460a      	mov	r2, r1
 80156da:	f883 2020 	strb.w	r2, [r3, #32]
		w = lfn[si++];					/* Get an LFN character */
 80156de:	e763      	b.n	80155a8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80156e0:	bf00      	nop
 80156e2:	e000      	b.n	80156e6 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 80156e4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80156ec:	2be5      	cmp	r3, #229	; 0xe5
 80156ee:	d103      	bne.n	80156f8 <create_name+0x2e0>
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	2205      	movs	r2, #5
 80156f4:	f883 2020 	strb.w	r2, [r3, #32]

	if (ni == 8) b <<= 2;
 80156f8:	69fb      	ldr	r3, [r7, #28]
 80156fa:	2b08      	cmp	r3, #8
 80156fc:	d104      	bne.n	8015708 <create_name+0x2f0>
 80156fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015702:	009b      	lsls	r3, r3, #2
 8015704:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8015708:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801570c:	f003 030c 	and.w	r3, r3, #12
 8015710:	2b0c      	cmp	r3, #12
 8015712:	d005      	beq.n	8015720 <create_name+0x308>
 8015714:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015718:	f003 0303 	and.w	r3, r3, #3
 801571c:	2b03      	cmp	r3, #3
 801571e:	d105      	bne.n	801572c <create_name+0x314>
 8015720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015724:	f043 0302 	orr.w	r3, r3, #2
 8015728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801572c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015730:	f003 0302 	and.w	r3, r3, #2
 8015734:	2b00      	cmp	r3, #0
 8015736:	d117      	bne.n	8015768 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8015738:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801573c:	f003 0303 	and.w	r3, r3, #3
 8015740:	2b01      	cmp	r3, #1
 8015742:	d105      	bne.n	8015750 <create_name+0x338>
 8015744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015748:	f043 0310 	orr.w	r3, r3, #16
 801574c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8015750:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015754:	f003 030c 	and.w	r3, r3, #12
 8015758:	2b04      	cmp	r3, #4
 801575a:	d105      	bne.n	8015768 <create_name+0x350>
 801575c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015760:	f043 0308 	orr.w	r3, r3, #8
 8015764:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801576e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	return FR_OK;
 8015772:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8015774:	4618      	mov	r0, r3
 8015776:	3728      	adds	r7, #40	; 0x28
 8015778:	46bd      	mov	sp, r7
 801577a:	bd80      	pop	{r7, pc}
 801577c:	0801806c 	.word	0x0801806c
 8015780:	0801812c 	.word	0x0801812c
 8015784:	08018078 	.word	0x08018078

08015788 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8015788:	b580      	push	{r7, lr}
 801578a:	b086      	sub	sp, #24
 801578c:	af00      	add	r7, sp, #0
 801578e:	6078      	str	r0, [r7, #4]
 8015790:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8015796:	693b      	ldr	r3, [r7, #16]
 8015798:	681b      	ldr	r3, [r3, #0]
 801579a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801579c:	e002      	b.n	80157a4 <follow_path+0x1c>
 801579e:	683b      	ldr	r3, [r7, #0]
 80157a0:	3301      	adds	r3, #1
 80157a2:	603b      	str	r3, [r7, #0]
 80157a4:	683b      	ldr	r3, [r7, #0]
 80157a6:	781b      	ldrb	r3, [r3, #0]
 80157a8:	2b2f      	cmp	r3, #47	; 0x2f
 80157aa:	d0f8      	beq.n	801579e <follow_path+0x16>
 80157ac:	683b      	ldr	r3, [r7, #0]
 80157ae:	781b      	ldrb	r3, [r3, #0]
 80157b0:	2b5c      	cmp	r3, #92	; 0x5c
 80157b2:	d0f4      	beq.n	801579e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80157b4:	693b      	ldr	r3, [r7, #16]
 80157b6:	2200      	movs	r2, #0
 80157b8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80157ba:	683b      	ldr	r3, [r7, #0]
 80157bc:	781b      	ldrb	r3, [r3, #0]
 80157be:	2b1f      	cmp	r3, #31
 80157c0:	d80a      	bhi.n	80157d8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	2280      	movs	r2, #128	; 0x80
 80157c6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 80157ca:	2100      	movs	r1, #0
 80157cc:	6878      	ldr	r0, [r7, #4]
 80157ce:	f7ff f8fb 	bl	80149c8 <dir_sdi>
 80157d2:	4603      	mov	r3, r0
 80157d4:	75fb      	strb	r3, [r7, #23]
 80157d6:	e048      	b.n	801586a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80157d8:	463b      	mov	r3, r7
 80157da:	4619      	mov	r1, r3
 80157dc:	6878      	ldr	r0, [r7, #4]
 80157de:	f7ff fe1b 	bl	8015418 <create_name>
 80157e2:	4603      	mov	r3, r0
 80157e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80157e6:	7dfb      	ldrb	r3, [r7, #23]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d139      	bne.n	8015860 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80157ec:	6878      	ldr	r0, [r7, #4]
 80157ee:	f7ff fc5a 	bl	80150a6 <dir_find>
 80157f2:	4603      	mov	r3, r0
 80157f4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80157fc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80157fe:	7dfb      	ldrb	r3, [r7, #23]
 8015800:	2b00      	cmp	r3, #0
 8015802:	d00a      	beq.n	801581a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8015804:	7dfb      	ldrb	r3, [r7, #23]
 8015806:	2b04      	cmp	r3, #4
 8015808:	d12c      	bne.n	8015864 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801580a:	7afb      	ldrb	r3, [r7, #11]
 801580c:	f003 0304 	and.w	r3, r3, #4
 8015810:	2b00      	cmp	r3, #0
 8015812:	d127      	bne.n	8015864 <follow_path+0xdc>
 8015814:	2305      	movs	r3, #5
 8015816:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8015818:	e024      	b.n	8015864 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801581a:	7afb      	ldrb	r3, [r7, #11]
 801581c:	f003 0304 	and.w	r3, r3, #4
 8015820:	2b00      	cmp	r3, #0
 8015822:	d121      	bne.n	8015868 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8015824:	693b      	ldr	r3, [r7, #16]
 8015826:	799b      	ldrb	r3, [r3, #6]
 8015828:	f003 0310 	and.w	r3, r3, #16
 801582c:	2b00      	cmp	r3, #0
 801582e:	d102      	bne.n	8015836 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8015830:	2305      	movs	r3, #5
 8015832:	75fb      	strb	r3, [r7, #23]
 8015834:	e019      	b.n	801586a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8015836:	68fb      	ldr	r3, [r7, #12]
 8015838:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	691b      	ldr	r3, [r3, #16]
 8015840:	68fa      	ldr	r2, [r7, #12]
 8015842:	8992      	ldrh	r2, [r2, #12]
 8015844:	fbb3 f0f2 	udiv	r0, r3, r2
 8015848:	fb02 f200 	mul.w	r2, r2, r0
 801584c:	1a9b      	subs	r3, r3, r2
 801584e:	440b      	add	r3, r1
 8015850:	4619      	mov	r1, r3
 8015852:	68f8      	ldr	r0, [r7, #12]
 8015854:	f7ff fa5e 	bl	8014d14 <ld_clust>
 8015858:	4602      	mov	r2, r0
 801585a:	693b      	ldr	r3, [r7, #16]
 801585c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801585e:	e7bb      	b.n	80157d8 <follow_path+0x50>
			if (res != FR_OK) break;
 8015860:	bf00      	nop
 8015862:	e002      	b.n	801586a <follow_path+0xe2>
				break;
 8015864:	bf00      	nop
 8015866:	e000      	b.n	801586a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8015868:	bf00      	nop
			}
		}
	}

	return res;
 801586a:	7dfb      	ldrb	r3, [r7, #23]
}
 801586c:	4618      	mov	r0, r3
 801586e:	3718      	adds	r7, #24
 8015870:	46bd      	mov	sp, r7
 8015872:	bd80      	pop	{r7, pc}

08015874 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8015874:	b480      	push	{r7}
 8015876:	b087      	sub	sp, #28
 8015878:	af00      	add	r7, sp, #0
 801587a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801587c:	f04f 33ff 	mov.w	r3, #4294967295
 8015880:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	681b      	ldr	r3, [r3, #0]
 8015886:	2b00      	cmp	r3, #0
 8015888:	d031      	beq.n	80158ee <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	617b      	str	r3, [r7, #20]
 8015890:	e002      	b.n	8015898 <get_ldnumber+0x24>
 8015892:	697b      	ldr	r3, [r7, #20]
 8015894:	3301      	adds	r3, #1
 8015896:	617b      	str	r3, [r7, #20]
 8015898:	697b      	ldr	r3, [r7, #20]
 801589a:	781b      	ldrb	r3, [r3, #0]
 801589c:	2b1f      	cmp	r3, #31
 801589e:	d903      	bls.n	80158a8 <get_ldnumber+0x34>
 80158a0:	697b      	ldr	r3, [r7, #20]
 80158a2:	781b      	ldrb	r3, [r3, #0]
 80158a4:	2b3a      	cmp	r3, #58	; 0x3a
 80158a6:	d1f4      	bne.n	8015892 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80158a8:	697b      	ldr	r3, [r7, #20]
 80158aa:	781b      	ldrb	r3, [r3, #0]
 80158ac:	2b3a      	cmp	r3, #58	; 0x3a
 80158ae:	d11c      	bne.n	80158ea <get_ldnumber+0x76>
			tp = *path;
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	1c5a      	adds	r2, r3, #1
 80158ba:	60fa      	str	r2, [r7, #12]
 80158bc:	781b      	ldrb	r3, [r3, #0]
 80158be:	3b30      	subs	r3, #48	; 0x30
 80158c0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80158c2:	68bb      	ldr	r3, [r7, #8]
 80158c4:	2b09      	cmp	r3, #9
 80158c6:	d80e      	bhi.n	80158e6 <get_ldnumber+0x72>
 80158c8:	68fa      	ldr	r2, [r7, #12]
 80158ca:	697b      	ldr	r3, [r7, #20]
 80158cc:	429a      	cmp	r2, r3
 80158ce:	d10a      	bne.n	80158e6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80158d0:	68bb      	ldr	r3, [r7, #8]
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d107      	bne.n	80158e6 <get_ldnumber+0x72>
					vol = (int)i;
 80158d6:	68bb      	ldr	r3, [r7, #8]
 80158d8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80158da:	697b      	ldr	r3, [r7, #20]
 80158dc:	3301      	adds	r3, #1
 80158de:	617b      	str	r3, [r7, #20]
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	697a      	ldr	r2, [r7, #20]
 80158e4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80158e6:	693b      	ldr	r3, [r7, #16]
 80158e8:	e002      	b.n	80158f0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80158ea:	2300      	movs	r3, #0
 80158ec:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80158ee:	693b      	ldr	r3, [r7, #16]
}
 80158f0:	4618      	mov	r0, r3
 80158f2:	371c      	adds	r7, #28
 80158f4:	46bd      	mov	sp, r7
 80158f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158fa:	4770      	bx	lr

080158fc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80158fc:	b580      	push	{r7, lr}
 80158fe:	b082      	sub	sp, #8
 8015900:	af00      	add	r7, sp, #0
 8015902:	6078      	str	r0, [r7, #4]
 8015904:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	2200      	movs	r2, #0
 801590a:	70da      	strb	r2, [r3, #3]
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	f04f 32ff 	mov.w	r2, #4294967295
 8015912:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8015914:	6839      	ldr	r1, [r7, #0]
 8015916:	6878      	ldr	r0, [r7, #4]
 8015918:	f7fe fc74 	bl	8014204 <move_window>
 801591c:	4603      	mov	r3, r0
 801591e:	2b00      	cmp	r3, #0
 8015920:	d001      	beq.n	8015926 <check_fs+0x2a>
 8015922:	2304      	movs	r3, #4
 8015924:	e038      	b.n	8015998 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	3338      	adds	r3, #56	; 0x38
 801592a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801592e:	4618      	mov	r0, r3
 8015930:	f7fe fb24 	bl	8013f7c <ld_word>
 8015934:	4603      	mov	r3, r0
 8015936:	461a      	mov	r2, r3
 8015938:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801593c:	429a      	cmp	r2, r3
 801593e:	d001      	beq.n	8015944 <check_fs+0x48>
 8015940:	2303      	movs	r3, #3
 8015942:	e029      	b.n	8015998 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801594a:	2be9      	cmp	r3, #233	; 0xe9
 801594c:	d009      	beq.n	8015962 <check_fs+0x66>
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015954:	2beb      	cmp	r3, #235	; 0xeb
 8015956:	d11e      	bne.n	8015996 <check_fs+0x9a>
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801595e:	2b90      	cmp	r3, #144	; 0x90
 8015960:	d119      	bne.n	8015996 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	3338      	adds	r3, #56	; 0x38
 8015966:	3336      	adds	r3, #54	; 0x36
 8015968:	4618      	mov	r0, r3
 801596a:	f7fe fb1f 	bl	8013fac <ld_dword>
 801596e:	4603      	mov	r3, r0
 8015970:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8015974:	4a0a      	ldr	r2, [pc, #40]	; (80159a0 <check_fs+0xa4>)
 8015976:	4293      	cmp	r3, r2
 8015978:	d101      	bne.n	801597e <check_fs+0x82>
 801597a:	2300      	movs	r3, #0
 801597c:	e00c      	b.n	8015998 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	3338      	adds	r3, #56	; 0x38
 8015982:	3352      	adds	r3, #82	; 0x52
 8015984:	4618      	mov	r0, r3
 8015986:	f7fe fb11 	bl	8013fac <ld_dword>
 801598a:	4603      	mov	r3, r0
 801598c:	4a05      	ldr	r2, [pc, #20]	; (80159a4 <check_fs+0xa8>)
 801598e:	4293      	cmp	r3, r2
 8015990:	d101      	bne.n	8015996 <check_fs+0x9a>
 8015992:	2300      	movs	r3, #0
 8015994:	e000      	b.n	8015998 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8015996:	2302      	movs	r3, #2
}
 8015998:	4618      	mov	r0, r3
 801599a:	3708      	adds	r7, #8
 801599c:	46bd      	mov	sp, r7
 801599e:	bd80      	pop	{r7, pc}
 80159a0:	00544146 	.word	0x00544146
 80159a4:	33544146 	.word	0x33544146

080159a8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80159a8:	b580      	push	{r7, lr}
 80159aa:	b096      	sub	sp, #88	; 0x58
 80159ac:	af00      	add	r7, sp, #0
 80159ae:	60f8      	str	r0, [r7, #12]
 80159b0:	60b9      	str	r1, [r7, #8]
 80159b2:	4613      	mov	r3, r2
 80159b4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80159b6:	68bb      	ldr	r3, [r7, #8]
 80159b8:	2200      	movs	r2, #0
 80159ba:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80159bc:	68f8      	ldr	r0, [r7, #12]
 80159be:	f7ff ff59 	bl	8015874 <get_ldnumber>
 80159c2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80159c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	da01      	bge.n	80159ce <find_volume+0x26>
 80159ca:	230b      	movs	r3, #11
 80159cc:	e265      	b.n	8015e9a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80159ce:	4ab0      	ldr	r2, [pc, #704]	; (8015c90 <find_volume+0x2e8>)
 80159d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80159d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80159d6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80159d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159da:	2b00      	cmp	r3, #0
 80159dc:	d101      	bne.n	80159e2 <find_volume+0x3a>
 80159de:	230c      	movs	r3, #12
 80159e0:	e25b      	b.n	8015e9a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80159e2:	68bb      	ldr	r3, [r7, #8]
 80159e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80159e6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80159e8:	79fb      	ldrb	r3, [r7, #7]
 80159ea:	f023 0301 	bic.w	r3, r3, #1
 80159ee:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80159f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159f2:	781b      	ldrb	r3, [r3, #0]
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d01a      	beq.n	8015a2e <find_volume+0x86>
		stat = disk_status(fs->drv);
 80159f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159fa:	785b      	ldrb	r3, [r3, #1]
 80159fc:	4618      	mov	r0, r3
 80159fe:	f7fe fa1f 	bl	8013e40 <disk_status>
 8015a02:	4603      	mov	r3, r0
 8015a04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8015a08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015a0c:	f003 0301 	and.w	r3, r3, #1
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d10c      	bne.n	8015a2e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8015a14:	79fb      	ldrb	r3, [r7, #7]
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d007      	beq.n	8015a2a <find_volume+0x82>
 8015a1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015a1e:	f003 0304 	and.w	r3, r3, #4
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d001      	beq.n	8015a2a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8015a26:	230a      	movs	r3, #10
 8015a28:	e237      	b.n	8015e9a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	e235      	b.n	8015e9a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8015a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a30:	2200      	movs	r2, #0
 8015a32:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8015a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015a36:	b2da      	uxtb	r2, r3
 8015a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a3a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8015a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a3e:	785b      	ldrb	r3, [r3, #1]
 8015a40:	4618      	mov	r0, r3
 8015a42:	f7fe fa17 	bl	8013e74 <disk_initialize>
 8015a46:	4603      	mov	r3, r0
 8015a48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8015a4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015a50:	f003 0301 	and.w	r3, r3, #1
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d001      	beq.n	8015a5c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8015a58:	2303      	movs	r3, #3
 8015a5a:	e21e      	b.n	8015e9a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8015a5c:	79fb      	ldrb	r3, [r7, #7]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d007      	beq.n	8015a72 <find_volume+0xca>
 8015a62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015a66:	f003 0304 	and.w	r3, r3, #4
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d001      	beq.n	8015a72 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8015a6e:	230a      	movs	r3, #10
 8015a70:	e213      	b.n	8015e9a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8015a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a74:	7858      	ldrb	r0, [r3, #1]
 8015a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a78:	330c      	adds	r3, #12
 8015a7a:	461a      	mov	r2, r3
 8015a7c:	2102      	movs	r1, #2
 8015a7e:	f7fe fa5f 	bl	8013f40 <disk_ioctl>
 8015a82:	4603      	mov	r3, r0
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	d001      	beq.n	8015a8c <find_volume+0xe4>
 8015a88:	2301      	movs	r3, #1
 8015a8a:	e206      	b.n	8015e9a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8015a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a8e:	899b      	ldrh	r3, [r3, #12]
 8015a90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015a94:	d80d      	bhi.n	8015ab2 <find_volume+0x10a>
 8015a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a98:	899b      	ldrh	r3, [r3, #12]
 8015a9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015a9e:	d308      	bcc.n	8015ab2 <find_volume+0x10a>
 8015aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015aa2:	899b      	ldrh	r3, [r3, #12]
 8015aa4:	461a      	mov	r2, r3
 8015aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015aa8:	899b      	ldrh	r3, [r3, #12]
 8015aaa:	3b01      	subs	r3, #1
 8015aac:	4013      	ands	r3, r2
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d001      	beq.n	8015ab6 <find_volume+0x10e>
 8015ab2:	2301      	movs	r3, #1
 8015ab4:	e1f1      	b.n	8015e9a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8015ab6:	2300      	movs	r3, #0
 8015ab8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8015aba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015abc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015abe:	f7ff ff1d 	bl	80158fc <check_fs>
 8015ac2:	4603      	mov	r3, r0
 8015ac4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8015ac8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015acc:	2b02      	cmp	r3, #2
 8015ace:	d14b      	bne.n	8015b68 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8015ad0:	2300      	movs	r3, #0
 8015ad2:	643b      	str	r3, [r7, #64]	; 0x40
 8015ad4:	e01f      	b.n	8015b16 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8015ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ad8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8015adc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015ade:	011b      	lsls	r3, r3, #4
 8015ae0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8015ae4:	4413      	add	r3, r2
 8015ae6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8015ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015aea:	3304      	adds	r3, #4
 8015aec:	781b      	ldrb	r3, [r3, #0]
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d006      	beq.n	8015b00 <find_volume+0x158>
 8015af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015af4:	3308      	adds	r3, #8
 8015af6:	4618      	mov	r0, r3
 8015af8:	f7fe fa58 	bl	8013fac <ld_dword>
 8015afc:	4602      	mov	r2, r0
 8015afe:	e000      	b.n	8015b02 <find_volume+0x15a>
 8015b00:	2200      	movs	r2, #0
 8015b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015b04:	009b      	lsls	r3, r3, #2
 8015b06:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8015b0a:	440b      	add	r3, r1
 8015b0c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8015b10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015b12:	3301      	adds	r3, #1
 8015b14:	643b      	str	r3, [r7, #64]	; 0x40
 8015b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015b18:	2b03      	cmp	r3, #3
 8015b1a:	d9dc      	bls.n	8015ad6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8015b1c:	2300      	movs	r3, #0
 8015b1e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8015b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d002      	beq.n	8015b2c <find_volume+0x184>
 8015b26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015b28:	3b01      	subs	r3, #1
 8015b2a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8015b2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015b2e:	009b      	lsls	r3, r3, #2
 8015b30:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8015b34:	4413      	add	r3, r2
 8015b36:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8015b3a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8015b3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d005      	beq.n	8015b4e <find_volume+0x1a6>
 8015b42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015b44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015b46:	f7ff fed9 	bl	80158fc <check_fs>
 8015b4a:	4603      	mov	r3, r0
 8015b4c:	e000      	b.n	8015b50 <find_volume+0x1a8>
 8015b4e:	2303      	movs	r3, #3
 8015b50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8015b54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015b58:	2b01      	cmp	r3, #1
 8015b5a:	d905      	bls.n	8015b68 <find_volume+0x1c0>
 8015b5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015b5e:	3301      	adds	r3, #1
 8015b60:	643b      	str	r3, [r7, #64]	; 0x40
 8015b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015b64:	2b03      	cmp	r3, #3
 8015b66:	d9e1      	bls.n	8015b2c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8015b68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015b6c:	2b04      	cmp	r3, #4
 8015b6e:	d101      	bne.n	8015b74 <find_volume+0x1cc>
 8015b70:	2301      	movs	r3, #1
 8015b72:	e192      	b.n	8015e9a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8015b74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015b78:	2b01      	cmp	r3, #1
 8015b7a:	d901      	bls.n	8015b80 <find_volume+0x1d8>
 8015b7c:	230d      	movs	r3, #13
 8015b7e:	e18c      	b.n	8015e9a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8015b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b82:	3338      	adds	r3, #56	; 0x38
 8015b84:	330b      	adds	r3, #11
 8015b86:	4618      	mov	r0, r3
 8015b88:	f7fe f9f8 	bl	8013f7c <ld_word>
 8015b8c:	4603      	mov	r3, r0
 8015b8e:	461a      	mov	r2, r3
 8015b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b92:	899b      	ldrh	r3, [r3, #12]
 8015b94:	429a      	cmp	r2, r3
 8015b96:	d001      	beq.n	8015b9c <find_volume+0x1f4>
 8015b98:	230d      	movs	r3, #13
 8015b9a:	e17e      	b.n	8015e9a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8015b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b9e:	3338      	adds	r3, #56	; 0x38
 8015ba0:	3316      	adds	r3, #22
 8015ba2:	4618      	mov	r0, r3
 8015ba4:	f7fe f9ea 	bl	8013f7c <ld_word>
 8015ba8:	4603      	mov	r3, r0
 8015baa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8015bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d106      	bne.n	8015bc0 <find_volume+0x218>
 8015bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bb4:	3338      	adds	r3, #56	; 0x38
 8015bb6:	3324      	adds	r3, #36	; 0x24
 8015bb8:	4618      	mov	r0, r3
 8015bba:	f7fe f9f7 	bl	8013fac <ld_dword>
 8015bbe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8015bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015bc4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8015bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bc8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8015bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bce:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8015bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bd2:	789b      	ldrb	r3, [r3, #2]
 8015bd4:	2b01      	cmp	r3, #1
 8015bd6:	d005      	beq.n	8015be4 <find_volume+0x23c>
 8015bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bda:	789b      	ldrb	r3, [r3, #2]
 8015bdc:	2b02      	cmp	r3, #2
 8015bde:	d001      	beq.n	8015be4 <find_volume+0x23c>
 8015be0:	230d      	movs	r3, #13
 8015be2:	e15a      	b.n	8015e9a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8015be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015be6:	789b      	ldrb	r3, [r3, #2]
 8015be8:	461a      	mov	r2, r3
 8015bea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015bec:	fb02 f303 	mul.w	r3, r2, r3
 8015bf0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8015bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015bf8:	b29a      	uxth	r2, r3
 8015bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015bfc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8015bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c00:	895b      	ldrh	r3, [r3, #10]
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d008      	beq.n	8015c18 <find_volume+0x270>
 8015c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c08:	895b      	ldrh	r3, [r3, #10]
 8015c0a:	461a      	mov	r2, r3
 8015c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c0e:	895b      	ldrh	r3, [r3, #10]
 8015c10:	3b01      	subs	r3, #1
 8015c12:	4013      	ands	r3, r2
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d001      	beq.n	8015c1c <find_volume+0x274>
 8015c18:	230d      	movs	r3, #13
 8015c1a:	e13e      	b.n	8015e9a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8015c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c1e:	3338      	adds	r3, #56	; 0x38
 8015c20:	3311      	adds	r3, #17
 8015c22:	4618      	mov	r0, r3
 8015c24:	f7fe f9aa 	bl	8013f7c <ld_word>
 8015c28:	4603      	mov	r3, r0
 8015c2a:	461a      	mov	r2, r3
 8015c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c2e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8015c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c32:	891b      	ldrh	r3, [r3, #8]
 8015c34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015c36:	8992      	ldrh	r2, [r2, #12]
 8015c38:	0952      	lsrs	r2, r2, #5
 8015c3a:	b292      	uxth	r2, r2
 8015c3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8015c40:	fb02 f201 	mul.w	r2, r2, r1
 8015c44:	1a9b      	subs	r3, r3, r2
 8015c46:	b29b      	uxth	r3, r3
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d001      	beq.n	8015c50 <find_volume+0x2a8>
 8015c4c:	230d      	movs	r3, #13
 8015c4e:	e124      	b.n	8015e9a <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8015c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c52:	3338      	adds	r3, #56	; 0x38
 8015c54:	3313      	adds	r3, #19
 8015c56:	4618      	mov	r0, r3
 8015c58:	f7fe f990 	bl	8013f7c <ld_word>
 8015c5c:	4603      	mov	r3, r0
 8015c5e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8015c60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d106      	bne.n	8015c74 <find_volume+0x2cc>
 8015c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c68:	3338      	adds	r3, #56	; 0x38
 8015c6a:	3320      	adds	r3, #32
 8015c6c:	4618      	mov	r0, r3
 8015c6e:	f7fe f99d 	bl	8013fac <ld_dword>
 8015c72:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8015c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c76:	3338      	adds	r3, #56	; 0x38
 8015c78:	330e      	adds	r3, #14
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	f7fe f97e 	bl	8013f7c <ld_word>
 8015c80:	4603      	mov	r3, r0
 8015c82:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8015c84:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d104      	bne.n	8015c94 <find_volume+0x2ec>
 8015c8a:	230d      	movs	r3, #13
 8015c8c:	e105      	b.n	8015e9a <find_volume+0x4f2>
 8015c8e:	bf00      	nop
 8015c90:	20000204 	.word	0x20000204

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8015c94:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c98:	4413      	add	r3, r2
 8015c9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015c9c:	8911      	ldrh	r1, [r2, #8]
 8015c9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015ca0:	8992      	ldrh	r2, [r2, #12]
 8015ca2:	0952      	lsrs	r2, r2, #5
 8015ca4:	b292      	uxth	r2, r2
 8015ca6:	fbb1 f2f2 	udiv	r2, r1, r2
 8015caa:	b292      	uxth	r2, r2
 8015cac:	4413      	add	r3, r2
 8015cae:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8015cb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cb4:	429a      	cmp	r2, r3
 8015cb6:	d201      	bcs.n	8015cbc <find_volume+0x314>
 8015cb8:	230d      	movs	r3, #13
 8015cba:	e0ee      	b.n	8015e9a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8015cbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cc0:	1ad3      	subs	r3, r2, r3
 8015cc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015cc4:	8952      	ldrh	r2, [r2, #10]
 8015cc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8015cca:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8015ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d101      	bne.n	8015cd6 <find_volume+0x32e>
 8015cd2:	230d      	movs	r3, #13
 8015cd4:	e0e1      	b.n	8015e9a <find_volume+0x4f2>
		fmt = FS_FAT32;
 8015cd6:	2303      	movs	r3, #3
 8015cd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8015cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cde:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8015ce2:	4293      	cmp	r3, r2
 8015ce4:	d802      	bhi.n	8015cec <find_volume+0x344>
 8015ce6:	2302      	movs	r3, #2
 8015ce8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8015cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cee:	f640 72f5 	movw	r2, #4085	; 0xff5
 8015cf2:	4293      	cmp	r3, r2
 8015cf4:	d802      	bhi.n	8015cfc <find_volume+0x354>
 8015cf6:	2301      	movs	r3, #1
 8015cf8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8015cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cfe:	1c9a      	adds	r2, r3, #2
 8015d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d02:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8015d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015d08:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8015d0a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015d0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d0e:	441a      	add	r2, r3
 8015d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d12:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8015d14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015d18:	441a      	add	r2, r3
 8015d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d1c:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8015d1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015d22:	2b03      	cmp	r3, #3
 8015d24:	d11e      	bne.n	8015d64 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8015d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d28:	3338      	adds	r3, #56	; 0x38
 8015d2a:	332a      	adds	r3, #42	; 0x2a
 8015d2c:	4618      	mov	r0, r3
 8015d2e:	f7fe f925 	bl	8013f7c <ld_word>
 8015d32:	4603      	mov	r3, r0
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d001      	beq.n	8015d3c <find_volume+0x394>
 8015d38:	230d      	movs	r3, #13
 8015d3a:	e0ae      	b.n	8015e9a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8015d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d3e:	891b      	ldrh	r3, [r3, #8]
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d001      	beq.n	8015d48 <find_volume+0x3a0>
 8015d44:	230d      	movs	r3, #13
 8015d46:	e0a8      	b.n	8015e9a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8015d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d4a:	3338      	adds	r3, #56	; 0x38
 8015d4c:	332c      	adds	r3, #44	; 0x2c
 8015d4e:	4618      	mov	r0, r3
 8015d50:	f7fe f92c 	bl	8013fac <ld_dword>
 8015d54:	4602      	mov	r2, r0
 8015d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d58:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8015d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d5c:	69db      	ldr	r3, [r3, #28]
 8015d5e:	009b      	lsls	r3, r3, #2
 8015d60:	647b      	str	r3, [r7, #68]	; 0x44
 8015d62:	e01f      	b.n	8015da4 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8015d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d66:	891b      	ldrh	r3, [r3, #8]
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d101      	bne.n	8015d70 <find_volume+0x3c8>
 8015d6c:	230d      	movs	r3, #13
 8015d6e:	e094      	b.n	8015e9a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8015d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015d76:	441a      	add	r2, r3
 8015d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d7a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8015d7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015d80:	2b02      	cmp	r3, #2
 8015d82:	d103      	bne.n	8015d8c <find_volume+0x3e4>
 8015d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d86:	69db      	ldr	r3, [r3, #28]
 8015d88:	005b      	lsls	r3, r3, #1
 8015d8a:	e00a      	b.n	8015da2 <find_volume+0x3fa>
 8015d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d8e:	69da      	ldr	r2, [r3, #28]
 8015d90:	4613      	mov	r3, r2
 8015d92:	005b      	lsls	r3, r3, #1
 8015d94:	4413      	add	r3, r2
 8015d96:	085a      	lsrs	r2, r3, #1
 8015d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d9a:	69db      	ldr	r3, [r3, #28]
 8015d9c:	f003 0301 	and.w	r3, r3, #1
 8015da0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8015da2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8015da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015da6:	6a1a      	ldr	r2, [r3, #32]
 8015da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015daa:	899b      	ldrh	r3, [r3, #12]
 8015dac:	4619      	mov	r1, r3
 8015dae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015db0:	440b      	add	r3, r1
 8015db2:	3b01      	subs	r3, #1
 8015db4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015db6:	8989      	ldrh	r1, [r1, #12]
 8015db8:	fbb3 f3f1 	udiv	r3, r3, r1
 8015dbc:	429a      	cmp	r2, r3
 8015dbe:	d201      	bcs.n	8015dc4 <find_volume+0x41c>
 8015dc0:	230d      	movs	r3, #13
 8015dc2:	e06a      	b.n	8015e9a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8015dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8015dca:	619a      	str	r2, [r3, #24]
 8015dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015dce:	699a      	ldr	r2, [r3, #24]
 8015dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015dd2:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8015dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015dd6:	2280      	movs	r2, #128	; 0x80
 8015dd8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8015dda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015dde:	2b03      	cmp	r3, #3
 8015de0:	d149      	bne.n	8015e76 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8015de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015de4:	3338      	adds	r3, #56	; 0x38
 8015de6:	3330      	adds	r3, #48	; 0x30
 8015de8:	4618      	mov	r0, r3
 8015dea:	f7fe f8c7 	bl	8013f7c <ld_word>
 8015dee:	4603      	mov	r3, r0
 8015df0:	2b01      	cmp	r3, #1
 8015df2:	d140      	bne.n	8015e76 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8015df4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015df6:	3301      	adds	r3, #1
 8015df8:	4619      	mov	r1, r3
 8015dfa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015dfc:	f7fe fa02 	bl	8014204 <move_window>
 8015e00:	4603      	mov	r3, r0
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d137      	bne.n	8015e76 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8015e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e08:	2200      	movs	r2, #0
 8015e0a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8015e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e0e:	3338      	adds	r3, #56	; 0x38
 8015e10:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015e14:	4618      	mov	r0, r3
 8015e16:	f7fe f8b1 	bl	8013f7c <ld_word>
 8015e1a:	4603      	mov	r3, r0
 8015e1c:	461a      	mov	r2, r3
 8015e1e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8015e22:	429a      	cmp	r2, r3
 8015e24:	d127      	bne.n	8015e76 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8015e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e28:	3338      	adds	r3, #56	; 0x38
 8015e2a:	4618      	mov	r0, r3
 8015e2c:	f7fe f8be 	bl	8013fac <ld_dword>
 8015e30:	4603      	mov	r3, r0
 8015e32:	4a1c      	ldr	r2, [pc, #112]	; (8015ea4 <find_volume+0x4fc>)
 8015e34:	4293      	cmp	r3, r2
 8015e36:	d11e      	bne.n	8015e76 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8015e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e3a:	3338      	adds	r3, #56	; 0x38
 8015e3c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8015e40:	4618      	mov	r0, r3
 8015e42:	f7fe f8b3 	bl	8013fac <ld_dword>
 8015e46:	4603      	mov	r3, r0
 8015e48:	4a17      	ldr	r2, [pc, #92]	; (8015ea8 <find_volume+0x500>)
 8015e4a:	4293      	cmp	r3, r2
 8015e4c:	d113      	bne.n	8015e76 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8015e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e50:	3338      	adds	r3, #56	; 0x38
 8015e52:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8015e56:	4618      	mov	r0, r3
 8015e58:	f7fe f8a8 	bl	8013fac <ld_dword>
 8015e5c:	4602      	mov	r2, r0
 8015e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e60:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8015e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e64:	3338      	adds	r3, #56	; 0x38
 8015e66:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8015e6a:	4618      	mov	r0, r3
 8015e6c:	f7fe f89e 	bl	8013fac <ld_dword>
 8015e70:	4602      	mov	r2, r0
 8015e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e74:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8015e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e78:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8015e7c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8015e7e:	4b0b      	ldr	r3, [pc, #44]	; (8015eac <find_volume+0x504>)
 8015e80:	881b      	ldrh	r3, [r3, #0]
 8015e82:	3301      	adds	r3, #1
 8015e84:	b29a      	uxth	r2, r3
 8015e86:	4b09      	ldr	r3, [pc, #36]	; (8015eac <find_volume+0x504>)
 8015e88:	801a      	strh	r2, [r3, #0]
 8015e8a:	4b08      	ldr	r3, [pc, #32]	; (8015eac <find_volume+0x504>)
 8015e8c:	881a      	ldrh	r2, [r3, #0]
 8015e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e90:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8015e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e94:	4a06      	ldr	r2, [pc, #24]	; (8015eb0 <find_volume+0x508>)
 8015e96:	611a      	str	r2, [r3, #16]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 8015e98:	2300      	movs	r3, #0
}
 8015e9a:	4618      	mov	r0, r3
 8015e9c:	3758      	adds	r7, #88	; 0x58
 8015e9e:	46bd      	mov	sp, r7
 8015ea0:	bd80      	pop	{r7, pc}
 8015ea2:	bf00      	nop
 8015ea4:	41615252 	.word	0x41615252
 8015ea8:	61417272 	.word	0x61417272
 8015eac:	20000208 	.word	0x20000208
 8015eb0:	2000020c 	.word	0x2000020c

08015eb4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8015eb4:	b580      	push	{r7, lr}
 8015eb6:	b084      	sub	sp, #16
 8015eb8:	af00      	add	r7, sp, #0
 8015eba:	6078      	str	r0, [r7, #4]
 8015ebc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8015ebe:	2309      	movs	r3, #9
 8015ec0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d01c      	beq.n	8015f02 <validate+0x4e>
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d018      	beq.n	8015f02 <validate+0x4e>
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	681b      	ldr	r3, [r3, #0]
 8015ed4:	781b      	ldrb	r3, [r3, #0]
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d013      	beq.n	8015f02 <validate+0x4e>
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	889a      	ldrh	r2, [r3, #4]
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	681b      	ldr	r3, [r3, #0]
 8015ee2:	88db      	ldrh	r3, [r3, #6]
 8015ee4:	429a      	cmp	r2, r3
 8015ee6:	d10c      	bne.n	8015f02 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	785b      	ldrb	r3, [r3, #1]
 8015eee:	4618      	mov	r0, r3
 8015ef0:	f7fd ffa6 	bl	8013e40 <disk_status>
 8015ef4:	4603      	mov	r3, r0
 8015ef6:	f003 0301 	and.w	r3, r3, #1
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d101      	bne.n	8015f02 <validate+0x4e>
			res = FR_OK;
 8015efe:	2300      	movs	r3, #0
 8015f00:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8015f02:	7bfb      	ldrb	r3, [r7, #15]
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d102      	bne.n	8015f0e <validate+0x5a>
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	e000      	b.n	8015f10 <validate+0x5c>
 8015f0e:	2300      	movs	r3, #0
 8015f10:	683a      	ldr	r2, [r7, #0]
 8015f12:	6013      	str	r3, [r2, #0]
	return res;
 8015f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f16:	4618      	mov	r0, r3
 8015f18:	3710      	adds	r7, #16
 8015f1a:	46bd      	mov	sp, r7
 8015f1c:	bd80      	pop	{r7, pc}
	...

08015f20 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8015f20:	b580      	push	{r7, lr}
 8015f22:	b088      	sub	sp, #32
 8015f24:	af00      	add	r7, sp, #0
 8015f26:	60f8      	str	r0, [r7, #12]
 8015f28:	60b9      	str	r1, [r7, #8]
 8015f2a:	4613      	mov	r3, r2
 8015f2c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8015f2e:	68bb      	ldr	r3, [r7, #8]
 8015f30:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8015f32:	f107 0310 	add.w	r3, r7, #16
 8015f36:	4618      	mov	r0, r3
 8015f38:	f7ff fc9c 	bl	8015874 <get_ldnumber>
 8015f3c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8015f3e:	69fb      	ldr	r3, [r7, #28]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	da01      	bge.n	8015f48 <f_mount+0x28>
 8015f44:	230b      	movs	r3, #11
 8015f46:	e028      	b.n	8015f9a <f_mount+0x7a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8015f48:	4a16      	ldr	r2, [pc, #88]	; (8015fa4 <f_mount+0x84>)
 8015f4a:	69fb      	ldr	r3, [r7, #28]
 8015f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015f50:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8015f52:	69bb      	ldr	r3, [r7, #24]
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d002      	beq.n	8015f5e <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8015f58:	69bb      	ldr	r3, [r7, #24]
 8015f5a:	2200      	movs	r2, #0
 8015f5c:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8015f5e:	68fb      	ldr	r3, [r7, #12]
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d002      	beq.n	8015f6a <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	2200      	movs	r2, #0
 8015f68:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8015f6a:	68fa      	ldr	r2, [r7, #12]
 8015f6c:	490d      	ldr	r1, [pc, #52]	; (8015fa4 <f_mount+0x84>)
 8015f6e:	69fb      	ldr	r3, [r7, #28]
 8015f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d002      	beq.n	8015f80 <f_mount+0x60>
 8015f7a:	79fb      	ldrb	r3, [r7, #7]
 8015f7c:	2b01      	cmp	r3, #1
 8015f7e:	d001      	beq.n	8015f84 <f_mount+0x64>
 8015f80:	2300      	movs	r3, #0
 8015f82:	e00a      	b.n	8015f9a <f_mount+0x7a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8015f84:	f107 010c 	add.w	r1, r7, #12
 8015f88:	f107 0308 	add.w	r3, r7, #8
 8015f8c:	2200      	movs	r2, #0
 8015f8e:	4618      	mov	r0, r3
 8015f90:	f7ff fd0a 	bl	80159a8 <find_volume>
 8015f94:	4603      	mov	r3, r0
 8015f96:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8015f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8015f9a:	4618      	mov	r0, r3
 8015f9c:	3720      	adds	r7, #32
 8015f9e:	46bd      	mov	sp, r7
 8015fa0:	bd80      	pop	{r7, pc}
 8015fa2:	bf00      	nop
 8015fa4:	20000204 	.word	0x20000204

08015fa8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8015fa8:	b580      	push	{r7, lr}
 8015faa:	b098      	sub	sp, #96	; 0x60
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	60f8      	str	r0, [r7, #12]
 8015fb0:	60b9      	str	r1, [r7, #8]
 8015fb2:	4613      	mov	r3, r2
 8015fb4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8015fb6:	68fb      	ldr	r3, [r7, #12]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d101      	bne.n	8015fc0 <f_open+0x18>
 8015fbc:	2309      	movs	r3, #9
 8015fbe:	e188      	b.n	80162d2 <f_open+0x32a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8015fc0:	79fb      	ldrb	r3, [r7, #7]
 8015fc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015fc6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8015fc8:	79fa      	ldrb	r2, [r7, #7]
 8015fca:	f107 0110 	add.w	r1, r7, #16
 8015fce:	f107 0308 	add.w	r3, r7, #8
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	f7ff fce8 	bl	80159a8 <find_volume>
 8015fd8:	4603      	mov	r3, r0
 8015fda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8015fde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	f040 816c 	bne.w	80162c0 <f_open+0x318>
		dj.obj.fs = fs;
 8015fe8:	693b      	ldr	r3, [r7, #16]
 8015fea:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8015fec:	68ba      	ldr	r2, [r7, #8]
 8015fee:	f107 0314 	add.w	r3, r7, #20
 8015ff2:	4611      	mov	r1, r2
 8015ff4:	4618      	mov	r0, r3
 8015ff6:	f7ff fbc7 	bl	8015788 <follow_path>
 8015ffa:	4603      	mov	r3, r0
 8015ffc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8016000:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016004:	2b00      	cmp	r3, #0
 8016006:	d107      	bne.n	8016018 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8016008:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801600c:	b25b      	sxtb	r3, r3
 801600e:	2b00      	cmp	r3, #0
 8016010:	da02      	bge.n	8016018 <f_open+0x70>
				res = FR_INVALID_NAME;
 8016012:	2306      	movs	r3, #6
 8016014:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8016018:	79fb      	ldrb	r3, [r7, #7]
 801601a:	f003 031c 	and.w	r3, r3, #28
 801601e:	2b00      	cmp	r3, #0
 8016020:	d078      	beq.n	8016114 <f_open+0x16c>
			if (res != FR_OK) {					/* No file, create new */
 8016022:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016026:	2b00      	cmp	r3, #0
 8016028:	d010      	beq.n	801604c <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801602a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801602e:	2b04      	cmp	r3, #4
 8016030:	d107      	bne.n	8016042 <f_open+0x9a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8016032:	f107 0314 	add.w	r3, r7, #20
 8016036:	4618      	mov	r0, r3
 8016038:	f7ff f8f6 	bl	8015228 <dir_register>
 801603c:	4603      	mov	r3, r0
 801603e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8016042:	79fb      	ldrb	r3, [r7, #7]
 8016044:	f043 0308 	orr.w	r3, r3, #8
 8016048:	71fb      	strb	r3, [r7, #7]
 801604a:	e010      	b.n	801606e <f_open+0xc6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801604c:	7ebb      	ldrb	r3, [r7, #26]
 801604e:	f003 0311 	and.w	r3, r3, #17
 8016052:	2b00      	cmp	r3, #0
 8016054:	d003      	beq.n	801605e <f_open+0xb6>
					res = FR_DENIED;
 8016056:	2307      	movs	r3, #7
 8016058:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801605c:	e007      	b.n	801606e <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801605e:	79fb      	ldrb	r3, [r7, #7]
 8016060:	f003 0304 	and.w	r3, r3, #4
 8016064:	2b00      	cmp	r3, #0
 8016066:	d002      	beq.n	801606e <f_open+0xc6>
 8016068:	2308      	movs	r3, #8
 801606a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801606e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016072:	2b00      	cmp	r3, #0
 8016074:	d168      	bne.n	8016148 <f_open+0x1a0>
 8016076:	79fb      	ldrb	r3, [r7, #7]
 8016078:	f003 0308 	and.w	r3, r3, #8
 801607c:	2b00      	cmp	r3, #0
 801607e:	d063      	beq.n	8016148 <f_open+0x1a0>
				dw = GET_FATTIME();
 8016080:	f7fa fd36 	bl	8010af0 <get_fattime>
 8016084:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8016086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016088:	330e      	adds	r3, #14
 801608a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801608c:	4618      	mov	r0, r3
 801608e:	f7fd ffcb 	bl	8014028 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8016092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016094:	3316      	adds	r3, #22
 8016096:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016098:	4618      	mov	r0, r3
 801609a:	f7fd ffc5 	bl	8014028 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801609e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160a0:	330b      	adds	r3, #11
 80160a2:	2220      	movs	r2, #32
 80160a4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80160a6:	693b      	ldr	r3, [r7, #16]
 80160a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80160aa:	4611      	mov	r1, r2
 80160ac:	4618      	mov	r0, r3
 80160ae:	f7fe fe31 	bl	8014d14 <ld_clust>
 80160b2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80160b4:	693b      	ldr	r3, [r7, #16]
 80160b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80160b8:	2200      	movs	r2, #0
 80160ba:	4618      	mov	r0, r3
 80160bc:	f7fe fe49 	bl	8014d52 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80160c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160c2:	331c      	adds	r3, #28
 80160c4:	2100      	movs	r1, #0
 80160c6:	4618      	mov	r0, r3
 80160c8:	f7fd ffae 	bl	8014028 <st_dword>
					fs->wflag = 1;
 80160cc:	693b      	ldr	r3, [r7, #16]
 80160ce:	2201      	movs	r2, #1
 80160d0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80160d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d037      	beq.n	8016148 <f_open+0x1a0>
						dw = fs->winsect;
 80160d8:	693b      	ldr	r3, [r7, #16]
 80160da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80160dc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80160de:	f107 0314 	add.w	r3, r7, #20
 80160e2:	2200      	movs	r2, #0
 80160e4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80160e6:	4618      	mov	r0, r3
 80160e8:	f7fe fb39 	bl	801475e <remove_chain>
 80160ec:	4603      	mov	r3, r0
 80160ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80160f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d126      	bne.n	8016148 <f_open+0x1a0>
							res = move_window(fs, dw);
 80160fa:	693b      	ldr	r3, [r7, #16]
 80160fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80160fe:	4618      	mov	r0, r3
 8016100:	f7fe f880 	bl	8014204 <move_window>
 8016104:	4603      	mov	r3, r0
 8016106:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801610a:	693b      	ldr	r3, [r7, #16]
 801610c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801610e:	3a01      	subs	r2, #1
 8016110:	615a      	str	r2, [r3, #20]
 8016112:	e019      	b.n	8016148 <f_open+0x1a0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8016114:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016118:	2b00      	cmp	r3, #0
 801611a:	d115      	bne.n	8016148 <f_open+0x1a0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801611c:	7ebb      	ldrb	r3, [r7, #26]
 801611e:	f003 0310 	and.w	r3, r3, #16
 8016122:	2b00      	cmp	r3, #0
 8016124:	d003      	beq.n	801612e <f_open+0x186>
					res = FR_NO_FILE;
 8016126:	2304      	movs	r3, #4
 8016128:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801612c:	e00c      	b.n	8016148 <f_open+0x1a0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801612e:	79fb      	ldrb	r3, [r7, #7]
 8016130:	f003 0302 	and.w	r3, r3, #2
 8016134:	2b00      	cmp	r3, #0
 8016136:	d007      	beq.n	8016148 <f_open+0x1a0>
 8016138:	7ebb      	ldrb	r3, [r7, #26]
 801613a:	f003 0301 	and.w	r3, r3, #1
 801613e:	2b00      	cmp	r3, #0
 8016140:	d002      	beq.n	8016148 <f_open+0x1a0>
						res = FR_DENIED;
 8016142:	2307      	movs	r3, #7
 8016144:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8016148:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801614c:	2b00      	cmp	r3, #0
 801614e:	d10f      	bne.n	8016170 <f_open+0x1c8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8016150:	79fb      	ldrb	r3, [r7, #7]
 8016152:	f003 0308 	and.w	r3, r3, #8
 8016156:	2b00      	cmp	r3, #0
 8016158:	d003      	beq.n	8016162 <f_open+0x1ba>
				mode |= FA_MODIFIED;
 801615a:	79fb      	ldrb	r3, [r7, #7]
 801615c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016160:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8016162:	693b      	ldr	r3, [r7, #16]
 8016164:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 801616a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801616c:	68fb      	ldr	r3, [r7, #12]
 801616e:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 8016170:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016174:	2b00      	cmp	r3, #0
 8016176:	f040 80a3 	bne.w	80162c0 <f_open+0x318>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801617a:	693b      	ldr	r3, [r7, #16]
 801617c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801617e:	4611      	mov	r1, r2
 8016180:	4618      	mov	r0, r3
 8016182:	f7fe fdc7 	bl	8014d14 <ld_clust>
 8016186:	4602      	mov	r2, r0
 8016188:	68fb      	ldr	r3, [r7, #12]
 801618a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801618c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801618e:	331c      	adds	r3, #28
 8016190:	4618      	mov	r0, r3
 8016192:	f7fd ff0b 	bl	8013fac <ld_dword>
 8016196:	4602      	mov	r2, r0
 8016198:	68fb      	ldr	r3, [r7, #12]
 801619a:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801619c:	68fb      	ldr	r3, [r7, #12]
 801619e:	2200      	movs	r2, #0
 80161a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80161a2:	693a      	ldr	r2, [r7, #16]
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80161a8:	693b      	ldr	r3, [r7, #16]
 80161aa:	88da      	ldrh	r2, [r3, #6]
 80161ac:	68fb      	ldr	r3, [r7, #12]
 80161ae:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80161b0:	68fb      	ldr	r3, [r7, #12]
 80161b2:	79fa      	ldrb	r2, [r7, #7]
 80161b4:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	2200      	movs	r2, #0
 80161ba:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	2200      	movs	r2, #0
 80161c0:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80161c2:	68fb      	ldr	r3, [r7, #12]
 80161c4:	2200      	movs	r2, #0
 80161c6:	615a      	str	r2, [r3, #20]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	332c      	adds	r3, #44	; 0x2c
 80161cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80161d0:	2100      	movs	r1, #0
 80161d2:	4618      	mov	r0, r3
 80161d4:	f7fd ff75 	bl	80140c2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80161d8:	79fb      	ldrb	r3, [r7, #7]
 80161da:	f003 0320 	and.w	r3, r3, #32
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d06e      	beq.n	80162c0 <f_open+0x318>
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	68db      	ldr	r3, [r3, #12]
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d06a      	beq.n	80162c0 <f_open+0x318>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	68da      	ldr	r2, [r3, #12]
 80161ee:	68fb      	ldr	r3, [r7, #12]
 80161f0:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80161f2:	693b      	ldr	r3, [r7, #16]
 80161f4:	895b      	ldrh	r3, [r3, #10]
 80161f6:	461a      	mov	r2, r3
 80161f8:	693b      	ldr	r3, [r7, #16]
 80161fa:	899b      	ldrh	r3, [r3, #12]
 80161fc:	fb03 f302 	mul.w	r3, r3, r2
 8016200:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	689b      	ldr	r3, [r3, #8]
 8016206:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	68db      	ldr	r3, [r3, #12]
 801620c:	657b      	str	r3, [r7, #84]	; 0x54
 801620e:	e016      	b.n	801623e <f_open+0x296>
					clst = get_fat(&fp->obj, clst);
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016214:	4618      	mov	r0, r3
 8016216:	f7fe f8b2 	bl	801437e <get_fat>
 801621a:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801621c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801621e:	2b01      	cmp	r3, #1
 8016220:	d802      	bhi.n	8016228 <f_open+0x280>
 8016222:	2302      	movs	r3, #2
 8016224:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8016228:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801622a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801622e:	d102      	bne.n	8016236 <f_open+0x28e>
 8016230:	2301      	movs	r3, #1
 8016232:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016236:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801623a:	1ad3      	subs	r3, r2, r3
 801623c:	657b      	str	r3, [r7, #84]	; 0x54
 801623e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016242:	2b00      	cmp	r3, #0
 8016244:	d103      	bne.n	801624e <f_open+0x2a6>
 8016246:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016248:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801624a:	429a      	cmp	r2, r3
 801624c:	d8e0      	bhi.n	8016210 <f_open+0x268>
				}
				fp->clust = clst;
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016252:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8016254:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016258:	2b00      	cmp	r3, #0
 801625a:	d131      	bne.n	80162c0 <f_open+0x318>
 801625c:	693b      	ldr	r3, [r7, #16]
 801625e:	899b      	ldrh	r3, [r3, #12]
 8016260:	461a      	mov	r2, r3
 8016262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016264:	fbb3 f1f2 	udiv	r1, r3, r2
 8016268:	fb02 f201 	mul.w	r2, r2, r1
 801626c:	1a9b      	subs	r3, r3, r2
 801626e:	2b00      	cmp	r3, #0
 8016270:	d026      	beq.n	80162c0 <f_open+0x318>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8016272:	693b      	ldr	r3, [r7, #16]
 8016274:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016276:	4618      	mov	r0, r3
 8016278:	f7fe f862 	bl	8014340 <clust2sect>
 801627c:	6478      	str	r0, [r7, #68]	; 0x44
 801627e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016280:	2b00      	cmp	r3, #0
 8016282:	d103      	bne.n	801628c <f_open+0x2e4>
						res = FR_INT_ERR;
 8016284:	2302      	movs	r3, #2
 8016286:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801628a:	e019      	b.n	80162c0 <f_open+0x318>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801628c:	693b      	ldr	r3, [r7, #16]
 801628e:	899b      	ldrh	r3, [r3, #12]
 8016290:	461a      	mov	r2, r3
 8016292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016294:	fbb3 f2f2 	udiv	r2, r3, r2
 8016298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801629a:	441a      	add	r2, r3
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	61da      	str	r2, [r3, #28]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80162a0:	693b      	ldr	r3, [r7, #16]
 80162a2:	7858      	ldrb	r0, [r3, #1]
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80162aa:	68fb      	ldr	r3, [r7, #12]
 80162ac:	69da      	ldr	r2, [r3, #28]
 80162ae:	2301      	movs	r3, #1
 80162b0:	f7fd fe06 	bl	8013ec0 <disk_read>
 80162b4:	4603      	mov	r3, r0
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d002      	beq.n	80162c0 <f_open+0x318>
 80162ba:	2301      	movs	r3, #1
 80162bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80162c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d002      	beq.n	80162ce <f_open+0x326>
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	2200      	movs	r2, #0
 80162cc:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80162ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80162d2:	4618      	mov	r0, r3
 80162d4:	3760      	adds	r7, #96	; 0x60
 80162d6:	46bd      	mov	sp, r7
 80162d8:	bd80      	pop	{r7, pc}

080162da <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80162da:	b580      	push	{r7, lr}
 80162dc:	b08c      	sub	sp, #48	; 0x30
 80162de:	af00      	add	r7, sp, #0
 80162e0:	60f8      	str	r0, [r7, #12]
 80162e2:	60b9      	str	r1, [r7, #8]
 80162e4:	607a      	str	r2, [r7, #4]
 80162e6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80162e8:	68bb      	ldr	r3, [r7, #8]
 80162ea:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80162ec:	683b      	ldr	r3, [r7, #0]
 80162ee:	2200      	movs	r2, #0
 80162f0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80162f2:	68fb      	ldr	r3, [r7, #12]
 80162f4:	f107 0210 	add.w	r2, r7, #16
 80162f8:	4611      	mov	r1, r2
 80162fa:	4618      	mov	r0, r3
 80162fc:	f7ff fdda 	bl	8015eb4 <validate>
 8016300:	4603      	mov	r3, r0
 8016302:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8016306:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801630a:	2b00      	cmp	r3, #0
 801630c:	d107      	bne.n	801631e <f_write+0x44>
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	7c5b      	ldrb	r3, [r3, #17]
 8016312:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8016316:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801631a:	2b00      	cmp	r3, #0
 801631c:	d002      	beq.n	8016324 <f_write+0x4a>
 801631e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016322:	e16a      	b.n	80165fa <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8016324:	68fb      	ldr	r3, [r7, #12]
 8016326:	7c1b      	ldrb	r3, [r3, #16]
 8016328:	f003 0302 	and.w	r3, r3, #2
 801632c:	2b00      	cmp	r3, #0
 801632e:	d101      	bne.n	8016334 <f_write+0x5a>
 8016330:	2307      	movs	r3, #7
 8016332:	e162      	b.n	80165fa <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8016334:	68fb      	ldr	r3, [r7, #12]
 8016336:	695a      	ldr	r2, [r3, #20]
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	441a      	add	r2, r3
 801633c:	68fb      	ldr	r3, [r7, #12]
 801633e:	695b      	ldr	r3, [r3, #20]
 8016340:	429a      	cmp	r2, r3
 8016342:	f080 814c 	bcs.w	80165de <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	695b      	ldr	r3, [r3, #20]
 801634a:	43db      	mvns	r3, r3
 801634c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801634e:	e146      	b.n	80165de <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8016350:	68fb      	ldr	r3, [r7, #12]
 8016352:	695b      	ldr	r3, [r3, #20]
 8016354:	693a      	ldr	r2, [r7, #16]
 8016356:	8992      	ldrh	r2, [r2, #12]
 8016358:	fbb3 f1f2 	udiv	r1, r3, r2
 801635c:	fb02 f201 	mul.w	r2, r2, r1
 8016360:	1a9b      	subs	r3, r3, r2
 8016362:	2b00      	cmp	r3, #0
 8016364:	f040 80f1 	bne.w	801654a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8016368:	68fb      	ldr	r3, [r7, #12]
 801636a:	695b      	ldr	r3, [r3, #20]
 801636c:	693a      	ldr	r2, [r7, #16]
 801636e:	8992      	ldrh	r2, [r2, #12]
 8016370:	fbb3 f3f2 	udiv	r3, r3, r2
 8016374:	693a      	ldr	r2, [r7, #16]
 8016376:	8952      	ldrh	r2, [r2, #10]
 8016378:	3a01      	subs	r2, #1
 801637a:	4013      	ands	r3, r2
 801637c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801637e:	69bb      	ldr	r3, [r7, #24]
 8016380:	2b00      	cmp	r3, #0
 8016382:	d143      	bne.n	801640c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	695b      	ldr	r3, [r3, #20]
 8016388:	2b00      	cmp	r3, #0
 801638a:	d10c      	bne.n	80163a6 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801638c:	68fb      	ldr	r3, [r7, #12]
 801638e:	689b      	ldr	r3, [r3, #8]
 8016390:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8016392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016394:	2b00      	cmp	r3, #0
 8016396:	d11a      	bne.n	80163ce <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	2100      	movs	r1, #0
 801639c:	4618      	mov	r0, r3
 801639e:	f7fe fa43 	bl	8014828 <create_chain>
 80163a2:	62b8      	str	r0, [r7, #40]	; 0x28
 80163a4:	e013      	b.n	80163ce <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d007      	beq.n	80163be <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	695b      	ldr	r3, [r3, #20]
 80163b2:	4619      	mov	r1, r3
 80163b4:	68f8      	ldr	r0, [r7, #12]
 80163b6:	f7fe facf 	bl	8014958 <clmt_clust>
 80163ba:	62b8      	str	r0, [r7, #40]	; 0x28
 80163bc:	e007      	b.n	80163ce <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80163be:	68fa      	ldr	r2, [r7, #12]
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	699b      	ldr	r3, [r3, #24]
 80163c4:	4619      	mov	r1, r3
 80163c6:	4610      	mov	r0, r2
 80163c8:	f7fe fa2e 	bl	8014828 <create_chain>
 80163cc:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80163ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	f000 8109 	beq.w	80165e8 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80163d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163d8:	2b01      	cmp	r3, #1
 80163da:	d104      	bne.n	80163e6 <f_write+0x10c>
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	2202      	movs	r2, #2
 80163e0:	745a      	strb	r2, [r3, #17]
 80163e2:	2302      	movs	r3, #2
 80163e4:	e109      	b.n	80165fa <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80163e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163ec:	d104      	bne.n	80163f8 <f_write+0x11e>
 80163ee:	68fb      	ldr	r3, [r7, #12]
 80163f0:	2201      	movs	r2, #1
 80163f2:	745a      	strb	r2, [r3, #17]
 80163f4:	2301      	movs	r3, #1
 80163f6:	e100      	b.n	80165fa <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80163f8:	68fb      	ldr	r3, [r7, #12]
 80163fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80163fc:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80163fe:	68fb      	ldr	r3, [r7, #12]
 8016400:	689b      	ldr	r3, [r3, #8]
 8016402:	2b00      	cmp	r3, #0
 8016404:	d102      	bne.n	801640c <f_write+0x132>
 8016406:	68fb      	ldr	r3, [r7, #12]
 8016408:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801640a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	7c1b      	ldrb	r3, [r3, #16]
 8016410:	b25b      	sxtb	r3, r3
 8016412:	2b00      	cmp	r3, #0
 8016414:	da18      	bge.n	8016448 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016416:	693b      	ldr	r3, [r7, #16]
 8016418:	7858      	ldrb	r0, [r3, #1]
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	69da      	ldr	r2, [r3, #28]
 8016424:	2301      	movs	r3, #1
 8016426:	f7fd fd6b 	bl	8013f00 <disk_write>
 801642a:	4603      	mov	r3, r0
 801642c:	2b00      	cmp	r3, #0
 801642e:	d004      	beq.n	801643a <f_write+0x160>
 8016430:	68fb      	ldr	r3, [r7, #12]
 8016432:	2201      	movs	r2, #1
 8016434:	745a      	strb	r2, [r3, #17]
 8016436:	2301      	movs	r3, #1
 8016438:	e0df      	b.n	80165fa <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	7c1b      	ldrb	r3, [r3, #16]
 801643e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016442:	b2da      	uxtb	r2, r3
 8016444:	68fb      	ldr	r3, [r7, #12]
 8016446:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8016448:	693a      	ldr	r2, [r7, #16]
 801644a:	68fb      	ldr	r3, [r7, #12]
 801644c:	699b      	ldr	r3, [r3, #24]
 801644e:	4619      	mov	r1, r3
 8016450:	4610      	mov	r0, r2
 8016452:	f7fd ff75 	bl	8014340 <clust2sect>
 8016456:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8016458:	697b      	ldr	r3, [r7, #20]
 801645a:	2b00      	cmp	r3, #0
 801645c:	d104      	bne.n	8016468 <f_write+0x18e>
 801645e:	68fb      	ldr	r3, [r7, #12]
 8016460:	2202      	movs	r2, #2
 8016462:	745a      	strb	r2, [r3, #17]
 8016464:	2302      	movs	r3, #2
 8016466:	e0c8      	b.n	80165fa <f_write+0x320>
			sect += csect;
 8016468:	697a      	ldr	r2, [r7, #20]
 801646a:	69bb      	ldr	r3, [r7, #24]
 801646c:	4413      	add	r3, r2
 801646e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8016470:	693b      	ldr	r3, [r7, #16]
 8016472:	899b      	ldrh	r3, [r3, #12]
 8016474:	461a      	mov	r2, r3
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	fbb3 f3f2 	udiv	r3, r3, r2
 801647c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801647e:	6a3b      	ldr	r3, [r7, #32]
 8016480:	2b00      	cmp	r3, #0
 8016482:	d043      	beq.n	801650c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8016484:	69ba      	ldr	r2, [r7, #24]
 8016486:	6a3b      	ldr	r3, [r7, #32]
 8016488:	4413      	add	r3, r2
 801648a:	693a      	ldr	r2, [r7, #16]
 801648c:	8952      	ldrh	r2, [r2, #10]
 801648e:	4293      	cmp	r3, r2
 8016490:	d905      	bls.n	801649e <f_write+0x1c4>
					cc = fs->csize - csect;
 8016492:	693b      	ldr	r3, [r7, #16]
 8016494:	895b      	ldrh	r3, [r3, #10]
 8016496:	461a      	mov	r2, r3
 8016498:	69bb      	ldr	r3, [r7, #24]
 801649a:	1ad3      	subs	r3, r2, r3
 801649c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801649e:	693b      	ldr	r3, [r7, #16]
 80164a0:	7858      	ldrb	r0, [r3, #1]
 80164a2:	6a3b      	ldr	r3, [r7, #32]
 80164a4:	697a      	ldr	r2, [r7, #20]
 80164a6:	69f9      	ldr	r1, [r7, #28]
 80164a8:	f7fd fd2a 	bl	8013f00 <disk_write>
 80164ac:	4603      	mov	r3, r0
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d004      	beq.n	80164bc <f_write+0x1e2>
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	2201      	movs	r2, #1
 80164b6:	745a      	strb	r2, [r3, #17]
 80164b8:	2301      	movs	r3, #1
 80164ba:	e09e      	b.n	80165fa <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80164bc:	68fb      	ldr	r3, [r7, #12]
 80164be:	69da      	ldr	r2, [r3, #28]
 80164c0:	697b      	ldr	r3, [r7, #20]
 80164c2:	1ad3      	subs	r3, r2, r3
 80164c4:	6a3a      	ldr	r2, [r7, #32]
 80164c6:	429a      	cmp	r2, r3
 80164c8:	d918      	bls.n	80164fc <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80164d0:	68fb      	ldr	r3, [r7, #12]
 80164d2:	69da      	ldr	r2, [r3, #28]
 80164d4:	697b      	ldr	r3, [r7, #20]
 80164d6:	1ad3      	subs	r3, r2, r3
 80164d8:	693a      	ldr	r2, [r7, #16]
 80164da:	8992      	ldrh	r2, [r2, #12]
 80164dc:	fb02 f303 	mul.w	r3, r2, r3
 80164e0:	69fa      	ldr	r2, [r7, #28]
 80164e2:	18d1      	adds	r1, r2, r3
 80164e4:	693b      	ldr	r3, [r7, #16]
 80164e6:	899b      	ldrh	r3, [r3, #12]
 80164e8:	461a      	mov	r2, r3
 80164ea:	f7fd fdc9 	bl	8014080 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80164ee:	68fb      	ldr	r3, [r7, #12]
 80164f0:	7c1b      	ldrb	r3, [r3, #16]
 80164f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80164f6:	b2da      	uxtb	r2, r3
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80164fc:	693b      	ldr	r3, [r7, #16]
 80164fe:	899b      	ldrh	r3, [r3, #12]
 8016500:	461a      	mov	r2, r3
 8016502:	6a3b      	ldr	r3, [r7, #32]
 8016504:	fb02 f303 	mul.w	r3, r2, r3
 8016508:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801650a:	e04b      	b.n	80165a4 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	69db      	ldr	r3, [r3, #28]
 8016510:	697a      	ldr	r2, [r7, #20]
 8016512:	429a      	cmp	r2, r3
 8016514:	d016      	beq.n	8016544 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8016516:	68fb      	ldr	r3, [r7, #12]
 8016518:	695a      	ldr	r2, [r3, #20]
 801651a:	68fb      	ldr	r3, [r7, #12]
 801651c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801651e:	429a      	cmp	r2, r3
 8016520:	d210      	bcs.n	8016544 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8016522:	693b      	ldr	r3, [r7, #16]
 8016524:	7858      	ldrb	r0, [r3, #1]
 8016526:	68fb      	ldr	r3, [r7, #12]
 8016528:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 801652c:	2301      	movs	r3, #1
 801652e:	697a      	ldr	r2, [r7, #20]
 8016530:	f7fd fcc6 	bl	8013ec0 <disk_read>
 8016534:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8016536:	2b00      	cmp	r3, #0
 8016538:	d004      	beq.n	8016544 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801653a:	68fb      	ldr	r3, [r7, #12]
 801653c:	2201      	movs	r2, #1
 801653e:	745a      	strb	r2, [r3, #17]
 8016540:	2301      	movs	r3, #1
 8016542:	e05a      	b.n	80165fa <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8016544:	68fb      	ldr	r3, [r7, #12]
 8016546:	697a      	ldr	r2, [r7, #20]
 8016548:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801654a:	693b      	ldr	r3, [r7, #16]
 801654c:	899b      	ldrh	r3, [r3, #12]
 801654e:	4618      	mov	r0, r3
 8016550:	68fb      	ldr	r3, [r7, #12]
 8016552:	695b      	ldr	r3, [r3, #20]
 8016554:	693a      	ldr	r2, [r7, #16]
 8016556:	8992      	ldrh	r2, [r2, #12]
 8016558:	fbb3 f1f2 	udiv	r1, r3, r2
 801655c:	fb02 f201 	mul.w	r2, r2, r1
 8016560:	1a9b      	subs	r3, r3, r2
 8016562:	1ac3      	subs	r3, r0, r3
 8016564:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8016566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	429a      	cmp	r2, r3
 801656c:	d901      	bls.n	8016572 <f_write+0x298>
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8016572:	68fb      	ldr	r3, [r7, #12]
 8016574:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8016578:	68fb      	ldr	r3, [r7, #12]
 801657a:	695b      	ldr	r3, [r3, #20]
 801657c:	693a      	ldr	r2, [r7, #16]
 801657e:	8992      	ldrh	r2, [r2, #12]
 8016580:	fbb3 f0f2 	udiv	r0, r3, r2
 8016584:	fb02 f200 	mul.w	r2, r2, r0
 8016588:	1a9b      	subs	r3, r3, r2
 801658a:	440b      	add	r3, r1
 801658c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801658e:	69f9      	ldr	r1, [r7, #28]
 8016590:	4618      	mov	r0, r3
 8016592:	f7fd fd75 	bl	8014080 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8016596:	68fb      	ldr	r3, [r7, #12]
 8016598:	7c1b      	ldrb	r3, [r3, #16]
 801659a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801659e:	b2da      	uxtb	r2, r3
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	741a      	strb	r2, [r3, #16]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80165a4:	69fa      	ldr	r2, [r7, #28]
 80165a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165a8:	4413      	add	r3, r2
 80165aa:	61fb      	str	r3, [r7, #28]
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	695a      	ldr	r2, [r3, #20]
 80165b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165b2:	441a      	add	r2, r3
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	615a      	str	r2, [r3, #20]
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	68da      	ldr	r2, [r3, #12]
 80165bc:	68fb      	ldr	r3, [r7, #12]
 80165be:	695b      	ldr	r3, [r3, #20]
 80165c0:	429a      	cmp	r2, r3
 80165c2:	bf38      	it	cc
 80165c4:	461a      	movcc	r2, r3
 80165c6:	68fb      	ldr	r3, [r7, #12]
 80165c8:	60da      	str	r2, [r3, #12]
 80165ca:	683b      	ldr	r3, [r7, #0]
 80165cc:	681a      	ldr	r2, [r3, #0]
 80165ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165d0:	441a      	add	r2, r3
 80165d2:	683b      	ldr	r3, [r7, #0]
 80165d4:	601a      	str	r2, [r3, #0]
 80165d6:	687a      	ldr	r2, [r7, #4]
 80165d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165da:	1ad3      	subs	r3, r2, r3
 80165dc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	f47f aeb5 	bne.w	8016350 <f_write+0x76>
 80165e6:	e000      	b.n	80165ea <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80165e8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	7c1b      	ldrb	r3, [r3, #16]
 80165ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80165f2:	b2da      	uxtb	r2, r3
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 80165f8:	2300      	movs	r3, #0
}
 80165fa:	4618      	mov	r0, r3
 80165fc:	3730      	adds	r7, #48	; 0x30
 80165fe:	46bd      	mov	sp, r7
 8016600:	bd80      	pop	{r7, pc}

08016602 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8016602:	b580      	push	{r7, lr}
 8016604:	b086      	sub	sp, #24
 8016606:	af00      	add	r7, sp, #0
 8016608:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	f107 0208 	add.w	r2, r7, #8
 8016610:	4611      	mov	r1, r2
 8016612:	4618      	mov	r0, r3
 8016614:	f7ff fc4e 	bl	8015eb4 <validate>
 8016618:	4603      	mov	r3, r0
 801661a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801661c:	7dfb      	ldrb	r3, [r7, #23]
 801661e:	2b00      	cmp	r3, #0
 8016620:	d168      	bne.n	80166f4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	7c1b      	ldrb	r3, [r3, #16]
 8016626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801662a:	2b00      	cmp	r3, #0
 801662c:	d062      	beq.n	80166f4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	7c1b      	ldrb	r3, [r3, #16]
 8016632:	b25b      	sxtb	r3, r3
 8016634:	2b00      	cmp	r3, #0
 8016636:	da15      	bge.n	8016664 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8016638:	68bb      	ldr	r3, [r7, #8]
 801663a:	7858      	ldrb	r0, [r3, #1]
 801663c:	687b      	ldr	r3, [r7, #4]
 801663e:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	69da      	ldr	r2, [r3, #28]
 8016646:	2301      	movs	r3, #1
 8016648:	f7fd fc5a 	bl	8013f00 <disk_write>
 801664c:	4603      	mov	r3, r0
 801664e:	2b00      	cmp	r3, #0
 8016650:	d001      	beq.n	8016656 <f_sync+0x54>
 8016652:	2301      	movs	r3, #1
 8016654:	e04f      	b.n	80166f6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8016656:	687b      	ldr	r3, [r7, #4]
 8016658:	7c1b      	ldrb	r3, [r3, #16]
 801665a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801665e:	b2da      	uxtb	r2, r3
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8016664:	f7fa fa44 	bl	8010af0 <get_fattime>
 8016668:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801666a:	68ba      	ldr	r2, [r7, #8]
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	6a1b      	ldr	r3, [r3, #32]
 8016670:	4619      	mov	r1, r3
 8016672:	4610      	mov	r0, r2
 8016674:	f7fd fdc6 	bl	8014204 <move_window>
 8016678:	4603      	mov	r3, r0
 801667a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801667c:	7dfb      	ldrb	r3, [r7, #23]
 801667e:	2b00      	cmp	r3, #0
 8016680:	d138      	bne.n	80166f4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016686:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	330b      	adds	r3, #11
 801668c:	781a      	ldrb	r2, [r3, #0]
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	330b      	adds	r3, #11
 8016692:	f042 0220 	orr.w	r2, r2, #32
 8016696:	b2d2      	uxtb	r2, r2
 8016698:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	6818      	ldr	r0, [r3, #0]
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	689b      	ldr	r3, [r3, #8]
 80166a2:	461a      	mov	r2, r3
 80166a4:	68f9      	ldr	r1, [r7, #12]
 80166a6:	f7fe fb54 	bl	8014d52 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80166aa:	68fb      	ldr	r3, [r7, #12]
 80166ac:	f103 021c 	add.w	r2, r3, #28
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	68db      	ldr	r3, [r3, #12]
 80166b4:	4619      	mov	r1, r3
 80166b6:	4610      	mov	r0, r2
 80166b8:	f7fd fcb6 	bl	8014028 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80166bc:	68fb      	ldr	r3, [r7, #12]
 80166be:	3316      	adds	r3, #22
 80166c0:	6939      	ldr	r1, [r7, #16]
 80166c2:	4618      	mov	r0, r3
 80166c4:	f7fd fcb0 	bl	8014028 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80166c8:	68fb      	ldr	r3, [r7, #12]
 80166ca:	3312      	adds	r3, #18
 80166cc:	2100      	movs	r1, #0
 80166ce:	4618      	mov	r0, r3
 80166d0:	f7fd fc8f 	bl	8013ff2 <st_word>
					fs->wflag = 1;
 80166d4:	68bb      	ldr	r3, [r7, #8]
 80166d6:	2201      	movs	r2, #1
 80166d8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80166da:	68bb      	ldr	r3, [r7, #8]
 80166dc:	4618      	mov	r0, r3
 80166de:	f7fd fdbf 	bl	8014260 <sync_fs>
 80166e2:	4603      	mov	r3, r0
 80166e4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	7c1b      	ldrb	r3, [r3, #16]
 80166ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80166ee:	b2da      	uxtb	r2, r3
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80166f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80166f6:	4618      	mov	r0, r3
 80166f8:	3718      	adds	r7, #24
 80166fa:	46bd      	mov	sp, r7
 80166fc:	bd80      	pop	{r7, pc}

080166fe <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80166fe:	b580      	push	{r7, lr}
 8016700:	b084      	sub	sp, #16
 8016702:	af00      	add	r7, sp, #0
 8016704:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8016706:	6878      	ldr	r0, [r7, #4]
 8016708:	f7ff ff7b 	bl	8016602 <f_sync>
 801670c:	4603      	mov	r3, r0
 801670e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8016710:	7bfb      	ldrb	r3, [r7, #15]
 8016712:	2b00      	cmp	r3, #0
 8016714:	d10e      	bne.n	8016734 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	f107 0208 	add.w	r2, r7, #8
 801671c:	4611      	mov	r1, r2
 801671e:	4618      	mov	r0, r3
 8016720:	f7ff fbc8 	bl	8015eb4 <validate>
 8016724:	4603      	mov	r3, r0
 8016726:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8016728:	7bfb      	ldrb	r3, [r7, #15]
 801672a:	2b00      	cmp	r3, #0
 801672c:	d102      	bne.n	8016734 <f_close+0x36>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	2200      	movs	r2, #0
 8016732:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8016734:	7bfb      	ldrb	r3, [r7, #15]
}
 8016736:	4618      	mov	r0, r3
 8016738:	3710      	adds	r7, #16
 801673a:	46bd      	mov	sp, r7
 801673c:	bd80      	pop	{r7, pc}

0801673e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801673e:	b580      	push	{r7, lr}
 8016740:	b086      	sub	sp, #24
 8016742:	af00      	add	r7, sp, #0
 8016744:	6078      	str	r0, [r7, #4]
 8016746:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	2b00      	cmp	r3, #0
 801674c:	d101      	bne.n	8016752 <f_opendir+0x14>
 801674e:	2309      	movs	r3, #9
 8016750:	e04c      	b.n	80167ec <f_opendir+0xae>

	/* Get logical drive */
	obj = &dp->obj;
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8016756:	f107 010c 	add.w	r1, r7, #12
 801675a:	463b      	mov	r3, r7
 801675c:	2200      	movs	r2, #0
 801675e:	4618      	mov	r0, r3
 8016760:	f7ff f922 	bl	80159a8 <find_volume>
 8016764:	4603      	mov	r3, r0
 8016766:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016768:	7dfb      	ldrb	r3, [r7, #23]
 801676a:	2b00      	cmp	r3, #0
 801676c:	d137      	bne.n	80167de <f_opendir+0xa0>
		obj->fs = fs;
 801676e:	68fa      	ldr	r2, [r7, #12]
 8016770:	693b      	ldr	r3, [r7, #16]
 8016772:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8016774:	683b      	ldr	r3, [r7, #0]
 8016776:	4619      	mov	r1, r3
 8016778:	6878      	ldr	r0, [r7, #4]
 801677a:	f7ff f805 	bl	8015788 <follow_path>
 801677e:	4603      	mov	r3, r0
 8016780:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8016782:	7dfb      	ldrb	r3, [r7, #23]
 8016784:	2b00      	cmp	r3, #0
 8016786:	d125      	bne.n	80167d4 <f_opendir+0x96>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801678e:	b25b      	sxtb	r3, r3
 8016790:	2b00      	cmp	r3, #0
 8016792:	db12      	blt.n	80167ba <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8016794:	693b      	ldr	r3, [r7, #16]
 8016796:	799b      	ldrb	r3, [r3, #6]
 8016798:	f003 0310 	and.w	r3, r3, #16
 801679c:	2b00      	cmp	r3, #0
 801679e:	d00a      	beq.n	80167b6 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80167a0:	68fa      	ldr	r2, [r7, #12]
 80167a2:	687b      	ldr	r3, [r7, #4]
 80167a4:	69db      	ldr	r3, [r3, #28]
 80167a6:	4619      	mov	r1, r3
 80167a8:	4610      	mov	r0, r2
 80167aa:	f7fe fab3 	bl	8014d14 <ld_clust>
 80167ae:	4602      	mov	r2, r0
 80167b0:	693b      	ldr	r3, [r7, #16]
 80167b2:	609a      	str	r2, [r3, #8]
 80167b4:	e001      	b.n	80167ba <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80167b6:	2305      	movs	r3, #5
 80167b8:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80167ba:	7dfb      	ldrb	r3, [r7, #23]
 80167bc:	2b00      	cmp	r3, #0
 80167be:	d109      	bne.n	80167d4 <f_opendir+0x96>
				obj->id = fs->id;
 80167c0:	68fb      	ldr	r3, [r7, #12]
 80167c2:	88da      	ldrh	r2, [r3, #6]
 80167c4:	693b      	ldr	r3, [r7, #16]
 80167c6:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80167c8:	2100      	movs	r1, #0
 80167ca:	6878      	ldr	r0, [r7, #4]
 80167cc:	f7fe f8fc 	bl	80149c8 <dir_sdi>
 80167d0:	4603      	mov	r3, r0
 80167d2:	75fb      	strb	r3, [r7, #23]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80167d4:	7dfb      	ldrb	r3, [r7, #23]
 80167d6:	2b04      	cmp	r3, #4
 80167d8:	d101      	bne.n	80167de <f_opendir+0xa0>
 80167da:	2305      	movs	r3, #5
 80167dc:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80167de:	7dfb      	ldrb	r3, [r7, #23]
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	d002      	beq.n	80167ea <f_opendir+0xac>
 80167e4:	693b      	ldr	r3, [r7, #16]
 80167e6:	2200      	movs	r2, #0
 80167e8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80167ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80167ec:	4618      	mov	r0, r3
 80167ee:	3718      	adds	r7, #24
 80167f0:	46bd      	mov	sp, r7
 80167f2:	bd80      	pop	{r7, pc}

080167f4 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80167f4:	b580      	push	{r7, lr}
 80167f6:	b084      	sub	sp, #16
 80167f8:	af00      	add	r7, sp, #0
 80167fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	f107 0208 	add.w	r2, r7, #8
 8016802:	4611      	mov	r1, r2
 8016804:	4618      	mov	r0, r3
 8016806:	f7ff fb55 	bl	8015eb4 <validate>
 801680a:	4603      	mov	r3, r0
 801680c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801680e:	7bfb      	ldrb	r3, [r7, #15]
 8016810:	2b00      	cmp	r3, #0
 8016812:	d102      	bne.n	801681a <f_closedir+0x26>
			res = dec_lock(dp->obj.lockid);
		}
		if (res == FR_OK)
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	2200      	movs	r2, #0
 8016818:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 801681a:	7bfb      	ldrb	r3, [r7, #15]
}
 801681c:	4618      	mov	r0, r3
 801681e:	3710      	adds	r7, #16
 8016820:	46bd      	mov	sp, r7
 8016822:	bd80      	pop	{r7, pc}

08016824 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8016824:	b580      	push	{r7, lr}
 8016826:	b096      	sub	sp, #88	; 0x58
 8016828:	af00      	add	r7, sp, #0
 801682a:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801682c:	f107 0108 	add.w	r1, r7, #8
 8016830:	1d3b      	adds	r3, r7, #4
 8016832:	2202      	movs	r2, #2
 8016834:	4618      	mov	r0, r3
 8016836:	f7ff f8b7 	bl	80159a8 <find_volume>
 801683a:	4603      	mov	r3, r0
 801683c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8016840:	68bb      	ldr	r3, [r7, #8]
 8016842:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8016844:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016848:	2b00      	cmp	r3, #0
 801684a:	f040 80f2 	bne.w	8016a32 <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 801684e:	687a      	ldr	r2, [r7, #4]
 8016850:	f107 030c 	add.w	r3, r7, #12
 8016854:	4611      	mov	r1, r2
 8016856:	4618      	mov	r0, r3
 8016858:	f7fe ff96 	bl	8015788 <follow_path>
 801685c:	4603      	mov	r3, r0
 801685e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8016862:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016866:	2b00      	cmp	r3, #0
 8016868:	d102      	bne.n	8016870 <f_mkdir+0x4c>
 801686a:	2308      	movs	r3, #8
 801686c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8016870:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016874:	2b04      	cmp	r3, #4
 8016876:	f040 80dc 	bne.w	8016a32 <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 801687a:	f107 030c 	add.w	r3, r7, #12
 801687e:	2100      	movs	r1, #0
 8016880:	4618      	mov	r0, r3
 8016882:	f7fd ffd1 	bl	8014828 <create_chain>
 8016886:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8016888:	68bb      	ldr	r3, [r7, #8]
 801688a:	895b      	ldrh	r3, [r3, #10]
 801688c:	461a      	mov	r2, r3
 801688e:	68bb      	ldr	r3, [r7, #8]
 8016890:	899b      	ldrh	r3, [r3, #12]
 8016892:	fb03 f302 	mul.w	r3, r3, r2
 8016896:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8016898:	2300      	movs	r3, #0
 801689a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801689e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d102      	bne.n	80168aa <f_mkdir+0x86>
 80168a4:	2307      	movs	r3, #7
 80168a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80168aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80168ac:	2b01      	cmp	r3, #1
 80168ae:	d102      	bne.n	80168b6 <f_mkdir+0x92>
 80168b0:	2302      	movs	r3, #2
 80168b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80168b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80168b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168bc:	d102      	bne.n	80168c4 <f_mkdir+0xa0>
 80168be:	2301      	movs	r3, #1
 80168c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80168c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d106      	bne.n	80168da <f_mkdir+0xb6>
 80168cc:	68bb      	ldr	r3, [r7, #8]
 80168ce:	4618      	mov	r0, r3
 80168d0:	f7fd fc54 	bl	801417c <sync_window>
 80168d4:	4603      	mov	r3, r0
 80168d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 80168da:	f7fa f909 	bl	8010af0 <get_fattime>
 80168de:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80168e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	d16c      	bne.n	80169c2 <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 80168e8:	68bb      	ldr	r3, [r7, #8]
 80168ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80168ec:	4618      	mov	r0, r3
 80168ee:	f7fd fd27 	bl	8014340 <clust2sect>
 80168f2:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 80168f4:	68bb      	ldr	r3, [r7, #8]
 80168f6:	3338      	adds	r3, #56	; 0x38
 80168f8:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 80168fa:	68bb      	ldr	r3, [r7, #8]
 80168fc:	899b      	ldrh	r3, [r3, #12]
 80168fe:	461a      	mov	r2, r3
 8016900:	2100      	movs	r1, #0
 8016902:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8016904:	f7fd fbdd 	bl	80140c2 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8016908:	220b      	movs	r2, #11
 801690a:	2120      	movs	r1, #32
 801690c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801690e:	f7fd fbd8 	bl	80140c2 <mem_set>
					dir[DIR_Name] = '.';
 8016912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016914:	222e      	movs	r2, #46	; 0x2e
 8016916:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8016918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801691a:	330b      	adds	r3, #11
 801691c:	2210      	movs	r2, #16
 801691e:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8016920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016922:	3316      	adds	r3, #22
 8016924:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016926:	4618      	mov	r0, r3
 8016928:	f7fd fb7e 	bl	8014028 <st_dword>
					st_clust(fs, dir, dcl);
 801692c:	68bb      	ldr	r3, [r7, #8]
 801692e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016930:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016932:	4618      	mov	r0, r3
 8016934:	f7fe fa0d 	bl	8014d52 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8016938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801693a:	3320      	adds	r3, #32
 801693c:	2220      	movs	r2, #32
 801693e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016940:	4618      	mov	r0, r3
 8016942:	f7fd fb9d 	bl	8014080 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8016946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016948:	3321      	adds	r3, #33	; 0x21
 801694a:	222e      	movs	r2, #46	; 0x2e
 801694c:	701a      	strb	r2, [r3, #0]
 801694e:	697b      	ldr	r3, [r7, #20]
 8016950:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8016952:	68bb      	ldr	r3, [r7, #8]
 8016954:	781b      	ldrb	r3, [r3, #0]
 8016956:	2b03      	cmp	r3, #3
 8016958:	d106      	bne.n	8016968 <f_mkdir+0x144>
 801695a:	68bb      	ldr	r3, [r7, #8]
 801695c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801695e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016960:	429a      	cmp	r2, r3
 8016962:	d101      	bne.n	8016968 <f_mkdir+0x144>
 8016964:	2300      	movs	r3, #0
 8016966:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8016968:	68b8      	ldr	r0, [r7, #8]
 801696a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801696c:	3320      	adds	r3, #32
 801696e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016970:	4619      	mov	r1, r3
 8016972:	f7fe f9ee 	bl	8014d52 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8016976:	68bb      	ldr	r3, [r7, #8]
 8016978:	895b      	ldrh	r3, [r3, #10]
 801697a:	653b      	str	r3, [r7, #80]	; 0x50
 801697c:	e01c      	b.n	80169b8 <f_mkdir+0x194>
					fs->winsect = dsc++;
 801697e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016980:	1c5a      	adds	r2, r3, #1
 8016982:	64fa      	str	r2, [r7, #76]	; 0x4c
 8016984:	68ba      	ldr	r2, [r7, #8]
 8016986:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8016988:	68bb      	ldr	r3, [r7, #8]
 801698a:	2201      	movs	r2, #1
 801698c:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 801698e:	68bb      	ldr	r3, [r7, #8]
 8016990:	4618      	mov	r0, r3
 8016992:	f7fd fbf3 	bl	801417c <sync_window>
 8016996:	4603      	mov	r3, r0
 8016998:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 801699c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d10d      	bne.n	80169c0 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 80169a4:	68bb      	ldr	r3, [r7, #8]
 80169a6:	899b      	ldrh	r3, [r3, #12]
 80169a8:	461a      	mov	r2, r3
 80169aa:	2100      	movs	r1, #0
 80169ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80169ae:	f7fd fb88 	bl	80140c2 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80169b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80169b4:	3b01      	subs	r3, #1
 80169b6:	653b      	str	r3, [r7, #80]	; 0x50
 80169b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d1df      	bne.n	801697e <f_mkdir+0x15a>
 80169be:	e000      	b.n	80169c2 <f_mkdir+0x19e>
					if (res != FR_OK) break;
 80169c0:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80169c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d107      	bne.n	80169da <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80169ca:	f107 030c 	add.w	r3, r7, #12
 80169ce:	4618      	mov	r0, r3
 80169d0:	f7fe fc2a 	bl	8015228 <dir_register>
 80169d4:	4603      	mov	r3, r0
 80169d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 80169da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80169de:	2b00      	cmp	r3, #0
 80169e0:	d120      	bne.n	8016a24 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80169e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169e4:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80169e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80169e8:	3316      	adds	r3, #22
 80169ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80169ec:	4618      	mov	r0, r3
 80169ee:	f7fd fb1b 	bl	8014028 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80169f2:	68bb      	ldr	r3, [r7, #8]
 80169f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80169f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80169f8:	4618      	mov	r0, r3
 80169fa:	f7fe f9aa 	bl	8014d52 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80169fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a00:	330b      	adds	r3, #11
 8016a02:	2210      	movs	r2, #16
 8016a04:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8016a06:	68bb      	ldr	r3, [r7, #8]
 8016a08:	2201      	movs	r2, #1
 8016a0a:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8016a0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016a10:	2b00      	cmp	r3, #0
 8016a12:	d10e      	bne.n	8016a32 <f_mkdir+0x20e>
					res = sync_fs(fs);
 8016a14:	68bb      	ldr	r3, [r7, #8]
 8016a16:	4618      	mov	r0, r3
 8016a18:	f7fd fc22 	bl	8014260 <sync_fs>
 8016a1c:	4603      	mov	r3, r0
 8016a1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8016a22:	e006      	b.n	8016a32 <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8016a24:	f107 030c 	add.w	r3, r7, #12
 8016a28:	2200      	movs	r2, #0
 8016a2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016a2c:	4618      	mov	r0, r3
 8016a2e:	f7fd fe96 	bl	801475e <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8016a32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8016a36:	4618      	mov	r0, r3
 8016a38:	3758      	adds	r7, #88	; 0x58
 8016a3a:	46bd      	mov	sp, r7
 8016a3c:	bd80      	pop	{r7, pc}
	...

08016a40 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016a40:	b480      	push	{r7}
 8016a42:	b087      	sub	sp, #28
 8016a44:	af00      	add	r7, sp, #0
 8016a46:	60f8      	str	r0, [r7, #12]
 8016a48:	60b9      	str	r1, [r7, #8]
 8016a4a:	4613      	mov	r3, r2
 8016a4c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8016a4e:	2301      	movs	r3, #1
 8016a50:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8016a52:	2300      	movs	r3, #0
 8016a54:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8016a56:	4b1f      	ldr	r3, [pc, #124]	; (8016ad4 <FATFS_LinkDriverEx+0x94>)
 8016a58:	7a5b      	ldrb	r3, [r3, #9]
 8016a5a:	b2db      	uxtb	r3, r3
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d131      	bne.n	8016ac4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8016a60:	4b1c      	ldr	r3, [pc, #112]	; (8016ad4 <FATFS_LinkDriverEx+0x94>)
 8016a62:	7a5b      	ldrb	r3, [r3, #9]
 8016a64:	b2db      	uxtb	r3, r3
 8016a66:	461a      	mov	r2, r3
 8016a68:	4b1a      	ldr	r3, [pc, #104]	; (8016ad4 <FATFS_LinkDriverEx+0x94>)
 8016a6a:	2100      	movs	r1, #0
 8016a6c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8016a6e:	4b19      	ldr	r3, [pc, #100]	; (8016ad4 <FATFS_LinkDriverEx+0x94>)
 8016a70:	7a5b      	ldrb	r3, [r3, #9]
 8016a72:	b2db      	uxtb	r3, r3
 8016a74:	4a17      	ldr	r2, [pc, #92]	; (8016ad4 <FATFS_LinkDriverEx+0x94>)
 8016a76:	009b      	lsls	r3, r3, #2
 8016a78:	4413      	add	r3, r2
 8016a7a:	68fa      	ldr	r2, [r7, #12]
 8016a7c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8016a7e:	4b15      	ldr	r3, [pc, #84]	; (8016ad4 <FATFS_LinkDriverEx+0x94>)
 8016a80:	7a5b      	ldrb	r3, [r3, #9]
 8016a82:	b2db      	uxtb	r3, r3
 8016a84:	461a      	mov	r2, r3
 8016a86:	4b13      	ldr	r3, [pc, #76]	; (8016ad4 <FATFS_LinkDriverEx+0x94>)
 8016a88:	4413      	add	r3, r2
 8016a8a:	79fa      	ldrb	r2, [r7, #7]
 8016a8c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8016a8e:	4b11      	ldr	r3, [pc, #68]	; (8016ad4 <FATFS_LinkDriverEx+0x94>)
 8016a90:	7a5b      	ldrb	r3, [r3, #9]
 8016a92:	b2db      	uxtb	r3, r3
 8016a94:	1c5a      	adds	r2, r3, #1
 8016a96:	b2d1      	uxtb	r1, r2
 8016a98:	4a0e      	ldr	r2, [pc, #56]	; (8016ad4 <FATFS_LinkDriverEx+0x94>)
 8016a9a:	7251      	strb	r1, [r2, #9]
 8016a9c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8016a9e:	7dbb      	ldrb	r3, [r7, #22]
 8016aa0:	3330      	adds	r3, #48	; 0x30
 8016aa2:	b2da      	uxtb	r2, r3
 8016aa4:	68bb      	ldr	r3, [r7, #8]
 8016aa6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016aa8:	68bb      	ldr	r3, [r7, #8]
 8016aaa:	3301      	adds	r3, #1
 8016aac:	223a      	movs	r2, #58	; 0x3a
 8016aae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016ab0:	68bb      	ldr	r3, [r7, #8]
 8016ab2:	3302      	adds	r3, #2
 8016ab4:	222f      	movs	r2, #47	; 0x2f
 8016ab6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016ab8:	68bb      	ldr	r3, [r7, #8]
 8016aba:	3303      	adds	r3, #3
 8016abc:	2200      	movs	r2, #0
 8016abe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016ac0:	2300      	movs	r3, #0
 8016ac2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8016ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8016ac6:	4618      	mov	r0, r3
 8016ac8:	371c      	adds	r7, #28
 8016aca:	46bd      	mov	sp, r7
 8016acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ad0:	4770      	bx	lr
 8016ad2:	bf00      	nop
 8016ad4:	2000040c 	.word	0x2000040c

08016ad8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016ad8:	b580      	push	{r7, lr}
 8016ada:	b082      	sub	sp, #8
 8016adc:	af00      	add	r7, sp, #0
 8016ade:	6078      	str	r0, [r7, #4]
 8016ae0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8016ae2:	2200      	movs	r2, #0
 8016ae4:	6839      	ldr	r1, [r7, #0]
 8016ae6:	6878      	ldr	r0, [r7, #4]
 8016ae8:	f7ff ffaa 	bl	8016a40 <FATFS_LinkDriverEx>
 8016aec:	4603      	mov	r3, r0
}
 8016aee:	4618      	mov	r0, r3
 8016af0:	3708      	adds	r7, #8
 8016af2:	46bd      	mov	sp, r7
 8016af4:	bd80      	pop	{r7, pc}
	...

08016af8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8016af8:	b480      	push	{r7}
 8016afa:	b085      	sub	sp, #20
 8016afc:	af00      	add	r7, sp, #0
 8016afe:	4603      	mov	r3, r0
 8016b00:	6039      	str	r1, [r7, #0]
 8016b02:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8016b04:	88fb      	ldrh	r3, [r7, #6]
 8016b06:	2b7f      	cmp	r3, #127	; 0x7f
 8016b08:	d802      	bhi.n	8016b10 <ff_convert+0x18>
		c = chr;
 8016b0a:	88fb      	ldrh	r3, [r7, #6]
 8016b0c:	81fb      	strh	r3, [r7, #14]
 8016b0e:	e025      	b.n	8016b5c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8016b10:	683b      	ldr	r3, [r7, #0]
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d00b      	beq.n	8016b2e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8016b16:	88fb      	ldrh	r3, [r7, #6]
 8016b18:	2bff      	cmp	r3, #255	; 0xff
 8016b1a:	d805      	bhi.n	8016b28 <ff_convert+0x30>
 8016b1c:	88fb      	ldrh	r3, [r7, #6]
 8016b1e:	3b80      	subs	r3, #128	; 0x80
 8016b20:	4a12      	ldr	r2, [pc, #72]	; (8016b6c <ff_convert+0x74>)
 8016b22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016b26:	e000      	b.n	8016b2a <ff_convert+0x32>
 8016b28:	2300      	movs	r3, #0
 8016b2a:	81fb      	strh	r3, [r7, #14]
 8016b2c:	e016      	b.n	8016b5c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8016b2e:	2300      	movs	r3, #0
 8016b30:	81fb      	strh	r3, [r7, #14]
 8016b32:	e009      	b.n	8016b48 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8016b34:	89fb      	ldrh	r3, [r7, #14]
 8016b36:	4a0d      	ldr	r2, [pc, #52]	; (8016b6c <ff_convert+0x74>)
 8016b38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016b3c:	88fa      	ldrh	r2, [r7, #6]
 8016b3e:	429a      	cmp	r2, r3
 8016b40:	d006      	beq.n	8016b50 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8016b42:	89fb      	ldrh	r3, [r7, #14]
 8016b44:	3301      	adds	r3, #1
 8016b46:	81fb      	strh	r3, [r7, #14]
 8016b48:	89fb      	ldrh	r3, [r7, #14]
 8016b4a:	2b7f      	cmp	r3, #127	; 0x7f
 8016b4c:	d9f2      	bls.n	8016b34 <ff_convert+0x3c>
 8016b4e:	e000      	b.n	8016b52 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8016b50:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8016b52:	89fb      	ldrh	r3, [r7, #14]
 8016b54:	3380      	adds	r3, #128	; 0x80
 8016b56:	b29b      	uxth	r3, r3
 8016b58:	b2db      	uxtb	r3, r3
 8016b5a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8016b5c:	89fb      	ldrh	r3, [r7, #14]
}
 8016b5e:	4618      	mov	r0, r3
 8016b60:	3714      	adds	r7, #20
 8016b62:	46bd      	mov	sp, r7
 8016b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b68:	4770      	bx	lr
 8016b6a:	bf00      	nop
 8016b6c:	080181bc 	.word	0x080181bc

08016b70 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8016b70:	b480      	push	{r7}
 8016b72:	b087      	sub	sp, #28
 8016b74:	af00      	add	r7, sp, #0
 8016b76:	4603      	mov	r3, r0
 8016b78:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8016b7a:	88fb      	ldrh	r3, [r7, #6]
 8016b7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016b80:	d201      	bcs.n	8016b86 <ff_wtoupper+0x16>
 8016b82:	4b3e      	ldr	r3, [pc, #248]	; (8016c7c <ff_wtoupper+0x10c>)
 8016b84:	e000      	b.n	8016b88 <ff_wtoupper+0x18>
 8016b86:	4b3e      	ldr	r3, [pc, #248]	; (8016c80 <ff_wtoupper+0x110>)
 8016b88:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8016b8a:	697b      	ldr	r3, [r7, #20]
 8016b8c:	1c9a      	adds	r2, r3, #2
 8016b8e:	617a      	str	r2, [r7, #20]
 8016b90:	881b      	ldrh	r3, [r3, #0]
 8016b92:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8016b94:	8a7b      	ldrh	r3, [r7, #18]
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d068      	beq.n	8016c6c <ff_wtoupper+0xfc>
 8016b9a:	88fa      	ldrh	r2, [r7, #6]
 8016b9c:	8a7b      	ldrh	r3, [r7, #18]
 8016b9e:	429a      	cmp	r2, r3
 8016ba0:	d364      	bcc.n	8016c6c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8016ba2:	697b      	ldr	r3, [r7, #20]
 8016ba4:	1c9a      	adds	r2, r3, #2
 8016ba6:	617a      	str	r2, [r7, #20]
 8016ba8:	881b      	ldrh	r3, [r3, #0]
 8016baa:	823b      	strh	r3, [r7, #16]
 8016bac:	8a3b      	ldrh	r3, [r7, #16]
 8016bae:	0a1b      	lsrs	r3, r3, #8
 8016bb0:	81fb      	strh	r3, [r7, #14]
 8016bb2:	8a3b      	ldrh	r3, [r7, #16]
 8016bb4:	b2db      	uxtb	r3, r3
 8016bb6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8016bb8:	88fa      	ldrh	r2, [r7, #6]
 8016bba:	8a79      	ldrh	r1, [r7, #18]
 8016bbc:	8a3b      	ldrh	r3, [r7, #16]
 8016bbe:	440b      	add	r3, r1
 8016bc0:	429a      	cmp	r2, r3
 8016bc2:	da49      	bge.n	8016c58 <ff_wtoupper+0xe8>
			switch (cmd) {
 8016bc4:	89fb      	ldrh	r3, [r7, #14]
 8016bc6:	2b08      	cmp	r3, #8
 8016bc8:	d84f      	bhi.n	8016c6a <ff_wtoupper+0xfa>
 8016bca:	a201      	add	r2, pc, #4	; (adr r2, 8016bd0 <ff_wtoupper+0x60>)
 8016bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016bd0:	08016bf5 	.word	0x08016bf5
 8016bd4:	08016c07 	.word	0x08016c07
 8016bd8:	08016c1d 	.word	0x08016c1d
 8016bdc:	08016c25 	.word	0x08016c25
 8016be0:	08016c2d 	.word	0x08016c2d
 8016be4:	08016c35 	.word	0x08016c35
 8016be8:	08016c3d 	.word	0x08016c3d
 8016bec:	08016c45 	.word	0x08016c45
 8016bf0:	08016c4d 	.word	0x08016c4d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8016bf4:	88fa      	ldrh	r2, [r7, #6]
 8016bf6:	8a7b      	ldrh	r3, [r7, #18]
 8016bf8:	1ad3      	subs	r3, r2, r3
 8016bfa:	005b      	lsls	r3, r3, #1
 8016bfc:	697a      	ldr	r2, [r7, #20]
 8016bfe:	4413      	add	r3, r2
 8016c00:	881b      	ldrh	r3, [r3, #0]
 8016c02:	80fb      	strh	r3, [r7, #6]
 8016c04:	e027      	b.n	8016c56 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8016c06:	88fa      	ldrh	r2, [r7, #6]
 8016c08:	8a7b      	ldrh	r3, [r7, #18]
 8016c0a:	1ad3      	subs	r3, r2, r3
 8016c0c:	b29b      	uxth	r3, r3
 8016c0e:	f003 0301 	and.w	r3, r3, #1
 8016c12:	b29b      	uxth	r3, r3
 8016c14:	88fa      	ldrh	r2, [r7, #6]
 8016c16:	1ad3      	subs	r3, r2, r3
 8016c18:	80fb      	strh	r3, [r7, #6]
 8016c1a:	e01c      	b.n	8016c56 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8016c1c:	88fb      	ldrh	r3, [r7, #6]
 8016c1e:	3b10      	subs	r3, #16
 8016c20:	80fb      	strh	r3, [r7, #6]
 8016c22:	e018      	b.n	8016c56 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8016c24:	88fb      	ldrh	r3, [r7, #6]
 8016c26:	3b20      	subs	r3, #32
 8016c28:	80fb      	strh	r3, [r7, #6]
 8016c2a:	e014      	b.n	8016c56 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8016c2c:	88fb      	ldrh	r3, [r7, #6]
 8016c2e:	3b30      	subs	r3, #48	; 0x30
 8016c30:	80fb      	strh	r3, [r7, #6]
 8016c32:	e010      	b.n	8016c56 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8016c34:	88fb      	ldrh	r3, [r7, #6]
 8016c36:	3b1a      	subs	r3, #26
 8016c38:	80fb      	strh	r3, [r7, #6]
 8016c3a:	e00c      	b.n	8016c56 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8016c3c:	88fb      	ldrh	r3, [r7, #6]
 8016c3e:	3308      	adds	r3, #8
 8016c40:	80fb      	strh	r3, [r7, #6]
 8016c42:	e008      	b.n	8016c56 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8016c44:	88fb      	ldrh	r3, [r7, #6]
 8016c46:	3b50      	subs	r3, #80	; 0x50
 8016c48:	80fb      	strh	r3, [r7, #6]
 8016c4a:	e004      	b.n	8016c56 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8016c4c:	88fb      	ldrh	r3, [r7, #6]
 8016c4e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8016c52:	80fb      	strh	r3, [r7, #6]
 8016c54:	bf00      	nop
			}
			break;
 8016c56:	e008      	b.n	8016c6a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8016c58:	89fb      	ldrh	r3, [r7, #14]
 8016c5a:	2b00      	cmp	r3, #0
 8016c5c:	d195      	bne.n	8016b8a <ff_wtoupper+0x1a>
 8016c5e:	8a3b      	ldrh	r3, [r7, #16]
 8016c60:	005b      	lsls	r3, r3, #1
 8016c62:	697a      	ldr	r2, [r7, #20]
 8016c64:	4413      	add	r3, r2
 8016c66:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8016c68:	e78f      	b.n	8016b8a <ff_wtoupper+0x1a>
			break;
 8016c6a:	bf00      	nop
	}

	return chr;
 8016c6c:	88fb      	ldrh	r3, [r7, #6]
}
 8016c6e:	4618      	mov	r0, r3
 8016c70:	371c      	adds	r7, #28
 8016c72:	46bd      	mov	sp, r7
 8016c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c78:	4770      	bx	lr
 8016c7a:	bf00      	nop
 8016c7c:	080182bc 	.word	0x080182bc
 8016c80:	080184b0 	.word	0x080184b0

08016c84 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016c84:	b580      	push	{r7, lr}
 8016c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016c88:	2200      	movs	r2, #0
 8016c8a:	4912      	ldr	r1, [pc, #72]	; (8016cd4 <MX_USB_DEVICE_Init+0x50>)
 8016c8c:	4812      	ldr	r0, [pc, #72]	; (8016cd8 <MX_USB_DEVICE_Init+0x54>)
 8016c8e:	f7fb ff62 	bl	8012b56 <USBD_Init>
 8016c92:	4603      	mov	r3, r0
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d001      	beq.n	8016c9c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016c98:	f7ea ffaa 	bl	8001bf0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8016c9c:	490f      	ldr	r1, [pc, #60]	; (8016cdc <MX_USB_DEVICE_Init+0x58>)
 8016c9e:	480e      	ldr	r0, [pc, #56]	; (8016cd8 <MX_USB_DEVICE_Init+0x54>)
 8016ca0:	f7fb ff89 	bl	8012bb6 <USBD_RegisterClass>
 8016ca4:	4603      	mov	r3, r0
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d001      	beq.n	8016cae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016caa:	f7ea ffa1 	bl	8001bf0 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8016cae:	490c      	ldr	r1, [pc, #48]	; (8016ce0 <MX_USB_DEVICE_Init+0x5c>)
 8016cb0:	4809      	ldr	r0, [pc, #36]	; (8016cd8 <MX_USB_DEVICE_Init+0x54>)
 8016cb2:	f7fa fb39 	bl	8011328 <USBD_MSC_RegisterStorage>
 8016cb6:	4603      	mov	r3, r0
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d001      	beq.n	8016cc0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016cbc:	f7ea ff98 	bl	8001bf0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016cc0:	4805      	ldr	r0, [pc, #20]	; (8016cd8 <MX_USB_DEVICE_Init+0x54>)
 8016cc2:	f7fb ff9f 	bl	8012c04 <USBD_Start>
 8016cc6:	4603      	mov	r3, r0
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d001      	beq.n	8016cd0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016ccc:	f7ea ff90 	bl	8001bf0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016cd0:	bf00      	nop
 8016cd2:	bd80      	pop	{r7, pc}
 8016cd4:	200000f4 	.word	0x200000f4
 8016cd8:	20004f04 	.word	0x20004f04
 8016cdc:	2000000c 	.word	0x2000000c
 8016ce0:	20000154 	.word	0x20000154

08016ce4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016ce4:	b480      	push	{r7}
 8016ce6:	b083      	sub	sp, #12
 8016ce8:	af00      	add	r7, sp, #0
 8016cea:	4603      	mov	r3, r0
 8016cec:	6039      	str	r1, [r7, #0]
 8016cee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016cf0:	683b      	ldr	r3, [r7, #0]
 8016cf2:	2212      	movs	r2, #18
 8016cf4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8016cf6:	4b03      	ldr	r3, [pc, #12]	; (8016d04 <USBD_FS_DeviceDescriptor+0x20>)
}
 8016cf8:	4618      	mov	r0, r3
 8016cfa:	370c      	adds	r7, #12
 8016cfc:	46bd      	mov	sp, r7
 8016cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d02:	4770      	bx	lr
 8016d04:	20000114 	.word	0x20000114

08016d08 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016d08:	b480      	push	{r7}
 8016d0a:	b083      	sub	sp, #12
 8016d0c:	af00      	add	r7, sp, #0
 8016d0e:	4603      	mov	r3, r0
 8016d10:	6039      	str	r1, [r7, #0]
 8016d12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016d14:	683b      	ldr	r3, [r7, #0]
 8016d16:	2204      	movs	r2, #4
 8016d18:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016d1a:	4b03      	ldr	r3, [pc, #12]	; (8016d28 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	370c      	adds	r7, #12
 8016d20:	46bd      	mov	sp, r7
 8016d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d26:	4770      	bx	lr
 8016d28:	20000134 	.word	0x20000134

08016d2c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016d2c:	b580      	push	{r7, lr}
 8016d2e:	b082      	sub	sp, #8
 8016d30:	af00      	add	r7, sp, #0
 8016d32:	4603      	mov	r3, r0
 8016d34:	6039      	str	r1, [r7, #0]
 8016d36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016d38:	79fb      	ldrb	r3, [r7, #7]
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d105      	bne.n	8016d4a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016d3e:	683a      	ldr	r2, [r7, #0]
 8016d40:	4907      	ldr	r1, [pc, #28]	; (8016d60 <USBD_FS_ProductStrDescriptor+0x34>)
 8016d42:	4808      	ldr	r0, [pc, #32]	; (8016d64 <USBD_FS_ProductStrDescriptor+0x38>)
 8016d44:	f7fc ffb9 	bl	8013cba <USBD_GetString>
 8016d48:	e004      	b.n	8016d54 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016d4a:	683a      	ldr	r2, [r7, #0]
 8016d4c:	4904      	ldr	r1, [pc, #16]	; (8016d60 <USBD_FS_ProductStrDescriptor+0x34>)
 8016d4e:	4805      	ldr	r0, [pc, #20]	; (8016d64 <USBD_FS_ProductStrDescriptor+0x38>)
 8016d50:	f7fc ffb3 	bl	8013cba <USBD_GetString>
  }
  return USBD_StrDesc;
 8016d54:	4b02      	ldr	r3, [pc, #8]	; (8016d60 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8016d56:	4618      	mov	r0, r3
 8016d58:	3708      	adds	r7, #8
 8016d5a:	46bd      	mov	sp, r7
 8016d5c:	bd80      	pop	{r7, pc}
 8016d5e:	bf00      	nop
 8016d60:	200051d4 	.word	0x200051d4
 8016d64:	080180b4 	.word	0x080180b4

08016d68 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016d68:	b580      	push	{r7, lr}
 8016d6a:	b082      	sub	sp, #8
 8016d6c:	af00      	add	r7, sp, #0
 8016d6e:	4603      	mov	r3, r0
 8016d70:	6039      	str	r1, [r7, #0]
 8016d72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016d74:	683a      	ldr	r2, [r7, #0]
 8016d76:	4904      	ldr	r1, [pc, #16]	; (8016d88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016d78:	4804      	ldr	r0, [pc, #16]	; (8016d8c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8016d7a:	f7fc ff9e 	bl	8013cba <USBD_GetString>
  return USBD_StrDesc;
 8016d7e:	4b02      	ldr	r3, [pc, #8]	; (8016d88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016d80:	4618      	mov	r0, r3
 8016d82:	3708      	adds	r7, #8
 8016d84:	46bd      	mov	sp, r7
 8016d86:	bd80      	pop	{r7, pc}
 8016d88:	200051d4 	.word	0x200051d4
 8016d8c:	080180c8 	.word	0x080180c8

08016d90 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016d90:	b580      	push	{r7, lr}
 8016d92:	b082      	sub	sp, #8
 8016d94:	af00      	add	r7, sp, #0
 8016d96:	4603      	mov	r3, r0
 8016d98:	6039      	str	r1, [r7, #0]
 8016d9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016d9c:	683b      	ldr	r3, [r7, #0]
 8016d9e:	221a      	movs	r2, #26
 8016da0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016da2:	f000 f855 	bl	8016e50 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8016da6:	4b02      	ldr	r3, [pc, #8]	; (8016db0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8016da8:	4618      	mov	r0, r3
 8016daa:	3708      	adds	r7, #8
 8016dac:	46bd      	mov	sp, r7
 8016dae:	bd80      	pop	{r7, pc}
 8016db0:	20000138 	.word	0x20000138

08016db4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016db4:	b580      	push	{r7, lr}
 8016db6:	b082      	sub	sp, #8
 8016db8:	af00      	add	r7, sp, #0
 8016dba:	4603      	mov	r3, r0
 8016dbc:	6039      	str	r1, [r7, #0]
 8016dbe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016dc0:	79fb      	ldrb	r3, [r7, #7]
 8016dc2:	2b00      	cmp	r3, #0
 8016dc4:	d105      	bne.n	8016dd2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016dc6:	683a      	ldr	r2, [r7, #0]
 8016dc8:	4907      	ldr	r1, [pc, #28]	; (8016de8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016dca:	4808      	ldr	r0, [pc, #32]	; (8016dec <USBD_FS_ConfigStrDescriptor+0x38>)
 8016dcc:	f7fc ff75 	bl	8013cba <USBD_GetString>
 8016dd0:	e004      	b.n	8016ddc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016dd2:	683a      	ldr	r2, [r7, #0]
 8016dd4:	4904      	ldr	r1, [pc, #16]	; (8016de8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016dd6:	4805      	ldr	r0, [pc, #20]	; (8016dec <USBD_FS_ConfigStrDescriptor+0x38>)
 8016dd8:	f7fc ff6f 	bl	8013cba <USBD_GetString>
  }
  return USBD_StrDesc;
 8016ddc:	4b02      	ldr	r3, [pc, #8]	; (8016de8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8016dde:	4618      	mov	r0, r3
 8016de0:	3708      	adds	r7, #8
 8016de2:	46bd      	mov	sp, r7
 8016de4:	bd80      	pop	{r7, pc}
 8016de6:	bf00      	nop
 8016de8:	200051d4 	.word	0x200051d4
 8016dec:	080180dc 	.word	0x080180dc

08016df0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016df0:	b580      	push	{r7, lr}
 8016df2:	b082      	sub	sp, #8
 8016df4:	af00      	add	r7, sp, #0
 8016df6:	4603      	mov	r3, r0
 8016df8:	6039      	str	r1, [r7, #0]
 8016dfa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016dfc:	79fb      	ldrb	r3, [r7, #7]
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d105      	bne.n	8016e0e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016e02:	683a      	ldr	r2, [r7, #0]
 8016e04:	4907      	ldr	r1, [pc, #28]	; (8016e24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016e06:	4808      	ldr	r0, [pc, #32]	; (8016e28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016e08:	f7fc ff57 	bl	8013cba <USBD_GetString>
 8016e0c:	e004      	b.n	8016e18 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016e0e:	683a      	ldr	r2, [r7, #0]
 8016e10:	4904      	ldr	r1, [pc, #16]	; (8016e24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016e12:	4805      	ldr	r0, [pc, #20]	; (8016e28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016e14:	f7fc ff51 	bl	8013cba <USBD_GetString>
  }
  return USBD_StrDesc;
 8016e18:	4b02      	ldr	r3, [pc, #8]	; (8016e24 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8016e1a:	4618      	mov	r0, r3
 8016e1c:	3708      	adds	r7, #8
 8016e1e:	46bd      	mov	sp, r7
 8016e20:	bd80      	pop	{r7, pc}
 8016e22:	bf00      	nop
 8016e24:	200051d4 	.word	0x200051d4
 8016e28:	080180e8 	.word	0x080180e8

08016e2c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016e2c:	b480      	push	{r7}
 8016e2e:	b083      	sub	sp, #12
 8016e30:	af00      	add	r7, sp, #0
 8016e32:	4603      	mov	r3, r0
 8016e34:	6039      	str	r1, [r7, #0]
 8016e36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8016e38:	683b      	ldr	r3, [r7, #0]
 8016e3a:	220c      	movs	r2, #12
 8016e3c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8016e3e:	4b03      	ldr	r3, [pc, #12]	; (8016e4c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8016e40:	4618      	mov	r0, r3
 8016e42:	370c      	adds	r7, #12
 8016e44:	46bd      	mov	sp, r7
 8016e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e4a:	4770      	bx	lr
 8016e4c:	20000128 	.word	0x20000128

08016e50 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016e50:	b580      	push	{r7, lr}
 8016e52:	b084      	sub	sp, #16
 8016e54:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016e56:	4b0f      	ldr	r3, [pc, #60]	; (8016e94 <Get_SerialNum+0x44>)
 8016e58:	681b      	ldr	r3, [r3, #0]
 8016e5a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016e5c:	4b0e      	ldr	r3, [pc, #56]	; (8016e98 <Get_SerialNum+0x48>)
 8016e5e:	681b      	ldr	r3, [r3, #0]
 8016e60:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016e62:	4b0e      	ldr	r3, [pc, #56]	; (8016e9c <Get_SerialNum+0x4c>)
 8016e64:	681b      	ldr	r3, [r3, #0]
 8016e66:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016e68:	68fa      	ldr	r2, [r7, #12]
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	4413      	add	r3, r2
 8016e6e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016e70:	68fb      	ldr	r3, [r7, #12]
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d009      	beq.n	8016e8a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016e76:	2208      	movs	r2, #8
 8016e78:	4909      	ldr	r1, [pc, #36]	; (8016ea0 <Get_SerialNum+0x50>)
 8016e7a:	68f8      	ldr	r0, [r7, #12]
 8016e7c:	f000 f814 	bl	8016ea8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016e80:	2204      	movs	r2, #4
 8016e82:	4908      	ldr	r1, [pc, #32]	; (8016ea4 <Get_SerialNum+0x54>)
 8016e84:	68b8      	ldr	r0, [r7, #8]
 8016e86:	f000 f80f 	bl	8016ea8 <IntToUnicode>
  }
}
 8016e8a:	bf00      	nop
 8016e8c:	3710      	adds	r7, #16
 8016e8e:	46bd      	mov	sp, r7
 8016e90:	bd80      	pop	{r7, pc}
 8016e92:	bf00      	nop
 8016e94:	1fff7a10 	.word	0x1fff7a10
 8016e98:	1fff7a14 	.word	0x1fff7a14
 8016e9c:	1fff7a18 	.word	0x1fff7a18
 8016ea0:	2000013a 	.word	0x2000013a
 8016ea4:	2000014a 	.word	0x2000014a

08016ea8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016ea8:	b480      	push	{r7}
 8016eaa:	b087      	sub	sp, #28
 8016eac:	af00      	add	r7, sp, #0
 8016eae:	60f8      	str	r0, [r7, #12]
 8016eb0:	60b9      	str	r1, [r7, #8]
 8016eb2:	4613      	mov	r3, r2
 8016eb4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016eb6:	2300      	movs	r3, #0
 8016eb8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016eba:	2300      	movs	r3, #0
 8016ebc:	75fb      	strb	r3, [r7, #23]
 8016ebe:	e027      	b.n	8016f10 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016ec0:	68fb      	ldr	r3, [r7, #12]
 8016ec2:	0f1b      	lsrs	r3, r3, #28
 8016ec4:	2b09      	cmp	r3, #9
 8016ec6:	d80b      	bhi.n	8016ee0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016ec8:	68fb      	ldr	r3, [r7, #12]
 8016eca:	0f1b      	lsrs	r3, r3, #28
 8016ecc:	b2da      	uxtb	r2, r3
 8016ece:	7dfb      	ldrb	r3, [r7, #23]
 8016ed0:	005b      	lsls	r3, r3, #1
 8016ed2:	4619      	mov	r1, r3
 8016ed4:	68bb      	ldr	r3, [r7, #8]
 8016ed6:	440b      	add	r3, r1
 8016ed8:	3230      	adds	r2, #48	; 0x30
 8016eda:	b2d2      	uxtb	r2, r2
 8016edc:	701a      	strb	r2, [r3, #0]
 8016ede:	e00a      	b.n	8016ef6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	0f1b      	lsrs	r3, r3, #28
 8016ee4:	b2da      	uxtb	r2, r3
 8016ee6:	7dfb      	ldrb	r3, [r7, #23]
 8016ee8:	005b      	lsls	r3, r3, #1
 8016eea:	4619      	mov	r1, r3
 8016eec:	68bb      	ldr	r3, [r7, #8]
 8016eee:	440b      	add	r3, r1
 8016ef0:	3237      	adds	r2, #55	; 0x37
 8016ef2:	b2d2      	uxtb	r2, r2
 8016ef4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016ef6:	68fb      	ldr	r3, [r7, #12]
 8016ef8:	011b      	lsls	r3, r3, #4
 8016efa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016efc:	7dfb      	ldrb	r3, [r7, #23]
 8016efe:	005b      	lsls	r3, r3, #1
 8016f00:	3301      	adds	r3, #1
 8016f02:	68ba      	ldr	r2, [r7, #8]
 8016f04:	4413      	add	r3, r2
 8016f06:	2200      	movs	r2, #0
 8016f08:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016f0a:	7dfb      	ldrb	r3, [r7, #23]
 8016f0c:	3301      	adds	r3, #1
 8016f0e:	75fb      	strb	r3, [r7, #23]
 8016f10:	7dfa      	ldrb	r2, [r7, #23]
 8016f12:	79fb      	ldrb	r3, [r7, #7]
 8016f14:	429a      	cmp	r2, r3
 8016f16:	d3d3      	bcc.n	8016ec0 <IntToUnicode+0x18>
  }
}
 8016f18:	bf00      	nop
 8016f1a:	bf00      	nop
 8016f1c:	371c      	adds	r7, #28
 8016f1e:	46bd      	mov	sp, r7
 8016f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f24:	4770      	bx	lr

08016f26 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8016f26:	b480      	push	{r7}
 8016f28:	b083      	sub	sp, #12
 8016f2a:	af00      	add	r7, sp, #0
 8016f2c:	4603      	mov	r3, r0
 8016f2e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8016f30:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8016f32:	4618      	mov	r0, r3
 8016f34:	370c      	adds	r7, #12
 8016f36:	46bd      	mov	sp, r7
 8016f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f3c:	4770      	bx	lr
	...

08016f40 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8016f40:	b580      	push	{r7, lr}
 8016f42:	b08c      	sub	sp, #48	; 0x30
 8016f44:	af00      	add	r7, sp, #0
 8016f46:	4603      	mov	r3, r0
 8016f48:	60b9      	str	r1, [r7, #8]
 8016f4a:	607a      	str	r2, [r7, #4]
 8016f4c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  HAL_SD_CardInfoTypeDef info;

  HAL_SD_GetCardInfo(&hsd, &info);
 8016f4e:	f107 0310 	add.w	r3, r7, #16
 8016f52:	4619      	mov	r1, r3
 8016f54:	4807      	ldr	r0, [pc, #28]	; (8016f74 <STORAGE_GetCapacity_FS+0x34>)
 8016f56:	f7f6 fc2d 	bl	800d7b4 <HAL_SD_GetCardInfo>

  *block_num =  info.LogBlockNbr - 1;
 8016f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f5c:	1e5a      	subs	r2, r3, #1
 8016f5e:	68bb      	ldr	r3, [r7, #8]
 8016f60:	601a      	str	r2, [r3, #0]
  *block_size = info.LogBlockSize;
 8016f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f64:	b29a      	uxth	r2, r3
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	801a      	strh	r2, [r3, #0]

  return (USBD_OK);
 8016f6a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016f6c:	4618      	mov	r0, r3
 8016f6e:	3730      	adds	r7, #48	; 0x30
 8016f70:	46bd      	mov	sp, r7
 8016f72:	bd80      	pop	{r7, pc}
 8016f74:	20001bd4 	.word	0x20001bd4

08016f78 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8016f78:	b480      	push	{r7}
 8016f7a:	b083      	sub	sp, #12
 8016f7c:	af00      	add	r7, sp, #0
 8016f7e:	4603      	mov	r3, r0
 8016f80:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016f82:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8016f84:	4618      	mov	r0, r3
 8016f86:	370c      	adds	r7, #12
 8016f88:	46bd      	mov	sp, r7
 8016f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f8e:	4770      	bx	lr

08016f90 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8016f90:	b480      	push	{r7}
 8016f92:	b083      	sub	sp, #12
 8016f94:	af00      	add	r7, sp, #0
 8016f96:	4603      	mov	r3, r0
 8016f98:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8016f9a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016f9c:	4618      	mov	r0, r3
 8016f9e:	370c      	adds	r7, #12
 8016fa0:	46bd      	mov	sp, r7
 8016fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fa6:	4770      	bx	lr

08016fa8 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8016fa8:	b580      	push	{r7, lr}
 8016faa:	b086      	sub	sp, #24
 8016fac:	af02      	add	r7, sp, #8
 8016fae:	60b9      	str	r1, [r7, #8]
 8016fb0:	607a      	str	r2, [r7, #4]
 8016fb2:	461a      	mov	r2, r3
 8016fb4:	4603      	mov	r3, r0
 8016fb6:	73fb      	strb	r3, [r7, #15]
 8016fb8:	4613      	mov	r3, r2
 8016fba:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8016fbc:	89bb      	ldrh	r3, [r7, #12]
 8016fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8016fc2:	9200      	str	r2, [sp, #0]
 8016fc4:	687a      	ldr	r2, [r7, #4]
 8016fc6:	68b9      	ldr	r1, [r7, #8]
 8016fc8:	4807      	ldr	r0, [pc, #28]	; (8016fe8 <STORAGE_Read_FS+0x40>)
 8016fca:	f7f5 fba9 	bl	800c720 <HAL_SD_ReadBlocks>
//	HAL_SD_ReadBlocks_DMA(&hsd, buf, blk_addr, blk_len);

  /* Wait until SD card is ready to use for new operation */
  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER);
 8016fce:	bf00      	nop
 8016fd0:	4805      	ldr	r0, [pc, #20]	; (8016fe8 <STORAGE_Read_FS+0x40>)
 8016fd2:	f7f6 fcb5 	bl	800d940 <HAL_SD_GetCardState>
 8016fd6:	4603      	mov	r3, r0
 8016fd8:	2b04      	cmp	r3, #4
 8016fda:	d1f9      	bne.n	8016fd0 <STORAGE_Read_FS+0x28>

  return (USBD_OK);
 8016fdc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8016fde:	4618      	mov	r0, r3
 8016fe0:	3710      	adds	r7, #16
 8016fe2:	46bd      	mov	sp, r7
 8016fe4:	bd80      	pop	{r7, pc}
 8016fe6:	bf00      	nop
 8016fe8:	20001bd4 	.word	0x20001bd4

08016fec <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8016fec:	b580      	push	{r7, lr}
 8016fee:	b086      	sub	sp, #24
 8016ff0:	af02      	add	r7, sp, #8
 8016ff2:	60b9      	str	r1, [r7, #8]
 8016ff4:	607a      	str	r2, [r7, #4]
 8016ff6:	461a      	mov	r2, r3
 8016ff8:	4603      	mov	r3, r0
 8016ffa:	73fb      	strb	r3, [r7, #15]
 8016ffc:	4613      	mov	r3, r2
 8016ffe:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8017000:	89bb      	ldrh	r3, [r7, #12]
 8017002:	f04f 32ff 	mov.w	r2, #4294967295
 8017006:	9200      	str	r2, [sp, #0]
 8017008:	687a      	ldr	r2, [r7, #4]
 801700a:	68b9      	ldr	r1, [r7, #8]
 801700c:	4807      	ldr	r0, [pc, #28]	; (801702c <STORAGE_Write_FS+0x40>)
 801700e:	f7f5 fd65 	bl	800cadc <HAL_SD_WriteBlocks>
//	HAL_SD_WriteBlocks_DMA(&hsd, buf, blk_addr, blk_len);

  /* Wait until SD card is ready to use for new operation */
  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER);
 8017012:	bf00      	nop
 8017014:	4805      	ldr	r0, [pc, #20]	; (801702c <STORAGE_Write_FS+0x40>)
 8017016:	f7f6 fc93 	bl	800d940 <HAL_SD_GetCardState>
 801701a:	4603      	mov	r3, r0
 801701c:	2b04      	cmp	r3, #4
 801701e:	d1f9      	bne.n	8017014 <STORAGE_Write_FS+0x28>

  return (USBD_OK);
 8017020:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8017022:	4618      	mov	r0, r3
 8017024:	3710      	adds	r7, #16
 8017026:	46bd      	mov	sp, r7
 8017028:	bd80      	pop	{r7, pc}
 801702a:	bf00      	nop
 801702c:	20001bd4 	.word	0x20001bd4

08017030 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8017030:	b480      	push	{r7}
 8017032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8017034:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8017036:	4618      	mov	r0, r3
 8017038:	46bd      	mov	sp, r7
 801703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801703e:	4770      	bx	lr

08017040 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017040:	b580      	push	{r7, lr}
 8017042:	b08a      	sub	sp, #40	; 0x28
 8017044:	af00      	add	r7, sp, #0
 8017046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017048:	f107 0314 	add.w	r3, r7, #20
 801704c:	2200      	movs	r2, #0
 801704e:	601a      	str	r2, [r3, #0]
 8017050:	605a      	str	r2, [r3, #4]
 8017052:	609a      	str	r2, [r3, #8]
 8017054:	60da      	str	r2, [r3, #12]
 8017056:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	681b      	ldr	r3, [r3, #0]
 801705c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017060:	d147      	bne.n	80170f2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017062:	2300      	movs	r3, #0
 8017064:	613b      	str	r3, [r7, #16]
 8017066:	4b25      	ldr	r3, [pc, #148]	; (80170fc <HAL_PCD_MspInit+0xbc>)
 8017068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801706a:	4a24      	ldr	r2, [pc, #144]	; (80170fc <HAL_PCD_MspInit+0xbc>)
 801706c:	f043 0301 	orr.w	r3, r3, #1
 8017070:	6313      	str	r3, [r2, #48]	; 0x30
 8017072:	4b22      	ldr	r3, [pc, #136]	; (80170fc <HAL_PCD_MspInit+0xbc>)
 8017074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017076:	f003 0301 	and.w	r3, r3, #1
 801707a:	613b      	str	r3, [r7, #16]
 801707c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801707e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8017084:	2300      	movs	r3, #0
 8017086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017088:	2300      	movs	r3, #0
 801708a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801708c:	f107 0314 	add.w	r3, r7, #20
 8017090:	4619      	mov	r1, r3
 8017092:	481b      	ldr	r0, [pc, #108]	; (8017100 <HAL_PCD_MspInit+0xc0>)
 8017094:	f7f1 fa86 	bl	80085a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8017098:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801709c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801709e:	2302      	movs	r3, #2
 80170a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80170a2:	2300      	movs	r3, #0
 80170a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80170a6:	2303      	movs	r3, #3
 80170a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80170aa:	230a      	movs	r3, #10
 80170ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80170ae:	f107 0314 	add.w	r3, r7, #20
 80170b2:	4619      	mov	r1, r3
 80170b4:	4812      	ldr	r0, [pc, #72]	; (8017100 <HAL_PCD_MspInit+0xc0>)
 80170b6:	f7f1 fa75 	bl	80085a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80170ba:	4b10      	ldr	r3, [pc, #64]	; (80170fc <HAL_PCD_MspInit+0xbc>)
 80170bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80170be:	4a0f      	ldr	r2, [pc, #60]	; (80170fc <HAL_PCD_MspInit+0xbc>)
 80170c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80170c4:	6353      	str	r3, [r2, #52]	; 0x34
 80170c6:	2300      	movs	r3, #0
 80170c8:	60fb      	str	r3, [r7, #12]
 80170ca:	4b0c      	ldr	r3, [pc, #48]	; (80170fc <HAL_PCD_MspInit+0xbc>)
 80170cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80170ce:	4a0b      	ldr	r2, [pc, #44]	; (80170fc <HAL_PCD_MspInit+0xbc>)
 80170d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80170d4:	6453      	str	r3, [r2, #68]	; 0x44
 80170d6:	4b09      	ldr	r3, [pc, #36]	; (80170fc <HAL_PCD_MspInit+0xbc>)
 80170d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80170da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80170de:	60fb      	str	r3, [r7, #12]
 80170e0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80170e2:	2200      	movs	r2, #0
 80170e4:	2100      	movs	r1, #0
 80170e6:	2043      	movs	r0, #67	; 0x43
 80170e8:	f7f0 fe87 	bl	8007dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80170ec:	2043      	movs	r0, #67	; 0x43
 80170ee:	f7f0 fea0 	bl	8007e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80170f2:	bf00      	nop
 80170f4:	3728      	adds	r7, #40	; 0x28
 80170f6:	46bd      	mov	sp, r7
 80170f8:	bd80      	pop	{r7, pc}
 80170fa:	bf00      	nop
 80170fc:	40023800 	.word	0x40023800
 8017100:	40020000 	.word	0x40020000

08017104 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017104:	b580      	push	{r7, lr}
 8017106:	b082      	sub	sp, #8
 8017108:	af00      	add	r7, sp, #0
 801710a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8017118:	4619      	mov	r1, r3
 801711a:	4610      	mov	r0, r2
 801711c:	f7fb fdbd 	bl	8012c9a <USBD_LL_SetupStage>
}
 8017120:	bf00      	nop
 8017122:	3708      	adds	r7, #8
 8017124:	46bd      	mov	sp, r7
 8017126:	bd80      	pop	{r7, pc}

08017128 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017128:	b580      	push	{r7, lr}
 801712a:	b082      	sub	sp, #8
 801712c:	af00      	add	r7, sp, #0
 801712e:	6078      	str	r0, [r7, #4]
 8017130:	460b      	mov	r3, r1
 8017132:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801713a:	78fa      	ldrb	r2, [r7, #3]
 801713c:	6879      	ldr	r1, [r7, #4]
 801713e:	4613      	mov	r3, r2
 8017140:	00db      	lsls	r3, r3, #3
 8017142:	1a9b      	subs	r3, r3, r2
 8017144:	009b      	lsls	r3, r3, #2
 8017146:	440b      	add	r3, r1
 8017148:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801714c:	681a      	ldr	r2, [r3, #0]
 801714e:	78fb      	ldrb	r3, [r7, #3]
 8017150:	4619      	mov	r1, r3
 8017152:	f7fb fdf7 	bl	8012d44 <USBD_LL_DataOutStage>
}
 8017156:	bf00      	nop
 8017158:	3708      	adds	r7, #8
 801715a:	46bd      	mov	sp, r7
 801715c:	bd80      	pop	{r7, pc}

0801715e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801715e:	b580      	push	{r7, lr}
 8017160:	b082      	sub	sp, #8
 8017162:	af00      	add	r7, sp, #0
 8017164:	6078      	str	r0, [r7, #4]
 8017166:	460b      	mov	r3, r1
 8017168:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8017170:	78fa      	ldrb	r2, [r7, #3]
 8017172:	6879      	ldr	r1, [r7, #4]
 8017174:	4613      	mov	r3, r2
 8017176:	00db      	lsls	r3, r3, #3
 8017178:	1a9b      	subs	r3, r3, r2
 801717a:	009b      	lsls	r3, r3, #2
 801717c:	440b      	add	r3, r1
 801717e:	3348      	adds	r3, #72	; 0x48
 8017180:	681a      	ldr	r2, [r3, #0]
 8017182:	78fb      	ldrb	r3, [r7, #3]
 8017184:	4619      	mov	r1, r3
 8017186:	f7fb fe40 	bl	8012e0a <USBD_LL_DataInStage>
}
 801718a:	bf00      	nop
 801718c:	3708      	adds	r7, #8
 801718e:	46bd      	mov	sp, r7
 8017190:	bd80      	pop	{r7, pc}

08017192 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017192:	b580      	push	{r7, lr}
 8017194:	b082      	sub	sp, #8
 8017196:	af00      	add	r7, sp, #0
 8017198:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80171a0:	4618      	mov	r0, r3
 80171a2:	f7fb ff54 	bl	801304e <USBD_LL_SOF>
}
 80171a6:	bf00      	nop
 80171a8:	3708      	adds	r7, #8
 80171aa:	46bd      	mov	sp, r7
 80171ac:	bd80      	pop	{r7, pc}

080171ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80171ae:	b580      	push	{r7, lr}
 80171b0:	b084      	sub	sp, #16
 80171b2:	af00      	add	r7, sp, #0
 80171b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80171b6:	2301      	movs	r3, #1
 80171b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	68db      	ldr	r3, [r3, #12]
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d102      	bne.n	80171c8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80171c2:	2300      	movs	r3, #0
 80171c4:	73fb      	strb	r3, [r7, #15]
 80171c6:	e008      	b.n	80171da <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	68db      	ldr	r3, [r3, #12]
 80171cc:	2b02      	cmp	r3, #2
 80171ce:	d102      	bne.n	80171d6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80171d0:	2301      	movs	r3, #1
 80171d2:	73fb      	strb	r3, [r7, #15]
 80171d4:	e001      	b.n	80171da <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80171d6:	f7ea fd0b 	bl	8001bf0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80171e0:	7bfa      	ldrb	r2, [r7, #15]
 80171e2:	4611      	mov	r1, r2
 80171e4:	4618      	mov	r0, r3
 80171e6:	f7fb fef4 	bl	8012fd2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80171ea:	687b      	ldr	r3, [r7, #4]
 80171ec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80171f0:	4618      	mov	r0, r3
 80171f2:	f7fb fea0 	bl	8012f36 <USBD_LL_Reset>
}
 80171f6:	bf00      	nop
 80171f8:	3710      	adds	r7, #16
 80171fa:	46bd      	mov	sp, r7
 80171fc:	bd80      	pop	{r7, pc}
	...

08017200 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017200:	b580      	push	{r7, lr}
 8017202:	b082      	sub	sp, #8
 8017204:	af00      	add	r7, sp, #0
 8017206:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801720e:	4618      	mov	r0, r3
 8017210:	f7fb feef 	bl	8012ff2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	681b      	ldr	r3, [r3, #0]
 8017218:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801721c:	681b      	ldr	r3, [r3, #0]
 801721e:	687a      	ldr	r2, [r7, #4]
 8017220:	6812      	ldr	r2, [r2, #0]
 8017222:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017226:	f043 0301 	orr.w	r3, r3, #1
 801722a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	6a1b      	ldr	r3, [r3, #32]
 8017230:	2b00      	cmp	r3, #0
 8017232:	d005      	beq.n	8017240 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017234:	4b04      	ldr	r3, [pc, #16]	; (8017248 <HAL_PCD_SuspendCallback+0x48>)
 8017236:	691b      	ldr	r3, [r3, #16]
 8017238:	4a03      	ldr	r2, [pc, #12]	; (8017248 <HAL_PCD_SuspendCallback+0x48>)
 801723a:	f043 0306 	orr.w	r3, r3, #6
 801723e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017240:	bf00      	nop
 8017242:	3708      	adds	r7, #8
 8017244:	46bd      	mov	sp, r7
 8017246:	bd80      	pop	{r7, pc}
 8017248:	e000ed00 	.word	0xe000ed00

0801724c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801724c:	b580      	push	{r7, lr}
 801724e:	b082      	sub	sp, #8
 8017250:	af00      	add	r7, sp, #0
 8017252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801725a:	4618      	mov	r0, r3
 801725c:	f7fb fedf 	bl	801301e <USBD_LL_Resume>
}
 8017260:	bf00      	nop
 8017262:	3708      	adds	r7, #8
 8017264:	46bd      	mov	sp, r7
 8017266:	bd80      	pop	{r7, pc}

08017268 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017268:	b580      	push	{r7, lr}
 801726a:	b082      	sub	sp, #8
 801726c:	af00      	add	r7, sp, #0
 801726e:	6078      	str	r0, [r7, #4]
 8017270:	460b      	mov	r3, r1
 8017272:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801727a:	78fa      	ldrb	r2, [r7, #3]
 801727c:	4611      	mov	r1, r2
 801727e:	4618      	mov	r0, r3
 8017280:	f7fb ff2d 	bl	80130de <USBD_LL_IsoOUTIncomplete>
}
 8017284:	bf00      	nop
 8017286:	3708      	adds	r7, #8
 8017288:	46bd      	mov	sp, r7
 801728a:	bd80      	pop	{r7, pc}

0801728c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801728c:	b580      	push	{r7, lr}
 801728e:	b082      	sub	sp, #8
 8017290:	af00      	add	r7, sp, #0
 8017292:	6078      	str	r0, [r7, #4]
 8017294:	460b      	mov	r3, r1
 8017296:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801729e:	78fa      	ldrb	r2, [r7, #3]
 80172a0:	4611      	mov	r1, r2
 80172a2:	4618      	mov	r0, r3
 80172a4:	f7fb fef5 	bl	8013092 <USBD_LL_IsoINIncomplete>
}
 80172a8:	bf00      	nop
 80172aa:	3708      	adds	r7, #8
 80172ac:	46bd      	mov	sp, r7
 80172ae:	bd80      	pop	{r7, pc}

080172b0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80172b0:	b580      	push	{r7, lr}
 80172b2:	b082      	sub	sp, #8
 80172b4:	af00      	add	r7, sp, #0
 80172b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80172be:	4618      	mov	r0, r3
 80172c0:	f7fb ff33 	bl	801312a <USBD_LL_DevConnected>
}
 80172c4:	bf00      	nop
 80172c6:	3708      	adds	r7, #8
 80172c8:	46bd      	mov	sp, r7
 80172ca:	bd80      	pop	{r7, pc}

080172cc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80172cc:	b580      	push	{r7, lr}
 80172ce:	b082      	sub	sp, #8
 80172d0:	af00      	add	r7, sp, #0
 80172d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80172da:	4618      	mov	r0, r3
 80172dc:	f7fb ff30 	bl	8013140 <USBD_LL_DevDisconnected>
}
 80172e0:	bf00      	nop
 80172e2:	3708      	adds	r7, #8
 80172e4:	46bd      	mov	sp, r7
 80172e6:	bd80      	pop	{r7, pc}

080172e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80172e8:	b580      	push	{r7, lr}
 80172ea:	b082      	sub	sp, #8
 80172ec:	af00      	add	r7, sp, #0
 80172ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	781b      	ldrb	r3, [r3, #0]
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d13c      	bne.n	8017372 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80172f8:	4a20      	ldr	r2, [pc, #128]	; (801737c <USBD_LL_Init+0x94>)
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	4a1e      	ldr	r2, [pc, #120]	; (801737c <USBD_LL_Init+0x94>)
 8017304:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017308:	4b1c      	ldr	r3, [pc, #112]	; (801737c <USBD_LL_Init+0x94>)
 801730a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801730e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8017310:	4b1a      	ldr	r3, [pc, #104]	; (801737c <USBD_LL_Init+0x94>)
 8017312:	2206      	movs	r2, #6
 8017314:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8017316:	4b19      	ldr	r3, [pc, #100]	; (801737c <USBD_LL_Init+0x94>)
 8017318:	2202      	movs	r2, #2
 801731a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801731c:	4b17      	ldr	r3, [pc, #92]	; (801737c <USBD_LL_Init+0x94>)
 801731e:	2200      	movs	r2, #0
 8017320:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017322:	4b16      	ldr	r3, [pc, #88]	; (801737c <USBD_LL_Init+0x94>)
 8017324:	2202      	movs	r2, #2
 8017326:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017328:	4b14      	ldr	r3, [pc, #80]	; (801737c <USBD_LL_Init+0x94>)
 801732a:	2200      	movs	r2, #0
 801732c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801732e:	4b13      	ldr	r3, [pc, #76]	; (801737c <USBD_LL_Init+0x94>)
 8017330:	2200      	movs	r2, #0
 8017332:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8017334:	4b11      	ldr	r3, [pc, #68]	; (801737c <USBD_LL_Init+0x94>)
 8017336:	2200      	movs	r2, #0
 8017338:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 801733a:	4b10      	ldr	r3, [pc, #64]	; (801737c <USBD_LL_Init+0x94>)
 801733c:	2201      	movs	r2, #1
 801733e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8017340:	4b0e      	ldr	r3, [pc, #56]	; (801737c <USBD_LL_Init+0x94>)
 8017342:	2200      	movs	r2, #0
 8017344:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8017346:	480d      	ldr	r0, [pc, #52]	; (801737c <USBD_LL_Init+0x94>)
 8017348:	f7f2 fb0b 	bl	8009962 <HAL_PCD_Init>
 801734c:	4603      	mov	r3, r0
 801734e:	2b00      	cmp	r3, #0
 8017350:	d001      	beq.n	8017356 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8017352:	f7ea fc4d 	bl	8001bf0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8017356:	2180      	movs	r1, #128	; 0x80
 8017358:	4808      	ldr	r0, [pc, #32]	; (801737c <USBD_LL_Init+0x94>)
 801735a:	f7f3 fcca 	bl	800acf2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801735e:	2240      	movs	r2, #64	; 0x40
 8017360:	2100      	movs	r1, #0
 8017362:	4806      	ldr	r0, [pc, #24]	; (801737c <USBD_LL_Init+0x94>)
 8017364:	f7f3 fc7e 	bl	800ac64 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8017368:	2280      	movs	r2, #128	; 0x80
 801736a:	2101      	movs	r1, #1
 801736c:	4803      	ldr	r0, [pc, #12]	; (801737c <USBD_LL_Init+0x94>)
 801736e:	f7f3 fc79 	bl	800ac64 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8017372:	2300      	movs	r3, #0
}
 8017374:	4618      	mov	r0, r3
 8017376:	3708      	adds	r7, #8
 8017378:	46bd      	mov	sp, r7
 801737a:	bd80      	pop	{r7, pc}
 801737c:	200053d4 	.word	0x200053d4

08017380 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017380:	b580      	push	{r7, lr}
 8017382:	b084      	sub	sp, #16
 8017384:	af00      	add	r7, sp, #0
 8017386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017388:	2300      	movs	r3, #0
 801738a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801738c:	2300      	movs	r3, #0
 801738e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017396:	4618      	mov	r0, r3
 8017398:	f7f2 fc07 	bl	8009baa <HAL_PCD_Start>
 801739c:	4603      	mov	r3, r0
 801739e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80173a0:	7bfb      	ldrb	r3, [r7, #15]
 80173a2:	4618      	mov	r0, r3
 80173a4:	f000 f9b0 	bl	8017708 <USBD_Get_USB_Status>
 80173a8:	4603      	mov	r3, r0
 80173aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80173ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80173ae:	4618      	mov	r0, r3
 80173b0:	3710      	adds	r7, #16
 80173b2:	46bd      	mov	sp, r7
 80173b4:	bd80      	pop	{r7, pc}

080173b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80173b6:	b580      	push	{r7, lr}
 80173b8:	b084      	sub	sp, #16
 80173ba:	af00      	add	r7, sp, #0
 80173bc:	6078      	str	r0, [r7, #4]
 80173be:	4608      	mov	r0, r1
 80173c0:	4611      	mov	r1, r2
 80173c2:	461a      	mov	r2, r3
 80173c4:	4603      	mov	r3, r0
 80173c6:	70fb      	strb	r3, [r7, #3]
 80173c8:	460b      	mov	r3, r1
 80173ca:	70bb      	strb	r3, [r7, #2]
 80173cc:	4613      	mov	r3, r2
 80173ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80173d0:	2300      	movs	r3, #0
 80173d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80173d4:	2300      	movs	r3, #0
 80173d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80173de:	78bb      	ldrb	r3, [r7, #2]
 80173e0:	883a      	ldrh	r2, [r7, #0]
 80173e2:	78f9      	ldrb	r1, [r7, #3]
 80173e4:	f7f3 f818 	bl	800a418 <HAL_PCD_EP_Open>
 80173e8:	4603      	mov	r3, r0
 80173ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80173ec:	7bfb      	ldrb	r3, [r7, #15]
 80173ee:	4618      	mov	r0, r3
 80173f0:	f000 f98a 	bl	8017708 <USBD_Get_USB_Status>
 80173f4:	4603      	mov	r3, r0
 80173f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80173f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80173fa:	4618      	mov	r0, r3
 80173fc:	3710      	adds	r7, #16
 80173fe:	46bd      	mov	sp, r7
 8017400:	bd80      	pop	{r7, pc}

08017402 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017402:	b580      	push	{r7, lr}
 8017404:	b084      	sub	sp, #16
 8017406:	af00      	add	r7, sp, #0
 8017408:	6078      	str	r0, [r7, #4]
 801740a:	460b      	mov	r3, r1
 801740c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801740e:	2300      	movs	r3, #0
 8017410:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017412:	2300      	movs	r3, #0
 8017414:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801741c:	78fa      	ldrb	r2, [r7, #3]
 801741e:	4611      	mov	r1, r2
 8017420:	4618      	mov	r0, r3
 8017422:	f7f3 f861 	bl	800a4e8 <HAL_PCD_EP_Close>
 8017426:	4603      	mov	r3, r0
 8017428:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801742a:	7bfb      	ldrb	r3, [r7, #15]
 801742c:	4618      	mov	r0, r3
 801742e:	f000 f96b 	bl	8017708 <USBD_Get_USB_Status>
 8017432:	4603      	mov	r3, r0
 8017434:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017436:	7bbb      	ldrb	r3, [r7, #14]
}
 8017438:	4618      	mov	r0, r3
 801743a:	3710      	adds	r7, #16
 801743c:	46bd      	mov	sp, r7
 801743e:	bd80      	pop	{r7, pc}

08017440 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017440:	b580      	push	{r7, lr}
 8017442:	b084      	sub	sp, #16
 8017444:	af00      	add	r7, sp, #0
 8017446:	6078      	str	r0, [r7, #4]
 8017448:	460b      	mov	r3, r1
 801744a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801744c:	2300      	movs	r3, #0
 801744e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017450:	2300      	movs	r3, #0
 8017452:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801745a:	78fa      	ldrb	r2, [r7, #3]
 801745c:	4611      	mov	r1, r2
 801745e:	4618      	mov	r0, r3
 8017460:	f7f3 f9f3 	bl	800a84a <HAL_PCD_EP_Flush>
 8017464:	4603      	mov	r3, r0
 8017466:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017468:	7bfb      	ldrb	r3, [r7, #15]
 801746a:	4618      	mov	r0, r3
 801746c:	f000 f94c 	bl	8017708 <USBD_Get_USB_Status>
 8017470:	4603      	mov	r3, r0
 8017472:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017474:	7bbb      	ldrb	r3, [r7, #14]
}
 8017476:	4618      	mov	r0, r3
 8017478:	3710      	adds	r7, #16
 801747a:	46bd      	mov	sp, r7
 801747c:	bd80      	pop	{r7, pc}

0801747e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801747e:	b580      	push	{r7, lr}
 8017480:	b084      	sub	sp, #16
 8017482:	af00      	add	r7, sp, #0
 8017484:	6078      	str	r0, [r7, #4]
 8017486:	460b      	mov	r3, r1
 8017488:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801748a:	2300      	movs	r3, #0
 801748c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801748e:	2300      	movs	r3, #0
 8017490:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017498:	78fa      	ldrb	r2, [r7, #3]
 801749a:	4611      	mov	r1, r2
 801749c:	4618      	mov	r0, r3
 801749e:	f7f3 f91a 	bl	800a6d6 <HAL_PCD_EP_SetStall>
 80174a2:	4603      	mov	r3, r0
 80174a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80174a6:	7bfb      	ldrb	r3, [r7, #15]
 80174a8:	4618      	mov	r0, r3
 80174aa:	f000 f92d 	bl	8017708 <USBD_Get_USB_Status>
 80174ae:	4603      	mov	r3, r0
 80174b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80174b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80174b4:	4618      	mov	r0, r3
 80174b6:	3710      	adds	r7, #16
 80174b8:	46bd      	mov	sp, r7
 80174ba:	bd80      	pop	{r7, pc}

080174bc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80174bc:	b580      	push	{r7, lr}
 80174be:	b084      	sub	sp, #16
 80174c0:	af00      	add	r7, sp, #0
 80174c2:	6078      	str	r0, [r7, #4]
 80174c4:	460b      	mov	r3, r1
 80174c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80174c8:	2300      	movs	r3, #0
 80174ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80174cc:	2300      	movs	r3, #0
 80174ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80174d6:	78fa      	ldrb	r2, [r7, #3]
 80174d8:	4611      	mov	r1, r2
 80174da:	4618      	mov	r0, r3
 80174dc:	f7f3 f95f 	bl	800a79e <HAL_PCD_EP_ClrStall>
 80174e0:	4603      	mov	r3, r0
 80174e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80174e4:	7bfb      	ldrb	r3, [r7, #15]
 80174e6:	4618      	mov	r0, r3
 80174e8:	f000 f90e 	bl	8017708 <USBD_Get_USB_Status>
 80174ec:	4603      	mov	r3, r0
 80174ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80174f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80174f2:	4618      	mov	r0, r3
 80174f4:	3710      	adds	r7, #16
 80174f6:	46bd      	mov	sp, r7
 80174f8:	bd80      	pop	{r7, pc}

080174fa <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80174fa:	b480      	push	{r7}
 80174fc:	b085      	sub	sp, #20
 80174fe:	af00      	add	r7, sp, #0
 8017500:	6078      	str	r0, [r7, #4]
 8017502:	460b      	mov	r3, r1
 8017504:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801750c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801750e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017512:	2b00      	cmp	r3, #0
 8017514:	da0b      	bge.n	801752e <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017516:	78fb      	ldrb	r3, [r7, #3]
 8017518:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801751c:	68f9      	ldr	r1, [r7, #12]
 801751e:	4613      	mov	r3, r2
 8017520:	00db      	lsls	r3, r3, #3
 8017522:	1a9b      	subs	r3, r3, r2
 8017524:	009b      	lsls	r3, r3, #2
 8017526:	440b      	add	r3, r1
 8017528:	333e      	adds	r3, #62	; 0x3e
 801752a:	781b      	ldrb	r3, [r3, #0]
 801752c:	e00b      	b.n	8017546 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801752e:	78fb      	ldrb	r3, [r7, #3]
 8017530:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017534:	68f9      	ldr	r1, [r7, #12]
 8017536:	4613      	mov	r3, r2
 8017538:	00db      	lsls	r3, r3, #3
 801753a:	1a9b      	subs	r3, r3, r2
 801753c:	009b      	lsls	r3, r3, #2
 801753e:	440b      	add	r3, r1
 8017540:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017544:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017546:	4618      	mov	r0, r3
 8017548:	3714      	adds	r7, #20
 801754a:	46bd      	mov	sp, r7
 801754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017550:	4770      	bx	lr

08017552 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017552:	b580      	push	{r7, lr}
 8017554:	b084      	sub	sp, #16
 8017556:	af00      	add	r7, sp, #0
 8017558:	6078      	str	r0, [r7, #4]
 801755a:	460b      	mov	r3, r1
 801755c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801755e:	2300      	movs	r3, #0
 8017560:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017562:	2300      	movs	r3, #0
 8017564:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801756c:	78fa      	ldrb	r2, [r7, #3]
 801756e:	4611      	mov	r1, r2
 8017570:	4618      	mov	r0, r3
 8017572:	f7f2 ff2c 	bl	800a3ce <HAL_PCD_SetAddress>
 8017576:	4603      	mov	r3, r0
 8017578:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801757a:	7bfb      	ldrb	r3, [r7, #15]
 801757c:	4618      	mov	r0, r3
 801757e:	f000 f8c3 	bl	8017708 <USBD_Get_USB_Status>
 8017582:	4603      	mov	r3, r0
 8017584:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017586:	7bbb      	ldrb	r3, [r7, #14]
}
 8017588:	4618      	mov	r0, r3
 801758a:	3710      	adds	r7, #16
 801758c:	46bd      	mov	sp, r7
 801758e:	bd80      	pop	{r7, pc}

08017590 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017590:	b580      	push	{r7, lr}
 8017592:	b086      	sub	sp, #24
 8017594:	af00      	add	r7, sp, #0
 8017596:	60f8      	str	r0, [r7, #12]
 8017598:	607a      	str	r2, [r7, #4]
 801759a:	603b      	str	r3, [r7, #0]
 801759c:	460b      	mov	r3, r1
 801759e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80175a0:	2300      	movs	r3, #0
 80175a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80175a4:	2300      	movs	r3, #0
 80175a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80175a8:	68fb      	ldr	r3, [r7, #12]
 80175aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80175ae:	7af9      	ldrb	r1, [r7, #11]
 80175b0:	683b      	ldr	r3, [r7, #0]
 80175b2:	687a      	ldr	r2, [r7, #4]
 80175b4:	f7f3 f845 	bl	800a642 <HAL_PCD_EP_Transmit>
 80175b8:	4603      	mov	r3, r0
 80175ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80175bc:	7dfb      	ldrb	r3, [r7, #23]
 80175be:	4618      	mov	r0, r3
 80175c0:	f000 f8a2 	bl	8017708 <USBD_Get_USB_Status>
 80175c4:	4603      	mov	r3, r0
 80175c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80175c8:	7dbb      	ldrb	r3, [r7, #22]
}
 80175ca:	4618      	mov	r0, r3
 80175cc:	3718      	adds	r7, #24
 80175ce:	46bd      	mov	sp, r7
 80175d0:	bd80      	pop	{r7, pc}

080175d2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80175d2:	b580      	push	{r7, lr}
 80175d4:	b086      	sub	sp, #24
 80175d6:	af00      	add	r7, sp, #0
 80175d8:	60f8      	str	r0, [r7, #12]
 80175da:	607a      	str	r2, [r7, #4]
 80175dc:	603b      	str	r3, [r7, #0]
 80175de:	460b      	mov	r3, r1
 80175e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80175e2:	2300      	movs	r3, #0
 80175e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80175e6:	2300      	movs	r3, #0
 80175e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80175ea:	68fb      	ldr	r3, [r7, #12]
 80175ec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80175f0:	7af9      	ldrb	r1, [r7, #11]
 80175f2:	683b      	ldr	r3, [r7, #0]
 80175f4:	687a      	ldr	r2, [r7, #4]
 80175f6:	f7f2 ffc1 	bl	800a57c <HAL_PCD_EP_Receive>
 80175fa:	4603      	mov	r3, r0
 80175fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80175fe:	7dfb      	ldrb	r3, [r7, #23]
 8017600:	4618      	mov	r0, r3
 8017602:	f000 f881 	bl	8017708 <USBD_Get_USB_Status>
 8017606:	4603      	mov	r3, r0
 8017608:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801760a:	7dbb      	ldrb	r3, [r7, #22]
}
 801760c:	4618      	mov	r0, r3
 801760e:	3718      	adds	r7, #24
 8017610:	46bd      	mov	sp, r7
 8017612:	bd80      	pop	{r7, pc}

08017614 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017614:	b580      	push	{r7, lr}
 8017616:	b082      	sub	sp, #8
 8017618:	af00      	add	r7, sp, #0
 801761a:	6078      	str	r0, [r7, #4]
 801761c:	460b      	mov	r3, r1
 801761e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017626:	78fa      	ldrb	r2, [r7, #3]
 8017628:	4611      	mov	r1, r2
 801762a:	4618      	mov	r0, r3
 801762c:	f7f2 fff1 	bl	800a612 <HAL_PCD_EP_GetRxCount>
 8017630:	4603      	mov	r3, r0
}
 8017632:	4618      	mov	r0, r3
 8017634:	3708      	adds	r7, #8
 8017636:	46bd      	mov	sp, r7
 8017638:	bd80      	pop	{r7, pc}
	...

0801763c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801763c:	b580      	push	{r7, lr}
 801763e:	b082      	sub	sp, #8
 8017640:	af00      	add	r7, sp, #0
 8017642:	6078      	str	r0, [r7, #4]
 8017644:	460b      	mov	r3, r1
 8017646:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8017648:	78fb      	ldrb	r3, [r7, #3]
 801764a:	2b00      	cmp	r3, #0
 801764c:	d002      	beq.n	8017654 <HAL_PCDEx_LPM_Callback+0x18>
 801764e:	2b01      	cmp	r3, #1
 8017650:	d01f      	beq.n	8017692 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8017652:	e03b      	b.n	80176cc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	6a1b      	ldr	r3, [r3, #32]
 8017658:	2b00      	cmp	r3, #0
 801765a:	d007      	beq.n	801766c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 801765c:	f7e9 ff08 	bl	8001470 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017660:	4b1c      	ldr	r3, [pc, #112]	; (80176d4 <HAL_PCDEx_LPM_Callback+0x98>)
 8017662:	691b      	ldr	r3, [r3, #16]
 8017664:	4a1b      	ldr	r2, [pc, #108]	; (80176d4 <HAL_PCDEx_LPM_Callback+0x98>)
 8017666:	f023 0306 	bic.w	r3, r3, #6
 801766a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	681b      	ldr	r3, [r3, #0]
 8017670:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017674:	681b      	ldr	r3, [r3, #0]
 8017676:	687a      	ldr	r2, [r7, #4]
 8017678:	6812      	ldr	r2, [r2, #0]
 801767a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801767e:	f023 0301 	bic.w	r3, r3, #1
 8017682:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801768a:	4618      	mov	r0, r3
 801768c:	f7fb fcc7 	bl	801301e <USBD_LL_Resume>
    break;
 8017690:	e01c      	b.n	80176cc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	681b      	ldr	r3, [r3, #0]
 8017696:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801769a:	681b      	ldr	r3, [r3, #0]
 801769c:	687a      	ldr	r2, [r7, #4]
 801769e:	6812      	ldr	r2, [r2, #0]
 80176a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80176a4:	f043 0301 	orr.w	r3, r3, #1
 80176a8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80176b0:	4618      	mov	r0, r3
 80176b2:	f7fb fc9e 	bl	8012ff2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	6a1b      	ldr	r3, [r3, #32]
 80176ba:	2b00      	cmp	r3, #0
 80176bc:	d005      	beq.n	80176ca <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80176be:	4b05      	ldr	r3, [pc, #20]	; (80176d4 <HAL_PCDEx_LPM_Callback+0x98>)
 80176c0:	691b      	ldr	r3, [r3, #16]
 80176c2:	4a04      	ldr	r2, [pc, #16]	; (80176d4 <HAL_PCDEx_LPM_Callback+0x98>)
 80176c4:	f043 0306 	orr.w	r3, r3, #6
 80176c8:	6113      	str	r3, [r2, #16]
    break;
 80176ca:	bf00      	nop
}
 80176cc:	bf00      	nop
 80176ce:	3708      	adds	r7, #8
 80176d0:	46bd      	mov	sp, r7
 80176d2:	bd80      	pop	{r7, pc}
 80176d4:	e000ed00 	.word	0xe000ed00

080176d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80176d8:	b480      	push	{r7}
 80176da:	b083      	sub	sp, #12
 80176dc:	af00      	add	r7, sp, #0
 80176de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80176e0:	4b03      	ldr	r3, [pc, #12]	; (80176f0 <USBD_static_malloc+0x18>)
}
 80176e2:	4618      	mov	r0, r3
 80176e4:	370c      	adds	r7, #12
 80176e6:	46bd      	mov	sp, r7
 80176e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ec:	4770      	bx	lr
 80176ee:	bf00      	nop
 80176f0:	20000418 	.word	0x20000418

080176f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80176f4:	b480      	push	{r7}
 80176f6:	b083      	sub	sp, #12
 80176f8:	af00      	add	r7, sp, #0
 80176fa:	6078      	str	r0, [r7, #4]

}
 80176fc:	bf00      	nop
 80176fe:	370c      	adds	r7, #12
 8017700:	46bd      	mov	sp, r7
 8017702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017706:	4770      	bx	lr

08017708 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017708:	b480      	push	{r7}
 801770a:	b085      	sub	sp, #20
 801770c:	af00      	add	r7, sp, #0
 801770e:	4603      	mov	r3, r0
 8017710:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017712:	2300      	movs	r3, #0
 8017714:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017716:	79fb      	ldrb	r3, [r7, #7]
 8017718:	2b03      	cmp	r3, #3
 801771a:	d817      	bhi.n	801774c <USBD_Get_USB_Status+0x44>
 801771c:	a201      	add	r2, pc, #4	; (adr r2, 8017724 <USBD_Get_USB_Status+0x1c>)
 801771e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017722:	bf00      	nop
 8017724:	08017735 	.word	0x08017735
 8017728:	0801773b 	.word	0x0801773b
 801772c:	08017741 	.word	0x08017741
 8017730:	08017747 	.word	0x08017747
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017734:	2300      	movs	r3, #0
 8017736:	73fb      	strb	r3, [r7, #15]
    break;
 8017738:	e00b      	b.n	8017752 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801773a:	2303      	movs	r3, #3
 801773c:	73fb      	strb	r3, [r7, #15]
    break;
 801773e:	e008      	b.n	8017752 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017740:	2301      	movs	r3, #1
 8017742:	73fb      	strb	r3, [r7, #15]
    break;
 8017744:	e005      	b.n	8017752 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017746:	2303      	movs	r3, #3
 8017748:	73fb      	strb	r3, [r7, #15]
    break;
 801774a:	e002      	b.n	8017752 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801774c:	2303      	movs	r3, #3
 801774e:	73fb      	strb	r3, [r7, #15]
    break;
 8017750:	bf00      	nop
  }
  return usb_status;
 8017752:	7bfb      	ldrb	r3, [r7, #15]
}
 8017754:	4618      	mov	r0, r3
 8017756:	3714      	adds	r7, #20
 8017758:	46bd      	mov	sp, r7
 801775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801775e:	4770      	bx	lr

08017760 <__errno>:
 8017760:	4b01      	ldr	r3, [pc, #4]	; (8017768 <__errno+0x8>)
 8017762:	6818      	ldr	r0, [r3, #0]
 8017764:	4770      	bx	lr
 8017766:	bf00      	nop
 8017768:	20000174 	.word	0x20000174

0801776c <__libc_init_array>:
 801776c:	b570      	push	{r4, r5, r6, lr}
 801776e:	4d0d      	ldr	r5, [pc, #52]	; (80177a4 <__libc_init_array+0x38>)
 8017770:	4c0d      	ldr	r4, [pc, #52]	; (80177a8 <__libc_init_array+0x3c>)
 8017772:	1b64      	subs	r4, r4, r5
 8017774:	10a4      	asrs	r4, r4, #2
 8017776:	2600      	movs	r6, #0
 8017778:	42a6      	cmp	r6, r4
 801777a:	d109      	bne.n	8017790 <__libc_init_array+0x24>
 801777c:	4d0b      	ldr	r5, [pc, #44]	; (80177ac <__libc_init_array+0x40>)
 801777e:	4c0c      	ldr	r4, [pc, #48]	; (80177b0 <__libc_init_array+0x44>)
 8017780:	f000 fc4e 	bl	8018020 <_init>
 8017784:	1b64      	subs	r4, r4, r5
 8017786:	10a4      	asrs	r4, r4, #2
 8017788:	2600      	movs	r6, #0
 801778a:	42a6      	cmp	r6, r4
 801778c:	d105      	bne.n	801779a <__libc_init_array+0x2e>
 801778e:	bd70      	pop	{r4, r5, r6, pc}
 8017790:	f855 3b04 	ldr.w	r3, [r5], #4
 8017794:	4798      	blx	r3
 8017796:	3601      	adds	r6, #1
 8017798:	e7ee      	b.n	8017778 <__libc_init_array+0xc>
 801779a:	f855 3b04 	ldr.w	r3, [r5], #4
 801779e:	4798      	blx	r3
 80177a0:	3601      	adds	r6, #1
 80177a2:	e7f2      	b.n	801778a <__libc_init_array+0x1e>
 80177a4:	080185cc 	.word	0x080185cc
 80177a8:	080185cc 	.word	0x080185cc
 80177ac:	080185cc 	.word	0x080185cc
 80177b0:	080185d0 	.word	0x080185d0

080177b4 <memcpy>:
 80177b4:	440a      	add	r2, r1
 80177b6:	4291      	cmp	r1, r2
 80177b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80177bc:	d100      	bne.n	80177c0 <memcpy+0xc>
 80177be:	4770      	bx	lr
 80177c0:	b510      	push	{r4, lr}
 80177c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80177c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80177ca:	4291      	cmp	r1, r2
 80177cc:	d1f9      	bne.n	80177c2 <memcpy+0xe>
 80177ce:	bd10      	pop	{r4, pc}

080177d0 <memset>:
 80177d0:	4402      	add	r2, r0
 80177d2:	4603      	mov	r3, r0
 80177d4:	4293      	cmp	r3, r2
 80177d6:	d100      	bne.n	80177da <memset+0xa>
 80177d8:	4770      	bx	lr
 80177da:	f803 1b01 	strb.w	r1, [r3], #1
 80177de:	e7f9      	b.n	80177d4 <memset+0x4>

080177e0 <siprintf>:
 80177e0:	b40e      	push	{r1, r2, r3}
 80177e2:	b500      	push	{lr}
 80177e4:	b09c      	sub	sp, #112	; 0x70
 80177e6:	ab1d      	add	r3, sp, #116	; 0x74
 80177e8:	9002      	str	r0, [sp, #8]
 80177ea:	9006      	str	r0, [sp, #24]
 80177ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80177f0:	4809      	ldr	r0, [pc, #36]	; (8017818 <siprintf+0x38>)
 80177f2:	9107      	str	r1, [sp, #28]
 80177f4:	9104      	str	r1, [sp, #16]
 80177f6:	4909      	ldr	r1, [pc, #36]	; (801781c <siprintf+0x3c>)
 80177f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80177fc:	9105      	str	r1, [sp, #20]
 80177fe:	6800      	ldr	r0, [r0, #0]
 8017800:	9301      	str	r3, [sp, #4]
 8017802:	a902      	add	r1, sp, #8
 8017804:	f000 f868 	bl	80178d8 <_svfiprintf_r>
 8017808:	9b02      	ldr	r3, [sp, #8]
 801780a:	2200      	movs	r2, #0
 801780c:	701a      	strb	r2, [r3, #0]
 801780e:	b01c      	add	sp, #112	; 0x70
 8017810:	f85d eb04 	ldr.w	lr, [sp], #4
 8017814:	b003      	add	sp, #12
 8017816:	4770      	bx	lr
 8017818:	20000174 	.word	0x20000174
 801781c:	ffff0208 	.word	0xffff0208

08017820 <__ssputs_r>:
 8017820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017824:	688e      	ldr	r6, [r1, #8]
 8017826:	429e      	cmp	r6, r3
 8017828:	4682      	mov	sl, r0
 801782a:	460c      	mov	r4, r1
 801782c:	4690      	mov	r8, r2
 801782e:	461f      	mov	r7, r3
 8017830:	d838      	bhi.n	80178a4 <__ssputs_r+0x84>
 8017832:	898a      	ldrh	r2, [r1, #12]
 8017834:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017838:	d032      	beq.n	80178a0 <__ssputs_r+0x80>
 801783a:	6825      	ldr	r5, [r4, #0]
 801783c:	6909      	ldr	r1, [r1, #16]
 801783e:	eba5 0901 	sub.w	r9, r5, r1
 8017842:	6965      	ldr	r5, [r4, #20]
 8017844:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017848:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801784c:	3301      	adds	r3, #1
 801784e:	444b      	add	r3, r9
 8017850:	106d      	asrs	r5, r5, #1
 8017852:	429d      	cmp	r5, r3
 8017854:	bf38      	it	cc
 8017856:	461d      	movcc	r5, r3
 8017858:	0553      	lsls	r3, r2, #21
 801785a:	d531      	bpl.n	80178c0 <__ssputs_r+0xa0>
 801785c:	4629      	mov	r1, r5
 801785e:	f000 fb39 	bl	8017ed4 <_malloc_r>
 8017862:	4606      	mov	r6, r0
 8017864:	b950      	cbnz	r0, 801787c <__ssputs_r+0x5c>
 8017866:	230c      	movs	r3, #12
 8017868:	f8ca 3000 	str.w	r3, [sl]
 801786c:	89a3      	ldrh	r3, [r4, #12]
 801786e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017872:	81a3      	strh	r3, [r4, #12]
 8017874:	f04f 30ff 	mov.w	r0, #4294967295
 8017878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801787c:	6921      	ldr	r1, [r4, #16]
 801787e:	464a      	mov	r2, r9
 8017880:	f7ff ff98 	bl	80177b4 <memcpy>
 8017884:	89a3      	ldrh	r3, [r4, #12]
 8017886:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801788a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801788e:	81a3      	strh	r3, [r4, #12]
 8017890:	6126      	str	r6, [r4, #16]
 8017892:	6165      	str	r5, [r4, #20]
 8017894:	444e      	add	r6, r9
 8017896:	eba5 0509 	sub.w	r5, r5, r9
 801789a:	6026      	str	r6, [r4, #0]
 801789c:	60a5      	str	r5, [r4, #8]
 801789e:	463e      	mov	r6, r7
 80178a0:	42be      	cmp	r6, r7
 80178a2:	d900      	bls.n	80178a6 <__ssputs_r+0x86>
 80178a4:	463e      	mov	r6, r7
 80178a6:	4632      	mov	r2, r6
 80178a8:	6820      	ldr	r0, [r4, #0]
 80178aa:	4641      	mov	r1, r8
 80178ac:	f000 faa8 	bl	8017e00 <memmove>
 80178b0:	68a3      	ldr	r3, [r4, #8]
 80178b2:	6822      	ldr	r2, [r4, #0]
 80178b4:	1b9b      	subs	r3, r3, r6
 80178b6:	4432      	add	r2, r6
 80178b8:	60a3      	str	r3, [r4, #8]
 80178ba:	6022      	str	r2, [r4, #0]
 80178bc:	2000      	movs	r0, #0
 80178be:	e7db      	b.n	8017878 <__ssputs_r+0x58>
 80178c0:	462a      	mov	r2, r5
 80178c2:	f000 fb61 	bl	8017f88 <_realloc_r>
 80178c6:	4606      	mov	r6, r0
 80178c8:	2800      	cmp	r0, #0
 80178ca:	d1e1      	bne.n	8017890 <__ssputs_r+0x70>
 80178cc:	6921      	ldr	r1, [r4, #16]
 80178ce:	4650      	mov	r0, sl
 80178d0:	f000 fab0 	bl	8017e34 <_free_r>
 80178d4:	e7c7      	b.n	8017866 <__ssputs_r+0x46>
	...

080178d8 <_svfiprintf_r>:
 80178d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178dc:	4698      	mov	r8, r3
 80178de:	898b      	ldrh	r3, [r1, #12]
 80178e0:	061b      	lsls	r3, r3, #24
 80178e2:	b09d      	sub	sp, #116	; 0x74
 80178e4:	4607      	mov	r7, r0
 80178e6:	460d      	mov	r5, r1
 80178e8:	4614      	mov	r4, r2
 80178ea:	d50e      	bpl.n	801790a <_svfiprintf_r+0x32>
 80178ec:	690b      	ldr	r3, [r1, #16]
 80178ee:	b963      	cbnz	r3, 801790a <_svfiprintf_r+0x32>
 80178f0:	2140      	movs	r1, #64	; 0x40
 80178f2:	f000 faef 	bl	8017ed4 <_malloc_r>
 80178f6:	6028      	str	r0, [r5, #0]
 80178f8:	6128      	str	r0, [r5, #16]
 80178fa:	b920      	cbnz	r0, 8017906 <_svfiprintf_r+0x2e>
 80178fc:	230c      	movs	r3, #12
 80178fe:	603b      	str	r3, [r7, #0]
 8017900:	f04f 30ff 	mov.w	r0, #4294967295
 8017904:	e0d1      	b.n	8017aaa <_svfiprintf_r+0x1d2>
 8017906:	2340      	movs	r3, #64	; 0x40
 8017908:	616b      	str	r3, [r5, #20]
 801790a:	2300      	movs	r3, #0
 801790c:	9309      	str	r3, [sp, #36]	; 0x24
 801790e:	2320      	movs	r3, #32
 8017910:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017914:	f8cd 800c 	str.w	r8, [sp, #12]
 8017918:	2330      	movs	r3, #48	; 0x30
 801791a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017ac4 <_svfiprintf_r+0x1ec>
 801791e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017922:	f04f 0901 	mov.w	r9, #1
 8017926:	4623      	mov	r3, r4
 8017928:	469a      	mov	sl, r3
 801792a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801792e:	b10a      	cbz	r2, 8017934 <_svfiprintf_r+0x5c>
 8017930:	2a25      	cmp	r2, #37	; 0x25
 8017932:	d1f9      	bne.n	8017928 <_svfiprintf_r+0x50>
 8017934:	ebba 0b04 	subs.w	fp, sl, r4
 8017938:	d00b      	beq.n	8017952 <_svfiprintf_r+0x7a>
 801793a:	465b      	mov	r3, fp
 801793c:	4622      	mov	r2, r4
 801793e:	4629      	mov	r1, r5
 8017940:	4638      	mov	r0, r7
 8017942:	f7ff ff6d 	bl	8017820 <__ssputs_r>
 8017946:	3001      	adds	r0, #1
 8017948:	f000 80aa 	beq.w	8017aa0 <_svfiprintf_r+0x1c8>
 801794c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801794e:	445a      	add	r2, fp
 8017950:	9209      	str	r2, [sp, #36]	; 0x24
 8017952:	f89a 3000 	ldrb.w	r3, [sl]
 8017956:	2b00      	cmp	r3, #0
 8017958:	f000 80a2 	beq.w	8017aa0 <_svfiprintf_r+0x1c8>
 801795c:	2300      	movs	r3, #0
 801795e:	f04f 32ff 	mov.w	r2, #4294967295
 8017962:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017966:	f10a 0a01 	add.w	sl, sl, #1
 801796a:	9304      	str	r3, [sp, #16]
 801796c:	9307      	str	r3, [sp, #28]
 801796e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017972:	931a      	str	r3, [sp, #104]	; 0x68
 8017974:	4654      	mov	r4, sl
 8017976:	2205      	movs	r2, #5
 8017978:	f814 1b01 	ldrb.w	r1, [r4], #1
 801797c:	4851      	ldr	r0, [pc, #324]	; (8017ac4 <_svfiprintf_r+0x1ec>)
 801797e:	f7e8 fc47 	bl	8000210 <memchr>
 8017982:	9a04      	ldr	r2, [sp, #16]
 8017984:	b9d8      	cbnz	r0, 80179be <_svfiprintf_r+0xe6>
 8017986:	06d0      	lsls	r0, r2, #27
 8017988:	bf44      	itt	mi
 801798a:	2320      	movmi	r3, #32
 801798c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017990:	0711      	lsls	r1, r2, #28
 8017992:	bf44      	itt	mi
 8017994:	232b      	movmi	r3, #43	; 0x2b
 8017996:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801799a:	f89a 3000 	ldrb.w	r3, [sl]
 801799e:	2b2a      	cmp	r3, #42	; 0x2a
 80179a0:	d015      	beq.n	80179ce <_svfiprintf_r+0xf6>
 80179a2:	9a07      	ldr	r2, [sp, #28]
 80179a4:	4654      	mov	r4, sl
 80179a6:	2000      	movs	r0, #0
 80179a8:	f04f 0c0a 	mov.w	ip, #10
 80179ac:	4621      	mov	r1, r4
 80179ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80179b2:	3b30      	subs	r3, #48	; 0x30
 80179b4:	2b09      	cmp	r3, #9
 80179b6:	d94e      	bls.n	8017a56 <_svfiprintf_r+0x17e>
 80179b8:	b1b0      	cbz	r0, 80179e8 <_svfiprintf_r+0x110>
 80179ba:	9207      	str	r2, [sp, #28]
 80179bc:	e014      	b.n	80179e8 <_svfiprintf_r+0x110>
 80179be:	eba0 0308 	sub.w	r3, r0, r8
 80179c2:	fa09 f303 	lsl.w	r3, r9, r3
 80179c6:	4313      	orrs	r3, r2
 80179c8:	9304      	str	r3, [sp, #16]
 80179ca:	46a2      	mov	sl, r4
 80179cc:	e7d2      	b.n	8017974 <_svfiprintf_r+0x9c>
 80179ce:	9b03      	ldr	r3, [sp, #12]
 80179d0:	1d19      	adds	r1, r3, #4
 80179d2:	681b      	ldr	r3, [r3, #0]
 80179d4:	9103      	str	r1, [sp, #12]
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	bfbb      	ittet	lt
 80179da:	425b      	neglt	r3, r3
 80179dc:	f042 0202 	orrlt.w	r2, r2, #2
 80179e0:	9307      	strge	r3, [sp, #28]
 80179e2:	9307      	strlt	r3, [sp, #28]
 80179e4:	bfb8      	it	lt
 80179e6:	9204      	strlt	r2, [sp, #16]
 80179e8:	7823      	ldrb	r3, [r4, #0]
 80179ea:	2b2e      	cmp	r3, #46	; 0x2e
 80179ec:	d10c      	bne.n	8017a08 <_svfiprintf_r+0x130>
 80179ee:	7863      	ldrb	r3, [r4, #1]
 80179f0:	2b2a      	cmp	r3, #42	; 0x2a
 80179f2:	d135      	bne.n	8017a60 <_svfiprintf_r+0x188>
 80179f4:	9b03      	ldr	r3, [sp, #12]
 80179f6:	1d1a      	adds	r2, r3, #4
 80179f8:	681b      	ldr	r3, [r3, #0]
 80179fa:	9203      	str	r2, [sp, #12]
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	bfb8      	it	lt
 8017a00:	f04f 33ff 	movlt.w	r3, #4294967295
 8017a04:	3402      	adds	r4, #2
 8017a06:	9305      	str	r3, [sp, #20]
 8017a08:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017ad4 <_svfiprintf_r+0x1fc>
 8017a0c:	7821      	ldrb	r1, [r4, #0]
 8017a0e:	2203      	movs	r2, #3
 8017a10:	4650      	mov	r0, sl
 8017a12:	f7e8 fbfd 	bl	8000210 <memchr>
 8017a16:	b140      	cbz	r0, 8017a2a <_svfiprintf_r+0x152>
 8017a18:	2340      	movs	r3, #64	; 0x40
 8017a1a:	eba0 000a 	sub.w	r0, r0, sl
 8017a1e:	fa03 f000 	lsl.w	r0, r3, r0
 8017a22:	9b04      	ldr	r3, [sp, #16]
 8017a24:	4303      	orrs	r3, r0
 8017a26:	3401      	adds	r4, #1
 8017a28:	9304      	str	r3, [sp, #16]
 8017a2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a2e:	4826      	ldr	r0, [pc, #152]	; (8017ac8 <_svfiprintf_r+0x1f0>)
 8017a30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017a34:	2206      	movs	r2, #6
 8017a36:	f7e8 fbeb 	bl	8000210 <memchr>
 8017a3a:	2800      	cmp	r0, #0
 8017a3c:	d038      	beq.n	8017ab0 <_svfiprintf_r+0x1d8>
 8017a3e:	4b23      	ldr	r3, [pc, #140]	; (8017acc <_svfiprintf_r+0x1f4>)
 8017a40:	bb1b      	cbnz	r3, 8017a8a <_svfiprintf_r+0x1b2>
 8017a42:	9b03      	ldr	r3, [sp, #12]
 8017a44:	3307      	adds	r3, #7
 8017a46:	f023 0307 	bic.w	r3, r3, #7
 8017a4a:	3308      	adds	r3, #8
 8017a4c:	9303      	str	r3, [sp, #12]
 8017a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a50:	4433      	add	r3, r6
 8017a52:	9309      	str	r3, [sp, #36]	; 0x24
 8017a54:	e767      	b.n	8017926 <_svfiprintf_r+0x4e>
 8017a56:	fb0c 3202 	mla	r2, ip, r2, r3
 8017a5a:	460c      	mov	r4, r1
 8017a5c:	2001      	movs	r0, #1
 8017a5e:	e7a5      	b.n	80179ac <_svfiprintf_r+0xd4>
 8017a60:	2300      	movs	r3, #0
 8017a62:	3401      	adds	r4, #1
 8017a64:	9305      	str	r3, [sp, #20]
 8017a66:	4619      	mov	r1, r3
 8017a68:	f04f 0c0a 	mov.w	ip, #10
 8017a6c:	4620      	mov	r0, r4
 8017a6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017a72:	3a30      	subs	r2, #48	; 0x30
 8017a74:	2a09      	cmp	r2, #9
 8017a76:	d903      	bls.n	8017a80 <_svfiprintf_r+0x1a8>
 8017a78:	2b00      	cmp	r3, #0
 8017a7a:	d0c5      	beq.n	8017a08 <_svfiprintf_r+0x130>
 8017a7c:	9105      	str	r1, [sp, #20]
 8017a7e:	e7c3      	b.n	8017a08 <_svfiprintf_r+0x130>
 8017a80:	fb0c 2101 	mla	r1, ip, r1, r2
 8017a84:	4604      	mov	r4, r0
 8017a86:	2301      	movs	r3, #1
 8017a88:	e7f0      	b.n	8017a6c <_svfiprintf_r+0x194>
 8017a8a:	ab03      	add	r3, sp, #12
 8017a8c:	9300      	str	r3, [sp, #0]
 8017a8e:	462a      	mov	r2, r5
 8017a90:	4b0f      	ldr	r3, [pc, #60]	; (8017ad0 <_svfiprintf_r+0x1f8>)
 8017a92:	a904      	add	r1, sp, #16
 8017a94:	4638      	mov	r0, r7
 8017a96:	f3af 8000 	nop.w
 8017a9a:	1c42      	adds	r2, r0, #1
 8017a9c:	4606      	mov	r6, r0
 8017a9e:	d1d6      	bne.n	8017a4e <_svfiprintf_r+0x176>
 8017aa0:	89ab      	ldrh	r3, [r5, #12]
 8017aa2:	065b      	lsls	r3, r3, #25
 8017aa4:	f53f af2c 	bmi.w	8017900 <_svfiprintf_r+0x28>
 8017aa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017aaa:	b01d      	add	sp, #116	; 0x74
 8017aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ab0:	ab03      	add	r3, sp, #12
 8017ab2:	9300      	str	r3, [sp, #0]
 8017ab4:	462a      	mov	r2, r5
 8017ab6:	4b06      	ldr	r3, [pc, #24]	; (8017ad0 <_svfiprintf_r+0x1f8>)
 8017ab8:	a904      	add	r1, sp, #16
 8017aba:	4638      	mov	r0, r7
 8017abc:	f000 f87a 	bl	8017bb4 <_printf_i>
 8017ac0:	e7eb      	b.n	8017a9a <_svfiprintf_r+0x1c2>
 8017ac2:	bf00      	nop
 8017ac4:	08018590 	.word	0x08018590
 8017ac8:	0801859a 	.word	0x0801859a
 8017acc:	00000000 	.word	0x00000000
 8017ad0:	08017821 	.word	0x08017821
 8017ad4:	08018596 	.word	0x08018596

08017ad8 <_printf_common>:
 8017ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017adc:	4616      	mov	r6, r2
 8017ade:	4699      	mov	r9, r3
 8017ae0:	688a      	ldr	r2, [r1, #8]
 8017ae2:	690b      	ldr	r3, [r1, #16]
 8017ae4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017ae8:	4293      	cmp	r3, r2
 8017aea:	bfb8      	it	lt
 8017aec:	4613      	movlt	r3, r2
 8017aee:	6033      	str	r3, [r6, #0]
 8017af0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017af4:	4607      	mov	r7, r0
 8017af6:	460c      	mov	r4, r1
 8017af8:	b10a      	cbz	r2, 8017afe <_printf_common+0x26>
 8017afa:	3301      	adds	r3, #1
 8017afc:	6033      	str	r3, [r6, #0]
 8017afe:	6823      	ldr	r3, [r4, #0]
 8017b00:	0699      	lsls	r1, r3, #26
 8017b02:	bf42      	ittt	mi
 8017b04:	6833      	ldrmi	r3, [r6, #0]
 8017b06:	3302      	addmi	r3, #2
 8017b08:	6033      	strmi	r3, [r6, #0]
 8017b0a:	6825      	ldr	r5, [r4, #0]
 8017b0c:	f015 0506 	ands.w	r5, r5, #6
 8017b10:	d106      	bne.n	8017b20 <_printf_common+0x48>
 8017b12:	f104 0a19 	add.w	sl, r4, #25
 8017b16:	68e3      	ldr	r3, [r4, #12]
 8017b18:	6832      	ldr	r2, [r6, #0]
 8017b1a:	1a9b      	subs	r3, r3, r2
 8017b1c:	42ab      	cmp	r3, r5
 8017b1e:	dc26      	bgt.n	8017b6e <_printf_common+0x96>
 8017b20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017b24:	1e13      	subs	r3, r2, #0
 8017b26:	6822      	ldr	r2, [r4, #0]
 8017b28:	bf18      	it	ne
 8017b2a:	2301      	movne	r3, #1
 8017b2c:	0692      	lsls	r2, r2, #26
 8017b2e:	d42b      	bmi.n	8017b88 <_printf_common+0xb0>
 8017b30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017b34:	4649      	mov	r1, r9
 8017b36:	4638      	mov	r0, r7
 8017b38:	47c0      	blx	r8
 8017b3a:	3001      	adds	r0, #1
 8017b3c:	d01e      	beq.n	8017b7c <_printf_common+0xa4>
 8017b3e:	6823      	ldr	r3, [r4, #0]
 8017b40:	68e5      	ldr	r5, [r4, #12]
 8017b42:	6832      	ldr	r2, [r6, #0]
 8017b44:	f003 0306 	and.w	r3, r3, #6
 8017b48:	2b04      	cmp	r3, #4
 8017b4a:	bf08      	it	eq
 8017b4c:	1aad      	subeq	r5, r5, r2
 8017b4e:	68a3      	ldr	r3, [r4, #8]
 8017b50:	6922      	ldr	r2, [r4, #16]
 8017b52:	bf0c      	ite	eq
 8017b54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017b58:	2500      	movne	r5, #0
 8017b5a:	4293      	cmp	r3, r2
 8017b5c:	bfc4      	itt	gt
 8017b5e:	1a9b      	subgt	r3, r3, r2
 8017b60:	18ed      	addgt	r5, r5, r3
 8017b62:	2600      	movs	r6, #0
 8017b64:	341a      	adds	r4, #26
 8017b66:	42b5      	cmp	r5, r6
 8017b68:	d11a      	bne.n	8017ba0 <_printf_common+0xc8>
 8017b6a:	2000      	movs	r0, #0
 8017b6c:	e008      	b.n	8017b80 <_printf_common+0xa8>
 8017b6e:	2301      	movs	r3, #1
 8017b70:	4652      	mov	r2, sl
 8017b72:	4649      	mov	r1, r9
 8017b74:	4638      	mov	r0, r7
 8017b76:	47c0      	blx	r8
 8017b78:	3001      	adds	r0, #1
 8017b7a:	d103      	bne.n	8017b84 <_printf_common+0xac>
 8017b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8017b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b84:	3501      	adds	r5, #1
 8017b86:	e7c6      	b.n	8017b16 <_printf_common+0x3e>
 8017b88:	18e1      	adds	r1, r4, r3
 8017b8a:	1c5a      	adds	r2, r3, #1
 8017b8c:	2030      	movs	r0, #48	; 0x30
 8017b8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017b92:	4422      	add	r2, r4
 8017b94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017b98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017b9c:	3302      	adds	r3, #2
 8017b9e:	e7c7      	b.n	8017b30 <_printf_common+0x58>
 8017ba0:	2301      	movs	r3, #1
 8017ba2:	4622      	mov	r2, r4
 8017ba4:	4649      	mov	r1, r9
 8017ba6:	4638      	mov	r0, r7
 8017ba8:	47c0      	blx	r8
 8017baa:	3001      	adds	r0, #1
 8017bac:	d0e6      	beq.n	8017b7c <_printf_common+0xa4>
 8017bae:	3601      	adds	r6, #1
 8017bb0:	e7d9      	b.n	8017b66 <_printf_common+0x8e>
	...

08017bb4 <_printf_i>:
 8017bb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017bb8:	460c      	mov	r4, r1
 8017bba:	4691      	mov	r9, r2
 8017bbc:	7e27      	ldrb	r7, [r4, #24]
 8017bbe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017bc0:	2f78      	cmp	r7, #120	; 0x78
 8017bc2:	4680      	mov	r8, r0
 8017bc4:	469a      	mov	sl, r3
 8017bc6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017bca:	d807      	bhi.n	8017bdc <_printf_i+0x28>
 8017bcc:	2f62      	cmp	r7, #98	; 0x62
 8017bce:	d80a      	bhi.n	8017be6 <_printf_i+0x32>
 8017bd0:	2f00      	cmp	r7, #0
 8017bd2:	f000 80d8 	beq.w	8017d86 <_printf_i+0x1d2>
 8017bd6:	2f58      	cmp	r7, #88	; 0x58
 8017bd8:	f000 80a3 	beq.w	8017d22 <_printf_i+0x16e>
 8017bdc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017be0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017be4:	e03a      	b.n	8017c5c <_printf_i+0xa8>
 8017be6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017bea:	2b15      	cmp	r3, #21
 8017bec:	d8f6      	bhi.n	8017bdc <_printf_i+0x28>
 8017bee:	a001      	add	r0, pc, #4	; (adr r0, 8017bf4 <_printf_i+0x40>)
 8017bf0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8017bf4:	08017c4d 	.word	0x08017c4d
 8017bf8:	08017c61 	.word	0x08017c61
 8017bfc:	08017bdd 	.word	0x08017bdd
 8017c00:	08017bdd 	.word	0x08017bdd
 8017c04:	08017bdd 	.word	0x08017bdd
 8017c08:	08017bdd 	.word	0x08017bdd
 8017c0c:	08017c61 	.word	0x08017c61
 8017c10:	08017bdd 	.word	0x08017bdd
 8017c14:	08017bdd 	.word	0x08017bdd
 8017c18:	08017bdd 	.word	0x08017bdd
 8017c1c:	08017bdd 	.word	0x08017bdd
 8017c20:	08017d6d 	.word	0x08017d6d
 8017c24:	08017c91 	.word	0x08017c91
 8017c28:	08017d4f 	.word	0x08017d4f
 8017c2c:	08017bdd 	.word	0x08017bdd
 8017c30:	08017bdd 	.word	0x08017bdd
 8017c34:	08017d8f 	.word	0x08017d8f
 8017c38:	08017bdd 	.word	0x08017bdd
 8017c3c:	08017c91 	.word	0x08017c91
 8017c40:	08017bdd 	.word	0x08017bdd
 8017c44:	08017bdd 	.word	0x08017bdd
 8017c48:	08017d57 	.word	0x08017d57
 8017c4c:	680b      	ldr	r3, [r1, #0]
 8017c4e:	1d1a      	adds	r2, r3, #4
 8017c50:	681b      	ldr	r3, [r3, #0]
 8017c52:	600a      	str	r2, [r1, #0]
 8017c54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017c58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017c5c:	2301      	movs	r3, #1
 8017c5e:	e0a3      	b.n	8017da8 <_printf_i+0x1f4>
 8017c60:	6825      	ldr	r5, [r4, #0]
 8017c62:	6808      	ldr	r0, [r1, #0]
 8017c64:	062e      	lsls	r6, r5, #24
 8017c66:	f100 0304 	add.w	r3, r0, #4
 8017c6a:	d50a      	bpl.n	8017c82 <_printf_i+0xce>
 8017c6c:	6805      	ldr	r5, [r0, #0]
 8017c6e:	600b      	str	r3, [r1, #0]
 8017c70:	2d00      	cmp	r5, #0
 8017c72:	da03      	bge.n	8017c7c <_printf_i+0xc8>
 8017c74:	232d      	movs	r3, #45	; 0x2d
 8017c76:	426d      	negs	r5, r5
 8017c78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017c7c:	485e      	ldr	r0, [pc, #376]	; (8017df8 <_printf_i+0x244>)
 8017c7e:	230a      	movs	r3, #10
 8017c80:	e019      	b.n	8017cb6 <_printf_i+0x102>
 8017c82:	f015 0f40 	tst.w	r5, #64	; 0x40
 8017c86:	6805      	ldr	r5, [r0, #0]
 8017c88:	600b      	str	r3, [r1, #0]
 8017c8a:	bf18      	it	ne
 8017c8c:	b22d      	sxthne	r5, r5
 8017c8e:	e7ef      	b.n	8017c70 <_printf_i+0xbc>
 8017c90:	680b      	ldr	r3, [r1, #0]
 8017c92:	6825      	ldr	r5, [r4, #0]
 8017c94:	1d18      	adds	r0, r3, #4
 8017c96:	6008      	str	r0, [r1, #0]
 8017c98:	0628      	lsls	r0, r5, #24
 8017c9a:	d501      	bpl.n	8017ca0 <_printf_i+0xec>
 8017c9c:	681d      	ldr	r5, [r3, #0]
 8017c9e:	e002      	b.n	8017ca6 <_printf_i+0xf2>
 8017ca0:	0669      	lsls	r1, r5, #25
 8017ca2:	d5fb      	bpl.n	8017c9c <_printf_i+0xe8>
 8017ca4:	881d      	ldrh	r5, [r3, #0]
 8017ca6:	4854      	ldr	r0, [pc, #336]	; (8017df8 <_printf_i+0x244>)
 8017ca8:	2f6f      	cmp	r7, #111	; 0x6f
 8017caa:	bf0c      	ite	eq
 8017cac:	2308      	moveq	r3, #8
 8017cae:	230a      	movne	r3, #10
 8017cb0:	2100      	movs	r1, #0
 8017cb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017cb6:	6866      	ldr	r6, [r4, #4]
 8017cb8:	60a6      	str	r6, [r4, #8]
 8017cba:	2e00      	cmp	r6, #0
 8017cbc:	bfa2      	ittt	ge
 8017cbe:	6821      	ldrge	r1, [r4, #0]
 8017cc0:	f021 0104 	bicge.w	r1, r1, #4
 8017cc4:	6021      	strge	r1, [r4, #0]
 8017cc6:	b90d      	cbnz	r5, 8017ccc <_printf_i+0x118>
 8017cc8:	2e00      	cmp	r6, #0
 8017cca:	d04d      	beq.n	8017d68 <_printf_i+0x1b4>
 8017ccc:	4616      	mov	r6, r2
 8017cce:	fbb5 f1f3 	udiv	r1, r5, r3
 8017cd2:	fb03 5711 	mls	r7, r3, r1, r5
 8017cd6:	5dc7      	ldrb	r7, [r0, r7]
 8017cd8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017cdc:	462f      	mov	r7, r5
 8017cde:	42bb      	cmp	r3, r7
 8017ce0:	460d      	mov	r5, r1
 8017ce2:	d9f4      	bls.n	8017cce <_printf_i+0x11a>
 8017ce4:	2b08      	cmp	r3, #8
 8017ce6:	d10b      	bne.n	8017d00 <_printf_i+0x14c>
 8017ce8:	6823      	ldr	r3, [r4, #0]
 8017cea:	07df      	lsls	r7, r3, #31
 8017cec:	d508      	bpl.n	8017d00 <_printf_i+0x14c>
 8017cee:	6923      	ldr	r3, [r4, #16]
 8017cf0:	6861      	ldr	r1, [r4, #4]
 8017cf2:	4299      	cmp	r1, r3
 8017cf4:	bfde      	ittt	le
 8017cf6:	2330      	movle	r3, #48	; 0x30
 8017cf8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017cfc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017d00:	1b92      	subs	r2, r2, r6
 8017d02:	6122      	str	r2, [r4, #16]
 8017d04:	f8cd a000 	str.w	sl, [sp]
 8017d08:	464b      	mov	r3, r9
 8017d0a:	aa03      	add	r2, sp, #12
 8017d0c:	4621      	mov	r1, r4
 8017d0e:	4640      	mov	r0, r8
 8017d10:	f7ff fee2 	bl	8017ad8 <_printf_common>
 8017d14:	3001      	adds	r0, #1
 8017d16:	d14c      	bne.n	8017db2 <_printf_i+0x1fe>
 8017d18:	f04f 30ff 	mov.w	r0, #4294967295
 8017d1c:	b004      	add	sp, #16
 8017d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017d22:	4835      	ldr	r0, [pc, #212]	; (8017df8 <_printf_i+0x244>)
 8017d24:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017d28:	6823      	ldr	r3, [r4, #0]
 8017d2a:	680e      	ldr	r6, [r1, #0]
 8017d2c:	061f      	lsls	r7, r3, #24
 8017d2e:	f856 5b04 	ldr.w	r5, [r6], #4
 8017d32:	600e      	str	r6, [r1, #0]
 8017d34:	d514      	bpl.n	8017d60 <_printf_i+0x1ac>
 8017d36:	07d9      	lsls	r1, r3, #31
 8017d38:	bf44      	itt	mi
 8017d3a:	f043 0320 	orrmi.w	r3, r3, #32
 8017d3e:	6023      	strmi	r3, [r4, #0]
 8017d40:	b91d      	cbnz	r5, 8017d4a <_printf_i+0x196>
 8017d42:	6823      	ldr	r3, [r4, #0]
 8017d44:	f023 0320 	bic.w	r3, r3, #32
 8017d48:	6023      	str	r3, [r4, #0]
 8017d4a:	2310      	movs	r3, #16
 8017d4c:	e7b0      	b.n	8017cb0 <_printf_i+0xfc>
 8017d4e:	6823      	ldr	r3, [r4, #0]
 8017d50:	f043 0320 	orr.w	r3, r3, #32
 8017d54:	6023      	str	r3, [r4, #0]
 8017d56:	2378      	movs	r3, #120	; 0x78
 8017d58:	4828      	ldr	r0, [pc, #160]	; (8017dfc <_printf_i+0x248>)
 8017d5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017d5e:	e7e3      	b.n	8017d28 <_printf_i+0x174>
 8017d60:	065e      	lsls	r6, r3, #25
 8017d62:	bf48      	it	mi
 8017d64:	b2ad      	uxthmi	r5, r5
 8017d66:	e7e6      	b.n	8017d36 <_printf_i+0x182>
 8017d68:	4616      	mov	r6, r2
 8017d6a:	e7bb      	b.n	8017ce4 <_printf_i+0x130>
 8017d6c:	680b      	ldr	r3, [r1, #0]
 8017d6e:	6826      	ldr	r6, [r4, #0]
 8017d70:	6960      	ldr	r0, [r4, #20]
 8017d72:	1d1d      	adds	r5, r3, #4
 8017d74:	600d      	str	r5, [r1, #0]
 8017d76:	0635      	lsls	r5, r6, #24
 8017d78:	681b      	ldr	r3, [r3, #0]
 8017d7a:	d501      	bpl.n	8017d80 <_printf_i+0x1cc>
 8017d7c:	6018      	str	r0, [r3, #0]
 8017d7e:	e002      	b.n	8017d86 <_printf_i+0x1d2>
 8017d80:	0671      	lsls	r1, r6, #25
 8017d82:	d5fb      	bpl.n	8017d7c <_printf_i+0x1c8>
 8017d84:	8018      	strh	r0, [r3, #0]
 8017d86:	2300      	movs	r3, #0
 8017d88:	6123      	str	r3, [r4, #16]
 8017d8a:	4616      	mov	r6, r2
 8017d8c:	e7ba      	b.n	8017d04 <_printf_i+0x150>
 8017d8e:	680b      	ldr	r3, [r1, #0]
 8017d90:	1d1a      	adds	r2, r3, #4
 8017d92:	600a      	str	r2, [r1, #0]
 8017d94:	681e      	ldr	r6, [r3, #0]
 8017d96:	6862      	ldr	r2, [r4, #4]
 8017d98:	2100      	movs	r1, #0
 8017d9a:	4630      	mov	r0, r6
 8017d9c:	f7e8 fa38 	bl	8000210 <memchr>
 8017da0:	b108      	cbz	r0, 8017da6 <_printf_i+0x1f2>
 8017da2:	1b80      	subs	r0, r0, r6
 8017da4:	6060      	str	r0, [r4, #4]
 8017da6:	6863      	ldr	r3, [r4, #4]
 8017da8:	6123      	str	r3, [r4, #16]
 8017daa:	2300      	movs	r3, #0
 8017dac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017db0:	e7a8      	b.n	8017d04 <_printf_i+0x150>
 8017db2:	6923      	ldr	r3, [r4, #16]
 8017db4:	4632      	mov	r2, r6
 8017db6:	4649      	mov	r1, r9
 8017db8:	4640      	mov	r0, r8
 8017dba:	47d0      	blx	sl
 8017dbc:	3001      	adds	r0, #1
 8017dbe:	d0ab      	beq.n	8017d18 <_printf_i+0x164>
 8017dc0:	6823      	ldr	r3, [r4, #0]
 8017dc2:	079b      	lsls	r3, r3, #30
 8017dc4:	d413      	bmi.n	8017dee <_printf_i+0x23a>
 8017dc6:	68e0      	ldr	r0, [r4, #12]
 8017dc8:	9b03      	ldr	r3, [sp, #12]
 8017dca:	4298      	cmp	r0, r3
 8017dcc:	bfb8      	it	lt
 8017dce:	4618      	movlt	r0, r3
 8017dd0:	e7a4      	b.n	8017d1c <_printf_i+0x168>
 8017dd2:	2301      	movs	r3, #1
 8017dd4:	4632      	mov	r2, r6
 8017dd6:	4649      	mov	r1, r9
 8017dd8:	4640      	mov	r0, r8
 8017dda:	47d0      	blx	sl
 8017ddc:	3001      	adds	r0, #1
 8017dde:	d09b      	beq.n	8017d18 <_printf_i+0x164>
 8017de0:	3501      	adds	r5, #1
 8017de2:	68e3      	ldr	r3, [r4, #12]
 8017de4:	9903      	ldr	r1, [sp, #12]
 8017de6:	1a5b      	subs	r3, r3, r1
 8017de8:	42ab      	cmp	r3, r5
 8017dea:	dcf2      	bgt.n	8017dd2 <_printf_i+0x21e>
 8017dec:	e7eb      	b.n	8017dc6 <_printf_i+0x212>
 8017dee:	2500      	movs	r5, #0
 8017df0:	f104 0619 	add.w	r6, r4, #25
 8017df4:	e7f5      	b.n	8017de2 <_printf_i+0x22e>
 8017df6:	bf00      	nop
 8017df8:	080185a1 	.word	0x080185a1
 8017dfc:	080185b2 	.word	0x080185b2

08017e00 <memmove>:
 8017e00:	4288      	cmp	r0, r1
 8017e02:	b510      	push	{r4, lr}
 8017e04:	eb01 0402 	add.w	r4, r1, r2
 8017e08:	d902      	bls.n	8017e10 <memmove+0x10>
 8017e0a:	4284      	cmp	r4, r0
 8017e0c:	4623      	mov	r3, r4
 8017e0e:	d807      	bhi.n	8017e20 <memmove+0x20>
 8017e10:	1e43      	subs	r3, r0, #1
 8017e12:	42a1      	cmp	r1, r4
 8017e14:	d008      	beq.n	8017e28 <memmove+0x28>
 8017e16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017e1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017e1e:	e7f8      	b.n	8017e12 <memmove+0x12>
 8017e20:	4402      	add	r2, r0
 8017e22:	4601      	mov	r1, r0
 8017e24:	428a      	cmp	r2, r1
 8017e26:	d100      	bne.n	8017e2a <memmove+0x2a>
 8017e28:	bd10      	pop	{r4, pc}
 8017e2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017e2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017e32:	e7f7      	b.n	8017e24 <memmove+0x24>

08017e34 <_free_r>:
 8017e34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017e36:	2900      	cmp	r1, #0
 8017e38:	d048      	beq.n	8017ecc <_free_r+0x98>
 8017e3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017e3e:	9001      	str	r0, [sp, #4]
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	f1a1 0404 	sub.w	r4, r1, #4
 8017e46:	bfb8      	it	lt
 8017e48:	18e4      	addlt	r4, r4, r3
 8017e4a:	f000 f8d3 	bl	8017ff4 <__malloc_lock>
 8017e4e:	4a20      	ldr	r2, [pc, #128]	; (8017ed0 <_free_r+0x9c>)
 8017e50:	9801      	ldr	r0, [sp, #4]
 8017e52:	6813      	ldr	r3, [r2, #0]
 8017e54:	4615      	mov	r5, r2
 8017e56:	b933      	cbnz	r3, 8017e66 <_free_r+0x32>
 8017e58:	6063      	str	r3, [r4, #4]
 8017e5a:	6014      	str	r4, [r2, #0]
 8017e5c:	b003      	add	sp, #12
 8017e5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017e62:	f000 b8cd 	b.w	8018000 <__malloc_unlock>
 8017e66:	42a3      	cmp	r3, r4
 8017e68:	d90b      	bls.n	8017e82 <_free_r+0x4e>
 8017e6a:	6821      	ldr	r1, [r4, #0]
 8017e6c:	1862      	adds	r2, r4, r1
 8017e6e:	4293      	cmp	r3, r2
 8017e70:	bf04      	itt	eq
 8017e72:	681a      	ldreq	r2, [r3, #0]
 8017e74:	685b      	ldreq	r3, [r3, #4]
 8017e76:	6063      	str	r3, [r4, #4]
 8017e78:	bf04      	itt	eq
 8017e7a:	1852      	addeq	r2, r2, r1
 8017e7c:	6022      	streq	r2, [r4, #0]
 8017e7e:	602c      	str	r4, [r5, #0]
 8017e80:	e7ec      	b.n	8017e5c <_free_r+0x28>
 8017e82:	461a      	mov	r2, r3
 8017e84:	685b      	ldr	r3, [r3, #4]
 8017e86:	b10b      	cbz	r3, 8017e8c <_free_r+0x58>
 8017e88:	42a3      	cmp	r3, r4
 8017e8a:	d9fa      	bls.n	8017e82 <_free_r+0x4e>
 8017e8c:	6811      	ldr	r1, [r2, #0]
 8017e8e:	1855      	adds	r5, r2, r1
 8017e90:	42a5      	cmp	r5, r4
 8017e92:	d10b      	bne.n	8017eac <_free_r+0x78>
 8017e94:	6824      	ldr	r4, [r4, #0]
 8017e96:	4421      	add	r1, r4
 8017e98:	1854      	adds	r4, r2, r1
 8017e9a:	42a3      	cmp	r3, r4
 8017e9c:	6011      	str	r1, [r2, #0]
 8017e9e:	d1dd      	bne.n	8017e5c <_free_r+0x28>
 8017ea0:	681c      	ldr	r4, [r3, #0]
 8017ea2:	685b      	ldr	r3, [r3, #4]
 8017ea4:	6053      	str	r3, [r2, #4]
 8017ea6:	4421      	add	r1, r4
 8017ea8:	6011      	str	r1, [r2, #0]
 8017eaa:	e7d7      	b.n	8017e5c <_free_r+0x28>
 8017eac:	d902      	bls.n	8017eb4 <_free_r+0x80>
 8017eae:	230c      	movs	r3, #12
 8017eb0:	6003      	str	r3, [r0, #0]
 8017eb2:	e7d3      	b.n	8017e5c <_free_r+0x28>
 8017eb4:	6825      	ldr	r5, [r4, #0]
 8017eb6:	1961      	adds	r1, r4, r5
 8017eb8:	428b      	cmp	r3, r1
 8017eba:	bf04      	itt	eq
 8017ebc:	6819      	ldreq	r1, [r3, #0]
 8017ebe:	685b      	ldreq	r3, [r3, #4]
 8017ec0:	6063      	str	r3, [r4, #4]
 8017ec2:	bf04      	itt	eq
 8017ec4:	1949      	addeq	r1, r1, r5
 8017ec6:	6021      	streq	r1, [r4, #0]
 8017ec8:	6054      	str	r4, [r2, #4]
 8017eca:	e7c7      	b.n	8017e5c <_free_r+0x28>
 8017ecc:	b003      	add	sp, #12
 8017ece:	bd30      	pop	{r4, r5, pc}
 8017ed0:	20000690 	.word	0x20000690

08017ed4 <_malloc_r>:
 8017ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ed6:	1ccd      	adds	r5, r1, #3
 8017ed8:	f025 0503 	bic.w	r5, r5, #3
 8017edc:	3508      	adds	r5, #8
 8017ede:	2d0c      	cmp	r5, #12
 8017ee0:	bf38      	it	cc
 8017ee2:	250c      	movcc	r5, #12
 8017ee4:	2d00      	cmp	r5, #0
 8017ee6:	4606      	mov	r6, r0
 8017ee8:	db01      	blt.n	8017eee <_malloc_r+0x1a>
 8017eea:	42a9      	cmp	r1, r5
 8017eec:	d903      	bls.n	8017ef6 <_malloc_r+0x22>
 8017eee:	230c      	movs	r3, #12
 8017ef0:	6033      	str	r3, [r6, #0]
 8017ef2:	2000      	movs	r0, #0
 8017ef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ef6:	f000 f87d 	bl	8017ff4 <__malloc_lock>
 8017efa:	4921      	ldr	r1, [pc, #132]	; (8017f80 <_malloc_r+0xac>)
 8017efc:	680a      	ldr	r2, [r1, #0]
 8017efe:	4614      	mov	r4, r2
 8017f00:	b99c      	cbnz	r4, 8017f2a <_malloc_r+0x56>
 8017f02:	4f20      	ldr	r7, [pc, #128]	; (8017f84 <_malloc_r+0xb0>)
 8017f04:	683b      	ldr	r3, [r7, #0]
 8017f06:	b923      	cbnz	r3, 8017f12 <_malloc_r+0x3e>
 8017f08:	4621      	mov	r1, r4
 8017f0a:	4630      	mov	r0, r6
 8017f0c:	f000 f862 	bl	8017fd4 <_sbrk_r>
 8017f10:	6038      	str	r0, [r7, #0]
 8017f12:	4629      	mov	r1, r5
 8017f14:	4630      	mov	r0, r6
 8017f16:	f000 f85d 	bl	8017fd4 <_sbrk_r>
 8017f1a:	1c43      	adds	r3, r0, #1
 8017f1c:	d123      	bne.n	8017f66 <_malloc_r+0x92>
 8017f1e:	230c      	movs	r3, #12
 8017f20:	6033      	str	r3, [r6, #0]
 8017f22:	4630      	mov	r0, r6
 8017f24:	f000 f86c 	bl	8018000 <__malloc_unlock>
 8017f28:	e7e3      	b.n	8017ef2 <_malloc_r+0x1e>
 8017f2a:	6823      	ldr	r3, [r4, #0]
 8017f2c:	1b5b      	subs	r3, r3, r5
 8017f2e:	d417      	bmi.n	8017f60 <_malloc_r+0x8c>
 8017f30:	2b0b      	cmp	r3, #11
 8017f32:	d903      	bls.n	8017f3c <_malloc_r+0x68>
 8017f34:	6023      	str	r3, [r4, #0]
 8017f36:	441c      	add	r4, r3
 8017f38:	6025      	str	r5, [r4, #0]
 8017f3a:	e004      	b.n	8017f46 <_malloc_r+0x72>
 8017f3c:	6863      	ldr	r3, [r4, #4]
 8017f3e:	42a2      	cmp	r2, r4
 8017f40:	bf0c      	ite	eq
 8017f42:	600b      	streq	r3, [r1, #0]
 8017f44:	6053      	strne	r3, [r2, #4]
 8017f46:	4630      	mov	r0, r6
 8017f48:	f000 f85a 	bl	8018000 <__malloc_unlock>
 8017f4c:	f104 000b 	add.w	r0, r4, #11
 8017f50:	1d23      	adds	r3, r4, #4
 8017f52:	f020 0007 	bic.w	r0, r0, #7
 8017f56:	1ac2      	subs	r2, r0, r3
 8017f58:	d0cc      	beq.n	8017ef4 <_malloc_r+0x20>
 8017f5a:	1a1b      	subs	r3, r3, r0
 8017f5c:	50a3      	str	r3, [r4, r2]
 8017f5e:	e7c9      	b.n	8017ef4 <_malloc_r+0x20>
 8017f60:	4622      	mov	r2, r4
 8017f62:	6864      	ldr	r4, [r4, #4]
 8017f64:	e7cc      	b.n	8017f00 <_malloc_r+0x2c>
 8017f66:	1cc4      	adds	r4, r0, #3
 8017f68:	f024 0403 	bic.w	r4, r4, #3
 8017f6c:	42a0      	cmp	r0, r4
 8017f6e:	d0e3      	beq.n	8017f38 <_malloc_r+0x64>
 8017f70:	1a21      	subs	r1, r4, r0
 8017f72:	4630      	mov	r0, r6
 8017f74:	f000 f82e 	bl	8017fd4 <_sbrk_r>
 8017f78:	3001      	adds	r0, #1
 8017f7a:	d1dd      	bne.n	8017f38 <_malloc_r+0x64>
 8017f7c:	e7cf      	b.n	8017f1e <_malloc_r+0x4a>
 8017f7e:	bf00      	nop
 8017f80:	20000690 	.word	0x20000690
 8017f84:	20000694 	.word	0x20000694

08017f88 <_realloc_r>:
 8017f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f8a:	4607      	mov	r7, r0
 8017f8c:	4614      	mov	r4, r2
 8017f8e:	460e      	mov	r6, r1
 8017f90:	b921      	cbnz	r1, 8017f9c <_realloc_r+0x14>
 8017f92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017f96:	4611      	mov	r1, r2
 8017f98:	f7ff bf9c 	b.w	8017ed4 <_malloc_r>
 8017f9c:	b922      	cbnz	r2, 8017fa8 <_realloc_r+0x20>
 8017f9e:	f7ff ff49 	bl	8017e34 <_free_r>
 8017fa2:	4625      	mov	r5, r4
 8017fa4:	4628      	mov	r0, r5
 8017fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017fa8:	f000 f830 	bl	801800c <_malloc_usable_size_r>
 8017fac:	42a0      	cmp	r0, r4
 8017fae:	d20f      	bcs.n	8017fd0 <_realloc_r+0x48>
 8017fb0:	4621      	mov	r1, r4
 8017fb2:	4638      	mov	r0, r7
 8017fb4:	f7ff ff8e 	bl	8017ed4 <_malloc_r>
 8017fb8:	4605      	mov	r5, r0
 8017fba:	2800      	cmp	r0, #0
 8017fbc:	d0f2      	beq.n	8017fa4 <_realloc_r+0x1c>
 8017fbe:	4631      	mov	r1, r6
 8017fc0:	4622      	mov	r2, r4
 8017fc2:	f7ff fbf7 	bl	80177b4 <memcpy>
 8017fc6:	4631      	mov	r1, r6
 8017fc8:	4638      	mov	r0, r7
 8017fca:	f7ff ff33 	bl	8017e34 <_free_r>
 8017fce:	e7e9      	b.n	8017fa4 <_realloc_r+0x1c>
 8017fd0:	4635      	mov	r5, r6
 8017fd2:	e7e7      	b.n	8017fa4 <_realloc_r+0x1c>

08017fd4 <_sbrk_r>:
 8017fd4:	b538      	push	{r3, r4, r5, lr}
 8017fd6:	4d06      	ldr	r5, [pc, #24]	; (8017ff0 <_sbrk_r+0x1c>)
 8017fd8:	2300      	movs	r3, #0
 8017fda:	4604      	mov	r4, r0
 8017fdc:	4608      	mov	r0, r1
 8017fde:	602b      	str	r3, [r5, #0]
 8017fe0:	f7ee fa6e 	bl	80064c0 <_sbrk>
 8017fe4:	1c43      	adds	r3, r0, #1
 8017fe6:	d102      	bne.n	8017fee <_sbrk_r+0x1a>
 8017fe8:	682b      	ldr	r3, [r5, #0]
 8017fea:	b103      	cbz	r3, 8017fee <_sbrk_r+0x1a>
 8017fec:	6023      	str	r3, [r4, #0]
 8017fee:	bd38      	pop	{r3, r4, r5, pc}
 8017ff0:	200057dc 	.word	0x200057dc

08017ff4 <__malloc_lock>:
 8017ff4:	4801      	ldr	r0, [pc, #4]	; (8017ffc <__malloc_lock+0x8>)
 8017ff6:	f000 b811 	b.w	801801c <__retarget_lock_acquire_recursive>
 8017ffa:	bf00      	nop
 8017ffc:	200057e4 	.word	0x200057e4

08018000 <__malloc_unlock>:
 8018000:	4801      	ldr	r0, [pc, #4]	; (8018008 <__malloc_unlock+0x8>)
 8018002:	f000 b80c 	b.w	801801e <__retarget_lock_release_recursive>
 8018006:	bf00      	nop
 8018008:	200057e4 	.word	0x200057e4

0801800c <_malloc_usable_size_r>:
 801800c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018010:	1f18      	subs	r0, r3, #4
 8018012:	2b00      	cmp	r3, #0
 8018014:	bfbc      	itt	lt
 8018016:	580b      	ldrlt	r3, [r1, r0]
 8018018:	18c0      	addlt	r0, r0, r3
 801801a:	4770      	bx	lr

0801801c <__retarget_lock_acquire_recursive>:
 801801c:	4770      	bx	lr

0801801e <__retarget_lock_release_recursive>:
 801801e:	4770      	bx	lr

08018020 <_init>:
 8018020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018022:	bf00      	nop
 8018024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018026:	bc08      	pop	{r3}
 8018028:	469e      	mov	lr, r3
 801802a:	4770      	bx	lr

0801802c <_fini>:
 801802c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801802e:	bf00      	nop
 8018030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018032:	bc08      	pop	{r3}
 8018034:	469e      	mov	lr, r3
 8018036:	4770      	bx	lr
