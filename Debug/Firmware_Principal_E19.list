
Firmware_Principal_E19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017314  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  080174e4  080174e4  000274e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017a70  08017a70  000301d8  2**0
                  CONTENTS
  4 .ARM          00000008  08017a70  08017a70  00027a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017a78  08017a78  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017a78  08017a78  00027a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017a7c  08017a7c  00027a7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08017a80  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005614  200001d8  08017c58  000301d8  2**2
                  ALLOC
 10 ._user_heap_stack 00008004  200057ec  08017c58  000357ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00042285  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000077e2  00000000  00000000  0007248d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002398  00000000  00000000  00079c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002080  00000000  00000000  0007c008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ec89  00000000  00000000  0007e088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00036562  00000000  00000000  000acd11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f39f5  00000000  00000000  000e3273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d6c68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000972c  00000000  00000000  001d6cbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080174cc 	.word	0x080174cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	080174cc 	.word	0x080174cc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <FT_CAN_FilterConfig>:
 */

#include "ft_can.h"

HAL_StatusTypeDef FT_CAN_FilterConfig(CAN_HandleTypeDef *hcan, uint16_t FT_Product, uint8_t filter_bank_position, uint32_t Filter_FIFO)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b090      	sub	sp, #64	; 0x40
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	460b      	mov	r3, r1
 80005b4:	817b      	strh	r3, [r7, #10]
 80005b6:	4613      	mov	r3, r2
 80005b8:	727b      	strb	r3, [r7, #9]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filter_id = FT_Product << 13, mask_id = 0x1FF80000;
 80005ba:	897b      	ldrh	r3, [r7, #10]
 80005bc:	035b      	lsls	r3, r3, #13
 80005be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005c0:	4b13      	ldr	r3, [pc, #76]	; (8000610 <FT_CAN_FilterConfig+0x68>)
 80005c2:	63bb      	str	r3, [r7, #56]	; 0x38

	sFilterConfig.FilterBank = filter_bank_position;
 80005c4:	7a7b      	ldrb	r3, [r7, #9]
 80005c6:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005c8:	2300      	movs	r3, #0
 80005ca:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005cc:	2301      	movs	r3, #1
 80005ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 80005d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005d2:	0b5b      	lsrs	r3, r3, #13
 80005d4:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 80005d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005d8:	00db      	lsls	r3, r3, #3
 80005da:	b29b      	uxth	r3, r3
 80005dc:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 80005de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80005e0:	0b5b      	lsrs	r3, r3, #13
 80005e2:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 80005e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80005e6:	00db      	lsls	r3, r3, #3
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterFIFOAssignment = Filter_FIFO;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterActivation = ENABLE;
 80005f0:	2301      	movs	r3, #1
 80005f2:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.SlaveStartFilterBank = 14 + filter_bank_position;
 80005f4:	7a7b      	ldrb	r3, [r7, #9]
 80005f6:	330e      	adds	r3, #14
 80005f8:	637b      	str	r3, [r7, #52]	; 0x34

	return HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 80005fa:	f107 0310 	add.w	r3, r7, #16
 80005fe:	4619      	mov	r1, r3
 8000600:	68f8      	ldr	r0, [r7, #12]
 8000602:	f006 fd01 	bl	8007008 <HAL_CAN_ConfigFilter>
 8000606:	4603      	mov	r3, r0
}
 8000608:	4618      	mov	r0, r3
 800060a:	3740      	adds	r7, #64	; 0x40
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	1ff80000 	.word	0x1ff80000

08000614 <FT_CAN_ProcessData>:

#ifndef FT_CAN_SIMPLE

static void FT_CAN_ProcessData(FT_Data* FT_Data_Struct)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	uint16_t id = FT_Data_Struct->data_id;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8000622:	81fb      	strh	r3, [r7, #14]
	uint16_t data = FT_Data_Struct->data_content;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800062a:	81bb      	strh	r3, [r7, #12]

	if((id & 0x1) == 0x1)
 800062c:	89fb      	ldrh	r3, [r7, #14]
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	2b00      	cmp	r3, #0
 8000634:	f040 823a 	bne.w	8000aac <FT_CAN_ProcessData+0x498>
	{
		return;
	}

	switch(id >> 1)
 8000638:	89fb      	ldrh	r3, [r7, #14]
 800063a:	085b      	lsrs	r3, r3, #1
 800063c:	b29b      	uxth	r3, r3
 800063e:	2b8d      	cmp	r3, #141	; 0x8d
 8000640:	f300 8166 	bgt.w	8000910 <FT_CAN_ProcessData+0x2fc>
 8000644:	2b00      	cmp	r3, #0
 8000646:	dc41      	bgt.n	80006cc <FT_CAN_ProcessData+0xb8>
 8000648:	e229      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
 800064a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800064e:	2b1b      	cmp	r3, #27
 8000650:	f200 8225 	bhi.w	8000a9e <FT_CAN_ProcessData+0x48a>
 8000654:	a201      	add	r2, pc, #4	; (adr r2, 800065c <FT_CAN_ProcessData+0x48>)
 8000656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065a:	bf00      	nop
 800065c:	08000a63 	.word	0x08000a63
 8000660:	08000a9f 	.word	0x08000a9f
 8000664:	08000a9f 	.word	0x08000a9f
 8000668:	08000a9f 	.word	0x08000a9f
 800066c:	08000a9f 	.word	0x08000a9f
 8000670:	08000a9f 	.word	0x08000a9f
 8000674:	08000a9f 	.word	0x08000a9f
 8000678:	08000a9f 	.word	0x08000a9f
 800067c:	08000a9f 	.word	0x08000a9f
 8000680:	08000a9f 	.word	0x08000a9f
 8000684:	08000a9f 	.word	0x08000a9f
 8000688:	08000a9f 	.word	0x08000a9f
 800068c:	08000a9f 	.word	0x08000a9f
 8000690:	08000a9f 	.word	0x08000a9f
 8000694:	08000a9f 	.word	0x08000a9f
 8000698:	08000a9f 	.word	0x08000a9f
 800069c:	08000a9f 	.word	0x08000a9f
 80006a0:	08000a9f 	.word	0x08000a9f
 80006a4:	08000a6d 	.word	0x08000a6d
 80006a8:	08000a9f 	.word	0x08000a9f
 80006ac:	08000a9f 	.word	0x08000a9f
 80006b0:	08000a9f 	.word	0x08000a9f
 80006b4:	08000a9f 	.word	0x08000a9f
 80006b8:	08000a9f 	.word	0x08000a9f
 80006bc:	08000a77 	.word	0x08000a77
 80006c0:	08000a81 	.word	0x08000a81
 80006c4:	08000a8b 	.word	0x08000a8b
 80006c8:	08000a95 	.word	0x08000a95
 80006cc:	3b01      	subs	r3, #1
 80006ce:	2b8c      	cmp	r3, #140	; 0x8c
 80006d0:	f200 81e5 	bhi.w	8000a9e <FT_CAN_ProcessData+0x48a>
 80006d4:	a201      	add	r2, pc, #4	; (adr r2, 80006dc <FT_CAN_ProcessData+0xc8>)
 80006d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006da:	bf00      	nop
 80006dc:	08000923 	.word	0x08000923
 80006e0:	0800092f 	.word	0x0800092f
 80006e4:	08000939 	.word	0x08000939
 80006e8:	08000943 	.word	0x08000943
 80006ec:	0800094d 	.word	0x0800094d
 80006f0:	08000959 	.word	0x08000959
 80006f4:	08000963 	.word	0x08000963
 80006f8:	080009a5 	.word	0x080009a5
 80006fc:	080009af 	.word	0x080009af
 8000700:	080009b9 	.word	0x080009b9
 8000704:	080009c3 	.word	0x080009c3
 8000708:	080009cd 	.word	0x080009cd
 800070c:	080009d7 	.word	0x080009d7
 8000710:	080009e1 	.word	0x080009e1
 8000714:	080009eb 	.word	0x080009eb
 8000718:	080009f5 	.word	0x080009f5
 800071c:	0800096d 	.word	0x0800096d
 8000720:	08000a9f 	.word	0x08000a9f
 8000724:	08000a9f 	.word	0x08000a9f
 8000728:	08000a9f 	.word	0x08000a9f
 800072c:	08000a9f 	.word	0x08000a9f
 8000730:	08000a9f 	.word	0x08000a9f
 8000734:	08000a9f 	.word	0x08000a9f
 8000738:	08000a9f 	.word	0x08000a9f
 800073c:	08000a9f 	.word	0x08000a9f
 8000740:	08000a9f 	.word	0x08000a9f
 8000744:	08000a9f 	.word	0x08000a9f
 8000748:	08000a9f 	.word	0x08000a9f
 800074c:	08000a9f 	.word	0x08000a9f
 8000750:	08000a9f 	.word	0x08000a9f
 8000754:	08000a9f 	.word	0x08000a9f
 8000758:	08000a9f 	.word	0x08000a9f
 800075c:	08000a9f 	.word	0x08000a9f
 8000760:	08000a9f 	.word	0x08000a9f
 8000764:	08000a9f 	.word	0x08000a9f
 8000768:	08000a9f 	.word	0x08000a9f
 800076c:	08000a9f 	.word	0x08000a9f
 8000770:	08000a9f 	.word	0x08000a9f
 8000774:	08000977 	.word	0x08000977
 8000778:	08000a9f 	.word	0x08000a9f
 800077c:	08000a9f 	.word	0x08000a9f
 8000780:	08000a9f 	.word	0x08000a9f
 8000784:	08000a9f 	.word	0x08000a9f
 8000788:	08000a9f 	.word	0x08000a9f
 800078c:	08000a9f 	.word	0x08000a9f
 8000790:	08000a9f 	.word	0x08000a9f
 8000794:	08000a9f 	.word	0x08000a9f
 8000798:	08000a9f 	.word	0x08000a9f
 800079c:	08000a9f 	.word	0x08000a9f
 80007a0:	08000a9f 	.word	0x08000a9f
 80007a4:	08000a9f 	.word	0x08000a9f
 80007a8:	08000a9f 	.word	0x08000a9f
 80007ac:	08000a9f 	.word	0x08000a9f
 80007b0:	08000a9f 	.word	0x08000a9f
 80007b4:	08000a9f 	.word	0x08000a9f
 80007b8:	08000a9f 	.word	0x08000a9f
 80007bc:	08000a9f 	.word	0x08000a9f
 80007c0:	08000a9f 	.word	0x08000a9f
 80007c4:	08000a9f 	.word	0x08000a9f
 80007c8:	08000a9f 	.word	0x08000a9f
 80007cc:	08000a9f 	.word	0x08000a9f
 80007d0:	08000a9f 	.word	0x08000a9f
 80007d4:	08000a9f 	.word	0x08000a9f
 80007d8:	08000a9f 	.word	0x08000a9f
 80007dc:	08000a9f 	.word	0x08000a9f
 80007e0:	08000981 	.word	0x08000981
 80007e4:	08000a9f 	.word	0x08000a9f
 80007e8:	08000a9f 	.word	0x08000a9f
 80007ec:	08000a9f 	.word	0x08000a9f
 80007f0:	08000a9f 	.word	0x08000a9f
 80007f4:	08000a9f 	.word	0x08000a9f
 80007f8:	080009ff 	.word	0x080009ff
 80007fc:	08000a09 	.word	0x08000a09
 8000800:	08000a13 	.word	0x08000a13
 8000804:	08000a1d 	.word	0x08000a1d
 8000808:	08000a27 	.word	0x08000a27
 800080c:	08000a31 	.word	0x08000a31
 8000810:	08000a3b 	.word	0x08000a3b
 8000814:	08000a45 	.word	0x08000a45
 8000818:	08000a4f 	.word	0x08000a4f
 800081c:	08000a59 	.word	0x08000a59
 8000820:	08000a9f 	.word	0x08000a9f
 8000824:	08000a9f 	.word	0x08000a9f
 8000828:	08000a9f 	.word	0x08000a9f
 800082c:	08000a9f 	.word	0x08000a9f
 8000830:	08000a9f 	.word	0x08000a9f
 8000834:	08000a9f 	.word	0x08000a9f
 8000838:	08000a9f 	.word	0x08000a9f
 800083c:	08000a9f 	.word	0x08000a9f
 8000840:	08000a9f 	.word	0x08000a9f
 8000844:	08000a9f 	.word	0x08000a9f
 8000848:	08000a9f 	.word	0x08000a9f
 800084c:	08000a9f 	.word	0x08000a9f
 8000850:	08000a9f 	.word	0x08000a9f
 8000854:	08000a9f 	.word	0x08000a9f
 8000858:	08000a9f 	.word	0x08000a9f
 800085c:	08000a9f 	.word	0x08000a9f
 8000860:	08000a9f 	.word	0x08000a9f
 8000864:	08000a9f 	.word	0x08000a9f
 8000868:	08000a9f 	.word	0x08000a9f
 800086c:	08000a9f 	.word	0x08000a9f
 8000870:	08000a9f 	.word	0x08000a9f
 8000874:	08000a9f 	.word	0x08000a9f
 8000878:	08000a9f 	.word	0x08000a9f
 800087c:	08000a9f 	.word	0x08000a9f
 8000880:	08000a9f 	.word	0x08000a9f
 8000884:	08000a9f 	.word	0x08000a9f
 8000888:	08000a9f 	.word	0x08000a9f
 800088c:	08000a9f 	.word	0x08000a9f
 8000890:	08000a9f 	.word	0x08000a9f
 8000894:	08000a9f 	.word	0x08000a9f
 8000898:	08000a9f 	.word	0x08000a9f
 800089c:	08000a9f 	.word	0x08000a9f
 80008a0:	08000a9f 	.word	0x08000a9f
 80008a4:	08000a9f 	.word	0x08000a9f
 80008a8:	08000a9f 	.word	0x08000a9f
 80008ac:	08000a9f 	.word	0x08000a9f
 80008b0:	08000a9f 	.word	0x08000a9f
 80008b4:	08000a9f 	.word	0x08000a9f
 80008b8:	08000a9f 	.word	0x08000a9f
 80008bc:	08000a9f 	.word	0x08000a9f
 80008c0:	08000a9f 	.word	0x08000a9f
 80008c4:	08000a9f 	.word	0x08000a9f
 80008c8:	08000a9f 	.word	0x08000a9f
 80008cc:	08000a9f 	.word	0x08000a9f
 80008d0:	08000a9f 	.word	0x08000a9f
 80008d4:	08000a9f 	.word	0x08000a9f
 80008d8:	08000a9f 	.word	0x08000a9f
 80008dc:	08000a9f 	.word	0x08000a9f
 80008e0:	08000a9f 	.word	0x08000a9f
 80008e4:	08000a9f 	.word	0x08000a9f
 80008e8:	08000a9f 	.word	0x08000a9f
 80008ec:	08000a9f 	.word	0x08000a9f
 80008f0:	08000a9f 	.word	0x08000a9f
 80008f4:	08000a9f 	.word	0x08000a9f
 80008f8:	08000a9f 	.word	0x08000a9f
 80008fc:	08000a9f 	.word	0x08000a9f
 8000900:	08000a9f 	.word	0x08000a9f
 8000904:	08000a9f 	.word	0x08000a9f
 8000908:	0800098d 	.word	0x0800098d
 800090c:	08000999 	.word	0x08000999
 8000910:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8000914:	f280 80c3 	bge.w	8000a9e <FT_CAN_ProcessData+0x48a>
 8000918:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 800091c:	f6bf ae95 	bge.w	800064a <FT_CAN_ProcessData+0x36>
 8000920:	e0bd      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
	{
		case 0x0001: //TPS
			FT_Data_Struct->tps = data;
 8000922:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			break;
 800092c:	e0b7      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0002: //MAP
			FT_Data_Struct->map = data;
 800092e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	87da      	strh	r2, [r3, #62]	; 0x3e
			break;
 8000936:	e0b2      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0003: //IAT
			FT_Data_Struct->iat = data;
 8000938:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	86da      	strh	r2, [r3, #54]	; 0x36
			break;
 8000940:	e0ad      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0004: //ECT
			FT_Data_Struct->ect = data;
 8000942:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	865a      	strh	r2, [r3, #50]	; 0x32
			break;
 800094a:	e0a8      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0005: //Oil Pressure
			FT_Data_Struct->oil_pressure = data;
 800094c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			break;
 8000956:	e0a2      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0006: //Fuel Pressure
			FT_Data_Struct->fuel_pressure = data;
 8000958:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	871a      	strh	r2, [r3, #56]	; 0x38
			break;
 8000960:	e09d      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0007: //Coolant Pressure
			FT_Data_Struct->coolant_pressure = data;
 8000962:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	869a      	strh	r2, [r3, #52]	; 0x34
			break;
 800096a:	e098      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0011: //Gear
			FT_Data_Struct->gear = data;
 800096c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	875a      	strh	r2, [r3, #58]	; 0x3a
			break;
 8000974:	e093      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0027: //Exhaust Lambda
			FT_Data_Struct->lambda = data;
 8000976:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	879a      	strh	r2, [r3, #60]	; 0x3c
			break;
 800097e:	e08e      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0042: //RPM
			FT_Data_Struct->rpm = data;
 8000980:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			break;
 800098a:	e088      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x008C: //Oil Temperature
			FT_Data_Struct->oil_temperature = data;
 800098c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			break;
 8000996:	e082      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x008D: //Pit Limit Switch
			FT_Data_Struct->pit_limiter = data;
 8000998:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			break;
 80009a2:	e07c      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
			break;
#endif

#ifdef FT_CAN_EXTRA
		case 0x0008: //Launch Mode
			FT_Data_Struct->launch_mode = data;
 80009a4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	831a      	strh	r2, [r3, #24]
			break;
 80009ac:	e077      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0009: //Battery Voltage
			FT_Data_Struct->battery_voltage = data;
 80009ae:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	805a      	strh	r2, [r3, #2]
			break;
 80009b6:	e072      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x000A: //Traction Speed
			FT_Data_Struct->traction_speed = data;
 80009b8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	845a      	strh	r2, [r3, #34]	; 0x22
			break;
 80009c0:	e06d      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x000B: //Drag Speed
			FT_Data_Struct->drag_speed = data;
 80009c2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	841a      	strh	r2, [r3, #32]
			break;
 80009ca:	e068      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x000C: //Wheel Speed FL
			FT_Data_Struct->wheel_speed_fl = data;
 80009cc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	849a      	strh	r2, [r3, #36]	; 0x24
			break;
 80009d4:	e063      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x000D: //Wheel Speed FR
			FT_Data_Struct->wheel_speed_fr = data;
 80009d6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	84da      	strh	r2, [r3, #38]	; 0x26
			break;
 80009de:	e05e      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x000E: //Wheel Speed RL
			FT_Data_Struct->wheel_speed_rl = data;
 80009e0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	851a      	strh	r2, [r3, #40]	; 0x28
			break;
 80009e8:	e059      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x000F: //Wheel Speed RR
			FT_Data_Struct->wheel_speed_rr = data;
 80009ea:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
 80009f2:	e054      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0010: //Driveshaft RPM
			FT_Data_Struct->driveshaft_rpm = data;
 80009f4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	821a      	strh	r2, [r3, #16]
			break;
 80009fc:	e04f      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0048: //2-Step
			FT_Data_Struct->two_step_signal = data;
 80009fe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	839a      	strh	r2, [r3, #28]
			break;
 8000a06:	e04a      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0049: //3-Step
			FT_Data_Struct->three_step_signal = data;
 8000a08:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	83da      	strh	r2, [r3, #30]
			break;
 8000a10:	e045      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x004A: //Burnout
			FT_Data_Struct->burnout_signal = data;
 8000a12:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	835a      	strh	r2, [r3, #26]
			break;
 8000a1a:	e040      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x004B: //Fuel Cut
			FT_Data_Struct->fuel_cut = data;
 8000a1c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	819a      	strh	r2, [r3, #12]
			break;
 8000a24:	e03b      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x004C: //Air Conditioning
			FT_Data_Struct->air_conditioning = data;
 8000a26:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	801a      	strh	r2, [r3, #0]
			break;
 8000a2e:	e036      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x004D: //ElectroFAN
			FT_Data_Struct->electro_fan = data;
 8000a30:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	811a      	strh	r2, [r3, #8]
			break;
 8000a38:	e031      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x004E: //Gear Cut
			FT_Data_Struct->gear_cut = data;
 8000a3a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	825a      	strh	r2, [r3, #18]
			break;
 8000a42:	e02c      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x004F: //Gear Retard
			FT_Data_Struct->gear_retard = data;
 8000a44:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	829a      	strh	r2, [r3, #20]
			break;
 8000a4c:	e027      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0050: //Gear Sensor Voltage
			FT_Data_Struct->gear_sensor_voltage = data;
 8000a4e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	82da      	strh	r2, [r3, #22]
			break;
 8000a56:	e022      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0051: //Lambda Meter (Average)
			FT_Data_Struct->lambda_average = data;
 8000a58:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	815a      	strh	r2, [r3, #10]
			break;
 8000a60:	e01d      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0138: //Battery Temperature
			FT_Data_Struct->battery_temperature = data;
 8000a62:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	809a      	strh	r2, [r3, #4]
			break;
 8000a6a:	e018      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x014A: //Self Dial Time
			FT_Data_Struct->self_dial = data;
 8000a6c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	861a      	strh	r2, [r3, #48]	; 0x30
			break;
 8000a74:	e013      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0150: //Total Fuel Flow
			FT_Data_Struct->total_fuel_flow = data;
 8000a76:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	81da      	strh	r2, [r3, #14]
			break;
 8000a7e:	e00e      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0151: //Brake Pressure
			FT_Data_Struct->brake_pressure = data;
 8000a80:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	80da      	strh	r2, [r3, #6]
			break;
 8000a88:	e009      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0152: //Generic Outputs State
			FT_Data_Struct->generic_outputs_state = data;
 8000a8a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	85da      	strh	r2, [r3, #46]	; 0x2e
			break;
 8000a92:	e004      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0153: //Day/Night State
			FT_Data_Struct->day_night_state = data;
 8000a94:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	859a      	strh	r2, [r3, #44]	; 0x2c
			break;
 8000a9c:	bf00      	nop
	}
#endif

	FT_CAN_ProcessCustomData(id, data);
 8000a9e:	89ba      	ldrh	r2, [r7, #12]
 8000aa0:	89fb      	ldrh	r3, [r7, #14]
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f000 f805 	bl	8000ab4 <FT_CAN_ProcessCustomData>
 8000aaa:	e000      	b.n	8000aae <FT_CAN_ProcessData+0x49a>
		return;
 8000aac:	bf00      	nop
}
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <FT_CAN_ProcessCustomData>:

__weak void FT_CAN_ProcessCustomData(uint16_t id, uint16_t data)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	460a      	mov	r2, r1
 8000abe:	80fb      	strh	r3, [r7, #6]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	80bb      	strh	r3, [r7, #4]
	UNUSED(id);
	UNUSED(data);
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <FT_CAN_ReceiveData>:

#endif

void FT_CAN_ReceiveData(uint32_t RxID, uint32_t RxLength, uint8_t* pData, FT_Data* FT_Data_Struct)
{
 8000ad0:	b5b0      	push	{r4, r5, r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	466b      	mov	r3, sp
 8000ae0:	461d      	mov	r5, r3
	uint32_t extid = (RxID & 0x1FF80000) >> 13;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	0b5a      	lsrs	r2, r3, #13
 8000ae6:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8000aea:	4013      	ands	r3, r2
 8000aec:	61bb      	str	r3, [r7, #24]

	if(		   (extid != FT_Gear_Controller)
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000af4:	d02d      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Knock_Meter)
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	f240 1241 	movw	r2, #321	; 0x141
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d028      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Boost_Controller2)
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 8000b06:	d024      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Injector_Driver)
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 8000b0e:	d020      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_WBO2_Nano)
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8000b16:	d01c      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_WBO2_Slim)
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	f240 2241 	movw	r2, #577	; 0x241
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d017      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Alcohol_O2)
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	f240 2242 	movw	r2, #578	; 0x242
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d012      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FTSpark)
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	f240 2243 	movw	r2, #579	; 0x243
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d00d      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Switchpad)
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 8000b3c:	d009      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT500)
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8000b44:	d005      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT600))
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	f240 2281 	movw	r2, #641	; 0x281
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	f040 8381 	bne.w	8001254 <FT_CAN_ReceiveData+0x784>
		return;

	uint8_t buffer[RxLength];
 8000b52:	68bc      	ldr	r4, [r7, #8]
 8000b54:	4623      	mov	r3, r4
 8000b56:	3b01      	subs	r3, #1
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	4620      	mov	r0, r4
 8000b5c:	f04f 0100 	mov.w	r1, #0
 8000b60:	f04f 0200 	mov.w	r2, #0
 8000b64:	f04f 0300 	mov.w	r3, #0
 8000b68:	00cb      	lsls	r3, r1, #3
 8000b6a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b6e:	00c2      	lsls	r2, r0, #3
 8000b70:	4620      	mov	r0, r4
 8000b72:	f04f 0100 	mov.w	r1, #0
 8000b76:	f04f 0200 	mov.w	r2, #0
 8000b7a:	f04f 0300 	mov.w	r3, #0
 8000b7e:	00cb      	lsls	r3, r1, #3
 8000b80:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b84:	00c2      	lsls	r2, r0, #3
 8000b86:	1de3      	adds	r3, r4, #7
 8000b88:	08db      	lsrs	r3, r3, #3
 8000b8a:	00db      	lsls	r3, r3, #3
 8000b8c:	ebad 0d03 	sub.w	sp, sp, r3
 8000b90:	466b      	mov	r3, sp
 8000b92:	3300      	adds	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < RxLength; i++)
 8000b96:	2300      	movs	r3, #0
 8000b98:	77fb      	strb	r3, [r7, #31]
 8000b9a:	e009      	b.n	8000bb0 <FT_CAN_ReceiveData+0xe0>
		buffer[i] = pData[i];
 8000b9c:	7ffb      	ldrb	r3, [r7, #31]
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	441a      	add	r2, r3
 8000ba2:	7ffb      	ldrb	r3, [r7, #31]
 8000ba4:	7811      	ldrb	r1, [r2, #0]
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < RxLength; i++)
 8000baa:	7ffb      	ldrb	r3, [r7, #31]
 8000bac:	3301      	adds	r3, #1
 8000bae:	77fb      	strb	r3, [r7, #31]
 8000bb0:	7ffb      	ldrb	r3, [r7, #31]
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d8f1      	bhi.n	8000b9c <FT_CAN_ReceiveData+0xcc>

	if((((RxID / 0x800) & 0x7) == 0x00) || (((RxID / 0x800) & 0x7) == 0x01))
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	0adb      	lsrs	r3, r3, #11
 8000bbc:	f003 0307 	and.w	r3, r3, #7
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d006      	beq.n	8000bd2 <FT_CAN_ReceiveData+0x102>
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	0adb      	lsrs	r3, r3, #11
 8000bc8:	f003 0307 	and.w	r3, r3, #7
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	f040 8139 	bne.w	8000e44 <FT_CAN_ReceiveData+0x374>
	{
		if((RxID & 0xFFF) == 0x600)
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bd8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000bdc:	d142      	bne.n	8000c64 <FT_CAN_ReceiveData+0x194>
		{
			FT_Data_Struct->tps  = buffer[0] << 8;
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	021b      	lsls	r3, r3, #8
 8000be4:	b21a      	sxth	r2, r3
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			FT_Data_Struct->tps |= buffer[1];
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	785b      	ldrb	r3, [r3, #1]
 8000bf6:	b21b      	sxth	r3, r3
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	b21a      	sxth	r2, r3
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			FT_Data_Struct->map  = buffer[2] << 8;
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	789b      	ldrb	r3, [r3, #2]
 8000c06:	021b      	lsls	r3, r3, #8
 8000c08:	b21a      	sxth	r2, r3
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	87da      	strh	r2, [r3, #62]	; 0x3e
			FT_Data_Struct->map |= buffer[3];
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	78db      	ldrb	r3, [r3, #3]
 8000c18:	b21b      	sxth	r3, r3
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	b21a      	sxth	r2, r3
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	87da      	strh	r2, [r3, #62]	; 0x3e
			FT_Data_Struct->iat  = buffer[4] << 8;
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	791b      	ldrb	r3, [r3, #4]
 8000c26:	021b      	lsls	r3, r3, #8
 8000c28:	b21a      	sxth	r2, r3
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	86da      	strh	r2, [r3, #54]	; 0x36
			FT_Data_Struct->iat |= buffer[5];
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	f9b3 2036 	ldrsh.w	r2, [r3, #54]	; 0x36
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	795b      	ldrb	r3, [r3, #5]
 8000c38:	b21b      	sxth	r3, r3
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	b21a      	sxth	r2, r3
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	86da      	strh	r2, [r3, #54]	; 0x36
			FT_Data_Struct->ect  = buffer[6] << 8;
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	799b      	ldrb	r3, [r3, #6]
 8000c46:	021b      	lsls	r3, r3, #8
 8000c48:	b21a      	sxth	r2, r3
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	865a      	strh	r2, [r3, #50]	; 0x32
			FT_Data_Struct->ect |= buffer[7];
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	f9b3 2032 	ldrsh.w	r2, [r3, #50]	; 0x32
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	79db      	ldrb	r3, [r3, #7]
 8000c58:	b21b      	sxth	r3, r3
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	b21a      	sxth	r2, r3
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	865a      	strh	r2, [r3, #50]	; 0x32

			return;
 8000c62:	e2f8      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}
		else if((RxID & 0xFFF) == 0x601)
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c6a:	f240 6201 	movw	r2, #1537	; 0x601
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d142      	bne.n	8000cf8 <FT_CAN_ReceiveData+0x228>
		{
			FT_Data_Struct->oil_pressure  	  = buffer[0] << 8;
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	021b      	lsls	r3, r3, #8
 8000c78:	b21a      	sxth	r2, r3
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			FT_Data_Struct->oil_pressure 	 |= buffer[1];
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	785b      	ldrb	r3, [r3, #1]
 8000c8a:	b21b      	sxth	r3, r3
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	b21a      	sxth	r2, r3
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			FT_Data_Struct->fuel_pressure 	  = buffer[2] << 8;
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	789b      	ldrb	r3, [r3, #2]
 8000c9a:	021b      	lsls	r3, r3, #8
 8000c9c:	b21a      	sxth	r2, r3
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	871a      	strh	r2, [r3, #56]	; 0x38
			FT_Data_Struct->fuel_pressure 	 |= buffer[3];
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	f9b3 2038 	ldrsh.w	r2, [r3, #56]	; 0x38
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	78db      	ldrb	r3, [r3, #3]
 8000cac:	b21b      	sxth	r3, r3
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	b21a      	sxth	r2, r3
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	871a      	strh	r2, [r3, #56]	; 0x38
			FT_Data_Struct->coolant_pressure  = buffer[4] << 8;
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	791b      	ldrb	r3, [r3, #4]
 8000cba:	021b      	lsls	r3, r3, #8
 8000cbc:	b21a      	sxth	r2, r3
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	869a      	strh	r2, [r3, #52]	; 0x34
			FT_Data_Struct->coolant_pressure |= buffer[5];
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	; 0x34
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	795b      	ldrb	r3, [r3, #5]
 8000ccc:	b21b      	sxth	r3, r3
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	b21a      	sxth	r2, r3
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	869a      	strh	r2, [r3, #52]	; 0x34
			FT_Data_Struct->gear  			  = buffer[6] << 8;
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	799b      	ldrb	r3, [r3, #6]
 8000cda:	021b      	lsls	r3, r3, #8
 8000cdc:	b21a      	sxth	r2, r3
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	875a      	strh	r2, [r3, #58]	; 0x3a
			FT_Data_Struct->gear 			 |= buffer[7];
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	f9b3 203a 	ldrsh.w	r2, [r3, #58]	; 0x3a
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	79db      	ldrb	r3, [r3, #7]
 8000cec:	b21b      	sxth	r3, r3
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	b21a      	sxth	r2, r3
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	875a      	strh	r2, [r3, #58]	; 0x3a

			return;
 8000cf6:	e2ae      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}
		else if((RxID & 0xFFF) == 0x602)
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cfe:	f240 6202 	movw	r2, #1538	; 0x602
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d146      	bne.n	8000d94 <FT_CAN_ReceiveData+0x2c4>
		{
			FT_Data_Struct->lambda  		 = buffer[0] << 8;
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	021b      	lsls	r3, r3, #8
 8000d0c:	b21a      	sxth	r2, r3
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	879a      	strh	r2, [r3, #60]	; 0x3c
			FT_Data_Struct->lambda 			|= buffer[1];
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	785b      	ldrb	r3, [r3, #1]
 8000d1c:	b21b      	sxth	r3, r3
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	b21a      	sxth	r2, r3
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	879a      	strh	r2, [r3, #60]	; 0x3c
			FT_Data_Struct->rpm  			 = buffer[2] << 8;
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	789b      	ldrb	r3, [r3, #2]
 8000d2a:	021b      	lsls	r3, r3, #8
 8000d2c:	b21a      	sxth	r2, r3
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			FT_Data_Struct->rpm 			|= buffer[3];
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	78db      	ldrb	r3, [r3, #3]
 8000d3e:	b21b      	sxth	r3, r3
 8000d40:	4313      	orrs	r3, r2
 8000d42:	b21a      	sxth	r2, r3
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			FT_Data_Struct->oil_temperature  = buffer[4] << 8;
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	791b      	ldrb	r3, [r3, #4]
 8000d4e:	021b      	lsls	r3, r3, #8
 8000d50:	b21a      	sxth	r2, r3
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			FT_Data_Struct->oil_temperature |= buffer[5];
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	795b      	ldrb	r3, [r3, #5]
 8000d62:	b21b      	sxth	r3, r3
 8000d64:	4313      	orrs	r3, r2
 8000d66:	b21a      	sxth	r2, r3
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			FT_Data_Struct->pit_limiter  	 = buffer[6] << 8;
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	799b      	ldrb	r3, [r3, #6]
 8000d72:	021b      	lsls	r3, r3, #8
 8000d74:	b21a      	sxth	r2, r3
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			FT_Data_Struct->pit_limiter 	|= buffer[7];
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	79db      	ldrb	r3, [r3, #7]
 8000d86:	b21b      	sxth	r3, r3
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	b21a      	sxth	r2, r3
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

			return;
 8000d92:	e260      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}

#ifndef FT_CAN_SIMPLE
		else if((RxID & 0xFF) == 0xFF)
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	2bff      	cmp	r3, #255	; 0xff
 8000d9a:	f040 8258 	bne.w	800124e <FT_CAN_ReceiveData+0x77e>
		{
			FT_Data_Struct->data_id  	  = buffer[0] << 8;
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	021b      	lsls	r3, r3, #8
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_id 	 |= buffer[1];
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	785b      	ldrb	r3, [r3, #1]
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_content  = buffer[2] << 8;
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	789b      	ldrb	r3, [r3, #2]
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	021b      	lsls	r3, r3, #8
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->data_content |= buffer[3];
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	78db      	ldrb	r3, [r3, #3]
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	4313      	orrs	r3, r2
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			FT_CAN_ProcessData(FT_Data_Struct);
 8000dea:	6838      	ldr	r0, [r7, #0]
 8000dec:	f7ff fc12 	bl	8000614 <FT_CAN_ProcessData>

			FT_Data_Struct->data_id  	  = buffer[4] << 8;
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	791b      	ldrb	r3, [r3, #4]
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	021b      	lsls	r3, r3, #8
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_id 	 |= buffer[5];
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	795b      	ldrb	r3, [r3, #5]
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_content  = buffer[6] << 8;
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	799b      	ldrb	r3, [r3, #6]
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	021b      	lsls	r3, r3, #8
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->data_content |= buffer[7];
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	79db      	ldrb	r3, [r3, #7]
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	4313      	orrs	r3, r2
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			FT_CAN_ProcessData(FT_Data_Struct);
 8000e3c:	6838      	ldr	r0, [r7, #0]
 8000e3e:	f7ff fbe9 	bl	8000614 <FT_CAN_ProcessData>

			return;
 8000e42:	e208      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}
	}

	else if(buffer[0] == 0xFF)
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2bff      	cmp	r3, #255	; 0xff
 8000e4a:	d129      	bne.n	8000ea0 <FT_CAN_ReceiveData+0x3d0>
	{
		FT_Data_Struct->data_id  	  = buffer[1] << 8;
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	785b      	ldrb	r3, [r3, #1]
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	021b      	lsls	r3, r3, #8
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		FT_Data_Struct->data_id 	 |= buffer[2];
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	789b      	ldrb	r3, [r3, #2]
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		FT_Data_Struct->data_content  = buffer[3] << 8;
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	78db      	ldrb	r3, [r3, #3]
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	021b      	lsls	r3, r3, #8
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		FT_Data_Struct->data_content |= buffer[4];
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	791b      	ldrb	r3, [r3, #4]
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

		FT_CAN_ProcessData(FT_Data_Struct);
 8000e98:	6838      	ldr	r0, [r7, #0]
 8000e9a:	f7ff fbbb 	bl	8000614 <FT_CAN_ProcessData>

		return;
 8000e9e:	e1da      	b.n	8001256 <FT_CAN_ReceiveData+0x786>

	//Segmented Messages
	else
	{
		//First Message
		if(buffer[0] == 0)
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d14b      	bne.n	8000f40 <FT_CAN_ReceiveData+0x470>
		{
			FT_Data_Struct->data_length   = buffer[1] << 8;
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	785b      	ldrb	r3, [r3, #1]
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	021b      	lsls	r3, r3, #8
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
			FT_Data_Struct->data_length  |= buffer[2];
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	789b      	ldrb	r3, [r3, #2]
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

			FT_Data_Struct->data_id  	  = buffer[3] << 8;
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	78db      	ldrb	r3, [r3, #3]
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	021b      	lsls	r3, r3, #8
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_id 	 |= buffer[4];
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	791b      	ldrb	r3, [r3, #4]
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	4313      	orrs	r3, r2
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_content  = buffer[5] << 8;
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	795b      	ldrb	r3, [r3, #5]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	021b      	lsls	r3, r3, #8
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->data_content |= buffer[6];
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	799b      	ldrb	r3, [r3, #6]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	4313      	orrs	r3, r2
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			FT_CAN_ProcessData(FT_Data_Struct);
 8000f1a:	6838      	ldr	r0, [r7, #0]
 8000f1c:	f7ff fb7a 	bl	8000614 <FT_CAN_ProcessData>

			if(RxLength == 8)
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	2b08      	cmp	r3, #8
 8000f24:	d107      	bne.n	8000f36 <FT_CAN_ReceiveData+0x466>
				FT_Data_Struct->data_id   = buffer[7] << 8;
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	79db      	ldrb	r3, [r3, #7]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	021b      	lsls	r3, r3, #8
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

			FT_Data_Struct->data_last_seg = 0;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 8000f3e:	e18a      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}
		//Messages 1, 5, etc
		else if((buffer[0]-1)%4 == 0)
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	3b01      	subs	r3, #1
 8000f46:	f003 0303 	and.w	r3, r3, #3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d15c      	bne.n	8001008 <FT_CAN_ReceiveData+0x538>
		{
			if(buffer[0] == FT_Data_Struct->data_last_seg + 1)
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d120      	bne.n	8000fa2 <FT_CAN_ReceiveData+0x4d2>
			{
				FT_Data_Struct->data_id 	 |= buffer[1];
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	785b      	ldrb	r3, [r3, #1]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[2] << 8;
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	789b      	ldrb	r3, [r3, #2]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	021b      	lsls	r3, r3, #8
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[3];
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	78db      	ldrb	r3, [r3, #3]
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	4313      	orrs	r3, r2
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8000f9c:	6838      	ldr	r0, [r7, #0]
 8000f9e:	f7ff fb39 	bl	8000614 <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	2b08      	cmp	r3, #8
 8000fa6:	d128      	bne.n	8000ffa <FT_CAN_ReceiveData+0x52a>
			{
				FT_Data_Struct->data_id  	  = buffer[4] << 8;
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	791b      	ldrb	r3, [r3, #4]
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	021b      	lsls	r3, r3, #8
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[5];
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	795b      	ldrb	r3, [r3, #5]
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[6] << 8;
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	799b      	ldrb	r3, [r3, #6]
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[7];
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	79db      	ldrb	r3, [r3, #7]
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	4313      	orrs	r3, r2
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8000ff4:	6838      	ldr	r0, [r7, #0]
 8000ff6:	f7ff fb0d 	bl	8000614 <FT_CAN_ProcessData>
			}

			FT_Data_Struct->data_last_seg 	  = buffer[0];
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 8001006:	e126      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}
		//messages 2, 6, etc
		else if((buffer[0]-2)%4 == 0)
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	3b02      	subs	r3, #2
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	2b00      	cmp	r3, #0
 8001014:	d150      	bne.n	80010b8 <FT_CAN_ReceiveData+0x5e8>
		{
			if(RxLength >= 5)
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	2b04      	cmp	r3, #4
 800101a:	d928      	bls.n	800106e <FT_CAN_ReceiveData+0x59e>
			{
				FT_Data_Struct->data_id  	  = buffer[1] << 8;
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	785b      	ldrb	r3, [r3, #1]
 8001020:	b29b      	uxth	r3, r3
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	b29a      	uxth	r2, r3
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[2];
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	789b      	ldrb	r3, [r3, #2]
 8001036:	b29b      	uxth	r3, r3
 8001038:	4313      	orrs	r3, r2
 800103a:	b29a      	uxth	r2, r3
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[3] << 8;
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	78db      	ldrb	r3, [r3, #3]
 8001046:	b29b      	uxth	r3, r3
 8001048:	021b      	lsls	r3, r3, #8
 800104a:	b29a      	uxth	r2, r3
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[4];
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	791b      	ldrb	r3, [r3, #4]
 800105c:	b29b      	uxth	r3, r3
 800105e:	4313      	orrs	r3, r2
 8001060:	b29a      	uxth	r2, r3
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8001068:	6838      	ldr	r0, [r7, #0]
 800106a:	f7ff fad3 	bl	8000614 <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	2b08      	cmp	r3, #8
 8001072:	d11a      	bne.n	80010aa <FT_CAN_ReceiveData+0x5da>
			{
				FT_Data_Struct->data_id  	 = buffer[5] << 8;
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	795b      	ldrb	r3, [r3, #5]
 8001078:	b29b      	uxth	r3, r3
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	b29a      	uxth	r2, r3
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	|= buffer[6];
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	799b      	ldrb	r3, [r3, #6]
 800108e:	b29b      	uxth	r3, r3
 8001090:	4313      	orrs	r3, r2
 8001092:	b29a      	uxth	r2, r3
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content = buffer[7] << 8;
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	79db      	ldrb	r3, [r3, #7]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			}

			FT_Data_Struct->data_last_seg 	 = buffer[0];
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 80010b6:	e0ce      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}
		//Messages 3, 7, etc
		else if((buffer[0]-3)%4 == 0)
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	3b03      	subs	r3, #3
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d15f      	bne.n	8001186 <FT_CAN_ReceiveData+0x6b6>
		{
			if(buffer[0] == FT_Data_Struct->data_last_seg + 1)
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	461a      	mov	r2, r3
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80010d2:	3301      	adds	r3, #1
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d10d      	bne.n	80010f4 <FT_CAN_ReceiveData+0x624>
			{
				FT_Data_Struct->data_content |= buffer[1];
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	785b      	ldrb	r3, [r3, #1]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 80010ee:	6838      	ldr	r0, [r7, #0]
 80010f0:	f7ff fa90 	bl	8000614 <FT_CAN_ProcessData>
			}

			if(RxLength >= 6)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	2b05      	cmp	r3, #5
 80010f8:	d928      	bls.n	800114c <FT_CAN_ReceiveData+0x67c>
			{
				FT_Data_Struct->data_id  	  = buffer[2] << 8;
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	789b      	ldrb	r3, [r3, #2]
 80010fe:	b29b      	uxth	r3, r3
 8001100:	021b      	lsls	r3, r3, #8
 8001102:	b29a      	uxth	r2, r3
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[3];
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	78db      	ldrb	r3, [r3, #3]
 8001114:	b29b      	uxth	r3, r3
 8001116:	4313      	orrs	r3, r2
 8001118:	b29a      	uxth	r2, r3
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[4] << 8;
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	791b      	ldrb	r3, [r3, #4]
 8001124:	b29b      	uxth	r3, r3
 8001126:	021b      	lsls	r3, r3, #8
 8001128:	b29a      	uxth	r2, r3
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[5];
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	795b      	ldrb	r3, [r3, #5]
 800113a:	b29b      	uxth	r3, r3
 800113c:	4313      	orrs	r3, r2
 800113e:	b29a      	uxth	r2, r3
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8001146:	6838      	ldr	r0, [r7, #0]
 8001148:	f7ff fa64 	bl	8000614 <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	2b08      	cmp	r3, #8
 8001150:	d112      	bne.n	8001178 <FT_CAN_ReceiveData+0x6a8>
			{
				FT_Data_Struct->data_id 	  = buffer[6] << 8;
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	799b      	ldrb	r3, [r3, #6]
 8001156:	b29b      	uxth	r3, r3
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	b29a      	uxth	r2, r3
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[7];
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	79db      	ldrb	r3, [r3, #7]
 800116c:	b29b      	uxth	r3, r3
 800116e:	4313      	orrs	r3, r2
 8001170:	b29a      	uxth	r2, r3
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			}

			FT_Data_Struct->data_last_seg 	  = buffer[0];
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b29a      	uxth	r2, r3
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 8001184:	e067      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}
		//Messages 4, 8, etc
		else if(buffer[0]%4 == 0)
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	f003 0303 	and.w	r3, r3, #3
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b00      	cmp	r3, #0
 8001192:	d15d      	bne.n	8001250 <FT_CAN_ReceiveData+0x780>
		{
			if(buffer[0] == FT_Data_Struct->data_last_seg + 1)
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80011a0:	3301      	adds	r3, #1
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d115      	bne.n	80011d2 <FT_CAN_ReceiveData+0x702>
			{
				FT_Data_Struct->data_content  = buffer[1] << 8;
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	785b      	ldrb	r3, [r3, #1]
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[2];
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	789b      	ldrb	r3, [r3, #2]
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	4313      	orrs	r3, r2
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 80011cc:	6838      	ldr	r0, [r7, #0]
 80011ce:	f7ff fa21 	bl	8000614 <FT_CAN_ProcessData>
			}

			if(RxLength >= 7)
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	2b06      	cmp	r3, #6
 80011d6:	d928      	bls.n	800122a <FT_CAN_ReceiveData+0x75a>
			{
				FT_Data_Struct->data_id  	  = buffer[3] << 8;
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	78db      	ldrb	r3, [r3, #3]
 80011dc:	b29b      	uxth	r3, r3
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[4];
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	791b      	ldrb	r3, [r3, #4]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	4313      	orrs	r3, r2
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[5] << 8;
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	795b      	ldrb	r3, [r3, #5]
 8001202:	b29b      	uxth	r3, r3
 8001204:	021b      	lsls	r3, r3, #8
 8001206:	b29a      	uxth	r2, r3
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[6];
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	799b      	ldrb	r3, [r3, #6]
 8001218:	b29b      	uxth	r3, r3
 800121a:	4313      	orrs	r3, r2
 800121c:	b29a      	uxth	r2, r3
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8001224:	6838      	ldr	r0, [r7, #0]
 8001226:	f7ff f9f5 	bl	8000614 <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	2b08      	cmp	r3, #8
 800122e:	d107      	bne.n	8001240 <FT_CAN_ReceiveData+0x770>
			FT_Data_Struct->data_id 	  	  = buffer[7] << 8;
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	79db      	ldrb	r3, [r3, #7]
 8001234:	b29b      	uxth	r3, r3
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	b29a      	uxth	r2, r3
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

			FT_Data_Struct->data_last_seg 	  = buffer[0];
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	b29a      	uxth	r2, r3
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 800124c:	e003      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		if((RxID & 0xFFF) == 0x600)
 800124e:	bf00      	nop
 8001250:	46ad      	mov	sp, r5
 8001252:	e001      	b.n	8001258 <FT_CAN_ReceiveData+0x788>
		return;
 8001254:	bf00      	nop
 8001256:	46ad      	mov	sp, r5
		}
#endif
	}
}
 8001258:	3720      	adds	r7, #32
 800125a:	46bd      	mov	sp, r7
 800125c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001266:	f005 f91b 	bl	80064a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800126a:	f000 f90b 	bl	8001484 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800126e:	f000 f981 	bl	8001574 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001272:	f000 fc21 	bl	8001ab8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001276:	f000 fbe7 	bl	8001a48 <MX_DMA_Init>
  MX_IWDG_Init();
 800127a:	f000 fb45 	bl	8001908 <MX_IWDG_Init>
  MX_SDIO_SD_Init();
 800127e:	f000 fb8d 	bl	800199c <MX_SDIO_SD_Init>
  MX_ADC1_Init();
 8001282:	f000 f99f 	bl	80015c4 <MX_ADC1_Init>
  MX_RTC_Init();
 8001286:	f000 fb59 	bl	800193c <MX_RTC_Init>
  MX_FATFS_Init();
 800128a:	f00e fe9d 	bl	800ffc8 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 800128e:	f014 ff77 	bl	8016180 <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 8001292:	f000 fa3d 	bl	8001710 <MX_ADC2_Init>
  MX_CAN1_Init();
 8001296:	f000 fad3 	bl	8001840 <MX_CAN1_Init>
  MX_I2C1_Init();
 800129a:	f000 fb07 	bl	80018ac <MX_I2C1_Init>
  MX_TIM7_Init();
 800129e:	f000 fb9d 	bl	80019dc <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  Principal_Init(&hcan1, &hi2c1, &htim7);
 80012a2:	4a67      	ldr	r2, [pc, #412]	; (8001440 <main+0x1e0>)
 80012a4:	4967      	ldr	r1, [pc, #412]	; (8001444 <main+0x1e4>)
 80012a6:	4868      	ldr	r0, [pc, #416]	; (8001448 <main+0x1e8>)
 80012a8:	f003 fd06 	bl	8004cb8 <Principal_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Checks if data is being saved and starts saving if conditions are met
	  if(Flag_Datalogger == DL_No_Save)
 80012ac:	4b67      	ldr	r3, [pc, #412]	; (800144c <main+0x1ec>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d109      	bne.n	80012c8 <main+0x68>
		  Principal_Datalogger_Start(&Date, &Time, Dir_String, Log_String, &Dir_Struct, &File_Struct);
 80012b4:	4b66      	ldr	r3, [pc, #408]	; (8001450 <main+0x1f0>)
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	4b66      	ldr	r3, [pc, #408]	; (8001454 <main+0x1f4>)
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	4b66      	ldr	r3, [pc, #408]	; (8001458 <main+0x1f8>)
 80012be:	4a67      	ldr	r2, [pc, #412]	; (800145c <main+0x1fc>)
 80012c0:	4967      	ldr	r1, [pc, #412]	; (8001460 <main+0x200>)
 80012c2:	4868      	ldr	r0, [pc, #416]	; (8001464 <main+0x204>)
 80012c4:	f004 f94e 	bl	8005564 <Principal_Datalogger_Start>

	  //Checks card detect pin level change for datalogger initialization or deinitialization
	  Principal_Card_Detection(&Fatfs_Struct, &Dir_Struct, &File_Struct);
 80012c8:	4a61      	ldr	r2, [pc, #388]	; (8001450 <main+0x1f0>)
 80012ca:	4962      	ldr	r1, [pc, #392]	; (8001454 <main+0x1f4>)
 80012cc:	4866      	ldr	r0, [pc, #408]	; (8001468 <main+0x208>)
 80012ce:	f004 fb4b 	bl	8005968 <Principal_Card_Detection>

	  //Checks USB cable connection, if connected will disable logging
	  if((HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_SET) && (Flag_Datalogger != DL_Save))
 80012d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d6:	4865      	ldr	r0, [pc, #404]	; (800146c <main+0x20c>)
 80012d8:	f007 fa76 	bl	80087c8 <HAL_GPIO_ReadPin>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d107      	bne.n	80012f2 <main+0x92>
 80012e2:	4b5a      	ldr	r3, [pc, #360]	; (800144c <main+0x1ec>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d003      	beq.n	80012f2 <main+0x92>
		  Principal_Datalogger_Finish(&Dir_Struct, &File_Struct);
 80012ea:	4959      	ldr	r1, [pc, #356]	; (8001450 <main+0x1f0>)
 80012ec:	4859      	ldr	r0, [pc, #356]	; (8001454 <main+0x1f4>)
 80012ee:	f004 fa17 	bl	8005720 <Principal_Datalogger_Finish>

	  //Analog inputs 1-4 CAN message
	  if((Acc_Msg[Analog_1_4] >= Per_Msg[Analog_1_4]) && (Per_Msg[Analog_1_4] != 0))
 80012f2:	4b5f      	ldr	r3, [pc, #380]	; (8001470 <main+0x210>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a5f      	ldr	r2, [pc, #380]	; (8001474 <main+0x214>)
 80012f8:	8812      	ldrh	r2, [r2, #0]
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d30e      	bcc.n	800131c <main+0xbc>
 80012fe:	4b5d      	ldr	r3, [pc, #372]	; (8001474 <main+0x214>)
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00a      	beq.n	800131c <main+0xbc>
	  {
		  Acc_Msg[Analog_1_4] -= Per_Msg[Analog_1_4];
 8001306:	4b5a      	ldr	r3, [pc, #360]	; (8001470 <main+0x210>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a5a      	ldr	r2, [pc, #360]	; (8001474 <main+0x214>)
 800130c:	8812      	ldrh	r2, [r2, #0]
 800130e:	1a9b      	subs	r3, r3, r2
 8001310:	4a57      	ldr	r2, [pc, #348]	; (8001470 <main+0x210>)
 8001312:	6013      	str	r3, [r2, #0]
		  Principal_Transmit_Msg(&hcan1, Analog_1_4);
 8001314:	2100      	movs	r1, #0
 8001316:	484c      	ldr	r0, [pc, #304]	; (8001448 <main+0x1e8>)
 8001318:	f002 f968 	bl	80035ec <Principal_Transmit_Msg>
	  }

	  //Analog inputs 5-8 CAN message
	  if((Acc_Msg[Analog_5_8] >= Per_Msg[Analog_5_8]) && (Per_Msg[Analog_5_8] != 0))
 800131c:	4b54      	ldr	r3, [pc, #336]	; (8001470 <main+0x210>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	4a54      	ldr	r2, [pc, #336]	; (8001474 <main+0x214>)
 8001322:	8852      	ldrh	r2, [r2, #2]
 8001324:	4293      	cmp	r3, r2
 8001326:	d30e      	bcc.n	8001346 <main+0xe6>
 8001328:	4b52      	ldr	r3, [pc, #328]	; (8001474 <main+0x214>)
 800132a:	885b      	ldrh	r3, [r3, #2]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d00a      	beq.n	8001346 <main+0xe6>
	  {
		  Acc_Msg[Analog_5_8] -= Per_Msg[Analog_5_8];
 8001330:	4b4f      	ldr	r3, [pc, #316]	; (8001470 <main+0x210>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	4a4f      	ldr	r2, [pc, #316]	; (8001474 <main+0x214>)
 8001336:	8852      	ldrh	r2, [r2, #2]
 8001338:	1a9b      	subs	r3, r3, r2
 800133a:	4a4d      	ldr	r2, [pc, #308]	; (8001470 <main+0x210>)
 800133c:	6053      	str	r3, [r2, #4]
		  Principal_Transmit_Msg(&hcan1, Analog_5_8);
 800133e:	2101      	movs	r1, #1
 8001340:	4841      	ldr	r0, [pc, #260]	; (8001448 <main+0x1e8>)
 8001342:	f002 f953 	bl	80035ec <Principal_Transmit_Msg>
	  }

	  //Analog inputs 9-12 CAN message
	  if((Acc_Msg[Analog_9_12] >= Per_Msg[Analog_9_12]) && (Per_Msg[Analog_9_12] != 0))
 8001346:	4b4a      	ldr	r3, [pc, #296]	; (8001470 <main+0x210>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	4a4a      	ldr	r2, [pc, #296]	; (8001474 <main+0x214>)
 800134c:	8892      	ldrh	r2, [r2, #4]
 800134e:	4293      	cmp	r3, r2
 8001350:	d30e      	bcc.n	8001370 <main+0x110>
 8001352:	4b48      	ldr	r3, [pc, #288]	; (8001474 <main+0x214>)
 8001354:	889b      	ldrh	r3, [r3, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00a      	beq.n	8001370 <main+0x110>
	  {
		  Acc_Msg[Analog_9_12] -= Per_Msg[Analog_9_12];
 800135a:	4b45      	ldr	r3, [pc, #276]	; (8001470 <main+0x210>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	4a45      	ldr	r2, [pc, #276]	; (8001474 <main+0x214>)
 8001360:	8892      	ldrh	r2, [r2, #4]
 8001362:	1a9b      	subs	r3, r3, r2
 8001364:	4a42      	ldr	r2, [pc, #264]	; (8001470 <main+0x210>)
 8001366:	6093      	str	r3, [r2, #8]
		  Principal_Transmit_Msg(&hcan1, Analog_9_12);
 8001368:	2102      	movs	r1, #2
 800136a:	4837      	ldr	r0, [pc, #220]	; (8001448 <main+0x1e8>)
 800136c:	f002 f93e 	bl	80035ec <Principal_Transmit_Msg>
	  }

	  //RTC, both date and time
	  if((Acc_Msg[RTC_Msg] >= Per_Msg[RTC_Msg]) && (Per_Msg[RTC_Msg] != 0))
 8001370:	4b3f      	ldr	r3, [pc, #252]	; (8001470 <main+0x210>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	4a3f      	ldr	r2, [pc, #252]	; (8001474 <main+0x214>)
 8001376:	88d2      	ldrh	r2, [r2, #6]
 8001378:	4293      	cmp	r3, r2
 800137a:	d30e      	bcc.n	800139a <main+0x13a>
 800137c:	4b3d      	ldr	r3, [pc, #244]	; (8001474 <main+0x214>)
 800137e:	88db      	ldrh	r3, [r3, #6]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d00a      	beq.n	800139a <main+0x13a>
	  {
		  Acc_Msg[RTC_Msg] -= Per_Msg[RTC_Msg];
 8001384:	4b3a      	ldr	r3, [pc, #232]	; (8001470 <main+0x210>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	4a3a      	ldr	r2, [pc, #232]	; (8001474 <main+0x214>)
 800138a:	88d2      	ldrh	r2, [r2, #6]
 800138c:	1a9b      	subs	r3, r3, r2
 800138e:	4a38      	ldr	r2, [pc, #224]	; (8001470 <main+0x210>)
 8001390:	60d3      	str	r3, [r2, #12]
		  Principal_Transmit_Msg(&hcan1, RTC_Msg);
 8001392:	2103      	movs	r1, #3
 8001394:	482c      	ldr	r0, [pc, #176]	; (8001448 <main+0x1e8>)
 8001396:	f002 f929 	bl	80035ec <Principal_Transmit_Msg>
	  }

	  //Inputs and datalogger verify CAN message
	  if((Acc_Msg[Verify_Msg] >= Per_Msg[Verify_Msg]) && (Per_Msg[Verify_Msg] != 0))
 800139a:	4b35      	ldr	r3, [pc, #212]	; (8001470 <main+0x210>)
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	4a35      	ldr	r2, [pc, #212]	; (8001474 <main+0x214>)
 80013a0:	8912      	ldrh	r2, [r2, #8]
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d30e      	bcc.n	80013c4 <main+0x164>
 80013a6:	4b33      	ldr	r3, [pc, #204]	; (8001474 <main+0x214>)
 80013a8:	891b      	ldrh	r3, [r3, #8]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00a      	beq.n	80013c4 <main+0x164>
	  {
		  Acc_Msg[Verify_Msg] -= Per_Msg[Verify_Msg];
 80013ae:	4b30      	ldr	r3, [pc, #192]	; (8001470 <main+0x210>)
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	4a30      	ldr	r2, [pc, #192]	; (8001474 <main+0x214>)
 80013b4:	8912      	ldrh	r2, [r2, #8]
 80013b6:	1a9b      	subs	r3, r3, r2
 80013b8:	4a2d      	ldr	r2, [pc, #180]	; (8001470 <main+0x210>)
 80013ba:	6113      	str	r3, [r2, #16]
		  Principal_Transmit_Msg(&hcan1, Verify_Msg);
 80013bc:	2104      	movs	r1, #4
 80013be:	4822      	ldr	r0, [pc, #136]	; (8001448 <main+0x1e8>)
 80013c0:	f002 f914 	bl	80035ec <Principal_Transmit_Msg>
	  }

	  //ECU saved data (no transmission)
	  if((Acc_Msg[ECU_Save] >= Per_Msg[ECU_Save]) && (Per_Msg[ECU_Save] != 0))
 80013c4:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <main+0x210>)
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	4a2a      	ldr	r2, [pc, #168]	; (8001474 <main+0x214>)
 80013ca:	8952      	ldrh	r2, [r2, #10]
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d30e      	bcc.n	80013ee <main+0x18e>
 80013d0:	4b28      	ldr	r3, [pc, #160]	; (8001474 <main+0x214>)
 80013d2:	895b      	ldrh	r3, [r3, #10]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d00a      	beq.n	80013ee <main+0x18e>
	  {
		  Acc_Msg[ECU_Save] -= Per_Msg[ECU_Save];
 80013d8:	4b25      	ldr	r3, [pc, #148]	; (8001470 <main+0x210>)
 80013da:	695b      	ldr	r3, [r3, #20]
 80013dc:	4a25      	ldr	r2, [pc, #148]	; (8001474 <main+0x214>)
 80013de:	8952      	ldrh	r2, [r2, #10]
 80013e0:	1a9b      	subs	r3, r3, r2
 80013e2:	4a23      	ldr	r2, [pc, #140]	; (8001470 <main+0x210>)
 80013e4:	6153      	str	r3, [r2, #20]
		  Principal_Transmit_Msg(&hcan1, ECU_Save);
 80013e6:	2105      	movs	r1, #5
 80013e8:	4817      	ldr	r0, [pc, #92]	; (8001448 <main+0x1e8>)
 80013ea:	f002 f8ff 	bl	80035ec <Principal_Transmit_Msg>
	  }

	  //PDM saved data (no transmission)
	  if((Acc_Msg[PDM_Save] >= Per_Msg[PDM_Save]) && (Per_Msg[PDM_Save] != 0))
 80013ee:	4b20      	ldr	r3, [pc, #128]	; (8001470 <main+0x210>)
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	4a20      	ldr	r2, [pc, #128]	; (8001474 <main+0x214>)
 80013f4:	8992      	ldrh	r2, [r2, #12]
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d30e      	bcc.n	8001418 <main+0x1b8>
 80013fa:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <main+0x214>)
 80013fc:	899b      	ldrh	r3, [r3, #12]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d00a      	beq.n	8001418 <main+0x1b8>
	  {
		  Acc_Msg[PDM_Save] -= Per_Msg[PDM_Save];
 8001402:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <main+0x210>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	4a1b      	ldr	r2, [pc, #108]	; (8001474 <main+0x214>)
 8001408:	8992      	ldrh	r2, [r2, #12]
 800140a:	1a9b      	subs	r3, r3, r2
 800140c:	4a18      	ldr	r2, [pc, #96]	; (8001470 <main+0x210>)
 800140e:	6193      	str	r3, [r2, #24]
		  Principal_Transmit_Msg(&hcan1, PDM_Save);
 8001410:	2106      	movs	r1, #6
 8001412:	480d      	ldr	r0, [pc, #52]	; (8001448 <main+0x1e8>)
 8001414:	f002 f8ea 	bl	80035ec <Principal_Transmit_Msg>
	  }

	  if((Verify != 0) && (Verify_CAN != 0) && (Flag_Datalogger != DL_Error))
 8001418:	4b17      	ldr	r3, [pc, #92]	; (8001478 <main+0x218>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	f43f af45 	beq.w	80012ac <main+0x4c>
 8001422:	4b16      	ldr	r3, [pc, #88]	; (800147c <main+0x21c>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	f43f af40 	beq.w	80012ac <main+0x4c>
 800142c:	4b07      	ldr	r3, [pc, #28]	; (800144c <main+0x1ec>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b04      	cmp	r3, #4
 8001432:	f43f af3b 	beq.w	80012ac <main+0x4c>
		  HAL_IWDG_Refresh(&hiwdg);
 8001436:	4812      	ldr	r0, [pc, #72]	; (8001480 <main+0x220>)
 8001438:	f008 fa01 	bl	800983e <HAL_IWDG_Refresh>
	  if(Flag_Datalogger == DL_No_Save)
 800143c:	e736      	b.n	80012ac <main+0x4c>
 800143e:	bf00      	nop
 8001440:	20002dcc 	.word	0x20002dcc
 8001444:	20000768 	.word	0x20000768
 8001448:	20002d2c 	.word	0x20002d2c
 800144c:	20001bd0 	.word	0x20001bd0
 8001450:	20001c84 	.word	0x20001c84
 8001454:	20001a64 	.word	0x20001a64
 8001458:	20002d64 	.word	0x20002d64
 800145c:	200009cc 	.word	0x200009cc
 8001460:	20002cb0 	.word	0x20002cb0
 8001464:	20001a5c 	.word	0x20001a5c
 8001468:	200009d8 	.word	0x200009d8
 800146c:	40020000 	.word	0x40020000
 8001470:	20001c60 	.word	0x20001c60
 8001474:	20002e7c 	.word	0x20002e7c
 8001478:	20002e78 	.word	0x20002e78
 800147c:	20001a58 	.word	0x20001a58
 8001480:	200007c0 	.word	0x200007c0

08001484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b094      	sub	sp, #80	; 0x50
 8001488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	2234      	movs	r2, #52	; 0x34
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f015 fbf2 	bl	8016c7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001498:	f107 0308 	add.w	r3, r7, #8
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a8:	2300      	movs	r3, #0
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	4b2f      	ldr	r3, [pc, #188]	; (800156c <SystemClock_Config+0xe8>)
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	4a2e      	ldr	r2, [pc, #184]	; (800156c <SystemClock_Config+0xe8>)
 80014b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b6:	6413      	str	r3, [r2, #64]	; 0x40
 80014b8:	4b2c      	ldr	r3, [pc, #176]	; (800156c <SystemClock_Config+0xe8>)
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014c4:	2300      	movs	r3, #0
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	4b29      	ldr	r3, [pc, #164]	; (8001570 <SystemClock_Config+0xec>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a28      	ldr	r2, [pc, #160]	; (8001570 <SystemClock_Config+0xec>)
 80014ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	4b26      	ldr	r3, [pc, #152]	; (8001570 <SystemClock_Config+0xec>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014dc:	603b      	str	r3, [r7, #0]
 80014de:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 80014e0:	230d      	movs	r3, #13
 80014e2:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014ea:	2301      	movs	r3, #1
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80014ee:	2301      	movs	r3, #1
 80014f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f2:	2302      	movs	r3, #2
 80014f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014fc:	2308      	movs	r3, #8
 80014fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001500:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001504:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001506:	2302      	movs	r3, #2
 8001508:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800150a:	2306      	movs	r3, #6
 800150c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800150e:	2302      	movs	r3, #2
 8001510:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001512:	f107 031c 	add.w	r3, r7, #28
 8001516:	4618      	mov	r0, r3
 8001518:	f00a f9d0 	bl	800b8bc <HAL_RCC_OscConfig>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001522:	f000 fb6f 	bl	8001c04 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001526:	f009 fb97 	bl	800ac58 <HAL_PWREx_EnableOverDrive>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001530:	f000 fb68 	bl	8001c04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001534:	230f      	movs	r3, #15
 8001536:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001538:	2302      	movs	r3, #2
 800153a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800153c:	2300      	movs	r3, #0
 800153e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001540:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001544:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001546:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800154a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800154c:	f107 0308 	add.w	r3, r7, #8
 8001550:	2105      	movs	r1, #5
 8001552:	4618      	mov	r0, r3
 8001554:	f009 fbd0 	bl	800acf8 <HAL_RCC_ClockConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <SystemClock_Config+0xde>
  {
    Error_Handler();
 800155e:	f000 fb51 	bl	8001c04 <Error_Handler>
  }
}
 8001562:	bf00      	nop
 8001564:	3750      	adds	r7, #80	; 0x50
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800
 8001570:	40007000 	.word	0x40007000

08001574 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b098      	sub	sp, #96	; 0x60
 8001578:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	225c      	movs	r2, #92	; 0x5c
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f015 fb7b 	bl	8016c7c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8001586:	f44f 7340 	mov.w	r3, #768	; 0x300
 800158a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 8;
 800158c:	2308      	movs	r3, #8
 800158e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001590:	23c0      	movs	r3, #192	; 0xc0
 8001592:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001594:	2302      	movs	r3, #2
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8001598:	2304      	movs	r3, #4
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800159c:	2301      	movs	r3, #1
 800159e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 80015a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80015a4:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80015a6:	2300      	movs	r3, #0
 80015a8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	4618      	mov	r0, r3
 80015ae:	f009 fca9 	bl	800af04 <HAL_RCCEx_PeriphCLKConfig>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <PeriphCommonClock_Config+0x48>
  {
    Error_Handler();
 80015b8:	f000 fb24 	bl	8001c04 <Error_Handler>
  }
}
 80015bc:	bf00      	nop
 80015be:	3760      	adds	r7, #96	; 0x60
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015ca:	463b      	mov	r3, r7
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015d6:	4b4b      	ldr	r3, [pc, #300]	; (8001704 <MX_ADC1_Init+0x140>)
 80015d8:	4a4b      	ldr	r2, [pc, #300]	; (8001708 <MX_ADC1_Init+0x144>)
 80015da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015dc:	4b49      	ldr	r3, [pc, #292]	; (8001704 <MX_ADC1_Init+0x140>)
 80015de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015e4:	4b47      	ldr	r3, [pc, #284]	; (8001704 <MX_ADC1_Init+0x140>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80015ea:	4b46      	ldr	r3, [pc, #280]	; (8001704 <MX_ADC1_Init+0x140>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015f0:	4b44      	ldr	r3, [pc, #272]	; (8001704 <MX_ADC1_Init+0x140>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015f6:	4b43      	ldr	r3, [pc, #268]	; (8001704 <MX_ADC1_Init+0x140>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015fe:	4b41      	ldr	r3, [pc, #260]	; (8001704 <MX_ADC1_Init+0x140>)
 8001600:	2200      	movs	r2, #0
 8001602:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001604:	4b3f      	ldr	r3, [pc, #252]	; (8001704 <MX_ADC1_Init+0x140>)
 8001606:	4a41      	ldr	r2, [pc, #260]	; (800170c <MX_ADC1_Init+0x148>)
 8001608:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800160a:	4b3e      	ldr	r3, [pc, #248]	; (8001704 <MX_ADC1_Init+0x140>)
 800160c:	2200      	movs	r2, #0
 800160e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 8001610:	4b3c      	ldr	r3, [pc, #240]	; (8001704 <MX_ADC1_Init+0x140>)
 8001612:	2207      	movs	r2, #7
 8001614:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001616:	4b3b      	ldr	r3, [pc, #236]	; (8001704 <MX_ADC1_Init+0x140>)
 8001618:	2201      	movs	r2, #1
 800161a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800161e:	4b39      	ldr	r3, [pc, #228]	; (8001704 <MX_ADC1_Init+0x140>)
 8001620:	2201      	movs	r2, #1
 8001622:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001624:	4837      	ldr	r0, [pc, #220]	; (8001704 <MX_ADC1_Init+0x140>)
 8001626:	f004 ffd1 	bl	80065cc <HAL_ADC_Init>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001630:	f000 fae8 	bl	8001c04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001634:	2306      	movs	r3, #6
 8001636:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001638:	2301      	movs	r3, #1
 800163a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800163c:	2307      	movs	r3, #7
 800163e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001640:	463b      	mov	r3, r7
 8001642:	4619      	mov	r1, r3
 8001644:	482f      	ldr	r0, [pc, #188]	; (8001704 <MX_ADC1_Init+0x140>)
 8001646:	f005 f933 	bl	80068b0 <HAL_ADC_ConfigChannel>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001650:	f000 fad8 	bl	8001c04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001654:	2307      	movs	r3, #7
 8001656:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001658:	2302      	movs	r3, #2
 800165a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800165c:	463b      	mov	r3, r7
 800165e:	4619      	mov	r1, r3
 8001660:	4828      	ldr	r0, [pc, #160]	; (8001704 <MX_ADC1_Init+0x140>)
 8001662:	f005 f925 	bl	80068b0 <HAL_ADC_ConfigChannel>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800166c:	f000 faca 	bl	8001c04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001670:	230e      	movs	r3, #14
 8001672:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001674:	2303      	movs	r3, #3
 8001676:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001678:	463b      	mov	r3, r7
 800167a:	4619      	mov	r1, r3
 800167c:	4821      	ldr	r0, [pc, #132]	; (8001704 <MX_ADC1_Init+0x140>)
 800167e:	f005 f917 	bl	80068b0 <HAL_ADC_ConfigChannel>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001688:	f000 fabc 	bl	8001c04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800168c:	230f      	movs	r3, #15
 800168e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001690:	2304      	movs	r3, #4
 8001692:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001694:	463b      	mov	r3, r7
 8001696:	4619      	mov	r1, r3
 8001698:	481a      	ldr	r0, [pc, #104]	; (8001704 <MX_ADC1_Init+0x140>)
 800169a:	f005 f909 	bl	80068b0 <HAL_ADC_ConfigChannel>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80016a4:	f000 faae 	bl	8001c04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80016a8:	2308      	movs	r3, #8
 80016aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80016ac:	2305      	movs	r3, #5
 80016ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016b0:	463b      	mov	r3, r7
 80016b2:	4619      	mov	r1, r3
 80016b4:	4813      	ldr	r0, [pc, #76]	; (8001704 <MX_ADC1_Init+0x140>)
 80016b6:	f005 f8fb 	bl	80068b0 <HAL_ADC_ConfigChannel>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80016c0:	f000 faa0 	bl	8001c04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80016c4:	2309      	movs	r3, #9
 80016c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80016c8:	2306      	movs	r3, #6
 80016ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016cc:	463b      	mov	r3, r7
 80016ce:	4619      	mov	r1, r3
 80016d0:	480c      	ldr	r0, [pc, #48]	; (8001704 <MX_ADC1_Init+0x140>)
 80016d2:	f005 f8ed 	bl	80068b0 <HAL_ADC_ConfigChannel>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80016dc:	f000 fa92 	bl	8001c04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 80016e0:	2312      	movs	r3, #18
 80016e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80016e4:	2307      	movs	r3, #7
 80016e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016e8:	463b      	mov	r3, r7
 80016ea:	4619      	mov	r1, r3
 80016ec:	4805      	ldr	r0, [pc, #20]	; (8001704 <MX_ADC1_Init+0x140>)
 80016ee:	f005 f8df 	bl	80068b0 <HAL_ADC_ConfigChannel>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80016f8:	f000 fa84 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016fc:	bf00      	nop
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20001a94 	.word	0x20001a94
 8001708:	40012000 	.word	0x40012000
 800170c:	0f000001 	.word	0x0f000001

08001710 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001716:	463b      	mov	r3, r7
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001722:	4b44      	ldr	r3, [pc, #272]	; (8001834 <MX_ADC2_Init+0x124>)
 8001724:	4a44      	ldr	r2, [pc, #272]	; (8001838 <MX_ADC2_Init+0x128>)
 8001726:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001728:	4b42      	ldr	r3, [pc, #264]	; (8001834 <MX_ADC2_Init+0x124>)
 800172a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800172e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001730:	4b40      	ldr	r3, [pc, #256]	; (8001834 <MX_ADC2_Init+0x124>)
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8001736:	4b3f      	ldr	r3, [pc, #252]	; (8001834 <MX_ADC2_Init+0x124>)
 8001738:	2201      	movs	r2, #1
 800173a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800173c:	4b3d      	ldr	r3, [pc, #244]	; (8001834 <MX_ADC2_Init+0x124>)
 800173e:	2201      	movs	r2, #1
 8001740:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001742:	4b3c      	ldr	r3, [pc, #240]	; (8001834 <MX_ADC2_Init+0x124>)
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800174a:	4b3a      	ldr	r3, [pc, #232]	; (8001834 <MX_ADC2_Init+0x124>)
 800174c:	2200      	movs	r2, #0
 800174e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001750:	4b38      	ldr	r3, [pc, #224]	; (8001834 <MX_ADC2_Init+0x124>)
 8001752:	4a3a      	ldr	r2, [pc, #232]	; (800183c <MX_ADC2_Init+0x12c>)
 8001754:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001756:	4b37      	ldr	r3, [pc, #220]	; (8001834 <MX_ADC2_Init+0x124>)
 8001758:	2200      	movs	r2, #0
 800175a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 6;
 800175c:	4b35      	ldr	r3, [pc, #212]	; (8001834 <MX_ADC2_Init+0x124>)
 800175e:	2206      	movs	r2, #6
 8001760:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001762:	4b34      	ldr	r3, [pc, #208]	; (8001834 <MX_ADC2_Init+0x124>)
 8001764:	2201      	movs	r2, #1
 8001766:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800176a:	4b32      	ldr	r3, [pc, #200]	; (8001834 <MX_ADC2_Init+0x124>)
 800176c:	2201      	movs	r2, #1
 800176e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001770:	4830      	ldr	r0, [pc, #192]	; (8001834 <MX_ADC2_Init+0x124>)
 8001772:	f004 ff2b 	bl	80065cc <HAL_ADC_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800177c:	f000 fa42 	bl	8001c04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001780:	2300      	movs	r3, #0
 8001782:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001784:	2301      	movs	r3, #1
 8001786:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001788:	2307      	movs	r3, #7
 800178a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800178c:	463b      	mov	r3, r7
 800178e:	4619      	mov	r1, r3
 8001790:	4828      	ldr	r0, [pc, #160]	; (8001834 <MX_ADC2_Init+0x124>)
 8001792:	f005 f88d 	bl	80068b0 <HAL_ADC_ConfigChannel>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800179c:	f000 fa32 	bl	8001c04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80017a0:	2301      	movs	r3, #1
 80017a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80017a4:	2302      	movs	r3, #2
 80017a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017a8:	463b      	mov	r3, r7
 80017aa:	4619      	mov	r1, r3
 80017ac:	4821      	ldr	r0, [pc, #132]	; (8001834 <MX_ADC2_Init+0x124>)
 80017ae:	f005 f87f 	bl	80068b0 <HAL_ADC_ConfigChannel>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80017b8:	f000 fa24 	bl	8001c04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80017bc:	2302      	movs	r3, #2
 80017be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80017c0:	2303      	movs	r3, #3
 80017c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017c4:	463b      	mov	r3, r7
 80017c6:	4619      	mov	r1, r3
 80017c8:	481a      	ldr	r0, [pc, #104]	; (8001834 <MX_ADC2_Init+0x124>)
 80017ca:	f005 f871 	bl	80068b0 <HAL_ADC_ConfigChannel>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80017d4:	f000 fa16 	bl	8001c04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80017d8:	2303      	movs	r3, #3
 80017da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80017dc:	2304      	movs	r3, #4
 80017de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017e0:	463b      	mov	r3, r7
 80017e2:	4619      	mov	r1, r3
 80017e4:	4813      	ldr	r0, [pc, #76]	; (8001834 <MX_ADC2_Init+0x124>)
 80017e6:	f005 f863 	bl	80068b0 <HAL_ADC_ConfigChannel>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80017f0:	f000 fa08 	bl	8001c04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80017f4:	2304      	movs	r3, #4
 80017f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80017f8:	2305      	movs	r3, #5
 80017fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017fc:	463b      	mov	r3, r7
 80017fe:	4619      	mov	r1, r3
 8001800:	480c      	ldr	r0, [pc, #48]	; (8001834 <MX_ADC2_Init+0x124>)
 8001802:	f005 f855 	bl	80068b0 <HAL_ADC_ConfigChannel>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 800180c:	f000 f9fa 	bl	8001c04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001810:	2305      	movs	r3, #5
 8001812:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001814:	2306      	movs	r3, #6
 8001816:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001818:	463b      	mov	r3, r7
 800181a:	4619      	mov	r1, r3
 800181c:	4805      	ldr	r0, [pc, #20]	; (8001834 <MX_ADC2_Init+0x124>)
 800181e:	f005 f847 	bl	80068b0 <HAL_ADC_ConfigChannel>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8001828:	f000 f9ec 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000720 	.word	0x20000720
 8001838:	40012100 	.word	0x40012100
 800183c:	0f000001 	.word	0x0f000001

08001840 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001844:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <MX_CAN1_Init+0x64>)
 8001846:	4a18      	ldr	r2, [pc, #96]	; (80018a8 <MX_CAN1_Init+0x68>)
 8001848:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 800184a:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <MX_CAN1_Init+0x64>)
 800184c:	2205      	movs	r2, #5
 800184e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001850:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <MX_CAN1_Init+0x64>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001856:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <MX_CAN1_Init+0x64>)
 8001858:	2200      	movs	r2, #0
 800185a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <MX_CAN1_Init+0x64>)
 800185e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001862:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001864:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <MX_CAN1_Init+0x64>)
 8001866:	2200      	movs	r2, #0
 8001868:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <MX_CAN1_Init+0x64>)
 800186c:	2200      	movs	r2, #0
 800186e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <MX_CAN1_Init+0x64>)
 8001872:	2200      	movs	r2, #0
 8001874:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001876:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <MX_CAN1_Init+0x64>)
 8001878:	2200      	movs	r2, #0
 800187a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800187c:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <MX_CAN1_Init+0x64>)
 800187e:	2200      	movs	r2, #0
 8001880:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001882:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <MX_CAN1_Init+0x64>)
 8001884:	2200      	movs	r2, #0
 8001886:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <MX_CAN1_Init+0x64>)
 800188a:	2200      	movs	r2, #0
 800188c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800188e:	4805      	ldr	r0, [pc, #20]	; (80018a4 <MX_CAN1_Init+0x64>)
 8001890:	f005 fabe 	bl	8006e10 <HAL_CAN_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800189a:	f000 f9b3 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20002d2c 	.word	0x20002d2c
 80018a8:	40006400 	.word	0x40006400

080018ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <MX_I2C1_Init+0x50>)
 80018b2:	4a13      	ldr	r2, [pc, #76]	; (8001900 <MX_I2C1_Init+0x54>)
 80018b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80018b6:	4b11      	ldr	r3, [pc, #68]	; (80018fc <MX_I2C1_Init+0x50>)
 80018b8:	4a12      	ldr	r2, [pc, #72]	; (8001904 <MX_I2C1_Init+0x58>)
 80018ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018bc:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <MX_I2C1_Init+0x50>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018c2:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <MX_I2C1_Init+0x50>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <MX_I2C1_Init+0x50>)
 80018ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018d0:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <MX_I2C1_Init+0x50>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <MX_I2C1_Init+0x50>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018dc:	4b07      	ldr	r3, [pc, #28]	; (80018fc <MX_I2C1_Init+0x50>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <MX_I2C1_Init+0x50>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018e8:	4804      	ldr	r0, [pc, #16]	; (80018fc <MX_I2C1_Init+0x50>)
 80018ea:	f006 ffd1 	bl	8008890 <HAL_I2C_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018f4:	f000 f986 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000768 	.word	0x20000768
 8001900:	40005400 	.word	0x40005400
 8001904:	00061a80 	.word	0x00061a80

08001908 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800190c:	4b09      	ldr	r3, [pc, #36]	; (8001934 <MX_IWDG_Init+0x2c>)
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <MX_IWDG_Init+0x30>)
 8001910:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8001912:	4b08      	ldr	r3, [pc, #32]	; (8001934 <MX_IWDG_Init+0x2c>)
 8001914:	2206      	movs	r2, #6
 8001916:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 59;
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <MX_IWDG_Init+0x2c>)
 800191a:	223b      	movs	r2, #59	; 0x3b
 800191c:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800191e:	4805      	ldr	r0, [pc, #20]	; (8001934 <MX_IWDG_Init+0x2c>)
 8001920:	f007 ff4b 	bl	80097ba <HAL_IWDG_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_IWDG_Init+0x26>
  {
    Error_Handler();
 800192a:	f000 f96b 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200007c0 	.word	0x200007c0
 8001938:	40003000 	.word	0x40003000

0800193c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001950:	2300      	movs	r3, #0
 8001952:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001954:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <MX_RTC_Init+0x58>)
 8001956:	4a10      	ldr	r2, [pc, #64]	; (8001998 <MX_RTC_Init+0x5c>)
 8001958:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800195a:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <MX_RTC_Init+0x58>)
 800195c:	2200      	movs	r2, #0
 800195e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <MX_RTC_Init+0x58>)
 8001962:	227f      	movs	r2, #127	; 0x7f
 8001964:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001966:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <MX_RTC_Init+0x58>)
 8001968:	22ff      	movs	r2, #255	; 0xff
 800196a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800196c:	4b09      	ldr	r3, [pc, #36]	; (8001994 <MX_RTC_Init+0x58>)
 800196e:	2200      	movs	r2, #0
 8001970:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001972:	4b08      	ldr	r3, [pc, #32]	; (8001994 <MX_RTC_Init+0x58>)
 8001974:	2200      	movs	r2, #0
 8001976:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <MX_RTC_Init+0x58>)
 800197a:	2200      	movs	r2, #0
 800197c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800197e:	4805      	ldr	r0, [pc, #20]	; (8001994 <MX_RTC_Init+0x58>)
 8001980:	f00a fa3a 	bl	800bdf8 <HAL_RTC_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800198a:	f000 f93b 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800198e:	3718      	adds	r7, #24
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20001b44 	.word	0x20001b44
 8001998:	40002800 	.word	0x40002800

0800199c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <MX_SDIO_SD_Init+0x38>)
 80019a2:	4a0d      	ldr	r2, [pc, #52]	; (80019d8 <MX_SDIO_SD_Init+0x3c>)
 80019a4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <MX_SDIO_SD_Init+0x38>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80019ac:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <MX_SDIO_SD_Init+0x38>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80019b2:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <MX_SDIO_SD_Init+0x38>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <MX_SDIO_SD_Init+0x38>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80019be:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <MX_SDIO_SD_Init+0x38>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 80019c4:	4b03      	ldr	r3, [pc, #12]	; (80019d4 <MX_SDIO_SD_Init+0x38>)
 80019c6:	2202      	movs	r2, #2
 80019c8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80019ca:	bf00      	nop
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	20001bd4 	.word	0x20001bd4
 80019d8:	40012c00 	.word	0x40012c00

080019dc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e2:	463b      	mov	r3, r7
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80019ea:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <MX_TIM7_Init+0x64>)
 80019ec:	4a15      	ldr	r2, [pc, #84]	; (8001a44 <MX_TIM7_Init+0x68>)
 80019ee:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <MX_TIM7_Init+0x64>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f6:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <MX_TIM7_Init+0x64>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80019fc:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <MX_TIM7_Init+0x64>)
 80019fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a02:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a04:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <MX_TIM7_Init+0x64>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001a0a:	480d      	ldr	r0, [pc, #52]	; (8001a40 <MX_TIM7_Init+0x64>)
 8001a0c:	f00b fed5 	bl	800d7ba <HAL_TIM_Base_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001a16:	f000 f8f5 	bl	8001c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001a22:	463b      	mov	r3, r7
 8001a24:	4619      	mov	r1, r3
 8001a26:	4806      	ldr	r0, [pc, #24]	; (8001a40 <MX_TIM7_Init+0x64>)
 8001a28:	f00c f956 	bl	800dcd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001a32:	f000 f8e7 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20002dcc 	.word	0x20002dcc
 8001a44:	40001400 	.word	0x40001400

08001a48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	607b      	str	r3, [r7, #4]
 8001a52:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <MX_DMA_Init+0x6c>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a17      	ldr	r2, [pc, #92]	; (8001ab4 <MX_DMA_Init+0x6c>)
 8001a58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <MX_DMA_Init+0x6c>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2102      	movs	r1, #2
 8001a6e:	2038      	movs	r0, #56	; 0x38
 8001a70:	f006 f941 	bl	8007cf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a74:	2038      	movs	r0, #56	; 0x38
 8001a76:	f006 f95a 	bl	8007d2e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 2, 0);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2102      	movs	r1, #2
 8001a7e:	203a      	movs	r0, #58	; 0x3a
 8001a80:	f006 f939 	bl	8007cf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001a84:	203a      	movs	r0, #58	; 0x3a
 8001a86:	f006 f952 	bl	8007d2e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	203b      	movs	r0, #59	; 0x3b
 8001a90:	f006 f931 	bl	8007cf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001a94:	203b      	movs	r0, #59	; 0x3b
 8001a96:	f006 f94a 	bl	8007d2e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2045      	movs	r0, #69	; 0x45
 8001aa0:	f006 f929 	bl	8007cf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001aa4:	2045      	movs	r0, #69	; 0x45
 8001aa6:	f006 f942 	bl	8007d2e <HAL_NVIC_EnableIRQ>

}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40023800 	.word	0x40023800

08001ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	; 0x28
 8001abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
 8001acc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <MX_GPIO_Init+0x140>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a48      	ldr	r2, [pc, #288]	; (8001bf8 <MX_GPIO_Init+0x140>)
 8001ad8:	f043 0304 	orr.w	r3, r3, #4
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b46      	ldr	r3, [pc, #280]	; (8001bf8 <MX_GPIO_Init+0x140>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	4b42      	ldr	r3, [pc, #264]	; (8001bf8 <MX_GPIO_Init+0x140>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a41      	ldr	r2, [pc, #260]	; (8001bf8 <MX_GPIO_Init+0x140>)
 8001af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b3f      	ldr	r3, [pc, #252]	; (8001bf8 <MX_GPIO_Init+0x140>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	4b3b      	ldr	r3, [pc, #236]	; (8001bf8 <MX_GPIO_Init+0x140>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a3a      	ldr	r2, [pc, #232]	; (8001bf8 <MX_GPIO_Init+0x140>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b38      	ldr	r3, [pc, #224]	; (8001bf8 <MX_GPIO_Init+0x140>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	4b34      	ldr	r3, [pc, #208]	; (8001bf8 <MX_GPIO_Init+0x140>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a33      	ldr	r2, [pc, #204]	; (8001bf8 <MX_GPIO_Init+0x140>)
 8001b2c:	f043 0302 	orr.w	r3, r3, #2
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b31      	ldr	r3, [pc, #196]	; (8001bf8 <MX_GPIO_Init+0x140>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	603b      	str	r3, [r7, #0]
 8001b42:	4b2d      	ldr	r3, [pc, #180]	; (8001bf8 <MX_GPIO_Init+0x140>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a2c      	ldr	r2, [pc, #176]	; (8001bf8 <MX_GPIO_Init+0x140>)
 8001b48:	f043 0308 	orr.w	r3, r3, #8
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b2a      	ldr	r3, [pc, #168]	; (8001bf8 <MX_GPIO_Init+0x140>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	603b      	str	r3, [r7, #0]
 8001b58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	210f      	movs	r1, #15
 8001b5e:	4827      	ldr	r0, [pc, #156]	; (8001bfc <MX_GPIO_Init+0x144>)
 8001b60:	f006 fe4a 	bl	80087f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT0_Pin|OUT1_Pin, GPIO_PIN_RESET);
 8001b64:	2200      	movs	r2, #0
 8001b66:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001b6a:	4825      	ldr	r0, [pc, #148]	; (8001c00 <MX_GPIO_Init+0x148>)
 8001b6c:	f006 fe44 	bl	80087f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8001b70:	230f      	movs	r3, #15
 8001b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b74:	2301      	movs	r3, #1
 8001b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	4619      	mov	r1, r3
 8001b86:	481d      	ldr	r0, [pc, #116]	; (8001bfc <MX_GPIO_Init+0x144>)
 8001b88:	f006 fc8a 	bl	80084a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_Pin OUT1_Pin */
  GPIO_InitStruct.Pin = OUT0_Pin|OUT1_Pin;
 8001b8c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b92:	2301      	movs	r3, #1
 8001b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4816      	ldr	r0, [pc, #88]	; (8001c00 <MX_GPIO_Init+0x148>)
 8001ba6:	f006 fc7b 	bl	80084a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI0_Pin EXTI1_Pin */
  GPIO_InitStruct.Pin = EXTI0_Pin|EXTI1_Pin;
 8001baa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bb0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001bb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bba:	f107 0314 	add.w	r3, r7, #20
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	480f      	ldr	r0, [pc, #60]	; (8001c00 <MX_GPIO_Init+0x148>)
 8001bc2:	f006 fc6d 	bl	80084a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CD_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin;
 8001bc6:	2380      	movs	r3, #128	; 0x80
 8001bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_CD_GPIO_Port, &GPIO_InitStruct);
 8001bd2:	f107 0314 	add.w	r3, r7, #20
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4808      	ldr	r0, [pc, #32]	; (8001bfc <MX_GPIO_Init+0x144>)
 8001bda:	f006 fc61 	bl	80084a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2101      	movs	r1, #1
 8001be2:	2028      	movs	r0, #40	; 0x28
 8001be4:	f006 f887 	bl	8007cf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001be8:	2028      	movs	r0, #40	; 0x28
 8001bea:	f006 f8a0 	bl	8007d2e <HAL_NVIC_EnableIRQ>

}
 8001bee:	bf00      	nop
 8001bf0:	3728      	adds	r7, #40	; 0x28
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40020800 	.word	0x40020800
 8001c00:	40020400 	.word	0x40020400

08001c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c08:	b672      	cpsid	i
}
 8001c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c0c:	e7fe      	b.n	8001c0c <Error_Handler+0x8>
	...

08001c10 <Process_Data>:
 */

#include "pdm_can.h"

static void Process_Data(uint16_t id, uint16_t data, PDM_Data* data_struct)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	603a      	str	r2, [r7, #0]
 8001c1a:	80fb      	strh	r3, [r7, #6]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	80bb      	strh	r3, [r7, #4]
	switch(id >> 1){
 8001c20:	88fb      	ldrh	r3, [r7, #6]
 8001c22:	085b      	lsrs	r3, r3, #1
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	3b01      	subs	r3, #1
 8001c28:	2b1d      	cmp	r3, #29
 8001c2a:	f200 81f9 	bhi.w	8002020 <Process_Data+0x410>
 8001c2e:	a201      	add	r2, pc, #4	; (adr r2, 8001c34 <Process_Data+0x24>)
 8001c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c34:	08001cad 	.word	0x08001cad
 8001c38:	08001cdd 	.word	0x08001cdd
 8001c3c:	08001d0d 	.word	0x08001d0d
 8001c40:	08001d3d 	.word	0x08001d3d
 8001c44:	08001d6d 	.word	0x08001d6d
 8001c48:	08001d9d 	.word	0x08001d9d
 8001c4c:	08001dcd 	.word	0x08001dcd
 8001c50:	08001dfd 	.word	0x08001dfd
 8001c54:	08001e2d 	.word	0x08001e2d
 8001c58:	08001e5d 	.word	0x08001e5d
 8001c5c:	08001e8d 	.word	0x08001e8d
 8001c60:	08001ebd 	.word	0x08001ebd
 8001c64:	08001eed 	.word	0x08001eed
 8001c68:	08001f1d 	.word	0x08001f1d
 8001c6c:	08001f4d 	.word	0x08001f4d
 8001c70:	08001f7d 	.word	0x08001f7d
 8001c74:	08001fb1 	.word	0x08001fb1
 8001c78:	08001fb9 	.word	0x08001fb9
 8001c7c:	08001fc1 	.word	0x08001fc1
 8001c80:	08001fc9 	.word	0x08001fc9
 8001c84:	08001fd1 	.word	0x08001fd1
 8001c88:	08001fd9 	.word	0x08001fd9
 8001c8c:	08001fe1 	.word	0x08001fe1
 8001c90:	08001fe9 	.word	0x08001fe9
 8001c94:	08001ff1 	.word	0x08001ff1
 8001c98:	08001ff9 	.word	0x08001ff9
 8001c9c:	08002001 	.word	0x08002001
 8001ca0:	08002009 	.word	0x08002009
 8001ca4:	08002011 	.word	0x08002011
 8001ca8:	08002019 	.word	0x08002019
		case 0x0001:
			data_struct->Current_Buffer[0] = data;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	88ba      	ldrh	r2, [r7, #4]
 8001cb0:	809a      	strh	r2, [r3, #4]
			if((id & 0x0001) == 1)
 8001cb2:	88fb      	ldrh	r3, [r7, #6]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d007      	beq.n	8001ccc <Process_Data+0xbc>
				data_struct->Output_Verify |= 1;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	885b      	ldrh	r3, [r3, #2]
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~1;
			break;
 8001cca:	e1aa      	b.n	8002022 <Process_Data+0x412>
				data_struct->Output_Verify &= ~1;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	885b      	ldrh	r3, [r3, #2]
 8001cd0:	f023 0301 	bic.w	r3, r3, #1
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	805a      	strh	r2, [r3, #2]
			break;
 8001cda:	e1a2      	b.n	8002022 <Process_Data+0x412>

		case 0x0002:
			data_struct->Current_Buffer[1] = data;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	88ba      	ldrh	r2, [r7, #4]
 8001ce0:	80da      	strh	r2, [r3, #6]
			if((id & 0x0001) == 1)
 8001ce2:	88fb      	ldrh	r3, [r7, #6]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d007      	beq.n	8001cfc <Process_Data+0xec>
				data_struct->Output_Verify |= (1 << 1);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	885b      	ldrh	r3, [r3, #2]
 8001cf0:	f043 0302 	orr.w	r3, r3, #2
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 1);
			break;
 8001cfa:	e192      	b.n	8002022 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 1);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	885b      	ldrh	r3, [r3, #2]
 8001d00:	f023 0302 	bic.w	r3, r3, #2
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	805a      	strh	r2, [r3, #2]
			break;
 8001d0a:	e18a      	b.n	8002022 <Process_Data+0x412>

		case 0x0003:
			data_struct->Current_Buffer[2] = data;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	88ba      	ldrh	r2, [r7, #4]
 8001d10:	811a      	strh	r2, [r3, #8]
			if((id & 0x0001) == 1)
 8001d12:	88fb      	ldrh	r3, [r7, #6]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d007      	beq.n	8001d2c <Process_Data+0x11c>
				data_struct->Output_Verify |= (1 << 2);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	885b      	ldrh	r3, [r3, #2]
 8001d20:	f043 0304 	orr.w	r3, r3, #4
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 2);
			break;
 8001d2a:	e17a      	b.n	8002022 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 2);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	885b      	ldrh	r3, [r3, #2]
 8001d30:	f023 0304 	bic.w	r3, r3, #4
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	805a      	strh	r2, [r3, #2]
			break;
 8001d3a:	e172      	b.n	8002022 <Process_Data+0x412>

		case 0x0004:
			data_struct->Current_Buffer[3] = data;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	88ba      	ldrh	r2, [r7, #4]
 8001d40:	815a      	strh	r2, [r3, #10]
			if((id & 0x0001) == 1)
 8001d42:	88fb      	ldrh	r3, [r7, #6]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d007      	beq.n	8001d5c <Process_Data+0x14c>
				data_struct->Output_Verify |= (1 << 3);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	885b      	ldrh	r3, [r3, #2]
 8001d50:	f043 0308 	orr.w	r3, r3, #8
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 3);
			break;
 8001d5a:	e162      	b.n	8002022 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 3);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	885b      	ldrh	r3, [r3, #2]
 8001d60:	f023 0308 	bic.w	r3, r3, #8
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	805a      	strh	r2, [r3, #2]
			break;
 8001d6a:	e15a      	b.n	8002022 <Process_Data+0x412>

		case 0x0005:
			data_struct->Current_Buffer[4] = data;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	88ba      	ldrh	r2, [r7, #4]
 8001d70:	819a      	strh	r2, [r3, #12]
			if((id & 0x0001) == 1)
 8001d72:	88fb      	ldrh	r3, [r7, #6]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d007      	beq.n	8001d8c <Process_Data+0x17c>
				data_struct->Output_Verify |= (1 << 4);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	885b      	ldrh	r3, [r3, #2]
 8001d80:	f043 0310 	orr.w	r3, r3, #16
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 4);
			break;
 8001d8a:	e14a      	b.n	8002022 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 4);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	885b      	ldrh	r3, [r3, #2]
 8001d90:	f023 0310 	bic.w	r3, r3, #16
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	805a      	strh	r2, [r3, #2]
			break;
 8001d9a:	e142      	b.n	8002022 <Process_Data+0x412>

		case 0x0006:
			data_struct->Current_Buffer[5] = data;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	88ba      	ldrh	r2, [r7, #4]
 8001da0:	81da      	strh	r2, [r3, #14]
			if((id & 0x0001) == 1)
 8001da2:	88fb      	ldrh	r3, [r7, #6]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d007      	beq.n	8001dbc <Process_Data+0x1ac>
				data_struct->Output_Verify |= (1 << 5);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	885b      	ldrh	r3, [r3, #2]
 8001db0:	f043 0320 	orr.w	r3, r3, #32
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 5);
			break;
 8001dba:	e132      	b.n	8002022 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 5);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	885b      	ldrh	r3, [r3, #2]
 8001dc0:	f023 0320 	bic.w	r3, r3, #32
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	805a      	strh	r2, [r3, #2]
			break;
 8001dca:	e12a      	b.n	8002022 <Process_Data+0x412>

		case 0x0007:
			data_struct->Current_Buffer[6] = data;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	88ba      	ldrh	r2, [r7, #4]
 8001dd0:	821a      	strh	r2, [r3, #16]
			if((id & 0x0001) == 1)
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d007      	beq.n	8001dec <Process_Data+0x1dc>
				data_struct->Output_Verify |= (1 << 6);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	885b      	ldrh	r3, [r3, #2]
 8001de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 6);
			break;
 8001dea:	e11a      	b.n	8002022 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 6);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	885b      	ldrh	r3, [r3, #2]
 8001df0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	805a      	strh	r2, [r3, #2]
			break;
 8001dfa:	e112      	b.n	8002022 <Process_Data+0x412>

		case 0x0008:
			data_struct->Current_Buffer[7] = data;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	88ba      	ldrh	r2, [r7, #4]
 8001e00:	825a      	strh	r2, [r3, #18]
			if((id & 0x0001) == 1)
 8001e02:	88fb      	ldrh	r3, [r7, #6]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d007      	beq.n	8001e1c <Process_Data+0x20c>
				data_struct->Output_Verify |= (1 << 7);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	885b      	ldrh	r3, [r3, #2]
 8001e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 7);
			break;
 8001e1a:	e102      	b.n	8002022 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 7);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	885b      	ldrh	r3, [r3, #2]
 8001e20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	805a      	strh	r2, [r3, #2]
			break;
 8001e2a:	e0fa      	b.n	8002022 <Process_Data+0x412>

		case 0x0009:
			data_struct->Current_Buffer[8] = data;
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	88ba      	ldrh	r2, [r7, #4]
 8001e30:	829a      	strh	r2, [r3, #20]
			if((id & 0x0001) == 1)
 8001e32:	88fb      	ldrh	r3, [r7, #6]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d007      	beq.n	8001e4c <Process_Data+0x23c>
				data_struct->Output_Verify |= (1 << 8);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	885b      	ldrh	r3, [r3, #2]
 8001e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 8);
			break;
 8001e4a:	e0ea      	b.n	8002022 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 8);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	885b      	ldrh	r3, [r3, #2]
 8001e50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	805a      	strh	r2, [r3, #2]
			break;
 8001e5a:	e0e2      	b.n	8002022 <Process_Data+0x412>

		case 0x000A:
			data_struct->Current_Buffer[9] = data;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	88ba      	ldrh	r2, [r7, #4]
 8001e60:	82da      	strh	r2, [r3, #22]
			if((id & 0x0001) == 1)
 8001e62:	88fb      	ldrh	r3, [r7, #6]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d007      	beq.n	8001e7c <Process_Data+0x26c>
				data_struct->Output_Verify |= (1 << 9);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	885b      	ldrh	r3, [r3, #2]
 8001e70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 9);
			break;
 8001e7a:	e0d2      	b.n	8002022 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 9);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	885b      	ldrh	r3, [r3, #2]
 8001e80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	805a      	strh	r2, [r3, #2]
			break;
 8001e8a:	e0ca      	b.n	8002022 <Process_Data+0x412>

		case 0x000B:
			data_struct->Current_Buffer[10] = data;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	88ba      	ldrh	r2, [r7, #4]
 8001e90:	831a      	strh	r2, [r3, #24]
			if((id & 0x0001) == 1)
 8001e92:	88fb      	ldrh	r3, [r7, #6]
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d007      	beq.n	8001eac <Process_Data+0x29c>
				data_struct->Output_Verify |= (1 << 10);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	885b      	ldrh	r3, [r3, #2]
 8001ea0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 10);
			break;
 8001eaa:	e0ba      	b.n	8002022 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 10);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	885b      	ldrh	r3, [r3, #2]
 8001eb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	805a      	strh	r2, [r3, #2]
			break;
 8001eba:	e0b2      	b.n	8002022 <Process_Data+0x412>

		case 0x000C:
			data_struct->Current_Buffer[11] = data;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	88ba      	ldrh	r2, [r7, #4]
 8001ec0:	835a      	strh	r2, [r3, #26]
			if((id & 0x0001) == 1)
 8001ec2:	88fb      	ldrh	r3, [r7, #6]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d007      	beq.n	8001edc <Process_Data+0x2cc>
				data_struct->Output_Verify |= (1 << 11);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	885b      	ldrh	r3, [r3, #2]
 8001ed0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 11);
			break;
 8001eda:	e0a2      	b.n	8002022 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 11);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	885b      	ldrh	r3, [r3, #2]
 8001ee0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	805a      	strh	r2, [r3, #2]
			break;
 8001eea:	e09a      	b.n	8002022 <Process_Data+0x412>

		case 0x000D:
			data_struct->Current_Buffer[12] = data;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	88ba      	ldrh	r2, [r7, #4]
 8001ef0:	839a      	strh	r2, [r3, #28]
			if((id & 0x0001) == 1)
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d007      	beq.n	8001f0c <Process_Data+0x2fc>
				data_struct->Output_Verify |= (1 << 12);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	885b      	ldrh	r3, [r3, #2]
 8001f00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 12);
			break;
 8001f0a:	e08a      	b.n	8002022 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 12);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	885b      	ldrh	r3, [r3, #2]
 8001f10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	805a      	strh	r2, [r3, #2]
			break;
 8001f1a:	e082      	b.n	8002022 <Process_Data+0x412>

		case 0x000E:
			data_struct->Current_Buffer[13] = data;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	88ba      	ldrh	r2, [r7, #4]
 8001f20:	83da      	strh	r2, [r3, #30]
			if((id & 0x0001) == 1)
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d007      	beq.n	8001f3c <Process_Data+0x32c>
				data_struct->Output_Verify |= (1 << 13);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	885b      	ldrh	r3, [r3, #2]
 8001f30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 13);
			break;
 8001f3a:	e072      	b.n	8002022 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 13);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	885b      	ldrh	r3, [r3, #2]
 8001f40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	805a      	strh	r2, [r3, #2]
			break;
 8001f4a:	e06a      	b.n	8002022 <Process_Data+0x412>

		case 0x000F:
			data_struct->Current_Buffer[14] = data;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	88ba      	ldrh	r2, [r7, #4]
 8001f50:	841a      	strh	r2, [r3, #32]
			if((id & 0x0001) == 1)
 8001f52:	88fb      	ldrh	r3, [r7, #6]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d007      	beq.n	8001f6c <Process_Data+0x35c>
				data_struct->Output_Verify |= (1 << 14);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	885b      	ldrh	r3, [r3, #2]
 8001f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 14);
			break;
 8001f6a:	e05a      	b.n	8002022 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 14);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	885b      	ldrh	r3, [r3, #2]
 8001f70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	805a      	strh	r2, [r3, #2]
			break;
 8001f7a:	e052      	b.n	8002022 <Process_Data+0x412>

		case 0x0010:
			data_struct->Current_Buffer[15] = data;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	88ba      	ldrh	r2, [r7, #4]
 8001f80:	845a      	strh	r2, [r3, #34]	; 0x22
			if((id & 0x0001) == 1)
 8001f82:	88fb      	ldrh	r3, [r7, #6]
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d009      	beq.n	8001fa0 <Process_Data+0x390>
				data_struct->Output_Verify |= (1 << 15);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	885b      	ldrh	r3, [r3, #2]
 8001f90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 15);
			break;
 8001f9e:	e040      	b.n	8002022 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 15);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	885b      	ldrh	r3, [r3, #2]
 8001fa4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	805a      	strh	r2, [r3, #2]
			break;
 8001fae:	e038      	b.n	8002022 <Process_Data+0x412>

		case 0x0011:
			data_struct->Tempetature_Buffer[0] = data;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	88ba      	ldrh	r2, [r7, #4]
 8001fb4:	859a      	strh	r2, [r3, #44]	; 0x2c
			break;
 8001fb6:	e034      	b.n	8002022 <Process_Data+0x412>

		case 0x0012:
			data_struct->Tempetature_Buffer[1] = data;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	88ba      	ldrh	r2, [r7, #4]
 8001fbc:	85da      	strh	r2, [r3, #46]	; 0x2e
			break;
 8001fbe:	e030      	b.n	8002022 <Process_Data+0x412>

		case 0x0013:
			data_struct->Tempetature_Buffer[2] = data;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	88ba      	ldrh	r2, [r7, #4]
 8001fc4:	861a      	strh	r2, [r3, #48]	; 0x30
			break;
 8001fc6:	e02c      	b.n	8002022 <Process_Data+0x412>

		case 0x0014:
			data_struct->Tempetature_Buffer[3] = data;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	88ba      	ldrh	r2, [r7, #4]
 8001fcc:	865a      	strh	r2, [r3, #50]	; 0x32
			break;
 8001fce:	e028      	b.n	8002022 <Process_Data+0x412>

		case 0x0015:
			data_struct->Tempetature_Buffer[4] = data;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	88ba      	ldrh	r2, [r7, #4]
 8001fd4:	869a      	strh	r2, [r3, #52]	; 0x34
			break;
 8001fd6:	e024      	b.n	8002022 <Process_Data+0x412>

		case 0x0016:
			data_struct->Tempetature_Buffer[5] = data;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	88ba      	ldrh	r2, [r7, #4]
 8001fdc:	86da      	strh	r2, [r3, #54]	; 0x36
			break;
 8001fde:	e020      	b.n	8002022 <Process_Data+0x412>

		case 0x0017:
			data_struct->Tempetature_Buffer[6] = data;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	88ba      	ldrh	r2, [r7, #4]
 8001fe4:	871a      	strh	r2, [r3, #56]	; 0x38
			break;
 8001fe6:	e01c      	b.n	8002022 <Process_Data+0x412>

		case 0x0018:
			data_struct->Tempetature_Buffer[7] = data;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	88ba      	ldrh	r2, [r7, #4]
 8001fec:	875a      	strh	r2, [r3, #58]	; 0x3a
			break;
 8001fee:	e018      	b.n	8002022 <Process_Data+0x412>

		case 0x0019:
			data_struct->Tempetature_Buffer[8] = data;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	88ba      	ldrh	r2, [r7, #4]
 8001ff4:	879a      	strh	r2, [r3, #60]	; 0x3c
			break;
 8001ff6:	e014      	b.n	8002022 <Process_Data+0x412>

		case 0x001A:
			data_struct->Input_Voltage = data;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	88ba      	ldrh	r2, [r7, #4]
 8001ffc:	801a      	strh	r2, [r3, #0]
			break;
 8001ffe:	e010      	b.n	8002022 <Process_Data+0x412>

		case 0x001B:
			data_struct->Duty_Cycle_Buffer[0] = data;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	88ba      	ldrh	r2, [r7, #4]
 8002004:	849a      	strh	r2, [r3, #36]	; 0x24
			break;
 8002006:	e00c      	b.n	8002022 <Process_Data+0x412>

		case 0x001C:
			data_struct->Duty_Cycle_Buffer[1] = data;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	88ba      	ldrh	r2, [r7, #4]
 800200c:	84da      	strh	r2, [r3, #38]	; 0x26
			break;
 800200e:	e008      	b.n	8002022 <Process_Data+0x412>

		case 0x001D:
			data_struct->Duty_Cycle_Buffer[2] = data;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	88ba      	ldrh	r2, [r7, #4]
 8002014:	851a      	strh	r2, [r3, #40]	; 0x28
			break;
 8002016:	e004      	b.n	8002022 <Process_Data+0x412>

		case 0x001E:
			data_struct->Duty_Cycle_Buffer[3] = data;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	88ba      	ldrh	r2, [r7, #4]
 800201c:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
 800201e:	e000      	b.n	8002022 <Process_Data+0x412>

		default:
			break;
 8002020:	bf00      	nop
	}

	return;
 8002022:	bf00      	nop
}
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop

08002030 <PDM_CAN_FilterConfig>:

HAL_StatusTypeDef PDM_CAN_FilterConfig(CAN_HandleTypeDef* hcan, uint32_t bank_position, uint32_t fifo_assignment)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b090      	sub	sp, #64	; 0x40
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filterID = 0x1E35C000, filterMask = 0x1FFFF000;
 800203c:	4b13      	ldr	r3, [pc, #76]	; (800208c <PDM_CAN_FilterConfig+0x5c>)
 800203e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002040:	4b13      	ldr	r3, [pc, #76]	; (8002090 <PDM_CAN_FilterConfig+0x60>)
 8002042:	63bb      	str	r3, [r7, #56]	; 0x38

	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002044:	2300      	movs	r3, #0
 8002046:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002048:	2301      	movs	r3, #1
 800204a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterIdHigh = filterID >> 13;
 800204c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800204e:	0b5b      	lsrs	r3, r3, #13
 8002050:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow = (filterID << 3) & 0xFFF8;
 8002052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	b29b      	uxth	r3, r3
 8002058:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh = filterMask >> 13;
 800205a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800205c:	0b5b      	lsrs	r3, r3, #13
 800205e:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow = (filterMask << 3) & 0xFFF8;
 8002060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	b29b      	uxth	r3, r3
 8002066:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterBank = bank_position;
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterFIFOAssignment = fifo_assignment;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterActivation = ENABLE;
 8002070:	2301      	movs	r3, #1
 8002072:	633b      	str	r3, [r7, #48]	; 0x30

	return HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 8002074:	f107 0310 	add.w	r3, r7, #16
 8002078:	4619      	mov	r1, r3
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f004 ffc4 	bl	8007008 <HAL_CAN_ConfigFilter>
 8002080:	4603      	mov	r3, r0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3740      	adds	r7, #64	; 0x40
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	1e35c000 	.word	0x1e35c000
 8002090:	1ffff000 	.word	0x1ffff000

08002094 <PDM_CAN_Process_Data>:

void PDM_CAN_Process_Data(uint32_t data_id, uint8_t data_length, uint8_t* data_buffer, PDM_Data* data_struct)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	607a      	str	r2, [r7, #4]
 800209e:	603b      	str	r3, [r7, #0]
 80020a0:	460b      	mov	r3, r1
 80020a2:	72fb      	strb	r3, [r7, #11]
	uint16_t id = 0, data = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	82fb      	strh	r3, [r7, #22]
 80020a8:	2300      	movs	r3, #0
 80020aa:	82bb      	strh	r3, [r7, #20]

	if((data_id & 0x1FFFF000) != 0x1E35C000)
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	4b26      	ldr	r3, [pc, #152]	; (8002148 <PDM_CAN_Process_Data+0xb4>)
 80020b0:	4013      	ands	r3, r2
 80020b2:	4a26      	ldr	r2, [pc, #152]	; (800214c <PDM_CAN_Process_Data+0xb8>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d142      	bne.n	800213e <PDM_CAN_Process_Data+0xaa>
		return;

	id  = data_buffer[0] << 8;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	b29b      	uxth	r3, r3
 80020be:	021b      	lsls	r3, r3, #8
 80020c0:	82fb      	strh	r3, [r7, #22]
	id |= data_buffer[1] & 0xff;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3301      	adds	r3, #1
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	8afb      	ldrh	r3, [r7, #22]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	82fb      	strh	r3, [r7, #22]
	data  = data_buffer[2] << 8;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3302      	adds	r3, #2
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	021b      	lsls	r3, r3, #8
 80020da:	82bb      	strh	r3, [r7, #20]
	data |= data_buffer[3] & 0xff;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3303      	adds	r3, #3
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	8abb      	ldrh	r3, [r7, #20]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	82bb      	strh	r3, [r7, #20]

	Process_Data(id, data, data_struct);
 80020ea:	8ab9      	ldrh	r1, [r7, #20]
 80020ec:	8afb      	ldrh	r3, [r7, #22]
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff fd8d 	bl	8001c10 <Process_Data>

	if(data_length == 8)
 80020f6:	7afb      	ldrb	r3, [r7, #11]
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d121      	bne.n	8002140 <PDM_CAN_Process_Data+0xac>
	{
		id  = data_buffer[4] << 8;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3304      	adds	r3, #4
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	b29b      	uxth	r3, r3
 8002104:	021b      	lsls	r3, r3, #8
 8002106:	82fb      	strh	r3, [r7, #22]
		id |= data_buffer[5] & 0xff;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3305      	adds	r3, #5
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	b29a      	uxth	r2, r3
 8002110:	8afb      	ldrh	r3, [r7, #22]
 8002112:	4313      	orrs	r3, r2
 8002114:	82fb      	strh	r3, [r7, #22]
		data  = data_buffer[6] << 8;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3306      	adds	r3, #6
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	b29b      	uxth	r3, r3
 800211e:	021b      	lsls	r3, r3, #8
 8002120:	82bb      	strh	r3, [r7, #20]
		data |= data_buffer[7] & 0xff;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3307      	adds	r3, #7
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	b29a      	uxth	r2, r3
 800212a:	8abb      	ldrh	r3, [r7, #20]
 800212c:	4313      	orrs	r3, r2
 800212e:	82bb      	strh	r3, [r7, #20]

		Process_Data(id, data, data_struct);
 8002130:	8ab9      	ldrh	r1, [r7, #20]
 8002132:	8afb      	ldrh	r3, [r7, #22]
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fd6a 	bl	8001c10 <Process_Data>
 800213c:	e000      	b.n	8002140 <PDM_CAN_Process_Data+0xac>
		return;
 800213e:	bf00      	nop
	}
}
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	1ffff000 	.word	0x1ffff000
 800214c:	1e35c000 	.word	0x1e35c000

08002150 <Verify_Data>:
 */

#include "principal.h"

static void Verify_Data()
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
	Verify = 0;
 8002156:	4b2b      	ldr	r3, [pc, #172]	; (8002204 <Verify_Data+0xb4>)
 8002158:	2200      	movs	r2, #0
 800215a:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < NBR_OF_CHANNELS; i++)
 800215c:	2300      	movs	r3, #0
 800215e:	71fb      	strb	r3, [r7, #7]
 8002160:	e015      	b.n	800218e <Verify_Data+0x3e>
		if(ADC_Buffer[i] > ADC_THRESHOLD)
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	4a28      	ldr	r2, [pc, #160]	; (8002208 <Verify_Data+0xb8>)
 8002166:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800216a:	2b1e      	cmp	r3, #30
 800216c:	d90c      	bls.n	8002188 <Verify_Data+0x38>
			Verify |= (1 << i);
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	2201      	movs	r2, #1
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	b21a      	sxth	r2, r3
 8002178:	4b22      	ldr	r3, [pc, #136]	; (8002204 <Verify_Data+0xb4>)
 800217a:	881b      	ldrh	r3, [r3, #0]
 800217c:	b21b      	sxth	r3, r3
 800217e:	4313      	orrs	r3, r2
 8002180:	b21b      	sxth	r3, r3
 8002182:	b29a      	uxth	r2, r3
 8002184:	4b1f      	ldr	r3, [pc, #124]	; (8002204 <Verify_Data+0xb4>)
 8002186:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < NBR_OF_CHANNELS; i++)
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	3301      	adds	r3, #1
 800218c:	71fb      	strb	r3, [r7, #7]
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	2b0c      	cmp	r3, #12
 8002192:	d9e6      	bls.n	8002162 <Verify_Data+0x12>

	HAL_GPIO_TogglePin(LED_OK);
 8002194:	2101      	movs	r1, #1
 8002196:	481d      	ldr	r0, [pc, #116]	; (800220c <Verify_Data+0xbc>)
 8002198:	f006 fb47 	bl	800882a <HAL_GPIO_TogglePin>

	if(Verify_Datalogger == 1)
 800219c:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <Verify_Data+0xc0>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d105      	bne.n	80021b0 <Verify_Data+0x60>
		HAL_GPIO_WritePin(LED_DATALOGGER, GPIO_PIN_SET);
 80021a4:	2201      	movs	r2, #1
 80021a6:	2102      	movs	r1, #2
 80021a8:	4818      	ldr	r0, [pc, #96]	; (800220c <Verify_Data+0xbc>)
 80021aa:	f006 fb25 	bl	80087f8 <HAL_GPIO_WritePin>
 80021ae:	e004      	b.n	80021ba <Verify_Data+0x6a>
	else
		HAL_GPIO_WritePin(LED_DATALOGGER, GPIO_PIN_RESET);
 80021b0:	2200      	movs	r2, #0
 80021b2:	2102      	movs	r1, #2
 80021b4:	4815      	ldr	r0, [pc, #84]	; (800220c <Verify_Data+0xbc>)
 80021b6:	f006 fb1f 	bl	80087f8 <HAL_GPIO_WritePin>

	if((Verify_CAN & 1) == 1)
 80021ba:	4b16      	ldr	r3, [pc, #88]	; (8002214 <Verify_Data+0xc4>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d004      	beq.n	80021d0 <Verify_Data+0x80>
		HAL_GPIO_TogglePin(LED_CAN_TX);
 80021c6:	2104      	movs	r1, #4
 80021c8:	4810      	ldr	r0, [pc, #64]	; (800220c <Verify_Data+0xbc>)
 80021ca:	f006 fb2e 	bl	800882a <HAL_GPIO_TogglePin>
 80021ce:	e004      	b.n	80021da <Verify_Data+0x8a>
	else
		HAL_GPIO_WritePin(LED_CAN_TX, GPIO_PIN_RESET);
 80021d0:	2200      	movs	r2, #0
 80021d2:	2104      	movs	r1, #4
 80021d4:	480d      	ldr	r0, [pc, #52]	; (800220c <Verify_Data+0xbc>)
 80021d6:	f006 fb0f 	bl	80087f8 <HAL_GPIO_WritePin>

	if((Verify_CAN & 2) == 2)
 80021da:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <Verify_Data+0xc4>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d004      	beq.n	80021f0 <Verify_Data+0xa0>
		HAL_GPIO_TogglePin(LED_CAN_RX);
 80021e6:	2108      	movs	r1, #8
 80021e8:	4808      	ldr	r0, [pc, #32]	; (800220c <Verify_Data+0xbc>)
 80021ea:	f006 fb1e 	bl	800882a <HAL_GPIO_TogglePin>
	else
		HAL_GPIO_WritePin(LED_CAN_RX, GPIO_PIN_RESET);
}
 80021ee:	e004      	b.n	80021fa <Verify_Data+0xaa>
		HAL_GPIO_WritePin(LED_CAN_RX, GPIO_PIN_RESET);
 80021f0:	2200      	movs	r2, #0
 80021f2:	2108      	movs	r1, #8
 80021f4:	4805      	ldr	r0, [pc, #20]	; (800220c <Verify_Data+0xbc>)
 80021f6:	f006 faff 	bl	80087f8 <HAL_GPIO_WritePin>
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20002e78 	.word	0x20002e78
 8002208:	20000704 	.word	0x20000704
 800220c:	40020800 	.word	0x40020800
 8002210:	20001a10 	.word	0x20001a10
 8002214:	20001a58 	.word	0x20001a58

08002218 <Tx_Analog_1_4>:

static void Tx_Analog_1_4(CAN_HandleTypeDef* hcan)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 8002220:	4b43      	ldr	r3, [pc, #268]	; (8002330 <Tx_Analog_1_4+0x118>)
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8002226:	4b42      	ldr	r3, [pc, #264]	; (8002330 <Tx_Analog_1_4+0x118>)
 8002228:	2200      	movs	r2, #0
 800222a:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 800222c:	4b40      	ldr	r3, [pc, #256]	; (8002330 <Tx_Analog_1_4+0x118>)
 800222e:	2200      	movs	r2, #0
 8002230:	751a      	strb	r2, [r3, #20]
	TxHeader.StdId = FIRST_ID + Analog_1_4;
 8002232:	4b3f      	ldr	r3, [pc, #252]	; (8002330 <Tx_Analog_1_4+0x118>)
 8002234:	2201      	movs	r2, #1
 8002236:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 8;
 8002238:	4b3d      	ldr	r3, [pc, #244]	; (8002330 <Tx_Analog_1_4+0x118>)
 800223a:	2208      	movs	r2, #8
 800223c:	611a      	str	r2, [r3, #16]

	TxData[0] = ADC_Buffer[0] >> 8;
 800223e:	4b3d      	ldr	r3, [pc, #244]	; (8002334 <Tx_Analog_1_4+0x11c>)
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	0a1b      	lsrs	r3, r3, #8
 8002244:	b29b      	uxth	r3, r3
 8002246:	b2da      	uxtb	r2, r3
 8002248:	4b3b      	ldr	r3, [pc, #236]	; (8002338 <Tx_Analog_1_4+0x120>)
 800224a:	701a      	strb	r2, [r3, #0]
	TxData[1] = ADC_Buffer[0] & 0xff;
 800224c:	4b39      	ldr	r3, [pc, #228]	; (8002334 <Tx_Analog_1_4+0x11c>)
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	b2da      	uxtb	r2, r3
 8002252:	4b39      	ldr	r3, [pc, #228]	; (8002338 <Tx_Analog_1_4+0x120>)
 8002254:	705a      	strb	r2, [r3, #1]
	TxData[2] = ADC_Buffer[1] >> 8;
 8002256:	4b37      	ldr	r3, [pc, #220]	; (8002334 <Tx_Analog_1_4+0x11c>)
 8002258:	885b      	ldrh	r3, [r3, #2]
 800225a:	0a1b      	lsrs	r3, r3, #8
 800225c:	b29b      	uxth	r3, r3
 800225e:	b2da      	uxtb	r2, r3
 8002260:	4b35      	ldr	r3, [pc, #212]	; (8002338 <Tx_Analog_1_4+0x120>)
 8002262:	709a      	strb	r2, [r3, #2]
	TxData[3] = ADC_Buffer[1] & 0xff;
 8002264:	4b33      	ldr	r3, [pc, #204]	; (8002334 <Tx_Analog_1_4+0x11c>)
 8002266:	885b      	ldrh	r3, [r3, #2]
 8002268:	b2da      	uxtb	r2, r3
 800226a:	4b33      	ldr	r3, [pc, #204]	; (8002338 <Tx_Analog_1_4+0x120>)
 800226c:	70da      	strb	r2, [r3, #3]
	TxData[4] = ADC_Buffer[2] >> 8;
 800226e:	4b31      	ldr	r3, [pc, #196]	; (8002334 <Tx_Analog_1_4+0x11c>)
 8002270:	889b      	ldrh	r3, [r3, #4]
 8002272:	0a1b      	lsrs	r3, r3, #8
 8002274:	b29b      	uxth	r3, r3
 8002276:	b2da      	uxtb	r2, r3
 8002278:	4b2f      	ldr	r3, [pc, #188]	; (8002338 <Tx_Analog_1_4+0x120>)
 800227a:	711a      	strb	r2, [r3, #4]
	TxData[5] = ADC_Buffer[2] & 0xff;
 800227c:	4b2d      	ldr	r3, [pc, #180]	; (8002334 <Tx_Analog_1_4+0x11c>)
 800227e:	889b      	ldrh	r3, [r3, #4]
 8002280:	b2da      	uxtb	r2, r3
 8002282:	4b2d      	ldr	r3, [pc, #180]	; (8002338 <Tx_Analog_1_4+0x120>)
 8002284:	715a      	strb	r2, [r3, #5]
	TxData[6] = ADC_Buffer[3] >> 8;
 8002286:	4b2b      	ldr	r3, [pc, #172]	; (8002334 <Tx_Analog_1_4+0x11c>)
 8002288:	88db      	ldrh	r3, [r3, #6]
 800228a:	0a1b      	lsrs	r3, r3, #8
 800228c:	b29b      	uxth	r3, r3
 800228e:	b2da      	uxtb	r2, r3
 8002290:	4b29      	ldr	r3, [pc, #164]	; (8002338 <Tx_Analog_1_4+0x120>)
 8002292:	719a      	strb	r2, [r3, #6]
	TxData[7] = ADC_Buffer[3] & 0xff;
 8002294:	4b27      	ldr	r3, [pc, #156]	; (8002334 <Tx_Analog_1_4+0x11c>)
 8002296:	88db      	ldrh	r3, [r3, #6]
 8002298:	b2da      	uxtb	r2, r3
 800229a:	4b27      	ldr	r3, [pc, #156]	; (8002338 <Tx_Analog_1_4+0x120>)
 800229c:	71da      	strb	r2, [r3, #7]

	if(Flag_Datalogger == DL_Save)
 800229e:	4b27      	ldr	r3, [pc, #156]	; (800233c <Tx_Analog_1_4+0x124>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d108      	bne.n	80022b8 <Tx_Analog_1_4+0xa0>
		Principal_Datalogger_Save_Buffer(TxHeader.StdId, TxHeader.DLC, TxData, &File_Struct);
 80022a6:	4b22      	ldr	r3, [pc, #136]	; (8002330 <Tx_Analog_1_4+0x118>)
 80022a8:	6818      	ldr	r0, [r3, #0]
 80022aa:	4b21      	ldr	r3, [pc, #132]	; (8002330 <Tx_Analog_1_4+0x118>)
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	b2d9      	uxtb	r1, r3
 80022b0:	4b23      	ldr	r3, [pc, #140]	; (8002340 <Tx_Analog_1_4+0x128>)
 80022b2:	4a21      	ldr	r2, [pc, #132]	; (8002338 <Tx_Analog_1_4+0x120>)
 80022b4:	f003 fa66 	bl	8005784 <Principal_Datalogger_Save_Buffer>

	if((Acc_CAN[Analog_1_4] >= Per_CAN[Analog_1_4]) && (Per_CAN[Analog_1_4] != 0))
 80022b8:	4b22      	ldr	r3, [pc, #136]	; (8002344 <Tx_Analog_1_4+0x12c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a22      	ldr	r2, [pc, #136]	; (8002348 <Tx_Analog_1_4+0x130>)
 80022be:	8812      	ldrh	r2, [r2, #0]
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d331      	bcc.n	8002328 <Tx_Analog_1_4+0x110>
 80022c4:	4b20      	ldr	r3, [pc, #128]	; (8002348 <Tx_Analog_1_4+0x130>)
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d02d      	beq.n	8002328 <Tx_Analog_1_4+0x110>
	{
		Acc_CAN[Analog_1_4] -= Per_CAN[Analog_1_4];
 80022cc:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <Tx_Analog_1_4+0x12c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a1d      	ldr	r2, [pc, #116]	; (8002348 <Tx_Analog_1_4+0x130>)
 80022d2:	8812      	ldrh	r2, [r2, #0]
 80022d4:	1a9b      	subs	r3, r3, r2
 80022d6:	4a1b      	ldr	r2, [pc, #108]	; (8002344 <Tx_Analog_1_4+0x12c>)
 80022d8:	6013      	str	r3, [r2, #0]
		if(HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK)
 80022da:	4b1c      	ldr	r3, [pc, #112]	; (800234c <Tx_Analog_1_4+0x134>)
 80022dc:	4a16      	ldr	r2, [pc, #88]	; (8002338 <Tx_Analog_1_4+0x120>)
 80022de:	4914      	ldr	r1, [pc, #80]	; (8002330 <Tx_Analog_1_4+0x118>)
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f004 ffb5 	bl	8007250 <HAL_CAN_AddTxMessage>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d107      	bne.n	80022fc <Tx_Analog_1_4+0xe4>
			Verify_CAN |= 1;
 80022ec:	4b18      	ldr	r3, [pc, #96]	; (8002350 <Tx_Analog_1_4+0x138>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	4b16      	ldr	r3, [pc, #88]	; (8002350 <Tx_Analog_1_4+0x138>)
 80022f8:	701a      	strb	r2, [r3, #0]
 80022fa:	e006      	b.n	800230a <Tx_Analog_1_4+0xf2>
		else
			Verify_CAN &= 0x02;
 80022fc:	4b14      	ldr	r3, [pc, #80]	; (8002350 <Tx_Analog_1_4+0x138>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	b2da      	uxtb	r2, r3
 8002306:	4b12      	ldr	r3, [pc, #72]	; (8002350 <Tx_Analog_1_4+0x138>)
 8002308:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 800230a:	2300      	movs	r3, #0
 800230c:	73fb      	strb	r3, [r7, #15]
 800230e:	e002      	b.n	8002316 <Tx_Analog_1_4+0xfe>
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	3301      	adds	r3, #1
 8002314:	73fb      	strb	r3, [r7, #15]
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f005 f875 	bl	8007406 <HAL_CAN_GetTxMailboxesFreeLevel>
 800231c:	4603      	mov	r3, r0
 800231e:	2b03      	cmp	r3, #3
 8002320:	d002      	beq.n	8002328 <Tx_Analog_1_4+0x110>
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	2b02      	cmp	r3, #2
 8002326:	d9f3      	bls.n	8002310 <Tx_Analog_1_4+0xf8>
	}
}
 8002328:	bf00      	nop
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20002d98 	.word	0x20002d98
 8002334:	20000704 	.word	0x20000704
 8002338:	20001bc8 	.word	0x20001bc8
 800233c:	20001bd0 	.word	0x20001bd0
 8002340:	20001c84 	.word	0x20001c84
 8002344:	20002d54 	.word	0x20002d54
 8002348:	200006fc 	.word	0x200006fc
 800234c:	20001c58 	.word	0x20001c58
 8002350:	20001a58 	.word	0x20001a58

08002354 <Tx_Analog_5_8>:

static void Tx_Analog_5_8(CAN_HandleTypeDef* hcan)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 800235c:	4b43      	ldr	r3, [pc, #268]	; (800246c <Tx_Analog_5_8+0x118>)
 800235e:	2200      	movs	r2, #0
 8002360:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8002362:	4b42      	ldr	r3, [pc, #264]	; (800246c <Tx_Analog_5_8+0x118>)
 8002364:	2200      	movs	r2, #0
 8002366:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8002368:	4b40      	ldr	r3, [pc, #256]	; (800246c <Tx_Analog_5_8+0x118>)
 800236a:	2200      	movs	r2, #0
 800236c:	751a      	strb	r2, [r3, #20]
	TxHeader.StdId = FIRST_ID + Analog_5_8;
 800236e:	4b3f      	ldr	r3, [pc, #252]	; (800246c <Tx_Analog_5_8+0x118>)
 8002370:	2202      	movs	r2, #2
 8002372:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 8;
 8002374:	4b3d      	ldr	r3, [pc, #244]	; (800246c <Tx_Analog_5_8+0x118>)
 8002376:	2208      	movs	r2, #8
 8002378:	611a      	str	r2, [r3, #16]

	TxData[0] = ADC_Buffer[4] >> 8;
 800237a:	4b3d      	ldr	r3, [pc, #244]	; (8002470 <Tx_Analog_5_8+0x11c>)
 800237c:	891b      	ldrh	r3, [r3, #8]
 800237e:	0a1b      	lsrs	r3, r3, #8
 8002380:	b29b      	uxth	r3, r3
 8002382:	b2da      	uxtb	r2, r3
 8002384:	4b3b      	ldr	r3, [pc, #236]	; (8002474 <Tx_Analog_5_8+0x120>)
 8002386:	701a      	strb	r2, [r3, #0]
	TxData[1] = ADC_Buffer[4] & 0xff;
 8002388:	4b39      	ldr	r3, [pc, #228]	; (8002470 <Tx_Analog_5_8+0x11c>)
 800238a:	891b      	ldrh	r3, [r3, #8]
 800238c:	b2da      	uxtb	r2, r3
 800238e:	4b39      	ldr	r3, [pc, #228]	; (8002474 <Tx_Analog_5_8+0x120>)
 8002390:	705a      	strb	r2, [r3, #1]
	TxData[2] = ADC_Buffer[5] >> 8;
 8002392:	4b37      	ldr	r3, [pc, #220]	; (8002470 <Tx_Analog_5_8+0x11c>)
 8002394:	895b      	ldrh	r3, [r3, #10]
 8002396:	0a1b      	lsrs	r3, r3, #8
 8002398:	b29b      	uxth	r3, r3
 800239a:	b2da      	uxtb	r2, r3
 800239c:	4b35      	ldr	r3, [pc, #212]	; (8002474 <Tx_Analog_5_8+0x120>)
 800239e:	709a      	strb	r2, [r3, #2]
	TxData[3] = ADC_Buffer[5] & 0xff;
 80023a0:	4b33      	ldr	r3, [pc, #204]	; (8002470 <Tx_Analog_5_8+0x11c>)
 80023a2:	895b      	ldrh	r3, [r3, #10]
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4b33      	ldr	r3, [pc, #204]	; (8002474 <Tx_Analog_5_8+0x120>)
 80023a8:	70da      	strb	r2, [r3, #3]
	TxData[4] = ADC_Buffer[6] >> 8;
 80023aa:	4b31      	ldr	r3, [pc, #196]	; (8002470 <Tx_Analog_5_8+0x11c>)
 80023ac:	899b      	ldrh	r3, [r3, #12]
 80023ae:	0a1b      	lsrs	r3, r3, #8
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	4b2f      	ldr	r3, [pc, #188]	; (8002474 <Tx_Analog_5_8+0x120>)
 80023b6:	711a      	strb	r2, [r3, #4]
	TxData[5] = ADC_Buffer[6] & 0xff;
 80023b8:	4b2d      	ldr	r3, [pc, #180]	; (8002470 <Tx_Analog_5_8+0x11c>)
 80023ba:	899b      	ldrh	r3, [r3, #12]
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	4b2d      	ldr	r3, [pc, #180]	; (8002474 <Tx_Analog_5_8+0x120>)
 80023c0:	715a      	strb	r2, [r3, #5]
	TxData[6] = ADC_Buffer[7] >> 8;
 80023c2:	4b2b      	ldr	r3, [pc, #172]	; (8002470 <Tx_Analog_5_8+0x11c>)
 80023c4:	89db      	ldrh	r3, [r3, #14]
 80023c6:	0a1b      	lsrs	r3, r3, #8
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	4b29      	ldr	r3, [pc, #164]	; (8002474 <Tx_Analog_5_8+0x120>)
 80023ce:	719a      	strb	r2, [r3, #6]
	TxData[7] = ADC_Buffer[7] & 0xff;
 80023d0:	4b27      	ldr	r3, [pc, #156]	; (8002470 <Tx_Analog_5_8+0x11c>)
 80023d2:	89db      	ldrh	r3, [r3, #14]
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	4b27      	ldr	r3, [pc, #156]	; (8002474 <Tx_Analog_5_8+0x120>)
 80023d8:	71da      	strb	r2, [r3, #7]

	if(Flag_Datalogger == DL_Save)
 80023da:	4b27      	ldr	r3, [pc, #156]	; (8002478 <Tx_Analog_5_8+0x124>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d108      	bne.n	80023f4 <Tx_Analog_5_8+0xa0>
		Principal_Datalogger_Save_Buffer(TxHeader.StdId, TxHeader.DLC, TxData, &File_Struct);
 80023e2:	4b22      	ldr	r3, [pc, #136]	; (800246c <Tx_Analog_5_8+0x118>)
 80023e4:	6818      	ldr	r0, [r3, #0]
 80023e6:	4b21      	ldr	r3, [pc, #132]	; (800246c <Tx_Analog_5_8+0x118>)
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	b2d9      	uxtb	r1, r3
 80023ec:	4b23      	ldr	r3, [pc, #140]	; (800247c <Tx_Analog_5_8+0x128>)
 80023ee:	4a21      	ldr	r2, [pc, #132]	; (8002474 <Tx_Analog_5_8+0x120>)
 80023f0:	f003 f9c8 	bl	8005784 <Principal_Datalogger_Save_Buffer>

	if((Acc_CAN[Analog_5_8] >= Per_CAN[Analog_5_8]) && (Per_CAN[Analog_5_8] != 0))
 80023f4:	4b22      	ldr	r3, [pc, #136]	; (8002480 <Tx_Analog_5_8+0x12c>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	4a22      	ldr	r2, [pc, #136]	; (8002484 <Tx_Analog_5_8+0x130>)
 80023fa:	8852      	ldrh	r2, [r2, #2]
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d331      	bcc.n	8002464 <Tx_Analog_5_8+0x110>
 8002400:	4b20      	ldr	r3, [pc, #128]	; (8002484 <Tx_Analog_5_8+0x130>)
 8002402:	885b      	ldrh	r3, [r3, #2]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d02d      	beq.n	8002464 <Tx_Analog_5_8+0x110>
	{
		Acc_CAN[Analog_5_8] -= Per_CAN[Analog_5_8];
 8002408:	4b1d      	ldr	r3, [pc, #116]	; (8002480 <Tx_Analog_5_8+0x12c>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	4a1d      	ldr	r2, [pc, #116]	; (8002484 <Tx_Analog_5_8+0x130>)
 800240e:	8852      	ldrh	r2, [r2, #2]
 8002410:	1a9b      	subs	r3, r3, r2
 8002412:	4a1b      	ldr	r2, [pc, #108]	; (8002480 <Tx_Analog_5_8+0x12c>)
 8002414:	6053      	str	r3, [r2, #4]
		if(HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK)
 8002416:	4b1c      	ldr	r3, [pc, #112]	; (8002488 <Tx_Analog_5_8+0x134>)
 8002418:	4a16      	ldr	r2, [pc, #88]	; (8002474 <Tx_Analog_5_8+0x120>)
 800241a:	4914      	ldr	r1, [pc, #80]	; (800246c <Tx_Analog_5_8+0x118>)
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f004 ff17 	bl	8007250 <HAL_CAN_AddTxMessage>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d107      	bne.n	8002438 <Tx_Analog_5_8+0xe4>
			Verify_CAN |= 1;
 8002428:	4b18      	ldr	r3, [pc, #96]	; (800248c <Tx_Analog_5_8+0x138>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	b2da      	uxtb	r2, r3
 8002432:	4b16      	ldr	r3, [pc, #88]	; (800248c <Tx_Analog_5_8+0x138>)
 8002434:	701a      	strb	r2, [r3, #0]
 8002436:	e006      	b.n	8002446 <Tx_Analog_5_8+0xf2>
		else
			Verify_CAN &= 0x02;
 8002438:	4b14      	ldr	r3, [pc, #80]	; (800248c <Tx_Analog_5_8+0x138>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	b2da      	uxtb	r2, r3
 8002442:	4b12      	ldr	r3, [pc, #72]	; (800248c <Tx_Analog_5_8+0x138>)
 8002444:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8002446:	2300      	movs	r3, #0
 8002448:	73fb      	strb	r3, [r7, #15]
 800244a:	e002      	b.n	8002452 <Tx_Analog_5_8+0xfe>
 800244c:	7bfb      	ldrb	r3, [r7, #15]
 800244e:	3301      	adds	r3, #1
 8002450:	73fb      	strb	r3, [r7, #15]
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f004 ffd7 	bl	8007406 <HAL_CAN_GetTxMailboxesFreeLevel>
 8002458:	4603      	mov	r3, r0
 800245a:	2b03      	cmp	r3, #3
 800245c:	d002      	beq.n	8002464 <Tx_Analog_5_8+0x110>
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	2b02      	cmp	r3, #2
 8002462:	d9f3      	bls.n	800244c <Tx_Analog_5_8+0xf8>
	}
}
 8002464:	bf00      	nop
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	20002d98 	.word	0x20002d98
 8002470:	20000704 	.word	0x20000704
 8002474:	20001bc8 	.word	0x20001bc8
 8002478:	20001bd0 	.word	0x20001bd0
 800247c:	20001c84 	.word	0x20001c84
 8002480:	20002d54 	.word	0x20002d54
 8002484:	200006fc 	.word	0x200006fc
 8002488:	20001c58 	.word	0x20001c58
 800248c:	20001a58 	.word	0x20001a58

08002490 <Tx_Analog_9_12>:

static void Tx_Analog_9_12(CAN_HandleTypeDef* hcan)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 8002498:	4b43      	ldr	r3, [pc, #268]	; (80025a8 <Tx_Analog_9_12+0x118>)
 800249a:	2200      	movs	r2, #0
 800249c:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 800249e:	4b42      	ldr	r3, [pc, #264]	; (80025a8 <Tx_Analog_9_12+0x118>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 80024a4:	4b40      	ldr	r3, [pc, #256]	; (80025a8 <Tx_Analog_9_12+0x118>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	751a      	strb	r2, [r3, #20]
	TxHeader.StdId = FIRST_ID + Analog_9_12;
 80024aa:	4b3f      	ldr	r3, [pc, #252]	; (80025a8 <Tx_Analog_9_12+0x118>)
 80024ac:	2203      	movs	r2, #3
 80024ae:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 8;
 80024b0:	4b3d      	ldr	r3, [pc, #244]	; (80025a8 <Tx_Analog_9_12+0x118>)
 80024b2:	2208      	movs	r2, #8
 80024b4:	611a      	str	r2, [r3, #16]

	TxData[0] = ADC_Buffer[8] >> 8;
 80024b6:	4b3d      	ldr	r3, [pc, #244]	; (80025ac <Tx_Analog_9_12+0x11c>)
 80024b8:	8a1b      	ldrh	r3, [r3, #16]
 80024ba:	0a1b      	lsrs	r3, r3, #8
 80024bc:	b29b      	uxth	r3, r3
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	4b3b      	ldr	r3, [pc, #236]	; (80025b0 <Tx_Analog_9_12+0x120>)
 80024c2:	701a      	strb	r2, [r3, #0]
	TxData[1] = ADC_Buffer[8] & 0xff;
 80024c4:	4b39      	ldr	r3, [pc, #228]	; (80025ac <Tx_Analog_9_12+0x11c>)
 80024c6:	8a1b      	ldrh	r3, [r3, #16]
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	4b39      	ldr	r3, [pc, #228]	; (80025b0 <Tx_Analog_9_12+0x120>)
 80024cc:	705a      	strb	r2, [r3, #1]
	TxData[2] = ADC_Buffer[9] >> 8;
 80024ce:	4b37      	ldr	r3, [pc, #220]	; (80025ac <Tx_Analog_9_12+0x11c>)
 80024d0:	8a5b      	ldrh	r3, [r3, #18]
 80024d2:	0a1b      	lsrs	r3, r3, #8
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	4b35      	ldr	r3, [pc, #212]	; (80025b0 <Tx_Analog_9_12+0x120>)
 80024da:	709a      	strb	r2, [r3, #2]
	TxData[3] = ADC_Buffer[9] & 0xff;
 80024dc:	4b33      	ldr	r3, [pc, #204]	; (80025ac <Tx_Analog_9_12+0x11c>)
 80024de:	8a5b      	ldrh	r3, [r3, #18]
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	4b33      	ldr	r3, [pc, #204]	; (80025b0 <Tx_Analog_9_12+0x120>)
 80024e4:	70da      	strb	r2, [r3, #3]
	TxData[4] = ADC_Buffer[10] >> 8;
 80024e6:	4b31      	ldr	r3, [pc, #196]	; (80025ac <Tx_Analog_9_12+0x11c>)
 80024e8:	8a9b      	ldrh	r3, [r3, #20]
 80024ea:	0a1b      	lsrs	r3, r3, #8
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	4b2f      	ldr	r3, [pc, #188]	; (80025b0 <Tx_Analog_9_12+0x120>)
 80024f2:	711a      	strb	r2, [r3, #4]
	TxData[5] = ADC_Buffer[10] & 0xff;
 80024f4:	4b2d      	ldr	r3, [pc, #180]	; (80025ac <Tx_Analog_9_12+0x11c>)
 80024f6:	8a9b      	ldrh	r3, [r3, #20]
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	4b2d      	ldr	r3, [pc, #180]	; (80025b0 <Tx_Analog_9_12+0x120>)
 80024fc:	715a      	strb	r2, [r3, #5]
	TxData[6] = ADC_Buffer[11] >> 8;
 80024fe:	4b2b      	ldr	r3, [pc, #172]	; (80025ac <Tx_Analog_9_12+0x11c>)
 8002500:	8adb      	ldrh	r3, [r3, #22]
 8002502:	0a1b      	lsrs	r3, r3, #8
 8002504:	b29b      	uxth	r3, r3
 8002506:	b2da      	uxtb	r2, r3
 8002508:	4b29      	ldr	r3, [pc, #164]	; (80025b0 <Tx_Analog_9_12+0x120>)
 800250a:	719a      	strb	r2, [r3, #6]
	TxData[7] = ADC_Buffer[11] & 0xff;
 800250c:	4b27      	ldr	r3, [pc, #156]	; (80025ac <Tx_Analog_9_12+0x11c>)
 800250e:	8adb      	ldrh	r3, [r3, #22]
 8002510:	b2da      	uxtb	r2, r3
 8002512:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <Tx_Analog_9_12+0x120>)
 8002514:	71da      	strb	r2, [r3, #7]

	if(Flag_Datalogger == DL_Save)
 8002516:	4b27      	ldr	r3, [pc, #156]	; (80025b4 <Tx_Analog_9_12+0x124>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d108      	bne.n	8002530 <Tx_Analog_9_12+0xa0>
		Principal_Datalogger_Save_Buffer(TxHeader.StdId, TxHeader.DLC, TxData, &File_Struct);
 800251e:	4b22      	ldr	r3, [pc, #136]	; (80025a8 <Tx_Analog_9_12+0x118>)
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	4b21      	ldr	r3, [pc, #132]	; (80025a8 <Tx_Analog_9_12+0x118>)
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	b2d9      	uxtb	r1, r3
 8002528:	4b23      	ldr	r3, [pc, #140]	; (80025b8 <Tx_Analog_9_12+0x128>)
 800252a:	4a21      	ldr	r2, [pc, #132]	; (80025b0 <Tx_Analog_9_12+0x120>)
 800252c:	f003 f92a 	bl	8005784 <Principal_Datalogger_Save_Buffer>

	if((Acc_CAN[Analog_9_12] >= Per_CAN[Analog_9_12]) && (Per_CAN[Analog_9_12] != 0))
 8002530:	4b22      	ldr	r3, [pc, #136]	; (80025bc <Tx_Analog_9_12+0x12c>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	4a22      	ldr	r2, [pc, #136]	; (80025c0 <Tx_Analog_9_12+0x130>)
 8002536:	8892      	ldrh	r2, [r2, #4]
 8002538:	4293      	cmp	r3, r2
 800253a:	d331      	bcc.n	80025a0 <Tx_Analog_9_12+0x110>
 800253c:	4b20      	ldr	r3, [pc, #128]	; (80025c0 <Tx_Analog_9_12+0x130>)
 800253e:	889b      	ldrh	r3, [r3, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d02d      	beq.n	80025a0 <Tx_Analog_9_12+0x110>
	{
		Acc_CAN[Analog_9_12] -= Per_CAN[Analog_9_12];
 8002544:	4b1d      	ldr	r3, [pc, #116]	; (80025bc <Tx_Analog_9_12+0x12c>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	4a1d      	ldr	r2, [pc, #116]	; (80025c0 <Tx_Analog_9_12+0x130>)
 800254a:	8892      	ldrh	r2, [r2, #4]
 800254c:	1a9b      	subs	r3, r3, r2
 800254e:	4a1b      	ldr	r2, [pc, #108]	; (80025bc <Tx_Analog_9_12+0x12c>)
 8002550:	6093      	str	r3, [r2, #8]
		if(HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK)
 8002552:	4b1c      	ldr	r3, [pc, #112]	; (80025c4 <Tx_Analog_9_12+0x134>)
 8002554:	4a16      	ldr	r2, [pc, #88]	; (80025b0 <Tx_Analog_9_12+0x120>)
 8002556:	4914      	ldr	r1, [pc, #80]	; (80025a8 <Tx_Analog_9_12+0x118>)
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f004 fe79 	bl	8007250 <HAL_CAN_AddTxMessage>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d107      	bne.n	8002574 <Tx_Analog_9_12+0xe4>
			Verify_CAN |= 1;
 8002564:	4b18      	ldr	r3, [pc, #96]	; (80025c8 <Tx_Analog_9_12+0x138>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	b2da      	uxtb	r2, r3
 800256e:	4b16      	ldr	r3, [pc, #88]	; (80025c8 <Tx_Analog_9_12+0x138>)
 8002570:	701a      	strb	r2, [r3, #0]
 8002572:	e006      	b.n	8002582 <Tx_Analog_9_12+0xf2>
		else
			Verify_CAN &= 0x02;
 8002574:	4b14      	ldr	r3, [pc, #80]	; (80025c8 <Tx_Analog_9_12+0x138>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	b2da      	uxtb	r2, r3
 800257e:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <Tx_Analog_9_12+0x138>)
 8002580:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8002582:	2300      	movs	r3, #0
 8002584:	73fb      	strb	r3, [r7, #15]
 8002586:	e002      	b.n	800258e <Tx_Analog_9_12+0xfe>
 8002588:	7bfb      	ldrb	r3, [r7, #15]
 800258a:	3301      	adds	r3, #1
 800258c:	73fb      	strb	r3, [r7, #15]
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f004 ff39 	bl	8007406 <HAL_CAN_GetTxMailboxesFreeLevel>
 8002594:	4603      	mov	r3, r0
 8002596:	2b03      	cmp	r3, #3
 8002598:	d002      	beq.n	80025a0 <Tx_Analog_9_12+0x110>
 800259a:	7bfb      	ldrb	r3, [r7, #15]
 800259c:	2b02      	cmp	r3, #2
 800259e:	d9f3      	bls.n	8002588 <Tx_Analog_9_12+0xf8>
	}
}
 80025a0:	bf00      	nop
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20002d98 	.word	0x20002d98
 80025ac:	20000704 	.word	0x20000704
 80025b0:	20001bc8 	.word	0x20001bc8
 80025b4:	20001bd0 	.word	0x20001bd0
 80025b8:	20001c84 	.word	0x20001c84
 80025bc:	20002d54 	.word	0x20002d54
 80025c0:	200006fc 	.word	0x200006fc
 80025c4:	20001c58 	.word	0x20001c58
 80025c8:	20001a58 	.word	0x20001a58

080025cc <Tx_RTC>:

static void Tx_RTC(CAN_HandleTypeDef* hcan)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 80025d4:	4b3d      	ldr	r3, [pc, #244]	; (80026cc <Tx_RTC+0x100>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80025da:	4b3c      	ldr	r3, [pc, #240]	; (80026cc <Tx_RTC+0x100>)
 80025dc:	2200      	movs	r2, #0
 80025de:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 80025e0:	4b3a      	ldr	r3, [pc, #232]	; (80026cc <Tx_RTC+0x100>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	751a      	strb	r2, [r3, #20]
	TxHeader.StdId = FIRST_ID + RTC_Msg;
 80025e6:	4b39      	ldr	r3, [pc, #228]	; (80026cc <Tx_RTC+0x100>)
 80025e8:	2204      	movs	r2, #4
 80025ea:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 8;
 80025ec:	4b37      	ldr	r3, [pc, #220]	; (80026cc <Tx_RTC+0x100>)
 80025ee:	2208      	movs	r2, #8
 80025f0:	611a      	str	r2, [r3, #16]

	TxData[0] = Date.Year;
 80025f2:	4b37      	ldr	r3, [pc, #220]	; (80026d0 <Tx_RTC+0x104>)
 80025f4:	78da      	ldrb	r2, [r3, #3]
 80025f6:	4b37      	ldr	r3, [pc, #220]	; (80026d4 <Tx_RTC+0x108>)
 80025f8:	701a      	strb	r2, [r3, #0]
	TxData[1] = Date.Month;
 80025fa:	4b35      	ldr	r3, [pc, #212]	; (80026d0 <Tx_RTC+0x104>)
 80025fc:	785a      	ldrb	r2, [r3, #1]
 80025fe:	4b35      	ldr	r3, [pc, #212]	; (80026d4 <Tx_RTC+0x108>)
 8002600:	705a      	strb	r2, [r3, #1]
	TxData[2] = Date.Date;
 8002602:	4b33      	ldr	r3, [pc, #204]	; (80026d0 <Tx_RTC+0x104>)
 8002604:	789a      	ldrb	r2, [r3, #2]
 8002606:	4b33      	ldr	r3, [pc, #204]	; (80026d4 <Tx_RTC+0x108>)
 8002608:	709a      	strb	r2, [r3, #2]
	TxData[3] = Time.Hours;
 800260a:	4b33      	ldr	r3, [pc, #204]	; (80026d8 <Tx_RTC+0x10c>)
 800260c:	781a      	ldrb	r2, [r3, #0]
 800260e:	4b31      	ldr	r3, [pc, #196]	; (80026d4 <Tx_RTC+0x108>)
 8002610:	70da      	strb	r2, [r3, #3]
	TxData[4] = Time.Minutes;
 8002612:	4b31      	ldr	r3, [pc, #196]	; (80026d8 <Tx_RTC+0x10c>)
 8002614:	785a      	ldrb	r2, [r3, #1]
 8002616:	4b2f      	ldr	r3, [pc, #188]	; (80026d4 <Tx_RTC+0x108>)
 8002618:	711a      	strb	r2, [r3, #4]
	TxData[5] = Time.Seconds;
 800261a:	4b2f      	ldr	r3, [pc, #188]	; (80026d8 <Tx_RTC+0x10c>)
 800261c:	789a      	ldrb	r2, [r3, #2]
 800261e:	4b2d      	ldr	r3, [pc, #180]	; (80026d4 <Tx_RTC+0x108>)
 8002620:	715a      	strb	r2, [r3, #5]
	TxData[6] = ADC_Buffer[12] >> 8;
 8002622:	4b2e      	ldr	r3, [pc, #184]	; (80026dc <Tx_RTC+0x110>)
 8002624:	8b1b      	ldrh	r3, [r3, #24]
 8002626:	0a1b      	lsrs	r3, r3, #8
 8002628:	b29b      	uxth	r3, r3
 800262a:	b2da      	uxtb	r2, r3
 800262c:	4b29      	ldr	r3, [pc, #164]	; (80026d4 <Tx_RTC+0x108>)
 800262e:	719a      	strb	r2, [r3, #6]
	TxData[7] = ADC_Buffer[12] & 0xff;
 8002630:	4b2a      	ldr	r3, [pc, #168]	; (80026dc <Tx_RTC+0x110>)
 8002632:	8b1b      	ldrh	r3, [r3, #24]
 8002634:	b2da      	uxtb	r2, r3
 8002636:	4b27      	ldr	r3, [pc, #156]	; (80026d4 <Tx_RTC+0x108>)
 8002638:	71da      	strb	r2, [r3, #7]

	if(Flag_Datalogger == DL_Save)
 800263a:	4b29      	ldr	r3, [pc, #164]	; (80026e0 <Tx_RTC+0x114>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d108      	bne.n	8002654 <Tx_RTC+0x88>
		Principal_Datalogger_Save_Buffer(TxHeader.StdId, TxHeader.DLC, TxData, &File_Struct);
 8002642:	4b22      	ldr	r3, [pc, #136]	; (80026cc <Tx_RTC+0x100>)
 8002644:	6818      	ldr	r0, [r3, #0]
 8002646:	4b21      	ldr	r3, [pc, #132]	; (80026cc <Tx_RTC+0x100>)
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	b2d9      	uxtb	r1, r3
 800264c:	4b25      	ldr	r3, [pc, #148]	; (80026e4 <Tx_RTC+0x118>)
 800264e:	4a21      	ldr	r2, [pc, #132]	; (80026d4 <Tx_RTC+0x108>)
 8002650:	f003 f898 	bl	8005784 <Principal_Datalogger_Save_Buffer>

	if((Acc_CAN[RTC_Msg] >= Per_CAN[RTC_Msg]) && (Per_CAN[RTC_Msg] != 0))
 8002654:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <Tx_RTC+0x11c>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	4a24      	ldr	r2, [pc, #144]	; (80026ec <Tx_RTC+0x120>)
 800265a:	88d2      	ldrh	r2, [r2, #6]
 800265c:	4293      	cmp	r3, r2
 800265e:	d331      	bcc.n	80026c4 <Tx_RTC+0xf8>
 8002660:	4b22      	ldr	r3, [pc, #136]	; (80026ec <Tx_RTC+0x120>)
 8002662:	88db      	ldrh	r3, [r3, #6]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d02d      	beq.n	80026c4 <Tx_RTC+0xf8>
	{
		Acc_CAN[RTC_Msg] -= Per_CAN[RTC_Msg];
 8002668:	4b1f      	ldr	r3, [pc, #124]	; (80026e8 <Tx_RTC+0x11c>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	4a1f      	ldr	r2, [pc, #124]	; (80026ec <Tx_RTC+0x120>)
 800266e:	88d2      	ldrh	r2, [r2, #6]
 8002670:	1a9b      	subs	r3, r3, r2
 8002672:	4a1d      	ldr	r2, [pc, #116]	; (80026e8 <Tx_RTC+0x11c>)
 8002674:	60d3      	str	r3, [r2, #12]
		if(HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK)
 8002676:	4b1e      	ldr	r3, [pc, #120]	; (80026f0 <Tx_RTC+0x124>)
 8002678:	4a16      	ldr	r2, [pc, #88]	; (80026d4 <Tx_RTC+0x108>)
 800267a:	4914      	ldr	r1, [pc, #80]	; (80026cc <Tx_RTC+0x100>)
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f004 fde7 	bl	8007250 <HAL_CAN_AddTxMessage>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d107      	bne.n	8002698 <Tx_RTC+0xcc>
			Verify_CAN |= 1;
 8002688:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <Tx_RTC+0x128>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	b2da      	uxtb	r2, r3
 8002692:	4b18      	ldr	r3, [pc, #96]	; (80026f4 <Tx_RTC+0x128>)
 8002694:	701a      	strb	r2, [r3, #0]
 8002696:	e006      	b.n	80026a6 <Tx_RTC+0xda>
		else
			Verify_CAN &= 0x02;
 8002698:	4b16      	ldr	r3, [pc, #88]	; (80026f4 <Tx_RTC+0x128>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	4b14      	ldr	r3, [pc, #80]	; (80026f4 <Tx_RTC+0x128>)
 80026a4:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 80026a6:	2300      	movs	r3, #0
 80026a8:	73fb      	strb	r3, [r7, #15]
 80026aa:	e002      	b.n	80026b2 <Tx_RTC+0xe6>
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
 80026ae:	3301      	adds	r3, #1
 80026b0:	73fb      	strb	r3, [r7, #15]
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f004 fea7 	bl	8007406 <HAL_CAN_GetTxMailboxesFreeLevel>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b03      	cmp	r3, #3
 80026bc:	d002      	beq.n	80026c4 <Tx_RTC+0xf8>
 80026be:	7bfb      	ldrb	r3, [r7, #15]
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d9f3      	bls.n	80026ac <Tx_RTC+0xe0>
	}
}
 80026c4:	bf00      	nop
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20002d98 	.word	0x20002d98
 80026d0:	20001a5c 	.word	0x20001a5c
 80026d4:	20001bc8 	.word	0x20001bc8
 80026d8:	20002cb0 	.word	0x20002cb0
 80026dc:	20000704 	.word	0x20000704
 80026e0:	20001bd0 	.word	0x20001bd0
 80026e4:	20001c84 	.word	0x20001c84
 80026e8:	20002d54 	.word	0x20002d54
 80026ec:	200006fc 	.word	0x200006fc
 80026f0:	20001c58 	.word	0x20001c58
 80026f4:	20001a58 	.word	0x20001a58

080026f8 <Tx_Verify>:

static void Tx_Verify(CAN_HandleTypeDef* hcan)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 8002700:	4bcb      	ldr	r3, [pc, #812]	; (8002a30 <Tx_Verify+0x338>)
 8002702:	2200      	movs	r2, #0
 8002704:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8002706:	4bca      	ldr	r3, [pc, #808]	; (8002a30 <Tx_Verify+0x338>)
 8002708:	2200      	movs	r2, #0
 800270a:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 800270c:	4bc8      	ldr	r3, [pc, #800]	; (8002a30 <Tx_Verify+0x338>)
 800270e:	2200      	movs	r2, #0
 8002710:	751a      	strb	r2, [r3, #20]
	TxHeader.StdId = FIRST_ID + Verify_Msg;
 8002712:	4bc7      	ldr	r3, [pc, #796]	; (8002a30 <Tx_Verify+0x338>)
 8002714:	2205      	movs	r2, #5
 8002716:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 8;
 8002718:	4bc5      	ldr	r3, [pc, #788]	; (8002a30 <Tx_Verify+0x338>)
 800271a:	2208      	movs	r2, #8
 800271c:	611a      	str	r2, [r3, #16]

	Verify_Data();
 800271e:	f7ff fd17 	bl	8002150 <Verify_Data>

	TxData[0]  = Verify >> 8;
 8002722:	4bc4      	ldr	r3, [pc, #784]	; (8002a34 <Tx_Verify+0x33c>)
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	0a1b      	lsrs	r3, r3, #8
 8002728:	b29b      	uxth	r3, r3
 800272a:	b2da      	uxtb	r2, r3
 800272c:	4bc2      	ldr	r3, [pc, #776]	; (8002a38 <Tx_Verify+0x340>)
 800272e:	701a      	strb	r2, [r3, #0]
	TxData[1]  = Verify & 0x0f;
 8002730:	4bc0      	ldr	r3, [pc, #768]	; (8002a34 <Tx_Verify+0x33c>)
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	b2db      	uxtb	r3, r3
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	b2da      	uxtb	r2, r3
 800273c:	4bbe      	ldr	r3, [pc, #760]	; (8002a38 <Tx_Verify+0x340>)
 800273e:	705a      	strb	r2, [r3, #1]
	TxData[1] |= Verify_Datalogger << 4;
 8002740:	4bbd      	ldr	r3, [pc, #756]	; (8002a38 <Tx_Verify+0x340>)
 8002742:	785b      	ldrb	r3, [r3, #1]
 8002744:	b25a      	sxtb	r2, r3
 8002746:	4bbd      	ldr	r3, [pc, #756]	; (8002a3c <Tx_Verify+0x344>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	b25b      	sxtb	r3, r3
 800274e:	4313      	orrs	r3, r2
 8002750:	b25b      	sxtb	r3, r3
 8002752:	b2da      	uxtb	r2, r3
 8002754:	4bb8      	ldr	r3, [pc, #736]	; (8002a38 <Tx_Verify+0x340>)
 8002756:	705a      	strb	r2, [r3, #1]

	__SAVE_FREQ(TxData[2], Per_Msg[Analog_1_4]);
 8002758:	4bb9      	ldr	r3, [pc, #740]	; (8002a40 <Tx_Verify+0x348>)
 800275a:	881b      	ldrh	r3, [r3, #0]
 800275c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002760:	f000 8081 	beq.w	8002866 <Tx_Verify+0x16e>
 8002764:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002768:	f300 80a9 	bgt.w	80028be <Tx_Verify+0x1c6>
 800276c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002770:	d07d      	beq.n	800286e <Tx_Verify+0x176>
 8002772:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002776:	f300 80a2 	bgt.w	80028be <Tx_Verify+0x1c6>
 800277a:	2bc8      	cmp	r3, #200	; 0xc8
 800277c:	d07b      	beq.n	8002876 <Tx_Verify+0x17e>
 800277e:	2bc8      	cmp	r3, #200	; 0xc8
 8002780:	f300 809d 	bgt.w	80028be <Tx_Verify+0x1c6>
 8002784:	2b32      	cmp	r3, #50	; 0x32
 8002786:	dc6b      	bgt.n	8002860 <Tx_Verify+0x168>
 8002788:	2b02      	cmp	r3, #2
 800278a:	f2c0 8098 	blt.w	80028be <Tx_Verify+0x1c6>
 800278e:	3b02      	subs	r3, #2
 8002790:	2b30      	cmp	r3, #48	; 0x30
 8002792:	f200 8094 	bhi.w	80028be <Tx_Verify+0x1c6>
 8002796:	a201      	add	r2, pc, #4	; (adr r2, 800279c <Tx_Verify+0xa4>)
 8002798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279c:	080028b7 	.word	0x080028b7
 80027a0:	080028af 	.word	0x080028af
 80027a4:	080028bf 	.word	0x080028bf
 80027a8:	080028a7 	.word	0x080028a7
 80027ac:	080028bf 	.word	0x080028bf
 80027b0:	080028bf 	.word	0x080028bf
 80027b4:	080028bf 	.word	0x080028bf
 80027b8:	080028bf 	.word	0x080028bf
 80027bc:	0800289f 	.word	0x0800289f
 80027c0:	080028bf 	.word	0x080028bf
 80027c4:	080028bf 	.word	0x080028bf
 80027c8:	080028bf 	.word	0x080028bf
 80027cc:	080028bf 	.word	0x080028bf
 80027d0:	080028bf 	.word	0x080028bf
 80027d4:	080028bf 	.word	0x080028bf
 80027d8:	080028bf 	.word	0x080028bf
 80027dc:	080028bf 	.word	0x080028bf
 80027e0:	080028bf 	.word	0x080028bf
 80027e4:	08002897 	.word	0x08002897
 80027e8:	080028bf 	.word	0x080028bf
 80027ec:	080028bf 	.word	0x080028bf
 80027f0:	080028bf 	.word	0x080028bf
 80027f4:	080028bf 	.word	0x080028bf
 80027f8:	080028bf 	.word	0x080028bf
 80027fc:	080028bf 	.word	0x080028bf
 8002800:	080028bf 	.word	0x080028bf
 8002804:	080028bf 	.word	0x080028bf
 8002808:	080028bf 	.word	0x080028bf
 800280c:	080028bf 	.word	0x080028bf
 8002810:	080028bf 	.word	0x080028bf
 8002814:	080028bf 	.word	0x080028bf
 8002818:	080028bf 	.word	0x080028bf
 800281c:	080028bf 	.word	0x080028bf
 8002820:	080028bf 	.word	0x080028bf
 8002824:	080028bf 	.word	0x080028bf
 8002828:	080028bf 	.word	0x080028bf
 800282c:	080028bf 	.word	0x080028bf
 8002830:	080028bf 	.word	0x080028bf
 8002834:	0800288f 	.word	0x0800288f
 8002838:	080028bf 	.word	0x080028bf
 800283c:	080028bf 	.word	0x080028bf
 8002840:	080028bf 	.word	0x080028bf
 8002844:	080028bf 	.word	0x080028bf
 8002848:	080028bf 	.word	0x080028bf
 800284c:	080028bf 	.word	0x080028bf
 8002850:	080028bf 	.word	0x080028bf
 8002854:	080028bf 	.word	0x080028bf
 8002858:	080028bf 	.word	0x080028bf
 800285c:	08002887 	.word	0x08002887
 8002860:	2b64      	cmp	r3, #100	; 0x64
 8002862:	d00c      	beq.n	800287e <Tx_Verify+0x186>
 8002864:	e02b      	b.n	80028be <Tx_Verify+0x1c6>
 8002866:	4b74      	ldr	r3, [pc, #464]	; (8002a38 <Tx_Verify+0x340>)
 8002868:	2201      	movs	r2, #1
 800286a:	709a      	strb	r2, [r3, #2]
 800286c:	e02a      	b.n	80028c4 <Tx_Verify+0x1cc>
 800286e:	4b72      	ldr	r3, [pc, #456]	; (8002a38 <Tx_Verify+0x340>)
 8002870:	2202      	movs	r2, #2
 8002872:	709a      	strb	r2, [r3, #2]
 8002874:	e026      	b.n	80028c4 <Tx_Verify+0x1cc>
 8002876:	4b70      	ldr	r3, [pc, #448]	; (8002a38 <Tx_Verify+0x340>)
 8002878:	2203      	movs	r2, #3
 800287a:	709a      	strb	r2, [r3, #2]
 800287c:	e022      	b.n	80028c4 <Tx_Verify+0x1cc>
 800287e:	4b6e      	ldr	r3, [pc, #440]	; (8002a38 <Tx_Verify+0x340>)
 8002880:	2204      	movs	r2, #4
 8002882:	709a      	strb	r2, [r3, #2]
 8002884:	e01e      	b.n	80028c4 <Tx_Verify+0x1cc>
 8002886:	4b6c      	ldr	r3, [pc, #432]	; (8002a38 <Tx_Verify+0x340>)
 8002888:	2205      	movs	r2, #5
 800288a:	709a      	strb	r2, [r3, #2]
 800288c:	e01a      	b.n	80028c4 <Tx_Verify+0x1cc>
 800288e:	4b6a      	ldr	r3, [pc, #424]	; (8002a38 <Tx_Verify+0x340>)
 8002890:	2206      	movs	r2, #6
 8002892:	709a      	strb	r2, [r3, #2]
 8002894:	e016      	b.n	80028c4 <Tx_Verify+0x1cc>
 8002896:	4b68      	ldr	r3, [pc, #416]	; (8002a38 <Tx_Verify+0x340>)
 8002898:	2207      	movs	r2, #7
 800289a:	709a      	strb	r2, [r3, #2]
 800289c:	e012      	b.n	80028c4 <Tx_Verify+0x1cc>
 800289e:	4b66      	ldr	r3, [pc, #408]	; (8002a38 <Tx_Verify+0x340>)
 80028a0:	2208      	movs	r2, #8
 80028a2:	709a      	strb	r2, [r3, #2]
 80028a4:	e00e      	b.n	80028c4 <Tx_Verify+0x1cc>
 80028a6:	4b64      	ldr	r3, [pc, #400]	; (8002a38 <Tx_Verify+0x340>)
 80028a8:	2209      	movs	r2, #9
 80028aa:	709a      	strb	r2, [r3, #2]
 80028ac:	e00a      	b.n	80028c4 <Tx_Verify+0x1cc>
 80028ae:	4b62      	ldr	r3, [pc, #392]	; (8002a38 <Tx_Verify+0x340>)
 80028b0:	220a      	movs	r2, #10
 80028b2:	709a      	strb	r2, [r3, #2]
 80028b4:	e006      	b.n	80028c4 <Tx_Verify+0x1cc>
 80028b6:	4b60      	ldr	r3, [pc, #384]	; (8002a38 <Tx_Verify+0x340>)
 80028b8:	220b      	movs	r2, #11
 80028ba:	709a      	strb	r2, [r3, #2]
 80028bc:	e002      	b.n	80028c4 <Tx_Verify+0x1cc>
 80028be:	4b5e      	ldr	r3, [pc, #376]	; (8002a38 <Tx_Verify+0x340>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	709a      	strb	r2, [r3, #2]
 80028c4:	bf00      	nop
	__SAVE_FREQ(TxData[3], Per_Msg[Analog_5_8]);
 80028c6:	4b5e      	ldr	r3, [pc, #376]	; (8002a40 <Tx_Verify+0x348>)
 80028c8:	885b      	ldrh	r3, [r3, #2]
 80028ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028ce:	f000 8082 	beq.w	80029d6 <Tx_Verify+0x2de>
 80028d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028d6:	f300 80b5 	bgt.w	8002a44 <Tx_Verify+0x34c>
 80028da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80028de:	d07e      	beq.n	80029de <Tx_Verify+0x2e6>
 80028e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80028e4:	f300 80ae 	bgt.w	8002a44 <Tx_Verify+0x34c>
 80028e8:	2bc8      	cmp	r3, #200	; 0xc8
 80028ea:	d07c      	beq.n	80029e6 <Tx_Verify+0x2ee>
 80028ec:	2bc8      	cmp	r3, #200	; 0xc8
 80028ee:	f300 80a9 	bgt.w	8002a44 <Tx_Verify+0x34c>
 80028f2:	2b32      	cmp	r3, #50	; 0x32
 80028f4:	dc6c      	bgt.n	80029d0 <Tx_Verify+0x2d8>
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	f2c0 80a4 	blt.w	8002a44 <Tx_Verify+0x34c>
 80028fc:	3b02      	subs	r3, #2
 80028fe:	2b30      	cmp	r3, #48	; 0x30
 8002900:	f200 80a0 	bhi.w	8002a44 <Tx_Verify+0x34c>
 8002904:	a201      	add	r2, pc, #4	; (adr r2, 800290c <Tx_Verify+0x214>)
 8002906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290a:	bf00      	nop
 800290c:	08002a27 	.word	0x08002a27
 8002910:	08002a1f 	.word	0x08002a1f
 8002914:	08002a45 	.word	0x08002a45
 8002918:	08002a17 	.word	0x08002a17
 800291c:	08002a45 	.word	0x08002a45
 8002920:	08002a45 	.word	0x08002a45
 8002924:	08002a45 	.word	0x08002a45
 8002928:	08002a45 	.word	0x08002a45
 800292c:	08002a0f 	.word	0x08002a0f
 8002930:	08002a45 	.word	0x08002a45
 8002934:	08002a45 	.word	0x08002a45
 8002938:	08002a45 	.word	0x08002a45
 800293c:	08002a45 	.word	0x08002a45
 8002940:	08002a45 	.word	0x08002a45
 8002944:	08002a45 	.word	0x08002a45
 8002948:	08002a45 	.word	0x08002a45
 800294c:	08002a45 	.word	0x08002a45
 8002950:	08002a45 	.word	0x08002a45
 8002954:	08002a07 	.word	0x08002a07
 8002958:	08002a45 	.word	0x08002a45
 800295c:	08002a45 	.word	0x08002a45
 8002960:	08002a45 	.word	0x08002a45
 8002964:	08002a45 	.word	0x08002a45
 8002968:	08002a45 	.word	0x08002a45
 800296c:	08002a45 	.word	0x08002a45
 8002970:	08002a45 	.word	0x08002a45
 8002974:	08002a45 	.word	0x08002a45
 8002978:	08002a45 	.word	0x08002a45
 800297c:	08002a45 	.word	0x08002a45
 8002980:	08002a45 	.word	0x08002a45
 8002984:	08002a45 	.word	0x08002a45
 8002988:	08002a45 	.word	0x08002a45
 800298c:	08002a45 	.word	0x08002a45
 8002990:	08002a45 	.word	0x08002a45
 8002994:	08002a45 	.word	0x08002a45
 8002998:	08002a45 	.word	0x08002a45
 800299c:	08002a45 	.word	0x08002a45
 80029a0:	08002a45 	.word	0x08002a45
 80029a4:	080029ff 	.word	0x080029ff
 80029a8:	08002a45 	.word	0x08002a45
 80029ac:	08002a45 	.word	0x08002a45
 80029b0:	08002a45 	.word	0x08002a45
 80029b4:	08002a45 	.word	0x08002a45
 80029b8:	08002a45 	.word	0x08002a45
 80029bc:	08002a45 	.word	0x08002a45
 80029c0:	08002a45 	.word	0x08002a45
 80029c4:	08002a45 	.word	0x08002a45
 80029c8:	08002a45 	.word	0x08002a45
 80029cc:	080029f7 	.word	0x080029f7
 80029d0:	2b64      	cmp	r3, #100	; 0x64
 80029d2:	d00c      	beq.n	80029ee <Tx_Verify+0x2f6>
 80029d4:	e036      	b.n	8002a44 <Tx_Verify+0x34c>
 80029d6:	4b18      	ldr	r3, [pc, #96]	; (8002a38 <Tx_Verify+0x340>)
 80029d8:	2201      	movs	r2, #1
 80029da:	70da      	strb	r2, [r3, #3]
 80029dc:	e035      	b.n	8002a4a <Tx_Verify+0x352>
 80029de:	4b16      	ldr	r3, [pc, #88]	; (8002a38 <Tx_Verify+0x340>)
 80029e0:	2202      	movs	r2, #2
 80029e2:	70da      	strb	r2, [r3, #3]
 80029e4:	e031      	b.n	8002a4a <Tx_Verify+0x352>
 80029e6:	4b14      	ldr	r3, [pc, #80]	; (8002a38 <Tx_Verify+0x340>)
 80029e8:	2203      	movs	r2, #3
 80029ea:	70da      	strb	r2, [r3, #3]
 80029ec:	e02d      	b.n	8002a4a <Tx_Verify+0x352>
 80029ee:	4b12      	ldr	r3, [pc, #72]	; (8002a38 <Tx_Verify+0x340>)
 80029f0:	2204      	movs	r2, #4
 80029f2:	70da      	strb	r2, [r3, #3]
 80029f4:	e029      	b.n	8002a4a <Tx_Verify+0x352>
 80029f6:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <Tx_Verify+0x340>)
 80029f8:	2205      	movs	r2, #5
 80029fa:	70da      	strb	r2, [r3, #3]
 80029fc:	e025      	b.n	8002a4a <Tx_Verify+0x352>
 80029fe:	4b0e      	ldr	r3, [pc, #56]	; (8002a38 <Tx_Verify+0x340>)
 8002a00:	2206      	movs	r2, #6
 8002a02:	70da      	strb	r2, [r3, #3]
 8002a04:	e021      	b.n	8002a4a <Tx_Verify+0x352>
 8002a06:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <Tx_Verify+0x340>)
 8002a08:	2207      	movs	r2, #7
 8002a0a:	70da      	strb	r2, [r3, #3]
 8002a0c:	e01d      	b.n	8002a4a <Tx_Verify+0x352>
 8002a0e:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <Tx_Verify+0x340>)
 8002a10:	2208      	movs	r2, #8
 8002a12:	70da      	strb	r2, [r3, #3]
 8002a14:	e019      	b.n	8002a4a <Tx_Verify+0x352>
 8002a16:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <Tx_Verify+0x340>)
 8002a18:	2209      	movs	r2, #9
 8002a1a:	70da      	strb	r2, [r3, #3]
 8002a1c:	e015      	b.n	8002a4a <Tx_Verify+0x352>
 8002a1e:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <Tx_Verify+0x340>)
 8002a20:	220a      	movs	r2, #10
 8002a22:	70da      	strb	r2, [r3, #3]
 8002a24:	e011      	b.n	8002a4a <Tx_Verify+0x352>
 8002a26:	4b04      	ldr	r3, [pc, #16]	; (8002a38 <Tx_Verify+0x340>)
 8002a28:	220b      	movs	r2, #11
 8002a2a:	70da      	strb	r2, [r3, #3]
 8002a2c:	e00d      	b.n	8002a4a <Tx_Verify+0x352>
 8002a2e:	bf00      	nop
 8002a30:	20002d98 	.word	0x20002d98
 8002a34:	20002e78 	.word	0x20002e78
 8002a38:	20001bc8 	.word	0x20001bc8
 8002a3c:	20001a10 	.word	0x20001a10
 8002a40:	20002e7c 	.word	0x20002e7c
 8002a44:	4bb7      	ldr	r3, [pc, #732]	; (8002d24 <Tx_Verify+0x62c>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	70da      	strb	r2, [r3, #3]
 8002a4a:	bf00      	nop
	__SAVE_FREQ(TxData[4], Per_Msg[Analog_9_12]);
 8002a4c:	4bb6      	ldr	r3, [pc, #728]	; (8002d28 <Tx_Verify+0x630>)
 8002a4e:	889b      	ldrh	r3, [r3, #4]
 8002a50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a54:	f000 8081 	beq.w	8002b5a <Tx_Verify+0x462>
 8002a58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a5c:	f300 80a9 	bgt.w	8002bb2 <Tx_Verify+0x4ba>
 8002a60:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a64:	d07d      	beq.n	8002b62 <Tx_Verify+0x46a>
 8002a66:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a6a:	f300 80a2 	bgt.w	8002bb2 <Tx_Verify+0x4ba>
 8002a6e:	2bc8      	cmp	r3, #200	; 0xc8
 8002a70:	d07b      	beq.n	8002b6a <Tx_Verify+0x472>
 8002a72:	2bc8      	cmp	r3, #200	; 0xc8
 8002a74:	f300 809d 	bgt.w	8002bb2 <Tx_Verify+0x4ba>
 8002a78:	2b32      	cmp	r3, #50	; 0x32
 8002a7a:	dc6b      	bgt.n	8002b54 <Tx_Verify+0x45c>
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	f2c0 8098 	blt.w	8002bb2 <Tx_Verify+0x4ba>
 8002a82:	3b02      	subs	r3, #2
 8002a84:	2b30      	cmp	r3, #48	; 0x30
 8002a86:	f200 8094 	bhi.w	8002bb2 <Tx_Verify+0x4ba>
 8002a8a:	a201      	add	r2, pc, #4	; (adr r2, 8002a90 <Tx_Verify+0x398>)
 8002a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a90:	08002bab 	.word	0x08002bab
 8002a94:	08002ba3 	.word	0x08002ba3
 8002a98:	08002bb3 	.word	0x08002bb3
 8002a9c:	08002b9b 	.word	0x08002b9b
 8002aa0:	08002bb3 	.word	0x08002bb3
 8002aa4:	08002bb3 	.word	0x08002bb3
 8002aa8:	08002bb3 	.word	0x08002bb3
 8002aac:	08002bb3 	.word	0x08002bb3
 8002ab0:	08002b93 	.word	0x08002b93
 8002ab4:	08002bb3 	.word	0x08002bb3
 8002ab8:	08002bb3 	.word	0x08002bb3
 8002abc:	08002bb3 	.word	0x08002bb3
 8002ac0:	08002bb3 	.word	0x08002bb3
 8002ac4:	08002bb3 	.word	0x08002bb3
 8002ac8:	08002bb3 	.word	0x08002bb3
 8002acc:	08002bb3 	.word	0x08002bb3
 8002ad0:	08002bb3 	.word	0x08002bb3
 8002ad4:	08002bb3 	.word	0x08002bb3
 8002ad8:	08002b8b 	.word	0x08002b8b
 8002adc:	08002bb3 	.word	0x08002bb3
 8002ae0:	08002bb3 	.word	0x08002bb3
 8002ae4:	08002bb3 	.word	0x08002bb3
 8002ae8:	08002bb3 	.word	0x08002bb3
 8002aec:	08002bb3 	.word	0x08002bb3
 8002af0:	08002bb3 	.word	0x08002bb3
 8002af4:	08002bb3 	.word	0x08002bb3
 8002af8:	08002bb3 	.word	0x08002bb3
 8002afc:	08002bb3 	.word	0x08002bb3
 8002b00:	08002bb3 	.word	0x08002bb3
 8002b04:	08002bb3 	.word	0x08002bb3
 8002b08:	08002bb3 	.word	0x08002bb3
 8002b0c:	08002bb3 	.word	0x08002bb3
 8002b10:	08002bb3 	.word	0x08002bb3
 8002b14:	08002bb3 	.word	0x08002bb3
 8002b18:	08002bb3 	.word	0x08002bb3
 8002b1c:	08002bb3 	.word	0x08002bb3
 8002b20:	08002bb3 	.word	0x08002bb3
 8002b24:	08002bb3 	.word	0x08002bb3
 8002b28:	08002b83 	.word	0x08002b83
 8002b2c:	08002bb3 	.word	0x08002bb3
 8002b30:	08002bb3 	.word	0x08002bb3
 8002b34:	08002bb3 	.word	0x08002bb3
 8002b38:	08002bb3 	.word	0x08002bb3
 8002b3c:	08002bb3 	.word	0x08002bb3
 8002b40:	08002bb3 	.word	0x08002bb3
 8002b44:	08002bb3 	.word	0x08002bb3
 8002b48:	08002bb3 	.word	0x08002bb3
 8002b4c:	08002bb3 	.word	0x08002bb3
 8002b50:	08002b7b 	.word	0x08002b7b
 8002b54:	2b64      	cmp	r3, #100	; 0x64
 8002b56:	d00c      	beq.n	8002b72 <Tx_Verify+0x47a>
 8002b58:	e02b      	b.n	8002bb2 <Tx_Verify+0x4ba>
 8002b5a:	4b72      	ldr	r3, [pc, #456]	; (8002d24 <Tx_Verify+0x62c>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	711a      	strb	r2, [r3, #4]
 8002b60:	e02a      	b.n	8002bb8 <Tx_Verify+0x4c0>
 8002b62:	4b70      	ldr	r3, [pc, #448]	; (8002d24 <Tx_Verify+0x62c>)
 8002b64:	2202      	movs	r2, #2
 8002b66:	711a      	strb	r2, [r3, #4]
 8002b68:	e026      	b.n	8002bb8 <Tx_Verify+0x4c0>
 8002b6a:	4b6e      	ldr	r3, [pc, #440]	; (8002d24 <Tx_Verify+0x62c>)
 8002b6c:	2203      	movs	r2, #3
 8002b6e:	711a      	strb	r2, [r3, #4]
 8002b70:	e022      	b.n	8002bb8 <Tx_Verify+0x4c0>
 8002b72:	4b6c      	ldr	r3, [pc, #432]	; (8002d24 <Tx_Verify+0x62c>)
 8002b74:	2204      	movs	r2, #4
 8002b76:	711a      	strb	r2, [r3, #4]
 8002b78:	e01e      	b.n	8002bb8 <Tx_Verify+0x4c0>
 8002b7a:	4b6a      	ldr	r3, [pc, #424]	; (8002d24 <Tx_Verify+0x62c>)
 8002b7c:	2205      	movs	r2, #5
 8002b7e:	711a      	strb	r2, [r3, #4]
 8002b80:	e01a      	b.n	8002bb8 <Tx_Verify+0x4c0>
 8002b82:	4b68      	ldr	r3, [pc, #416]	; (8002d24 <Tx_Verify+0x62c>)
 8002b84:	2206      	movs	r2, #6
 8002b86:	711a      	strb	r2, [r3, #4]
 8002b88:	e016      	b.n	8002bb8 <Tx_Verify+0x4c0>
 8002b8a:	4b66      	ldr	r3, [pc, #408]	; (8002d24 <Tx_Verify+0x62c>)
 8002b8c:	2207      	movs	r2, #7
 8002b8e:	711a      	strb	r2, [r3, #4]
 8002b90:	e012      	b.n	8002bb8 <Tx_Verify+0x4c0>
 8002b92:	4b64      	ldr	r3, [pc, #400]	; (8002d24 <Tx_Verify+0x62c>)
 8002b94:	2208      	movs	r2, #8
 8002b96:	711a      	strb	r2, [r3, #4]
 8002b98:	e00e      	b.n	8002bb8 <Tx_Verify+0x4c0>
 8002b9a:	4b62      	ldr	r3, [pc, #392]	; (8002d24 <Tx_Verify+0x62c>)
 8002b9c:	2209      	movs	r2, #9
 8002b9e:	711a      	strb	r2, [r3, #4]
 8002ba0:	e00a      	b.n	8002bb8 <Tx_Verify+0x4c0>
 8002ba2:	4b60      	ldr	r3, [pc, #384]	; (8002d24 <Tx_Verify+0x62c>)
 8002ba4:	220a      	movs	r2, #10
 8002ba6:	711a      	strb	r2, [r3, #4]
 8002ba8:	e006      	b.n	8002bb8 <Tx_Verify+0x4c0>
 8002baa:	4b5e      	ldr	r3, [pc, #376]	; (8002d24 <Tx_Verify+0x62c>)
 8002bac:	220b      	movs	r2, #11
 8002bae:	711a      	strb	r2, [r3, #4]
 8002bb0:	e002      	b.n	8002bb8 <Tx_Verify+0x4c0>
 8002bb2:	4b5c      	ldr	r3, [pc, #368]	; (8002d24 <Tx_Verify+0x62c>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	711a      	strb	r2, [r3, #4]
 8002bb8:	bf00      	nop
	__SAVE_FREQ(TxData[5], Per_Msg[RTC_Msg]);
 8002bba:	4b5b      	ldr	r3, [pc, #364]	; (8002d28 <Tx_Verify+0x630>)
 8002bbc:	88db      	ldrh	r3, [r3, #6]
 8002bbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bc2:	f000 8082 	beq.w	8002cca <Tx_Verify+0x5d2>
 8002bc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bca:	f300 80af 	bgt.w	8002d2c <Tx_Verify+0x634>
 8002bce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002bd2:	d07e      	beq.n	8002cd2 <Tx_Verify+0x5da>
 8002bd4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002bd8:	f300 80a8 	bgt.w	8002d2c <Tx_Verify+0x634>
 8002bdc:	2bc8      	cmp	r3, #200	; 0xc8
 8002bde:	d07c      	beq.n	8002cda <Tx_Verify+0x5e2>
 8002be0:	2bc8      	cmp	r3, #200	; 0xc8
 8002be2:	f300 80a3 	bgt.w	8002d2c <Tx_Verify+0x634>
 8002be6:	2b32      	cmp	r3, #50	; 0x32
 8002be8:	dc6c      	bgt.n	8002cc4 <Tx_Verify+0x5cc>
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	f2c0 809e 	blt.w	8002d2c <Tx_Verify+0x634>
 8002bf0:	3b02      	subs	r3, #2
 8002bf2:	2b30      	cmp	r3, #48	; 0x30
 8002bf4:	f200 809a 	bhi.w	8002d2c <Tx_Verify+0x634>
 8002bf8:	a201      	add	r2, pc, #4	; (adr r2, 8002c00 <Tx_Verify+0x508>)
 8002bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfe:	bf00      	nop
 8002c00:	08002d1b 	.word	0x08002d1b
 8002c04:	08002d13 	.word	0x08002d13
 8002c08:	08002d2d 	.word	0x08002d2d
 8002c0c:	08002d0b 	.word	0x08002d0b
 8002c10:	08002d2d 	.word	0x08002d2d
 8002c14:	08002d2d 	.word	0x08002d2d
 8002c18:	08002d2d 	.word	0x08002d2d
 8002c1c:	08002d2d 	.word	0x08002d2d
 8002c20:	08002d03 	.word	0x08002d03
 8002c24:	08002d2d 	.word	0x08002d2d
 8002c28:	08002d2d 	.word	0x08002d2d
 8002c2c:	08002d2d 	.word	0x08002d2d
 8002c30:	08002d2d 	.word	0x08002d2d
 8002c34:	08002d2d 	.word	0x08002d2d
 8002c38:	08002d2d 	.word	0x08002d2d
 8002c3c:	08002d2d 	.word	0x08002d2d
 8002c40:	08002d2d 	.word	0x08002d2d
 8002c44:	08002d2d 	.word	0x08002d2d
 8002c48:	08002cfb 	.word	0x08002cfb
 8002c4c:	08002d2d 	.word	0x08002d2d
 8002c50:	08002d2d 	.word	0x08002d2d
 8002c54:	08002d2d 	.word	0x08002d2d
 8002c58:	08002d2d 	.word	0x08002d2d
 8002c5c:	08002d2d 	.word	0x08002d2d
 8002c60:	08002d2d 	.word	0x08002d2d
 8002c64:	08002d2d 	.word	0x08002d2d
 8002c68:	08002d2d 	.word	0x08002d2d
 8002c6c:	08002d2d 	.word	0x08002d2d
 8002c70:	08002d2d 	.word	0x08002d2d
 8002c74:	08002d2d 	.word	0x08002d2d
 8002c78:	08002d2d 	.word	0x08002d2d
 8002c7c:	08002d2d 	.word	0x08002d2d
 8002c80:	08002d2d 	.word	0x08002d2d
 8002c84:	08002d2d 	.word	0x08002d2d
 8002c88:	08002d2d 	.word	0x08002d2d
 8002c8c:	08002d2d 	.word	0x08002d2d
 8002c90:	08002d2d 	.word	0x08002d2d
 8002c94:	08002d2d 	.word	0x08002d2d
 8002c98:	08002cf3 	.word	0x08002cf3
 8002c9c:	08002d2d 	.word	0x08002d2d
 8002ca0:	08002d2d 	.word	0x08002d2d
 8002ca4:	08002d2d 	.word	0x08002d2d
 8002ca8:	08002d2d 	.word	0x08002d2d
 8002cac:	08002d2d 	.word	0x08002d2d
 8002cb0:	08002d2d 	.word	0x08002d2d
 8002cb4:	08002d2d 	.word	0x08002d2d
 8002cb8:	08002d2d 	.word	0x08002d2d
 8002cbc:	08002d2d 	.word	0x08002d2d
 8002cc0:	08002ceb 	.word	0x08002ceb
 8002cc4:	2b64      	cmp	r3, #100	; 0x64
 8002cc6:	d00c      	beq.n	8002ce2 <Tx_Verify+0x5ea>
 8002cc8:	e030      	b.n	8002d2c <Tx_Verify+0x634>
 8002cca:	4b16      	ldr	r3, [pc, #88]	; (8002d24 <Tx_Verify+0x62c>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	715a      	strb	r2, [r3, #5]
 8002cd0:	e02f      	b.n	8002d32 <Tx_Verify+0x63a>
 8002cd2:	4b14      	ldr	r3, [pc, #80]	; (8002d24 <Tx_Verify+0x62c>)
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	715a      	strb	r2, [r3, #5]
 8002cd8:	e02b      	b.n	8002d32 <Tx_Verify+0x63a>
 8002cda:	4b12      	ldr	r3, [pc, #72]	; (8002d24 <Tx_Verify+0x62c>)
 8002cdc:	2203      	movs	r2, #3
 8002cde:	715a      	strb	r2, [r3, #5]
 8002ce0:	e027      	b.n	8002d32 <Tx_Verify+0x63a>
 8002ce2:	4b10      	ldr	r3, [pc, #64]	; (8002d24 <Tx_Verify+0x62c>)
 8002ce4:	2204      	movs	r2, #4
 8002ce6:	715a      	strb	r2, [r3, #5]
 8002ce8:	e023      	b.n	8002d32 <Tx_Verify+0x63a>
 8002cea:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <Tx_Verify+0x62c>)
 8002cec:	2205      	movs	r2, #5
 8002cee:	715a      	strb	r2, [r3, #5]
 8002cf0:	e01f      	b.n	8002d32 <Tx_Verify+0x63a>
 8002cf2:	4b0c      	ldr	r3, [pc, #48]	; (8002d24 <Tx_Verify+0x62c>)
 8002cf4:	2206      	movs	r2, #6
 8002cf6:	715a      	strb	r2, [r3, #5]
 8002cf8:	e01b      	b.n	8002d32 <Tx_Verify+0x63a>
 8002cfa:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <Tx_Verify+0x62c>)
 8002cfc:	2207      	movs	r2, #7
 8002cfe:	715a      	strb	r2, [r3, #5]
 8002d00:	e017      	b.n	8002d32 <Tx_Verify+0x63a>
 8002d02:	4b08      	ldr	r3, [pc, #32]	; (8002d24 <Tx_Verify+0x62c>)
 8002d04:	2208      	movs	r2, #8
 8002d06:	715a      	strb	r2, [r3, #5]
 8002d08:	e013      	b.n	8002d32 <Tx_Verify+0x63a>
 8002d0a:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <Tx_Verify+0x62c>)
 8002d0c:	2209      	movs	r2, #9
 8002d0e:	715a      	strb	r2, [r3, #5]
 8002d10:	e00f      	b.n	8002d32 <Tx_Verify+0x63a>
 8002d12:	4b04      	ldr	r3, [pc, #16]	; (8002d24 <Tx_Verify+0x62c>)
 8002d14:	220a      	movs	r2, #10
 8002d16:	715a      	strb	r2, [r3, #5]
 8002d18:	e00b      	b.n	8002d32 <Tx_Verify+0x63a>
 8002d1a:	4b02      	ldr	r3, [pc, #8]	; (8002d24 <Tx_Verify+0x62c>)
 8002d1c:	220b      	movs	r2, #11
 8002d1e:	715a      	strb	r2, [r3, #5]
 8002d20:	e007      	b.n	8002d32 <Tx_Verify+0x63a>
 8002d22:	bf00      	nop
 8002d24:	20001bc8 	.word	0x20001bc8
 8002d28:	20002e7c 	.word	0x20002e7c
 8002d2c:	4bcd      	ldr	r3, [pc, #820]	; (8003064 <Tx_Verify+0x96c>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	715a      	strb	r2, [r3, #5]
 8002d32:	bf00      	nop
	__SAVE_FREQ(TxData[6], Per_Msg[PDM_Save]);
 8002d34:	4bcc      	ldr	r3, [pc, #816]	; (8003068 <Tx_Verify+0x970>)
 8002d36:	899b      	ldrh	r3, [r3, #12]
 8002d38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d3c:	f000 8081 	beq.w	8002e42 <Tx_Verify+0x74a>
 8002d40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d44:	f300 80a9 	bgt.w	8002e9a <Tx_Verify+0x7a2>
 8002d48:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d4c:	d07d      	beq.n	8002e4a <Tx_Verify+0x752>
 8002d4e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d52:	f300 80a2 	bgt.w	8002e9a <Tx_Verify+0x7a2>
 8002d56:	2bc8      	cmp	r3, #200	; 0xc8
 8002d58:	d07b      	beq.n	8002e52 <Tx_Verify+0x75a>
 8002d5a:	2bc8      	cmp	r3, #200	; 0xc8
 8002d5c:	f300 809d 	bgt.w	8002e9a <Tx_Verify+0x7a2>
 8002d60:	2b32      	cmp	r3, #50	; 0x32
 8002d62:	dc6b      	bgt.n	8002e3c <Tx_Verify+0x744>
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	f2c0 8098 	blt.w	8002e9a <Tx_Verify+0x7a2>
 8002d6a:	3b02      	subs	r3, #2
 8002d6c:	2b30      	cmp	r3, #48	; 0x30
 8002d6e:	f200 8094 	bhi.w	8002e9a <Tx_Verify+0x7a2>
 8002d72:	a201      	add	r2, pc, #4	; (adr r2, 8002d78 <Tx_Verify+0x680>)
 8002d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d78:	08002e93 	.word	0x08002e93
 8002d7c:	08002e8b 	.word	0x08002e8b
 8002d80:	08002e9b 	.word	0x08002e9b
 8002d84:	08002e83 	.word	0x08002e83
 8002d88:	08002e9b 	.word	0x08002e9b
 8002d8c:	08002e9b 	.word	0x08002e9b
 8002d90:	08002e9b 	.word	0x08002e9b
 8002d94:	08002e9b 	.word	0x08002e9b
 8002d98:	08002e7b 	.word	0x08002e7b
 8002d9c:	08002e9b 	.word	0x08002e9b
 8002da0:	08002e9b 	.word	0x08002e9b
 8002da4:	08002e9b 	.word	0x08002e9b
 8002da8:	08002e9b 	.word	0x08002e9b
 8002dac:	08002e9b 	.word	0x08002e9b
 8002db0:	08002e9b 	.word	0x08002e9b
 8002db4:	08002e9b 	.word	0x08002e9b
 8002db8:	08002e9b 	.word	0x08002e9b
 8002dbc:	08002e9b 	.word	0x08002e9b
 8002dc0:	08002e73 	.word	0x08002e73
 8002dc4:	08002e9b 	.word	0x08002e9b
 8002dc8:	08002e9b 	.word	0x08002e9b
 8002dcc:	08002e9b 	.word	0x08002e9b
 8002dd0:	08002e9b 	.word	0x08002e9b
 8002dd4:	08002e9b 	.word	0x08002e9b
 8002dd8:	08002e9b 	.word	0x08002e9b
 8002ddc:	08002e9b 	.word	0x08002e9b
 8002de0:	08002e9b 	.word	0x08002e9b
 8002de4:	08002e9b 	.word	0x08002e9b
 8002de8:	08002e9b 	.word	0x08002e9b
 8002dec:	08002e9b 	.word	0x08002e9b
 8002df0:	08002e9b 	.word	0x08002e9b
 8002df4:	08002e9b 	.word	0x08002e9b
 8002df8:	08002e9b 	.word	0x08002e9b
 8002dfc:	08002e9b 	.word	0x08002e9b
 8002e00:	08002e9b 	.word	0x08002e9b
 8002e04:	08002e9b 	.word	0x08002e9b
 8002e08:	08002e9b 	.word	0x08002e9b
 8002e0c:	08002e9b 	.word	0x08002e9b
 8002e10:	08002e6b 	.word	0x08002e6b
 8002e14:	08002e9b 	.word	0x08002e9b
 8002e18:	08002e9b 	.word	0x08002e9b
 8002e1c:	08002e9b 	.word	0x08002e9b
 8002e20:	08002e9b 	.word	0x08002e9b
 8002e24:	08002e9b 	.word	0x08002e9b
 8002e28:	08002e9b 	.word	0x08002e9b
 8002e2c:	08002e9b 	.word	0x08002e9b
 8002e30:	08002e9b 	.word	0x08002e9b
 8002e34:	08002e9b 	.word	0x08002e9b
 8002e38:	08002e63 	.word	0x08002e63
 8002e3c:	2b64      	cmp	r3, #100	; 0x64
 8002e3e:	d00c      	beq.n	8002e5a <Tx_Verify+0x762>
 8002e40:	e02b      	b.n	8002e9a <Tx_Verify+0x7a2>
 8002e42:	4b88      	ldr	r3, [pc, #544]	; (8003064 <Tx_Verify+0x96c>)
 8002e44:	2201      	movs	r2, #1
 8002e46:	719a      	strb	r2, [r3, #6]
 8002e48:	e02a      	b.n	8002ea0 <Tx_Verify+0x7a8>
 8002e4a:	4b86      	ldr	r3, [pc, #536]	; (8003064 <Tx_Verify+0x96c>)
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	719a      	strb	r2, [r3, #6]
 8002e50:	e026      	b.n	8002ea0 <Tx_Verify+0x7a8>
 8002e52:	4b84      	ldr	r3, [pc, #528]	; (8003064 <Tx_Verify+0x96c>)
 8002e54:	2203      	movs	r2, #3
 8002e56:	719a      	strb	r2, [r3, #6]
 8002e58:	e022      	b.n	8002ea0 <Tx_Verify+0x7a8>
 8002e5a:	4b82      	ldr	r3, [pc, #520]	; (8003064 <Tx_Verify+0x96c>)
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	719a      	strb	r2, [r3, #6]
 8002e60:	e01e      	b.n	8002ea0 <Tx_Verify+0x7a8>
 8002e62:	4b80      	ldr	r3, [pc, #512]	; (8003064 <Tx_Verify+0x96c>)
 8002e64:	2205      	movs	r2, #5
 8002e66:	719a      	strb	r2, [r3, #6]
 8002e68:	e01a      	b.n	8002ea0 <Tx_Verify+0x7a8>
 8002e6a:	4b7e      	ldr	r3, [pc, #504]	; (8003064 <Tx_Verify+0x96c>)
 8002e6c:	2206      	movs	r2, #6
 8002e6e:	719a      	strb	r2, [r3, #6]
 8002e70:	e016      	b.n	8002ea0 <Tx_Verify+0x7a8>
 8002e72:	4b7c      	ldr	r3, [pc, #496]	; (8003064 <Tx_Verify+0x96c>)
 8002e74:	2207      	movs	r2, #7
 8002e76:	719a      	strb	r2, [r3, #6]
 8002e78:	e012      	b.n	8002ea0 <Tx_Verify+0x7a8>
 8002e7a:	4b7a      	ldr	r3, [pc, #488]	; (8003064 <Tx_Verify+0x96c>)
 8002e7c:	2208      	movs	r2, #8
 8002e7e:	719a      	strb	r2, [r3, #6]
 8002e80:	e00e      	b.n	8002ea0 <Tx_Verify+0x7a8>
 8002e82:	4b78      	ldr	r3, [pc, #480]	; (8003064 <Tx_Verify+0x96c>)
 8002e84:	2209      	movs	r2, #9
 8002e86:	719a      	strb	r2, [r3, #6]
 8002e88:	e00a      	b.n	8002ea0 <Tx_Verify+0x7a8>
 8002e8a:	4b76      	ldr	r3, [pc, #472]	; (8003064 <Tx_Verify+0x96c>)
 8002e8c:	220a      	movs	r2, #10
 8002e8e:	719a      	strb	r2, [r3, #6]
 8002e90:	e006      	b.n	8002ea0 <Tx_Verify+0x7a8>
 8002e92:	4b74      	ldr	r3, [pc, #464]	; (8003064 <Tx_Verify+0x96c>)
 8002e94:	220b      	movs	r2, #11
 8002e96:	719a      	strb	r2, [r3, #6]
 8002e98:	e002      	b.n	8002ea0 <Tx_Verify+0x7a8>
 8002e9a:	4b72      	ldr	r3, [pc, #456]	; (8003064 <Tx_Verify+0x96c>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	719a      	strb	r2, [r3, #6]
 8002ea0:	bf00      	nop
	__SAVE_FREQ(TxData[7], Per_Msg[ECU_Save]);
 8002ea2:	4b71      	ldr	r3, [pc, #452]	; (8003068 <Tx_Verify+0x970>)
 8002ea4:	895b      	ldrh	r3, [r3, #10]
 8002ea6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002eaa:	f000 8082 	beq.w	8002fb2 <Tx_Verify+0x8ba>
 8002eae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002eb2:	f300 80aa 	bgt.w	800300a <Tx_Verify+0x912>
 8002eb6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002eba:	d07e      	beq.n	8002fba <Tx_Verify+0x8c2>
 8002ebc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ec0:	f300 80a3 	bgt.w	800300a <Tx_Verify+0x912>
 8002ec4:	2bc8      	cmp	r3, #200	; 0xc8
 8002ec6:	d07c      	beq.n	8002fc2 <Tx_Verify+0x8ca>
 8002ec8:	2bc8      	cmp	r3, #200	; 0xc8
 8002eca:	f300 809e 	bgt.w	800300a <Tx_Verify+0x912>
 8002ece:	2b32      	cmp	r3, #50	; 0x32
 8002ed0:	dc6c      	bgt.n	8002fac <Tx_Verify+0x8b4>
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	f2c0 8099 	blt.w	800300a <Tx_Verify+0x912>
 8002ed8:	3b02      	subs	r3, #2
 8002eda:	2b30      	cmp	r3, #48	; 0x30
 8002edc:	f200 8095 	bhi.w	800300a <Tx_Verify+0x912>
 8002ee0:	a201      	add	r2, pc, #4	; (adr r2, 8002ee8 <Tx_Verify+0x7f0>)
 8002ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee6:	bf00      	nop
 8002ee8:	08003003 	.word	0x08003003
 8002eec:	08002ffb 	.word	0x08002ffb
 8002ef0:	0800300b 	.word	0x0800300b
 8002ef4:	08002ff3 	.word	0x08002ff3
 8002ef8:	0800300b 	.word	0x0800300b
 8002efc:	0800300b 	.word	0x0800300b
 8002f00:	0800300b 	.word	0x0800300b
 8002f04:	0800300b 	.word	0x0800300b
 8002f08:	08002feb 	.word	0x08002feb
 8002f0c:	0800300b 	.word	0x0800300b
 8002f10:	0800300b 	.word	0x0800300b
 8002f14:	0800300b 	.word	0x0800300b
 8002f18:	0800300b 	.word	0x0800300b
 8002f1c:	0800300b 	.word	0x0800300b
 8002f20:	0800300b 	.word	0x0800300b
 8002f24:	0800300b 	.word	0x0800300b
 8002f28:	0800300b 	.word	0x0800300b
 8002f2c:	0800300b 	.word	0x0800300b
 8002f30:	08002fe3 	.word	0x08002fe3
 8002f34:	0800300b 	.word	0x0800300b
 8002f38:	0800300b 	.word	0x0800300b
 8002f3c:	0800300b 	.word	0x0800300b
 8002f40:	0800300b 	.word	0x0800300b
 8002f44:	0800300b 	.word	0x0800300b
 8002f48:	0800300b 	.word	0x0800300b
 8002f4c:	0800300b 	.word	0x0800300b
 8002f50:	0800300b 	.word	0x0800300b
 8002f54:	0800300b 	.word	0x0800300b
 8002f58:	0800300b 	.word	0x0800300b
 8002f5c:	0800300b 	.word	0x0800300b
 8002f60:	0800300b 	.word	0x0800300b
 8002f64:	0800300b 	.word	0x0800300b
 8002f68:	0800300b 	.word	0x0800300b
 8002f6c:	0800300b 	.word	0x0800300b
 8002f70:	0800300b 	.word	0x0800300b
 8002f74:	0800300b 	.word	0x0800300b
 8002f78:	0800300b 	.word	0x0800300b
 8002f7c:	0800300b 	.word	0x0800300b
 8002f80:	08002fdb 	.word	0x08002fdb
 8002f84:	0800300b 	.word	0x0800300b
 8002f88:	0800300b 	.word	0x0800300b
 8002f8c:	0800300b 	.word	0x0800300b
 8002f90:	0800300b 	.word	0x0800300b
 8002f94:	0800300b 	.word	0x0800300b
 8002f98:	0800300b 	.word	0x0800300b
 8002f9c:	0800300b 	.word	0x0800300b
 8002fa0:	0800300b 	.word	0x0800300b
 8002fa4:	0800300b 	.word	0x0800300b
 8002fa8:	08002fd3 	.word	0x08002fd3
 8002fac:	2b64      	cmp	r3, #100	; 0x64
 8002fae:	d00c      	beq.n	8002fca <Tx_Verify+0x8d2>
 8002fb0:	e02b      	b.n	800300a <Tx_Verify+0x912>
 8002fb2:	4b2c      	ldr	r3, [pc, #176]	; (8003064 <Tx_Verify+0x96c>)
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	71da      	strb	r2, [r3, #7]
 8002fb8:	e02a      	b.n	8003010 <Tx_Verify+0x918>
 8002fba:	4b2a      	ldr	r3, [pc, #168]	; (8003064 <Tx_Verify+0x96c>)
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	71da      	strb	r2, [r3, #7]
 8002fc0:	e026      	b.n	8003010 <Tx_Verify+0x918>
 8002fc2:	4b28      	ldr	r3, [pc, #160]	; (8003064 <Tx_Verify+0x96c>)
 8002fc4:	2203      	movs	r2, #3
 8002fc6:	71da      	strb	r2, [r3, #7]
 8002fc8:	e022      	b.n	8003010 <Tx_Verify+0x918>
 8002fca:	4b26      	ldr	r3, [pc, #152]	; (8003064 <Tx_Verify+0x96c>)
 8002fcc:	2204      	movs	r2, #4
 8002fce:	71da      	strb	r2, [r3, #7]
 8002fd0:	e01e      	b.n	8003010 <Tx_Verify+0x918>
 8002fd2:	4b24      	ldr	r3, [pc, #144]	; (8003064 <Tx_Verify+0x96c>)
 8002fd4:	2205      	movs	r2, #5
 8002fd6:	71da      	strb	r2, [r3, #7]
 8002fd8:	e01a      	b.n	8003010 <Tx_Verify+0x918>
 8002fda:	4b22      	ldr	r3, [pc, #136]	; (8003064 <Tx_Verify+0x96c>)
 8002fdc:	2206      	movs	r2, #6
 8002fde:	71da      	strb	r2, [r3, #7]
 8002fe0:	e016      	b.n	8003010 <Tx_Verify+0x918>
 8002fe2:	4b20      	ldr	r3, [pc, #128]	; (8003064 <Tx_Verify+0x96c>)
 8002fe4:	2207      	movs	r2, #7
 8002fe6:	71da      	strb	r2, [r3, #7]
 8002fe8:	e012      	b.n	8003010 <Tx_Verify+0x918>
 8002fea:	4b1e      	ldr	r3, [pc, #120]	; (8003064 <Tx_Verify+0x96c>)
 8002fec:	2208      	movs	r2, #8
 8002fee:	71da      	strb	r2, [r3, #7]
 8002ff0:	e00e      	b.n	8003010 <Tx_Verify+0x918>
 8002ff2:	4b1c      	ldr	r3, [pc, #112]	; (8003064 <Tx_Verify+0x96c>)
 8002ff4:	2209      	movs	r2, #9
 8002ff6:	71da      	strb	r2, [r3, #7]
 8002ff8:	e00a      	b.n	8003010 <Tx_Verify+0x918>
 8002ffa:	4b1a      	ldr	r3, [pc, #104]	; (8003064 <Tx_Verify+0x96c>)
 8002ffc:	220a      	movs	r2, #10
 8002ffe:	71da      	strb	r2, [r3, #7]
 8003000:	e006      	b.n	8003010 <Tx_Verify+0x918>
 8003002:	4b18      	ldr	r3, [pc, #96]	; (8003064 <Tx_Verify+0x96c>)
 8003004:	220b      	movs	r2, #11
 8003006:	71da      	strb	r2, [r3, #7]
 8003008:	e002      	b.n	8003010 <Tx_Verify+0x918>
 800300a:	4b16      	ldr	r3, [pc, #88]	; (8003064 <Tx_Verify+0x96c>)
 800300c:	2200      	movs	r2, #0
 800300e:	71da      	strb	r2, [r3, #7]
 8003010:	bf00      	nop

	if(Flag_Datalogger == DL_Save)
 8003012:	4b16      	ldr	r3, [pc, #88]	; (800306c <Tx_Verify+0x974>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d108      	bne.n	800302c <Tx_Verify+0x934>
		Principal_Datalogger_Save_Buffer(TxHeader.StdId, TxHeader.DLC, TxData, &File_Struct);
 800301a:	4b15      	ldr	r3, [pc, #84]	; (8003070 <Tx_Verify+0x978>)
 800301c:	6818      	ldr	r0, [r3, #0]
 800301e:	4b14      	ldr	r3, [pc, #80]	; (8003070 <Tx_Verify+0x978>)
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	b2d9      	uxtb	r1, r3
 8003024:	4b13      	ldr	r3, [pc, #76]	; (8003074 <Tx_Verify+0x97c>)
 8003026:	4a0f      	ldr	r2, [pc, #60]	; (8003064 <Tx_Verify+0x96c>)
 8003028:	f002 fbac 	bl	8005784 <Principal_Datalogger_Save_Buffer>

	if(HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK)
 800302c:	4b12      	ldr	r3, [pc, #72]	; (8003078 <Tx_Verify+0x980>)
 800302e:	4a0d      	ldr	r2, [pc, #52]	; (8003064 <Tx_Verify+0x96c>)
 8003030:	490f      	ldr	r1, [pc, #60]	; (8003070 <Tx_Verify+0x978>)
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f004 f90c 	bl	8007250 <HAL_CAN_AddTxMessage>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d107      	bne.n	800304e <Tx_Verify+0x956>
		Verify_CAN |= 1;
 800303e:	4b0f      	ldr	r3, [pc, #60]	; (800307c <Tx_Verify+0x984>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	b2da      	uxtb	r2, r3
 8003048:	4b0c      	ldr	r3, [pc, #48]	; (800307c <Tx_Verify+0x984>)
 800304a:	701a      	strb	r2, [r3, #0]
 800304c:	e006      	b.n	800305c <Tx_Verify+0x964>
	else
		Verify_CAN &= 0x02;
 800304e:	4b0b      	ldr	r3, [pc, #44]	; (800307c <Tx_Verify+0x984>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	b2da      	uxtb	r2, r3
 8003058:	4b08      	ldr	r3, [pc, #32]	; (800307c <Tx_Verify+0x984>)
 800305a:	701a      	strb	r2, [r3, #0]

	//Wait Transmission finish
	for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 800305c:	2300      	movs	r3, #0
 800305e:	73fb      	strb	r3, [r7, #15]
 8003060:	e011      	b.n	8003086 <Tx_Verify+0x98e>
 8003062:	bf00      	nop
 8003064:	20001bc8 	.word	0x20001bc8
 8003068:	20002e7c 	.word	0x20002e7c
 800306c:	20001bd0 	.word	0x20001bd0
 8003070:	20002d98 	.word	0x20002d98
 8003074:	20001c84 	.word	0x20001c84
 8003078:	20001c58 	.word	0x20001c58
 800307c:	20001a58 	.word	0x20001a58
 8003080:	7bfb      	ldrb	r3, [r7, #15]
 8003082:	3301      	adds	r3, #1
 8003084:	73fb      	strb	r3, [r7, #15]
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f004 f9bd 	bl	8007406 <HAL_CAN_GetTxMailboxesFreeLevel>
 800308c:	4603      	mov	r3, r0
 800308e:	2b03      	cmp	r3, #3
 8003090:	d002      	beq.n	8003098 <Tx_Verify+0x9a0>
 8003092:	7bfb      	ldrb	r3, [r7, #15]
 8003094:	2b02      	cmp	r3, #2
 8003096:	d9f3      	bls.n	8003080 <Tx_Verify+0x988>
}
 8003098:	bf00      	nop
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <Tx_Beacon>:

static void Tx_Beacon(CAN_HandleTypeDef* hcan)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 80030a8:	4b11      	ldr	r3, [pc, #68]	; (80030f0 <Tx_Beacon+0x50>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80030ae:	4b10      	ldr	r3, [pc, #64]	; (80030f0 <Tx_Beacon+0x50>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 80030b4:	4b0e      	ldr	r3, [pc, #56]	; (80030f0 <Tx_Beacon+0x50>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	751a      	strb	r2, [r3, #20]
	TxHeader.StdId = BEACON_ID;
 80030ba:	4b0d      	ldr	r3, [pc, #52]	; (80030f0 <Tx_Beacon+0x50>)
 80030bc:	2264      	movs	r2, #100	; 0x64
 80030be:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 1;
 80030c0:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <Tx_Beacon+0x50>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	611a      	str	r2, [r3, #16]

	TxData[0] = Lap_Number;
 80030c6:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <Tx_Beacon+0x54>)
 80030c8:	781a      	ldrb	r2, [r3, #0]
 80030ca:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <Tx_Beacon+0x58>)
 80030cc:	701a      	strb	r2, [r3, #0]

	if(Flag_Datalogger == DL_Save)
 80030ce:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <Tx_Beacon+0x5c>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d108      	bne.n	80030e8 <Tx_Beacon+0x48>
		Principal_Datalogger_Save_Buffer(TxHeader.StdId, TxHeader.DLC, TxData, &File_Struct);
 80030d6:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <Tx_Beacon+0x50>)
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <Tx_Beacon+0x50>)
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	b2d9      	uxtb	r1, r3
 80030e0:	4b07      	ldr	r3, [pc, #28]	; (8003100 <Tx_Beacon+0x60>)
 80030e2:	4a05      	ldr	r2, [pc, #20]	; (80030f8 <Tx_Beacon+0x58>)
 80030e4:	f002 fb4e 	bl	8005784 <Principal_Datalogger_Save_Buffer>
//	else
//		Verify_CAN &= 0x02;
//
//	//Wait Transmission finish
//	for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
}
 80030e8:	bf00      	nop
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	20002d98 	.word	0x20002d98
 80030f4:	20002cc4 	.word	0x20002cc4
 80030f8:	20001bc8 	.word	0x20001bc8
 80030fc:	20001bd0 	.word	0x20001bd0
 8003100:	20001c84 	.word	0x20001c84

08003104 <Save_PDM>:

static void Save_PDM()
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
	uint8_t id = 0, length = 0, buffer[8];
 800310a:	2300      	movs	r3, #0
 800310c:	73fb      	strb	r3, [r7, #15]
 800310e:	2300      	movs	r3, #0
 8003110:	73bb      	strb	r3, [r7, #14]

	if(Flag_Datalogger == DL_Save)
 8003112:	4b87      	ldr	r3, [pc, #540]	; (8003330 <Save_PDM+0x22c>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	2b01      	cmp	r3, #1
 8003118:	f000 8105 	beq.w	8003326 <Save_PDM+0x222>
		return;

	id = PDM_FIRST_ID;
 800311c:	2332      	movs	r3, #50	; 0x32
 800311e:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003120:	2308      	movs	r3, #8
 8003122:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Current_Buffer[0] << 8;
 8003124:	2300      	movs	r3, #0
 8003126:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Current_Buffer[0] & 0xff;
 8003128:	4b82      	ldr	r3, [pc, #520]	; (8003334 <Save_PDM+0x230>)
 800312a:	889b      	ldrh	r3, [r3, #4]
 800312c:	b2db      	uxtb	r3, r3
 800312e:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Current_Buffer[1] << 8;
 8003130:	2300      	movs	r3, #0
 8003132:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Current_Buffer[1] & 0xff;
 8003134:	4b7f      	ldr	r3, [pc, #508]	; (8003334 <Save_PDM+0x230>)
 8003136:	88db      	ldrh	r3, [r3, #6]
 8003138:	b2db      	uxtb	r3, r3
 800313a:	71fb      	strb	r3, [r7, #7]
	buffer[4] = PDM_Readings.Current_Buffer[2] << 8;
 800313c:	2300      	movs	r3, #0
 800313e:	723b      	strb	r3, [r7, #8]
	buffer[5] = PDM_Readings.Current_Buffer[2] & 0xff;
 8003140:	4b7c      	ldr	r3, [pc, #496]	; (8003334 <Save_PDM+0x230>)
 8003142:	891b      	ldrh	r3, [r3, #8]
 8003144:	b2db      	uxtb	r3, r3
 8003146:	727b      	strb	r3, [r7, #9]
	buffer[6] = PDM_Readings.Current_Buffer[3] << 8;
 8003148:	2300      	movs	r3, #0
 800314a:	72bb      	strb	r3, [r7, #10]
	buffer[7] = PDM_Readings.Current_Buffer[3] & 0xff;
 800314c:	4b79      	ldr	r3, [pc, #484]	; (8003334 <Save_PDM+0x230>)
 800314e:	895b      	ldrh	r3, [r3, #10]
 8003150:	b2db      	uxtb	r3, r3
 8003152:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 8003154:	7bf8      	ldrb	r0, [r7, #15]
 8003156:	1d3a      	adds	r2, r7, #4
 8003158:	7bb9      	ldrb	r1, [r7, #14]
 800315a:	4b77      	ldr	r3, [pc, #476]	; (8003338 <Save_PDM+0x234>)
 800315c:	f002 fb12 	bl	8005784 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 1;
 8003160:	2333      	movs	r3, #51	; 0x33
 8003162:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003164:	2308      	movs	r3, #8
 8003166:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Current_Buffer[4] << 8;
 8003168:	2300      	movs	r3, #0
 800316a:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Current_Buffer[4] & 0xff;
 800316c:	4b71      	ldr	r3, [pc, #452]	; (8003334 <Save_PDM+0x230>)
 800316e:	899b      	ldrh	r3, [r3, #12]
 8003170:	b2db      	uxtb	r3, r3
 8003172:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Current_Buffer[5] << 8;
 8003174:	2300      	movs	r3, #0
 8003176:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Current_Buffer[5] & 0xff;
 8003178:	4b6e      	ldr	r3, [pc, #440]	; (8003334 <Save_PDM+0x230>)
 800317a:	89db      	ldrh	r3, [r3, #14]
 800317c:	b2db      	uxtb	r3, r3
 800317e:	71fb      	strb	r3, [r7, #7]
	buffer[4] = PDM_Readings.Current_Buffer[6] << 8;
 8003180:	2300      	movs	r3, #0
 8003182:	723b      	strb	r3, [r7, #8]
	buffer[5] = PDM_Readings.Current_Buffer[6] & 0xff;
 8003184:	4b6b      	ldr	r3, [pc, #428]	; (8003334 <Save_PDM+0x230>)
 8003186:	8a1b      	ldrh	r3, [r3, #16]
 8003188:	b2db      	uxtb	r3, r3
 800318a:	727b      	strb	r3, [r7, #9]
	buffer[6] = PDM_Readings.Current_Buffer[7] << 8;
 800318c:	2300      	movs	r3, #0
 800318e:	72bb      	strb	r3, [r7, #10]
	buffer[7] = PDM_Readings.Current_Buffer[7] & 0xff;
 8003190:	4b68      	ldr	r3, [pc, #416]	; (8003334 <Save_PDM+0x230>)
 8003192:	8a5b      	ldrh	r3, [r3, #18]
 8003194:	b2db      	uxtb	r3, r3
 8003196:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 8003198:	7bf8      	ldrb	r0, [r7, #15]
 800319a:	1d3a      	adds	r2, r7, #4
 800319c:	7bb9      	ldrb	r1, [r7, #14]
 800319e:	4b66      	ldr	r3, [pc, #408]	; (8003338 <Save_PDM+0x234>)
 80031a0:	f002 faf0 	bl	8005784 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 2;
 80031a4:	2334      	movs	r3, #52	; 0x34
 80031a6:	73fb      	strb	r3, [r7, #15]
	length = 8;
 80031a8:	2308      	movs	r3, #8
 80031aa:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Current_Buffer[8] << 8;
 80031ac:	2300      	movs	r3, #0
 80031ae:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Current_Buffer[8] & 0xff;
 80031b0:	4b60      	ldr	r3, [pc, #384]	; (8003334 <Save_PDM+0x230>)
 80031b2:	8a9b      	ldrh	r3, [r3, #20]
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Current_Buffer[9] << 8;
 80031b8:	2300      	movs	r3, #0
 80031ba:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Current_Buffer[9] & 0xff;
 80031bc:	4b5d      	ldr	r3, [pc, #372]	; (8003334 <Save_PDM+0x230>)
 80031be:	8adb      	ldrh	r3, [r3, #22]
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	71fb      	strb	r3, [r7, #7]
	buffer[4] = PDM_Readings.Current_Buffer[10] << 8;
 80031c4:	2300      	movs	r3, #0
 80031c6:	723b      	strb	r3, [r7, #8]
	buffer[5] = PDM_Readings.Current_Buffer[10] & 0xff;
 80031c8:	4b5a      	ldr	r3, [pc, #360]	; (8003334 <Save_PDM+0x230>)
 80031ca:	8b1b      	ldrh	r3, [r3, #24]
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	727b      	strb	r3, [r7, #9]
	buffer[6] = PDM_Readings.Current_Buffer[11] << 8;
 80031d0:	2300      	movs	r3, #0
 80031d2:	72bb      	strb	r3, [r7, #10]
	buffer[7] = PDM_Readings.Current_Buffer[11] & 0xff;
 80031d4:	4b57      	ldr	r3, [pc, #348]	; (8003334 <Save_PDM+0x230>)
 80031d6:	8b5b      	ldrh	r3, [r3, #26]
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 80031dc:	7bf8      	ldrb	r0, [r7, #15]
 80031de:	1d3a      	adds	r2, r7, #4
 80031e0:	7bb9      	ldrb	r1, [r7, #14]
 80031e2:	4b55      	ldr	r3, [pc, #340]	; (8003338 <Save_PDM+0x234>)
 80031e4:	f002 face 	bl	8005784 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 3;
 80031e8:	2335      	movs	r3, #53	; 0x35
 80031ea:	73fb      	strb	r3, [r7, #15]
	length = 8;
 80031ec:	2308      	movs	r3, #8
 80031ee:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Current_Buffer[12] << 8;
 80031f0:	2300      	movs	r3, #0
 80031f2:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Current_Buffer[12] & 0xff;
 80031f4:	4b4f      	ldr	r3, [pc, #316]	; (8003334 <Save_PDM+0x230>)
 80031f6:	8b9b      	ldrh	r3, [r3, #28]
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Current_Buffer[13] << 8;
 80031fc:	2300      	movs	r3, #0
 80031fe:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Current_Buffer[13] & 0xff;
 8003200:	4b4c      	ldr	r3, [pc, #304]	; (8003334 <Save_PDM+0x230>)
 8003202:	8bdb      	ldrh	r3, [r3, #30]
 8003204:	b2db      	uxtb	r3, r3
 8003206:	71fb      	strb	r3, [r7, #7]
	buffer[4] = PDM_Readings.Current_Buffer[14] << 8;
 8003208:	2300      	movs	r3, #0
 800320a:	723b      	strb	r3, [r7, #8]
	buffer[5] = PDM_Readings.Current_Buffer[14] & 0xff;
 800320c:	4b49      	ldr	r3, [pc, #292]	; (8003334 <Save_PDM+0x230>)
 800320e:	8c1b      	ldrh	r3, [r3, #32]
 8003210:	b2db      	uxtb	r3, r3
 8003212:	727b      	strb	r3, [r7, #9]
	buffer[6] = PDM_Readings.Current_Buffer[15] << 8;
 8003214:	2300      	movs	r3, #0
 8003216:	72bb      	strb	r3, [r7, #10]
	buffer[7] = PDM_Readings.Current_Buffer[15] & 0xff;
 8003218:	4b46      	ldr	r3, [pc, #280]	; (8003334 <Save_PDM+0x230>)
 800321a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800321c:	b2db      	uxtb	r3, r3
 800321e:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 8003220:	7bf8      	ldrb	r0, [r7, #15]
 8003222:	1d3a      	adds	r2, r7, #4
 8003224:	7bb9      	ldrb	r1, [r7, #14]
 8003226:	4b44      	ldr	r3, [pc, #272]	; (8003338 <Save_PDM+0x234>)
 8003228:	f002 faac 	bl	8005784 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 4;
 800322c:	2336      	movs	r3, #54	; 0x36
 800322e:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003230:	2308      	movs	r3, #8
 8003232:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Tempetature_Buffer[0] << 8;
 8003234:	2300      	movs	r3, #0
 8003236:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Tempetature_Buffer[0] & 0xff;
 8003238:	4b3e      	ldr	r3, [pc, #248]	; (8003334 <Save_PDM+0x230>)
 800323a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800323c:	b2db      	uxtb	r3, r3
 800323e:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Tempetature_Buffer[1] << 8;
 8003240:	2300      	movs	r3, #0
 8003242:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Tempetature_Buffer[1] & 0xff;
 8003244:	4b3b      	ldr	r3, [pc, #236]	; (8003334 <Save_PDM+0x230>)
 8003246:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003248:	b2db      	uxtb	r3, r3
 800324a:	71fb      	strb	r3, [r7, #7]
	buffer[4] = PDM_Readings.Tempetature_Buffer[2] << 8;
 800324c:	2300      	movs	r3, #0
 800324e:	723b      	strb	r3, [r7, #8]
	buffer[5] = PDM_Readings.Tempetature_Buffer[2] & 0xff;
 8003250:	4b38      	ldr	r3, [pc, #224]	; (8003334 <Save_PDM+0x230>)
 8003252:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003254:	b2db      	uxtb	r3, r3
 8003256:	727b      	strb	r3, [r7, #9]
	buffer[6] = PDM_Readings.Tempetature_Buffer[3] << 8;
 8003258:	2300      	movs	r3, #0
 800325a:	72bb      	strb	r3, [r7, #10]
	buffer[7] = PDM_Readings.Tempetature_Buffer[3] & 0xff;
 800325c:	4b35      	ldr	r3, [pc, #212]	; (8003334 <Save_PDM+0x230>)
 800325e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003260:	b2db      	uxtb	r3, r3
 8003262:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 8003264:	7bf8      	ldrb	r0, [r7, #15]
 8003266:	1d3a      	adds	r2, r7, #4
 8003268:	7bb9      	ldrb	r1, [r7, #14]
 800326a:	4b33      	ldr	r3, [pc, #204]	; (8003338 <Save_PDM+0x234>)
 800326c:	f002 fa8a 	bl	8005784 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 5;
 8003270:	2337      	movs	r3, #55	; 0x37
 8003272:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003274:	2308      	movs	r3, #8
 8003276:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Tempetature_Buffer[4] << 8;
 8003278:	2300      	movs	r3, #0
 800327a:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Tempetature_Buffer[4] & 0xff;
 800327c:	4b2d      	ldr	r3, [pc, #180]	; (8003334 <Save_PDM+0x230>)
 800327e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003280:	b2db      	uxtb	r3, r3
 8003282:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Tempetature_Buffer[5] << 8;
 8003284:	2300      	movs	r3, #0
 8003286:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Tempetature_Buffer[5] & 0xff;
 8003288:	4b2a      	ldr	r3, [pc, #168]	; (8003334 <Save_PDM+0x230>)
 800328a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800328c:	b2db      	uxtb	r3, r3
 800328e:	71fb      	strb	r3, [r7, #7]
	buffer[4] = PDM_Readings.Tempetature_Buffer[6] << 8;
 8003290:	2300      	movs	r3, #0
 8003292:	723b      	strb	r3, [r7, #8]
	buffer[5] = PDM_Readings.Tempetature_Buffer[6] & 0xff;
 8003294:	4b27      	ldr	r3, [pc, #156]	; (8003334 <Save_PDM+0x230>)
 8003296:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003298:	b2db      	uxtb	r3, r3
 800329a:	727b      	strb	r3, [r7, #9]
	buffer[6] = PDM_Readings.Tempetature_Buffer[7] << 8;
 800329c:	2300      	movs	r3, #0
 800329e:	72bb      	strb	r3, [r7, #10]
	buffer[7] = PDM_Readings.Tempetature_Buffer[7] & 0xff;
 80032a0:	4b24      	ldr	r3, [pc, #144]	; (8003334 <Save_PDM+0x230>)
 80032a2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 80032a8:	7bf8      	ldrb	r0, [r7, #15]
 80032aa:	1d3a      	adds	r2, r7, #4
 80032ac:	7bb9      	ldrb	r1, [r7, #14]
 80032ae:	4b22      	ldr	r3, [pc, #136]	; (8003338 <Save_PDM+0x234>)
 80032b0:	f002 fa68 	bl	8005784 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 6;
 80032b4:	2338      	movs	r3, #56	; 0x38
 80032b6:	73fb      	strb	r3, [r7, #15]
	length = 8;
 80032b8:	2308      	movs	r3, #8
 80032ba:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Duty_Cycle_Buffer[0] << 8;
 80032bc:	2300      	movs	r3, #0
 80032be:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Duty_Cycle_Buffer[0] & 0xff;
 80032c0:	4b1c      	ldr	r3, [pc, #112]	; (8003334 <Save_PDM+0x230>)
 80032c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Duty_Cycle_Buffer[1] << 8;
 80032c8:	2300      	movs	r3, #0
 80032ca:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Duty_Cycle_Buffer[1] & 0xff;
 80032cc:	4b19      	ldr	r3, [pc, #100]	; (8003334 <Save_PDM+0x230>)
 80032ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	71fb      	strb	r3, [r7, #7]
	buffer[4] = PDM_Readings.Duty_Cycle_Buffer[2] << 8;
 80032d4:	2300      	movs	r3, #0
 80032d6:	723b      	strb	r3, [r7, #8]
	buffer[5] = PDM_Readings.Duty_Cycle_Buffer[2] & 0xff;
 80032d8:	4b16      	ldr	r3, [pc, #88]	; (8003334 <Save_PDM+0x230>)
 80032da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	727b      	strb	r3, [r7, #9]
	buffer[6] = PDM_Readings.Duty_Cycle_Buffer[3] << 8;
 80032e0:	2300      	movs	r3, #0
 80032e2:	72bb      	strb	r3, [r7, #10]
	buffer[7] = PDM_Readings.Duty_Cycle_Buffer[3] & 0xff;
 80032e4:	4b13      	ldr	r3, [pc, #76]	; (8003334 <Save_PDM+0x230>)
 80032e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 80032ec:	7bf8      	ldrb	r0, [r7, #15]
 80032ee:	1d3a      	adds	r2, r7, #4
 80032f0:	7bb9      	ldrb	r1, [r7, #14]
 80032f2:	4b11      	ldr	r3, [pc, #68]	; (8003338 <Save_PDM+0x234>)
 80032f4:	f002 fa46 	bl	8005784 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 7;
 80032f8:	2339      	movs	r3, #57	; 0x39
 80032fa:	73fb      	strb	r3, [r7, #15]
	length = 4;
 80032fc:	2304      	movs	r3, #4
 80032fe:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Input_Voltage << 8;
 8003300:	2300      	movs	r3, #0
 8003302:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Input_Voltage & 0xff;
 8003304:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <Save_PDM+0x230>)
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Output_Verify << 8;
 800330c:	2300      	movs	r3, #0
 800330e:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Output_Verify & 0xff;
 8003310:	4b08      	ldr	r3, [pc, #32]	; (8003334 <Save_PDM+0x230>)
 8003312:	885b      	ldrh	r3, [r3, #2]
 8003314:	b2db      	uxtb	r3, r3
 8003316:	71fb      	strb	r3, [r7, #7]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 8003318:	7bf8      	ldrb	r0, [r7, #15]
 800331a:	1d3a      	adds	r2, r7, #4
 800331c:	7bb9      	ldrb	r1, [r7, #14]
 800331e:	4b06      	ldr	r3, [pc, #24]	; (8003338 <Save_PDM+0x234>)
 8003320:	f002 fa30 	bl	8005784 <Principal_Datalogger_Save_Buffer>
 8003324:	e000      	b.n	8003328 <Save_PDM+0x224>
		return;
 8003326:	bf00      	nop
}
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	20001bd0 	.word	0x20001bd0
 8003334:	20001a14 	.word	0x20001a14
 8003338:	20001c84 	.word	0x20001c84

0800333c <Save_ECU>:

static void Save_ECU()
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
	uint8_t id = 0, length = 0, buffer[8];
 8003342:	2300      	movs	r3, #0
 8003344:	73fb      	strb	r3, [r7, #15]
 8003346:	2300      	movs	r3, #0
 8003348:	73bb      	strb	r3, [r7, #14]

	if(Flag_Datalogger == DL_Save)
 800334a:	4b70      	ldr	r3, [pc, #448]	; (800350c <Save_ECU+0x1d0>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b01      	cmp	r3, #1
 8003350:	f000 80d7 	beq.w	8003502 <Save_ECU+0x1c6>
		return;

	id = ECU_FIRST_ID;
 8003354:	231a      	movs	r3, #26
 8003356:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003358:	2308      	movs	r3, #8
 800335a:	73bb      	strb	r3, [r7, #14]

	buffer[0] = ECU_Data.rpm >> 8;
 800335c:	4b6c      	ldr	r3, [pc, #432]	; (8003510 <Save_ECU+0x1d4>)
 800335e:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8003362:	121b      	asrs	r3, r3, #8
 8003364:	b21b      	sxth	r3, r3
 8003366:	b2db      	uxtb	r3, r3
 8003368:	713b      	strb	r3, [r7, #4]
	buffer[1] = ECU_Data.rpm & 0xff;
 800336a:	4b69      	ldr	r3, [pc, #420]	; (8003510 <Save_ECU+0x1d4>)
 800336c:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8003370:	b2db      	uxtb	r3, r3
 8003372:	717b      	strb	r3, [r7, #5]
	buffer[2] = ECU_Data.tps >> 8;
 8003374:	4b66      	ldr	r3, [pc, #408]	; (8003510 <Save_ECU+0x1d4>)
 8003376:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800337a:	121b      	asrs	r3, r3, #8
 800337c:	b21b      	sxth	r3, r3
 800337e:	b2db      	uxtb	r3, r3
 8003380:	71bb      	strb	r3, [r7, #6]
	buffer[3] = ECU_Data.tps & 0xff;
 8003382:	4b63      	ldr	r3, [pc, #396]	; (8003510 <Save_ECU+0x1d4>)
 8003384:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8003388:	b2db      	uxtb	r3, r3
 800338a:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ECU_Data.iat >> 8;
 800338c:	4b60      	ldr	r3, [pc, #384]	; (8003510 <Save_ECU+0x1d4>)
 800338e:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8003392:	121b      	asrs	r3, r3, #8
 8003394:	b21b      	sxth	r3, r3
 8003396:	b2db      	uxtb	r3, r3
 8003398:	723b      	strb	r3, [r7, #8]
	buffer[5] = ECU_Data.iat & 0xff;
 800339a:	4b5d      	ldr	r3, [pc, #372]	; (8003510 <Save_ECU+0x1d4>)
 800339c:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	727b      	strb	r3, [r7, #9]
	buffer[6] = ECU_Data.ect >> 8;
 80033a4:	4b5a      	ldr	r3, [pc, #360]	; (8003510 <Save_ECU+0x1d4>)
 80033a6:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80033aa:	121b      	asrs	r3, r3, #8
 80033ac:	b21b      	sxth	r3, r3
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	72bb      	strb	r3, [r7, #10]
	buffer[7] = ECU_Data.ect & 0xff;
 80033b2:	4b57      	ldr	r3, [pc, #348]	; (8003510 <Save_ECU+0x1d4>)
 80033b4:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 80033bc:	7bf8      	ldrb	r0, [r7, #15]
 80033be:	1d3a      	adds	r2, r7, #4
 80033c0:	7bb9      	ldrb	r1, [r7, #14]
 80033c2:	4b54      	ldr	r3, [pc, #336]	; (8003514 <Save_ECU+0x1d8>)
 80033c4:	f002 f9de 	bl	8005784 <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 1;
 80033c8:	231b      	movs	r3, #27
 80033ca:	73fb      	strb	r3, [r7, #15]
	length = 8;
 80033cc:	2308      	movs	r3, #8
 80033ce:	73bb      	strb	r3, [r7, #14]

	buffer[0] = ECU_Data.map >> 8;
 80033d0:	4b4f      	ldr	r3, [pc, #316]	; (8003510 <Save_ECU+0x1d4>)
 80033d2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80033d6:	121b      	asrs	r3, r3, #8
 80033d8:	b21b      	sxth	r3, r3
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	713b      	strb	r3, [r7, #4]
	buffer[1] = ECU_Data.map & 0xff;
 80033de:	4b4c      	ldr	r3, [pc, #304]	; (8003510 <Save_ECU+0x1d4>)
 80033e0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	717b      	strb	r3, [r7, #5]
	buffer[2] = ECU_Data.fuel_pressure >> 8;
 80033e8:	4b49      	ldr	r3, [pc, #292]	; (8003510 <Save_ECU+0x1d4>)
 80033ea:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 80033ee:	121b      	asrs	r3, r3, #8
 80033f0:	b21b      	sxth	r3, r3
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	71bb      	strb	r3, [r7, #6]
	buffer[3] = ECU_Data.fuel_pressure & 0xff;
 80033f6:	4b46      	ldr	r3, [pc, #280]	; (8003510 <Save_ECU+0x1d4>)
 80033f8:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ECU_Data.oil_pressure >> 8;
 8003400:	4b43      	ldr	r3, [pc, #268]	; (8003510 <Save_ECU+0x1d4>)
 8003402:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8003406:	121b      	asrs	r3, r3, #8
 8003408:	b21b      	sxth	r3, r3
 800340a:	b2db      	uxtb	r3, r3
 800340c:	723b      	strb	r3, [r7, #8]
	buffer[5] = ECU_Data.oil_pressure & 0xff;
 800340e:	4b40      	ldr	r3, [pc, #256]	; (8003510 <Save_ECU+0x1d4>)
 8003410:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8003414:	b2db      	uxtb	r3, r3
 8003416:	727b      	strb	r3, [r7, #9]
	buffer[6] = ECU_Data.coolant_pressure >> 8;
 8003418:	4b3d      	ldr	r3, [pc, #244]	; (8003510 <Save_ECU+0x1d4>)
 800341a:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800341e:	121b      	asrs	r3, r3, #8
 8003420:	b21b      	sxth	r3, r3
 8003422:	b2db      	uxtb	r3, r3
 8003424:	72bb      	strb	r3, [r7, #10]
	buffer[7] = ECU_Data.coolant_pressure & 0xff;
 8003426:	4b3a      	ldr	r3, [pc, #232]	; (8003510 <Save_ECU+0x1d4>)
 8003428:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800342c:	b2db      	uxtb	r3, r3
 800342e:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 8003430:	7bf8      	ldrb	r0, [r7, #15]
 8003432:	1d3a      	adds	r2, r7, #4
 8003434:	7bb9      	ldrb	r1, [r7, #14]
 8003436:	4b37      	ldr	r3, [pc, #220]	; (8003514 <Save_ECU+0x1d8>)
 8003438:	f002 f9a4 	bl	8005784 <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 2;
 800343c:	231c      	movs	r3, #28
 800343e:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003440:	2308      	movs	r3, #8
 8003442:	73bb      	strb	r3, [r7, #14]

	buffer[0] = ECU_Data.lambda >> 8;
 8003444:	4b32      	ldr	r3, [pc, #200]	; (8003510 <Save_ECU+0x1d4>)
 8003446:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800344a:	121b      	asrs	r3, r3, #8
 800344c:	b21b      	sxth	r3, r3
 800344e:	b2db      	uxtb	r3, r3
 8003450:	713b      	strb	r3, [r7, #4]
	buffer[1] = ECU_Data.lambda & 0xff;
 8003452:	4b2f      	ldr	r3, [pc, #188]	; (8003510 <Save_ECU+0x1d4>)
 8003454:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8003458:	b2db      	uxtb	r3, r3
 800345a:	717b      	strb	r3, [r7, #5]
	buffer[2] = ECU_Data.oil_temperature >> 8;
 800345c:	4b2c      	ldr	r3, [pc, #176]	; (8003510 <Save_ECU+0x1d4>)
 800345e:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8003462:	121b      	asrs	r3, r3, #8
 8003464:	b21b      	sxth	r3, r3
 8003466:	b2db      	uxtb	r3, r3
 8003468:	71bb      	strb	r3, [r7, #6]
	buffer[3] = ECU_Data.oil_temperature & 0xff;
 800346a:	4b29      	ldr	r3, [pc, #164]	; (8003510 <Save_ECU+0x1d4>)
 800346c:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8003470:	b2db      	uxtb	r3, r3
 8003472:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ECU_Data.wheel_speed_fl;
 8003474:	4b26      	ldr	r3, [pc, #152]	; (8003510 <Save_ECU+0x1d4>)
 8003476:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800347a:	b2db      	uxtb	r3, r3
 800347c:	723b      	strb	r3, [r7, #8]
	buffer[5] = ECU_Data.wheel_speed_fr;
 800347e:	4b24      	ldr	r3, [pc, #144]	; (8003510 <Save_ECU+0x1d4>)
 8003480:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003484:	b2db      	uxtb	r3, r3
 8003486:	727b      	strb	r3, [r7, #9]
	buffer[6] = ECU_Data.wheel_speed_rl;
 8003488:	4b21      	ldr	r3, [pc, #132]	; (8003510 <Save_ECU+0x1d4>)
 800348a:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800348e:	b2db      	uxtb	r3, r3
 8003490:	72bb      	strb	r3, [r7, #10]
	buffer[7] = ECU_Data.wheel_speed_rr;
 8003492:	4b1f      	ldr	r3, [pc, #124]	; (8003510 <Save_ECU+0x1d4>)
 8003494:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8003498:	b2db      	uxtb	r3, r3
 800349a:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 800349c:	7bf8      	ldrb	r0, [r7, #15]
 800349e:	1d3a      	adds	r2, r7, #4
 80034a0:	7bb9      	ldrb	r1, [r7, #14]
 80034a2:	4b1c      	ldr	r3, [pc, #112]	; (8003514 <Save_ECU+0x1d8>)
 80034a4:	f002 f96e 	bl	8005784 <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 3;
 80034a8:	231d      	movs	r3, #29
 80034aa:	73fb      	strb	r3, [r7, #15]
	length = 6;
 80034ac:	2306      	movs	r3, #6
 80034ae:	73bb      	strb	r3, [r7, #14]

	buffer[0] = ECU_Data.battery_voltage >> 8;
 80034b0:	4b17      	ldr	r3, [pc, #92]	; (8003510 <Save_ECU+0x1d4>)
 80034b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80034b6:	121b      	asrs	r3, r3, #8
 80034b8:	b21b      	sxth	r3, r3
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	713b      	strb	r3, [r7, #4]
	buffer[1] = ECU_Data.battery_voltage & 0xff;
 80034be:	4b14      	ldr	r3, [pc, #80]	; (8003510 <Save_ECU+0x1d4>)
 80034c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	717b      	strb	r3, [r7, #5]
	buffer[2] = ECU_Data.total_fuel_flow >> 8;
 80034c8:	4b11      	ldr	r3, [pc, #68]	; (8003510 <Save_ECU+0x1d4>)
 80034ca:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80034ce:	121b      	asrs	r3, r3, #8
 80034d0:	b21b      	sxth	r3, r3
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	71bb      	strb	r3, [r7, #6]
	buffer[3] = ECU_Data.total_fuel_flow & 0xff;
 80034d6:	4b0e      	ldr	r3, [pc, #56]	; (8003510 <Save_ECU+0x1d4>)
 80034d8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ECU_Data.gear & 0xff;
 80034e0:	4b0b      	ldr	r3, [pc, #44]	; (8003510 <Save_ECU+0x1d4>)
 80034e2:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	723b      	strb	r3, [r7, #8]
	buffer[5] = ECU_Data.electro_fan & 0xff;
 80034ea:	4b09      	ldr	r3, [pc, #36]	; (8003510 <Save_ECU+0x1d4>)
 80034ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	727b      	strb	r3, [r7, #9]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 80034f4:	7bf8      	ldrb	r0, [r7, #15]
 80034f6:	1d3a      	adds	r2, r7, #4
 80034f8:	7bb9      	ldrb	r1, [r7, #14]
 80034fa:	4b06      	ldr	r3, [pc, #24]	; (8003514 <Save_ECU+0x1d8>)
 80034fc:	f002 f942 	bl	8005784 <Principal_Datalogger_Save_Buffer>

	return;
 8003500:	e000      	b.n	8003504 <Save_ECU+0x1c8>
		return;
 8003502:	bf00      	nop
}
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	20001bd0 	.word	0x20001bd0
 8003510:	20002e24 	.word	0x20002e24
 8003514:	20001c84 	.word	0x20001c84

08003518 <Principal_CAN_Start>:

void Principal_CAN_Start(CAN_HandleTypeDef* hcan)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b08e      	sub	sp, #56	; 0x38
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filter_id = 0, mask_id = 0;
 8003520:	2300      	movs	r3, #0
 8003522:	637b      	str	r3, [r7, #52]	; 0x34
 8003524:	2300      	movs	r3, #0
 8003526:	633b      	str	r3, [r7, #48]	; 0x30

	filter_id = CAN_DAQ_FILTER;
 8003528:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800352c:	637b      	str	r3, [r7, #52]	; 0x34
	mask_id = CAN_DAQ_MASK;
 800352e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003532:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8003534:	2300      	movs	r3, #0
 8003536:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8003538:	2301      	movs	r3, #1
 800353a:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 800353c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800353e:	0b5b      	lsrs	r3, r3, #13
 8003540:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 8003542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	b29b      	uxth	r3, r3
 8003548:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 800354a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354c:	0b5b      	lsrs	r3, r3, #13
 800354e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 8003550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	b29b      	uxth	r3, r3
 8003556:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8003558:	2300      	movs	r3, #0
 800355a:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterActivation = ENABLE;
 800355c:	2301      	movs	r3, #1
 800355e:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterBank = 0;
 8003560:	2300      	movs	r3, #0
 8003562:	61fb      	str	r3, [r7, #28]
	sFilterConfig.SlaveStartFilterBank = 14;
 8003564:	230e      	movs	r3, #14
 8003566:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 8003568:	f107 0308 	add.w	r3, r7, #8
 800356c:	4619      	mov	r1, r3
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f003 fd4a 	bl	8007008 <HAL_CAN_ConfigFilter>

	filter_id = CAN_CFG_FILTER;
 8003574:	2300      	movs	r3, #0
 8003576:	637b      	str	r3, [r7, #52]	; 0x34
	mask_id = CAN_CFG_MASK;
 8003578:	2300      	movs	r3, #0
 800357a:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800357c:	2300      	movs	r3, #0
 800357e:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8003580:	2301      	movs	r3, #1
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 8003584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003586:	0b5b      	lsrs	r3, r3, #13
 8003588:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 800358a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	b29b      	uxth	r3, r3
 8003590:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 8003592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003594:	0b5b      	lsrs	r3, r3, #13
 8003596:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 8003598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	b29b      	uxth	r3, r3
 800359e:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterActivation = ENABLE;
 80035a4:	2301      	movs	r3, #1
 80035a6:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterBank = 1;
 80035a8:	2301      	movs	r3, #1
 80035aa:	61fb      	str	r3, [r7, #28]
	sFilterConfig.SlaveStartFilterBank = 15;
 80035ac:	230f      	movs	r3, #15
 80035ae:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 80035b0:	f107 0308 	add.w	r3, r7, #8
 80035b4:	4619      	mov	r1, r3
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f003 fd26 	bl	8007008 <HAL_CAN_ConfigFilter>

	FT_CAN_FilterConfig(hcan, FT600, 2, CAN_RX_FIFO0);
 80035bc:	2300      	movs	r3, #0
 80035be:	2202      	movs	r2, #2
 80035c0:	f240 2181 	movw	r1, #641	; 0x281
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7fc ffef 	bl	80005a8 <FT_CAN_FilterConfig>
	PDM_CAN_FilterConfig(hcan, 3, CAN_RX_FIFO0);
 80035ca:	2200      	movs	r2, #0
 80035cc:	2103      	movs	r1, #3
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7fe fd2e 	bl	8002030 <PDM_CAN_FilterConfig>

	HAL_CAN_Start(hcan);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f003 fdf7 	bl	80071c8 <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80035da:	2102      	movs	r1, #2
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f004 f859 	bl	8007694 <HAL_CAN_ActivateNotification>
}
 80035e2:	bf00      	nop
 80035e4:	3738      	adds	r7, #56	; 0x38
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
	...

080035ec <Principal_Transmit_Msg>:

void Principal_Transmit_Msg(CAN_HandleTypeDef* hcan, uint8_t msg_number)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	70fb      	strb	r3, [r7, #3]
	switch(msg_number)
 80035f8:	78fb      	ldrb	r3, [r7, #3]
 80035fa:	2b07      	cmp	r3, #7
 80035fc:	d830      	bhi.n	8003660 <Principal_Transmit_Msg+0x74>
 80035fe:	a201      	add	r2, pc, #4	; (adr r2, 8003604 <Principal_Transmit_Msg+0x18>)
 8003600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003604:	08003625 	.word	0x08003625
 8003608:	0800362d 	.word	0x0800362d
 800360c:	08003635 	.word	0x08003635
 8003610:	08003645 	.word	0x08003645
 8003614:	0800363d 	.word	0x0800363d
 8003618:	08003655 	.word	0x08003655
 800361c:	0800365b 	.word	0x0800365b
 8003620:	0800364d 	.word	0x0800364d
	{
		case Analog_1_4:
			Tx_Analog_1_4(hcan);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f7fe fdf7 	bl	8002218 <Tx_Analog_1_4>
			break;
 800362a:	e01a      	b.n	8003662 <Principal_Transmit_Msg+0x76>

		case Analog_5_8:
			Tx_Analog_5_8(hcan);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7fe fe91 	bl	8002354 <Tx_Analog_5_8>
			break;
 8003632:	e016      	b.n	8003662 <Principal_Transmit_Msg+0x76>

		case Analog_9_12:
			Tx_Analog_9_12(hcan);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7fe ff2b 	bl	8002490 <Tx_Analog_9_12>
			break;
 800363a:	e012      	b.n	8003662 <Principal_Transmit_Msg+0x76>

		case Verify_Msg:
			Tx_Verify(hcan);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7ff f85b 	bl	80026f8 <Tx_Verify>
			break;
 8003642:	e00e      	b.n	8003662 <Principal_Transmit_Msg+0x76>

		case RTC_Msg:
			Tx_RTC(hcan);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f7fe ffc1 	bl	80025cc <Tx_RTC>
			break;
 800364a:	e00a      	b.n	8003662 <Principal_Transmit_Msg+0x76>

		case Beacon_Msg:
			Tx_Beacon(hcan);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7ff fd27 	bl	80030a0 <Tx_Beacon>
			break;
 8003652:	e006      	b.n	8003662 <Principal_Transmit_Msg+0x76>

		case ECU_Save:
			Save_ECU();
 8003654:	f7ff fe72 	bl	800333c <Save_ECU>
			break;
 8003658:	e003      	b.n	8003662 <Principal_Transmit_Msg+0x76>

		case PDM_Save:
			Save_PDM();
 800365a:	f7ff fd53 	bl	8003104 <Save_PDM>
			break;
 800365e:	e000      	b.n	8003662 <Principal_Transmit_Msg+0x76>

		default:
			return;
 8003660:	bf00      	nop
	}
}
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <Load_EEPROM>:
 */

#include "principal.h"

static HAL_StatusTypeDef Load_EEPROM(I2C_HandleTypeDef* hi2c)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b088      	sub	sp, #32
 800366c:	af02      	add	r7, sp, #8
 800366e:	6078      	str	r0, [r7, #4]
	uint8_t buffer[EEPROM_BUFFER_SIZE];
	HAL_StatusTypeDef retVal;

	retVal = HAL_I2C_Master_Transmit(hi2c, 0xA0, 0x00, 1, 5);
 8003670:	2305      	movs	r3, #5
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	2301      	movs	r3, #1
 8003676:	2200      	movs	r2, #0
 8003678:	21a0      	movs	r1, #160	; 0xa0
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f005 fa4c 	bl	8008b18 <HAL_I2C_Master_Transmit>
 8003680:	4603      	mov	r3, r0
 8003682:	75fb      	strb	r3, [r7, #23]

	if(retVal == HAL_OK)
 8003684:	7dfb      	ldrb	r3, [r7, #23]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d128      	bne.n	80036dc <Load_EEPROM+0x74>
		retVal = HAL_I2C_Master_Receive(hi2c, 0xA1, buffer, EEPROM_BUFFER_SIZE, 5);
 800368a:	f107 020c 	add.w	r2, r7, #12
 800368e:	2305      	movs	r3, #5
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	230b      	movs	r3, #11
 8003694:	21a1      	movs	r1, #161	; 0xa1
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f005 fb3c 	bl	8008d14 <HAL_I2C_Master_Receive>
 800369c:	4603      	mov	r3, r0
 800369e:	75fb      	strb	r3, [r7, #23]
	else
		return retVal;

	__LOAD_FREQ(buffer[0], Per_Msg[Analog_1_4]);
 80036a0:	7b3b      	ldrb	r3, [r7, #12]
 80036a2:	3b01      	subs	r3, #1
 80036a4:	2b0a      	cmp	r3, #10
 80036a6:	d849      	bhi.n	800373c <Load_EEPROM+0xd4>
 80036a8:	a201      	add	r2, pc, #4	; (adr r2, 80036b0 <Load_EEPROM+0x48>)
 80036aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ae:	bf00      	nop
 80036b0:	080036e1 	.word	0x080036e1
 80036b4:	080036eb 	.word	0x080036eb
 80036b8:	080036f5 	.word	0x080036f5
 80036bc:	080036fd 	.word	0x080036fd
 80036c0:	08003705 	.word	0x08003705
 80036c4:	0800370d 	.word	0x0800370d
 80036c8:	08003715 	.word	0x08003715
 80036cc:	0800371d 	.word	0x0800371d
 80036d0:	08003725 	.word	0x08003725
 80036d4:	0800372d 	.word	0x0800372d
 80036d8:	08003735 	.word	0x08003735
		return retVal;
 80036dc:	7dfb      	ldrb	r3, [r7, #23]
 80036de:	e35b      	b.n	8003d98 <Load_EEPROM+0x730>
	__LOAD_FREQ(buffer[0], Per_Msg[Analog_1_4]);
 80036e0:	4ba8      	ldr	r3, [pc, #672]	; (8003984 <Load_EEPROM+0x31c>)
 80036e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036e6:	801a      	strh	r2, [r3, #0]
 80036e8:	e02b      	b.n	8003742 <Load_EEPROM+0xda>
 80036ea:	4ba6      	ldr	r3, [pc, #664]	; (8003984 <Load_EEPROM+0x31c>)
 80036ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80036f0:	801a      	strh	r2, [r3, #0]
 80036f2:	e026      	b.n	8003742 <Load_EEPROM+0xda>
 80036f4:	4ba3      	ldr	r3, [pc, #652]	; (8003984 <Load_EEPROM+0x31c>)
 80036f6:	22c8      	movs	r2, #200	; 0xc8
 80036f8:	801a      	strh	r2, [r3, #0]
 80036fa:	e022      	b.n	8003742 <Load_EEPROM+0xda>
 80036fc:	4ba1      	ldr	r3, [pc, #644]	; (8003984 <Load_EEPROM+0x31c>)
 80036fe:	2264      	movs	r2, #100	; 0x64
 8003700:	801a      	strh	r2, [r3, #0]
 8003702:	e01e      	b.n	8003742 <Load_EEPROM+0xda>
 8003704:	4b9f      	ldr	r3, [pc, #636]	; (8003984 <Load_EEPROM+0x31c>)
 8003706:	2232      	movs	r2, #50	; 0x32
 8003708:	801a      	strh	r2, [r3, #0]
 800370a:	e01a      	b.n	8003742 <Load_EEPROM+0xda>
 800370c:	4b9d      	ldr	r3, [pc, #628]	; (8003984 <Load_EEPROM+0x31c>)
 800370e:	2228      	movs	r2, #40	; 0x28
 8003710:	801a      	strh	r2, [r3, #0]
 8003712:	e016      	b.n	8003742 <Load_EEPROM+0xda>
 8003714:	4b9b      	ldr	r3, [pc, #620]	; (8003984 <Load_EEPROM+0x31c>)
 8003716:	2214      	movs	r2, #20
 8003718:	801a      	strh	r2, [r3, #0]
 800371a:	e012      	b.n	8003742 <Load_EEPROM+0xda>
 800371c:	4b99      	ldr	r3, [pc, #612]	; (8003984 <Load_EEPROM+0x31c>)
 800371e:	220a      	movs	r2, #10
 8003720:	801a      	strh	r2, [r3, #0]
 8003722:	e00e      	b.n	8003742 <Load_EEPROM+0xda>
 8003724:	4b97      	ldr	r3, [pc, #604]	; (8003984 <Load_EEPROM+0x31c>)
 8003726:	2205      	movs	r2, #5
 8003728:	801a      	strh	r2, [r3, #0]
 800372a:	e00a      	b.n	8003742 <Load_EEPROM+0xda>
 800372c:	4b95      	ldr	r3, [pc, #596]	; (8003984 <Load_EEPROM+0x31c>)
 800372e:	2203      	movs	r2, #3
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	e006      	b.n	8003742 <Load_EEPROM+0xda>
 8003734:	4b93      	ldr	r3, [pc, #588]	; (8003984 <Load_EEPROM+0x31c>)
 8003736:	2202      	movs	r2, #2
 8003738:	801a      	strh	r2, [r3, #0]
 800373a:	e002      	b.n	8003742 <Load_EEPROM+0xda>
 800373c:	4b91      	ldr	r3, [pc, #580]	; (8003984 <Load_EEPROM+0x31c>)
 800373e:	2200      	movs	r2, #0
 8003740:	801a      	strh	r2, [r3, #0]
 8003742:	bf00      	nop
	__LOAD_FREQ(buffer[1], Per_Msg[Analog_5_8]);
 8003744:	7b7b      	ldrb	r3, [r7, #13]
 8003746:	3b01      	subs	r3, #1
 8003748:	2b0a      	cmp	r3, #10
 800374a:	d847      	bhi.n	80037dc <Load_EEPROM+0x174>
 800374c:	a201      	add	r2, pc, #4	; (adr r2, 8003754 <Load_EEPROM+0xec>)
 800374e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003752:	bf00      	nop
 8003754:	08003781 	.word	0x08003781
 8003758:	0800378b 	.word	0x0800378b
 800375c:	08003795 	.word	0x08003795
 8003760:	0800379d 	.word	0x0800379d
 8003764:	080037a5 	.word	0x080037a5
 8003768:	080037ad 	.word	0x080037ad
 800376c:	080037b5 	.word	0x080037b5
 8003770:	080037bd 	.word	0x080037bd
 8003774:	080037c5 	.word	0x080037c5
 8003778:	080037cd 	.word	0x080037cd
 800377c:	080037d5 	.word	0x080037d5
 8003780:	4b80      	ldr	r3, [pc, #512]	; (8003984 <Load_EEPROM+0x31c>)
 8003782:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003786:	805a      	strh	r2, [r3, #2]
 8003788:	e02b      	b.n	80037e2 <Load_EEPROM+0x17a>
 800378a:	4b7e      	ldr	r3, [pc, #504]	; (8003984 <Load_EEPROM+0x31c>)
 800378c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003790:	805a      	strh	r2, [r3, #2]
 8003792:	e026      	b.n	80037e2 <Load_EEPROM+0x17a>
 8003794:	4b7b      	ldr	r3, [pc, #492]	; (8003984 <Load_EEPROM+0x31c>)
 8003796:	22c8      	movs	r2, #200	; 0xc8
 8003798:	805a      	strh	r2, [r3, #2]
 800379a:	e022      	b.n	80037e2 <Load_EEPROM+0x17a>
 800379c:	4b79      	ldr	r3, [pc, #484]	; (8003984 <Load_EEPROM+0x31c>)
 800379e:	2264      	movs	r2, #100	; 0x64
 80037a0:	805a      	strh	r2, [r3, #2]
 80037a2:	e01e      	b.n	80037e2 <Load_EEPROM+0x17a>
 80037a4:	4b77      	ldr	r3, [pc, #476]	; (8003984 <Load_EEPROM+0x31c>)
 80037a6:	2232      	movs	r2, #50	; 0x32
 80037a8:	805a      	strh	r2, [r3, #2]
 80037aa:	e01a      	b.n	80037e2 <Load_EEPROM+0x17a>
 80037ac:	4b75      	ldr	r3, [pc, #468]	; (8003984 <Load_EEPROM+0x31c>)
 80037ae:	2228      	movs	r2, #40	; 0x28
 80037b0:	805a      	strh	r2, [r3, #2]
 80037b2:	e016      	b.n	80037e2 <Load_EEPROM+0x17a>
 80037b4:	4b73      	ldr	r3, [pc, #460]	; (8003984 <Load_EEPROM+0x31c>)
 80037b6:	2214      	movs	r2, #20
 80037b8:	805a      	strh	r2, [r3, #2]
 80037ba:	e012      	b.n	80037e2 <Load_EEPROM+0x17a>
 80037bc:	4b71      	ldr	r3, [pc, #452]	; (8003984 <Load_EEPROM+0x31c>)
 80037be:	220a      	movs	r2, #10
 80037c0:	805a      	strh	r2, [r3, #2]
 80037c2:	e00e      	b.n	80037e2 <Load_EEPROM+0x17a>
 80037c4:	4b6f      	ldr	r3, [pc, #444]	; (8003984 <Load_EEPROM+0x31c>)
 80037c6:	2205      	movs	r2, #5
 80037c8:	805a      	strh	r2, [r3, #2]
 80037ca:	e00a      	b.n	80037e2 <Load_EEPROM+0x17a>
 80037cc:	4b6d      	ldr	r3, [pc, #436]	; (8003984 <Load_EEPROM+0x31c>)
 80037ce:	2203      	movs	r2, #3
 80037d0:	805a      	strh	r2, [r3, #2]
 80037d2:	e006      	b.n	80037e2 <Load_EEPROM+0x17a>
 80037d4:	4b6b      	ldr	r3, [pc, #428]	; (8003984 <Load_EEPROM+0x31c>)
 80037d6:	2202      	movs	r2, #2
 80037d8:	805a      	strh	r2, [r3, #2]
 80037da:	e002      	b.n	80037e2 <Load_EEPROM+0x17a>
 80037dc:	4b69      	ldr	r3, [pc, #420]	; (8003984 <Load_EEPROM+0x31c>)
 80037de:	2200      	movs	r2, #0
 80037e0:	805a      	strh	r2, [r3, #2]
 80037e2:	bf00      	nop
	__LOAD_FREQ(buffer[2], Per_Msg[Analog_9_12]);
 80037e4:	7bbb      	ldrb	r3, [r7, #14]
 80037e6:	3b01      	subs	r3, #1
 80037e8:	2b0a      	cmp	r3, #10
 80037ea:	d847      	bhi.n	800387c <Load_EEPROM+0x214>
 80037ec:	a201      	add	r2, pc, #4	; (adr r2, 80037f4 <Load_EEPROM+0x18c>)
 80037ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f2:	bf00      	nop
 80037f4:	08003821 	.word	0x08003821
 80037f8:	0800382b 	.word	0x0800382b
 80037fc:	08003835 	.word	0x08003835
 8003800:	0800383d 	.word	0x0800383d
 8003804:	08003845 	.word	0x08003845
 8003808:	0800384d 	.word	0x0800384d
 800380c:	08003855 	.word	0x08003855
 8003810:	0800385d 	.word	0x0800385d
 8003814:	08003865 	.word	0x08003865
 8003818:	0800386d 	.word	0x0800386d
 800381c:	08003875 	.word	0x08003875
 8003820:	4b58      	ldr	r3, [pc, #352]	; (8003984 <Load_EEPROM+0x31c>)
 8003822:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003826:	809a      	strh	r2, [r3, #4]
 8003828:	e02b      	b.n	8003882 <Load_EEPROM+0x21a>
 800382a:	4b56      	ldr	r3, [pc, #344]	; (8003984 <Load_EEPROM+0x31c>)
 800382c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003830:	809a      	strh	r2, [r3, #4]
 8003832:	e026      	b.n	8003882 <Load_EEPROM+0x21a>
 8003834:	4b53      	ldr	r3, [pc, #332]	; (8003984 <Load_EEPROM+0x31c>)
 8003836:	22c8      	movs	r2, #200	; 0xc8
 8003838:	809a      	strh	r2, [r3, #4]
 800383a:	e022      	b.n	8003882 <Load_EEPROM+0x21a>
 800383c:	4b51      	ldr	r3, [pc, #324]	; (8003984 <Load_EEPROM+0x31c>)
 800383e:	2264      	movs	r2, #100	; 0x64
 8003840:	809a      	strh	r2, [r3, #4]
 8003842:	e01e      	b.n	8003882 <Load_EEPROM+0x21a>
 8003844:	4b4f      	ldr	r3, [pc, #316]	; (8003984 <Load_EEPROM+0x31c>)
 8003846:	2232      	movs	r2, #50	; 0x32
 8003848:	809a      	strh	r2, [r3, #4]
 800384a:	e01a      	b.n	8003882 <Load_EEPROM+0x21a>
 800384c:	4b4d      	ldr	r3, [pc, #308]	; (8003984 <Load_EEPROM+0x31c>)
 800384e:	2228      	movs	r2, #40	; 0x28
 8003850:	809a      	strh	r2, [r3, #4]
 8003852:	e016      	b.n	8003882 <Load_EEPROM+0x21a>
 8003854:	4b4b      	ldr	r3, [pc, #300]	; (8003984 <Load_EEPROM+0x31c>)
 8003856:	2214      	movs	r2, #20
 8003858:	809a      	strh	r2, [r3, #4]
 800385a:	e012      	b.n	8003882 <Load_EEPROM+0x21a>
 800385c:	4b49      	ldr	r3, [pc, #292]	; (8003984 <Load_EEPROM+0x31c>)
 800385e:	220a      	movs	r2, #10
 8003860:	809a      	strh	r2, [r3, #4]
 8003862:	e00e      	b.n	8003882 <Load_EEPROM+0x21a>
 8003864:	4b47      	ldr	r3, [pc, #284]	; (8003984 <Load_EEPROM+0x31c>)
 8003866:	2205      	movs	r2, #5
 8003868:	809a      	strh	r2, [r3, #4]
 800386a:	e00a      	b.n	8003882 <Load_EEPROM+0x21a>
 800386c:	4b45      	ldr	r3, [pc, #276]	; (8003984 <Load_EEPROM+0x31c>)
 800386e:	2203      	movs	r2, #3
 8003870:	809a      	strh	r2, [r3, #4]
 8003872:	e006      	b.n	8003882 <Load_EEPROM+0x21a>
 8003874:	4b43      	ldr	r3, [pc, #268]	; (8003984 <Load_EEPROM+0x31c>)
 8003876:	2202      	movs	r2, #2
 8003878:	809a      	strh	r2, [r3, #4]
 800387a:	e002      	b.n	8003882 <Load_EEPROM+0x21a>
 800387c:	4b41      	ldr	r3, [pc, #260]	; (8003984 <Load_EEPROM+0x31c>)
 800387e:	2200      	movs	r2, #0
 8003880:	809a      	strh	r2, [r3, #4]
 8003882:	bf00      	nop
	__LOAD_FREQ(buffer[3], Per_Msg[RTC_Msg]);
 8003884:	7bfb      	ldrb	r3, [r7, #15]
 8003886:	3b01      	subs	r3, #1
 8003888:	2b0a      	cmp	r3, #10
 800388a:	d847      	bhi.n	800391c <Load_EEPROM+0x2b4>
 800388c:	a201      	add	r2, pc, #4	; (adr r2, 8003894 <Load_EEPROM+0x22c>)
 800388e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003892:	bf00      	nop
 8003894:	080038c1 	.word	0x080038c1
 8003898:	080038cb 	.word	0x080038cb
 800389c:	080038d5 	.word	0x080038d5
 80038a0:	080038dd 	.word	0x080038dd
 80038a4:	080038e5 	.word	0x080038e5
 80038a8:	080038ed 	.word	0x080038ed
 80038ac:	080038f5 	.word	0x080038f5
 80038b0:	080038fd 	.word	0x080038fd
 80038b4:	08003905 	.word	0x08003905
 80038b8:	0800390d 	.word	0x0800390d
 80038bc:	08003915 	.word	0x08003915
 80038c0:	4b30      	ldr	r3, [pc, #192]	; (8003984 <Load_EEPROM+0x31c>)
 80038c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038c6:	80da      	strh	r2, [r3, #6]
 80038c8:	e02b      	b.n	8003922 <Load_EEPROM+0x2ba>
 80038ca:	4b2e      	ldr	r3, [pc, #184]	; (8003984 <Load_EEPROM+0x31c>)
 80038cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80038d0:	80da      	strh	r2, [r3, #6]
 80038d2:	e026      	b.n	8003922 <Load_EEPROM+0x2ba>
 80038d4:	4b2b      	ldr	r3, [pc, #172]	; (8003984 <Load_EEPROM+0x31c>)
 80038d6:	22c8      	movs	r2, #200	; 0xc8
 80038d8:	80da      	strh	r2, [r3, #6]
 80038da:	e022      	b.n	8003922 <Load_EEPROM+0x2ba>
 80038dc:	4b29      	ldr	r3, [pc, #164]	; (8003984 <Load_EEPROM+0x31c>)
 80038de:	2264      	movs	r2, #100	; 0x64
 80038e0:	80da      	strh	r2, [r3, #6]
 80038e2:	e01e      	b.n	8003922 <Load_EEPROM+0x2ba>
 80038e4:	4b27      	ldr	r3, [pc, #156]	; (8003984 <Load_EEPROM+0x31c>)
 80038e6:	2232      	movs	r2, #50	; 0x32
 80038e8:	80da      	strh	r2, [r3, #6]
 80038ea:	e01a      	b.n	8003922 <Load_EEPROM+0x2ba>
 80038ec:	4b25      	ldr	r3, [pc, #148]	; (8003984 <Load_EEPROM+0x31c>)
 80038ee:	2228      	movs	r2, #40	; 0x28
 80038f0:	80da      	strh	r2, [r3, #6]
 80038f2:	e016      	b.n	8003922 <Load_EEPROM+0x2ba>
 80038f4:	4b23      	ldr	r3, [pc, #140]	; (8003984 <Load_EEPROM+0x31c>)
 80038f6:	2214      	movs	r2, #20
 80038f8:	80da      	strh	r2, [r3, #6]
 80038fa:	e012      	b.n	8003922 <Load_EEPROM+0x2ba>
 80038fc:	4b21      	ldr	r3, [pc, #132]	; (8003984 <Load_EEPROM+0x31c>)
 80038fe:	220a      	movs	r2, #10
 8003900:	80da      	strh	r2, [r3, #6]
 8003902:	e00e      	b.n	8003922 <Load_EEPROM+0x2ba>
 8003904:	4b1f      	ldr	r3, [pc, #124]	; (8003984 <Load_EEPROM+0x31c>)
 8003906:	2205      	movs	r2, #5
 8003908:	80da      	strh	r2, [r3, #6]
 800390a:	e00a      	b.n	8003922 <Load_EEPROM+0x2ba>
 800390c:	4b1d      	ldr	r3, [pc, #116]	; (8003984 <Load_EEPROM+0x31c>)
 800390e:	2203      	movs	r2, #3
 8003910:	80da      	strh	r2, [r3, #6]
 8003912:	e006      	b.n	8003922 <Load_EEPROM+0x2ba>
 8003914:	4b1b      	ldr	r3, [pc, #108]	; (8003984 <Load_EEPROM+0x31c>)
 8003916:	2202      	movs	r2, #2
 8003918:	80da      	strh	r2, [r3, #6]
 800391a:	e002      	b.n	8003922 <Load_EEPROM+0x2ba>
 800391c:	4b19      	ldr	r3, [pc, #100]	; (8003984 <Load_EEPROM+0x31c>)
 800391e:	2200      	movs	r2, #0
 8003920:	80da      	strh	r2, [r3, #6]
 8003922:	bf00      	nop
	__LOAD_FREQ(buffer[4], Per_Msg[Verify_Msg]);
 8003924:	7c3b      	ldrb	r3, [r7, #16]
 8003926:	3b01      	subs	r3, #1
 8003928:	2b0a      	cmp	r3, #10
 800392a:	d849      	bhi.n	80039c0 <Load_EEPROM+0x358>
 800392c:	a201      	add	r2, pc, #4	; (adr r2, 8003934 <Load_EEPROM+0x2cc>)
 800392e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003932:	bf00      	nop
 8003934:	08003961 	.word	0x08003961
 8003938:	0800396b 	.word	0x0800396b
 800393c:	08003975 	.word	0x08003975
 8003940:	0800397d 	.word	0x0800397d
 8003944:	08003989 	.word	0x08003989
 8003948:	08003991 	.word	0x08003991
 800394c:	08003999 	.word	0x08003999
 8003950:	080039a1 	.word	0x080039a1
 8003954:	080039a9 	.word	0x080039a9
 8003958:	080039b1 	.word	0x080039b1
 800395c:	080039b9 	.word	0x080039b9
 8003960:	4b08      	ldr	r3, [pc, #32]	; (8003984 <Load_EEPROM+0x31c>)
 8003962:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003966:	811a      	strh	r2, [r3, #8]
 8003968:	e02d      	b.n	80039c6 <Load_EEPROM+0x35e>
 800396a:	4b06      	ldr	r3, [pc, #24]	; (8003984 <Load_EEPROM+0x31c>)
 800396c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003970:	811a      	strh	r2, [r3, #8]
 8003972:	e028      	b.n	80039c6 <Load_EEPROM+0x35e>
 8003974:	4b03      	ldr	r3, [pc, #12]	; (8003984 <Load_EEPROM+0x31c>)
 8003976:	22c8      	movs	r2, #200	; 0xc8
 8003978:	811a      	strh	r2, [r3, #8]
 800397a:	e024      	b.n	80039c6 <Load_EEPROM+0x35e>
 800397c:	4b01      	ldr	r3, [pc, #4]	; (8003984 <Load_EEPROM+0x31c>)
 800397e:	2264      	movs	r2, #100	; 0x64
 8003980:	811a      	strh	r2, [r3, #8]
 8003982:	e020      	b.n	80039c6 <Load_EEPROM+0x35e>
 8003984:	20002e7c 	.word	0x20002e7c
 8003988:	4ba7      	ldr	r3, [pc, #668]	; (8003c28 <Load_EEPROM+0x5c0>)
 800398a:	2232      	movs	r2, #50	; 0x32
 800398c:	811a      	strh	r2, [r3, #8]
 800398e:	e01a      	b.n	80039c6 <Load_EEPROM+0x35e>
 8003990:	4ba5      	ldr	r3, [pc, #660]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003992:	2228      	movs	r2, #40	; 0x28
 8003994:	811a      	strh	r2, [r3, #8]
 8003996:	e016      	b.n	80039c6 <Load_EEPROM+0x35e>
 8003998:	4ba3      	ldr	r3, [pc, #652]	; (8003c28 <Load_EEPROM+0x5c0>)
 800399a:	2214      	movs	r2, #20
 800399c:	811a      	strh	r2, [r3, #8]
 800399e:	e012      	b.n	80039c6 <Load_EEPROM+0x35e>
 80039a0:	4ba1      	ldr	r3, [pc, #644]	; (8003c28 <Load_EEPROM+0x5c0>)
 80039a2:	220a      	movs	r2, #10
 80039a4:	811a      	strh	r2, [r3, #8]
 80039a6:	e00e      	b.n	80039c6 <Load_EEPROM+0x35e>
 80039a8:	4b9f      	ldr	r3, [pc, #636]	; (8003c28 <Load_EEPROM+0x5c0>)
 80039aa:	2205      	movs	r2, #5
 80039ac:	811a      	strh	r2, [r3, #8]
 80039ae:	e00a      	b.n	80039c6 <Load_EEPROM+0x35e>
 80039b0:	4b9d      	ldr	r3, [pc, #628]	; (8003c28 <Load_EEPROM+0x5c0>)
 80039b2:	2203      	movs	r2, #3
 80039b4:	811a      	strh	r2, [r3, #8]
 80039b6:	e006      	b.n	80039c6 <Load_EEPROM+0x35e>
 80039b8:	4b9b      	ldr	r3, [pc, #620]	; (8003c28 <Load_EEPROM+0x5c0>)
 80039ba:	2202      	movs	r2, #2
 80039bc:	811a      	strh	r2, [r3, #8]
 80039be:	e002      	b.n	80039c6 <Load_EEPROM+0x35e>
 80039c0:	4b99      	ldr	r3, [pc, #612]	; (8003c28 <Load_EEPROM+0x5c0>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	811a      	strh	r2, [r3, #8]
 80039c6:	bf00      	nop
	__LOAD_FREQ(buffer[5], Per_Msg[ECU_Save]);
 80039c8:	7c7b      	ldrb	r3, [r7, #17]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	2b0a      	cmp	r3, #10
 80039ce:	d847      	bhi.n	8003a60 <Load_EEPROM+0x3f8>
 80039d0:	a201      	add	r2, pc, #4	; (adr r2, 80039d8 <Load_EEPROM+0x370>)
 80039d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d6:	bf00      	nop
 80039d8:	08003a05 	.word	0x08003a05
 80039dc:	08003a0f 	.word	0x08003a0f
 80039e0:	08003a19 	.word	0x08003a19
 80039e4:	08003a21 	.word	0x08003a21
 80039e8:	08003a29 	.word	0x08003a29
 80039ec:	08003a31 	.word	0x08003a31
 80039f0:	08003a39 	.word	0x08003a39
 80039f4:	08003a41 	.word	0x08003a41
 80039f8:	08003a49 	.word	0x08003a49
 80039fc:	08003a51 	.word	0x08003a51
 8003a00:	08003a59 	.word	0x08003a59
 8003a04:	4b88      	ldr	r3, [pc, #544]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003a06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a0a:	815a      	strh	r2, [r3, #10]
 8003a0c:	e02b      	b.n	8003a66 <Load_EEPROM+0x3fe>
 8003a0e:	4b86      	ldr	r3, [pc, #536]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003a10:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003a14:	815a      	strh	r2, [r3, #10]
 8003a16:	e026      	b.n	8003a66 <Load_EEPROM+0x3fe>
 8003a18:	4b83      	ldr	r3, [pc, #524]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003a1a:	22c8      	movs	r2, #200	; 0xc8
 8003a1c:	815a      	strh	r2, [r3, #10]
 8003a1e:	e022      	b.n	8003a66 <Load_EEPROM+0x3fe>
 8003a20:	4b81      	ldr	r3, [pc, #516]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003a22:	2264      	movs	r2, #100	; 0x64
 8003a24:	815a      	strh	r2, [r3, #10]
 8003a26:	e01e      	b.n	8003a66 <Load_EEPROM+0x3fe>
 8003a28:	4b7f      	ldr	r3, [pc, #508]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003a2a:	2232      	movs	r2, #50	; 0x32
 8003a2c:	815a      	strh	r2, [r3, #10]
 8003a2e:	e01a      	b.n	8003a66 <Load_EEPROM+0x3fe>
 8003a30:	4b7d      	ldr	r3, [pc, #500]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003a32:	2228      	movs	r2, #40	; 0x28
 8003a34:	815a      	strh	r2, [r3, #10]
 8003a36:	e016      	b.n	8003a66 <Load_EEPROM+0x3fe>
 8003a38:	4b7b      	ldr	r3, [pc, #492]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003a3a:	2214      	movs	r2, #20
 8003a3c:	815a      	strh	r2, [r3, #10]
 8003a3e:	e012      	b.n	8003a66 <Load_EEPROM+0x3fe>
 8003a40:	4b79      	ldr	r3, [pc, #484]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003a42:	220a      	movs	r2, #10
 8003a44:	815a      	strh	r2, [r3, #10]
 8003a46:	e00e      	b.n	8003a66 <Load_EEPROM+0x3fe>
 8003a48:	4b77      	ldr	r3, [pc, #476]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003a4a:	2205      	movs	r2, #5
 8003a4c:	815a      	strh	r2, [r3, #10]
 8003a4e:	e00a      	b.n	8003a66 <Load_EEPROM+0x3fe>
 8003a50:	4b75      	ldr	r3, [pc, #468]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003a52:	2203      	movs	r2, #3
 8003a54:	815a      	strh	r2, [r3, #10]
 8003a56:	e006      	b.n	8003a66 <Load_EEPROM+0x3fe>
 8003a58:	4b73      	ldr	r3, [pc, #460]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	815a      	strh	r2, [r3, #10]
 8003a5e:	e002      	b.n	8003a66 <Load_EEPROM+0x3fe>
 8003a60:	4b71      	ldr	r3, [pc, #452]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	815a      	strh	r2, [r3, #10]
 8003a66:	bf00      	nop
	__LOAD_FREQ(buffer[6], Per_Msg[PDM_Save]);
 8003a68:	7cbb      	ldrb	r3, [r7, #18]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	2b0a      	cmp	r3, #10
 8003a6e:	d847      	bhi.n	8003b00 <Load_EEPROM+0x498>
 8003a70:	a201      	add	r2, pc, #4	; (adr r2, 8003a78 <Load_EEPROM+0x410>)
 8003a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a76:	bf00      	nop
 8003a78:	08003aa5 	.word	0x08003aa5
 8003a7c:	08003aaf 	.word	0x08003aaf
 8003a80:	08003ab9 	.word	0x08003ab9
 8003a84:	08003ac1 	.word	0x08003ac1
 8003a88:	08003ac9 	.word	0x08003ac9
 8003a8c:	08003ad1 	.word	0x08003ad1
 8003a90:	08003ad9 	.word	0x08003ad9
 8003a94:	08003ae1 	.word	0x08003ae1
 8003a98:	08003ae9 	.word	0x08003ae9
 8003a9c:	08003af1 	.word	0x08003af1
 8003aa0:	08003af9 	.word	0x08003af9
 8003aa4:	4b60      	ldr	r3, [pc, #384]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003aa6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003aaa:	819a      	strh	r2, [r3, #12]
 8003aac:	e02b      	b.n	8003b06 <Load_EEPROM+0x49e>
 8003aae:	4b5e      	ldr	r3, [pc, #376]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003ab0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003ab4:	819a      	strh	r2, [r3, #12]
 8003ab6:	e026      	b.n	8003b06 <Load_EEPROM+0x49e>
 8003ab8:	4b5b      	ldr	r3, [pc, #364]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003aba:	22c8      	movs	r2, #200	; 0xc8
 8003abc:	819a      	strh	r2, [r3, #12]
 8003abe:	e022      	b.n	8003b06 <Load_EEPROM+0x49e>
 8003ac0:	4b59      	ldr	r3, [pc, #356]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003ac2:	2264      	movs	r2, #100	; 0x64
 8003ac4:	819a      	strh	r2, [r3, #12]
 8003ac6:	e01e      	b.n	8003b06 <Load_EEPROM+0x49e>
 8003ac8:	4b57      	ldr	r3, [pc, #348]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003aca:	2232      	movs	r2, #50	; 0x32
 8003acc:	819a      	strh	r2, [r3, #12]
 8003ace:	e01a      	b.n	8003b06 <Load_EEPROM+0x49e>
 8003ad0:	4b55      	ldr	r3, [pc, #340]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003ad2:	2228      	movs	r2, #40	; 0x28
 8003ad4:	819a      	strh	r2, [r3, #12]
 8003ad6:	e016      	b.n	8003b06 <Load_EEPROM+0x49e>
 8003ad8:	4b53      	ldr	r3, [pc, #332]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003ada:	2214      	movs	r2, #20
 8003adc:	819a      	strh	r2, [r3, #12]
 8003ade:	e012      	b.n	8003b06 <Load_EEPROM+0x49e>
 8003ae0:	4b51      	ldr	r3, [pc, #324]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003ae2:	220a      	movs	r2, #10
 8003ae4:	819a      	strh	r2, [r3, #12]
 8003ae6:	e00e      	b.n	8003b06 <Load_EEPROM+0x49e>
 8003ae8:	4b4f      	ldr	r3, [pc, #316]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003aea:	2205      	movs	r2, #5
 8003aec:	819a      	strh	r2, [r3, #12]
 8003aee:	e00a      	b.n	8003b06 <Load_EEPROM+0x49e>
 8003af0:	4b4d      	ldr	r3, [pc, #308]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003af2:	2203      	movs	r2, #3
 8003af4:	819a      	strh	r2, [r3, #12]
 8003af6:	e006      	b.n	8003b06 <Load_EEPROM+0x49e>
 8003af8:	4b4b      	ldr	r3, [pc, #300]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003afa:	2202      	movs	r2, #2
 8003afc:	819a      	strh	r2, [r3, #12]
 8003afe:	e002      	b.n	8003b06 <Load_EEPROM+0x49e>
 8003b00:	4b49      	ldr	r3, [pc, #292]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	819a      	strh	r2, [r3, #12]
 8003b06:	bf00      	nop

	__LOAD_FREQ(buffer[7], Per_CAN[Analog_1_4]);
 8003b08:	7cfb      	ldrb	r3, [r7, #19]
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	2b0a      	cmp	r3, #10
 8003b0e:	d847      	bhi.n	8003ba0 <Load_EEPROM+0x538>
 8003b10:	a201      	add	r2, pc, #4	; (adr r2, 8003b18 <Load_EEPROM+0x4b0>)
 8003b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b16:	bf00      	nop
 8003b18:	08003b45 	.word	0x08003b45
 8003b1c:	08003b4f 	.word	0x08003b4f
 8003b20:	08003b59 	.word	0x08003b59
 8003b24:	08003b61 	.word	0x08003b61
 8003b28:	08003b69 	.word	0x08003b69
 8003b2c:	08003b71 	.word	0x08003b71
 8003b30:	08003b79 	.word	0x08003b79
 8003b34:	08003b81 	.word	0x08003b81
 8003b38:	08003b89 	.word	0x08003b89
 8003b3c:	08003b91 	.word	0x08003b91
 8003b40:	08003b99 	.word	0x08003b99
 8003b44:	4b39      	ldr	r3, [pc, #228]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003b46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b4a:	801a      	strh	r2, [r3, #0]
 8003b4c:	e02b      	b.n	8003ba6 <Load_EEPROM+0x53e>
 8003b4e:	4b37      	ldr	r3, [pc, #220]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003b50:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003b54:	801a      	strh	r2, [r3, #0]
 8003b56:	e026      	b.n	8003ba6 <Load_EEPROM+0x53e>
 8003b58:	4b34      	ldr	r3, [pc, #208]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003b5a:	22c8      	movs	r2, #200	; 0xc8
 8003b5c:	801a      	strh	r2, [r3, #0]
 8003b5e:	e022      	b.n	8003ba6 <Load_EEPROM+0x53e>
 8003b60:	4b32      	ldr	r3, [pc, #200]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003b62:	2264      	movs	r2, #100	; 0x64
 8003b64:	801a      	strh	r2, [r3, #0]
 8003b66:	e01e      	b.n	8003ba6 <Load_EEPROM+0x53e>
 8003b68:	4b30      	ldr	r3, [pc, #192]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003b6a:	2232      	movs	r2, #50	; 0x32
 8003b6c:	801a      	strh	r2, [r3, #0]
 8003b6e:	e01a      	b.n	8003ba6 <Load_EEPROM+0x53e>
 8003b70:	4b2e      	ldr	r3, [pc, #184]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003b72:	2228      	movs	r2, #40	; 0x28
 8003b74:	801a      	strh	r2, [r3, #0]
 8003b76:	e016      	b.n	8003ba6 <Load_EEPROM+0x53e>
 8003b78:	4b2c      	ldr	r3, [pc, #176]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003b7a:	2214      	movs	r2, #20
 8003b7c:	801a      	strh	r2, [r3, #0]
 8003b7e:	e012      	b.n	8003ba6 <Load_EEPROM+0x53e>
 8003b80:	4b2a      	ldr	r3, [pc, #168]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003b82:	220a      	movs	r2, #10
 8003b84:	801a      	strh	r2, [r3, #0]
 8003b86:	e00e      	b.n	8003ba6 <Load_EEPROM+0x53e>
 8003b88:	4b28      	ldr	r3, [pc, #160]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003b8a:	2205      	movs	r2, #5
 8003b8c:	801a      	strh	r2, [r3, #0]
 8003b8e:	e00a      	b.n	8003ba6 <Load_EEPROM+0x53e>
 8003b90:	4b26      	ldr	r3, [pc, #152]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003b92:	2203      	movs	r2, #3
 8003b94:	801a      	strh	r2, [r3, #0]
 8003b96:	e006      	b.n	8003ba6 <Load_EEPROM+0x53e>
 8003b98:	4b24      	ldr	r3, [pc, #144]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	801a      	strh	r2, [r3, #0]
 8003b9e:	e002      	b.n	8003ba6 <Load_EEPROM+0x53e>
 8003ba0:	4b22      	ldr	r3, [pc, #136]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	801a      	strh	r2, [r3, #0]
 8003ba6:	bf00      	nop
	__LOAD_FREQ(buffer[8], Per_CAN[Analog_5_8]);
 8003ba8:	7d3b      	ldrb	r3, [r7, #20]
 8003baa:	3b01      	subs	r3, #1
 8003bac:	2b0a      	cmp	r3, #10
 8003bae:	d84b      	bhi.n	8003c48 <Load_EEPROM+0x5e0>
 8003bb0:	a201      	add	r2, pc, #4	; (adr r2, 8003bb8 <Load_EEPROM+0x550>)
 8003bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb6:	bf00      	nop
 8003bb8:	08003be5 	.word	0x08003be5
 8003bbc:	08003bef 	.word	0x08003bef
 8003bc0:	08003bf9 	.word	0x08003bf9
 8003bc4:	08003c01 	.word	0x08003c01
 8003bc8:	08003c09 	.word	0x08003c09
 8003bcc:	08003c11 	.word	0x08003c11
 8003bd0:	08003c19 	.word	0x08003c19
 8003bd4:	08003c21 	.word	0x08003c21
 8003bd8:	08003c31 	.word	0x08003c31
 8003bdc:	08003c39 	.word	0x08003c39
 8003be0:	08003c41 	.word	0x08003c41
 8003be4:	4b11      	ldr	r3, [pc, #68]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003be6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003bea:	805a      	strh	r2, [r3, #2]
 8003bec:	e02f      	b.n	8003c4e <Load_EEPROM+0x5e6>
 8003bee:	4b0f      	ldr	r3, [pc, #60]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003bf0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003bf4:	805a      	strh	r2, [r3, #2]
 8003bf6:	e02a      	b.n	8003c4e <Load_EEPROM+0x5e6>
 8003bf8:	4b0c      	ldr	r3, [pc, #48]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003bfa:	22c8      	movs	r2, #200	; 0xc8
 8003bfc:	805a      	strh	r2, [r3, #2]
 8003bfe:	e026      	b.n	8003c4e <Load_EEPROM+0x5e6>
 8003c00:	4b0a      	ldr	r3, [pc, #40]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003c02:	2264      	movs	r2, #100	; 0x64
 8003c04:	805a      	strh	r2, [r3, #2]
 8003c06:	e022      	b.n	8003c4e <Load_EEPROM+0x5e6>
 8003c08:	4b08      	ldr	r3, [pc, #32]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003c0a:	2232      	movs	r2, #50	; 0x32
 8003c0c:	805a      	strh	r2, [r3, #2]
 8003c0e:	e01e      	b.n	8003c4e <Load_EEPROM+0x5e6>
 8003c10:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003c12:	2228      	movs	r2, #40	; 0x28
 8003c14:	805a      	strh	r2, [r3, #2]
 8003c16:	e01a      	b.n	8003c4e <Load_EEPROM+0x5e6>
 8003c18:	4b04      	ldr	r3, [pc, #16]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003c1a:	2214      	movs	r2, #20
 8003c1c:	805a      	strh	r2, [r3, #2]
 8003c1e:	e016      	b.n	8003c4e <Load_EEPROM+0x5e6>
 8003c20:	4b02      	ldr	r3, [pc, #8]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003c22:	220a      	movs	r2, #10
 8003c24:	805a      	strh	r2, [r3, #2]
 8003c26:	e012      	b.n	8003c4e <Load_EEPROM+0x5e6>
 8003c28:	20002e7c 	.word	0x20002e7c
 8003c2c:	200006fc 	.word	0x200006fc
 8003c30:	4b5b      	ldr	r3, [pc, #364]	; (8003da0 <Load_EEPROM+0x738>)
 8003c32:	2205      	movs	r2, #5
 8003c34:	805a      	strh	r2, [r3, #2]
 8003c36:	e00a      	b.n	8003c4e <Load_EEPROM+0x5e6>
 8003c38:	4b59      	ldr	r3, [pc, #356]	; (8003da0 <Load_EEPROM+0x738>)
 8003c3a:	2203      	movs	r2, #3
 8003c3c:	805a      	strh	r2, [r3, #2]
 8003c3e:	e006      	b.n	8003c4e <Load_EEPROM+0x5e6>
 8003c40:	4b57      	ldr	r3, [pc, #348]	; (8003da0 <Load_EEPROM+0x738>)
 8003c42:	2202      	movs	r2, #2
 8003c44:	805a      	strh	r2, [r3, #2]
 8003c46:	e002      	b.n	8003c4e <Load_EEPROM+0x5e6>
 8003c48:	4b55      	ldr	r3, [pc, #340]	; (8003da0 <Load_EEPROM+0x738>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	805a      	strh	r2, [r3, #2]
 8003c4e:	bf00      	nop
	__LOAD_FREQ(buffer[9], Per_CAN[Analog_9_12]);
 8003c50:	7d7b      	ldrb	r3, [r7, #21]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	2b0a      	cmp	r3, #10
 8003c56:	d847      	bhi.n	8003ce8 <Load_EEPROM+0x680>
 8003c58:	a201      	add	r2, pc, #4	; (adr r2, 8003c60 <Load_EEPROM+0x5f8>)
 8003c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5e:	bf00      	nop
 8003c60:	08003c8d 	.word	0x08003c8d
 8003c64:	08003c97 	.word	0x08003c97
 8003c68:	08003ca1 	.word	0x08003ca1
 8003c6c:	08003ca9 	.word	0x08003ca9
 8003c70:	08003cb1 	.word	0x08003cb1
 8003c74:	08003cb9 	.word	0x08003cb9
 8003c78:	08003cc1 	.word	0x08003cc1
 8003c7c:	08003cc9 	.word	0x08003cc9
 8003c80:	08003cd1 	.word	0x08003cd1
 8003c84:	08003cd9 	.word	0x08003cd9
 8003c88:	08003ce1 	.word	0x08003ce1
 8003c8c:	4b44      	ldr	r3, [pc, #272]	; (8003da0 <Load_EEPROM+0x738>)
 8003c8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c92:	809a      	strh	r2, [r3, #4]
 8003c94:	e02b      	b.n	8003cee <Load_EEPROM+0x686>
 8003c96:	4b42      	ldr	r3, [pc, #264]	; (8003da0 <Load_EEPROM+0x738>)
 8003c98:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003c9c:	809a      	strh	r2, [r3, #4]
 8003c9e:	e026      	b.n	8003cee <Load_EEPROM+0x686>
 8003ca0:	4b3f      	ldr	r3, [pc, #252]	; (8003da0 <Load_EEPROM+0x738>)
 8003ca2:	22c8      	movs	r2, #200	; 0xc8
 8003ca4:	809a      	strh	r2, [r3, #4]
 8003ca6:	e022      	b.n	8003cee <Load_EEPROM+0x686>
 8003ca8:	4b3d      	ldr	r3, [pc, #244]	; (8003da0 <Load_EEPROM+0x738>)
 8003caa:	2264      	movs	r2, #100	; 0x64
 8003cac:	809a      	strh	r2, [r3, #4]
 8003cae:	e01e      	b.n	8003cee <Load_EEPROM+0x686>
 8003cb0:	4b3b      	ldr	r3, [pc, #236]	; (8003da0 <Load_EEPROM+0x738>)
 8003cb2:	2232      	movs	r2, #50	; 0x32
 8003cb4:	809a      	strh	r2, [r3, #4]
 8003cb6:	e01a      	b.n	8003cee <Load_EEPROM+0x686>
 8003cb8:	4b39      	ldr	r3, [pc, #228]	; (8003da0 <Load_EEPROM+0x738>)
 8003cba:	2228      	movs	r2, #40	; 0x28
 8003cbc:	809a      	strh	r2, [r3, #4]
 8003cbe:	e016      	b.n	8003cee <Load_EEPROM+0x686>
 8003cc0:	4b37      	ldr	r3, [pc, #220]	; (8003da0 <Load_EEPROM+0x738>)
 8003cc2:	2214      	movs	r2, #20
 8003cc4:	809a      	strh	r2, [r3, #4]
 8003cc6:	e012      	b.n	8003cee <Load_EEPROM+0x686>
 8003cc8:	4b35      	ldr	r3, [pc, #212]	; (8003da0 <Load_EEPROM+0x738>)
 8003cca:	220a      	movs	r2, #10
 8003ccc:	809a      	strh	r2, [r3, #4]
 8003cce:	e00e      	b.n	8003cee <Load_EEPROM+0x686>
 8003cd0:	4b33      	ldr	r3, [pc, #204]	; (8003da0 <Load_EEPROM+0x738>)
 8003cd2:	2205      	movs	r2, #5
 8003cd4:	809a      	strh	r2, [r3, #4]
 8003cd6:	e00a      	b.n	8003cee <Load_EEPROM+0x686>
 8003cd8:	4b31      	ldr	r3, [pc, #196]	; (8003da0 <Load_EEPROM+0x738>)
 8003cda:	2203      	movs	r2, #3
 8003cdc:	809a      	strh	r2, [r3, #4]
 8003cde:	e006      	b.n	8003cee <Load_EEPROM+0x686>
 8003ce0:	4b2f      	ldr	r3, [pc, #188]	; (8003da0 <Load_EEPROM+0x738>)
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	809a      	strh	r2, [r3, #4]
 8003ce6:	e002      	b.n	8003cee <Load_EEPROM+0x686>
 8003ce8:	4b2d      	ldr	r3, [pc, #180]	; (8003da0 <Load_EEPROM+0x738>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	809a      	strh	r2, [r3, #4]
 8003cee:	bf00      	nop
	__LOAD_FREQ(buffer[10], Per_CAN[RTC_Msg]);
 8003cf0:	7dbb      	ldrb	r3, [r7, #22]
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	2b0a      	cmp	r3, #10
 8003cf6:	d847      	bhi.n	8003d88 <Load_EEPROM+0x720>
 8003cf8:	a201      	add	r2, pc, #4	; (adr r2, 8003d00 <Load_EEPROM+0x698>)
 8003cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfe:	bf00      	nop
 8003d00:	08003d2d 	.word	0x08003d2d
 8003d04:	08003d37 	.word	0x08003d37
 8003d08:	08003d41 	.word	0x08003d41
 8003d0c:	08003d49 	.word	0x08003d49
 8003d10:	08003d51 	.word	0x08003d51
 8003d14:	08003d59 	.word	0x08003d59
 8003d18:	08003d61 	.word	0x08003d61
 8003d1c:	08003d69 	.word	0x08003d69
 8003d20:	08003d71 	.word	0x08003d71
 8003d24:	08003d79 	.word	0x08003d79
 8003d28:	08003d81 	.word	0x08003d81
 8003d2c:	4b1c      	ldr	r3, [pc, #112]	; (8003da0 <Load_EEPROM+0x738>)
 8003d2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d32:	80da      	strh	r2, [r3, #6]
 8003d34:	e02b      	b.n	8003d8e <Load_EEPROM+0x726>
 8003d36:	4b1a      	ldr	r3, [pc, #104]	; (8003da0 <Load_EEPROM+0x738>)
 8003d38:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003d3c:	80da      	strh	r2, [r3, #6]
 8003d3e:	e026      	b.n	8003d8e <Load_EEPROM+0x726>
 8003d40:	4b17      	ldr	r3, [pc, #92]	; (8003da0 <Load_EEPROM+0x738>)
 8003d42:	22c8      	movs	r2, #200	; 0xc8
 8003d44:	80da      	strh	r2, [r3, #6]
 8003d46:	e022      	b.n	8003d8e <Load_EEPROM+0x726>
 8003d48:	4b15      	ldr	r3, [pc, #84]	; (8003da0 <Load_EEPROM+0x738>)
 8003d4a:	2264      	movs	r2, #100	; 0x64
 8003d4c:	80da      	strh	r2, [r3, #6]
 8003d4e:	e01e      	b.n	8003d8e <Load_EEPROM+0x726>
 8003d50:	4b13      	ldr	r3, [pc, #76]	; (8003da0 <Load_EEPROM+0x738>)
 8003d52:	2232      	movs	r2, #50	; 0x32
 8003d54:	80da      	strh	r2, [r3, #6]
 8003d56:	e01a      	b.n	8003d8e <Load_EEPROM+0x726>
 8003d58:	4b11      	ldr	r3, [pc, #68]	; (8003da0 <Load_EEPROM+0x738>)
 8003d5a:	2228      	movs	r2, #40	; 0x28
 8003d5c:	80da      	strh	r2, [r3, #6]
 8003d5e:	e016      	b.n	8003d8e <Load_EEPROM+0x726>
 8003d60:	4b0f      	ldr	r3, [pc, #60]	; (8003da0 <Load_EEPROM+0x738>)
 8003d62:	2214      	movs	r2, #20
 8003d64:	80da      	strh	r2, [r3, #6]
 8003d66:	e012      	b.n	8003d8e <Load_EEPROM+0x726>
 8003d68:	4b0d      	ldr	r3, [pc, #52]	; (8003da0 <Load_EEPROM+0x738>)
 8003d6a:	220a      	movs	r2, #10
 8003d6c:	80da      	strh	r2, [r3, #6]
 8003d6e:	e00e      	b.n	8003d8e <Load_EEPROM+0x726>
 8003d70:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <Load_EEPROM+0x738>)
 8003d72:	2205      	movs	r2, #5
 8003d74:	80da      	strh	r2, [r3, #6]
 8003d76:	e00a      	b.n	8003d8e <Load_EEPROM+0x726>
 8003d78:	4b09      	ldr	r3, [pc, #36]	; (8003da0 <Load_EEPROM+0x738>)
 8003d7a:	2203      	movs	r2, #3
 8003d7c:	80da      	strh	r2, [r3, #6]
 8003d7e:	e006      	b.n	8003d8e <Load_EEPROM+0x726>
 8003d80:	4b07      	ldr	r3, [pc, #28]	; (8003da0 <Load_EEPROM+0x738>)
 8003d82:	2202      	movs	r2, #2
 8003d84:	80da      	strh	r2, [r3, #6]
 8003d86:	e002      	b.n	8003d8e <Load_EEPROM+0x726>
 8003d88:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <Load_EEPROM+0x738>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	80da      	strh	r2, [r3, #6]
 8003d8e:	bf00      	nop

	Input_Config = buffer[11];
 8003d90:	7dfa      	ldrb	r2, [r7, #23]
 8003d92:	4b04      	ldr	r3, [pc, #16]	; (8003da4 <Load_EEPROM+0x73c>)
 8003d94:	701a      	strb	r2, [r3, #0]

	return retVal;
 8003d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	200006fc 	.word	0x200006fc
 8003da4:	200006f8 	.word	0x200006f8

08003da8 <Save_EEPROM>:

static HAL_StatusTypeDef Save_EEPROM(I2C_HandleTypeDef* hi2c)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b088      	sub	sp, #32
 8003dac:	af02      	add	r7, sp, #8
 8003dae:	6078      	str	r0, [r7, #4]
	uint8_t buffer[EEPROM_BUFFER_SIZE];

	__SAVE_FREQ(buffer[0], Per_Msg[Analog_1_4]);
 8003db0:	4ba9      	ldr	r3, [pc, #676]	; (8004058 <Save_EEPROM+0x2b0>)
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003db8:	f000 8081 	beq.w	8003ebe <Save_EEPROM+0x116>
 8003dbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dc0:	f300 809e 	bgt.w	8003f00 <Save_EEPROM+0x158>
 8003dc4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003dc8:	d07c      	beq.n	8003ec4 <Save_EEPROM+0x11c>
 8003dca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003dce:	f300 8097 	bgt.w	8003f00 <Save_EEPROM+0x158>
 8003dd2:	2bc8      	cmp	r3, #200	; 0xc8
 8003dd4:	d079      	beq.n	8003eca <Save_EEPROM+0x122>
 8003dd6:	2bc8      	cmp	r3, #200	; 0xc8
 8003dd8:	f300 8092 	bgt.w	8003f00 <Save_EEPROM+0x158>
 8003ddc:	2b32      	cmp	r3, #50	; 0x32
 8003dde:	dc6b      	bgt.n	8003eb8 <Save_EEPROM+0x110>
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	f2c0 808d 	blt.w	8003f00 <Save_EEPROM+0x158>
 8003de6:	3b02      	subs	r3, #2
 8003de8:	2b30      	cmp	r3, #48	; 0x30
 8003dea:	f200 8089 	bhi.w	8003f00 <Save_EEPROM+0x158>
 8003dee:	a201      	add	r2, pc, #4	; (adr r2, 8003df4 <Save_EEPROM+0x4c>)
 8003df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df4:	08003efb 	.word	0x08003efb
 8003df8:	08003ef5 	.word	0x08003ef5
 8003dfc:	08003f01 	.word	0x08003f01
 8003e00:	08003eef 	.word	0x08003eef
 8003e04:	08003f01 	.word	0x08003f01
 8003e08:	08003f01 	.word	0x08003f01
 8003e0c:	08003f01 	.word	0x08003f01
 8003e10:	08003f01 	.word	0x08003f01
 8003e14:	08003ee9 	.word	0x08003ee9
 8003e18:	08003f01 	.word	0x08003f01
 8003e1c:	08003f01 	.word	0x08003f01
 8003e20:	08003f01 	.word	0x08003f01
 8003e24:	08003f01 	.word	0x08003f01
 8003e28:	08003f01 	.word	0x08003f01
 8003e2c:	08003f01 	.word	0x08003f01
 8003e30:	08003f01 	.word	0x08003f01
 8003e34:	08003f01 	.word	0x08003f01
 8003e38:	08003f01 	.word	0x08003f01
 8003e3c:	08003ee3 	.word	0x08003ee3
 8003e40:	08003f01 	.word	0x08003f01
 8003e44:	08003f01 	.word	0x08003f01
 8003e48:	08003f01 	.word	0x08003f01
 8003e4c:	08003f01 	.word	0x08003f01
 8003e50:	08003f01 	.word	0x08003f01
 8003e54:	08003f01 	.word	0x08003f01
 8003e58:	08003f01 	.word	0x08003f01
 8003e5c:	08003f01 	.word	0x08003f01
 8003e60:	08003f01 	.word	0x08003f01
 8003e64:	08003f01 	.word	0x08003f01
 8003e68:	08003f01 	.word	0x08003f01
 8003e6c:	08003f01 	.word	0x08003f01
 8003e70:	08003f01 	.word	0x08003f01
 8003e74:	08003f01 	.word	0x08003f01
 8003e78:	08003f01 	.word	0x08003f01
 8003e7c:	08003f01 	.word	0x08003f01
 8003e80:	08003f01 	.word	0x08003f01
 8003e84:	08003f01 	.word	0x08003f01
 8003e88:	08003f01 	.word	0x08003f01
 8003e8c:	08003edd 	.word	0x08003edd
 8003e90:	08003f01 	.word	0x08003f01
 8003e94:	08003f01 	.word	0x08003f01
 8003e98:	08003f01 	.word	0x08003f01
 8003e9c:	08003f01 	.word	0x08003f01
 8003ea0:	08003f01 	.word	0x08003f01
 8003ea4:	08003f01 	.word	0x08003f01
 8003ea8:	08003f01 	.word	0x08003f01
 8003eac:	08003f01 	.word	0x08003f01
 8003eb0:	08003f01 	.word	0x08003f01
 8003eb4:	08003ed7 	.word	0x08003ed7
 8003eb8:	2b64      	cmp	r3, #100	; 0x64
 8003eba:	d009      	beq.n	8003ed0 <Save_EEPROM+0x128>
 8003ebc:	e020      	b.n	8003f00 <Save_EEPROM+0x158>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	733b      	strb	r3, [r7, #12]
 8003ec2:	e01f      	b.n	8003f04 <Save_EEPROM+0x15c>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	733b      	strb	r3, [r7, #12]
 8003ec8:	e01c      	b.n	8003f04 <Save_EEPROM+0x15c>
 8003eca:	2303      	movs	r3, #3
 8003ecc:	733b      	strb	r3, [r7, #12]
 8003ece:	e019      	b.n	8003f04 <Save_EEPROM+0x15c>
 8003ed0:	2304      	movs	r3, #4
 8003ed2:	733b      	strb	r3, [r7, #12]
 8003ed4:	e016      	b.n	8003f04 <Save_EEPROM+0x15c>
 8003ed6:	2305      	movs	r3, #5
 8003ed8:	733b      	strb	r3, [r7, #12]
 8003eda:	e013      	b.n	8003f04 <Save_EEPROM+0x15c>
 8003edc:	2306      	movs	r3, #6
 8003ede:	733b      	strb	r3, [r7, #12]
 8003ee0:	e010      	b.n	8003f04 <Save_EEPROM+0x15c>
 8003ee2:	2307      	movs	r3, #7
 8003ee4:	733b      	strb	r3, [r7, #12]
 8003ee6:	e00d      	b.n	8003f04 <Save_EEPROM+0x15c>
 8003ee8:	2308      	movs	r3, #8
 8003eea:	733b      	strb	r3, [r7, #12]
 8003eec:	e00a      	b.n	8003f04 <Save_EEPROM+0x15c>
 8003eee:	2309      	movs	r3, #9
 8003ef0:	733b      	strb	r3, [r7, #12]
 8003ef2:	e007      	b.n	8003f04 <Save_EEPROM+0x15c>
 8003ef4:	230a      	movs	r3, #10
 8003ef6:	733b      	strb	r3, [r7, #12]
 8003ef8:	e004      	b.n	8003f04 <Save_EEPROM+0x15c>
 8003efa:	230b      	movs	r3, #11
 8003efc:	733b      	strb	r3, [r7, #12]
 8003efe:	e001      	b.n	8003f04 <Save_EEPROM+0x15c>
 8003f00:	2300      	movs	r3, #0
 8003f02:	733b      	strb	r3, [r7, #12]
 8003f04:	bf00      	nop
	__SAVE_FREQ(buffer[1], Per_Msg[Analog_5_8]);
 8003f06:	4b54      	ldr	r3, [pc, #336]	; (8004058 <Save_EEPROM+0x2b0>)
 8003f08:	885b      	ldrh	r3, [r3, #2]
 8003f0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f0e:	f000 8082 	beq.w	8004016 <Save_EEPROM+0x26e>
 8003f12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f16:	f300 80a1 	bgt.w	800405c <Save_EEPROM+0x2b4>
 8003f1a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003f1e:	d07d      	beq.n	800401c <Save_EEPROM+0x274>
 8003f20:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003f24:	f300 809a 	bgt.w	800405c <Save_EEPROM+0x2b4>
 8003f28:	2bc8      	cmp	r3, #200	; 0xc8
 8003f2a:	d07a      	beq.n	8004022 <Save_EEPROM+0x27a>
 8003f2c:	2bc8      	cmp	r3, #200	; 0xc8
 8003f2e:	f300 8095 	bgt.w	800405c <Save_EEPROM+0x2b4>
 8003f32:	2b32      	cmp	r3, #50	; 0x32
 8003f34:	dc6c      	bgt.n	8004010 <Save_EEPROM+0x268>
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	f2c0 8090 	blt.w	800405c <Save_EEPROM+0x2b4>
 8003f3c:	3b02      	subs	r3, #2
 8003f3e:	2b30      	cmp	r3, #48	; 0x30
 8003f40:	f200 808c 	bhi.w	800405c <Save_EEPROM+0x2b4>
 8003f44:	a201      	add	r2, pc, #4	; (adr r2, 8003f4c <Save_EEPROM+0x1a4>)
 8003f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4a:	bf00      	nop
 8003f4c:	08004053 	.word	0x08004053
 8003f50:	0800404d 	.word	0x0800404d
 8003f54:	0800405d 	.word	0x0800405d
 8003f58:	08004047 	.word	0x08004047
 8003f5c:	0800405d 	.word	0x0800405d
 8003f60:	0800405d 	.word	0x0800405d
 8003f64:	0800405d 	.word	0x0800405d
 8003f68:	0800405d 	.word	0x0800405d
 8003f6c:	08004041 	.word	0x08004041
 8003f70:	0800405d 	.word	0x0800405d
 8003f74:	0800405d 	.word	0x0800405d
 8003f78:	0800405d 	.word	0x0800405d
 8003f7c:	0800405d 	.word	0x0800405d
 8003f80:	0800405d 	.word	0x0800405d
 8003f84:	0800405d 	.word	0x0800405d
 8003f88:	0800405d 	.word	0x0800405d
 8003f8c:	0800405d 	.word	0x0800405d
 8003f90:	0800405d 	.word	0x0800405d
 8003f94:	0800403b 	.word	0x0800403b
 8003f98:	0800405d 	.word	0x0800405d
 8003f9c:	0800405d 	.word	0x0800405d
 8003fa0:	0800405d 	.word	0x0800405d
 8003fa4:	0800405d 	.word	0x0800405d
 8003fa8:	0800405d 	.word	0x0800405d
 8003fac:	0800405d 	.word	0x0800405d
 8003fb0:	0800405d 	.word	0x0800405d
 8003fb4:	0800405d 	.word	0x0800405d
 8003fb8:	0800405d 	.word	0x0800405d
 8003fbc:	0800405d 	.word	0x0800405d
 8003fc0:	0800405d 	.word	0x0800405d
 8003fc4:	0800405d 	.word	0x0800405d
 8003fc8:	0800405d 	.word	0x0800405d
 8003fcc:	0800405d 	.word	0x0800405d
 8003fd0:	0800405d 	.word	0x0800405d
 8003fd4:	0800405d 	.word	0x0800405d
 8003fd8:	0800405d 	.word	0x0800405d
 8003fdc:	0800405d 	.word	0x0800405d
 8003fe0:	0800405d 	.word	0x0800405d
 8003fe4:	08004035 	.word	0x08004035
 8003fe8:	0800405d 	.word	0x0800405d
 8003fec:	0800405d 	.word	0x0800405d
 8003ff0:	0800405d 	.word	0x0800405d
 8003ff4:	0800405d 	.word	0x0800405d
 8003ff8:	0800405d 	.word	0x0800405d
 8003ffc:	0800405d 	.word	0x0800405d
 8004000:	0800405d 	.word	0x0800405d
 8004004:	0800405d 	.word	0x0800405d
 8004008:	0800405d 	.word	0x0800405d
 800400c:	0800402f 	.word	0x0800402f
 8004010:	2b64      	cmp	r3, #100	; 0x64
 8004012:	d009      	beq.n	8004028 <Save_EEPROM+0x280>
 8004014:	e022      	b.n	800405c <Save_EEPROM+0x2b4>
 8004016:	2301      	movs	r3, #1
 8004018:	737b      	strb	r3, [r7, #13]
 800401a:	e021      	b.n	8004060 <Save_EEPROM+0x2b8>
 800401c:	2302      	movs	r3, #2
 800401e:	737b      	strb	r3, [r7, #13]
 8004020:	e01e      	b.n	8004060 <Save_EEPROM+0x2b8>
 8004022:	2303      	movs	r3, #3
 8004024:	737b      	strb	r3, [r7, #13]
 8004026:	e01b      	b.n	8004060 <Save_EEPROM+0x2b8>
 8004028:	2304      	movs	r3, #4
 800402a:	737b      	strb	r3, [r7, #13]
 800402c:	e018      	b.n	8004060 <Save_EEPROM+0x2b8>
 800402e:	2305      	movs	r3, #5
 8004030:	737b      	strb	r3, [r7, #13]
 8004032:	e015      	b.n	8004060 <Save_EEPROM+0x2b8>
 8004034:	2306      	movs	r3, #6
 8004036:	737b      	strb	r3, [r7, #13]
 8004038:	e012      	b.n	8004060 <Save_EEPROM+0x2b8>
 800403a:	2307      	movs	r3, #7
 800403c:	737b      	strb	r3, [r7, #13]
 800403e:	e00f      	b.n	8004060 <Save_EEPROM+0x2b8>
 8004040:	2308      	movs	r3, #8
 8004042:	737b      	strb	r3, [r7, #13]
 8004044:	e00c      	b.n	8004060 <Save_EEPROM+0x2b8>
 8004046:	2309      	movs	r3, #9
 8004048:	737b      	strb	r3, [r7, #13]
 800404a:	e009      	b.n	8004060 <Save_EEPROM+0x2b8>
 800404c:	230a      	movs	r3, #10
 800404e:	737b      	strb	r3, [r7, #13]
 8004050:	e006      	b.n	8004060 <Save_EEPROM+0x2b8>
 8004052:	230b      	movs	r3, #11
 8004054:	737b      	strb	r3, [r7, #13]
 8004056:	e003      	b.n	8004060 <Save_EEPROM+0x2b8>
 8004058:	20002e7c 	.word	0x20002e7c
 800405c:	2300      	movs	r3, #0
 800405e:	737b      	strb	r3, [r7, #13]
 8004060:	bf00      	nop
	__SAVE_FREQ(buffer[2], Per_Msg[Analog_9_12]);
 8004062:	4baa      	ldr	r3, [pc, #680]	; (800430c <Save_EEPROM+0x564>)
 8004064:	889b      	ldrh	r3, [r3, #4]
 8004066:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800406a:	f000 8082 	beq.w	8004172 <Save_EEPROM+0x3ca>
 800406e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004072:	f300 809f 	bgt.w	80041b4 <Save_EEPROM+0x40c>
 8004076:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800407a:	d07d      	beq.n	8004178 <Save_EEPROM+0x3d0>
 800407c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004080:	f300 8098 	bgt.w	80041b4 <Save_EEPROM+0x40c>
 8004084:	2bc8      	cmp	r3, #200	; 0xc8
 8004086:	d07a      	beq.n	800417e <Save_EEPROM+0x3d6>
 8004088:	2bc8      	cmp	r3, #200	; 0xc8
 800408a:	f300 8093 	bgt.w	80041b4 <Save_EEPROM+0x40c>
 800408e:	2b32      	cmp	r3, #50	; 0x32
 8004090:	dc6c      	bgt.n	800416c <Save_EEPROM+0x3c4>
 8004092:	2b02      	cmp	r3, #2
 8004094:	f2c0 808e 	blt.w	80041b4 <Save_EEPROM+0x40c>
 8004098:	3b02      	subs	r3, #2
 800409a:	2b30      	cmp	r3, #48	; 0x30
 800409c:	f200 808a 	bhi.w	80041b4 <Save_EEPROM+0x40c>
 80040a0:	a201      	add	r2, pc, #4	; (adr r2, 80040a8 <Save_EEPROM+0x300>)
 80040a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a6:	bf00      	nop
 80040a8:	080041af 	.word	0x080041af
 80040ac:	080041a9 	.word	0x080041a9
 80040b0:	080041b5 	.word	0x080041b5
 80040b4:	080041a3 	.word	0x080041a3
 80040b8:	080041b5 	.word	0x080041b5
 80040bc:	080041b5 	.word	0x080041b5
 80040c0:	080041b5 	.word	0x080041b5
 80040c4:	080041b5 	.word	0x080041b5
 80040c8:	0800419d 	.word	0x0800419d
 80040cc:	080041b5 	.word	0x080041b5
 80040d0:	080041b5 	.word	0x080041b5
 80040d4:	080041b5 	.word	0x080041b5
 80040d8:	080041b5 	.word	0x080041b5
 80040dc:	080041b5 	.word	0x080041b5
 80040e0:	080041b5 	.word	0x080041b5
 80040e4:	080041b5 	.word	0x080041b5
 80040e8:	080041b5 	.word	0x080041b5
 80040ec:	080041b5 	.word	0x080041b5
 80040f0:	08004197 	.word	0x08004197
 80040f4:	080041b5 	.word	0x080041b5
 80040f8:	080041b5 	.word	0x080041b5
 80040fc:	080041b5 	.word	0x080041b5
 8004100:	080041b5 	.word	0x080041b5
 8004104:	080041b5 	.word	0x080041b5
 8004108:	080041b5 	.word	0x080041b5
 800410c:	080041b5 	.word	0x080041b5
 8004110:	080041b5 	.word	0x080041b5
 8004114:	080041b5 	.word	0x080041b5
 8004118:	080041b5 	.word	0x080041b5
 800411c:	080041b5 	.word	0x080041b5
 8004120:	080041b5 	.word	0x080041b5
 8004124:	080041b5 	.word	0x080041b5
 8004128:	080041b5 	.word	0x080041b5
 800412c:	080041b5 	.word	0x080041b5
 8004130:	080041b5 	.word	0x080041b5
 8004134:	080041b5 	.word	0x080041b5
 8004138:	080041b5 	.word	0x080041b5
 800413c:	080041b5 	.word	0x080041b5
 8004140:	08004191 	.word	0x08004191
 8004144:	080041b5 	.word	0x080041b5
 8004148:	080041b5 	.word	0x080041b5
 800414c:	080041b5 	.word	0x080041b5
 8004150:	080041b5 	.word	0x080041b5
 8004154:	080041b5 	.word	0x080041b5
 8004158:	080041b5 	.word	0x080041b5
 800415c:	080041b5 	.word	0x080041b5
 8004160:	080041b5 	.word	0x080041b5
 8004164:	080041b5 	.word	0x080041b5
 8004168:	0800418b 	.word	0x0800418b
 800416c:	2b64      	cmp	r3, #100	; 0x64
 800416e:	d009      	beq.n	8004184 <Save_EEPROM+0x3dc>
 8004170:	e020      	b.n	80041b4 <Save_EEPROM+0x40c>
 8004172:	2301      	movs	r3, #1
 8004174:	73bb      	strb	r3, [r7, #14]
 8004176:	e01f      	b.n	80041b8 <Save_EEPROM+0x410>
 8004178:	2302      	movs	r3, #2
 800417a:	73bb      	strb	r3, [r7, #14]
 800417c:	e01c      	b.n	80041b8 <Save_EEPROM+0x410>
 800417e:	2303      	movs	r3, #3
 8004180:	73bb      	strb	r3, [r7, #14]
 8004182:	e019      	b.n	80041b8 <Save_EEPROM+0x410>
 8004184:	2304      	movs	r3, #4
 8004186:	73bb      	strb	r3, [r7, #14]
 8004188:	e016      	b.n	80041b8 <Save_EEPROM+0x410>
 800418a:	2305      	movs	r3, #5
 800418c:	73bb      	strb	r3, [r7, #14]
 800418e:	e013      	b.n	80041b8 <Save_EEPROM+0x410>
 8004190:	2306      	movs	r3, #6
 8004192:	73bb      	strb	r3, [r7, #14]
 8004194:	e010      	b.n	80041b8 <Save_EEPROM+0x410>
 8004196:	2307      	movs	r3, #7
 8004198:	73bb      	strb	r3, [r7, #14]
 800419a:	e00d      	b.n	80041b8 <Save_EEPROM+0x410>
 800419c:	2308      	movs	r3, #8
 800419e:	73bb      	strb	r3, [r7, #14]
 80041a0:	e00a      	b.n	80041b8 <Save_EEPROM+0x410>
 80041a2:	2309      	movs	r3, #9
 80041a4:	73bb      	strb	r3, [r7, #14]
 80041a6:	e007      	b.n	80041b8 <Save_EEPROM+0x410>
 80041a8:	230a      	movs	r3, #10
 80041aa:	73bb      	strb	r3, [r7, #14]
 80041ac:	e004      	b.n	80041b8 <Save_EEPROM+0x410>
 80041ae:	230b      	movs	r3, #11
 80041b0:	73bb      	strb	r3, [r7, #14]
 80041b2:	e001      	b.n	80041b8 <Save_EEPROM+0x410>
 80041b4:	2300      	movs	r3, #0
 80041b6:	73bb      	strb	r3, [r7, #14]
 80041b8:	bf00      	nop
	__SAVE_FREQ(buffer[3], Per_Msg[RTC_Msg]);
 80041ba:	4b54      	ldr	r3, [pc, #336]	; (800430c <Save_EEPROM+0x564>)
 80041bc:	88db      	ldrh	r3, [r3, #6]
 80041be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041c2:	f000 8082 	beq.w	80042ca <Save_EEPROM+0x522>
 80041c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041ca:	f300 80a1 	bgt.w	8004310 <Save_EEPROM+0x568>
 80041ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80041d2:	d07d      	beq.n	80042d0 <Save_EEPROM+0x528>
 80041d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80041d8:	f300 809a 	bgt.w	8004310 <Save_EEPROM+0x568>
 80041dc:	2bc8      	cmp	r3, #200	; 0xc8
 80041de:	d07a      	beq.n	80042d6 <Save_EEPROM+0x52e>
 80041e0:	2bc8      	cmp	r3, #200	; 0xc8
 80041e2:	f300 8095 	bgt.w	8004310 <Save_EEPROM+0x568>
 80041e6:	2b32      	cmp	r3, #50	; 0x32
 80041e8:	dc6c      	bgt.n	80042c4 <Save_EEPROM+0x51c>
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	f2c0 8090 	blt.w	8004310 <Save_EEPROM+0x568>
 80041f0:	3b02      	subs	r3, #2
 80041f2:	2b30      	cmp	r3, #48	; 0x30
 80041f4:	f200 808c 	bhi.w	8004310 <Save_EEPROM+0x568>
 80041f8:	a201      	add	r2, pc, #4	; (adr r2, 8004200 <Save_EEPROM+0x458>)
 80041fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fe:	bf00      	nop
 8004200:	08004307 	.word	0x08004307
 8004204:	08004301 	.word	0x08004301
 8004208:	08004311 	.word	0x08004311
 800420c:	080042fb 	.word	0x080042fb
 8004210:	08004311 	.word	0x08004311
 8004214:	08004311 	.word	0x08004311
 8004218:	08004311 	.word	0x08004311
 800421c:	08004311 	.word	0x08004311
 8004220:	080042f5 	.word	0x080042f5
 8004224:	08004311 	.word	0x08004311
 8004228:	08004311 	.word	0x08004311
 800422c:	08004311 	.word	0x08004311
 8004230:	08004311 	.word	0x08004311
 8004234:	08004311 	.word	0x08004311
 8004238:	08004311 	.word	0x08004311
 800423c:	08004311 	.word	0x08004311
 8004240:	08004311 	.word	0x08004311
 8004244:	08004311 	.word	0x08004311
 8004248:	080042ef 	.word	0x080042ef
 800424c:	08004311 	.word	0x08004311
 8004250:	08004311 	.word	0x08004311
 8004254:	08004311 	.word	0x08004311
 8004258:	08004311 	.word	0x08004311
 800425c:	08004311 	.word	0x08004311
 8004260:	08004311 	.word	0x08004311
 8004264:	08004311 	.word	0x08004311
 8004268:	08004311 	.word	0x08004311
 800426c:	08004311 	.word	0x08004311
 8004270:	08004311 	.word	0x08004311
 8004274:	08004311 	.word	0x08004311
 8004278:	08004311 	.word	0x08004311
 800427c:	08004311 	.word	0x08004311
 8004280:	08004311 	.word	0x08004311
 8004284:	08004311 	.word	0x08004311
 8004288:	08004311 	.word	0x08004311
 800428c:	08004311 	.word	0x08004311
 8004290:	08004311 	.word	0x08004311
 8004294:	08004311 	.word	0x08004311
 8004298:	080042e9 	.word	0x080042e9
 800429c:	08004311 	.word	0x08004311
 80042a0:	08004311 	.word	0x08004311
 80042a4:	08004311 	.word	0x08004311
 80042a8:	08004311 	.word	0x08004311
 80042ac:	08004311 	.word	0x08004311
 80042b0:	08004311 	.word	0x08004311
 80042b4:	08004311 	.word	0x08004311
 80042b8:	08004311 	.word	0x08004311
 80042bc:	08004311 	.word	0x08004311
 80042c0:	080042e3 	.word	0x080042e3
 80042c4:	2b64      	cmp	r3, #100	; 0x64
 80042c6:	d009      	beq.n	80042dc <Save_EEPROM+0x534>
 80042c8:	e022      	b.n	8004310 <Save_EEPROM+0x568>
 80042ca:	2301      	movs	r3, #1
 80042cc:	73fb      	strb	r3, [r7, #15]
 80042ce:	e021      	b.n	8004314 <Save_EEPROM+0x56c>
 80042d0:	2302      	movs	r3, #2
 80042d2:	73fb      	strb	r3, [r7, #15]
 80042d4:	e01e      	b.n	8004314 <Save_EEPROM+0x56c>
 80042d6:	2303      	movs	r3, #3
 80042d8:	73fb      	strb	r3, [r7, #15]
 80042da:	e01b      	b.n	8004314 <Save_EEPROM+0x56c>
 80042dc:	2304      	movs	r3, #4
 80042de:	73fb      	strb	r3, [r7, #15]
 80042e0:	e018      	b.n	8004314 <Save_EEPROM+0x56c>
 80042e2:	2305      	movs	r3, #5
 80042e4:	73fb      	strb	r3, [r7, #15]
 80042e6:	e015      	b.n	8004314 <Save_EEPROM+0x56c>
 80042e8:	2306      	movs	r3, #6
 80042ea:	73fb      	strb	r3, [r7, #15]
 80042ec:	e012      	b.n	8004314 <Save_EEPROM+0x56c>
 80042ee:	2307      	movs	r3, #7
 80042f0:	73fb      	strb	r3, [r7, #15]
 80042f2:	e00f      	b.n	8004314 <Save_EEPROM+0x56c>
 80042f4:	2308      	movs	r3, #8
 80042f6:	73fb      	strb	r3, [r7, #15]
 80042f8:	e00c      	b.n	8004314 <Save_EEPROM+0x56c>
 80042fa:	2309      	movs	r3, #9
 80042fc:	73fb      	strb	r3, [r7, #15]
 80042fe:	e009      	b.n	8004314 <Save_EEPROM+0x56c>
 8004300:	230a      	movs	r3, #10
 8004302:	73fb      	strb	r3, [r7, #15]
 8004304:	e006      	b.n	8004314 <Save_EEPROM+0x56c>
 8004306:	230b      	movs	r3, #11
 8004308:	73fb      	strb	r3, [r7, #15]
 800430a:	e003      	b.n	8004314 <Save_EEPROM+0x56c>
 800430c:	20002e7c 	.word	0x20002e7c
 8004310:	2300      	movs	r3, #0
 8004312:	73fb      	strb	r3, [r7, #15]
 8004314:	bf00      	nop
	__SAVE_FREQ(buffer[4], Per_Msg[Verify_Msg]);
 8004316:	4baa      	ldr	r3, [pc, #680]	; (80045c0 <Save_EEPROM+0x818>)
 8004318:	891b      	ldrh	r3, [r3, #8]
 800431a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800431e:	f000 8082 	beq.w	8004426 <Save_EEPROM+0x67e>
 8004322:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004326:	f300 809f 	bgt.w	8004468 <Save_EEPROM+0x6c0>
 800432a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800432e:	d07d      	beq.n	800442c <Save_EEPROM+0x684>
 8004330:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004334:	f300 8098 	bgt.w	8004468 <Save_EEPROM+0x6c0>
 8004338:	2bc8      	cmp	r3, #200	; 0xc8
 800433a:	d07a      	beq.n	8004432 <Save_EEPROM+0x68a>
 800433c:	2bc8      	cmp	r3, #200	; 0xc8
 800433e:	f300 8093 	bgt.w	8004468 <Save_EEPROM+0x6c0>
 8004342:	2b32      	cmp	r3, #50	; 0x32
 8004344:	dc6c      	bgt.n	8004420 <Save_EEPROM+0x678>
 8004346:	2b02      	cmp	r3, #2
 8004348:	f2c0 808e 	blt.w	8004468 <Save_EEPROM+0x6c0>
 800434c:	3b02      	subs	r3, #2
 800434e:	2b30      	cmp	r3, #48	; 0x30
 8004350:	f200 808a 	bhi.w	8004468 <Save_EEPROM+0x6c0>
 8004354:	a201      	add	r2, pc, #4	; (adr r2, 800435c <Save_EEPROM+0x5b4>)
 8004356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435a:	bf00      	nop
 800435c:	08004463 	.word	0x08004463
 8004360:	0800445d 	.word	0x0800445d
 8004364:	08004469 	.word	0x08004469
 8004368:	08004457 	.word	0x08004457
 800436c:	08004469 	.word	0x08004469
 8004370:	08004469 	.word	0x08004469
 8004374:	08004469 	.word	0x08004469
 8004378:	08004469 	.word	0x08004469
 800437c:	08004451 	.word	0x08004451
 8004380:	08004469 	.word	0x08004469
 8004384:	08004469 	.word	0x08004469
 8004388:	08004469 	.word	0x08004469
 800438c:	08004469 	.word	0x08004469
 8004390:	08004469 	.word	0x08004469
 8004394:	08004469 	.word	0x08004469
 8004398:	08004469 	.word	0x08004469
 800439c:	08004469 	.word	0x08004469
 80043a0:	08004469 	.word	0x08004469
 80043a4:	0800444b 	.word	0x0800444b
 80043a8:	08004469 	.word	0x08004469
 80043ac:	08004469 	.word	0x08004469
 80043b0:	08004469 	.word	0x08004469
 80043b4:	08004469 	.word	0x08004469
 80043b8:	08004469 	.word	0x08004469
 80043bc:	08004469 	.word	0x08004469
 80043c0:	08004469 	.word	0x08004469
 80043c4:	08004469 	.word	0x08004469
 80043c8:	08004469 	.word	0x08004469
 80043cc:	08004469 	.word	0x08004469
 80043d0:	08004469 	.word	0x08004469
 80043d4:	08004469 	.word	0x08004469
 80043d8:	08004469 	.word	0x08004469
 80043dc:	08004469 	.word	0x08004469
 80043e0:	08004469 	.word	0x08004469
 80043e4:	08004469 	.word	0x08004469
 80043e8:	08004469 	.word	0x08004469
 80043ec:	08004469 	.word	0x08004469
 80043f0:	08004469 	.word	0x08004469
 80043f4:	08004445 	.word	0x08004445
 80043f8:	08004469 	.word	0x08004469
 80043fc:	08004469 	.word	0x08004469
 8004400:	08004469 	.word	0x08004469
 8004404:	08004469 	.word	0x08004469
 8004408:	08004469 	.word	0x08004469
 800440c:	08004469 	.word	0x08004469
 8004410:	08004469 	.word	0x08004469
 8004414:	08004469 	.word	0x08004469
 8004418:	08004469 	.word	0x08004469
 800441c:	0800443f 	.word	0x0800443f
 8004420:	2b64      	cmp	r3, #100	; 0x64
 8004422:	d009      	beq.n	8004438 <Save_EEPROM+0x690>
 8004424:	e020      	b.n	8004468 <Save_EEPROM+0x6c0>
 8004426:	2301      	movs	r3, #1
 8004428:	743b      	strb	r3, [r7, #16]
 800442a:	e01f      	b.n	800446c <Save_EEPROM+0x6c4>
 800442c:	2302      	movs	r3, #2
 800442e:	743b      	strb	r3, [r7, #16]
 8004430:	e01c      	b.n	800446c <Save_EEPROM+0x6c4>
 8004432:	2303      	movs	r3, #3
 8004434:	743b      	strb	r3, [r7, #16]
 8004436:	e019      	b.n	800446c <Save_EEPROM+0x6c4>
 8004438:	2304      	movs	r3, #4
 800443a:	743b      	strb	r3, [r7, #16]
 800443c:	e016      	b.n	800446c <Save_EEPROM+0x6c4>
 800443e:	2305      	movs	r3, #5
 8004440:	743b      	strb	r3, [r7, #16]
 8004442:	e013      	b.n	800446c <Save_EEPROM+0x6c4>
 8004444:	2306      	movs	r3, #6
 8004446:	743b      	strb	r3, [r7, #16]
 8004448:	e010      	b.n	800446c <Save_EEPROM+0x6c4>
 800444a:	2307      	movs	r3, #7
 800444c:	743b      	strb	r3, [r7, #16]
 800444e:	e00d      	b.n	800446c <Save_EEPROM+0x6c4>
 8004450:	2308      	movs	r3, #8
 8004452:	743b      	strb	r3, [r7, #16]
 8004454:	e00a      	b.n	800446c <Save_EEPROM+0x6c4>
 8004456:	2309      	movs	r3, #9
 8004458:	743b      	strb	r3, [r7, #16]
 800445a:	e007      	b.n	800446c <Save_EEPROM+0x6c4>
 800445c:	230a      	movs	r3, #10
 800445e:	743b      	strb	r3, [r7, #16]
 8004460:	e004      	b.n	800446c <Save_EEPROM+0x6c4>
 8004462:	230b      	movs	r3, #11
 8004464:	743b      	strb	r3, [r7, #16]
 8004466:	e001      	b.n	800446c <Save_EEPROM+0x6c4>
 8004468:	2300      	movs	r3, #0
 800446a:	743b      	strb	r3, [r7, #16]
 800446c:	bf00      	nop
	__SAVE_FREQ(buffer[5], Per_Msg[ECU_Save]);
 800446e:	4b54      	ldr	r3, [pc, #336]	; (80045c0 <Save_EEPROM+0x818>)
 8004470:	895b      	ldrh	r3, [r3, #10]
 8004472:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004476:	f000 8082 	beq.w	800457e <Save_EEPROM+0x7d6>
 800447a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800447e:	f300 80a1 	bgt.w	80045c4 <Save_EEPROM+0x81c>
 8004482:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004486:	d07d      	beq.n	8004584 <Save_EEPROM+0x7dc>
 8004488:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800448c:	f300 809a 	bgt.w	80045c4 <Save_EEPROM+0x81c>
 8004490:	2bc8      	cmp	r3, #200	; 0xc8
 8004492:	d07a      	beq.n	800458a <Save_EEPROM+0x7e2>
 8004494:	2bc8      	cmp	r3, #200	; 0xc8
 8004496:	f300 8095 	bgt.w	80045c4 <Save_EEPROM+0x81c>
 800449a:	2b32      	cmp	r3, #50	; 0x32
 800449c:	dc6c      	bgt.n	8004578 <Save_EEPROM+0x7d0>
 800449e:	2b02      	cmp	r3, #2
 80044a0:	f2c0 8090 	blt.w	80045c4 <Save_EEPROM+0x81c>
 80044a4:	3b02      	subs	r3, #2
 80044a6:	2b30      	cmp	r3, #48	; 0x30
 80044a8:	f200 808c 	bhi.w	80045c4 <Save_EEPROM+0x81c>
 80044ac:	a201      	add	r2, pc, #4	; (adr r2, 80044b4 <Save_EEPROM+0x70c>)
 80044ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b2:	bf00      	nop
 80044b4:	080045bb 	.word	0x080045bb
 80044b8:	080045b5 	.word	0x080045b5
 80044bc:	080045c5 	.word	0x080045c5
 80044c0:	080045af 	.word	0x080045af
 80044c4:	080045c5 	.word	0x080045c5
 80044c8:	080045c5 	.word	0x080045c5
 80044cc:	080045c5 	.word	0x080045c5
 80044d0:	080045c5 	.word	0x080045c5
 80044d4:	080045a9 	.word	0x080045a9
 80044d8:	080045c5 	.word	0x080045c5
 80044dc:	080045c5 	.word	0x080045c5
 80044e0:	080045c5 	.word	0x080045c5
 80044e4:	080045c5 	.word	0x080045c5
 80044e8:	080045c5 	.word	0x080045c5
 80044ec:	080045c5 	.word	0x080045c5
 80044f0:	080045c5 	.word	0x080045c5
 80044f4:	080045c5 	.word	0x080045c5
 80044f8:	080045c5 	.word	0x080045c5
 80044fc:	080045a3 	.word	0x080045a3
 8004500:	080045c5 	.word	0x080045c5
 8004504:	080045c5 	.word	0x080045c5
 8004508:	080045c5 	.word	0x080045c5
 800450c:	080045c5 	.word	0x080045c5
 8004510:	080045c5 	.word	0x080045c5
 8004514:	080045c5 	.word	0x080045c5
 8004518:	080045c5 	.word	0x080045c5
 800451c:	080045c5 	.word	0x080045c5
 8004520:	080045c5 	.word	0x080045c5
 8004524:	080045c5 	.word	0x080045c5
 8004528:	080045c5 	.word	0x080045c5
 800452c:	080045c5 	.word	0x080045c5
 8004530:	080045c5 	.word	0x080045c5
 8004534:	080045c5 	.word	0x080045c5
 8004538:	080045c5 	.word	0x080045c5
 800453c:	080045c5 	.word	0x080045c5
 8004540:	080045c5 	.word	0x080045c5
 8004544:	080045c5 	.word	0x080045c5
 8004548:	080045c5 	.word	0x080045c5
 800454c:	0800459d 	.word	0x0800459d
 8004550:	080045c5 	.word	0x080045c5
 8004554:	080045c5 	.word	0x080045c5
 8004558:	080045c5 	.word	0x080045c5
 800455c:	080045c5 	.word	0x080045c5
 8004560:	080045c5 	.word	0x080045c5
 8004564:	080045c5 	.word	0x080045c5
 8004568:	080045c5 	.word	0x080045c5
 800456c:	080045c5 	.word	0x080045c5
 8004570:	080045c5 	.word	0x080045c5
 8004574:	08004597 	.word	0x08004597
 8004578:	2b64      	cmp	r3, #100	; 0x64
 800457a:	d009      	beq.n	8004590 <Save_EEPROM+0x7e8>
 800457c:	e022      	b.n	80045c4 <Save_EEPROM+0x81c>
 800457e:	2301      	movs	r3, #1
 8004580:	747b      	strb	r3, [r7, #17]
 8004582:	e021      	b.n	80045c8 <Save_EEPROM+0x820>
 8004584:	2302      	movs	r3, #2
 8004586:	747b      	strb	r3, [r7, #17]
 8004588:	e01e      	b.n	80045c8 <Save_EEPROM+0x820>
 800458a:	2303      	movs	r3, #3
 800458c:	747b      	strb	r3, [r7, #17]
 800458e:	e01b      	b.n	80045c8 <Save_EEPROM+0x820>
 8004590:	2304      	movs	r3, #4
 8004592:	747b      	strb	r3, [r7, #17]
 8004594:	e018      	b.n	80045c8 <Save_EEPROM+0x820>
 8004596:	2305      	movs	r3, #5
 8004598:	747b      	strb	r3, [r7, #17]
 800459a:	e015      	b.n	80045c8 <Save_EEPROM+0x820>
 800459c:	2306      	movs	r3, #6
 800459e:	747b      	strb	r3, [r7, #17]
 80045a0:	e012      	b.n	80045c8 <Save_EEPROM+0x820>
 80045a2:	2307      	movs	r3, #7
 80045a4:	747b      	strb	r3, [r7, #17]
 80045a6:	e00f      	b.n	80045c8 <Save_EEPROM+0x820>
 80045a8:	2308      	movs	r3, #8
 80045aa:	747b      	strb	r3, [r7, #17]
 80045ac:	e00c      	b.n	80045c8 <Save_EEPROM+0x820>
 80045ae:	2309      	movs	r3, #9
 80045b0:	747b      	strb	r3, [r7, #17]
 80045b2:	e009      	b.n	80045c8 <Save_EEPROM+0x820>
 80045b4:	230a      	movs	r3, #10
 80045b6:	747b      	strb	r3, [r7, #17]
 80045b8:	e006      	b.n	80045c8 <Save_EEPROM+0x820>
 80045ba:	230b      	movs	r3, #11
 80045bc:	747b      	strb	r3, [r7, #17]
 80045be:	e003      	b.n	80045c8 <Save_EEPROM+0x820>
 80045c0:	20002e7c 	.word	0x20002e7c
 80045c4:	2300      	movs	r3, #0
 80045c6:	747b      	strb	r3, [r7, #17]
 80045c8:	bf00      	nop
	__SAVE_FREQ(buffer[6], Per_Msg[PDM_Save]);
 80045ca:	4baa      	ldr	r3, [pc, #680]	; (8004874 <Save_EEPROM+0xacc>)
 80045cc:	899b      	ldrh	r3, [r3, #12]
 80045ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045d2:	f000 8082 	beq.w	80046da <Save_EEPROM+0x932>
 80045d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045da:	f300 809f 	bgt.w	800471c <Save_EEPROM+0x974>
 80045de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80045e2:	d07d      	beq.n	80046e0 <Save_EEPROM+0x938>
 80045e4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80045e8:	f300 8098 	bgt.w	800471c <Save_EEPROM+0x974>
 80045ec:	2bc8      	cmp	r3, #200	; 0xc8
 80045ee:	d07a      	beq.n	80046e6 <Save_EEPROM+0x93e>
 80045f0:	2bc8      	cmp	r3, #200	; 0xc8
 80045f2:	f300 8093 	bgt.w	800471c <Save_EEPROM+0x974>
 80045f6:	2b32      	cmp	r3, #50	; 0x32
 80045f8:	dc6c      	bgt.n	80046d4 <Save_EEPROM+0x92c>
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	f2c0 808e 	blt.w	800471c <Save_EEPROM+0x974>
 8004600:	3b02      	subs	r3, #2
 8004602:	2b30      	cmp	r3, #48	; 0x30
 8004604:	f200 808a 	bhi.w	800471c <Save_EEPROM+0x974>
 8004608:	a201      	add	r2, pc, #4	; (adr r2, 8004610 <Save_EEPROM+0x868>)
 800460a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460e:	bf00      	nop
 8004610:	08004717 	.word	0x08004717
 8004614:	08004711 	.word	0x08004711
 8004618:	0800471d 	.word	0x0800471d
 800461c:	0800470b 	.word	0x0800470b
 8004620:	0800471d 	.word	0x0800471d
 8004624:	0800471d 	.word	0x0800471d
 8004628:	0800471d 	.word	0x0800471d
 800462c:	0800471d 	.word	0x0800471d
 8004630:	08004705 	.word	0x08004705
 8004634:	0800471d 	.word	0x0800471d
 8004638:	0800471d 	.word	0x0800471d
 800463c:	0800471d 	.word	0x0800471d
 8004640:	0800471d 	.word	0x0800471d
 8004644:	0800471d 	.word	0x0800471d
 8004648:	0800471d 	.word	0x0800471d
 800464c:	0800471d 	.word	0x0800471d
 8004650:	0800471d 	.word	0x0800471d
 8004654:	0800471d 	.word	0x0800471d
 8004658:	080046ff 	.word	0x080046ff
 800465c:	0800471d 	.word	0x0800471d
 8004660:	0800471d 	.word	0x0800471d
 8004664:	0800471d 	.word	0x0800471d
 8004668:	0800471d 	.word	0x0800471d
 800466c:	0800471d 	.word	0x0800471d
 8004670:	0800471d 	.word	0x0800471d
 8004674:	0800471d 	.word	0x0800471d
 8004678:	0800471d 	.word	0x0800471d
 800467c:	0800471d 	.word	0x0800471d
 8004680:	0800471d 	.word	0x0800471d
 8004684:	0800471d 	.word	0x0800471d
 8004688:	0800471d 	.word	0x0800471d
 800468c:	0800471d 	.word	0x0800471d
 8004690:	0800471d 	.word	0x0800471d
 8004694:	0800471d 	.word	0x0800471d
 8004698:	0800471d 	.word	0x0800471d
 800469c:	0800471d 	.word	0x0800471d
 80046a0:	0800471d 	.word	0x0800471d
 80046a4:	0800471d 	.word	0x0800471d
 80046a8:	080046f9 	.word	0x080046f9
 80046ac:	0800471d 	.word	0x0800471d
 80046b0:	0800471d 	.word	0x0800471d
 80046b4:	0800471d 	.word	0x0800471d
 80046b8:	0800471d 	.word	0x0800471d
 80046bc:	0800471d 	.word	0x0800471d
 80046c0:	0800471d 	.word	0x0800471d
 80046c4:	0800471d 	.word	0x0800471d
 80046c8:	0800471d 	.word	0x0800471d
 80046cc:	0800471d 	.word	0x0800471d
 80046d0:	080046f3 	.word	0x080046f3
 80046d4:	2b64      	cmp	r3, #100	; 0x64
 80046d6:	d009      	beq.n	80046ec <Save_EEPROM+0x944>
 80046d8:	e020      	b.n	800471c <Save_EEPROM+0x974>
 80046da:	2301      	movs	r3, #1
 80046dc:	74bb      	strb	r3, [r7, #18]
 80046de:	e01f      	b.n	8004720 <Save_EEPROM+0x978>
 80046e0:	2302      	movs	r3, #2
 80046e2:	74bb      	strb	r3, [r7, #18]
 80046e4:	e01c      	b.n	8004720 <Save_EEPROM+0x978>
 80046e6:	2303      	movs	r3, #3
 80046e8:	74bb      	strb	r3, [r7, #18]
 80046ea:	e019      	b.n	8004720 <Save_EEPROM+0x978>
 80046ec:	2304      	movs	r3, #4
 80046ee:	74bb      	strb	r3, [r7, #18]
 80046f0:	e016      	b.n	8004720 <Save_EEPROM+0x978>
 80046f2:	2305      	movs	r3, #5
 80046f4:	74bb      	strb	r3, [r7, #18]
 80046f6:	e013      	b.n	8004720 <Save_EEPROM+0x978>
 80046f8:	2306      	movs	r3, #6
 80046fa:	74bb      	strb	r3, [r7, #18]
 80046fc:	e010      	b.n	8004720 <Save_EEPROM+0x978>
 80046fe:	2307      	movs	r3, #7
 8004700:	74bb      	strb	r3, [r7, #18]
 8004702:	e00d      	b.n	8004720 <Save_EEPROM+0x978>
 8004704:	2308      	movs	r3, #8
 8004706:	74bb      	strb	r3, [r7, #18]
 8004708:	e00a      	b.n	8004720 <Save_EEPROM+0x978>
 800470a:	2309      	movs	r3, #9
 800470c:	74bb      	strb	r3, [r7, #18]
 800470e:	e007      	b.n	8004720 <Save_EEPROM+0x978>
 8004710:	230a      	movs	r3, #10
 8004712:	74bb      	strb	r3, [r7, #18]
 8004714:	e004      	b.n	8004720 <Save_EEPROM+0x978>
 8004716:	230b      	movs	r3, #11
 8004718:	74bb      	strb	r3, [r7, #18]
 800471a:	e001      	b.n	8004720 <Save_EEPROM+0x978>
 800471c:	2300      	movs	r3, #0
 800471e:	74bb      	strb	r3, [r7, #18]
 8004720:	bf00      	nop

	__SAVE_FREQ(buffer[7], Per_CAN[Analog_1_4]);
 8004722:	4b55      	ldr	r3, [pc, #340]	; (8004878 <Save_EEPROM+0xad0>)
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800472a:	f000 8082 	beq.w	8004832 <Save_EEPROM+0xa8a>
 800472e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004732:	f300 80a3 	bgt.w	800487c <Save_EEPROM+0xad4>
 8004736:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800473a:	d07d      	beq.n	8004838 <Save_EEPROM+0xa90>
 800473c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004740:	f300 809c 	bgt.w	800487c <Save_EEPROM+0xad4>
 8004744:	2bc8      	cmp	r3, #200	; 0xc8
 8004746:	d07a      	beq.n	800483e <Save_EEPROM+0xa96>
 8004748:	2bc8      	cmp	r3, #200	; 0xc8
 800474a:	f300 8097 	bgt.w	800487c <Save_EEPROM+0xad4>
 800474e:	2b32      	cmp	r3, #50	; 0x32
 8004750:	dc6c      	bgt.n	800482c <Save_EEPROM+0xa84>
 8004752:	2b02      	cmp	r3, #2
 8004754:	f2c0 8092 	blt.w	800487c <Save_EEPROM+0xad4>
 8004758:	3b02      	subs	r3, #2
 800475a:	2b30      	cmp	r3, #48	; 0x30
 800475c:	f200 808e 	bhi.w	800487c <Save_EEPROM+0xad4>
 8004760:	a201      	add	r2, pc, #4	; (adr r2, 8004768 <Save_EEPROM+0x9c0>)
 8004762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004766:	bf00      	nop
 8004768:	0800486f 	.word	0x0800486f
 800476c:	08004869 	.word	0x08004869
 8004770:	0800487d 	.word	0x0800487d
 8004774:	08004863 	.word	0x08004863
 8004778:	0800487d 	.word	0x0800487d
 800477c:	0800487d 	.word	0x0800487d
 8004780:	0800487d 	.word	0x0800487d
 8004784:	0800487d 	.word	0x0800487d
 8004788:	0800485d 	.word	0x0800485d
 800478c:	0800487d 	.word	0x0800487d
 8004790:	0800487d 	.word	0x0800487d
 8004794:	0800487d 	.word	0x0800487d
 8004798:	0800487d 	.word	0x0800487d
 800479c:	0800487d 	.word	0x0800487d
 80047a0:	0800487d 	.word	0x0800487d
 80047a4:	0800487d 	.word	0x0800487d
 80047a8:	0800487d 	.word	0x0800487d
 80047ac:	0800487d 	.word	0x0800487d
 80047b0:	08004857 	.word	0x08004857
 80047b4:	0800487d 	.word	0x0800487d
 80047b8:	0800487d 	.word	0x0800487d
 80047bc:	0800487d 	.word	0x0800487d
 80047c0:	0800487d 	.word	0x0800487d
 80047c4:	0800487d 	.word	0x0800487d
 80047c8:	0800487d 	.word	0x0800487d
 80047cc:	0800487d 	.word	0x0800487d
 80047d0:	0800487d 	.word	0x0800487d
 80047d4:	0800487d 	.word	0x0800487d
 80047d8:	0800487d 	.word	0x0800487d
 80047dc:	0800487d 	.word	0x0800487d
 80047e0:	0800487d 	.word	0x0800487d
 80047e4:	0800487d 	.word	0x0800487d
 80047e8:	0800487d 	.word	0x0800487d
 80047ec:	0800487d 	.word	0x0800487d
 80047f0:	0800487d 	.word	0x0800487d
 80047f4:	0800487d 	.word	0x0800487d
 80047f8:	0800487d 	.word	0x0800487d
 80047fc:	0800487d 	.word	0x0800487d
 8004800:	08004851 	.word	0x08004851
 8004804:	0800487d 	.word	0x0800487d
 8004808:	0800487d 	.word	0x0800487d
 800480c:	0800487d 	.word	0x0800487d
 8004810:	0800487d 	.word	0x0800487d
 8004814:	0800487d 	.word	0x0800487d
 8004818:	0800487d 	.word	0x0800487d
 800481c:	0800487d 	.word	0x0800487d
 8004820:	0800487d 	.word	0x0800487d
 8004824:	0800487d 	.word	0x0800487d
 8004828:	0800484b 	.word	0x0800484b
 800482c:	2b64      	cmp	r3, #100	; 0x64
 800482e:	d009      	beq.n	8004844 <Save_EEPROM+0xa9c>
 8004830:	e024      	b.n	800487c <Save_EEPROM+0xad4>
 8004832:	2301      	movs	r3, #1
 8004834:	74fb      	strb	r3, [r7, #19]
 8004836:	e023      	b.n	8004880 <Save_EEPROM+0xad8>
 8004838:	2302      	movs	r3, #2
 800483a:	74fb      	strb	r3, [r7, #19]
 800483c:	e020      	b.n	8004880 <Save_EEPROM+0xad8>
 800483e:	2303      	movs	r3, #3
 8004840:	74fb      	strb	r3, [r7, #19]
 8004842:	e01d      	b.n	8004880 <Save_EEPROM+0xad8>
 8004844:	2304      	movs	r3, #4
 8004846:	74fb      	strb	r3, [r7, #19]
 8004848:	e01a      	b.n	8004880 <Save_EEPROM+0xad8>
 800484a:	2305      	movs	r3, #5
 800484c:	74fb      	strb	r3, [r7, #19]
 800484e:	e017      	b.n	8004880 <Save_EEPROM+0xad8>
 8004850:	2306      	movs	r3, #6
 8004852:	74fb      	strb	r3, [r7, #19]
 8004854:	e014      	b.n	8004880 <Save_EEPROM+0xad8>
 8004856:	2307      	movs	r3, #7
 8004858:	74fb      	strb	r3, [r7, #19]
 800485a:	e011      	b.n	8004880 <Save_EEPROM+0xad8>
 800485c:	2308      	movs	r3, #8
 800485e:	74fb      	strb	r3, [r7, #19]
 8004860:	e00e      	b.n	8004880 <Save_EEPROM+0xad8>
 8004862:	2309      	movs	r3, #9
 8004864:	74fb      	strb	r3, [r7, #19]
 8004866:	e00b      	b.n	8004880 <Save_EEPROM+0xad8>
 8004868:	230a      	movs	r3, #10
 800486a:	74fb      	strb	r3, [r7, #19]
 800486c:	e008      	b.n	8004880 <Save_EEPROM+0xad8>
 800486e:	230b      	movs	r3, #11
 8004870:	74fb      	strb	r3, [r7, #19]
 8004872:	e005      	b.n	8004880 <Save_EEPROM+0xad8>
 8004874:	20002e7c 	.word	0x20002e7c
 8004878:	200006fc 	.word	0x200006fc
 800487c:	2300      	movs	r3, #0
 800487e:	74fb      	strb	r3, [r7, #19]
 8004880:	bf00      	nop
	__SAVE_FREQ(buffer[8], Per_CAN[Analog_5_8]);
 8004882:	4baa      	ldr	r3, [pc, #680]	; (8004b2c <Save_EEPROM+0xd84>)
 8004884:	885b      	ldrh	r3, [r3, #2]
 8004886:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800488a:	f000 8082 	beq.w	8004992 <Save_EEPROM+0xbea>
 800488e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004892:	f300 809f 	bgt.w	80049d4 <Save_EEPROM+0xc2c>
 8004896:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800489a:	d07d      	beq.n	8004998 <Save_EEPROM+0xbf0>
 800489c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80048a0:	f300 8098 	bgt.w	80049d4 <Save_EEPROM+0xc2c>
 80048a4:	2bc8      	cmp	r3, #200	; 0xc8
 80048a6:	d07a      	beq.n	800499e <Save_EEPROM+0xbf6>
 80048a8:	2bc8      	cmp	r3, #200	; 0xc8
 80048aa:	f300 8093 	bgt.w	80049d4 <Save_EEPROM+0xc2c>
 80048ae:	2b32      	cmp	r3, #50	; 0x32
 80048b0:	dc6c      	bgt.n	800498c <Save_EEPROM+0xbe4>
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	f2c0 808e 	blt.w	80049d4 <Save_EEPROM+0xc2c>
 80048b8:	3b02      	subs	r3, #2
 80048ba:	2b30      	cmp	r3, #48	; 0x30
 80048bc:	f200 808a 	bhi.w	80049d4 <Save_EEPROM+0xc2c>
 80048c0:	a201      	add	r2, pc, #4	; (adr r2, 80048c8 <Save_EEPROM+0xb20>)
 80048c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c6:	bf00      	nop
 80048c8:	080049cf 	.word	0x080049cf
 80048cc:	080049c9 	.word	0x080049c9
 80048d0:	080049d5 	.word	0x080049d5
 80048d4:	080049c3 	.word	0x080049c3
 80048d8:	080049d5 	.word	0x080049d5
 80048dc:	080049d5 	.word	0x080049d5
 80048e0:	080049d5 	.word	0x080049d5
 80048e4:	080049d5 	.word	0x080049d5
 80048e8:	080049bd 	.word	0x080049bd
 80048ec:	080049d5 	.word	0x080049d5
 80048f0:	080049d5 	.word	0x080049d5
 80048f4:	080049d5 	.word	0x080049d5
 80048f8:	080049d5 	.word	0x080049d5
 80048fc:	080049d5 	.word	0x080049d5
 8004900:	080049d5 	.word	0x080049d5
 8004904:	080049d5 	.word	0x080049d5
 8004908:	080049d5 	.word	0x080049d5
 800490c:	080049d5 	.word	0x080049d5
 8004910:	080049b7 	.word	0x080049b7
 8004914:	080049d5 	.word	0x080049d5
 8004918:	080049d5 	.word	0x080049d5
 800491c:	080049d5 	.word	0x080049d5
 8004920:	080049d5 	.word	0x080049d5
 8004924:	080049d5 	.word	0x080049d5
 8004928:	080049d5 	.word	0x080049d5
 800492c:	080049d5 	.word	0x080049d5
 8004930:	080049d5 	.word	0x080049d5
 8004934:	080049d5 	.word	0x080049d5
 8004938:	080049d5 	.word	0x080049d5
 800493c:	080049d5 	.word	0x080049d5
 8004940:	080049d5 	.word	0x080049d5
 8004944:	080049d5 	.word	0x080049d5
 8004948:	080049d5 	.word	0x080049d5
 800494c:	080049d5 	.word	0x080049d5
 8004950:	080049d5 	.word	0x080049d5
 8004954:	080049d5 	.word	0x080049d5
 8004958:	080049d5 	.word	0x080049d5
 800495c:	080049d5 	.word	0x080049d5
 8004960:	080049b1 	.word	0x080049b1
 8004964:	080049d5 	.word	0x080049d5
 8004968:	080049d5 	.word	0x080049d5
 800496c:	080049d5 	.word	0x080049d5
 8004970:	080049d5 	.word	0x080049d5
 8004974:	080049d5 	.word	0x080049d5
 8004978:	080049d5 	.word	0x080049d5
 800497c:	080049d5 	.word	0x080049d5
 8004980:	080049d5 	.word	0x080049d5
 8004984:	080049d5 	.word	0x080049d5
 8004988:	080049ab 	.word	0x080049ab
 800498c:	2b64      	cmp	r3, #100	; 0x64
 800498e:	d009      	beq.n	80049a4 <Save_EEPROM+0xbfc>
 8004990:	e020      	b.n	80049d4 <Save_EEPROM+0xc2c>
 8004992:	2301      	movs	r3, #1
 8004994:	753b      	strb	r3, [r7, #20]
 8004996:	e01f      	b.n	80049d8 <Save_EEPROM+0xc30>
 8004998:	2302      	movs	r3, #2
 800499a:	753b      	strb	r3, [r7, #20]
 800499c:	e01c      	b.n	80049d8 <Save_EEPROM+0xc30>
 800499e:	2303      	movs	r3, #3
 80049a0:	753b      	strb	r3, [r7, #20]
 80049a2:	e019      	b.n	80049d8 <Save_EEPROM+0xc30>
 80049a4:	2304      	movs	r3, #4
 80049a6:	753b      	strb	r3, [r7, #20]
 80049a8:	e016      	b.n	80049d8 <Save_EEPROM+0xc30>
 80049aa:	2305      	movs	r3, #5
 80049ac:	753b      	strb	r3, [r7, #20]
 80049ae:	e013      	b.n	80049d8 <Save_EEPROM+0xc30>
 80049b0:	2306      	movs	r3, #6
 80049b2:	753b      	strb	r3, [r7, #20]
 80049b4:	e010      	b.n	80049d8 <Save_EEPROM+0xc30>
 80049b6:	2307      	movs	r3, #7
 80049b8:	753b      	strb	r3, [r7, #20]
 80049ba:	e00d      	b.n	80049d8 <Save_EEPROM+0xc30>
 80049bc:	2308      	movs	r3, #8
 80049be:	753b      	strb	r3, [r7, #20]
 80049c0:	e00a      	b.n	80049d8 <Save_EEPROM+0xc30>
 80049c2:	2309      	movs	r3, #9
 80049c4:	753b      	strb	r3, [r7, #20]
 80049c6:	e007      	b.n	80049d8 <Save_EEPROM+0xc30>
 80049c8:	230a      	movs	r3, #10
 80049ca:	753b      	strb	r3, [r7, #20]
 80049cc:	e004      	b.n	80049d8 <Save_EEPROM+0xc30>
 80049ce:	230b      	movs	r3, #11
 80049d0:	753b      	strb	r3, [r7, #20]
 80049d2:	e001      	b.n	80049d8 <Save_EEPROM+0xc30>
 80049d4:	2300      	movs	r3, #0
 80049d6:	753b      	strb	r3, [r7, #20]
 80049d8:	bf00      	nop
	__SAVE_FREQ(buffer[9], Per_CAN[Analog_9_12]);
 80049da:	4b54      	ldr	r3, [pc, #336]	; (8004b2c <Save_EEPROM+0xd84>)
 80049dc:	889b      	ldrh	r3, [r3, #4]
 80049de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049e2:	f000 8082 	beq.w	8004aea <Save_EEPROM+0xd42>
 80049e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049ea:	f300 80a1 	bgt.w	8004b30 <Save_EEPROM+0xd88>
 80049ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80049f2:	d07d      	beq.n	8004af0 <Save_EEPROM+0xd48>
 80049f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80049f8:	f300 809a 	bgt.w	8004b30 <Save_EEPROM+0xd88>
 80049fc:	2bc8      	cmp	r3, #200	; 0xc8
 80049fe:	d07a      	beq.n	8004af6 <Save_EEPROM+0xd4e>
 8004a00:	2bc8      	cmp	r3, #200	; 0xc8
 8004a02:	f300 8095 	bgt.w	8004b30 <Save_EEPROM+0xd88>
 8004a06:	2b32      	cmp	r3, #50	; 0x32
 8004a08:	dc6c      	bgt.n	8004ae4 <Save_EEPROM+0xd3c>
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	f2c0 8090 	blt.w	8004b30 <Save_EEPROM+0xd88>
 8004a10:	3b02      	subs	r3, #2
 8004a12:	2b30      	cmp	r3, #48	; 0x30
 8004a14:	f200 808c 	bhi.w	8004b30 <Save_EEPROM+0xd88>
 8004a18:	a201      	add	r2, pc, #4	; (adr r2, 8004a20 <Save_EEPROM+0xc78>)
 8004a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1e:	bf00      	nop
 8004a20:	08004b27 	.word	0x08004b27
 8004a24:	08004b21 	.word	0x08004b21
 8004a28:	08004b31 	.word	0x08004b31
 8004a2c:	08004b1b 	.word	0x08004b1b
 8004a30:	08004b31 	.word	0x08004b31
 8004a34:	08004b31 	.word	0x08004b31
 8004a38:	08004b31 	.word	0x08004b31
 8004a3c:	08004b31 	.word	0x08004b31
 8004a40:	08004b15 	.word	0x08004b15
 8004a44:	08004b31 	.word	0x08004b31
 8004a48:	08004b31 	.word	0x08004b31
 8004a4c:	08004b31 	.word	0x08004b31
 8004a50:	08004b31 	.word	0x08004b31
 8004a54:	08004b31 	.word	0x08004b31
 8004a58:	08004b31 	.word	0x08004b31
 8004a5c:	08004b31 	.word	0x08004b31
 8004a60:	08004b31 	.word	0x08004b31
 8004a64:	08004b31 	.word	0x08004b31
 8004a68:	08004b0f 	.word	0x08004b0f
 8004a6c:	08004b31 	.word	0x08004b31
 8004a70:	08004b31 	.word	0x08004b31
 8004a74:	08004b31 	.word	0x08004b31
 8004a78:	08004b31 	.word	0x08004b31
 8004a7c:	08004b31 	.word	0x08004b31
 8004a80:	08004b31 	.word	0x08004b31
 8004a84:	08004b31 	.word	0x08004b31
 8004a88:	08004b31 	.word	0x08004b31
 8004a8c:	08004b31 	.word	0x08004b31
 8004a90:	08004b31 	.word	0x08004b31
 8004a94:	08004b31 	.word	0x08004b31
 8004a98:	08004b31 	.word	0x08004b31
 8004a9c:	08004b31 	.word	0x08004b31
 8004aa0:	08004b31 	.word	0x08004b31
 8004aa4:	08004b31 	.word	0x08004b31
 8004aa8:	08004b31 	.word	0x08004b31
 8004aac:	08004b31 	.word	0x08004b31
 8004ab0:	08004b31 	.word	0x08004b31
 8004ab4:	08004b31 	.word	0x08004b31
 8004ab8:	08004b09 	.word	0x08004b09
 8004abc:	08004b31 	.word	0x08004b31
 8004ac0:	08004b31 	.word	0x08004b31
 8004ac4:	08004b31 	.word	0x08004b31
 8004ac8:	08004b31 	.word	0x08004b31
 8004acc:	08004b31 	.word	0x08004b31
 8004ad0:	08004b31 	.word	0x08004b31
 8004ad4:	08004b31 	.word	0x08004b31
 8004ad8:	08004b31 	.word	0x08004b31
 8004adc:	08004b31 	.word	0x08004b31
 8004ae0:	08004b03 	.word	0x08004b03
 8004ae4:	2b64      	cmp	r3, #100	; 0x64
 8004ae6:	d009      	beq.n	8004afc <Save_EEPROM+0xd54>
 8004ae8:	e022      	b.n	8004b30 <Save_EEPROM+0xd88>
 8004aea:	2301      	movs	r3, #1
 8004aec:	757b      	strb	r3, [r7, #21]
 8004aee:	e021      	b.n	8004b34 <Save_EEPROM+0xd8c>
 8004af0:	2302      	movs	r3, #2
 8004af2:	757b      	strb	r3, [r7, #21]
 8004af4:	e01e      	b.n	8004b34 <Save_EEPROM+0xd8c>
 8004af6:	2303      	movs	r3, #3
 8004af8:	757b      	strb	r3, [r7, #21]
 8004afa:	e01b      	b.n	8004b34 <Save_EEPROM+0xd8c>
 8004afc:	2304      	movs	r3, #4
 8004afe:	757b      	strb	r3, [r7, #21]
 8004b00:	e018      	b.n	8004b34 <Save_EEPROM+0xd8c>
 8004b02:	2305      	movs	r3, #5
 8004b04:	757b      	strb	r3, [r7, #21]
 8004b06:	e015      	b.n	8004b34 <Save_EEPROM+0xd8c>
 8004b08:	2306      	movs	r3, #6
 8004b0a:	757b      	strb	r3, [r7, #21]
 8004b0c:	e012      	b.n	8004b34 <Save_EEPROM+0xd8c>
 8004b0e:	2307      	movs	r3, #7
 8004b10:	757b      	strb	r3, [r7, #21]
 8004b12:	e00f      	b.n	8004b34 <Save_EEPROM+0xd8c>
 8004b14:	2308      	movs	r3, #8
 8004b16:	757b      	strb	r3, [r7, #21]
 8004b18:	e00c      	b.n	8004b34 <Save_EEPROM+0xd8c>
 8004b1a:	2309      	movs	r3, #9
 8004b1c:	757b      	strb	r3, [r7, #21]
 8004b1e:	e009      	b.n	8004b34 <Save_EEPROM+0xd8c>
 8004b20:	230a      	movs	r3, #10
 8004b22:	757b      	strb	r3, [r7, #21]
 8004b24:	e006      	b.n	8004b34 <Save_EEPROM+0xd8c>
 8004b26:	230b      	movs	r3, #11
 8004b28:	757b      	strb	r3, [r7, #21]
 8004b2a:	e003      	b.n	8004b34 <Save_EEPROM+0xd8c>
 8004b2c:	200006fc 	.word	0x200006fc
 8004b30:	2300      	movs	r3, #0
 8004b32:	757b      	strb	r3, [r7, #21]
 8004b34:	bf00      	nop
	__SAVE_FREQ(buffer[10], Per_CAN[RTC_Msg]);
 8004b36:	4b5e      	ldr	r3, [pc, #376]	; (8004cb0 <Save_EEPROM+0xf08>)
 8004b38:	88db      	ldrh	r3, [r3, #6]
 8004b3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b3e:	f000 8082 	beq.w	8004c46 <Save_EEPROM+0xe9e>
 8004b42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b46:	f300 809f 	bgt.w	8004c88 <Save_EEPROM+0xee0>
 8004b4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004b4e:	d07d      	beq.n	8004c4c <Save_EEPROM+0xea4>
 8004b50:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004b54:	f300 8098 	bgt.w	8004c88 <Save_EEPROM+0xee0>
 8004b58:	2bc8      	cmp	r3, #200	; 0xc8
 8004b5a:	d07a      	beq.n	8004c52 <Save_EEPROM+0xeaa>
 8004b5c:	2bc8      	cmp	r3, #200	; 0xc8
 8004b5e:	f300 8093 	bgt.w	8004c88 <Save_EEPROM+0xee0>
 8004b62:	2b32      	cmp	r3, #50	; 0x32
 8004b64:	dc6c      	bgt.n	8004c40 <Save_EEPROM+0xe98>
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	f2c0 808e 	blt.w	8004c88 <Save_EEPROM+0xee0>
 8004b6c:	3b02      	subs	r3, #2
 8004b6e:	2b30      	cmp	r3, #48	; 0x30
 8004b70:	f200 808a 	bhi.w	8004c88 <Save_EEPROM+0xee0>
 8004b74:	a201      	add	r2, pc, #4	; (adr r2, 8004b7c <Save_EEPROM+0xdd4>)
 8004b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7a:	bf00      	nop
 8004b7c:	08004c83 	.word	0x08004c83
 8004b80:	08004c7d 	.word	0x08004c7d
 8004b84:	08004c89 	.word	0x08004c89
 8004b88:	08004c77 	.word	0x08004c77
 8004b8c:	08004c89 	.word	0x08004c89
 8004b90:	08004c89 	.word	0x08004c89
 8004b94:	08004c89 	.word	0x08004c89
 8004b98:	08004c89 	.word	0x08004c89
 8004b9c:	08004c71 	.word	0x08004c71
 8004ba0:	08004c89 	.word	0x08004c89
 8004ba4:	08004c89 	.word	0x08004c89
 8004ba8:	08004c89 	.word	0x08004c89
 8004bac:	08004c89 	.word	0x08004c89
 8004bb0:	08004c89 	.word	0x08004c89
 8004bb4:	08004c89 	.word	0x08004c89
 8004bb8:	08004c89 	.word	0x08004c89
 8004bbc:	08004c89 	.word	0x08004c89
 8004bc0:	08004c89 	.word	0x08004c89
 8004bc4:	08004c6b 	.word	0x08004c6b
 8004bc8:	08004c89 	.word	0x08004c89
 8004bcc:	08004c89 	.word	0x08004c89
 8004bd0:	08004c89 	.word	0x08004c89
 8004bd4:	08004c89 	.word	0x08004c89
 8004bd8:	08004c89 	.word	0x08004c89
 8004bdc:	08004c89 	.word	0x08004c89
 8004be0:	08004c89 	.word	0x08004c89
 8004be4:	08004c89 	.word	0x08004c89
 8004be8:	08004c89 	.word	0x08004c89
 8004bec:	08004c89 	.word	0x08004c89
 8004bf0:	08004c89 	.word	0x08004c89
 8004bf4:	08004c89 	.word	0x08004c89
 8004bf8:	08004c89 	.word	0x08004c89
 8004bfc:	08004c89 	.word	0x08004c89
 8004c00:	08004c89 	.word	0x08004c89
 8004c04:	08004c89 	.word	0x08004c89
 8004c08:	08004c89 	.word	0x08004c89
 8004c0c:	08004c89 	.word	0x08004c89
 8004c10:	08004c89 	.word	0x08004c89
 8004c14:	08004c65 	.word	0x08004c65
 8004c18:	08004c89 	.word	0x08004c89
 8004c1c:	08004c89 	.word	0x08004c89
 8004c20:	08004c89 	.word	0x08004c89
 8004c24:	08004c89 	.word	0x08004c89
 8004c28:	08004c89 	.word	0x08004c89
 8004c2c:	08004c89 	.word	0x08004c89
 8004c30:	08004c89 	.word	0x08004c89
 8004c34:	08004c89 	.word	0x08004c89
 8004c38:	08004c89 	.word	0x08004c89
 8004c3c:	08004c5f 	.word	0x08004c5f
 8004c40:	2b64      	cmp	r3, #100	; 0x64
 8004c42:	d009      	beq.n	8004c58 <Save_EEPROM+0xeb0>
 8004c44:	e020      	b.n	8004c88 <Save_EEPROM+0xee0>
 8004c46:	2301      	movs	r3, #1
 8004c48:	75bb      	strb	r3, [r7, #22]
 8004c4a:	e01f      	b.n	8004c8c <Save_EEPROM+0xee4>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	75bb      	strb	r3, [r7, #22]
 8004c50:	e01c      	b.n	8004c8c <Save_EEPROM+0xee4>
 8004c52:	2303      	movs	r3, #3
 8004c54:	75bb      	strb	r3, [r7, #22]
 8004c56:	e019      	b.n	8004c8c <Save_EEPROM+0xee4>
 8004c58:	2304      	movs	r3, #4
 8004c5a:	75bb      	strb	r3, [r7, #22]
 8004c5c:	e016      	b.n	8004c8c <Save_EEPROM+0xee4>
 8004c5e:	2305      	movs	r3, #5
 8004c60:	75bb      	strb	r3, [r7, #22]
 8004c62:	e013      	b.n	8004c8c <Save_EEPROM+0xee4>
 8004c64:	2306      	movs	r3, #6
 8004c66:	75bb      	strb	r3, [r7, #22]
 8004c68:	e010      	b.n	8004c8c <Save_EEPROM+0xee4>
 8004c6a:	2307      	movs	r3, #7
 8004c6c:	75bb      	strb	r3, [r7, #22]
 8004c6e:	e00d      	b.n	8004c8c <Save_EEPROM+0xee4>
 8004c70:	2308      	movs	r3, #8
 8004c72:	75bb      	strb	r3, [r7, #22]
 8004c74:	e00a      	b.n	8004c8c <Save_EEPROM+0xee4>
 8004c76:	2309      	movs	r3, #9
 8004c78:	75bb      	strb	r3, [r7, #22]
 8004c7a:	e007      	b.n	8004c8c <Save_EEPROM+0xee4>
 8004c7c:	230a      	movs	r3, #10
 8004c7e:	75bb      	strb	r3, [r7, #22]
 8004c80:	e004      	b.n	8004c8c <Save_EEPROM+0xee4>
 8004c82:	230b      	movs	r3, #11
 8004c84:	75bb      	strb	r3, [r7, #22]
 8004c86:	e001      	b.n	8004c8c <Save_EEPROM+0xee4>
 8004c88:	2300      	movs	r3, #0
 8004c8a:	75bb      	strb	r3, [r7, #22]
 8004c8c:	bf00      	nop

	buffer[11] = Input_Config;
 8004c8e:	4b09      	ldr	r3, [pc, #36]	; (8004cb4 <Save_EEPROM+0xf0c>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	75fb      	strb	r3, [r7, #23]

	return HAL_I2C_Master_Transmit(hi2c, 0xA0, buffer, EEPROM_BUFFER_SIZE, 5);
 8004c94:	f107 020c 	add.w	r2, r7, #12
 8004c98:	2305      	movs	r3, #5
 8004c9a:	9300      	str	r3, [sp, #0]
 8004c9c:	230b      	movs	r3, #11
 8004c9e:	21a0      	movs	r1, #160	; 0xa0
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f003 ff39 	bl	8008b18 <HAL_I2C_Master_Transmit>
 8004ca6:	4603      	mov	r3, r0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3718      	adds	r7, #24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	200006fc 	.word	0x200006fc
 8004cb4:	200006f8 	.word	0x200006f8

08004cb8 <Principal_Init>:

void Principal_Init(CAN_HandleTypeDef* hcan, I2C_HandleTypeDef* hi2c, TIM_HandleTypeDef* htim)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
	if(Load_EEPROM(hi2c) != HAL_OK)
 8004cc4:	68b8      	ldr	r0, [r7, #8]
 8004cc6:	f7fe fccf 	bl	8003668 <Load_EEPROM>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d001      	beq.n	8004cd4 <Principal_Init+0x1c>
		Principal_Hard_Code_Config();
 8004cd0:	f000 fbfc 	bl	80054cc <Principal_Hard_Code_Config>

	Principal_RTC_Reg_Check(&Date, &Time);
 8004cd4:	490d      	ldr	r1, [pc, #52]	; (8004d0c <Principal_Init+0x54>)
 8004cd6:	480e      	ldr	r0, [pc, #56]	; (8004d10 <Principal_Init+0x58>)
 8004cd8:	f000 ff90 	bl	8005bfc <Principal_RTC_Reg_Check>

	Principal_Datalogger_Init(&Fatfs_Struct);
 8004cdc:	480d      	ldr	r0, [pc, #52]	; (8004d14 <Principal_Init+0x5c>)
 8004cde:	f000 fc0d 	bl	80054fc <Principal_Datalogger_Init>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADC_Buffer[6], 7);
 8004ce2:	2207      	movs	r2, #7
 8004ce4:	490c      	ldr	r1, [pc, #48]	; (8004d18 <Principal_Init+0x60>)
 8004ce6:	480d      	ldr	r0, [pc, #52]	; (8004d1c <Principal_Init+0x64>)
 8004ce8:	f001 fcb4 	bl	8006654 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) &ADC_Buffer[0], 6);
 8004cec:	2206      	movs	r2, #6
 8004cee:	490c      	ldr	r1, [pc, #48]	; (8004d20 <Principal_Init+0x68>)
 8004cf0:	480c      	ldr	r0, [pc, #48]	; (8004d24 <Principal_Init+0x6c>)
 8004cf2:	f001 fcaf 	bl	8006654 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f008 fdae 	bl	800d858 <HAL_TIM_Base_Start_IT>

	Principal_CAN_Start(hcan);
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f7fe fc0b 	bl	8003518 <Principal_CAN_Start>
}
 8004d02:	bf00      	nop
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	20002cb0 	.word	0x20002cb0
 8004d10:	20001a5c 	.word	0x20001a5c
 8004d14:	200009d8 	.word	0x200009d8
 8004d18:	20000710 	.word	0x20000710
 8004d1c:	20001a94 	.word	0x20001a94
 8004d20:	20000704 	.word	0x20000704
 8004d24:	20000720 	.word	0x20000720

08004d28 <Principal_Receive_Config>:

HAL_StatusTypeDef Principal_Receive_Config(I2C_HandleTypeDef* hi2c, uint8_t* data)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
	switch(data[0])
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	f000 8399 	beq.w	800546e <Principal_Receive_Config+0x746>
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	f300 83b3 	bgt.w	80054a8 <Principal_Receive_Config+0x780>
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <Principal_Receive_Config+0x26>
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	f000 8241 	beq.w	80051ce <Principal_Receive_Config+0x4a6>
 8004d4c:	e3ac      	b.n	80054a8 <Principal_Receive_Config+0x780>
	{
		case 0:
			__LOAD_FREQ(data[1], Per_Msg[Analog_1_4]);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	3301      	adds	r3, #1
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	3b01      	subs	r3, #1
 8004d56:	2b0a      	cmp	r3, #10
 8004d58:	d846      	bhi.n	8004de8 <Principal_Receive_Config+0xc0>
 8004d5a:	a201      	add	r2, pc, #4	; (adr r2, 8004d60 <Principal_Receive_Config+0x38>)
 8004d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d60:	08004d8d 	.word	0x08004d8d
 8004d64:	08004d97 	.word	0x08004d97
 8004d68:	08004da1 	.word	0x08004da1
 8004d6c:	08004da9 	.word	0x08004da9
 8004d70:	08004db1 	.word	0x08004db1
 8004d74:	08004db9 	.word	0x08004db9
 8004d78:	08004dc1 	.word	0x08004dc1
 8004d7c:	08004dc9 	.word	0x08004dc9
 8004d80:	08004dd1 	.word	0x08004dd1
 8004d84:	08004dd9 	.word	0x08004dd9
 8004d88:	08004de1 	.word	0x08004de1
 8004d8c:	4ba8      	ldr	r3, [pc, #672]	; (8005030 <Principal_Receive_Config+0x308>)
 8004d8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d92:	801a      	strh	r2, [r3, #0]
 8004d94:	e02b      	b.n	8004dee <Principal_Receive_Config+0xc6>
 8004d96:	4ba6      	ldr	r3, [pc, #664]	; (8005030 <Principal_Receive_Config+0x308>)
 8004d98:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004d9c:	801a      	strh	r2, [r3, #0]
 8004d9e:	e026      	b.n	8004dee <Principal_Receive_Config+0xc6>
 8004da0:	4ba3      	ldr	r3, [pc, #652]	; (8005030 <Principal_Receive_Config+0x308>)
 8004da2:	22c8      	movs	r2, #200	; 0xc8
 8004da4:	801a      	strh	r2, [r3, #0]
 8004da6:	e022      	b.n	8004dee <Principal_Receive_Config+0xc6>
 8004da8:	4ba1      	ldr	r3, [pc, #644]	; (8005030 <Principal_Receive_Config+0x308>)
 8004daa:	2264      	movs	r2, #100	; 0x64
 8004dac:	801a      	strh	r2, [r3, #0]
 8004dae:	e01e      	b.n	8004dee <Principal_Receive_Config+0xc6>
 8004db0:	4b9f      	ldr	r3, [pc, #636]	; (8005030 <Principal_Receive_Config+0x308>)
 8004db2:	2232      	movs	r2, #50	; 0x32
 8004db4:	801a      	strh	r2, [r3, #0]
 8004db6:	e01a      	b.n	8004dee <Principal_Receive_Config+0xc6>
 8004db8:	4b9d      	ldr	r3, [pc, #628]	; (8005030 <Principal_Receive_Config+0x308>)
 8004dba:	2228      	movs	r2, #40	; 0x28
 8004dbc:	801a      	strh	r2, [r3, #0]
 8004dbe:	e016      	b.n	8004dee <Principal_Receive_Config+0xc6>
 8004dc0:	4b9b      	ldr	r3, [pc, #620]	; (8005030 <Principal_Receive_Config+0x308>)
 8004dc2:	2214      	movs	r2, #20
 8004dc4:	801a      	strh	r2, [r3, #0]
 8004dc6:	e012      	b.n	8004dee <Principal_Receive_Config+0xc6>
 8004dc8:	4b99      	ldr	r3, [pc, #612]	; (8005030 <Principal_Receive_Config+0x308>)
 8004dca:	220a      	movs	r2, #10
 8004dcc:	801a      	strh	r2, [r3, #0]
 8004dce:	e00e      	b.n	8004dee <Principal_Receive_Config+0xc6>
 8004dd0:	4b97      	ldr	r3, [pc, #604]	; (8005030 <Principal_Receive_Config+0x308>)
 8004dd2:	2205      	movs	r2, #5
 8004dd4:	801a      	strh	r2, [r3, #0]
 8004dd6:	e00a      	b.n	8004dee <Principal_Receive_Config+0xc6>
 8004dd8:	4b95      	ldr	r3, [pc, #596]	; (8005030 <Principal_Receive_Config+0x308>)
 8004dda:	2203      	movs	r2, #3
 8004ddc:	801a      	strh	r2, [r3, #0]
 8004dde:	e006      	b.n	8004dee <Principal_Receive_Config+0xc6>
 8004de0:	4b93      	ldr	r3, [pc, #588]	; (8005030 <Principal_Receive_Config+0x308>)
 8004de2:	2202      	movs	r2, #2
 8004de4:	801a      	strh	r2, [r3, #0]
 8004de6:	e002      	b.n	8004dee <Principal_Receive_Config+0xc6>
 8004de8:	4b91      	ldr	r3, [pc, #580]	; (8005030 <Principal_Receive_Config+0x308>)
 8004dea:	2200      	movs	r2, #0
 8004dec:	801a      	strh	r2, [r3, #0]
 8004dee:	bf00      	nop
			__LOAD_FREQ(data[2], Per_Msg[Analog_5_8]);
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	3302      	adds	r3, #2
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	3b01      	subs	r3, #1
 8004df8:	2b0a      	cmp	r3, #10
 8004dfa:	d847      	bhi.n	8004e8c <Principal_Receive_Config+0x164>
 8004dfc:	a201      	add	r2, pc, #4	; (adr r2, 8004e04 <Principal_Receive_Config+0xdc>)
 8004dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e02:	bf00      	nop
 8004e04:	08004e31 	.word	0x08004e31
 8004e08:	08004e3b 	.word	0x08004e3b
 8004e0c:	08004e45 	.word	0x08004e45
 8004e10:	08004e4d 	.word	0x08004e4d
 8004e14:	08004e55 	.word	0x08004e55
 8004e18:	08004e5d 	.word	0x08004e5d
 8004e1c:	08004e65 	.word	0x08004e65
 8004e20:	08004e6d 	.word	0x08004e6d
 8004e24:	08004e75 	.word	0x08004e75
 8004e28:	08004e7d 	.word	0x08004e7d
 8004e2c:	08004e85 	.word	0x08004e85
 8004e30:	4b7f      	ldr	r3, [pc, #508]	; (8005030 <Principal_Receive_Config+0x308>)
 8004e32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e36:	805a      	strh	r2, [r3, #2]
 8004e38:	e02b      	b.n	8004e92 <Principal_Receive_Config+0x16a>
 8004e3a:	4b7d      	ldr	r3, [pc, #500]	; (8005030 <Principal_Receive_Config+0x308>)
 8004e3c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004e40:	805a      	strh	r2, [r3, #2]
 8004e42:	e026      	b.n	8004e92 <Principal_Receive_Config+0x16a>
 8004e44:	4b7a      	ldr	r3, [pc, #488]	; (8005030 <Principal_Receive_Config+0x308>)
 8004e46:	22c8      	movs	r2, #200	; 0xc8
 8004e48:	805a      	strh	r2, [r3, #2]
 8004e4a:	e022      	b.n	8004e92 <Principal_Receive_Config+0x16a>
 8004e4c:	4b78      	ldr	r3, [pc, #480]	; (8005030 <Principal_Receive_Config+0x308>)
 8004e4e:	2264      	movs	r2, #100	; 0x64
 8004e50:	805a      	strh	r2, [r3, #2]
 8004e52:	e01e      	b.n	8004e92 <Principal_Receive_Config+0x16a>
 8004e54:	4b76      	ldr	r3, [pc, #472]	; (8005030 <Principal_Receive_Config+0x308>)
 8004e56:	2232      	movs	r2, #50	; 0x32
 8004e58:	805a      	strh	r2, [r3, #2]
 8004e5a:	e01a      	b.n	8004e92 <Principal_Receive_Config+0x16a>
 8004e5c:	4b74      	ldr	r3, [pc, #464]	; (8005030 <Principal_Receive_Config+0x308>)
 8004e5e:	2228      	movs	r2, #40	; 0x28
 8004e60:	805a      	strh	r2, [r3, #2]
 8004e62:	e016      	b.n	8004e92 <Principal_Receive_Config+0x16a>
 8004e64:	4b72      	ldr	r3, [pc, #456]	; (8005030 <Principal_Receive_Config+0x308>)
 8004e66:	2214      	movs	r2, #20
 8004e68:	805a      	strh	r2, [r3, #2]
 8004e6a:	e012      	b.n	8004e92 <Principal_Receive_Config+0x16a>
 8004e6c:	4b70      	ldr	r3, [pc, #448]	; (8005030 <Principal_Receive_Config+0x308>)
 8004e6e:	220a      	movs	r2, #10
 8004e70:	805a      	strh	r2, [r3, #2]
 8004e72:	e00e      	b.n	8004e92 <Principal_Receive_Config+0x16a>
 8004e74:	4b6e      	ldr	r3, [pc, #440]	; (8005030 <Principal_Receive_Config+0x308>)
 8004e76:	2205      	movs	r2, #5
 8004e78:	805a      	strh	r2, [r3, #2]
 8004e7a:	e00a      	b.n	8004e92 <Principal_Receive_Config+0x16a>
 8004e7c:	4b6c      	ldr	r3, [pc, #432]	; (8005030 <Principal_Receive_Config+0x308>)
 8004e7e:	2203      	movs	r2, #3
 8004e80:	805a      	strh	r2, [r3, #2]
 8004e82:	e006      	b.n	8004e92 <Principal_Receive_Config+0x16a>
 8004e84:	4b6a      	ldr	r3, [pc, #424]	; (8005030 <Principal_Receive_Config+0x308>)
 8004e86:	2202      	movs	r2, #2
 8004e88:	805a      	strh	r2, [r3, #2]
 8004e8a:	e002      	b.n	8004e92 <Principal_Receive_Config+0x16a>
 8004e8c:	4b68      	ldr	r3, [pc, #416]	; (8005030 <Principal_Receive_Config+0x308>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	805a      	strh	r2, [r3, #2]
 8004e92:	bf00      	nop
			__LOAD_FREQ(data[3], Per_Msg[Analog_9_12]);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	3303      	adds	r3, #3
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	2b0a      	cmp	r3, #10
 8004e9e:	d847      	bhi.n	8004f30 <Principal_Receive_Config+0x208>
 8004ea0:	a201      	add	r2, pc, #4	; (adr r2, 8004ea8 <Principal_Receive_Config+0x180>)
 8004ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea6:	bf00      	nop
 8004ea8:	08004ed5 	.word	0x08004ed5
 8004eac:	08004edf 	.word	0x08004edf
 8004eb0:	08004ee9 	.word	0x08004ee9
 8004eb4:	08004ef1 	.word	0x08004ef1
 8004eb8:	08004ef9 	.word	0x08004ef9
 8004ebc:	08004f01 	.word	0x08004f01
 8004ec0:	08004f09 	.word	0x08004f09
 8004ec4:	08004f11 	.word	0x08004f11
 8004ec8:	08004f19 	.word	0x08004f19
 8004ecc:	08004f21 	.word	0x08004f21
 8004ed0:	08004f29 	.word	0x08004f29
 8004ed4:	4b56      	ldr	r3, [pc, #344]	; (8005030 <Principal_Receive_Config+0x308>)
 8004ed6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004eda:	809a      	strh	r2, [r3, #4]
 8004edc:	e02b      	b.n	8004f36 <Principal_Receive_Config+0x20e>
 8004ede:	4b54      	ldr	r3, [pc, #336]	; (8005030 <Principal_Receive_Config+0x308>)
 8004ee0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004ee4:	809a      	strh	r2, [r3, #4]
 8004ee6:	e026      	b.n	8004f36 <Principal_Receive_Config+0x20e>
 8004ee8:	4b51      	ldr	r3, [pc, #324]	; (8005030 <Principal_Receive_Config+0x308>)
 8004eea:	22c8      	movs	r2, #200	; 0xc8
 8004eec:	809a      	strh	r2, [r3, #4]
 8004eee:	e022      	b.n	8004f36 <Principal_Receive_Config+0x20e>
 8004ef0:	4b4f      	ldr	r3, [pc, #316]	; (8005030 <Principal_Receive_Config+0x308>)
 8004ef2:	2264      	movs	r2, #100	; 0x64
 8004ef4:	809a      	strh	r2, [r3, #4]
 8004ef6:	e01e      	b.n	8004f36 <Principal_Receive_Config+0x20e>
 8004ef8:	4b4d      	ldr	r3, [pc, #308]	; (8005030 <Principal_Receive_Config+0x308>)
 8004efa:	2232      	movs	r2, #50	; 0x32
 8004efc:	809a      	strh	r2, [r3, #4]
 8004efe:	e01a      	b.n	8004f36 <Principal_Receive_Config+0x20e>
 8004f00:	4b4b      	ldr	r3, [pc, #300]	; (8005030 <Principal_Receive_Config+0x308>)
 8004f02:	2228      	movs	r2, #40	; 0x28
 8004f04:	809a      	strh	r2, [r3, #4]
 8004f06:	e016      	b.n	8004f36 <Principal_Receive_Config+0x20e>
 8004f08:	4b49      	ldr	r3, [pc, #292]	; (8005030 <Principal_Receive_Config+0x308>)
 8004f0a:	2214      	movs	r2, #20
 8004f0c:	809a      	strh	r2, [r3, #4]
 8004f0e:	e012      	b.n	8004f36 <Principal_Receive_Config+0x20e>
 8004f10:	4b47      	ldr	r3, [pc, #284]	; (8005030 <Principal_Receive_Config+0x308>)
 8004f12:	220a      	movs	r2, #10
 8004f14:	809a      	strh	r2, [r3, #4]
 8004f16:	e00e      	b.n	8004f36 <Principal_Receive_Config+0x20e>
 8004f18:	4b45      	ldr	r3, [pc, #276]	; (8005030 <Principal_Receive_Config+0x308>)
 8004f1a:	2205      	movs	r2, #5
 8004f1c:	809a      	strh	r2, [r3, #4]
 8004f1e:	e00a      	b.n	8004f36 <Principal_Receive_Config+0x20e>
 8004f20:	4b43      	ldr	r3, [pc, #268]	; (8005030 <Principal_Receive_Config+0x308>)
 8004f22:	2203      	movs	r2, #3
 8004f24:	809a      	strh	r2, [r3, #4]
 8004f26:	e006      	b.n	8004f36 <Principal_Receive_Config+0x20e>
 8004f28:	4b41      	ldr	r3, [pc, #260]	; (8005030 <Principal_Receive_Config+0x308>)
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	809a      	strh	r2, [r3, #4]
 8004f2e:	e002      	b.n	8004f36 <Principal_Receive_Config+0x20e>
 8004f30:	4b3f      	ldr	r3, [pc, #252]	; (8005030 <Principal_Receive_Config+0x308>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	809a      	strh	r2, [r3, #4]
 8004f36:	bf00      	nop
			__LOAD_FREQ(data[4], Per_Msg[RTC_Msg]);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	3304      	adds	r3, #4
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	2b0a      	cmp	r3, #10
 8004f42:	d847      	bhi.n	8004fd4 <Principal_Receive_Config+0x2ac>
 8004f44:	a201      	add	r2, pc, #4	; (adr r2, 8004f4c <Principal_Receive_Config+0x224>)
 8004f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4a:	bf00      	nop
 8004f4c:	08004f79 	.word	0x08004f79
 8004f50:	08004f83 	.word	0x08004f83
 8004f54:	08004f8d 	.word	0x08004f8d
 8004f58:	08004f95 	.word	0x08004f95
 8004f5c:	08004f9d 	.word	0x08004f9d
 8004f60:	08004fa5 	.word	0x08004fa5
 8004f64:	08004fad 	.word	0x08004fad
 8004f68:	08004fb5 	.word	0x08004fb5
 8004f6c:	08004fbd 	.word	0x08004fbd
 8004f70:	08004fc5 	.word	0x08004fc5
 8004f74:	08004fcd 	.word	0x08004fcd
 8004f78:	4b2d      	ldr	r3, [pc, #180]	; (8005030 <Principal_Receive_Config+0x308>)
 8004f7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f7e:	80da      	strh	r2, [r3, #6]
 8004f80:	e02b      	b.n	8004fda <Principal_Receive_Config+0x2b2>
 8004f82:	4b2b      	ldr	r3, [pc, #172]	; (8005030 <Principal_Receive_Config+0x308>)
 8004f84:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004f88:	80da      	strh	r2, [r3, #6]
 8004f8a:	e026      	b.n	8004fda <Principal_Receive_Config+0x2b2>
 8004f8c:	4b28      	ldr	r3, [pc, #160]	; (8005030 <Principal_Receive_Config+0x308>)
 8004f8e:	22c8      	movs	r2, #200	; 0xc8
 8004f90:	80da      	strh	r2, [r3, #6]
 8004f92:	e022      	b.n	8004fda <Principal_Receive_Config+0x2b2>
 8004f94:	4b26      	ldr	r3, [pc, #152]	; (8005030 <Principal_Receive_Config+0x308>)
 8004f96:	2264      	movs	r2, #100	; 0x64
 8004f98:	80da      	strh	r2, [r3, #6]
 8004f9a:	e01e      	b.n	8004fda <Principal_Receive_Config+0x2b2>
 8004f9c:	4b24      	ldr	r3, [pc, #144]	; (8005030 <Principal_Receive_Config+0x308>)
 8004f9e:	2232      	movs	r2, #50	; 0x32
 8004fa0:	80da      	strh	r2, [r3, #6]
 8004fa2:	e01a      	b.n	8004fda <Principal_Receive_Config+0x2b2>
 8004fa4:	4b22      	ldr	r3, [pc, #136]	; (8005030 <Principal_Receive_Config+0x308>)
 8004fa6:	2228      	movs	r2, #40	; 0x28
 8004fa8:	80da      	strh	r2, [r3, #6]
 8004faa:	e016      	b.n	8004fda <Principal_Receive_Config+0x2b2>
 8004fac:	4b20      	ldr	r3, [pc, #128]	; (8005030 <Principal_Receive_Config+0x308>)
 8004fae:	2214      	movs	r2, #20
 8004fb0:	80da      	strh	r2, [r3, #6]
 8004fb2:	e012      	b.n	8004fda <Principal_Receive_Config+0x2b2>
 8004fb4:	4b1e      	ldr	r3, [pc, #120]	; (8005030 <Principal_Receive_Config+0x308>)
 8004fb6:	220a      	movs	r2, #10
 8004fb8:	80da      	strh	r2, [r3, #6]
 8004fba:	e00e      	b.n	8004fda <Principal_Receive_Config+0x2b2>
 8004fbc:	4b1c      	ldr	r3, [pc, #112]	; (8005030 <Principal_Receive_Config+0x308>)
 8004fbe:	2205      	movs	r2, #5
 8004fc0:	80da      	strh	r2, [r3, #6]
 8004fc2:	e00a      	b.n	8004fda <Principal_Receive_Config+0x2b2>
 8004fc4:	4b1a      	ldr	r3, [pc, #104]	; (8005030 <Principal_Receive_Config+0x308>)
 8004fc6:	2203      	movs	r2, #3
 8004fc8:	80da      	strh	r2, [r3, #6]
 8004fca:	e006      	b.n	8004fda <Principal_Receive_Config+0x2b2>
 8004fcc:	4b18      	ldr	r3, [pc, #96]	; (8005030 <Principal_Receive_Config+0x308>)
 8004fce:	2202      	movs	r2, #2
 8004fd0:	80da      	strh	r2, [r3, #6]
 8004fd2:	e002      	b.n	8004fda <Principal_Receive_Config+0x2b2>
 8004fd4:	4b16      	ldr	r3, [pc, #88]	; (8005030 <Principal_Receive_Config+0x308>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	80da      	strh	r2, [r3, #6]
 8004fda:	bf00      	nop
			__LOAD_FREQ(data[5], Per_Msg[Verify_Msg]);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	3305      	adds	r3, #5
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	2b0a      	cmp	r3, #10
 8004fe6:	d849      	bhi.n	800507c <Principal_Receive_Config+0x354>
 8004fe8:	a201      	add	r2, pc, #4	; (adr r2, 8004ff0 <Principal_Receive_Config+0x2c8>)
 8004fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fee:	bf00      	nop
 8004ff0:	0800501d 	.word	0x0800501d
 8004ff4:	08005027 	.word	0x08005027
 8004ff8:	08005035 	.word	0x08005035
 8004ffc:	0800503d 	.word	0x0800503d
 8005000:	08005045 	.word	0x08005045
 8005004:	0800504d 	.word	0x0800504d
 8005008:	08005055 	.word	0x08005055
 800500c:	0800505d 	.word	0x0800505d
 8005010:	08005065 	.word	0x08005065
 8005014:	0800506d 	.word	0x0800506d
 8005018:	08005075 	.word	0x08005075
 800501c:	4b04      	ldr	r3, [pc, #16]	; (8005030 <Principal_Receive_Config+0x308>)
 800501e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005022:	811a      	strh	r2, [r3, #8]
 8005024:	e02d      	b.n	8005082 <Principal_Receive_Config+0x35a>
 8005026:	4b02      	ldr	r3, [pc, #8]	; (8005030 <Principal_Receive_Config+0x308>)
 8005028:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800502c:	811a      	strh	r2, [r3, #8]
 800502e:	e028      	b.n	8005082 <Principal_Receive_Config+0x35a>
 8005030:	20002e7c 	.word	0x20002e7c
 8005034:	4ba7      	ldr	r3, [pc, #668]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 8005036:	22c8      	movs	r2, #200	; 0xc8
 8005038:	811a      	strh	r2, [r3, #8]
 800503a:	e022      	b.n	8005082 <Principal_Receive_Config+0x35a>
 800503c:	4ba5      	ldr	r3, [pc, #660]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 800503e:	2264      	movs	r2, #100	; 0x64
 8005040:	811a      	strh	r2, [r3, #8]
 8005042:	e01e      	b.n	8005082 <Principal_Receive_Config+0x35a>
 8005044:	4ba3      	ldr	r3, [pc, #652]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 8005046:	2232      	movs	r2, #50	; 0x32
 8005048:	811a      	strh	r2, [r3, #8]
 800504a:	e01a      	b.n	8005082 <Principal_Receive_Config+0x35a>
 800504c:	4ba1      	ldr	r3, [pc, #644]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 800504e:	2228      	movs	r2, #40	; 0x28
 8005050:	811a      	strh	r2, [r3, #8]
 8005052:	e016      	b.n	8005082 <Principal_Receive_Config+0x35a>
 8005054:	4b9f      	ldr	r3, [pc, #636]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 8005056:	2214      	movs	r2, #20
 8005058:	811a      	strh	r2, [r3, #8]
 800505a:	e012      	b.n	8005082 <Principal_Receive_Config+0x35a>
 800505c:	4b9d      	ldr	r3, [pc, #628]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 800505e:	220a      	movs	r2, #10
 8005060:	811a      	strh	r2, [r3, #8]
 8005062:	e00e      	b.n	8005082 <Principal_Receive_Config+0x35a>
 8005064:	4b9b      	ldr	r3, [pc, #620]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 8005066:	2205      	movs	r2, #5
 8005068:	811a      	strh	r2, [r3, #8]
 800506a:	e00a      	b.n	8005082 <Principal_Receive_Config+0x35a>
 800506c:	4b99      	ldr	r3, [pc, #612]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 800506e:	2203      	movs	r2, #3
 8005070:	811a      	strh	r2, [r3, #8]
 8005072:	e006      	b.n	8005082 <Principal_Receive_Config+0x35a>
 8005074:	4b97      	ldr	r3, [pc, #604]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 8005076:	2202      	movs	r2, #2
 8005078:	811a      	strh	r2, [r3, #8]
 800507a:	e002      	b.n	8005082 <Principal_Receive_Config+0x35a>
 800507c:	4b95      	ldr	r3, [pc, #596]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 800507e:	2200      	movs	r2, #0
 8005080:	811a      	strh	r2, [r3, #8]
 8005082:	bf00      	nop
			__LOAD_FREQ(data[6], Per_Msg[ECU_Save]);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	3306      	adds	r3, #6
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	3b01      	subs	r3, #1
 800508c:	2b0a      	cmp	r3, #10
 800508e:	d847      	bhi.n	8005120 <Principal_Receive_Config+0x3f8>
 8005090:	a201      	add	r2, pc, #4	; (adr r2, 8005098 <Principal_Receive_Config+0x370>)
 8005092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005096:	bf00      	nop
 8005098:	080050c5 	.word	0x080050c5
 800509c:	080050cf 	.word	0x080050cf
 80050a0:	080050d9 	.word	0x080050d9
 80050a4:	080050e1 	.word	0x080050e1
 80050a8:	080050e9 	.word	0x080050e9
 80050ac:	080050f1 	.word	0x080050f1
 80050b0:	080050f9 	.word	0x080050f9
 80050b4:	08005101 	.word	0x08005101
 80050b8:	08005109 	.word	0x08005109
 80050bc:	08005111 	.word	0x08005111
 80050c0:	08005119 	.word	0x08005119
 80050c4:	4b83      	ldr	r3, [pc, #524]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 80050c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050ca:	815a      	strh	r2, [r3, #10]
 80050cc:	e02b      	b.n	8005126 <Principal_Receive_Config+0x3fe>
 80050ce:	4b81      	ldr	r3, [pc, #516]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 80050d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80050d4:	815a      	strh	r2, [r3, #10]
 80050d6:	e026      	b.n	8005126 <Principal_Receive_Config+0x3fe>
 80050d8:	4b7e      	ldr	r3, [pc, #504]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 80050da:	22c8      	movs	r2, #200	; 0xc8
 80050dc:	815a      	strh	r2, [r3, #10]
 80050de:	e022      	b.n	8005126 <Principal_Receive_Config+0x3fe>
 80050e0:	4b7c      	ldr	r3, [pc, #496]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 80050e2:	2264      	movs	r2, #100	; 0x64
 80050e4:	815a      	strh	r2, [r3, #10]
 80050e6:	e01e      	b.n	8005126 <Principal_Receive_Config+0x3fe>
 80050e8:	4b7a      	ldr	r3, [pc, #488]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 80050ea:	2232      	movs	r2, #50	; 0x32
 80050ec:	815a      	strh	r2, [r3, #10]
 80050ee:	e01a      	b.n	8005126 <Principal_Receive_Config+0x3fe>
 80050f0:	4b78      	ldr	r3, [pc, #480]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 80050f2:	2228      	movs	r2, #40	; 0x28
 80050f4:	815a      	strh	r2, [r3, #10]
 80050f6:	e016      	b.n	8005126 <Principal_Receive_Config+0x3fe>
 80050f8:	4b76      	ldr	r3, [pc, #472]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 80050fa:	2214      	movs	r2, #20
 80050fc:	815a      	strh	r2, [r3, #10]
 80050fe:	e012      	b.n	8005126 <Principal_Receive_Config+0x3fe>
 8005100:	4b74      	ldr	r3, [pc, #464]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 8005102:	220a      	movs	r2, #10
 8005104:	815a      	strh	r2, [r3, #10]
 8005106:	e00e      	b.n	8005126 <Principal_Receive_Config+0x3fe>
 8005108:	4b72      	ldr	r3, [pc, #456]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 800510a:	2205      	movs	r2, #5
 800510c:	815a      	strh	r2, [r3, #10]
 800510e:	e00a      	b.n	8005126 <Principal_Receive_Config+0x3fe>
 8005110:	4b70      	ldr	r3, [pc, #448]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 8005112:	2203      	movs	r2, #3
 8005114:	815a      	strh	r2, [r3, #10]
 8005116:	e006      	b.n	8005126 <Principal_Receive_Config+0x3fe>
 8005118:	4b6e      	ldr	r3, [pc, #440]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 800511a:	2202      	movs	r2, #2
 800511c:	815a      	strh	r2, [r3, #10]
 800511e:	e002      	b.n	8005126 <Principal_Receive_Config+0x3fe>
 8005120:	4b6c      	ldr	r3, [pc, #432]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 8005122:	2200      	movs	r2, #0
 8005124:	815a      	strh	r2, [r3, #10]
 8005126:	bf00      	nop
			__LOAD_FREQ(data[7], Per_Msg[PDM_Save]);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	3307      	adds	r3, #7
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	3b01      	subs	r3, #1
 8005130:	2b0a      	cmp	r3, #10
 8005132:	d847      	bhi.n	80051c4 <Principal_Receive_Config+0x49c>
 8005134:	a201      	add	r2, pc, #4	; (adr r2, 800513c <Principal_Receive_Config+0x414>)
 8005136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800513a:	bf00      	nop
 800513c:	08005169 	.word	0x08005169
 8005140:	08005173 	.word	0x08005173
 8005144:	0800517d 	.word	0x0800517d
 8005148:	08005185 	.word	0x08005185
 800514c:	0800518d 	.word	0x0800518d
 8005150:	08005195 	.word	0x08005195
 8005154:	0800519d 	.word	0x0800519d
 8005158:	080051a5 	.word	0x080051a5
 800515c:	080051ad 	.word	0x080051ad
 8005160:	080051b5 	.word	0x080051b5
 8005164:	080051bd 	.word	0x080051bd
 8005168:	4b5a      	ldr	r3, [pc, #360]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 800516a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800516e:	819a      	strh	r2, [r3, #12]
 8005170:	e02b      	b.n	80051ca <Principal_Receive_Config+0x4a2>
 8005172:	4b58      	ldr	r3, [pc, #352]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 8005174:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005178:	819a      	strh	r2, [r3, #12]
 800517a:	e026      	b.n	80051ca <Principal_Receive_Config+0x4a2>
 800517c:	4b55      	ldr	r3, [pc, #340]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 800517e:	22c8      	movs	r2, #200	; 0xc8
 8005180:	819a      	strh	r2, [r3, #12]
 8005182:	e022      	b.n	80051ca <Principal_Receive_Config+0x4a2>
 8005184:	4b53      	ldr	r3, [pc, #332]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 8005186:	2264      	movs	r2, #100	; 0x64
 8005188:	819a      	strh	r2, [r3, #12]
 800518a:	e01e      	b.n	80051ca <Principal_Receive_Config+0x4a2>
 800518c:	4b51      	ldr	r3, [pc, #324]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 800518e:	2232      	movs	r2, #50	; 0x32
 8005190:	819a      	strh	r2, [r3, #12]
 8005192:	e01a      	b.n	80051ca <Principal_Receive_Config+0x4a2>
 8005194:	4b4f      	ldr	r3, [pc, #316]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 8005196:	2228      	movs	r2, #40	; 0x28
 8005198:	819a      	strh	r2, [r3, #12]
 800519a:	e016      	b.n	80051ca <Principal_Receive_Config+0x4a2>
 800519c:	4b4d      	ldr	r3, [pc, #308]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 800519e:	2214      	movs	r2, #20
 80051a0:	819a      	strh	r2, [r3, #12]
 80051a2:	e012      	b.n	80051ca <Principal_Receive_Config+0x4a2>
 80051a4:	4b4b      	ldr	r3, [pc, #300]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 80051a6:	220a      	movs	r2, #10
 80051a8:	819a      	strh	r2, [r3, #12]
 80051aa:	e00e      	b.n	80051ca <Principal_Receive_Config+0x4a2>
 80051ac:	4b49      	ldr	r3, [pc, #292]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 80051ae:	2205      	movs	r2, #5
 80051b0:	819a      	strh	r2, [r3, #12]
 80051b2:	e00a      	b.n	80051ca <Principal_Receive_Config+0x4a2>
 80051b4:	4b47      	ldr	r3, [pc, #284]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 80051b6:	2203      	movs	r2, #3
 80051b8:	819a      	strh	r2, [r3, #12]
 80051ba:	e006      	b.n	80051ca <Principal_Receive_Config+0x4a2>
 80051bc:	4b45      	ldr	r3, [pc, #276]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 80051be:	2202      	movs	r2, #2
 80051c0:	819a      	strh	r2, [r3, #12]
 80051c2:	e002      	b.n	80051ca <Principal_Receive_Config+0x4a2>
 80051c4:	4b43      	ldr	r3, [pc, #268]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	819a      	strh	r2, [r3, #12]
 80051ca:	bf00      	nop
			break;
 80051cc:	e16e      	b.n	80054ac <Principal_Receive_Config+0x784>

		case 1:
			__LOAD_FREQ(data[1], Per_CAN[Analog_1_4]);
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	3301      	adds	r3, #1
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	3b01      	subs	r3, #1
 80051d6:	2b0a      	cmp	r3, #10
 80051d8:	d846      	bhi.n	8005268 <Principal_Receive_Config+0x540>
 80051da:	a201      	add	r2, pc, #4	; (adr r2, 80051e0 <Principal_Receive_Config+0x4b8>)
 80051dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e0:	0800520d 	.word	0x0800520d
 80051e4:	08005217 	.word	0x08005217
 80051e8:	08005221 	.word	0x08005221
 80051ec:	08005229 	.word	0x08005229
 80051f0:	08005231 	.word	0x08005231
 80051f4:	08005239 	.word	0x08005239
 80051f8:	08005241 	.word	0x08005241
 80051fc:	08005249 	.word	0x08005249
 8005200:	08005251 	.word	0x08005251
 8005204:	08005259 	.word	0x08005259
 8005208:	08005261 	.word	0x08005261
 800520c:	4b32      	ldr	r3, [pc, #200]	; (80052d8 <Principal_Receive_Config+0x5b0>)
 800520e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005212:	801a      	strh	r2, [r3, #0]
 8005214:	e02b      	b.n	800526e <Principal_Receive_Config+0x546>
 8005216:	4b30      	ldr	r3, [pc, #192]	; (80052d8 <Principal_Receive_Config+0x5b0>)
 8005218:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800521c:	801a      	strh	r2, [r3, #0]
 800521e:	e026      	b.n	800526e <Principal_Receive_Config+0x546>
 8005220:	4b2d      	ldr	r3, [pc, #180]	; (80052d8 <Principal_Receive_Config+0x5b0>)
 8005222:	22c8      	movs	r2, #200	; 0xc8
 8005224:	801a      	strh	r2, [r3, #0]
 8005226:	e022      	b.n	800526e <Principal_Receive_Config+0x546>
 8005228:	4b2b      	ldr	r3, [pc, #172]	; (80052d8 <Principal_Receive_Config+0x5b0>)
 800522a:	2264      	movs	r2, #100	; 0x64
 800522c:	801a      	strh	r2, [r3, #0]
 800522e:	e01e      	b.n	800526e <Principal_Receive_Config+0x546>
 8005230:	4b29      	ldr	r3, [pc, #164]	; (80052d8 <Principal_Receive_Config+0x5b0>)
 8005232:	2232      	movs	r2, #50	; 0x32
 8005234:	801a      	strh	r2, [r3, #0]
 8005236:	e01a      	b.n	800526e <Principal_Receive_Config+0x546>
 8005238:	4b27      	ldr	r3, [pc, #156]	; (80052d8 <Principal_Receive_Config+0x5b0>)
 800523a:	2228      	movs	r2, #40	; 0x28
 800523c:	801a      	strh	r2, [r3, #0]
 800523e:	e016      	b.n	800526e <Principal_Receive_Config+0x546>
 8005240:	4b25      	ldr	r3, [pc, #148]	; (80052d8 <Principal_Receive_Config+0x5b0>)
 8005242:	2214      	movs	r2, #20
 8005244:	801a      	strh	r2, [r3, #0]
 8005246:	e012      	b.n	800526e <Principal_Receive_Config+0x546>
 8005248:	4b23      	ldr	r3, [pc, #140]	; (80052d8 <Principal_Receive_Config+0x5b0>)
 800524a:	220a      	movs	r2, #10
 800524c:	801a      	strh	r2, [r3, #0]
 800524e:	e00e      	b.n	800526e <Principal_Receive_Config+0x546>
 8005250:	4b21      	ldr	r3, [pc, #132]	; (80052d8 <Principal_Receive_Config+0x5b0>)
 8005252:	2205      	movs	r2, #5
 8005254:	801a      	strh	r2, [r3, #0]
 8005256:	e00a      	b.n	800526e <Principal_Receive_Config+0x546>
 8005258:	4b1f      	ldr	r3, [pc, #124]	; (80052d8 <Principal_Receive_Config+0x5b0>)
 800525a:	2203      	movs	r2, #3
 800525c:	801a      	strh	r2, [r3, #0]
 800525e:	e006      	b.n	800526e <Principal_Receive_Config+0x546>
 8005260:	4b1d      	ldr	r3, [pc, #116]	; (80052d8 <Principal_Receive_Config+0x5b0>)
 8005262:	2202      	movs	r2, #2
 8005264:	801a      	strh	r2, [r3, #0]
 8005266:	e002      	b.n	800526e <Principal_Receive_Config+0x546>
 8005268:	4b1b      	ldr	r3, [pc, #108]	; (80052d8 <Principal_Receive_Config+0x5b0>)
 800526a:	2200      	movs	r2, #0
 800526c:	801a      	strh	r2, [r3, #0]
 800526e:	bf00      	nop
			__LOAD_FREQ(data[2], Per_CAN[Analog_5_8]);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	3302      	adds	r3, #2
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	3b01      	subs	r3, #1
 8005278:	2b0a      	cmp	r3, #10
 800527a:	d84b      	bhi.n	8005314 <Principal_Receive_Config+0x5ec>
 800527c:	a201      	add	r2, pc, #4	; (adr r2, 8005284 <Principal_Receive_Config+0x55c>)
 800527e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005282:	bf00      	nop
 8005284:	080052b1 	.word	0x080052b1
 8005288:	080052bb 	.word	0x080052bb
 800528c:	080052c5 	.word	0x080052c5
 8005290:	080052cd 	.word	0x080052cd
 8005294:	080052dd 	.word	0x080052dd
 8005298:	080052e5 	.word	0x080052e5
 800529c:	080052ed 	.word	0x080052ed
 80052a0:	080052f5 	.word	0x080052f5
 80052a4:	080052fd 	.word	0x080052fd
 80052a8:	08005305 	.word	0x08005305
 80052ac:	0800530d 	.word	0x0800530d
 80052b0:	4b09      	ldr	r3, [pc, #36]	; (80052d8 <Principal_Receive_Config+0x5b0>)
 80052b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052b6:	805a      	strh	r2, [r3, #2]
 80052b8:	e02f      	b.n	800531a <Principal_Receive_Config+0x5f2>
 80052ba:	4b07      	ldr	r3, [pc, #28]	; (80052d8 <Principal_Receive_Config+0x5b0>)
 80052bc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80052c0:	805a      	strh	r2, [r3, #2]
 80052c2:	e02a      	b.n	800531a <Principal_Receive_Config+0x5f2>
 80052c4:	4b04      	ldr	r3, [pc, #16]	; (80052d8 <Principal_Receive_Config+0x5b0>)
 80052c6:	22c8      	movs	r2, #200	; 0xc8
 80052c8:	805a      	strh	r2, [r3, #2]
 80052ca:	e026      	b.n	800531a <Principal_Receive_Config+0x5f2>
 80052cc:	4b02      	ldr	r3, [pc, #8]	; (80052d8 <Principal_Receive_Config+0x5b0>)
 80052ce:	2264      	movs	r2, #100	; 0x64
 80052d0:	805a      	strh	r2, [r3, #2]
 80052d2:	e022      	b.n	800531a <Principal_Receive_Config+0x5f2>
 80052d4:	20002e7c 	.word	0x20002e7c
 80052d8:	200006fc 	.word	0x200006fc
 80052dc:	4b77      	ldr	r3, [pc, #476]	; (80054bc <Principal_Receive_Config+0x794>)
 80052de:	2232      	movs	r2, #50	; 0x32
 80052e0:	805a      	strh	r2, [r3, #2]
 80052e2:	e01a      	b.n	800531a <Principal_Receive_Config+0x5f2>
 80052e4:	4b75      	ldr	r3, [pc, #468]	; (80054bc <Principal_Receive_Config+0x794>)
 80052e6:	2228      	movs	r2, #40	; 0x28
 80052e8:	805a      	strh	r2, [r3, #2]
 80052ea:	e016      	b.n	800531a <Principal_Receive_Config+0x5f2>
 80052ec:	4b73      	ldr	r3, [pc, #460]	; (80054bc <Principal_Receive_Config+0x794>)
 80052ee:	2214      	movs	r2, #20
 80052f0:	805a      	strh	r2, [r3, #2]
 80052f2:	e012      	b.n	800531a <Principal_Receive_Config+0x5f2>
 80052f4:	4b71      	ldr	r3, [pc, #452]	; (80054bc <Principal_Receive_Config+0x794>)
 80052f6:	220a      	movs	r2, #10
 80052f8:	805a      	strh	r2, [r3, #2]
 80052fa:	e00e      	b.n	800531a <Principal_Receive_Config+0x5f2>
 80052fc:	4b6f      	ldr	r3, [pc, #444]	; (80054bc <Principal_Receive_Config+0x794>)
 80052fe:	2205      	movs	r2, #5
 8005300:	805a      	strh	r2, [r3, #2]
 8005302:	e00a      	b.n	800531a <Principal_Receive_Config+0x5f2>
 8005304:	4b6d      	ldr	r3, [pc, #436]	; (80054bc <Principal_Receive_Config+0x794>)
 8005306:	2203      	movs	r2, #3
 8005308:	805a      	strh	r2, [r3, #2]
 800530a:	e006      	b.n	800531a <Principal_Receive_Config+0x5f2>
 800530c:	4b6b      	ldr	r3, [pc, #428]	; (80054bc <Principal_Receive_Config+0x794>)
 800530e:	2202      	movs	r2, #2
 8005310:	805a      	strh	r2, [r3, #2]
 8005312:	e002      	b.n	800531a <Principal_Receive_Config+0x5f2>
 8005314:	4b69      	ldr	r3, [pc, #420]	; (80054bc <Principal_Receive_Config+0x794>)
 8005316:	2200      	movs	r2, #0
 8005318:	805a      	strh	r2, [r3, #2]
 800531a:	bf00      	nop
			__LOAD_FREQ(data[3], Per_CAN[Analog_9_12]);
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	3303      	adds	r3, #3
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	3b01      	subs	r3, #1
 8005324:	2b0a      	cmp	r3, #10
 8005326:	d847      	bhi.n	80053b8 <Principal_Receive_Config+0x690>
 8005328:	a201      	add	r2, pc, #4	; (adr r2, 8005330 <Principal_Receive_Config+0x608>)
 800532a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800532e:	bf00      	nop
 8005330:	0800535d 	.word	0x0800535d
 8005334:	08005367 	.word	0x08005367
 8005338:	08005371 	.word	0x08005371
 800533c:	08005379 	.word	0x08005379
 8005340:	08005381 	.word	0x08005381
 8005344:	08005389 	.word	0x08005389
 8005348:	08005391 	.word	0x08005391
 800534c:	08005399 	.word	0x08005399
 8005350:	080053a1 	.word	0x080053a1
 8005354:	080053a9 	.word	0x080053a9
 8005358:	080053b1 	.word	0x080053b1
 800535c:	4b57      	ldr	r3, [pc, #348]	; (80054bc <Principal_Receive_Config+0x794>)
 800535e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005362:	809a      	strh	r2, [r3, #4]
 8005364:	e02b      	b.n	80053be <Principal_Receive_Config+0x696>
 8005366:	4b55      	ldr	r3, [pc, #340]	; (80054bc <Principal_Receive_Config+0x794>)
 8005368:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800536c:	809a      	strh	r2, [r3, #4]
 800536e:	e026      	b.n	80053be <Principal_Receive_Config+0x696>
 8005370:	4b52      	ldr	r3, [pc, #328]	; (80054bc <Principal_Receive_Config+0x794>)
 8005372:	22c8      	movs	r2, #200	; 0xc8
 8005374:	809a      	strh	r2, [r3, #4]
 8005376:	e022      	b.n	80053be <Principal_Receive_Config+0x696>
 8005378:	4b50      	ldr	r3, [pc, #320]	; (80054bc <Principal_Receive_Config+0x794>)
 800537a:	2264      	movs	r2, #100	; 0x64
 800537c:	809a      	strh	r2, [r3, #4]
 800537e:	e01e      	b.n	80053be <Principal_Receive_Config+0x696>
 8005380:	4b4e      	ldr	r3, [pc, #312]	; (80054bc <Principal_Receive_Config+0x794>)
 8005382:	2232      	movs	r2, #50	; 0x32
 8005384:	809a      	strh	r2, [r3, #4]
 8005386:	e01a      	b.n	80053be <Principal_Receive_Config+0x696>
 8005388:	4b4c      	ldr	r3, [pc, #304]	; (80054bc <Principal_Receive_Config+0x794>)
 800538a:	2228      	movs	r2, #40	; 0x28
 800538c:	809a      	strh	r2, [r3, #4]
 800538e:	e016      	b.n	80053be <Principal_Receive_Config+0x696>
 8005390:	4b4a      	ldr	r3, [pc, #296]	; (80054bc <Principal_Receive_Config+0x794>)
 8005392:	2214      	movs	r2, #20
 8005394:	809a      	strh	r2, [r3, #4]
 8005396:	e012      	b.n	80053be <Principal_Receive_Config+0x696>
 8005398:	4b48      	ldr	r3, [pc, #288]	; (80054bc <Principal_Receive_Config+0x794>)
 800539a:	220a      	movs	r2, #10
 800539c:	809a      	strh	r2, [r3, #4]
 800539e:	e00e      	b.n	80053be <Principal_Receive_Config+0x696>
 80053a0:	4b46      	ldr	r3, [pc, #280]	; (80054bc <Principal_Receive_Config+0x794>)
 80053a2:	2205      	movs	r2, #5
 80053a4:	809a      	strh	r2, [r3, #4]
 80053a6:	e00a      	b.n	80053be <Principal_Receive_Config+0x696>
 80053a8:	4b44      	ldr	r3, [pc, #272]	; (80054bc <Principal_Receive_Config+0x794>)
 80053aa:	2203      	movs	r2, #3
 80053ac:	809a      	strh	r2, [r3, #4]
 80053ae:	e006      	b.n	80053be <Principal_Receive_Config+0x696>
 80053b0:	4b42      	ldr	r3, [pc, #264]	; (80054bc <Principal_Receive_Config+0x794>)
 80053b2:	2202      	movs	r2, #2
 80053b4:	809a      	strh	r2, [r3, #4]
 80053b6:	e002      	b.n	80053be <Principal_Receive_Config+0x696>
 80053b8:	4b40      	ldr	r3, [pc, #256]	; (80054bc <Principal_Receive_Config+0x794>)
 80053ba:	2200      	movs	r2, #0
 80053bc:	809a      	strh	r2, [r3, #4]
 80053be:	bf00      	nop
			__LOAD_FREQ(data[4], Per_CAN[RTC_Msg]);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	3304      	adds	r3, #4
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	3b01      	subs	r3, #1
 80053c8:	2b0a      	cmp	r3, #10
 80053ca:	d847      	bhi.n	800545c <Principal_Receive_Config+0x734>
 80053cc:	a201      	add	r2, pc, #4	; (adr r2, 80053d4 <Principal_Receive_Config+0x6ac>)
 80053ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d2:	bf00      	nop
 80053d4:	08005401 	.word	0x08005401
 80053d8:	0800540b 	.word	0x0800540b
 80053dc:	08005415 	.word	0x08005415
 80053e0:	0800541d 	.word	0x0800541d
 80053e4:	08005425 	.word	0x08005425
 80053e8:	0800542d 	.word	0x0800542d
 80053ec:	08005435 	.word	0x08005435
 80053f0:	0800543d 	.word	0x0800543d
 80053f4:	08005445 	.word	0x08005445
 80053f8:	0800544d 	.word	0x0800544d
 80053fc:	08005455 	.word	0x08005455
 8005400:	4b2e      	ldr	r3, [pc, #184]	; (80054bc <Principal_Receive_Config+0x794>)
 8005402:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005406:	80da      	strh	r2, [r3, #6]
 8005408:	e02b      	b.n	8005462 <Principal_Receive_Config+0x73a>
 800540a:	4b2c      	ldr	r3, [pc, #176]	; (80054bc <Principal_Receive_Config+0x794>)
 800540c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005410:	80da      	strh	r2, [r3, #6]
 8005412:	e026      	b.n	8005462 <Principal_Receive_Config+0x73a>
 8005414:	4b29      	ldr	r3, [pc, #164]	; (80054bc <Principal_Receive_Config+0x794>)
 8005416:	22c8      	movs	r2, #200	; 0xc8
 8005418:	80da      	strh	r2, [r3, #6]
 800541a:	e022      	b.n	8005462 <Principal_Receive_Config+0x73a>
 800541c:	4b27      	ldr	r3, [pc, #156]	; (80054bc <Principal_Receive_Config+0x794>)
 800541e:	2264      	movs	r2, #100	; 0x64
 8005420:	80da      	strh	r2, [r3, #6]
 8005422:	e01e      	b.n	8005462 <Principal_Receive_Config+0x73a>
 8005424:	4b25      	ldr	r3, [pc, #148]	; (80054bc <Principal_Receive_Config+0x794>)
 8005426:	2232      	movs	r2, #50	; 0x32
 8005428:	80da      	strh	r2, [r3, #6]
 800542a:	e01a      	b.n	8005462 <Principal_Receive_Config+0x73a>
 800542c:	4b23      	ldr	r3, [pc, #140]	; (80054bc <Principal_Receive_Config+0x794>)
 800542e:	2228      	movs	r2, #40	; 0x28
 8005430:	80da      	strh	r2, [r3, #6]
 8005432:	e016      	b.n	8005462 <Principal_Receive_Config+0x73a>
 8005434:	4b21      	ldr	r3, [pc, #132]	; (80054bc <Principal_Receive_Config+0x794>)
 8005436:	2214      	movs	r2, #20
 8005438:	80da      	strh	r2, [r3, #6]
 800543a:	e012      	b.n	8005462 <Principal_Receive_Config+0x73a>
 800543c:	4b1f      	ldr	r3, [pc, #124]	; (80054bc <Principal_Receive_Config+0x794>)
 800543e:	220a      	movs	r2, #10
 8005440:	80da      	strh	r2, [r3, #6]
 8005442:	e00e      	b.n	8005462 <Principal_Receive_Config+0x73a>
 8005444:	4b1d      	ldr	r3, [pc, #116]	; (80054bc <Principal_Receive_Config+0x794>)
 8005446:	2205      	movs	r2, #5
 8005448:	80da      	strh	r2, [r3, #6]
 800544a:	e00a      	b.n	8005462 <Principal_Receive_Config+0x73a>
 800544c:	4b1b      	ldr	r3, [pc, #108]	; (80054bc <Principal_Receive_Config+0x794>)
 800544e:	2203      	movs	r2, #3
 8005450:	80da      	strh	r2, [r3, #6]
 8005452:	e006      	b.n	8005462 <Principal_Receive_Config+0x73a>
 8005454:	4b19      	ldr	r3, [pc, #100]	; (80054bc <Principal_Receive_Config+0x794>)
 8005456:	2202      	movs	r2, #2
 8005458:	80da      	strh	r2, [r3, #6]
 800545a:	e002      	b.n	8005462 <Principal_Receive_Config+0x73a>
 800545c:	4b17      	ldr	r3, [pc, #92]	; (80054bc <Principal_Receive_Config+0x794>)
 800545e:	2200      	movs	r2, #0
 8005460:	80da      	strh	r2, [r3, #6]
 8005462:	bf00      	nop
			Input_Config = data[5];
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	795a      	ldrb	r2, [r3, #5]
 8005468:	4b15      	ldr	r3, [pc, #84]	; (80054c0 <Principal_Receive_Config+0x798>)
 800546a:	701a      	strb	r2, [r3, #0]
			break;
 800546c:	e01e      	b.n	80054ac <Principal_Receive_Config+0x784>

		case 2:
			Date.Year = data[1];
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	785a      	ldrb	r2, [r3, #1]
 8005472:	4b14      	ldr	r3, [pc, #80]	; (80054c4 <Principal_Receive_Config+0x79c>)
 8005474:	70da      	strb	r2, [r3, #3]
			Date.Month = data[2];
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	789a      	ldrb	r2, [r3, #2]
 800547a:	4b12      	ldr	r3, [pc, #72]	; (80054c4 <Principal_Receive_Config+0x79c>)
 800547c:	705a      	strb	r2, [r3, #1]
			Date.Date = data[3];
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	78da      	ldrb	r2, [r3, #3]
 8005482:	4b10      	ldr	r3, [pc, #64]	; (80054c4 <Principal_Receive_Config+0x79c>)
 8005484:	709a      	strb	r2, [r3, #2]
			Time.Hours = data[4];
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	791a      	ldrb	r2, [r3, #4]
 800548a:	4b0f      	ldr	r3, [pc, #60]	; (80054c8 <Principal_Receive_Config+0x7a0>)
 800548c:	701a      	strb	r2, [r3, #0]
			Time.Minutes = data[5];
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	795a      	ldrb	r2, [r3, #5]
 8005492:	4b0d      	ldr	r3, [pc, #52]	; (80054c8 <Principal_Receive_Config+0x7a0>)
 8005494:	705a      	strb	r2, [r3, #1]
			Time.Seconds = data[6];
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	799a      	ldrb	r2, [r3, #6]
 800549a:	4b0b      	ldr	r3, [pc, #44]	; (80054c8 <Principal_Receive_Config+0x7a0>)
 800549c:	709a      	strb	r2, [r3, #2]
			Principal_RTC_Get_Date(&Date, &Time);
 800549e:	490a      	ldr	r1, [pc, #40]	; (80054c8 <Principal_Receive_Config+0x7a0>)
 80054a0:	4808      	ldr	r0, [pc, #32]	; (80054c4 <Principal_Receive_Config+0x79c>)
 80054a2:	f000 fbd7 	bl	8005c54 <Principal_RTC_Get_Date>
			break;
 80054a6:	e001      	b.n	80054ac <Principal_Receive_Config+0x784>

		default:
			return HAL_OK;
 80054a8:	2300      	movs	r3, #0
 80054aa:	e003      	b.n	80054b4 <Principal_Receive_Config+0x78c>
	}

	return Save_EEPROM(hi2c);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7fe fc7b 	bl	8003da8 <Save_EEPROM>
 80054b2:	4603      	mov	r3, r0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	200006fc 	.word	0x200006fc
 80054c0:	200006f8 	.word	0x200006f8
 80054c4:	20001a5c 	.word	0x20001a5c
 80054c8:	20002cb0 	.word	0x20002cb0

080054cc <Principal_Hard_Code_Config>:

__weak void Principal_Hard_Code_Config(){
 80054cc:	b480      	push	{r7}
 80054ce:	af00      	add	r7, sp, #0
	Per_Msg[Analog_1_4] = MSG_FREQ_20HZ;
 80054d0:	4b07      	ldr	r3, [pc, #28]	; (80054f0 <Principal_Hard_Code_Config+0x24>)
 80054d2:	2232      	movs	r2, #50	; 0x32
 80054d4:	801a      	strh	r2, [r3, #0]
	Threshold_RPM = 7000;
 80054d6:	4b07      	ldr	r3, [pc, #28]	; (80054f4 <Principal_Hard_Code_Config+0x28>)
 80054d8:	f641 3258 	movw	r2, #7000	; 0x1b58
 80054dc:	801a      	strh	r2, [r3, #0]
	Threshold_Speed = 1;
 80054de:	4b06      	ldr	r3, [pc, #24]	; (80054f8 <Principal_Hard_Code_Config+0x2c>)
 80054e0:	2201      	movs	r2, #1
 80054e2:	801a      	strh	r2, [r3, #0]
}
 80054e4:	bf00      	nop
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	20002e7c 	.word	0x20002e7c
 80054f4:	20001c5c 	.word	0x20001c5c
 80054f8:	20001a60 	.word	0x20001a60

080054fc <Principal_Datalogger_Init>:
#include "string.h"

FRESULT res[5];

FRESULT Principal_Datalogger_Init(FATFS* fatfs_struct)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
	FRESULT retVal = FR_OK;
 8005504:	2300      	movs	r3, #0
 8005506:	73fb      	strb	r3, [r7, #15]

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 8005508:	2180      	movs	r1, #128	; 0x80
 800550a:	4813      	ldr	r0, [pc, #76]	; (8005558 <Principal_Datalogger_Init+0x5c>)
 800550c:	f003 f95c 	bl	80087c8 <HAL_GPIO_ReadPin>
 8005510:	4603      	mov	r3, r0
 8005512:	2b01      	cmp	r3, #1
 8005514:	d104      	bne.n	8005520 <Principal_Datalogger_Init+0x24>
	{
		Flag_Datalogger = DL_No_Card;
 8005516:	4b11      	ldr	r3, [pc, #68]	; (800555c <Principal_Datalogger_Init+0x60>)
 8005518:	2202      	movs	r2, #2
 800551a:	701a      	strb	r2, [r3, #0]
		return FR_DISK_ERR;
 800551c:	2301      	movs	r3, #1
 800551e:	e017      	b.n	8005550 <Principal_Datalogger_Init+0x54>
	}

	BSP_SD_Init();
 8005520:	f00a fd6c 	bl	800fffc <BSP_SD_Init>

	retVal = f_mount(fatfs_struct, SDPath, 1);
 8005524:	2201      	movs	r2, #1
 8005526:	490e      	ldr	r1, [pc, #56]	; (8005560 <Principal_Datalogger_Init+0x64>)
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f00f ff77 	bl	801541c <f_mount>
 800552e:	4603      	mov	r3, r0
 8005530:	73fb      	strb	r3, [r7, #15]

	Flag_Datalogger = DL_No_Save;
 8005532:	4b0a      	ldr	r3, [pc, #40]	; (800555c <Principal_Datalogger_Init+0x60>)
 8005534:	2200      	movs	r2, #0
 8005536:	701a      	strb	r2, [r3, #0]

	if(retVal != FR_OK)
 8005538:	7bfb      	ldrb	r3, [r7, #15]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d007      	beq.n	800554e <Principal_Datalogger_Init+0x52>
	{
		Flag_Datalogger = DL_Error;
 800553e:	4b07      	ldr	r3, [pc, #28]	; (800555c <Principal_Datalogger_Init+0x60>)
 8005540:	2204      	movs	r2, #4
 8005542:	701a      	strb	r2, [r3, #0]
		f_mount(0, SDPath, 0);
 8005544:	2200      	movs	r2, #0
 8005546:	4906      	ldr	r1, [pc, #24]	; (8005560 <Principal_Datalogger_Init+0x64>)
 8005548:	2000      	movs	r0, #0
 800554a:	f00f ff67 	bl	801541c <f_mount>
	}

	return retVal;
 800554e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005550:	4618      	mov	r0, r3
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	40020800 	.word	0x40020800
 800555c:	20001bd0 	.word	0x20001bd0
 8005560:	20002e9c 	.word	0x20002e9c

08005564 <Principal_Datalogger_Start>:

FRESULT Principal_Datalogger_Start(RTC_DateTypeDef* sDate, RTC_TimeTypeDef* sTime, char* dir, char* file, DIR* dir_struct, FIL* file_struct)
{
 8005564:	b5b0      	push	{r4, r5, r7, lr}
 8005566:	b08c      	sub	sp, #48	; 0x30
 8005568:	af06      	add	r7, sp, #24
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
 8005570:	603b      	str	r3, [r7, #0]
	FRESULT retVal = FR_OK;
 8005572:	2300      	movs	r3, #0
 8005574:	75fb      	strb	r3, [r7, #23]

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 8005576:	2180      	movs	r1, #128	; 0x80
 8005578:	485e      	ldr	r0, [pc, #376]	; (80056f4 <Principal_Datalogger_Start+0x190>)
 800557a:	f003 f925 	bl	80087c8 <HAL_GPIO_ReadPin>
 800557e:	4603      	mov	r3, r0
 8005580:	2b01      	cmp	r3, #1
 8005582:	d104      	bne.n	800558e <Principal_Datalogger_Start+0x2a>
	{
		Flag_Datalogger = DL_No_Card;
 8005584:	4b5c      	ldr	r3, [pc, #368]	; (80056f8 <Principal_Datalogger_Start+0x194>)
 8005586:	2202      	movs	r2, #2
 8005588:	701a      	strb	r2, [r3, #0]
		return FR_DISK_ERR;
 800558a:	2301      	movs	r3, #1
 800558c:	e0ad      	b.n	80056ea <Principal_Datalogger_Start+0x186>
	}

	if((HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_RESET)
 800558e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005592:	485a      	ldr	r0, [pc, #360]	; (80056fc <Principal_Datalogger_Start+0x198>)
 8005594:	f003 f918 	bl	80087c8 <HAL_GPIO_ReadPin>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d135      	bne.n	800560a <Principal_Datalogger_Start+0xa6>
			&& (ECU_Data.rpm < Threshold_RPM)
 800559e:	4b58      	ldr	r3, [pc, #352]	; (8005700 <Principal_Datalogger_Start+0x19c>)
 80055a0:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 80055a4:	4b57      	ldr	r3, [pc, #348]	; (8005704 <Principal_Datalogger_Start+0x1a0>)
 80055a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	da2d      	bge.n	800560a <Principal_Datalogger_Start+0xa6>
			&& (ECU_Data.wheel_speed_fl < Threshold_Speed)
 80055ae:	4b54      	ldr	r3, [pc, #336]	; (8005700 <Principal_Datalogger_Start+0x19c>)
 80055b0:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 80055b4:	4b54      	ldr	r3, [pc, #336]	; (8005708 <Principal_Datalogger_Start+0x1a4>)
 80055b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	da25      	bge.n	800560a <Principal_Datalogger_Start+0xa6>
			&& (ECU_Data.wheel_speed_fr < Threshold_Speed)
 80055be:	4b50      	ldr	r3, [pc, #320]	; (8005700 <Principal_Datalogger_Start+0x19c>)
 80055c0:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 80055c4:	4b50      	ldr	r3, [pc, #320]	; (8005708 <Principal_Datalogger_Start+0x1a4>)
 80055c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	da1d      	bge.n	800560a <Principal_Datalogger_Start+0xa6>
			&& (ECU_Data.wheel_speed_rl < Threshold_Speed)
 80055ce:	4b4c      	ldr	r3, [pc, #304]	; (8005700 <Principal_Datalogger_Start+0x19c>)
 80055d0:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 80055d4:	4b4c      	ldr	r3, [pc, #304]	; (8005708 <Principal_Datalogger_Start+0x1a4>)
 80055d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055da:	429a      	cmp	r2, r3
 80055dc:	da15      	bge.n	800560a <Principal_Datalogger_Start+0xa6>
			&& (ECU_Data.wheel_speed_rr < Threshold_Speed)
 80055de:	4b48      	ldr	r3, [pc, #288]	; (8005700 <Principal_Datalogger_Start+0x19c>)
 80055e0:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 80055e4:	4b48      	ldr	r3, [pc, #288]	; (8005708 <Principal_Datalogger_Start+0x1a4>)
 80055e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	da0d      	bge.n	800560a <Principal_Datalogger_Start+0xa6>
			&& (Flag_Datalogger != DL_But_Press)
 80055ee:	4b42      	ldr	r3, [pc, #264]	; (80056f8 <Principal_Datalogger_Start+0x194>)
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	2b03      	cmp	r3, #3
 80055f4:	d009      	beq.n	800560a <Principal_Datalogger_Start+0xa6>
			&& (HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_RESET))
 80055f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055fa:	4840      	ldr	r0, [pc, #256]	; (80056fc <Principal_Datalogger_Start+0x198>)
 80055fc:	f003 f8e4 	bl	80087c8 <HAL_GPIO_ReadPin>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <Principal_Datalogger_Start+0xa6>
		return FR_OK;
 8005606:	2300      	movs	r3, #0
 8005608:	e06f      	b.n	80056ea <Principal_Datalogger_Start+0x186>

	Datalogger_Buffer_Position = 0;
 800560a:	4b40      	ldr	r3, [pc, #256]	; (800570c <Principal_Datalogger_Start+0x1a8>)
 800560c:	2200      	movs	r2, #0
 800560e:	801a      	strh	r2, [r3, #0]
	memset(Datalogger_Buffer, '\0', DATALOGGER_BUFFER_SIZE);
 8005610:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005614:	2100      	movs	r1, #0
 8005616:	483e      	ldr	r0, [pc, #248]	; (8005710 <Principal_Datalogger_Start+0x1ac>)
 8005618:	f011 fb30 	bl	8016c7c <memset>

	Principal_RTC_Get_Date(sDate, sTime);
 800561c:	68b9      	ldr	r1, [r7, #8]
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f000 fb18 	bl	8005c54 <Principal_RTC_Get_Date>
	sprintf(dir, "%02d_%02d_%02d", sDate->Year, sDate->Month, sDate->Date);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	78db      	ldrb	r3, [r3, #3]
 8005628:	461a      	mov	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	785b      	ldrb	r3, [r3, #1]
 800562e:	4619      	mov	r1, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	789b      	ldrb	r3, [r3, #2]
 8005634:	9300      	str	r3, [sp, #0]
 8005636:	460b      	mov	r3, r1
 8005638:	4936      	ldr	r1, [pc, #216]	; (8005714 <Principal_Datalogger_Start+0x1b0>)
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f011 fb26 	bl	8016c8c <siprintf>

	sprintf(file, "%s/%02d_%02d_%02d_%02d_%02d_%02d.sd", dir, sDate->Year, sDate->Month, sDate->Date, sTime->Hours, sTime->Minutes, sTime->Seconds);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	78db      	ldrb	r3, [r3, #3]
 8005644:	461d      	mov	r5, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	785b      	ldrb	r3, [r3, #1]
 800564a:	461a      	mov	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	789b      	ldrb	r3, [r3, #2]
 8005650:	4619      	mov	r1, r3
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	781b      	ldrb	r3, [r3, #0]
 8005656:	4618      	mov	r0, r3
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	785b      	ldrb	r3, [r3, #1]
 800565c:	461c      	mov	r4, r3
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	789b      	ldrb	r3, [r3, #2]
 8005662:	9304      	str	r3, [sp, #16]
 8005664:	9403      	str	r4, [sp, #12]
 8005666:	9002      	str	r0, [sp, #8]
 8005668:	9101      	str	r1, [sp, #4]
 800566a:	9200      	str	r2, [sp, #0]
 800566c:	462b      	mov	r3, r5
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	4929      	ldr	r1, [pc, #164]	; (8005718 <Principal_Datalogger_Start+0x1b4>)
 8005672:	6838      	ldr	r0, [r7, #0]
 8005674:	f011 fb0a 	bl	8016c8c <siprintf>

	retVal = f_mkdir(dir);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f010 fb51 	bl	8015d20 <f_mkdir>
 800567e:	4603      	mov	r3, r0
 8005680:	75fb      	strb	r3, [r7, #23]

	res[0] = retVal;
 8005682:	4a26      	ldr	r2, [pc, #152]	; (800571c <Principal_Datalogger_Start+0x1b8>)
 8005684:	7dfb      	ldrb	r3, [r7, #23]
 8005686:	7013      	strb	r3, [r2, #0]

	if((retVal != FR_OK) && (retVal != FR_EXIST))
 8005688:	7dfb      	ldrb	r3, [r7, #23]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d007      	beq.n	800569e <Principal_Datalogger_Start+0x13a>
 800568e:	7dfb      	ldrb	r3, [r7, #23]
 8005690:	2b08      	cmp	r3, #8
 8005692:	d004      	beq.n	800569e <Principal_Datalogger_Start+0x13a>
	{
		Flag_Datalogger = DL_Error;
 8005694:	4b18      	ldr	r3, [pc, #96]	; (80056f8 <Principal_Datalogger_Start+0x194>)
 8005696:	2204      	movs	r2, #4
 8005698:	701a      	strb	r2, [r3, #0]
		return retVal;
 800569a:	7dfb      	ldrb	r3, [r7, #23]
 800569c:	e025      	b.n	80056ea <Principal_Datalogger_Start+0x186>
	}

	retVal = f_opendir(dir_struct, dir);
 800569e:	6879      	ldr	r1, [r7, #4]
 80056a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056a2:	f010 faca 	bl	8015c3a <f_opendir>
 80056a6:	4603      	mov	r3, r0
 80056a8:	75fb      	strb	r3, [r7, #23]

	res[1] = retVal;
 80056aa:	4a1c      	ldr	r2, [pc, #112]	; (800571c <Principal_Datalogger_Start+0x1b8>)
 80056ac:	7dfb      	ldrb	r3, [r7, #23]
 80056ae:	7053      	strb	r3, [r2, #1]

	if(retVal != FR_OK)
 80056b0:	7dfb      	ldrb	r3, [r7, #23]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d004      	beq.n	80056c0 <Principal_Datalogger_Start+0x15c>
	{
		Flag_Datalogger = DL_Error;
 80056b6:	4b10      	ldr	r3, [pc, #64]	; (80056f8 <Principal_Datalogger_Start+0x194>)
 80056b8:	2204      	movs	r2, #4
 80056ba:	701a      	strb	r2, [r3, #0]
		return retVal;
 80056bc:	7dfb      	ldrb	r3, [r7, #23]
 80056be:	e014      	b.n	80056ea <Principal_Datalogger_Start+0x186>
	}

	retVal = f_open(file_struct, file, FA_WRITE | FA_CREATE_ALWAYS);
 80056c0:	220a      	movs	r2, #10
 80056c2:	6839      	ldr	r1, [r7, #0]
 80056c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056c6:	f00f feed 	bl	80154a4 <f_open>
 80056ca:	4603      	mov	r3, r0
 80056cc:	75fb      	strb	r3, [r7, #23]

	res[2] = retVal;
 80056ce:	4a13      	ldr	r2, [pc, #76]	; (800571c <Principal_Datalogger_Start+0x1b8>)
 80056d0:	7dfb      	ldrb	r3, [r7, #23]
 80056d2:	7093      	strb	r3, [r2, #2]

	if(retVal == FR_OK)
 80056d4:	7dfb      	ldrb	r3, [r7, #23]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d103      	bne.n	80056e2 <Principal_Datalogger_Start+0x17e>
		Flag_Datalogger = DL_Save;
 80056da:	4b07      	ldr	r3, [pc, #28]	; (80056f8 <Principal_Datalogger_Start+0x194>)
 80056dc:	2201      	movs	r2, #1
 80056de:	701a      	strb	r2, [r3, #0]
 80056e0:	e002      	b.n	80056e8 <Principal_Datalogger_Start+0x184>
	else
		Flag_Datalogger = DL_Error;
 80056e2:	4b05      	ldr	r3, [pc, #20]	; (80056f8 <Principal_Datalogger_Start+0x194>)
 80056e4:	2204      	movs	r2, #4
 80056e6:	701a      	strb	r2, [r3, #0]

	return retVal;
 80056e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3718      	adds	r7, #24
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bdb0      	pop	{r4, r5, r7, pc}
 80056f2:	bf00      	nop
 80056f4:	40020800 	.word	0x40020800
 80056f8:	20001bd0 	.word	0x20001bd0
 80056fc:	40020000 	.word	0x40020000
 8005700:	20002e24 	.word	0x20002e24
 8005704:	20001c5c 	.word	0x20001c5c
 8005708:	20001a60 	.word	0x20001a60
 800570c:	200007bc 	.word	0x200007bc
 8005710:	200007cc 	.word	0x200007cc
 8005714:	080174e4 	.word	0x080174e4
 8005718:	080174f4 	.word	0x080174f4
 800571c:	20002e8c 	.word	0x20002e8c

08005720 <Principal_Datalogger_Finish>:

FRESULT Principal_Datalogger_Finish(DIR* dir_struct, FIL* file_struct)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	6039      	str	r1, [r7, #0]
	FRESULT retVal = FR_OK;
 800572a:	2300      	movs	r3, #0
 800572c:	73fb      	strb	r3, [r7, #15]

	f_closedir(dir_struct);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f010 fade 	bl	8015cf0 <f_closedir>
	retVal = f_close(file_struct);
 8005734:	6838      	ldr	r0, [r7, #0]
 8005736:	f010 fa60 	bl	8015bfa <f_close>
 800573a:	4603      	mov	r3, r0
 800573c:	73fb      	strb	r3, [r7, #15]

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 800573e:	2180      	movs	r1, #128	; 0x80
 8005740:	480c      	ldr	r0, [pc, #48]	; (8005774 <Principal_Datalogger_Finish+0x54>)
 8005742:	f003 f841 	bl	80087c8 <HAL_GPIO_ReadPin>
 8005746:	4603      	mov	r3, r0
 8005748:	2b01      	cmp	r3, #1
 800574a:	d108      	bne.n	800575e <Principal_Datalogger_Finish+0x3e>
	{
		f_mount(0, SDPath, 0);
 800574c:	2200      	movs	r2, #0
 800574e:	490a      	ldr	r1, [pc, #40]	; (8005778 <Principal_Datalogger_Finish+0x58>)
 8005750:	2000      	movs	r0, #0
 8005752:	f00f fe63 	bl	801541c <f_mount>
		Flag_Datalogger = DL_No_Card;
 8005756:	4b09      	ldr	r3, [pc, #36]	; (800577c <Principal_Datalogger_Finish+0x5c>)
 8005758:	2202      	movs	r2, #2
 800575a:	701a      	strb	r2, [r3, #0]
 800575c:	e002      	b.n	8005764 <Principal_Datalogger_Finish+0x44>
	}

	else
		Flag_Datalogger = DL_No_Save;
 800575e:	4b07      	ldr	r3, [pc, #28]	; (800577c <Principal_Datalogger_Finish+0x5c>)
 8005760:	2200      	movs	r2, #0
 8005762:	701a      	strb	r2, [r3, #0]

	Verify_Datalogger = 0;
 8005764:	4b06      	ldr	r3, [pc, #24]	; (8005780 <Principal_Datalogger_Finish+0x60>)
 8005766:	2200      	movs	r2, #0
 8005768:	701a      	strb	r2, [r3, #0]

	return retVal;
 800576a:	7bfb      	ldrb	r3, [r7, #15]
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	40020800 	.word	0x40020800
 8005778:	20002e9c 	.word	0x20002e9c
 800577c:	20001bd0 	.word	0x20001bd0
 8005780:	20001a10 	.word	0x20001a10

08005784 <Principal_Datalogger_Save_Buffer>:

void Principal_Datalogger_Save_Buffer(uint32_t Data_ID, uint8_t Data_Length, uint8_t* Data_Buffer, FIL* file_struct)
{
 8005784:	b5b0      	push	{r4, r5, r7, lr}
 8005786:	b08a      	sub	sp, #40	; 0x28
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	607a      	str	r2, [r7, #4]
 800578e:	603b      	str	r3, [r7, #0]
 8005790:	460b      	mov	r3, r1
 8005792:	72fb      	strb	r3, [r7, #11]
 8005794:	466b      	mov	r3, sp
 8005796:	461d      	mov	r5, r3
	uint8_t buffer[5 + Data_Length];
 8005798:	7afb      	ldrb	r3, [r7, #11]
 800579a:	1d5c      	adds	r4, r3, #5
 800579c:	1e63      	subs	r3, r4, #1
 800579e:	623b      	str	r3, [r7, #32]
 80057a0:	4623      	mov	r3, r4
 80057a2:	4618      	mov	r0, r3
 80057a4:	f04f 0100 	mov.w	r1, #0
 80057a8:	f04f 0200 	mov.w	r2, #0
 80057ac:	f04f 0300 	mov.w	r3, #0
 80057b0:	00cb      	lsls	r3, r1, #3
 80057b2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80057b6:	00c2      	lsls	r2, r0, #3
 80057b8:	4623      	mov	r3, r4
 80057ba:	4618      	mov	r0, r3
 80057bc:	f04f 0100 	mov.w	r1, #0
 80057c0:	f04f 0200 	mov.w	r2, #0
 80057c4:	f04f 0300 	mov.w	r3, #0
 80057c8:	00cb      	lsls	r3, r1, #3
 80057ca:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80057ce:	00c2      	lsls	r2, r0, #3
 80057d0:	4623      	mov	r3, r4
 80057d2:	3307      	adds	r3, #7
 80057d4:	08db      	lsrs	r3, r3, #3
 80057d6:	00db      	lsls	r3, r3, #3
 80057d8:	ebad 0d03 	sub.w	sp, sp, r3
 80057dc:	466b      	mov	r3, sp
 80057de:	3300      	adds	r3, #0
 80057e0:	61fb      	str	r3, [r7, #28]
	UINT byte;
	FRESULT verify[2];

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 80057e2:	2180      	movs	r1, #128	; 0x80
 80057e4:	4848      	ldr	r0, [pc, #288]	; (8005908 <Principal_Datalogger_Save_Buffer+0x184>)
 80057e6:	f002 ffef 	bl	80087c8 <HAL_GPIO_ReadPin>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	f000 8083 	beq.w	80058f8 <Principal_Datalogger_Save_Buffer+0x174>
		return;

	else if(HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_SET)
 80057f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80057f6:	4845      	ldr	r0, [pc, #276]	; (800590c <Principal_Datalogger_Save_Buffer+0x188>)
 80057f8:	f002 ffe6 	bl	80087c8 <HAL_GPIO_ReadPin>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d07c      	beq.n	80058fc <Principal_Datalogger_Save_Buffer+0x178>
		return;

	buffer[0] = 'D';
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	2244      	movs	r2, #68	; 0x44
 8005806:	701a      	strb	r2, [r3, #0]
	buffer[1] = 'L';
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	224c      	movs	r2, #76	; 0x4c
 800580c:	705a      	strb	r2, [r3, #1]
	buffer[2] = Data_ID & 0xff;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	b2da      	uxtb	r2, r3
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	709a      	strb	r2, [r3, #2]
	buffer[3] = Data_Length;
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	7afa      	ldrb	r2, [r7, #11]
 800581a:	70da      	strb	r2, [r3, #3]
	buffer[4] = Acc_Datalogger[0];
 800581c:	4b3c      	ldr	r3, [pc, #240]	; (8005910 <Principal_Datalogger_Save_Buffer+0x18c>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	b2da      	uxtb	r2, r3
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	711a      	strb	r2, [r3, #4]

	Acc_Datalogger[0] = 0;
 8005826:	4b3a      	ldr	r3, [pc, #232]	; (8005910 <Principal_Datalogger_Save_Buffer+0x18c>)
 8005828:	2200      	movs	r2, #0
 800582a:	601a      	str	r2, [r3, #0]

	for(uint8_t i = 0; i < Data_Length; i++)
 800582c:	2300      	movs	r3, #0
 800582e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005832:	e00e      	b.n	8005852 <Principal_Datalogger_Save_Buffer+0xce>
		buffer[5 + i] = Data_Buffer[i];
 8005834:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	441a      	add	r2, r3
 800583c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005840:	3305      	adds	r3, #5
 8005842:	7811      	ldrb	r1, [r2, #0]
 8005844:	69fa      	ldr	r2, [r7, #28]
 8005846:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < Data_Length; i++)
 8005848:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800584c:	3301      	adds	r3, #1
 800584e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005852:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005856:	7afb      	ldrb	r3, [r7, #11]
 8005858:	429a      	cmp	r2, r3
 800585a:	d3eb      	bcc.n	8005834 <Principal_Datalogger_Save_Buffer+0xb0>

//	memcpy(&buffer[5], Data_Buffer, Data_Length);

	memcpy(Datalogger_Buffer + Datalogger_Buffer_Position, buffer, 5 + Data_Length);
 800585c:	4b2d      	ldr	r3, [pc, #180]	; (8005914 <Principal_Datalogger_Save_Buffer+0x190>)
 800585e:	881b      	ldrh	r3, [r3, #0]
 8005860:	461a      	mov	r2, r3
 8005862:	4b2d      	ldr	r3, [pc, #180]	; (8005918 <Principal_Datalogger_Save_Buffer+0x194>)
 8005864:	18d0      	adds	r0, r2, r3
 8005866:	69f9      	ldr	r1, [r7, #28]
 8005868:	7afb      	ldrb	r3, [r7, #11]
 800586a:	3305      	adds	r3, #5
 800586c:	461a      	mov	r2, r3
 800586e:	f011 f9f7 	bl	8016c60 <memcpy>

	Datalogger_Buffer_Position += (5 + Data_Length);
 8005872:	7afb      	ldrb	r3, [r7, #11]
 8005874:	b29a      	uxth	r2, r3
 8005876:	4b27      	ldr	r3, [pc, #156]	; (8005914 <Principal_Datalogger_Save_Buffer+0x190>)
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	4413      	add	r3, r2
 800587c:	b29b      	uxth	r3, r3
 800587e:	3305      	adds	r3, #5
 8005880:	b29a      	uxth	r2, r3
 8005882:	4b24      	ldr	r3, [pc, #144]	; (8005914 <Principal_Datalogger_Save_Buffer+0x190>)
 8005884:	801a      	strh	r2, [r3, #0]

	if(Datalogger_Buffer_Position > DATALOGGER_SAVE_THR)
 8005886:	4b23      	ldr	r3, [pc, #140]	; (8005914 <Principal_Datalogger_Save_Buffer+0x190>)
 8005888:	881b      	ldrh	r3, [r3, #0]
 800588a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800588e:	d331      	bcc.n	80058f4 <Principal_Datalogger_Save_Buffer+0x170>
	{
		Datalogger_Buffer_Position++;
 8005890:	4b20      	ldr	r3, [pc, #128]	; (8005914 <Principal_Datalogger_Save_Buffer+0x190>)
 8005892:	881b      	ldrh	r3, [r3, #0]
 8005894:	3301      	adds	r3, #1
 8005896:	b29a      	uxth	r2, r3
 8005898:	4b1e      	ldr	r3, [pc, #120]	; (8005914 <Principal_Datalogger_Save_Buffer+0x190>)
 800589a:	801a      	strh	r2, [r3, #0]

		verify[0] = f_write(file_struct, Datalogger_Buffer, Datalogger_Buffer_Position, &byte);
 800589c:	4b1d      	ldr	r3, [pc, #116]	; (8005914 <Principal_Datalogger_Save_Buffer+0x190>)
 800589e:	881b      	ldrh	r3, [r3, #0]
 80058a0:	461a      	mov	r2, r3
 80058a2:	f107 0318 	add.w	r3, r7, #24
 80058a6:	491c      	ldr	r1, [pc, #112]	; (8005918 <Principal_Datalogger_Save_Buffer+0x194>)
 80058a8:	6838      	ldr	r0, [r7, #0]
 80058aa:	f00f ff94 	bl	80157d6 <f_write>
 80058ae:	4603      	mov	r3, r0
 80058b0:	753b      	strb	r3, [r7, #20]
		verify[1] = f_sync(file_struct);
 80058b2:	6838      	ldr	r0, [r7, #0]
 80058b4:	f010 f923 	bl	8015afe <f_sync>
 80058b8:	4603      	mov	r3, r0
 80058ba:	757b      	strb	r3, [r7, #21]

		res[3] = verify[0];
 80058bc:	7d3a      	ldrb	r2, [r7, #20]
 80058be:	4b17      	ldr	r3, [pc, #92]	; (800591c <Principal_Datalogger_Save_Buffer+0x198>)
 80058c0:	70da      	strb	r2, [r3, #3]
		res[4] = verify[1];
 80058c2:	7d7a      	ldrb	r2, [r7, #21]
 80058c4:	4b15      	ldr	r3, [pc, #84]	; (800591c <Principal_Datalogger_Save_Buffer+0x198>)
 80058c6:	711a      	strb	r2, [r3, #4]

		if((verify[0] == FR_OK) && (verify[1] == FR_OK) && (Datalogger_Buffer_Position == byte))
 80058c8:	7d3b      	ldrb	r3, [r7, #20]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10c      	bne.n	80058e8 <Principal_Datalogger_Save_Buffer+0x164>
 80058ce:	7d7b      	ldrb	r3, [r7, #21]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d109      	bne.n	80058e8 <Principal_Datalogger_Save_Buffer+0x164>
 80058d4:	4b0f      	ldr	r3, [pc, #60]	; (8005914 <Principal_Datalogger_Save_Buffer+0x190>)
 80058d6:	881b      	ldrh	r3, [r3, #0]
 80058d8:	461a      	mov	r2, r3
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d103      	bne.n	80058e8 <Principal_Datalogger_Save_Buffer+0x164>
			Verify_Datalogger = 1;
 80058e0:	4b0f      	ldr	r3, [pc, #60]	; (8005920 <Principal_Datalogger_Save_Buffer+0x19c>)
 80058e2:	2201      	movs	r2, #1
 80058e4:	701a      	strb	r2, [r3, #0]
 80058e6:	e002      	b.n	80058ee <Principal_Datalogger_Save_Buffer+0x16a>
		else
			Verify_Datalogger = 0;
 80058e8:	4b0d      	ldr	r3, [pc, #52]	; (8005920 <Principal_Datalogger_Save_Buffer+0x19c>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	701a      	strb	r2, [r3, #0]

		Datalogger_Buffer_Position = 0;
 80058ee:	4b09      	ldr	r3, [pc, #36]	; (8005914 <Principal_Datalogger_Save_Buffer+0x190>)
 80058f0:	2200      	movs	r2, #0
 80058f2:	801a      	strh	r2, [r3, #0]
 80058f4:	46ad      	mov	sp, r5
 80058f6:	e003      	b.n	8005900 <Principal_Datalogger_Save_Buffer+0x17c>
		return;
 80058f8:	bf00      	nop
 80058fa:	e000      	b.n	80058fe <Principal_Datalogger_Save_Buffer+0x17a>
		return;
 80058fc:	bf00      	nop
 80058fe:	46ad      	mov	sp, r5
	}
}
 8005900:	3728      	adds	r7, #40	; 0x28
 8005902:	46bd      	mov	sp, r7
 8005904:	bdb0      	pop	{r4, r5, r7, pc}
 8005906:	bf00      	nop
 8005908:	40020800 	.word	0x40020800
 800590c:	40020000 	.word	0x40020000
 8005910:	20002e1c 	.word	0x20002e1c
 8005914:	200007bc 	.word	0x200007bc
 8005918:	200007cc 	.word	0x200007cc
 800591c:	20002e8c 	.word	0x20002e8c
 8005920:	20001a10 	.word	0x20001a10

08005924 <Principal_Datalogger_Button>:

void Principal_Datalogger_Button(DIR* dir_struct, FIL* file_struct)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
	if(Acc_Datalogger[1] == 0)
 800592e:	4b0c      	ldr	r3, [pc, #48]	; (8005960 <Principal_Datalogger_Button+0x3c>)
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10f      	bne.n	8005956 <Principal_Datalogger_Button+0x32>
	{
		Acc_Datalogger[1] = BUTTON_COOLDOWN;
 8005936:	4b0a      	ldr	r3, [pc, #40]	; (8005960 <Principal_Datalogger_Button+0x3c>)
 8005938:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800593c:	605a      	str	r2, [r3, #4]

		if(Flag_Datalogger == DL_No_Save)
 800593e:	4b09      	ldr	r3, [pc, #36]	; (8005964 <Principal_Datalogger_Button+0x40>)
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d103      	bne.n	800594e <Principal_Datalogger_Button+0x2a>
			Flag_Datalogger = DL_But_Press;
 8005946:	4b07      	ldr	r3, [pc, #28]	; (8005964 <Principal_Datalogger_Button+0x40>)
 8005948:	2203      	movs	r2, #3
 800594a:	701a      	strb	r2, [r3, #0]

		else
			Principal_Datalogger_Finish(dir_struct, file_struct);
	}
}
 800594c:	e003      	b.n	8005956 <Principal_Datalogger_Button+0x32>
			Principal_Datalogger_Finish(dir_struct, file_struct);
 800594e:	6839      	ldr	r1, [r7, #0]
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f7ff fee5 	bl	8005720 <Principal_Datalogger_Finish>
}
 8005956:	bf00      	nop
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	20002e1c 	.word	0x20002e1c
 8005964:	20001bd0 	.word	0x20001bd0

08005968 <Principal_Card_Detection>:

void Principal_Card_Detection(FATFS* fatfs_struct, DIR* dir_struct, FIL* file_struct)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
	GPIO_PinState cd_pin = HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin);
 8005974:	2180      	movs	r1, #128	; 0x80
 8005976:	4811      	ldr	r0, [pc, #68]	; (80059bc <Principal_Card_Detection+0x54>)
 8005978:	f002 ff26 	bl	80087c8 <HAL_GPIO_ReadPin>
 800597c:	4603      	mov	r3, r0
 800597e:	75fb      	strb	r3, [r7, #23]

	if((cd_pin == GPIO_PIN_SET) && ((Flag_Datalogger == DL_Save) || (Flag_Datalogger == DL_Error)))
 8005980:	7dfb      	ldrb	r3, [r7, #23]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d10c      	bne.n	80059a0 <Principal_Card_Detection+0x38>
 8005986:	4b0e      	ldr	r3, [pc, #56]	; (80059c0 <Principal_Card_Detection+0x58>)
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d003      	beq.n	8005996 <Principal_Card_Detection+0x2e>
 800598e:	4b0c      	ldr	r3, [pc, #48]	; (80059c0 <Principal_Card_Detection+0x58>)
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	2b04      	cmp	r3, #4
 8005994:	d104      	bne.n	80059a0 <Principal_Card_Detection+0x38>
		Principal_Datalogger_Finish(dir_struct, file_struct);
 8005996:	6879      	ldr	r1, [r7, #4]
 8005998:	68b8      	ldr	r0, [r7, #8]
 800599a:	f7ff fec1 	bl	8005720 <Principal_Datalogger_Finish>

	else if((cd_pin == GPIO_PIN_RESET) && (Flag_Datalogger == DL_No_Card))
		Principal_Datalogger_Init(fatfs_struct);
}
 800599e:	e009      	b.n	80059b4 <Principal_Card_Detection+0x4c>
	else if((cd_pin == GPIO_PIN_RESET) && (Flag_Datalogger == DL_No_Card))
 80059a0:	7dfb      	ldrb	r3, [r7, #23]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d106      	bne.n	80059b4 <Principal_Card_Detection+0x4c>
 80059a6:	4b06      	ldr	r3, [pc, #24]	; (80059c0 <Principal_Card_Detection+0x58>)
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d102      	bne.n	80059b4 <Principal_Card_Detection+0x4c>
		Principal_Datalogger_Init(fatfs_struct);
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f7ff fda4 	bl	80054fc <Principal_Datalogger_Init>
}
 80059b4:	bf00      	nop
 80059b6:	3718      	adds	r7, #24
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	40020800 	.word	0x40020800
 80059c0:	20001bd0 	.word	0x20001bd0

080059c4 <Principal_Beacon_Detect>:

void Principal_Beacon_Detect()
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	af00      	add	r7, sp, #0
	Lap_Number++;
 80059c8:	4b05      	ldr	r3, [pc, #20]	; (80059e0 <Principal_Beacon_Detect+0x1c>)
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	3301      	adds	r3, #1
 80059ce:	b2da      	uxtb	r2, r3
 80059d0:	4b03      	ldr	r3, [pc, #12]	; (80059e0 <Principal_Beacon_Detect+0x1c>)
 80059d2:	701a      	strb	r2, [r3, #0]

	Principal_Transmit_Msg(&hcan1, Beacon_Msg);
 80059d4:	2107      	movs	r1, #7
 80059d6:	4803      	ldr	r0, [pc, #12]	; (80059e4 <Principal_Beacon_Detect+0x20>)
 80059d8:	f7fd fe08 	bl	80035ec <Principal_Transmit_Msg>
}
 80059dc:	bf00      	nop
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	20002cc4 	.word	0x20002cc4
 80059e4:	20002d2c 	.word	0x20002d2c

080059e8 <HAL_CAN_RxFifo0MsgPendingCallback>:
 */

#include "principal.h"

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 80059f0:	4b2c      	ldr	r3, [pc, #176]	; (8005aa4 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 80059f2:	4a2d      	ldr	r2, [pc, #180]	; (8005aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 80059f4:	2100      	movs	r1, #0
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f001 fd3a 	bl	8007470 <HAL_CAN_GetRxMessage>
 80059fc:	4603      	mov	r3, r0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d143      	bne.n	8005a8a <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
	{
		Verify_CAN |= 2;
 8005a02:	4b2a      	ldr	r3, [pc, #168]	; (8005aac <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	f043 0302 	orr.w	r3, r3, #2
 8005a0a:	b2da      	uxtb	r2, r3
 8005a0c:	4b27      	ldr	r3, [pc, #156]	; (8005aac <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8005a0e:	701a      	strb	r2, [r3, #0]

		if((RxHeader.IDE == CAN_ID_STD) && (Flag_Datalogger == DL_Save))
 8005a10:	4b25      	ldr	r3, [pc, #148]	; (8005aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10d      	bne.n	8005a34 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
 8005a18:	4b25      	ldr	r3, [pc, #148]	; (8005ab0 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d109      	bne.n	8005a34 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
			Principal_Datalogger_Save_Buffer(RxHeader.StdId, RxHeader.DLC, RxData, &File_Struct);
 8005a20:	4b21      	ldr	r3, [pc, #132]	; (8005aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8005a22:	6818      	ldr	r0, [r3, #0]
 8005a24:	4b20      	ldr	r3, [pc, #128]	; (8005aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	b2d9      	uxtb	r1, r3
 8005a2a:	4b22      	ldr	r3, [pc, #136]	; (8005ab4 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8005a2c:	4a1d      	ldr	r2, [pc, #116]	; (8005aa4 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8005a2e:	f7ff fea9 	bl	8005784 <Principal_Datalogger_Save_Buffer>
 8005a32:	e032      	b.n	8005a9a <HAL_CAN_RxFifo0MsgPendingCallback+0xb2>

		else if(((RxHeader.ExtId & 0x1FFFF000) == 0x1E35C000) && (RxHeader.IDE == CAN_ID_EXT))
 8005a34:	4b1c      	ldr	r3, [pc, #112]	; (8005aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	4b1f      	ldr	r3, [pc, #124]	; (8005ab8 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	4a1f      	ldr	r2, [pc, #124]	; (8005abc <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d10d      	bne.n	8005a5e <HAL_CAN_RxFifo0MsgPendingCallback+0x76>
 8005a42:	4b19      	ldr	r3, [pc, #100]	; (8005aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	d109      	bne.n	8005a5e <HAL_CAN_RxFifo0MsgPendingCallback+0x76>
			PDM_CAN_Process_Data(RxHeader.ExtId, RxHeader.DLC, RxData, &PDM_Readings);
 8005a4a:	4b17      	ldr	r3, [pc, #92]	; (8005aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8005a4c:	6858      	ldr	r0, [r3, #4]
 8005a4e:	4b16      	ldr	r3, [pc, #88]	; (8005aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8005a50:	691b      	ldr	r3, [r3, #16]
 8005a52:	b2d9      	uxtb	r1, r3
 8005a54:	4b1a      	ldr	r3, [pc, #104]	; (8005ac0 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8005a56:	4a13      	ldr	r2, [pc, #76]	; (8005aa4 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8005a58:	f7fc fb1c 	bl	8002094 <PDM_CAN_Process_Data>
 8005a5c:	e01d      	b.n	8005a9a <HAL_CAN_RxFifo0MsgPendingCallback+0xb2>

		else if((RxHeader.ExtId == CONFIG_ID) && (RxHeader.IDE == CAN_ID_EXT))
 8005a5e:	4b12      	ldr	r3, [pc, #72]	; (8005aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d108      	bne.n	8005a78 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>
 8005a66:	4b10      	ldr	r3, [pc, #64]	; (8005aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	2b04      	cmp	r3, #4
 8005a6c:	d104      	bne.n	8005a78 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>
			Principal_Receive_Config(&hi2c1, RxData);
 8005a6e:	490d      	ldr	r1, [pc, #52]	; (8005aa4 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8005a70:	4814      	ldr	r0, [pc, #80]	; (8005ac4 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8005a72:	f7ff f959 	bl	8004d28 <Principal_Receive_Config>
 8005a76:	e010      	b.n	8005a9a <HAL_CAN_RxFifo0MsgPendingCallback+0xb2>

		else
			FT_CAN_ReceiveData(RxHeader.ExtId, RxHeader.DLC, RxData, &ECU_Data);
 8005a78:	4b0b      	ldr	r3, [pc, #44]	; (8005aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8005a7a:	6858      	ldr	r0, [r3, #4]
 8005a7c:	4b0a      	ldr	r3, [pc, #40]	; (8005aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8005a7e:	6919      	ldr	r1, [r3, #16]
 8005a80:	4b11      	ldr	r3, [pc, #68]	; (8005ac8 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8005a82:	4a08      	ldr	r2, [pc, #32]	; (8005aa4 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8005a84:	f7fb f824 	bl	8000ad0 <FT_CAN_ReceiveData>
	}

	else
		Verify_CAN &= 1;
}
 8005a88:	e007      	b.n	8005a9a <HAL_CAN_RxFifo0MsgPendingCallback+0xb2>
		Verify_CAN &= 1;
 8005a8a:	4b08      	ldr	r3, [pc, #32]	; (8005aac <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	b2da      	uxtb	r2, r3
 8005a94:	4b05      	ldr	r3, [pc, #20]	; (8005aac <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8005a96:	701a      	strb	r2, [r3, #0]
}
 8005a98:	e7ff      	b.n	8005a9a <HAL_CAN_RxFifo0MsgPendingCallback+0xb2>
 8005a9a:	bf00      	nop
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	20001c7c 	.word	0x20001c7c
 8005aa8:	20002db0 	.word	0x20002db0
 8005aac:	20001a58 	.word	0x20001a58
 8005ab0:	20001bd0 	.word	0x20001bd0
 8005ab4:	20001c84 	.word	0x20001c84
 8005ab8:	1ffff000 	.word	0x1ffff000
 8005abc:	1e35c000 	.word	0x1e35c000
 8005ac0:	20001a14 	.word	0x20001a14
 8005ac4:	20000768 	.word	0x20000768
 8005ac8:	20002e24 	.word	0x20002e24

08005acc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == EXTI0_Pin)
 8005ad6:	88fb      	ldrh	r3, [r7, #6]
 8005ad8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005adc:	d111      	bne.n	8005b02 <HAL_GPIO_EXTI_Callback+0x36>
	{
		if((Input_Config & 0x01) == 0)
 8005ade:	4b16      	ldr	r3, [pc, #88]	; (8005b38 <HAL_GPIO_EXTI_Callback+0x6c>)
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d101      	bne.n	8005aee <HAL_GPIO_EXTI_Callback+0x22>
			Principal_Beacon_Detect();
 8005aea:	f7ff ff6b 	bl	80059c4 <Principal_Beacon_Detect>

		if((Input_Config & 0x02) == 0)
 8005aee:	4b12      	ldr	r3, [pc, #72]	; (8005b38 <HAL_GPIO_EXTI_Callback+0x6c>)
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d103      	bne.n	8005b02 <HAL_GPIO_EXTI_Callback+0x36>
			Principal_Datalogger_Button(&Dir_Struct, &File_Struct);
 8005afa:	4910      	ldr	r1, [pc, #64]	; (8005b3c <HAL_GPIO_EXTI_Callback+0x70>)
 8005afc:	4810      	ldr	r0, [pc, #64]	; (8005b40 <HAL_GPIO_EXTI_Callback+0x74>)
 8005afe:	f7ff ff11 	bl	8005924 <Principal_Datalogger_Button>
	}

	if(GPIO_Pin == EXTI1_Pin)
 8005b02:	88fb      	ldrh	r3, [r7, #6]
 8005b04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b08:	d111      	bne.n	8005b2e <HAL_GPIO_EXTI_Callback+0x62>
	{
		if((Input_Config & 0x01) == 1)
 8005b0a:	4b0b      	ldr	r3, [pc, #44]	; (8005b38 <HAL_GPIO_EXTI_Callback+0x6c>)
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d001      	beq.n	8005b1a <HAL_GPIO_EXTI_Callback+0x4e>
			Principal_Beacon_Detect();
 8005b16:	f7ff ff55 	bl	80059c4 <Principal_Beacon_Detect>

		if((Input_Config & 0x02) == 2)
 8005b1a:	4b07      	ldr	r3, [pc, #28]	; (8005b38 <HAL_GPIO_EXTI_Callback+0x6c>)
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <HAL_GPIO_EXTI_Callback+0x62>
			Principal_Datalogger_Button(&Dir_Struct, &File_Struct);
 8005b26:	4905      	ldr	r1, [pc, #20]	; (8005b3c <HAL_GPIO_EXTI_Callback+0x70>)
 8005b28:	4805      	ldr	r0, [pc, #20]	; (8005b40 <HAL_GPIO_EXTI_Callback+0x74>)
 8005b2a:	f7ff fefb 	bl	8005924 <Principal_Datalogger_Button>
	}
}
 8005b2e:	bf00      	nop
 8005b30:	3708      	adds	r7, #8
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	200006f8 	.word	0x200006f8
 8005b3c:	20001c84 	.word	0x20001c84
 8005b40:	20001a64 	.word	0x20001a64

08005b44 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a26      	ldr	r2, [pc, #152]	; (8005bec <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d144      	bne.n	8005be0 <HAL_TIM_PeriodElapsedCallback+0x9c>
	{
		Acc_Datalogger[0]++;
 8005b56:	4b26      	ldr	r3, [pc, #152]	; (8005bf0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	4a24      	ldr	r2, [pc, #144]	; (8005bf0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8005b5e:	6013      	str	r3, [r2, #0]
		if(Acc_Datalogger[1] > 0) Acc_Datalogger[1]--;
 8005b60:	4b23      	ldr	r3, [pc, #140]	; (8005bf0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d004      	beq.n	8005b72 <HAL_TIM_PeriodElapsedCallback+0x2e>
 8005b68:	4b21      	ldr	r3, [pc, #132]	; (8005bf0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	4a20      	ldr	r2, [pc, #128]	; (8005bf0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8005b70:	6053      	str	r3, [r2, #4]

		Acc_CAN[Analog_1_4]++;
 8005b72:	4b20      	ldr	r3, [pc, #128]	; (8005bf4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	3301      	adds	r3, #1
 8005b78:	4a1e      	ldr	r2, [pc, #120]	; (8005bf4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005b7a:	6013      	str	r3, [r2, #0]
		Acc_CAN[Analog_5_8]++;
 8005b7c:	4b1d      	ldr	r3, [pc, #116]	; (8005bf4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	3301      	adds	r3, #1
 8005b82:	4a1c      	ldr	r2, [pc, #112]	; (8005bf4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005b84:	6053      	str	r3, [r2, #4]
		Acc_CAN[Analog_9_12]++;
 8005b86:	4b1b      	ldr	r3, [pc, #108]	; (8005bf4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	4a19      	ldr	r2, [pc, #100]	; (8005bf4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005b8e:	6093      	str	r3, [r2, #8]
		Acc_CAN[RTC_Msg]++;
 8005b90:	4b18      	ldr	r3, [pc, #96]	; (8005bf4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	3301      	adds	r3, #1
 8005b96:	4a17      	ldr	r2, [pc, #92]	; (8005bf4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005b98:	60d3      	str	r3, [r2, #12]

		Acc_Msg[Analog_1_4]++;
 8005b9a:	4b17      	ldr	r3, [pc, #92]	; (8005bf8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	3301      	adds	r3, #1
 8005ba0:	4a15      	ldr	r2, [pc, #84]	; (8005bf8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005ba2:	6013      	str	r3, [r2, #0]
		Acc_Msg[Analog_5_8]++;
 8005ba4:	4b14      	ldr	r3, [pc, #80]	; (8005bf8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	4a13      	ldr	r2, [pc, #76]	; (8005bf8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005bac:	6053      	str	r3, [r2, #4]
		Acc_Msg[Analog_9_12]++;
 8005bae:	4b12      	ldr	r3, [pc, #72]	; (8005bf8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	4a10      	ldr	r2, [pc, #64]	; (8005bf8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005bb6:	6093      	str	r3, [r2, #8]
		Acc_Msg[RTC_Msg]++;
 8005bb8:	4b0f      	ldr	r3, [pc, #60]	; (8005bf8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	4a0e      	ldr	r2, [pc, #56]	; (8005bf8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005bc0:	60d3      	str	r3, [r2, #12]
		Acc_Msg[Verify_Msg]++;
 8005bc2:	4b0d      	ldr	r3, [pc, #52]	; (8005bf8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	4a0b      	ldr	r2, [pc, #44]	; (8005bf8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005bca:	6113      	str	r3, [r2, #16]
		Acc_Msg[ECU_Save]++;
 8005bcc:	4b0a      	ldr	r3, [pc, #40]	; (8005bf8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	3301      	adds	r3, #1
 8005bd2:	4a09      	ldr	r2, [pc, #36]	; (8005bf8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005bd4:	6153      	str	r3, [r2, #20]
		Acc_Msg[PDM_Save]++;
 8005bd6:	4b08      	ldr	r3, [pc, #32]	; (8005bf8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	4a06      	ldr	r2, [pc, #24]	; (8005bf8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005bde:	6193      	str	r3, [r2, #24]
	}
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr
 8005bec:	40001400 	.word	0x40001400
 8005bf0:	20002e1c 	.word	0x20002e1c
 8005bf4:	20002d54 	.word	0x20002d54
 8005bf8:	20001c60 	.word	0x20001c60

08005bfc <Principal_RTC_Reg_Check>:
 */

#include "principal.h"

void Principal_RTC_Reg_Check(RTC_DateTypeDef *sDate, RTC_TimeTypeDef *sTime)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
	if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) == RTC_STORE_DATA)
 8005c06:	2101      	movs	r1, #1
 8005c08:	480e      	ldr	r0, [pc, #56]	; (8005c44 <Principal_RTC_Reg_Check+0x48>)
 8005c0a:	f006 faa5 	bl	800c158 <HAL_RTCEx_BKUPRead>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	f24e 325c 	movw	r2, #58204	; 0xe35c
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d103      	bne.n	8005c20 <Principal_RTC_Reg_Check+0x24>
		Flag_RTC = RTC_OK;
 8005c18:	4b0b      	ldr	r3, [pc, #44]	; (8005c48 <Principal_RTC_Reg_Check+0x4c>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	701a      	strb	r2, [r3, #0]
 8005c1e:	e002      	b.n	8005c26 <Principal_RTC_Reg_Check+0x2a>

	else
		Flag_RTC = RTC_Lost;
 8005c20:	4b09      	ldr	r3, [pc, #36]	; (8005c48 <Principal_RTC_Reg_Check+0x4c>)
 8005c22:	2201      	movs	r2, #1
 8005c24:	701a      	strb	r2, [r3, #0]

	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8005c26:	2200      	movs	r2, #0
 8005c28:	4908      	ldr	r1, [pc, #32]	; (8005c4c <Principal_RTC_Reg_Check+0x50>)
 8005c2a:	4806      	ldr	r0, [pc, #24]	; (8005c44 <Principal_RTC_Reg_Check+0x48>)
 8005c2c:	f006 f9d3 	bl	800bfd6 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8005c30:	2200      	movs	r2, #0
 8005c32:	4907      	ldr	r1, [pc, #28]	; (8005c50 <Principal_RTC_Reg_Check+0x54>)
 8005c34:	4803      	ldr	r0, [pc, #12]	; (8005c44 <Principal_RTC_Reg_Check+0x48>)
 8005c36:	f006 f970 	bl	800bf1a <HAL_RTC_GetTime>
}
 8005c3a:	bf00      	nop
 8005c3c:	3708      	adds	r7, #8
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	20001b44 	.word	0x20001b44
 8005c48:	20001a52 	.word	0x20001a52
 8005c4c:	20001a5c 	.word	0x20001a5c
 8005c50:	20002cb0 	.word	0x20002cb0

08005c54 <Principal_RTC_Get_Date>:

void Principal_RTC_Get_Date(RTC_DateTypeDef *sDate, RTC_TimeTypeDef *sTime)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
	HAL_RTC_GetDate(&hrtc, sDate, RTC_FORMAT_BIN);
 8005c5e:	2200      	movs	r2, #0
 8005c60:	6879      	ldr	r1, [r7, #4]
 8005c62:	4806      	ldr	r0, [pc, #24]	; (8005c7c <Principal_RTC_Get_Date+0x28>)
 8005c64:	f006 f9b7 	bl	800bfd6 <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, sTime, RTC_FORMAT_BIN);
 8005c68:	2200      	movs	r2, #0
 8005c6a:	6839      	ldr	r1, [r7, #0]
 8005c6c:	4803      	ldr	r0, [pc, #12]	; (8005c7c <Principal_RTC_Get_Date+0x28>)
 8005c6e:	f006 f954 	bl	800bf1a <HAL_RTC_GetTime>
}
 8005c72:	bf00      	nop
 8005c74:	3708      	adds	r7, #8
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	20001b44 	.word	0x20001b44

08005c80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c86:	2300      	movs	r3, #0
 8005c88:	607b      	str	r3, [r7, #4]
 8005c8a:	4b10      	ldr	r3, [pc, #64]	; (8005ccc <HAL_MspInit+0x4c>)
 8005c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c8e:	4a0f      	ldr	r2, [pc, #60]	; (8005ccc <HAL_MspInit+0x4c>)
 8005c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c94:	6453      	str	r3, [r2, #68]	; 0x44
 8005c96:	4b0d      	ldr	r3, [pc, #52]	; (8005ccc <HAL_MspInit+0x4c>)
 8005c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c9e:	607b      	str	r3, [r7, #4]
 8005ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	603b      	str	r3, [r7, #0]
 8005ca6:	4b09      	ldr	r3, [pc, #36]	; (8005ccc <HAL_MspInit+0x4c>)
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	4a08      	ldr	r2, [pc, #32]	; (8005ccc <HAL_MspInit+0x4c>)
 8005cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8005cb2:	4b06      	ldr	r3, [pc, #24]	; (8005ccc <HAL_MspInit+0x4c>)
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cba:	603b      	str	r3, [r7, #0]
 8005cbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005cbe:	bf00      	nop
 8005cc0:	370c      	adds	r7, #12
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	40023800 	.word	0x40023800

08005cd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b08e      	sub	sp, #56	; 0x38
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005cdc:	2200      	movs	r2, #0
 8005cde:	601a      	str	r2, [r3, #0]
 8005ce0:	605a      	str	r2, [r3, #4]
 8005ce2:	609a      	str	r2, [r3, #8]
 8005ce4:	60da      	str	r2, [r3, #12]
 8005ce6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a79      	ldr	r2, [pc, #484]	; (8005ed4 <HAL_ADC_MspInit+0x204>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	f040 808d 	bne.w	8005e0e <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	623b      	str	r3, [r7, #32]
 8005cf8:	4b77      	ldr	r3, [pc, #476]	; (8005ed8 <HAL_ADC_MspInit+0x208>)
 8005cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cfc:	4a76      	ldr	r2, [pc, #472]	; (8005ed8 <HAL_ADC_MspInit+0x208>)
 8005cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d02:	6453      	str	r3, [r2, #68]	; 0x44
 8005d04:	4b74      	ldr	r3, [pc, #464]	; (8005ed8 <HAL_ADC_MspInit+0x208>)
 8005d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d0c:	623b      	str	r3, [r7, #32]
 8005d0e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d10:	2300      	movs	r3, #0
 8005d12:	61fb      	str	r3, [r7, #28]
 8005d14:	4b70      	ldr	r3, [pc, #448]	; (8005ed8 <HAL_ADC_MspInit+0x208>)
 8005d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d18:	4a6f      	ldr	r2, [pc, #444]	; (8005ed8 <HAL_ADC_MspInit+0x208>)
 8005d1a:	f043 0301 	orr.w	r3, r3, #1
 8005d1e:	6313      	str	r3, [r2, #48]	; 0x30
 8005d20:	4b6d      	ldr	r3, [pc, #436]	; (8005ed8 <HAL_ADC_MspInit+0x208>)
 8005d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d24:	f003 0301 	and.w	r3, r3, #1
 8005d28:	61fb      	str	r3, [r7, #28]
 8005d2a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	61bb      	str	r3, [r7, #24]
 8005d30:	4b69      	ldr	r3, [pc, #420]	; (8005ed8 <HAL_ADC_MspInit+0x208>)
 8005d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d34:	4a68      	ldr	r2, [pc, #416]	; (8005ed8 <HAL_ADC_MspInit+0x208>)
 8005d36:	f043 0304 	orr.w	r3, r3, #4
 8005d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8005d3c:	4b66      	ldr	r3, [pc, #408]	; (8005ed8 <HAL_ADC_MspInit+0x208>)
 8005d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d40:	f003 0304 	and.w	r3, r3, #4
 8005d44:	61bb      	str	r3, [r7, #24]
 8005d46:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d48:	2300      	movs	r3, #0
 8005d4a:	617b      	str	r3, [r7, #20]
 8005d4c:	4b62      	ldr	r3, [pc, #392]	; (8005ed8 <HAL_ADC_MspInit+0x208>)
 8005d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d50:	4a61      	ldr	r2, [pc, #388]	; (8005ed8 <HAL_ADC_MspInit+0x208>)
 8005d52:	f043 0302 	orr.w	r3, r3, #2
 8005d56:	6313      	str	r3, [r2, #48]	; 0x30
 8005d58:	4b5f      	ldr	r3, [pc, #380]	; (8005ed8 <HAL_ADC_MspInit+0x208>)
 8005d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	617b      	str	r3, [r7, #20]
 8005d62:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005d64:	23c0      	movs	r3, #192	; 0xc0
 8005d66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d74:	4619      	mov	r1, r3
 8005d76:	4859      	ldr	r0, [pc, #356]	; (8005edc <HAL_ADC_MspInit+0x20c>)
 8005d78:	f002 fb92 	bl	80084a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005d7c:	2330      	movs	r3, #48	; 0x30
 8005d7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d80:	2303      	movs	r3, #3
 8005d82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d84:	2300      	movs	r3, #0
 8005d86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	4854      	ldr	r0, [pc, #336]	; (8005ee0 <HAL_ADC_MspInit+0x210>)
 8005d90:	f002 fb86 	bl	80084a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005d94:	2303      	movs	r3, #3
 8005d96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d98:	2303      	movs	r3, #3
 8005d9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005da4:	4619      	mov	r1, r3
 8005da6:	484f      	ldr	r0, [pc, #316]	; (8005ee4 <HAL_ADC_MspInit+0x214>)
 8005da8:	f002 fb7a 	bl	80084a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005dac:	4b4e      	ldr	r3, [pc, #312]	; (8005ee8 <HAL_ADC_MspInit+0x218>)
 8005dae:	4a4f      	ldr	r2, [pc, #316]	; (8005eec <HAL_ADC_MspInit+0x21c>)
 8005db0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005db2:	4b4d      	ldr	r3, [pc, #308]	; (8005ee8 <HAL_ADC_MspInit+0x218>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005db8:	4b4b      	ldr	r3, [pc, #300]	; (8005ee8 <HAL_ADC_MspInit+0x218>)
 8005dba:	2200      	movs	r2, #0
 8005dbc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005dbe:	4b4a      	ldr	r3, [pc, #296]	; (8005ee8 <HAL_ADC_MspInit+0x218>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005dc4:	4b48      	ldr	r3, [pc, #288]	; (8005ee8 <HAL_ADC_MspInit+0x218>)
 8005dc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005dca:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005dcc:	4b46      	ldr	r3, [pc, #280]	; (8005ee8 <HAL_ADC_MspInit+0x218>)
 8005dce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dd2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005dd4:	4b44      	ldr	r3, [pc, #272]	; (8005ee8 <HAL_ADC_MspInit+0x218>)
 8005dd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005dda:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005ddc:	4b42      	ldr	r3, [pc, #264]	; (8005ee8 <HAL_ADC_MspInit+0x218>)
 8005dde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005de2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005de4:	4b40      	ldr	r3, [pc, #256]	; (8005ee8 <HAL_ADC_MspInit+0x218>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005dea:	4b3f      	ldr	r3, [pc, #252]	; (8005ee8 <HAL_ADC_MspInit+0x218>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005df0:	483d      	ldr	r0, [pc, #244]	; (8005ee8 <HAL_ADC_MspInit+0x218>)
 8005df2:	f001 ffb7 	bl	8007d64 <HAL_DMA_Init>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8005dfc:	f7fb ff02 	bl	8001c04 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a39      	ldr	r2, [pc, #228]	; (8005ee8 <HAL_ADC_MspInit+0x218>)
 8005e04:	639a      	str	r2, [r3, #56]	; 0x38
 8005e06:	4a38      	ldr	r2, [pc, #224]	; (8005ee8 <HAL_ADC_MspInit+0x218>)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005e0c:	e05d      	b.n	8005eca <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a37      	ldr	r2, [pc, #220]	; (8005ef0 <HAL_ADC_MspInit+0x220>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d158      	bne.n	8005eca <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005e18:	2300      	movs	r3, #0
 8005e1a:	613b      	str	r3, [r7, #16]
 8005e1c:	4b2e      	ldr	r3, [pc, #184]	; (8005ed8 <HAL_ADC_MspInit+0x208>)
 8005e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e20:	4a2d      	ldr	r2, [pc, #180]	; (8005ed8 <HAL_ADC_MspInit+0x208>)
 8005e22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e26:	6453      	str	r3, [r2, #68]	; 0x44
 8005e28:	4b2b      	ldr	r3, [pc, #172]	; (8005ed8 <HAL_ADC_MspInit+0x208>)
 8005e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e30:	613b      	str	r3, [r7, #16]
 8005e32:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e34:	2300      	movs	r3, #0
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	4b27      	ldr	r3, [pc, #156]	; (8005ed8 <HAL_ADC_MspInit+0x208>)
 8005e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3c:	4a26      	ldr	r2, [pc, #152]	; (8005ed8 <HAL_ADC_MspInit+0x208>)
 8005e3e:	f043 0301 	orr.w	r3, r3, #1
 8005e42:	6313      	str	r3, [r2, #48]	; 0x30
 8005e44:	4b24      	ldr	r3, [pc, #144]	; (8005ed8 <HAL_ADC_MspInit+0x208>)
 8005e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e48:	f003 0301 	and.w	r3, r3, #1
 8005e4c:	60fb      	str	r3, [r7, #12]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005e50:	233f      	movs	r3, #63	; 0x3f
 8005e52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e54:	2303      	movs	r3, #3
 8005e56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e60:	4619      	mov	r1, r3
 8005e62:	481e      	ldr	r0, [pc, #120]	; (8005edc <HAL_ADC_MspInit+0x20c>)
 8005e64:	f002 fb1c 	bl	80084a0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8005e68:	4b22      	ldr	r3, [pc, #136]	; (8005ef4 <HAL_ADC_MspInit+0x224>)
 8005e6a:	4a23      	ldr	r2, [pc, #140]	; (8005ef8 <HAL_ADC_MspInit+0x228>)
 8005e6c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8005e6e:	4b21      	ldr	r3, [pc, #132]	; (8005ef4 <HAL_ADC_MspInit+0x224>)
 8005e70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e74:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e76:	4b1f      	ldr	r3, [pc, #124]	; (8005ef4 <HAL_ADC_MspInit+0x224>)
 8005e78:	2200      	movs	r2, #0
 8005e7a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e7c:	4b1d      	ldr	r3, [pc, #116]	; (8005ef4 <HAL_ADC_MspInit+0x224>)
 8005e7e:	2200      	movs	r2, #0
 8005e80:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005e82:	4b1c      	ldr	r3, [pc, #112]	; (8005ef4 <HAL_ADC_MspInit+0x224>)
 8005e84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e88:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005e8a:	4b1a      	ldr	r3, [pc, #104]	; (8005ef4 <HAL_ADC_MspInit+0x224>)
 8005e8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e90:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005e92:	4b18      	ldr	r3, [pc, #96]	; (8005ef4 <HAL_ADC_MspInit+0x224>)
 8005e94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005e98:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005e9a:	4b16      	ldr	r3, [pc, #88]	; (8005ef4 <HAL_ADC_MspInit+0x224>)
 8005e9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ea0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8005ea2:	4b14      	ldr	r3, [pc, #80]	; (8005ef4 <HAL_ADC_MspInit+0x224>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005ea8:	4b12      	ldr	r3, [pc, #72]	; (8005ef4 <HAL_ADC_MspInit+0x224>)
 8005eaa:	2200      	movs	r2, #0
 8005eac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005eae:	4811      	ldr	r0, [pc, #68]	; (8005ef4 <HAL_ADC_MspInit+0x224>)
 8005eb0:	f001 ff58 	bl	8007d64 <HAL_DMA_Init>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d001      	beq.n	8005ebe <HAL_ADC_MspInit+0x1ee>
      Error_Handler();
 8005eba:	f7fb fea3 	bl	8001c04 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a0c      	ldr	r2, [pc, #48]	; (8005ef4 <HAL_ADC_MspInit+0x224>)
 8005ec2:	639a      	str	r2, [r3, #56]	; 0x38
 8005ec4:	4a0b      	ldr	r2, [pc, #44]	; (8005ef4 <HAL_ADC_MspInit+0x224>)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005eca:	bf00      	nop
 8005ecc:	3738      	adds	r7, #56	; 0x38
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	40012000 	.word	0x40012000
 8005ed8:	40023800 	.word	0x40023800
 8005edc:	40020000 	.word	0x40020000
 8005ee0:	40020800 	.word	0x40020800
 8005ee4:	40020400 	.word	0x40020400
 8005ee8:	20001ae4 	.word	0x20001ae4
 8005eec:	40026410 	.word	0x40026410
 8005ef0:	40012100 	.word	0x40012100
 8005ef4:	20002ccc 	.word	0x20002ccc
 8005ef8:	40026440 	.word	0x40026440

08005efc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b08a      	sub	sp, #40	; 0x28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f04:	f107 0314 	add.w	r3, r7, #20
 8005f08:	2200      	movs	r2, #0
 8005f0a:	601a      	str	r2, [r3, #0]
 8005f0c:	605a      	str	r2, [r3, #4]
 8005f0e:	609a      	str	r2, [r3, #8]
 8005f10:	60da      	str	r2, [r3, #12]
 8005f12:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a1d      	ldr	r2, [pc, #116]	; (8005f90 <HAL_CAN_MspInit+0x94>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d134      	bne.n	8005f88 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8005f1e:	2300      	movs	r3, #0
 8005f20:	613b      	str	r3, [r7, #16]
 8005f22:	4b1c      	ldr	r3, [pc, #112]	; (8005f94 <HAL_CAN_MspInit+0x98>)
 8005f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f26:	4a1b      	ldr	r2, [pc, #108]	; (8005f94 <HAL_CAN_MspInit+0x98>)
 8005f28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8005f2e:	4b19      	ldr	r3, [pc, #100]	; (8005f94 <HAL_CAN_MspInit+0x98>)
 8005f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f36:	613b      	str	r3, [r7, #16]
 8005f38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	60fb      	str	r3, [r7, #12]
 8005f3e:	4b15      	ldr	r3, [pc, #84]	; (8005f94 <HAL_CAN_MspInit+0x98>)
 8005f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f42:	4a14      	ldr	r2, [pc, #80]	; (8005f94 <HAL_CAN_MspInit+0x98>)
 8005f44:	f043 0302 	orr.w	r3, r3, #2
 8005f48:	6313      	str	r3, [r2, #48]	; 0x30
 8005f4a:	4b12      	ldr	r3, [pc, #72]	; (8005f94 <HAL_CAN_MspInit+0x98>)
 8005f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4e:	f003 0302 	and.w	r3, r3, #2
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005f56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f5c:	2302      	movs	r3, #2
 8005f5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f60:	2300      	movs	r3, #0
 8005f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f64:	2303      	movs	r3, #3
 8005f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8005f68:	2309      	movs	r3, #9
 8005f6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f6c:	f107 0314 	add.w	r3, r7, #20
 8005f70:	4619      	mov	r1, r3
 8005f72:	4809      	ldr	r0, [pc, #36]	; (8005f98 <HAL_CAN_MspInit+0x9c>)
 8005f74:	f002 fa94 	bl	80084a0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8005f78:	2200      	movs	r2, #0
 8005f7a:	2102      	movs	r1, #2
 8005f7c:	2014      	movs	r0, #20
 8005f7e:	f001 feba 	bl	8007cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8005f82:	2014      	movs	r0, #20
 8005f84:	f001 fed3 	bl	8007d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8005f88:	bf00      	nop
 8005f8a:	3728      	adds	r7, #40	; 0x28
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	40006400 	.word	0x40006400
 8005f94:	40023800 	.word	0x40023800
 8005f98:	40020400 	.word	0x40020400

08005f9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b08a      	sub	sp, #40	; 0x28
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fa4:	f107 0314 	add.w	r3, r7, #20
 8005fa8:	2200      	movs	r2, #0
 8005faa:	601a      	str	r2, [r3, #0]
 8005fac:	605a      	str	r2, [r3, #4]
 8005fae:	609a      	str	r2, [r3, #8]
 8005fb0:	60da      	str	r2, [r3, #12]
 8005fb2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a19      	ldr	r2, [pc, #100]	; (8006020 <HAL_I2C_MspInit+0x84>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d12b      	bne.n	8006016 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	613b      	str	r3, [r7, #16]
 8005fc2:	4b18      	ldr	r3, [pc, #96]	; (8006024 <HAL_I2C_MspInit+0x88>)
 8005fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc6:	4a17      	ldr	r2, [pc, #92]	; (8006024 <HAL_I2C_MspInit+0x88>)
 8005fc8:	f043 0302 	orr.w	r3, r3, #2
 8005fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8005fce:	4b15      	ldr	r3, [pc, #84]	; (8006024 <HAL_I2C_MspInit+0x88>)
 8005fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	613b      	str	r3, [r7, #16]
 8005fd8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005fda:	23c0      	movs	r3, #192	; 0xc0
 8005fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005fde:	2312      	movs	r3, #18
 8005fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005fea:	2304      	movs	r3, #4
 8005fec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005fee:	f107 0314 	add.w	r3, r7, #20
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	480c      	ldr	r0, [pc, #48]	; (8006028 <HAL_I2C_MspInit+0x8c>)
 8005ff6:	f002 fa53 	bl	80084a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	60fb      	str	r3, [r7, #12]
 8005ffe:	4b09      	ldr	r3, [pc, #36]	; (8006024 <HAL_I2C_MspInit+0x88>)
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	4a08      	ldr	r2, [pc, #32]	; (8006024 <HAL_I2C_MspInit+0x88>)
 8006004:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006008:	6413      	str	r3, [r2, #64]	; 0x40
 800600a:	4b06      	ldr	r3, [pc, #24]	; (8006024 <HAL_I2C_MspInit+0x88>)
 800600c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006016:	bf00      	nop
 8006018:	3728      	adds	r7, #40	; 0x28
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	40005400 	.word	0x40005400
 8006024:	40023800 	.word	0x40023800
 8006028:	40020400 	.word	0x40020400

0800602c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b09a      	sub	sp, #104	; 0x68
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006034:	f107 030c 	add.w	r3, r7, #12
 8006038:	225c      	movs	r2, #92	; 0x5c
 800603a:	2100      	movs	r1, #0
 800603c:	4618      	mov	r0, r3
 800603e:	f010 fe1d 	bl	8016c7c <memset>
  if(hrtc->Instance==RTC)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a0c      	ldr	r2, [pc, #48]	; (8006078 <HAL_RTC_MspInit+0x4c>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d111      	bne.n	8006070 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800604c:	2320      	movs	r3, #32
 800604e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006050:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006054:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006056:	f107 030c 	add.w	r3, r7, #12
 800605a:	4618      	mov	r0, r3
 800605c:	f004 ff52 	bl	800af04 <HAL_RCCEx_PeriphCLKConfig>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d001      	beq.n	800606a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8006066:	f7fb fdcd 	bl	8001c04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800606a:	4b04      	ldr	r3, [pc, #16]	; (800607c <HAL_RTC_MspInit+0x50>)
 800606c:	2201      	movs	r2, #1
 800606e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006070:	bf00      	nop
 8006072:	3768      	adds	r7, #104	; 0x68
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	40002800 	.word	0x40002800
 800607c:	42470e3c 	.word	0x42470e3c

08006080 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b08a      	sub	sp, #40	; 0x28
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006088:	f107 0314 	add.w	r3, r7, #20
 800608c:	2200      	movs	r2, #0
 800608e:	601a      	str	r2, [r3, #0]
 8006090:	605a      	str	r2, [r3, #4]
 8006092:	609a      	str	r2, [r3, #8]
 8006094:	60da      	str	r2, [r3, #12]
 8006096:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a68      	ldr	r2, [pc, #416]	; (8006240 <HAL_SD_MspInit+0x1c0>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	f040 80c9 	bne.w	8006236 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80060a4:	2300      	movs	r3, #0
 80060a6:	613b      	str	r3, [r7, #16]
 80060a8:	4b66      	ldr	r3, [pc, #408]	; (8006244 <HAL_SD_MspInit+0x1c4>)
 80060aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ac:	4a65      	ldr	r2, [pc, #404]	; (8006244 <HAL_SD_MspInit+0x1c4>)
 80060ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80060b2:	6453      	str	r3, [r2, #68]	; 0x44
 80060b4:	4b63      	ldr	r3, [pc, #396]	; (8006244 <HAL_SD_MspInit+0x1c4>)
 80060b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060bc:	613b      	str	r3, [r7, #16]
 80060be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80060c0:	2300      	movs	r3, #0
 80060c2:	60fb      	str	r3, [r7, #12]
 80060c4:	4b5f      	ldr	r3, [pc, #380]	; (8006244 <HAL_SD_MspInit+0x1c4>)
 80060c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c8:	4a5e      	ldr	r2, [pc, #376]	; (8006244 <HAL_SD_MspInit+0x1c4>)
 80060ca:	f043 0304 	orr.w	r3, r3, #4
 80060ce:	6313      	str	r3, [r2, #48]	; 0x30
 80060d0:	4b5c      	ldr	r3, [pc, #368]	; (8006244 <HAL_SD_MspInit+0x1c4>)
 80060d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d4:	f003 0304 	and.w	r3, r3, #4
 80060d8:	60fb      	str	r3, [r7, #12]
 80060da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80060dc:	2300      	movs	r3, #0
 80060de:	60bb      	str	r3, [r7, #8]
 80060e0:	4b58      	ldr	r3, [pc, #352]	; (8006244 <HAL_SD_MspInit+0x1c4>)
 80060e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e4:	4a57      	ldr	r2, [pc, #348]	; (8006244 <HAL_SD_MspInit+0x1c4>)
 80060e6:	f043 0308 	orr.w	r3, r3, #8
 80060ea:	6313      	str	r3, [r2, #48]	; 0x30
 80060ec:	4b55      	ldr	r3, [pc, #340]	; (8006244 <HAL_SD_MspInit+0x1c4>)
 80060ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f0:	f003 0308 	and.w	r3, r3, #8
 80060f4:	60bb      	str	r3, [r7, #8]
 80060f6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80060f8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80060fc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060fe:	2302      	movs	r3, #2
 8006100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006102:	2300      	movs	r3, #0
 8006104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006106:	2303      	movs	r3, #3
 8006108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800610a:	230c      	movs	r3, #12
 800610c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800610e:	f107 0314 	add.w	r3, r7, #20
 8006112:	4619      	mov	r1, r3
 8006114:	484c      	ldr	r0, [pc, #304]	; (8006248 <HAL_SD_MspInit+0x1c8>)
 8006116:	f002 f9c3 	bl	80084a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800611a:	2304      	movs	r3, #4
 800611c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800611e:	2302      	movs	r3, #2
 8006120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006122:	2300      	movs	r3, #0
 8006124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006126:	2303      	movs	r3, #3
 8006128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800612a:	230c      	movs	r3, #12
 800612c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800612e:	f107 0314 	add.w	r3, r7, #20
 8006132:	4619      	mov	r1, r3
 8006134:	4845      	ldr	r0, [pc, #276]	; (800624c <HAL_SD_MspInit+0x1cc>)
 8006136:	f002 f9b3 	bl	80084a0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800613a:	4b45      	ldr	r3, [pc, #276]	; (8006250 <HAL_SD_MspInit+0x1d0>)
 800613c:	4a45      	ldr	r2, [pc, #276]	; (8006254 <HAL_SD_MspInit+0x1d4>)
 800613e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006140:	4b43      	ldr	r3, [pc, #268]	; (8006250 <HAL_SD_MspInit+0x1d0>)
 8006142:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006146:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006148:	4b41      	ldr	r3, [pc, #260]	; (8006250 <HAL_SD_MspInit+0x1d0>)
 800614a:	2200      	movs	r2, #0
 800614c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800614e:	4b40      	ldr	r3, [pc, #256]	; (8006250 <HAL_SD_MspInit+0x1d0>)
 8006150:	2200      	movs	r2, #0
 8006152:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006154:	4b3e      	ldr	r3, [pc, #248]	; (8006250 <HAL_SD_MspInit+0x1d0>)
 8006156:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800615a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800615c:	4b3c      	ldr	r3, [pc, #240]	; (8006250 <HAL_SD_MspInit+0x1d0>)
 800615e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006162:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006164:	4b3a      	ldr	r3, [pc, #232]	; (8006250 <HAL_SD_MspInit+0x1d0>)
 8006166:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800616a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800616c:	4b38      	ldr	r3, [pc, #224]	; (8006250 <HAL_SD_MspInit+0x1d0>)
 800616e:	2220      	movs	r2, #32
 8006170:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006172:	4b37      	ldr	r3, [pc, #220]	; (8006250 <HAL_SD_MspInit+0x1d0>)
 8006174:	2200      	movs	r2, #0
 8006176:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006178:	4b35      	ldr	r3, [pc, #212]	; (8006250 <HAL_SD_MspInit+0x1d0>)
 800617a:	2204      	movs	r2, #4
 800617c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800617e:	4b34      	ldr	r3, [pc, #208]	; (8006250 <HAL_SD_MspInit+0x1d0>)
 8006180:	2203      	movs	r2, #3
 8006182:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8006184:	4b32      	ldr	r3, [pc, #200]	; (8006250 <HAL_SD_MspInit+0x1d0>)
 8006186:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800618a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800618c:	4b30      	ldr	r3, [pc, #192]	; (8006250 <HAL_SD_MspInit+0x1d0>)
 800618e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006192:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8006194:	482e      	ldr	r0, [pc, #184]	; (8006250 <HAL_SD_MspInit+0x1d0>)
 8006196:	f001 fde5 	bl	8007d64 <HAL_DMA_Init>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d001      	beq.n	80061a4 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 80061a0:	f7fb fd30 	bl	8001c04 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a2a      	ldr	r2, [pc, #168]	; (8006250 <HAL_SD_MspInit+0x1d0>)
 80061a8:	641a      	str	r2, [r3, #64]	; 0x40
 80061aa:	4a29      	ldr	r2, [pc, #164]	; (8006250 <HAL_SD_MspInit+0x1d0>)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80061b0:	4b29      	ldr	r3, [pc, #164]	; (8006258 <HAL_SD_MspInit+0x1d8>)
 80061b2:	4a2a      	ldr	r2, [pc, #168]	; (800625c <HAL_SD_MspInit+0x1dc>)
 80061b4:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80061b6:	4b28      	ldr	r3, [pc, #160]	; (8006258 <HAL_SD_MspInit+0x1d8>)
 80061b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80061bc:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80061be:	4b26      	ldr	r3, [pc, #152]	; (8006258 <HAL_SD_MspInit+0x1d8>)
 80061c0:	2240      	movs	r2, #64	; 0x40
 80061c2:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80061c4:	4b24      	ldr	r3, [pc, #144]	; (8006258 <HAL_SD_MspInit+0x1d8>)
 80061c6:	2200      	movs	r2, #0
 80061c8:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80061ca:	4b23      	ldr	r3, [pc, #140]	; (8006258 <HAL_SD_MspInit+0x1d8>)
 80061cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061d0:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80061d2:	4b21      	ldr	r3, [pc, #132]	; (8006258 <HAL_SD_MspInit+0x1d8>)
 80061d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80061d8:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80061da:	4b1f      	ldr	r3, [pc, #124]	; (8006258 <HAL_SD_MspInit+0x1d8>)
 80061dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80061e0:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80061e2:	4b1d      	ldr	r3, [pc, #116]	; (8006258 <HAL_SD_MspInit+0x1d8>)
 80061e4:	2220      	movs	r2, #32
 80061e6:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80061e8:	4b1b      	ldr	r3, [pc, #108]	; (8006258 <HAL_SD_MspInit+0x1d8>)
 80061ea:	2200      	movs	r2, #0
 80061ec:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80061ee:	4b1a      	ldr	r3, [pc, #104]	; (8006258 <HAL_SD_MspInit+0x1d8>)
 80061f0:	2204      	movs	r2, #4
 80061f2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80061f4:	4b18      	ldr	r3, [pc, #96]	; (8006258 <HAL_SD_MspInit+0x1d8>)
 80061f6:	2203      	movs	r2, #3
 80061f8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80061fa:	4b17      	ldr	r3, [pc, #92]	; (8006258 <HAL_SD_MspInit+0x1d8>)
 80061fc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006200:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006202:	4b15      	ldr	r3, [pc, #84]	; (8006258 <HAL_SD_MspInit+0x1d8>)
 8006204:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006208:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800620a:	4813      	ldr	r0, [pc, #76]	; (8006258 <HAL_SD_MspInit+0x1d8>)
 800620c:	f001 fdaa 	bl	8007d64 <HAL_DMA_Init>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8006216:	f7fb fcf5 	bl	8001c04 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a0e      	ldr	r2, [pc, #56]	; (8006258 <HAL_SD_MspInit+0x1d8>)
 800621e:	63da      	str	r2, [r3, #60]	; 0x3c
 8006220:	4a0d      	ldr	r2, [pc, #52]	; (8006258 <HAL_SD_MspInit+0x1d8>)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8006226:	2200      	movs	r2, #0
 8006228:	2100      	movs	r1, #0
 800622a:	2031      	movs	r0, #49	; 0x31
 800622c:	f001 fd63 	bl	8007cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8006230:	2031      	movs	r0, #49	; 0x31
 8006232:	f001 fd7c 	bl	8007d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8006236:	bf00      	nop
 8006238:	3728      	adds	r7, #40	; 0x28
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	40012c00 	.word	0x40012c00
 8006244:	40023800 	.word	0x40023800
 8006248:	40020800 	.word	0x40020800
 800624c:	40020c00 	.word	0x40020c00
 8006250:	20000698 	.word	0x20000698
 8006254:	40026458 	.word	0x40026458
 8006258:	20001b68 	.word	0x20001b68
 800625c:	400264a0 	.word	0x400264a0

08006260 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a0e      	ldr	r2, [pc, #56]	; (80062a8 <HAL_TIM_Base_MspInit+0x48>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d115      	bne.n	800629e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006272:	2300      	movs	r3, #0
 8006274:	60fb      	str	r3, [r7, #12]
 8006276:	4b0d      	ldr	r3, [pc, #52]	; (80062ac <HAL_TIM_Base_MspInit+0x4c>)
 8006278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627a:	4a0c      	ldr	r2, [pc, #48]	; (80062ac <HAL_TIM_Base_MspInit+0x4c>)
 800627c:	f043 0320 	orr.w	r3, r3, #32
 8006280:	6413      	str	r3, [r2, #64]	; 0x40
 8006282:	4b0a      	ldr	r3, [pc, #40]	; (80062ac <HAL_TIM_Base_MspInit+0x4c>)
 8006284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006286:	f003 0320 	and.w	r3, r3, #32
 800628a:	60fb      	str	r3, [r7, #12]
 800628c:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800628e:	2200      	movs	r2, #0
 8006290:	2100      	movs	r1, #0
 8006292:	2037      	movs	r0, #55	; 0x37
 8006294:	f001 fd2f 	bl	8007cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006298:	2037      	movs	r0, #55	; 0x37
 800629a:	f001 fd48 	bl	8007d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800629e:	bf00      	nop
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	40001400 	.word	0x40001400
 80062ac:	40023800 	.word	0x40023800

080062b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80062b0:	b480      	push	{r7}
 80062b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80062b4:	e7fe      	b.n	80062b4 <NMI_Handler+0x4>

080062b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80062b6:	b480      	push	{r7}
 80062b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80062ba:	e7fe      	b.n	80062ba <HardFault_Handler+0x4>

080062bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80062bc:	b480      	push	{r7}
 80062be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80062c0:	e7fe      	b.n	80062c0 <MemManage_Handler+0x4>

080062c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80062c2:	b480      	push	{r7}
 80062c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80062c6:	e7fe      	b.n	80062c6 <BusFault_Handler+0x4>

080062c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80062c8:	b480      	push	{r7}
 80062ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80062cc:	e7fe      	b.n	80062cc <UsageFault_Handler+0x4>

080062ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80062ce:	b480      	push	{r7}
 80062d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80062d2:	bf00      	nop
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80062dc:	b480      	push	{r7}
 80062de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80062e0:	bf00      	nop
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr

080062ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80062ea:	b480      	push	{r7}
 80062ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80062ee:	bf00      	nop
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80062fc:	f000 f922 	bl	8006544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006300:	bf00      	nop
 8006302:	bd80      	pop	{r7, pc}

08006304 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006308:	4802      	ldr	r0, [pc, #8]	; (8006314 <CAN1_RX0_IRQHandler+0x10>)
 800630a:	f001 f9e9 	bl	80076e0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800630e:	bf00      	nop
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	20002d2c 	.word	0x20002d2c

08006318 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI0_Pin);
 800631c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006320:	f002 fa9e 	bl	8008860 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI1_Pin);
 8006324:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006328:	f002 fa9a 	bl	8008860 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800632c:	bf00      	nop
 800632e:	bd80      	pop	{r7, pc}

08006330 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8006334:	4802      	ldr	r0, [pc, #8]	; (8006340 <SDIO_IRQHandler+0x10>)
 8006336:	f006 f997 	bl	800c668 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800633a:	bf00      	nop
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	20001bd4 	.word	0x20001bd4

08006344 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006348:	4802      	ldr	r0, [pc, #8]	; (8006354 <TIM7_IRQHandler+0x10>)
 800634a:	f007 faf5 	bl	800d938 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800634e:	bf00      	nop
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	20002dcc 	.word	0x20002dcc

08006358 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800635c:	4802      	ldr	r0, [pc, #8]	; (8006368 <DMA2_Stream0_IRQHandler+0x10>)
 800635e:	f001 fe29 	bl	8007fb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006362:	bf00      	nop
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	20001ae4 	.word	0x20001ae4

0800636c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8006370:	4802      	ldr	r0, [pc, #8]	; (800637c <DMA2_Stream2_IRQHandler+0x10>)
 8006372:	f001 fe1f 	bl	8007fb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006376:	bf00      	nop
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	20002ccc 	.word	0x20002ccc

08006380 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8006384:	4802      	ldr	r0, [pc, #8]	; (8006390 <DMA2_Stream3_IRQHandler+0x10>)
 8006386:	f001 fe15 	bl	8007fb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800638a:	bf00      	nop
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	20000698 	.word	0x20000698

08006394 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8006398:	4802      	ldr	r0, [pc, #8]	; (80063a4 <OTG_FS_IRQHandler+0x10>)
 800639a:	f003 fbb7 	bl	8009b0c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800639e:	bf00      	nop
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	200053d4 	.word	0x200053d4

080063a8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80063ac:	4802      	ldr	r0, [pc, #8]	; (80063b8 <DMA2_Stream6_IRQHandler+0x10>)
 80063ae:	f001 fe01 	bl	8007fb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80063b2:	bf00      	nop
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	20001b68 	.word	0x20001b68

080063bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80063c4:	4a14      	ldr	r2, [pc, #80]	; (8006418 <_sbrk+0x5c>)
 80063c6:	4b15      	ldr	r3, [pc, #84]	; (800641c <_sbrk+0x60>)
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80063d0:	4b13      	ldr	r3, [pc, #76]	; (8006420 <_sbrk+0x64>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d102      	bne.n	80063de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80063d8:	4b11      	ldr	r3, [pc, #68]	; (8006420 <_sbrk+0x64>)
 80063da:	4a12      	ldr	r2, [pc, #72]	; (8006424 <_sbrk+0x68>)
 80063dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80063de:	4b10      	ldr	r3, [pc, #64]	; (8006420 <_sbrk+0x64>)
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4413      	add	r3, r2
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d207      	bcs.n	80063fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80063ec:	f010 fc0e 	bl	8016c0c <__errno>
 80063f0:	4603      	mov	r3, r0
 80063f2:	220c      	movs	r2, #12
 80063f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80063f6:	f04f 33ff 	mov.w	r3, #4294967295
 80063fa:	e009      	b.n	8006410 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80063fc:	4b08      	ldr	r3, [pc, #32]	; (8006420 <_sbrk+0x64>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006402:	4b07      	ldr	r3, [pc, #28]	; (8006420 <_sbrk+0x64>)
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4413      	add	r3, r2
 800640a:	4a05      	ldr	r2, [pc, #20]	; (8006420 <_sbrk+0x64>)
 800640c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800640e:	68fb      	ldr	r3, [r7, #12]
}
 8006410:	4618      	mov	r0, r3
 8006412:	3718      	adds	r7, #24
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	20020000 	.word	0x20020000
 800641c:	00006000 	.word	0x00006000
 8006420:	200001f4 	.word	0x200001f4
 8006424:	200057f0 	.word	0x200057f0

08006428 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006428:	b480      	push	{r7}
 800642a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800642c:	4b06      	ldr	r3, [pc, #24]	; (8006448 <SystemInit+0x20>)
 800642e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006432:	4a05      	ldr	r2, [pc, #20]	; (8006448 <SystemInit+0x20>)
 8006434:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006438:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800643c:	bf00      	nop
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	e000ed00 	.word	0xe000ed00

0800644c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800644c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006484 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006450:	480d      	ldr	r0, [pc, #52]	; (8006488 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006452:	490e      	ldr	r1, [pc, #56]	; (800648c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006454:	4a0e      	ldr	r2, [pc, #56]	; (8006490 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006458:	e002      	b.n	8006460 <LoopCopyDataInit>

0800645a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800645a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800645c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800645e:	3304      	adds	r3, #4

08006460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006464:	d3f9      	bcc.n	800645a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006466:	4a0b      	ldr	r2, [pc, #44]	; (8006494 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006468:	4c0b      	ldr	r4, [pc, #44]	; (8006498 <LoopFillZerobss+0x26>)
  movs r3, #0
 800646a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800646c:	e001      	b.n	8006472 <LoopFillZerobss>

0800646e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800646e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006470:	3204      	adds	r2, #4

08006472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006474:	d3fb      	bcc.n	800646e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006476:	f7ff ffd7 	bl	8006428 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800647a:	f010 fbcd 	bl	8016c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800647e:	f7fa feef 	bl	8001260 <main>
  bx  lr    
 8006482:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006484:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800648c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8006490:	08017a80 	.word	0x08017a80
  ldr r2, =_sbss
 8006494:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8006498:	200057ec 	.word	0x200057ec

0800649c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800649c:	e7fe      	b.n	800649c <ADC_IRQHandler>
	...

080064a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80064a4:	4b0e      	ldr	r3, [pc, #56]	; (80064e0 <HAL_Init+0x40>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a0d      	ldr	r2, [pc, #52]	; (80064e0 <HAL_Init+0x40>)
 80064aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80064ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80064b0:	4b0b      	ldr	r3, [pc, #44]	; (80064e0 <HAL_Init+0x40>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a0a      	ldr	r2, [pc, #40]	; (80064e0 <HAL_Init+0x40>)
 80064b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80064ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80064bc:	4b08      	ldr	r3, [pc, #32]	; (80064e0 <HAL_Init+0x40>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a07      	ldr	r2, [pc, #28]	; (80064e0 <HAL_Init+0x40>)
 80064c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80064c8:	2003      	movs	r0, #3
 80064ca:	f001 fc09 	bl	8007ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80064ce:	200f      	movs	r0, #15
 80064d0:	f000 f808 	bl	80064e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80064d4:	f7ff fbd4 	bl	8005c80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	40023c00 	.word	0x40023c00

080064e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80064ec:	4b12      	ldr	r3, [pc, #72]	; (8006538 <HAL_InitTick+0x54>)
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	4b12      	ldr	r3, [pc, #72]	; (800653c <HAL_InitTick+0x58>)
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	4619      	mov	r1, r3
 80064f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80064fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006502:	4618      	mov	r0, r3
 8006504:	f001 fc21 	bl	8007d4a <HAL_SYSTICK_Config>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d001      	beq.n	8006512 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e00e      	b.n	8006530 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2b0f      	cmp	r3, #15
 8006516:	d80a      	bhi.n	800652e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006518:	2200      	movs	r2, #0
 800651a:	6879      	ldr	r1, [r7, #4]
 800651c:	f04f 30ff 	mov.w	r0, #4294967295
 8006520:	f001 fbe9 	bl	8007cf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006524:	4a06      	ldr	r2, [pc, #24]	; (8006540 <HAL_InitTick+0x5c>)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800652a:	2300      	movs	r3, #0
 800652c:	e000      	b.n	8006530 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
}
 8006530:	4618      	mov	r0, r3
 8006532:	3708      	adds	r7, #8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	20000000 	.word	0x20000000
 800653c:	20000008 	.word	0x20000008
 8006540:	20000004 	.word	0x20000004

08006544 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006544:	b480      	push	{r7}
 8006546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006548:	4b06      	ldr	r3, [pc, #24]	; (8006564 <HAL_IncTick+0x20>)
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	461a      	mov	r2, r3
 800654e:	4b06      	ldr	r3, [pc, #24]	; (8006568 <HAL_IncTick+0x24>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4413      	add	r3, r2
 8006554:	4a04      	ldr	r2, [pc, #16]	; (8006568 <HAL_IncTick+0x24>)
 8006556:	6013      	str	r3, [r2, #0]
}
 8006558:	bf00      	nop
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	20000008 	.word	0x20000008
 8006568:	20002e94 	.word	0x20002e94

0800656c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800656c:	b480      	push	{r7}
 800656e:	af00      	add	r7, sp, #0
  return uwTick;
 8006570:	4b03      	ldr	r3, [pc, #12]	; (8006580 <HAL_GetTick+0x14>)
 8006572:	681b      	ldr	r3, [r3, #0]
}
 8006574:	4618      	mov	r0, r3
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	20002e94 	.word	0x20002e94

08006584 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800658c:	f7ff ffee 	bl	800656c <HAL_GetTick>
 8006590:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800659c:	d005      	beq.n	80065aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800659e:	4b0a      	ldr	r3, [pc, #40]	; (80065c8 <HAL_Delay+0x44>)
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	461a      	mov	r2, r3
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	4413      	add	r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80065aa:	bf00      	nop
 80065ac:	f7ff ffde 	bl	800656c <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d8f7      	bhi.n	80065ac <HAL_Delay+0x28>
  {
  }
}
 80065bc:	bf00      	nop
 80065be:	bf00      	nop
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	20000008 	.word	0x20000008

080065cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80065d4:	2300      	movs	r3, #0
 80065d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d101      	bne.n	80065e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e033      	b.n	800664a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d109      	bne.n	80065fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f7ff fb70 	bl	8005cd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006602:	f003 0310 	and.w	r3, r3, #16
 8006606:	2b00      	cmp	r3, #0
 8006608:	d118      	bne.n	800663c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006612:	f023 0302 	bic.w	r3, r3, #2
 8006616:	f043 0202 	orr.w	r2, r3, #2
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 fa78 	bl	8006b14 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662e:	f023 0303 	bic.w	r3, r3, #3
 8006632:	f043 0201 	orr.w	r2, r3, #1
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	641a      	str	r2, [r3, #64]	; 0x40
 800663a:	e001      	b.n	8006640 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006648:	7bfb      	ldrb	r3, [r7, #15]
}
 800664a:	4618      	mov	r0, r3
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
	...

08006654 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b086      	sub	sp, #24
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006660:	2300      	movs	r3, #0
 8006662:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800666a:	2b01      	cmp	r3, #1
 800666c:	d101      	bne.n	8006672 <HAL_ADC_Start_DMA+0x1e>
 800666e:	2302      	movs	r3, #2
 8006670:	e0e9      	b.n	8006846 <HAL_ADC_Start_DMA+0x1f2>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	2b01      	cmp	r3, #1
 8006686:	d018      	beq.n	80066ba <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689a      	ldr	r2, [r3, #8]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f042 0201 	orr.w	r2, r2, #1
 8006696:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006698:	4b6d      	ldr	r3, [pc, #436]	; (8006850 <HAL_ADC_Start_DMA+0x1fc>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a6d      	ldr	r2, [pc, #436]	; (8006854 <HAL_ADC_Start_DMA+0x200>)
 800669e:	fba2 2303 	umull	r2, r3, r2, r3
 80066a2:	0c9a      	lsrs	r2, r3, #18
 80066a4:	4613      	mov	r3, r2
 80066a6:	005b      	lsls	r3, r3, #1
 80066a8:	4413      	add	r3, r2
 80066aa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80066ac:	e002      	b.n	80066b4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	3b01      	subs	r3, #1
 80066b2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1f9      	bne.n	80066ae <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066c8:	d107      	bne.n	80066da <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	689a      	ldr	r2, [r3, #8]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	f003 0301 	and.w	r3, r3, #1
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	f040 80a1 	bne.w	800682c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80066f2:	f023 0301 	bic.w	r3, r3, #1
 80066f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006708:	2b00      	cmp	r3, #0
 800670a:	d007      	beq.n	800671c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006710:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006714:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006720:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006728:	d106      	bne.n	8006738 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800672e:	f023 0206 	bic.w	r2, r3, #6
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	645a      	str	r2, [r3, #68]	; 0x44
 8006736:	e002      	b.n	800673e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006746:	4b44      	ldr	r3, [pc, #272]	; (8006858 <HAL_ADC_Start_DMA+0x204>)
 8006748:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674e:	4a43      	ldr	r2, [pc, #268]	; (800685c <HAL_ADC_Start_DMA+0x208>)
 8006750:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006756:	4a42      	ldr	r2, [pc, #264]	; (8006860 <HAL_ADC_Start_DMA+0x20c>)
 8006758:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675e:	4a41      	ldr	r2, [pc, #260]	; (8006864 <HAL_ADC_Start_DMA+0x210>)
 8006760:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800676a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	685a      	ldr	r2, [r3, #4]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800677a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	689a      	ldr	r2, [r3, #8]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800678a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	334c      	adds	r3, #76	; 0x4c
 8006796:	4619      	mov	r1, r3
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f001 fb90 	bl	8007ec0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f003 031f 	and.w	r3, r3, #31
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d12a      	bne.n	8006802 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a2d      	ldr	r2, [pc, #180]	; (8006868 <HAL_ADC_Start_DMA+0x214>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d015      	beq.n	80067e2 <HAL_ADC_Start_DMA+0x18e>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a2c      	ldr	r2, [pc, #176]	; (800686c <HAL_ADC_Start_DMA+0x218>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d105      	bne.n	80067cc <HAL_ADC_Start_DMA+0x178>
 80067c0:	4b25      	ldr	r3, [pc, #148]	; (8006858 <HAL_ADC_Start_DMA+0x204>)
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	f003 031f 	and.w	r3, r3, #31
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00a      	beq.n	80067e2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a27      	ldr	r2, [pc, #156]	; (8006870 <HAL_ADC_Start_DMA+0x21c>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d136      	bne.n	8006844 <HAL_ADC_Start_DMA+0x1f0>
 80067d6:	4b20      	ldr	r3, [pc, #128]	; (8006858 <HAL_ADC_Start_DMA+0x204>)
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f003 0310 	and.w	r3, r3, #16
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d130      	bne.n	8006844 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d129      	bne.n	8006844 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	689a      	ldr	r2, [r3, #8]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80067fe:	609a      	str	r2, [r3, #8]
 8006800:	e020      	b.n	8006844 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a18      	ldr	r2, [pc, #96]	; (8006868 <HAL_ADC_Start_DMA+0x214>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d11b      	bne.n	8006844 <HAL_ADC_Start_DMA+0x1f0>
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d114      	bne.n	8006844 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	689a      	ldr	r2, [r3, #8]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006828:	609a      	str	r2, [r3, #8]
 800682a:	e00b      	b.n	8006844 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006830:	f043 0210 	orr.w	r2, r3, #16
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683c:	f043 0201 	orr.w	r2, r3, #1
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3718      	adds	r7, #24
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	20000000 	.word	0x20000000
 8006854:	431bde83 	.word	0x431bde83
 8006858:	40012300 	.word	0x40012300
 800685c:	08006d0d 	.word	0x08006d0d
 8006860:	08006dc7 	.word	0x08006dc7
 8006864:	08006de3 	.word	0x08006de3
 8006868:	40012000 	.word	0x40012000
 800686c:	40012100 	.word	0x40012100
 8006870:	40012200 	.word	0x40012200

08006874 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80068ba:	2300      	movs	r3, #0
 80068bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d101      	bne.n	80068cc <HAL_ADC_ConfigChannel+0x1c>
 80068c8:	2302      	movs	r3, #2
 80068ca:	e113      	b.n	8006af4 <HAL_ADC_ConfigChannel+0x244>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b09      	cmp	r3, #9
 80068da:	d925      	bls.n	8006928 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68d9      	ldr	r1, [r3, #12]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	461a      	mov	r2, r3
 80068ea:	4613      	mov	r3, r2
 80068ec:	005b      	lsls	r3, r3, #1
 80068ee:	4413      	add	r3, r2
 80068f0:	3b1e      	subs	r3, #30
 80068f2:	2207      	movs	r2, #7
 80068f4:	fa02 f303 	lsl.w	r3, r2, r3
 80068f8:	43da      	mvns	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	400a      	ands	r2, r1
 8006900:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68d9      	ldr	r1, [r3, #12]
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	689a      	ldr	r2, [r3, #8]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	b29b      	uxth	r3, r3
 8006912:	4618      	mov	r0, r3
 8006914:	4603      	mov	r3, r0
 8006916:	005b      	lsls	r3, r3, #1
 8006918:	4403      	add	r3, r0
 800691a:	3b1e      	subs	r3, #30
 800691c:	409a      	lsls	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	430a      	orrs	r2, r1
 8006924:	60da      	str	r2, [r3, #12]
 8006926:	e022      	b.n	800696e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6919      	ldr	r1, [r3, #16]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	b29b      	uxth	r3, r3
 8006934:	461a      	mov	r2, r3
 8006936:	4613      	mov	r3, r2
 8006938:	005b      	lsls	r3, r3, #1
 800693a:	4413      	add	r3, r2
 800693c:	2207      	movs	r2, #7
 800693e:	fa02 f303 	lsl.w	r3, r2, r3
 8006942:	43da      	mvns	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	400a      	ands	r2, r1
 800694a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6919      	ldr	r1, [r3, #16]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	689a      	ldr	r2, [r3, #8]
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	b29b      	uxth	r3, r3
 800695c:	4618      	mov	r0, r3
 800695e:	4603      	mov	r3, r0
 8006960:	005b      	lsls	r3, r3, #1
 8006962:	4403      	add	r3, r0
 8006964:	409a      	lsls	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	430a      	orrs	r2, r1
 800696c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	2b06      	cmp	r3, #6
 8006974:	d824      	bhi.n	80069c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	685a      	ldr	r2, [r3, #4]
 8006980:	4613      	mov	r3, r2
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4413      	add	r3, r2
 8006986:	3b05      	subs	r3, #5
 8006988:	221f      	movs	r2, #31
 800698a:	fa02 f303 	lsl.w	r3, r2, r3
 800698e:	43da      	mvns	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	400a      	ands	r2, r1
 8006996:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	4618      	mov	r0, r3
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	685a      	ldr	r2, [r3, #4]
 80069aa:	4613      	mov	r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4413      	add	r3, r2
 80069b0:	3b05      	subs	r3, #5
 80069b2:	fa00 f203 	lsl.w	r2, r0, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	635a      	str	r2, [r3, #52]	; 0x34
 80069be:	e04c      	b.n	8006a5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	2b0c      	cmp	r3, #12
 80069c6:	d824      	bhi.n	8006a12 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	4613      	mov	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4413      	add	r3, r2
 80069d8:	3b23      	subs	r3, #35	; 0x23
 80069da:	221f      	movs	r2, #31
 80069dc:	fa02 f303 	lsl.w	r3, r2, r3
 80069e0:	43da      	mvns	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	400a      	ands	r2, r1
 80069e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	4618      	mov	r0, r3
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	685a      	ldr	r2, [r3, #4]
 80069fc:	4613      	mov	r3, r2
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	4413      	add	r3, r2
 8006a02:	3b23      	subs	r3, #35	; 0x23
 8006a04:	fa00 f203 	lsl.w	r2, r0, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	631a      	str	r2, [r3, #48]	; 0x30
 8006a10:	e023      	b.n	8006a5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	4413      	add	r3, r2
 8006a22:	3b41      	subs	r3, #65	; 0x41
 8006a24:	221f      	movs	r2, #31
 8006a26:	fa02 f303 	lsl.w	r3, r2, r3
 8006a2a:	43da      	mvns	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	400a      	ands	r2, r1
 8006a32:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	4618      	mov	r0, r3
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	685a      	ldr	r2, [r3, #4]
 8006a46:	4613      	mov	r3, r2
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	4413      	add	r3, r2
 8006a4c:	3b41      	subs	r3, #65	; 0x41
 8006a4e:	fa00 f203 	lsl.w	r2, r0, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	430a      	orrs	r2, r1
 8006a58:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006a5a:	4b29      	ldr	r3, [pc, #164]	; (8006b00 <HAL_ADC_ConfigChannel+0x250>)
 8006a5c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a28      	ldr	r2, [pc, #160]	; (8006b04 <HAL_ADC_ConfigChannel+0x254>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d10f      	bne.n	8006a88 <HAL_ADC_ConfigChannel+0x1d8>
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2b12      	cmp	r3, #18
 8006a6e:	d10b      	bne.n	8006a88 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a1d      	ldr	r2, [pc, #116]	; (8006b04 <HAL_ADC_ConfigChannel+0x254>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d12b      	bne.n	8006aea <HAL_ADC_ConfigChannel+0x23a>
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a1c      	ldr	r2, [pc, #112]	; (8006b08 <HAL_ADC_ConfigChannel+0x258>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d003      	beq.n	8006aa4 <HAL_ADC_ConfigChannel+0x1f4>
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2b11      	cmp	r3, #17
 8006aa2:	d122      	bne.n	8006aea <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a11      	ldr	r2, [pc, #68]	; (8006b08 <HAL_ADC_ConfigChannel+0x258>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d111      	bne.n	8006aea <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006ac6:	4b11      	ldr	r3, [pc, #68]	; (8006b0c <HAL_ADC_ConfigChannel+0x25c>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a11      	ldr	r2, [pc, #68]	; (8006b10 <HAL_ADC_ConfigChannel+0x260>)
 8006acc:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad0:	0c9a      	lsrs	r2, r3, #18
 8006ad2:	4613      	mov	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4413      	add	r3, r2
 8006ad8:	005b      	lsls	r3, r3, #1
 8006ada:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006adc:	e002      	b.n	8006ae4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1f9      	bne.n	8006ade <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	40012300 	.word	0x40012300
 8006b04:	40012000 	.word	0x40012000
 8006b08:	10000012 	.word	0x10000012
 8006b0c:	20000000 	.word	0x20000000
 8006b10:	431bde83 	.word	0x431bde83

08006b14 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006b1c:	4b79      	ldr	r3, [pc, #484]	; (8006d04 <ADC_Init+0x1f0>)
 8006b1e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	685a      	ldr	r2, [r3, #4]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	431a      	orrs	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	685a      	ldr	r2, [r3, #4]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b48:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	6859      	ldr	r1, [r3, #4]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	021a      	lsls	r2, r3, #8
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	430a      	orrs	r2, r1
 8006b5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006b6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	6859      	ldr	r1, [r3, #4]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	689a      	ldr	r2, [r3, #8]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	430a      	orrs	r2, r1
 8006b7e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	689a      	ldr	r2, [r3, #8]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6899      	ldr	r1, [r3, #8]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	68da      	ldr	r2, [r3, #12]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	430a      	orrs	r2, r1
 8006ba0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba6:	4a58      	ldr	r2, [pc, #352]	; (8006d08 <ADC_Init+0x1f4>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d022      	beq.n	8006bf2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689a      	ldr	r2, [r3, #8]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006bba:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	6899      	ldr	r1, [r3, #8]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	430a      	orrs	r2, r1
 8006bcc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	689a      	ldr	r2, [r3, #8]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006bdc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	6899      	ldr	r1, [r3, #8]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	430a      	orrs	r2, r1
 8006bee:	609a      	str	r2, [r3, #8]
 8006bf0:	e00f      	b.n	8006c12 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	689a      	ldr	r2, [r3, #8]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006c00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	689a      	ldr	r2, [r3, #8]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006c10:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	689a      	ldr	r2, [r3, #8]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f022 0202 	bic.w	r2, r2, #2
 8006c20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	6899      	ldr	r1, [r3, #8]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	7e1b      	ldrb	r3, [r3, #24]
 8006c2c:	005a      	lsls	r2, r3, #1
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	430a      	orrs	r2, r1
 8006c34:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d01b      	beq.n	8006c78 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	685a      	ldr	r2, [r3, #4]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c4e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	685a      	ldr	r2, [r3, #4]
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006c5e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6859      	ldr	r1, [r3, #4]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	035a      	lsls	r2, r3, #13
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	605a      	str	r2, [r3, #4]
 8006c76:	e007      	b.n	8006c88 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	685a      	ldr	r2, [r3, #4]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c86:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006c96:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	051a      	lsls	r2, r3, #20
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	430a      	orrs	r2, r1
 8006cac:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	689a      	ldr	r2, [r3, #8]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006cbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	6899      	ldr	r1, [r3, #8]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006cca:	025a      	lsls	r2, r3, #9
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689a      	ldr	r2, [r3, #8]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ce2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	6899      	ldr	r1, [r3, #8]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	029a      	lsls	r2, r3, #10
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	430a      	orrs	r2, r1
 8006cf6:	609a      	str	r2, [r3, #8]
}
 8006cf8:	bf00      	nop
 8006cfa:	3714      	adds	r7, #20
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr
 8006d04:	40012300 	.word	0x40012300
 8006d08:	0f000001 	.word	0x0f000001

08006d0c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d18:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d13c      	bne.n	8006da0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d12b      	bne.n	8006d98 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d127      	bne.n	8006d98 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d4e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d006      	beq.n	8006d64 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d119      	bne.n	8006d98 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	685a      	ldr	r2, [r3, #4]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f022 0220 	bic.w	r2, r2, #32
 8006d72:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d105      	bne.n	8006d98 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d90:	f043 0201 	orr.w	r2, r3, #1
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f7ff fd6b 	bl	8006874 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006d9e:	e00e      	b.n	8006dbe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da4:	f003 0310 	and.w	r3, r3, #16
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d003      	beq.n	8006db4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006dac:	68f8      	ldr	r0, [r7, #12]
 8006dae:	f7ff fd75 	bl	800689c <HAL_ADC_ErrorCallback>
}
 8006db2:	e004      	b.n	8006dbe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	4798      	blx	r3
}
 8006dbe:	bf00      	nop
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}

08006dc6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b084      	sub	sp, #16
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f7ff fd57 	bl	8006888 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006dda:	bf00      	nop
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b084      	sub	sp, #16
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dee:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2240      	movs	r2, #64	; 0x40
 8006df4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dfa:	f043 0204 	orr.w	r2, r3, #4
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f7ff fd4a 	bl	800689c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006e08:	bf00      	nop
 8006e0a:	3710      	adds	r7, #16
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e0ed      	b.n	8006ffe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d102      	bne.n	8006e34 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7ff f864 	bl	8005efc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f042 0201 	orr.w	r2, r2, #1
 8006e42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e44:	f7ff fb92 	bl	800656c <HAL_GetTick>
 8006e48:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006e4a:	e012      	b.n	8006e72 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006e4c:	f7ff fb8e 	bl	800656c <HAL_GetTick>
 8006e50:	4602      	mov	r2, r0
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	2b0a      	cmp	r3, #10
 8006e58:	d90b      	bls.n	8006e72 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2205      	movs	r2, #5
 8006e6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e0c5      	b.n	8006ffe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	f003 0301 	and.w	r3, r3, #1
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d0e5      	beq.n	8006e4c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 0202 	bic.w	r2, r2, #2
 8006e8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e90:	f7ff fb6c 	bl	800656c <HAL_GetTick>
 8006e94:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006e96:	e012      	b.n	8006ebe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006e98:	f7ff fb68 	bl	800656c <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	2b0a      	cmp	r3, #10
 8006ea4:	d90b      	bls.n	8006ebe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eaa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2205      	movs	r2, #5
 8006eb6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e09f      	b.n	8006ffe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	f003 0302 	and.w	r3, r3, #2
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1e5      	bne.n	8006e98 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	7e1b      	ldrb	r3, [r3, #24]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d108      	bne.n	8006ee6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ee2:	601a      	str	r2, [r3, #0]
 8006ee4:	e007      	b.n	8006ef6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ef4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	7e5b      	ldrb	r3, [r3, #25]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d108      	bne.n	8006f10 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f0c:	601a      	str	r2, [r3, #0]
 8006f0e:	e007      	b.n	8006f20 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	7e9b      	ldrb	r3, [r3, #26]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d108      	bne.n	8006f3a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681a      	ldr	r2, [r3, #0]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f042 0220 	orr.w	r2, r2, #32
 8006f36:	601a      	str	r2, [r3, #0]
 8006f38:	e007      	b.n	8006f4a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f022 0220 	bic.w	r2, r2, #32
 8006f48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	7edb      	ldrb	r3, [r3, #27]
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d108      	bne.n	8006f64 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f022 0210 	bic.w	r2, r2, #16
 8006f60:	601a      	str	r2, [r3, #0]
 8006f62:	e007      	b.n	8006f74 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f042 0210 	orr.w	r2, r2, #16
 8006f72:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	7f1b      	ldrb	r3, [r3, #28]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d108      	bne.n	8006f8e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f042 0208 	orr.w	r2, r2, #8
 8006f8a:	601a      	str	r2, [r3, #0]
 8006f8c:	e007      	b.n	8006f9e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	681a      	ldr	r2, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f022 0208 	bic.w	r2, r2, #8
 8006f9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	7f5b      	ldrb	r3, [r3, #29]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d108      	bne.n	8006fb8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f042 0204 	orr.w	r2, r2, #4
 8006fb4:	601a      	str	r2, [r3, #0]
 8006fb6:	e007      	b.n	8006fc8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f022 0204 	bic.w	r2, r2, #4
 8006fc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	689a      	ldr	r2, [r3, #8]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	431a      	orrs	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	695b      	ldr	r3, [r3, #20]
 8006fdc:	ea42 0103 	orr.w	r1, r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	1e5a      	subs	r2, r3, #1
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	430a      	orrs	r2, r1
 8006fec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
	...

08007008 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8007008:	b480      	push	{r7}
 800700a:	b087      	sub	sp, #28
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800701e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8007020:	7cfb      	ldrb	r3, [r7, #19]
 8007022:	2b01      	cmp	r3, #1
 8007024:	d003      	beq.n	800702e <HAL_CAN_ConfigFilter+0x26>
 8007026:	7cfb      	ldrb	r3, [r7, #19]
 8007028:	2b02      	cmp	r3, #2
 800702a:	f040 80be 	bne.w	80071aa <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800702e:	4b65      	ldr	r3, [pc, #404]	; (80071c4 <HAL_CAN_ConfigFilter+0x1bc>)
 8007030:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007038:	f043 0201 	orr.w	r2, r3, #1
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007048:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705c:	021b      	lsls	r3, r3, #8
 800705e:	431a      	orrs	r2, r3
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	695b      	ldr	r3, [r3, #20]
 800706a:	f003 031f 	and.w	r3, r3, #31
 800706e:	2201      	movs	r2, #1
 8007070:	fa02 f303 	lsl.w	r3, r2, r3
 8007074:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	43db      	mvns	r3, r3
 8007080:	401a      	ands	r2, r3
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	69db      	ldr	r3, [r3, #28]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d123      	bne.n	80070d8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	43db      	mvns	r3, r3
 800709a:	401a      	ands	r2, r3
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80070ae:	683a      	ldr	r2, [r7, #0]
 80070b0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80070b2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	3248      	adds	r2, #72	; 0x48
 80070b8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80070cc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80070ce:	6979      	ldr	r1, [r7, #20]
 80070d0:	3348      	adds	r3, #72	; 0x48
 80070d2:	00db      	lsls	r3, r3, #3
 80070d4:	440b      	add	r3, r1
 80070d6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	69db      	ldr	r3, [r3, #28]
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d122      	bne.n	8007126 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	431a      	orrs	r2, r3
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80070fc:	683a      	ldr	r2, [r7, #0]
 80070fe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007100:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	3248      	adds	r2, #72	; 0x48
 8007106:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800711a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800711c:	6979      	ldr	r1, [r7, #20]
 800711e:	3348      	adds	r3, #72	; 0x48
 8007120:	00db      	lsls	r3, r3, #3
 8007122:	440b      	add	r3, r1
 8007124:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d109      	bne.n	8007142 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	43db      	mvns	r3, r3
 8007138:	401a      	ands	r2, r3
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8007140:	e007      	b.n	8007152 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	431a      	orrs	r2, r3
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	691b      	ldr	r3, [r3, #16]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d109      	bne.n	800716e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	43db      	mvns	r3, r3
 8007164:	401a      	ands	r2, r3
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800716c:	e007      	b.n	800717e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	431a      	orrs	r2, r3
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	6a1b      	ldr	r3, [r3, #32]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d107      	bne.n	8007196 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	431a      	orrs	r2, r3
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800719c:	f023 0201 	bic.w	r2, r3, #1
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80071a6:	2300      	movs	r3, #0
 80071a8:	e006      	b.n	80071b8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
  }
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	371c      	adds	r7, #28
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr
 80071c4:	40006400 	.word	0x40006400

080071c8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d12e      	bne.n	800723a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2202      	movs	r2, #2
 80071e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f022 0201 	bic.w	r2, r2, #1
 80071f2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80071f4:	f7ff f9ba 	bl	800656c <HAL_GetTick>
 80071f8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80071fa:	e012      	b.n	8007222 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80071fc:	f7ff f9b6 	bl	800656c <HAL_GetTick>
 8007200:	4602      	mov	r2, r0
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	2b0a      	cmp	r3, #10
 8007208:	d90b      	bls.n	8007222 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2205      	movs	r2, #5
 800721a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800721e:	2301      	movs	r3, #1
 8007220:	e012      	b.n	8007248 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	f003 0301 	and.w	r3, r3, #1
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1e5      	bne.n	80071fc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8007236:	2300      	movs	r3, #0
 8007238:	e006      	b.n	8007248 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800723e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
  }
}
 8007248:	4618      	mov	r0, r3
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8007250:	b480      	push	{r7}
 8007252:	b089      	sub	sp, #36	; 0x24
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]
 800725c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007264:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800726e:	7ffb      	ldrb	r3, [r7, #31]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d003      	beq.n	800727c <HAL_CAN_AddTxMessage+0x2c>
 8007274:	7ffb      	ldrb	r3, [r7, #31]
 8007276:	2b02      	cmp	r3, #2
 8007278:	f040 80b8 	bne.w	80073ec <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d10a      	bne.n	800729c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800728c:	2b00      	cmp	r3, #0
 800728e:	d105      	bne.n	800729c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007296:	2b00      	cmp	r3, #0
 8007298:	f000 80a0 	beq.w	80073dc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800729c:	69bb      	ldr	r3, [r7, #24]
 800729e:	0e1b      	lsrs	r3, r3, #24
 80072a0:	f003 0303 	and.w	r3, r3, #3
 80072a4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d907      	bls.n	80072bc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	e09e      	b.n	80073fa <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80072bc:	2201      	movs	r2, #1
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	409a      	lsls	r2, r3
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10d      	bne.n	80072ea <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80072d8:	68f9      	ldr	r1, [r7, #12]
 80072da:	6809      	ldr	r1, [r1, #0]
 80072dc:	431a      	orrs	r2, r3
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	3318      	adds	r3, #24
 80072e2:	011b      	lsls	r3, r3, #4
 80072e4:	440b      	add	r3, r1
 80072e6:	601a      	str	r2, [r3, #0]
 80072e8:	e00f      	b.n	800730a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80072f4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80072fa:	68f9      	ldr	r1, [r7, #12]
 80072fc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80072fe:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	3318      	adds	r3, #24
 8007304:	011b      	lsls	r3, r3, #4
 8007306:	440b      	add	r3, r1
 8007308:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6819      	ldr	r1, [r3, #0]
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	691a      	ldr	r2, [r3, #16]
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	3318      	adds	r3, #24
 8007316:	011b      	lsls	r3, r3, #4
 8007318:	440b      	add	r3, r1
 800731a:	3304      	adds	r3, #4
 800731c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	7d1b      	ldrb	r3, [r3, #20]
 8007322:	2b01      	cmp	r3, #1
 8007324:	d111      	bne.n	800734a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	3318      	adds	r3, #24
 800732e:	011b      	lsls	r3, r3, #4
 8007330:	4413      	add	r3, r2
 8007332:	3304      	adds	r3, #4
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	6811      	ldr	r1, [r2, #0]
 800733a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	3318      	adds	r3, #24
 8007342:	011b      	lsls	r3, r3, #4
 8007344:	440b      	add	r3, r1
 8007346:	3304      	adds	r3, #4
 8007348:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	3307      	adds	r3, #7
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	061a      	lsls	r2, r3, #24
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	3306      	adds	r3, #6
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	041b      	lsls	r3, r3, #16
 800735a:	431a      	orrs	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	3305      	adds	r3, #5
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	021b      	lsls	r3, r3, #8
 8007364:	4313      	orrs	r3, r2
 8007366:	687a      	ldr	r2, [r7, #4]
 8007368:	3204      	adds	r2, #4
 800736a:	7812      	ldrb	r2, [r2, #0]
 800736c:	4610      	mov	r0, r2
 800736e:	68fa      	ldr	r2, [r7, #12]
 8007370:	6811      	ldr	r1, [r2, #0]
 8007372:	ea43 0200 	orr.w	r2, r3, r0
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	011b      	lsls	r3, r3, #4
 800737a:	440b      	add	r3, r1
 800737c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8007380:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	3303      	adds	r3, #3
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	061a      	lsls	r2, r3, #24
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	3302      	adds	r3, #2
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	041b      	lsls	r3, r3, #16
 8007392:	431a      	orrs	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	3301      	adds	r3, #1
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	021b      	lsls	r3, r3, #8
 800739c:	4313      	orrs	r3, r2
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	7812      	ldrb	r2, [r2, #0]
 80073a2:	4610      	mov	r0, r2
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	6811      	ldr	r1, [r2, #0]
 80073a8:	ea43 0200 	orr.w	r2, r3, r0
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	011b      	lsls	r3, r3, #4
 80073b0:	440b      	add	r3, r1
 80073b2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80073b6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	3318      	adds	r3, #24
 80073c0:	011b      	lsls	r3, r3, #4
 80073c2:	4413      	add	r3, r2
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	6811      	ldr	r1, [r2, #0]
 80073ca:	f043 0201 	orr.w	r2, r3, #1
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	3318      	adds	r3, #24
 80073d2:	011b      	lsls	r3, r3, #4
 80073d4:	440b      	add	r3, r1
 80073d6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80073d8:	2300      	movs	r3, #0
 80073da:	e00e      	b.n	80073fa <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	e006      	b.n	80073fa <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
  }
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3724      	adds	r7, #36	; 0x24
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr

08007406 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8007406:	b480      	push	{r7}
 8007408:	b085      	sub	sp, #20
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800740e:	2300      	movs	r3, #0
 8007410:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007418:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800741a:	7afb      	ldrb	r3, [r7, #11]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d002      	beq.n	8007426 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8007420:	7afb      	ldrb	r3, [r7, #11]
 8007422:	2b02      	cmp	r3, #2
 8007424:	d11d      	bne.n	8007462 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	689b      	ldr	r3, [r3, #8]
 800742c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007430:	2b00      	cmp	r3, #0
 8007432:	d002      	beq.n	800743a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	3301      	adds	r3, #1
 8007438:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d002      	beq.n	800744e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	3301      	adds	r3, #1
 800744c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007458:	2b00      	cmp	r3, #0
 800745a:	d002      	beq.n	8007462 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	3301      	adds	r3, #1
 8007460:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8007462:	68fb      	ldr	r3, [r7, #12]
}
 8007464:	4618      	mov	r0, r3
 8007466:	3714      	adds	r7, #20
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8007470:	b480      	push	{r7}
 8007472:	b087      	sub	sp, #28
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	60b9      	str	r1, [r7, #8]
 800747a:	607a      	str	r2, [r7, #4]
 800747c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007484:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007486:	7dfb      	ldrb	r3, [r7, #23]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d003      	beq.n	8007494 <HAL_CAN_GetRxMessage+0x24>
 800748c:	7dfb      	ldrb	r3, [r7, #23]
 800748e:	2b02      	cmp	r3, #2
 8007490:	f040 80f3 	bne.w	800767a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d10e      	bne.n	80074b8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	f003 0303 	and.w	r3, r3, #3
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d116      	bne.n	80074d6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	e0e7      	b.n	8007688 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	f003 0303 	and.w	r3, r3, #3
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d107      	bne.n	80074d6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e0d8      	b.n	8007688 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	331b      	adds	r3, #27
 80074de:	011b      	lsls	r3, r3, #4
 80074e0:	4413      	add	r3, r2
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 0204 	and.w	r2, r3, #4
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d10c      	bne.n	800750e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	331b      	adds	r3, #27
 80074fc:	011b      	lsls	r3, r3, #4
 80074fe:	4413      	add	r3, r2
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	0d5b      	lsrs	r3, r3, #21
 8007504:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	601a      	str	r2, [r3, #0]
 800750c:	e00b      	b.n	8007526 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	331b      	adds	r3, #27
 8007516:	011b      	lsls	r3, r3, #4
 8007518:	4413      	add	r3, r2
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	08db      	lsrs	r3, r3, #3
 800751e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	331b      	adds	r3, #27
 800752e:	011b      	lsls	r3, r3, #4
 8007530:	4413      	add	r3, r2
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 0202 	and.w	r2, r3, #2
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	331b      	adds	r3, #27
 8007544:	011b      	lsls	r3, r3, #4
 8007546:	4413      	add	r3, r2
 8007548:	3304      	adds	r3, #4
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 020f 	and.w	r2, r3, #15
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	331b      	adds	r3, #27
 800755c:	011b      	lsls	r3, r3, #4
 800755e:	4413      	add	r3, r2
 8007560:	3304      	adds	r3, #4
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	0a1b      	lsrs	r3, r3, #8
 8007566:	b2da      	uxtb	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	331b      	adds	r3, #27
 8007574:	011b      	lsls	r3, r3, #4
 8007576:	4413      	add	r3, r2
 8007578:	3304      	adds	r3, #4
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	0c1b      	lsrs	r3, r3, #16
 800757e:	b29a      	uxth	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	011b      	lsls	r3, r3, #4
 800758c:	4413      	add	r3, r2
 800758e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	b2da      	uxtb	r2, r3
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	011b      	lsls	r3, r3, #4
 80075a2:	4413      	add	r3, r2
 80075a4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	0a1a      	lsrs	r2, r3, #8
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	3301      	adds	r3, #1
 80075b0:	b2d2      	uxtb	r2, r2
 80075b2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	011b      	lsls	r3, r3, #4
 80075bc:	4413      	add	r3, r2
 80075be:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	0c1a      	lsrs	r2, r3, #16
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	3302      	adds	r3, #2
 80075ca:	b2d2      	uxtb	r2, r2
 80075cc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	011b      	lsls	r3, r3, #4
 80075d6:	4413      	add	r3, r2
 80075d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	0e1a      	lsrs	r2, r3, #24
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	3303      	adds	r3, #3
 80075e4:	b2d2      	uxtb	r2, r2
 80075e6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	011b      	lsls	r3, r3, #4
 80075f0:	4413      	add	r3, r2
 80075f2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	3304      	adds	r3, #4
 80075fc:	b2d2      	uxtb	r2, r2
 80075fe:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	011b      	lsls	r3, r3, #4
 8007608:	4413      	add	r3, r2
 800760a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	0a1a      	lsrs	r2, r3, #8
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	3305      	adds	r3, #5
 8007616:	b2d2      	uxtb	r2, r2
 8007618:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	011b      	lsls	r3, r3, #4
 8007622:	4413      	add	r3, r2
 8007624:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	0c1a      	lsrs	r2, r3, #16
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	3306      	adds	r3, #6
 8007630:	b2d2      	uxtb	r2, r2
 8007632:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	011b      	lsls	r3, r3, #4
 800763c:	4413      	add	r3, r2
 800763e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	0e1a      	lsrs	r2, r3, #24
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	3307      	adds	r3, #7
 800764a:	b2d2      	uxtb	r2, r2
 800764c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d108      	bne.n	8007666 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	68da      	ldr	r2, [r3, #12]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f042 0220 	orr.w	r2, r2, #32
 8007662:	60da      	str	r2, [r3, #12]
 8007664:	e007      	b.n	8007676 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	691a      	ldr	r2, [r3, #16]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f042 0220 	orr.w	r2, r2, #32
 8007674:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007676:	2300      	movs	r3, #0
 8007678:	e006      	b.n	8007688 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
  }
}
 8007688:	4618      	mov	r0, r3
 800768a:	371c      	adds	r7, #28
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80076a4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80076a6:	7bfb      	ldrb	r3, [r7, #15]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d002      	beq.n	80076b2 <HAL_CAN_ActivateNotification+0x1e>
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
 80076ae:	2b02      	cmp	r3, #2
 80076b0:	d109      	bne.n	80076c6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	6959      	ldr	r1, [r3, #20]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	683a      	ldr	r2, [r7, #0]
 80076be:	430a      	orrs	r2, r1
 80076c0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80076c2:	2300      	movs	r3, #0
 80076c4:	e006      	b.n	80076d4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
  }
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3714      	adds	r7, #20
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b08a      	sub	sp, #40	; 0x28
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80076e8:	2300      	movs	r3, #0
 80076ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	695b      	ldr	r3, [r3, #20]
 80076f2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	68db      	ldr	r3, [r3, #12]
 800770a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800771c:	6a3b      	ldr	r3, [r7, #32]
 800771e:	f003 0301 	and.w	r3, r3, #1
 8007722:	2b00      	cmp	r3, #0
 8007724:	d07c      	beq.n	8007820 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	f003 0301 	and.w	r3, r3, #1
 800772c:	2b00      	cmp	r3, #0
 800772e:	d023      	beq.n	8007778 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2201      	movs	r2, #1
 8007736:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	f003 0302 	and.w	r3, r3, #2
 800773e:	2b00      	cmp	r3, #0
 8007740:	d003      	beq.n	800774a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f983 	bl	8007a4e <HAL_CAN_TxMailbox0CompleteCallback>
 8007748:	e016      	b.n	8007778 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	f003 0304 	and.w	r3, r3, #4
 8007750:	2b00      	cmp	r3, #0
 8007752:	d004      	beq.n	800775e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007756:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800775a:	627b      	str	r3, [r7, #36]	; 0x24
 800775c:	e00c      	b.n	8007778 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	f003 0308 	and.w	r3, r3, #8
 8007764:	2b00      	cmp	r3, #0
 8007766:	d004      	beq.n	8007772 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800776e:	627b      	str	r3, [r7, #36]	; 0x24
 8007770:	e002      	b.n	8007778 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 f989 	bl	8007a8a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800777e:	2b00      	cmp	r3, #0
 8007780:	d024      	beq.n	80077cc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f44f 7280 	mov.w	r2, #256	; 0x100
 800778a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007792:	2b00      	cmp	r3, #0
 8007794:	d003      	beq.n	800779e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f963 	bl	8007a62 <HAL_CAN_TxMailbox1CompleteCallback>
 800779c:	e016      	b.n	80077cc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d004      	beq.n	80077b2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80077a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80077ae:	627b      	str	r3, [r7, #36]	; 0x24
 80077b0:	e00c      	b.n	80077cc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d004      	beq.n	80077c6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80077bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077c2:	627b      	str	r3, [r7, #36]	; 0x24
 80077c4:	e002      	b.n	80077cc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f969 	bl	8007a9e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d024      	beq.n	8007820 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80077de:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d003      	beq.n	80077f2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f943 	bl	8007a76 <HAL_CAN_TxMailbox2CompleteCallback>
 80077f0:	e016      	b.n	8007820 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d004      	beq.n	8007806 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80077fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007802:	627b      	str	r3, [r7, #36]	; 0x24
 8007804:	e00c      	b.n	8007820 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800780c:	2b00      	cmp	r3, #0
 800780e:	d004      	beq.n	800781a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007812:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007816:	627b      	str	r3, [r7, #36]	; 0x24
 8007818:	e002      	b.n	8007820 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 f949 	bl	8007ab2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007820:	6a3b      	ldr	r3, [r7, #32]
 8007822:	f003 0308 	and.w	r3, r3, #8
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00c      	beq.n	8007844 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	f003 0310 	and.w	r3, r3, #16
 8007830:	2b00      	cmp	r3, #0
 8007832:	d007      	beq.n	8007844 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007836:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800783a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2210      	movs	r2, #16
 8007842:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007844:	6a3b      	ldr	r3, [r7, #32]
 8007846:	f003 0304 	and.w	r3, r3, #4
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00b      	beq.n	8007866 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	f003 0308 	and.w	r3, r3, #8
 8007854:	2b00      	cmp	r3, #0
 8007856:	d006      	beq.n	8007866 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2208      	movs	r2, #8
 800785e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f930 	bl	8007ac6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007866:	6a3b      	ldr	r3, [r7, #32]
 8007868:	f003 0302 	and.w	r3, r3, #2
 800786c:	2b00      	cmp	r3, #0
 800786e:	d009      	beq.n	8007884 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	f003 0303 	and.w	r3, r3, #3
 800787a:	2b00      	cmp	r3, #0
 800787c:	d002      	beq.n	8007884 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7fe f8b2 	bl	80059e8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8007884:	6a3b      	ldr	r3, [r7, #32]
 8007886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00c      	beq.n	80078a8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	f003 0310 	and.w	r3, r3, #16
 8007894:	2b00      	cmp	r3, #0
 8007896:	d007      	beq.n	80078a8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800789e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2210      	movs	r2, #16
 80078a6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80078a8:	6a3b      	ldr	r3, [r7, #32]
 80078aa:	f003 0320 	and.w	r3, r3, #32
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00b      	beq.n	80078ca <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	f003 0308 	and.w	r3, r3, #8
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d006      	beq.n	80078ca <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2208      	movs	r2, #8
 80078c2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 f912 	bl	8007aee <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80078ca:	6a3b      	ldr	r3, [r7, #32]
 80078cc:	f003 0310 	and.w	r3, r3, #16
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d009      	beq.n	80078e8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	f003 0303 	and.w	r3, r3, #3
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d002      	beq.n	80078e8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 f8f9 	bl	8007ada <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80078e8:	6a3b      	ldr	r3, [r7, #32]
 80078ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00b      	beq.n	800790a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	f003 0310 	and.w	r3, r3, #16
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d006      	beq.n	800790a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2210      	movs	r2, #16
 8007902:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 f8fc 	bl	8007b02 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800790a:	6a3b      	ldr	r3, [r7, #32]
 800790c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00b      	beq.n	800792c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	f003 0308 	and.w	r3, r3, #8
 800791a:	2b00      	cmp	r3, #0
 800791c:	d006      	beq.n	800792c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2208      	movs	r2, #8
 8007924:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f8f5 	bl	8007b16 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800792c:	6a3b      	ldr	r3, [r7, #32]
 800792e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007932:	2b00      	cmp	r3, #0
 8007934:	d07b      	beq.n	8007a2e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	f003 0304 	and.w	r3, r3, #4
 800793c:	2b00      	cmp	r3, #0
 800793e:	d072      	beq.n	8007a26 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007940:	6a3b      	ldr	r3, [r7, #32]
 8007942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007946:	2b00      	cmp	r3, #0
 8007948:	d008      	beq.n	800795c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007950:	2b00      	cmp	r3, #0
 8007952:	d003      	beq.n	800795c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007956:	f043 0301 	orr.w	r3, r3, #1
 800795a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800795c:	6a3b      	ldr	r3, [r7, #32]
 800795e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007962:	2b00      	cmp	r3, #0
 8007964:	d008      	beq.n	8007978 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800796c:	2b00      	cmp	r3, #0
 800796e:	d003      	beq.n	8007978 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8007970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007972:	f043 0302 	orr.w	r3, r3, #2
 8007976:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007978:	6a3b      	ldr	r3, [r7, #32]
 800797a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800797e:	2b00      	cmp	r3, #0
 8007980:	d008      	beq.n	8007994 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007988:	2b00      	cmp	r3, #0
 800798a:	d003      	beq.n	8007994 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800798c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798e:	f043 0304 	orr.w	r3, r3, #4
 8007992:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007994:	6a3b      	ldr	r3, [r7, #32]
 8007996:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800799a:	2b00      	cmp	r3, #0
 800799c:	d043      	beq.n	8007a26 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d03e      	beq.n	8007a26 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80079ae:	2b60      	cmp	r3, #96	; 0x60
 80079b0:	d02b      	beq.n	8007a0a <HAL_CAN_IRQHandler+0x32a>
 80079b2:	2b60      	cmp	r3, #96	; 0x60
 80079b4:	d82e      	bhi.n	8007a14 <HAL_CAN_IRQHandler+0x334>
 80079b6:	2b50      	cmp	r3, #80	; 0x50
 80079b8:	d022      	beq.n	8007a00 <HAL_CAN_IRQHandler+0x320>
 80079ba:	2b50      	cmp	r3, #80	; 0x50
 80079bc:	d82a      	bhi.n	8007a14 <HAL_CAN_IRQHandler+0x334>
 80079be:	2b40      	cmp	r3, #64	; 0x40
 80079c0:	d019      	beq.n	80079f6 <HAL_CAN_IRQHandler+0x316>
 80079c2:	2b40      	cmp	r3, #64	; 0x40
 80079c4:	d826      	bhi.n	8007a14 <HAL_CAN_IRQHandler+0x334>
 80079c6:	2b30      	cmp	r3, #48	; 0x30
 80079c8:	d010      	beq.n	80079ec <HAL_CAN_IRQHandler+0x30c>
 80079ca:	2b30      	cmp	r3, #48	; 0x30
 80079cc:	d822      	bhi.n	8007a14 <HAL_CAN_IRQHandler+0x334>
 80079ce:	2b10      	cmp	r3, #16
 80079d0:	d002      	beq.n	80079d8 <HAL_CAN_IRQHandler+0x2f8>
 80079d2:	2b20      	cmp	r3, #32
 80079d4:	d005      	beq.n	80079e2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80079d6:	e01d      	b.n	8007a14 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80079d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079da:	f043 0308 	orr.w	r3, r3, #8
 80079de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80079e0:	e019      	b.n	8007a16 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80079e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e4:	f043 0310 	orr.w	r3, r3, #16
 80079e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80079ea:	e014      	b.n	8007a16 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80079ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ee:	f043 0320 	orr.w	r3, r3, #32
 80079f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80079f4:	e00f      	b.n	8007a16 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80079f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80079fe:	e00a      	b.n	8007a16 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a06:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007a08:	e005      	b.n	8007a16 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a10:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007a12:	e000      	b.n	8007a16 <HAL_CAN_IRQHandler+0x336>
            break;
 8007a14:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	699a      	ldr	r2, [r3, #24]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007a24:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	2204      	movs	r2, #4
 8007a2c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d008      	beq.n	8007a46 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3a:	431a      	orrs	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 f872 	bl	8007b2a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007a46:	bf00      	nop
 8007a48:	3728      	adds	r7, #40	; 0x28
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007a4e:	b480      	push	{r7}
 8007a50:	b083      	sub	sp, #12
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8007a56:	bf00      	nop
 8007a58:	370c      	adds	r7, #12
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr

08007a62 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b083      	sub	sp, #12
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8007a6a:	bf00      	nop
 8007a6c:	370c      	adds	r7, #12
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr

08007a76 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007a76:	b480      	push	{r7}
 8007a78:	b083      	sub	sp, #12
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8007a7e:	bf00      	nop
 8007a80:	370c      	adds	r7, #12
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr

08007a8a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	b083      	sub	sp, #12
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8007a92:	bf00      	nop
 8007a94:	370c      	adds	r7, #12
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr

08007a9e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007a9e:	b480      	push	{r7}
 8007aa0:	b083      	sub	sp, #12
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007aa6:	bf00      	nop
 8007aa8:	370c      	adds	r7, #12
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr

08007ab2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007ab2:	b480      	push	{r7}
 8007ab4:	b083      	sub	sp, #12
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007aba:	bf00      	nop
 8007abc:	370c      	adds	r7, #12
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr

08007ac6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007ac6:	b480      	push	{r7}
 8007ac8:	b083      	sub	sp, #12
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007ace:	bf00      	nop
 8007ad0:	370c      	adds	r7, #12
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007ada:	b480      	push	{r7}
 8007adc:	b083      	sub	sp, #12
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8007ae2:	bf00      	nop
 8007ae4:	370c      	adds	r7, #12
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr

08007aee <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007aee:	b480      	push	{r7}
 8007af0:	b083      	sub	sp, #12
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007af6:	bf00      	nop
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr

08007b02 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007b02:	b480      	push	{r7}
 8007b04:	b083      	sub	sp, #12
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007b0a:	bf00      	nop
 8007b0c:	370c      	adds	r7, #12
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr

08007b16 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007b16:	b480      	push	{r7}
 8007b18:	b083      	sub	sp, #12
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007b1e:	bf00      	nop
 8007b20:	370c      	adds	r7, #12
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b083      	sub	sp, #12
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007b32:	bf00      	nop
 8007b34:	370c      	adds	r7, #12
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
	...

08007b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f003 0307 	and.w	r3, r3, #7
 8007b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007b50:	4b0c      	ldr	r3, [pc, #48]	; (8007b84 <__NVIC_SetPriorityGrouping+0x44>)
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007b56:	68ba      	ldr	r2, [r7, #8]
 8007b58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007b5c:	4013      	ands	r3, r2
 8007b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007b68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007b6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007b72:	4a04      	ldr	r2, [pc, #16]	; (8007b84 <__NVIC_SetPriorityGrouping+0x44>)
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	60d3      	str	r3, [r2, #12]
}
 8007b78:	bf00      	nop
 8007b7a:	3714      	adds	r7, #20
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr
 8007b84:	e000ed00 	.word	0xe000ed00

08007b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007b8c:	4b04      	ldr	r3, [pc, #16]	; (8007ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	0a1b      	lsrs	r3, r3, #8
 8007b92:	f003 0307 	and.w	r3, r3, #7
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	e000ed00 	.word	0xe000ed00

08007ba4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	4603      	mov	r3, r0
 8007bac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	db0b      	blt.n	8007bce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007bb6:	79fb      	ldrb	r3, [r7, #7]
 8007bb8:	f003 021f 	and.w	r2, r3, #31
 8007bbc:	4907      	ldr	r1, [pc, #28]	; (8007bdc <__NVIC_EnableIRQ+0x38>)
 8007bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bc2:	095b      	lsrs	r3, r3, #5
 8007bc4:	2001      	movs	r0, #1
 8007bc6:	fa00 f202 	lsl.w	r2, r0, r2
 8007bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007bce:	bf00      	nop
 8007bd0:	370c      	adds	r7, #12
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop
 8007bdc:	e000e100 	.word	0xe000e100

08007be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	4603      	mov	r3, r0
 8007be8:	6039      	str	r1, [r7, #0]
 8007bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	db0a      	blt.n	8007c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	b2da      	uxtb	r2, r3
 8007bf8:	490c      	ldr	r1, [pc, #48]	; (8007c2c <__NVIC_SetPriority+0x4c>)
 8007bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bfe:	0112      	lsls	r2, r2, #4
 8007c00:	b2d2      	uxtb	r2, r2
 8007c02:	440b      	add	r3, r1
 8007c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007c08:	e00a      	b.n	8007c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	b2da      	uxtb	r2, r3
 8007c0e:	4908      	ldr	r1, [pc, #32]	; (8007c30 <__NVIC_SetPriority+0x50>)
 8007c10:	79fb      	ldrb	r3, [r7, #7]
 8007c12:	f003 030f 	and.w	r3, r3, #15
 8007c16:	3b04      	subs	r3, #4
 8007c18:	0112      	lsls	r2, r2, #4
 8007c1a:	b2d2      	uxtb	r2, r2
 8007c1c:	440b      	add	r3, r1
 8007c1e:	761a      	strb	r2, [r3, #24]
}
 8007c20:	bf00      	nop
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr
 8007c2c:	e000e100 	.word	0xe000e100
 8007c30:	e000ed00 	.word	0xe000ed00

08007c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b089      	sub	sp, #36	; 0x24
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	60b9      	str	r1, [r7, #8]
 8007c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f003 0307 	and.w	r3, r3, #7
 8007c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	f1c3 0307 	rsb	r3, r3, #7
 8007c4e:	2b04      	cmp	r3, #4
 8007c50:	bf28      	it	cs
 8007c52:	2304      	movcs	r3, #4
 8007c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007c56:	69fb      	ldr	r3, [r7, #28]
 8007c58:	3304      	adds	r3, #4
 8007c5a:	2b06      	cmp	r3, #6
 8007c5c:	d902      	bls.n	8007c64 <NVIC_EncodePriority+0x30>
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	3b03      	subs	r3, #3
 8007c62:	e000      	b.n	8007c66 <NVIC_EncodePriority+0x32>
 8007c64:	2300      	movs	r3, #0
 8007c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c68:	f04f 32ff 	mov.w	r2, #4294967295
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c72:	43da      	mvns	r2, r3
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	401a      	ands	r2, r3
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	fa01 f303 	lsl.w	r3, r1, r3
 8007c86:	43d9      	mvns	r1, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c8c:	4313      	orrs	r3, r2
         );
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3724      	adds	r7, #36	; 0x24
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr
	...

08007c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007cac:	d301      	bcc.n	8007cb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007cae:	2301      	movs	r3, #1
 8007cb0:	e00f      	b.n	8007cd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007cb2:	4a0a      	ldr	r2, [pc, #40]	; (8007cdc <SysTick_Config+0x40>)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007cba:	210f      	movs	r1, #15
 8007cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc0:	f7ff ff8e 	bl	8007be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007cc4:	4b05      	ldr	r3, [pc, #20]	; (8007cdc <SysTick_Config+0x40>)
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007cca:	4b04      	ldr	r3, [pc, #16]	; (8007cdc <SysTick_Config+0x40>)
 8007ccc:	2207      	movs	r2, #7
 8007cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3708      	adds	r7, #8
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	e000e010 	.word	0xe000e010

08007ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f7ff ff29 	bl	8007b40 <__NVIC_SetPriorityGrouping>
}
 8007cee:	bf00      	nop
 8007cf0:	3708      	adds	r7, #8
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b086      	sub	sp, #24
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	60b9      	str	r1, [r7, #8]
 8007d00:	607a      	str	r2, [r7, #4]
 8007d02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007d04:	2300      	movs	r3, #0
 8007d06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007d08:	f7ff ff3e 	bl	8007b88 <__NVIC_GetPriorityGrouping>
 8007d0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	68b9      	ldr	r1, [r7, #8]
 8007d12:	6978      	ldr	r0, [r7, #20]
 8007d14:	f7ff ff8e 	bl	8007c34 <NVIC_EncodePriority>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d1e:	4611      	mov	r1, r2
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7ff ff5d 	bl	8007be0 <__NVIC_SetPriority>
}
 8007d26:	bf00      	nop
 8007d28:	3718      	adds	r7, #24
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b082      	sub	sp, #8
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	4603      	mov	r3, r0
 8007d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7ff ff31 	bl	8007ba4 <__NVIC_EnableIRQ>
}
 8007d42:	bf00      	nop
 8007d44:	3708      	adds	r7, #8
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b082      	sub	sp, #8
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f7ff ffa2 	bl	8007c9c <SysTick_Config>
 8007d58:	4603      	mov	r3, r0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
	...

08007d64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b086      	sub	sp, #24
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007d70:	f7fe fbfc 	bl	800656c <HAL_GetTick>
 8007d74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d101      	bne.n	8007d80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e099      	b.n	8007eb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2202      	movs	r2, #2
 8007d84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f022 0201 	bic.w	r2, r2, #1
 8007d9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007da0:	e00f      	b.n	8007dc2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007da2:	f7fe fbe3 	bl	800656c <HAL_GetTick>
 8007da6:	4602      	mov	r2, r0
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	1ad3      	subs	r3, r2, r3
 8007dac:	2b05      	cmp	r3, #5
 8007dae:	d908      	bls.n	8007dc2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2220      	movs	r2, #32
 8007db4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2203      	movs	r2, #3
 8007dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	e078      	b.n	8007eb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f003 0301 	and.w	r3, r3, #1
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1e8      	bne.n	8007da2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007dd8:	697a      	ldr	r2, [r7, #20]
 8007dda:	4b38      	ldr	r3, [pc, #224]	; (8007ebc <HAL_DMA_Init+0x158>)
 8007ddc:	4013      	ands	r3, r2
 8007dde:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	689b      	ldr	r3, [r3, #8]
 8007de8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007dee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007dfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6a1b      	ldr	r3, [r3, #32]
 8007e0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007e0e:	697a      	ldr	r2, [r7, #20]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e18:	2b04      	cmp	r3, #4
 8007e1a:	d107      	bne.n	8007e2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e24:	4313      	orrs	r3, r2
 8007e26:	697a      	ldr	r2, [r7, #20]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	697a      	ldr	r2, [r7, #20]
 8007e32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	695b      	ldr	r3, [r3, #20]
 8007e3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	f023 0307 	bic.w	r3, r3, #7
 8007e42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e48:	697a      	ldr	r2, [r7, #20]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e52:	2b04      	cmp	r3, #4
 8007e54:	d117      	bne.n	8007e86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e5a:	697a      	ldr	r2, [r7, #20]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00e      	beq.n	8007e86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 fa9d 	bl	80083a8 <DMA_CheckFifoParam>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d008      	beq.n	8007e86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2240      	movs	r2, #64	; 0x40
 8007e78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007e82:	2301      	movs	r3, #1
 8007e84:	e016      	b.n	8007eb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fa54 	bl	800833c <DMA_CalcBaseAndBitshift>
 8007e94:	4603      	mov	r3, r0
 8007e96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e9c:	223f      	movs	r2, #63	; 0x3f
 8007e9e:	409a      	lsls	r2, r3
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2201      	movs	r2, #1
 8007eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3718      	adds	r7, #24
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	f010803f 	.word	0xf010803f

08007ec0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	607a      	str	r2, [r7, #4]
 8007ecc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ed6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d101      	bne.n	8007ee6 <HAL_DMA_Start_IT+0x26>
 8007ee2:	2302      	movs	r3, #2
 8007ee4:	e040      	b.n	8007f68 <HAL_DMA_Start_IT+0xa8>
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2201      	movs	r2, #1
 8007eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	2b01      	cmp	r3, #1
 8007ef8:	d12f      	bne.n	8007f5a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2202      	movs	r2, #2
 8007efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2200      	movs	r2, #0
 8007f06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	68b9      	ldr	r1, [r7, #8]
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	f000 f9e6 	bl	80082e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f18:	223f      	movs	r2, #63	; 0x3f
 8007f1a:	409a      	lsls	r2, r3
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f042 0216 	orr.w	r2, r2, #22
 8007f2e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d007      	beq.n	8007f48 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f042 0208 	orr.w	r2, r2, #8
 8007f46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f042 0201 	orr.w	r2, r2, #1
 8007f56:	601a      	str	r2, [r3, #0]
 8007f58:	e005      	b.n	8007f66 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007f62:	2302      	movs	r3, #2
 8007f64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3718      	adds	r7, #24
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	d004      	beq.n	8007f8e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2280      	movs	r2, #128	; 0x80
 8007f88:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e00c      	b.n	8007fa8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2205      	movs	r2, #5
 8007f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f022 0201 	bic.w	r2, r2, #1
 8007fa4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	370c      	adds	r7, #12
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b086      	sub	sp, #24
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007fc0:	4b92      	ldr	r3, [pc, #584]	; (800820c <HAL_DMA_IRQHandler+0x258>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a92      	ldr	r2, [pc, #584]	; (8008210 <HAL_DMA_IRQHandler+0x25c>)
 8007fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8007fca:	0a9b      	lsrs	r3, r3, #10
 8007fcc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fd2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fde:	2208      	movs	r2, #8
 8007fe0:	409a      	lsls	r2, r3
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	4013      	ands	r3, r2
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d01a      	beq.n	8008020 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f003 0304 	and.w	r3, r3, #4
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d013      	beq.n	8008020 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f022 0204 	bic.w	r2, r2, #4
 8008006:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800800c:	2208      	movs	r2, #8
 800800e:	409a      	lsls	r2, r3
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008018:	f043 0201 	orr.w	r2, r3, #1
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008024:	2201      	movs	r2, #1
 8008026:	409a      	lsls	r2, r3
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	4013      	ands	r3, r2
 800802c:	2b00      	cmp	r3, #0
 800802e:	d012      	beq.n	8008056 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	695b      	ldr	r3, [r3, #20]
 8008036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00b      	beq.n	8008056 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008042:	2201      	movs	r2, #1
 8008044:	409a      	lsls	r2, r3
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800804e:	f043 0202 	orr.w	r2, r3, #2
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800805a:	2204      	movs	r2, #4
 800805c:	409a      	lsls	r2, r3
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	4013      	ands	r3, r2
 8008062:	2b00      	cmp	r3, #0
 8008064:	d012      	beq.n	800808c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f003 0302 	and.w	r3, r3, #2
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00b      	beq.n	800808c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008078:	2204      	movs	r2, #4
 800807a:	409a      	lsls	r2, r3
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008084:	f043 0204 	orr.w	r2, r3, #4
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008090:	2210      	movs	r2, #16
 8008092:	409a      	lsls	r2, r3
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	4013      	ands	r3, r2
 8008098:	2b00      	cmp	r3, #0
 800809a:	d043      	beq.n	8008124 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f003 0308 	and.w	r3, r3, #8
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d03c      	beq.n	8008124 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080ae:	2210      	movs	r2, #16
 80080b0:	409a      	lsls	r2, r3
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d018      	beq.n	80080f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d108      	bne.n	80080e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d024      	beq.n	8008124 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	4798      	blx	r3
 80080e2:	e01f      	b.n	8008124 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d01b      	beq.n	8008124 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	4798      	blx	r3
 80080f4:	e016      	b.n	8008124 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008100:	2b00      	cmp	r3, #0
 8008102:	d107      	bne.n	8008114 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f022 0208 	bic.w	r2, r2, #8
 8008112:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008118:	2b00      	cmp	r3, #0
 800811a:	d003      	beq.n	8008124 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008128:	2220      	movs	r2, #32
 800812a:	409a      	lsls	r2, r3
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	4013      	ands	r3, r2
 8008130:	2b00      	cmp	r3, #0
 8008132:	f000 808e 	beq.w	8008252 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f003 0310 	and.w	r3, r3, #16
 8008140:	2b00      	cmp	r3, #0
 8008142:	f000 8086 	beq.w	8008252 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800814a:	2220      	movs	r2, #32
 800814c:	409a      	lsls	r2, r3
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008158:	b2db      	uxtb	r3, r3
 800815a:	2b05      	cmp	r3, #5
 800815c:	d136      	bne.n	80081cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f022 0216 	bic.w	r2, r2, #22
 800816c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	695a      	ldr	r2, [r3, #20]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800817c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008182:	2b00      	cmp	r3, #0
 8008184:	d103      	bne.n	800818e <HAL_DMA_IRQHandler+0x1da>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800818a:	2b00      	cmp	r3, #0
 800818c:	d007      	beq.n	800819e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f022 0208 	bic.w	r2, r2, #8
 800819c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081a2:	223f      	movs	r2, #63	; 0x3f
 80081a4:	409a      	lsls	r2, r3
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2201      	movs	r2, #1
 80081ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d07d      	beq.n	80082be <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	4798      	blx	r3
        }
        return;
 80081ca:	e078      	b.n	80082be <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d01c      	beq.n	8008214 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d108      	bne.n	80081fa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d030      	beq.n	8008252 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	4798      	blx	r3
 80081f8:	e02b      	b.n	8008252 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d027      	beq.n	8008252 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	4798      	blx	r3
 800820a:	e022      	b.n	8008252 <HAL_DMA_IRQHandler+0x29e>
 800820c:	20000000 	.word	0x20000000
 8008210:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800821e:	2b00      	cmp	r3, #0
 8008220:	d10f      	bne.n	8008242 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f022 0210 	bic.w	r2, r2, #16
 8008230:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2201      	movs	r2, #1
 8008236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008246:	2b00      	cmp	r3, #0
 8008248:	d003      	beq.n	8008252 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008256:	2b00      	cmp	r3, #0
 8008258:	d032      	beq.n	80082c0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800825e:	f003 0301 	and.w	r3, r3, #1
 8008262:	2b00      	cmp	r3, #0
 8008264:	d022      	beq.n	80082ac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2205      	movs	r2, #5
 800826a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f022 0201 	bic.w	r2, r2, #1
 800827c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	3301      	adds	r3, #1
 8008282:	60bb      	str	r3, [r7, #8]
 8008284:	697a      	ldr	r2, [r7, #20]
 8008286:	429a      	cmp	r2, r3
 8008288:	d307      	bcc.n	800829a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 0301 	and.w	r3, r3, #1
 8008294:	2b00      	cmp	r3, #0
 8008296:	d1f2      	bne.n	800827e <HAL_DMA_IRQHandler+0x2ca>
 8008298:	e000      	b.n	800829c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800829a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2201      	movs	r2, #1
 80082a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d005      	beq.n	80082c0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	4798      	blx	r3
 80082bc:	e000      	b.n	80082c0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80082be:	bf00      	nop
    }
  }
}
 80082c0:	3718      	adds	r7, #24
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
 80082c6:	bf00      	nop

080082c8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b085      	sub	sp, #20
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	60b9      	str	r1, [r7, #8]
 80082ea:	607a      	str	r2, [r7, #4]
 80082ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80082fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	683a      	ldr	r2, [r7, #0]
 8008304:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	2b40      	cmp	r3, #64	; 0x40
 800830c:	d108      	bne.n	8008320 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	68ba      	ldr	r2, [r7, #8]
 800831c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800831e:	e007      	b.n	8008330 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	68ba      	ldr	r2, [r7, #8]
 8008326:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	60da      	str	r2, [r3, #12]
}
 8008330:	bf00      	nop
 8008332:	3714      	adds	r7, #20
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	b2db      	uxtb	r3, r3
 800834a:	3b10      	subs	r3, #16
 800834c:	4a14      	ldr	r2, [pc, #80]	; (80083a0 <DMA_CalcBaseAndBitshift+0x64>)
 800834e:	fba2 2303 	umull	r2, r3, r2, r3
 8008352:	091b      	lsrs	r3, r3, #4
 8008354:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008356:	4a13      	ldr	r2, [pc, #76]	; (80083a4 <DMA_CalcBaseAndBitshift+0x68>)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	4413      	add	r3, r2
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	461a      	mov	r2, r3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2b03      	cmp	r3, #3
 8008368:	d909      	bls.n	800837e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008372:	f023 0303 	bic.w	r3, r3, #3
 8008376:	1d1a      	adds	r2, r3, #4
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	659a      	str	r2, [r3, #88]	; 0x58
 800837c:	e007      	b.n	800838e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008386:	f023 0303 	bic.w	r3, r3, #3
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008392:	4618      	mov	r0, r3
 8008394:	3714      	adds	r7, #20
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	aaaaaaab 	.word	0xaaaaaaab
 80083a4:	080175bc 	.word	0x080175bc

080083a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083b0:	2300      	movs	r3, #0
 80083b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	699b      	ldr	r3, [r3, #24]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d11f      	bne.n	8008402 <DMA_CheckFifoParam+0x5a>
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	2b03      	cmp	r3, #3
 80083c6:	d856      	bhi.n	8008476 <DMA_CheckFifoParam+0xce>
 80083c8:	a201      	add	r2, pc, #4	; (adr r2, 80083d0 <DMA_CheckFifoParam+0x28>)
 80083ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ce:	bf00      	nop
 80083d0:	080083e1 	.word	0x080083e1
 80083d4:	080083f3 	.word	0x080083f3
 80083d8:	080083e1 	.word	0x080083e1
 80083dc:	08008477 	.word	0x08008477
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d046      	beq.n	800847a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80083f0:	e043      	b.n	800847a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80083fa:	d140      	bne.n	800847e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008400:	e03d      	b.n	800847e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	699b      	ldr	r3, [r3, #24]
 8008406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800840a:	d121      	bne.n	8008450 <DMA_CheckFifoParam+0xa8>
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	2b03      	cmp	r3, #3
 8008410:	d837      	bhi.n	8008482 <DMA_CheckFifoParam+0xda>
 8008412:	a201      	add	r2, pc, #4	; (adr r2, 8008418 <DMA_CheckFifoParam+0x70>)
 8008414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008418:	08008429 	.word	0x08008429
 800841c:	0800842f 	.word	0x0800842f
 8008420:	08008429 	.word	0x08008429
 8008424:	08008441 	.word	0x08008441
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	73fb      	strb	r3, [r7, #15]
      break;
 800842c:	e030      	b.n	8008490 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008432:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008436:	2b00      	cmp	r3, #0
 8008438:	d025      	beq.n	8008486 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800843e:	e022      	b.n	8008486 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008444:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008448:	d11f      	bne.n	800848a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800844e:	e01c      	b.n	800848a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	2b02      	cmp	r3, #2
 8008454:	d903      	bls.n	800845e <DMA_CheckFifoParam+0xb6>
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	2b03      	cmp	r3, #3
 800845a:	d003      	beq.n	8008464 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800845c:	e018      	b.n	8008490 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800845e:	2301      	movs	r3, #1
 8008460:	73fb      	strb	r3, [r7, #15]
      break;
 8008462:	e015      	b.n	8008490 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008468:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800846c:	2b00      	cmp	r3, #0
 800846e:	d00e      	beq.n	800848e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	73fb      	strb	r3, [r7, #15]
      break;
 8008474:	e00b      	b.n	800848e <DMA_CheckFifoParam+0xe6>
      break;
 8008476:	bf00      	nop
 8008478:	e00a      	b.n	8008490 <DMA_CheckFifoParam+0xe8>
      break;
 800847a:	bf00      	nop
 800847c:	e008      	b.n	8008490 <DMA_CheckFifoParam+0xe8>
      break;
 800847e:	bf00      	nop
 8008480:	e006      	b.n	8008490 <DMA_CheckFifoParam+0xe8>
      break;
 8008482:	bf00      	nop
 8008484:	e004      	b.n	8008490 <DMA_CheckFifoParam+0xe8>
      break;
 8008486:	bf00      	nop
 8008488:	e002      	b.n	8008490 <DMA_CheckFifoParam+0xe8>
      break;   
 800848a:	bf00      	nop
 800848c:	e000      	b.n	8008490 <DMA_CheckFifoParam+0xe8>
      break;
 800848e:	bf00      	nop
    }
  } 
  
  return status; 
 8008490:	7bfb      	ldrb	r3, [r7, #15]
}
 8008492:	4618      	mov	r0, r3
 8008494:	3714      	adds	r7, #20
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop

080084a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b089      	sub	sp, #36	; 0x24
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80084aa:	2300      	movs	r3, #0
 80084ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80084ae:	2300      	movs	r3, #0
 80084b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80084b2:	2300      	movs	r3, #0
 80084b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80084b6:	2300      	movs	r3, #0
 80084b8:	61fb      	str	r3, [r7, #28]
 80084ba:	e165      	b.n	8008788 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80084bc:	2201      	movs	r2, #1
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	fa02 f303 	lsl.w	r3, r2, r3
 80084c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	697a      	ldr	r2, [r7, #20]
 80084cc:	4013      	ands	r3, r2
 80084ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80084d0:	693a      	ldr	r2, [r7, #16]
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	429a      	cmp	r2, r3
 80084d6:	f040 8154 	bne.w	8008782 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	f003 0303 	and.w	r3, r3, #3
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d005      	beq.n	80084f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d130      	bne.n	8008554 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80084f8:	69fb      	ldr	r3, [r7, #28]
 80084fa:	005b      	lsls	r3, r3, #1
 80084fc:	2203      	movs	r2, #3
 80084fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008502:	43db      	mvns	r3, r3
 8008504:	69ba      	ldr	r2, [r7, #24]
 8008506:	4013      	ands	r3, r2
 8008508:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	68da      	ldr	r2, [r3, #12]
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	005b      	lsls	r3, r3, #1
 8008512:	fa02 f303 	lsl.w	r3, r2, r3
 8008516:	69ba      	ldr	r2, [r7, #24]
 8008518:	4313      	orrs	r3, r2
 800851a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	69ba      	ldr	r2, [r7, #24]
 8008520:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008528:	2201      	movs	r2, #1
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	fa02 f303 	lsl.w	r3, r2, r3
 8008530:	43db      	mvns	r3, r3
 8008532:	69ba      	ldr	r2, [r7, #24]
 8008534:	4013      	ands	r3, r2
 8008536:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	091b      	lsrs	r3, r3, #4
 800853e:	f003 0201 	and.w	r2, r3, #1
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	fa02 f303 	lsl.w	r3, r2, r3
 8008548:	69ba      	ldr	r2, [r7, #24]
 800854a:	4313      	orrs	r3, r2
 800854c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	69ba      	ldr	r2, [r7, #24]
 8008552:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	f003 0303 	and.w	r3, r3, #3
 800855c:	2b03      	cmp	r3, #3
 800855e:	d017      	beq.n	8008590 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008566:	69fb      	ldr	r3, [r7, #28]
 8008568:	005b      	lsls	r3, r3, #1
 800856a:	2203      	movs	r2, #3
 800856c:	fa02 f303 	lsl.w	r3, r2, r3
 8008570:	43db      	mvns	r3, r3
 8008572:	69ba      	ldr	r2, [r7, #24]
 8008574:	4013      	ands	r3, r2
 8008576:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	689a      	ldr	r2, [r3, #8]
 800857c:	69fb      	ldr	r3, [r7, #28]
 800857e:	005b      	lsls	r3, r3, #1
 8008580:	fa02 f303 	lsl.w	r3, r2, r3
 8008584:	69ba      	ldr	r2, [r7, #24]
 8008586:	4313      	orrs	r3, r2
 8008588:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	69ba      	ldr	r2, [r7, #24]
 800858e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	f003 0303 	and.w	r3, r3, #3
 8008598:	2b02      	cmp	r3, #2
 800859a:	d123      	bne.n	80085e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	08da      	lsrs	r2, r3, #3
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	3208      	adds	r2, #8
 80085a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	f003 0307 	and.w	r3, r3, #7
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	220f      	movs	r2, #15
 80085b4:	fa02 f303 	lsl.w	r3, r2, r3
 80085b8:	43db      	mvns	r3, r3
 80085ba:	69ba      	ldr	r2, [r7, #24]
 80085bc:	4013      	ands	r3, r2
 80085be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	691a      	ldr	r2, [r3, #16]
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	f003 0307 	and.w	r3, r3, #7
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	fa02 f303 	lsl.w	r3, r2, r3
 80085d0:	69ba      	ldr	r2, [r7, #24]
 80085d2:	4313      	orrs	r3, r2
 80085d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80085d6:	69fb      	ldr	r3, [r7, #28]
 80085d8:	08da      	lsrs	r2, r3, #3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	3208      	adds	r2, #8
 80085de:	69b9      	ldr	r1, [r7, #24]
 80085e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80085ea:	69fb      	ldr	r3, [r7, #28]
 80085ec:	005b      	lsls	r3, r3, #1
 80085ee:	2203      	movs	r2, #3
 80085f0:	fa02 f303 	lsl.w	r3, r2, r3
 80085f4:	43db      	mvns	r3, r3
 80085f6:	69ba      	ldr	r2, [r7, #24]
 80085f8:	4013      	ands	r3, r2
 80085fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	f003 0203 	and.w	r2, r3, #3
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	005b      	lsls	r3, r3, #1
 8008608:	fa02 f303 	lsl.w	r3, r2, r3
 800860c:	69ba      	ldr	r2, [r7, #24]
 800860e:	4313      	orrs	r3, r2
 8008610:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	69ba      	ldr	r2, [r7, #24]
 8008616:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008620:	2b00      	cmp	r3, #0
 8008622:	f000 80ae 	beq.w	8008782 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008626:	2300      	movs	r3, #0
 8008628:	60fb      	str	r3, [r7, #12]
 800862a:	4b5d      	ldr	r3, [pc, #372]	; (80087a0 <HAL_GPIO_Init+0x300>)
 800862c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800862e:	4a5c      	ldr	r2, [pc, #368]	; (80087a0 <HAL_GPIO_Init+0x300>)
 8008630:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008634:	6453      	str	r3, [r2, #68]	; 0x44
 8008636:	4b5a      	ldr	r3, [pc, #360]	; (80087a0 <HAL_GPIO_Init+0x300>)
 8008638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800863a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800863e:	60fb      	str	r3, [r7, #12]
 8008640:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008642:	4a58      	ldr	r2, [pc, #352]	; (80087a4 <HAL_GPIO_Init+0x304>)
 8008644:	69fb      	ldr	r3, [r7, #28]
 8008646:	089b      	lsrs	r3, r3, #2
 8008648:	3302      	adds	r3, #2
 800864a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800864e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	f003 0303 	and.w	r3, r3, #3
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	220f      	movs	r2, #15
 800865a:	fa02 f303 	lsl.w	r3, r2, r3
 800865e:	43db      	mvns	r3, r3
 8008660:	69ba      	ldr	r2, [r7, #24]
 8008662:	4013      	ands	r3, r2
 8008664:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a4f      	ldr	r2, [pc, #316]	; (80087a8 <HAL_GPIO_Init+0x308>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d025      	beq.n	80086ba <HAL_GPIO_Init+0x21a>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a4e      	ldr	r2, [pc, #312]	; (80087ac <HAL_GPIO_Init+0x30c>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d01f      	beq.n	80086b6 <HAL_GPIO_Init+0x216>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a4d      	ldr	r2, [pc, #308]	; (80087b0 <HAL_GPIO_Init+0x310>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d019      	beq.n	80086b2 <HAL_GPIO_Init+0x212>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a4c      	ldr	r2, [pc, #304]	; (80087b4 <HAL_GPIO_Init+0x314>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d013      	beq.n	80086ae <HAL_GPIO_Init+0x20e>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4a4b      	ldr	r2, [pc, #300]	; (80087b8 <HAL_GPIO_Init+0x318>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d00d      	beq.n	80086aa <HAL_GPIO_Init+0x20a>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4a4a      	ldr	r2, [pc, #296]	; (80087bc <HAL_GPIO_Init+0x31c>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d007      	beq.n	80086a6 <HAL_GPIO_Init+0x206>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	4a49      	ldr	r2, [pc, #292]	; (80087c0 <HAL_GPIO_Init+0x320>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d101      	bne.n	80086a2 <HAL_GPIO_Init+0x202>
 800869e:	2306      	movs	r3, #6
 80086a0:	e00c      	b.n	80086bc <HAL_GPIO_Init+0x21c>
 80086a2:	2307      	movs	r3, #7
 80086a4:	e00a      	b.n	80086bc <HAL_GPIO_Init+0x21c>
 80086a6:	2305      	movs	r3, #5
 80086a8:	e008      	b.n	80086bc <HAL_GPIO_Init+0x21c>
 80086aa:	2304      	movs	r3, #4
 80086ac:	e006      	b.n	80086bc <HAL_GPIO_Init+0x21c>
 80086ae:	2303      	movs	r3, #3
 80086b0:	e004      	b.n	80086bc <HAL_GPIO_Init+0x21c>
 80086b2:	2302      	movs	r3, #2
 80086b4:	e002      	b.n	80086bc <HAL_GPIO_Init+0x21c>
 80086b6:	2301      	movs	r3, #1
 80086b8:	e000      	b.n	80086bc <HAL_GPIO_Init+0x21c>
 80086ba:	2300      	movs	r3, #0
 80086bc:	69fa      	ldr	r2, [r7, #28]
 80086be:	f002 0203 	and.w	r2, r2, #3
 80086c2:	0092      	lsls	r2, r2, #2
 80086c4:	4093      	lsls	r3, r2
 80086c6:	69ba      	ldr	r2, [r7, #24]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80086cc:	4935      	ldr	r1, [pc, #212]	; (80087a4 <HAL_GPIO_Init+0x304>)
 80086ce:	69fb      	ldr	r3, [r7, #28]
 80086d0:	089b      	lsrs	r3, r3, #2
 80086d2:	3302      	adds	r3, #2
 80086d4:	69ba      	ldr	r2, [r7, #24]
 80086d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80086da:	4b3a      	ldr	r3, [pc, #232]	; (80087c4 <HAL_GPIO_Init+0x324>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	43db      	mvns	r3, r3
 80086e4:	69ba      	ldr	r2, [r7, #24]
 80086e6:	4013      	ands	r3, r2
 80086e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d003      	beq.n	80086fe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80086f6:	69ba      	ldr	r2, [r7, #24]
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80086fe:	4a31      	ldr	r2, [pc, #196]	; (80087c4 <HAL_GPIO_Init+0x324>)
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008704:	4b2f      	ldr	r3, [pc, #188]	; (80087c4 <HAL_GPIO_Init+0x324>)
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	43db      	mvns	r3, r3
 800870e:	69ba      	ldr	r2, [r7, #24]
 8008710:	4013      	ands	r3, r2
 8008712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800871c:	2b00      	cmp	r3, #0
 800871e:	d003      	beq.n	8008728 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008720:	69ba      	ldr	r2, [r7, #24]
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	4313      	orrs	r3, r2
 8008726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008728:	4a26      	ldr	r2, [pc, #152]	; (80087c4 <HAL_GPIO_Init+0x324>)
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800872e:	4b25      	ldr	r3, [pc, #148]	; (80087c4 <HAL_GPIO_Init+0x324>)
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	43db      	mvns	r3, r3
 8008738:	69ba      	ldr	r2, [r7, #24]
 800873a:	4013      	ands	r3, r2
 800873c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	685b      	ldr	r3, [r3, #4]
 8008742:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008746:	2b00      	cmp	r3, #0
 8008748:	d003      	beq.n	8008752 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800874a:	69ba      	ldr	r2, [r7, #24]
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	4313      	orrs	r3, r2
 8008750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008752:	4a1c      	ldr	r2, [pc, #112]	; (80087c4 <HAL_GPIO_Init+0x324>)
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008758:	4b1a      	ldr	r3, [pc, #104]	; (80087c4 <HAL_GPIO_Init+0x324>)
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	43db      	mvns	r3, r3
 8008762:	69ba      	ldr	r2, [r7, #24]
 8008764:	4013      	ands	r3, r2
 8008766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	685b      	ldr	r3, [r3, #4]
 800876c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008770:	2b00      	cmp	r3, #0
 8008772:	d003      	beq.n	800877c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008774:	69ba      	ldr	r2, [r7, #24]
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	4313      	orrs	r3, r2
 800877a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800877c:	4a11      	ldr	r2, [pc, #68]	; (80087c4 <HAL_GPIO_Init+0x324>)
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008782:	69fb      	ldr	r3, [r7, #28]
 8008784:	3301      	adds	r3, #1
 8008786:	61fb      	str	r3, [r7, #28]
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	2b0f      	cmp	r3, #15
 800878c:	f67f ae96 	bls.w	80084bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008790:	bf00      	nop
 8008792:	bf00      	nop
 8008794:	3724      	adds	r7, #36	; 0x24
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop
 80087a0:	40023800 	.word	0x40023800
 80087a4:	40013800 	.word	0x40013800
 80087a8:	40020000 	.word	0x40020000
 80087ac:	40020400 	.word	0x40020400
 80087b0:	40020800 	.word	0x40020800
 80087b4:	40020c00 	.word	0x40020c00
 80087b8:	40021000 	.word	0x40021000
 80087bc:	40021400 	.word	0x40021400
 80087c0:	40021800 	.word	0x40021800
 80087c4:	40013c00 	.word	0x40013c00

080087c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b085      	sub	sp, #20
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	460b      	mov	r3, r1
 80087d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	691a      	ldr	r2, [r3, #16]
 80087d8:	887b      	ldrh	r3, [r7, #2]
 80087da:	4013      	ands	r3, r2
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d002      	beq.n	80087e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80087e0:	2301      	movs	r3, #1
 80087e2:	73fb      	strb	r3, [r7, #15]
 80087e4:	e001      	b.n	80087ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80087e6:	2300      	movs	r3, #0
 80087e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80087ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3714      	adds	r7, #20
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	460b      	mov	r3, r1
 8008802:	807b      	strh	r3, [r7, #2]
 8008804:	4613      	mov	r3, r2
 8008806:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008808:	787b      	ldrb	r3, [r7, #1]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d003      	beq.n	8008816 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800880e:	887a      	ldrh	r2, [r7, #2]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008814:	e003      	b.n	800881e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008816:	887b      	ldrh	r3, [r7, #2]
 8008818:	041a      	lsls	r2, r3, #16
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	619a      	str	r2, [r3, #24]
}
 800881e:	bf00      	nop
 8008820:	370c      	adds	r7, #12
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr

0800882a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800882a:	b480      	push	{r7}
 800882c:	b085      	sub	sp, #20
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
 8008832:	460b      	mov	r3, r1
 8008834:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	695b      	ldr	r3, [r3, #20]
 800883a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800883c:	887a      	ldrh	r2, [r7, #2]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	4013      	ands	r3, r2
 8008842:	041a      	lsls	r2, r3, #16
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	43d9      	mvns	r1, r3
 8008848:	887b      	ldrh	r3, [r7, #2]
 800884a:	400b      	ands	r3, r1
 800884c:	431a      	orrs	r2, r3
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	619a      	str	r2, [r3, #24]
}
 8008852:	bf00      	nop
 8008854:	3714      	adds	r7, #20
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr
	...

08008860 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	4603      	mov	r3, r0
 8008868:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800886a:	4b08      	ldr	r3, [pc, #32]	; (800888c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800886c:	695a      	ldr	r2, [r3, #20]
 800886e:	88fb      	ldrh	r3, [r7, #6]
 8008870:	4013      	ands	r3, r2
 8008872:	2b00      	cmp	r3, #0
 8008874:	d006      	beq.n	8008884 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008876:	4a05      	ldr	r2, [pc, #20]	; (800888c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008878:	88fb      	ldrh	r3, [r7, #6]
 800887a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800887c:	88fb      	ldrh	r3, [r7, #6]
 800887e:	4618      	mov	r0, r3
 8008880:	f7fd f924 	bl	8005acc <HAL_GPIO_EXTI_Callback>
  }
}
 8008884:	bf00      	nop
 8008886:	3708      	adds	r7, #8
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}
 800888c:	40013c00 	.word	0x40013c00

08008890 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d101      	bne.n	80088a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	e12b      	b.n	8008afa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d106      	bne.n	80088bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f7fd fb70 	bl	8005f9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2224      	movs	r2, #36	; 0x24
 80088c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f022 0201 	bic.w	r2, r2, #1
 80088d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	681a      	ldr	r2, [r3, #0]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80088f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80088f4:	f002 faf2 	bl	800aedc <HAL_RCC_GetPCLK1Freq>
 80088f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	4a81      	ldr	r2, [pc, #516]	; (8008b04 <HAL_I2C_Init+0x274>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d807      	bhi.n	8008914 <HAL_I2C_Init+0x84>
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	4a80      	ldr	r2, [pc, #512]	; (8008b08 <HAL_I2C_Init+0x278>)
 8008908:	4293      	cmp	r3, r2
 800890a:	bf94      	ite	ls
 800890c:	2301      	movls	r3, #1
 800890e:	2300      	movhi	r3, #0
 8008910:	b2db      	uxtb	r3, r3
 8008912:	e006      	b.n	8008922 <HAL_I2C_Init+0x92>
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	4a7d      	ldr	r2, [pc, #500]	; (8008b0c <HAL_I2C_Init+0x27c>)
 8008918:	4293      	cmp	r3, r2
 800891a:	bf94      	ite	ls
 800891c:	2301      	movls	r3, #1
 800891e:	2300      	movhi	r3, #0
 8008920:	b2db      	uxtb	r3, r3
 8008922:	2b00      	cmp	r3, #0
 8008924:	d001      	beq.n	800892a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e0e7      	b.n	8008afa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	4a78      	ldr	r2, [pc, #480]	; (8008b10 <HAL_I2C_Init+0x280>)
 800892e:	fba2 2303 	umull	r2, r3, r2, r3
 8008932:	0c9b      	lsrs	r3, r3, #18
 8008934:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	68ba      	ldr	r2, [r7, #8]
 8008946:	430a      	orrs	r2, r1
 8008948:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	6a1b      	ldr	r3, [r3, #32]
 8008950:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	4a6a      	ldr	r2, [pc, #424]	; (8008b04 <HAL_I2C_Init+0x274>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d802      	bhi.n	8008964 <HAL_I2C_Init+0xd4>
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	3301      	adds	r3, #1
 8008962:	e009      	b.n	8008978 <HAL_I2C_Init+0xe8>
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800896a:	fb02 f303 	mul.w	r3, r2, r3
 800896e:	4a69      	ldr	r2, [pc, #420]	; (8008b14 <HAL_I2C_Init+0x284>)
 8008970:	fba2 2303 	umull	r2, r3, r2, r3
 8008974:	099b      	lsrs	r3, r3, #6
 8008976:	3301      	adds	r3, #1
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	6812      	ldr	r2, [r2, #0]
 800897c:	430b      	orrs	r3, r1
 800897e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	69db      	ldr	r3, [r3, #28]
 8008986:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800898a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	495c      	ldr	r1, [pc, #368]	; (8008b04 <HAL_I2C_Init+0x274>)
 8008994:	428b      	cmp	r3, r1
 8008996:	d819      	bhi.n	80089cc <HAL_I2C_Init+0x13c>
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	1e59      	subs	r1, r3, #1
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	005b      	lsls	r3, r3, #1
 80089a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80089a6:	1c59      	adds	r1, r3, #1
 80089a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80089ac:	400b      	ands	r3, r1
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00a      	beq.n	80089c8 <HAL_I2C_Init+0x138>
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	1e59      	subs	r1, r3, #1
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	005b      	lsls	r3, r3, #1
 80089bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80089c0:	3301      	adds	r3, #1
 80089c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089c6:	e051      	b.n	8008a6c <HAL_I2C_Init+0x1dc>
 80089c8:	2304      	movs	r3, #4
 80089ca:	e04f      	b.n	8008a6c <HAL_I2C_Init+0x1dc>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d111      	bne.n	80089f8 <HAL_I2C_Init+0x168>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	1e58      	subs	r0, r3, #1
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6859      	ldr	r1, [r3, #4]
 80089dc:	460b      	mov	r3, r1
 80089de:	005b      	lsls	r3, r3, #1
 80089e0:	440b      	add	r3, r1
 80089e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80089e6:	3301      	adds	r3, #1
 80089e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	bf0c      	ite	eq
 80089f0:	2301      	moveq	r3, #1
 80089f2:	2300      	movne	r3, #0
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	e012      	b.n	8008a1e <HAL_I2C_Init+0x18e>
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	1e58      	subs	r0, r3, #1
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6859      	ldr	r1, [r3, #4]
 8008a00:	460b      	mov	r3, r1
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	440b      	add	r3, r1
 8008a06:	0099      	lsls	r1, r3, #2
 8008a08:	440b      	add	r3, r1
 8008a0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a0e:	3301      	adds	r3, #1
 8008a10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	bf0c      	ite	eq
 8008a18:	2301      	moveq	r3, #1
 8008a1a:	2300      	movne	r3, #0
 8008a1c:	b2db      	uxtb	r3, r3
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d001      	beq.n	8008a26 <HAL_I2C_Init+0x196>
 8008a22:	2301      	movs	r3, #1
 8008a24:	e022      	b.n	8008a6c <HAL_I2C_Init+0x1dc>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d10e      	bne.n	8008a4c <HAL_I2C_Init+0x1bc>
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	1e58      	subs	r0, r3, #1
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6859      	ldr	r1, [r3, #4]
 8008a36:	460b      	mov	r3, r1
 8008a38:	005b      	lsls	r3, r3, #1
 8008a3a:	440b      	add	r3, r1
 8008a3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a40:	3301      	adds	r3, #1
 8008a42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a4a:	e00f      	b.n	8008a6c <HAL_I2C_Init+0x1dc>
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	1e58      	subs	r0, r3, #1
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6859      	ldr	r1, [r3, #4]
 8008a54:	460b      	mov	r3, r1
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	440b      	add	r3, r1
 8008a5a:	0099      	lsls	r1, r3, #2
 8008a5c:	440b      	add	r3, r1
 8008a5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a62:	3301      	adds	r3, #1
 8008a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a68:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a6c:	6879      	ldr	r1, [r7, #4]
 8008a6e:	6809      	ldr	r1, [r1, #0]
 8008a70:	4313      	orrs	r3, r2
 8008a72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	69da      	ldr	r2, [r3, #28]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6a1b      	ldr	r3, [r3, #32]
 8008a86:	431a      	orrs	r2, r3
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	430a      	orrs	r2, r1
 8008a8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008a9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	6911      	ldr	r1, [r2, #16]
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	68d2      	ldr	r2, [r2, #12]
 8008aa6:	4311      	orrs	r1, r2
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	6812      	ldr	r2, [r2, #0]
 8008aac:	430b      	orrs	r3, r1
 8008aae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	68db      	ldr	r3, [r3, #12]
 8008ab6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	695a      	ldr	r2, [r3, #20]
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	699b      	ldr	r3, [r3, #24]
 8008ac2:	431a      	orrs	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	430a      	orrs	r2, r1
 8008aca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f042 0201 	orr.w	r2, r2, #1
 8008ada:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2200      	movs	r2, #0
 8008ae0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2220      	movs	r2, #32
 8008ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2200      	movs	r2, #0
 8008aee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2200      	movs	r2, #0
 8008af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008af8:	2300      	movs	r3, #0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3710      	adds	r7, #16
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	000186a0 	.word	0x000186a0
 8008b08:	001e847f 	.word	0x001e847f
 8008b0c:	003d08ff 	.word	0x003d08ff
 8008b10:	431bde83 	.word	0x431bde83
 8008b14:	10624dd3 	.word	0x10624dd3

08008b18 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b088      	sub	sp, #32
 8008b1c:	af02      	add	r7, sp, #8
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	607a      	str	r2, [r7, #4]
 8008b22:	461a      	mov	r2, r3
 8008b24:	460b      	mov	r3, r1
 8008b26:	817b      	strh	r3, [r7, #10]
 8008b28:	4613      	mov	r3, r2
 8008b2a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008b2c:	f7fd fd1e 	bl	800656c <HAL_GetTick>
 8008b30:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	2b20      	cmp	r3, #32
 8008b3c:	f040 80e0 	bne.w	8008d00 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	9300      	str	r3, [sp, #0]
 8008b44:	2319      	movs	r3, #25
 8008b46:	2201      	movs	r2, #1
 8008b48:	4970      	ldr	r1, [pc, #448]	; (8008d0c <HAL_I2C_Master_Transmit+0x1f4>)
 8008b4a:	68f8      	ldr	r0, [r7, #12]
 8008b4c:	f000 fc58 	bl	8009400 <I2C_WaitOnFlagUntilTimeout>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d001      	beq.n	8008b5a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008b56:	2302      	movs	r3, #2
 8008b58:	e0d3      	b.n	8008d02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d101      	bne.n	8008b68 <HAL_I2C_Master_Transmit+0x50>
 8008b64:	2302      	movs	r3, #2
 8008b66:	e0cc      	b.n	8008d02 <HAL_I2C_Master_Transmit+0x1ea>
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f003 0301 	and.w	r3, r3, #1
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d007      	beq.n	8008b8e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f042 0201 	orr.w	r2, r2, #1
 8008b8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	681a      	ldr	r2, [r3, #0]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2221      	movs	r2, #33	; 0x21
 8008ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2210      	movs	r2, #16
 8008baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	687a      	ldr	r2, [r7, #4]
 8008bb8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	893a      	ldrh	r2, [r7, #8]
 8008bbe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bc4:	b29a      	uxth	r2, r3
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	4a50      	ldr	r2, [pc, #320]	; (8008d10 <HAL_I2C_Master_Transmit+0x1f8>)
 8008bce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008bd0:	8979      	ldrh	r1, [r7, #10]
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	6a3a      	ldr	r2, [r7, #32]
 8008bd6:	68f8      	ldr	r0, [r7, #12]
 8008bd8:	f000 fac2 	bl	8009160 <I2C_MasterRequestWrite>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d001      	beq.n	8008be6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	e08d      	b.n	8008d02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008be6:	2300      	movs	r3, #0
 8008be8:	613b      	str	r3, [r7, #16]
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	695b      	ldr	r3, [r3, #20]
 8008bf0:	613b      	str	r3, [r7, #16]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	699b      	ldr	r3, [r3, #24]
 8008bf8:	613b      	str	r3, [r7, #16]
 8008bfa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008bfc:	e066      	b.n	8008ccc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	6a39      	ldr	r1, [r7, #32]
 8008c02:	68f8      	ldr	r0, [r7, #12]
 8008c04:	f000 fcd2 	bl	80095ac <I2C_WaitOnTXEFlagUntilTimeout>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00d      	beq.n	8008c2a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c12:	2b04      	cmp	r3, #4
 8008c14:	d107      	bne.n	8008c26 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	e06b      	b.n	8008d02 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2e:	781a      	ldrb	r2, [r3, #0]
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c3a:	1c5a      	adds	r2, r3, #1
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	3b01      	subs	r3, #1
 8008c48:	b29a      	uxth	r2, r3
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c52:	3b01      	subs	r3, #1
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	695b      	ldr	r3, [r3, #20]
 8008c60:	f003 0304 	and.w	r3, r3, #4
 8008c64:	2b04      	cmp	r3, #4
 8008c66:	d11b      	bne.n	8008ca0 <HAL_I2C_Master_Transmit+0x188>
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d017      	beq.n	8008ca0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c74:	781a      	ldrb	r2, [r3, #0]
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c80:	1c5a      	adds	r2, r3, #1
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	3b01      	subs	r3, #1
 8008c8e:	b29a      	uxth	r2, r3
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c98:	3b01      	subs	r3, #1
 8008c9a:	b29a      	uxth	r2, r3
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ca0:	697a      	ldr	r2, [r7, #20]
 8008ca2:	6a39      	ldr	r1, [r7, #32]
 8008ca4:	68f8      	ldr	r0, [r7, #12]
 8008ca6:	f000 fcc2 	bl	800962e <I2C_WaitOnBTFFlagUntilTimeout>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00d      	beq.n	8008ccc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb4:	2b04      	cmp	r3, #4
 8008cb6:	d107      	bne.n	8008cc8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cc6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e01a      	b.n	8008d02 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d194      	bne.n	8008bfe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ce2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2220      	movs	r2, #32
 8008ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	e000      	b.n	8008d02 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008d00:	2302      	movs	r3, #2
  }
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3718      	adds	r7, #24
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	00100002 	.word	0x00100002
 8008d10:	ffff0000 	.word	0xffff0000

08008d14 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b08c      	sub	sp, #48	; 0x30
 8008d18:	af02      	add	r7, sp, #8
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	607a      	str	r2, [r7, #4]
 8008d1e:	461a      	mov	r2, r3
 8008d20:	460b      	mov	r3, r1
 8008d22:	817b      	strh	r3, [r7, #10]
 8008d24:	4613      	mov	r3, r2
 8008d26:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008d28:	f7fd fc20 	bl	800656c <HAL_GetTick>
 8008d2c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	2b20      	cmp	r3, #32
 8008d38:	f040 820b 	bne.w	8009152 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3e:	9300      	str	r3, [sp, #0]
 8008d40:	2319      	movs	r3, #25
 8008d42:	2201      	movs	r2, #1
 8008d44:	497c      	ldr	r1, [pc, #496]	; (8008f38 <HAL_I2C_Master_Receive+0x224>)
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f000 fb5a 	bl	8009400 <I2C_WaitOnFlagUntilTimeout>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d001      	beq.n	8008d56 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008d52:	2302      	movs	r3, #2
 8008d54:	e1fe      	b.n	8009154 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d101      	bne.n	8008d64 <HAL_I2C_Master_Receive+0x50>
 8008d60:	2302      	movs	r3, #2
 8008d62:	e1f7      	b.n	8009154 <HAL_I2C_Master_Receive+0x440>
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2201      	movs	r2, #1
 8008d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f003 0301 	and.w	r3, r3, #1
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d007      	beq.n	8008d8a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	681a      	ldr	r2, [r3, #0]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f042 0201 	orr.w	r2, r2, #1
 8008d88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2222      	movs	r2, #34	; 0x22
 8008d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2210      	movs	r2, #16
 8008da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2200      	movs	r2, #0
 8008dae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	893a      	ldrh	r2, [r7, #8]
 8008dba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dc0:	b29a      	uxth	r2, r3
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	4a5c      	ldr	r2, [pc, #368]	; (8008f3c <HAL_I2C_Master_Receive+0x228>)
 8008dca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008dcc:	8979      	ldrh	r1, [r7, #10]
 8008dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dd2:	68f8      	ldr	r0, [r7, #12]
 8008dd4:	f000 fa46 	bl	8009264 <I2C_MasterRequestRead>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d001      	beq.n	8008de2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8008dde:	2301      	movs	r3, #1
 8008de0:	e1b8      	b.n	8009154 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d113      	bne.n	8008e12 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008dea:	2300      	movs	r3, #0
 8008dec:	623b      	str	r3, [r7, #32]
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	695b      	ldr	r3, [r3, #20]
 8008df4:	623b      	str	r3, [r7, #32]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	699b      	ldr	r3, [r3, #24]
 8008dfc:	623b      	str	r3, [r7, #32]
 8008dfe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e0e:	601a      	str	r2, [r3, #0]
 8008e10:	e18c      	b.n	800912c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d11b      	bne.n	8008e52 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	61fb      	str	r3, [r7, #28]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	695b      	ldr	r3, [r3, #20]
 8008e34:	61fb      	str	r3, [r7, #28]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	699b      	ldr	r3, [r3, #24]
 8008e3c:	61fb      	str	r3, [r7, #28]
 8008e3e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e4e:	601a      	str	r2, [r3, #0]
 8008e50:	e16c      	b.n	800912c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e56:	2b02      	cmp	r3, #2
 8008e58:	d11b      	bne.n	8008e92 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681a      	ldr	r2, [r3, #0]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e68:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	61bb      	str	r3, [r7, #24]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	695b      	ldr	r3, [r3, #20]
 8008e84:	61bb      	str	r3, [r7, #24]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	699b      	ldr	r3, [r3, #24]
 8008e8c:	61bb      	str	r3, [r7, #24]
 8008e8e:	69bb      	ldr	r3, [r7, #24]
 8008e90:	e14c      	b.n	800912c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008ea0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	617b      	str	r3, [r7, #20]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	695b      	ldr	r3, [r3, #20]
 8008eac:	617b      	str	r3, [r7, #20]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	699b      	ldr	r3, [r3, #24]
 8008eb4:	617b      	str	r3, [r7, #20]
 8008eb6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008eb8:	e138      	b.n	800912c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ebe:	2b03      	cmp	r3, #3
 8008ec0:	f200 80f1 	bhi.w	80090a6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d123      	bne.n	8008f14 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ece:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f000 fbed 	bl	80096b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d001      	beq.n	8008ee0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008edc:	2301      	movs	r3, #1
 8008ede:	e139      	b.n	8009154 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	691a      	ldr	r2, [r3, #16]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eea:	b2d2      	uxtb	r2, r2
 8008eec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef2:	1c5a      	adds	r2, r3, #1
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008efc:	3b01      	subs	r3, #1
 8008efe:	b29a      	uxth	r2, r3
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	b29a      	uxth	r2, r3
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008f12:	e10b      	b.n	800912c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	d14e      	bne.n	8008fba <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1e:	9300      	str	r3, [sp, #0]
 8008f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f22:	2200      	movs	r2, #0
 8008f24:	4906      	ldr	r1, [pc, #24]	; (8008f40 <HAL_I2C_Master_Receive+0x22c>)
 8008f26:	68f8      	ldr	r0, [r7, #12]
 8008f28:	f000 fa6a 	bl	8009400 <I2C_WaitOnFlagUntilTimeout>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d008      	beq.n	8008f44 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8008f32:	2301      	movs	r3, #1
 8008f34:	e10e      	b.n	8009154 <HAL_I2C_Master_Receive+0x440>
 8008f36:	bf00      	nop
 8008f38:	00100002 	.word	0x00100002
 8008f3c:	ffff0000 	.word	0xffff0000
 8008f40:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	691a      	ldr	r2, [r3, #16]
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5e:	b2d2      	uxtb	r2, r2
 8008f60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f66:	1c5a      	adds	r2, r3, #1
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f70:	3b01      	subs	r3, #1
 8008f72:	b29a      	uxth	r2, r3
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	3b01      	subs	r3, #1
 8008f80:	b29a      	uxth	r2, r3
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	691a      	ldr	r2, [r3, #16]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f90:	b2d2      	uxtb	r2, r2
 8008f92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f98:	1c5a      	adds	r2, r3, #1
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fa2:	3b01      	subs	r3, #1
 8008fa4:	b29a      	uxth	r2, r3
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	3b01      	subs	r3, #1
 8008fb2:	b29a      	uxth	r2, r3
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008fb8:	e0b8      	b.n	800912c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fbc:	9300      	str	r3, [sp, #0]
 8008fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	4966      	ldr	r1, [pc, #408]	; (800915c <HAL_I2C_Master_Receive+0x448>)
 8008fc4:	68f8      	ldr	r0, [r7, #12]
 8008fc6:	f000 fa1b 	bl	8009400 <I2C_WaitOnFlagUntilTimeout>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d001      	beq.n	8008fd4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	e0bf      	b.n	8009154 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fe2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	691a      	ldr	r2, [r3, #16]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fee:	b2d2      	uxtb	r2, r2
 8008ff0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff6:	1c5a      	adds	r2, r3, #1
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009000:	3b01      	subs	r3, #1
 8009002:	b29a      	uxth	r2, r3
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800900c:	b29b      	uxth	r3, r3
 800900e:	3b01      	subs	r3, #1
 8009010:	b29a      	uxth	r2, r3
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009018:	9300      	str	r3, [sp, #0]
 800901a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901c:	2200      	movs	r2, #0
 800901e:	494f      	ldr	r1, [pc, #316]	; (800915c <HAL_I2C_Master_Receive+0x448>)
 8009020:	68f8      	ldr	r0, [r7, #12]
 8009022:	f000 f9ed 	bl	8009400 <I2C_WaitOnFlagUntilTimeout>
 8009026:	4603      	mov	r3, r0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d001      	beq.n	8009030 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800902c:	2301      	movs	r3, #1
 800902e:	e091      	b.n	8009154 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800903e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	691a      	ldr	r2, [r3, #16]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904a:	b2d2      	uxtb	r2, r2
 800904c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009052:	1c5a      	adds	r2, r3, #1
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800905c:	3b01      	subs	r3, #1
 800905e:	b29a      	uxth	r2, r3
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009068:	b29b      	uxth	r3, r3
 800906a:	3b01      	subs	r3, #1
 800906c:	b29a      	uxth	r2, r3
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	691a      	ldr	r2, [r3, #16]
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907c:	b2d2      	uxtb	r2, r2
 800907e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009084:	1c5a      	adds	r2, r3, #1
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800908e:	3b01      	subs	r3, #1
 8009090:	b29a      	uxth	r2, r3
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800909a:	b29b      	uxth	r3, r3
 800909c:	3b01      	subs	r3, #1
 800909e:	b29a      	uxth	r2, r3
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80090a4:	e042      	b.n	800912c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80090aa:	68f8      	ldr	r0, [r7, #12]
 80090ac:	f000 fb00 	bl	80096b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d001      	beq.n	80090ba <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	e04c      	b.n	8009154 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	691a      	ldr	r2, [r3, #16]
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c4:	b2d2      	uxtb	r2, r2
 80090c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090cc:	1c5a      	adds	r2, r3, #1
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090d6:	3b01      	subs	r3, #1
 80090d8:	b29a      	uxth	r2, r3
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	3b01      	subs	r3, #1
 80090e6:	b29a      	uxth	r2, r3
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	695b      	ldr	r3, [r3, #20]
 80090f2:	f003 0304 	and.w	r3, r3, #4
 80090f6:	2b04      	cmp	r3, #4
 80090f8:	d118      	bne.n	800912c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	691a      	ldr	r2, [r3, #16]
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009104:	b2d2      	uxtb	r2, r2
 8009106:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910c:	1c5a      	adds	r2, r3, #1
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009116:	3b01      	subs	r3, #1
 8009118:	b29a      	uxth	r2, r3
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009122:	b29b      	uxth	r3, r3
 8009124:	3b01      	subs	r3, #1
 8009126:	b29a      	uxth	r2, r3
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009130:	2b00      	cmp	r3, #0
 8009132:	f47f aec2 	bne.w	8008eba <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2220      	movs	r2, #32
 800913a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2200      	movs	r2, #0
 8009142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2200      	movs	r2, #0
 800914a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800914e:	2300      	movs	r3, #0
 8009150:	e000      	b.n	8009154 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009152:	2302      	movs	r3, #2
  }
}
 8009154:	4618      	mov	r0, r3
 8009156:	3728      	adds	r7, #40	; 0x28
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}
 800915c:	00010004 	.word	0x00010004

08009160 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b088      	sub	sp, #32
 8009164:	af02      	add	r7, sp, #8
 8009166:	60f8      	str	r0, [r7, #12]
 8009168:	607a      	str	r2, [r7, #4]
 800916a:	603b      	str	r3, [r7, #0]
 800916c:	460b      	mov	r3, r1
 800916e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009174:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	2b08      	cmp	r3, #8
 800917a:	d006      	beq.n	800918a <I2C_MasterRequestWrite+0x2a>
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	2b01      	cmp	r3, #1
 8009180:	d003      	beq.n	800918a <I2C_MasterRequestWrite+0x2a>
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009188:	d108      	bne.n	800919c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009198:	601a      	str	r2, [r3, #0]
 800919a:	e00b      	b.n	80091b4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a0:	2b12      	cmp	r3, #18
 80091a2:	d107      	bne.n	80091b4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80091b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	9300      	str	r3, [sp, #0]
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2200      	movs	r2, #0
 80091bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f000 f91d 	bl	8009400 <I2C_WaitOnFlagUntilTimeout>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d00d      	beq.n	80091e8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091da:	d103      	bne.n	80091e4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80091e4:	2303      	movs	r3, #3
 80091e6:	e035      	b.n	8009254 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	691b      	ldr	r3, [r3, #16]
 80091ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091f0:	d108      	bne.n	8009204 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80091f2:	897b      	ldrh	r3, [r7, #10]
 80091f4:	b2db      	uxtb	r3, r3
 80091f6:	461a      	mov	r2, r3
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009200:	611a      	str	r2, [r3, #16]
 8009202:	e01b      	b.n	800923c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009204:	897b      	ldrh	r3, [r7, #10]
 8009206:	11db      	asrs	r3, r3, #7
 8009208:	b2db      	uxtb	r3, r3
 800920a:	f003 0306 	and.w	r3, r3, #6
 800920e:	b2db      	uxtb	r3, r3
 8009210:	f063 030f 	orn	r3, r3, #15
 8009214:	b2da      	uxtb	r2, r3
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	490e      	ldr	r1, [pc, #56]	; (800925c <I2C_MasterRequestWrite+0xfc>)
 8009222:	68f8      	ldr	r0, [r7, #12]
 8009224:	f000 f943 	bl	80094ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009228:	4603      	mov	r3, r0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d001      	beq.n	8009232 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800922e:	2301      	movs	r3, #1
 8009230:	e010      	b.n	8009254 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009232:	897b      	ldrh	r3, [r7, #10]
 8009234:	b2da      	uxtb	r2, r3
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	4907      	ldr	r1, [pc, #28]	; (8009260 <I2C_MasterRequestWrite+0x100>)
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f000 f933 	bl	80094ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009248:	4603      	mov	r3, r0
 800924a:	2b00      	cmp	r3, #0
 800924c:	d001      	beq.n	8009252 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800924e:	2301      	movs	r3, #1
 8009250:	e000      	b.n	8009254 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	3718      	adds	r7, #24
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	00010008 	.word	0x00010008
 8009260:	00010002 	.word	0x00010002

08009264 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b088      	sub	sp, #32
 8009268:	af02      	add	r7, sp, #8
 800926a:	60f8      	str	r0, [r7, #12]
 800926c:	607a      	str	r2, [r7, #4]
 800926e:	603b      	str	r3, [r7, #0]
 8009270:	460b      	mov	r3, r1
 8009272:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009278:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009288:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	2b08      	cmp	r3, #8
 800928e:	d006      	beq.n	800929e <I2C_MasterRequestRead+0x3a>
 8009290:	697b      	ldr	r3, [r7, #20]
 8009292:	2b01      	cmp	r3, #1
 8009294:	d003      	beq.n	800929e <I2C_MasterRequestRead+0x3a>
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800929c:	d108      	bne.n	80092b0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092ac:	601a      	str	r2, [r3, #0]
 80092ae:	e00b      	b.n	80092c8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092b4:	2b11      	cmp	r3, #17
 80092b6:	d107      	bne.n	80092c8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	9300      	str	r3, [sp, #0]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	f000 f893 	bl	8009400 <I2C_WaitOnFlagUntilTimeout>
 80092da:	4603      	mov	r3, r0
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00d      	beq.n	80092fc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092ee:	d103      	bne.n	80092f8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80092f8:	2303      	movs	r3, #3
 80092fa:	e079      	b.n	80093f0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	691b      	ldr	r3, [r3, #16]
 8009300:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009304:	d108      	bne.n	8009318 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009306:	897b      	ldrh	r3, [r7, #10]
 8009308:	b2db      	uxtb	r3, r3
 800930a:	f043 0301 	orr.w	r3, r3, #1
 800930e:	b2da      	uxtb	r2, r3
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	611a      	str	r2, [r3, #16]
 8009316:	e05f      	b.n	80093d8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009318:	897b      	ldrh	r3, [r7, #10]
 800931a:	11db      	asrs	r3, r3, #7
 800931c:	b2db      	uxtb	r3, r3
 800931e:	f003 0306 	and.w	r3, r3, #6
 8009322:	b2db      	uxtb	r3, r3
 8009324:	f063 030f 	orn	r3, r3, #15
 8009328:	b2da      	uxtb	r2, r3
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	4930      	ldr	r1, [pc, #192]	; (80093f8 <I2C_MasterRequestRead+0x194>)
 8009336:	68f8      	ldr	r0, [r7, #12]
 8009338:	f000 f8b9 	bl	80094ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d001      	beq.n	8009346 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009342:	2301      	movs	r3, #1
 8009344:	e054      	b.n	80093f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009346:	897b      	ldrh	r3, [r7, #10]
 8009348:	b2da      	uxtb	r2, r3
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	687a      	ldr	r2, [r7, #4]
 8009354:	4929      	ldr	r1, [pc, #164]	; (80093fc <I2C_MasterRequestRead+0x198>)
 8009356:	68f8      	ldr	r0, [r7, #12]
 8009358:	f000 f8a9 	bl	80094ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800935c:	4603      	mov	r3, r0
 800935e:	2b00      	cmp	r3, #0
 8009360:	d001      	beq.n	8009366 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009362:	2301      	movs	r3, #1
 8009364:	e044      	b.n	80093f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009366:	2300      	movs	r3, #0
 8009368:	613b      	str	r3, [r7, #16]
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	695b      	ldr	r3, [r3, #20]
 8009370:	613b      	str	r3, [r7, #16]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	699b      	ldr	r3, [r3, #24]
 8009378:	613b      	str	r3, [r7, #16]
 800937a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800938a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	9300      	str	r3, [sp, #0]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009398:	68f8      	ldr	r0, [r7, #12]
 800939a:	f000 f831 	bl	8009400 <I2C_WaitOnFlagUntilTimeout>
 800939e:	4603      	mov	r3, r0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d00d      	beq.n	80093c0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093b2:	d103      	bne.n	80093bc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093ba:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80093bc:	2303      	movs	r3, #3
 80093be:	e017      	b.n	80093f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80093c0:	897b      	ldrh	r3, [r7, #10]
 80093c2:	11db      	asrs	r3, r3, #7
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	f003 0306 	and.w	r3, r3, #6
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	f063 030e 	orn	r3, r3, #14
 80093d0:	b2da      	uxtb	r2, r3
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	4907      	ldr	r1, [pc, #28]	; (80093fc <I2C_MasterRequestRead+0x198>)
 80093de:	68f8      	ldr	r0, [r7, #12]
 80093e0:	f000 f865 	bl	80094ae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d001      	beq.n	80093ee <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	e000      	b.n	80093f0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3718      	adds	r7, #24
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	00010008 	.word	0x00010008
 80093fc:	00010002 	.word	0x00010002

08009400 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	603b      	str	r3, [r7, #0]
 800940c:	4613      	mov	r3, r2
 800940e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009410:	e025      	b.n	800945e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009418:	d021      	beq.n	800945e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800941a:	f7fd f8a7 	bl	800656c <HAL_GetTick>
 800941e:	4602      	mov	r2, r0
 8009420:	69bb      	ldr	r3, [r7, #24]
 8009422:	1ad3      	subs	r3, r2, r3
 8009424:	683a      	ldr	r2, [r7, #0]
 8009426:	429a      	cmp	r2, r3
 8009428:	d302      	bcc.n	8009430 <I2C_WaitOnFlagUntilTimeout+0x30>
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d116      	bne.n	800945e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2200      	movs	r2, #0
 8009434:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2220      	movs	r2, #32
 800943a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2200      	movs	r2, #0
 8009442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800944a:	f043 0220 	orr.w	r2, r3, #32
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2200      	movs	r2, #0
 8009456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800945a:	2301      	movs	r3, #1
 800945c:	e023      	b.n	80094a6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	0c1b      	lsrs	r3, r3, #16
 8009462:	b2db      	uxtb	r3, r3
 8009464:	2b01      	cmp	r3, #1
 8009466:	d10d      	bne.n	8009484 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	695b      	ldr	r3, [r3, #20]
 800946e:	43da      	mvns	r2, r3
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	4013      	ands	r3, r2
 8009474:	b29b      	uxth	r3, r3
 8009476:	2b00      	cmp	r3, #0
 8009478:	bf0c      	ite	eq
 800947a:	2301      	moveq	r3, #1
 800947c:	2300      	movne	r3, #0
 800947e:	b2db      	uxtb	r3, r3
 8009480:	461a      	mov	r2, r3
 8009482:	e00c      	b.n	800949e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	699b      	ldr	r3, [r3, #24]
 800948a:	43da      	mvns	r2, r3
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	4013      	ands	r3, r2
 8009490:	b29b      	uxth	r3, r3
 8009492:	2b00      	cmp	r3, #0
 8009494:	bf0c      	ite	eq
 8009496:	2301      	moveq	r3, #1
 8009498:	2300      	movne	r3, #0
 800949a:	b2db      	uxtb	r3, r3
 800949c:	461a      	mov	r2, r3
 800949e:	79fb      	ldrb	r3, [r7, #7]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d0b6      	beq.n	8009412 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b084      	sub	sp, #16
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	60f8      	str	r0, [r7, #12]
 80094b6:	60b9      	str	r1, [r7, #8]
 80094b8:	607a      	str	r2, [r7, #4]
 80094ba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80094bc:	e051      	b.n	8009562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	695b      	ldr	r3, [r3, #20]
 80094c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094cc:	d123      	bne.n	8009516 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094dc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80094e6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2200      	movs	r2, #0
 80094ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	2220      	movs	r2, #32
 80094f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2200      	movs	r2, #0
 80094fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009502:	f043 0204 	orr.w	r2, r3, #4
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2200      	movs	r2, #0
 800950e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009512:	2301      	movs	r3, #1
 8009514:	e046      	b.n	80095a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800951c:	d021      	beq.n	8009562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800951e:	f7fd f825 	bl	800656c <HAL_GetTick>
 8009522:	4602      	mov	r2, r0
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	1ad3      	subs	r3, r2, r3
 8009528:	687a      	ldr	r2, [r7, #4]
 800952a:	429a      	cmp	r2, r3
 800952c:	d302      	bcc.n	8009534 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d116      	bne.n	8009562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2200      	movs	r2, #0
 8009538:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2220      	movs	r2, #32
 800953e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2200      	movs	r2, #0
 8009546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800954e:	f043 0220 	orr.w	r2, r3, #32
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2200      	movs	r2, #0
 800955a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	e020      	b.n	80095a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	0c1b      	lsrs	r3, r3, #16
 8009566:	b2db      	uxtb	r3, r3
 8009568:	2b01      	cmp	r3, #1
 800956a:	d10c      	bne.n	8009586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	695b      	ldr	r3, [r3, #20]
 8009572:	43da      	mvns	r2, r3
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	4013      	ands	r3, r2
 8009578:	b29b      	uxth	r3, r3
 800957a:	2b00      	cmp	r3, #0
 800957c:	bf14      	ite	ne
 800957e:	2301      	movne	r3, #1
 8009580:	2300      	moveq	r3, #0
 8009582:	b2db      	uxtb	r3, r3
 8009584:	e00b      	b.n	800959e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	699b      	ldr	r3, [r3, #24]
 800958c:	43da      	mvns	r2, r3
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	4013      	ands	r3, r2
 8009592:	b29b      	uxth	r3, r3
 8009594:	2b00      	cmp	r3, #0
 8009596:	bf14      	ite	ne
 8009598:	2301      	movne	r3, #1
 800959a:	2300      	moveq	r3, #0
 800959c:	b2db      	uxtb	r3, r3
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d18d      	bne.n	80094be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80095a2:	2300      	movs	r3, #0
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3710      	adds	r7, #16
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	60f8      	str	r0, [r7, #12]
 80095b4:	60b9      	str	r1, [r7, #8]
 80095b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80095b8:	e02d      	b.n	8009616 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80095ba:	68f8      	ldr	r0, [r7, #12]
 80095bc:	f000 f8ce 	bl	800975c <I2C_IsAcknowledgeFailed>
 80095c0:	4603      	mov	r3, r0
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d001      	beq.n	80095ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80095c6:	2301      	movs	r3, #1
 80095c8:	e02d      	b.n	8009626 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095d0:	d021      	beq.n	8009616 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095d2:	f7fc ffcb 	bl	800656c <HAL_GetTick>
 80095d6:	4602      	mov	r2, r0
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	1ad3      	subs	r3, r2, r3
 80095dc:	68ba      	ldr	r2, [r7, #8]
 80095de:	429a      	cmp	r2, r3
 80095e0:	d302      	bcc.n	80095e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d116      	bne.n	8009616 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2200      	movs	r2, #0
 80095ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2220      	movs	r2, #32
 80095f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2200      	movs	r2, #0
 80095fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009602:	f043 0220 	orr.w	r2, r3, #32
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	2200      	movs	r2, #0
 800960e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009612:	2301      	movs	r3, #1
 8009614:	e007      	b.n	8009626 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	695b      	ldr	r3, [r3, #20]
 800961c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009620:	2b80      	cmp	r3, #128	; 0x80
 8009622:	d1ca      	bne.n	80095ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009624:	2300      	movs	r3, #0
}
 8009626:	4618      	mov	r0, r3
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}

0800962e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800962e:	b580      	push	{r7, lr}
 8009630:	b084      	sub	sp, #16
 8009632:	af00      	add	r7, sp, #0
 8009634:	60f8      	str	r0, [r7, #12]
 8009636:	60b9      	str	r1, [r7, #8]
 8009638:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800963a:	e02d      	b.n	8009698 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800963c:	68f8      	ldr	r0, [r7, #12]
 800963e:	f000 f88d 	bl	800975c <I2C_IsAcknowledgeFailed>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d001      	beq.n	800964c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009648:	2301      	movs	r3, #1
 800964a:	e02d      	b.n	80096a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800964c:	68bb      	ldr	r3, [r7, #8]
 800964e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009652:	d021      	beq.n	8009698 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009654:	f7fc ff8a 	bl	800656c <HAL_GetTick>
 8009658:	4602      	mov	r2, r0
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	1ad3      	subs	r3, r2, r3
 800965e:	68ba      	ldr	r2, [r7, #8]
 8009660:	429a      	cmp	r2, r3
 8009662:	d302      	bcc.n	800966a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d116      	bne.n	8009698 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2200      	movs	r2, #0
 800966e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2220      	movs	r2, #32
 8009674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2200      	movs	r2, #0
 800967c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009684:	f043 0220 	orr.w	r2, r3, #32
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2200      	movs	r2, #0
 8009690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009694:	2301      	movs	r3, #1
 8009696:	e007      	b.n	80096a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	695b      	ldr	r3, [r3, #20]
 800969e:	f003 0304 	and.w	r3, r3, #4
 80096a2:	2b04      	cmp	r3, #4
 80096a4:	d1ca      	bne.n	800963c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3710      	adds	r7, #16
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	60b9      	str	r1, [r7, #8]
 80096ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80096bc:	e042      	b.n	8009744 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	695b      	ldr	r3, [r3, #20]
 80096c4:	f003 0310 	and.w	r3, r3, #16
 80096c8:	2b10      	cmp	r3, #16
 80096ca:	d119      	bne.n	8009700 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f06f 0210 	mvn.w	r2, #16
 80096d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	2200      	movs	r2, #0
 80096da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2220      	movs	r2, #32
 80096e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2200      	movs	r2, #0
 80096e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2200      	movs	r2, #0
 80096f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80096fc:	2301      	movs	r3, #1
 80096fe:	e029      	b.n	8009754 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009700:	f7fc ff34 	bl	800656c <HAL_GetTick>
 8009704:	4602      	mov	r2, r0
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	1ad3      	subs	r3, r2, r3
 800970a:	68ba      	ldr	r2, [r7, #8]
 800970c:	429a      	cmp	r2, r3
 800970e:	d302      	bcc.n	8009716 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d116      	bne.n	8009744 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2200      	movs	r2, #0
 800971a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2220      	movs	r2, #32
 8009720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2200      	movs	r2, #0
 8009728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009730:	f043 0220 	orr.w	r2, r3, #32
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2200      	movs	r2, #0
 800973c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009740:	2301      	movs	r3, #1
 8009742:	e007      	b.n	8009754 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	695b      	ldr	r3, [r3, #20]
 800974a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800974e:	2b40      	cmp	r3, #64	; 0x40
 8009750:	d1b5      	bne.n	80096be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3710      	adds	r7, #16
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	695b      	ldr	r3, [r3, #20]
 800976a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800976e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009772:	d11b      	bne.n	80097ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800977c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2200      	movs	r2, #0
 8009782:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2220      	movs	r2, #32
 8009788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009798:	f043 0204 	orr.w	r2, r3, #4
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80097a8:	2301      	movs	r3, #1
 80097aa:	e000      	b.n	80097ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80097ac:	2300      	movs	r3, #0
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	370c      	adds	r7, #12
 80097b2:	46bd      	mov	sp, r7
 80097b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b8:	4770      	bx	lr

080097ba <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b084      	sub	sp, #16
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d101      	bne.n	80097cc <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	e034      	b.n	8009836 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80097d4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f245 5255 	movw	r2, #21845	; 0x5555
 80097de:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	6852      	ldr	r2, [r2, #4]
 80097e8:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	6892      	ldr	r2, [r2, #8]
 80097f2:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80097f4:	f7fc feba 	bl	800656c <HAL_GetTick>
 80097f8:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80097fa:	e00f      	b.n	800981c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80097fc:	f7fc feb6 	bl	800656c <HAL_GetTick>
 8009800:	4602      	mov	r2, r0
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	1ad3      	subs	r3, r2, r3
 8009806:	2b31      	cmp	r3, #49	; 0x31
 8009808:	d908      	bls.n	800981c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	f003 0303 	and.w	r3, r3, #3
 8009814:	2b00      	cmp	r3, #0
 8009816:	d001      	beq.n	800981c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8009818:	2303      	movs	r3, #3
 800981a:	e00c      	b.n	8009836 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	f003 0303 	and.w	r3, r3, #3
 8009826:	2b00      	cmp	r3, #0
 8009828:	d1e8      	bne.n	80097fc <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8009832:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	3710      	adds	r7, #16
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}

0800983e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800983e:	b480      	push	{r7}
 8009840:	b083      	sub	sp, #12
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800984e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009850:	2300      	movs	r3, #0
}
 8009852:	4618      	mov	r0, r3
 8009854:	370c      	adds	r7, #12
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr

0800985e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800985e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009860:	b08f      	sub	sp, #60	; 0x3c
 8009862:	af0a      	add	r7, sp, #40	; 0x28
 8009864:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d101      	bne.n	8009870 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800986c:	2301      	movs	r3, #1
 800986e:	e116      	b.n	8009a9e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800987c:	b2db      	uxtb	r3, r3
 800987e:	2b00      	cmp	r3, #0
 8009880:	d106      	bne.n	8009890 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2200      	movs	r2, #0
 8009886:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f00c fe2e 	bl	80164ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2203      	movs	r2, #3
 8009894:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009898:	68bb      	ldr	r3, [r7, #8]
 800989a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800989c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d102      	bne.n	80098aa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2200      	movs	r2, #0
 80098a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4618      	mov	r0, r3
 80098b0:	f005 f92b 	bl	800eb0a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	603b      	str	r3, [r7, #0]
 80098ba:	687e      	ldr	r6, [r7, #4]
 80098bc:	466d      	mov	r5, sp
 80098be:	f106 0410 	add.w	r4, r6, #16
 80098c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80098c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80098c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80098c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80098ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80098ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80098d2:	1d33      	adds	r3, r6, #4
 80098d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80098d6:	6838      	ldr	r0, [r7, #0]
 80098d8:	f005 f802 	bl	800e8e0 <USB_CoreInit>
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d005      	beq.n	80098ee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2202      	movs	r2, #2
 80098e6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80098ea:	2301      	movs	r3, #1
 80098ec:	e0d7      	b.n	8009a9e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2100      	movs	r1, #0
 80098f4:	4618      	mov	r0, r3
 80098f6:	f005 f919 	bl	800eb2c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80098fa:	2300      	movs	r3, #0
 80098fc:	73fb      	strb	r3, [r7, #15]
 80098fe:	e04a      	b.n	8009996 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009900:	7bfa      	ldrb	r2, [r7, #15]
 8009902:	6879      	ldr	r1, [r7, #4]
 8009904:	4613      	mov	r3, r2
 8009906:	00db      	lsls	r3, r3, #3
 8009908:	1a9b      	subs	r3, r3, r2
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	440b      	add	r3, r1
 800990e:	333d      	adds	r3, #61	; 0x3d
 8009910:	2201      	movs	r2, #1
 8009912:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009914:	7bfa      	ldrb	r2, [r7, #15]
 8009916:	6879      	ldr	r1, [r7, #4]
 8009918:	4613      	mov	r3, r2
 800991a:	00db      	lsls	r3, r3, #3
 800991c:	1a9b      	subs	r3, r3, r2
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	440b      	add	r3, r1
 8009922:	333c      	adds	r3, #60	; 0x3c
 8009924:	7bfa      	ldrb	r2, [r7, #15]
 8009926:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009928:	7bfa      	ldrb	r2, [r7, #15]
 800992a:	7bfb      	ldrb	r3, [r7, #15]
 800992c:	b298      	uxth	r0, r3
 800992e:	6879      	ldr	r1, [r7, #4]
 8009930:	4613      	mov	r3, r2
 8009932:	00db      	lsls	r3, r3, #3
 8009934:	1a9b      	subs	r3, r3, r2
 8009936:	009b      	lsls	r3, r3, #2
 8009938:	440b      	add	r3, r1
 800993a:	3342      	adds	r3, #66	; 0x42
 800993c:	4602      	mov	r2, r0
 800993e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009940:	7bfa      	ldrb	r2, [r7, #15]
 8009942:	6879      	ldr	r1, [r7, #4]
 8009944:	4613      	mov	r3, r2
 8009946:	00db      	lsls	r3, r3, #3
 8009948:	1a9b      	subs	r3, r3, r2
 800994a:	009b      	lsls	r3, r3, #2
 800994c:	440b      	add	r3, r1
 800994e:	333f      	adds	r3, #63	; 0x3f
 8009950:	2200      	movs	r2, #0
 8009952:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009954:	7bfa      	ldrb	r2, [r7, #15]
 8009956:	6879      	ldr	r1, [r7, #4]
 8009958:	4613      	mov	r3, r2
 800995a:	00db      	lsls	r3, r3, #3
 800995c:	1a9b      	subs	r3, r3, r2
 800995e:	009b      	lsls	r3, r3, #2
 8009960:	440b      	add	r3, r1
 8009962:	3344      	adds	r3, #68	; 0x44
 8009964:	2200      	movs	r2, #0
 8009966:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009968:	7bfa      	ldrb	r2, [r7, #15]
 800996a:	6879      	ldr	r1, [r7, #4]
 800996c:	4613      	mov	r3, r2
 800996e:	00db      	lsls	r3, r3, #3
 8009970:	1a9b      	subs	r3, r3, r2
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	440b      	add	r3, r1
 8009976:	3348      	adds	r3, #72	; 0x48
 8009978:	2200      	movs	r2, #0
 800997a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800997c:	7bfa      	ldrb	r2, [r7, #15]
 800997e:	6879      	ldr	r1, [r7, #4]
 8009980:	4613      	mov	r3, r2
 8009982:	00db      	lsls	r3, r3, #3
 8009984:	1a9b      	subs	r3, r3, r2
 8009986:	009b      	lsls	r3, r3, #2
 8009988:	440b      	add	r3, r1
 800998a:	3350      	adds	r3, #80	; 0x50
 800998c:	2200      	movs	r2, #0
 800998e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009990:	7bfb      	ldrb	r3, [r7, #15]
 8009992:	3301      	adds	r3, #1
 8009994:	73fb      	strb	r3, [r7, #15]
 8009996:	7bfa      	ldrb	r2, [r7, #15]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	429a      	cmp	r2, r3
 800999e:	d3af      	bcc.n	8009900 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80099a0:	2300      	movs	r3, #0
 80099a2:	73fb      	strb	r3, [r7, #15]
 80099a4:	e044      	b.n	8009a30 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80099a6:	7bfa      	ldrb	r2, [r7, #15]
 80099a8:	6879      	ldr	r1, [r7, #4]
 80099aa:	4613      	mov	r3, r2
 80099ac:	00db      	lsls	r3, r3, #3
 80099ae:	1a9b      	subs	r3, r3, r2
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	440b      	add	r3, r1
 80099b4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80099b8:	2200      	movs	r2, #0
 80099ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80099bc:	7bfa      	ldrb	r2, [r7, #15]
 80099be:	6879      	ldr	r1, [r7, #4]
 80099c0:	4613      	mov	r3, r2
 80099c2:	00db      	lsls	r3, r3, #3
 80099c4:	1a9b      	subs	r3, r3, r2
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	440b      	add	r3, r1
 80099ca:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80099ce:	7bfa      	ldrb	r2, [r7, #15]
 80099d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80099d2:	7bfa      	ldrb	r2, [r7, #15]
 80099d4:	6879      	ldr	r1, [r7, #4]
 80099d6:	4613      	mov	r3, r2
 80099d8:	00db      	lsls	r3, r3, #3
 80099da:	1a9b      	subs	r3, r3, r2
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	440b      	add	r3, r1
 80099e0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80099e4:	2200      	movs	r2, #0
 80099e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80099e8:	7bfa      	ldrb	r2, [r7, #15]
 80099ea:	6879      	ldr	r1, [r7, #4]
 80099ec:	4613      	mov	r3, r2
 80099ee:	00db      	lsls	r3, r3, #3
 80099f0:	1a9b      	subs	r3, r3, r2
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	440b      	add	r3, r1
 80099f6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80099fa:	2200      	movs	r2, #0
 80099fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80099fe:	7bfa      	ldrb	r2, [r7, #15]
 8009a00:	6879      	ldr	r1, [r7, #4]
 8009a02:	4613      	mov	r3, r2
 8009a04:	00db      	lsls	r3, r3, #3
 8009a06:	1a9b      	subs	r3, r3, r2
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	440b      	add	r3, r1
 8009a0c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009a10:	2200      	movs	r2, #0
 8009a12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009a14:	7bfa      	ldrb	r2, [r7, #15]
 8009a16:	6879      	ldr	r1, [r7, #4]
 8009a18:	4613      	mov	r3, r2
 8009a1a:	00db      	lsls	r3, r3, #3
 8009a1c:	1a9b      	subs	r3, r3, r2
 8009a1e:	009b      	lsls	r3, r3, #2
 8009a20:	440b      	add	r3, r1
 8009a22:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009a26:	2200      	movs	r2, #0
 8009a28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a2a:	7bfb      	ldrb	r3, [r7, #15]
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	73fb      	strb	r3, [r7, #15]
 8009a30:	7bfa      	ldrb	r2, [r7, #15]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d3b5      	bcc.n	80099a6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	603b      	str	r3, [r7, #0]
 8009a40:	687e      	ldr	r6, [r7, #4]
 8009a42:	466d      	mov	r5, sp
 8009a44:	f106 0410 	add.w	r4, r6, #16
 8009a48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009a4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009a4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009a4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009a50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009a54:	e885 0003 	stmia.w	r5, {r0, r1}
 8009a58:	1d33      	adds	r3, r6, #4
 8009a5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009a5c:	6838      	ldr	r0, [r7, #0]
 8009a5e:	f005 f8b1 	bl	800ebc4 <USB_DevInit>
 8009a62:	4603      	mov	r3, r0
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d005      	beq.n	8009a74 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2202      	movs	r2, #2
 8009a6c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009a70:	2301      	movs	r3, #1
 8009a72:	e014      	b.n	8009a9e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d102      	bne.n	8009a92 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f001 f8bf 	bl	800ac10 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4618      	mov	r0, r3
 8009a98:	f006 f920 	bl	800fcdc <USB_DevDisconnect>

  return HAL_OK;
 8009a9c:	2300      	movs	r3, #0
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3714      	adds	r7, #20
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009aa6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009aa6:	b580      	push	{r7, lr}
 8009aa8:	b084      	sub	sp, #16
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d101      	bne.n	8009ac2 <HAL_PCD_Start+0x1c>
 8009abe:	2302      	movs	r3, #2
 8009ac0:	e020      	b.n	8009b04 <HAL_PCD_Start+0x5e>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ace:	2b01      	cmp	r3, #1
 8009ad0:	d109      	bne.n	8009ae6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d005      	beq.n	8009ae6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ade:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4618      	mov	r0, r3
 8009aec:	f004 fffc 	bl	800eae8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4618      	mov	r0, r3
 8009af6:	f006 f8d0 	bl	800fc9a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2200      	movs	r2, #0
 8009afe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009b02:	2300      	movs	r3, #0
}
 8009b04:	4618      	mov	r0, r3
 8009b06:	3710      	adds	r7, #16
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009b0c:	b590      	push	{r4, r7, lr}
 8009b0e:	b08d      	sub	sp, #52	; 0x34
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b1a:	6a3b      	ldr	r3, [r7, #32]
 8009b1c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4618      	mov	r0, r3
 8009b24:	f006 f98e 	bl	800fe44 <USB_GetMode>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	f040 83ca 	bne.w	800a2c4 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4618      	mov	r0, r3
 8009b36:	f006 f8f2 	bl	800fd1e <USB_ReadInterrupts>
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	f000 83c0 	beq.w	800a2c2 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4618      	mov	r0, r3
 8009b48:	f006 f8e9 	bl	800fd1e <USB_ReadInterrupts>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	f003 0302 	and.w	r3, r3, #2
 8009b52:	2b02      	cmp	r3, #2
 8009b54:	d107      	bne.n	8009b66 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	695a      	ldr	r2, [r3, #20]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f002 0202 	and.w	r2, r2, #2
 8009b64:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f006 f8d7 	bl	800fd1e <USB_ReadInterrupts>
 8009b70:	4603      	mov	r3, r0
 8009b72:	f003 0310 	and.w	r3, r3, #16
 8009b76:	2b10      	cmp	r3, #16
 8009b78:	d161      	bne.n	8009c3e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	699a      	ldr	r2, [r3, #24]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f022 0210 	bic.w	r2, r2, #16
 8009b88:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8009b8a:	6a3b      	ldr	r3, [r7, #32]
 8009b8c:	6a1b      	ldr	r3, [r3, #32]
 8009b8e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	f003 020f 	and.w	r2, r3, #15
 8009b96:	4613      	mov	r3, r2
 8009b98:	00db      	lsls	r3, r3, #3
 8009b9a:	1a9b      	subs	r3, r3, r2
 8009b9c:	009b      	lsls	r3, r3, #2
 8009b9e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009ba2:	687a      	ldr	r2, [r7, #4]
 8009ba4:	4413      	add	r3, r2
 8009ba6:	3304      	adds	r3, #4
 8009ba8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009baa:	69bb      	ldr	r3, [r7, #24]
 8009bac:	0c5b      	lsrs	r3, r3, #17
 8009bae:	f003 030f 	and.w	r3, r3, #15
 8009bb2:	2b02      	cmp	r3, #2
 8009bb4:	d124      	bne.n	8009c00 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009bb6:	69ba      	ldr	r2, [r7, #24]
 8009bb8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009bbc:	4013      	ands	r3, r2
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d035      	beq.n	8009c2e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009bc6:	69bb      	ldr	r3, [r7, #24]
 8009bc8:	091b      	lsrs	r3, r3, #4
 8009bca:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009bcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	6a38      	ldr	r0, [r7, #32]
 8009bd6:	f005 ff0e 	bl	800f9f6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	68da      	ldr	r2, [r3, #12]
 8009bde:	69bb      	ldr	r3, [r7, #24]
 8009be0:	091b      	lsrs	r3, r3, #4
 8009be2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009be6:	441a      	add	r2, r3
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	699a      	ldr	r2, [r3, #24]
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	091b      	lsrs	r3, r3, #4
 8009bf4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009bf8:	441a      	add	r2, r3
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	619a      	str	r2, [r3, #24]
 8009bfe:	e016      	b.n	8009c2e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	0c5b      	lsrs	r3, r3, #17
 8009c04:	f003 030f 	and.w	r3, r3, #15
 8009c08:	2b06      	cmp	r3, #6
 8009c0a:	d110      	bne.n	8009c2e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009c12:	2208      	movs	r2, #8
 8009c14:	4619      	mov	r1, r3
 8009c16:	6a38      	ldr	r0, [r7, #32]
 8009c18:	f005 feed 	bl	800f9f6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	699a      	ldr	r2, [r3, #24]
 8009c20:	69bb      	ldr	r3, [r7, #24]
 8009c22:	091b      	lsrs	r3, r3, #4
 8009c24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009c28:	441a      	add	r2, r3
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	699a      	ldr	r2, [r3, #24]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f042 0210 	orr.w	r2, r2, #16
 8009c3c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4618      	mov	r0, r3
 8009c44:	f006 f86b 	bl	800fd1e <USB_ReadInterrupts>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009c4e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009c52:	d16e      	bne.n	8009d32 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8009c54:	2300      	movs	r3, #0
 8009c56:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f006 f871 	bl	800fd44 <USB_ReadDevAllOutEpInterrupt>
 8009c62:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009c64:	e062      	b.n	8009d2c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c68:	f003 0301 	and.w	r3, r3, #1
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d057      	beq.n	8009d20 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c76:	b2d2      	uxtb	r2, r2
 8009c78:	4611      	mov	r1, r2
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f006 f896 	bl	800fdac <USB_ReadDevOutEPInterrupt>
 8009c80:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	f003 0301 	and.w	r3, r3, #1
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d00c      	beq.n	8009ca6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8e:	015a      	lsls	r2, r3, #5
 8009c90:	69fb      	ldr	r3, [r7, #28]
 8009c92:	4413      	add	r3, r2
 8009c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c98:	461a      	mov	r2, r3
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009c9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 fe0b 	bl	800a8bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	f003 0308 	and.w	r3, r3, #8
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d00c      	beq.n	8009cca <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb2:	015a      	lsls	r2, r3, #5
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	4413      	add	r3, r2
 8009cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	2308      	movs	r3, #8
 8009cc0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009cc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 ff05 	bl	800aad4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	f003 0310 	and.w	r3, r3, #16
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d008      	beq.n	8009ce6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd6:	015a      	lsls	r2, r3, #5
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	4413      	add	r3, r2
 8009cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	2310      	movs	r3, #16
 8009ce4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	f003 0320 	and.w	r3, r3, #32
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d008      	beq.n	8009d02 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf2:	015a      	lsls	r2, r3, #5
 8009cf4:	69fb      	ldr	r3, [r7, #28]
 8009cf6:	4413      	add	r3, r2
 8009cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	2320      	movs	r3, #32
 8009d00:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d009      	beq.n	8009d20 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0e:	015a      	lsls	r2, r3, #5
 8009d10:	69fb      	ldr	r3, [r7, #28]
 8009d12:	4413      	add	r3, r2
 8009d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d18:	461a      	mov	r2, r3
 8009d1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009d1e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d22:	3301      	adds	r3, #1
 8009d24:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d28:	085b      	lsrs	r3, r3, #1
 8009d2a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d199      	bne.n	8009c66 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4618      	mov	r0, r3
 8009d38:	f005 fff1 	bl	800fd1e <USB_ReadInterrupts>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d46:	f040 80c0 	bne.w	8009eca <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f006 f812 	bl	800fd78 <USB_ReadDevAllInEpInterrupt>
 8009d54:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009d56:	2300      	movs	r3, #0
 8009d58:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009d5a:	e0b2      	b.n	8009ec2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d5e:	f003 0301 	and.w	r3, r3, #1
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	f000 80a7 	beq.w	8009eb6 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d6e:	b2d2      	uxtb	r2, r2
 8009d70:	4611      	mov	r1, r2
 8009d72:	4618      	mov	r0, r3
 8009d74:	f006 f838 	bl	800fde8 <USB_ReadDevInEPInterrupt>
 8009d78:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	f003 0301 	and.w	r3, r3, #1
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d057      	beq.n	8009e34 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d86:	f003 030f 	and.w	r3, r3, #15
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d90:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009d92:	69fb      	ldr	r3, [r7, #28]
 8009d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	43db      	mvns	r3, r3
 8009d9e:	69f9      	ldr	r1, [r7, #28]
 8009da0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009da4:	4013      	ands	r3, r2
 8009da6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009daa:	015a      	lsls	r2, r3, #5
 8009dac:	69fb      	ldr	r3, [r7, #28]
 8009dae:	4413      	add	r3, r2
 8009db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009db4:	461a      	mov	r2, r3
 8009db6:	2301      	movs	r3, #1
 8009db8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	691b      	ldr	r3, [r3, #16]
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d132      	bne.n	8009e28 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009dc2:	6879      	ldr	r1, [r7, #4]
 8009dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dc6:	4613      	mov	r3, r2
 8009dc8:	00db      	lsls	r3, r3, #3
 8009dca:	1a9b      	subs	r3, r3, r2
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	440b      	add	r3, r1
 8009dd0:	3348      	adds	r3, #72	; 0x48
 8009dd2:	6819      	ldr	r1, [r3, #0]
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dd8:	4613      	mov	r3, r2
 8009dda:	00db      	lsls	r3, r3, #3
 8009ddc:	1a9b      	subs	r3, r3, r2
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	4403      	add	r3, r0
 8009de2:	3344      	adds	r3, #68	; 0x44
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4419      	add	r1, r3
 8009de8:	6878      	ldr	r0, [r7, #4]
 8009dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dec:	4613      	mov	r3, r2
 8009dee:	00db      	lsls	r3, r3, #3
 8009df0:	1a9b      	subs	r3, r3, r2
 8009df2:	009b      	lsls	r3, r3, #2
 8009df4:	4403      	add	r3, r0
 8009df6:	3348      	adds	r3, #72	; 0x48
 8009df8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d113      	bne.n	8009e28 <HAL_PCD_IRQHandler+0x31c>
 8009e00:	6879      	ldr	r1, [r7, #4]
 8009e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e04:	4613      	mov	r3, r2
 8009e06:	00db      	lsls	r3, r3, #3
 8009e08:	1a9b      	subs	r3, r3, r2
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	440b      	add	r3, r1
 8009e0e:	3350      	adds	r3, #80	; 0x50
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d108      	bne.n	8009e28 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6818      	ldr	r0, [r3, #0]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009e20:	461a      	mov	r2, r3
 8009e22:	2101      	movs	r1, #1
 8009e24:	f006 f840 	bl	800fea8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2a:	b2db      	uxtb	r3, r3
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f00c fbeb 	bl	801660a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	f003 0308 	and.w	r3, r3, #8
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d008      	beq.n	8009e50 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e40:	015a      	lsls	r2, r3, #5
 8009e42:	69fb      	ldr	r3, [r7, #28]
 8009e44:	4413      	add	r3, r2
 8009e46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e4a:	461a      	mov	r2, r3
 8009e4c:	2308      	movs	r3, #8
 8009e4e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	f003 0310 	and.w	r3, r3, #16
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d008      	beq.n	8009e6c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5c:	015a      	lsls	r2, r3, #5
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	4413      	add	r3, r2
 8009e62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e66:	461a      	mov	r2, r3
 8009e68:	2310      	movs	r3, #16
 8009e6a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d008      	beq.n	8009e88 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e78:	015a      	lsls	r2, r3, #5
 8009e7a:	69fb      	ldr	r3, [r7, #28]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e82:	461a      	mov	r2, r3
 8009e84:	2340      	movs	r3, #64	; 0x40
 8009e86:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	f003 0302 	and.w	r3, r3, #2
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d008      	beq.n	8009ea4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e94:	015a      	lsls	r2, r3, #5
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	4413      	add	r3, r2
 8009e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	2302      	movs	r3, #2
 8009ea2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d003      	beq.n	8009eb6 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009eae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f000 fc75 	bl	800a7a0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb8:	3301      	adds	r3, #1
 8009eba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ebe:	085b      	lsrs	r3, r3, #1
 8009ec0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	f47f af49 	bne.w	8009d5c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f005 ff25 	bl	800fd1e <USB_ReadInterrupts>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009eda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ede:	d122      	bne.n	8009f26 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009ee0:	69fb      	ldr	r3, [r7, #28]
 8009ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	69fa      	ldr	r2, [r7, #28]
 8009eea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009eee:	f023 0301 	bic.w	r3, r3, #1
 8009ef2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d108      	bne.n	8009f10 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2200      	movs	r2, #0
 8009f02:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009f06:	2100      	movs	r1, #0
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f00c fded 	bl	8016ae8 <HAL_PCDEx_LPM_Callback>
 8009f0e:	e002      	b.n	8009f16 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f00c fbf1 	bl	80166f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	695a      	ldr	r2, [r3, #20]
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009f24:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f005 fef7 	bl	800fd1e <USB_ReadInterrupts>
 8009f30:	4603      	mov	r3, r0
 8009f32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f3a:	d112      	bne.n	8009f62 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009f3c:	69fb      	ldr	r3, [r7, #28]
 8009f3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f42:	689b      	ldr	r3, [r3, #8]
 8009f44:	f003 0301 	and.w	r3, r3, #1
 8009f48:	2b01      	cmp	r3, #1
 8009f4a:	d102      	bne.n	8009f52 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f00c fbad 	bl	80166ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	695a      	ldr	r2, [r3, #20]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009f60:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4618      	mov	r0, r3
 8009f68:	f005 fed9 	bl	800fd1e <USB_ReadInterrupts>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f76:	d121      	bne.n	8009fbc <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	695a      	ldr	r2, [r3, #20]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8009f86:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d111      	bne.n	8009fb6 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2201      	movs	r2, #1
 8009f96:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fa0:	089b      	lsrs	r3, r3, #2
 8009fa2:	f003 020f 	and.w	r2, r3, #15
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009fac:	2101      	movs	r1, #1
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f00c fd9a 	bl	8016ae8 <HAL_PCDEx_LPM_Callback>
 8009fb4:	e002      	b.n	8009fbc <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f00c fb78 	bl	80166ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f005 feac 	bl	800fd1e <USB_ReadInterrupts>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fd0:	f040 80c7 	bne.w	800a162 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009fd4:	69fb      	ldr	r3, [r7, #28]
 8009fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	69fa      	ldr	r2, [r7, #28]
 8009fde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fe2:	f023 0301 	bic.w	r3, r3, #1
 8009fe6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	2110      	movs	r1, #16
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f004 ff46 	bl	800ee80 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ff8:	e056      	b.n	800a0a8 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ffc:	015a      	lsls	r2, r3, #5
 8009ffe:	69fb      	ldr	r3, [r7, #28]
 800a000:	4413      	add	r3, r2
 800a002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a006:	461a      	mov	r2, r3
 800a008:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a00c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a00e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a010:	015a      	lsls	r2, r3, #5
 800a012:	69fb      	ldr	r3, [r7, #28]
 800a014:	4413      	add	r3, r2
 800a016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a01e:	0151      	lsls	r1, r2, #5
 800a020:	69fa      	ldr	r2, [r7, #28]
 800a022:	440a      	add	r2, r1
 800a024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a028:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a02c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a030:	015a      	lsls	r2, r3, #5
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	4413      	add	r3, r2
 800a036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a03e:	0151      	lsls	r1, r2, #5
 800a040:	69fa      	ldr	r2, [r7, #28]
 800a042:	440a      	add	r2, r1
 800a044:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a048:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a04c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a050:	015a      	lsls	r2, r3, #5
 800a052:	69fb      	ldr	r3, [r7, #28]
 800a054:	4413      	add	r3, r2
 800a056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a05a:	461a      	mov	r2, r3
 800a05c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a060:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a064:	015a      	lsls	r2, r3, #5
 800a066:	69fb      	ldr	r3, [r7, #28]
 800a068:	4413      	add	r3, r2
 800a06a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a072:	0151      	lsls	r1, r2, #5
 800a074:	69fa      	ldr	r2, [r7, #28]
 800a076:	440a      	add	r2, r1
 800a078:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a07c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a080:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a084:	015a      	lsls	r2, r3, #5
 800a086:	69fb      	ldr	r3, [r7, #28]
 800a088:	4413      	add	r3, r2
 800a08a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a092:	0151      	lsls	r1, r2, #5
 800a094:	69fa      	ldr	r2, [r7, #28]
 800a096:	440a      	add	r2, r1
 800a098:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a09c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a0a0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d3a3      	bcc.n	8009ffa <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a0b2:	69fb      	ldr	r3, [r7, #28]
 800a0b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0b8:	69db      	ldr	r3, [r3, #28]
 800a0ba:	69fa      	ldr	r2, [r7, #28]
 800a0bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0c0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a0c4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d016      	beq.n	800a0fc <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a0ce:	69fb      	ldr	r3, [r7, #28]
 800a0d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0d8:	69fa      	ldr	r2, [r7, #28]
 800a0da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0de:	f043 030b 	orr.w	r3, r3, #11
 800a0e2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a0e6:	69fb      	ldr	r3, [r7, #28]
 800a0e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0ee:	69fa      	ldr	r2, [r7, #28]
 800a0f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0f4:	f043 030b 	orr.w	r3, r3, #11
 800a0f8:	6453      	str	r3, [r2, #68]	; 0x44
 800a0fa:	e015      	b.n	800a128 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a0fc:	69fb      	ldr	r3, [r7, #28]
 800a0fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a102:	695b      	ldr	r3, [r3, #20]
 800a104:	69fa      	ldr	r2, [r7, #28]
 800a106:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a10a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a10e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800a112:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a114:	69fb      	ldr	r3, [r7, #28]
 800a116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a11a:	691b      	ldr	r3, [r3, #16]
 800a11c:	69fa      	ldr	r2, [r7, #28]
 800a11e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a122:	f043 030b 	orr.w	r3, r3, #11
 800a126:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a128:	69fb      	ldr	r3, [r7, #28]
 800a12a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	69fa      	ldr	r2, [r7, #28]
 800a132:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a136:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a13a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6818      	ldr	r0, [r3, #0]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	691b      	ldr	r3, [r3, #16]
 800a144:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a14c:	461a      	mov	r2, r3
 800a14e:	f005 feab 	bl	800fea8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	695a      	ldr	r2, [r3, #20]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a160:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4618      	mov	r0, r3
 800a168:	f005 fdd9 	bl	800fd1e <USB_ReadInterrupts>
 800a16c:	4603      	mov	r3, r0
 800a16e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a172:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a176:	d124      	bne.n	800a1c2 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4618      	mov	r0, r3
 800a17e:	f005 fe6f 	bl	800fe60 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4618      	mov	r0, r3
 800a188:	f004 fed7 	bl	800ef3a <USB_GetDevSpeed>
 800a18c:	4603      	mov	r3, r0
 800a18e:	461a      	mov	r2, r3
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681c      	ldr	r4, [r3, #0]
 800a198:	f000 fe94 	bl	800aec4 <HAL_RCC_GetHCLKFreq>
 800a19c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	4620      	mov	r0, r4
 800a1a8:	f004 fbfc 	bl	800e9a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f00c fa54 	bl	801665a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	695a      	ldr	r2, [r3, #20]
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a1c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f005 fda9 	bl	800fd1e <USB_ReadInterrupts>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	f003 0308 	and.w	r3, r3, #8
 800a1d2:	2b08      	cmp	r3, #8
 800a1d4:	d10a      	bne.n	800a1ec <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f00c fa31 	bl	801663e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	695a      	ldr	r2, [r3, #20]
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f002 0208 	and.w	r2, r2, #8
 800a1ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f005 fd94 	bl	800fd1e <USB_ReadInterrupts>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a1fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a200:	d10f      	bne.n	800a222 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a202:	2300      	movs	r3, #0
 800a204:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a208:	b2db      	uxtb	r3, r3
 800a20a:	4619      	mov	r1, r3
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f00c fa93 	bl	8016738 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	695a      	ldr	r2, [r3, #20]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a220:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4618      	mov	r0, r3
 800a228:	f005 fd79 	bl	800fd1e <USB_ReadInterrupts>
 800a22c:	4603      	mov	r3, r0
 800a22e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a232:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a236:	d10f      	bne.n	800a258 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a238:	2300      	movs	r3, #0
 800a23a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23e:	b2db      	uxtb	r3, r3
 800a240:	4619      	mov	r1, r3
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f00c fa66 	bl	8016714 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	695a      	ldr	r2, [r3, #20]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a256:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4618      	mov	r0, r3
 800a25e:	f005 fd5e 	bl	800fd1e <USB_ReadInterrupts>
 800a262:	4603      	mov	r3, r0
 800a264:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a26c:	d10a      	bne.n	800a284 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	f00c fa74 	bl	801675c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	695a      	ldr	r2, [r3, #20]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a282:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4618      	mov	r0, r3
 800a28a:	f005 fd48 	bl	800fd1e <USB_ReadInterrupts>
 800a28e:	4603      	mov	r3, r0
 800a290:	f003 0304 	and.w	r3, r3, #4
 800a294:	2b04      	cmp	r3, #4
 800a296:	d115      	bne.n	800a2c4 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a2a0:	69bb      	ldr	r3, [r7, #24]
 800a2a2:	f003 0304 	and.w	r3, r3, #4
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d002      	beq.n	800a2b0 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f00c fa64 	bl	8016778 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	6859      	ldr	r1, [r3, #4]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	69ba      	ldr	r2, [r7, #24]
 800a2bc:	430a      	orrs	r2, r1
 800a2be:	605a      	str	r2, [r3, #4]
 800a2c0:	e000      	b.n	800a2c4 <HAL_PCD_IRQHandler+0x7b8>
      return;
 800a2c2:	bf00      	nop
    }
  }
}
 800a2c4:	3734      	adds	r7, #52	; 0x34
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd90      	pop	{r4, r7, pc}

0800a2ca <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b082      	sub	sp, #8
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d101      	bne.n	800a2e4 <HAL_PCD_SetAddress+0x1a>
 800a2e0:	2302      	movs	r3, #2
 800a2e2:	e013      	b.n	800a30c <HAL_PCD_SetAddress+0x42>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	78fa      	ldrb	r2, [r7, #3]
 800a2f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	78fa      	ldrb	r2, [r7, #3]
 800a2fa:	4611      	mov	r1, r2
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	f005 fca6 	bl	800fc4e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2200      	movs	r2, #0
 800a306:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a30a:	2300      	movs	r3, #0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3708      	adds	r7, #8
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	4608      	mov	r0, r1
 800a31e:	4611      	mov	r1, r2
 800a320:	461a      	mov	r2, r3
 800a322:	4603      	mov	r3, r0
 800a324:	70fb      	strb	r3, [r7, #3]
 800a326:	460b      	mov	r3, r1
 800a328:	803b      	strh	r3, [r7, #0]
 800a32a:	4613      	mov	r3, r2
 800a32c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a32e:	2300      	movs	r3, #0
 800a330:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a332:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a336:	2b00      	cmp	r3, #0
 800a338:	da0f      	bge.n	800a35a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a33a:	78fb      	ldrb	r3, [r7, #3]
 800a33c:	f003 020f 	and.w	r2, r3, #15
 800a340:	4613      	mov	r3, r2
 800a342:	00db      	lsls	r3, r3, #3
 800a344:	1a9b      	subs	r3, r3, r2
 800a346:	009b      	lsls	r3, r3, #2
 800a348:	3338      	adds	r3, #56	; 0x38
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	4413      	add	r3, r2
 800a34e:	3304      	adds	r3, #4
 800a350:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2201      	movs	r2, #1
 800a356:	705a      	strb	r2, [r3, #1]
 800a358:	e00f      	b.n	800a37a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a35a:	78fb      	ldrb	r3, [r7, #3]
 800a35c:	f003 020f 	and.w	r2, r3, #15
 800a360:	4613      	mov	r3, r2
 800a362:	00db      	lsls	r3, r3, #3
 800a364:	1a9b      	subs	r3, r3, r2
 800a366:	009b      	lsls	r3, r3, #2
 800a368:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	4413      	add	r3, r2
 800a370:	3304      	adds	r3, #4
 800a372:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2200      	movs	r2, #0
 800a378:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a37a:	78fb      	ldrb	r3, [r7, #3]
 800a37c:	f003 030f 	and.w	r3, r3, #15
 800a380:	b2da      	uxtb	r2, r3
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a386:	883a      	ldrh	r2, [r7, #0]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	78ba      	ldrb	r2, [r7, #2]
 800a390:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	785b      	ldrb	r3, [r3, #1]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d004      	beq.n	800a3a4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	781b      	ldrb	r3, [r3, #0]
 800a39e:	b29a      	uxth	r2, r3
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a3a4:	78bb      	ldrb	r3, [r7, #2]
 800a3a6:	2b02      	cmp	r3, #2
 800a3a8:	d102      	bne.n	800a3b0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a3b6:	2b01      	cmp	r3, #1
 800a3b8:	d101      	bne.n	800a3be <HAL_PCD_EP_Open+0xaa>
 800a3ba:	2302      	movs	r3, #2
 800a3bc:	e00e      	b.n	800a3dc <HAL_PCD_EP_Open+0xc8>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2201      	movs	r2, #1
 800a3c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	68f9      	ldr	r1, [r7, #12]
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	f004 fdd9 	bl	800ef84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800a3da:	7afb      	ldrb	r3, [r7, #11]
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3710      	adds	r7, #16
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a3f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	da0f      	bge.n	800a418 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a3f8:	78fb      	ldrb	r3, [r7, #3]
 800a3fa:	f003 020f 	and.w	r2, r3, #15
 800a3fe:	4613      	mov	r3, r2
 800a400:	00db      	lsls	r3, r3, #3
 800a402:	1a9b      	subs	r3, r3, r2
 800a404:	009b      	lsls	r3, r3, #2
 800a406:	3338      	adds	r3, #56	; 0x38
 800a408:	687a      	ldr	r2, [r7, #4]
 800a40a:	4413      	add	r3, r2
 800a40c:	3304      	adds	r3, #4
 800a40e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2201      	movs	r2, #1
 800a414:	705a      	strb	r2, [r3, #1]
 800a416:	e00f      	b.n	800a438 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a418:	78fb      	ldrb	r3, [r7, #3]
 800a41a:	f003 020f 	and.w	r2, r3, #15
 800a41e:	4613      	mov	r3, r2
 800a420:	00db      	lsls	r3, r3, #3
 800a422:	1a9b      	subs	r3, r3, r2
 800a424:	009b      	lsls	r3, r3, #2
 800a426:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a42a:	687a      	ldr	r2, [r7, #4]
 800a42c:	4413      	add	r3, r2
 800a42e:	3304      	adds	r3, #4
 800a430:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2200      	movs	r2, #0
 800a436:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a438:	78fb      	ldrb	r3, [r7, #3]
 800a43a:	f003 030f 	and.w	r3, r3, #15
 800a43e:	b2da      	uxtb	r2, r3
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	d101      	bne.n	800a452 <HAL_PCD_EP_Close+0x6e>
 800a44e:	2302      	movs	r3, #2
 800a450:	e00e      	b.n	800a470 <HAL_PCD_EP_Close+0x8c>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2201      	movs	r2, #1
 800a456:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	68f9      	ldr	r1, [r7, #12]
 800a460:	4618      	mov	r0, r3
 800a462:	f004 fe17 	bl	800f094 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2200      	movs	r2, #0
 800a46a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800a46e:	2300      	movs	r3, #0
}
 800a470:	4618      	mov	r0, r3
 800a472:	3710      	adds	r7, #16
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b086      	sub	sp, #24
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	607a      	str	r2, [r7, #4]
 800a482:	603b      	str	r3, [r7, #0]
 800a484:	460b      	mov	r3, r1
 800a486:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a488:	7afb      	ldrb	r3, [r7, #11]
 800a48a:	f003 020f 	and.w	r2, r3, #15
 800a48e:	4613      	mov	r3, r2
 800a490:	00db      	lsls	r3, r3, #3
 800a492:	1a9b      	subs	r3, r3, r2
 800a494:	009b      	lsls	r3, r3, #2
 800a496:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a49a:	68fa      	ldr	r2, [r7, #12]
 800a49c:	4413      	add	r3, r2
 800a49e:	3304      	adds	r3, #4
 800a4a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a4a2:	697b      	ldr	r3, [r7, #20]
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	683a      	ldr	r2, [r7, #0]
 800a4ac:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a4ba:	7afb      	ldrb	r3, [r7, #11]
 800a4bc:	f003 030f 	and.w	r3, r3, #15
 800a4c0:	b2da      	uxtb	r2, r3
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	691b      	ldr	r3, [r3, #16]
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	d102      	bne.n	800a4d4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a4d4:	7afb      	ldrb	r3, [r7, #11]
 800a4d6:	f003 030f 	and.w	r3, r3, #15
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d109      	bne.n	800a4f2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	6818      	ldr	r0, [r3, #0]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	691b      	ldr	r3, [r3, #16]
 800a4e6:	b2db      	uxtb	r3, r3
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	6979      	ldr	r1, [r7, #20]
 800a4ec:	f005 f8f2 	bl	800f6d4 <USB_EP0StartXfer>
 800a4f0:	e008      	b.n	800a504 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	6818      	ldr	r0, [r3, #0]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	691b      	ldr	r3, [r3, #16]
 800a4fa:	b2db      	uxtb	r3, r3
 800a4fc:	461a      	mov	r2, r3
 800a4fe:	6979      	ldr	r1, [r7, #20]
 800a500:	f004 fea4 	bl	800f24c <USB_EPStartXfer>
  }

  return HAL_OK;
 800a504:	2300      	movs	r3, #0
}
 800a506:	4618      	mov	r0, r3
 800a508:	3718      	adds	r7, #24
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a50e:	b480      	push	{r7}
 800a510:	b083      	sub	sp, #12
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
 800a516:	460b      	mov	r3, r1
 800a518:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a51a:	78fb      	ldrb	r3, [r7, #3]
 800a51c:	f003 020f 	and.w	r2, r3, #15
 800a520:	6879      	ldr	r1, [r7, #4]
 800a522:	4613      	mov	r3, r2
 800a524:	00db      	lsls	r3, r3, #3
 800a526:	1a9b      	subs	r3, r3, r2
 800a528:	009b      	lsls	r3, r3, #2
 800a52a:	440b      	add	r3, r1
 800a52c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a530:	681b      	ldr	r3, [r3, #0]
}
 800a532:	4618      	mov	r0, r3
 800a534:	370c      	adds	r7, #12
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr

0800a53e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b086      	sub	sp, #24
 800a542:	af00      	add	r7, sp, #0
 800a544:	60f8      	str	r0, [r7, #12]
 800a546:	607a      	str	r2, [r7, #4]
 800a548:	603b      	str	r3, [r7, #0]
 800a54a:	460b      	mov	r3, r1
 800a54c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a54e:	7afb      	ldrb	r3, [r7, #11]
 800a550:	f003 020f 	and.w	r2, r3, #15
 800a554:	4613      	mov	r3, r2
 800a556:	00db      	lsls	r3, r3, #3
 800a558:	1a9b      	subs	r3, r3, r2
 800a55a:	009b      	lsls	r3, r3, #2
 800a55c:	3338      	adds	r3, #56	; 0x38
 800a55e:	68fa      	ldr	r2, [r7, #12]
 800a560:	4413      	add	r3, r2
 800a562:	3304      	adds	r3, #4
 800a564:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	687a      	ldr	r2, [r7, #4]
 800a56a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	683a      	ldr	r2, [r7, #0]
 800a570:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	2200      	movs	r2, #0
 800a576:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	2201      	movs	r2, #1
 800a57c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a57e:	7afb      	ldrb	r3, [r7, #11]
 800a580:	f003 030f 	and.w	r3, r3, #15
 800a584:	b2da      	uxtb	r2, r3
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	691b      	ldr	r3, [r3, #16]
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d102      	bne.n	800a598 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a592:	687a      	ldr	r2, [r7, #4]
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a598:	7afb      	ldrb	r3, [r7, #11]
 800a59a:	f003 030f 	and.w	r3, r3, #15
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d109      	bne.n	800a5b6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	6818      	ldr	r0, [r3, #0]
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	691b      	ldr	r3, [r3, #16]
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	461a      	mov	r2, r3
 800a5ae:	6979      	ldr	r1, [r7, #20]
 800a5b0:	f005 f890 	bl	800f6d4 <USB_EP0StartXfer>
 800a5b4:	e008      	b.n	800a5c8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	6818      	ldr	r0, [r3, #0]
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	691b      	ldr	r3, [r3, #16]
 800a5be:	b2db      	uxtb	r3, r3
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	6979      	ldr	r1, [r7, #20]
 800a5c4:	f004 fe42 	bl	800f24c <USB_EPStartXfer>
  }

  return HAL_OK;
 800a5c8:	2300      	movs	r3, #0
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3718      	adds	r7, #24
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}

0800a5d2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b084      	sub	sp, #16
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
 800a5da:	460b      	mov	r3, r1
 800a5dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a5de:	78fb      	ldrb	r3, [r7, #3]
 800a5e0:	f003 020f 	and.w	r2, r3, #15
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d901      	bls.n	800a5f0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	e050      	b.n	800a692 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a5f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	da0f      	bge.n	800a618 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a5f8:	78fb      	ldrb	r3, [r7, #3]
 800a5fa:	f003 020f 	and.w	r2, r3, #15
 800a5fe:	4613      	mov	r3, r2
 800a600:	00db      	lsls	r3, r3, #3
 800a602:	1a9b      	subs	r3, r3, r2
 800a604:	009b      	lsls	r3, r3, #2
 800a606:	3338      	adds	r3, #56	; 0x38
 800a608:	687a      	ldr	r2, [r7, #4]
 800a60a:	4413      	add	r3, r2
 800a60c:	3304      	adds	r3, #4
 800a60e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2201      	movs	r2, #1
 800a614:	705a      	strb	r2, [r3, #1]
 800a616:	e00d      	b.n	800a634 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a618:	78fa      	ldrb	r2, [r7, #3]
 800a61a:	4613      	mov	r3, r2
 800a61c:	00db      	lsls	r3, r3, #3
 800a61e:	1a9b      	subs	r3, r3, r2
 800a620:	009b      	lsls	r3, r3, #2
 800a622:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a626:	687a      	ldr	r2, [r7, #4]
 800a628:	4413      	add	r3, r2
 800a62a:	3304      	adds	r3, #4
 800a62c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2200      	movs	r2, #0
 800a632:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2201      	movs	r2, #1
 800a638:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a63a:	78fb      	ldrb	r3, [r7, #3]
 800a63c:	f003 030f 	and.w	r3, r3, #15
 800a640:	b2da      	uxtb	r2, r3
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d101      	bne.n	800a654 <HAL_PCD_EP_SetStall+0x82>
 800a650:	2302      	movs	r3, #2
 800a652:	e01e      	b.n	800a692 <HAL_PCD_EP_SetStall+0xc0>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2201      	movs	r2, #1
 800a658:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	68f9      	ldr	r1, [r7, #12]
 800a662:	4618      	mov	r0, r3
 800a664:	f005 fa1f 	bl	800faa6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a668:	78fb      	ldrb	r3, [r7, #3]
 800a66a:	f003 030f 	and.w	r3, r3, #15
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d10a      	bne.n	800a688 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6818      	ldr	r0, [r3, #0]
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	691b      	ldr	r3, [r3, #16]
 800a67a:	b2d9      	uxtb	r1, r3
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a682:	461a      	mov	r2, r3
 800a684:	f005 fc10 	bl	800fea8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2200      	movs	r2, #0
 800a68c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a690:	2300      	movs	r3, #0
}
 800a692:	4618      	mov	r0, r3
 800a694:	3710      	adds	r7, #16
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}

0800a69a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a69a:	b580      	push	{r7, lr}
 800a69c:	b084      	sub	sp, #16
 800a69e:	af00      	add	r7, sp, #0
 800a6a0:	6078      	str	r0, [r7, #4]
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a6a6:	78fb      	ldrb	r3, [r7, #3]
 800a6a8:	f003 020f 	and.w	r2, r3, #15
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d901      	bls.n	800a6b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	e042      	b.n	800a73e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a6b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	da0f      	bge.n	800a6e0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a6c0:	78fb      	ldrb	r3, [r7, #3]
 800a6c2:	f003 020f 	and.w	r2, r3, #15
 800a6c6:	4613      	mov	r3, r2
 800a6c8:	00db      	lsls	r3, r3, #3
 800a6ca:	1a9b      	subs	r3, r3, r2
 800a6cc:	009b      	lsls	r3, r3, #2
 800a6ce:	3338      	adds	r3, #56	; 0x38
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	4413      	add	r3, r2
 800a6d4:	3304      	adds	r3, #4
 800a6d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2201      	movs	r2, #1
 800a6dc:	705a      	strb	r2, [r3, #1]
 800a6de:	e00f      	b.n	800a700 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a6e0:	78fb      	ldrb	r3, [r7, #3]
 800a6e2:	f003 020f 	and.w	r2, r3, #15
 800a6e6:	4613      	mov	r3, r2
 800a6e8:	00db      	lsls	r3, r3, #3
 800a6ea:	1a9b      	subs	r3, r3, r2
 800a6ec:	009b      	lsls	r3, r3, #2
 800a6ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	4413      	add	r3, r2
 800a6f6:	3304      	adds	r3, #4
 800a6f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	2200      	movs	r2, #0
 800a704:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a706:	78fb      	ldrb	r3, [r7, #3]
 800a708:	f003 030f 	and.w	r3, r3, #15
 800a70c:	b2da      	uxtb	r2, r3
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d101      	bne.n	800a720 <HAL_PCD_EP_ClrStall+0x86>
 800a71c:	2302      	movs	r3, #2
 800a71e:	e00e      	b.n	800a73e <HAL_PCD_EP_ClrStall+0xa4>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2201      	movs	r2, #1
 800a724:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	68f9      	ldr	r1, [r7, #12]
 800a72e:	4618      	mov	r0, r3
 800a730:	f005 fa27 	bl	800fb82 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2200      	movs	r2, #0
 800a738:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a73c:	2300      	movs	r3, #0
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3710      	adds	r7, #16
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}

0800a746 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a746:	b580      	push	{r7, lr}
 800a748:	b082      	sub	sp, #8
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
 800a74e:	460b      	mov	r3, r1
 800a750:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a758:	2b01      	cmp	r3, #1
 800a75a:	d101      	bne.n	800a760 <HAL_PCD_EP_Flush+0x1a>
 800a75c:	2302      	movs	r3, #2
 800a75e:	e01b      	b.n	800a798 <HAL_PCD_EP_Flush+0x52>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2201      	movs	r2, #1
 800a764:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 800a768:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	da09      	bge.n	800a784 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	78fb      	ldrb	r3, [r7, #3]
 800a776:	f003 030f 	and.w	r3, r3, #15
 800a77a:	4619      	mov	r1, r3
 800a77c:	4610      	mov	r0, r2
 800a77e:	f004 fb7f 	bl	800ee80 <USB_FlushTxFifo>
 800a782:	e004      	b.n	800a78e <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4618      	mov	r0, r3
 800a78a:	f004 fb9d 	bl	800eec8 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a796:	2300      	movs	r3, #0
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3708      	adds	r7, #8
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b08a      	sub	sp, #40	; 0x28
 800a7a4:	af02      	add	r7, sp, #8
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a7b4:	683a      	ldr	r2, [r7, #0]
 800a7b6:	4613      	mov	r3, r2
 800a7b8:	00db      	lsls	r3, r3, #3
 800a7ba:	1a9b      	subs	r3, r3, r2
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	3338      	adds	r3, #56	; 0x38
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	4413      	add	r3, r2
 800a7c4:	3304      	adds	r3, #4
 800a7c6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	699a      	ldr	r2, [r3, #24]
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	695b      	ldr	r3, [r3, #20]
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d901      	bls.n	800a7d8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	e06c      	b.n	800a8b2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	695a      	ldr	r2, [r3, #20]
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	699b      	ldr	r3, [r3, #24]
 800a7e0:	1ad3      	subs	r3, r2, r3
 800a7e2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	689b      	ldr	r3, [r3, #8]
 800a7e8:	69fa      	ldr	r2, [r7, #28]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d902      	bls.n	800a7f4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	689b      	ldr	r3, [r3, #8]
 800a7f2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a7f4:	69fb      	ldr	r3, [r7, #28]
 800a7f6:	3303      	adds	r3, #3
 800a7f8:	089b      	lsrs	r3, r3, #2
 800a7fa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a7fc:	e02b      	b.n	800a856 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	695a      	ldr	r2, [r3, #20]
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	699b      	ldr	r3, [r3, #24]
 800a806:	1ad3      	subs	r3, r2, r3
 800a808:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	689b      	ldr	r3, [r3, #8]
 800a80e:	69fa      	ldr	r2, [r7, #28]
 800a810:	429a      	cmp	r2, r3
 800a812:	d902      	bls.n	800a81a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	689b      	ldr	r3, [r3, #8]
 800a818:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a81a:	69fb      	ldr	r3, [r7, #28]
 800a81c:	3303      	adds	r3, #3
 800a81e:	089b      	lsrs	r3, r3, #2
 800a820:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	68d9      	ldr	r1, [r3, #12]
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	b2da      	uxtb	r2, r3
 800a82a:	69fb      	ldr	r3, [r7, #28]
 800a82c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a832:	b2db      	uxtb	r3, r3
 800a834:	9300      	str	r3, [sp, #0]
 800a836:	4603      	mov	r3, r0
 800a838:	6978      	ldr	r0, [r7, #20]
 800a83a:	f005 f89e 	bl	800f97a <USB_WritePacket>

    ep->xfer_buff  += len;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	68da      	ldr	r2, [r3, #12]
 800a842:	69fb      	ldr	r3, [r7, #28]
 800a844:	441a      	add	r2, r3
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	699a      	ldr	r2, [r3, #24]
 800a84e:	69fb      	ldr	r3, [r7, #28]
 800a850:	441a      	add	r2, r3
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	015a      	lsls	r2, r3, #5
 800a85a:	693b      	ldr	r3, [r7, #16]
 800a85c:	4413      	add	r3, r2
 800a85e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a862:	699b      	ldr	r3, [r3, #24]
 800a864:	b29b      	uxth	r3, r3
 800a866:	69ba      	ldr	r2, [r7, #24]
 800a868:	429a      	cmp	r2, r3
 800a86a:	d809      	bhi.n	800a880 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	699a      	ldr	r2, [r3, #24]
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a874:	429a      	cmp	r2, r3
 800a876:	d203      	bcs.n	800a880 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	695b      	ldr	r3, [r3, #20]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d1be      	bne.n	800a7fe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	695a      	ldr	r2, [r3, #20]
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	699b      	ldr	r3, [r3, #24]
 800a888:	429a      	cmp	r2, r3
 800a88a:	d811      	bhi.n	800a8b0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	f003 030f 	and.w	r3, r3, #15
 800a892:	2201      	movs	r2, #1
 800a894:	fa02 f303 	lsl.w	r3, r2, r3
 800a898:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	43db      	mvns	r3, r3
 800a8a6:	6939      	ldr	r1, [r7, #16]
 800a8a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8ac:	4013      	ands	r3, r2
 800a8ae:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a8b0:	2300      	movs	r3, #0
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3720      	adds	r7, #32
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
	...

0800a8bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b086      	sub	sp, #24
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
 800a8c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a8d0:	697b      	ldr	r3, [r7, #20]
 800a8d2:	333c      	adds	r3, #60	; 0x3c
 800a8d4:	3304      	adds	r3, #4
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	015a      	lsls	r2, r3, #5
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	4413      	add	r3, r2
 800a8e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8e6:	689b      	ldr	r3, [r3, #8]
 800a8e8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	691b      	ldr	r3, [r3, #16]
 800a8ee:	2b01      	cmp	r3, #1
 800a8f0:	f040 80a0 	bne.w	800aa34 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	f003 0308 	and.w	r3, r3, #8
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d015      	beq.n	800a92a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	4a72      	ldr	r2, [pc, #456]	; (800aacc <PCD_EP_OutXfrComplete_int+0x210>)
 800a902:	4293      	cmp	r3, r2
 800a904:	f240 80dd 	bls.w	800aac2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f000 80d7 	beq.w	800aac2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	015a      	lsls	r2, r3, #5
 800a918:	693b      	ldr	r3, [r7, #16]
 800a91a:	4413      	add	r3, r2
 800a91c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a920:	461a      	mov	r2, r3
 800a922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a926:	6093      	str	r3, [r2, #8]
 800a928:	e0cb      	b.n	800aac2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	f003 0320 	and.w	r3, r3, #32
 800a930:	2b00      	cmp	r3, #0
 800a932:	d009      	beq.n	800a948 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	015a      	lsls	r2, r3, #5
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	4413      	add	r3, r2
 800a93c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a940:	461a      	mov	r2, r3
 800a942:	2320      	movs	r3, #32
 800a944:	6093      	str	r3, [r2, #8]
 800a946:	e0bc      	b.n	800aac2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a94e:	2b00      	cmp	r3, #0
 800a950:	f040 80b7 	bne.w	800aac2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	4a5d      	ldr	r2, [pc, #372]	; (800aacc <PCD_EP_OutXfrComplete_int+0x210>)
 800a958:	4293      	cmp	r3, r2
 800a95a:	d90f      	bls.n	800a97c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a962:	2b00      	cmp	r3, #0
 800a964:	d00a      	beq.n	800a97c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	015a      	lsls	r2, r3, #5
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	4413      	add	r3, r2
 800a96e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a972:	461a      	mov	r2, r3
 800a974:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a978:	6093      	str	r3, [r2, #8]
 800a97a:	e0a2      	b.n	800aac2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800a97c:	6879      	ldr	r1, [r7, #4]
 800a97e:	683a      	ldr	r2, [r7, #0]
 800a980:	4613      	mov	r3, r2
 800a982:	00db      	lsls	r3, r3, #3
 800a984:	1a9b      	subs	r3, r3, r2
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	440b      	add	r3, r1
 800a98a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a98e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	0159      	lsls	r1, r3, #5
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	440b      	add	r3, r1
 800a998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a99c:	691b      	ldr	r3, [r3, #16]
 800a99e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800a9a2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	683a      	ldr	r2, [r7, #0]
 800a9a8:	4613      	mov	r3, r2
 800a9aa:	00db      	lsls	r3, r3, #3
 800a9ac:	1a9b      	subs	r3, r3, r2
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	4403      	add	r3, r0
 800a9b2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a9b6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800a9b8:	6879      	ldr	r1, [r7, #4]
 800a9ba:	683a      	ldr	r2, [r7, #0]
 800a9bc:	4613      	mov	r3, r2
 800a9be:	00db      	lsls	r3, r3, #3
 800a9c0:	1a9b      	subs	r3, r3, r2
 800a9c2:	009b      	lsls	r3, r3, #2
 800a9c4:	440b      	add	r3, r1
 800a9c6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a9ca:	6819      	ldr	r1, [r3, #0]
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	683a      	ldr	r2, [r7, #0]
 800a9d0:	4613      	mov	r3, r2
 800a9d2:	00db      	lsls	r3, r3, #3
 800a9d4:	1a9b      	subs	r3, r3, r2
 800a9d6:	009b      	lsls	r3, r3, #2
 800a9d8:	4403      	add	r3, r0
 800a9da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	4419      	add	r1, r3
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	683a      	ldr	r2, [r7, #0]
 800a9e6:	4613      	mov	r3, r2
 800a9e8:	00db      	lsls	r3, r3, #3
 800a9ea:	1a9b      	subs	r3, r3, r2
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	4403      	add	r3, r0
 800a9f0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a9f4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d114      	bne.n	800aa26 <PCD_EP_OutXfrComplete_int+0x16a>
 800a9fc:	6879      	ldr	r1, [r7, #4]
 800a9fe:	683a      	ldr	r2, [r7, #0]
 800aa00:	4613      	mov	r3, r2
 800aa02:	00db      	lsls	r3, r3, #3
 800aa04:	1a9b      	subs	r3, r3, r2
 800aa06:	009b      	lsls	r3, r3, #2
 800aa08:	440b      	add	r3, r1
 800aa0a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d108      	bne.n	800aa26 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6818      	ldr	r0, [r3, #0]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800aa1e:	461a      	mov	r2, r3
 800aa20:	2101      	movs	r1, #1
 800aa22:	f005 fa41 	bl	800fea8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	f00b fdd1 	bl	80165d4 <HAL_PCD_DataOutStageCallback>
 800aa32:	e046      	b.n	800aac2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	4a26      	ldr	r2, [pc, #152]	; (800aad0 <PCD_EP_OutXfrComplete_int+0x214>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d124      	bne.n	800aa86 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d00a      	beq.n	800aa5c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	015a      	lsls	r2, r3, #5
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	4413      	add	r3, r2
 800aa4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa52:	461a      	mov	r2, r3
 800aa54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa58:	6093      	str	r3, [r2, #8]
 800aa5a:	e032      	b.n	800aac2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	f003 0320 	and.w	r3, r3, #32
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d008      	beq.n	800aa78 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	015a      	lsls	r2, r3, #5
 800aa6a:	693b      	ldr	r3, [r7, #16]
 800aa6c:	4413      	add	r3, r2
 800aa6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa72:	461a      	mov	r2, r3
 800aa74:	2320      	movs	r3, #32
 800aa76:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f00b fda8 	bl	80165d4 <HAL_PCD_DataOutStageCallback>
 800aa84:	e01d      	b.n	800aac2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d114      	bne.n	800aab6 <PCD_EP_OutXfrComplete_int+0x1fa>
 800aa8c:	6879      	ldr	r1, [r7, #4]
 800aa8e:	683a      	ldr	r2, [r7, #0]
 800aa90:	4613      	mov	r3, r2
 800aa92:	00db      	lsls	r3, r3, #3
 800aa94:	1a9b      	subs	r3, r3, r2
 800aa96:	009b      	lsls	r3, r3, #2
 800aa98:	440b      	add	r3, r1
 800aa9a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d108      	bne.n	800aab6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6818      	ldr	r0, [r3, #0]
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800aaae:	461a      	mov	r2, r3
 800aab0:	2100      	movs	r1, #0
 800aab2:	f005 f9f9 	bl	800fea8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	b2db      	uxtb	r3, r3
 800aaba:	4619      	mov	r1, r3
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f00b fd89 	bl	80165d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800aac2:	2300      	movs	r3, #0
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3718      	adds	r7, #24
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}
 800aacc:	4f54300a 	.word	0x4f54300a
 800aad0:	4f54310a 	.word	0x4f54310a

0800aad4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b086      	sub	sp, #24
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	333c      	adds	r3, #60	; 0x3c
 800aaec:	3304      	adds	r3, #4
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	015a      	lsls	r2, r3, #5
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	4413      	add	r3, r2
 800aafa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aafe:	689b      	ldr	r3, [r3, #8]
 800ab00:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	4a15      	ldr	r2, [pc, #84]	; (800ab5c <PCD_EP_OutSetupPacket_int+0x88>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d90e      	bls.n	800ab28 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d009      	beq.n	800ab28 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	015a      	lsls	r2, r3, #5
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	4413      	add	r3, r2
 800ab1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab20:	461a      	mov	r2, r3
 800ab22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab26:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f00b fd41 	bl	80165b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	4a0a      	ldr	r2, [pc, #40]	; (800ab5c <PCD_EP_OutSetupPacket_int+0x88>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d90c      	bls.n	800ab50 <PCD_EP_OutSetupPacket_int+0x7c>
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	691b      	ldr	r3, [r3, #16]
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	d108      	bne.n	800ab50 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6818      	ldr	r0, [r3, #0]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ab48:	461a      	mov	r2, r3
 800ab4a:	2101      	movs	r1, #1
 800ab4c:	f005 f9ac 	bl	800fea8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800ab50:	2300      	movs	r3, #0
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3718      	adds	r7, #24
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
 800ab5a:	bf00      	nop
 800ab5c:	4f54300a 	.word	0x4f54300a

0800ab60 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b085      	sub	sp, #20
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	460b      	mov	r3, r1
 800ab6a:	70fb      	strb	r3, [r7, #3]
 800ab6c:	4613      	mov	r3, r2
 800ab6e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab76:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800ab78:	78fb      	ldrb	r3, [r7, #3]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d107      	bne.n	800ab8e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800ab7e:	883b      	ldrh	r3, [r7, #0]
 800ab80:	0419      	lsls	r1, r3, #16
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	68ba      	ldr	r2, [r7, #8]
 800ab88:	430a      	orrs	r2, r1
 800ab8a:	629a      	str	r2, [r3, #40]	; 0x28
 800ab8c:	e028      	b.n	800abe0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab94:	0c1b      	lsrs	r3, r3, #16
 800ab96:	68ba      	ldr	r2, [r7, #8]
 800ab98:	4413      	add	r3, r2
 800ab9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	73fb      	strb	r3, [r7, #15]
 800aba0:	e00d      	b.n	800abbe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681a      	ldr	r2, [r3, #0]
 800aba6:	7bfb      	ldrb	r3, [r7, #15]
 800aba8:	3340      	adds	r3, #64	; 0x40
 800abaa:	009b      	lsls	r3, r3, #2
 800abac:	4413      	add	r3, r2
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	0c1b      	lsrs	r3, r3, #16
 800abb2:	68ba      	ldr	r2, [r7, #8]
 800abb4:	4413      	add	r3, r2
 800abb6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800abb8:	7bfb      	ldrb	r3, [r7, #15]
 800abba:	3301      	adds	r3, #1
 800abbc:	73fb      	strb	r3, [r7, #15]
 800abbe:	7bfa      	ldrb	r2, [r7, #15]
 800abc0:	78fb      	ldrb	r3, [r7, #3]
 800abc2:	3b01      	subs	r3, #1
 800abc4:	429a      	cmp	r2, r3
 800abc6:	d3ec      	bcc.n	800aba2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800abc8:	883b      	ldrh	r3, [r7, #0]
 800abca:	0418      	lsls	r0, r3, #16
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6819      	ldr	r1, [r3, #0]
 800abd0:	78fb      	ldrb	r3, [r7, #3]
 800abd2:	3b01      	subs	r3, #1
 800abd4:	68ba      	ldr	r2, [r7, #8]
 800abd6:	4302      	orrs	r2, r0
 800abd8:	3340      	adds	r3, #64	; 0x40
 800abda:	009b      	lsls	r3, r3, #2
 800abdc:	440b      	add	r3, r1
 800abde:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800abe0:	2300      	movs	r3, #0
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3714      	adds	r7, #20
 800abe6:	46bd      	mov	sp, r7
 800abe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abec:	4770      	bx	lr

0800abee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800abee:	b480      	push	{r7}
 800abf0:	b083      	sub	sp, #12
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	6078      	str	r0, [r7, #4]
 800abf6:	460b      	mov	r3, r1
 800abf8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	887a      	ldrh	r2, [r7, #2]
 800ac00:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800ac02:	2300      	movs	r3, #0
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	370c      	adds	r7, #12
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0e:	4770      	bx	lr

0800ac10 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b085      	sub	sp, #20
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2201      	movs	r2, #1
 800ac22:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	699b      	ldr	r3, [r3, #24]
 800ac32:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac42:	f043 0303 	orr.w	r3, r3, #3
 800ac46:	68fa      	ldr	r2, [r7, #12]
 800ac48:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800ac4a:	2300      	movs	r3, #0
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3714      	adds	r7, #20
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b082      	sub	sp, #8
 800ac5c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800ac62:	2300      	movs	r3, #0
 800ac64:	603b      	str	r3, [r7, #0]
 800ac66:	4b20      	ldr	r3, [pc, #128]	; (800ace8 <HAL_PWREx_EnableOverDrive+0x90>)
 800ac68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac6a:	4a1f      	ldr	r2, [pc, #124]	; (800ace8 <HAL_PWREx_EnableOverDrive+0x90>)
 800ac6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac70:	6413      	str	r3, [r2, #64]	; 0x40
 800ac72:	4b1d      	ldr	r3, [pc, #116]	; (800ace8 <HAL_PWREx_EnableOverDrive+0x90>)
 800ac74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac7a:	603b      	str	r3, [r7, #0]
 800ac7c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800ac7e:	4b1b      	ldr	r3, [pc, #108]	; (800acec <HAL_PWREx_EnableOverDrive+0x94>)
 800ac80:	2201      	movs	r2, #1
 800ac82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ac84:	f7fb fc72 	bl	800656c <HAL_GetTick>
 800ac88:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ac8a:	e009      	b.n	800aca0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ac8c:	f7fb fc6e 	bl	800656c <HAL_GetTick>
 800ac90:	4602      	mov	r2, r0
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	1ad3      	subs	r3, r2, r3
 800ac96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ac9a:	d901      	bls.n	800aca0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800ac9c:	2303      	movs	r3, #3
 800ac9e:	e01f      	b.n	800ace0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800aca0:	4b13      	ldr	r3, [pc, #76]	; (800acf0 <HAL_PWREx_EnableOverDrive+0x98>)
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acac:	d1ee      	bne.n	800ac8c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800acae:	4b11      	ldr	r3, [pc, #68]	; (800acf4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800acb0:	2201      	movs	r2, #1
 800acb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800acb4:	f7fb fc5a 	bl	800656c <HAL_GetTick>
 800acb8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800acba:	e009      	b.n	800acd0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800acbc:	f7fb fc56 	bl	800656c <HAL_GetTick>
 800acc0:	4602      	mov	r2, r0
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	1ad3      	subs	r3, r2, r3
 800acc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800acca:	d901      	bls.n	800acd0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800accc:	2303      	movs	r3, #3
 800acce:	e007      	b.n	800ace0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800acd0:	4b07      	ldr	r3, [pc, #28]	; (800acf0 <HAL_PWREx_EnableOverDrive+0x98>)
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acdc:	d1ee      	bne.n	800acbc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800acde:	2300      	movs	r3, #0
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3708      	adds	r7, #8
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}
 800ace8:	40023800 	.word	0x40023800
 800acec:	420e0040 	.word	0x420e0040
 800acf0:	40007000 	.word	0x40007000
 800acf4:	420e0044 	.word	0x420e0044

0800acf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b084      	sub	sp, #16
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d101      	bne.n	800ad0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ad08:	2301      	movs	r3, #1
 800ad0a:	e0cc      	b.n	800aea6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ad0c:	4b68      	ldr	r3, [pc, #416]	; (800aeb0 <HAL_RCC_ClockConfig+0x1b8>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f003 030f 	and.w	r3, r3, #15
 800ad14:	683a      	ldr	r2, [r7, #0]
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d90c      	bls.n	800ad34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad1a:	4b65      	ldr	r3, [pc, #404]	; (800aeb0 <HAL_RCC_ClockConfig+0x1b8>)
 800ad1c:	683a      	ldr	r2, [r7, #0]
 800ad1e:	b2d2      	uxtb	r2, r2
 800ad20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad22:	4b63      	ldr	r3, [pc, #396]	; (800aeb0 <HAL_RCC_ClockConfig+0x1b8>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f003 030f 	and.w	r3, r3, #15
 800ad2a:	683a      	ldr	r2, [r7, #0]
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d001      	beq.n	800ad34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ad30:	2301      	movs	r3, #1
 800ad32:	e0b8      	b.n	800aea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f003 0302 	and.w	r3, r3, #2
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d020      	beq.n	800ad82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f003 0304 	and.w	r3, r3, #4
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d005      	beq.n	800ad58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ad4c:	4b59      	ldr	r3, [pc, #356]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ad4e:	689b      	ldr	r3, [r3, #8]
 800ad50:	4a58      	ldr	r2, [pc, #352]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ad52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ad56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f003 0308 	and.w	r3, r3, #8
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d005      	beq.n	800ad70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ad64:	4b53      	ldr	r3, [pc, #332]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ad66:	689b      	ldr	r3, [r3, #8]
 800ad68:	4a52      	ldr	r2, [pc, #328]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ad6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ad6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad70:	4b50      	ldr	r3, [pc, #320]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ad72:	689b      	ldr	r3, [r3, #8]
 800ad74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	689b      	ldr	r3, [r3, #8]
 800ad7c:	494d      	ldr	r1, [pc, #308]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f003 0301 	and.w	r3, r3, #1
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d044      	beq.n	800ae18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	2b01      	cmp	r3, #1
 800ad94:	d107      	bne.n	800ada6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad96:	4b47      	ldr	r3, [pc, #284]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d119      	bne.n	800add6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ada2:	2301      	movs	r3, #1
 800ada4:	e07f      	b.n	800aea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	2b02      	cmp	r3, #2
 800adac:	d003      	beq.n	800adb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800adb2:	2b03      	cmp	r3, #3
 800adb4:	d107      	bne.n	800adc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800adb6:	4b3f      	ldr	r3, [pc, #252]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d109      	bne.n	800add6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800adc2:	2301      	movs	r3, #1
 800adc4:	e06f      	b.n	800aea6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800adc6:	4b3b      	ldr	r3, [pc, #236]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f003 0302 	and.w	r3, r3, #2
 800adce:	2b00      	cmp	r3, #0
 800add0:	d101      	bne.n	800add6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800add2:	2301      	movs	r3, #1
 800add4:	e067      	b.n	800aea6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800add6:	4b37      	ldr	r3, [pc, #220]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	f023 0203 	bic.w	r2, r3, #3
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	4934      	ldr	r1, [pc, #208]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ade4:	4313      	orrs	r3, r2
 800ade6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ade8:	f7fb fbc0 	bl	800656c <HAL_GetTick>
 800adec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800adee:	e00a      	b.n	800ae06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800adf0:	f7fb fbbc 	bl	800656c <HAL_GetTick>
 800adf4:	4602      	mov	r2, r0
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	1ad3      	subs	r3, r2, r3
 800adfa:	f241 3288 	movw	r2, #5000	; 0x1388
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d901      	bls.n	800ae06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ae02:	2303      	movs	r3, #3
 800ae04:	e04f      	b.n	800aea6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae06:	4b2b      	ldr	r3, [pc, #172]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ae08:	689b      	ldr	r3, [r3, #8]
 800ae0a:	f003 020c 	and.w	r2, r3, #12
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	009b      	lsls	r3, r3, #2
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d1eb      	bne.n	800adf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ae18:	4b25      	ldr	r3, [pc, #148]	; (800aeb0 <HAL_RCC_ClockConfig+0x1b8>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f003 030f 	and.w	r3, r3, #15
 800ae20:	683a      	ldr	r2, [r7, #0]
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d20c      	bcs.n	800ae40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae26:	4b22      	ldr	r3, [pc, #136]	; (800aeb0 <HAL_RCC_ClockConfig+0x1b8>)
 800ae28:	683a      	ldr	r2, [r7, #0]
 800ae2a:	b2d2      	uxtb	r2, r2
 800ae2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae2e:	4b20      	ldr	r3, [pc, #128]	; (800aeb0 <HAL_RCC_ClockConfig+0x1b8>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f003 030f 	and.w	r3, r3, #15
 800ae36:	683a      	ldr	r2, [r7, #0]
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d001      	beq.n	800ae40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	e032      	b.n	800aea6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	f003 0304 	and.w	r3, r3, #4
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d008      	beq.n	800ae5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ae4c:	4b19      	ldr	r3, [pc, #100]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ae4e:	689b      	ldr	r3, [r3, #8]
 800ae50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	68db      	ldr	r3, [r3, #12]
 800ae58:	4916      	ldr	r1, [pc, #88]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f003 0308 	and.w	r3, r3, #8
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d009      	beq.n	800ae7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ae6a:	4b12      	ldr	r3, [pc, #72]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ae6c:	689b      	ldr	r3, [r3, #8]
 800ae6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	691b      	ldr	r3, [r3, #16]
 800ae76:	00db      	lsls	r3, r3, #3
 800ae78:	490e      	ldr	r1, [pc, #56]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ae7e:	f000 fb6b 	bl	800b558 <HAL_RCC_GetSysClockFreq>
 800ae82:	4602      	mov	r2, r0
 800ae84:	4b0b      	ldr	r3, [pc, #44]	; (800aeb4 <HAL_RCC_ClockConfig+0x1bc>)
 800ae86:	689b      	ldr	r3, [r3, #8]
 800ae88:	091b      	lsrs	r3, r3, #4
 800ae8a:	f003 030f 	and.w	r3, r3, #15
 800ae8e:	490a      	ldr	r1, [pc, #40]	; (800aeb8 <HAL_RCC_ClockConfig+0x1c0>)
 800ae90:	5ccb      	ldrb	r3, [r1, r3]
 800ae92:	fa22 f303 	lsr.w	r3, r2, r3
 800ae96:	4a09      	ldr	r2, [pc, #36]	; (800aebc <HAL_RCC_ClockConfig+0x1c4>)
 800ae98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800ae9a:	4b09      	ldr	r3, [pc, #36]	; (800aec0 <HAL_RCC_ClockConfig+0x1c8>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7fb fb20 	bl	80064e4 <HAL_InitTick>

  return HAL_OK;
 800aea4:	2300      	movs	r3, #0
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3710      	adds	r7, #16
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop
 800aeb0:	40023c00 	.word	0x40023c00
 800aeb4:	40023800 	.word	0x40023800
 800aeb8:	080175a4 	.word	0x080175a4
 800aebc:	20000000 	.word	0x20000000
 800aec0:	20000004 	.word	0x20000004

0800aec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aec4:	b480      	push	{r7}
 800aec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aec8:	4b03      	ldr	r3, [pc, #12]	; (800aed8 <HAL_RCC_GetHCLKFreq+0x14>)
 800aeca:	681b      	ldr	r3, [r3, #0]
}
 800aecc:	4618      	mov	r0, r3
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr
 800aed6:	bf00      	nop
 800aed8:	20000000 	.word	0x20000000

0800aedc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800aee0:	f7ff fff0 	bl	800aec4 <HAL_RCC_GetHCLKFreq>
 800aee4:	4602      	mov	r2, r0
 800aee6:	4b05      	ldr	r3, [pc, #20]	; (800aefc <HAL_RCC_GetPCLK1Freq+0x20>)
 800aee8:	689b      	ldr	r3, [r3, #8]
 800aeea:	0a9b      	lsrs	r3, r3, #10
 800aeec:	f003 0307 	and.w	r3, r3, #7
 800aef0:	4903      	ldr	r1, [pc, #12]	; (800af00 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aef2:	5ccb      	ldrb	r3, [r1, r3]
 800aef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	bd80      	pop	{r7, pc}
 800aefc:	40023800 	.word	0x40023800
 800af00:	080175b4 	.word	0x080175b4

0800af04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b08c      	sub	sp, #48	; 0x30
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800af0c:	2300      	movs	r3, #0
 800af0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800af10:	2300      	movs	r3, #0
 800af12:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800af14:	2300      	movs	r3, #0
 800af16:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800af18:	2300      	movs	r3, #0
 800af1a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800af1c:	2300      	movs	r3, #0
 800af1e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800af20:	2300      	movs	r3, #0
 800af22:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800af24:	2300      	movs	r3, #0
 800af26:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800af28:	2300      	movs	r3, #0
 800af2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800af2c:	2300      	movs	r3, #0
 800af2e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f003 0301 	and.w	r3, r3, #1
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d010      	beq.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800af3c:	4b6f      	ldr	r3, [pc, #444]	; (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800af3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af42:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af4a:	496c      	ldr	r1, [pc, #432]	; (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800af4c:	4313      	orrs	r3, r2
 800af4e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af56:	2b00      	cmp	r3, #0
 800af58:	d101      	bne.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800af5a:	2301      	movs	r3, #1
 800af5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f003 0302 	and.w	r3, r3, #2
 800af66:	2b00      	cmp	r3, #0
 800af68:	d010      	beq.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800af6a:	4b64      	ldr	r3, [pc, #400]	; (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800af6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af70:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af78:	4960      	ldr	r1, [pc, #384]	; (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800af7a:	4313      	orrs	r3, r2
 800af7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af84:	2b00      	cmp	r3, #0
 800af86:	d101      	bne.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800af88:	2301      	movs	r3, #1
 800af8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f003 0304 	and.w	r3, r3, #4
 800af94:	2b00      	cmp	r3, #0
 800af96:	d017      	beq.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800af98:	4b58      	ldr	r3, [pc, #352]	; (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800af9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afa6:	4955      	ldr	r1, [pc, #340]	; (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800afa8:	4313      	orrs	r3, r2
 800afaa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800afb6:	d101      	bne.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800afb8:	2301      	movs	r3, #1
 800afba:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d101      	bne.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800afc4:	2301      	movs	r3, #1
 800afc6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f003 0308 	and.w	r3, r3, #8
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d017      	beq.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800afd4:	4b49      	ldr	r3, [pc, #292]	; (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800afd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afe2:	4946      	ldr	r1, [pc, #280]	; (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800afe4:	4313      	orrs	r3, r2
 800afe6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aff2:	d101      	bne.n	800aff8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800aff4:	2301      	movs	r3, #1
 800aff6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800affc:	2b00      	cmp	r3, #0
 800affe:	d101      	bne.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800b000:	2301      	movs	r3, #1
 800b002:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f003 0320 	and.w	r3, r3, #32
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	f000 808a 	beq.w	800b126 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b012:	2300      	movs	r3, #0
 800b014:	60bb      	str	r3, [r7, #8]
 800b016:	4b39      	ldr	r3, [pc, #228]	; (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b01a:	4a38      	ldr	r2, [pc, #224]	; (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b01c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b020:	6413      	str	r3, [r2, #64]	; 0x40
 800b022:	4b36      	ldr	r3, [pc, #216]	; (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b02a:	60bb      	str	r3, [r7, #8]
 800b02c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b02e:	4b34      	ldr	r3, [pc, #208]	; (800b100 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4a33      	ldr	r2, [pc, #204]	; (800b100 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800b034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b038:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b03a:	f7fb fa97 	bl	800656c <HAL_GetTick>
 800b03e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b040:	e008      	b.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b042:	f7fb fa93 	bl	800656c <HAL_GetTick>
 800b046:	4602      	mov	r2, r0
 800b048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b04a:	1ad3      	subs	r3, r2, r3
 800b04c:	2b02      	cmp	r3, #2
 800b04e:	d901      	bls.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800b050:	2303      	movs	r3, #3
 800b052:	e278      	b.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b054:	4b2a      	ldr	r3, [pc, #168]	; (800b100 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d0f0      	beq.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b060:	4b26      	ldr	r3, [pc, #152]	; (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b064:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b068:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b06a:	6a3b      	ldr	r3, [r7, #32]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d02f      	beq.n	800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b074:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b078:	6a3a      	ldr	r2, [r7, #32]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d028      	beq.n	800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b07e:	4b1f      	ldr	r3, [pc, #124]	; (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b082:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b086:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b088:	4b1e      	ldr	r3, [pc, #120]	; (800b104 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800b08a:	2201      	movs	r2, #1
 800b08c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b08e:	4b1d      	ldr	r3, [pc, #116]	; (800b104 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800b090:	2200      	movs	r2, #0
 800b092:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800b094:	4a19      	ldr	r2, [pc, #100]	; (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b096:	6a3b      	ldr	r3, [r7, #32]
 800b098:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b09a:	4b18      	ldr	r3, [pc, #96]	; (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b09c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b09e:	f003 0301 	and.w	r3, r3, #1
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d114      	bne.n	800b0d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800b0a6:	f7fb fa61 	bl	800656c <HAL_GetTick>
 800b0aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b0ac:	e00a      	b.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b0ae:	f7fb fa5d 	bl	800656c <HAL_GetTick>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b6:	1ad3      	subs	r3, r2, r3
 800b0b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d901      	bls.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800b0c0:	2303      	movs	r3, #3
 800b0c2:	e240      	b.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b0c4:	4b0d      	ldr	r3, [pc, #52]	; (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b0c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0c8:	f003 0302 	and.w	r3, r3, #2
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d0ee      	beq.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b0d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b0dc:	d114      	bne.n	800b108 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800b0de:	4b07      	ldr	r3, [pc, #28]	; (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0ea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b0ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0f2:	4902      	ldr	r1, [pc, #8]	; (800b0fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	608b      	str	r3, [r1, #8]
 800b0f8:	e00c      	b.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800b0fa:	bf00      	nop
 800b0fc:	40023800 	.word	0x40023800
 800b100:	40007000 	.word	0x40007000
 800b104:	42470e40 	.word	0x42470e40
 800b108:	4b4a      	ldr	r3, [pc, #296]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b10a:	689b      	ldr	r3, [r3, #8]
 800b10c:	4a49      	ldr	r2, [pc, #292]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b10e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b112:	6093      	str	r3, [r2, #8]
 800b114:	4b47      	ldr	r3, [pc, #284]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b116:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b11c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b120:	4944      	ldr	r1, [pc, #272]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b122:	4313      	orrs	r3, r2
 800b124:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f003 0310 	and.w	r3, r3, #16
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d004      	beq.n	800b13c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800b138:	4b3f      	ldr	r3, [pc, #252]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800b13a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b144:	2b00      	cmp	r3, #0
 800b146:	d00a      	beq.n	800b15e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800b148:	4b3a      	ldr	r3, [pc, #232]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b14a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b14e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b156:	4937      	ldr	r1, [pc, #220]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b158:	4313      	orrs	r3, r2
 800b15a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b166:	2b00      	cmp	r3, #0
 800b168:	d00a      	beq.n	800b180 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b16a:	4b32      	ldr	r3, [pc, #200]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b16c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b170:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b178:	492e      	ldr	r1, [pc, #184]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b17a:	4313      	orrs	r3, r2
 800b17c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d011      	beq.n	800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b18c:	4b29      	ldr	r3, [pc, #164]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b18e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b192:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b19a:	4926      	ldr	r1, [pc, #152]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b19c:	4313      	orrs	r3, r2
 800b19e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b1aa:	d101      	bne.n	800b1b0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d00a      	beq.n	800b1d2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800b1bc:	4b1d      	ldr	r3, [pc, #116]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b1be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b1c2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1ca:	491a      	ldr	r1, [pc, #104]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d011      	beq.n	800b202 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800b1de:	4b15      	ldr	r3, [pc, #84]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b1e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b1e4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1ec:	4911      	ldr	r1, [pc, #68]	; (800b234 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1fc:	d101      	bne.n	800b202 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800b1fe:	2301      	movs	r3, #1
 800b200:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800b202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b204:	2b01      	cmp	r3, #1
 800b206:	d005      	beq.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b210:	f040 80ff 	bne.w	800b412 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b214:	4b09      	ldr	r3, [pc, #36]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b216:	2200      	movs	r2, #0
 800b218:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b21a:	f7fb f9a7 	bl	800656c <HAL_GetTick>
 800b21e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b220:	e00e      	b.n	800b240 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b222:	f7fb f9a3 	bl	800656c <HAL_GetTick>
 800b226:	4602      	mov	r2, r0
 800b228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b22a:	1ad3      	subs	r3, r2, r3
 800b22c:	2b02      	cmp	r3, #2
 800b22e:	d907      	bls.n	800b240 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b230:	2303      	movs	r3, #3
 800b232:	e188      	b.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800b234:	40023800 	.word	0x40023800
 800b238:	424711e0 	.word	0x424711e0
 800b23c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b240:	4b7e      	ldr	r3, [pc, #504]	; (800b43c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d1ea      	bne.n	800b222 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f003 0301 	and.w	r3, r3, #1
 800b254:	2b00      	cmp	r3, #0
 800b256:	d003      	beq.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d009      	beq.n	800b274 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d028      	beq.n	800b2be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b270:	2b00      	cmp	r3, #0
 800b272:	d124      	bne.n	800b2be <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800b274:	4b71      	ldr	r3, [pc, #452]	; (800b43c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b276:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b27a:	0c1b      	lsrs	r3, r3, #16
 800b27c:	f003 0303 	and.w	r3, r3, #3
 800b280:	3301      	adds	r3, #1
 800b282:	005b      	lsls	r3, r3, #1
 800b284:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b286:	4b6d      	ldr	r3, [pc, #436]	; (800b43c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b288:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b28c:	0e1b      	lsrs	r3, r3, #24
 800b28e:	f003 030f 	and.w	r3, r3, #15
 800b292:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	685a      	ldr	r2, [r3, #4]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	689b      	ldr	r3, [r3, #8]
 800b29c:	019b      	lsls	r3, r3, #6
 800b29e:	431a      	orrs	r2, r3
 800b2a0:	69fb      	ldr	r3, [r7, #28]
 800b2a2:	085b      	lsrs	r3, r3, #1
 800b2a4:	3b01      	subs	r3, #1
 800b2a6:	041b      	lsls	r3, r3, #16
 800b2a8:	431a      	orrs	r2, r3
 800b2aa:	69bb      	ldr	r3, [r7, #24]
 800b2ac:	061b      	lsls	r3, r3, #24
 800b2ae:	431a      	orrs	r2, r3
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	695b      	ldr	r3, [r3, #20]
 800b2b4:	071b      	lsls	r3, r3, #28
 800b2b6:	4961      	ldr	r1, [pc, #388]	; (800b43c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b2b8:	4313      	orrs	r3, r2
 800b2ba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	f003 0304 	and.w	r3, r3, #4
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d004      	beq.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b2d2:	d00a      	beq.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d035      	beq.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b2e8:	d130      	bne.n	800b34c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800b2ea:	4b54      	ldr	r3, [pc, #336]	; (800b43c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b2ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2f0:	0c1b      	lsrs	r3, r3, #16
 800b2f2:	f003 0303 	and.w	r3, r3, #3
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	005b      	lsls	r3, r3, #1
 800b2fa:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b2fc:	4b4f      	ldr	r3, [pc, #316]	; (800b43c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b2fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b302:	0f1b      	lsrs	r3, r3, #28
 800b304:	f003 0307 	and.w	r3, r3, #7
 800b308:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	685a      	ldr	r2, [r3, #4]
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	689b      	ldr	r3, [r3, #8]
 800b312:	019b      	lsls	r3, r3, #6
 800b314:	431a      	orrs	r2, r3
 800b316:	69fb      	ldr	r3, [r7, #28]
 800b318:	085b      	lsrs	r3, r3, #1
 800b31a:	3b01      	subs	r3, #1
 800b31c:	041b      	lsls	r3, r3, #16
 800b31e:	431a      	orrs	r2, r3
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	691b      	ldr	r3, [r3, #16]
 800b324:	061b      	lsls	r3, r3, #24
 800b326:	431a      	orrs	r2, r3
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	071b      	lsls	r3, r3, #28
 800b32c:	4943      	ldr	r1, [pc, #268]	; (800b43c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b32e:	4313      	orrs	r3, r2
 800b330:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b334:	4b41      	ldr	r3, [pc, #260]	; (800b43c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b336:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b33a:	f023 021f 	bic.w	r2, r3, #31
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b342:	3b01      	subs	r3, #1
 800b344:	493d      	ldr	r1, [pc, #244]	; (800b43c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b346:	4313      	orrs	r3, r2
 800b348:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b354:	2b00      	cmp	r3, #0
 800b356:	d029      	beq.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b35c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b360:	d124      	bne.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800b362:	4b36      	ldr	r3, [pc, #216]	; (800b43c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b368:	0c1b      	lsrs	r3, r3, #16
 800b36a:	f003 0303 	and.w	r3, r3, #3
 800b36e:	3301      	adds	r3, #1
 800b370:	005b      	lsls	r3, r3, #1
 800b372:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b374:	4b31      	ldr	r3, [pc, #196]	; (800b43c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b376:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b37a:	0f1b      	lsrs	r3, r3, #28
 800b37c:	f003 0307 	and.w	r3, r3, #7
 800b380:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	685a      	ldr	r2, [r3, #4]
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	689b      	ldr	r3, [r3, #8]
 800b38a:	019b      	lsls	r3, r3, #6
 800b38c:	431a      	orrs	r2, r3
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	68db      	ldr	r3, [r3, #12]
 800b392:	085b      	lsrs	r3, r3, #1
 800b394:	3b01      	subs	r3, #1
 800b396:	041b      	lsls	r3, r3, #16
 800b398:	431a      	orrs	r2, r3
 800b39a:	69bb      	ldr	r3, [r7, #24]
 800b39c:	061b      	lsls	r3, r3, #24
 800b39e:	431a      	orrs	r2, r3
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	071b      	lsls	r3, r3, #28
 800b3a4:	4925      	ldr	r1, [pc, #148]	; (800b43c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b3a6:	4313      	orrs	r3, r2
 800b3a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d016      	beq.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	685a      	ldr	r2, [r3, #4]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	689b      	ldr	r3, [r3, #8]
 800b3c0:	019b      	lsls	r3, r3, #6
 800b3c2:	431a      	orrs	r2, r3
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	68db      	ldr	r3, [r3, #12]
 800b3c8:	085b      	lsrs	r3, r3, #1
 800b3ca:	3b01      	subs	r3, #1
 800b3cc:	041b      	lsls	r3, r3, #16
 800b3ce:	431a      	orrs	r2, r3
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	691b      	ldr	r3, [r3, #16]
 800b3d4:	061b      	lsls	r3, r3, #24
 800b3d6:	431a      	orrs	r2, r3
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	695b      	ldr	r3, [r3, #20]
 800b3dc:	071b      	lsls	r3, r3, #28
 800b3de:	4917      	ldr	r1, [pc, #92]	; (800b43c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b3e0:	4313      	orrs	r3, r2
 800b3e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b3e6:	4b16      	ldr	r3, [pc, #88]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b3ec:	f7fb f8be 	bl	800656c <HAL_GetTick>
 800b3f0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b3f2:	e008      	b.n	800b406 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b3f4:	f7fb f8ba 	bl	800656c <HAL_GetTick>
 800b3f8:	4602      	mov	r2, r0
 800b3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3fc:	1ad3      	subs	r3, r2, r3
 800b3fe:	2b02      	cmp	r3, #2
 800b400:	d901      	bls.n	800b406 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b402:	2303      	movs	r3, #3
 800b404:	e09f      	b.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b406:	4b0d      	ldr	r3, [pc, #52]	; (800b43c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d0f0      	beq.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800b412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b414:	2b01      	cmp	r3, #1
 800b416:	f040 8095 	bne.w	800b544 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b41a:	4b0a      	ldr	r3, [pc, #40]	; (800b444 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800b41c:	2200      	movs	r2, #0
 800b41e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b420:	f7fb f8a4 	bl	800656c <HAL_GetTick>
 800b424:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b426:	e00f      	b.n	800b448 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b428:	f7fb f8a0 	bl	800656c <HAL_GetTick>
 800b42c:	4602      	mov	r2, r0
 800b42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b430:	1ad3      	subs	r3, r2, r3
 800b432:	2b02      	cmp	r3, #2
 800b434:	d908      	bls.n	800b448 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b436:	2303      	movs	r3, #3
 800b438:	e085      	b.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800b43a:	bf00      	nop
 800b43c:	40023800 	.word	0x40023800
 800b440:	42470068 	.word	0x42470068
 800b444:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b448:	4b41      	ldr	r3, [pc, #260]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b450:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b454:	d0e8      	beq.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f003 0304 	and.w	r3, r3, #4
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d003      	beq.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0x566>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b466:	2b00      	cmp	r3, #0
 800b468:	d009      	beq.n	800b47e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800b472:	2b00      	cmp	r3, #0
 800b474:	d02b      	beq.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d127      	bne.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800b47e:	4b34      	ldr	r3, [pc, #208]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b484:	0c1b      	lsrs	r3, r3, #16
 800b486:	f003 0303 	and.w	r3, r3, #3
 800b48a:	3301      	adds	r3, #1
 800b48c:	005b      	lsls	r3, r3, #1
 800b48e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	699a      	ldr	r2, [r3, #24]
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	69db      	ldr	r3, [r3, #28]
 800b498:	019b      	lsls	r3, r3, #6
 800b49a:	431a      	orrs	r2, r3
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	085b      	lsrs	r3, r3, #1
 800b4a0:	3b01      	subs	r3, #1
 800b4a2:	041b      	lsls	r3, r3, #16
 800b4a4:	431a      	orrs	r2, r3
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4aa:	061b      	lsls	r3, r3, #24
 800b4ac:	4928      	ldr	r1, [pc, #160]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b4ae:	4313      	orrs	r3, r2
 800b4b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b4b4:	4b26      	ldr	r3, [pc, #152]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b4b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b4ba:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4c2:	3b01      	subs	r3, #1
 800b4c4:	021b      	lsls	r3, r3, #8
 800b4c6:	4922      	ldr	r1, [pc, #136]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b4c8:	4313      	orrs	r3, r2
 800b4ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d01d      	beq.n	800b516 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b4e2:	d118      	bne.n	800b516 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b4e4:	4b1a      	ldr	r3, [pc, #104]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b4e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4ea:	0e1b      	lsrs	r3, r3, #24
 800b4ec:	f003 030f 	and.w	r3, r3, #15
 800b4f0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	699a      	ldr	r2, [r3, #24]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	69db      	ldr	r3, [r3, #28]
 800b4fa:	019b      	lsls	r3, r3, #6
 800b4fc:	431a      	orrs	r2, r3
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6a1b      	ldr	r3, [r3, #32]
 800b502:	085b      	lsrs	r3, r3, #1
 800b504:	3b01      	subs	r3, #1
 800b506:	041b      	lsls	r3, r3, #16
 800b508:	431a      	orrs	r2, r3
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	061b      	lsls	r3, r3, #24
 800b50e:	4910      	ldr	r1, [pc, #64]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b510:	4313      	orrs	r3, r2
 800b512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b516:	4b0f      	ldr	r3, [pc, #60]	; (800b554 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800b518:	2201      	movs	r2, #1
 800b51a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b51c:	f7fb f826 	bl	800656c <HAL_GetTick>
 800b520:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b522:	e008      	b.n	800b536 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b524:	f7fb f822 	bl	800656c <HAL_GetTick>
 800b528:	4602      	mov	r2, r0
 800b52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b52c:	1ad3      	subs	r3, r2, r3
 800b52e:	2b02      	cmp	r3, #2
 800b530:	d901      	bls.n	800b536 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b532:	2303      	movs	r3, #3
 800b534:	e007      	b.n	800b546 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b536:	4b06      	ldr	r3, [pc, #24]	; (800b550 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b53e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b542:	d1ef      	bne.n	800b524 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800b544:	2300      	movs	r3, #0
}
 800b546:	4618      	mov	r0, r3
 800b548:	3730      	adds	r7, #48	; 0x30
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop
 800b550:	40023800 	.word	0x40023800
 800b554:	42470070 	.word	0x42470070

0800b558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b55c:	b088      	sub	sp, #32
 800b55e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800b560:	2300      	movs	r3, #0
 800b562:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800b564:	2300      	movs	r3, #0
 800b566:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800b568:	2300      	movs	r3, #0
 800b56a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800b56c:	2300      	movs	r3, #0
 800b56e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800b570:	2300      	movs	r3, #0
 800b572:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b574:	4bce      	ldr	r3, [pc, #824]	; (800b8b0 <HAL_RCC_GetSysClockFreq+0x358>)
 800b576:	689b      	ldr	r3, [r3, #8]
 800b578:	f003 030c 	and.w	r3, r3, #12
 800b57c:	2b0c      	cmp	r3, #12
 800b57e:	f200 818d 	bhi.w	800b89c <HAL_RCC_GetSysClockFreq+0x344>
 800b582:	a201      	add	r2, pc, #4	; (adr r2, 800b588 <HAL_RCC_GetSysClockFreq+0x30>)
 800b584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b588:	0800b5bd 	.word	0x0800b5bd
 800b58c:	0800b89d 	.word	0x0800b89d
 800b590:	0800b89d 	.word	0x0800b89d
 800b594:	0800b89d 	.word	0x0800b89d
 800b598:	0800b5c3 	.word	0x0800b5c3
 800b59c:	0800b89d 	.word	0x0800b89d
 800b5a0:	0800b89d 	.word	0x0800b89d
 800b5a4:	0800b89d 	.word	0x0800b89d
 800b5a8:	0800b5c9 	.word	0x0800b5c9
 800b5ac:	0800b89d 	.word	0x0800b89d
 800b5b0:	0800b89d 	.word	0x0800b89d
 800b5b4:	0800b89d 	.word	0x0800b89d
 800b5b8:	0800b73d 	.word	0x0800b73d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b5bc:	4bbd      	ldr	r3, [pc, #756]	; (800b8b4 <HAL_RCC_GetSysClockFreq+0x35c>)
 800b5be:	61bb      	str	r3, [r7, #24]
       break;
 800b5c0:	e16f      	b.n	800b8a2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b5c2:	4bbd      	ldr	r3, [pc, #756]	; (800b8b8 <HAL_RCC_GetSysClockFreq+0x360>)
 800b5c4:	61bb      	str	r3, [r7, #24]
      break;
 800b5c6:	e16c      	b.n	800b8a2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b5c8:	4bb9      	ldr	r3, [pc, #740]	; (800b8b0 <HAL_RCC_GetSysClockFreq+0x358>)
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5d0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b5d2:	4bb7      	ldr	r3, [pc, #732]	; (800b8b0 <HAL_RCC_GetSysClockFreq+0x358>)
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d053      	beq.n	800b686 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b5de:	4bb4      	ldr	r3, [pc, #720]	; (800b8b0 <HAL_RCC_GetSysClockFreq+0x358>)
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	099b      	lsrs	r3, r3, #6
 800b5e4:	461a      	mov	r2, r3
 800b5e6:	f04f 0300 	mov.w	r3, #0
 800b5ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b5ee:	f04f 0100 	mov.w	r1, #0
 800b5f2:	ea02 0400 	and.w	r4, r2, r0
 800b5f6:	603c      	str	r4, [r7, #0]
 800b5f8:	400b      	ands	r3, r1
 800b5fa:	607b      	str	r3, [r7, #4]
 800b5fc:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b600:	4620      	mov	r0, r4
 800b602:	4629      	mov	r1, r5
 800b604:	f04f 0200 	mov.w	r2, #0
 800b608:	f04f 0300 	mov.w	r3, #0
 800b60c:	014b      	lsls	r3, r1, #5
 800b60e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b612:	0142      	lsls	r2, r0, #5
 800b614:	4610      	mov	r0, r2
 800b616:	4619      	mov	r1, r3
 800b618:	4623      	mov	r3, r4
 800b61a:	1ac0      	subs	r0, r0, r3
 800b61c:	462b      	mov	r3, r5
 800b61e:	eb61 0103 	sbc.w	r1, r1, r3
 800b622:	f04f 0200 	mov.w	r2, #0
 800b626:	f04f 0300 	mov.w	r3, #0
 800b62a:	018b      	lsls	r3, r1, #6
 800b62c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b630:	0182      	lsls	r2, r0, #6
 800b632:	1a12      	subs	r2, r2, r0
 800b634:	eb63 0301 	sbc.w	r3, r3, r1
 800b638:	f04f 0000 	mov.w	r0, #0
 800b63c:	f04f 0100 	mov.w	r1, #0
 800b640:	00d9      	lsls	r1, r3, #3
 800b642:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b646:	00d0      	lsls	r0, r2, #3
 800b648:	4602      	mov	r2, r0
 800b64a:	460b      	mov	r3, r1
 800b64c:	4621      	mov	r1, r4
 800b64e:	1852      	adds	r2, r2, r1
 800b650:	4629      	mov	r1, r5
 800b652:	eb43 0101 	adc.w	r1, r3, r1
 800b656:	460b      	mov	r3, r1
 800b658:	f04f 0000 	mov.w	r0, #0
 800b65c:	f04f 0100 	mov.w	r1, #0
 800b660:	0259      	lsls	r1, r3, #9
 800b662:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800b666:	0250      	lsls	r0, r2, #9
 800b668:	4602      	mov	r2, r0
 800b66a:	460b      	mov	r3, r1
 800b66c:	4610      	mov	r0, r2
 800b66e:	4619      	mov	r1, r3
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	461a      	mov	r2, r3
 800b674:	f04f 0300 	mov.w	r3, #0
 800b678:	f7f4 fe1a 	bl	80002b0 <__aeabi_uldivmod>
 800b67c:	4602      	mov	r2, r0
 800b67e:	460b      	mov	r3, r1
 800b680:	4613      	mov	r3, r2
 800b682:	61fb      	str	r3, [r7, #28]
 800b684:	e04c      	b.n	800b720 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b686:	4b8a      	ldr	r3, [pc, #552]	; (800b8b0 <HAL_RCC_GetSysClockFreq+0x358>)
 800b688:	685b      	ldr	r3, [r3, #4]
 800b68a:	099b      	lsrs	r3, r3, #6
 800b68c:	461a      	mov	r2, r3
 800b68e:	f04f 0300 	mov.w	r3, #0
 800b692:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b696:	f04f 0100 	mov.w	r1, #0
 800b69a:	ea02 0a00 	and.w	sl, r2, r0
 800b69e:	ea03 0b01 	and.w	fp, r3, r1
 800b6a2:	4650      	mov	r0, sl
 800b6a4:	4659      	mov	r1, fp
 800b6a6:	f04f 0200 	mov.w	r2, #0
 800b6aa:	f04f 0300 	mov.w	r3, #0
 800b6ae:	014b      	lsls	r3, r1, #5
 800b6b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b6b4:	0142      	lsls	r2, r0, #5
 800b6b6:	4610      	mov	r0, r2
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	ebb0 000a 	subs.w	r0, r0, sl
 800b6be:	eb61 010b 	sbc.w	r1, r1, fp
 800b6c2:	f04f 0200 	mov.w	r2, #0
 800b6c6:	f04f 0300 	mov.w	r3, #0
 800b6ca:	018b      	lsls	r3, r1, #6
 800b6cc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b6d0:	0182      	lsls	r2, r0, #6
 800b6d2:	1a12      	subs	r2, r2, r0
 800b6d4:	eb63 0301 	sbc.w	r3, r3, r1
 800b6d8:	f04f 0000 	mov.w	r0, #0
 800b6dc:	f04f 0100 	mov.w	r1, #0
 800b6e0:	00d9      	lsls	r1, r3, #3
 800b6e2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b6e6:	00d0      	lsls	r0, r2, #3
 800b6e8:	4602      	mov	r2, r0
 800b6ea:	460b      	mov	r3, r1
 800b6ec:	eb12 020a 	adds.w	r2, r2, sl
 800b6f0:	eb43 030b 	adc.w	r3, r3, fp
 800b6f4:	f04f 0000 	mov.w	r0, #0
 800b6f8:	f04f 0100 	mov.w	r1, #0
 800b6fc:	0299      	lsls	r1, r3, #10
 800b6fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b702:	0290      	lsls	r0, r2, #10
 800b704:	4602      	mov	r2, r0
 800b706:	460b      	mov	r3, r1
 800b708:	4610      	mov	r0, r2
 800b70a:	4619      	mov	r1, r3
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	461a      	mov	r2, r3
 800b710:	f04f 0300 	mov.w	r3, #0
 800b714:	f7f4 fdcc 	bl	80002b0 <__aeabi_uldivmod>
 800b718:	4602      	mov	r2, r0
 800b71a:	460b      	mov	r3, r1
 800b71c:	4613      	mov	r3, r2
 800b71e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b720:	4b63      	ldr	r3, [pc, #396]	; (800b8b0 <HAL_RCC_GetSysClockFreq+0x358>)
 800b722:	685b      	ldr	r3, [r3, #4]
 800b724:	0c1b      	lsrs	r3, r3, #16
 800b726:	f003 0303 	and.w	r3, r3, #3
 800b72a:	3301      	adds	r3, #1
 800b72c:	005b      	lsls	r3, r3, #1
 800b72e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800b730:	69fa      	ldr	r2, [r7, #28]
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	fbb2 f3f3 	udiv	r3, r2, r3
 800b738:	61bb      	str	r3, [r7, #24]
      break;
 800b73a:	e0b2      	b.n	800b8a2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b73c:	4b5c      	ldr	r3, [pc, #368]	; (800b8b0 <HAL_RCC_GetSysClockFreq+0x358>)
 800b73e:	685b      	ldr	r3, [r3, #4]
 800b740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b744:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b746:	4b5a      	ldr	r3, [pc, #360]	; (800b8b0 <HAL_RCC_GetSysClockFreq+0x358>)
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d04d      	beq.n	800b7ee <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b752:	4b57      	ldr	r3, [pc, #348]	; (800b8b0 <HAL_RCC_GetSysClockFreq+0x358>)
 800b754:	685b      	ldr	r3, [r3, #4]
 800b756:	099b      	lsrs	r3, r3, #6
 800b758:	461a      	mov	r2, r3
 800b75a:	f04f 0300 	mov.w	r3, #0
 800b75e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b762:	f04f 0100 	mov.w	r1, #0
 800b766:	ea02 0800 	and.w	r8, r2, r0
 800b76a:	ea03 0901 	and.w	r9, r3, r1
 800b76e:	4640      	mov	r0, r8
 800b770:	4649      	mov	r1, r9
 800b772:	f04f 0200 	mov.w	r2, #0
 800b776:	f04f 0300 	mov.w	r3, #0
 800b77a:	014b      	lsls	r3, r1, #5
 800b77c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b780:	0142      	lsls	r2, r0, #5
 800b782:	4610      	mov	r0, r2
 800b784:	4619      	mov	r1, r3
 800b786:	ebb0 0008 	subs.w	r0, r0, r8
 800b78a:	eb61 0109 	sbc.w	r1, r1, r9
 800b78e:	f04f 0200 	mov.w	r2, #0
 800b792:	f04f 0300 	mov.w	r3, #0
 800b796:	018b      	lsls	r3, r1, #6
 800b798:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b79c:	0182      	lsls	r2, r0, #6
 800b79e:	1a12      	subs	r2, r2, r0
 800b7a0:	eb63 0301 	sbc.w	r3, r3, r1
 800b7a4:	f04f 0000 	mov.w	r0, #0
 800b7a8:	f04f 0100 	mov.w	r1, #0
 800b7ac:	00d9      	lsls	r1, r3, #3
 800b7ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b7b2:	00d0      	lsls	r0, r2, #3
 800b7b4:	4602      	mov	r2, r0
 800b7b6:	460b      	mov	r3, r1
 800b7b8:	eb12 0208 	adds.w	r2, r2, r8
 800b7bc:	eb43 0309 	adc.w	r3, r3, r9
 800b7c0:	f04f 0000 	mov.w	r0, #0
 800b7c4:	f04f 0100 	mov.w	r1, #0
 800b7c8:	0259      	lsls	r1, r3, #9
 800b7ca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800b7ce:	0250      	lsls	r0, r2, #9
 800b7d0:	4602      	mov	r2, r0
 800b7d2:	460b      	mov	r3, r1
 800b7d4:	4610      	mov	r0, r2
 800b7d6:	4619      	mov	r1, r3
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	461a      	mov	r2, r3
 800b7dc:	f04f 0300 	mov.w	r3, #0
 800b7e0:	f7f4 fd66 	bl	80002b0 <__aeabi_uldivmod>
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	460b      	mov	r3, r1
 800b7e8:	4613      	mov	r3, r2
 800b7ea:	61fb      	str	r3, [r7, #28]
 800b7ec:	e04a      	b.n	800b884 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b7ee:	4b30      	ldr	r3, [pc, #192]	; (800b8b0 <HAL_RCC_GetSysClockFreq+0x358>)
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	099b      	lsrs	r3, r3, #6
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	f04f 0300 	mov.w	r3, #0
 800b7fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b7fe:	f04f 0100 	mov.w	r1, #0
 800b802:	ea02 0400 	and.w	r4, r2, r0
 800b806:	ea03 0501 	and.w	r5, r3, r1
 800b80a:	4620      	mov	r0, r4
 800b80c:	4629      	mov	r1, r5
 800b80e:	f04f 0200 	mov.w	r2, #0
 800b812:	f04f 0300 	mov.w	r3, #0
 800b816:	014b      	lsls	r3, r1, #5
 800b818:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b81c:	0142      	lsls	r2, r0, #5
 800b81e:	4610      	mov	r0, r2
 800b820:	4619      	mov	r1, r3
 800b822:	1b00      	subs	r0, r0, r4
 800b824:	eb61 0105 	sbc.w	r1, r1, r5
 800b828:	f04f 0200 	mov.w	r2, #0
 800b82c:	f04f 0300 	mov.w	r3, #0
 800b830:	018b      	lsls	r3, r1, #6
 800b832:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b836:	0182      	lsls	r2, r0, #6
 800b838:	1a12      	subs	r2, r2, r0
 800b83a:	eb63 0301 	sbc.w	r3, r3, r1
 800b83e:	f04f 0000 	mov.w	r0, #0
 800b842:	f04f 0100 	mov.w	r1, #0
 800b846:	00d9      	lsls	r1, r3, #3
 800b848:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b84c:	00d0      	lsls	r0, r2, #3
 800b84e:	4602      	mov	r2, r0
 800b850:	460b      	mov	r3, r1
 800b852:	1912      	adds	r2, r2, r4
 800b854:	eb45 0303 	adc.w	r3, r5, r3
 800b858:	f04f 0000 	mov.w	r0, #0
 800b85c:	f04f 0100 	mov.w	r1, #0
 800b860:	0299      	lsls	r1, r3, #10
 800b862:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b866:	0290      	lsls	r0, r2, #10
 800b868:	4602      	mov	r2, r0
 800b86a:	460b      	mov	r3, r1
 800b86c:	4610      	mov	r0, r2
 800b86e:	4619      	mov	r1, r3
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	461a      	mov	r2, r3
 800b874:	f04f 0300 	mov.w	r3, #0
 800b878:	f7f4 fd1a 	bl	80002b0 <__aeabi_uldivmod>
 800b87c:	4602      	mov	r2, r0
 800b87e:	460b      	mov	r3, r1
 800b880:	4613      	mov	r3, r2
 800b882:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800b884:	4b0a      	ldr	r3, [pc, #40]	; (800b8b0 <HAL_RCC_GetSysClockFreq+0x358>)
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	0f1b      	lsrs	r3, r3, #28
 800b88a:	f003 0307 	and.w	r3, r3, #7
 800b88e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800b890:	69fa      	ldr	r2, [r7, #28]
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	fbb2 f3f3 	udiv	r3, r2, r3
 800b898:	61bb      	str	r3, [r7, #24]
      break;
 800b89a:	e002      	b.n	800b8a2 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b89c:	4b05      	ldr	r3, [pc, #20]	; (800b8b4 <HAL_RCC_GetSysClockFreq+0x35c>)
 800b89e:	61bb      	str	r3, [r7, #24]
      break;
 800b8a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b8a2:	69bb      	ldr	r3, [r7, #24]
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3720      	adds	r7, #32
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b8ae:	bf00      	nop
 800b8b0:	40023800 	.word	0x40023800
 800b8b4:	00f42400 	.word	0x00f42400
 800b8b8:	007a1200 	.word	0x007a1200

0800b8bc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b086      	sub	sp, #24
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d101      	bne.n	800b8ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	e28d      	b.n	800bdea <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f003 0301 	and.w	r3, r3, #1
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	f000 8083 	beq.w	800b9e2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b8dc:	4b94      	ldr	r3, [pc, #592]	; (800bb30 <HAL_RCC_OscConfig+0x274>)
 800b8de:	689b      	ldr	r3, [r3, #8]
 800b8e0:	f003 030c 	and.w	r3, r3, #12
 800b8e4:	2b04      	cmp	r3, #4
 800b8e6:	d019      	beq.n	800b91c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b8e8:	4b91      	ldr	r3, [pc, #580]	; (800bb30 <HAL_RCC_OscConfig+0x274>)
 800b8ea:	689b      	ldr	r3, [r3, #8]
 800b8ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b8f0:	2b08      	cmp	r3, #8
 800b8f2:	d106      	bne.n	800b902 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b8f4:	4b8e      	ldr	r3, [pc, #568]	; (800bb30 <HAL_RCC_OscConfig+0x274>)
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b8fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b900:	d00c      	beq.n	800b91c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b902:	4b8b      	ldr	r3, [pc, #556]	; (800bb30 <HAL_RCC_OscConfig+0x274>)
 800b904:	689b      	ldr	r3, [r3, #8]
 800b906:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b90a:	2b0c      	cmp	r3, #12
 800b90c:	d112      	bne.n	800b934 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b90e:	4b88      	ldr	r3, [pc, #544]	; (800bb30 <HAL_RCC_OscConfig+0x274>)
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b916:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b91a:	d10b      	bne.n	800b934 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b91c:	4b84      	ldr	r3, [pc, #528]	; (800bb30 <HAL_RCC_OscConfig+0x274>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b924:	2b00      	cmp	r3, #0
 800b926:	d05b      	beq.n	800b9e0 <HAL_RCC_OscConfig+0x124>
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	685b      	ldr	r3, [r3, #4]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d157      	bne.n	800b9e0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800b930:	2301      	movs	r3, #1
 800b932:	e25a      	b.n	800bdea <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b93c:	d106      	bne.n	800b94c <HAL_RCC_OscConfig+0x90>
 800b93e:	4b7c      	ldr	r3, [pc, #496]	; (800bb30 <HAL_RCC_OscConfig+0x274>)
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	4a7b      	ldr	r2, [pc, #492]	; (800bb30 <HAL_RCC_OscConfig+0x274>)
 800b944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b948:	6013      	str	r3, [r2, #0]
 800b94a:	e01d      	b.n	800b988 <HAL_RCC_OscConfig+0xcc>
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	685b      	ldr	r3, [r3, #4]
 800b950:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b954:	d10c      	bne.n	800b970 <HAL_RCC_OscConfig+0xb4>
 800b956:	4b76      	ldr	r3, [pc, #472]	; (800bb30 <HAL_RCC_OscConfig+0x274>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4a75      	ldr	r2, [pc, #468]	; (800bb30 <HAL_RCC_OscConfig+0x274>)
 800b95c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b960:	6013      	str	r3, [r2, #0]
 800b962:	4b73      	ldr	r3, [pc, #460]	; (800bb30 <HAL_RCC_OscConfig+0x274>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4a72      	ldr	r2, [pc, #456]	; (800bb30 <HAL_RCC_OscConfig+0x274>)
 800b968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b96c:	6013      	str	r3, [r2, #0]
 800b96e:	e00b      	b.n	800b988 <HAL_RCC_OscConfig+0xcc>
 800b970:	4b6f      	ldr	r3, [pc, #444]	; (800bb30 <HAL_RCC_OscConfig+0x274>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	4a6e      	ldr	r2, [pc, #440]	; (800bb30 <HAL_RCC_OscConfig+0x274>)
 800b976:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b97a:	6013      	str	r3, [r2, #0]
 800b97c:	4b6c      	ldr	r3, [pc, #432]	; (800bb30 <HAL_RCC_OscConfig+0x274>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4a6b      	ldr	r2, [pc, #428]	; (800bb30 <HAL_RCC_OscConfig+0x274>)
 800b982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b986:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d013      	beq.n	800b9b8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b990:	f7fa fdec 	bl	800656c <HAL_GetTick>
 800b994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b996:	e008      	b.n	800b9aa <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b998:	f7fa fde8 	bl	800656c <HAL_GetTick>
 800b99c:	4602      	mov	r2, r0
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	1ad3      	subs	r3, r2, r3
 800b9a2:	2b64      	cmp	r3, #100	; 0x64
 800b9a4:	d901      	bls.n	800b9aa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800b9a6:	2303      	movs	r3, #3
 800b9a8:	e21f      	b.n	800bdea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b9aa:	4b61      	ldr	r3, [pc, #388]	; (800bb30 <HAL_RCC_OscConfig+0x274>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d0f0      	beq.n	800b998 <HAL_RCC_OscConfig+0xdc>
 800b9b6:	e014      	b.n	800b9e2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9b8:	f7fa fdd8 	bl	800656c <HAL_GetTick>
 800b9bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b9be:	e008      	b.n	800b9d2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b9c0:	f7fa fdd4 	bl	800656c <HAL_GetTick>
 800b9c4:	4602      	mov	r2, r0
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	1ad3      	subs	r3, r2, r3
 800b9ca:	2b64      	cmp	r3, #100	; 0x64
 800b9cc:	d901      	bls.n	800b9d2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800b9ce:	2303      	movs	r3, #3
 800b9d0:	e20b      	b.n	800bdea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b9d2:	4b57      	ldr	r3, [pc, #348]	; (800bb30 <HAL_RCC_OscConfig+0x274>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d1f0      	bne.n	800b9c0 <HAL_RCC_OscConfig+0x104>
 800b9de:	e000      	b.n	800b9e2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b9e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f003 0302 	and.w	r3, r3, #2
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d06f      	beq.n	800bace <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b9ee:	4b50      	ldr	r3, [pc, #320]	; (800bb30 <HAL_RCC_OscConfig+0x274>)
 800b9f0:	689b      	ldr	r3, [r3, #8]
 800b9f2:	f003 030c 	and.w	r3, r3, #12
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d017      	beq.n	800ba2a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b9fa:	4b4d      	ldr	r3, [pc, #308]	; (800bb30 <HAL_RCC_OscConfig+0x274>)
 800b9fc:	689b      	ldr	r3, [r3, #8]
 800b9fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800ba02:	2b08      	cmp	r3, #8
 800ba04:	d105      	bne.n	800ba12 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800ba06:	4b4a      	ldr	r3, [pc, #296]	; (800bb30 <HAL_RCC_OscConfig+0x274>)
 800ba08:	685b      	ldr	r3, [r3, #4]
 800ba0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d00b      	beq.n	800ba2a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ba12:	4b47      	ldr	r3, [pc, #284]	; (800bb30 <HAL_RCC_OscConfig+0x274>)
 800ba14:	689b      	ldr	r3, [r3, #8]
 800ba16:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800ba1a:	2b0c      	cmp	r3, #12
 800ba1c:	d11c      	bne.n	800ba58 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ba1e:	4b44      	ldr	r3, [pc, #272]	; (800bb30 <HAL_RCC_OscConfig+0x274>)
 800ba20:	685b      	ldr	r3, [r3, #4]
 800ba22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d116      	bne.n	800ba58 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ba2a:	4b41      	ldr	r3, [pc, #260]	; (800bb30 <HAL_RCC_OscConfig+0x274>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f003 0302 	and.w	r3, r3, #2
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d005      	beq.n	800ba42 <HAL_RCC_OscConfig+0x186>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	68db      	ldr	r3, [r3, #12]
 800ba3a:	2b01      	cmp	r3, #1
 800ba3c:	d001      	beq.n	800ba42 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800ba3e:	2301      	movs	r3, #1
 800ba40:	e1d3      	b.n	800bdea <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ba42:	4b3b      	ldr	r3, [pc, #236]	; (800bb30 <HAL_RCC_OscConfig+0x274>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	691b      	ldr	r3, [r3, #16]
 800ba4e:	00db      	lsls	r3, r3, #3
 800ba50:	4937      	ldr	r1, [pc, #220]	; (800bb30 <HAL_RCC_OscConfig+0x274>)
 800ba52:	4313      	orrs	r3, r2
 800ba54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ba56:	e03a      	b.n	800bace <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	68db      	ldr	r3, [r3, #12]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d020      	beq.n	800baa2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ba60:	4b34      	ldr	r3, [pc, #208]	; (800bb34 <HAL_RCC_OscConfig+0x278>)
 800ba62:	2201      	movs	r2, #1
 800ba64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba66:	f7fa fd81 	bl	800656c <HAL_GetTick>
 800ba6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ba6c:	e008      	b.n	800ba80 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ba6e:	f7fa fd7d 	bl	800656c <HAL_GetTick>
 800ba72:	4602      	mov	r2, r0
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	1ad3      	subs	r3, r2, r3
 800ba78:	2b02      	cmp	r3, #2
 800ba7a:	d901      	bls.n	800ba80 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800ba7c:	2303      	movs	r3, #3
 800ba7e:	e1b4      	b.n	800bdea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ba80:	4b2b      	ldr	r3, [pc, #172]	; (800bb30 <HAL_RCC_OscConfig+0x274>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f003 0302 	and.w	r3, r3, #2
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d0f0      	beq.n	800ba6e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ba8c:	4b28      	ldr	r3, [pc, #160]	; (800bb30 <HAL_RCC_OscConfig+0x274>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	691b      	ldr	r3, [r3, #16]
 800ba98:	00db      	lsls	r3, r3, #3
 800ba9a:	4925      	ldr	r1, [pc, #148]	; (800bb30 <HAL_RCC_OscConfig+0x274>)
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	600b      	str	r3, [r1, #0]
 800baa0:	e015      	b.n	800bace <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800baa2:	4b24      	ldr	r3, [pc, #144]	; (800bb34 <HAL_RCC_OscConfig+0x278>)
 800baa4:	2200      	movs	r2, #0
 800baa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800baa8:	f7fa fd60 	bl	800656c <HAL_GetTick>
 800baac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800baae:	e008      	b.n	800bac2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bab0:	f7fa fd5c 	bl	800656c <HAL_GetTick>
 800bab4:	4602      	mov	r2, r0
 800bab6:	693b      	ldr	r3, [r7, #16]
 800bab8:	1ad3      	subs	r3, r2, r3
 800baba:	2b02      	cmp	r3, #2
 800babc:	d901      	bls.n	800bac2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800babe:	2303      	movs	r3, #3
 800bac0:	e193      	b.n	800bdea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bac2:	4b1b      	ldr	r3, [pc, #108]	; (800bb30 <HAL_RCC_OscConfig+0x274>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f003 0302 	and.w	r3, r3, #2
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d1f0      	bne.n	800bab0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f003 0308 	and.w	r3, r3, #8
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d036      	beq.n	800bb48 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	695b      	ldr	r3, [r3, #20]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d016      	beq.n	800bb10 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bae2:	4b15      	ldr	r3, [pc, #84]	; (800bb38 <HAL_RCC_OscConfig+0x27c>)
 800bae4:	2201      	movs	r2, #1
 800bae6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bae8:	f7fa fd40 	bl	800656c <HAL_GetTick>
 800baec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800baee:	e008      	b.n	800bb02 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800baf0:	f7fa fd3c 	bl	800656c <HAL_GetTick>
 800baf4:	4602      	mov	r2, r0
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	1ad3      	subs	r3, r2, r3
 800bafa:	2b02      	cmp	r3, #2
 800bafc:	d901      	bls.n	800bb02 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800bafe:	2303      	movs	r3, #3
 800bb00:	e173      	b.n	800bdea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bb02:	4b0b      	ldr	r3, [pc, #44]	; (800bb30 <HAL_RCC_OscConfig+0x274>)
 800bb04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb06:	f003 0302 	and.w	r3, r3, #2
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d0f0      	beq.n	800baf0 <HAL_RCC_OscConfig+0x234>
 800bb0e:	e01b      	b.n	800bb48 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bb10:	4b09      	ldr	r3, [pc, #36]	; (800bb38 <HAL_RCC_OscConfig+0x27c>)
 800bb12:	2200      	movs	r2, #0
 800bb14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb16:	f7fa fd29 	bl	800656c <HAL_GetTick>
 800bb1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bb1c:	e00e      	b.n	800bb3c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bb1e:	f7fa fd25 	bl	800656c <HAL_GetTick>
 800bb22:	4602      	mov	r2, r0
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	1ad3      	subs	r3, r2, r3
 800bb28:	2b02      	cmp	r3, #2
 800bb2a:	d907      	bls.n	800bb3c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800bb2c:	2303      	movs	r3, #3
 800bb2e:	e15c      	b.n	800bdea <HAL_RCC_OscConfig+0x52e>
 800bb30:	40023800 	.word	0x40023800
 800bb34:	42470000 	.word	0x42470000
 800bb38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bb3c:	4b8a      	ldr	r3, [pc, #552]	; (800bd68 <HAL_RCC_OscConfig+0x4ac>)
 800bb3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb40:	f003 0302 	and.w	r3, r3, #2
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d1ea      	bne.n	800bb1e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f003 0304 	and.w	r3, r3, #4
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	f000 8097 	beq.w	800bc84 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bb56:	2300      	movs	r3, #0
 800bb58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bb5a:	4b83      	ldr	r3, [pc, #524]	; (800bd68 <HAL_RCC_OscConfig+0x4ac>)
 800bb5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d10f      	bne.n	800bb86 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bb66:	2300      	movs	r3, #0
 800bb68:	60bb      	str	r3, [r7, #8]
 800bb6a:	4b7f      	ldr	r3, [pc, #508]	; (800bd68 <HAL_RCC_OscConfig+0x4ac>)
 800bb6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb6e:	4a7e      	ldr	r2, [pc, #504]	; (800bd68 <HAL_RCC_OscConfig+0x4ac>)
 800bb70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb74:	6413      	str	r3, [r2, #64]	; 0x40
 800bb76:	4b7c      	ldr	r3, [pc, #496]	; (800bd68 <HAL_RCC_OscConfig+0x4ac>)
 800bb78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb7e:	60bb      	str	r3, [r7, #8]
 800bb80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bb82:	2301      	movs	r3, #1
 800bb84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bb86:	4b79      	ldr	r3, [pc, #484]	; (800bd6c <HAL_RCC_OscConfig+0x4b0>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d118      	bne.n	800bbc4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bb92:	4b76      	ldr	r3, [pc, #472]	; (800bd6c <HAL_RCC_OscConfig+0x4b0>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	4a75      	ldr	r2, [pc, #468]	; (800bd6c <HAL_RCC_OscConfig+0x4b0>)
 800bb98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bb9e:	f7fa fce5 	bl	800656c <HAL_GetTick>
 800bba2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bba4:	e008      	b.n	800bbb8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bba6:	f7fa fce1 	bl	800656c <HAL_GetTick>
 800bbaa:	4602      	mov	r2, r0
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	1ad3      	subs	r3, r2, r3
 800bbb0:	2b02      	cmp	r3, #2
 800bbb2:	d901      	bls.n	800bbb8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800bbb4:	2303      	movs	r3, #3
 800bbb6:	e118      	b.n	800bdea <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bbb8:	4b6c      	ldr	r3, [pc, #432]	; (800bd6c <HAL_RCC_OscConfig+0x4b0>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d0f0      	beq.n	800bba6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	689b      	ldr	r3, [r3, #8]
 800bbc8:	2b01      	cmp	r3, #1
 800bbca:	d106      	bne.n	800bbda <HAL_RCC_OscConfig+0x31e>
 800bbcc:	4b66      	ldr	r3, [pc, #408]	; (800bd68 <HAL_RCC_OscConfig+0x4ac>)
 800bbce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbd0:	4a65      	ldr	r2, [pc, #404]	; (800bd68 <HAL_RCC_OscConfig+0x4ac>)
 800bbd2:	f043 0301 	orr.w	r3, r3, #1
 800bbd6:	6713      	str	r3, [r2, #112]	; 0x70
 800bbd8:	e01c      	b.n	800bc14 <HAL_RCC_OscConfig+0x358>
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	689b      	ldr	r3, [r3, #8]
 800bbde:	2b05      	cmp	r3, #5
 800bbe0:	d10c      	bne.n	800bbfc <HAL_RCC_OscConfig+0x340>
 800bbe2:	4b61      	ldr	r3, [pc, #388]	; (800bd68 <HAL_RCC_OscConfig+0x4ac>)
 800bbe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbe6:	4a60      	ldr	r2, [pc, #384]	; (800bd68 <HAL_RCC_OscConfig+0x4ac>)
 800bbe8:	f043 0304 	orr.w	r3, r3, #4
 800bbec:	6713      	str	r3, [r2, #112]	; 0x70
 800bbee:	4b5e      	ldr	r3, [pc, #376]	; (800bd68 <HAL_RCC_OscConfig+0x4ac>)
 800bbf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbf2:	4a5d      	ldr	r2, [pc, #372]	; (800bd68 <HAL_RCC_OscConfig+0x4ac>)
 800bbf4:	f043 0301 	orr.w	r3, r3, #1
 800bbf8:	6713      	str	r3, [r2, #112]	; 0x70
 800bbfa:	e00b      	b.n	800bc14 <HAL_RCC_OscConfig+0x358>
 800bbfc:	4b5a      	ldr	r3, [pc, #360]	; (800bd68 <HAL_RCC_OscConfig+0x4ac>)
 800bbfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc00:	4a59      	ldr	r2, [pc, #356]	; (800bd68 <HAL_RCC_OscConfig+0x4ac>)
 800bc02:	f023 0301 	bic.w	r3, r3, #1
 800bc06:	6713      	str	r3, [r2, #112]	; 0x70
 800bc08:	4b57      	ldr	r3, [pc, #348]	; (800bd68 <HAL_RCC_OscConfig+0x4ac>)
 800bc0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc0c:	4a56      	ldr	r2, [pc, #344]	; (800bd68 <HAL_RCC_OscConfig+0x4ac>)
 800bc0e:	f023 0304 	bic.w	r3, r3, #4
 800bc12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	689b      	ldr	r3, [r3, #8]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d015      	beq.n	800bc48 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc1c:	f7fa fca6 	bl	800656c <HAL_GetTick>
 800bc20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bc22:	e00a      	b.n	800bc3a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bc24:	f7fa fca2 	bl	800656c <HAL_GetTick>
 800bc28:	4602      	mov	r2, r0
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	1ad3      	subs	r3, r2, r3
 800bc2e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d901      	bls.n	800bc3a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800bc36:	2303      	movs	r3, #3
 800bc38:	e0d7      	b.n	800bdea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bc3a:	4b4b      	ldr	r3, [pc, #300]	; (800bd68 <HAL_RCC_OscConfig+0x4ac>)
 800bc3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc3e:	f003 0302 	and.w	r3, r3, #2
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d0ee      	beq.n	800bc24 <HAL_RCC_OscConfig+0x368>
 800bc46:	e014      	b.n	800bc72 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc48:	f7fa fc90 	bl	800656c <HAL_GetTick>
 800bc4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bc4e:	e00a      	b.n	800bc66 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bc50:	f7fa fc8c 	bl	800656c <HAL_GetTick>
 800bc54:	4602      	mov	r2, r0
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	1ad3      	subs	r3, r2, r3
 800bc5a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d901      	bls.n	800bc66 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800bc62:	2303      	movs	r3, #3
 800bc64:	e0c1      	b.n	800bdea <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bc66:	4b40      	ldr	r3, [pc, #256]	; (800bd68 <HAL_RCC_OscConfig+0x4ac>)
 800bc68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc6a:	f003 0302 	and.w	r3, r3, #2
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d1ee      	bne.n	800bc50 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bc72:	7dfb      	ldrb	r3, [r7, #23]
 800bc74:	2b01      	cmp	r3, #1
 800bc76:	d105      	bne.n	800bc84 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bc78:	4b3b      	ldr	r3, [pc, #236]	; (800bd68 <HAL_RCC_OscConfig+0x4ac>)
 800bc7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc7c:	4a3a      	ldr	r2, [pc, #232]	; (800bd68 <HAL_RCC_OscConfig+0x4ac>)
 800bc7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bc82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	699b      	ldr	r3, [r3, #24]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	f000 80ad 	beq.w	800bde8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bc8e:	4b36      	ldr	r3, [pc, #216]	; (800bd68 <HAL_RCC_OscConfig+0x4ac>)
 800bc90:	689b      	ldr	r3, [r3, #8]
 800bc92:	f003 030c 	and.w	r3, r3, #12
 800bc96:	2b08      	cmp	r3, #8
 800bc98:	d060      	beq.n	800bd5c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	699b      	ldr	r3, [r3, #24]
 800bc9e:	2b02      	cmp	r3, #2
 800bca0:	d145      	bne.n	800bd2e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bca2:	4b33      	ldr	r3, [pc, #204]	; (800bd70 <HAL_RCC_OscConfig+0x4b4>)
 800bca4:	2200      	movs	r2, #0
 800bca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bca8:	f7fa fc60 	bl	800656c <HAL_GetTick>
 800bcac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bcae:	e008      	b.n	800bcc2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bcb0:	f7fa fc5c 	bl	800656c <HAL_GetTick>
 800bcb4:	4602      	mov	r2, r0
 800bcb6:	693b      	ldr	r3, [r7, #16]
 800bcb8:	1ad3      	subs	r3, r2, r3
 800bcba:	2b02      	cmp	r3, #2
 800bcbc:	d901      	bls.n	800bcc2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800bcbe:	2303      	movs	r3, #3
 800bcc0:	e093      	b.n	800bdea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bcc2:	4b29      	ldr	r3, [pc, #164]	; (800bd68 <HAL_RCC_OscConfig+0x4ac>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d1f0      	bne.n	800bcb0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	69da      	ldr	r2, [r3, #28]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	6a1b      	ldr	r3, [r3, #32]
 800bcd6:	431a      	orrs	r2, r3
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcdc:	019b      	lsls	r3, r3, #6
 800bcde:	431a      	orrs	r2, r3
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bce4:	085b      	lsrs	r3, r3, #1
 800bce6:	3b01      	subs	r3, #1
 800bce8:	041b      	lsls	r3, r3, #16
 800bcea:	431a      	orrs	r2, r3
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcf0:	061b      	lsls	r3, r3, #24
 800bcf2:	431a      	orrs	r2, r3
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcf8:	071b      	lsls	r3, r3, #28
 800bcfa:	491b      	ldr	r1, [pc, #108]	; (800bd68 <HAL_RCC_OscConfig+0x4ac>)
 800bcfc:	4313      	orrs	r3, r2
 800bcfe:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bd00:	4b1b      	ldr	r3, [pc, #108]	; (800bd70 <HAL_RCC_OscConfig+0x4b4>)
 800bd02:	2201      	movs	r2, #1
 800bd04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd06:	f7fa fc31 	bl	800656c <HAL_GetTick>
 800bd0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bd0c:	e008      	b.n	800bd20 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bd0e:	f7fa fc2d 	bl	800656c <HAL_GetTick>
 800bd12:	4602      	mov	r2, r0
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	1ad3      	subs	r3, r2, r3
 800bd18:	2b02      	cmp	r3, #2
 800bd1a:	d901      	bls.n	800bd20 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800bd1c:	2303      	movs	r3, #3
 800bd1e:	e064      	b.n	800bdea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bd20:	4b11      	ldr	r3, [pc, #68]	; (800bd68 <HAL_RCC_OscConfig+0x4ac>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d0f0      	beq.n	800bd0e <HAL_RCC_OscConfig+0x452>
 800bd2c:	e05c      	b.n	800bde8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bd2e:	4b10      	ldr	r3, [pc, #64]	; (800bd70 <HAL_RCC_OscConfig+0x4b4>)
 800bd30:	2200      	movs	r2, #0
 800bd32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd34:	f7fa fc1a 	bl	800656c <HAL_GetTick>
 800bd38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bd3a:	e008      	b.n	800bd4e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bd3c:	f7fa fc16 	bl	800656c <HAL_GetTick>
 800bd40:	4602      	mov	r2, r0
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	1ad3      	subs	r3, r2, r3
 800bd46:	2b02      	cmp	r3, #2
 800bd48:	d901      	bls.n	800bd4e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800bd4a:	2303      	movs	r3, #3
 800bd4c:	e04d      	b.n	800bdea <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bd4e:	4b06      	ldr	r3, [pc, #24]	; (800bd68 <HAL_RCC_OscConfig+0x4ac>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d1f0      	bne.n	800bd3c <HAL_RCC_OscConfig+0x480>
 800bd5a:	e045      	b.n	800bde8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	699b      	ldr	r3, [r3, #24]
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	d107      	bne.n	800bd74 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800bd64:	2301      	movs	r3, #1
 800bd66:	e040      	b.n	800bdea <HAL_RCC_OscConfig+0x52e>
 800bd68:	40023800 	.word	0x40023800
 800bd6c:	40007000 	.word	0x40007000
 800bd70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800bd74:	4b1f      	ldr	r3, [pc, #124]	; (800bdf4 <HAL_RCC_OscConfig+0x538>)
 800bd76:	685b      	ldr	r3, [r3, #4]
 800bd78:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	699b      	ldr	r3, [r3, #24]
 800bd7e:	2b01      	cmp	r3, #1
 800bd80:	d030      	beq.n	800bde4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d129      	bne.n	800bde4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d122      	bne.n	800bde4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800bd9e:	68fa      	ldr	r2, [r7, #12]
 800bda0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800bda4:	4013      	ands	r3, r2
 800bda6:	687a      	ldr	r2, [r7, #4]
 800bda8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bdaa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800bdac:	4293      	cmp	r3, r2
 800bdae:	d119      	bne.n	800bde4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdba:	085b      	lsrs	r3, r3, #1
 800bdbc:	3b01      	subs	r3, #1
 800bdbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d10f      	bne.n	800bde4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d107      	bne.n	800bde4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdde:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bde0:	429a      	cmp	r2, r3
 800bde2:	d001      	beq.n	800bde8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800bde4:	2301      	movs	r3, #1
 800bde6:	e000      	b.n	800bdea <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800bde8:	2300      	movs	r3, #0
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3718      	adds	r7, #24
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	bf00      	nop
 800bdf4:	40023800 	.word	0x40023800

0800bdf8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b082      	sub	sp, #8
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d101      	bne.n	800be0a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800be06:	2301      	movs	r3, #1
 800be08:	e083      	b.n	800bf12 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	7f5b      	ldrb	r3, [r3, #29]
 800be0e:	b2db      	uxtb	r3, r3
 800be10:	2b00      	cmp	r3, #0
 800be12:	d105      	bne.n	800be20 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2200      	movs	r2, #0
 800be18:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800be1a:	6878      	ldr	r0, [r7, #4]
 800be1c:	f7fa f906 	bl	800602c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2202      	movs	r2, #2
 800be24:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	22ca      	movs	r2, #202	; 0xca
 800be2c:	625a      	str	r2, [r3, #36]	; 0x24
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	2253      	movs	r2, #83	; 0x53
 800be34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 f944 	bl	800c0c4 <RTC_EnterInitMode>
 800be3c:	4603      	mov	r3, r0
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d008      	beq.n	800be54 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	22ff      	movs	r2, #255	; 0xff
 800be48:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2204      	movs	r2, #4
 800be4e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800be50:	2301      	movs	r3, #1
 800be52:	e05e      	b.n	800bf12 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	689b      	ldr	r3, [r3, #8]
 800be5a:	687a      	ldr	r2, [r7, #4]
 800be5c:	6812      	ldr	r2, [r2, #0]
 800be5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800be62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be66:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	6899      	ldr	r1, [r3, #8]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	685a      	ldr	r2, [r3, #4]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	691b      	ldr	r3, [r3, #16]
 800be76:	431a      	orrs	r2, r3
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	695b      	ldr	r3, [r3, #20]
 800be7c:	431a      	orrs	r2, r3
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	430a      	orrs	r2, r1
 800be84:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	687a      	ldr	r2, [r7, #4]
 800be8c:	68d2      	ldr	r2, [r2, #12]
 800be8e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	6919      	ldr	r1, [r3, #16]
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	689b      	ldr	r3, [r3, #8]
 800be9a:	041a      	lsls	r2, r3, #16
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	430a      	orrs	r2, r1
 800bea2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	68da      	ldr	r2, [r3, #12]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800beb2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	689b      	ldr	r3, [r3, #8]
 800beba:	f003 0320 	and.w	r3, r3, #32
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d10e      	bne.n	800bee0 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 f8d6 	bl	800c074 <HAL_RTC_WaitForSynchro>
 800bec8:	4603      	mov	r3, r0
 800beca:	2b00      	cmp	r3, #0
 800becc:	d008      	beq.n	800bee0 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	22ff      	movs	r2, #255	; 0xff
 800bed4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2204      	movs	r2, #4
 800beda:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800bedc:	2301      	movs	r3, #1
 800bede:	e018      	b.n	800bf12 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800beee:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	699a      	ldr	r2, [r3, #24]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	430a      	orrs	r2, r1
 800bf00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	22ff      	movs	r2, #255	; 0xff
 800bf08:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2201      	movs	r2, #1
 800bf0e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800bf10:	2300      	movs	r3, #0
  }
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3708      	adds	r7, #8
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}

0800bf1a <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bf1a:	b580      	push	{r7, lr}
 800bf1c:	b086      	sub	sp, #24
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	60f8      	str	r0, [r7, #12]
 800bf22:	60b9      	str	r1, [r7, #8]
 800bf24:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800bf26:	2300      	movs	r3, #0
 800bf28:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	691b      	ldr	r3, [r3, #16]
 800bf3a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800bf4c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800bf50:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	0c1b      	lsrs	r3, r3, #16
 800bf56:	b2db      	uxtb	r3, r3
 800bf58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf5c:	b2da      	uxtb	r2, r3
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	0a1b      	lsrs	r3, r3, #8
 800bf66:	b2db      	uxtb	r3, r3
 800bf68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf6c:	b2da      	uxtb	r2, r3
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	b2db      	uxtb	r3, r3
 800bf76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf7a:	b2da      	uxtb	r2, r3
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	0c1b      	lsrs	r3, r3, #16
 800bf84:	b2db      	uxtb	r3, r3
 800bf86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf8a:	b2da      	uxtb	r2, r3
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d11a      	bne.n	800bfcc <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	781b      	ldrb	r3, [r3, #0]
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f000 f8be 	bl	800c11c <RTC_Bcd2ToByte>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	785b      	ldrb	r3, [r3, #1]
 800bfac:	4618      	mov	r0, r3
 800bfae:	f000 f8b5 	bl	800c11c <RTC_Bcd2ToByte>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	461a      	mov	r2, r3
 800bfb6:	68bb      	ldr	r3, [r7, #8]
 800bfb8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	789b      	ldrb	r3, [r3, #2]
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f000 f8ac 	bl	800c11c <RTC_Bcd2ToByte>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	68bb      	ldr	r3, [r7, #8]
 800bfca:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800bfcc:	2300      	movs	r3, #0
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3718      	adds	r7, #24
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}

0800bfd6 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bfd6:	b580      	push	{r7, lr}
 800bfd8:	b086      	sub	sp, #24
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	60f8      	str	r0, [r7, #12]
 800bfde:	60b9      	str	r1, [r7, #8]
 800bfe0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bff0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bff4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	0c1b      	lsrs	r3, r3, #16
 800bffa:	b2da      	uxtb	r2, r3
 800bffc:	68bb      	ldr	r3, [r7, #8]
 800bffe:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	0a1b      	lsrs	r3, r3, #8
 800c004:	b2db      	uxtb	r3, r3
 800c006:	f003 031f 	and.w	r3, r3, #31
 800c00a:	b2da      	uxtb	r2, r3
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800c010:	697b      	ldr	r3, [r7, #20]
 800c012:	b2db      	uxtb	r3, r3
 800c014:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c018:	b2da      	uxtb	r2, r3
 800c01a:	68bb      	ldr	r3, [r7, #8]
 800c01c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	0b5b      	lsrs	r3, r3, #13
 800c022:	b2db      	uxtb	r3, r3
 800c024:	f003 0307 	and.w	r3, r3, #7
 800c028:	b2da      	uxtb	r2, r3
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d11a      	bne.n	800c06a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	78db      	ldrb	r3, [r3, #3]
 800c038:	4618      	mov	r0, r3
 800c03a:	f000 f86f 	bl	800c11c <RTC_Bcd2ToByte>
 800c03e:	4603      	mov	r3, r0
 800c040:	461a      	mov	r2, r3
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	785b      	ldrb	r3, [r3, #1]
 800c04a:	4618      	mov	r0, r3
 800c04c:	f000 f866 	bl	800c11c <RTC_Bcd2ToByte>
 800c050:	4603      	mov	r3, r0
 800c052:	461a      	mov	r2, r3
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	789b      	ldrb	r3, [r3, #2]
 800c05c:	4618      	mov	r0, r3
 800c05e:	f000 f85d 	bl	800c11c <RTC_Bcd2ToByte>
 800c062:	4603      	mov	r3, r0
 800c064:	461a      	mov	r2, r3
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c06a:	2300      	movs	r3, #0
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3718      	adds	r7, #24
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}

0800c074 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b084      	sub	sp, #16
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c07c:	2300      	movs	r3, #0
 800c07e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	68da      	ldr	r2, [r3, #12]
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c08e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c090:	f7fa fa6c 	bl	800656c <HAL_GetTick>
 800c094:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c096:	e009      	b.n	800c0ac <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c098:	f7fa fa68 	bl	800656c <HAL_GetTick>
 800c09c:	4602      	mov	r2, r0
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	1ad3      	subs	r3, r2, r3
 800c0a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c0a6:	d901      	bls.n	800c0ac <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800c0a8:	2303      	movs	r3, #3
 800c0aa:	e007      	b.n	800c0bc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	68db      	ldr	r3, [r3, #12]
 800c0b2:	f003 0320 	and.w	r3, r3, #32
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d0ee      	beq.n	800c098 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800c0ba:	2300      	movs	r3, #0
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3710      	adds	r7, #16
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	68db      	ldr	r3, [r3, #12]
 800c0d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d119      	bne.n	800c112 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f04f 32ff 	mov.w	r2, #4294967295
 800c0e6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c0e8:	f7fa fa40 	bl	800656c <HAL_GetTick>
 800c0ec:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c0ee:	e009      	b.n	800c104 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c0f0:	f7fa fa3c 	bl	800656c <HAL_GetTick>
 800c0f4:	4602      	mov	r2, r0
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	1ad3      	subs	r3, r2, r3
 800c0fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c0fe:	d901      	bls.n	800c104 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800c100:	2303      	movs	r3, #3
 800c102:	e007      	b.n	800c114 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	68db      	ldr	r3, [r3, #12]
 800c10a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d0ee      	beq.n	800c0f0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800c112:	2300      	movs	r3, #0
}
 800c114:	4618      	mov	r0, r3
 800c116:	3710      	adds	r7, #16
 800c118:	46bd      	mov	sp, r7
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b085      	sub	sp, #20
 800c120:	af00      	add	r7, sp, #0
 800c122:	4603      	mov	r3, r0
 800c124:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800c126:	2300      	movs	r3, #0
 800c128:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800c12a:	79fb      	ldrb	r3, [r7, #7]
 800c12c:	091b      	lsrs	r3, r3, #4
 800c12e:	b2db      	uxtb	r3, r3
 800c130:	461a      	mov	r2, r3
 800c132:	4613      	mov	r3, r2
 800c134:	009b      	lsls	r3, r3, #2
 800c136:	4413      	add	r3, r2
 800c138:	005b      	lsls	r3, r3, #1
 800c13a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800c13c:	79fb      	ldrb	r3, [r7, #7]
 800c13e:	f003 030f 	and.w	r3, r3, #15
 800c142:	b2da      	uxtb	r2, r3
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	b2db      	uxtb	r3, r3
 800c148:	4413      	add	r3, r2
 800c14a:	b2db      	uxtb	r3, r3
}
 800c14c:	4618      	mov	r0, r3
 800c14e:	3714      	adds	r7, #20
 800c150:	46bd      	mov	sp, r7
 800c152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c156:	4770      	bx	lr

0800c158 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800c158:	b480      	push	{r7}
 800c15a:	b085      	sub	sp, #20
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
 800c160:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800c162:	2300      	movs	r3, #0
 800c164:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	3350      	adds	r3, #80	; 0x50
 800c16c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	009b      	lsls	r3, r3, #2
 800c172:	68fa      	ldr	r2, [r7, #12]
 800c174:	4413      	add	r3, r2
 800c176:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	681b      	ldr	r3, [r3, #0]
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	3714      	adds	r7, #20
 800c180:	46bd      	mov	sp, r7
 800c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c186:	4770      	bx	lr

0800c188 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b082      	sub	sp, #8
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d101      	bne.n	800c19a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c196:	2301      	movs	r3, #1
 800c198:	e022      	b.n	800c1e0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c1a0:	b2db      	uxtb	r3, r3
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d105      	bne.n	800c1b2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f7f9 ff67 	bl	8006080 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2203      	movs	r2, #3
 800c1b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f000 f814 	bl	800c1e8 <HAL_SD_InitCard>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d001      	beq.n	800c1ca <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	e00a      	b.n	800c1e0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2201      	movs	r2, #1
 800c1da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c1de:	2300      	movs	r3, #0
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3708      	adds	r7, #8
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c1e8:	b5b0      	push	{r4, r5, r7, lr}
 800c1ea:	b08e      	sub	sp, #56	; 0x38
 800c1ec:	af04      	add	r7, sp, #16
 800c1ee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800c200:	2300      	movs	r3, #0
 800c202:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800c204:	2376      	movs	r3, #118	; 0x76
 800c206:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681d      	ldr	r5, [r3, #0]
 800c20c:	466c      	mov	r4, sp
 800c20e:	f107 0314 	add.w	r3, r7, #20
 800c212:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c216:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c21a:	f107 0308 	add.w	r3, r7, #8
 800c21e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c220:	4628      	mov	r0, r5
 800c222:	f001 fde9 	bl	800ddf8 <SDIO_Init>
 800c226:	4603      	mov	r3, r0
 800c228:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800c22c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c230:	2b00      	cmp	r3, #0
 800c232:	d001      	beq.n	800c238 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800c234:	2301      	movs	r3, #1
 800c236:	e04c      	b.n	800c2d2 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800c238:	4b28      	ldr	r3, [pc, #160]	; (800c2dc <HAL_SD_InitCard+0xf4>)
 800c23a:	2200      	movs	r2, #0
 800c23c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	4618      	mov	r0, r3
 800c244:	f001 fe21 	bl	800de8a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800c248:	4b24      	ldr	r3, [pc, #144]	; (800c2dc <HAL_SD_InitCard+0xf4>)
 800c24a:	2201      	movs	r2, #1
 800c24c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f000 ffee 	bl	800d230 <SD_PowerON>
 800c254:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c256:	6a3b      	ldr	r3, [r7, #32]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d00b      	beq.n	800c274 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2201      	movs	r2, #1
 800c260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c268:	6a3b      	ldr	r3, [r7, #32]
 800c26a:	431a      	orrs	r2, r3
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c270:	2301      	movs	r3, #1
 800c272:	e02e      	b.n	800c2d2 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f000 ff0f 	bl	800d098 <SD_InitCard>
 800c27a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c27c:	6a3b      	ldr	r3, [r7, #32]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d00b      	beq.n	800c29a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2201      	movs	r2, #1
 800c286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c28e:	6a3b      	ldr	r3, [r7, #32]
 800c290:	431a      	orrs	r2, r3
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c296:	2301      	movs	r3, #1
 800c298:	e01b      	b.n	800c2d2 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f001 fe84 	bl	800dfb0 <SDMMC_CmdBlockLength>
 800c2a8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c2aa:	6a3b      	ldr	r3, [r7, #32]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d00f      	beq.n	800c2d0 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	4a0a      	ldr	r2, [pc, #40]	; (800c2e0 <HAL_SD_InitCard+0xf8>)
 800c2b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2bc:	6a3b      	ldr	r3, [r7, #32]
 800c2be:	431a      	orrs	r2, r3
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	e000      	b.n	800c2d2 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 800c2d0:	2300      	movs	r3, #0
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3728      	adds	r7, #40	; 0x28
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bdb0      	pop	{r4, r5, r7, pc}
 800c2da:	bf00      	nop
 800c2dc:	422580a0 	.word	0x422580a0
 800c2e0:	004005ff 	.word	0x004005ff

0800c2e4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b08c      	sub	sp, #48	; 0x30
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	60f8      	str	r0, [r7, #12]
 800c2ec:	60b9      	str	r1, [r7, #8]
 800c2ee:	607a      	str	r2, [r7, #4]
 800c2f0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d107      	bne.n	800c30c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c300:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c308:	2301      	movs	r3, #1
 800c30a:	e0be      	b.n	800c48a <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c312:	b2db      	uxtb	r3, r3
 800c314:	2b01      	cmp	r3, #1
 800c316:	f040 80b7 	bne.w	800c488 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	2200      	movs	r2, #0
 800c31e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c320:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	441a      	add	r2, r3
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d907      	bls.n	800c33e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c332:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c33a:	2301      	movs	r3, #1
 800c33c:	e0a5      	b.n	800c48a <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	2203      	movs	r2, #3
 800c342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2200      	movs	r2, #0
 800c34c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800c35c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c362:	4a4c      	ldr	r2, [pc, #304]	; (800c494 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 800c364:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c36a:	4a4b      	ldr	r2, [pc, #300]	; (800c498 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800c36c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c372:	2200      	movs	r2, #0
 800c374:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c37a:	2200      	movs	r2, #0
 800c37c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c38e:	689a      	ldr	r2, [r3, #8]
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	430a      	orrs	r2, r1
 800c398:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	3380      	adds	r3, #128	; 0x80
 800c3a4:	4619      	mov	r1, r3
 800c3a6:	68ba      	ldr	r2, [r7, #8]
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	025b      	lsls	r3, r3, #9
 800c3ac:	089b      	lsrs	r3, r3, #2
 800c3ae:	f7fb fd87 	bl	8007ec0 <HAL_DMA_Start_IT>
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d017      	beq.n	800c3e8 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800c3c6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	4a33      	ldr	r2, [pc, #204]	; (800c49c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800c3ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	2201      	movs	r2, #1
 800c3e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	e050      	b.n	800c48a <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800c3e8:	4b2d      	ldr	r3, [pc, #180]	; (800c4a0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3f2:	2b01      	cmp	r3, #1
 800c3f4:	d002      	beq.n	800c3fc <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 800c3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3f8:	025b      	lsls	r3, r3, #9
 800c3fa:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c3fc:	f04f 33ff 	mov.w	r3, #4294967295
 800c400:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	025b      	lsls	r3, r3, #9
 800c406:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800c408:	2390      	movs	r3, #144	; 0x90
 800c40a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800c40c:	2302      	movs	r3, #2
 800c40e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800c410:	2300      	movs	r3, #0
 800c412:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800c414:	2301      	movs	r3, #1
 800c416:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f107 0210 	add.w	r2, r7, #16
 800c420:	4611      	mov	r1, r2
 800c422:	4618      	mov	r0, r3
 800c424:	f001 fd98 	bl	800df58 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	2b01      	cmp	r3, #1
 800c42c:	d90a      	bls.n	800c444 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	2282      	movs	r2, #130	; 0x82
 800c432:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c43a:	4618      	mov	r0, r3
 800c43c:	f001 fdfc 	bl	800e038 <SDMMC_CmdReadMultiBlock>
 800c440:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c442:	e009      	b.n	800c458 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	2281      	movs	r2, #129	; 0x81
 800c448:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c450:	4618      	mov	r0, r3
 800c452:	f001 fdcf 	bl	800dff4 <SDMMC_CmdReadSingleBlock>
 800c456:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800c458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d012      	beq.n	800c484 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	4a0e      	ldr	r2, [pc, #56]	; (800c49c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800c464:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c46c:	431a      	orrs	r2, r3
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	2201      	movs	r2, #1
 800c476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	2200      	movs	r2, #0
 800c47e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800c480:	2301      	movs	r3, #1
 800c482:	e002      	b.n	800c48a <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 800c484:	2300      	movs	r3, #0
 800c486:	e000      	b.n	800c48a <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 800c488:	2302      	movs	r3, #2
  }
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3730      	adds	r7, #48	; 0x30
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}
 800c492:	bf00      	nop
 800c494:	0800cea7 	.word	0x0800cea7
 800c498:	0800cf19 	.word	0x0800cf19
 800c49c:	004005ff 	.word	0x004005ff
 800c4a0:	4225858c 	.word	0x4225858c

0800c4a4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b08c      	sub	sp, #48	; 0x30
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	60f8      	str	r0, [r7, #12]
 800c4ac:	60b9      	str	r1, [r7, #8]
 800c4ae:	607a      	str	r2, [r7, #4]
 800c4b0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d107      	bne.n	800c4cc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4c0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	e0c1      	b.n	800c650 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c4d2:	b2db      	uxtb	r3, r3
 800c4d4:	2b01      	cmp	r3, #1
 800c4d6:	f040 80ba 	bne.w	800c64e <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c4e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	441a      	add	r2, r3
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d907      	bls.n	800c4fe <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4f2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	e0a8      	b.n	800c650 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	2203      	movs	r2, #3
 800c502:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	2200      	movs	r2, #0
 800c50c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	f042 021a 	orr.w	r2, r2, #26
 800c51c:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c522:	4a4d      	ldr	r2, [pc, #308]	; (800c658 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 800c524:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c52a:	4a4c      	ldr	r2, [pc, #304]	; (800c65c <HAL_SD_WriteBlocks_DMA+0x1b8>)
 800c52c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c532:	2200      	movs	r2, #0
 800c534:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c53a:	2b01      	cmp	r3, #1
 800c53c:	d002      	beq.n	800c544 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800c53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c540:	025b      	lsls	r3, r3, #9
 800c542:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	2b01      	cmp	r3, #1
 800c548:	d90a      	bls.n	800c560 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	22a0      	movs	r2, #160	; 0xa0
 800c54e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c556:	4618      	mov	r0, r3
 800c558:	f001 fdb2 	bl	800e0c0 <SDMMC_CmdWriteMultiBlock>
 800c55c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c55e:	e009      	b.n	800c574 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	2290      	movs	r2, #144	; 0x90
 800c564:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c56c:	4618      	mov	r0, r3
 800c56e:	f001 fd85 	bl	800e07c <SDMMC_CmdWriteSingleBlock>
 800c572:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c576:	2b00      	cmp	r3, #0
 800c578:	d012      	beq.n	800c5a0 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	4a38      	ldr	r2, [pc, #224]	; (800c660 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800c580:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c588:	431a      	orrs	r2, r3
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	2201      	movs	r2, #1
 800c592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2200      	movs	r2, #0
 800c59a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c59c:	2301      	movs	r3, #1
 800c59e:	e057      	b.n	800c650 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800c5a0:	4b30      	ldr	r3, [pc, #192]	; (800c664 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800c5a2:	2201      	movs	r2, #1
 800c5a4:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5aa:	2240      	movs	r2, #64	; 0x40
 800c5ac:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5be:	689a      	ldr	r2, [r3, #8]
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	430a      	orrs	r2, r1
 800c5c8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800c5ce:	68b9      	ldr	r1, [r7, #8]
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	3380      	adds	r3, #128	; 0x80
 800c5d6:	461a      	mov	r2, r3
 800c5d8:	683b      	ldr	r3, [r7, #0]
 800c5da:	025b      	lsls	r3, r3, #9
 800c5dc:	089b      	lsrs	r3, r3, #2
 800c5de:	f7fb fc6f 	bl	8007ec0 <HAL_DMA_Start_IT>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d01a      	beq.n	800c61e <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f022 021a 	bic.w	r2, r2, #26
 800c5f6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4a18      	ldr	r2, [pc, #96]	; (800c660 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800c5fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c604:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	2201      	movs	r2, #1
 800c610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2200      	movs	r2, #0
 800c618:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c61a:	2301      	movs	r3, #1
 800c61c:	e018      	b.n	800c650 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c61e:	f04f 33ff 	mov.w	r3, #4294967295
 800c622:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	025b      	lsls	r3, r3, #9
 800c628:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800c62a:	2390      	movs	r3, #144	; 0x90
 800c62c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800c62e:	2300      	movs	r3, #0
 800c630:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800c632:	2300      	movs	r3, #0
 800c634:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800c636:	2301      	movs	r3, #1
 800c638:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f107 0210 	add.w	r2, r7, #16
 800c642:	4611      	mov	r1, r2
 800c644:	4618      	mov	r0, r3
 800c646:	f001 fc87 	bl	800df58 <SDIO_ConfigData>

      return HAL_OK;
 800c64a:	2300      	movs	r3, #0
 800c64c:	e000      	b.n	800c650 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 800c64e:	2302      	movs	r3, #2
  }
}
 800c650:	4618      	mov	r0, r3
 800c652:	3730      	adds	r7, #48	; 0x30
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}
 800c658:	0800ce7d 	.word	0x0800ce7d
 800c65c:	0800cf19 	.word	0x0800cf19
 800c660:	004005ff 	.word	0x004005ff
 800c664:	4225858c 	.word	0x4225858c

0800c668 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b084      	sub	sp, #16
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c674:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c67c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c680:	2b00      	cmp	r3, #0
 800c682:	d008      	beq.n	800c696 <HAL_SD_IRQHandler+0x2e>
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	f003 0308 	and.w	r3, r3, #8
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d003      	beq.n	800c696 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f000 ffed 	bl	800d66e <SD_Read_IT>
 800c694:	e155      	b.n	800c942 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c69c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	f000 808f 	beq.w	800c7c4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c6ae:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6b6:	687a      	ldr	r2, [r7, #4]
 800c6b8:	6812      	ldr	r2, [r2, #0]
 800c6ba:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800c6be:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800c6c2:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f022 0201 	bic.w	r2, r2, #1
 800c6d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	f003 0308 	and.w	r3, r3, #8
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d039      	beq.n	800c752 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	f003 0302 	and.w	r3, r3, #2
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d104      	bne.n	800c6f2 <HAL_SD_IRQHandler+0x8a>
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	f003 0320 	and.w	r3, r3, #32
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d011      	beq.n	800c716 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f001 fd04 	bl	800e104 <SDMMC_CmdStopTransfer>
 800c6fc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d008      	beq.n	800c716 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	431a      	orrs	r2, r3
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f000 f91f 	bl	800c954 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	f240 523a 	movw	r2, #1338	; 0x53a
 800c71e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2201      	movs	r2, #1
 800c724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2200      	movs	r2, #0
 800c72c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	f003 0301 	and.w	r3, r3, #1
 800c734:	2b00      	cmp	r3, #0
 800c736:	d104      	bne.n	800c742 <HAL_SD_IRQHandler+0xda>
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	f003 0302 	and.w	r3, r3, #2
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d003      	beq.n	800c74a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f003 fce6 	bl	8010114 <HAL_SD_RxCpltCallback>
 800c748:	e0fb      	b.n	800c942 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f003 fcd8 	bl	8010100 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c750:	e0f7      	b.n	800c942 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c758:	2b00      	cmp	r3, #0
 800c75a:	f000 80f2 	beq.w	800c942 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	f003 0320 	and.w	r3, r3, #32
 800c764:	2b00      	cmp	r3, #0
 800c766:	d011      	beq.n	800c78c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	4618      	mov	r0, r3
 800c76e:	f001 fcc9 	bl	800e104 <SDMMC_CmdStopTransfer>
 800c772:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d008      	beq.n	800c78c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	431a      	orrs	r2, r3
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f000 f8e4 	bl	800c954 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	f003 0301 	and.w	r3, r3, #1
 800c792:	2b00      	cmp	r3, #0
 800c794:	f040 80d5 	bne.w	800c942 <HAL_SD_IRQHandler+0x2da>
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	f003 0302 	and.w	r3, r3, #2
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	f040 80cf 	bne.w	800c942 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	f022 0208 	bic.w	r2, r2, #8
 800c7b2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f003 fc9f 	bl	8010100 <HAL_SD_TxCpltCallback>
}
 800c7c2:	e0be      	b.n	800c942 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d008      	beq.n	800c7e4 <HAL_SD_IRQHandler+0x17c>
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	f003 0308 	and.w	r3, r3, #8
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d003      	beq.n	800c7e4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f000 ff97 	bl	800d710 <SD_Write_IT>
 800c7e2:	e0ae      	b.n	800c942 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7ea:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	f000 80a7 	beq.w	800c942 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7fa:	f003 0302 	and.w	r3, r3, #2
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d005      	beq.n	800c80e <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c806:	f043 0202 	orr.w	r2, r3, #2
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c814:	f003 0308 	and.w	r3, r3, #8
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d005      	beq.n	800c828 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c820:	f043 0208 	orr.w	r2, r3, #8
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c82e:	f003 0320 	and.w	r3, r3, #32
 800c832:	2b00      	cmp	r3, #0
 800c834:	d005      	beq.n	800c842 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c83a:	f043 0220 	orr.w	r2, r3, #32
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c848:	f003 0310 	and.w	r3, r3, #16
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d005      	beq.n	800c85c <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c854:	f043 0210 	orr.w	r2, r3, #16
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	f240 523a 	movw	r2, #1338	; 0x53a
 800c864:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c874:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	4618      	mov	r0, r3
 800c87c:	f001 fc42 	bl	800e104 <SDMMC_CmdStopTransfer>
 800c880:	4602      	mov	r2, r0
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c886:	431a      	orrs	r2, r3
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	f003 0308 	and.w	r3, r3, #8
 800c892:	2b00      	cmp	r3, #0
 800c894:	d00a      	beq.n	800c8ac <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2201      	movs	r2, #1
 800c89a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f000 f855 	bl	800c954 <HAL_SD_ErrorCallback>
}
 800c8aa:	e04a      	b.n	800c942 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d045      	beq.n	800c942 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	f003 0310 	and.w	r3, r3, #16
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d104      	bne.n	800c8ca <HAL_SD_IRQHandler+0x262>
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	f003 0320 	and.w	r3, r3, #32
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d011      	beq.n	800c8ee <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8ce:	4a1f      	ldr	r2, [pc, #124]	; (800c94c <HAL_SD_IRQHandler+0x2e4>)
 800c8d0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f7fb fb4a 	bl	8007f70 <HAL_DMA_Abort_IT>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d02f      	beq.n	800c942 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f000 fb68 	bl	800cfbc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800c8ec:	e029      	b.n	800c942 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	f003 0301 	and.w	r3, r3, #1
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d104      	bne.n	800c902 <HAL_SD_IRQHandler+0x29a>
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	f003 0302 	and.w	r3, r3, #2
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d011      	beq.n	800c926 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c906:	4a12      	ldr	r2, [pc, #72]	; (800c950 <HAL_SD_IRQHandler+0x2e8>)
 800c908:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c90e:	4618      	mov	r0, r3
 800c910:	f7fb fb2e 	bl	8007f70 <HAL_DMA_Abort_IT>
 800c914:	4603      	mov	r3, r0
 800c916:	2b00      	cmp	r3, #0
 800c918:	d013      	beq.n	800c942 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c91e:	4618      	mov	r0, r3
 800c920:	f000 fb83 	bl	800d02a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800c924:	e00d      	b.n	800c942 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2200      	movs	r2, #0
 800c92a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2201      	movs	r2, #1
 800c930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2200      	movs	r2, #0
 800c938:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f003 fbd6 	bl	80100ec <HAL_SD_AbortCallback>
}
 800c940:	e7ff      	b.n	800c942 <HAL_SD_IRQHandler+0x2da>
 800c942:	bf00      	nop
 800c944:	3710      	adds	r7, #16
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	bf00      	nop
 800c94c:	0800cfbd 	.word	0x0800cfbd
 800c950:	0800d02b 	.word	0x0800d02b

0800c954 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c954:	b480      	push	{r7}
 800c956:	b083      	sub	sp, #12
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c95c:	bf00      	nop
 800c95e:	370c      	adds	r7, #12
 800c960:	46bd      	mov	sp, r7
 800c962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c966:	4770      	bx	lr

0800c968 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c968:	b480      	push	{r7}
 800c96a:	b083      	sub	sp, #12
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
 800c970:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c976:	0f9b      	lsrs	r3, r3, #30
 800c978:	b2da      	uxtb	r2, r3
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c982:	0e9b      	lsrs	r3, r3, #26
 800c984:	b2db      	uxtb	r3, r3
 800c986:	f003 030f 	and.w	r3, r3, #15
 800c98a:	b2da      	uxtb	r2, r3
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c994:	0e1b      	lsrs	r3, r3, #24
 800c996:	b2db      	uxtb	r3, r3
 800c998:	f003 0303 	and.w	r3, r3, #3
 800c99c:	b2da      	uxtb	r2, r3
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9a6:	0c1b      	lsrs	r3, r3, #16
 800c9a8:	b2da      	uxtb	r2, r3
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9b2:	0a1b      	lsrs	r3, r3, #8
 800c9b4:	b2da      	uxtb	r2, r3
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9be:	b2da      	uxtb	r2, r3
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c9c8:	0d1b      	lsrs	r3, r3, #20
 800c9ca:	b29a      	uxth	r2, r3
 800c9cc:	683b      	ldr	r3, [r7, #0]
 800c9ce:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c9d4:	0c1b      	lsrs	r3, r3, #16
 800c9d6:	b2db      	uxtb	r3, r3
 800c9d8:	f003 030f 	and.w	r3, r3, #15
 800c9dc:	b2da      	uxtb	r2, r3
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c9e6:	0bdb      	lsrs	r3, r3, #15
 800c9e8:	b2db      	uxtb	r3, r3
 800c9ea:	f003 0301 	and.w	r3, r3, #1
 800c9ee:	b2da      	uxtb	r2, r3
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c9f8:	0b9b      	lsrs	r3, r3, #14
 800c9fa:	b2db      	uxtb	r3, r3
 800c9fc:	f003 0301 	and.w	r3, r3, #1
 800ca00:	b2da      	uxtb	r2, r3
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca0a:	0b5b      	lsrs	r3, r3, #13
 800ca0c:	b2db      	uxtb	r3, r3
 800ca0e:	f003 0301 	and.w	r3, r3, #1
 800ca12:	b2da      	uxtb	r2, r3
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca1c:	0b1b      	lsrs	r3, r3, #12
 800ca1e:	b2db      	uxtb	r3, r3
 800ca20:	f003 0301 	and.w	r3, r3, #1
 800ca24:	b2da      	uxtb	r2, r3
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	2200      	movs	r2, #0
 800ca2e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d163      	bne.n	800cb00 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca3c:	009a      	lsls	r2, r3, #2
 800ca3e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ca42:	4013      	ands	r3, r2
 800ca44:	687a      	ldr	r2, [r7, #4]
 800ca46:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800ca48:	0f92      	lsrs	r2, r2, #30
 800ca4a:	431a      	orrs	r2, r3
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca54:	0edb      	lsrs	r3, r3, #27
 800ca56:	b2db      	uxtb	r3, r3
 800ca58:	f003 0307 	and.w	r3, r3, #7
 800ca5c:	b2da      	uxtb	r2, r3
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca66:	0e1b      	lsrs	r3, r3, #24
 800ca68:	b2db      	uxtb	r3, r3
 800ca6a:	f003 0307 	and.w	r3, r3, #7
 800ca6e:	b2da      	uxtb	r2, r3
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca78:	0d5b      	lsrs	r3, r3, #21
 800ca7a:	b2db      	uxtb	r3, r3
 800ca7c:	f003 0307 	and.w	r3, r3, #7
 800ca80:	b2da      	uxtb	r2, r3
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca8a:	0c9b      	lsrs	r3, r3, #18
 800ca8c:	b2db      	uxtb	r3, r3
 800ca8e:	f003 0307 	and.w	r3, r3, #7
 800ca92:	b2da      	uxtb	r2, r3
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca9c:	0bdb      	lsrs	r3, r3, #15
 800ca9e:	b2db      	uxtb	r3, r3
 800caa0:	f003 0307 	and.w	r3, r3, #7
 800caa4:	b2da      	uxtb	r2, r3
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	691b      	ldr	r3, [r3, #16]
 800caae:	1c5a      	adds	r2, r3, #1
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	7e1b      	ldrb	r3, [r3, #24]
 800cab8:	b2db      	uxtb	r3, r3
 800caba:	f003 0307 	and.w	r3, r3, #7
 800cabe:	3302      	adds	r3, #2
 800cac0:	2201      	movs	r2, #1
 800cac2:	fa02 f303 	lsl.w	r3, r2, r3
 800cac6:	687a      	ldr	r2, [r7, #4]
 800cac8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800caca:	fb02 f203 	mul.w	r2, r2, r3
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	7a1b      	ldrb	r3, [r3, #8]
 800cad6:	b2db      	uxtb	r3, r3
 800cad8:	f003 030f 	and.w	r3, r3, #15
 800cadc:	2201      	movs	r2, #1
 800cade:	409a      	lsls	r2, r3
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cae8:	687a      	ldr	r2, [r7, #4]
 800caea:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800caec:	0a52      	lsrs	r2, r2, #9
 800caee:	fb02 f203 	mul.w	r2, r2, r3
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cafc:	661a      	str	r2, [r3, #96]	; 0x60
 800cafe:	e031      	b.n	800cb64 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb04:	2b01      	cmp	r3, #1
 800cb06:	d11d      	bne.n	800cb44 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb0c:	041b      	lsls	r3, r3, #16
 800cb0e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb16:	0c1b      	lsrs	r3, r3, #16
 800cb18:	431a      	orrs	r2, r3
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	691b      	ldr	r3, [r3, #16]
 800cb22:	3301      	adds	r3, #1
 800cb24:	029a      	lsls	r2, r3, #10
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb38:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	661a      	str	r2, [r3, #96]	; 0x60
 800cb42:	e00f      	b.n	800cb64 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	4a58      	ldr	r2, [pc, #352]	; (800ccac <HAL_SD_GetCardCSD+0x344>)
 800cb4a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cb60:	2301      	movs	r3, #1
 800cb62:	e09d      	b.n	800cca0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb68:	0b9b      	lsrs	r3, r3, #14
 800cb6a:	b2db      	uxtb	r3, r3
 800cb6c:	f003 0301 	and.w	r3, r3, #1
 800cb70:	b2da      	uxtb	r2, r3
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb7a:	09db      	lsrs	r3, r3, #7
 800cb7c:	b2db      	uxtb	r3, r3
 800cb7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb82:	b2da      	uxtb	r2, r3
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb8c:	b2db      	uxtb	r3, r3
 800cb8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb92:	b2da      	uxtb	r2, r3
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb9c:	0fdb      	lsrs	r3, r3, #31
 800cb9e:	b2da      	uxtb	r2, r3
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cba8:	0f5b      	lsrs	r3, r3, #29
 800cbaa:	b2db      	uxtb	r3, r3
 800cbac:	f003 0303 	and.w	r3, r3, #3
 800cbb0:	b2da      	uxtb	r2, r3
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbba:	0e9b      	lsrs	r3, r3, #26
 800cbbc:	b2db      	uxtb	r3, r3
 800cbbe:	f003 0307 	and.w	r3, r3, #7
 800cbc2:	b2da      	uxtb	r2, r3
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbcc:	0d9b      	lsrs	r3, r3, #22
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	f003 030f 	and.w	r3, r3, #15
 800cbd4:	b2da      	uxtb	r2, r3
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbde:	0d5b      	lsrs	r3, r3, #21
 800cbe0:	b2db      	uxtb	r3, r3
 800cbe2:	f003 0301 	and.w	r3, r3, #1
 800cbe6:	b2da      	uxtb	r2, r3
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbfa:	0c1b      	lsrs	r3, r3, #16
 800cbfc:	b2db      	uxtb	r3, r3
 800cbfe:	f003 0301 	and.w	r3, r3, #1
 800cc02:	b2da      	uxtb	r2, r3
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc0e:	0bdb      	lsrs	r3, r3, #15
 800cc10:	b2db      	uxtb	r3, r3
 800cc12:	f003 0301 	and.w	r3, r3, #1
 800cc16:	b2da      	uxtb	r2, r3
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc22:	0b9b      	lsrs	r3, r3, #14
 800cc24:	b2db      	uxtb	r3, r3
 800cc26:	f003 0301 	and.w	r3, r3, #1
 800cc2a:	b2da      	uxtb	r2, r3
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc36:	0b5b      	lsrs	r3, r3, #13
 800cc38:	b2db      	uxtb	r3, r3
 800cc3a:	f003 0301 	and.w	r3, r3, #1
 800cc3e:	b2da      	uxtb	r2, r3
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc4a:	0b1b      	lsrs	r3, r3, #12
 800cc4c:	b2db      	uxtb	r3, r3
 800cc4e:	f003 0301 	and.w	r3, r3, #1
 800cc52:	b2da      	uxtb	r2, r3
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc5e:	0a9b      	lsrs	r3, r3, #10
 800cc60:	b2db      	uxtb	r3, r3
 800cc62:	f003 0303 	and.w	r3, r3, #3
 800cc66:	b2da      	uxtb	r2, r3
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc72:	0a1b      	lsrs	r3, r3, #8
 800cc74:	b2db      	uxtb	r3, r3
 800cc76:	f003 0303 	and.w	r3, r3, #3
 800cc7a:	b2da      	uxtb	r2, r3
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc86:	085b      	lsrs	r3, r3, #1
 800cc88:	b2db      	uxtb	r3, r3
 800cc8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc8e:	b2da      	uxtb	r2, r3
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	2201      	movs	r2, #1
 800cc9a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800cc9e:	2300      	movs	r3, #0
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	370c      	adds	r7, #12
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr
 800ccac:	004005ff 	.word	0x004005ff

0800ccb0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ccb0:	b480      	push	{r7}
 800ccb2:	b083      	sub	sp, #12
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
 800ccb8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ccfa:	2300      	movs	r3, #0
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	370c      	adds	r7, #12
 800cd00:	46bd      	mov	sp, r7
 800cd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd06:	4770      	bx	lr

0800cd08 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800cd08:	b5b0      	push	{r4, r5, r7, lr}
 800cd0a:	b08e      	sub	sp, #56	; 0x38
 800cd0c:	af04      	add	r7, sp, #16
 800cd0e:	6078      	str	r0, [r7, #4]
 800cd10:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800cd12:	2300      	movs	r3, #0
 800cd14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2203      	movs	r2, #3
 800cd1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd24:	2b03      	cmp	r3, #3
 800cd26:	d02e      	beq.n	800cd86 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd2e:	d106      	bne.n	800cd3e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd34:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	639a      	str	r2, [r3, #56]	; 0x38
 800cd3c:	e029      	b.n	800cd92 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800cd3e:	683b      	ldr	r3, [r7, #0]
 800cd40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd44:	d10a      	bne.n	800cd5c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f000 fb28 	bl	800d39c <SD_WideBus_Enable>
 800cd4c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd52:	6a3b      	ldr	r3, [r7, #32]
 800cd54:	431a      	orrs	r2, r3
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	639a      	str	r2, [r3, #56]	; 0x38
 800cd5a:	e01a      	b.n	800cd92 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d10a      	bne.n	800cd78 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f000 fb65 	bl	800d432 <SD_WideBus_Disable>
 800cd68:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd6e:	6a3b      	ldr	r3, [r7, #32]
 800cd70:	431a      	orrs	r2, r3
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	639a      	str	r2, [r3, #56]	; 0x38
 800cd76:	e00c      	b.n	800cd92 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd7c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	639a      	str	r2, [r3, #56]	; 0x38
 800cd84:	e005      	b.n	800cd92 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd8a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d00b      	beq.n	800cdb2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	4a26      	ldr	r2, [pc, #152]	; (800ce38 <HAL_SD_ConfigWideBusOperation+0x130>)
 800cda0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2201      	movs	r2, #1
 800cda6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800cdaa:	2301      	movs	r3, #1
 800cdac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cdb0:	e01f      	b.n	800cdf2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	685b      	ldr	r3, [r3, #4]
 800cdb6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	689b      	ldr	r3, [r3, #8]
 800cdbc:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	68db      	ldr	r3, [r3, #12]
 800cdc2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	695b      	ldr	r3, [r3, #20]
 800cdcc:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	699b      	ldr	r3, [r3, #24]
 800cdd2:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681d      	ldr	r5, [r3, #0]
 800cdd8:	466c      	mov	r4, sp
 800cdda:	f107 0314 	add.w	r3, r7, #20
 800cdde:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cde2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cde6:	f107 0308 	add.w	r3, r7, #8
 800cdea:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cdec:	4628      	mov	r0, r5
 800cdee:	f001 f803 	bl	800ddf8 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f001 f8d8 	bl	800dfb0 <SDMMC_CmdBlockLength>
 800ce00:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ce02:	6a3b      	ldr	r3, [r7, #32]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d00c      	beq.n	800ce22 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	4a0a      	ldr	r2, [pc, #40]	; (800ce38 <HAL_SD_ConfigWideBusOperation+0x130>)
 800ce0e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce14:	6a3b      	ldr	r3, [r7, #32]
 800ce16:	431a      	orrs	r2, r3
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2201      	movs	r2, #1
 800ce26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800ce2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3728      	adds	r7, #40	; 0x28
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bdb0      	pop	{r4, r5, r7, pc}
 800ce36:	bf00      	nop
 800ce38:	004005ff 	.word	0x004005ff

0800ce3c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b086      	sub	sp, #24
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ce44:	2300      	movs	r3, #0
 800ce46:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ce48:	f107 030c 	add.w	r3, r7, #12
 800ce4c:	4619      	mov	r1, r3
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f000 fa7c 	bl	800d34c <SD_SendStatus>
 800ce54:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d005      	beq.n	800ce68 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	431a      	orrs	r2, r3
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	0a5b      	lsrs	r3, r3, #9
 800ce6c:	f003 030f 	and.w	r3, r3, #15
 800ce70:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ce72:	693b      	ldr	r3, [r7, #16]
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3718      	adds	r7, #24
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b085      	sub	sp, #20
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce88:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ce98:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ce9a:	bf00      	nop
 800ce9c:	3714      	adds	r7, #20
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea4:	4770      	bx	lr

0800cea6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cea6:	b580      	push	{r7, lr}
 800cea8:	b084      	sub	sp, #16
 800ceaa:	af00      	add	r7, sp, #0
 800ceac:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceb2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceb8:	2b82      	cmp	r3, #130	; 0x82
 800ceba:	d111      	bne.n	800cee0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4618      	mov	r0, r3
 800cec2:	f001 f91f 	bl	800e104 <SDMMC_CmdStopTransfer>
 800cec6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800cec8:	68bb      	ldr	r3, [r7, #8]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d008      	beq.n	800cee0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	431a      	orrs	r2, r3
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800ceda:	68f8      	ldr	r0, [r7, #12]
 800cedc:	f7ff fd3a 	bl	800c954 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	f022 0208 	bic.w	r2, r2, #8
 800ceee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	f240 523a 	movw	r2, #1338	; 0x53a
 800cef8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	2201      	movs	r2, #1
 800cefe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	2200      	movs	r2, #0
 800cf06:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800cf08:	68f8      	ldr	r0, [r7, #12]
 800cf0a:	f003 f903 	bl	8010114 <HAL_SD_RxCpltCallback>
#endif
}
 800cf0e:	bf00      	nop
 800cf10:	3710      	adds	r7, #16
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
	...

0800cf18 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b086      	sub	sp, #24
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf24:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f7fb f9ce 	bl	80082c8 <HAL_DMA_GetError>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	2b02      	cmp	r3, #2
 800cf30:	d03e      	beq.n	800cfb0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800cf32:	697b      	ldr	r3, [r7, #20]
 800cf34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf38:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf40:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800cf42:	693b      	ldr	r3, [r7, #16]
 800cf44:	2b01      	cmp	r3, #1
 800cf46:	d002      	beq.n	800cf4e <SD_DMAError+0x36>
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	2b01      	cmp	r3, #1
 800cf4c:	d12d      	bne.n	800cfaa <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cf4e:	697b      	ldr	r3, [r7, #20]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	4a19      	ldr	r2, [pc, #100]	; (800cfb8 <SD_DMAError+0xa0>)
 800cf54:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800cf64:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf6a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800cf72:	6978      	ldr	r0, [r7, #20]
 800cf74:	f7ff ff62 	bl	800ce3c <HAL_SD_GetCardState>
 800cf78:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	2b06      	cmp	r3, #6
 800cf7e:	d002      	beq.n	800cf86 <SD_DMAError+0x6e>
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	2b05      	cmp	r3, #5
 800cf84:	d10a      	bne.n	800cf9c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cf86:	697b      	ldr	r3, [r7, #20]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	f001 f8ba 	bl	800e104 <SDMMC_CmdStopTransfer>
 800cf90:	4602      	mov	r2, r0
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf96:	431a      	orrs	r2, r3
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	2201      	movs	r2, #1
 800cfa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800cfaa:	6978      	ldr	r0, [r7, #20]
 800cfac:	f7ff fcd2 	bl	800c954 <HAL_SD_ErrorCallback>
#endif
  }
}
 800cfb0:	bf00      	nop
 800cfb2:	3718      	adds	r7, #24
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}
 800cfb8:	004005ff 	.word	0x004005ff

0800cfbc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b084      	sub	sp, #16
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfc8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f240 523a 	movw	r2, #1338	; 0x53a
 800cfd2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800cfd4:	68f8      	ldr	r0, [r7, #12]
 800cfd6:	f7ff ff31 	bl	800ce3c <HAL_SD_GetCardState>
 800cfda:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	2201      	movs	r2, #1
 800cfe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	2b06      	cmp	r3, #6
 800cfee:	d002      	beq.n	800cff6 <SD_DMATxAbort+0x3a>
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	2b05      	cmp	r3, #5
 800cff4:	d10a      	bne.n	800d00c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	4618      	mov	r0, r3
 800cffc:	f001 f882 	bl	800e104 <SDMMC_CmdStopTransfer>
 800d000:	4602      	mov	r2, r0
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d006:	431a      	orrs	r2, r3
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d010:	2b00      	cmp	r3, #0
 800d012:	d103      	bne.n	800d01c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d014:	68f8      	ldr	r0, [r7, #12]
 800d016:	f003 f869 	bl	80100ec <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d01a:	e002      	b.n	800d022 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d01c:	68f8      	ldr	r0, [r7, #12]
 800d01e:	f7ff fc99 	bl	800c954 <HAL_SD_ErrorCallback>
}
 800d022:	bf00      	nop
 800d024:	3710      	adds	r7, #16
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}

0800d02a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800d02a:	b580      	push	{r7, lr}
 800d02c:	b084      	sub	sp, #16
 800d02e:	af00      	add	r7, sp, #0
 800d030:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d036:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f240 523a 	movw	r2, #1338	; 0x53a
 800d040:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d042:	68f8      	ldr	r0, [r7, #12]
 800d044:	f7ff fefa 	bl	800ce3c <HAL_SD_GetCardState>
 800d048:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	2201      	movs	r2, #1
 800d04e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	2200      	movs	r2, #0
 800d056:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	2b06      	cmp	r3, #6
 800d05c:	d002      	beq.n	800d064 <SD_DMARxAbort+0x3a>
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	2b05      	cmp	r3, #5
 800d062:	d10a      	bne.n	800d07a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4618      	mov	r0, r3
 800d06a:	f001 f84b 	bl	800e104 <SDMMC_CmdStopTransfer>
 800d06e:	4602      	mov	r2, r0
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d074:	431a      	orrs	r2, r3
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d103      	bne.n	800d08a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d082:	68f8      	ldr	r0, [r7, #12]
 800d084:	f003 f832 	bl	80100ec <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d088:	e002      	b.n	800d090 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d08a:	68f8      	ldr	r0, [r7, #12]
 800d08c:	f7ff fc62 	bl	800c954 <HAL_SD_ErrorCallback>
}
 800d090:	bf00      	nop
 800d092:	3710      	adds	r7, #16
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}

0800d098 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d098:	b5b0      	push	{r4, r5, r7, lr}
 800d09a:	b094      	sub	sp, #80	; 0x50
 800d09c:	af04      	add	r7, sp, #16
 800d09e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f000 fefd 	bl	800dea8 <SDIO_GetPowerState>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d102      	bne.n	800d0ba <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d0b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d0b8:	e0b6      	b.n	800d228 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0be:	2b03      	cmp	r3, #3
 800d0c0:	d02f      	beq.n	800d122 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f001 f926 	bl	800e318 <SDMMC_CmdSendCID>
 800d0cc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d0ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d001      	beq.n	800d0d8 <SD_InitCard+0x40>
    {
      return errorstate;
 800d0d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0d6:	e0a7      	b.n	800d228 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	2100      	movs	r1, #0
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f000 ff27 	bl	800df32 <SDIO_GetResponse>
 800d0e4:	4602      	mov	r2, r0
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	2104      	movs	r1, #4
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f000 ff1e 	bl	800df32 <SDIO_GetResponse>
 800d0f6:	4602      	mov	r2, r0
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	2108      	movs	r1, #8
 800d102:	4618      	mov	r0, r3
 800d104:	f000 ff15 	bl	800df32 <SDIO_GetResponse>
 800d108:	4602      	mov	r2, r0
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	210c      	movs	r1, #12
 800d114:	4618      	mov	r0, r3
 800d116:	f000 ff0c 	bl	800df32 <SDIO_GetResponse>
 800d11a:	4602      	mov	r2, r0
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d126:	2b03      	cmp	r3, #3
 800d128:	d00d      	beq.n	800d146 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	f107 020e 	add.w	r2, r7, #14
 800d132:	4611      	mov	r1, r2
 800d134:	4618      	mov	r0, r3
 800d136:	f001 f92c 	bl	800e392 <SDMMC_CmdSetRelAdd>
 800d13a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d13c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d001      	beq.n	800d146 <SD_InitCard+0xae>
    {
      return errorstate;
 800d142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d144:	e070      	b.n	800d228 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d14a:	2b03      	cmp	r3, #3
 800d14c:	d036      	beq.n	800d1bc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d14e:	89fb      	ldrh	r3, [r7, #14]
 800d150:	461a      	mov	r2, r3
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681a      	ldr	r2, [r3, #0]
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d15e:	041b      	lsls	r3, r3, #16
 800d160:	4619      	mov	r1, r3
 800d162:	4610      	mov	r0, r2
 800d164:	f001 f8f6 	bl	800e354 <SDMMC_CmdSendCSD>
 800d168:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d16a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d001      	beq.n	800d174 <SD_InitCard+0xdc>
    {
      return errorstate;
 800d170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d172:	e059      	b.n	800d228 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	2100      	movs	r1, #0
 800d17a:	4618      	mov	r0, r3
 800d17c:	f000 fed9 	bl	800df32 <SDIO_GetResponse>
 800d180:	4602      	mov	r2, r0
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	2104      	movs	r1, #4
 800d18c:	4618      	mov	r0, r3
 800d18e:	f000 fed0 	bl	800df32 <SDIO_GetResponse>
 800d192:	4602      	mov	r2, r0
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	2108      	movs	r1, #8
 800d19e:	4618      	mov	r0, r3
 800d1a0:	f000 fec7 	bl	800df32 <SDIO_GetResponse>
 800d1a4:	4602      	mov	r2, r0
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	210c      	movs	r1, #12
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f000 febe 	bl	800df32 <SDIO_GetResponse>
 800d1b6:	4602      	mov	r2, r0
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	2104      	movs	r1, #4
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f000 feb5 	bl	800df32 <SDIO_GetResponse>
 800d1c8:	4603      	mov	r3, r0
 800d1ca:	0d1a      	lsrs	r2, r3, #20
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d1d0:	f107 0310 	add.w	r3, r7, #16
 800d1d4:	4619      	mov	r1, r3
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f7ff fbc6 	bl	800c968 <HAL_SD_GetCardCSD>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d002      	beq.n	800d1e8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d1e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d1e6:	e01f      	b.n	800d228 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6819      	ldr	r1, [r3, #0]
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1f0:	041b      	lsls	r3, r3, #16
 800d1f2:	461a      	mov	r2, r3
 800d1f4:	f04f 0300 	mov.w	r3, #0
 800d1f8:	4608      	mov	r0, r1
 800d1fa:	f000 ffa5 	bl	800e148 <SDMMC_CmdSelDesel>
 800d1fe:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d202:	2b00      	cmp	r3, #0
 800d204:	d001      	beq.n	800d20a <SD_InitCard+0x172>
  {
    return errorstate;
 800d206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d208:	e00e      	b.n	800d228 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681d      	ldr	r5, [r3, #0]
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	466c      	mov	r4, sp
 800d212:	f103 0210 	add.w	r2, r3, #16
 800d216:	ca07      	ldmia	r2, {r0, r1, r2}
 800d218:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d21c:	3304      	adds	r3, #4
 800d21e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d220:	4628      	mov	r0, r5
 800d222:	f000 fde9 	bl	800ddf8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d226:	2300      	movs	r3, #0
}
 800d228:	4618      	mov	r0, r3
 800d22a:	3740      	adds	r7, #64	; 0x40
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bdb0      	pop	{r4, r5, r7, pc}

0800d230 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b086      	sub	sp, #24
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d238:	2300      	movs	r3, #0
 800d23a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800d23c:	2300      	movs	r3, #0
 800d23e:	617b      	str	r3, [r7, #20]
 800d240:	2300      	movs	r3, #0
 800d242:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	4618      	mov	r0, r3
 800d24a:	f000 ffa0 	bl	800e18e <SDMMC_CmdGoIdleState>
 800d24e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d001      	beq.n	800d25a <SD_PowerON+0x2a>
  {
    return errorstate;
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	e072      	b.n	800d340 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	4618      	mov	r0, r3
 800d260:	f000 ffb3 	bl	800e1ca <SDMMC_CmdOperCond>
 800d264:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d00d      	beq.n	800d288 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2200      	movs	r2, #0
 800d270:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	4618      	mov	r0, r3
 800d278:	f000 ff89 	bl	800e18e <SDMMC_CmdGoIdleState>
 800d27c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d004      	beq.n	800d28e <SD_PowerON+0x5e>
    {
      return errorstate;
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	e05b      	b.n	800d340 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2201      	movs	r2, #1
 800d28c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d292:	2b01      	cmp	r3, #1
 800d294:	d137      	bne.n	800d306 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	2100      	movs	r1, #0
 800d29c:	4618      	mov	r0, r3
 800d29e:	f000 ffb3 	bl	800e208 <SDMMC_CmdAppCommand>
 800d2a2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d02d      	beq.n	800d306 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d2aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d2ae:	e047      	b.n	800d340 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	2100      	movs	r1, #0
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f000 ffa6 	bl	800e208 <SDMMC_CmdAppCommand>
 800d2bc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d001      	beq.n	800d2c8 <SD_PowerON+0x98>
    {
      return errorstate;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	e03b      	b.n	800d340 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	491e      	ldr	r1, [pc, #120]	; (800d348 <SD_PowerON+0x118>)
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f000 ffbc 	bl	800e24c <SDMMC_CmdAppOperCommand>
 800d2d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d002      	beq.n	800d2e2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d2dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d2e0:	e02e      	b.n	800d340 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	2100      	movs	r1, #0
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f000 fe22 	bl	800df32 <SDIO_GetResponse>
 800d2ee:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d2f0:	697b      	ldr	r3, [r7, #20]
 800d2f2:	0fdb      	lsrs	r3, r3, #31
 800d2f4:	2b01      	cmp	r3, #1
 800d2f6:	d101      	bne.n	800d2fc <SD_PowerON+0xcc>
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	e000      	b.n	800d2fe <SD_PowerON+0xce>
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	613b      	str	r3, [r7, #16]

    count++;
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	3301      	adds	r3, #1
 800d304:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d30c:	4293      	cmp	r3, r2
 800d30e:	d802      	bhi.n	800d316 <SD_PowerON+0xe6>
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d0cc      	beq.n	800d2b0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d31c:	4293      	cmp	r3, r2
 800d31e:	d902      	bls.n	800d326 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d320:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d324:	e00c      	b.n	800d340 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d003      	beq.n	800d338 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2201      	movs	r2, #1
 800d334:	645a      	str	r2, [r3, #68]	; 0x44
 800d336:	e002      	b.n	800d33e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2200      	movs	r2, #0
 800d33c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800d33e:	2300      	movs	r3, #0
}
 800d340:	4618      	mov	r0, r3
 800d342:	3718      	adds	r7, #24
 800d344:	46bd      	mov	sp, r7
 800d346:	bd80      	pop	{r7, pc}
 800d348:	c1100000 	.word	0xc1100000

0800d34c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b084      	sub	sp, #16
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
 800d354:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d102      	bne.n	800d362 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d35c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d360:	e018      	b.n	800d394 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681a      	ldr	r2, [r3, #0]
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d36a:	041b      	lsls	r3, r3, #16
 800d36c:	4619      	mov	r1, r3
 800d36e:	4610      	mov	r0, r2
 800d370:	f001 f830 	bl	800e3d4 <SDMMC_CmdSendStatus>
 800d374:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d001      	beq.n	800d380 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	e009      	b.n	800d394 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	2100      	movs	r1, #0
 800d386:	4618      	mov	r0, r3
 800d388:	f000 fdd3 	bl	800df32 <SDIO_GetResponse>
 800d38c:	4602      	mov	r2, r0
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d392:	2300      	movs	r3, #0
}
 800d394:	4618      	mov	r0, r3
 800d396:	3710      	adds	r7, #16
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}

0800d39c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b086      	sub	sp, #24
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	60fb      	str	r3, [r7, #12]
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	2100      	movs	r1, #0
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f000 fdbd 	bl	800df32 <SDIO_GetResponse>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d3be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d3c2:	d102      	bne.n	800d3ca <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d3c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d3c8:	e02f      	b.n	800d42a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d3ca:	f107 030c 	add.w	r3, r7, #12
 800d3ce:	4619      	mov	r1, r3
 800d3d0:	6878      	ldr	r0, [r7, #4]
 800d3d2:	f000 f879 	bl	800d4c8 <SD_FindSCR>
 800d3d6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d001      	beq.n	800d3e2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d3de:	697b      	ldr	r3, [r7, #20]
 800d3e0:	e023      	b.n	800d42a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d01c      	beq.n	800d426 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681a      	ldr	r2, [r3, #0]
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3f4:	041b      	lsls	r3, r3, #16
 800d3f6:	4619      	mov	r1, r3
 800d3f8:	4610      	mov	r0, r2
 800d3fa:	f000 ff05 	bl	800e208 <SDMMC_CmdAppCommand>
 800d3fe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d400:	697b      	ldr	r3, [r7, #20]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d001      	beq.n	800d40a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	e00f      	b.n	800d42a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	2102      	movs	r1, #2
 800d410:	4618      	mov	r0, r3
 800d412:	f000 ff3e 	bl	800e292 <SDMMC_CmdBusWidth>
 800d416:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d418:	697b      	ldr	r3, [r7, #20]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d001      	beq.n	800d422 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d41e:	697b      	ldr	r3, [r7, #20]
 800d420:	e003      	b.n	800d42a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d422:	2300      	movs	r3, #0
 800d424:	e001      	b.n	800d42a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d426:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3718      	adds	r7, #24
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}

0800d432 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d432:	b580      	push	{r7, lr}
 800d434:	b086      	sub	sp, #24
 800d436:	af00      	add	r7, sp, #0
 800d438:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d43a:	2300      	movs	r3, #0
 800d43c:	60fb      	str	r3, [r7, #12]
 800d43e:	2300      	movs	r3, #0
 800d440:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	2100      	movs	r1, #0
 800d448:	4618      	mov	r0, r3
 800d44a:	f000 fd72 	bl	800df32 <SDIO_GetResponse>
 800d44e:	4603      	mov	r3, r0
 800d450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d454:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d458:	d102      	bne.n	800d460 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d45a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d45e:	e02f      	b.n	800d4c0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d460:	f107 030c 	add.w	r3, r7, #12
 800d464:	4619      	mov	r1, r3
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f000 f82e 	bl	800d4c8 <SD_FindSCR>
 800d46c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d46e:	697b      	ldr	r3, [r7, #20]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d001      	beq.n	800d478 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	e023      	b.n	800d4c0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d478:	693b      	ldr	r3, [r7, #16]
 800d47a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d01c      	beq.n	800d4bc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681a      	ldr	r2, [r3, #0]
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d48a:	041b      	lsls	r3, r3, #16
 800d48c:	4619      	mov	r1, r3
 800d48e:	4610      	mov	r0, r2
 800d490:	f000 feba 	bl	800e208 <SDMMC_CmdAppCommand>
 800d494:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d001      	beq.n	800d4a0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	e00f      	b.n	800d4c0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	2100      	movs	r1, #0
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f000 fef3 	bl	800e292 <SDMMC_CmdBusWidth>
 800d4ac:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d001      	beq.n	800d4b8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d4b4:	697b      	ldr	r3, [r7, #20]
 800d4b6:	e003      	b.n	800d4c0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	e001      	b.n	800d4c0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d4bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	3718      	adds	r7, #24
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}

0800d4c8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d4c8:	b590      	push	{r4, r7, lr}
 800d4ca:	b08f      	sub	sp, #60	; 0x3c
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
 800d4d0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d4d2:	f7f9 f84b 	bl	800656c <HAL_GetTick>
 800d4d6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800d4dc:	2300      	movs	r3, #0
 800d4de:	60bb      	str	r3, [r7, #8]
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	2108      	movs	r1, #8
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f000 fd5e 	bl	800dfb0 <SDMMC_CmdBlockLength>
 800d4f4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d4f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d001      	beq.n	800d500 <SD_FindSCR+0x38>
  {
    return errorstate;
 800d4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4fe:	e0b2      	b.n	800d666 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681a      	ldr	r2, [r3, #0]
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d508:	041b      	lsls	r3, r3, #16
 800d50a:	4619      	mov	r1, r3
 800d50c:	4610      	mov	r0, r2
 800d50e:	f000 fe7b 	bl	800e208 <SDMMC_CmdAppCommand>
 800d512:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d516:	2b00      	cmp	r3, #0
 800d518:	d001      	beq.n	800d51e <SD_FindSCR+0x56>
  {
    return errorstate;
 800d51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d51c:	e0a3      	b.n	800d666 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d51e:	f04f 33ff 	mov.w	r3, #4294967295
 800d522:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d524:	2308      	movs	r3, #8
 800d526:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800d528:	2330      	movs	r3, #48	; 0x30
 800d52a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d52c:	2302      	movs	r3, #2
 800d52e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d530:	2300      	movs	r3, #0
 800d532:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800d534:	2301      	movs	r3, #1
 800d536:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	f107 0210 	add.w	r2, r7, #16
 800d540:	4611      	mov	r1, r2
 800d542:	4618      	mov	r0, r3
 800d544:	f000 fd08 	bl	800df58 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	4618      	mov	r0, r3
 800d54e:	f000 fec2 	bl	800e2d6 <SDMMC_CmdSendSCR>
 800d552:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d556:	2b00      	cmp	r3, #0
 800d558:	d02a      	beq.n	800d5b0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800d55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d55c:	e083      	b.n	800d666 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d00f      	beq.n	800d58c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6819      	ldr	r1, [r3, #0]
 800d570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d572:	009b      	lsls	r3, r3, #2
 800d574:	f107 0208 	add.w	r2, r7, #8
 800d578:	18d4      	adds	r4, r2, r3
 800d57a:	4608      	mov	r0, r1
 800d57c:	f000 fc67 	bl	800de4e <SDIO_ReadFIFO>
 800d580:	4603      	mov	r3, r0
 800d582:	6023      	str	r3, [r4, #0]
      index++;
 800d584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d586:	3301      	adds	r3, #1
 800d588:	637b      	str	r3, [r7, #52]	; 0x34
 800d58a:	e006      	b.n	800d59a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d592:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d596:	2b00      	cmp	r3, #0
 800d598:	d012      	beq.n	800d5c0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d59a:	f7f8 ffe7 	bl	800656c <HAL_GetTick>
 800d59e:	4602      	mov	r2, r0
 800d5a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a2:	1ad3      	subs	r3, r2, r3
 800d5a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5a8:	d102      	bne.n	800d5b0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d5aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d5ae:	e05a      	b.n	800d666 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5b6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d0cf      	beq.n	800d55e <SD_FindSCR+0x96>
 800d5be:	e000      	b.n	800d5c2 <SD_FindSCR+0xfa>
      break;
 800d5c0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5c8:	f003 0308 	and.w	r3, r3, #8
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d005      	beq.n	800d5dc <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	2208      	movs	r2, #8
 800d5d6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d5d8:	2308      	movs	r3, #8
 800d5da:	e044      	b.n	800d666 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5e2:	f003 0302 	and.w	r3, r3, #2
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d005      	beq.n	800d5f6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	2202      	movs	r2, #2
 800d5f0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d5f2:	2302      	movs	r3, #2
 800d5f4:	e037      	b.n	800d666 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5fc:	f003 0320 	and.w	r3, r3, #32
 800d600:	2b00      	cmp	r3, #0
 800d602:	d005      	beq.n	800d610 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	2220      	movs	r2, #32
 800d60a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d60c:	2320      	movs	r3, #32
 800d60e:	e02a      	b.n	800d666 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	f240 523a 	movw	r2, #1338	; 0x53a
 800d618:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	061a      	lsls	r2, r3, #24
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	021b      	lsls	r3, r3, #8
 800d622:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d626:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	0a1b      	lsrs	r3, r3, #8
 800d62c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d630:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	0e1b      	lsrs	r3, r3, #24
 800d636:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d63a:	601a      	str	r2, [r3, #0]
    scr++;
 800d63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d63e:	3304      	adds	r3, #4
 800d640:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	061a      	lsls	r2, r3, #24
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	021b      	lsls	r3, r3, #8
 800d64a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d64e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	0a1b      	lsrs	r3, r3, #8
 800d654:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d658:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	0e1b      	lsrs	r3, r3, #24
 800d65e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d662:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d664:	2300      	movs	r3, #0
}
 800d666:	4618      	mov	r0, r3
 800d668:	373c      	adds	r7, #60	; 0x3c
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd90      	pop	{r4, r7, pc}

0800d66e <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800d66e:	b580      	push	{r7, lr}
 800d670:	b086      	sub	sp, #24
 800d672:	af00      	add	r7, sp, #0
 800d674:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d67a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d680:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800d682:	693b      	ldr	r3, [r7, #16]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d03f      	beq.n	800d708 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800d688:	2300      	movs	r3, #0
 800d68a:	617b      	str	r3, [r7, #20]
 800d68c:	e033      	b.n	800d6f6 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	4618      	mov	r0, r3
 800d694:	f000 fbdb 	bl	800de4e <SDIO_ReadFIFO>
 800d698:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	b2da      	uxtb	r2, r3
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	3301      	adds	r3, #1
 800d6a6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d6a8:	693b      	ldr	r3, [r7, #16]
 800d6aa:	3b01      	subs	r3, #1
 800d6ac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	0a1b      	lsrs	r3, r3, #8
 800d6b2:	b2da      	uxtb	r2, r3
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	3301      	adds	r3, #1
 800d6bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	3b01      	subs	r3, #1
 800d6c2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	0c1b      	lsrs	r3, r3, #16
 800d6c8:	b2da      	uxtb	r2, r3
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	3301      	adds	r3, #1
 800d6d2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	3b01      	subs	r3, #1
 800d6d8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	0e1b      	lsrs	r3, r3, #24
 800d6de:	b2da      	uxtb	r2, r3
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	3301      	adds	r3, #1
 800d6e8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d6ea:	693b      	ldr	r3, [r7, #16]
 800d6ec:	3b01      	subs	r3, #1
 800d6ee:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	3301      	adds	r3, #1
 800d6f4:	617b      	str	r3, [r7, #20]
 800d6f6:	697b      	ldr	r3, [r7, #20]
 800d6f8:	2b07      	cmp	r3, #7
 800d6fa:	d9c8      	bls.n	800d68e <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	68fa      	ldr	r2, [r7, #12]
 800d700:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	693a      	ldr	r2, [r7, #16]
 800d706:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800d708:	bf00      	nop
 800d70a:	3718      	adds	r7, #24
 800d70c:	46bd      	mov	sp, r7
 800d70e:	bd80      	pop	{r7, pc}

0800d710 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d710:	b580      	push	{r7, lr}
 800d712:	b086      	sub	sp, #24
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6a1b      	ldr	r3, [r3, #32]
 800d71c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d722:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800d724:	693b      	ldr	r3, [r7, #16]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d043      	beq.n	800d7b2 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800d72a:	2300      	movs	r3, #0
 800d72c:	617b      	str	r3, [r7, #20]
 800d72e:	e037      	b.n	800d7a0 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	3301      	adds	r3, #1
 800d73a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	3b01      	subs	r3, #1
 800d740:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	781b      	ldrb	r3, [r3, #0]
 800d746:	021a      	lsls	r2, r3, #8
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	4313      	orrs	r3, r2
 800d74c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	3301      	adds	r3, #1
 800d752:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	3b01      	subs	r3, #1
 800d758:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	781b      	ldrb	r3, [r3, #0]
 800d75e:	041a      	lsls	r2, r3, #16
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	4313      	orrs	r3, r2
 800d764:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	3301      	adds	r3, #1
 800d76a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	3b01      	subs	r3, #1
 800d770:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	781b      	ldrb	r3, [r3, #0]
 800d776:	061a      	lsls	r2, r3, #24
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	4313      	orrs	r3, r2
 800d77c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	3301      	adds	r3, #1
 800d782:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d784:	693b      	ldr	r3, [r7, #16]
 800d786:	3b01      	subs	r3, #1
 800d788:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	f107 0208 	add.w	r2, r7, #8
 800d792:	4611      	mov	r1, r2
 800d794:	4618      	mov	r0, r3
 800d796:	f000 fb67 	bl	800de68 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800d79a:	697b      	ldr	r3, [r7, #20]
 800d79c:	3301      	adds	r3, #1
 800d79e:	617b      	str	r3, [r7, #20]
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	2b07      	cmp	r3, #7
 800d7a4:	d9c4      	bls.n	800d730 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	68fa      	ldr	r2, [r7, #12]
 800d7aa:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	693a      	ldr	r2, [r7, #16]
 800d7b0:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800d7b2:	bf00      	nop
 800d7b4:	3718      	adds	r7, #24
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}

0800d7ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d7ba:	b580      	push	{r7, lr}
 800d7bc:	b082      	sub	sp, #8
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d101      	bne.n	800d7cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	e041      	b.n	800d850 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d7d2:	b2db      	uxtb	r3, r3
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d106      	bne.n	800d7e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	2200      	movs	r2, #0
 800d7dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f7f8 fd3d 	bl	8006260 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2202      	movs	r2, #2
 800d7ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681a      	ldr	r2, [r3, #0]
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	3304      	adds	r3, #4
 800d7f6:	4619      	mov	r1, r3
 800d7f8:	4610      	mov	r0, r2
 800d7fa:	f000 f9cd 	bl	800db98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	2201      	movs	r2, #1
 800d802:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2201      	movs	r2, #1
 800d80a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2201      	movs	r2, #1
 800d812:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2201      	movs	r2, #1
 800d81a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2201      	movs	r2, #1
 800d822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2201      	movs	r2, #1
 800d82a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2201      	movs	r2, #1
 800d832:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2201      	movs	r2, #1
 800d83a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2201      	movs	r2, #1
 800d842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2201      	movs	r2, #1
 800d84a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d84e:	2300      	movs	r3, #0
}
 800d850:	4618      	mov	r0, r3
 800d852:	3708      	adds	r7, #8
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}

0800d858 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d858:	b480      	push	{r7}
 800d85a:	b085      	sub	sp, #20
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d866:	b2db      	uxtb	r3, r3
 800d868:	2b01      	cmp	r3, #1
 800d86a:	d001      	beq.n	800d870 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d86c:	2301      	movs	r3, #1
 800d86e:	e04e      	b.n	800d90e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	2202      	movs	r2, #2
 800d874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	68da      	ldr	r2, [r3, #12]
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	f042 0201 	orr.w	r2, r2, #1
 800d886:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	4a23      	ldr	r2, [pc, #140]	; (800d91c <HAL_TIM_Base_Start_IT+0xc4>)
 800d88e:	4293      	cmp	r3, r2
 800d890:	d022      	beq.n	800d8d8 <HAL_TIM_Base_Start_IT+0x80>
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d89a:	d01d      	beq.n	800d8d8 <HAL_TIM_Base_Start_IT+0x80>
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	4a1f      	ldr	r2, [pc, #124]	; (800d920 <HAL_TIM_Base_Start_IT+0xc8>)
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	d018      	beq.n	800d8d8 <HAL_TIM_Base_Start_IT+0x80>
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	4a1e      	ldr	r2, [pc, #120]	; (800d924 <HAL_TIM_Base_Start_IT+0xcc>)
 800d8ac:	4293      	cmp	r3, r2
 800d8ae:	d013      	beq.n	800d8d8 <HAL_TIM_Base_Start_IT+0x80>
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	4a1c      	ldr	r2, [pc, #112]	; (800d928 <HAL_TIM_Base_Start_IT+0xd0>)
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	d00e      	beq.n	800d8d8 <HAL_TIM_Base_Start_IT+0x80>
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	4a1b      	ldr	r2, [pc, #108]	; (800d92c <HAL_TIM_Base_Start_IT+0xd4>)
 800d8c0:	4293      	cmp	r3, r2
 800d8c2:	d009      	beq.n	800d8d8 <HAL_TIM_Base_Start_IT+0x80>
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	4a19      	ldr	r2, [pc, #100]	; (800d930 <HAL_TIM_Base_Start_IT+0xd8>)
 800d8ca:	4293      	cmp	r3, r2
 800d8cc:	d004      	beq.n	800d8d8 <HAL_TIM_Base_Start_IT+0x80>
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	4a18      	ldr	r2, [pc, #96]	; (800d934 <HAL_TIM_Base_Start_IT+0xdc>)
 800d8d4:	4293      	cmp	r3, r2
 800d8d6:	d111      	bne.n	800d8fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	689b      	ldr	r3, [r3, #8]
 800d8de:	f003 0307 	and.w	r3, r3, #7
 800d8e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	2b06      	cmp	r3, #6
 800d8e8:	d010      	beq.n	800d90c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	681a      	ldr	r2, [r3, #0]
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	f042 0201 	orr.w	r2, r2, #1
 800d8f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d8fa:	e007      	b.n	800d90c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	681a      	ldr	r2, [r3, #0]
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	f042 0201 	orr.w	r2, r2, #1
 800d90a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d90c:	2300      	movs	r3, #0
}
 800d90e:	4618      	mov	r0, r3
 800d910:	3714      	adds	r7, #20
 800d912:	46bd      	mov	sp, r7
 800d914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d918:	4770      	bx	lr
 800d91a:	bf00      	nop
 800d91c:	40010000 	.word	0x40010000
 800d920:	40000400 	.word	0x40000400
 800d924:	40000800 	.word	0x40000800
 800d928:	40000c00 	.word	0x40000c00
 800d92c:	40010400 	.word	0x40010400
 800d930:	40014000 	.word	0x40014000
 800d934:	40001800 	.word	0x40001800

0800d938 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b082      	sub	sp, #8
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	691b      	ldr	r3, [r3, #16]
 800d946:	f003 0302 	and.w	r3, r3, #2
 800d94a:	2b02      	cmp	r3, #2
 800d94c:	d122      	bne.n	800d994 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	68db      	ldr	r3, [r3, #12]
 800d954:	f003 0302 	and.w	r3, r3, #2
 800d958:	2b02      	cmp	r3, #2
 800d95a:	d11b      	bne.n	800d994 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	f06f 0202 	mvn.w	r2, #2
 800d964:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	2201      	movs	r2, #1
 800d96a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	699b      	ldr	r3, [r3, #24]
 800d972:	f003 0303 	and.w	r3, r3, #3
 800d976:	2b00      	cmp	r3, #0
 800d978:	d003      	beq.n	800d982 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d97a:	6878      	ldr	r0, [r7, #4]
 800d97c:	f000 f8ee 	bl	800db5c <HAL_TIM_IC_CaptureCallback>
 800d980:	e005      	b.n	800d98e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d982:	6878      	ldr	r0, [r7, #4]
 800d984:	f000 f8e0 	bl	800db48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f000 f8f1 	bl	800db70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	2200      	movs	r2, #0
 800d992:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	691b      	ldr	r3, [r3, #16]
 800d99a:	f003 0304 	and.w	r3, r3, #4
 800d99e:	2b04      	cmp	r3, #4
 800d9a0:	d122      	bne.n	800d9e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	68db      	ldr	r3, [r3, #12]
 800d9a8:	f003 0304 	and.w	r3, r3, #4
 800d9ac:	2b04      	cmp	r3, #4
 800d9ae:	d11b      	bne.n	800d9e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	f06f 0204 	mvn.w	r2, #4
 800d9b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	2202      	movs	r2, #2
 800d9be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	699b      	ldr	r3, [r3, #24]
 800d9c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d003      	beq.n	800d9d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	f000 f8c4 	bl	800db5c <HAL_TIM_IC_CaptureCallback>
 800d9d4:	e005      	b.n	800d9e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	f000 f8b6 	bl	800db48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	f000 f8c7 	bl	800db70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	691b      	ldr	r3, [r3, #16]
 800d9ee:	f003 0308 	and.w	r3, r3, #8
 800d9f2:	2b08      	cmp	r3, #8
 800d9f4:	d122      	bne.n	800da3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	68db      	ldr	r3, [r3, #12]
 800d9fc:	f003 0308 	and.w	r3, r3, #8
 800da00:	2b08      	cmp	r3, #8
 800da02:	d11b      	bne.n	800da3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	f06f 0208 	mvn.w	r2, #8
 800da0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2204      	movs	r2, #4
 800da12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	69db      	ldr	r3, [r3, #28]
 800da1a:	f003 0303 	and.w	r3, r3, #3
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d003      	beq.n	800da2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f000 f89a 	bl	800db5c <HAL_TIM_IC_CaptureCallback>
 800da28:	e005      	b.n	800da36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f000 f88c 	bl	800db48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da30:	6878      	ldr	r0, [r7, #4]
 800da32:	f000 f89d 	bl	800db70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	2200      	movs	r2, #0
 800da3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	691b      	ldr	r3, [r3, #16]
 800da42:	f003 0310 	and.w	r3, r3, #16
 800da46:	2b10      	cmp	r3, #16
 800da48:	d122      	bne.n	800da90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	68db      	ldr	r3, [r3, #12]
 800da50:	f003 0310 	and.w	r3, r3, #16
 800da54:	2b10      	cmp	r3, #16
 800da56:	d11b      	bne.n	800da90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	f06f 0210 	mvn.w	r2, #16
 800da60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2208      	movs	r2, #8
 800da66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	69db      	ldr	r3, [r3, #28]
 800da6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800da72:	2b00      	cmp	r3, #0
 800da74:	d003      	beq.n	800da7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	f000 f870 	bl	800db5c <HAL_TIM_IC_CaptureCallback>
 800da7c:	e005      	b.n	800da8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f000 f862 	bl	800db48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f000 f873 	bl	800db70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2200      	movs	r2, #0
 800da8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	691b      	ldr	r3, [r3, #16]
 800da96:	f003 0301 	and.w	r3, r3, #1
 800da9a:	2b01      	cmp	r3, #1
 800da9c:	d10e      	bne.n	800dabc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	68db      	ldr	r3, [r3, #12]
 800daa4:	f003 0301 	and.w	r3, r3, #1
 800daa8:	2b01      	cmp	r3, #1
 800daaa:	d107      	bne.n	800dabc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	f06f 0201 	mvn.w	r2, #1
 800dab4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f7f8 f844 	bl	8005b44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	691b      	ldr	r3, [r3, #16]
 800dac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dac6:	2b80      	cmp	r3, #128	; 0x80
 800dac8:	d10e      	bne.n	800dae8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	68db      	ldr	r3, [r3, #12]
 800dad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dad4:	2b80      	cmp	r3, #128	; 0x80
 800dad6:	d107      	bne.n	800dae8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800dae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f000 f97e 	bl	800dde4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	691b      	ldr	r3, [r3, #16]
 800daee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800daf2:	2b40      	cmp	r3, #64	; 0x40
 800daf4:	d10e      	bne.n	800db14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	68db      	ldr	r3, [r3, #12]
 800dafc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db00:	2b40      	cmp	r3, #64	; 0x40
 800db02:	d107      	bne.n	800db14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800db0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f000 f838 	bl	800db84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	691b      	ldr	r3, [r3, #16]
 800db1a:	f003 0320 	and.w	r3, r3, #32
 800db1e:	2b20      	cmp	r3, #32
 800db20:	d10e      	bne.n	800db40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	68db      	ldr	r3, [r3, #12]
 800db28:	f003 0320 	and.w	r3, r3, #32
 800db2c:	2b20      	cmp	r3, #32
 800db2e:	d107      	bne.n	800db40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	f06f 0220 	mvn.w	r2, #32
 800db38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f000 f948 	bl	800ddd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800db40:	bf00      	nop
 800db42:	3708      	adds	r7, #8
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}

0800db48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800db48:	b480      	push	{r7}
 800db4a:	b083      	sub	sp, #12
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800db50:	bf00      	nop
 800db52:	370c      	adds	r7, #12
 800db54:	46bd      	mov	sp, r7
 800db56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5a:	4770      	bx	lr

0800db5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800db5c:	b480      	push	{r7}
 800db5e:	b083      	sub	sp, #12
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800db64:	bf00      	nop
 800db66:	370c      	adds	r7, #12
 800db68:	46bd      	mov	sp, r7
 800db6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6e:	4770      	bx	lr

0800db70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800db70:	b480      	push	{r7}
 800db72:	b083      	sub	sp, #12
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800db78:	bf00      	nop
 800db7a:	370c      	adds	r7, #12
 800db7c:	46bd      	mov	sp, r7
 800db7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db82:	4770      	bx	lr

0800db84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800db84:	b480      	push	{r7}
 800db86:	b083      	sub	sp, #12
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800db8c:	bf00      	nop
 800db8e:	370c      	adds	r7, #12
 800db90:	46bd      	mov	sp, r7
 800db92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db96:	4770      	bx	lr

0800db98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800db98:	b480      	push	{r7}
 800db9a:	b085      	sub	sp, #20
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
 800dba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	4a40      	ldr	r2, [pc, #256]	; (800dcac <TIM_Base_SetConfig+0x114>)
 800dbac:	4293      	cmp	r3, r2
 800dbae:	d013      	beq.n	800dbd8 <TIM_Base_SetConfig+0x40>
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dbb6:	d00f      	beq.n	800dbd8 <TIM_Base_SetConfig+0x40>
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	4a3d      	ldr	r2, [pc, #244]	; (800dcb0 <TIM_Base_SetConfig+0x118>)
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	d00b      	beq.n	800dbd8 <TIM_Base_SetConfig+0x40>
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	4a3c      	ldr	r2, [pc, #240]	; (800dcb4 <TIM_Base_SetConfig+0x11c>)
 800dbc4:	4293      	cmp	r3, r2
 800dbc6:	d007      	beq.n	800dbd8 <TIM_Base_SetConfig+0x40>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	4a3b      	ldr	r2, [pc, #236]	; (800dcb8 <TIM_Base_SetConfig+0x120>)
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	d003      	beq.n	800dbd8 <TIM_Base_SetConfig+0x40>
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	4a3a      	ldr	r2, [pc, #232]	; (800dcbc <TIM_Base_SetConfig+0x124>)
 800dbd4:	4293      	cmp	r3, r2
 800dbd6:	d108      	bne.n	800dbea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dbde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	685b      	ldr	r3, [r3, #4]
 800dbe4:	68fa      	ldr	r2, [r7, #12]
 800dbe6:	4313      	orrs	r3, r2
 800dbe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	4a2f      	ldr	r2, [pc, #188]	; (800dcac <TIM_Base_SetConfig+0x114>)
 800dbee:	4293      	cmp	r3, r2
 800dbf0:	d02b      	beq.n	800dc4a <TIM_Base_SetConfig+0xb2>
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dbf8:	d027      	beq.n	800dc4a <TIM_Base_SetConfig+0xb2>
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	4a2c      	ldr	r2, [pc, #176]	; (800dcb0 <TIM_Base_SetConfig+0x118>)
 800dbfe:	4293      	cmp	r3, r2
 800dc00:	d023      	beq.n	800dc4a <TIM_Base_SetConfig+0xb2>
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	4a2b      	ldr	r2, [pc, #172]	; (800dcb4 <TIM_Base_SetConfig+0x11c>)
 800dc06:	4293      	cmp	r3, r2
 800dc08:	d01f      	beq.n	800dc4a <TIM_Base_SetConfig+0xb2>
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	4a2a      	ldr	r2, [pc, #168]	; (800dcb8 <TIM_Base_SetConfig+0x120>)
 800dc0e:	4293      	cmp	r3, r2
 800dc10:	d01b      	beq.n	800dc4a <TIM_Base_SetConfig+0xb2>
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	4a29      	ldr	r2, [pc, #164]	; (800dcbc <TIM_Base_SetConfig+0x124>)
 800dc16:	4293      	cmp	r3, r2
 800dc18:	d017      	beq.n	800dc4a <TIM_Base_SetConfig+0xb2>
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	4a28      	ldr	r2, [pc, #160]	; (800dcc0 <TIM_Base_SetConfig+0x128>)
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	d013      	beq.n	800dc4a <TIM_Base_SetConfig+0xb2>
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	4a27      	ldr	r2, [pc, #156]	; (800dcc4 <TIM_Base_SetConfig+0x12c>)
 800dc26:	4293      	cmp	r3, r2
 800dc28:	d00f      	beq.n	800dc4a <TIM_Base_SetConfig+0xb2>
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	4a26      	ldr	r2, [pc, #152]	; (800dcc8 <TIM_Base_SetConfig+0x130>)
 800dc2e:	4293      	cmp	r3, r2
 800dc30:	d00b      	beq.n	800dc4a <TIM_Base_SetConfig+0xb2>
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	4a25      	ldr	r2, [pc, #148]	; (800dccc <TIM_Base_SetConfig+0x134>)
 800dc36:	4293      	cmp	r3, r2
 800dc38:	d007      	beq.n	800dc4a <TIM_Base_SetConfig+0xb2>
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	4a24      	ldr	r2, [pc, #144]	; (800dcd0 <TIM_Base_SetConfig+0x138>)
 800dc3e:	4293      	cmp	r3, r2
 800dc40:	d003      	beq.n	800dc4a <TIM_Base_SetConfig+0xb2>
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	4a23      	ldr	r2, [pc, #140]	; (800dcd4 <TIM_Base_SetConfig+0x13c>)
 800dc46:	4293      	cmp	r3, r2
 800dc48:	d108      	bne.n	800dc5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dc50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	68db      	ldr	r3, [r3, #12]
 800dc56:	68fa      	ldr	r2, [r7, #12]
 800dc58:	4313      	orrs	r3, r2
 800dc5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	695b      	ldr	r3, [r3, #20]
 800dc66:	4313      	orrs	r3, r2
 800dc68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	68fa      	ldr	r2, [r7, #12]
 800dc6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	689a      	ldr	r2, [r3, #8]
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	681a      	ldr	r2, [r3, #0]
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	4a0a      	ldr	r2, [pc, #40]	; (800dcac <TIM_Base_SetConfig+0x114>)
 800dc84:	4293      	cmp	r3, r2
 800dc86:	d003      	beq.n	800dc90 <TIM_Base_SetConfig+0xf8>
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	4a0c      	ldr	r2, [pc, #48]	; (800dcbc <TIM_Base_SetConfig+0x124>)
 800dc8c:	4293      	cmp	r3, r2
 800dc8e:	d103      	bne.n	800dc98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	691a      	ldr	r2, [r3, #16]
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2201      	movs	r2, #1
 800dc9c:	615a      	str	r2, [r3, #20]
}
 800dc9e:	bf00      	nop
 800dca0:	3714      	adds	r7, #20
 800dca2:	46bd      	mov	sp, r7
 800dca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca8:	4770      	bx	lr
 800dcaa:	bf00      	nop
 800dcac:	40010000 	.word	0x40010000
 800dcb0:	40000400 	.word	0x40000400
 800dcb4:	40000800 	.word	0x40000800
 800dcb8:	40000c00 	.word	0x40000c00
 800dcbc:	40010400 	.word	0x40010400
 800dcc0:	40014000 	.word	0x40014000
 800dcc4:	40014400 	.word	0x40014400
 800dcc8:	40014800 	.word	0x40014800
 800dccc:	40001800 	.word	0x40001800
 800dcd0:	40001c00 	.word	0x40001c00
 800dcd4:	40002000 	.word	0x40002000

0800dcd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dcd8:	b480      	push	{r7}
 800dcda:	b085      	sub	sp, #20
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dce8:	2b01      	cmp	r3, #1
 800dcea:	d101      	bne.n	800dcf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dcec:	2302      	movs	r3, #2
 800dcee:	e05a      	b.n	800dda6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	2201      	movs	r2, #1
 800dcf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2202      	movs	r2, #2
 800dcfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	685b      	ldr	r3, [r3, #4]
 800dd06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	689b      	ldr	r3, [r3, #8]
 800dd0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	68fa      	ldr	r2, [r7, #12]
 800dd1e:	4313      	orrs	r3, r2
 800dd20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	68fa      	ldr	r2, [r7, #12]
 800dd28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	4a21      	ldr	r2, [pc, #132]	; (800ddb4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800dd30:	4293      	cmp	r3, r2
 800dd32:	d022      	beq.n	800dd7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd3c:	d01d      	beq.n	800dd7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	4a1d      	ldr	r2, [pc, #116]	; (800ddb8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800dd44:	4293      	cmp	r3, r2
 800dd46:	d018      	beq.n	800dd7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	4a1b      	ldr	r2, [pc, #108]	; (800ddbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800dd4e:	4293      	cmp	r3, r2
 800dd50:	d013      	beq.n	800dd7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	4a1a      	ldr	r2, [pc, #104]	; (800ddc0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800dd58:	4293      	cmp	r3, r2
 800dd5a:	d00e      	beq.n	800dd7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	4a18      	ldr	r2, [pc, #96]	; (800ddc4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800dd62:	4293      	cmp	r3, r2
 800dd64:	d009      	beq.n	800dd7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	4a17      	ldr	r2, [pc, #92]	; (800ddc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800dd6c:	4293      	cmp	r3, r2
 800dd6e:	d004      	beq.n	800dd7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	4a15      	ldr	r2, [pc, #84]	; (800ddcc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800dd76:	4293      	cmp	r3, r2
 800dd78:	d10c      	bne.n	800dd94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dd82:	683b      	ldr	r3, [r7, #0]
 800dd84:	685b      	ldr	r3, [r3, #4]
 800dd86:	68ba      	ldr	r2, [r7, #8]
 800dd88:	4313      	orrs	r3, r2
 800dd8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	68ba      	ldr	r2, [r7, #8]
 800dd92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2201      	movs	r2, #1
 800dd98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dda4:	2300      	movs	r3, #0
}
 800dda6:	4618      	mov	r0, r3
 800dda8:	3714      	adds	r7, #20
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb0:	4770      	bx	lr
 800ddb2:	bf00      	nop
 800ddb4:	40010000 	.word	0x40010000
 800ddb8:	40000400 	.word	0x40000400
 800ddbc:	40000800 	.word	0x40000800
 800ddc0:	40000c00 	.word	0x40000c00
 800ddc4:	40010400 	.word	0x40010400
 800ddc8:	40014000 	.word	0x40014000
 800ddcc:	40001800 	.word	0x40001800

0800ddd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ddd0:	b480      	push	{r7}
 800ddd2:	b083      	sub	sp, #12
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ddd8:	bf00      	nop
 800ddda:	370c      	adds	r7, #12
 800dddc:	46bd      	mov	sp, r7
 800ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde2:	4770      	bx	lr

0800dde4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dde4:	b480      	push	{r7}
 800dde6:	b083      	sub	sp, #12
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ddec:	bf00      	nop
 800ddee:	370c      	adds	r7, #12
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf6:	4770      	bx	lr

0800ddf8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800ddf8:	b084      	sub	sp, #16
 800ddfa:	b480      	push	{r7}
 800ddfc:	b085      	sub	sp, #20
 800ddfe:	af00      	add	r7, sp, #0
 800de00:	6078      	str	r0, [r7, #4]
 800de02:	f107 001c 	add.w	r0, r7, #28
 800de06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800de0a:	2300      	movs	r3, #0
 800de0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800de0e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800de10:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800de12:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800de14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800de16:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800de18:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800de1a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800de1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800de1e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800de20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800de22:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800de24:	68fa      	ldr	r2, [r7, #12]
 800de26:	4313      	orrs	r3, r2
 800de28:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	685b      	ldr	r3, [r3, #4]
 800de2e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800de32:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800de36:	68fa      	ldr	r2, [r7, #12]
 800de38:	431a      	orrs	r2, r3
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800de3e:	2300      	movs	r3, #0
}
 800de40:	4618      	mov	r0, r3
 800de42:	3714      	adds	r7, #20
 800de44:	46bd      	mov	sp, r7
 800de46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4a:	b004      	add	sp, #16
 800de4c:	4770      	bx	lr

0800de4e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800de4e:	b480      	push	{r7}
 800de50:	b083      	sub	sp, #12
 800de52:	af00      	add	r7, sp, #0
 800de54:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800de5c:	4618      	mov	r0, r3
 800de5e:	370c      	adds	r7, #12
 800de60:	46bd      	mov	sp, r7
 800de62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de66:	4770      	bx	lr

0800de68 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800de68:	b480      	push	{r7}
 800de6a:	b083      	sub	sp, #12
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
 800de70:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	681a      	ldr	r2, [r3, #0]
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800de7c:	2300      	movs	r3, #0
}
 800de7e:	4618      	mov	r0, r3
 800de80:	370c      	adds	r7, #12
 800de82:	46bd      	mov	sp, r7
 800de84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de88:	4770      	bx	lr

0800de8a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800de8a:	b580      	push	{r7, lr}
 800de8c:	b082      	sub	sp, #8
 800de8e:	af00      	add	r7, sp, #0
 800de90:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2203      	movs	r2, #3
 800de96:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800de98:	2002      	movs	r0, #2
 800de9a:	f7f8 fb73 	bl	8006584 <HAL_Delay>
  
  return HAL_OK;
 800de9e:	2300      	movs	r3, #0
}
 800dea0:	4618      	mov	r0, r3
 800dea2:	3708      	adds	r7, #8
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}

0800dea8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800dea8:	b480      	push	{r7}
 800deaa:	b083      	sub	sp, #12
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	f003 0303 	and.w	r3, r3, #3
}
 800deb8:	4618      	mov	r0, r3
 800deba:	370c      	adds	r7, #12
 800debc:	46bd      	mov	sp, r7
 800debe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec2:	4770      	bx	lr

0800dec4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800dec4:	b480      	push	{r7}
 800dec6:	b085      	sub	sp, #20
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
 800decc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800dece:	2300      	movs	r3, #0
 800ded0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	681a      	ldr	r2, [r3, #0]
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800dee2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800dee8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800deee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800def0:	68fa      	ldr	r2, [r7, #12]
 800def2:	4313      	orrs	r3, r2
 800def4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	68db      	ldr	r3, [r3, #12]
 800defa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800defe:	f023 030f 	bic.w	r3, r3, #15
 800df02:	68fa      	ldr	r2, [r7, #12]
 800df04:	431a      	orrs	r2, r3
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800df0a:	2300      	movs	r3, #0
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	3714      	adds	r7, #20
 800df10:	46bd      	mov	sp, r7
 800df12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df16:	4770      	bx	lr

0800df18 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800df18:	b480      	push	{r7}
 800df1a:	b083      	sub	sp, #12
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	691b      	ldr	r3, [r3, #16]
 800df24:	b2db      	uxtb	r3, r3
}
 800df26:	4618      	mov	r0, r3
 800df28:	370c      	adds	r7, #12
 800df2a:	46bd      	mov	sp, r7
 800df2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df30:	4770      	bx	lr

0800df32 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800df32:	b480      	push	{r7}
 800df34:	b085      	sub	sp, #20
 800df36:	af00      	add	r7, sp, #0
 800df38:	6078      	str	r0, [r7, #4]
 800df3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	3314      	adds	r3, #20
 800df40:	461a      	mov	r2, r3
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	4413      	add	r3, r2
 800df46:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	681b      	ldr	r3, [r3, #0]
}  
 800df4c:	4618      	mov	r0, r3
 800df4e:	3714      	adds	r7, #20
 800df50:	46bd      	mov	sp, r7
 800df52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df56:	4770      	bx	lr

0800df58 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800df58:	b480      	push	{r7}
 800df5a:	b085      	sub	sp, #20
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
 800df60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800df62:	2300      	movs	r3, #0
 800df64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	681a      	ldr	r2, [r3, #0]
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	685a      	ldr	r2, [r3, #4]
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800df7e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800df84:	431a      	orrs	r2, r3
                       Data->DPSM);
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800df8a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800df8c:	68fa      	ldr	r2, [r7, #12]
 800df8e:	4313      	orrs	r3, r2
 800df90:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df96:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	431a      	orrs	r2, r3
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800dfa2:	2300      	movs	r3, #0

}
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	3714      	adds	r7, #20
 800dfa8:	46bd      	mov	sp, r7
 800dfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfae:	4770      	bx	lr

0800dfb0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b088      	sub	sp, #32
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800dfbe:	2310      	movs	r3, #16
 800dfc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dfc2:	2340      	movs	r3, #64	; 0x40
 800dfc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dfca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dfce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dfd0:	f107 0308 	add.w	r3, r7, #8
 800dfd4:	4619      	mov	r1, r3
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	f7ff ff74 	bl	800dec4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800dfdc:	f241 3288 	movw	r2, #5000	; 0x1388
 800dfe0:	2110      	movs	r1, #16
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f000 fa44 	bl	800e470 <SDMMC_GetCmdResp1>
 800dfe8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dfea:	69fb      	ldr	r3, [r7, #28]
}
 800dfec:	4618      	mov	r0, r3
 800dfee:	3720      	adds	r7, #32
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd80      	pop	{r7, pc}

0800dff4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b088      	sub	sp, #32
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
 800dffc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e002:	2311      	movs	r3, #17
 800e004:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e006:	2340      	movs	r3, #64	; 0x40
 800e008:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e00a:	2300      	movs	r3, #0
 800e00c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e00e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e012:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e014:	f107 0308 	add.w	r3, r7, #8
 800e018:	4619      	mov	r1, r3
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f7ff ff52 	bl	800dec4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e020:	f241 3288 	movw	r2, #5000	; 0x1388
 800e024:	2111      	movs	r1, #17
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	f000 fa22 	bl	800e470 <SDMMC_GetCmdResp1>
 800e02c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e02e:	69fb      	ldr	r3, [r7, #28]
}
 800e030:	4618      	mov	r0, r3
 800e032:	3720      	adds	r7, #32
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}

0800e038 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b088      	sub	sp, #32
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
 800e040:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e046:	2312      	movs	r3, #18
 800e048:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e04a:	2340      	movs	r3, #64	; 0x40
 800e04c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e04e:	2300      	movs	r3, #0
 800e050:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e056:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e058:	f107 0308 	add.w	r3, r7, #8
 800e05c:	4619      	mov	r1, r3
 800e05e:	6878      	ldr	r0, [r7, #4]
 800e060:	f7ff ff30 	bl	800dec4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e064:	f241 3288 	movw	r2, #5000	; 0x1388
 800e068:	2112      	movs	r1, #18
 800e06a:	6878      	ldr	r0, [r7, #4]
 800e06c:	f000 fa00 	bl	800e470 <SDMMC_GetCmdResp1>
 800e070:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e072:	69fb      	ldr	r3, [r7, #28]
}
 800e074:	4618      	mov	r0, r3
 800e076:	3720      	adds	r7, #32
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}

0800e07c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b088      	sub	sp, #32
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
 800e084:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e08a:	2318      	movs	r3, #24
 800e08c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e08e:	2340      	movs	r3, #64	; 0x40
 800e090:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e092:	2300      	movs	r3, #0
 800e094:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e09a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e09c:	f107 0308 	add.w	r3, r7, #8
 800e0a0:	4619      	mov	r1, r3
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	f7ff ff0e 	bl	800dec4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e0a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0ac:	2118      	movs	r1, #24
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f000 f9de 	bl	800e470 <SDMMC_GetCmdResp1>
 800e0b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e0b6:	69fb      	ldr	r3, [r7, #28]
}
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	3720      	adds	r7, #32
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}

0800e0c0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b088      	sub	sp, #32
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
 800e0c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e0ca:	683b      	ldr	r3, [r7, #0]
 800e0cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e0ce:	2319      	movs	r3, #25
 800e0d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e0d2:	2340      	movs	r3, #64	; 0x40
 800e0d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e0da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e0e0:	f107 0308 	add.w	r3, r7, #8
 800e0e4:	4619      	mov	r1, r3
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f7ff feec 	bl	800dec4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e0ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0f0:	2119      	movs	r1, #25
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f000 f9bc 	bl	800e470 <SDMMC_GetCmdResp1>
 800e0f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e0fa:	69fb      	ldr	r3, [r7, #28]
}
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	3720      	adds	r7, #32
 800e100:	46bd      	mov	sp, r7
 800e102:	bd80      	pop	{r7, pc}

0800e104 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b088      	sub	sp, #32
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e10c:	2300      	movs	r3, #0
 800e10e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e110:	230c      	movs	r3, #12
 800e112:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e114:	2340      	movs	r3, #64	; 0x40
 800e116:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e118:	2300      	movs	r3, #0
 800e11a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e11c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e120:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e122:	f107 0308 	add.w	r3, r7, #8
 800e126:	4619      	mov	r1, r3
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f7ff fecb 	bl	800dec4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800e12e:	4a05      	ldr	r2, [pc, #20]	; (800e144 <SDMMC_CmdStopTransfer+0x40>)
 800e130:	210c      	movs	r1, #12
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f000 f99c 	bl	800e470 <SDMMC_GetCmdResp1>
 800e138:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e13a:	69fb      	ldr	r3, [r7, #28]
}
 800e13c:	4618      	mov	r0, r3
 800e13e:	3720      	adds	r7, #32
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}
 800e144:	05f5e100 	.word	0x05f5e100

0800e148 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b08a      	sub	sp, #40	; 0x28
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	60f8      	str	r0, [r7, #12]
 800e150:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e158:	2307      	movs	r3, #7
 800e15a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e15c:	2340      	movs	r3, #64	; 0x40
 800e15e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e160:	2300      	movs	r3, #0
 800e162:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e164:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e168:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e16a:	f107 0310 	add.w	r3, r7, #16
 800e16e:	4619      	mov	r1, r3
 800e170:	68f8      	ldr	r0, [r7, #12]
 800e172:	f7ff fea7 	bl	800dec4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800e176:	f241 3288 	movw	r2, #5000	; 0x1388
 800e17a:	2107      	movs	r1, #7
 800e17c:	68f8      	ldr	r0, [r7, #12]
 800e17e:	f000 f977 	bl	800e470 <SDMMC_GetCmdResp1>
 800e182:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800e184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e186:	4618      	mov	r0, r3
 800e188:	3728      	adds	r7, #40	; 0x28
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}

0800e18e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800e18e:	b580      	push	{r7, lr}
 800e190:	b088      	sub	sp, #32
 800e192:	af00      	add	r7, sp, #0
 800e194:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800e196:	2300      	movs	r3, #0
 800e198:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e19a:	2300      	movs	r3, #0
 800e19c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e1a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e1ac:	f107 0308 	add.w	r3, r7, #8
 800e1b0:	4619      	mov	r1, r3
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	f7ff fe86 	bl	800dec4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800e1b8:	6878      	ldr	r0, [r7, #4]
 800e1ba:	f000 f92d 	bl	800e418 <SDMMC_GetCmdError>
 800e1be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e1c0:	69fb      	ldr	r3, [r7, #28]
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	3720      	adds	r7, #32
 800e1c6:	46bd      	mov	sp, r7
 800e1c8:	bd80      	pop	{r7, pc}

0800e1ca <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800e1ca:	b580      	push	{r7, lr}
 800e1cc:	b088      	sub	sp, #32
 800e1ce:	af00      	add	r7, sp, #0
 800e1d0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e1d2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e1d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e1d8:	2308      	movs	r3, #8
 800e1da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e1dc:	2340      	movs	r3, #64	; 0x40
 800e1de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e1e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e1ea:	f107 0308 	add.w	r3, r7, #8
 800e1ee:	4619      	mov	r1, r3
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	f7ff fe67 	bl	800dec4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f000 fb24 	bl	800e844 <SDMMC_GetCmdResp7>
 800e1fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e1fe:	69fb      	ldr	r3, [r7, #28]
}
 800e200:	4618      	mov	r0, r3
 800e202:	3720      	adds	r7, #32
 800e204:	46bd      	mov	sp, r7
 800e206:	bd80      	pop	{r7, pc}

0800e208 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b088      	sub	sp, #32
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
 800e210:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e216:	2337      	movs	r3, #55	; 0x37
 800e218:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e21a:	2340      	movs	r3, #64	; 0x40
 800e21c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e21e:	2300      	movs	r3, #0
 800e220:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e226:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e228:	f107 0308 	add.w	r3, r7, #8
 800e22c:	4619      	mov	r1, r3
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f7ff fe48 	bl	800dec4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800e234:	f241 3288 	movw	r2, #5000	; 0x1388
 800e238:	2137      	movs	r1, #55	; 0x37
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	f000 f918 	bl	800e470 <SDMMC_GetCmdResp1>
 800e240:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e242:	69fb      	ldr	r3, [r7, #28]
}
 800e244:	4618      	mov	r0, r3
 800e246:	3720      	adds	r7, #32
 800e248:	46bd      	mov	sp, r7
 800e24a:	bd80      	pop	{r7, pc}

0800e24c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b088      	sub	sp, #32
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
 800e254:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e25c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e260:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e262:	2329      	movs	r3, #41	; 0x29
 800e264:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e266:	2340      	movs	r3, #64	; 0x40
 800e268:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e26a:	2300      	movs	r3, #0
 800e26c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e26e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e272:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e274:	f107 0308 	add.w	r3, r7, #8
 800e278:	4619      	mov	r1, r3
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f7ff fe22 	bl	800dec4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f000 fa2b 	bl	800e6dc <SDMMC_GetCmdResp3>
 800e286:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e288:	69fb      	ldr	r3, [r7, #28]
}
 800e28a:	4618      	mov	r0, r3
 800e28c:	3720      	adds	r7, #32
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}

0800e292 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800e292:	b580      	push	{r7, lr}
 800e294:	b088      	sub	sp, #32
 800e296:	af00      	add	r7, sp, #0
 800e298:	6078      	str	r0, [r7, #4]
 800e29a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e2a0:	2306      	movs	r3, #6
 800e2a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e2a4:	2340      	movs	r3, #64	; 0x40
 800e2a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e2ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e2b2:	f107 0308 	add.w	r3, r7, #8
 800e2b6:	4619      	mov	r1, r3
 800e2b8:	6878      	ldr	r0, [r7, #4]
 800e2ba:	f7ff fe03 	bl	800dec4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800e2be:	f241 3288 	movw	r2, #5000	; 0x1388
 800e2c2:	2106      	movs	r1, #6
 800e2c4:	6878      	ldr	r0, [r7, #4]
 800e2c6:	f000 f8d3 	bl	800e470 <SDMMC_GetCmdResp1>
 800e2ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2cc:	69fb      	ldr	r3, [r7, #28]
}
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	3720      	adds	r7, #32
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd80      	pop	{r7, pc}

0800e2d6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800e2d6:	b580      	push	{r7, lr}
 800e2d8:	b088      	sub	sp, #32
 800e2da:	af00      	add	r7, sp, #0
 800e2dc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e2de:	2300      	movs	r3, #0
 800e2e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e2e2:	2333      	movs	r3, #51	; 0x33
 800e2e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e2e6:	2340      	movs	r3, #64	; 0x40
 800e2e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e2ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e2f4:	f107 0308 	add.w	r3, r7, #8
 800e2f8:	4619      	mov	r1, r3
 800e2fa:	6878      	ldr	r0, [r7, #4]
 800e2fc:	f7ff fde2 	bl	800dec4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800e300:	f241 3288 	movw	r2, #5000	; 0x1388
 800e304:	2133      	movs	r1, #51	; 0x33
 800e306:	6878      	ldr	r0, [r7, #4]
 800e308:	f000 f8b2 	bl	800e470 <SDMMC_GetCmdResp1>
 800e30c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e30e:	69fb      	ldr	r3, [r7, #28]
}
 800e310:	4618      	mov	r0, r3
 800e312:	3720      	adds	r7, #32
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}

0800e318 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b088      	sub	sp, #32
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e320:	2300      	movs	r3, #0
 800e322:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e324:	2302      	movs	r3, #2
 800e326:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e328:	23c0      	movs	r3, #192	; 0xc0
 800e32a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e32c:	2300      	movs	r3, #0
 800e32e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e334:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e336:	f107 0308 	add.w	r3, r7, #8
 800e33a:	4619      	mov	r1, r3
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f7ff fdc1 	bl	800dec4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e342:	6878      	ldr	r0, [r7, #4]
 800e344:	f000 f982 	bl	800e64c <SDMMC_GetCmdResp2>
 800e348:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e34a:	69fb      	ldr	r3, [r7, #28]
}
 800e34c:	4618      	mov	r0, r3
 800e34e:	3720      	adds	r7, #32
 800e350:	46bd      	mov	sp, r7
 800e352:	bd80      	pop	{r7, pc}

0800e354 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b088      	sub	sp, #32
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
 800e35c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e362:	2309      	movs	r3, #9
 800e364:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e366:	23c0      	movs	r3, #192	; 0xc0
 800e368:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e36a:	2300      	movs	r3, #0
 800e36c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e36e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e372:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e374:	f107 0308 	add.w	r3, r7, #8
 800e378:	4619      	mov	r1, r3
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f7ff fda2 	bl	800dec4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f000 f963 	bl	800e64c <SDMMC_GetCmdResp2>
 800e386:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e388:	69fb      	ldr	r3, [r7, #28]
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3720      	adds	r7, #32
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}

0800e392 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800e392:	b580      	push	{r7, lr}
 800e394:	b088      	sub	sp, #32
 800e396:	af00      	add	r7, sp, #0
 800e398:	6078      	str	r0, [r7, #4]
 800e39a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e39c:	2300      	movs	r3, #0
 800e39e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e3a0:	2303      	movs	r3, #3
 800e3a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e3a4:	2340      	movs	r3, #64	; 0x40
 800e3a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e3ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3b0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e3b2:	f107 0308 	add.w	r3, r7, #8
 800e3b6:	4619      	mov	r1, r3
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f7ff fd83 	bl	800dec4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e3be:	683a      	ldr	r2, [r7, #0]
 800e3c0:	2103      	movs	r1, #3
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f000 f9c8 	bl	800e758 <SDMMC_GetCmdResp6>
 800e3c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e3ca:	69fb      	ldr	r3, [r7, #28]
}
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	3720      	adds	r7, #32
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}

0800e3d4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b088      	sub	sp, #32
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
 800e3dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e3e2:	230d      	movs	r3, #13
 800e3e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e3e6:	2340      	movs	r3, #64	; 0x40
 800e3e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e3ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e3f4:	f107 0308 	add.w	r3, r7, #8
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f7ff fd62 	bl	800dec4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800e400:	f241 3288 	movw	r2, #5000	; 0x1388
 800e404:	210d      	movs	r1, #13
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f000 f832 	bl	800e470 <SDMMC_GetCmdResp1>
 800e40c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e40e:	69fb      	ldr	r3, [r7, #28]
}
 800e410:	4618      	mov	r0, r3
 800e412:	3720      	adds	r7, #32
 800e414:	46bd      	mov	sp, r7
 800e416:	bd80      	pop	{r7, pc}

0800e418 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800e418:	b480      	push	{r7}
 800e41a:	b085      	sub	sp, #20
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e420:	4b11      	ldr	r3, [pc, #68]	; (800e468 <SDMMC_GetCmdError+0x50>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	4a11      	ldr	r2, [pc, #68]	; (800e46c <SDMMC_GetCmdError+0x54>)
 800e426:	fba2 2303 	umull	r2, r3, r2, r3
 800e42a:	0a5b      	lsrs	r3, r3, #9
 800e42c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e430:	fb02 f303 	mul.w	r3, r2, r3
 800e434:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	1e5a      	subs	r2, r3, #1
 800e43a:	60fa      	str	r2, [r7, #12]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d102      	bne.n	800e446 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e440:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e444:	e009      	b.n	800e45a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e44a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d0f1      	beq.n	800e436 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	22c5      	movs	r2, #197	; 0xc5
 800e456:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800e458:	2300      	movs	r3, #0
}
 800e45a:	4618      	mov	r0, r3
 800e45c:	3714      	adds	r7, #20
 800e45e:	46bd      	mov	sp, r7
 800e460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e464:	4770      	bx	lr
 800e466:	bf00      	nop
 800e468:	20000000 	.word	0x20000000
 800e46c:	10624dd3 	.word	0x10624dd3

0800e470 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b088      	sub	sp, #32
 800e474:	af00      	add	r7, sp, #0
 800e476:	60f8      	str	r0, [r7, #12]
 800e478:	460b      	mov	r3, r1
 800e47a:	607a      	str	r2, [r7, #4]
 800e47c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e47e:	4b70      	ldr	r3, [pc, #448]	; (800e640 <SDMMC_GetCmdResp1+0x1d0>)
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	4a70      	ldr	r2, [pc, #448]	; (800e644 <SDMMC_GetCmdResp1+0x1d4>)
 800e484:	fba2 2303 	umull	r2, r3, r2, r3
 800e488:	0a5a      	lsrs	r2, r3, #9
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	fb02 f303 	mul.w	r3, r2, r3
 800e490:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e492:	69fb      	ldr	r3, [r7, #28]
 800e494:	1e5a      	subs	r2, r3, #1
 800e496:	61fa      	str	r2, [r7, #28]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d102      	bne.n	800e4a2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e49c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e4a0:	e0c9      	b.n	800e636 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4a6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e4a8:	69bb      	ldr	r3, [r7, #24]
 800e4aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d0ef      	beq.n	800e492 <SDMMC_GetCmdResp1+0x22>
 800e4b2:	69bb      	ldr	r3, [r7, #24]
 800e4b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d1ea      	bne.n	800e492 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4c0:	f003 0304 	and.w	r3, r3, #4
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d004      	beq.n	800e4d2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	2204      	movs	r2, #4
 800e4cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e4ce:	2304      	movs	r3, #4
 800e4d0:	e0b1      	b.n	800e636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4d6:	f003 0301 	and.w	r3, r3, #1
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d004      	beq.n	800e4e8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	2201      	movs	r2, #1
 800e4e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	e0a6      	b.n	800e636 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	22c5      	movs	r2, #197	; 0xc5
 800e4ec:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e4ee:	68f8      	ldr	r0, [r7, #12]
 800e4f0:	f7ff fd12 	bl	800df18 <SDIO_GetCommandResponse>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	461a      	mov	r2, r3
 800e4f8:	7afb      	ldrb	r3, [r7, #11]
 800e4fa:	4293      	cmp	r3, r2
 800e4fc:	d001      	beq.n	800e502 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e4fe:	2301      	movs	r3, #1
 800e500:	e099      	b.n	800e636 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e502:	2100      	movs	r1, #0
 800e504:	68f8      	ldr	r0, [r7, #12]
 800e506:	f7ff fd14 	bl	800df32 <SDIO_GetResponse>
 800e50a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e50c:	697a      	ldr	r2, [r7, #20]
 800e50e:	4b4e      	ldr	r3, [pc, #312]	; (800e648 <SDMMC_GetCmdResp1+0x1d8>)
 800e510:	4013      	ands	r3, r2
 800e512:	2b00      	cmp	r3, #0
 800e514:	d101      	bne.n	800e51a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e516:	2300      	movs	r3, #0
 800e518:	e08d      	b.n	800e636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e51a:	697b      	ldr	r3, [r7, #20]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	da02      	bge.n	800e526 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e520:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e524:	e087      	b.n	800e636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e526:	697b      	ldr	r3, [r7, #20]
 800e528:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d001      	beq.n	800e534 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e530:	2340      	movs	r3, #64	; 0x40
 800e532:	e080      	b.n	800e636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e534:	697b      	ldr	r3, [r7, #20]
 800e536:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d001      	beq.n	800e542 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e53e:	2380      	movs	r3, #128	; 0x80
 800e540:	e079      	b.n	800e636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e542:	697b      	ldr	r3, [r7, #20]
 800e544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d002      	beq.n	800e552 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e54c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e550:	e071      	b.n	800e636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d002      	beq.n	800e562 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e55c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e560:	e069      	b.n	800e636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e562:	697b      	ldr	r3, [r7, #20]
 800e564:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d002      	beq.n	800e572 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e56c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e570:	e061      	b.n	800e636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e572:	697b      	ldr	r3, [r7, #20]
 800e574:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d002      	beq.n	800e582 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e57c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e580:	e059      	b.n	800e636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e582:	697b      	ldr	r3, [r7, #20]
 800e584:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d002      	beq.n	800e592 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e58c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e590:	e051      	b.n	800e636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e592:	697b      	ldr	r3, [r7, #20]
 800e594:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d002      	beq.n	800e5a2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e59c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e5a0:	e049      	b.n	800e636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e5a2:	697b      	ldr	r3, [r7, #20]
 800e5a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d002      	beq.n	800e5b2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e5ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e5b0:	e041      	b.n	800e636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e5b2:	697b      	ldr	r3, [r7, #20]
 800e5b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d002      	beq.n	800e5c2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e5bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e5c0:	e039      	b.n	800e636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e5c2:	697b      	ldr	r3, [r7, #20]
 800e5c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d002      	beq.n	800e5d2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e5cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e5d0:	e031      	b.n	800e636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e5d2:	697b      	ldr	r3, [r7, #20]
 800e5d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d002      	beq.n	800e5e2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e5dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e5e0:	e029      	b.n	800e636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e5e2:	697b      	ldr	r3, [r7, #20]
 800e5e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d002      	beq.n	800e5f2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e5ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e5f0:	e021      	b.n	800e636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e5f2:	697b      	ldr	r3, [r7, #20]
 800e5f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d002      	beq.n	800e602 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e5fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e600:	e019      	b.n	800e636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d002      	beq.n	800e612 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e60c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e610:	e011      	b.n	800e636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d002      	beq.n	800e622 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e61c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e620:	e009      	b.n	800e636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	f003 0308 	and.w	r3, r3, #8
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d002      	beq.n	800e632 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e62c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e630:	e001      	b.n	800e636 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e632:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e636:	4618      	mov	r0, r3
 800e638:	3720      	adds	r7, #32
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}
 800e63e:	bf00      	nop
 800e640:	20000000 	.word	0x20000000
 800e644:	10624dd3 	.word	0x10624dd3
 800e648:	fdffe008 	.word	0xfdffe008

0800e64c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800e64c:	b480      	push	{r7}
 800e64e:	b085      	sub	sp, #20
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e654:	4b1f      	ldr	r3, [pc, #124]	; (800e6d4 <SDMMC_GetCmdResp2+0x88>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	4a1f      	ldr	r2, [pc, #124]	; (800e6d8 <SDMMC_GetCmdResp2+0x8c>)
 800e65a:	fba2 2303 	umull	r2, r3, r2, r3
 800e65e:	0a5b      	lsrs	r3, r3, #9
 800e660:	f241 3288 	movw	r2, #5000	; 0x1388
 800e664:	fb02 f303 	mul.w	r3, r2, r3
 800e668:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	1e5a      	subs	r2, r3, #1
 800e66e:	60fa      	str	r2, [r7, #12]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d102      	bne.n	800e67a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e674:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e678:	e026      	b.n	800e6c8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e67e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e686:	2b00      	cmp	r3, #0
 800e688:	d0ef      	beq.n	800e66a <SDMMC_GetCmdResp2+0x1e>
 800e68a:	68bb      	ldr	r3, [r7, #8]
 800e68c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e690:	2b00      	cmp	r3, #0
 800e692:	d1ea      	bne.n	800e66a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e698:	f003 0304 	and.w	r3, r3, #4
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d004      	beq.n	800e6aa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2204      	movs	r2, #4
 800e6a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e6a6:	2304      	movs	r3, #4
 800e6a8:	e00e      	b.n	800e6c8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6ae:	f003 0301 	and.w	r3, r3, #1
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d004      	beq.n	800e6c0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2201      	movs	r2, #1
 800e6ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e6bc:	2301      	movs	r3, #1
 800e6be:	e003      	b.n	800e6c8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	22c5      	movs	r2, #197	; 0xc5
 800e6c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e6c6:	2300      	movs	r3, #0
}
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	3714      	adds	r7, #20
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d2:	4770      	bx	lr
 800e6d4:	20000000 	.word	0x20000000
 800e6d8:	10624dd3 	.word	0x10624dd3

0800e6dc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800e6dc:	b480      	push	{r7}
 800e6de:	b085      	sub	sp, #20
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e6e4:	4b1a      	ldr	r3, [pc, #104]	; (800e750 <SDMMC_GetCmdResp3+0x74>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	4a1a      	ldr	r2, [pc, #104]	; (800e754 <SDMMC_GetCmdResp3+0x78>)
 800e6ea:	fba2 2303 	umull	r2, r3, r2, r3
 800e6ee:	0a5b      	lsrs	r3, r3, #9
 800e6f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e6f4:	fb02 f303 	mul.w	r3, r2, r3
 800e6f8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	1e5a      	subs	r2, r3, #1
 800e6fe:	60fa      	str	r2, [r7, #12]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d102      	bne.n	800e70a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e704:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e708:	e01b      	b.n	800e742 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e70e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e710:	68bb      	ldr	r3, [r7, #8]
 800e712:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e716:	2b00      	cmp	r3, #0
 800e718:	d0ef      	beq.n	800e6fa <SDMMC_GetCmdResp3+0x1e>
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e720:	2b00      	cmp	r3, #0
 800e722:	d1ea      	bne.n	800e6fa <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e728:	f003 0304 	and.w	r3, r3, #4
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d004      	beq.n	800e73a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2204      	movs	r2, #4
 800e734:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e736:	2304      	movs	r3, #4
 800e738:	e003      	b.n	800e742 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	22c5      	movs	r2, #197	; 0xc5
 800e73e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e740:	2300      	movs	r3, #0
}
 800e742:	4618      	mov	r0, r3
 800e744:	3714      	adds	r7, #20
 800e746:	46bd      	mov	sp, r7
 800e748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74c:	4770      	bx	lr
 800e74e:	bf00      	nop
 800e750:	20000000 	.word	0x20000000
 800e754:	10624dd3 	.word	0x10624dd3

0800e758 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b088      	sub	sp, #32
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	60f8      	str	r0, [r7, #12]
 800e760:	460b      	mov	r3, r1
 800e762:	607a      	str	r2, [r7, #4]
 800e764:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e766:	4b35      	ldr	r3, [pc, #212]	; (800e83c <SDMMC_GetCmdResp6+0xe4>)
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	4a35      	ldr	r2, [pc, #212]	; (800e840 <SDMMC_GetCmdResp6+0xe8>)
 800e76c:	fba2 2303 	umull	r2, r3, r2, r3
 800e770:	0a5b      	lsrs	r3, r3, #9
 800e772:	f241 3288 	movw	r2, #5000	; 0x1388
 800e776:	fb02 f303 	mul.w	r3, r2, r3
 800e77a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e77c:	69fb      	ldr	r3, [r7, #28]
 800e77e:	1e5a      	subs	r2, r3, #1
 800e780:	61fa      	str	r2, [r7, #28]
 800e782:	2b00      	cmp	r3, #0
 800e784:	d102      	bne.n	800e78c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e786:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e78a:	e052      	b.n	800e832 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e790:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e792:	69bb      	ldr	r3, [r7, #24]
 800e794:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d0ef      	beq.n	800e77c <SDMMC_GetCmdResp6+0x24>
 800e79c:	69bb      	ldr	r3, [r7, #24]
 800e79e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d1ea      	bne.n	800e77c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7aa:	f003 0304 	and.w	r3, r3, #4
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d004      	beq.n	800e7bc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	2204      	movs	r2, #4
 800e7b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e7b8:	2304      	movs	r3, #4
 800e7ba:	e03a      	b.n	800e832 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7c0:	f003 0301 	and.w	r3, r3, #1
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d004      	beq.n	800e7d2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	2201      	movs	r2, #1
 800e7cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	e02f      	b.n	800e832 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e7d2:	68f8      	ldr	r0, [r7, #12]
 800e7d4:	f7ff fba0 	bl	800df18 <SDIO_GetCommandResponse>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	461a      	mov	r2, r3
 800e7dc:	7afb      	ldrb	r3, [r7, #11]
 800e7de:	4293      	cmp	r3, r2
 800e7e0:	d001      	beq.n	800e7e6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	e025      	b.n	800e832 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	22c5      	movs	r2, #197	; 0xc5
 800e7ea:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e7ec:	2100      	movs	r1, #0
 800e7ee:	68f8      	ldr	r0, [r7, #12]
 800e7f0:	f7ff fb9f 	bl	800df32 <SDIO_GetResponse>
 800e7f4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e7f6:	697b      	ldr	r3, [r7, #20]
 800e7f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d106      	bne.n	800e80e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e800:	697b      	ldr	r3, [r7, #20]
 800e802:	0c1b      	lsrs	r3, r3, #16
 800e804:	b29a      	uxth	r2, r3
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e80a:	2300      	movs	r3, #0
 800e80c:	e011      	b.n	800e832 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e80e:	697b      	ldr	r3, [r7, #20]
 800e810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e814:	2b00      	cmp	r3, #0
 800e816:	d002      	beq.n	800e81e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e81c:	e009      	b.n	800e832 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e81e:	697b      	ldr	r3, [r7, #20]
 800e820:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e824:	2b00      	cmp	r3, #0
 800e826:	d002      	beq.n	800e82e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e82c:	e001      	b.n	800e832 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e82e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e832:	4618      	mov	r0, r3
 800e834:	3720      	adds	r7, #32
 800e836:	46bd      	mov	sp, r7
 800e838:	bd80      	pop	{r7, pc}
 800e83a:	bf00      	nop
 800e83c:	20000000 	.word	0x20000000
 800e840:	10624dd3 	.word	0x10624dd3

0800e844 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800e844:	b480      	push	{r7}
 800e846:	b085      	sub	sp, #20
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e84c:	4b22      	ldr	r3, [pc, #136]	; (800e8d8 <SDMMC_GetCmdResp7+0x94>)
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	4a22      	ldr	r2, [pc, #136]	; (800e8dc <SDMMC_GetCmdResp7+0x98>)
 800e852:	fba2 2303 	umull	r2, r3, r2, r3
 800e856:	0a5b      	lsrs	r3, r3, #9
 800e858:	f241 3288 	movw	r2, #5000	; 0x1388
 800e85c:	fb02 f303 	mul.w	r3, r2, r3
 800e860:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	1e5a      	subs	r2, r3, #1
 800e866:	60fa      	str	r2, [r7, #12]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d102      	bne.n	800e872 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e86c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e870:	e02c      	b.n	800e8cc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e876:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d0ef      	beq.n	800e862 <SDMMC_GetCmdResp7+0x1e>
 800e882:	68bb      	ldr	r3, [r7, #8]
 800e884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d1ea      	bne.n	800e862 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e890:	f003 0304 	and.w	r3, r3, #4
 800e894:	2b00      	cmp	r3, #0
 800e896:	d004      	beq.n	800e8a2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2204      	movs	r2, #4
 800e89c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e89e:	2304      	movs	r3, #4
 800e8a0:	e014      	b.n	800e8cc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8a6:	f003 0301 	and.w	r3, r3, #1
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d004      	beq.n	800e8b8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	2201      	movs	r2, #1
 800e8b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e8b4:	2301      	movs	r3, #1
 800e8b6:	e009      	b.n	800e8cc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d002      	beq.n	800e8ca <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2240      	movs	r2, #64	; 0x40
 800e8c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e8ca:	2300      	movs	r3, #0
  
}
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	3714      	adds	r7, #20
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d6:	4770      	bx	lr
 800e8d8:	20000000 	.word	0x20000000
 800e8dc:	10624dd3 	.word	0x10624dd3

0800e8e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e8e0:	b084      	sub	sp, #16
 800e8e2:	b580      	push	{r7, lr}
 800e8e4:	b084      	sub	sp, #16
 800e8e6:	af00      	add	r7, sp, #0
 800e8e8:	6078      	str	r0, [r7, #4]
 800e8ea:	f107 001c 	add.w	r0, r7, #28
 800e8ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8f4:	2b01      	cmp	r3, #1
 800e8f6:	d122      	bne.n	800e93e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	68db      	ldr	r3, [r3, #12]
 800e908:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800e90c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e910:	687a      	ldr	r2, [r7, #4]
 800e912:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	68db      	ldr	r3, [r3, #12]
 800e918:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e922:	2b01      	cmp	r3, #1
 800e924:	d105      	bne.n	800e932 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	68db      	ldr	r3, [r3, #12]
 800e92a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e932:	6878      	ldr	r0, [r7, #4]
 800e934:	f001 fb16 	bl	800ff64 <USB_CoreReset>
 800e938:	4603      	mov	r3, r0
 800e93a:	73fb      	strb	r3, [r7, #15]
 800e93c:	e01a      	b.n	800e974 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	68db      	ldr	r3, [r3, #12]
 800e942:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e94a:	6878      	ldr	r0, [r7, #4]
 800e94c:	f001 fb0a 	bl	800ff64 <USB_CoreReset>
 800e950:	4603      	mov	r3, r0
 800e952:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e956:	2b00      	cmp	r3, #0
 800e958:	d106      	bne.n	800e968 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e95e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	639a      	str	r2, [r3, #56]	; 0x38
 800e966:	e005      	b.n	800e974 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e96c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e976:	2b01      	cmp	r3, #1
 800e978:	d10b      	bne.n	800e992 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	689b      	ldr	r3, [r3, #8]
 800e97e:	f043 0206 	orr.w	r2, r3, #6
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	689b      	ldr	r3, [r3, #8]
 800e98a:	f043 0220 	orr.w	r2, r3, #32
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e992:	7bfb      	ldrb	r3, [r7, #15]
}
 800e994:	4618      	mov	r0, r3
 800e996:	3710      	adds	r7, #16
 800e998:	46bd      	mov	sp, r7
 800e99a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e99e:	b004      	add	sp, #16
 800e9a0:	4770      	bx	lr
	...

0800e9a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e9a4:	b480      	push	{r7}
 800e9a6:	b087      	sub	sp, #28
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	60f8      	str	r0, [r7, #12]
 800e9ac:	60b9      	str	r1, [r7, #8]
 800e9ae:	4613      	mov	r3, r2
 800e9b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e9b2:	79fb      	ldrb	r3, [r7, #7]
 800e9b4:	2b02      	cmp	r3, #2
 800e9b6:	d165      	bne.n	800ea84 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e9b8:	68bb      	ldr	r3, [r7, #8]
 800e9ba:	4a41      	ldr	r2, [pc, #260]	; (800eac0 <USB_SetTurnaroundTime+0x11c>)
 800e9bc:	4293      	cmp	r3, r2
 800e9be:	d906      	bls.n	800e9ce <USB_SetTurnaroundTime+0x2a>
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	4a40      	ldr	r2, [pc, #256]	; (800eac4 <USB_SetTurnaroundTime+0x120>)
 800e9c4:	4293      	cmp	r3, r2
 800e9c6:	d202      	bcs.n	800e9ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e9c8:	230f      	movs	r3, #15
 800e9ca:	617b      	str	r3, [r7, #20]
 800e9cc:	e062      	b.n	800ea94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e9ce:	68bb      	ldr	r3, [r7, #8]
 800e9d0:	4a3c      	ldr	r2, [pc, #240]	; (800eac4 <USB_SetTurnaroundTime+0x120>)
 800e9d2:	4293      	cmp	r3, r2
 800e9d4:	d306      	bcc.n	800e9e4 <USB_SetTurnaroundTime+0x40>
 800e9d6:	68bb      	ldr	r3, [r7, #8]
 800e9d8:	4a3b      	ldr	r2, [pc, #236]	; (800eac8 <USB_SetTurnaroundTime+0x124>)
 800e9da:	4293      	cmp	r3, r2
 800e9dc:	d202      	bcs.n	800e9e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e9de:	230e      	movs	r3, #14
 800e9e0:	617b      	str	r3, [r7, #20]
 800e9e2:	e057      	b.n	800ea94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e9e4:	68bb      	ldr	r3, [r7, #8]
 800e9e6:	4a38      	ldr	r2, [pc, #224]	; (800eac8 <USB_SetTurnaroundTime+0x124>)
 800e9e8:	4293      	cmp	r3, r2
 800e9ea:	d306      	bcc.n	800e9fa <USB_SetTurnaroundTime+0x56>
 800e9ec:	68bb      	ldr	r3, [r7, #8]
 800e9ee:	4a37      	ldr	r2, [pc, #220]	; (800eacc <USB_SetTurnaroundTime+0x128>)
 800e9f0:	4293      	cmp	r3, r2
 800e9f2:	d202      	bcs.n	800e9fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e9f4:	230d      	movs	r3, #13
 800e9f6:	617b      	str	r3, [r7, #20]
 800e9f8:	e04c      	b.n	800ea94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	4a33      	ldr	r2, [pc, #204]	; (800eacc <USB_SetTurnaroundTime+0x128>)
 800e9fe:	4293      	cmp	r3, r2
 800ea00:	d306      	bcc.n	800ea10 <USB_SetTurnaroundTime+0x6c>
 800ea02:	68bb      	ldr	r3, [r7, #8]
 800ea04:	4a32      	ldr	r2, [pc, #200]	; (800ead0 <USB_SetTurnaroundTime+0x12c>)
 800ea06:	4293      	cmp	r3, r2
 800ea08:	d802      	bhi.n	800ea10 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ea0a:	230c      	movs	r3, #12
 800ea0c:	617b      	str	r3, [r7, #20]
 800ea0e:	e041      	b.n	800ea94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	4a2f      	ldr	r2, [pc, #188]	; (800ead0 <USB_SetTurnaroundTime+0x12c>)
 800ea14:	4293      	cmp	r3, r2
 800ea16:	d906      	bls.n	800ea26 <USB_SetTurnaroundTime+0x82>
 800ea18:	68bb      	ldr	r3, [r7, #8]
 800ea1a:	4a2e      	ldr	r2, [pc, #184]	; (800ead4 <USB_SetTurnaroundTime+0x130>)
 800ea1c:	4293      	cmp	r3, r2
 800ea1e:	d802      	bhi.n	800ea26 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ea20:	230b      	movs	r3, #11
 800ea22:	617b      	str	r3, [r7, #20]
 800ea24:	e036      	b.n	800ea94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ea26:	68bb      	ldr	r3, [r7, #8]
 800ea28:	4a2a      	ldr	r2, [pc, #168]	; (800ead4 <USB_SetTurnaroundTime+0x130>)
 800ea2a:	4293      	cmp	r3, r2
 800ea2c:	d906      	bls.n	800ea3c <USB_SetTurnaroundTime+0x98>
 800ea2e:	68bb      	ldr	r3, [r7, #8]
 800ea30:	4a29      	ldr	r2, [pc, #164]	; (800ead8 <USB_SetTurnaroundTime+0x134>)
 800ea32:	4293      	cmp	r3, r2
 800ea34:	d802      	bhi.n	800ea3c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ea36:	230a      	movs	r3, #10
 800ea38:	617b      	str	r3, [r7, #20]
 800ea3a:	e02b      	b.n	800ea94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ea3c:	68bb      	ldr	r3, [r7, #8]
 800ea3e:	4a26      	ldr	r2, [pc, #152]	; (800ead8 <USB_SetTurnaroundTime+0x134>)
 800ea40:	4293      	cmp	r3, r2
 800ea42:	d906      	bls.n	800ea52 <USB_SetTurnaroundTime+0xae>
 800ea44:	68bb      	ldr	r3, [r7, #8]
 800ea46:	4a25      	ldr	r2, [pc, #148]	; (800eadc <USB_SetTurnaroundTime+0x138>)
 800ea48:	4293      	cmp	r3, r2
 800ea4a:	d202      	bcs.n	800ea52 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ea4c:	2309      	movs	r3, #9
 800ea4e:	617b      	str	r3, [r7, #20]
 800ea50:	e020      	b.n	800ea94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ea52:	68bb      	ldr	r3, [r7, #8]
 800ea54:	4a21      	ldr	r2, [pc, #132]	; (800eadc <USB_SetTurnaroundTime+0x138>)
 800ea56:	4293      	cmp	r3, r2
 800ea58:	d306      	bcc.n	800ea68 <USB_SetTurnaroundTime+0xc4>
 800ea5a:	68bb      	ldr	r3, [r7, #8]
 800ea5c:	4a20      	ldr	r2, [pc, #128]	; (800eae0 <USB_SetTurnaroundTime+0x13c>)
 800ea5e:	4293      	cmp	r3, r2
 800ea60:	d802      	bhi.n	800ea68 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ea62:	2308      	movs	r3, #8
 800ea64:	617b      	str	r3, [r7, #20]
 800ea66:	e015      	b.n	800ea94 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	4a1d      	ldr	r2, [pc, #116]	; (800eae0 <USB_SetTurnaroundTime+0x13c>)
 800ea6c:	4293      	cmp	r3, r2
 800ea6e:	d906      	bls.n	800ea7e <USB_SetTurnaroundTime+0xda>
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	4a1c      	ldr	r2, [pc, #112]	; (800eae4 <USB_SetTurnaroundTime+0x140>)
 800ea74:	4293      	cmp	r3, r2
 800ea76:	d202      	bcs.n	800ea7e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ea78:	2307      	movs	r3, #7
 800ea7a:	617b      	str	r3, [r7, #20]
 800ea7c:	e00a      	b.n	800ea94 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ea7e:	2306      	movs	r3, #6
 800ea80:	617b      	str	r3, [r7, #20]
 800ea82:	e007      	b.n	800ea94 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ea84:	79fb      	ldrb	r3, [r7, #7]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d102      	bne.n	800ea90 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ea8a:	2309      	movs	r3, #9
 800ea8c:	617b      	str	r3, [r7, #20]
 800ea8e:	e001      	b.n	800ea94 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ea90:	2309      	movs	r3, #9
 800ea92:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	68db      	ldr	r3, [r3, #12]
 800ea98:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	68da      	ldr	r2, [r3, #12]
 800eaa4:	697b      	ldr	r3, [r7, #20]
 800eaa6:	029b      	lsls	r3, r3, #10
 800eaa8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800eaac:	431a      	orrs	r2, r3
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800eab2:	2300      	movs	r3, #0
}
 800eab4:	4618      	mov	r0, r3
 800eab6:	371c      	adds	r7, #28
 800eab8:	46bd      	mov	sp, r7
 800eaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eabe:	4770      	bx	lr
 800eac0:	00d8acbf 	.word	0x00d8acbf
 800eac4:	00e4e1c0 	.word	0x00e4e1c0
 800eac8:	00f42400 	.word	0x00f42400
 800eacc:	01067380 	.word	0x01067380
 800ead0:	011a499f 	.word	0x011a499f
 800ead4:	01312cff 	.word	0x01312cff
 800ead8:	014ca43f 	.word	0x014ca43f
 800eadc:	016e3600 	.word	0x016e3600
 800eae0:	01a6ab1f 	.word	0x01a6ab1f
 800eae4:	01e84800 	.word	0x01e84800

0800eae8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800eae8:	b480      	push	{r7}
 800eaea:	b083      	sub	sp, #12
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	689b      	ldr	r3, [r3, #8]
 800eaf4:	f043 0201 	orr.w	r2, r3, #1
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800eafc:	2300      	movs	r3, #0
}
 800eafe:	4618      	mov	r0, r3
 800eb00:	370c      	adds	r7, #12
 800eb02:	46bd      	mov	sp, r7
 800eb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb08:	4770      	bx	lr

0800eb0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800eb0a:	b480      	push	{r7}
 800eb0c:	b083      	sub	sp, #12
 800eb0e:	af00      	add	r7, sp, #0
 800eb10:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	689b      	ldr	r3, [r3, #8]
 800eb16:	f023 0201 	bic.w	r2, r3, #1
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800eb1e:	2300      	movs	r3, #0
}
 800eb20:	4618      	mov	r0, r3
 800eb22:	370c      	adds	r7, #12
 800eb24:	46bd      	mov	sp, r7
 800eb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2a:	4770      	bx	lr

0800eb2c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b084      	sub	sp, #16
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
 800eb34:	460b      	mov	r3, r1
 800eb36:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800eb38:	2300      	movs	r3, #0
 800eb3a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	68db      	ldr	r3, [r3, #12]
 800eb40:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800eb48:	78fb      	ldrb	r3, [r7, #3]
 800eb4a:	2b01      	cmp	r3, #1
 800eb4c:	d115      	bne.n	800eb7a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	68db      	ldr	r3, [r3, #12]
 800eb52:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800eb5a:	2001      	movs	r0, #1
 800eb5c:	f7f7 fd12 	bl	8006584 <HAL_Delay>
      ms++;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	3301      	adds	r3, #1
 800eb64:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f001 f96c 	bl	800fe44 <USB_GetMode>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	2b01      	cmp	r3, #1
 800eb70:	d01e      	beq.n	800ebb0 <USB_SetCurrentMode+0x84>
 800eb72:	68fb      	ldr	r3, [r7, #12]
 800eb74:	2b31      	cmp	r3, #49	; 0x31
 800eb76:	d9f0      	bls.n	800eb5a <USB_SetCurrentMode+0x2e>
 800eb78:	e01a      	b.n	800ebb0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800eb7a:	78fb      	ldrb	r3, [r7, #3]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d115      	bne.n	800ebac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	68db      	ldr	r3, [r3, #12]
 800eb84:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800eb8c:	2001      	movs	r0, #1
 800eb8e:	f7f7 fcf9 	bl	8006584 <HAL_Delay>
      ms++;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	3301      	adds	r3, #1
 800eb96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800eb98:	6878      	ldr	r0, [r7, #4]
 800eb9a:	f001 f953 	bl	800fe44 <USB_GetMode>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d005      	beq.n	800ebb0 <USB_SetCurrentMode+0x84>
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	2b31      	cmp	r3, #49	; 0x31
 800eba8:	d9f0      	bls.n	800eb8c <USB_SetCurrentMode+0x60>
 800ebaa:	e001      	b.n	800ebb0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ebac:	2301      	movs	r3, #1
 800ebae:	e005      	b.n	800ebbc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	2b32      	cmp	r3, #50	; 0x32
 800ebb4:	d101      	bne.n	800ebba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ebb6:	2301      	movs	r3, #1
 800ebb8:	e000      	b.n	800ebbc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ebba:	2300      	movs	r3, #0
}
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	3710      	adds	r7, #16
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}

0800ebc4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ebc4:	b084      	sub	sp, #16
 800ebc6:	b580      	push	{r7, lr}
 800ebc8:	b086      	sub	sp, #24
 800ebca:	af00      	add	r7, sp, #0
 800ebcc:	6078      	str	r0, [r7, #4]
 800ebce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ebd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ebde:	2300      	movs	r3, #0
 800ebe0:	613b      	str	r3, [r7, #16]
 800ebe2:	e009      	b.n	800ebf8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ebe4:	687a      	ldr	r2, [r7, #4]
 800ebe6:	693b      	ldr	r3, [r7, #16]
 800ebe8:	3340      	adds	r3, #64	; 0x40
 800ebea:	009b      	lsls	r3, r3, #2
 800ebec:	4413      	add	r3, r2
 800ebee:	2200      	movs	r2, #0
 800ebf0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	3301      	adds	r3, #1
 800ebf6:	613b      	str	r3, [r7, #16]
 800ebf8:	693b      	ldr	r3, [r7, #16]
 800ebfa:	2b0e      	cmp	r3, #14
 800ebfc:	d9f2      	bls.n	800ebe4 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ebfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d11c      	bne.n	800ec3e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec0a:	685b      	ldr	r3, [r3, #4]
 800ec0c:	68fa      	ldr	r2, [r7, #12]
 800ec0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ec12:	f043 0302 	orr.w	r3, r3, #2
 800ec16:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec1c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	601a      	str	r2, [r3, #0]
 800ec3c:	e005      	b.n	800ec4a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec42:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ec50:	461a      	mov	r2, r3
 800ec52:	2300      	movs	r3, #0
 800ec54:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec5c:	4619      	mov	r1, r3
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec64:	461a      	mov	r2, r3
 800ec66:	680b      	ldr	r3, [r1, #0]
 800ec68:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ec6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec6c:	2b01      	cmp	r3, #1
 800ec6e:	d10c      	bne.n	800ec8a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ec70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d104      	bne.n	800ec80 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ec76:	2100      	movs	r1, #0
 800ec78:	6878      	ldr	r0, [r7, #4]
 800ec7a:	f000 f945 	bl	800ef08 <USB_SetDevSpeed>
 800ec7e:	e008      	b.n	800ec92 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ec80:	2101      	movs	r1, #1
 800ec82:	6878      	ldr	r0, [r7, #4]
 800ec84:	f000 f940 	bl	800ef08 <USB_SetDevSpeed>
 800ec88:	e003      	b.n	800ec92 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ec8a:	2103      	movs	r1, #3
 800ec8c:	6878      	ldr	r0, [r7, #4]
 800ec8e:	f000 f93b 	bl	800ef08 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ec92:	2110      	movs	r1, #16
 800ec94:	6878      	ldr	r0, [r7, #4]
 800ec96:	f000 f8f3 	bl	800ee80 <USB_FlushTxFifo>
 800ec9a:	4603      	mov	r3, r0
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d001      	beq.n	800eca4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800eca0:	2301      	movs	r3, #1
 800eca2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	f000 f90f 	bl	800eec8 <USB_FlushRxFifo>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d001      	beq.n	800ecb4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ecb0:	2301      	movs	r3, #1
 800ecb2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ecba:	461a      	mov	r2, r3
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ecc6:	461a      	mov	r2, r3
 800ecc8:	2300      	movs	r3, #0
 800ecca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ecd2:	461a      	mov	r2, r3
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ecd8:	2300      	movs	r3, #0
 800ecda:	613b      	str	r3, [r7, #16]
 800ecdc:	e043      	b.n	800ed66 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ecde:	693b      	ldr	r3, [r7, #16]
 800ece0:	015a      	lsls	r2, r3, #5
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	4413      	add	r3, r2
 800ece6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ecf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ecf4:	d118      	bne.n	800ed28 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ecf6:	693b      	ldr	r3, [r7, #16]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d10a      	bne.n	800ed12 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ecfc:	693b      	ldr	r3, [r7, #16]
 800ecfe:	015a      	lsls	r2, r3, #5
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	4413      	add	r3, r2
 800ed04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed08:	461a      	mov	r2, r3
 800ed0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ed0e:	6013      	str	r3, [r2, #0]
 800ed10:	e013      	b.n	800ed3a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ed12:	693b      	ldr	r3, [r7, #16]
 800ed14:	015a      	lsls	r2, r3, #5
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	4413      	add	r3, r2
 800ed1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed1e:	461a      	mov	r2, r3
 800ed20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ed24:	6013      	str	r3, [r2, #0]
 800ed26:	e008      	b.n	800ed3a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ed28:	693b      	ldr	r3, [r7, #16]
 800ed2a:	015a      	lsls	r2, r3, #5
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	4413      	add	r3, r2
 800ed30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed34:	461a      	mov	r2, r3
 800ed36:	2300      	movs	r3, #0
 800ed38:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ed3a:	693b      	ldr	r3, [r7, #16]
 800ed3c:	015a      	lsls	r2, r3, #5
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	4413      	add	r3, r2
 800ed42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed46:	461a      	mov	r2, r3
 800ed48:	2300      	movs	r3, #0
 800ed4a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ed4c:	693b      	ldr	r3, [r7, #16]
 800ed4e:	015a      	lsls	r2, r3, #5
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	4413      	add	r3, r2
 800ed54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed58:	461a      	mov	r2, r3
 800ed5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ed5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ed60:	693b      	ldr	r3, [r7, #16]
 800ed62:	3301      	adds	r3, #1
 800ed64:	613b      	str	r3, [r7, #16]
 800ed66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed68:	693a      	ldr	r2, [r7, #16]
 800ed6a:	429a      	cmp	r2, r3
 800ed6c:	d3b7      	bcc.n	800ecde <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ed6e:	2300      	movs	r3, #0
 800ed70:	613b      	str	r3, [r7, #16]
 800ed72:	e043      	b.n	800edfc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	015a      	lsls	r2, r3, #5
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	4413      	add	r3, r2
 800ed7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ed86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ed8a:	d118      	bne.n	800edbe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ed8c:	693b      	ldr	r3, [r7, #16]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d10a      	bne.n	800eda8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ed92:	693b      	ldr	r3, [r7, #16]
 800ed94:	015a      	lsls	r2, r3, #5
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	4413      	add	r3, r2
 800ed9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed9e:	461a      	mov	r2, r3
 800eda0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800eda4:	6013      	str	r3, [r2, #0]
 800eda6:	e013      	b.n	800edd0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800eda8:	693b      	ldr	r3, [r7, #16]
 800edaa:	015a      	lsls	r2, r3, #5
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	4413      	add	r3, r2
 800edb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edb4:	461a      	mov	r2, r3
 800edb6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800edba:	6013      	str	r3, [r2, #0]
 800edbc:	e008      	b.n	800edd0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800edbe:	693b      	ldr	r3, [r7, #16]
 800edc0:	015a      	lsls	r2, r3, #5
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	4413      	add	r3, r2
 800edc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edca:	461a      	mov	r2, r3
 800edcc:	2300      	movs	r3, #0
 800edce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800edd0:	693b      	ldr	r3, [r7, #16]
 800edd2:	015a      	lsls	r2, r3, #5
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	4413      	add	r3, r2
 800edd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eddc:	461a      	mov	r2, r3
 800edde:	2300      	movs	r3, #0
 800ede0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ede2:	693b      	ldr	r3, [r7, #16]
 800ede4:	015a      	lsls	r2, r3, #5
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	4413      	add	r3, r2
 800edea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edee:	461a      	mov	r2, r3
 800edf0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800edf4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800edf6:	693b      	ldr	r3, [r7, #16]
 800edf8:	3301      	adds	r3, #1
 800edfa:	613b      	str	r3, [r7, #16]
 800edfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edfe:	693a      	ldr	r2, [r7, #16]
 800ee00:	429a      	cmp	r2, r3
 800ee02:	d3b7      	bcc.n	800ed74 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee0a:	691b      	ldr	r3, [r3, #16]
 800ee0c:	68fa      	ldr	r2, [r7, #12]
 800ee0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ee12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ee16:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ee24:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ee26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d105      	bne.n	800ee38 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	699b      	ldr	r3, [r3, #24]
 800ee30:	f043 0210 	orr.w	r2, r3, #16
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	699a      	ldr	r2, [r3, #24]
 800ee3c:	4b0f      	ldr	r3, [pc, #60]	; (800ee7c <USB_DevInit+0x2b8>)
 800ee3e:	4313      	orrs	r3, r2
 800ee40:	687a      	ldr	r2, [r7, #4]
 800ee42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ee44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d005      	beq.n	800ee56 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	699b      	ldr	r3, [r3, #24]
 800ee4e:	f043 0208 	orr.w	r2, r3, #8
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ee56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee58:	2b01      	cmp	r3, #1
 800ee5a:	d107      	bne.n	800ee6c <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	699b      	ldr	r3, [r3, #24]
 800ee60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ee64:	f043 0304 	orr.w	r3, r3, #4
 800ee68:	687a      	ldr	r2, [r7, #4]
 800ee6a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ee6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee6e:	4618      	mov	r0, r3
 800ee70:	3718      	adds	r7, #24
 800ee72:	46bd      	mov	sp, r7
 800ee74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ee78:	b004      	add	sp, #16
 800ee7a:	4770      	bx	lr
 800ee7c:	803c3800 	.word	0x803c3800

0800ee80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ee80:	b480      	push	{r7}
 800ee82:	b085      	sub	sp, #20
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
 800ee88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	019b      	lsls	r3, r3, #6
 800ee92:	f043 0220 	orr.w	r2, r3, #32
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	3301      	adds	r3, #1
 800ee9e:	60fb      	str	r3, [r7, #12]
 800eea0:	4a08      	ldr	r2, [pc, #32]	; (800eec4 <USB_FlushTxFifo+0x44>)
 800eea2:	4293      	cmp	r3, r2
 800eea4:	d901      	bls.n	800eeaa <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800eea6:	2303      	movs	r3, #3
 800eea8:	e006      	b.n	800eeb8 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	691b      	ldr	r3, [r3, #16]
 800eeae:	f003 0320 	and.w	r3, r3, #32
 800eeb2:	2b20      	cmp	r3, #32
 800eeb4:	d0f1      	beq.n	800ee9a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800eeb6:	2300      	movs	r3, #0
}
 800eeb8:	4618      	mov	r0, r3
 800eeba:	3714      	adds	r7, #20
 800eebc:	46bd      	mov	sp, r7
 800eebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec2:	4770      	bx	lr
 800eec4:	00030d40 	.word	0x00030d40

0800eec8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800eec8:	b480      	push	{r7}
 800eeca:	b085      	sub	sp, #20
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800eed0:	2300      	movs	r3, #0
 800eed2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	2210      	movs	r2, #16
 800eed8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	3301      	adds	r3, #1
 800eede:	60fb      	str	r3, [r7, #12]
 800eee0:	4a08      	ldr	r2, [pc, #32]	; (800ef04 <USB_FlushRxFifo+0x3c>)
 800eee2:	4293      	cmp	r3, r2
 800eee4:	d901      	bls.n	800eeea <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800eee6:	2303      	movs	r3, #3
 800eee8:	e006      	b.n	800eef8 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	691b      	ldr	r3, [r3, #16]
 800eeee:	f003 0310 	and.w	r3, r3, #16
 800eef2:	2b10      	cmp	r3, #16
 800eef4:	d0f1      	beq.n	800eeda <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800eef6:	2300      	movs	r3, #0
}
 800eef8:	4618      	mov	r0, r3
 800eefa:	3714      	adds	r7, #20
 800eefc:	46bd      	mov	sp, r7
 800eefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef02:	4770      	bx	lr
 800ef04:	00030d40 	.word	0x00030d40

0800ef08 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ef08:	b480      	push	{r7}
 800ef0a:	b085      	sub	sp, #20
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
 800ef10:	460b      	mov	r3, r1
 800ef12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef1e:	681a      	ldr	r2, [r3, #0]
 800ef20:	78fb      	ldrb	r3, [r7, #3]
 800ef22:	68f9      	ldr	r1, [r7, #12]
 800ef24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ef28:	4313      	orrs	r3, r2
 800ef2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ef2c:	2300      	movs	r3, #0
}
 800ef2e:	4618      	mov	r0, r3
 800ef30:	3714      	adds	r7, #20
 800ef32:	46bd      	mov	sp, r7
 800ef34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef38:	4770      	bx	lr

0800ef3a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ef3a:	b480      	push	{r7}
 800ef3c:	b087      	sub	sp, #28
 800ef3e:	af00      	add	r7, sp, #0
 800ef40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ef46:	693b      	ldr	r3, [r7, #16]
 800ef48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef4c:	689b      	ldr	r3, [r3, #8]
 800ef4e:	f003 0306 	and.w	r3, r3, #6
 800ef52:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d102      	bne.n	800ef60 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	75fb      	strb	r3, [r7, #23]
 800ef5e:	e00a      	b.n	800ef76 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	2b02      	cmp	r3, #2
 800ef64:	d002      	beq.n	800ef6c <USB_GetDevSpeed+0x32>
 800ef66:	68fb      	ldr	r3, [r7, #12]
 800ef68:	2b06      	cmp	r3, #6
 800ef6a:	d102      	bne.n	800ef72 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ef6c:	2302      	movs	r3, #2
 800ef6e:	75fb      	strb	r3, [r7, #23]
 800ef70:	e001      	b.n	800ef76 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ef72:	230f      	movs	r3, #15
 800ef74:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ef76:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef78:	4618      	mov	r0, r3
 800ef7a:	371c      	adds	r7, #28
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef82:	4770      	bx	lr

0800ef84 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ef84:	b480      	push	{r7}
 800ef86:	b085      	sub	sp, #20
 800ef88:	af00      	add	r7, sp, #0
 800ef8a:	6078      	str	r0, [r7, #4]
 800ef8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	781b      	ldrb	r3, [r3, #0]
 800ef96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	785b      	ldrb	r3, [r3, #1]
 800ef9c:	2b01      	cmp	r3, #1
 800ef9e:	d13a      	bne.n	800f016 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efa6:	69da      	ldr	r2, [r3, #28]
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	781b      	ldrb	r3, [r3, #0]
 800efac:	f003 030f 	and.w	r3, r3, #15
 800efb0:	2101      	movs	r1, #1
 800efb2:	fa01 f303 	lsl.w	r3, r1, r3
 800efb6:	b29b      	uxth	r3, r3
 800efb8:	68f9      	ldr	r1, [r7, #12]
 800efba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800efbe:	4313      	orrs	r3, r2
 800efc0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800efc2:	68bb      	ldr	r3, [r7, #8]
 800efc4:	015a      	lsls	r2, r3, #5
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	4413      	add	r3, r2
 800efca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d155      	bne.n	800f084 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800efd8:	68bb      	ldr	r3, [r7, #8]
 800efda:	015a      	lsls	r2, r3, #5
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	4413      	add	r3, r2
 800efe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efe4:	681a      	ldr	r2, [r3, #0]
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	689b      	ldr	r3, [r3, #8]
 800efea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800efee:	683b      	ldr	r3, [r7, #0]
 800eff0:	78db      	ldrb	r3, [r3, #3]
 800eff2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800eff4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800eff6:	68bb      	ldr	r3, [r7, #8]
 800eff8:	059b      	lsls	r3, r3, #22
 800effa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800effc:	4313      	orrs	r3, r2
 800effe:	68ba      	ldr	r2, [r7, #8]
 800f000:	0151      	lsls	r1, r2, #5
 800f002:	68fa      	ldr	r2, [r7, #12]
 800f004:	440a      	add	r2, r1
 800f006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f00a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f00e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f012:	6013      	str	r3, [r2, #0]
 800f014:	e036      	b.n	800f084 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f01c:	69da      	ldr	r2, [r3, #28]
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	781b      	ldrb	r3, [r3, #0]
 800f022:	f003 030f 	and.w	r3, r3, #15
 800f026:	2101      	movs	r1, #1
 800f028:	fa01 f303 	lsl.w	r3, r1, r3
 800f02c:	041b      	lsls	r3, r3, #16
 800f02e:	68f9      	ldr	r1, [r7, #12]
 800f030:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f034:	4313      	orrs	r3, r2
 800f036:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f038:	68bb      	ldr	r3, [r7, #8]
 800f03a:	015a      	lsls	r2, r3, #5
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	4413      	add	r3, r2
 800f040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d11a      	bne.n	800f084 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	015a      	lsls	r2, r3, #5
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	4413      	add	r3, r2
 800f056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f05a:	681a      	ldr	r2, [r3, #0]
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	689b      	ldr	r3, [r3, #8]
 800f060:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	78db      	ldrb	r3, [r3, #3]
 800f068:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f06a:	430b      	orrs	r3, r1
 800f06c:	4313      	orrs	r3, r2
 800f06e:	68ba      	ldr	r2, [r7, #8]
 800f070:	0151      	lsls	r1, r2, #5
 800f072:	68fa      	ldr	r2, [r7, #12]
 800f074:	440a      	add	r2, r1
 800f076:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f07a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f07e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f082:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f084:	2300      	movs	r3, #0
}
 800f086:	4618      	mov	r0, r3
 800f088:	3714      	adds	r7, #20
 800f08a:	46bd      	mov	sp, r7
 800f08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f090:	4770      	bx	lr
	...

0800f094 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f094:	b480      	push	{r7}
 800f096:	b085      	sub	sp, #20
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
 800f09c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f0a2:	683b      	ldr	r3, [r7, #0]
 800f0a4:	781b      	ldrb	r3, [r3, #0]
 800f0a6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	785b      	ldrb	r3, [r3, #1]
 800f0ac:	2b01      	cmp	r3, #1
 800f0ae:	d161      	bne.n	800f174 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	015a      	lsls	r2, r3, #5
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	4413      	add	r3, r2
 800f0b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f0c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f0c6:	d11f      	bne.n	800f108 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f0c8:	68bb      	ldr	r3, [r7, #8]
 800f0ca:	015a      	lsls	r2, r3, #5
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	4413      	add	r3, r2
 800f0d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	68ba      	ldr	r2, [r7, #8]
 800f0d8:	0151      	lsls	r1, r2, #5
 800f0da:	68fa      	ldr	r2, [r7, #12]
 800f0dc:	440a      	add	r2, r1
 800f0de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f0e6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f0e8:	68bb      	ldr	r3, [r7, #8]
 800f0ea:	015a      	lsls	r2, r3, #5
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	4413      	add	r3, r2
 800f0f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	68ba      	ldr	r2, [r7, #8]
 800f0f8:	0151      	lsls	r1, r2, #5
 800f0fa:	68fa      	ldr	r2, [r7, #12]
 800f0fc:	440a      	add	r2, r1
 800f0fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f102:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f106:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f10e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	781b      	ldrb	r3, [r3, #0]
 800f114:	f003 030f 	and.w	r3, r3, #15
 800f118:	2101      	movs	r1, #1
 800f11a:	fa01 f303 	lsl.w	r3, r1, r3
 800f11e:	b29b      	uxth	r3, r3
 800f120:	43db      	mvns	r3, r3
 800f122:	68f9      	ldr	r1, [r7, #12]
 800f124:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f128:	4013      	ands	r3, r2
 800f12a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f132:	69da      	ldr	r2, [r3, #28]
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	781b      	ldrb	r3, [r3, #0]
 800f138:	f003 030f 	and.w	r3, r3, #15
 800f13c:	2101      	movs	r1, #1
 800f13e:	fa01 f303 	lsl.w	r3, r1, r3
 800f142:	b29b      	uxth	r3, r3
 800f144:	43db      	mvns	r3, r3
 800f146:	68f9      	ldr	r1, [r7, #12]
 800f148:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f14c:	4013      	ands	r3, r2
 800f14e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f150:	68bb      	ldr	r3, [r7, #8]
 800f152:	015a      	lsls	r2, r3, #5
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	4413      	add	r3, r2
 800f158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f15c:	681a      	ldr	r2, [r3, #0]
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	0159      	lsls	r1, r3, #5
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	440b      	add	r3, r1
 800f166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f16a:	4619      	mov	r1, r3
 800f16c:	4b35      	ldr	r3, [pc, #212]	; (800f244 <USB_DeactivateEndpoint+0x1b0>)
 800f16e:	4013      	ands	r3, r2
 800f170:	600b      	str	r3, [r1, #0]
 800f172:	e060      	b.n	800f236 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f174:	68bb      	ldr	r3, [r7, #8]
 800f176:	015a      	lsls	r2, r3, #5
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	4413      	add	r3, r2
 800f17c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f186:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f18a:	d11f      	bne.n	800f1cc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	015a      	lsls	r2, r3, #5
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	4413      	add	r3, r2
 800f194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	68ba      	ldr	r2, [r7, #8]
 800f19c:	0151      	lsls	r1, r2, #5
 800f19e:	68fa      	ldr	r2, [r7, #12]
 800f1a0:	440a      	add	r2, r1
 800f1a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f1a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f1aa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f1ac:	68bb      	ldr	r3, [r7, #8]
 800f1ae:	015a      	lsls	r2, r3, #5
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	4413      	add	r3, r2
 800f1b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	68ba      	ldr	r2, [r7, #8]
 800f1bc:	0151      	lsls	r1, r2, #5
 800f1be:	68fa      	ldr	r2, [r7, #12]
 800f1c0:	440a      	add	r2, r1
 800f1c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f1c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f1ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	781b      	ldrb	r3, [r3, #0]
 800f1d8:	f003 030f 	and.w	r3, r3, #15
 800f1dc:	2101      	movs	r1, #1
 800f1de:	fa01 f303 	lsl.w	r3, r1, r3
 800f1e2:	041b      	lsls	r3, r3, #16
 800f1e4:	43db      	mvns	r3, r3
 800f1e6:	68f9      	ldr	r1, [r7, #12]
 800f1e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f1ec:	4013      	ands	r3, r2
 800f1ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1f6:	69da      	ldr	r2, [r3, #28]
 800f1f8:	683b      	ldr	r3, [r7, #0]
 800f1fa:	781b      	ldrb	r3, [r3, #0]
 800f1fc:	f003 030f 	and.w	r3, r3, #15
 800f200:	2101      	movs	r1, #1
 800f202:	fa01 f303 	lsl.w	r3, r1, r3
 800f206:	041b      	lsls	r3, r3, #16
 800f208:	43db      	mvns	r3, r3
 800f20a:	68f9      	ldr	r1, [r7, #12]
 800f20c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f210:	4013      	ands	r3, r2
 800f212:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f214:	68bb      	ldr	r3, [r7, #8]
 800f216:	015a      	lsls	r2, r3, #5
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	4413      	add	r3, r2
 800f21c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f220:	681a      	ldr	r2, [r3, #0]
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	0159      	lsls	r1, r3, #5
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	440b      	add	r3, r1
 800f22a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f22e:	4619      	mov	r1, r3
 800f230:	4b05      	ldr	r3, [pc, #20]	; (800f248 <USB_DeactivateEndpoint+0x1b4>)
 800f232:	4013      	ands	r3, r2
 800f234:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f236:	2300      	movs	r3, #0
}
 800f238:	4618      	mov	r0, r3
 800f23a:	3714      	adds	r7, #20
 800f23c:	46bd      	mov	sp, r7
 800f23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f242:	4770      	bx	lr
 800f244:	ec337800 	.word	0xec337800
 800f248:	eff37800 	.word	0xeff37800

0800f24c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b08a      	sub	sp, #40	; 0x28
 800f250:	af02      	add	r7, sp, #8
 800f252:	60f8      	str	r0, [r7, #12]
 800f254:	60b9      	str	r1, [r7, #8]
 800f256:	4613      	mov	r3, r2
 800f258:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	781b      	ldrb	r3, [r3, #0]
 800f262:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f264:	68bb      	ldr	r3, [r7, #8]
 800f266:	785b      	ldrb	r3, [r3, #1]
 800f268:	2b01      	cmp	r3, #1
 800f26a:	f040 815c 	bne.w	800f526 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f26e:	68bb      	ldr	r3, [r7, #8]
 800f270:	695b      	ldr	r3, [r3, #20]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d132      	bne.n	800f2dc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f276:	69bb      	ldr	r3, [r7, #24]
 800f278:	015a      	lsls	r2, r3, #5
 800f27a:	69fb      	ldr	r3, [r7, #28]
 800f27c:	4413      	add	r3, r2
 800f27e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f282:	691b      	ldr	r3, [r3, #16]
 800f284:	69ba      	ldr	r2, [r7, #24]
 800f286:	0151      	lsls	r1, r2, #5
 800f288:	69fa      	ldr	r2, [r7, #28]
 800f28a:	440a      	add	r2, r1
 800f28c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f290:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f294:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f298:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f29a:	69bb      	ldr	r3, [r7, #24]
 800f29c:	015a      	lsls	r2, r3, #5
 800f29e:	69fb      	ldr	r3, [r7, #28]
 800f2a0:	4413      	add	r3, r2
 800f2a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2a6:	691b      	ldr	r3, [r3, #16]
 800f2a8:	69ba      	ldr	r2, [r7, #24]
 800f2aa:	0151      	lsls	r1, r2, #5
 800f2ac:	69fa      	ldr	r2, [r7, #28]
 800f2ae:	440a      	add	r2, r1
 800f2b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f2b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f2b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f2ba:	69bb      	ldr	r3, [r7, #24]
 800f2bc:	015a      	lsls	r2, r3, #5
 800f2be:	69fb      	ldr	r3, [r7, #28]
 800f2c0:	4413      	add	r3, r2
 800f2c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2c6:	691b      	ldr	r3, [r3, #16]
 800f2c8:	69ba      	ldr	r2, [r7, #24]
 800f2ca:	0151      	lsls	r1, r2, #5
 800f2cc:	69fa      	ldr	r2, [r7, #28]
 800f2ce:	440a      	add	r2, r1
 800f2d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f2d4:	0cdb      	lsrs	r3, r3, #19
 800f2d6:	04db      	lsls	r3, r3, #19
 800f2d8:	6113      	str	r3, [r2, #16]
 800f2da:	e074      	b.n	800f3c6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f2dc:	69bb      	ldr	r3, [r7, #24]
 800f2de:	015a      	lsls	r2, r3, #5
 800f2e0:	69fb      	ldr	r3, [r7, #28]
 800f2e2:	4413      	add	r3, r2
 800f2e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2e8:	691b      	ldr	r3, [r3, #16]
 800f2ea:	69ba      	ldr	r2, [r7, #24]
 800f2ec:	0151      	lsls	r1, r2, #5
 800f2ee:	69fa      	ldr	r2, [r7, #28]
 800f2f0:	440a      	add	r2, r1
 800f2f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f2f6:	0cdb      	lsrs	r3, r3, #19
 800f2f8:	04db      	lsls	r3, r3, #19
 800f2fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f2fc:	69bb      	ldr	r3, [r7, #24]
 800f2fe:	015a      	lsls	r2, r3, #5
 800f300:	69fb      	ldr	r3, [r7, #28]
 800f302:	4413      	add	r3, r2
 800f304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f308:	691b      	ldr	r3, [r3, #16]
 800f30a:	69ba      	ldr	r2, [r7, #24]
 800f30c:	0151      	lsls	r1, r2, #5
 800f30e:	69fa      	ldr	r2, [r7, #28]
 800f310:	440a      	add	r2, r1
 800f312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f316:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f31a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f31e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f320:	69bb      	ldr	r3, [r7, #24]
 800f322:	015a      	lsls	r2, r3, #5
 800f324:	69fb      	ldr	r3, [r7, #28]
 800f326:	4413      	add	r3, r2
 800f328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f32c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	6959      	ldr	r1, [r3, #20]
 800f332:	68bb      	ldr	r3, [r7, #8]
 800f334:	689b      	ldr	r3, [r3, #8]
 800f336:	440b      	add	r3, r1
 800f338:	1e59      	subs	r1, r3, #1
 800f33a:	68bb      	ldr	r3, [r7, #8]
 800f33c:	689b      	ldr	r3, [r3, #8]
 800f33e:	fbb1 f3f3 	udiv	r3, r1, r3
 800f342:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f344:	4b9d      	ldr	r3, [pc, #628]	; (800f5bc <USB_EPStartXfer+0x370>)
 800f346:	400b      	ands	r3, r1
 800f348:	69b9      	ldr	r1, [r7, #24]
 800f34a:	0148      	lsls	r0, r1, #5
 800f34c:	69f9      	ldr	r1, [r7, #28]
 800f34e:	4401      	add	r1, r0
 800f350:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f354:	4313      	orrs	r3, r2
 800f356:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f358:	69bb      	ldr	r3, [r7, #24]
 800f35a:	015a      	lsls	r2, r3, #5
 800f35c:	69fb      	ldr	r3, [r7, #28]
 800f35e:	4413      	add	r3, r2
 800f360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f364:	691a      	ldr	r2, [r3, #16]
 800f366:	68bb      	ldr	r3, [r7, #8]
 800f368:	695b      	ldr	r3, [r3, #20]
 800f36a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f36e:	69b9      	ldr	r1, [r7, #24]
 800f370:	0148      	lsls	r0, r1, #5
 800f372:	69f9      	ldr	r1, [r7, #28]
 800f374:	4401      	add	r1, r0
 800f376:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f37a:	4313      	orrs	r3, r2
 800f37c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800f37e:	68bb      	ldr	r3, [r7, #8]
 800f380:	78db      	ldrb	r3, [r3, #3]
 800f382:	2b01      	cmp	r3, #1
 800f384:	d11f      	bne.n	800f3c6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f386:	69bb      	ldr	r3, [r7, #24]
 800f388:	015a      	lsls	r2, r3, #5
 800f38a:	69fb      	ldr	r3, [r7, #28]
 800f38c:	4413      	add	r3, r2
 800f38e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f392:	691b      	ldr	r3, [r3, #16]
 800f394:	69ba      	ldr	r2, [r7, #24]
 800f396:	0151      	lsls	r1, r2, #5
 800f398:	69fa      	ldr	r2, [r7, #28]
 800f39a:	440a      	add	r2, r1
 800f39c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f3a0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f3a4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f3a6:	69bb      	ldr	r3, [r7, #24]
 800f3a8:	015a      	lsls	r2, r3, #5
 800f3aa:	69fb      	ldr	r3, [r7, #28]
 800f3ac:	4413      	add	r3, r2
 800f3ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3b2:	691b      	ldr	r3, [r3, #16]
 800f3b4:	69ba      	ldr	r2, [r7, #24]
 800f3b6:	0151      	lsls	r1, r2, #5
 800f3b8:	69fa      	ldr	r2, [r7, #28]
 800f3ba:	440a      	add	r2, r1
 800f3bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f3c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f3c4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800f3c6:	79fb      	ldrb	r3, [r7, #7]
 800f3c8:	2b01      	cmp	r3, #1
 800f3ca:	d14b      	bne.n	800f464 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f3cc:	68bb      	ldr	r3, [r7, #8]
 800f3ce:	691b      	ldr	r3, [r3, #16]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d009      	beq.n	800f3e8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f3d4:	69bb      	ldr	r3, [r7, #24]
 800f3d6:	015a      	lsls	r2, r3, #5
 800f3d8:	69fb      	ldr	r3, [r7, #28]
 800f3da:	4413      	add	r3, r2
 800f3dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3e0:	461a      	mov	r2, r3
 800f3e2:	68bb      	ldr	r3, [r7, #8]
 800f3e4:	691b      	ldr	r3, [r3, #16]
 800f3e6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f3e8:	68bb      	ldr	r3, [r7, #8]
 800f3ea:	78db      	ldrb	r3, [r3, #3]
 800f3ec:	2b01      	cmp	r3, #1
 800f3ee:	d128      	bne.n	800f442 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f3f0:	69fb      	ldr	r3, [r7, #28]
 800f3f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3f6:	689b      	ldr	r3, [r3, #8]
 800f3f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d110      	bne.n	800f422 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f400:	69bb      	ldr	r3, [r7, #24]
 800f402:	015a      	lsls	r2, r3, #5
 800f404:	69fb      	ldr	r3, [r7, #28]
 800f406:	4413      	add	r3, r2
 800f408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	69ba      	ldr	r2, [r7, #24]
 800f410:	0151      	lsls	r1, r2, #5
 800f412:	69fa      	ldr	r2, [r7, #28]
 800f414:	440a      	add	r2, r1
 800f416:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f41a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f41e:	6013      	str	r3, [r2, #0]
 800f420:	e00f      	b.n	800f442 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f422:	69bb      	ldr	r3, [r7, #24]
 800f424:	015a      	lsls	r2, r3, #5
 800f426:	69fb      	ldr	r3, [r7, #28]
 800f428:	4413      	add	r3, r2
 800f42a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	69ba      	ldr	r2, [r7, #24]
 800f432:	0151      	lsls	r1, r2, #5
 800f434:	69fa      	ldr	r2, [r7, #28]
 800f436:	440a      	add	r2, r1
 800f438:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f43c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f440:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f442:	69bb      	ldr	r3, [r7, #24]
 800f444:	015a      	lsls	r2, r3, #5
 800f446:	69fb      	ldr	r3, [r7, #28]
 800f448:	4413      	add	r3, r2
 800f44a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	69ba      	ldr	r2, [r7, #24]
 800f452:	0151      	lsls	r1, r2, #5
 800f454:	69fa      	ldr	r2, [r7, #28]
 800f456:	440a      	add	r2, r1
 800f458:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f45c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f460:	6013      	str	r3, [r2, #0]
 800f462:	e12f      	b.n	800f6c4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f464:	69bb      	ldr	r3, [r7, #24]
 800f466:	015a      	lsls	r2, r3, #5
 800f468:	69fb      	ldr	r3, [r7, #28]
 800f46a:	4413      	add	r3, r2
 800f46c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	69ba      	ldr	r2, [r7, #24]
 800f474:	0151      	lsls	r1, r2, #5
 800f476:	69fa      	ldr	r2, [r7, #28]
 800f478:	440a      	add	r2, r1
 800f47a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f47e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f482:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f484:	68bb      	ldr	r3, [r7, #8]
 800f486:	78db      	ldrb	r3, [r3, #3]
 800f488:	2b01      	cmp	r3, #1
 800f48a:	d015      	beq.n	800f4b8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	695b      	ldr	r3, [r3, #20]
 800f490:	2b00      	cmp	r3, #0
 800f492:	f000 8117 	beq.w	800f6c4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f496:	69fb      	ldr	r3, [r7, #28]
 800f498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f49c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	781b      	ldrb	r3, [r3, #0]
 800f4a2:	f003 030f 	and.w	r3, r3, #15
 800f4a6:	2101      	movs	r1, #1
 800f4a8:	fa01 f303 	lsl.w	r3, r1, r3
 800f4ac:	69f9      	ldr	r1, [r7, #28]
 800f4ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f4b2:	4313      	orrs	r3, r2
 800f4b4:	634b      	str	r3, [r1, #52]	; 0x34
 800f4b6:	e105      	b.n	800f6c4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f4b8:	69fb      	ldr	r3, [r7, #28]
 800f4ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4be:	689b      	ldr	r3, [r3, #8]
 800f4c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d110      	bne.n	800f4ea <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f4c8:	69bb      	ldr	r3, [r7, #24]
 800f4ca:	015a      	lsls	r2, r3, #5
 800f4cc:	69fb      	ldr	r3, [r7, #28]
 800f4ce:	4413      	add	r3, r2
 800f4d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	69ba      	ldr	r2, [r7, #24]
 800f4d8:	0151      	lsls	r1, r2, #5
 800f4da:	69fa      	ldr	r2, [r7, #28]
 800f4dc:	440a      	add	r2, r1
 800f4de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f4e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f4e6:	6013      	str	r3, [r2, #0]
 800f4e8:	e00f      	b.n	800f50a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f4ea:	69bb      	ldr	r3, [r7, #24]
 800f4ec:	015a      	lsls	r2, r3, #5
 800f4ee:	69fb      	ldr	r3, [r7, #28]
 800f4f0:	4413      	add	r3, r2
 800f4f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	69ba      	ldr	r2, [r7, #24]
 800f4fa:	0151      	lsls	r1, r2, #5
 800f4fc:	69fa      	ldr	r2, [r7, #28]
 800f4fe:	440a      	add	r2, r1
 800f500:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f508:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f50a:	68bb      	ldr	r3, [r7, #8]
 800f50c:	68d9      	ldr	r1, [r3, #12]
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	781a      	ldrb	r2, [r3, #0]
 800f512:	68bb      	ldr	r3, [r7, #8]
 800f514:	695b      	ldr	r3, [r3, #20]
 800f516:	b298      	uxth	r0, r3
 800f518:	79fb      	ldrb	r3, [r7, #7]
 800f51a:	9300      	str	r3, [sp, #0]
 800f51c:	4603      	mov	r3, r0
 800f51e:	68f8      	ldr	r0, [r7, #12]
 800f520:	f000 fa2b 	bl	800f97a <USB_WritePacket>
 800f524:	e0ce      	b.n	800f6c4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f526:	69bb      	ldr	r3, [r7, #24]
 800f528:	015a      	lsls	r2, r3, #5
 800f52a:	69fb      	ldr	r3, [r7, #28]
 800f52c:	4413      	add	r3, r2
 800f52e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f532:	691b      	ldr	r3, [r3, #16]
 800f534:	69ba      	ldr	r2, [r7, #24]
 800f536:	0151      	lsls	r1, r2, #5
 800f538:	69fa      	ldr	r2, [r7, #28]
 800f53a:	440a      	add	r2, r1
 800f53c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f540:	0cdb      	lsrs	r3, r3, #19
 800f542:	04db      	lsls	r3, r3, #19
 800f544:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f546:	69bb      	ldr	r3, [r7, #24]
 800f548:	015a      	lsls	r2, r3, #5
 800f54a:	69fb      	ldr	r3, [r7, #28]
 800f54c:	4413      	add	r3, r2
 800f54e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f552:	691b      	ldr	r3, [r3, #16]
 800f554:	69ba      	ldr	r2, [r7, #24]
 800f556:	0151      	lsls	r1, r2, #5
 800f558:	69fa      	ldr	r2, [r7, #28]
 800f55a:	440a      	add	r2, r1
 800f55c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f560:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f564:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f568:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800f56a:	68bb      	ldr	r3, [r7, #8]
 800f56c:	695b      	ldr	r3, [r3, #20]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d126      	bne.n	800f5c0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f572:	69bb      	ldr	r3, [r7, #24]
 800f574:	015a      	lsls	r2, r3, #5
 800f576:	69fb      	ldr	r3, [r7, #28]
 800f578:	4413      	add	r3, r2
 800f57a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f57e:	691a      	ldr	r2, [r3, #16]
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	689b      	ldr	r3, [r3, #8]
 800f584:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f588:	69b9      	ldr	r1, [r7, #24]
 800f58a:	0148      	lsls	r0, r1, #5
 800f58c:	69f9      	ldr	r1, [r7, #28]
 800f58e:	4401      	add	r1, r0
 800f590:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f594:	4313      	orrs	r3, r2
 800f596:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f598:	69bb      	ldr	r3, [r7, #24]
 800f59a:	015a      	lsls	r2, r3, #5
 800f59c:	69fb      	ldr	r3, [r7, #28]
 800f59e:	4413      	add	r3, r2
 800f5a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5a4:	691b      	ldr	r3, [r3, #16]
 800f5a6:	69ba      	ldr	r2, [r7, #24]
 800f5a8:	0151      	lsls	r1, r2, #5
 800f5aa:	69fa      	ldr	r2, [r7, #28]
 800f5ac:	440a      	add	r2, r1
 800f5ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f5b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f5b6:	6113      	str	r3, [r2, #16]
 800f5b8:	e036      	b.n	800f628 <USB_EPStartXfer+0x3dc>
 800f5ba:	bf00      	nop
 800f5bc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f5c0:	68bb      	ldr	r3, [r7, #8]
 800f5c2:	695a      	ldr	r2, [r3, #20]
 800f5c4:	68bb      	ldr	r3, [r7, #8]
 800f5c6:	689b      	ldr	r3, [r3, #8]
 800f5c8:	4413      	add	r3, r2
 800f5ca:	1e5a      	subs	r2, r3, #1
 800f5cc:	68bb      	ldr	r3, [r7, #8]
 800f5ce:	689b      	ldr	r3, [r3, #8]
 800f5d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5d4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f5d6:	69bb      	ldr	r3, [r7, #24]
 800f5d8:	015a      	lsls	r2, r3, #5
 800f5da:	69fb      	ldr	r3, [r7, #28]
 800f5dc:	4413      	add	r3, r2
 800f5de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5e2:	691a      	ldr	r2, [r3, #16]
 800f5e4:	8afb      	ldrh	r3, [r7, #22]
 800f5e6:	04d9      	lsls	r1, r3, #19
 800f5e8:	4b39      	ldr	r3, [pc, #228]	; (800f6d0 <USB_EPStartXfer+0x484>)
 800f5ea:	400b      	ands	r3, r1
 800f5ec:	69b9      	ldr	r1, [r7, #24]
 800f5ee:	0148      	lsls	r0, r1, #5
 800f5f0:	69f9      	ldr	r1, [r7, #28]
 800f5f2:	4401      	add	r1, r0
 800f5f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f5f8:	4313      	orrs	r3, r2
 800f5fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f5fc:	69bb      	ldr	r3, [r7, #24]
 800f5fe:	015a      	lsls	r2, r3, #5
 800f600:	69fb      	ldr	r3, [r7, #28]
 800f602:	4413      	add	r3, r2
 800f604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f608:	691a      	ldr	r2, [r3, #16]
 800f60a:	68bb      	ldr	r3, [r7, #8]
 800f60c:	689b      	ldr	r3, [r3, #8]
 800f60e:	8af9      	ldrh	r1, [r7, #22]
 800f610:	fb01 f303 	mul.w	r3, r1, r3
 800f614:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f618:	69b9      	ldr	r1, [r7, #24]
 800f61a:	0148      	lsls	r0, r1, #5
 800f61c:	69f9      	ldr	r1, [r7, #28]
 800f61e:	4401      	add	r1, r0
 800f620:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f624:	4313      	orrs	r3, r2
 800f626:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f628:	79fb      	ldrb	r3, [r7, #7]
 800f62a:	2b01      	cmp	r3, #1
 800f62c:	d10d      	bne.n	800f64a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f62e:	68bb      	ldr	r3, [r7, #8]
 800f630:	68db      	ldr	r3, [r3, #12]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d009      	beq.n	800f64a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f636:	68bb      	ldr	r3, [r7, #8]
 800f638:	68d9      	ldr	r1, [r3, #12]
 800f63a:	69bb      	ldr	r3, [r7, #24]
 800f63c:	015a      	lsls	r2, r3, #5
 800f63e:	69fb      	ldr	r3, [r7, #28]
 800f640:	4413      	add	r3, r2
 800f642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f646:	460a      	mov	r2, r1
 800f648:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f64a:	68bb      	ldr	r3, [r7, #8]
 800f64c:	78db      	ldrb	r3, [r3, #3]
 800f64e:	2b01      	cmp	r3, #1
 800f650:	d128      	bne.n	800f6a4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f652:	69fb      	ldr	r3, [r7, #28]
 800f654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f658:	689b      	ldr	r3, [r3, #8]
 800f65a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d110      	bne.n	800f684 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f662:	69bb      	ldr	r3, [r7, #24]
 800f664:	015a      	lsls	r2, r3, #5
 800f666:	69fb      	ldr	r3, [r7, #28]
 800f668:	4413      	add	r3, r2
 800f66a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	69ba      	ldr	r2, [r7, #24]
 800f672:	0151      	lsls	r1, r2, #5
 800f674:	69fa      	ldr	r2, [r7, #28]
 800f676:	440a      	add	r2, r1
 800f678:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f67c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f680:	6013      	str	r3, [r2, #0]
 800f682:	e00f      	b.n	800f6a4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f684:	69bb      	ldr	r3, [r7, #24]
 800f686:	015a      	lsls	r2, r3, #5
 800f688:	69fb      	ldr	r3, [r7, #28]
 800f68a:	4413      	add	r3, r2
 800f68c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	69ba      	ldr	r2, [r7, #24]
 800f694:	0151      	lsls	r1, r2, #5
 800f696:	69fa      	ldr	r2, [r7, #28]
 800f698:	440a      	add	r2, r1
 800f69a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f69e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f6a2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f6a4:	69bb      	ldr	r3, [r7, #24]
 800f6a6:	015a      	lsls	r2, r3, #5
 800f6a8:	69fb      	ldr	r3, [r7, #28]
 800f6aa:	4413      	add	r3, r2
 800f6ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	69ba      	ldr	r2, [r7, #24]
 800f6b4:	0151      	lsls	r1, r2, #5
 800f6b6:	69fa      	ldr	r2, [r7, #28]
 800f6b8:	440a      	add	r2, r1
 800f6ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f6be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f6c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f6c4:	2300      	movs	r3, #0
}
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	3720      	adds	r7, #32
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	bd80      	pop	{r7, pc}
 800f6ce:	bf00      	nop
 800f6d0:	1ff80000 	.word	0x1ff80000

0800f6d4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f6d4:	b480      	push	{r7}
 800f6d6:	b087      	sub	sp, #28
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	60f8      	str	r0, [r7, #12]
 800f6dc:	60b9      	str	r1, [r7, #8]
 800f6de:	4613      	mov	r3, r2
 800f6e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	781b      	ldrb	r3, [r3, #0]
 800f6ea:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f6ec:	68bb      	ldr	r3, [r7, #8]
 800f6ee:	785b      	ldrb	r3, [r3, #1]
 800f6f0:	2b01      	cmp	r3, #1
 800f6f2:	f040 80cd 	bne.w	800f890 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f6f6:	68bb      	ldr	r3, [r7, #8]
 800f6f8:	695b      	ldr	r3, [r3, #20]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d132      	bne.n	800f764 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f6fe:	693b      	ldr	r3, [r7, #16]
 800f700:	015a      	lsls	r2, r3, #5
 800f702:	697b      	ldr	r3, [r7, #20]
 800f704:	4413      	add	r3, r2
 800f706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f70a:	691b      	ldr	r3, [r3, #16]
 800f70c:	693a      	ldr	r2, [r7, #16]
 800f70e:	0151      	lsls	r1, r2, #5
 800f710:	697a      	ldr	r2, [r7, #20]
 800f712:	440a      	add	r2, r1
 800f714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f718:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f71c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f720:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f722:	693b      	ldr	r3, [r7, #16]
 800f724:	015a      	lsls	r2, r3, #5
 800f726:	697b      	ldr	r3, [r7, #20]
 800f728:	4413      	add	r3, r2
 800f72a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f72e:	691b      	ldr	r3, [r3, #16]
 800f730:	693a      	ldr	r2, [r7, #16]
 800f732:	0151      	lsls	r1, r2, #5
 800f734:	697a      	ldr	r2, [r7, #20]
 800f736:	440a      	add	r2, r1
 800f738:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f73c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f740:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f742:	693b      	ldr	r3, [r7, #16]
 800f744:	015a      	lsls	r2, r3, #5
 800f746:	697b      	ldr	r3, [r7, #20]
 800f748:	4413      	add	r3, r2
 800f74a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f74e:	691b      	ldr	r3, [r3, #16]
 800f750:	693a      	ldr	r2, [r7, #16]
 800f752:	0151      	lsls	r1, r2, #5
 800f754:	697a      	ldr	r2, [r7, #20]
 800f756:	440a      	add	r2, r1
 800f758:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f75c:	0cdb      	lsrs	r3, r3, #19
 800f75e:	04db      	lsls	r3, r3, #19
 800f760:	6113      	str	r3, [r2, #16]
 800f762:	e04e      	b.n	800f802 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f764:	693b      	ldr	r3, [r7, #16]
 800f766:	015a      	lsls	r2, r3, #5
 800f768:	697b      	ldr	r3, [r7, #20]
 800f76a:	4413      	add	r3, r2
 800f76c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f770:	691b      	ldr	r3, [r3, #16]
 800f772:	693a      	ldr	r2, [r7, #16]
 800f774:	0151      	lsls	r1, r2, #5
 800f776:	697a      	ldr	r2, [r7, #20]
 800f778:	440a      	add	r2, r1
 800f77a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f77e:	0cdb      	lsrs	r3, r3, #19
 800f780:	04db      	lsls	r3, r3, #19
 800f782:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f784:	693b      	ldr	r3, [r7, #16]
 800f786:	015a      	lsls	r2, r3, #5
 800f788:	697b      	ldr	r3, [r7, #20]
 800f78a:	4413      	add	r3, r2
 800f78c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f790:	691b      	ldr	r3, [r3, #16]
 800f792:	693a      	ldr	r2, [r7, #16]
 800f794:	0151      	lsls	r1, r2, #5
 800f796:	697a      	ldr	r2, [r7, #20]
 800f798:	440a      	add	r2, r1
 800f79a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f79e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f7a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f7a6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800f7a8:	68bb      	ldr	r3, [r7, #8]
 800f7aa:	695a      	ldr	r2, [r3, #20]
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	689b      	ldr	r3, [r3, #8]
 800f7b0:	429a      	cmp	r2, r3
 800f7b2:	d903      	bls.n	800f7bc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	689a      	ldr	r2, [r3, #8]
 800f7b8:	68bb      	ldr	r3, [r7, #8]
 800f7ba:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f7bc:	693b      	ldr	r3, [r7, #16]
 800f7be:	015a      	lsls	r2, r3, #5
 800f7c0:	697b      	ldr	r3, [r7, #20]
 800f7c2:	4413      	add	r3, r2
 800f7c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7c8:	691b      	ldr	r3, [r3, #16]
 800f7ca:	693a      	ldr	r2, [r7, #16]
 800f7cc:	0151      	lsls	r1, r2, #5
 800f7ce:	697a      	ldr	r2, [r7, #20]
 800f7d0:	440a      	add	r2, r1
 800f7d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f7d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f7da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f7dc:	693b      	ldr	r3, [r7, #16]
 800f7de:	015a      	lsls	r2, r3, #5
 800f7e0:	697b      	ldr	r3, [r7, #20]
 800f7e2:	4413      	add	r3, r2
 800f7e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7e8:	691a      	ldr	r2, [r3, #16]
 800f7ea:	68bb      	ldr	r3, [r7, #8]
 800f7ec:	695b      	ldr	r3, [r3, #20]
 800f7ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f7f2:	6939      	ldr	r1, [r7, #16]
 800f7f4:	0148      	lsls	r0, r1, #5
 800f7f6:	6979      	ldr	r1, [r7, #20]
 800f7f8:	4401      	add	r1, r0
 800f7fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f7fe:	4313      	orrs	r3, r2
 800f800:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f802:	79fb      	ldrb	r3, [r7, #7]
 800f804:	2b01      	cmp	r3, #1
 800f806:	d11e      	bne.n	800f846 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f808:	68bb      	ldr	r3, [r7, #8]
 800f80a:	691b      	ldr	r3, [r3, #16]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d009      	beq.n	800f824 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f810:	693b      	ldr	r3, [r7, #16]
 800f812:	015a      	lsls	r2, r3, #5
 800f814:	697b      	ldr	r3, [r7, #20]
 800f816:	4413      	add	r3, r2
 800f818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f81c:	461a      	mov	r2, r3
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	691b      	ldr	r3, [r3, #16]
 800f822:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f824:	693b      	ldr	r3, [r7, #16]
 800f826:	015a      	lsls	r2, r3, #5
 800f828:	697b      	ldr	r3, [r7, #20]
 800f82a:	4413      	add	r3, r2
 800f82c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	693a      	ldr	r2, [r7, #16]
 800f834:	0151      	lsls	r1, r2, #5
 800f836:	697a      	ldr	r2, [r7, #20]
 800f838:	440a      	add	r2, r1
 800f83a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f83e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f842:	6013      	str	r3, [r2, #0]
 800f844:	e092      	b.n	800f96c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f846:	693b      	ldr	r3, [r7, #16]
 800f848:	015a      	lsls	r2, r3, #5
 800f84a:	697b      	ldr	r3, [r7, #20]
 800f84c:	4413      	add	r3, r2
 800f84e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	693a      	ldr	r2, [r7, #16]
 800f856:	0151      	lsls	r1, r2, #5
 800f858:	697a      	ldr	r2, [r7, #20]
 800f85a:	440a      	add	r2, r1
 800f85c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f860:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f864:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800f866:	68bb      	ldr	r3, [r7, #8]
 800f868:	695b      	ldr	r3, [r3, #20]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d07e      	beq.n	800f96c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f86e:	697b      	ldr	r3, [r7, #20]
 800f870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f874:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f876:	68bb      	ldr	r3, [r7, #8]
 800f878:	781b      	ldrb	r3, [r3, #0]
 800f87a:	f003 030f 	and.w	r3, r3, #15
 800f87e:	2101      	movs	r1, #1
 800f880:	fa01 f303 	lsl.w	r3, r1, r3
 800f884:	6979      	ldr	r1, [r7, #20]
 800f886:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f88a:	4313      	orrs	r3, r2
 800f88c:	634b      	str	r3, [r1, #52]	; 0x34
 800f88e:	e06d      	b.n	800f96c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f890:	693b      	ldr	r3, [r7, #16]
 800f892:	015a      	lsls	r2, r3, #5
 800f894:	697b      	ldr	r3, [r7, #20]
 800f896:	4413      	add	r3, r2
 800f898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f89c:	691b      	ldr	r3, [r3, #16]
 800f89e:	693a      	ldr	r2, [r7, #16]
 800f8a0:	0151      	lsls	r1, r2, #5
 800f8a2:	697a      	ldr	r2, [r7, #20]
 800f8a4:	440a      	add	r2, r1
 800f8a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8aa:	0cdb      	lsrs	r3, r3, #19
 800f8ac:	04db      	lsls	r3, r3, #19
 800f8ae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f8b0:	693b      	ldr	r3, [r7, #16]
 800f8b2:	015a      	lsls	r2, r3, #5
 800f8b4:	697b      	ldr	r3, [r7, #20]
 800f8b6:	4413      	add	r3, r2
 800f8b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8bc:	691b      	ldr	r3, [r3, #16]
 800f8be:	693a      	ldr	r2, [r7, #16]
 800f8c0:	0151      	lsls	r1, r2, #5
 800f8c2:	697a      	ldr	r2, [r7, #20]
 800f8c4:	440a      	add	r2, r1
 800f8c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f8ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f8d2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800f8d4:	68bb      	ldr	r3, [r7, #8]
 800f8d6:	695b      	ldr	r3, [r3, #20]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d003      	beq.n	800f8e4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800f8dc:	68bb      	ldr	r3, [r7, #8]
 800f8de:	689a      	ldr	r2, [r3, #8]
 800f8e0:	68bb      	ldr	r3, [r7, #8]
 800f8e2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f8e4:	693b      	ldr	r3, [r7, #16]
 800f8e6:	015a      	lsls	r2, r3, #5
 800f8e8:	697b      	ldr	r3, [r7, #20]
 800f8ea:	4413      	add	r3, r2
 800f8ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8f0:	691b      	ldr	r3, [r3, #16]
 800f8f2:	693a      	ldr	r2, [r7, #16]
 800f8f4:	0151      	lsls	r1, r2, #5
 800f8f6:	697a      	ldr	r2, [r7, #20]
 800f8f8:	440a      	add	r2, r1
 800f8fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f902:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800f904:	693b      	ldr	r3, [r7, #16]
 800f906:	015a      	lsls	r2, r3, #5
 800f908:	697b      	ldr	r3, [r7, #20]
 800f90a:	4413      	add	r3, r2
 800f90c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f910:	691a      	ldr	r2, [r3, #16]
 800f912:	68bb      	ldr	r3, [r7, #8]
 800f914:	689b      	ldr	r3, [r3, #8]
 800f916:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f91a:	6939      	ldr	r1, [r7, #16]
 800f91c:	0148      	lsls	r0, r1, #5
 800f91e:	6979      	ldr	r1, [r7, #20]
 800f920:	4401      	add	r1, r0
 800f922:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f926:	4313      	orrs	r3, r2
 800f928:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800f92a:	79fb      	ldrb	r3, [r7, #7]
 800f92c:	2b01      	cmp	r3, #1
 800f92e:	d10d      	bne.n	800f94c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f930:	68bb      	ldr	r3, [r7, #8]
 800f932:	68db      	ldr	r3, [r3, #12]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d009      	beq.n	800f94c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f938:	68bb      	ldr	r3, [r7, #8]
 800f93a:	68d9      	ldr	r1, [r3, #12]
 800f93c:	693b      	ldr	r3, [r7, #16]
 800f93e:	015a      	lsls	r2, r3, #5
 800f940:	697b      	ldr	r3, [r7, #20]
 800f942:	4413      	add	r3, r2
 800f944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f948:	460a      	mov	r2, r1
 800f94a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f94c:	693b      	ldr	r3, [r7, #16]
 800f94e:	015a      	lsls	r2, r3, #5
 800f950:	697b      	ldr	r3, [r7, #20]
 800f952:	4413      	add	r3, r2
 800f954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	693a      	ldr	r2, [r7, #16]
 800f95c:	0151      	lsls	r1, r2, #5
 800f95e:	697a      	ldr	r2, [r7, #20]
 800f960:	440a      	add	r2, r1
 800f962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f966:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f96a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f96c:	2300      	movs	r3, #0
}
 800f96e:	4618      	mov	r0, r3
 800f970:	371c      	adds	r7, #28
 800f972:	46bd      	mov	sp, r7
 800f974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f978:	4770      	bx	lr

0800f97a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f97a:	b480      	push	{r7}
 800f97c:	b089      	sub	sp, #36	; 0x24
 800f97e:	af00      	add	r7, sp, #0
 800f980:	60f8      	str	r0, [r7, #12]
 800f982:	60b9      	str	r1, [r7, #8]
 800f984:	4611      	mov	r1, r2
 800f986:	461a      	mov	r2, r3
 800f988:	460b      	mov	r3, r1
 800f98a:	71fb      	strb	r3, [r7, #7]
 800f98c:	4613      	mov	r3, r2
 800f98e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f994:	68bb      	ldr	r3, [r7, #8]
 800f996:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800f998:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d123      	bne.n	800f9e8 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f9a0:	88bb      	ldrh	r3, [r7, #4]
 800f9a2:	3303      	adds	r3, #3
 800f9a4:	089b      	lsrs	r3, r3, #2
 800f9a6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	61bb      	str	r3, [r7, #24]
 800f9ac:	e018      	b.n	800f9e0 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f9ae:	79fb      	ldrb	r3, [r7, #7]
 800f9b0:	031a      	lsls	r2, r3, #12
 800f9b2:	697b      	ldr	r3, [r7, #20]
 800f9b4:	4413      	add	r3, r2
 800f9b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9ba:	461a      	mov	r2, r3
 800f9bc:	69fb      	ldr	r3, [r7, #28]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f9c2:	69fb      	ldr	r3, [r7, #28]
 800f9c4:	3301      	adds	r3, #1
 800f9c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f9c8:	69fb      	ldr	r3, [r7, #28]
 800f9ca:	3301      	adds	r3, #1
 800f9cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f9ce:	69fb      	ldr	r3, [r7, #28]
 800f9d0:	3301      	adds	r3, #1
 800f9d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f9d4:	69fb      	ldr	r3, [r7, #28]
 800f9d6:	3301      	adds	r3, #1
 800f9d8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f9da:	69bb      	ldr	r3, [r7, #24]
 800f9dc:	3301      	adds	r3, #1
 800f9de:	61bb      	str	r3, [r7, #24]
 800f9e0:	69ba      	ldr	r2, [r7, #24]
 800f9e2:	693b      	ldr	r3, [r7, #16]
 800f9e4:	429a      	cmp	r2, r3
 800f9e6:	d3e2      	bcc.n	800f9ae <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f9e8:	2300      	movs	r3, #0
}
 800f9ea:	4618      	mov	r0, r3
 800f9ec:	3724      	adds	r7, #36	; 0x24
 800f9ee:	46bd      	mov	sp, r7
 800f9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f4:	4770      	bx	lr

0800f9f6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f9f6:	b480      	push	{r7}
 800f9f8:	b08b      	sub	sp, #44	; 0x2c
 800f9fa:	af00      	add	r7, sp, #0
 800f9fc:	60f8      	str	r0, [r7, #12]
 800f9fe:	60b9      	str	r1, [r7, #8]
 800fa00:	4613      	mov	r3, r2
 800fa02:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800fa08:	68bb      	ldr	r3, [r7, #8]
 800fa0a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800fa0c:	88fb      	ldrh	r3, [r7, #6]
 800fa0e:	089b      	lsrs	r3, r3, #2
 800fa10:	b29b      	uxth	r3, r3
 800fa12:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800fa14:	88fb      	ldrh	r3, [r7, #6]
 800fa16:	f003 0303 	and.w	r3, r3, #3
 800fa1a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	623b      	str	r3, [r7, #32]
 800fa20:	e014      	b.n	800fa4c <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800fa22:	69bb      	ldr	r3, [r7, #24]
 800fa24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa28:	681a      	ldr	r2, [r3, #0]
 800fa2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa2c:	601a      	str	r2, [r3, #0]
    pDest++;
 800fa2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa30:	3301      	adds	r3, #1
 800fa32:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800fa34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa36:	3301      	adds	r3, #1
 800fa38:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800fa3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa3c:	3301      	adds	r3, #1
 800fa3e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800fa40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa42:	3301      	adds	r3, #1
 800fa44:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800fa46:	6a3b      	ldr	r3, [r7, #32]
 800fa48:	3301      	adds	r3, #1
 800fa4a:	623b      	str	r3, [r7, #32]
 800fa4c:	6a3a      	ldr	r2, [r7, #32]
 800fa4e:	697b      	ldr	r3, [r7, #20]
 800fa50:	429a      	cmp	r2, r3
 800fa52:	d3e6      	bcc.n	800fa22 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800fa54:	8bfb      	ldrh	r3, [r7, #30]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d01e      	beq.n	800fa98 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800fa5e:	69bb      	ldr	r3, [r7, #24]
 800fa60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa64:	461a      	mov	r2, r3
 800fa66:	f107 0310 	add.w	r3, r7, #16
 800fa6a:	6812      	ldr	r2, [r2, #0]
 800fa6c:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800fa6e:	693a      	ldr	r2, [r7, #16]
 800fa70:	6a3b      	ldr	r3, [r7, #32]
 800fa72:	b2db      	uxtb	r3, r3
 800fa74:	00db      	lsls	r3, r3, #3
 800fa76:	fa22 f303 	lsr.w	r3, r2, r3
 800fa7a:	b2da      	uxtb	r2, r3
 800fa7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa7e:	701a      	strb	r2, [r3, #0]
      i++;
 800fa80:	6a3b      	ldr	r3, [r7, #32]
 800fa82:	3301      	adds	r3, #1
 800fa84:	623b      	str	r3, [r7, #32]
      pDest++;
 800fa86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa88:	3301      	adds	r3, #1
 800fa8a:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800fa8c:	8bfb      	ldrh	r3, [r7, #30]
 800fa8e:	3b01      	subs	r3, #1
 800fa90:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800fa92:	8bfb      	ldrh	r3, [r7, #30]
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d1ea      	bne.n	800fa6e <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800fa98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	372c      	adds	r7, #44	; 0x2c
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa4:	4770      	bx	lr

0800faa6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800faa6:	b480      	push	{r7}
 800faa8:	b085      	sub	sp, #20
 800faaa:	af00      	add	r7, sp, #0
 800faac:	6078      	str	r0, [r7, #4]
 800faae:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fab4:	683b      	ldr	r3, [r7, #0]
 800fab6:	781b      	ldrb	r3, [r3, #0]
 800fab8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800faba:	683b      	ldr	r3, [r7, #0]
 800fabc:	785b      	ldrb	r3, [r3, #1]
 800fabe:	2b01      	cmp	r3, #1
 800fac0:	d12c      	bne.n	800fb1c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800fac2:	68bb      	ldr	r3, [r7, #8]
 800fac4:	015a      	lsls	r2, r3, #5
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	4413      	add	r3, r2
 800faca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	db12      	blt.n	800fafa <USB_EPSetStall+0x54>
 800fad4:	68bb      	ldr	r3, [r7, #8]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d00f      	beq.n	800fafa <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800fada:	68bb      	ldr	r3, [r7, #8]
 800fadc:	015a      	lsls	r2, r3, #5
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	4413      	add	r3, r2
 800fae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	68ba      	ldr	r2, [r7, #8]
 800faea:	0151      	lsls	r1, r2, #5
 800faec:	68fa      	ldr	r2, [r7, #12]
 800faee:	440a      	add	r2, r1
 800faf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800faf4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800faf8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800fafa:	68bb      	ldr	r3, [r7, #8]
 800fafc:	015a      	lsls	r2, r3, #5
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	4413      	add	r3, r2
 800fb02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	68ba      	ldr	r2, [r7, #8]
 800fb0a:	0151      	lsls	r1, r2, #5
 800fb0c:	68fa      	ldr	r2, [r7, #12]
 800fb0e:	440a      	add	r2, r1
 800fb10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fb18:	6013      	str	r3, [r2, #0]
 800fb1a:	e02b      	b.n	800fb74 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800fb1c:	68bb      	ldr	r3, [r7, #8]
 800fb1e:	015a      	lsls	r2, r3, #5
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	4413      	add	r3, r2
 800fb24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	db12      	blt.n	800fb54 <USB_EPSetStall+0xae>
 800fb2e:	68bb      	ldr	r3, [r7, #8]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d00f      	beq.n	800fb54 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800fb34:	68bb      	ldr	r3, [r7, #8]
 800fb36:	015a      	lsls	r2, r3, #5
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	4413      	add	r3, r2
 800fb3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	68ba      	ldr	r2, [r7, #8]
 800fb44:	0151      	lsls	r1, r2, #5
 800fb46:	68fa      	ldr	r2, [r7, #12]
 800fb48:	440a      	add	r2, r1
 800fb4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fb52:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800fb54:	68bb      	ldr	r3, [r7, #8]
 800fb56:	015a      	lsls	r2, r3, #5
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	4413      	add	r3, r2
 800fb5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	68ba      	ldr	r2, [r7, #8]
 800fb64:	0151      	lsls	r1, r2, #5
 800fb66:	68fa      	ldr	r2, [r7, #12]
 800fb68:	440a      	add	r2, r1
 800fb6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fb72:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fb74:	2300      	movs	r3, #0
}
 800fb76:	4618      	mov	r0, r3
 800fb78:	3714      	adds	r7, #20
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb80:	4770      	bx	lr

0800fb82 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fb82:	b480      	push	{r7}
 800fb84:	b085      	sub	sp, #20
 800fb86:	af00      	add	r7, sp, #0
 800fb88:	6078      	str	r0, [r7, #4]
 800fb8a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	781b      	ldrb	r3, [r3, #0]
 800fb94:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	785b      	ldrb	r3, [r3, #1]
 800fb9a:	2b01      	cmp	r3, #1
 800fb9c:	d128      	bne.n	800fbf0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800fb9e:	68bb      	ldr	r3, [r7, #8]
 800fba0:	015a      	lsls	r2, r3, #5
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	4413      	add	r3, r2
 800fba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	68ba      	ldr	r2, [r7, #8]
 800fbae:	0151      	lsls	r1, r2, #5
 800fbb0:	68fa      	ldr	r2, [r7, #12]
 800fbb2:	440a      	add	r2, r1
 800fbb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fbb8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fbbc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fbbe:	683b      	ldr	r3, [r7, #0]
 800fbc0:	78db      	ldrb	r3, [r3, #3]
 800fbc2:	2b03      	cmp	r3, #3
 800fbc4:	d003      	beq.n	800fbce <USB_EPClearStall+0x4c>
 800fbc6:	683b      	ldr	r3, [r7, #0]
 800fbc8:	78db      	ldrb	r3, [r3, #3]
 800fbca:	2b02      	cmp	r3, #2
 800fbcc:	d138      	bne.n	800fc40 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fbce:	68bb      	ldr	r3, [r7, #8]
 800fbd0:	015a      	lsls	r2, r3, #5
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	4413      	add	r3, r2
 800fbd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	68ba      	ldr	r2, [r7, #8]
 800fbde:	0151      	lsls	r1, r2, #5
 800fbe0:	68fa      	ldr	r2, [r7, #12]
 800fbe2:	440a      	add	r2, r1
 800fbe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fbe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fbec:	6013      	str	r3, [r2, #0]
 800fbee:	e027      	b.n	800fc40 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800fbf0:	68bb      	ldr	r3, [r7, #8]
 800fbf2:	015a      	lsls	r2, r3, #5
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	4413      	add	r3, r2
 800fbf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	68ba      	ldr	r2, [r7, #8]
 800fc00:	0151      	lsls	r1, r2, #5
 800fc02:	68fa      	ldr	r2, [r7, #12]
 800fc04:	440a      	add	r2, r1
 800fc06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fc0e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fc10:	683b      	ldr	r3, [r7, #0]
 800fc12:	78db      	ldrb	r3, [r3, #3]
 800fc14:	2b03      	cmp	r3, #3
 800fc16:	d003      	beq.n	800fc20 <USB_EPClearStall+0x9e>
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	78db      	ldrb	r3, [r3, #3]
 800fc1c:	2b02      	cmp	r3, #2
 800fc1e:	d10f      	bne.n	800fc40 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fc20:	68bb      	ldr	r3, [r7, #8]
 800fc22:	015a      	lsls	r2, r3, #5
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	4413      	add	r3, r2
 800fc28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	68ba      	ldr	r2, [r7, #8]
 800fc30:	0151      	lsls	r1, r2, #5
 800fc32:	68fa      	ldr	r2, [r7, #12]
 800fc34:	440a      	add	r2, r1
 800fc36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fc3e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800fc40:	2300      	movs	r3, #0
}
 800fc42:	4618      	mov	r0, r3
 800fc44:	3714      	adds	r7, #20
 800fc46:	46bd      	mov	sp, r7
 800fc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4c:	4770      	bx	lr

0800fc4e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800fc4e:	b480      	push	{r7}
 800fc50:	b085      	sub	sp, #20
 800fc52:	af00      	add	r7, sp, #0
 800fc54:	6078      	str	r0, [r7, #4]
 800fc56:	460b      	mov	r3, r1
 800fc58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	68fa      	ldr	r2, [r7, #12]
 800fc68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fc6c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800fc70:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc78:	681a      	ldr	r2, [r3, #0]
 800fc7a:	78fb      	ldrb	r3, [r7, #3]
 800fc7c:	011b      	lsls	r3, r3, #4
 800fc7e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800fc82:	68f9      	ldr	r1, [r7, #12]
 800fc84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fc88:	4313      	orrs	r3, r2
 800fc8a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800fc8c:	2300      	movs	r3, #0
}
 800fc8e:	4618      	mov	r0, r3
 800fc90:	3714      	adds	r7, #20
 800fc92:	46bd      	mov	sp, r7
 800fc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc98:	4770      	bx	lr

0800fc9a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fc9a:	b480      	push	{r7}
 800fc9c:	b085      	sub	sp, #20
 800fc9e:	af00      	add	r7, sp, #0
 800fca0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	68fa      	ldr	r2, [r7, #12]
 800fcb0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fcb4:	f023 0303 	bic.w	r3, r3, #3
 800fcb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcc0:	685b      	ldr	r3, [r3, #4]
 800fcc2:	68fa      	ldr	r2, [r7, #12]
 800fcc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fcc8:	f023 0302 	bic.w	r3, r3, #2
 800fccc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fcce:	2300      	movs	r3, #0
}
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	3714      	adds	r7, #20
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcda:	4770      	bx	lr

0800fcdc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fcdc:	b480      	push	{r7}
 800fcde:	b085      	sub	sp, #20
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	68fa      	ldr	r2, [r7, #12]
 800fcf2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fcf6:	f023 0303 	bic.w	r3, r3, #3
 800fcfa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd02:	685b      	ldr	r3, [r3, #4]
 800fd04:	68fa      	ldr	r2, [r7, #12]
 800fd06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fd0a:	f043 0302 	orr.w	r3, r3, #2
 800fd0e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fd10:	2300      	movs	r3, #0
}
 800fd12:	4618      	mov	r0, r3
 800fd14:	3714      	adds	r7, #20
 800fd16:	46bd      	mov	sp, r7
 800fd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1c:	4770      	bx	lr

0800fd1e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800fd1e:	b480      	push	{r7}
 800fd20:	b085      	sub	sp, #20
 800fd22:	af00      	add	r7, sp, #0
 800fd24:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	695b      	ldr	r3, [r3, #20]
 800fd2a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	699b      	ldr	r3, [r3, #24]
 800fd30:	68fa      	ldr	r2, [r7, #12]
 800fd32:	4013      	ands	r3, r2
 800fd34:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800fd36:	68fb      	ldr	r3, [r7, #12]
}
 800fd38:	4618      	mov	r0, r3
 800fd3a:	3714      	adds	r7, #20
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd42:	4770      	bx	lr

0800fd44 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fd44:	b480      	push	{r7}
 800fd46:	b085      	sub	sp, #20
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd56:	699b      	ldr	r3, [r3, #24]
 800fd58:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd60:	69db      	ldr	r3, [r3, #28]
 800fd62:	68ba      	ldr	r2, [r7, #8]
 800fd64:	4013      	ands	r3, r2
 800fd66:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800fd68:	68bb      	ldr	r3, [r7, #8]
 800fd6a:	0c1b      	lsrs	r3, r3, #16
}
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	3714      	adds	r7, #20
 800fd70:	46bd      	mov	sp, r7
 800fd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd76:	4770      	bx	lr

0800fd78 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fd78:	b480      	push	{r7}
 800fd7a:	b085      	sub	sp, #20
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd8a:	699b      	ldr	r3, [r3, #24]
 800fd8c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd94:	69db      	ldr	r3, [r3, #28]
 800fd96:	68ba      	ldr	r2, [r7, #8]
 800fd98:	4013      	ands	r3, r2
 800fd9a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800fd9c:	68bb      	ldr	r3, [r7, #8]
 800fd9e:	b29b      	uxth	r3, r3
}
 800fda0:	4618      	mov	r0, r3
 800fda2:	3714      	adds	r7, #20
 800fda4:	46bd      	mov	sp, r7
 800fda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdaa:	4770      	bx	lr

0800fdac <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fdac:	b480      	push	{r7}
 800fdae:	b085      	sub	sp, #20
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
 800fdb4:	460b      	mov	r3, r1
 800fdb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800fdbc:	78fb      	ldrb	r3, [r7, #3]
 800fdbe:	015a      	lsls	r2, r3, #5
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	4413      	add	r3, r2
 800fdc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdc8:	689b      	ldr	r3, [r3, #8]
 800fdca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fdd2:	695b      	ldr	r3, [r3, #20]
 800fdd4:	68ba      	ldr	r2, [r7, #8]
 800fdd6:	4013      	ands	r3, r2
 800fdd8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fdda:	68bb      	ldr	r3, [r7, #8]
}
 800fddc:	4618      	mov	r0, r3
 800fdde:	3714      	adds	r7, #20
 800fde0:	46bd      	mov	sp, r7
 800fde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde6:	4770      	bx	lr

0800fde8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fde8:	b480      	push	{r7}
 800fdea:	b087      	sub	sp, #28
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
 800fdf0:	460b      	mov	r3, r1
 800fdf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800fdf8:	697b      	ldr	r3, [r7, #20]
 800fdfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fdfe:	691b      	ldr	r3, [r3, #16]
 800fe00:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800fe02:	697b      	ldr	r3, [r7, #20]
 800fe04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe0a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800fe0c:	78fb      	ldrb	r3, [r7, #3]
 800fe0e:	f003 030f 	and.w	r3, r3, #15
 800fe12:	68fa      	ldr	r2, [r7, #12]
 800fe14:	fa22 f303 	lsr.w	r3, r2, r3
 800fe18:	01db      	lsls	r3, r3, #7
 800fe1a:	b2db      	uxtb	r3, r3
 800fe1c:	693a      	ldr	r2, [r7, #16]
 800fe1e:	4313      	orrs	r3, r2
 800fe20:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800fe22:	78fb      	ldrb	r3, [r7, #3]
 800fe24:	015a      	lsls	r2, r3, #5
 800fe26:	697b      	ldr	r3, [r7, #20]
 800fe28:	4413      	add	r3, r2
 800fe2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe2e:	689b      	ldr	r3, [r3, #8]
 800fe30:	693a      	ldr	r2, [r7, #16]
 800fe32:	4013      	ands	r3, r2
 800fe34:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fe36:	68bb      	ldr	r3, [r7, #8]
}
 800fe38:	4618      	mov	r0, r3
 800fe3a:	371c      	adds	r7, #28
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe42:	4770      	bx	lr

0800fe44 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800fe44:	b480      	push	{r7}
 800fe46:	b083      	sub	sp, #12
 800fe48:	af00      	add	r7, sp, #0
 800fe4a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	695b      	ldr	r3, [r3, #20]
 800fe50:	f003 0301 	and.w	r3, r3, #1
}
 800fe54:	4618      	mov	r0, r3
 800fe56:	370c      	adds	r7, #12
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe5e:	4770      	bx	lr

0800fe60 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800fe60:	b480      	push	{r7}
 800fe62:	b085      	sub	sp, #20
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	68fa      	ldr	r2, [r7, #12]
 800fe76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe7a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800fe7e:	f023 0307 	bic.w	r3, r3, #7
 800fe82:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe8a:	685b      	ldr	r3, [r3, #4]
 800fe8c:	68fa      	ldr	r2, [r7, #12]
 800fe8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fe92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fe96:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fe98:	2300      	movs	r3, #0
}
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	3714      	adds	r7, #20
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea4:	4770      	bx	lr
	...

0800fea8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800fea8:	b480      	push	{r7}
 800feaa:	b087      	sub	sp, #28
 800feac:	af00      	add	r7, sp, #0
 800feae:	60f8      	str	r0, [r7, #12]
 800feb0:	460b      	mov	r3, r1
 800feb2:	607a      	str	r2, [r7, #4]
 800feb4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	333c      	adds	r3, #60	; 0x3c
 800febe:	3304      	adds	r3, #4
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800fec4:	693b      	ldr	r3, [r7, #16]
 800fec6:	4a26      	ldr	r2, [pc, #152]	; (800ff60 <USB_EP0_OutStart+0xb8>)
 800fec8:	4293      	cmp	r3, r2
 800feca:	d90a      	bls.n	800fee2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fecc:	697b      	ldr	r3, [r7, #20]
 800fece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fed8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fedc:	d101      	bne.n	800fee2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800fede:	2300      	movs	r3, #0
 800fee0:	e037      	b.n	800ff52 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800fee2:	697b      	ldr	r3, [r7, #20]
 800fee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fee8:	461a      	mov	r2, r3
 800feea:	2300      	movs	r3, #0
 800feec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800feee:	697b      	ldr	r3, [r7, #20]
 800fef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fef4:	691b      	ldr	r3, [r3, #16]
 800fef6:	697a      	ldr	r2, [r7, #20]
 800fef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fefc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ff00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ff02:	697b      	ldr	r3, [r7, #20]
 800ff04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff08:	691b      	ldr	r3, [r3, #16]
 800ff0a:	697a      	ldr	r2, [r7, #20]
 800ff0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff10:	f043 0318 	orr.w	r3, r3, #24
 800ff14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ff16:	697b      	ldr	r3, [r7, #20]
 800ff18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff1c:	691b      	ldr	r3, [r3, #16]
 800ff1e:	697a      	ldr	r2, [r7, #20]
 800ff20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff24:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ff28:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ff2a:	7afb      	ldrb	r3, [r7, #11]
 800ff2c:	2b01      	cmp	r3, #1
 800ff2e:	d10f      	bne.n	800ff50 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ff30:	697b      	ldr	r3, [r7, #20]
 800ff32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff36:	461a      	mov	r2, r3
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ff3c:	697b      	ldr	r3, [r7, #20]
 800ff3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	697a      	ldr	r2, [r7, #20]
 800ff46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff4a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ff4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ff50:	2300      	movs	r3, #0
}
 800ff52:	4618      	mov	r0, r3
 800ff54:	371c      	adds	r7, #28
 800ff56:	46bd      	mov	sp, r7
 800ff58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5c:	4770      	bx	lr
 800ff5e:	bf00      	nop
 800ff60:	4f54300a 	.word	0x4f54300a

0800ff64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ff64:	b480      	push	{r7}
 800ff66:	b085      	sub	sp, #20
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	3301      	adds	r3, #1
 800ff74:	60fb      	str	r3, [r7, #12]
 800ff76:	4a13      	ldr	r2, [pc, #76]	; (800ffc4 <USB_CoreReset+0x60>)
 800ff78:	4293      	cmp	r3, r2
 800ff7a:	d901      	bls.n	800ff80 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800ff7c:	2303      	movs	r3, #3
 800ff7e:	e01a      	b.n	800ffb6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	691b      	ldr	r3, [r3, #16]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	daf3      	bge.n	800ff70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ff88:	2300      	movs	r3, #0
 800ff8a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	691b      	ldr	r3, [r3, #16]
 800ff90:	f043 0201 	orr.w	r2, r3, #1
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	3301      	adds	r3, #1
 800ff9c:	60fb      	str	r3, [r7, #12]
 800ff9e:	4a09      	ldr	r2, [pc, #36]	; (800ffc4 <USB_CoreReset+0x60>)
 800ffa0:	4293      	cmp	r3, r2
 800ffa2:	d901      	bls.n	800ffa8 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800ffa4:	2303      	movs	r3, #3
 800ffa6:	e006      	b.n	800ffb6 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	691b      	ldr	r3, [r3, #16]
 800ffac:	f003 0301 	and.w	r3, r3, #1
 800ffb0:	2b01      	cmp	r3, #1
 800ffb2:	d0f1      	beq.n	800ff98 <USB_CoreReset+0x34>

  return HAL_OK;
 800ffb4:	2300      	movs	r3, #0
}
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	3714      	adds	r7, #20
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc0:	4770      	bx	lr
 800ffc2:	bf00      	nop
 800ffc4:	00030d40 	.word	0x00030d40

0800ffc8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ffcc:	4904      	ldr	r1, [pc, #16]	; (800ffe0 <MX_FATFS_Init+0x18>)
 800ffce:	4805      	ldr	r0, [pc, #20]	; (800ffe4 <MX_FATFS_Init+0x1c>)
 800ffd0:	f006 f800 	bl	8015fd4 <FATFS_LinkDriver>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	461a      	mov	r2, r3
 800ffd8:	4b03      	ldr	r3, [pc, #12]	; (800ffe8 <MX_FATFS_Init+0x20>)
 800ffda:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ffdc:	bf00      	nop
 800ffde:	bd80      	pop	{r7, pc}
 800ffe0:	20002e9c 	.word	0x20002e9c
 800ffe4:	080175c4 	.word	0x080175c4
 800ffe8:	20002e98 	.word	0x20002e98

0800ffec <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ffec:	b480      	push	{r7}
 800ffee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800fff0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800fff2:	4618      	mov	r0, r3
 800fff4:	46bd      	mov	sp, r7
 800fff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffa:	4770      	bx	lr

0800fffc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b082      	sub	sp, #8
 8010000:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010002:	2300      	movs	r3, #0
 8010004:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010006:	f000 f896 	bl	8010136 <BSP_SD_IsDetected>
 801000a:	4603      	mov	r3, r0
 801000c:	2b01      	cmp	r3, #1
 801000e:	d001      	beq.n	8010014 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8010010:	2301      	movs	r3, #1
 8010012:	e012      	b.n	801003a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8010014:	480b      	ldr	r0, [pc, #44]	; (8010044 <BSP_SD_Init+0x48>)
 8010016:	f7fc f8b7 	bl	800c188 <HAL_SD_Init>
 801001a:	4603      	mov	r3, r0
 801001c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801001e:	79fb      	ldrb	r3, [r7, #7]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d109      	bne.n	8010038 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8010024:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010028:	4806      	ldr	r0, [pc, #24]	; (8010044 <BSP_SD_Init+0x48>)
 801002a:	f7fc fe6d 	bl	800cd08 <HAL_SD_ConfigWideBusOperation>
 801002e:	4603      	mov	r3, r0
 8010030:	2b00      	cmp	r3, #0
 8010032:	d001      	beq.n	8010038 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010034:	2301      	movs	r3, #1
 8010036:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010038:	79fb      	ldrb	r3, [r7, #7]
}
 801003a:	4618      	mov	r0, r3
 801003c:	3708      	adds	r7, #8
 801003e:	46bd      	mov	sp, r7
 8010040:	bd80      	pop	{r7, pc}
 8010042:	bf00      	nop
 8010044:	20001bd4 	.word	0x20001bd4

08010048 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b086      	sub	sp, #24
 801004c:	af00      	add	r7, sp, #0
 801004e:	60f8      	str	r0, [r7, #12]
 8010050:	60b9      	str	r1, [r7, #8]
 8010052:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010054:	2300      	movs	r3, #0
 8010056:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	68ba      	ldr	r2, [r7, #8]
 801005c:	68f9      	ldr	r1, [r7, #12]
 801005e:	4806      	ldr	r0, [pc, #24]	; (8010078 <BSP_SD_ReadBlocks_DMA+0x30>)
 8010060:	f7fc f940 	bl	800c2e4 <HAL_SD_ReadBlocks_DMA>
 8010064:	4603      	mov	r3, r0
 8010066:	2b00      	cmp	r3, #0
 8010068:	d001      	beq.n	801006e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801006a:	2301      	movs	r3, #1
 801006c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801006e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010070:	4618      	mov	r0, r3
 8010072:	3718      	adds	r7, #24
 8010074:	46bd      	mov	sp, r7
 8010076:	bd80      	pop	{r7, pc}
 8010078:	20001bd4 	.word	0x20001bd4

0801007c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801007c:	b580      	push	{r7, lr}
 801007e:	b086      	sub	sp, #24
 8010080:	af00      	add	r7, sp, #0
 8010082:	60f8      	str	r0, [r7, #12]
 8010084:	60b9      	str	r1, [r7, #8]
 8010086:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010088:	2300      	movs	r3, #0
 801008a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	68ba      	ldr	r2, [r7, #8]
 8010090:	68f9      	ldr	r1, [r7, #12]
 8010092:	4806      	ldr	r0, [pc, #24]	; (80100ac <BSP_SD_WriteBlocks_DMA+0x30>)
 8010094:	f7fc fa06 	bl	800c4a4 <HAL_SD_WriteBlocks_DMA>
 8010098:	4603      	mov	r3, r0
 801009a:	2b00      	cmp	r3, #0
 801009c:	d001      	beq.n	80100a2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801009e:	2301      	movs	r3, #1
 80100a0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80100a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80100a4:	4618      	mov	r0, r3
 80100a6:	3718      	adds	r7, #24
 80100a8:	46bd      	mov	sp, r7
 80100aa:	bd80      	pop	{r7, pc}
 80100ac:	20001bd4 	.word	0x20001bd4

080100b0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80100b4:	4805      	ldr	r0, [pc, #20]	; (80100cc <BSP_SD_GetCardState+0x1c>)
 80100b6:	f7fc fec1 	bl	800ce3c <HAL_SD_GetCardState>
 80100ba:	4603      	mov	r3, r0
 80100bc:	2b04      	cmp	r3, #4
 80100be:	bf14      	ite	ne
 80100c0:	2301      	movne	r3, #1
 80100c2:	2300      	moveq	r3, #0
 80100c4:	b2db      	uxtb	r3, r3
}
 80100c6:	4618      	mov	r0, r3
 80100c8:	bd80      	pop	{r7, pc}
 80100ca:	bf00      	nop
 80100cc:	20001bd4 	.word	0x20001bd4

080100d0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b082      	sub	sp, #8
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80100d8:	6879      	ldr	r1, [r7, #4]
 80100da:	4803      	ldr	r0, [pc, #12]	; (80100e8 <BSP_SD_GetCardInfo+0x18>)
 80100dc:	f7fc fde8 	bl	800ccb0 <HAL_SD_GetCardInfo>
}
 80100e0:	bf00      	nop
 80100e2:	3708      	adds	r7, #8
 80100e4:	46bd      	mov	sp, r7
 80100e6:	bd80      	pop	{r7, pc}
 80100e8:	20001bd4 	.word	0x20001bd4

080100ec <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b082      	sub	sp, #8
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80100f4:	f000 f818 	bl	8010128 <BSP_SD_AbortCallback>
}
 80100f8:	bf00      	nop
 80100fa:	3708      	adds	r7, #8
 80100fc:	46bd      	mov	sp, r7
 80100fe:	bd80      	pop	{r7, pc}

08010100 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b082      	sub	sp, #8
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010108:	f000 f9a8 	bl	801045c <BSP_SD_WriteCpltCallback>
}
 801010c:	bf00      	nop
 801010e:	3708      	adds	r7, #8
 8010110:	46bd      	mov	sp, r7
 8010112:	bd80      	pop	{r7, pc}

08010114 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010114:	b580      	push	{r7, lr}
 8010116:	b082      	sub	sp, #8
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 801011c:	f000 f9aa 	bl	8010474 <BSP_SD_ReadCpltCallback>
}
 8010120:	bf00      	nop
 8010122:	3708      	adds	r7, #8
 8010124:	46bd      	mov	sp, r7
 8010126:	bd80      	pop	{r7, pc}

08010128 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8010128:	b480      	push	{r7}
 801012a:	af00      	add	r7, sp, #0

}
 801012c:	bf00      	nop
 801012e:	46bd      	mov	sp, r7
 8010130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010134:	4770      	bx	lr

08010136 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010136:	b580      	push	{r7, lr}
 8010138:	b082      	sub	sp, #8
 801013a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801013c:	2301      	movs	r3, #1
 801013e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010140:	f000 f80c 	bl	801015c <BSP_PlatformIsDetected>
 8010144:	4603      	mov	r3, r0
 8010146:	2b00      	cmp	r3, #0
 8010148:	d101      	bne.n	801014e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 801014a:	2300      	movs	r3, #0
 801014c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801014e:	79fb      	ldrb	r3, [r7, #7]
 8010150:	b2db      	uxtb	r3, r3
}
 8010152:	4618      	mov	r0, r3
 8010154:	3708      	adds	r7, #8
 8010156:	46bd      	mov	sp, r7
 8010158:	bd80      	pop	{r7, pc}
	...

0801015c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 801015c:	b580      	push	{r7, lr}
 801015e:	b082      	sub	sp, #8
 8010160:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8010162:	2301      	movs	r3, #1
 8010164:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8010166:	2180      	movs	r1, #128	; 0x80
 8010168:	4806      	ldr	r0, [pc, #24]	; (8010184 <BSP_PlatformIsDetected+0x28>)
 801016a:	f7f8 fb2d 	bl	80087c8 <HAL_GPIO_ReadPin>
 801016e:	4603      	mov	r3, r0
 8010170:	2b00      	cmp	r3, #0
 8010172:	d001      	beq.n	8010178 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8010174:	2300      	movs	r3, #0
 8010176:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010178:	79fb      	ldrb	r3, [r7, #7]
}
 801017a:	4618      	mov	r0, r3
 801017c:	3708      	adds	r7, #8
 801017e:	46bd      	mov	sp, r7
 8010180:	bd80      	pop	{r7, pc}
 8010182:	bf00      	nop
 8010184:	40020800 	.word	0x40020800

08010188 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b084      	sub	sp, #16
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010190:	f7f6 f9ec 	bl	800656c <HAL_GetTick>
 8010194:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8010196:	e006      	b.n	80101a6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010198:	f7ff ff8a 	bl	80100b0 <BSP_SD_GetCardState>
 801019c:	4603      	mov	r3, r0
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d101      	bne.n	80101a6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80101a2:	2300      	movs	r3, #0
 80101a4:	e009      	b.n	80101ba <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80101a6:	f7f6 f9e1 	bl	800656c <HAL_GetTick>
 80101aa:	4602      	mov	r2, r0
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	1ad3      	subs	r3, r2, r3
 80101b0:	687a      	ldr	r2, [r7, #4]
 80101b2:	429a      	cmp	r2, r3
 80101b4:	d8f0      	bhi.n	8010198 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80101b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80101ba:	4618      	mov	r0, r3
 80101bc:	3710      	adds	r7, #16
 80101be:	46bd      	mov	sp, r7
 80101c0:	bd80      	pop	{r7, pc}
	...

080101c4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b082      	sub	sp, #8
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	4603      	mov	r3, r0
 80101cc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80101ce:	4b0b      	ldr	r3, [pc, #44]	; (80101fc <SD_CheckStatus+0x38>)
 80101d0:	2201      	movs	r2, #1
 80101d2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80101d4:	f7ff ff6c 	bl	80100b0 <BSP_SD_GetCardState>
 80101d8:	4603      	mov	r3, r0
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d107      	bne.n	80101ee <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80101de:	4b07      	ldr	r3, [pc, #28]	; (80101fc <SD_CheckStatus+0x38>)
 80101e0:	781b      	ldrb	r3, [r3, #0]
 80101e2:	b2db      	uxtb	r3, r3
 80101e4:	f023 0301 	bic.w	r3, r3, #1
 80101e8:	b2da      	uxtb	r2, r3
 80101ea:	4b04      	ldr	r3, [pc, #16]	; (80101fc <SD_CheckStatus+0x38>)
 80101ec:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80101ee:	4b03      	ldr	r3, [pc, #12]	; (80101fc <SD_CheckStatus+0x38>)
 80101f0:	781b      	ldrb	r3, [r3, #0]
 80101f2:	b2db      	uxtb	r3, r3
}
 80101f4:	4618      	mov	r0, r3
 80101f6:	3708      	adds	r7, #8
 80101f8:	46bd      	mov	sp, r7
 80101fa:	bd80      	pop	{r7, pc}
 80101fc:	20000009 	.word	0x20000009

08010200 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b082      	sub	sp, #8
 8010204:	af00      	add	r7, sp, #0
 8010206:	4603      	mov	r3, r0
 8010208:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801020a:	f7ff fef7 	bl	800fffc <BSP_SD_Init>
 801020e:	4603      	mov	r3, r0
 8010210:	2b00      	cmp	r3, #0
 8010212:	d107      	bne.n	8010224 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010214:	79fb      	ldrb	r3, [r7, #7]
 8010216:	4618      	mov	r0, r3
 8010218:	f7ff ffd4 	bl	80101c4 <SD_CheckStatus>
 801021c:	4603      	mov	r3, r0
 801021e:	461a      	mov	r2, r3
 8010220:	4b04      	ldr	r3, [pc, #16]	; (8010234 <SD_initialize+0x34>)
 8010222:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010224:	4b03      	ldr	r3, [pc, #12]	; (8010234 <SD_initialize+0x34>)
 8010226:	781b      	ldrb	r3, [r3, #0]
 8010228:	b2db      	uxtb	r3, r3
}
 801022a:	4618      	mov	r0, r3
 801022c:	3708      	adds	r7, #8
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}
 8010232:	bf00      	nop
 8010234:	20000009 	.word	0x20000009

08010238 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b082      	sub	sp, #8
 801023c:	af00      	add	r7, sp, #0
 801023e:	4603      	mov	r3, r0
 8010240:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010242:	79fb      	ldrb	r3, [r7, #7]
 8010244:	4618      	mov	r0, r3
 8010246:	f7ff ffbd 	bl	80101c4 <SD_CheckStatus>
 801024a:	4603      	mov	r3, r0
}
 801024c:	4618      	mov	r0, r3
 801024e:	3708      	adds	r7, #8
 8010250:	46bd      	mov	sp, r7
 8010252:	bd80      	pop	{r7, pc}

08010254 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b086      	sub	sp, #24
 8010258:	af00      	add	r7, sp, #0
 801025a:	60b9      	str	r1, [r7, #8]
 801025c:	607a      	str	r2, [r7, #4]
 801025e:	603b      	str	r3, [r7, #0]
 8010260:	4603      	mov	r3, r0
 8010262:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010264:	2301      	movs	r3, #1
 8010266:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010268:	f247 5030 	movw	r0, #30000	; 0x7530
 801026c:	f7ff ff8c 	bl	8010188 <SD_CheckStatusWithTimeout>
 8010270:	4603      	mov	r3, r0
 8010272:	2b00      	cmp	r3, #0
 8010274:	da01      	bge.n	801027a <SD_read+0x26>
  {
    return res;
 8010276:	7dfb      	ldrb	r3, [r7, #23]
 8010278:	e03b      	b.n	80102f2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801027a:	683a      	ldr	r2, [r7, #0]
 801027c:	6879      	ldr	r1, [r7, #4]
 801027e:	68b8      	ldr	r0, [r7, #8]
 8010280:	f7ff fee2 	bl	8010048 <BSP_SD_ReadBlocks_DMA>
 8010284:	4603      	mov	r3, r0
 8010286:	2b00      	cmp	r3, #0
 8010288:	d132      	bne.n	80102f0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801028a:	4b1c      	ldr	r3, [pc, #112]	; (80102fc <SD_read+0xa8>)
 801028c:	2200      	movs	r2, #0
 801028e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010290:	f7f6 f96c 	bl	800656c <HAL_GetTick>
 8010294:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010296:	bf00      	nop
 8010298:	4b18      	ldr	r3, [pc, #96]	; (80102fc <SD_read+0xa8>)
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d108      	bne.n	80102b2 <SD_read+0x5e>
 80102a0:	f7f6 f964 	bl	800656c <HAL_GetTick>
 80102a4:	4602      	mov	r2, r0
 80102a6:	693b      	ldr	r3, [r7, #16]
 80102a8:	1ad3      	subs	r3, r2, r3
 80102aa:	f247 522f 	movw	r2, #29999	; 0x752f
 80102ae:	4293      	cmp	r3, r2
 80102b0:	d9f2      	bls.n	8010298 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80102b2:	4b12      	ldr	r3, [pc, #72]	; (80102fc <SD_read+0xa8>)
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d102      	bne.n	80102c0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80102ba:	2301      	movs	r3, #1
 80102bc:	75fb      	strb	r3, [r7, #23]
 80102be:	e017      	b.n	80102f0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80102c0:	4b0e      	ldr	r3, [pc, #56]	; (80102fc <SD_read+0xa8>)
 80102c2:	2200      	movs	r2, #0
 80102c4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80102c6:	f7f6 f951 	bl	800656c <HAL_GetTick>
 80102ca:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80102cc:	e007      	b.n	80102de <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80102ce:	f7ff feef 	bl	80100b0 <BSP_SD_GetCardState>
 80102d2:	4603      	mov	r3, r0
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d102      	bne.n	80102de <SD_read+0x8a>
          {
            res = RES_OK;
 80102d8:	2300      	movs	r3, #0
 80102da:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80102dc:	e008      	b.n	80102f0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80102de:	f7f6 f945 	bl	800656c <HAL_GetTick>
 80102e2:	4602      	mov	r2, r0
 80102e4:	693b      	ldr	r3, [r7, #16]
 80102e6:	1ad3      	subs	r3, r2, r3
 80102e8:	f247 522f 	movw	r2, #29999	; 0x752f
 80102ec:	4293      	cmp	r3, r2
 80102ee:	d9ee      	bls.n	80102ce <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80102f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80102f2:	4618      	mov	r0, r3
 80102f4:	3718      	adds	r7, #24
 80102f6:	46bd      	mov	sp, r7
 80102f8:	bd80      	pop	{r7, pc}
 80102fa:	bf00      	nop
 80102fc:	200001fc 	.word	0x200001fc

08010300 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010300:	b580      	push	{r7, lr}
 8010302:	b086      	sub	sp, #24
 8010304:	af00      	add	r7, sp, #0
 8010306:	60b9      	str	r1, [r7, #8]
 8010308:	607a      	str	r2, [r7, #4]
 801030a:	603b      	str	r3, [r7, #0]
 801030c:	4603      	mov	r3, r0
 801030e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010310:	2301      	movs	r3, #1
 8010312:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010314:	4b24      	ldr	r3, [pc, #144]	; (80103a8 <SD_write+0xa8>)
 8010316:	2200      	movs	r2, #0
 8010318:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801031a:	f247 5030 	movw	r0, #30000	; 0x7530
 801031e:	f7ff ff33 	bl	8010188 <SD_CheckStatusWithTimeout>
 8010322:	4603      	mov	r3, r0
 8010324:	2b00      	cmp	r3, #0
 8010326:	da01      	bge.n	801032c <SD_write+0x2c>
  {
    return res;
 8010328:	7dfb      	ldrb	r3, [r7, #23]
 801032a:	e038      	b.n	801039e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801032c:	683a      	ldr	r2, [r7, #0]
 801032e:	6879      	ldr	r1, [r7, #4]
 8010330:	68b8      	ldr	r0, [r7, #8]
 8010332:	f7ff fea3 	bl	801007c <BSP_SD_WriteBlocks_DMA>
 8010336:	4603      	mov	r3, r0
 8010338:	2b00      	cmp	r3, #0
 801033a:	d12f      	bne.n	801039c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 801033c:	f7f6 f916 	bl	800656c <HAL_GetTick>
 8010340:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010342:	bf00      	nop
 8010344:	4b18      	ldr	r3, [pc, #96]	; (80103a8 <SD_write+0xa8>)
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d108      	bne.n	801035e <SD_write+0x5e>
 801034c:	f7f6 f90e 	bl	800656c <HAL_GetTick>
 8010350:	4602      	mov	r2, r0
 8010352:	693b      	ldr	r3, [r7, #16]
 8010354:	1ad3      	subs	r3, r2, r3
 8010356:	f247 522f 	movw	r2, #29999	; 0x752f
 801035a:	4293      	cmp	r3, r2
 801035c:	d9f2      	bls.n	8010344 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801035e:	4b12      	ldr	r3, [pc, #72]	; (80103a8 <SD_write+0xa8>)
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d102      	bne.n	801036c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8010366:	2301      	movs	r3, #1
 8010368:	75fb      	strb	r3, [r7, #23]
 801036a:	e017      	b.n	801039c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 801036c:	4b0e      	ldr	r3, [pc, #56]	; (80103a8 <SD_write+0xa8>)
 801036e:	2200      	movs	r2, #0
 8010370:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010372:	f7f6 f8fb 	bl	800656c <HAL_GetTick>
 8010376:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010378:	e007      	b.n	801038a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801037a:	f7ff fe99 	bl	80100b0 <BSP_SD_GetCardState>
 801037e:	4603      	mov	r3, r0
 8010380:	2b00      	cmp	r3, #0
 8010382:	d102      	bne.n	801038a <SD_write+0x8a>
          {
            res = RES_OK;
 8010384:	2300      	movs	r3, #0
 8010386:	75fb      	strb	r3, [r7, #23]
            break;
 8010388:	e008      	b.n	801039c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801038a:	f7f6 f8ef 	bl	800656c <HAL_GetTick>
 801038e:	4602      	mov	r2, r0
 8010390:	693b      	ldr	r3, [r7, #16]
 8010392:	1ad3      	subs	r3, r2, r3
 8010394:	f247 522f 	movw	r2, #29999	; 0x752f
 8010398:	4293      	cmp	r3, r2
 801039a:	d9ee      	bls.n	801037a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 801039c:	7dfb      	ldrb	r3, [r7, #23]
}
 801039e:	4618      	mov	r0, r3
 80103a0:	3718      	adds	r7, #24
 80103a2:	46bd      	mov	sp, r7
 80103a4:	bd80      	pop	{r7, pc}
 80103a6:	bf00      	nop
 80103a8:	200001f8 	.word	0x200001f8

080103ac <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b08c      	sub	sp, #48	; 0x30
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	4603      	mov	r3, r0
 80103b4:	603a      	str	r2, [r7, #0]
 80103b6:	71fb      	strb	r3, [r7, #7]
 80103b8:	460b      	mov	r3, r1
 80103ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80103bc:	2301      	movs	r3, #1
 80103be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80103c2:	4b25      	ldr	r3, [pc, #148]	; (8010458 <SD_ioctl+0xac>)
 80103c4:	781b      	ldrb	r3, [r3, #0]
 80103c6:	b2db      	uxtb	r3, r3
 80103c8:	f003 0301 	and.w	r3, r3, #1
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d001      	beq.n	80103d4 <SD_ioctl+0x28>
 80103d0:	2303      	movs	r3, #3
 80103d2:	e03c      	b.n	801044e <SD_ioctl+0xa2>

  switch (cmd)
 80103d4:	79bb      	ldrb	r3, [r7, #6]
 80103d6:	2b03      	cmp	r3, #3
 80103d8:	d834      	bhi.n	8010444 <SD_ioctl+0x98>
 80103da:	a201      	add	r2, pc, #4	; (adr r2, 80103e0 <SD_ioctl+0x34>)
 80103dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103e0:	080103f1 	.word	0x080103f1
 80103e4:	080103f9 	.word	0x080103f9
 80103e8:	08010411 	.word	0x08010411
 80103ec:	0801042b 	.word	0x0801042b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80103f0:	2300      	movs	r3, #0
 80103f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80103f6:	e028      	b.n	801044a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80103f8:	f107 030c 	add.w	r3, r7, #12
 80103fc:	4618      	mov	r0, r3
 80103fe:	f7ff fe67 	bl	80100d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010408:	2300      	movs	r3, #0
 801040a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801040e:	e01c      	b.n	801044a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010410:	f107 030c 	add.w	r3, r7, #12
 8010414:	4618      	mov	r0, r3
 8010416:	f7ff fe5b 	bl	80100d0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801041a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801041c:	b29a      	uxth	r2, r3
 801041e:	683b      	ldr	r3, [r7, #0]
 8010420:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010422:	2300      	movs	r3, #0
 8010424:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010428:	e00f      	b.n	801044a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801042a:	f107 030c 	add.w	r3, r7, #12
 801042e:	4618      	mov	r0, r3
 8010430:	f7ff fe4e 	bl	80100d0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010436:	0a5a      	lsrs	r2, r3, #9
 8010438:	683b      	ldr	r3, [r7, #0]
 801043a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801043c:	2300      	movs	r3, #0
 801043e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010442:	e002      	b.n	801044a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010444:	2304      	movs	r3, #4
 8010446:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801044a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801044e:	4618      	mov	r0, r3
 8010450:	3730      	adds	r7, #48	; 0x30
 8010452:	46bd      	mov	sp, r7
 8010454:	bd80      	pop	{r7, pc}
 8010456:	bf00      	nop
 8010458:	20000009 	.word	0x20000009

0801045c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 801045c:	b480      	push	{r7}
 801045e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8010460:	4b03      	ldr	r3, [pc, #12]	; (8010470 <BSP_SD_WriteCpltCallback+0x14>)
 8010462:	2201      	movs	r2, #1
 8010464:	601a      	str	r2, [r3, #0]
}
 8010466:	bf00      	nop
 8010468:	46bd      	mov	sp, r7
 801046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046e:	4770      	bx	lr
 8010470:	200001f8 	.word	0x200001f8

08010474 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8010474:	b480      	push	{r7}
 8010476:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8010478:	4b03      	ldr	r3, [pc, #12]	; (8010488 <BSP_SD_ReadCpltCallback+0x14>)
 801047a:	2201      	movs	r2, #1
 801047c:	601a      	str	r2, [r3, #0]
}
 801047e:	bf00      	nop
 8010480:	46bd      	mov	sp, r7
 8010482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010486:	4770      	bx	lr
 8010488:	200001fc 	.word	0x200001fc

0801048c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b084      	sub	sp, #16
 8010490:	af00      	add	r7, sp, #0
 8010492:	6078      	str	r0, [r7, #4]
 8010494:	460b      	mov	r3, r1
 8010496:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8010498:	f44f 701d 	mov.w	r0, #628	; 0x274
 801049c:	f006 fb72 	bl	8016b84 <USBD_static_malloc>
 80104a0:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d105      	bne.n	80104b4 <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	2200      	movs	r2, #0
 80104ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80104b0:	2302      	movs	r3, #2
 80104b2:	e034      	b.n	801051e <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	68fa      	ldr	r2, [r7, #12]
 80104b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	7c1b      	ldrb	r3, [r3, #16]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d115      	bne.n	80104f0 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80104c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80104c8:	2202      	movs	r2, #2
 80104ca:	2101      	movs	r1, #1
 80104cc:	6878      	ldr	r0, [r7, #4]
 80104ce:	f006 f9c8 	bl	8016862 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	2201      	movs	r2, #1
 80104d6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80104da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80104de:	2202      	movs	r2, #2
 80104e0:	2181      	movs	r1, #129	; 0x81
 80104e2:	6878      	ldr	r0, [r7, #4]
 80104e4:	f006 f9bd 	bl	8016862 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2201      	movs	r2, #1
 80104ec:	871a      	strh	r2, [r3, #56]	; 0x38
 80104ee:	e012      	b.n	8010516 <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80104f0:	2340      	movs	r3, #64	; 0x40
 80104f2:	2202      	movs	r2, #2
 80104f4:	2101      	movs	r1, #1
 80104f6:	6878      	ldr	r0, [r7, #4]
 80104f8:	f006 f9b3 	bl	8016862 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	2201      	movs	r2, #1
 8010500:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8010504:	2340      	movs	r3, #64	; 0x40
 8010506:	2202      	movs	r2, #2
 8010508:	2181      	movs	r1, #129	; 0x81
 801050a:	6878      	ldr	r0, [r7, #4]
 801050c:	f006 f9a9 	bl	8016862 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	2201      	movs	r2, #1
 8010514:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8010516:	6878      	ldr	r0, [r7, #4]
 8010518:	f000 f999 	bl	801084e <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 801051c:	2300      	movs	r3, #0
}
 801051e:	4618      	mov	r0, r3
 8010520:	3710      	adds	r7, #16
 8010522:	46bd      	mov	sp, r7
 8010524:	bd80      	pop	{r7, pc}

08010526 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010526:	b580      	push	{r7, lr}
 8010528:	b082      	sub	sp, #8
 801052a:	af00      	add	r7, sp, #0
 801052c:	6078      	str	r0, [r7, #4]
 801052e:	460b      	mov	r3, r1
 8010530:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8010532:	2101      	movs	r1, #1
 8010534:	6878      	ldr	r0, [r7, #4]
 8010536:	f006 f9ba 	bl	80168ae <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	2200      	movs	r2, #0
 801053e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8010542:	2181      	movs	r1, #129	; 0x81
 8010544:	6878      	ldr	r0, [r7, #4]
 8010546:	f006 f9b2 	bl	80168ae <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	2200      	movs	r2, #0
 801054e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010556:	2b00      	cmp	r3, #0
 8010558:	d00c      	beq.n	8010574 <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 801055a:	6878      	ldr	r0, [r7, #4]
 801055c:	f000 f9d5 	bl	801090a <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010566:	4618      	mov	r0, r3
 8010568:	f006 fb1a 	bl	8016ba0 <USBD_static_free>
    pdev->pClassData = NULL;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	2200      	movs	r2, #0
 8010570:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8010574:	2300      	movs	r3, #0
}
 8010576:	4618      	mov	r0, r3
 8010578:	3708      	adds	r7, #8
 801057a:	46bd      	mov	sp, r7
 801057c:	bd80      	pop	{r7, pc}
	...

08010580 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b086      	sub	sp, #24
 8010584:	af00      	add	r7, sp, #0
 8010586:	6078      	str	r0, [r7, #4]
 8010588:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010590:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8010592:	2300      	movs	r3, #0
 8010594:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8010596:	2300      	movs	r3, #0
 8010598:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 801059a:	693b      	ldr	r3, [r7, #16]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d101      	bne.n	80105a4 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80105a0:	2303      	movs	r3, #3
 80105a2:	e0db      	b.n	801075c <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80105a4:	683b      	ldr	r3, [r7, #0]
 80105a6:	781b      	ldrb	r3, [r3, #0]
 80105a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d04e      	beq.n	801064e <USBD_MSC_Setup+0xce>
 80105b0:	2b20      	cmp	r3, #32
 80105b2:	f040 80cb 	bne.w	801074c <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80105b6:	683b      	ldr	r3, [r7, #0]
 80105b8:	785b      	ldrb	r3, [r3, #1]
 80105ba:	2bfe      	cmp	r3, #254	; 0xfe
 80105bc:	d002      	beq.n	80105c4 <USBD_MSC_Setup+0x44>
 80105be:	2bff      	cmp	r3, #255	; 0xff
 80105c0:	d025      	beq.n	801060e <USBD_MSC_Setup+0x8e>
 80105c2:	e03c      	b.n	801063e <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80105c4:	683b      	ldr	r3, [r7, #0]
 80105c6:	885b      	ldrh	r3, [r3, #2]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d119      	bne.n	8010600 <USBD_MSC_Setup+0x80>
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	88db      	ldrh	r3, [r3, #6]
 80105d0:	2b01      	cmp	r3, #1
 80105d2:	d115      	bne.n	8010600 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	781b      	ldrb	r3, [r3, #0]
 80105d8:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80105da:	2b00      	cmp	r3, #0
 80105dc:	da10      	bge.n	8010600 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80105e4:	699b      	ldr	r3, [r3, #24]
 80105e6:	4798      	blx	r3
 80105e8:	4603      	mov	r3, r0
 80105ea:	461a      	mov	r2, r3
 80105ec:	693b      	ldr	r3, [r7, #16]
 80105ee:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 80105f0:	693b      	ldr	r3, [r7, #16]
 80105f2:	2201      	movs	r2, #1
 80105f4:	4619      	mov	r1, r3
 80105f6:	6878      	ldr	r0, [r7, #4]
 80105f8:	f002 fe3d 	bl	8013276 <USBD_CtlSendData>
 80105fc:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80105fe:	e025      	b.n	801064c <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8010600:	6839      	ldr	r1, [r7, #0]
 8010602:	6878      	ldr	r0, [r7, #4]
 8010604:	f002 fdc6 	bl	8013194 <USBD_CtlError>
            ret = USBD_FAIL;
 8010608:	2303      	movs	r3, #3
 801060a:	75fb      	strb	r3, [r7, #23]
          break;
 801060c:	e01e      	b.n	801064c <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801060e:	683b      	ldr	r3, [r7, #0]
 8010610:	885b      	ldrh	r3, [r3, #2]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d10c      	bne.n	8010630 <USBD_MSC_Setup+0xb0>
 8010616:	683b      	ldr	r3, [r7, #0]
 8010618:	88db      	ldrh	r3, [r3, #6]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d108      	bne.n	8010630 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 801061e:	683b      	ldr	r3, [r7, #0]
 8010620:	781b      	ldrb	r3, [r3, #0]
 8010622:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8010624:	2b00      	cmp	r3, #0
 8010626:	db03      	blt.n	8010630 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 8010628:	6878      	ldr	r0, [r7, #4]
 801062a:	f000 f948 	bl	80108be <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801062e:	e00d      	b.n	801064c <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8010630:	6839      	ldr	r1, [r7, #0]
 8010632:	6878      	ldr	r0, [r7, #4]
 8010634:	f002 fdae 	bl	8013194 <USBD_CtlError>
            ret = USBD_FAIL;
 8010638:	2303      	movs	r3, #3
 801063a:	75fb      	strb	r3, [r7, #23]
          break;
 801063c:	e006      	b.n	801064c <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801063e:	6839      	ldr	r1, [r7, #0]
 8010640:	6878      	ldr	r0, [r7, #4]
 8010642:	f002 fda7 	bl	8013194 <USBD_CtlError>
          ret = USBD_FAIL;
 8010646:	2303      	movs	r3, #3
 8010648:	75fb      	strb	r3, [r7, #23]
          break;
 801064a:	bf00      	nop
      }
      break;
 801064c:	e085      	b.n	801075a <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801064e:	683b      	ldr	r3, [r7, #0]
 8010650:	785b      	ldrb	r3, [r3, #1]
 8010652:	2b0b      	cmp	r3, #11
 8010654:	d871      	bhi.n	801073a <USBD_MSC_Setup+0x1ba>
 8010656:	a201      	add	r2, pc, #4	; (adr r2, 801065c <USBD_MSC_Setup+0xdc>)
 8010658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801065c:	0801068d 	.word	0x0801068d
 8010660:	08010709 	.word	0x08010709
 8010664:	0801073b 	.word	0x0801073b
 8010668:	0801073b 	.word	0x0801073b
 801066c:	0801073b 	.word	0x0801073b
 8010670:	0801073b 	.word	0x0801073b
 8010674:	0801073b 	.word	0x0801073b
 8010678:	0801073b 	.word	0x0801073b
 801067c:	0801073b 	.word	0x0801073b
 8010680:	0801073b 	.word	0x0801073b
 8010684:	080106b7 	.word	0x080106b7
 8010688:	080106e1 	.word	0x080106e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010692:	b2db      	uxtb	r3, r3
 8010694:	2b03      	cmp	r3, #3
 8010696:	d107      	bne.n	80106a8 <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010698:	f107 030e 	add.w	r3, r7, #14
 801069c:	2202      	movs	r2, #2
 801069e:	4619      	mov	r1, r3
 80106a0:	6878      	ldr	r0, [r7, #4]
 80106a2:	f002 fde8 	bl	8013276 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80106a6:	e050      	b.n	801074a <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 80106a8:	6839      	ldr	r1, [r7, #0]
 80106aa:	6878      	ldr	r0, [r7, #4]
 80106ac:	f002 fd72 	bl	8013194 <USBD_CtlError>
            ret = USBD_FAIL;
 80106b0:	2303      	movs	r3, #3
 80106b2:	75fb      	strb	r3, [r7, #23]
          break;
 80106b4:	e049      	b.n	801074a <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80106bc:	b2db      	uxtb	r3, r3
 80106be:	2b03      	cmp	r3, #3
 80106c0:	d107      	bne.n	80106d2 <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80106c2:	693b      	ldr	r3, [r7, #16]
 80106c4:	3304      	adds	r3, #4
 80106c6:	2201      	movs	r2, #1
 80106c8:	4619      	mov	r1, r3
 80106ca:	6878      	ldr	r0, [r7, #4]
 80106cc:	f002 fdd3 	bl	8013276 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80106d0:	e03b      	b.n	801074a <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 80106d2:	6839      	ldr	r1, [r7, #0]
 80106d4:	6878      	ldr	r0, [r7, #4]
 80106d6:	f002 fd5d 	bl	8013194 <USBD_CtlError>
            ret = USBD_FAIL;
 80106da:	2303      	movs	r3, #3
 80106dc:	75fb      	strb	r3, [r7, #23]
          break;
 80106de:	e034      	b.n	801074a <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80106e6:	b2db      	uxtb	r3, r3
 80106e8:	2b03      	cmp	r3, #3
 80106ea:	d106      	bne.n	80106fa <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 80106ec:	683b      	ldr	r3, [r7, #0]
 80106ee:	885b      	ldrh	r3, [r3, #2]
 80106f0:	b2db      	uxtb	r3, r3
 80106f2:	461a      	mov	r2, r3
 80106f4:	693b      	ldr	r3, [r7, #16]
 80106f6:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80106f8:	e027      	b.n	801074a <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 80106fa:	6839      	ldr	r1, [r7, #0]
 80106fc:	6878      	ldr	r0, [r7, #4]
 80106fe:	f002 fd49 	bl	8013194 <USBD_CtlError>
            ret = USBD_FAIL;
 8010702:	2303      	movs	r3, #3
 8010704:	75fb      	strb	r3, [r7, #23]
          break;
 8010706:	e020      	b.n	801074a <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801070e:	b2db      	uxtb	r3, r3
 8010710:	2b03      	cmp	r3, #3
 8010712:	d119      	bne.n	8010748 <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8010714:	683b      	ldr	r3, [r7, #0]
 8010716:	885b      	ldrh	r3, [r3, #2]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d115      	bne.n	8010748 <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 801071c:	683b      	ldr	r3, [r7, #0]
 801071e:	889b      	ldrh	r3, [r3, #4]
 8010720:	b2db      	uxtb	r3, r3
 8010722:	4619      	mov	r1, r3
 8010724:	6878      	ldr	r0, [r7, #4]
 8010726:	f006 f8e1 	bl	80168ec <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801072a:	683b      	ldr	r3, [r7, #0]
 801072c:	889b      	ldrh	r3, [r3, #4]
 801072e:	b2db      	uxtb	r3, r3
 8010730:	4619      	mov	r1, r3
 8010732:	6878      	ldr	r0, [r7, #4]
 8010734:	f000 fa82 	bl	8010c3c <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8010738:	e006      	b.n	8010748 <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 801073a:	6839      	ldr	r1, [r7, #0]
 801073c:	6878      	ldr	r0, [r7, #4]
 801073e:	f002 fd29 	bl	8013194 <USBD_CtlError>
          ret = USBD_FAIL;
 8010742:	2303      	movs	r3, #3
 8010744:	75fb      	strb	r3, [r7, #23]
          break;
 8010746:	e000      	b.n	801074a <USBD_MSC_Setup+0x1ca>
          break;
 8010748:	bf00      	nop
      }
      break;
 801074a:	e006      	b.n	801075a <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 801074c:	6839      	ldr	r1, [r7, #0]
 801074e:	6878      	ldr	r0, [r7, #4]
 8010750:	f002 fd20 	bl	8013194 <USBD_CtlError>
      ret = USBD_FAIL;
 8010754:	2303      	movs	r3, #3
 8010756:	75fb      	strb	r3, [r7, #23]
      break;
 8010758:	bf00      	nop
  }

  return (uint8_t)ret;
 801075a:	7dfb      	ldrb	r3, [r7, #23]
}
 801075c:	4618      	mov	r0, r3
 801075e:	3718      	adds	r7, #24
 8010760:	46bd      	mov	sp, r7
 8010762:	bd80      	pop	{r7, pc}

08010764 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b082      	sub	sp, #8
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
 801076c:	460b      	mov	r3, r1
 801076e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8010770:	78fb      	ldrb	r3, [r7, #3]
 8010772:	4619      	mov	r1, r3
 8010774:	6878      	ldr	r0, [r7, #4]
 8010776:	f000 f8dc 	bl	8010932 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 801077a:	2300      	movs	r3, #0
}
 801077c:	4618      	mov	r0, r3
 801077e:	3708      	adds	r7, #8
 8010780:	46bd      	mov	sp, r7
 8010782:	bd80      	pop	{r7, pc}

08010784 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b082      	sub	sp, #8
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
 801078c:	460b      	mov	r3, r1
 801078e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8010790:	78fb      	ldrb	r3, [r7, #3]
 8010792:	4619      	mov	r1, r3
 8010794:	6878      	ldr	r0, [r7, #4]
 8010796:	f000 f902 	bl	801099e <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 801079a:	2300      	movs	r3, #0
}
 801079c:	4618      	mov	r0, r3
 801079e:	3708      	adds	r7, #8
 80107a0:	46bd      	mov	sp, r7
 80107a2:	bd80      	pop	{r7, pc}

080107a4 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80107a4:	b480      	push	{r7}
 80107a6:	b083      	sub	sp, #12
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	2220      	movs	r2, #32
 80107b0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 80107b2:	4b03      	ldr	r3, [pc, #12]	; (80107c0 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 80107b4:	4618      	mov	r0, r3
 80107b6:	370c      	adds	r7, #12
 80107b8:	46bd      	mov	sp, r7
 80107ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107be:	4770      	bx	lr
 80107c0:	20000044 	.word	0x20000044

080107c4 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80107c4:	b480      	push	{r7}
 80107c6:	b083      	sub	sp, #12
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	2220      	movs	r2, #32
 80107d0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 80107d2:	4b03      	ldr	r3, [pc, #12]	; (80107e0 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 80107d4:	4618      	mov	r0, r3
 80107d6:	370c      	adds	r7, #12
 80107d8:	46bd      	mov	sp, r7
 80107da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107de:	4770      	bx	lr
 80107e0:	20000064 	.word	0x20000064

080107e4 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80107e4:	b480      	push	{r7}
 80107e6:	b083      	sub	sp, #12
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	2220      	movs	r2, #32
 80107f0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 80107f2:	4b03      	ldr	r3, [pc, #12]	; (8010800 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 80107f4:	4618      	mov	r0, r3
 80107f6:	370c      	adds	r7, #12
 80107f8:	46bd      	mov	sp, r7
 80107fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fe:	4770      	bx	lr
 8010800:	20000084 	.word	0x20000084

08010804 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010804:	b480      	push	{r7}
 8010806:	b083      	sub	sp, #12
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	220a      	movs	r2, #10
 8010810:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8010812:	4b03      	ldr	r3, [pc, #12]	; (8010820 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010814:	4618      	mov	r0, r3
 8010816:	370c      	adds	r7, #12
 8010818:	46bd      	mov	sp, r7
 801081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081e:	4770      	bx	lr
 8010820:	200000a4 	.word	0x200000a4

08010824 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8010824:	b480      	push	{r7}
 8010826:	b083      	sub	sp, #12
 8010828:	af00      	add	r7, sp, #0
 801082a:	6078      	str	r0, [r7, #4]
 801082c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801082e:	683b      	ldr	r3, [r7, #0]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d101      	bne.n	8010838 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010834:	2303      	movs	r3, #3
 8010836:	e004      	b.n	8010842 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	683a      	ldr	r2, [r7, #0]
 801083c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8010840:	2300      	movs	r3, #0
}
 8010842:	4618      	mov	r0, r3
 8010844:	370c      	adds	r7, #12
 8010846:	46bd      	mov	sp, r7
 8010848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801084c:	4770      	bx	lr

0801084e <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 801084e:	b580      	push	{r7, lr}
 8010850:	b084      	sub	sp, #16
 8010852:	af00      	add	r7, sp, #0
 8010854:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801085c:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d028      	beq.n	80108b6 <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	2200      	movs	r2, #0
 8010868:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	2200      	movs	r2, #0
 801086e:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	2200      	movs	r2, #0
 8010874:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	2200      	movs	r2, #0
 801087c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	2200      	movs	r2, #0
 8010884:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	2000      	movs	r0, #0
 8010892:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8010894:	2101      	movs	r1, #1
 8010896:	6878      	ldr	r0, [r7, #4]
 8010898:	f006 f828 	bl	80168ec <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 801089c:	2181      	movs	r1, #129	; 0x81
 801089e:	6878      	ldr	r0, [r7, #4]
 80108a0:	f006 f824 	bl	80168ec <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80108aa:	231f      	movs	r3, #31
 80108ac:	2101      	movs	r1, #1
 80108ae:	6878      	ldr	r0, [r7, #4]
 80108b0:	f006 f8e5 	bl	8016a7e <USBD_LL_PrepareReceive>
 80108b4:	e000      	b.n	80108b8 <MSC_BOT_Init+0x6a>
    return;
 80108b6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80108b8:	3710      	adds	r7, #16
 80108ba:	46bd      	mov	sp, r7
 80108bc:	bd80      	pop	{r7, pc}

080108be <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 80108be:	b580      	push	{r7, lr}
 80108c0:	b084      	sub	sp, #16
 80108c2:	af00      	add	r7, sp, #0
 80108c4:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80108cc:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d016      	beq.n	8010902 <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	2200      	movs	r2, #0
 80108d8:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	2201      	movs	r2, #1
 80108de:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 80108e0:	2181      	movs	r1, #129	; 0x81
 80108e2:	6878      	ldr	r0, [r7, #4]
 80108e4:	f006 f840 	bl	8016968 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 80108e8:	2101      	movs	r1, #1
 80108ea:	6878      	ldr	r0, [r7, #4]
 80108ec:	f006 f83c 	bl	8016968 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80108f6:	231f      	movs	r3, #31
 80108f8:	2101      	movs	r1, #1
 80108fa:	6878      	ldr	r0, [r7, #4]
 80108fc:	f006 f8bf 	bl	8016a7e <USBD_LL_PrepareReceive>
 8010900:	e000      	b.n	8010904 <MSC_BOT_Reset+0x46>
    return;
 8010902:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8010904:	3710      	adds	r7, #16
 8010906:	46bd      	mov	sp, r7
 8010908:	bd80      	pop	{r7, pc}

0801090a <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 801090a:	b480      	push	{r7}
 801090c:	b085      	sub	sp, #20
 801090e:	af00      	add	r7, sp, #0
 8010910:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010918:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d002      	beq.n	8010926 <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	2200      	movs	r2, #0
 8010924:	721a      	strb	r2, [r3, #8]
  }
}
 8010926:	bf00      	nop
 8010928:	3714      	adds	r7, #20
 801092a:	46bd      	mov	sp, r7
 801092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010930:	4770      	bx	lr

08010932 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010932:	b580      	push	{r7, lr}
 8010934:	b084      	sub	sp, #16
 8010936:	af00      	add	r7, sp, #0
 8010938:	6078      	str	r0, [r7, #4]
 801093a:	460b      	mov	r3, r1
 801093c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010944:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d020      	beq.n	801098e <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	7a1b      	ldrb	r3, [r3, #8]
 8010950:	2b02      	cmp	r3, #2
 8010952:	d005      	beq.n	8010960 <MSC_BOT_DataIn+0x2e>
 8010954:	2b02      	cmp	r3, #2
 8010956:	db1c      	blt.n	8010992 <MSC_BOT_DataIn+0x60>
 8010958:	3b03      	subs	r3, #3
 801095a:	2b01      	cmp	r3, #1
 801095c:	d819      	bhi.n	8010992 <MSC_BOT_DataIn+0x60>
 801095e:	e011      	b.n	8010984 <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801096c:	461a      	mov	r2, r3
 801096e:	6878      	ldr	r0, [r7, #4]
 8010970:	f000 f992 	bl	8010c98 <SCSI_ProcessCmd>
 8010974:	4603      	mov	r3, r0
 8010976:	2b00      	cmp	r3, #0
 8010978:	da0d      	bge.n	8010996 <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801097a:	2101      	movs	r1, #1
 801097c:	6878      	ldr	r0, [r7, #4]
 801097e:	f000 f8fb 	bl	8010b78 <MSC_BOT_SendCSW>
      }
      break;
 8010982:	e008      	b.n	8010996 <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8010984:	2100      	movs	r1, #0
 8010986:	6878      	ldr	r0, [r7, #4]
 8010988:	f000 f8f6 	bl	8010b78 <MSC_BOT_SendCSW>
      break;
 801098c:	e004      	b.n	8010998 <MSC_BOT_DataIn+0x66>
    return;
 801098e:	bf00      	nop
 8010990:	e002      	b.n	8010998 <MSC_BOT_DataIn+0x66>

    default:
      break;
 8010992:	bf00      	nop
 8010994:	e000      	b.n	8010998 <MSC_BOT_DataIn+0x66>
      break;
 8010996:	bf00      	nop
  }
}
 8010998:	3710      	adds	r7, #16
 801099a:	46bd      	mov	sp, r7
 801099c:	bd80      	pop	{r7, pc}

0801099e <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801099e:	b580      	push	{r7, lr}
 80109a0:	b084      	sub	sp, #16
 80109a2:	af00      	add	r7, sp, #0
 80109a4:	6078      	str	r0, [r7, #4]
 80109a6:	460b      	mov	r3, r1
 80109a8:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80109b0:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d01c      	beq.n	80109f2 <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	7a1b      	ldrb	r3, [r3, #8]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d002      	beq.n	80109c6 <MSC_BOT_DataOut+0x28>
 80109c0:	2b01      	cmp	r3, #1
 80109c2:	d004      	beq.n	80109ce <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80109c4:	e018      	b.n	80109f8 <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 80109c6:	6878      	ldr	r0, [r7, #4]
 80109c8:	f000 f81a 	bl	8010a00 <MSC_BOT_CBW_Decode>
      break;
 80109cc:	e014      	b.n	80109f8 <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80109da:	461a      	mov	r2, r3
 80109dc:	6878      	ldr	r0, [r7, #4]
 80109de:	f000 f95b 	bl	8010c98 <SCSI_ProcessCmd>
 80109e2:	4603      	mov	r3, r0
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	da06      	bge.n	80109f6 <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80109e8:	2101      	movs	r1, #1
 80109ea:	6878      	ldr	r0, [r7, #4]
 80109ec:	f000 f8c4 	bl	8010b78 <MSC_BOT_SendCSW>
      break;
 80109f0:	e001      	b.n	80109f6 <MSC_BOT_DataOut+0x58>
    return;
 80109f2:	bf00      	nop
 80109f4:	e000      	b.n	80109f8 <MSC_BOT_DataOut+0x5a>
      break;
 80109f6:	bf00      	nop
  }
}
 80109f8:	3710      	adds	r7, #16
 80109fa:	46bd      	mov	sp, r7
 80109fc:	bd80      	pop	{r7, pc}
	...

08010a00 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8010a00:	b580      	push	{r7, lr}
 8010a02:	b084      	sub	sp, #16
 8010a04:	af00      	add	r7, sp, #0
 8010a06:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010a0e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d077      	beq.n	8010b06 <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8010a2e:	2101      	movs	r1, #1
 8010a30:	6878      	ldr	r0, [r7, #4]
 8010a32:	f006 f845 	bl	8016ac0 <USBD_LL_GetRxDataSize>
 8010a36:	4603      	mov	r3, r0
 8010a38:	2b1f      	cmp	r3, #31
 8010a3a:	d114      	bne.n	8010a66 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8010a42:	4a34      	ldr	r2, [pc, #208]	; (8010b14 <MSC_BOT_CBW_Decode+0x114>)
 8010a44:	4293      	cmp	r3, r2
 8010a46:	d10e      	bne.n	8010a66 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8010a4e:	2b01      	cmp	r3, #1
 8010a50:	d809      	bhi.n	8010a66 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d004      	beq.n	8010a66 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8010a62:	2b10      	cmp	r3, #16
 8010a64:	d90e      	bls.n	8010a84 <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8010a6c:	2320      	movs	r3, #32
 8010a6e:	2205      	movs	r2, #5
 8010a70:	6878      	ldr	r0, [r7, #4]
 8010a72:	f000 fdbc 	bl	80115ee <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	2202      	movs	r2, #2
 8010a7a:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8010a7c:	6878      	ldr	r0, [r7, #4]
 8010a7e:	f000 f8ab 	bl	8010bd8 <MSC_BOT_Abort>
 8010a82:	e043      	b.n	8010b0c <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8010a90:	461a      	mov	r2, r3
 8010a92:	6878      	ldr	r0, [r7, #4]
 8010a94:	f000 f900 	bl	8010c98 <SCSI_ProcessCmd>
 8010a98:	4603      	mov	r3, r0
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	da0c      	bge.n	8010ab8 <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	7a1b      	ldrb	r3, [r3, #8]
 8010aa2:	2b05      	cmp	r3, #5
 8010aa4:	d104      	bne.n	8010ab0 <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8010aa6:	2101      	movs	r1, #1
 8010aa8:	6878      	ldr	r0, [r7, #4]
 8010aaa:	f000 f865 	bl	8010b78 <MSC_BOT_SendCSW>
 8010aae:	e02d      	b.n	8010b0c <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8010ab0:	6878      	ldr	r0, [r7, #4]
 8010ab2:	f000 f891 	bl	8010bd8 <MSC_BOT_Abort>
 8010ab6:	e029      	b.n	8010b0c <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	7a1b      	ldrb	r3, [r3, #8]
 8010abc:	2b02      	cmp	r3, #2
 8010abe:	d024      	beq.n	8010b0a <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8010ac4:	2b01      	cmp	r3, #1
 8010ac6:	d020      	beq.n	8010b0a <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8010acc:	2b03      	cmp	r3, #3
 8010ace:	d01c      	beq.n	8010b0a <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	68db      	ldr	r3, [r3, #12]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d009      	beq.n	8010aec <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	f103 0110 	add.w	r1, r3, #16
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	68db      	ldr	r3, [r3, #12]
 8010ae2:	461a      	mov	r2, r3
 8010ae4:	6878      	ldr	r0, [r7, #4]
 8010ae6:	f000 f817 	bl	8010b18 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8010aea:	e00f      	b.n	8010b0c <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	68db      	ldr	r3, [r3, #12]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d104      	bne.n	8010afe <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8010af4:	2100      	movs	r1, #0
 8010af6:	6878      	ldr	r0, [r7, #4]
 8010af8:	f000 f83e 	bl	8010b78 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8010afc:	e006      	b.n	8010b0c <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8010afe:	6878      	ldr	r0, [r7, #4]
 8010b00:	f000 f86a 	bl	8010bd8 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8010b04:	e002      	b.n	8010b0c <MSC_BOT_CBW_Decode+0x10c>
    return;
 8010b06:	bf00      	nop
 8010b08:	e000      	b.n	8010b0c <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 8010b0a:	bf00      	nop
    }
  }
}
 8010b0c:	3710      	adds	r7, #16
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	bd80      	pop	{r7, pc}
 8010b12:	bf00      	nop
 8010b14:	43425355 	.word	0x43425355

08010b18 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8010b18:	b580      	push	{r7, lr}
 8010b1a:	b086      	sub	sp, #24
 8010b1c:	af00      	add	r7, sp, #0
 8010b1e:	60f8      	str	r0, [r7, #12]
 8010b20:	60b9      	str	r1, [r7, #8]
 8010b22:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b2a:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8010b2c:	697b      	ldr	r3, [r7, #20]
 8010b2e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010b32:	687a      	ldr	r2, [r7, #4]
 8010b34:	4293      	cmp	r3, r2
 8010b36:	bf28      	it	cs
 8010b38:	4613      	movcs	r3, r2
 8010b3a:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8010b3c:	697b      	ldr	r3, [r7, #20]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d015      	beq.n	8010b6e <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 8010b42:	697b      	ldr	r3, [r7, #20]
 8010b44:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	1ad2      	subs	r2, r2, r3
 8010b4c:	697b      	ldr	r3, [r7, #20]
 8010b4e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8010b52:	697b      	ldr	r3, [r7, #20]
 8010b54:	2200      	movs	r2, #0
 8010b56:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8010b5a:	697b      	ldr	r3, [r7, #20]
 8010b5c:	2204      	movs	r2, #4
 8010b5e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8010b60:	693b      	ldr	r3, [r7, #16]
 8010b62:	68ba      	ldr	r2, [r7, #8]
 8010b64:	2181      	movs	r1, #129	; 0x81
 8010b66:	68f8      	ldr	r0, [r7, #12]
 8010b68:	f005 ff68 	bl	8016a3c <USBD_LL_Transmit>
 8010b6c:	e000      	b.n	8010b70 <MSC_BOT_SendData+0x58>
    return;
 8010b6e:	bf00      	nop
}
 8010b70:	3718      	adds	r7, #24
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bd80      	pop	{r7, pc}
	...

08010b78 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b084      	sub	sp, #16
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
 8010b80:	460b      	mov	r3, r1
 8010b82:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b8a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d01b      	beq.n	8010bca <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	4a0f      	ldr	r2, [pc, #60]	; (8010bd4 <MSC_BOT_SendCSW+0x5c>)
 8010b96:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	78fa      	ldrb	r2, [r7, #3]
 8010b9e:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	f503 720c 	add.w	r2, r3, #560	; 0x230
 8010bae:	230d      	movs	r3, #13
 8010bb0:	2181      	movs	r1, #129	; 0x81
 8010bb2:	6878      	ldr	r0, [r7, #4]
 8010bb4:	f005 ff42 	bl	8016a3c <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8010bbe:	231f      	movs	r3, #31
 8010bc0:	2101      	movs	r1, #1
 8010bc2:	6878      	ldr	r0, [r7, #4]
 8010bc4:	f005 ff5b 	bl	8016a7e <USBD_LL_PrepareReceive>
 8010bc8:	e000      	b.n	8010bcc <MSC_BOT_SendCSW+0x54>
    return;
 8010bca:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8010bcc:	3710      	adds	r7, #16
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	bd80      	pop	{r7, pc}
 8010bd2:	bf00      	nop
 8010bd4:	53425355 	.word	0x53425355

08010bd8 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b084      	sub	sp, #16
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010be6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d022      	beq.n	8010c34 <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d10c      	bne.n	8010c12 <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	d007      	beq.n	8010c12 <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d103      	bne.n	8010c12 <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8010c0a:	2101      	movs	r1, #1
 8010c0c:	6878      	ldr	r0, [r7, #4]
 8010c0e:	f005 fe8c 	bl	801692a <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8010c12:	2181      	movs	r1, #129	; 0x81
 8010c14:	6878      	ldr	r0, [r7, #4]
 8010c16:	f005 fe88 	bl	801692a <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	7a5b      	ldrb	r3, [r3, #9]
 8010c1e:	2b02      	cmp	r3, #2
 8010c20:	d109      	bne.n	8010c36 <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8010c22:	2181      	movs	r1, #129	; 0x81
 8010c24:	6878      	ldr	r0, [r7, #4]
 8010c26:	f005 fe80 	bl	801692a <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8010c2a:	2101      	movs	r1, #1
 8010c2c:	6878      	ldr	r0, [r7, #4]
 8010c2e:	f005 fe7c 	bl	801692a <USBD_LL_StallEP>
 8010c32:	e000      	b.n	8010c36 <MSC_BOT_Abort+0x5e>
    return;
 8010c34:	bf00      	nop
  }
}
 8010c36:	3710      	adds	r7, #16
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	bd80      	pop	{r7, pc}

08010c3c <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b084      	sub	sp, #16
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
 8010c44:	460b      	mov	r3, r1
 8010c46:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010c4e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d019      	beq.n	8010c8a <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8010c56:	68fb      	ldr	r3, [r7, #12]
 8010c58:	7a5b      	ldrb	r3, [r3, #9]
 8010c5a:	2b02      	cmp	r3, #2
 8010c5c:	d108      	bne.n	8010c70 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8010c5e:	2181      	movs	r1, #129	; 0x81
 8010c60:	6878      	ldr	r0, [r7, #4]
 8010c62:	f005 fe62 	bl	801692a <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8010c66:	2101      	movs	r1, #1
 8010c68:	6878      	ldr	r0, [r7, #4]
 8010c6a:	f005 fe5e 	bl	801692a <USBD_LL_StallEP>
 8010c6e:	e00f      	b.n	8010c90 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8010c70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	da0a      	bge.n	8010c8e <MSC_BOT_CplClrFeature+0x52>
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	7a5b      	ldrb	r3, [r3, #9]
 8010c7c:	2b01      	cmp	r3, #1
 8010c7e:	d006      	beq.n	8010c8e <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8010c80:	2101      	movs	r1, #1
 8010c82:	6878      	ldr	r0, [r7, #4]
 8010c84:	f7ff ff78 	bl	8010b78 <MSC_BOT_SendCSW>
 8010c88:	e002      	b.n	8010c90 <MSC_BOT_CplClrFeature+0x54>
    return;
 8010c8a:	bf00      	nop
 8010c8c:	e000      	b.n	8010c90 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 8010c8e:	bf00      	nop
  }
}
 8010c90:	3710      	adds	r7, #16
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}
	...

08010c98 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b086      	sub	sp, #24
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	60f8      	str	r0, [r7, #12]
 8010ca0:	460b      	mov	r3, r1
 8010ca2:	607a      	str	r2, [r7, #4]
 8010ca4:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010cac:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8010cae:	693b      	ldr	r3, [r7, #16]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d102      	bne.n	8010cba <SCSI_ProcessCmd+0x22>
  {
    return -1;
 8010cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8010cb8:	e168      	b.n	8010f8c <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	781b      	ldrb	r3, [r3, #0]
 8010cbe:	2baa      	cmp	r3, #170	; 0xaa
 8010cc0:	f000 8144 	beq.w	8010f4c <SCSI_ProcessCmd+0x2b4>
 8010cc4:	2baa      	cmp	r3, #170	; 0xaa
 8010cc6:	f300 8153 	bgt.w	8010f70 <SCSI_ProcessCmd+0x2d8>
 8010cca:	2ba8      	cmp	r3, #168	; 0xa8
 8010ccc:	f000 812c 	beq.w	8010f28 <SCSI_ProcessCmd+0x290>
 8010cd0:	2ba8      	cmp	r3, #168	; 0xa8
 8010cd2:	f300 814d 	bgt.w	8010f70 <SCSI_ProcessCmd+0x2d8>
 8010cd6:	2b5a      	cmp	r3, #90	; 0x5a
 8010cd8:	f300 80c0 	bgt.w	8010e5c <SCSI_ProcessCmd+0x1c4>
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	f2c0 8147 	blt.w	8010f70 <SCSI_ProcessCmd+0x2d8>
 8010ce2:	2b5a      	cmp	r3, #90	; 0x5a
 8010ce4:	f200 8144 	bhi.w	8010f70 <SCSI_ProcessCmd+0x2d8>
 8010ce8:	a201      	add	r2, pc, #4	; (adr r2, 8010cf0 <SCSI_ProcessCmd+0x58>)
 8010cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cee:	bf00      	nop
 8010cf0:	08010e63 	.word	0x08010e63
 8010cf4:	08010f71 	.word	0x08010f71
 8010cf8:	08010f71 	.word	0x08010f71
 8010cfc:	08010e75 	.word	0x08010e75
 8010d00:	08010f71 	.word	0x08010f71
 8010d04:	08010f71 	.word	0x08010f71
 8010d08:	08010f71 	.word	0x08010f71
 8010d0c:	08010f71 	.word	0x08010f71
 8010d10:	08010f71 	.word	0x08010f71
 8010d14:	08010f71 	.word	0x08010f71
 8010d18:	08010f71 	.word	0x08010f71
 8010d1c:	08010f71 	.word	0x08010f71
 8010d20:	08010f71 	.word	0x08010f71
 8010d24:	08010f71 	.word	0x08010f71
 8010d28:	08010f71 	.word	0x08010f71
 8010d2c:	08010f71 	.word	0x08010f71
 8010d30:	08010f71 	.word	0x08010f71
 8010d34:	08010f71 	.word	0x08010f71
 8010d38:	08010e87 	.word	0x08010e87
 8010d3c:	08010f71 	.word	0x08010f71
 8010d40:	08010f71 	.word	0x08010f71
 8010d44:	08010f71 	.word	0x08010f71
 8010d48:	08010f71 	.word	0x08010f71
 8010d4c:	08010f71 	.word	0x08010f71
 8010d50:	08010f71 	.word	0x08010f71
 8010d54:	08010f71 	.word	0x08010f71
 8010d58:	08010ebd 	.word	0x08010ebd
 8010d5c:	08010e99 	.word	0x08010e99
 8010d60:	08010f71 	.word	0x08010f71
 8010d64:	08010f71 	.word	0x08010f71
 8010d68:	08010eab 	.word	0x08010eab
 8010d6c:	08010f71 	.word	0x08010f71
 8010d70:	08010f71 	.word	0x08010f71
 8010d74:	08010f71 	.word	0x08010f71
 8010d78:	08010f71 	.word	0x08010f71
 8010d7c:	08010ee1 	.word	0x08010ee1
 8010d80:	08010f71 	.word	0x08010f71
 8010d84:	08010ef3 	.word	0x08010ef3
 8010d88:	08010f71 	.word	0x08010f71
 8010d8c:	08010f71 	.word	0x08010f71
 8010d90:	08010f17 	.word	0x08010f17
 8010d94:	08010f71 	.word	0x08010f71
 8010d98:	08010f3b 	.word	0x08010f3b
 8010d9c:	08010f71 	.word	0x08010f71
 8010da0:	08010f71 	.word	0x08010f71
 8010da4:	08010f71 	.word	0x08010f71
 8010da8:	08010f71 	.word	0x08010f71
 8010dac:	08010f5f 	.word	0x08010f5f
 8010db0:	08010f71 	.word	0x08010f71
 8010db4:	08010f71 	.word	0x08010f71
 8010db8:	08010f71 	.word	0x08010f71
 8010dbc:	08010f71 	.word	0x08010f71
 8010dc0:	08010f71 	.word	0x08010f71
 8010dc4:	08010f71 	.word	0x08010f71
 8010dc8:	08010f71 	.word	0x08010f71
 8010dcc:	08010f71 	.word	0x08010f71
 8010dd0:	08010f71 	.word	0x08010f71
 8010dd4:	08010f71 	.word	0x08010f71
 8010dd8:	08010f71 	.word	0x08010f71
 8010ddc:	08010f71 	.word	0x08010f71
 8010de0:	08010f71 	.word	0x08010f71
 8010de4:	08010f71 	.word	0x08010f71
 8010de8:	08010f71 	.word	0x08010f71
 8010dec:	08010f71 	.word	0x08010f71
 8010df0:	08010f71 	.word	0x08010f71
 8010df4:	08010f71 	.word	0x08010f71
 8010df8:	08010f71 	.word	0x08010f71
 8010dfc:	08010f71 	.word	0x08010f71
 8010e00:	08010f71 	.word	0x08010f71
 8010e04:	08010f71 	.word	0x08010f71
 8010e08:	08010f71 	.word	0x08010f71
 8010e0c:	08010f71 	.word	0x08010f71
 8010e10:	08010f71 	.word	0x08010f71
 8010e14:	08010f71 	.word	0x08010f71
 8010e18:	08010f71 	.word	0x08010f71
 8010e1c:	08010f71 	.word	0x08010f71
 8010e20:	08010f71 	.word	0x08010f71
 8010e24:	08010f71 	.word	0x08010f71
 8010e28:	08010f71 	.word	0x08010f71
 8010e2c:	08010f71 	.word	0x08010f71
 8010e30:	08010f71 	.word	0x08010f71
 8010e34:	08010f71 	.word	0x08010f71
 8010e38:	08010f71 	.word	0x08010f71
 8010e3c:	08010f71 	.word	0x08010f71
 8010e40:	08010f71 	.word	0x08010f71
 8010e44:	08010f71 	.word	0x08010f71
 8010e48:	08010f71 	.word	0x08010f71
 8010e4c:	08010f71 	.word	0x08010f71
 8010e50:	08010f71 	.word	0x08010f71
 8010e54:	08010f71 	.word	0x08010f71
 8010e58:	08010ecf 	.word	0x08010ecf
 8010e5c:	2b9e      	cmp	r3, #158	; 0x9e
 8010e5e:	d051      	beq.n	8010f04 <SCSI_ProcessCmd+0x26c>
 8010e60:	e086      	b.n	8010f70 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8010e62:	7afb      	ldrb	r3, [r7, #11]
 8010e64:	687a      	ldr	r2, [r7, #4]
 8010e66:	4619      	mov	r1, r3
 8010e68:	68f8      	ldr	r0, [r7, #12]
 8010e6a:	f000 f893 	bl	8010f94 <SCSI_TestUnitReady>
 8010e6e:	4603      	mov	r3, r0
 8010e70:	75fb      	strb	r3, [r7, #23]
      break;
 8010e72:	e089      	b.n	8010f88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8010e74:	7afb      	ldrb	r3, [r7, #11]
 8010e76:	687a      	ldr	r2, [r7, #4]
 8010e78:	4619      	mov	r1, r3
 8010e7a:	68f8      	ldr	r0, [r7, #12]
 8010e7c:	f000 fb38 	bl	80114f0 <SCSI_RequestSense>
 8010e80:	4603      	mov	r3, r0
 8010e82:	75fb      	strb	r3, [r7, #23]
      break;
 8010e84:	e080      	b.n	8010f88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8010e86:	7afb      	ldrb	r3, [r7, #11]
 8010e88:	687a      	ldr	r2, [r7, #4]
 8010e8a:	4619      	mov	r1, r3
 8010e8c:	68f8      	ldr	r0, [r7, #12]
 8010e8e:	f000 f8d1 	bl	8011034 <SCSI_Inquiry>
 8010e92:	4603      	mov	r3, r0
 8010e94:	75fb      	strb	r3, [r7, #23]
      break;
 8010e96:	e077      	b.n	8010f88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8010e98:	7afb      	ldrb	r3, [r7, #11]
 8010e9a:	687a      	ldr	r2, [r7, #4]
 8010e9c:	4619      	mov	r1, r3
 8010e9e:	68f8      	ldr	r0, [r7, #12]
 8010ea0:	f000 fbec 	bl	801167c <SCSI_StartStopUnit>
 8010ea4:	4603      	mov	r3, r0
 8010ea6:	75fb      	strb	r3, [r7, #23]
      break;
 8010ea8:	e06e      	b.n	8010f88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8010eaa:	7afb      	ldrb	r3, [r7, #11]
 8010eac:	687a      	ldr	r2, [r7, #4]
 8010eae:	4619      	mov	r1, r3
 8010eb0:	68f8      	ldr	r0, [r7, #12]
 8010eb2:	f000 fc34 	bl	801171e <SCSI_AllowPreventRemovable>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	75fb      	strb	r3, [r7, #23]
      break;
 8010eba:	e065      	b.n	8010f88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8010ebc:	7afb      	ldrb	r3, [r7, #11]
 8010ebe:	687a      	ldr	r2, [r7, #4]
 8010ec0:	4619      	mov	r1, r3
 8010ec2:	68f8      	ldr	r0, [r7, #12]
 8010ec4:	f000 fabc 	bl	8011440 <SCSI_ModeSense6>
 8010ec8:	4603      	mov	r3, r0
 8010eca:	75fb      	strb	r3, [r7, #23]
      break;
 8010ecc:	e05c      	b.n	8010f88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8010ece:	7afb      	ldrb	r3, [r7, #11]
 8010ed0:	687a      	ldr	r2, [r7, #4]
 8010ed2:	4619      	mov	r1, r3
 8010ed4:	68f8      	ldr	r0, [r7, #12]
 8010ed6:	f000 fadf 	bl	8011498 <SCSI_ModeSense10>
 8010eda:	4603      	mov	r3, r0
 8010edc:	75fb      	strb	r3, [r7, #23]
      break;
 8010ede:	e053      	b.n	8010f88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8010ee0:	7afb      	ldrb	r3, [r7, #11]
 8010ee2:	687a      	ldr	r2, [r7, #4]
 8010ee4:	4619      	mov	r1, r3
 8010ee6:	68f8      	ldr	r0, [r7, #12]
 8010ee8:	f000 fa37 	bl	801135a <SCSI_ReadFormatCapacity>
 8010eec:	4603      	mov	r3, r0
 8010eee:	75fb      	strb	r3, [r7, #23]
      break;
 8010ef0:	e04a      	b.n	8010f88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8010ef2:	7afb      	ldrb	r3, [r7, #11]
 8010ef4:	687a      	ldr	r2, [r7, #4]
 8010ef6:	4619      	mov	r1, r3
 8010ef8:	68f8      	ldr	r0, [r7, #12]
 8010efa:	f000 f90f 	bl	801111c <SCSI_ReadCapacity10>
 8010efe:	4603      	mov	r3, r0
 8010f00:	75fb      	strb	r3, [r7, #23]
      break;
 8010f02:	e041      	b.n	8010f88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8010f04:	7afb      	ldrb	r3, [r7, #11]
 8010f06:	687a      	ldr	r2, [r7, #4]
 8010f08:	4619      	mov	r1, r3
 8010f0a:	68f8      	ldr	r0, [r7, #12]
 8010f0c:	f000 f97b 	bl	8011206 <SCSI_ReadCapacity16>
 8010f10:	4603      	mov	r3, r0
 8010f12:	75fb      	strb	r3, [r7, #23]
      break;
 8010f14:	e038      	b.n	8010f88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8010f16:	7afb      	ldrb	r3, [r7, #11]
 8010f18:	687a      	ldr	r2, [r7, #4]
 8010f1a:	4619      	mov	r1, r3
 8010f1c:	68f8      	ldr	r0, [r7, #12]
 8010f1e:	f000 fc27 	bl	8011770 <SCSI_Read10>
 8010f22:	4603      	mov	r3, r0
 8010f24:	75fb      	strb	r3, [r7, #23]
      break;
 8010f26:	e02f      	b.n	8010f88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8010f28:	7afb      	ldrb	r3, [r7, #11]
 8010f2a:	687a      	ldr	r2, [r7, #4]
 8010f2c:	4619      	mov	r1, r3
 8010f2e:	68f8      	ldr	r0, [r7, #12]
 8010f30:	f000 fcbe 	bl	80118b0 <SCSI_Read12>
 8010f34:	4603      	mov	r3, r0
 8010f36:	75fb      	strb	r3, [r7, #23]
      break;
 8010f38:	e026      	b.n	8010f88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8010f3a:	7afb      	ldrb	r3, [r7, #11]
 8010f3c:	687a      	ldr	r2, [r7, #4]
 8010f3e:	4619      	mov	r1, r3
 8010f40:	68f8      	ldr	r0, [r7, #12]
 8010f42:	f000 fd60 	bl	8011a06 <SCSI_Write10>
 8010f46:	4603      	mov	r3, r0
 8010f48:	75fb      	strb	r3, [r7, #23]
      break;
 8010f4a:	e01d      	b.n	8010f88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8010f4c:	7afb      	ldrb	r3, [r7, #11]
 8010f4e:	687a      	ldr	r2, [r7, #4]
 8010f50:	4619      	mov	r1, r3
 8010f52:	68f8      	ldr	r0, [r7, #12]
 8010f54:	f000 fe1c 	bl	8011b90 <SCSI_Write12>
 8010f58:	4603      	mov	r3, r0
 8010f5a:	75fb      	strb	r3, [r7, #23]
      break;
 8010f5c:	e014      	b.n	8010f88 <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8010f5e:	7afb      	ldrb	r3, [r7, #11]
 8010f60:	687a      	ldr	r2, [r7, #4]
 8010f62:	4619      	mov	r1, r3
 8010f64:	68f8      	ldr	r0, [r7, #12]
 8010f66:	f000 fee8 	bl	8011d3a <SCSI_Verify10>
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	75fb      	strb	r3, [r7, #23]
      break;
 8010f6e:	e00b      	b.n	8010f88 <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8010f70:	7af9      	ldrb	r1, [r7, #11]
 8010f72:	2320      	movs	r3, #32
 8010f74:	2205      	movs	r2, #5
 8010f76:	68f8      	ldr	r0, [r7, #12]
 8010f78:	f000 fb39 	bl	80115ee <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8010f7c:	693b      	ldr	r3, [r7, #16]
 8010f7e:	2202      	movs	r2, #2
 8010f80:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8010f82:	23ff      	movs	r3, #255	; 0xff
 8010f84:	75fb      	strb	r3, [r7, #23]
      break;
 8010f86:	bf00      	nop
  }

  return ret;
 8010f88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	3718      	adds	r7, #24
 8010f90:	46bd      	mov	sp, r7
 8010f92:	bd80      	pop	{r7, pc}

08010f94 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b086      	sub	sp, #24
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	60f8      	str	r0, [r7, #12]
 8010f9c:	460b      	mov	r3, r1
 8010f9e:	607a      	str	r2, [r7, #4]
 8010fa0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010fa8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8010faa:	697b      	ldr	r3, [r7, #20]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d102      	bne.n	8010fb6 <SCSI_TestUnitReady+0x22>
  {
    return -1;
 8010fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8010fb4:	e03a      	b.n	801102c <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8010fb6:	697b      	ldr	r3, [r7, #20]
 8010fb8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d00a      	beq.n	8010fd6 <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010fc0:	697b      	ldr	r3, [r7, #20]
 8010fc2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8010fc6:	2320      	movs	r3, #32
 8010fc8:	2205      	movs	r2, #5
 8010fca:	68f8      	ldr	r0, [r7, #12]
 8010fcc:	f000 fb0f 	bl	80115ee <SCSI_SenseCode>

    return -1;
 8010fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8010fd4:	e02a      	b.n	801102c <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8010fd6:	697b      	ldr	r3, [r7, #20]
 8010fd8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8010fdc:	2b02      	cmp	r3, #2
 8010fde:	d10b      	bne.n	8010ff8 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010fe0:	7af9      	ldrb	r1, [r7, #11]
 8010fe2:	233a      	movs	r3, #58	; 0x3a
 8010fe4:	2202      	movs	r2, #2
 8010fe6:	68f8      	ldr	r0, [r7, #12]
 8010fe8:	f000 fb01 	bl	80115ee <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8010fec:	697b      	ldr	r3, [r7, #20]
 8010fee:	2205      	movs	r2, #5
 8010ff0:	721a      	strb	r2, [r3, #8]
    return -1;
 8010ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8010ff6:	e019      	b.n	801102c <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010ffe:	689b      	ldr	r3, [r3, #8]
 8011000:	7afa      	ldrb	r2, [r7, #11]
 8011002:	4610      	mov	r0, r2
 8011004:	4798      	blx	r3
 8011006:	4603      	mov	r3, r0
 8011008:	2b00      	cmp	r3, #0
 801100a:	d00b      	beq.n	8011024 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801100c:	7af9      	ldrb	r1, [r7, #11]
 801100e:	233a      	movs	r3, #58	; 0x3a
 8011010:	2202      	movs	r2, #2
 8011012:	68f8      	ldr	r0, [r7, #12]
 8011014:	f000 faeb 	bl	80115ee <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8011018:	697b      	ldr	r3, [r7, #20]
 801101a:	2205      	movs	r2, #5
 801101c:	721a      	strb	r2, [r3, #8]

    return -1;
 801101e:	f04f 33ff 	mov.w	r3, #4294967295
 8011022:	e003      	b.n	801102c <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 8011024:	697b      	ldr	r3, [r7, #20]
 8011026:	2200      	movs	r2, #0
 8011028:	60da      	str	r2, [r3, #12]

  return 0;
 801102a:	2300      	movs	r3, #0
}
 801102c:	4618      	mov	r0, r3
 801102e:	3718      	adds	r7, #24
 8011030:	46bd      	mov	sp, r7
 8011032:	bd80      	pop	{r7, pc}

08011034 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011034:	b580      	push	{r7, lr}
 8011036:	b088      	sub	sp, #32
 8011038:	af00      	add	r7, sp, #0
 801103a:	60f8      	str	r0, [r7, #12]
 801103c:	460b      	mov	r3, r1
 801103e:	607a      	str	r2, [r7, #4]
 8011040:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011048:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801104a:	69bb      	ldr	r3, [r7, #24]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d102      	bne.n	8011056 <SCSI_Inquiry+0x22>
  {
    return -1;
 8011050:	f04f 33ff 	mov.w	r3, #4294967295
 8011054:	e05a      	b.n	801110c <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8011056:	69bb      	ldr	r3, [r7, #24]
 8011058:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801105c:	2b00      	cmp	r3, #0
 801105e:	d10a      	bne.n	8011076 <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011060:	69bb      	ldr	r3, [r7, #24]
 8011062:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011066:	2320      	movs	r3, #32
 8011068:	2205      	movs	r2, #5
 801106a:	68f8      	ldr	r0, [r7, #12]
 801106c:	f000 fabf 	bl	80115ee <SCSI_SenseCode>
    return -1;
 8011070:	f04f 33ff 	mov.w	r3, #4294967295
 8011074:	e04a      	b.n	801110c <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	3301      	adds	r3, #1
 801107a:	781b      	ldrb	r3, [r3, #0]
 801107c:	f003 0301 	and.w	r3, r3, #1
 8011080:	2b00      	cmp	r3, #0
 8011082:	d020      	beq.n	80110c6 <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	3302      	adds	r3, #2
 8011088:	781b      	ldrb	r3, [r3, #0]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d105      	bne.n	801109a <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 801108e:	2206      	movs	r2, #6
 8011090:	4920      	ldr	r1, [pc, #128]	; (8011114 <SCSI_Inquiry+0xe0>)
 8011092:	69b8      	ldr	r0, [r7, #24]
 8011094:	f000 ffb4 	bl	8012000 <SCSI_UpdateBotData>
 8011098:	e037      	b.n	801110a <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	3302      	adds	r3, #2
 801109e:	781b      	ldrb	r3, [r3, #0]
 80110a0:	2b80      	cmp	r3, #128	; 0x80
 80110a2:	d105      	bne.n	80110b0 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 80110a4:	2208      	movs	r2, #8
 80110a6:	491c      	ldr	r1, [pc, #112]	; (8011118 <SCSI_Inquiry+0xe4>)
 80110a8:	69b8      	ldr	r0, [r7, #24]
 80110aa:	f000 ffa9 	bl	8012000 <SCSI_UpdateBotData>
 80110ae:	e02c      	b.n	801110a <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 80110b0:	69bb      	ldr	r3, [r7, #24]
 80110b2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80110b6:	2324      	movs	r3, #36	; 0x24
 80110b8:	2205      	movs	r2, #5
 80110ba:	68f8      	ldr	r0, [r7, #12]
 80110bc:	f000 fa97 	bl	80115ee <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 80110c0:	f04f 33ff 	mov.w	r3, #4294967295
 80110c4:	e022      	b.n	801110c <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80110cc:	69d9      	ldr	r1, [r3, #28]
 80110ce:	7afa      	ldrb	r2, [r7, #11]
 80110d0:	4613      	mov	r3, r2
 80110d2:	00db      	lsls	r3, r3, #3
 80110d4:	4413      	add	r3, r2
 80110d6:	009b      	lsls	r3, r3, #2
 80110d8:	440b      	add	r3, r1
 80110da:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80110dc:	697b      	ldr	r3, [r7, #20]
 80110de:	3304      	adds	r3, #4
 80110e0:	781b      	ldrb	r3, [r3, #0]
 80110e2:	b29b      	uxth	r3, r3
 80110e4:	3305      	adds	r3, #5
 80110e6:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	3304      	adds	r3, #4
 80110ec:	781b      	ldrb	r3, [r3, #0]
 80110ee:	b29b      	uxth	r3, r3
 80110f0:	8bfa      	ldrh	r2, [r7, #30]
 80110f2:	429a      	cmp	r2, r3
 80110f4:	d303      	bcc.n	80110fe <SCSI_Inquiry+0xca>
    {
      len = params[4];
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	3304      	adds	r3, #4
 80110fa:	781b      	ldrb	r3, [r3, #0]
 80110fc:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 80110fe:	8bfb      	ldrh	r3, [r7, #30]
 8011100:	461a      	mov	r2, r3
 8011102:	6979      	ldr	r1, [r7, #20]
 8011104:	69b8      	ldr	r0, [r7, #24]
 8011106:	f000 ff7b 	bl	8012000 <SCSI_UpdateBotData>
  }

  return 0;
 801110a:	2300      	movs	r3, #0
}
 801110c:	4618      	mov	r0, r3
 801110e:	3720      	adds	r7, #32
 8011110:	46bd      	mov	sp, r7
 8011112:	bd80      	pop	{r7, pc}
 8011114:	200000b0 	.word	0x200000b0
 8011118:	200000b8 	.word	0x200000b8

0801111c <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b086      	sub	sp, #24
 8011120:	af00      	add	r7, sp, #0
 8011122:	60f8      	str	r0, [r7, #12]
 8011124:	460b      	mov	r3, r1
 8011126:	607a      	str	r2, [r7, #4]
 8011128:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011130:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011132:	697b      	ldr	r3, [r7, #20]
 8011134:	2b00      	cmp	r3, #0
 8011136:	d102      	bne.n	801113e <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 8011138:	f04f 33ff 	mov.w	r3, #4294967295
 801113c:	e05f      	b.n	80111fe <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011144:	685b      	ldr	r3, [r3, #4]
 8011146:	697a      	ldr	r2, [r7, #20]
 8011148:	f502 711a 	add.w	r1, r2, #616	; 0x268
 801114c:	697a      	ldr	r2, [r7, #20]
 801114e:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8011152:	7af8      	ldrb	r0, [r7, #11]
 8011154:	4798      	blx	r3
 8011156:	4603      	mov	r3, r0
 8011158:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801115a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d104      	bne.n	801116c <SCSI_ReadCapacity10+0x50>
 8011162:	697b      	ldr	r3, [r7, #20]
 8011164:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8011168:	2b02      	cmp	r3, #2
 801116a:	d108      	bne.n	801117e <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801116c:	7af9      	ldrb	r1, [r7, #11]
 801116e:	233a      	movs	r3, #58	; 0x3a
 8011170:	2202      	movs	r2, #2
 8011172:	68f8      	ldr	r0, [r7, #12]
 8011174:	f000 fa3b 	bl	80115ee <SCSI_SenseCode>
    return -1;
 8011178:	f04f 33ff 	mov.w	r3, #4294967295
 801117c:	e03f      	b.n	80111fe <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 801117e:	697b      	ldr	r3, [r7, #20]
 8011180:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8011184:	3b01      	subs	r3, #1
 8011186:	0e1b      	lsrs	r3, r3, #24
 8011188:	b2da      	uxtb	r2, r3
 801118a:	697b      	ldr	r3, [r7, #20]
 801118c:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 801118e:	697b      	ldr	r3, [r7, #20]
 8011190:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8011194:	3b01      	subs	r3, #1
 8011196:	0c1b      	lsrs	r3, r3, #16
 8011198:	b2da      	uxtb	r2, r3
 801119a:	697b      	ldr	r3, [r7, #20]
 801119c:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 801119e:	697b      	ldr	r3, [r7, #20]
 80111a0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80111a4:	3b01      	subs	r3, #1
 80111a6:	0a1b      	lsrs	r3, r3, #8
 80111a8:	b2da      	uxtb	r2, r3
 80111aa:	697b      	ldr	r3, [r7, #20]
 80111ac:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80111ae:	697b      	ldr	r3, [r7, #20]
 80111b0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80111b4:	b2db      	uxtb	r3, r3
 80111b6:	3b01      	subs	r3, #1
 80111b8:	b2da      	uxtb	r2, r3
 80111ba:	697b      	ldr	r3, [r7, #20]
 80111bc:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80111be:	697b      	ldr	r3, [r7, #20]
 80111c0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80111c4:	161b      	asrs	r3, r3, #24
 80111c6:	b2da      	uxtb	r2, r3
 80111c8:	697b      	ldr	r3, [r7, #20]
 80111ca:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80111cc:	697b      	ldr	r3, [r7, #20]
 80111ce:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80111d2:	141b      	asrs	r3, r3, #16
 80111d4:	b2da      	uxtb	r2, r3
 80111d6:	697b      	ldr	r3, [r7, #20]
 80111d8:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80111da:	697b      	ldr	r3, [r7, #20]
 80111dc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80111e0:	0a1b      	lsrs	r3, r3, #8
 80111e2:	b29b      	uxth	r3, r3
 80111e4:	b2da      	uxtb	r2, r3
 80111e6:	697b      	ldr	r3, [r7, #20]
 80111e8:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80111ea:	697b      	ldr	r3, [r7, #20]
 80111ec:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80111f0:	b2da      	uxtb	r2, r3
 80111f2:	697b      	ldr	r3, [r7, #20]
 80111f4:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 80111f6:	697b      	ldr	r3, [r7, #20]
 80111f8:	2208      	movs	r2, #8
 80111fa:	60da      	str	r2, [r3, #12]

  return 0;
 80111fc:	2300      	movs	r3, #0

}
 80111fe:	4618      	mov	r0, r3
 8011200:	3718      	adds	r7, #24
 8011202:	46bd      	mov	sp, r7
 8011204:	bd80      	pop	{r7, pc}

08011206 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011206:	b580      	push	{r7, lr}
 8011208:	b088      	sub	sp, #32
 801120a:	af00      	add	r7, sp, #0
 801120c:	60f8      	str	r0, [r7, #12]
 801120e:	460b      	mov	r3, r1
 8011210:	607a      	str	r2, [r7, #4]
 8011212:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801121a:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801121c:	69bb      	ldr	r3, [r7, #24]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d102      	bne.n	8011228 <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 8011222:	f04f 33ff 	mov.w	r3, #4294967295
 8011226:	e094      	b.n	8011352 <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801122e:	685b      	ldr	r3, [r3, #4]
 8011230:	69ba      	ldr	r2, [r7, #24]
 8011232:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8011236:	69ba      	ldr	r2, [r7, #24]
 8011238:	f502 7219 	add.w	r2, r2, #612	; 0x264
 801123c:	7af8      	ldrb	r0, [r7, #11]
 801123e:	4798      	blx	r3
 8011240:	4603      	mov	r3, r0
 8011242:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8011244:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d104      	bne.n	8011256 <SCSI_ReadCapacity16+0x50>
 801124c:	69bb      	ldr	r3, [r7, #24]
 801124e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8011252:	2b02      	cmp	r3, #2
 8011254:	d108      	bne.n	8011268 <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011256:	7af9      	ldrb	r1, [r7, #11]
 8011258:	233a      	movs	r3, #58	; 0x3a
 801125a:	2202      	movs	r2, #2
 801125c:	68f8      	ldr	r0, [r7, #12]
 801125e:	f000 f9c6 	bl	80115ee <SCSI_SenseCode>
    return -1;
 8011262:	f04f 33ff 	mov.w	r3, #4294967295
 8011266:	e074      	b.n	8011352 <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	330a      	adds	r3, #10
 801126c:	781b      	ldrb	r3, [r3, #0]
 801126e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	330b      	adds	r3, #11
 8011274:	781b      	ldrb	r3, [r3, #0]
 8011276:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8011278:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	330c      	adds	r3, #12
 801127e:	781b      	ldrb	r3, [r3, #0]
 8011280:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8011282:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8011284:	687a      	ldr	r2, [r7, #4]
 8011286:	320d      	adds	r2, #13
 8011288:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801128a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801128c:	69bb      	ldr	r3, [r7, #24]
 801128e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8011290:	2300      	movs	r3, #0
 8011292:	77fb      	strb	r3, [r7, #31]
 8011294:	e007      	b.n	80112a6 <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 8011296:	7ffb      	ldrb	r3, [r7, #31]
 8011298:	69ba      	ldr	r2, [r7, #24]
 801129a:	4413      	add	r3, r2
 801129c:	2200      	movs	r2, #0
 801129e:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80112a0:	7ffb      	ldrb	r3, [r7, #31]
 80112a2:	3301      	adds	r3, #1
 80112a4:	77fb      	strb	r3, [r7, #31]
 80112a6:	7ffa      	ldrb	r2, [r7, #31]
 80112a8:	69bb      	ldr	r3, [r7, #24]
 80112aa:	68db      	ldr	r3, [r3, #12]
 80112ac:	429a      	cmp	r2, r3
 80112ae:	d3f2      	bcc.n	8011296 <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80112b0:	69bb      	ldr	r3, [r7, #24]
 80112b2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80112b6:	3b01      	subs	r3, #1
 80112b8:	0e1b      	lsrs	r3, r3, #24
 80112ba:	b2da      	uxtb	r2, r3
 80112bc:	69bb      	ldr	r3, [r7, #24]
 80112be:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80112c0:	69bb      	ldr	r3, [r7, #24]
 80112c2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80112c6:	3b01      	subs	r3, #1
 80112c8:	0c1b      	lsrs	r3, r3, #16
 80112ca:	b2da      	uxtb	r2, r3
 80112cc:	69bb      	ldr	r3, [r7, #24]
 80112ce:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80112d0:	69bb      	ldr	r3, [r7, #24]
 80112d2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80112d6:	3b01      	subs	r3, #1
 80112d8:	0a1b      	lsrs	r3, r3, #8
 80112da:	b2da      	uxtb	r2, r3
 80112dc:	69bb      	ldr	r3, [r7, #24]
 80112de:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80112e0:	69bb      	ldr	r3, [r7, #24]
 80112e2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80112e6:	b2db      	uxtb	r3, r3
 80112e8:	3b01      	subs	r3, #1
 80112ea:	b2da      	uxtb	r2, r3
 80112ec:	69bb      	ldr	r3, [r7, #24]
 80112ee:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80112f0:	69bb      	ldr	r3, [r7, #24]
 80112f2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80112f6:	161b      	asrs	r3, r3, #24
 80112f8:	b2da      	uxtb	r2, r3
 80112fa:	69bb      	ldr	r3, [r7, #24]
 80112fc:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80112fe:	69bb      	ldr	r3, [r7, #24]
 8011300:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011304:	141b      	asrs	r3, r3, #16
 8011306:	b2da      	uxtb	r2, r3
 8011308:	69bb      	ldr	r3, [r7, #24]
 801130a:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 801130c:	69bb      	ldr	r3, [r7, #24]
 801130e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011312:	0a1b      	lsrs	r3, r3, #8
 8011314:	b29b      	uxth	r3, r3
 8011316:	b2da      	uxtb	r2, r3
 8011318:	69bb      	ldr	r3, [r7, #24]
 801131a:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 801131c:	69bb      	ldr	r3, [r7, #24]
 801131e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011322:	b2da      	uxtb	r2, r3
 8011324:	69bb      	ldr	r3, [r7, #24]
 8011326:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	330a      	adds	r3, #10
 801132c:	781b      	ldrb	r3, [r3, #0]
 801132e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	330b      	adds	r3, #11
 8011334:	781b      	ldrb	r3, [r3, #0]
 8011336:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8011338:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	330c      	adds	r3, #12
 801133e:	781b      	ldrb	r3, [r3, #0]
 8011340:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8011342:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8011344:	687a      	ldr	r2, [r7, #4]
 8011346:	320d      	adds	r2, #13
 8011348:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 801134a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 801134c:	69bb      	ldr	r3, [r7, #24]
 801134e:	60da      	str	r2, [r3, #12]

  return 0;
 8011350:	2300      	movs	r3, #0
}
 8011352:	4618      	mov	r0, r3
 8011354:	3720      	adds	r7, #32
 8011356:	46bd      	mov	sp, r7
 8011358:	bd80      	pop	{r7, pc}

0801135a <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801135a:	b580      	push	{r7, lr}
 801135c:	b088      	sub	sp, #32
 801135e:	af00      	add	r7, sp, #0
 8011360:	60f8      	str	r0, [r7, #12]
 8011362:	460b      	mov	r3, r1
 8011364:	607a      	str	r2, [r7, #4]
 8011366:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801136e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8011370:	69bb      	ldr	r3, [r7, #24]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d102      	bne.n	801137c <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 8011376:	f04f 33ff 	mov.w	r3, #4294967295
 801137a:	e05c      	b.n	8011436 <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011382:	685b      	ldr	r3, [r3, #4]
 8011384:	f107 0214 	add.w	r2, r7, #20
 8011388:	f107 0110 	add.w	r1, r7, #16
 801138c:	7af8      	ldrb	r0, [r7, #11]
 801138e:	4798      	blx	r3
 8011390:	4603      	mov	r3, r0
 8011392:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8011394:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d104      	bne.n	80113a6 <SCSI_ReadFormatCapacity+0x4c>
 801139c:	69bb      	ldr	r3, [r7, #24]
 801139e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80113a2:	2b02      	cmp	r3, #2
 80113a4:	d108      	bne.n	80113b8 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80113a6:	7af9      	ldrb	r1, [r7, #11]
 80113a8:	233a      	movs	r3, #58	; 0x3a
 80113aa:	2202      	movs	r2, #2
 80113ac:	68f8      	ldr	r0, [r7, #12]
 80113ae:	f000 f91e 	bl	80115ee <SCSI_SenseCode>
    return -1;
 80113b2:	f04f 33ff 	mov.w	r3, #4294967295
 80113b6:	e03e      	b.n	8011436 <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 80113b8:	2300      	movs	r3, #0
 80113ba:	83fb      	strh	r3, [r7, #30]
 80113bc:	e007      	b.n	80113ce <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 80113be:	8bfb      	ldrh	r3, [r7, #30]
 80113c0:	69ba      	ldr	r2, [r7, #24]
 80113c2:	4413      	add	r3, r2
 80113c4:	2200      	movs	r2, #0
 80113c6:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80113c8:	8bfb      	ldrh	r3, [r7, #30]
 80113ca:	3301      	adds	r3, #1
 80113cc:	83fb      	strh	r3, [r7, #30]
 80113ce:	8bfb      	ldrh	r3, [r7, #30]
 80113d0:	2b0b      	cmp	r3, #11
 80113d2:	d9f4      	bls.n	80113be <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 80113d4:	69bb      	ldr	r3, [r7, #24]
 80113d6:	2208      	movs	r2, #8
 80113d8:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80113da:	693b      	ldr	r3, [r7, #16]
 80113dc:	3b01      	subs	r3, #1
 80113de:	0e1b      	lsrs	r3, r3, #24
 80113e0:	b2da      	uxtb	r2, r3
 80113e2:	69bb      	ldr	r3, [r7, #24]
 80113e4:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80113e6:	693b      	ldr	r3, [r7, #16]
 80113e8:	3b01      	subs	r3, #1
 80113ea:	0c1b      	lsrs	r3, r3, #16
 80113ec:	b2da      	uxtb	r2, r3
 80113ee:	69bb      	ldr	r3, [r7, #24]
 80113f0:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80113f2:	693b      	ldr	r3, [r7, #16]
 80113f4:	3b01      	subs	r3, #1
 80113f6:	0a1b      	lsrs	r3, r3, #8
 80113f8:	b2da      	uxtb	r2, r3
 80113fa:	69bb      	ldr	r3, [r7, #24]
 80113fc:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 80113fe:	693b      	ldr	r3, [r7, #16]
 8011400:	b2db      	uxtb	r3, r3
 8011402:	3b01      	subs	r3, #1
 8011404:	b2da      	uxtb	r2, r3
 8011406:	69bb      	ldr	r3, [r7, #24]
 8011408:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 801140a:	69bb      	ldr	r3, [r7, #24]
 801140c:	2202      	movs	r2, #2
 801140e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8011410:	8abb      	ldrh	r3, [r7, #20]
 8011412:	141b      	asrs	r3, r3, #16
 8011414:	b2da      	uxtb	r2, r3
 8011416:	69bb      	ldr	r3, [r7, #24]
 8011418:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 801141a:	8abb      	ldrh	r3, [r7, #20]
 801141c:	0a1b      	lsrs	r3, r3, #8
 801141e:	b29b      	uxth	r3, r3
 8011420:	b2da      	uxtb	r2, r3
 8011422:	69bb      	ldr	r3, [r7, #24]
 8011424:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8011426:	8abb      	ldrh	r3, [r7, #20]
 8011428:	b2da      	uxtb	r2, r3
 801142a:	69bb      	ldr	r3, [r7, #24]
 801142c:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 801142e:	69bb      	ldr	r3, [r7, #24]
 8011430:	220c      	movs	r2, #12
 8011432:	60da      	str	r2, [r3, #12]

  return 0;
 8011434:	2300      	movs	r3, #0
}
 8011436:	4618      	mov	r0, r3
 8011438:	3720      	adds	r7, #32
 801143a:	46bd      	mov	sp, r7
 801143c:	bd80      	pop	{r7, pc}
	...

08011440 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011440:	b580      	push	{r7, lr}
 8011442:	b086      	sub	sp, #24
 8011444:	af00      	add	r7, sp, #0
 8011446:	60f8      	str	r0, [r7, #12]
 8011448:	460b      	mov	r3, r1
 801144a:	607a      	str	r2, [r7, #4]
 801144c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011454:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8011456:	2317      	movs	r3, #23
 8011458:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 801145a:	693b      	ldr	r3, [r7, #16]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d102      	bne.n	8011466 <SCSI_ModeSense6+0x26>
  {
    return -1;
 8011460:	f04f 33ff 	mov.w	r3, #4294967295
 8011464:	e011      	b.n	801148a <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	3304      	adds	r3, #4
 801146a:	781b      	ldrb	r3, [r3, #0]
 801146c:	b29b      	uxth	r3, r3
 801146e:	8afa      	ldrh	r2, [r7, #22]
 8011470:	429a      	cmp	r2, r3
 8011472:	d303      	bcc.n	801147c <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	3304      	adds	r3, #4
 8011478:	781b      	ldrb	r3, [r3, #0]
 801147a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 801147c:	8afb      	ldrh	r3, [r7, #22]
 801147e:	461a      	mov	r2, r3
 8011480:	4904      	ldr	r1, [pc, #16]	; (8011494 <SCSI_ModeSense6+0x54>)
 8011482:	6938      	ldr	r0, [r7, #16]
 8011484:	f000 fdbc 	bl	8012000 <SCSI_UpdateBotData>

  return 0;
 8011488:	2300      	movs	r3, #0
}
 801148a:	4618      	mov	r0, r3
 801148c:	3718      	adds	r7, #24
 801148e:	46bd      	mov	sp, r7
 8011490:	bd80      	pop	{r7, pc}
 8011492:	bf00      	nop
 8011494:	200000c0 	.word	0x200000c0

08011498 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b086      	sub	sp, #24
 801149c:	af00      	add	r7, sp, #0
 801149e:	60f8      	str	r0, [r7, #12]
 80114a0:	460b      	mov	r3, r1
 80114a2:	607a      	str	r2, [r7, #4]
 80114a4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80114ac:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 80114ae:	231b      	movs	r3, #27
 80114b0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80114b2:	693b      	ldr	r3, [r7, #16]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d102      	bne.n	80114be <SCSI_ModeSense10+0x26>
  {
    return -1;
 80114b8:	f04f 33ff 	mov.w	r3, #4294967295
 80114bc:	e011      	b.n	80114e2 <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	3308      	adds	r3, #8
 80114c2:	781b      	ldrb	r3, [r3, #0]
 80114c4:	b29b      	uxth	r3, r3
 80114c6:	8afa      	ldrh	r2, [r7, #22]
 80114c8:	429a      	cmp	r2, r3
 80114ca:	d303      	bcc.n	80114d4 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	3308      	adds	r3, #8
 80114d0:	781b      	ldrb	r3, [r3, #0]
 80114d2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80114d4:	8afb      	ldrh	r3, [r7, #22]
 80114d6:	461a      	mov	r2, r3
 80114d8:	4904      	ldr	r1, [pc, #16]	; (80114ec <SCSI_ModeSense10+0x54>)
 80114da:	6938      	ldr	r0, [r7, #16]
 80114dc:	f000 fd90 	bl	8012000 <SCSI_UpdateBotData>

  return 0;
 80114e0:	2300      	movs	r3, #0
}
 80114e2:	4618      	mov	r0, r3
 80114e4:	3718      	adds	r7, #24
 80114e6:	46bd      	mov	sp, r7
 80114e8:	bd80      	pop	{r7, pc}
 80114ea:	bf00      	nop
 80114ec:	200000d8 	.word	0x200000d8

080114f0 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	b086      	sub	sp, #24
 80114f4:	af00      	add	r7, sp, #0
 80114f6:	60f8      	str	r0, [r7, #12]
 80114f8:	460b      	mov	r3, r1
 80114fa:	607a      	str	r2, [r7, #4]
 80114fc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011504:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8011506:	693b      	ldr	r3, [r7, #16]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d102      	bne.n	8011512 <SCSI_RequestSense+0x22>
  {
    return -1;
 801150c:	f04f 33ff 	mov.w	r3, #4294967295
 8011510:	e069      	b.n	80115e6 <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8011512:	693b      	ldr	r3, [r7, #16]
 8011514:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011518:	2b00      	cmp	r3, #0
 801151a:	d10a      	bne.n	8011532 <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801151c:	693b      	ldr	r3, [r7, #16]
 801151e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011522:	2320      	movs	r3, #32
 8011524:	2205      	movs	r2, #5
 8011526:	68f8      	ldr	r0, [r7, #12]
 8011528:	f000 f861 	bl	80115ee <SCSI_SenseCode>
    return -1;
 801152c:	f04f 33ff 	mov.w	r3, #4294967295
 8011530:	e059      	b.n	80115e6 <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8011532:	2300      	movs	r3, #0
 8011534:	75fb      	strb	r3, [r7, #23]
 8011536:	e007      	b.n	8011548 <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 8011538:	7dfb      	ldrb	r3, [r7, #23]
 801153a:	693a      	ldr	r2, [r7, #16]
 801153c:	4413      	add	r3, r2
 801153e:	2200      	movs	r2, #0
 8011540:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8011542:	7dfb      	ldrb	r3, [r7, #23]
 8011544:	3301      	adds	r3, #1
 8011546:	75fb      	strb	r3, [r7, #23]
 8011548:	7dfb      	ldrb	r3, [r7, #23]
 801154a:	2b11      	cmp	r3, #17
 801154c:	d9f4      	bls.n	8011538 <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 801154e:	693b      	ldr	r3, [r7, #16]
 8011550:	2270      	movs	r2, #112	; 0x70
 8011552:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8011554:	693b      	ldr	r3, [r7, #16]
 8011556:	220c      	movs	r2, #12
 8011558:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 801155a:	693b      	ldr	r3, [r7, #16]
 801155c:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8011560:	693b      	ldr	r3, [r7, #16]
 8011562:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8011566:	429a      	cmp	r2, r3
 8011568:	d02e      	beq.n	80115c8 <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 801156a:	693b      	ldr	r3, [r7, #16]
 801156c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8011570:	461a      	mov	r2, r3
 8011572:	693b      	ldr	r3, [r7, #16]
 8011574:	3248      	adds	r2, #72	; 0x48
 8011576:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 801157a:	693b      	ldr	r3, [r7, #16]
 801157c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 801157e:	693b      	ldr	r3, [r7, #16]
 8011580:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8011584:	693a      	ldr	r2, [r7, #16]
 8011586:	3348      	adds	r3, #72	; 0x48
 8011588:	00db      	lsls	r3, r3, #3
 801158a:	4413      	add	r3, r2
 801158c:	791a      	ldrb	r2, [r3, #4]
 801158e:	693b      	ldr	r3, [r7, #16]
 8011590:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8011592:	693b      	ldr	r3, [r7, #16]
 8011594:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8011598:	693a      	ldr	r2, [r7, #16]
 801159a:	3348      	adds	r3, #72	; 0x48
 801159c:	00db      	lsls	r3, r3, #3
 801159e:	4413      	add	r3, r2
 80115a0:	795a      	ldrb	r2, [r3, #5]
 80115a2:	693b      	ldr	r3, [r7, #16]
 80115a4:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80115a6:	693b      	ldr	r3, [r7, #16]
 80115a8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80115ac:	3301      	adds	r3, #1
 80115ae:	b2da      	uxtb	r2, r3
 80115b0:	693b      	ldr	r3, [r7, #16]
 80115b2:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80115b6:	693b      	ldr	r3, [r7, #16]
 80115b8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80115bc:	2b04      	cmp	r3, #4
 80115be:	d103      	bne.n	80115c8 <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 80115c0:	693b      	ldr	r3, [r7, #16]
 80115c2:	2200      	movs	r2, #0
 80115c4:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80115c8:	693b      	ldr	r3, [r7, #16]
 80115ca:	2212      	movs	r2, #18
 80115cc:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	3304      	adds	r3, #4
 80115d2:	781b      	ldrb	r3, [r3, #0]
 80115d4:	2b12      	cmp	r3, #18
 80115d6:	d805      	bhi.n	80115e4 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	3304      	adds	r3, #4
 80115dc:	781b      	ldrb	r3, [r3, #0]
 80115de:	461a      	mov	r2, r3
 80115e0:	693b      	ldr	r3, [r7, #16]
 80115e2:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80115e4:	2300      	movs	r3, #0
}
 80115e6:	4618      	mov	r0, r3
 80115e8:	3718      	adds	r7, #24
 80115ea:	46bd      	mov	sp, r7
 80115ec:	bd80      	pop	{r7, pc}

080115ee <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80115ee:	b480      	push	{r7}
 80115f0:	b085      	sub	sp, #20
 80115f2:	af00      	add	r7, sp, #0
 80115f4:	6078      	str	r0, [r7, #4]
 80115f6:	4608      	mov	r0, r1
 80115f8:	4611      	mov	r1, r2
 80115fa:	461a      	mov	r2, r3
 80115fc:	4603      	mov	r3, r0
 80115fe:	70fb      	strb	r3, [r7, #3]
 8011600:	460b      	mov	r3, r1
 8011602:	70bb      	strb	r3, [r7, #2]
 8011604:	4613      	mov	r3, r2
 8011606:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801160e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d02c      	beq.n	8011670 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801161c:	461a      	mov	r2, r3
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	3248      	adds	r2, #72	; 0x48
 8011622:	78b9      	ldrb	r1, [r7, #2]
 8011624:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801162e:	68fa      	ldr	r2, [r7, #12]
 8011630:	3348      	adds	r3, #72	; 0x48
 8011632:	00db      	lsls	r3, r3, #3
 8011634:	4413      	add	r3, r2
 8011636:	787a      	ldrb	r2, [r7, #1]
 8011638:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8011640:	68fa      	ldr	r2, [r7, #12]
 8011642:	3348      	adds	r3, #72	; 0x48
 8011644:	00db      	lsls	r3, r3, #3
 8011646:	4413      	add	r3, r2
 8011648:	2200      	movs	r2, #0
 801164a:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8011652:	3301      	adds	r3, #1
 8011654:	b2da      	uxtb	r2, r3
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8011662:	2b04      	cmp	r3, #4
 8011664:	d105      	bne.n	8011672 <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	2200      	movs	r2, #0
 801166a:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 801166e:	e000      	b.n	8011672 <SCSI_SenseCode+0x84>
    return;
 8011670:	bf00      	nop
  }
}
 8011672:	3714      	adds	r7, #20
 8011674:	46bd      	mov	sp, r7
 8011676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167a:	4770      	bx	lr

0801167c <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b086      	sub	sp, #24
 8011680:	af00      	add	r7, sp, #0
 8011682:	60f8      	str	r0, [r7, #12]
 8011684:	460b      	mov	r3, r1
 8011686:	607a      	str	r2, [r7, #4]
 8011688:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011690:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011692:	697b      	ldr	r3, [r7, #20]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d102      	bne.n	801169e <SCSI_StartStopUnit+0x22>
  {
    return -1;
 8011698:	f04f 33ff 	mov.w	r3, #4294967295
 801169c:	e03b      	b.n	8011716 <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 801169e:	697b      	ldr	r3, [r7, #20]
 80116a0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80116a4:	2b01      	cmp	r3, #1
 80116a6:	d10f      	bne.n	80116c8 <SCSI_StartStopUnit+0x4c>
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	3304      	adds	r3, #4
 80116ac:	781b      	ldrb	r3, [r3, #0]
 80116ae:	f003 0303 	and.w	r3, r3, #3
 80116b2:	2b02      	cmp	r3, #2
 80116b4:	d108      	bne.n	80116c8 <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80116b6:	7af9      	ldrb	r1, [r7, #11]
 80116b8:	2324      	movs	r3, #36	; 0x24
 80116ba:	2205      	movs	r2, #5
 80116bc:	68f8      	ldr	r0, [r7, #12]
 80116be:	f7ff ff96 	bl	80115ee <SCSI_SenseCode>

    return -1;
 80116c2:	f04f 33ff 	mov.w	r3, #4294967295
 80116c6:	e026      	b.n	8011716 <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	3304      	adds	r3, #4
 80116cc:	781b      	ldrb	r3, [r3, #0]
 80116ce:	f003 0303 	and.w	r3, r3, #3
 80116d2:	2b01      	cmp	r3, #1
 80116d4:	d104      	bne.n	80116e0 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80116d6:	697b      	ldr	r3, [r7, #20]
 80116d8:	2200      	movs	r2, #0
 80116da:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80116de:	e016      	b.n	801170e <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	3304      	adds	r3, #4
 80116e4:	781b      	ldrb	r3, [r3, #0]
 80116e6:	f003 0303 	and.w	r3, r3, #3
 80116ea:	2b02      	cmp	r3, #2
 80116ec:	d104      	bne.n	80116f8 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80116ee:	697b      	ldr	r3, [r7, #20]
 80116f0:	2202      	movs	r2, #2
 80116f2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80116f6:	e00a      	b.n	801170e <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	3304      	adds	r3, #4
 80116fc:	781b      	ldrb	r3, [r3, #0]
 80116fe:	f003 0303 	and.w	r3, r3, #3
 8011702:	2b03      	cmp	r3, #3
 8011704:	d103      	bne.n	801170e <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8011706:	697b      	ldr	r3, [r7, #20]
 8011708:	2200      	movs	r2, #0
 801170a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 801170e:	697b      	ldr	r3, [r7, #20]
 8011710:	2200      	movs	r2, #0
 8011712:	60da      	str	r2, [r3, #12]

  return 0;
 8011714:	2300      	movs	r3, #0
}
 8011716:	4618      	mov	r0, r3
 8011718:	3718      	adds	r7, #24
 801171a:	46bd      	mov	sp, r7
 801171c:	bd80      	pop	{r7, pc}

0801171e <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801171e:	b480      	push	{r7}
 8011720:	b087      	sub	sp, #28
 8011722:	af00      	add	r7, sp, #0
 8011724:	60f8      	str	r0, [r7, #12]
 8011726:	460b      	mov	r3, r1
 8011728:	607a      	str	r2, [r7, #4]
 801172a:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011732:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011734:	697b      	ldr	r3, [r7, #20]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d102      	bne.n	8011740 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 801173a:	f04f 33ff 	mov.w	r3, #4294967295
 801173e:	e011      	b.n	8011764 <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	3304      	adds	r3, #4
 8011744:	781b      	ldrb	r3, [r3, #0]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d104      	bne.n	8011754 <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801174a:	697b      	ldr	r3, [r7, #20]
 801174c:	2200      	movs	r2, #0
 801174e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8011752:	e003      	b.n	801175c <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8011754:	697b      	ldr	r3, [r7, #20]
 8011756:	2201      	movs	r2, #1
 8011758:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 801175c:	697b      	ldr	r3, [r7, #20]
 801175e:	2200      	movs	r2, #0
 8011760:	60da      	str	r2, [r3, #12]

  return 0;
 8011762:	2300      	movs	r3, #0
}
 8011764:	4618      	mov	r0, r3
 8011766:	371c      	adds	r7, #28
 8011768:	46bd      	mov	sp, r7
 801176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176e:	4770      	bx	lr

08011770 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011770:	b580      	push	{r7, lr}
 8011772:	b086      	sub	sp, #24
 8011774:	af00      	add	r7, sp, #0
 8011776:	60f8      	str	r0, [r7, #12]
 8011778:	460b      	mov	r3, r1
 801177a:	607a      	str	r2, [r7, #4]
 801177c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011784:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011786:	697b      	ldr	r3, [r7, #20]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d102      	bne.n	8011792 <SCSI_Read10+0x22>
  {
    return -1;
 801178c:	f04f 33ff 	mov.w	r3, #4294967295
 8011790:	e08a      	b.n	80118a8 <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8011792:	697b      	ldr	r3, [r7, #20]
 8011794:	7a1b      	ldrb	r3, [r3, #8]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d17c      	bne.n	8011894 <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 801179a:	697b      	ldr	r3, [r7, #20]
 801179c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80117a0:	b25b      	sxtb	r3, r3
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	db0a      	blt.n	80117bc <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80117a6:	697b      	ldr	r3, [r7, #20]
 80117a8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80117ac:	2320      	movs	r3, #32
 80117ae:	2205      	movs	r2, #5
 80117b0:	68f8      	ldr	r0, [r7, #12]
 80117b2:	f7ff ff1c 	bl	80115ee <SCSI_SenseCode>
      return -1;
 80117b6:	f04f 33ff 	mov.w	r3, #4294967295
 80117ba:	e075      	b.n	80118a8 <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80117bc:	697b      	ldr	r3, [r7, #20]
 80117be:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80117c2:	2b02      	cmp	r3, #2
 80117c4:	d108      	bne.n	80117d8 <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80117c6:	7af9      	ldrb	r1, [r7, #11]
 80117c8:	233a      	movs	r3, #58	; 0x3a
 80117ca:	2202      	movs	r2, #2
 80117cc:	68f8      	ldr	r0, [r7, #12]
 80117ce:	f7ff ff0e 	bl	80115ee <SCSI_SenseCode>

      return -1;
 80117d2:	f04f 33ff 	mov.w	r3, #4294967295
 80117d6:	e067      	b.n	80118a8 <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80117de:	689b      	ldr	r3, [r3, #8]
 80117e0:	7afa      	ldrb	r2, [r7, #11]
 80117e2:	4610      	mov	r0, r2
 80117e4:	4798      	blx	r3
 80117e6:	4603      	mov	r3, r0
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d008      	beq.n	80117fe <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80117ec:	7af9      	ldrb	r1, [r7, #11]
 80117ee:	233a      	movs	r3, #58	; 0x3a
 80117f0:	2202      	movs	r2, #2
 80117f2:	68f8      	ldr	r0, [r7, #12]
 80117f4:	f7ff fefb 	bl	80115ee <SCSI_SenseCode>
      return -1;
 80117f8:	f04f 33ff 	mov.w	r3, #4294967295
 80117fc:	e054      	b.n	80118a8 <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	3302      	adds	r3, #2
 8011802:	781b      	ldrb	r3, [r3, #0]
 8011804:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	3303      	adds	r3, #3
 801180a:	781b      	ldrb	r3, [r3, #0]
 801180c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801180e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	3304      	adds	r3, #4
 8011814:	781b      	ldrb	r3, [r3, #0]
 8011816:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8011818:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801181a:	687a      	ldr	r2, [r7, #4]
 801181c:	3205      	adds	r2, #5
 801181e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8011820:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011822:	697b      	ldr	r3, [r7, #20]
 8011824:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	3307      	adds	r3, #7
 801182c:	781b      	ldrb	r3, [r3, #0]
 801182e:	021b      	lsls	r3, r3, #8
 8011830:	687a      	ldr	r2, [r7, #4]
 8011832:	3208      	adds	r2, #8
 8011834:	7812      	ldrb	r2, [r2, #0]
 8011836:	431a      	orrs	r2, r3
 8011838:	697b      	ldr	r3, [r7, #20]
 801183a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801183e:	697b      	ldr	r3, [r7, #20]
 8011840:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8011844:	697b      	ldr	r3, [r7, #20]
 8011846:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801184a:	7af9      	ldrb	r1, [r7, #11]
 801184c:	68f8      	ldr	r0, [r7, #12]
 801184e:	f000 faad 	bl	8011dac <SCSI_CheckAddressRange>
 8011852:	4603      	mov	r3, r0
 8011854:	2b00      	cmp	r3, #0
 8011856:	da02      	bge.n	801185e <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8011858:	f04f 33ff 	mov.w	r3, #4294967295
 801185c:	e024      	b.n	80118a8 <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 801185e:	697b      	ldr	r3, [r7, #20]
 8011860:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8011864:	697b      	ldr	r3, [r7, #20]
 8011866:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801186a:	6979      	ldr	r1, [r7, #20]
 801186c:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8011870:	fb01 f303 	mul.w	r3, r1, r3
 8011874:	429a      	cmp	r2, r3
 8011876:	d00a      	beq.n	801188e <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011878:	697b      	ldr	r3, [r7, #20]
 801187a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801187e:	2320      	movs	r3, #32
 8011880:	2205      	movs	r2, #5
 8011882:	68f8      	ldr	r0, [r7, #12]
 8011884:	f7ff feb3 	bl	80115ee <SCSI_SenseCode>
      return -1;
 8011888:	f04f 33ff 	mov.w	r3, #4294967295
 801188c:	e00c      	b.n	80118a8 <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801188e:	697b      	ldr	r3, [r7, #20]
 8011890:	2202      	movs	r2, #2
 8011892:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8011894:	697b      	ldr	r3, [r7, #20]
 8011896:	f44f 7200 	mov.w	r2, #512	; 0x200
 801189a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 801189c:	7afb      	ldrb	r3, [r7, #11]
 801189e:	4619      	mov	r1, r3
 80118a0:	68f8      	ldr	r0, [r7, #12]
 80118a2:	f000 faab 	bl	8011dfc <SCSI_ProcessRead>
 80118a6:	4603      	mov	r3, r0
}
 80118a8:	4618      	mov	r0, r3
 80118aa:	3718      	adds	r7, #24
 80118ac:	46bd      	mov	sp, r7
 80118ae:	bd80      	pop	{r7, pc}

080118b0 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80118b0:	b580      	push	{r7, lr}
 80118b2:	b086      	sub	sp, #24
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	60f8      	str	r0, [r7, #12]
 80118b8:	460b      	mov	r3, r1
 80118ba:	607a      	str	r2, [r7, #4]
 80118bc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80118c4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80118c6:	697b      	ldr	r3, [r7, #20]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d102      	bne.n	80118d2 <SCSI_Read12+0x22>
  {
    return -1;
 80118cc:	f04f 33ff 	mov.w	r3, #4294967295
 80118d0:	e095      	b.n	80119fe <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80118d2:	697b      	ldr	r3, [r7, #20]
 80118d4:	7a1b      	ldrb	r3, [r3, #8]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	f040 8087 	bne.w	80119ea <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80118dc:	697b      	ldr	r3, [r7, #20]
 80118de:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80118e2:	b25b      	sxtb	r3, r3
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	db0a      	blt.n	80118fe <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80118e8:	697b      	ldr	r3, [r7, #20]
 80118ea:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80118ee:	2320      	movs	r3, #32
 80118f0:	2205      	movs	r2, #5
 80118f2:	68f8      	ldr	r0, [r7, #12]
 80118f4:	f7ff fe7b 	bl	80115ee <SCSI_SenseCode>
      return -1;
 80118f8:	f04f 33ff 	mov.w	r3, #4294967295
 80118fc:	e07f      	b.n	80119fe <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80118fe:	697b      	ldr	r3, [r7, #20]
 8011900:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8011904:	2b02      	cmp	r3, #2
 8011906:	d108      	bne.n	801191a <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011908:	7af9      	ldrb	r1, [r7, #11]
 801190a:	233a      	movs	r3, #58	; 0x3a
 801190c:	2202      	movs	r2, #2
 801190e:	68f8      	ldr	r0, [r7, #12]
 8011910:	f7ff fe6d 	bl	80115ee <SCSI_SenseCode>
      return -1;
 8011914:	f04f 33ff 	mov.w	r3, #4294967295
 8011918:	e071      	b.n	80119fe <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011920:	689b      	ldr	r3, [r3, #8]
 8011922:	7afa      	ldrb	r2, [r7, #11]
 8011924:	4610      	mov	r0, r2
 8011926:	4798      	blx	r3
 8011928:	4603      	mov	r3, r0
 801192a:	2b00      	cmp	r3, #0
 801192c:	d008      	beq.n	8011940 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801192e:	7af9      	ldrb	r1, [r7, #11]
 8011930:	233a      	movs	r3, #58	; 0x3a
 8011932:	2202      	movs	r2, #2
 8011934:	68f8      	ldr	r0, [r7, #12]
 8011936:	f7ff fe5a 	bl	80115ee <SCSI_SenseCode>
      return -1;
 801193a:	f04f 33ff 	mov.w	r3, #4294967295
 801193e:	e05e      	b.n	80119fe <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	3302      	adds	r3, #2
 8011944:	781b      	ldrb	r3, [r3, #0]
 8011946:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	3303      	adds	r3, #3
 801194c:	781b      	ldrb	r3, [r3, #0]
 801194e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011950:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	3304      	adds	r3, #4
 8011956:	781b      	ldrb	r3, [r3, #0]
 8011958:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801195a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801195c:	687a      	ldr	r2, [r7, #4]
 801195e:	3205      	adds	r2, #5
 8011960:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8011962:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011964:	697b      	ldr	r3, [r7, #20]
 8011966:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	3306      	adds	r3, #6
 801196e:	781b      	ldrb	r3, [r3, #0]
 8011970:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	3307      	adds	r3, #7
 8011976:	781b      	ldrb	r3, [r3, #0]
 8011978:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801197a:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	3308      	adds	r3, #8
 8011980:	781b      	ldrb	r3, [r3, #0]
 8011982:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8011984:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8011986:	687a      	ldr	r2, [r7, #4]
 8011988:	3209      	adds	r2, #9
 801198a:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 801198c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801198e:	697b      	ldr	r3, [r7, #20]
 8011990:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8011994:	697b      	ldr	r3, [r7, #20]
 8011996:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801199a:	697b      	ldr	r3, [r7, #20]
 801199c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80119a0:	7af9      	ldrb	r1, [r7, #11]
 80119a2:	68f8      	ldr	r0, [r7, #12]
 80119a4:	f000 fa02 	bl	8011dac <SCSI_CheckAddressRange>
 80119a8:	4603      	mov	r3, r0
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	da02      	bge.n	80119b4 <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80119ae:	f04f 33ff 	mov.w	r3, #4294967295
 80119b2:	e024      	b.n	80119fe <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80119b4:	697b      	ldr	r3, [r7, #20]
 80119b6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80119ba:	697b      	ldr	r3, [r7, #20]
 80119bc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80119c0:	6979      	ldr	r1, [r7, #20]
 80119c2:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 80119c6:	fb01 f303 	mul.w	r3, r1, r3
 80119ca:	429a      	cmp	r2, r3
 80119cc:	d00a      	beq.n	80119e4 <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80119ce:	697b      	ldr	r3, [r7, #20]
 80119d0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80119d4:	2320      	movs	r3, #32
 80119d6:	2205      	movs	r2, #5
 80119d8:	68f8      	ldr	r0, [r7, #12]
 80119da:	f7ff fe08 	bl	80115ee <SCSI_SenseCode>
      return -1;
 80119de:	f04f 33ff 	mov.w	r3, #4294967295
 80119e2:	e00c      	b.n	80119fe <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80119e4:	697b      	ldr	r3, [r7, #20]
 80119e6:	2202      	movs	r2, #2
 80119e8:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80119ea:	697b      	ldr	r3, [r7, #20]
 80119ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80119f0:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80119f2:	7afb      	ldrb	r3, [r7, #11]
 80119f4:	4619      	mov	r1, r3
 80119f6:	68f8      	ldr	r0, [r7, #12]
 80119f8:	f000 fa00 	bl	8011dfc <SCSI_ProcessRead>
 80119fc:	4603      	mov	r3, r0
}
 80119fe:	4618      	mov	r0, r3
 8011a00:	3718      	adds	r7, #24
 8011a02:	46bd      	mov	sp, r7
 8011a04:	bd80      	pop	{r7, pc}

08011a06 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011a06:	b580      	push	{r7, lr}
 8011a08:	b086      	sub	sp, #24
 8011a0a:	af00      	add	r7, sp, #0
 8011a0c:	60f8      	str	r0, [r7, #12]
 8011a0e:	460b      	mov	r3, r1
 8011a10:	607a      	str	r2, [r7, #4]
 8011a12:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011a1a:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8011a1c:	697b      	ldr	r3, [r7, #20]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d102      	bne.n	8011a28 <SCSI_Write10+0x22>
  {
    return -1;
 8011a22:	f04f 33ff 	mov.w	r3, #4294967295
 8011a26:	e0af      	b.n	8011b88 <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8011a28:	697b      	ldr	r3, [r7, #20]
 8011a2a:	7a1b      	ldrb	r3, [r3, #8]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	f040 80a5 	bne.w	8011b7c <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8011a32:	697b      	ldr	r3, [r7, #20]
 8011a34:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d10a      	bne.n	8011a52 <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011a3c:	697b      	ldr	r3, [r7, #20]
 8011a3e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011a42:	2320      	movs	r3, #32
 8011a44:	2205      	movs	r2, #5
 8011a46:	68f8      	ldr	r0, [r7, #12]
 8011a48:	f7ff fdd1 	bl	80115ee <SCSI_SenseCode>
      return -1;
 8011a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8011a50:	e09a      	b.n	8011b88 <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8011a52:	697b      	ldr	r3, [r7, #20]
 8011a54:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8011a58:	b25b      	sxtb	r3, r3
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	da0a      	bge.n	8011a74 <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011a5e:	697b      	ldr	r3, [r7, #20]
 8011a60:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011a64:	2320      	movs	r3, #32
 8011a66:	2205      	movs	r2, #5
 8011a68:	68f8      	ldr	r0, [r7, #12]
 8011a6a:	f7ff fdc0 	bl	80115ee <SCSI_SenseCode>
      return -1;
 8011a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8011a72:	e089      	b.n	8011b88 <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011a7a:	689b      	ldr	r3, [r3, #8]
 8011a7c:	7afa      	ldrb	r2, [r7, #11]
 8011a7e:	4610      	mov	r0, r2
 8011a80:	4798      	blx	r3
 8011a82:	4603      	mov	r3, r0
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d008      	beq.n	8011a9a <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011a88:	7af9      	ldrb	r1, [r7, #11]
 8011a8a:	233a      	movs	r3, #58	; 0x3a
 8011a8c:	2202      	movs	r2, #2
 8011a8e:	68f8      	ldr	r0, [r7, #12]
 8011a90:	f7ff fdad 	bl	80115ee <SCSI_SenseCode>
      return -1;
 8011a94:	f04f 33ff 	mov.w	r3, #4294967295
 8011a98:	e076      	b.n	8011b88 <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011aa0:	68db      	ldr	r3, [r3, #12]
 8011aa2:	7afa      	ldrb	r2, [r7, #11]
 8011aa4:	4610      	mov	r0, r2
 8011aa6:	4798      	blx	r3
 8011aa8:	4603      	mov	r3, r0
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d008      	beq.n	8011ac0 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8011aae:	7af9      	ldrb	r1, [r7, #11]
 8011ab0:	2327      	movs	r3, #39	; 0x27
 8011ab2:	2202      	movs	r2, #2
 8011ab4:	68f8      	ldr	r0, [r7, #12]
 8011ab6:	f7ff fd9a 	bl	80115ee <SCSI_SenseCode>
      return -1;
 8011aba:	f04f 33ff 	mov.w	r3, #4294967295
 8011abe:	e063      	b.n	8011b88 <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	3302      	adds	r3, #2
 8011ac4:	781b      	ldrb	r3, [r3, #0]
 8011ac6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	3303      	adds	r3, #3
 8011acc:	781b      	ldrb	r3, [r3, #0]
 8011ace:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011ad0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	3304      	adds	r3, #4
 8011ad6:	781b      	ldrb	r3, [r3, #0]
 8011ad8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8011ada:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8011adc:	687a      	ldr	r2, [r7, #4]
 8011ade:	3205      	adds	r2, #5
 8011ae0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8011ae2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011ae4:	697b      	ldr	r3, [r7, #20]
 8011ae6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	3307      	adds	r3, #7
 8011aee:	781b      	ldrb	r3, [r3, #0]
 8011af0:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8011af2:	687a      	ldr	r2, [r7, #4]
 8011af4:	3208      	adds	r2, #8
 8011af6:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8011af8:	431a      	orrs	r2, r3
 8011afa:	697b      	ldr	r3, [r7, #20]
 8011afc:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8011b00:	697b      	ldr	r3, [r7, #20]
 8011b02:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8011b06:	697b      	ldr	r3, [r7, #20]
 8011b08:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011b0c:	7af9      	ldrb	r1, [r7, #11]
 8011b0e:	68f8      	ldr	r0, [r7, #12]
 8011b10:	f000 f94c 	bl	8011dac <SCSI_CheckAddressRange>
 8011b14:	4603      	mov	r3, r0
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	da02      	bge.n	8011b20 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8011b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8011b1e:	e033      	b.n	8011b88 <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8011b20:	697b      	ldr	r3, [r7, #20]
 8011b22:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011b26:	697a      	ldr	r2, [r7, #20]
 8011b28:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8011b2c:	fb02 f303 	mul.w	r3, r2, r3
 8011b30:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8011b32:	697b      	ldr	r3, [r7, #20]
 8011b34:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011b38:	693a      	ldr	r2, [r7, #16]
 8011b3a:	429a      	cmp	r2, r3
 8011b3c:	d00a      	beq.n	8011b54 <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011b3e:	697b      	ldr	r3, [r7, #20]
 8011b40:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011b44:	2320      	movs	r3, #32
 8011b46:	2205      	movs	r2, #5
 8011b48:	68f8      	ldr	r0, [r7, #12]
 8011b4a:	f7ff fd50 	bl	80115ee <SCSI_SenseCode>
      return -1;
 8011b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8011b52:	e019      	b.n	8011b88 <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8011b54:	693b      	ldr	r3, [r7, #16]
 8011b56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b5a:	bf28      	it	cs
 8011b5c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8011b60:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8011b62:	697b      	ldr	r3, [r7, #20]
 8011b64:	2201      	movs	r2, #1
 8011b66:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8011b68:	697b      	ldr	r3, [r7, #20]
 8011b6a:	f103 0210 	add.w	r2, r3, #16
 8011b6e:	693b      	ldr	r3, [r7, #16]
 8011b70:	2101      	movs	r1, #1
 8011b72:	68f8      	ldr	r0, [r7, #12]
 8011b74:	f004 ff83 	bl	8016a7e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8011b78:	2300      	movs	r3, #0
 8011b7a:	e005      	b.n	8011b88 <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 8011b7c:	7afb      	ldrb	r3, [r7, #11]
 8011b7e:	4619      	mov	r1, r3
 8011b80:	68f8      	ldr	r0, [r7, #12]
 8011b82:	f000 f9b4 	bl	8011eee <SCSI_ProcessWrite>
 8011b86:	4603      	mov	r3, r0
}
 8011b88:	4618      	mov	r0, r3
 8011b8a:	3718      	adds	r7, #24
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	bd80      	pop	{r7, pc}

08011b90 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b086      	sub	sp, #24
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	60f8      	str	r0, [r7, #12]
 8011b98:	460b      	mov	r3, r1
 8011b9a:	607a      	str	r2, [r7, #4]
 8011b9c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011ba4:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8011ba6:	697b      	ldr	r3, [r7, #20]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d102      	bne.n	8011bb2 <SCSI_Write12+0x22>
  {
    return -1;
 8011bac:	f04f 33ff 	mov.w	r3, #4294967295
 8011bb0:	e0bf      	b.n	8011d32 <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8011bb2:	697b      	ldr	r3, [r7, #20]
 8011bb4:	7a1b      	ldrb	r3, [r3, #8]
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	f040 80b5 	bne.w	8011d26 <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8011bbc:	697b      	ldr	r3, [r7, #20]
 8011bbe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d10a      	bne.n	8011bdc <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011bc6:	697b      	ldr	r3, [r7, #20]
 8011bc8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011bcc:	2320      	movs	r3, #32
 8011bce:	2205      	movs	r2, #5
 8011bd0:	68f8      	ldr	r0, [r7, #12]
 8011bd2:	f7ff fd0c 	bl	80115ee <SCSI_SenseCode>
      return -1;
 8011bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8011bda:	e0aa      	b.n	8011d32 <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8011bdc:	697b      	ldr	r3, [r7, #20]
 8011bde:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8011be2:	b25b      	sxtb	r3, r3
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	da0a      	bge.n	8011bfe <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011be8:	697b      	ldr	r3, [r7, #20]
 8011bea:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011bee:	2320      	movs	r3, #32
 8011bf0:	2205      	movs	r2, #5
 8011bf2:	68f8      	ldr	r0, [r7, #12]
 8011bf4:	f7ff fcfb 	bl	80115ee <SCSI_SenseCode>
      return -1;
 8011bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8011bfc:	e099      	b.n	8011d32 <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011c04:	689b      	ldr	r3, [r3, #8]
 8011c06:	7afa      	ldrb	r2, [r7, #11]
 8011c08:	4610      	mov	r0, r2
 8011c0a:	4798      	blx	r3
 8011c0c:	4603      	mov	r3, r0
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d00b      	beq.n	8011c2a <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011c12:	7af9      	ldrb	r1, [r7, #11]
 8011c14:	233a      	movs	r3, #58	; 0x3a
 8011c16:	2202      	movs	r2, #2
 8011c18:	68f8      	ldr	r0, [r7, #12]
 8011c1a:	f7ff fce8 	bl	80115ee <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8011c1e:	697b      	ldr	r3, [r7, #20]
 8011c20:	2205      	movs	r2, #5
 8011c22:	721a      	strb	r2, [r3, #8]
      return -1;
 8011c24:	f04f 33ff 	mov.w	r3, #4294967295
 8011c28:	e083      	b.n	8011d32 <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011c30:	68db      	ldr	r3, [r3, #12]
 8011c32:	7afa      	ldrb	r2, [r7, #11]
 8011c34:	4610      	mov	r0, r2
 8011c36:	4798      	blx	r3
 8011c38:	4603      	mov	r3, r0
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d00b      	beq.n	8011c56 <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8011c3e:	7af9      	ldrb	r1, [r7, #11]
 8011c40:	2327      	movs	r3, #39	; 0x27
 8011c42:	2202      	movs	r2, #2
 8011c44:	68f8      	ldr	r0, [r7, #12]
 8011c46:	f7ff fcd2 	bl	80115ee <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8011c4a:	697b      	ldr	r3, [r7, #20]
 8011c4c:	2205      	movs	r2, #5
 8011c4e:	721a      	strb	r2, [r3, #8]
      return -1;
 8011c50:	f04f 33ff 	mov.w	r3, #4294967295
 8011c54:	e06d      	b.n	8011d32 <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	3302      	adds	r3, #2
 8011c5a:	781b      	ldrb	r3, [r3, #0]
 8011c5c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	3303      	adds	r3, #3
 8011c62:	781b      	ldrb	r3, [r3, #0]
 8011c64:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011c66:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	3304      	adds	r3, #4
 8011c6c:	781b      	ldrb	r3, [r3, #0]
 8011c6e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8011c70:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8011c72:	687a      	ldr	r2, [r7, #4]
 8011c74:	3205      	adds	r2, #5
 8011c76:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8011c78:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011c7a:	697b      	ldr	r3, [r7, #20]
 8011c7c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	3306      	adds	r3, #6
 8011c84:	781b      	ldrb	r3, [r3, #0]
 8011c86:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	3307      	adds	r3, #7
 8011c8c:	781b      	ldrb	r3, [r3, #0]
 8011c8e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011c90:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	3308      	adds	r3, #8
 8011c96:	781b      	ldrb	r3, [r3, #0]
 8011c98:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8011c9a:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8011c9c:	687a      	ldr	r2, [r7, #4]
 8011c9e:	3209      	adds	r2, #9
 8011ca0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8011ca2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011ca4:	697b      	ldr	r3, [r7, #20]
 8011ca6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8011caa:	697b      	ldr	r3, [r7, #20]
 8011cac:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8011cb0:	697b      	ldr	r3, [r7, #20]
 8011cb2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011cb6:	7af9      	ldrb	r1, [r7, #11]
 8011cb8:	68f8      	ldr	r0, [r7, #12]
 8011cba:	f000 f877 	bl	8011dac <SCSI_CheckAddressRange>
 8011cbe:	4603      	mov	r3, r0
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	da02      	bge.n	8011cca <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8011cc4:	f04f 33ff 	mov.w	r3, #4294967295
 8011cc8:	e033      	b.n	8011d32 <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8011cca:	697b      	ldr	r3, [r7, #20]
 8011ccc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011cd0:	697a      	ldr	r2, [r7, #20]
 8011cd2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8011cd6:	fb02 f303 	mul.w	r3, r2, r3
 8011cda:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8011cdc:	697b      	ldr	r3, [r7, #20]
 8011cde:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011ce2:	693a      	ldr	r2, [r7, #16]
 8011ce4:	429a      	cmp	r2, r3
 8011ce6:	d00a      	beq.n	8011cfe <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011ce8:	697b      	ldr	r3, [r7, #20]
 8011cea:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011cee:	2320      	movs	r3, #32
 8011cf0:	2205      	movs	r2, #5
 8011cf2:	68f8      	ldr	r0, [r7, #12]
 8011cf4:	f7ff fc7b 	bl	80115ee <SCSI_SenseCode>
      return -1;
 8011cf8:	f04f 33ff 	mov.w	r3, #4294967295
 8011cfc:	e019      	b.n	8011d32 <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8011cfe:	693b      	ldr	r3, [r7, #16]
 8011d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011d04:	bf28      	it	cs
 8011d06:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8011d0a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8011d0c:	697b      	ldr	r3, [r7, #20]
 8011d0e:	2201      	movs	r2, #1
 8011d10:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8011d12:	697b      	ldr	r3, [r7, #20]
 8011d14:	f103 0210 	add.w	r2, r3, #16
 8011d18:	693b      	ldr	r3, [r7, #16]
 8011d1a:	2101      	movs	r1, #1
 8011d1c:	68f8      	ldr	r0, [r7, #12]
 8011d1e:	f004 feae 	bl	8016a7e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8011d22:	2300      	movs	r3, #0
 8011d24:	e005      	b.n	8011d32 <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 8011d26:	7afb      	ldrb	r3, [r7, #11]
 8011d28:	4619      	mov	r1, r3
 8011d2a:	68f8      	ldr	r0, [r7, #12]
 8011d2c:	f000 f8df 	bl	8011eee <SCSI_ProcessWrite>
 8011d30:	4603      	mov	r3, r0
}
 8011d32:	4618      	mov	r0, r3
 8011d34:	3718      	adds	r7, #24
 8011d36:	46bd      	mov	sp, r7
 8011d38:	bd80      	pop	{r7, pc}

08011d3a <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011d3a:	b580      	push	{r7, lr}
 8011d3c:	b086      	sub	sp, #24
 8011d3e:	af00      	add	r7, sp, #0
 8011d40:	60f8      	str	r0, [r7, #12]
 8011d42:	460b      	mov	r3, r1
 8011d44:	607a      	str	r2, [r7, #4]
 8011d46:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011d4e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011d50:	697b      	ldr	r3, [r7, #20]
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d102      	bne.n	8011d5c <SCSI_Verify10+0x22>
  {
    return -1;
 8011d56:	f04f 33ff 	mov.w	r3, #4294967295
 8011d5a:	e023      	b.n	8011da4 <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	3301      	adds	r3, #1
 8011d60:	781b      	ldrb	r3, [r3, #0]
 8011d62:	f003 0302 	and.w	r3, r3, #2
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d008      	beq.n	8011d7c <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8011d6a:	7af9      	ldrb	r1, [r7, #11]
 8011d6c:	2324      	movs	r3, #36	; 0x24
 8011d6e:	2205      	movs	r2, #5
 8011d70:	68f8      	ldr	r0, [r7, #12]
 8011d72:	f7ff fc3c 	bl	80115ee <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8011d76:	f04f 33ff 	mov.w	r3, #4294967295
 8011d7a:	e013      	b.n	8011da4 <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8011d7c:	697b      	ldr	r3, [r7, #20]
 8011d7e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8011d82:	697b      	ldr	r3, [r7, #20]
 8011d84:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011d88:	7af9      	ldrb	r1, [r7, #11]
 8011d8a:	68f8      	ldr	r0, [r7, #12]
 8011d8c:	f000 f80e 	bl	8011dac <SCSI_CheckAddressRange>
 8011d90:	4603      	mov	r3, r0
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	da02      	bge.n	8011d9c <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 8011d96:	f04f 33ff 	mov.w	r3, #4294967295
 8011d9a:	e003      	b.n	8011da4 <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 8011d9c:	697b      	ldr	r3, [r7, #20]
 8011d9e:	2200      	movs	r2, #0
 8011da0:	60da      	str	r2, [r3, #12]

  return 0;
 8011da2:	2300      	movs	r3, #0
}
 8011da4:	4618      	mov	r0, r3
 8011da6:	3718      	adds	r7, #24
 8011da8:	46bd      	mov	sp, r7
 8011daa:	bd80      	pop	{r7, pc}

08011dac <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b086      	sub	sp, #24
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	60f8      	str	r0, [r7, #12]
 8011db4:	607a      	str	r2, [r7, #4]
 8011db6:	603b      	str	r3, [r7, #0]
 8011db8:	460b      	mov	r3, r1
 8011dba:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011dc2:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011dc4:	697b      	ldr	r3, [r7, #20]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d102      	bne.n	8011dd0 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 8011dca:	f04f 33ff 	mov.w	r3, #4294967295
 8011dce:	e011      	b.n	8011df4 <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8011dd0:	687a      	ldr	r2, [r7, #4]
 8011dd2:	683b      	ldr	r3, [r7, #0]
 8011dd4:	441a      	add	r2, r3
 8011dd6:	697b      	ldr	r3, [r7, #20]
 8011dd8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8011ddc:	429a      	cmp	r2, r3
 8011dde:	d908      	bls.n	8011df2 <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8011de0:	7af9      	ldrb	r1, [r7, #11]
 8011de2:	2321      	movs	r3, #33	; 0x21
 8011de4:	2205      	movs	r2, #5
 8011de6:	68f8      	ldr	r0, [r7, #12]
 8011de8:	f7ff fc01 	bl	80115ee <SCSI_SenseCode>
    return -1;
 8011dec:	f04f 33ff 	mov.w	r3, #4294967295
 8011df0:	e000      	b.n	8011df4 <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 8011df2:	2300      	movs	r3, #0
}
 8011df4:	4618      	mov	r0, r3
 8011df6:	3718      	adds	r7, #24
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	bd80      	pop	{r7, pc}

08011dfc <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8011dfc:	b590      	push	{r4, r7, lr}
 8011dfe:	b085      	sub	sp, #20
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	6078      	str	r0, [r7, #4]
 8011e04:	460b      	mov	r3, r1
 8011e06:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011e0e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011e16:	68fa      	ldr	r2, [r7, #12]
 8011e18:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8011e1c:	fb02 f303 	mul.w	r3, r2, r3
 8011e20:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d102      	bne.n	8011e2e <SCSI_ProcessRead+0x32>
  {
    return -1;
 8011e28:	f04f 33ff 	mov.w	r3, #4294967295
 8011e2c:	e05b      	b.n	8011ee6 <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8011e2e:	68bb      	ldr	r3, [r7, #8]
 8011e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011e34:	bf28      	it	cs
 8011e36:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8011e3a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011e42:	691c      	ldr	r4, [r3, #16]
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	f103 0110 	add.w	r1, r3, #16
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011e56:	4618      	mov	r0, r3
 8011e58:	68bb      	ldr	r3, [r7, #8]
 8011e5a:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8011e5e:	b29b      	uxth	r3, r3
 8011e60:	78f8      	ldrb	r0, [r7, #3]
 8011e62:	47a0      	blx	r4
 8011e64:	4603      	mov	r3, r0
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	da08      	bge.n	8011e7c <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8011e6a:	78f9      	ldrb	r1, [r7, #3]
 8011e6c:	2311      	movs	r3, #17
 8011e6e:	2204      	movs	r2, #4
 8011e70:	6878      	ldr	r0, [r7, #4]
 8011e72:	f7ff fbbc 	bl	80115ee <SCSI_SenseCode>
    return -1;
 8011e76:	f04f 33ff 	mov.w	r3, #4294967295
 8011e7a:	e034      	b.n	8011ee6 <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	f103 0210 	add.w	r2, r3, #16
 8011e82:	68bb      	ldr	r3, [r7, #8]
 8011e84:	2181      	movs	r1, #129	; 0x81
 8011e86:	6878      	ldr	r0, [r7, #4]
 8011e88:	f004 fdd8 	bl	8016a3c <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011e98:	4619      	mov	r1, r3
 8011e9a:	68bb      	ldr	r3, [r7, #8]
 8011e9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8011ea0:	441a      	add	r2, r3
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011eb4:	4619      	mov	r1, r3
 8011eb6:	68bb      	ldr	r3, [r7, #8]
 8011eb8:	fbb3 f3f1 	udiv	r3, r3, r1
 8011ebc:	1ad2      	subs	r2, r2, r3
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8011eca:	68bb      	ldr	r3, [r7, #8]
 8011ecc:	1ad2      	subs	r2, r2, r3
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d102      	bne.n	8011ee4 <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	2203      	movs	r2, #3
 8011ee2:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8011ee4:	2300      	movs	r3, #0
}
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	3714      	adds	r7, #20
 8011eea:	46bd      	mov	sp, r7
 8011eec:	bd90      	pop	{r4, r7, pc}

08011eee <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8011eee:	b590      	push	{r4, r7, lr}
 8011ef0:	b085      	sub	sp, #20
 8011ef2:	af00      	add	r7, sp, #0
 8011ef4:	6078      	str	r0, [r7, #4]
 8011ef6:	460b      	mov	r3, r1
 8011ef8:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011f00:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011f08:	68fa      	ldr	r2, [r7, #12]
 8011f0a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8011f0e:	fb02 f303 	mul.w	r3, r2, r3
 8011f12:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d102      	bne.n	8011f20 <SCSI_ProcessWrite+0x32>
  {
    return -1;
 8011f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8011f1e:	e06b      	b.n	8011ff8 <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8011f20:	68bb      	ldr	r3, [r7, #8]
 8011f22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011f26:	bf28      	it	cs
 8011f28:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8011f2c:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011f34:	695c      	ldr	r4, [r3, #20]
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	f103 0110 	add.w	r1, r3, #16
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011f48:	4618      	mov	r0, r3
 8011f4a:	68bb      	ldr	r3, [r7, #8]
 8011f4c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8011f50:	b29b      	uxth	r3, r3
 8011f52:	78f8      	ldrb	r0, [r7, #3]
 8011f54:	47a0      	blx	r4
 8011f56:	4603      	mov	r3, r0
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	da08      	bge.n	8011f6e <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8011f5c:	78f9      	ldrb	r1, [r7, #3]
 8011f5e:	2303      	movs	r3, #3
 8011f60:	2204      	movs	r2, #4
 8011f62:	6878      	ldr	r0, [r7, #4]
 8011f64:	f7ff fb43 	bl	80115ee <SCSI_SenseCode>
    return -1;
 8011f68:	f04f 33ff 	mov.w	r3, #4294967295
 8011f6c:	e044      	b.n	8011ff8 <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8011f74:	68fb      	ldr	r3, [r7, #12]
 8011f76:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011f7a:	4619      	mov	r1, r3
 8011f7c:	68bb      	ldr	r3, [r7, #8]
 8011f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f82:	441a      	add	r2, r3
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011f96:	4619      	mov	r1, r3
 8011f98:	68bb      	ldr	r3, [r7, #8]
 8011f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f9e:	1ad2      	subs	r2, r2, r3
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8011fac:	68bb      	ldr	r3, [r7, #8]
 8011fae:	1ad2      	subs	r2, r2, r3
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d104      	bne.n	8011fca <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8011fc0:	2100      	movs	r1, #0
 8011fc2:	6878      	ldr	r0, [r7, #4]
 8011fc4:	f7fe fdd8 	bl	8010b78 <MSC_BOT_SendCSW>
 8011fc8:	e015      	b.n	8011ff6 <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011fd0:	68fa      	ldr	r2, [r7, #12]
 8011fd2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8011fd6:	fb02 f303 	mul.w	r3, r2, r3
 8011fda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011fde:	bf28      	it	cs
 8011fe0:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8011fe4:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	f103 0210 	add.w	r2, r3, #16
 8011fec:	68bb      	ldr	r3, [r7, #8]
 8011fee:	2101      	movs	r1, #1
 8011ff0:	6878      	ldr	r0, [r7, #4]
 8011ff2:	f004 fd44 	bl	8016a7e <USBD_LL_PrepareReceive>
  }

  return 0;
 8011ff6:	2300      	movs	r3, #0
}
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	3714      	adds	r7, #20
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	bd90      	pop	{r4, r7, pc}

08012000 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8012000:	b480      	push	{r7}
 8012002:	b087      	sub	sp, #28
 8012004:	af00      	add	r7, sp, #0
 8012006:	60f8      	str	r0, [r7, #12]
 8012008:	60b9      	str	r1, [r7, #8]
 801200a:	4613      	mov	r3, r2
 801200c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 801200e:	88fb      	ldrh	r3, [r7, #6]
 8012010:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d102      	bne.n	801201e <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8012018:	f04f 33ff 	mov.w	r3, #4294967295
 801201c:	e013      	b.n	8012046 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 801201e:	8afa      	ldrh	r2, [r7, #22]
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8012024:	e00b      	b.n	801203e <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8012026:	8afb      	ldrh	r3, [r7, #22]
 8012028:	3b01      	subs	r3, #1
 801202a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 801202c:	8afb      	ldrh	r3, [r7, #22]
 801202e:	68ba      	ldr	r2, [r7, #8]
 8012030:	441a      	add	r2, r3
 8012032:	8afb      	ldrh	r3, [r7, #22]
 8012034:	7811      	ldrb	r1, [r2, #0]
 8012036:	68fa      	ldr	r2, [r7, #12]
 8012038:	4413      	add	r3, r2
 801203a:	460a      	mov	r2, r1
 801203c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 801203e:	8afb      	ldrh	r3, [r7, #22]
 8012040:	2b00      	cmp	r3, #0
 8012042:	d1f0      	bne.n	8012026 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8012044:	2300      	movs	r3, #0
}
 8012046:	4618      	mov	r0, r3
 8012048:	371c      	adds	r7, #28
 801204a:	46bd      	mov	sp, r7
 801204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012050:	4770      	bx	lr

08012052 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8012052:	b580      	push	{r7, lr}
 8012054:	b086      	sub	sp, #24
 8012056:	af00      	add	r7, sp, #0
 8012058:	60f8      	str	r0, [r7, #12]
 801205a:	60b9      	str	r1, [r7, #8]
 801205c:	4613      	mov	r3, r2
 801205e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d101      	bne.n	801206a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8012066:	2303      	movs	r3, #3
 8012068:	e01f      	b.n	80120aa <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	2200      	movs	r2, #0
 801206e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	2200      	movs	r2, #0
 8012076:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	2200      	movs	r2, #0
 801207e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8012082:	68bb      	ldr	r3, [r7, #8]
 8012084:	2b00      	cmp	r3, #0
 8012086:	d003      	beq.n	8012090 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	68ba      	ldr	r2, [r7, #8]
 801208c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	2201      	movs	r2, #1
 8012094:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	79fa      	ldrb	r2, [r7, #7]
 801209c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801209e:	68f8      	ldr	r0, [r7, #12]
 80120a0:	f004 fb78 	bl	8016794 <USBD_LL_Init>
 80120a4:	4603      	mov	r3, r0
 80120a6:	75fb      	strb	r3, [r7, #23]

  return ret;
 80120a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80120aa:	4618      	mov	r0, r3
 80120ac:	3718      	adds	r7, #24
 80120ae:	46bd      	mov	sp, r7
 80120b0:	bd80      	pop	{r7, pc}

080120b2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80120b2:	b580      	push	{r7, lr}
 80120b4:	b084      	sub	sp, #16
 80120b6:	af00      	add	r7, sp, #0
 80120b8:	6078      	str	r0, [r7, #4]
 80120ba:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80120bc:	2300      	movs	r3, #0
 80120be:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80120c0:	683b      	ldr	r3, [r7, #0]
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d101      	bne.n	80120ca <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80120c6:	2303      	movs	r3, #3
 80120c8:	e016      	b.n	80120f8 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	683a      	ldr	r2, [r7, #0]
 80120ce:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d00b      	beq.n	80120f6 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120e6:	f107 020e 	add.w	r2, r7, #14
 80120ea:	4610      	mov	r0, r2
 80120ec:	4798      	blx	r3
 80120ee:	4602      	mov	r2, r0
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80120f6:	2300      	movs	r3, #0
}
 80120f8:	4618      	mov	r0, r3
 80120fa:	3710      	adds	r7, #16
 80120fc:	46bd      	mov	sp, r7
 80120fe:	bd80      	pop	{r7, pc}

08012100 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8012100:	b580      	push	{r7, lr}
 8012102:	b082      	sub	sp, #8
 8012104:	af00      	add	r7, sp, #0
 8012106:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8012108:	6878      	ldr	r0, [r7, #4]
 801210a:	f004 fb8f 	bl	801682c <USBD_LL_Start>
 801210e:	4603      	mov	r3, r0
}
 8012110:	4618      	mov	r0, r3
 8012112:	3708      	adds	r7, #8
 8012114:	46bd      	mov	sp, r7
 8012116:	bd80      	pop	{r7, pc}

08012118 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8012118:	b480      	push	{r7}
 801211a:	b083      	sub	sp, #12
 801211c:	af00      	add	r7, sp, #0
 801211e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012120:	2300      	movs	r3, #0
}
 8012122:	4618      	mov	r0, r3
 8012124:	370c      	adds	r7, #12
 8012126:	46bd      	mov	sp, r7
 8012128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801212c:	4770      	bx	lr

0801212e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801212e:	b580      	push	{r7, lr}
 8012130:	b084      	sub	sp, #16
 8012132:	af00      	add	r7, sp, #0
 8012134:	6078      	str	r0, [r7, #4]
 8012136:	460b      	mov	r3, r1
 8012138:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801213a:	2303      	movs	r3, #3
 801213c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012144:	2b00      	cmp	r3, #0
 8012146:	d009      	beq.n	801215c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	78fa      	ldrb	r2, [r7, #3]
 8012152:	4611      	mov	r1, r2
 8012154:	6878      	ldr	r0, [r7, #4]
 8012156:	4798      	blx	r3
 8012158:	4603      	mov	r3, r0
 801215a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801215c:	7bfb      	ldrb	r3, [r7, #15]
}
 801215e:	4618      	mov	r0, r3
 8012160:	3710      	adds	r7, #16
 8012162:	46bd      	mov	sp, r7
 8012164:	bd80      	pop	{r7, pc}

08012166 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012166:	b580      	push	{r7, lr}
 8012168:	b082      	sub	sp, #8
 801216a:	af00      	add	r7, sp, #0
 801216c:	6078      	str	r0, [r7, #4]
 801216e:	460b      	mov	r3, r1
 8012170:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012178:	2b00      	cmp	r3, #0
 801217a:	d007      	beq.n	801218c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012182:	685b      	ldr	r3, [r3, #4]
 8012184:	78fa      	ldrb	r2, [r7, #3]
 8012186:	4611      	mov	r1, r2
 8012188:	6878      	ldr	r0, [r7, #4]
 801218a:	4798      	blx	r3
  }

  return USBD_OK;
 801218c:	2300      	movs	r3, #0
}
 801218e:	4618      	mov	r0, r3
 8012190:	3708      	adds	r7, #8
 8012192:	46bd      	mov	sp, r7
 8012194:	bd80      	pop	{r7, pc}

08012196 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8012196:	b580      	push	{r7, lr}
 8012198:	b084      	sub	sp, #16
 801219a:	af00      	add	r7, sp, #0
 801219c:	6078      	str	r0, [r7, #4]
 801219e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80121a6:	6839      	ldr	r1, [r7, #0]
 80121a8:	4618      	mov	r0, r3
 80121aa:	f000 ffb9 	bl	8013120 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	2201      	movs	r2, #1
 80121b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80121bc:	461a      	mov	r2, r3
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80121ca:	f003 031f 	and.w	r3, r3, #31
 80121ce:	2b02      	cmp	r3, #2
 80121d0:	d01a      	beq.n	8012208 <USBD_LL_SetupStage+0x72>
 80121d2:	2b02      	cmp	r3, #2
 80121d4:	d822      	bhi.n	801221c <USBD_LL_SetupStage+0x86>
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d002      	beq.n	80121e0 <USBD_LL_SetupStage+0x4a>
 80121da:	2b01      	cmp	r3, #1
 80121dc:	d00a      	beq.n	80121f4 <USBD_LL_SetupStage+0x5e>
 80121de:	e01d      	b.n	801221c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80121e6:	4619      	mov	r1, r3
 80121e8:	6878      	ldr	r0, [r7, #4]
 80121ea:	f000 fa61 	bl	80126b0 <USBD_StdDevReq>
 80121ee:	4603      	mov	r3, r0
 80121f0:	73fb      	strb	r3, [r7, #15]
      break;
 80121f2:	e020      	b.n	8012236 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80121fa:	4619      	mov	r1, r3
 80121fc:	6878      	ldr	r0, [r7, #4]
 80121fe:	f000 fac5 	bl	801278c <USBD_StdItfReq>
 8012202:	4603      	mov	r3, r0
 8012204:	73fb      	strb	r3, [r7, #15]
      break;
 8012206:	e016      	b.n	8012236 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801220e:	4619      	mov	r1, r3
 8012210:	6878      	ldr	r0, [r7, #4]
 8012212:	f000 fb04 	bl	801281e <USBD_StdEPReq>
 8012216:	4603      	mov	r3, r0
 8012218:	73fb      	strb	r3, [r7, #15]
      break;
 801221a:	e00c      	b.n	8012236 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8012222:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012226:	b2db      	uxtb	r3, r3
 8012228:	4619      	mov	r1, r3
 801222a:	6878      	ldr	r0, [r7, #4]
 801222c:	f004 fb7d 	bl	801692a <USBD_LL_StallEP>
 8012230:	4603      	mov	r3, r0
 8012232:	73fb      	strb	r3, [r7, #15]
      break;
 8012234:	bf00      	nop
  }

  return ret;
 8012236:	7bfb      	ldrb	r3, [r7, #15]
}
 8012238:	4618      	mov	r0, r3
 801223a:	3710      	adds	r7, #16
 801223c:	46bd      	mov	sp, r7
 801223e:	bd80      	pop	{r7, pc}

08012240 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b086      	sub	sp, #24
 8012244:	af00      	add	r7, sp, #0
 8012246:	60f8      	str	r0, [r7, #12]
 8012248:	460b      	mov	r3, r1
 801224a:	607a      	str	r2, [r7, #4]
 801224c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801224e:	7afb      	ldrb	r3, [r7, #11]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d138      	bne.n	80122c6 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801225a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012262:	2b03      	cmp	r3, #3
 8012264:	d14a      	bne.n	80122fc <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8012266:	693b      	ldr	r3, [r7, #16]
 8012268:	689a      	ldr	r2, [r3, #8]
 801226a:	693b      	ldr	r3, [r7, #16]
 801226c:	68db      	ldr	r3, [r3, #12]
 801226e:	429a      	cmp	r2, r3
 8012270:	d913      	bls.n	801229a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012272:	693b      	ldr	r3, [r7, #16]
 8012274:	689a      	ldr	r2, [r3, #8]
 8012276:	693b      	ldr	r3, [r7, #16]
 8012278:	68db      	ldr	r3, [r3, #12]
 801227a:	1ad2      	subs	r2, r2, r3
 801227c:	693b      	ldr	r3, [r7, #16]
 801227e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8012280:	693b      	ldr	r3, [r7, #16]
 8012282:	68da      	ldr	r2, [r3, #12]
 8012284:	693b      	ldr	r3, [r7, #16]
 8012286:	689b      	ldr	r3, [r3, #8]
 8012288:	4293      	cmp	r3, r2
 801228a:	bf28      	it	cs
 801228c:	4613      	movcs	r3, r2
 801228e:	461a      	mov	r2, r3
 8012290:	6879      	ldr	r1, [r7, #4]
 8012292:	68f8      	ldr	r0, [r7, #12]
 8012294:	f001 f81b 	bl	80132ce <USBD_CtlContinueRx>
 8012298:	e030      	b.n	80122fc <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80122a0:	b2db      	uxtb	r3, r3
 80122a2:	2b03      	cmp	r3, #3
 80122a4:	d10b      	bne.n	80122be <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122ac:	691b      	ldr	r3, [r3, #16]
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d005      	beq.n	80122be <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122b8:	691b      	ldr	r3, [r3, #16]
 80122ba:	68f8      	ldr	r0, [r7, #12]
 80122bc:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80122be:	68f8      	ldr	r0, [r7, #12]
 80122c0:	f001 f816 	bl	80132f0 <USBD_CtlSendStatus>
 80122c4:	e01a      	b.n	80122fc <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80122cc:	b2db      	uxtb	r3, r3
 80122ce:	2b03      	cmp	r3, #3
 80122d0:	d114      	bne.n	80122fc <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122d8:	699b      	ldr	r3, [r3, #24]
 80122da:	2b00      	cmp	r3, #0
 80122dc:	d00e      	beq.n	80122fc <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122e4:	699b      	ldr	r3, [r3, #24]
 80122e6:	7afa      	ldrb	r2, [r7, #11]
 80122e8:	4611      	mov	r1, r2
 80122ea:	68f8      	ldr	r0, [r7, #12]
 80122ec:	4798      	blx	r3
 80122ee:	4603      	mov	r3, r0
 80122f0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80122f2:	7dfb      	ldrb	r3, [r7, #23]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d001      	beq.n	80122fc <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80122f8:	7dfb      	ldrb	r3, [r7, #23]
 80122fa:	e000      	b.n	80122fe <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80122fc:	2300      	movs	r3, #0
}
 80122fe:	4618      	mov	r0, r3
 8012300:	3718      	adds	r7, #24
 8012302:	46bd      	mov	sp, r7
 8012304:	bd80      	pop	{r7, pc}

08012306 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8012306:	b580      	push	{r7, lr}
 8012308:	b086      	sub	sp, #24
 801230a:	af00      	add	r7, sp, #0
 801230c:	60f8      	str	r0, [r7, #12]
 801230e:	460b      	mov	r3, r1
 8012310:	607a      	str	r2, [r7, #4]
 8012312:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8012314:	7afb      	ldrb	r3, [r7, #11]
 8012316:	2b00      	cmp	r3, #0
 8012318:	d16b      	bne.n	80123f2 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	3314      	adds	r3, #20
 801231e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8012326:	2b02      	cmp	r3, #2
 8012328:	d156      	bne.n	80123d8 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 801232a:	693b      	ldr	r3, [r7, #16]
 801232c:	689a      	ldr	r2, [r3, #8]
 801232e:	693b      	ldr	r3, [r7, #16]
 8012330:	68db      	ldr	r3, [r3, #12]
 8012332:	429a      	cmp	r2, r3
 8012334:	d914      	bls.n	8012360 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012336:	693b      	ldr	r3, [r7, #16]
 8012338:	689a      	ldr	r2, [r3, #8]
 801233a:	693b      	ldr	r3, [r7, #16]
 801233c:	68db      	ldr	r3, [r3, #12]
 801233e:	1ad2      	subs	r2, r2, r3
 8012340:	693b      	ldr	r3, [r7, #16]
 8012342:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8012344:	693b      	ldr	r3, [r7, #16]
 8012346:	689b      	ldr	r3, [r3, #8]
 8012348:	461a      	mov	r2, r3
 801234a:	6879      	ldr	r1, [r7, #4]
 801234c:	68f8      	ldr	r0, [r7, #12]
 801234e:	f000 ffad 	bl	80132ac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012352:	2300      	movs	r3, #0
 8012354:	2200      	movs	r2, #0
 8012356:	2100      	movs	r1, #0
 8012358:	68f8      	ldr	r0, [r7, #12]
 801235a:	f004 fb90 	bl	8016a7e <USBD_LL_PrepareReceive>
 801235e:	e03b      	b.n	80123d8 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8012360:	693b      	ldr	r3, [r7, #16]
 8012362:	68da      	ldr	r2, [r3, #12]
 8012364:	693b      	ldr	r3, [r7, #16]
 8012366:	689b      	ldr	r3, [r3, #8]
 8012368:	429a      	cmp	r2, r3
 801236a:	d11c      	bne.n	80123a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 801236c:	693b      	ldr	r3, [r7, #16]
 801236e:	685a      	ldr	r2, [r3, #4]
 8012370:	693b      	ldr	r3, [r7, #16]
 8012372:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8012374:	429a      	cmp	r2, r3
 8012376:	d316      	bcc.n	80123a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8012378:	693b      	ldr	r3, [r7, #16]
 801237a:	685a      	ldr	r2, [r3, #4]
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8012382:	429a      	cmp	r2, r3
 8012384:	d20f      	bcs.n	80123a6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8012386:	2200      	movs	r2, #0
 8012388:	2100      	movs	r1, #0
 801238a:	68f8      	ldr	r0, [r7, #12]
 801238c:	f000 ff8e 	bl	80132ac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	2200      	movs	r2, #0
 8012394:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012398:	2300      	movs	r3, #0
 801239a:	2200      	movs	r2, #0
 801239c:	2100      	movs	r1, #0
 801239e:	68f8      	ldr	r0, [r7, #12]
 80123a0:	f004 fb6d 	bl	8016a7e <USBD_LL_PrepareReceive>
 80123a4:	e018      	b.n	80123d8 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80123ac:	b2db      	uxtb	r3, r3
 80123ae:	2b03      	cmp	r3, #3
 80123b0:	d10b      	bne.n	80123ca <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80123b8:	68db      	ldr	r3, [r3, #12]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d005      	beq.n	80123ca <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80123c4:	68db      	ldr	r3, [r3, #12]
 80123c6:	68f8      	ldr	r0, [r7, #12]
 80123c8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80123ca:	2180      	movs	r1, #128	; 0x80
 80123cc:	68f8      	ldr	r0, [r7, #12]
 80123ce:	f004 faac 	bl	801692a <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80123d2:	68f8      	ldr	r0, [r7, #12]
 80123d4:	f000 ff9f 	bl	8013316 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80123de:	2b01      	cmp	r3, #1
 80123e0:	d122      	bne.n	8012428 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80123e2:	68f8      	ldr	r0, [r7, #12]
 80123e4:	f7ff fe98 	bl	8012118 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	2200      	movs	r2, #0
 80123ec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80123f0:	e01a      	b.n	8012428 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80123f8:	b2db      	uxtb	r3, r3
 80123fa:	2b03      	cmp	r3, #3
 80123fc:	d114      	bne.n	8012428 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012404:	695b      	ldr	r3, [r3, #20]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d00e      	beq.n	8012428 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012410:	695b      	ldr	r3, [r3, #20]
 8012412:	7afa      	ldrb	r2, [r7, #11]
 8012414:	4611      	mov	r1, r2
 8012416:	68f8      	ldr	r0, [r7, #12]
 8012418:	4798      	blx	r3
 801241a:	4603      	mov	r3, r0
 801241c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 801241e:	7dfb      	ldrb	r3, [r7, #23]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d001      	beq.n	8012428 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8012424:	7dfb      	ldrb	r3, [r7, #23]
 8012426:	e000      	b.n	801242a <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8012428:	2300      	movs	r3, #0
}
 801242a:	4618      	mov	r0, r3
 801242c:	3718      	adds	r7, #24
 801242e:	46bd      	mov	sp, r7
 8012430:	bd80      	pop	{r7, pc}

08012432 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8012432:	b580      	push	{r7, lr}
 8012434:	b082      	sub	sp, #8
 8012436:	af00      	add	r7, sp, #0
 8012438:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	2201      	movs	r2, #1
 801243e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	2200      	movs	r2, #0
 8012446:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	2200      	movs	r2, #0
 801244e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	2200      	movs	r2, #0
 8012454:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801245e:	2b00      	cmp	r3, #0
 8012460:	d101      	bne.n	8012466 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8012462:	2303      	movs	r3, #3
 8012464:	e02f      	b.n	80124c6 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801246c:	2b00      	cmp	r3, #0
 801246e:	d00f      	beq.n	8012490 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012476:	685b      	ldr	r3, [r3, #4]
 8012478:	2b00      	cmp	r3, #0
 801247a:	d009      	beq.n	8012490 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012482:	685b      	ldr	r3, [r3, #4]
 8012484:	687a      	ldr	r2, [r7, #4]
 8012486:	6852      	ldr	r2, [r2, #4]
 8012488:	b2d2      	uxtb	r2, r2
 801248a:	4611      	mov	r1, r2
 801248c:	6878      	ldr	r0, [r7, #4]
 801248e:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012490:	2340      	movs	r3, #64	; 0x40
 8012492:	2200      	movs	r2, #0
 8012494:	2100      	movs	r1, #0
 8012496:	6878      	ldr	r0, [r7, #4]
 8012498:	f004 f9e3 	bl	8016862 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	2201      	movs	r2, #1
 80124a0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	2240      	movs	r2, #64	; 0x40
 80124a8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80124ac:	2340      	movs	r3, #64	; 0x40
 80124ae:	2200      	movs	r2, #0
 80124b0:	2180      	movs	r1, #128	; 0x80
 80124b2:	6878      	ldr	r0, [r7, #4]
 80124b4:	f004 f9d5 	bl	8016862 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	2201      	movs	r2, #1
 80124bc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	2240      	movs	r2, #64	; 0x40
 80124c2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80124c4:	2300      	movs	r3, #0
}
 80124c6:	4618      	mov	r0, r3
 80124c8:	3708      	adds	r7, #8
 80124ca:	46bd      	mov	sp, r7
 80124cc:	bd80      	pop	{r7, pc}

080124ce <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80124ce:	b480      	push	{r7}
 80124d0:	b083      	sub	sp, #12
 80124d2:	af00      	add	r7, sp, #0
 80124d4:	6078      	str	r0, [r7, #4]
 80124d6:	460b      	mov	r3, r1
 80124d8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	78fa      	ldrb	r2, [r7, #3]
 80124de:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80124e0:	2300      	movs	r3, #0
}
 80124e2:	4618      	mov	r0, r3
 80124e4:	370c      	adds	r7, #12
 80124e6:	46bd      	mov	sp, r7
 80124e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ec:	4770      	bx	lr

080124ee <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80124ee:	b480      	push	{r7}
 80124f0:	b083      	sub	sp, #12
 80124f2:	af00      	add	r7, sp, #0
 80124f4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80124fc:	b2da      	uxtb	r2, r3
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	2204      	movs	r2, #4
 8012508:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801250c:	2300      	movs	r3, #0
}
 801250e:	4618      	mov	r0, r3
 8012510:	370c      	adds	r7, #12
 8012512:	46bd      	mov	sp, r7
 8012514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012518:	4770      	bx	lr

0801251a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801251a:	b480      	push	{r7}
 801251c:	b083      	sub	sp, #12
 801251e:	af00      	add	r7, sp, #0
 8012520:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012528:	b2db      	uxtb	r3, r3
 801252a:	2b04      	cmp	r3, #4
 801252c:	d106      	bne.n	801253c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8012534:	b2da      	uxtb	r2, r3
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801253c:	2300      	movs	r3, #0
}
 801253e:	4618      	mov	r0, r3
 8012540:	370c      	adds	r7, #12
 8012542:	46bd      	mov	sp, r7
 8012544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012548:	4770      	bx	lr

0801254a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801254a:	b580      	push	{r7, lr}
 801254c:	b082      	sub	sp, #8
 801254e:	af00      	add	r7, sp, #0
 8012550:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012558:	2b00      	cmp	r3, #0
 801255a:	d101      	bne.n	8012560 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 801255c:	2303      	movs	r3, #3
 801255e:	e012      	b.n	8012586 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012566:	b2db      	uxtb	r3, r3
 8012568:	2b03      	cmp	r3, #3
 801256a:	d10b      	bne.n	8012584 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012572:	69db      	ldr	r3, [r3, #28]
 8012574:	2b00      	cmp	r3, #0
 8012576:	d005      	beq.n	8012584 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801257e:	69db      	ldr	r3, [r3, #28]
 8012580:	6878      	ldr	r0, [r7, #4]
 8012582:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012584:	2300      	movs	r3, #0
}
 8012586:	4618      	mov	r0, r3
 8012588:	3708      	adds	r7, #8
 801258a:	46bd      	mov	sp, r7
 801258c:	bd80      	pop	{r7, pc}

0801258e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801258e:	b580      	push	{r7, lr}
 8012590:	b082      	sub	sp, #8
 8012592:	af00      	add	r7, sp, #0
 8012594:	6078      	str	r0, [r7, #4]
 8012596:	460b      	mov	r3, r1
 8012598:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d101      	bne.n	80125a8 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80125a4:	2303      	movs	r3, #3
 80125a6:	e014      	b.n	80125d2 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80125ae:	b2db      	uxtb	r3, r3
 80125b0:	2b03      	cmp	r3, #3
 80125b2:	d10d      	bne.n	80125d0 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80125ba:	6a1b      	ldr	r3, [r3, #32]
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d007      	beq.n	80125d0 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80125c6:	6a1b      	ldr	r3, [r3, #32]
 80125c8:	78fa      	ldrb	r2, [r7, #3]
 80125ca:	4611      	mov	r1, r2
 80125cc:	6878      	ldr	r0, [r7, #4]
 80125ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80125d0:	2300      	movs	r3, #0
}
 80125d2:	4618      	mov	r0, r3
 80125d4:	3708      	adds	r7, #8
 80125d6:	46bd      	mov	sp, r7
 80125d8:	bd80      	pop	{r7, pc}

080125da <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80125da:	b580      	push	{r7, lr}
 80125dc:	b082      	sub	sp, #8
 80125de:	af00      	add	r7, sp, #0
 80125e0:	6078      	str	r0, [r7, #4]
 80125e2:	460b      	mov	r3, r1
 80125e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d101      	bne.n	80125f4 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80125f0:	2303      	movs	r3, #3
 80125f2:	e014      	b.n	801261e <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80125fa:	b2db      	uxtb	r3, r3
 80125fc:	2b03      	cmp	r3, #3
 80125fe:	d10d      	bne.n	801261c <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012608:	2b00      	cmp	r3, #0
 801260a:	d007      	beq.n	801261c <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012614:	78fa      	ldrb	r2, [r7, #3]
 8012616:	4611      	mov	r1, r2
 8012618:	6878      	ldr	r0, [r7, #4]
 801261a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801261c:	2300      	movs	r3, #0
}
 801261e:	4618      	mov	r0, r3
 8012620:	3708      	adds	r7, #8
 8012622:	46bd      	mov	sp, r7
 8012624:	bd80      	pop	{r7, pc}

08012626 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8012626:	b480      	push	{r7}
 8012628:	b083      	sub	sp, #12
 801262a:	af00      	add	r7, sp, #0
 801262c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801262e:	2300      	movs	r3, #0
}
 8012630:	4618      	mov	r0, r3
 8012632:	370c      	adds	r7, #12
 8012634:	46bd      	mov	sp, r7
 8012636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801263a:	4770      	bx	lr

0801263c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801263c:	b580      	push	{r7, lr}
 801263e:	b082      	sub	sp, #8
 8012640:	af00      	add	r7, sp, #0
 8012642:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	2201      	movs	r2, #1
 8012648:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012652:	2b00      	cmp	r3, #0
 8012654:	d009      	beq.n	801266a <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801265c:	685b      	ldr	r3, [r3, #4]
 801265e:	687a      	ldr	r2, [r7, #4]
 8012660:	6852      	ldr	r2, [r2, #4]
 8012662:	b2d2      	uxtb	r2, r2
 8012664:	4611      	mov	r1, r2
 8012666:	6878      	ldr	r0, [r7, #4]
 8012668:	4798      	blx	r3
  }

  return USBD_OK;
 801266a:	2300      	movs	r3, #0
}
 801266c:	4618      	mov	r0, r3
 801266e:	3708      	adds	r7, #8
 8012670:	46bd      	mov	sp, r7
 8012672:	bd80      	pop	{r7, pc}

08012674 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8012674:	b480      	push	{r7}
 8012676:	b087      	sub	sp, #28
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8012680:	697b      	ldr	r3, [r7, #20]
 8012682:	781b      	ldrb	r3, [r3, #0]
 8012684:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8012686:	697b      	ldr	r3, [r7, #20]
 8012688:	3301      	adds	r3, #1
 801268a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801268c:	697b      	ldr	r3, [r7, #20]
 801268e:	781b      	ldrb	r3, [r3, #0]
 8012690:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8012692:	8a3b      	ldrh	r3, [r7, #16]
 8012694:	021b      	lsls	r3, r3, #8
 8012696:	b21a      	sxth	r2, r3
 8012698:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801269c:	4313      	orrs	r3, r2
 801269e:	b21b      	sxth	r3, r3
 80126a0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80126a2:	89fb      	ldrh	r3, [r7, #14]
}
 80126a4:	4618      	mov	r0, r3
 80126a6:	371c      	adds	r7, #28
 80126a8:	46bd      	mov	sp, r7
 80126aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ae:	4770      	bx	lr

080126b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b084      	sub	sp, #16
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]
 80126b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80126ba:	2300      	movs	r3, #0
 80126bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80126be:	683b      	ldr	r3, [r7, #0]
 80126c0:	781b      	ldrb	r3, [r3, #0]
 80126c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80126c6:	2b40      	cmp	r3, #64	; 0x40
 80126c8:	d005      	beq.n	80126d6 <USBD_StdDevReq+0x26>
 80126ca:	2b40      	cmp	r3, #64	; 0x40
 80126cc:	d853      	bhi.n	8012776 <USBD_StdDevReq+0xc6>
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d00b      	beq.n	80126ea <USBD_StdDevReq+0x3a>
 80126d2:	2b20      	cmp	r3, #32
 80126d4:	d14f      	bne.n	8012776 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80126dc:	689b      	ldr	r3, [r3, #8]
 80126de:	6839      	ldr	r1, [r7, #0]
 80126e0:	6878      	ldr	r0, [r7, #4]
 80126e2:	4798      	blx	r3
 80126e4:	4603      	mov	r3, r0
 80126e6:	73fb      	strb	r3, [r7, #15]
      break;
 80126e8:	e04a      	b.n	8012780 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80126ea:	683b      	ldr	r3, [r7, #0]
 80126ec:	785b      	ldrb	r3, [r3, #1]
 80126ee:	2b09      	cmp	r3, #9
 80126f0:	d83b      	bhi.n	801276a <USBD_StdDevReq+0xba>
 80126f2:	a201      	add	r2, pc, #4	; (adr r2, 80126f8 <USBD_StdDevReq+0x48>)
 80126f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126f8:	0801274d 	.word	0x0801274d
 80126fc:	08012761 	.word	0x08012761
 8012700:	0801276b 	.word	0x0801276b
 8012704:	08012757 	.word	0x08012757
 8012708:	0801276b 	.word	0x0801276b
 801270c:	0801272b 	.word	0x0801272b
 8012710:	08012721 	.word	0x08012721
 8012714:	0801276b 	.word	0x0801276b
 8012718:	08012743 	.word	0x08012743
 801271c:	08012735 	.word	0x08012735
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012720:	6839      	ldr	r1, [r7, #0]
 8012722:	6878      	ldr	r0, [r7, #4]
 8012724:	f000 f9de 	bl	8012ae4 <USBD_GetDescriptor>
          break;
 8012728:	e024      	b.n	8012774 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801272a:	6839      	ldr	r1, [r7, #0]
 801272c:	6878      	ldr	r0, [r7, #4]
 801272e:	f000 fb6d 	bl	8012e0c <USBD_SetAddress>
          break;
 8012732:	e01f      	b.n	8012774 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8012734:	6839      	ldr	r1, [r7, #0]
 8012736:	6878      	ldr	r0, [r7, #4]
 8012738:	f000 fbac 	bl	8012e94 <USBD_SetConfig>
 801273c:	4603      	mov	r3, r0
 801273e:	73fb      	strb	r3, [r7, #15]
          break;
 8012740:	e018      	b.n	8012774 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8012742:	6839      	ldr	r1, [r7, #0]
 8012744:	6878      	ldr	r0, [r7, #4]
 8012746:	f000 fc4b 	bl	8012fe0 <USBD_GetConfig>
          break;
 801274a:	e013      	b.n	8012774 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801274c:	6839      	ldr	r1, [r7, #0]
 801274e:	6878      	ldr	r0, [r7, #4]
 8012750:	f000 fc7c 	bl	801304c <USBD_GetStatus>
          break;
 8012754:	e00e      	b.n	8012774 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8012756:	6839      	ldr	r1, [r7, #0]
 8012758:	6878      	ldr	r0, [r7, #4]
 801275a:	f000 fcab 	bl	80130b4 <USBD_SetFeature>
          break;
 801275e:	e009      	b.n	8012774 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012760:	6839      	ldr	r1, [r7, #0]
 8012762:	6878      	ldr	r0, [r7, #4]
 8012764:	f000 fcba 	bl	80130dc <USBD_ClrFeature>
          break;
 8012768:	e004      	b.n	8012774 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 801276a:	6839      	ldr	r1, [r7, #0]
 801276c:	6878      	ldr	r0, [r7, #4]
 801276e:	f000 fd11 	bl	8013194 <USBD_CtlError>
          break;
 8012772:	bf00      	nop
      }
      break;
 8012774:	e004      	b.n	8012780 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8012776:	6839      	ldr	r1, [r7, #0]
 8012778:	6878      	ldr	r0, [r7, #4]
 801277a:	f000 fd0b 	bl	8013194 <USBD_CtlError>
      break;
 801277e:	bf00      	nop
  }

  return ret;
 8012780:	7bfb      	ldrb	r3, [r7, #15]
}
 8012782:	4618      	mov	r0, r3
 8012784:	3710      	adds	r7, #16
 8012786:	46bd      	mov	sp, r7
 8012788:	bd80      	pop	{r7, pc}
 801278a:	bf00      	nop

0801278c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801278c:	b580      	push	{r7, lr}
 801278e:	b084      	sub	sp, #16
 8012790:	af00      	add	r7, sp, #0
 8012792:	6078      	str	r0, [r7, #4]
 8012794:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012796:	2300      	movs	r3, #0
 8012798:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801279a:	683b      	ldr	r3, [r7, #0]
 801279c:	781b      	ldrb	r3, [r3, #0]
 801279e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80127a2:	2b40      	cmp	r3, #64	; 0x40
 80127a4:	d005      	beq.n	80127b2 <USBD_StdItfReq+0x26>
 80127a6:	2b40      	cmp	r3, #64	; 0x40
 80127a8:	d82f      	bhi.n	801280a <USBD_StdItfReq+0x7e>
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d001      	beq.n	80127b2 <USBD_StdItfReq+0x26>
 80127ae:	2b20      	cmp	r3, #32
 80127b0:	d12b      	bne.n	801280a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80127b8:	b2db      	uxtb	r3, r3
 80127ba:	3b01      	subs	r3, #1
 80127bc:	2b02      	cmp	r3, #2
 80127be:	d81d      	bhi.n	80127fc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80127c0:	683b      	ldr	r3, [r7, #0]
 80127c2:	889b      	ldrh	r3, [r3, #4]
 80127c4:	b2db      	uxtb	r3, r3
 80127c6:	2b01      	cmp	r3, #1
 80127c8:	d813      	bhi.n	80127f2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80127d0:	689b      	ldr	r3, [r3, #8]
 80127d2:	6839      	ldr	r1, [r7, #0]
 80127d4:	6878      	ldr	r0, [r7, #4]
 80127d6:	4798      	blx	r3
 80127d8:	4603      	mov	r3, r0
 80127da:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80127dc:	683b      	ldr	r3, [r7, #0]
 80127de:	88db      	ldrh	r3, [r3, #6]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d110      	bne.n	8012806 <USBD_StdItfReq+0x7a>
 80127e4:	7bfb      	ldrb	r3, [r7, #15]
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d10d      	bne.n	8012806 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80127ea:	6878      	ldr	r0, [r7, #4]
 80127ec:	f000 fd80 	bl	80132f0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80127f0:	e009      	b.n	8012806 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80127f2:	6839      	ldr	r1, [r7, #0]
 80127f4:	6878      	ldr	r0, [r7, #4]
 80127f6:	f000 fccd 	bl	8013194 <USBD_CtlError>
          break;
 80127fa:	e004      	b.n	8012806 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80127fc:	6839      	ldr	r1, [r7, #0]
 80127fe:	6878      	ldr	r0, [r7, #4]
 8012800:	f000 fcc8 	bl	8013194 <USBD_CtlError>
          break;
 8012804:	e000      	b.n	8012808 <USBD_StdItfReq+0x7c>
          break;
 8012806:	bf00      	nop
      }
      break;
 8012808:	e004      	b.n	8012814 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 801280a:	6839      	ldr	r1, [r7, #0]
 801280c:	6878      	ldr	r0, [r7, #4]
 801280e:	f000 fcc1 	bl	8013194 <USBD_CtlError>
      break;
 8012812:	bf00      	nop
  }

  return ret;
 8012814:	7bfb      	ldrb	r3, [r7, #15]
}
 8012816:	4618      	mov	r0, r3
 8012818:	3710      	adds	r7, #16
 801281a:	46bd      	mov	sp, r7
 801281c:	bd80      	pop	{r7, pc}

0801281e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801281e:	b580      	push	{r7, lr}
 8012820:	b084      	sub	sp, #16
 8012822:	af00      	add	r7, sp, #0
 8012824:	6078      	str	r0, [r7, #4]
 8012826:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8012828:	2300      	movs	r3, #0
 801282a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801282c:	683b      	ldr	r3, [r7, #0]
 801282e:	889b      	ldrh	r3, [r3, #4]
 8012830:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012832:	683b      	ldr	r3, [r7, #0]
 8012834:	781b      	ldrb	r3, [r3, #0]
 8012836:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801283a:	2b40      	cmp	r3, #64	; 0x40
 801283c:	d007      	beq.n	801284e <USBD_StdEPReq+0x30>
 801283e:	2b40      	cmp	r3, #64	; 0x40
 8012840:	f200 8145 	bhi.w	8012ace <USBD_StdEPReq+0x2b0>
 8012844:	2b00      	cmp	r3, #0
 8012846:	d00c      	beq.n	8012862 <USBD_StdEPReq+0x44>
 8012848:	2b20      	cmp	r3, #32
 801284a:	f040 8140 	bne.w	8012ace <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012854:	689b      	ldr	r3, [r3, #8]
 8012856:	6839      	ldr	r1, [r7, #0]
 8012858:	6878      	ldr	r0, [r7, #4]
 801285a:	4798      	blx	r3
 801285c:	4603      	mov	r3, r0
 801285e:	73fb      	strb	r3, [r7, #15]
      break;
 8012860:	e13a      	b.n	8012ad8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012862:	683b      	ldr	r3, [r7, #0]
 8012864:	785b      	ldrb	r3, [r3, #1]
 8012866:	2b03      	cmp	r3, #3
 8012868:	d007      	beq.n	801287a <USBD_StdEPReq+0x5c>
 801286a:	2b03      	cmp	r3, #3
 801286c:	f300 8129 	bgt.w	8012ac2 <USBD_StdEPReq+0x2a4>
 8012870:	2b00      	cmp	r3, #0
 8012872:	d07f      	beq.n	8012974 <USBD_StdEPReq+0x156>
 8012874:	2b01      	cmp	r3, #1
 8012876:	d03c      	beq.n	80128f2 <USBD_StdEPReq+0xd4>
 8012878:	e123      	b.n	8012ac2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012880:	b2db      	uxtb	r3, r3
 8012882:	2b02      	cmp	r3, #2
 8012884:	d002      	beq.n	801288c <USBD_StdEPReq+0x6e>
 8012886:	2b03      	cmp	r3, #3
 8012888:	d016      	beq.n	80128b8 <USBD_StdEPReq+0x9a>
 801288a:	e02c      	b.n	80128e6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801288c:	7bbb      	ldrb	r3, [r7, #14]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d00d      	beq.n	80128ae <USBD_StdEPReq+0x90>
 8012892:	7bbb      	ldrb	r3, [r7, #14]
 8012894:	2b80      	cmp	r3, #128	; 0x80
 8012896:	d00a      	beq.n	80128ae <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012898:	7bbb      	ldrb	r3, [r7, #14]
 801289a:	4619      	mov	r1, r3
 801289c:	6878      	ldr	r0, [r7, #4]
 801289e:	f004 f844 	bl	801692a <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80128a2:	2180      	movs	r1, #128	; 0x80
 80128a4:	6878      	ldr	r0, [r7, #4]
 80128a6:	f004 f840 	bl	801692a <USBD_LL_StallEP>
 80128aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80128ac:	e020      	b.n	80128f0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80128ae:	6839      	ldr	r1, [r7, #0]
 80128b0:	6878      	ldr	r0, [r7, #4]
 80128b2:	f000 fc6f 	bl	8013194 <USBD_CtlError>
              break;
 80128b6:	e01b      	b.n	80128f0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80128b8:	683b      	ldr	r3, [r7, #0]
 80128ba:	885b      	ldrh	r3, [r3, #2]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d10e      	bne.n	80128de <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80128c0:	7bbb      	ldrb	r3, [r7, #14]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d00b      	beq.n	80128de <USBD_StdEPReq+0xc0>
 80128c6:	7bbb      	ldrb	r3, [r7, #14]
 80128c8:	2b80      	cmp	r3, #128	; 0x80
 80128ca:	d008      	beq.n	80128de <USBD_StdEPReq+0xc0>
 80128cc:	683b      	ldr	r3, [r7, #0]
 80128ce:	88db      	ldrh	r3, [r3, #6]
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d104      	bne.n	80128de <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80128d4:	7bbb      	ldrb	r3, [r7, #14]
 80128d6:	4619      	mov	r1, r3
 80128d8:	6878      	ldr	r0, [r7, #4]
 80128da:	f004 f826 	bl	801692a <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80128de:	6878      	ldr	r0, [r7, #4]
 80128e0:	f000 fd06 	bl	80132f0 <USBD_CtlSendStatus>

              break;
 80128e4:	e004      	b.n	80128f0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80128e6:	6839      	ldr	r1, [r7, #0]
 80128e8:	6878      	ldr	r0, [r7, #4]
 80128ea:	f000 fc53 	bl	8013194 <USBD_CtlError>
              break;
 80128ee:	bf00      	nop
          }
          break;
 80128f0:	e0ec      	b.n	8012acc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80128f8:	b2db      	uxtb	r3, r3
 80128fa:	2b02      	cmp	r3, #2
 80128fc:	d002      	beq.n	8012904 <USBD_StdEPReq+0xe6>
 80128fe:	2b03      	cmp	r3, #3
 8012900:	d016      	beq.n	8012930 <USBD_StdEPReq+0x112>
 8012902:	e030      	b.n	8012966 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012904:	7bbb      	ldrb	r3, [r7, #14]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d00d      	beq.n	8012926 <USBD_StdEPReq+0x108>
 801290a:	7bbb      	ldrb	r3, [r7, #14]
 801290c:	2b80      	cmp	r3, #128	; 0x80
 801290e:	d00a      	beq.n	8012926 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012910:	7bbb      	ldrb	r3, [r7, #14]
 8012912:	4619      	mov	r1, r3
 8012914:	6878      	ldr	r0, [r7, #4]
 8012916:	f004 f808 	bl	801692a <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801291a:	2180      	movs	r1, #128	; 0x80
 801291c:	6878      	ldr	r0, [r7, #4]
 801291e:	f004 f804 	bl	801692a <USBD_LL_StallEP>
 8012922:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012924:	e025      	b.n	8012972 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8012926:	6839      	ldr	r1, [r7, #0]
 8012928:	6878      	ldr	r0, [r7, #4]
 801292a:	f000 fc33 	bl	8013194 <USBD_CtlError>
              break;
 801292e:	e020      	b.n	8012972 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012930:	683b      	ldr	r3, [r7, #0]
 8012932:	885b      	ldrh	r3, [r3, #2]
 8012934:	2b00      	cmp	r3, #0
 8012936:	d11b      	bne.n	8012970 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012938:	7bbb      	ldrb	r3, [r7, #14]
 801293a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801293e:	2b00      	cmp	r3, #0
 8012940:	d004      	beq.n	801294c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012942:	7bbb      	ldrb	r3, [r7, #14]
 8012944:	4619      	mov	r1, r3
 8012946:	6878      	ldr	r0, [r7, #4]
 8012948:	f004 f80e 	bl	8016968 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801294c:	6878      	ldr	r0, [r7, #4]
 801294e:	f000 fccf 	bl	80132f0 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012958:	689b      	ldr	r3, [r3, #8]
 801295a:	6839      	ldr	r1, [r7, #0]
 801295c:	6878      	ldr	r0, [r7, #4]
 801295e:	4798      	blx	r3
 8012960:	4603      	mov	r3, r0
 8012962:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8012964:	e004      	b.n	8012970 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8012966:	6839      	ldr	r1, [r7, #0]
 8012968:	6878      	ldr	r0, [r7, #4]
 801296a:	f000 fc13 	bl	8013194 <USBD_CtlError>
              break;
 801296e:	e000      	b.n	8012972 <USBD_StdEPReq+0x154>
              break;
 8012970:	bf00      	nop
          }
          break;
 8012972:	e0ab      	b.n	8012acc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801297a:	b2db      	uxtb	r3, r3
 801297c:	2b02      	cmp	r3, #2
 801297e:	d002      	beq.n	8012986 <USBD_StdEPReq+0x168>
 8012980:	2b03      	cmp	r3, #3
 8012982:	d032      	beq.n	80129ea <USBD_StdEPReq+0x1cc>
 8012984:	e097      	b.n	8012ab6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012986:	7bbb      	ldrb	r3, [r7, #14]
 8012988:	2b00      	cmp	r3, #0
 801298a:	d007      	beq.n	801299c <USBD_StdEPReq+0x17e>
 801298c:	7bbb      	ldrb	r3, [r7, #14]
 801298e:	2b80      	cmp	r3, #128	; 0x80
 8012990:	d004      	beq.n	801299c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8012992:	6839      	ldr	r1, [r7, #0]
 8012994:	6878      	ldr	r0, [r7, #4]
 8012996:	f000 fbfd 	bl	8013194 <USBD_CtlError>
                break;
 801299a:	e091      	b.n	8012ac0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801299c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	da0b      	bge.n	80129bc <USBD_StdEPReq+0x19e>
 80129a4:	7bbb      	ldrb	r3, [r7, #14]
 80129a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80129aa:	4613      	mov	r3, r2
 80129ac:	009b      	lsls	r3, r3, #2
 80129ae:	4413      	add	r3, r2
 80129b0:	009b      	lsls	r3, r3, #2
 80129b2:	3310      	adds	r3, #16
 80129b4:	687a      	ldr	r2, [r7, #4]
 80129b6:	4413      	add	r3, r2
 80129b8:	3304      	adds	r3, #4
 80129ba:	e00b      	b.n	80129d4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80129bc:	7bbb      	ldrb	r3, [r7, #14]
 80129be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80129c2:	4613      	mov	r3, r2
 80129c4:	009b      	lsls	r3, r3, #2
 80129c6:	4413      	add	r3, r2
 80129c8:	009b      	lsls	r3, r3, #2
 80129ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80129ce:	687a      	ldr	r2, [r7, #4]
 80129d0:	4413      	add	r3, r2
 80129d2:	3304      	adds	r3, #4
 80129d4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80129d6:	68bb      	ldr	r3, [r7, #8]
 80129d8:	2200      	movs	r2, #0
 80129da:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80129dc:	68bb      	ldr	r3, [r7, #8]
 80129de:	2202      	movs	r2, #2
 80129e0:	4619      	mov	r1, r3
 80129e2:	6878      	ldr	r0, [r7, #4]
 80129e4:	f000 fc47 	bl	8013276 <USBD_CtlSendData>
              break;
 80129e8:	e06a      	b.n	8012ac0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80129ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	da11      	bge.n	8012a16 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80129f2:	7bbb      	ldrb	r3, [r7, #14]
 80129f4:	f003 020f 	and.w	r2, r3, #15
 80129f8:	6879      	ldr	r1, [r7, #4]
 80129fa:	4613      	mov	r3, r2
 80129fc:	009b      	lsls	r3, r3, #2
 80129fe:	4413      	add	r3, r2
 8012a00:	009b      	lsls	r3, r3, #2
 8012a02:	440b      	add	r3, r1
 8012a04:	3324      	adds	r3, #36	; 0x24
 8012a06:	881b      	ldrh	r3, [r3, #0]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d117      	bne.n	8012a3c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8012a0c:	6839      	ldr	r1, [r7, #0]
 8012a0e:	6878      	ldr	r0, [r7, #4]
 8012a10:	f000 fbc0 	bl	8013194 <USBD_CtlError>
                  break;
 8012a14:	e054      	b.n	8012ac0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012a16:	7bbb      	ldrb	r3, [r7, #14]
 8012a18:	f003 020f 	and.w	r2, r3, #15
 8012a1c:	6879      	ldr	r1, [r7, #4]
 8012a1e:	4613      	mov	r3, r2
 8012a20:	009b      	lsls	r3, r3, #2
 8012a22:	4413      	add	r3, r2
 8012a24:	009b      	lsls	r3, r3, #2
 8012a26:	440b      	add	r3, r1
 8012a28:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012a2c:	881b      	ldrh	r3, [r3, #0]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d104      	bne.n	8012a3c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8012a32:	6839      	ldr	r1, [r7, #0]
 8012a34:	6878      	ldr	r0, [r7, #4]
 8012a36:	f000 fbad 	bl	8013194 <USBD_CtlError>
                  break;
 8012a3a:	e041      	b.n	8012ac0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012a3c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	da0b      	bge.n	8012a5c <USBD_StdEPReq+0x23e>
 8012a44:	7bbb      	ldrb	r3, [r7, #14]
 8012a46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012a4a:	4613      	mov	r3, r2
 8012a4c:	009b      	lsls	r3, r3, #2
 8012a4e:	4413      	add	r3, r2
 8012a50:	009b      	lsls	r3, r3, #2
 8012a52:	3310      	adds	r3, #16
 8012a54:	687a      	ldr	r2, [r7, #4]
 8012a56:	4413      	add	r3, r2
 8012a58:	3304      	adds	r3, #4
 8012a5a:	e00b      	b.n	8012a74 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012a5c:	7bbb      	ldrb	r3, [r7, #14]
 8012a5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012a62:	4613      	mov	r3, r2
 8012a64:	009b      	lsls	r3, r3, #2
 8012a66:	4413      	add	r3, r2
 8012a68:	009b      	lsls	r3, r3, #2
 8012a6a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012a6e:	687a      	ldr	r2, [r7, #4]
 8012a70:	4413      	add	r3, r2
 8012a72:	3304      	adds	r3, #4
 8012a74:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012a76:	7bbb      	ldrb	r3, [r7, #14]
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d002      	beq.n	8012a82 <USBD_StdEPReq+0x264>
 8012a7c:	7bbb      	ldrb	r3, [r7, #14]
 8012a7e:	2b80      	cmp	r3, #128	; 0x80
 8012a80:	d103      	bne.n	8012a8a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8012a82:	68bb      	ldr	r3, [r7, #8]
 8012a84:	2200      	movs	r2, #0
 8012a86:	601a      	str	r2, [r3, #0]
 8012a88:	e00e      	b.n	8012aa8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8012a8a:	7bbb      	ldrb	r3, [r7, #14]
 8012a8c:	4619      	mov	r1, r3
 8012a8e:	6878      	ldr	r0, [r7, #4]
 8012a90:	f003 ff89 	bl	80169a6 <USBD_LL_IsStallEP>
 8012a94:	4603      	mov	r3, r0
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d003      	beq.n	8012aa2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8012a9a:	68bb      	ldr	r3, [r7, #8]
 8012a9c:	2201      	movs	r2, #1
 8012a9e:	601a      	str	r2, [r3, #0]
 8012aa0:	e002      	b.n	8012aa8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8012aa2:	68bb      	ldr	r3, [r7, #8]
 8012aa4:	2200      	movs	r2, #0
 8012aa6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012aa8:	68bb      	ldr	r3, [r7, #8]
 8012aaa:	2202      	movs	r2, #2
 8012aac:	4619      	mov	r1, r3
 8012aae:	6878      	ldr	r0, [r7, #4]
 8012ab0:	f000 fbe1 	bl	8013276 <USBD_CtlSendData>
              break;
 8012ab4:	e004      	b.n	8012ac0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8012ab6:	6839      	ldr	r1, [r7, #0]
 8012ab8:	6878      	ldr	r0, [r7, #4]
 8012aba:	f000 fb6b 	bl	8013194 <USBD_CtlError>
              break;
 8012abe:	bf00      	nop
          }
          break;
 8012ac0:	e004      	b.n	8012acc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8012ac2:	6839      	ldr	r1, [r7, #0]
 8012ac4:	6878      	ldr	r0, [r7, #4]
 8012ac6:	f000 fb65 	bl	8013194 <USBD_CtlError>
          break;
 8012aca:	bf00      	nop
      }
      break;
 8012acc:	e004      	b.n	8012ad8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8012ace:	6839      	ldr	r1, [r7, #0]
 8012ad0:	6878      	ldr	r0, [r7, #4]
 8012ad2:	f000 fb5f 	bl	8013194 <USBD_CtlError>
      break;
 8012ad6:	bf00      	nop
  }

  return ret;
 8012ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ada:	4618      	mov	r0, r3
 8012adc:	3710      	adds	r7, #16
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	bd80      	pop	{r7, pc}
	...

08012ae4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	b084      	sub	sp, #16
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]
 8012aec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012aee:	2300      	movs	r3, #0
 8012af0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012af2:	2300      	movs	r3, #0
 8012af4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012af6:	2300      	movs	r3, #0
 8012af8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012afa:	683b      	ldr	r3, [r7, #0]
 8012afc:	885b      	ldrh	r3, [r3, #2]
 8012afe:	0a1b      	lsrs	r3, r3, #8
 8012b00:	b29b      	uxth	r3, r3
 8012b02:	3b01      	subs	r3, #1
 8012b04:	2b0e      	cmp	r3, #14
 8012b06:	f200 8152 	bhi.w	8012dae <USBD_GetDescriptor+0x2ca>
 8012b0a:	a201      	add	r2, pc, #4	; (adr r2, 8012b10 <USBD_GetDescriptor+0x2c>)
 8012b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b10:	08012b81 	.word	0x08012b81
 8012b14:	08012b99 	.word	0x08012b99
 8012b18:	08012bd9 	.word	0x08012bd9
 8012b1c:	08012daf 	.word	0x08012daf
 8012b20:	08012daf 	.word	0x08012daf
 8012b24:	08012d4f 	.word	0x08012d4f
 8012b28:	08012d7b 	.word	0x08012d7b
 8012b2c:	08012daf 	.word	0x08012daf
 8012b30:	08012daf 	.word	0x08012daf
 8012b34:	08012daf 	.word	0x08012daf
 8012b38:	08012daf 	.word	0x08012daf
 8012b3c:	08012daf 	.word	0x08012daf
 8012b40:	08012daf 	.word	0x08012daf
 8012b44:	08012daf 	.word	0x08012daf
 8012b48:	08012b4d 	.word	0x08012b4d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b52:	69db      	ldr	r3, [r3, #28]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d00b      	beq.n	8012b70 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b5e:	69db      	ldr	r3, [r3, #28]
 8012b60:	687a      	ldr	r2, [r7, #4]
 8012b62:	7c12      	ldrb	r2, [r2, #16]
 8012b64:	f107 0108 	add.w	r1, r7, #8
 8012b68:	4610      	mov	r0, r2
 8012b6a:	4798      	blx	r3
 8012b6c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012b6e:	e126      	b.n	8012dbe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012b70:	6839      	ldr	r1, [r7, #0]
 8012b72:	6878      	ldr	r0, [r7, #4]
 8012b74:	f000 fb0e 	bl	8013194 <USBD_CtlError>
        err++;
 8012b78:	7afb      	ldrb	r3, [r7, #11]
 8012b7a:	3301      	adds	r3, #1
 8012b7c:	72fb      	strb	r3, [r7, #11]
      break;
 8012b7e:	e11e      	b.n	8012dbe <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	687a      	ldr	r2, [r7, #4]
 8012b8a:	7c12      	ldrb	r2, [r2, #16]
 8012b8c:	f107 0108 	add.w	r1, r7, #8
 8012b90:	4610      	mov	r0, r2
 8012b92:	4798      	blx	r3
 8012b94:	60f8      	str	r0, [r7, #12]
      break;
 8012b96:	e112      	b.n	8012dbe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	7c1b      	ldrb	r3, [r3, #16]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d10d      	bne.n	8012bbc <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ba8:	f107 0208 	add.w	r2, r7, #8
 8012bac:	4610      	mov	r0, r2
 8012bae:	4798      	blx	r3
 8012bb0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	3301      	adds	r3, #1
 8012bb6:	2202      	movs	r2, #2
 8012bb8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8012bba:	e100      	b.n	8012dbe <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bc4:	f107 0208 	add.w	r2, r7, #8
 8012bc8:	4610      	mov	r0, r2
 8012bca:	4798      	blx	r3
 8012bcc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	3301      	adds	r3, #1
 8012bd2:	2202      	movs	r2, #2
 8012bd4:	701a      	strb	r2, [r3, #0]
      break;
 8012bd6:	e0f2      	b.n	8012dbe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012bd8:	683b      	ldr	r3, [r7, #0]
 8012bda:	885b      	ldrh	r3, [r3, #2]
 8012bdc:	b2db      	uxtb	r3, r3
 8012bde:	2b05      	cmp	r3, #5
 8012be0:	f200 80ac 	bhi.w	8012d3c <USBD_GetDescriptor+0x258>
 8012be4:	a201      	add	r2, pc, #4	; (adr r2, 8012bec <USBD_GetDescriptor+0x108>)
 8012be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bea:	bf00      	nop
 8012bec:	08012c05 	.word	0x08012c05
 8012bf0:	08012c39 	.word	0x08012c39
 8012bf4:	08012c6d 	.word	0x08012c6d
 8012bf8:	08012ca1 	.word	0x08012ca1
 8012bfc:	08012cd5 	.word	0x08012cd5
 8012c00:	08012d09 	.word	0x08012d09
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c0a:	685b      	ldr	r3, [r3, #4]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d00b      	beq.n	8012c28 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c16:	685b      	ldr	r3, [r3, #4]
 8012c18:	687a      	ldr	r2, [r7, #4]
 8012c1a:	7c12      	ldrb	r2, [r2, #16]
 8012c1c:	f107 0108 	add.w	r1, r7, #8
 8012c20:	4610      	mov	r0, r2
 8012c22:	4798      	blx	r3
 8012c24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012c26:	e091      	b.n	8012d4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012c28:	6839      	ldr	r1, [r7, #0]
 8012c2a:	6878      	ldr	r0, [r7, #4]
 8012c2c:	f000 fab2 	bl	8013194 <USBD_CtlError>
            err++;
 8012c30:	7afb      	ldrb	r3, [r7, #11]
 8012c32:	3301      	adds	r3, #1
 8012c34:	72fb      	strb	r3, [r7, #11]
          break;
 8012c36:	e089      	b.n	8012d4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c3e:	689b      	ldr	r3, [r3, #8]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d00b      	beq.n	8012c5c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012c44:	687b      	ldr	r3, [r7, #4]
 8012c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c4a:	689b      	ldr	r3, [r3, #8]
 8012c4c:	687a      	ldr	r2, [r7, #4]
 8012c4e:	7c12      	ldrb	r2, [r2, #16]
 8012c50:	f107 0108 	add.w	r1, r7, #8
 8012c54:	4610      	mov	r0, r2
 8012c56:	4798      	blx	r3
 8012c58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012c5a:	e077      	b.n	8012d4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012c5c:	6839      	ldr	r1, [r7, #0]
 8012c5e:	6878      	ldr	r0, [r7, #4]
 8012c60:	f000 fa98 	bl	8013194 <USBD_CtlError>
            err++;
 8012c64:	7afb      	ldrb	r3, [r7, #11]
 8012c66:	3301      	adds	r3, #1
 8012c68:	72fb      	strb	r3, [r7, #11]
          break;
 8012c6a:	e06f      	b.n	8012d4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c72:	68db      	ldr	r3, [r3, #12]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d00b      	beq.n	8012c90 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c7e:	68db      	ldr	r3, [r3, #12]
 8012c80:	687a      	ldr	r2, [r7, #4]
 8012c82:	7c12      	ldrb	r2, [r2, #16]
 8012c84:	f107 0108 	add.w	r1, r7, #8
 8012c88:	4610      	mov	r0, r2
 8012c8a:	4798      	blx	r3
 8012c8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012c8e:	e05d      	b.n	8012d4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012c90:	6839      	ldr	r1, [r7, #0]
 8012c92:	6878      	ldr	r0, [r7, #4]
 8012c94:	f000 fa7e 	bl	8013194 <USBD_CtlError>
            err++;
 8012c98:	7afb      	ldrb	r3, [r7, #11]
 8012c9a:	3301      	adds	r3, #1
 8012c9c:	72fb      	strb	r3, [r7, #11]
          break;
 8012c9e:	e055      	b.n	8012d4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012ca6:	691b      	ldr	r3, [r3, #16]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d00b      	beq.n	8012cc4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012cb2:	691b      	ldr	r3, [r3, #16]
 8012cb4:	687a      	ldr	r2, [r7, #4]
 8012cb6:	7c12      	ldrb	r2, [r2, #16]
 8012cb8:	f107 0108 	add.w	r1, r7, #8
 8012cbc:	4610      	mov	r0, r2
 8012cbe:	4798      	blx	r3
 8012cc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012cc2:	e043      	b.n	8012d4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012cc4:	6839      	ldr	r1, [r7, #0]
 8012cc6:	6878      	ldr	r0, [r7, #4]
 8012cc8:	f000 fa64 	bl	8013194 <USBD_CtlError>
            err++;
 8012ccc:	7afb      	ldrb	r3, [r7, #11]
 8012cce:	3301      	adds	r3, #1
 8012cd0:	72fb      	strb	r3, [r7, #11]
          break;
 8012cd2:	e03b      	b.n	8012d4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012cda:	695b      	ldr	r3, [r3, #20]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d00b      	beq.n	8012cf8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012ce6:	695b      	ldr	r3, [r3, #20]
 8012ce8:	687a      	ldr	r2, [r7, #4]
 8012cea:	7c12      	ldrb	r2, [r2, #16]
 8012cec:	f107 0108 	add.w	r1, r7, #8
 8012cf0:	4610      	mov	r0, r2
 8012cf2:	4798      	blx	r3
 8012cf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012cf6:	e029      	b.n	8012d4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012cf8:	6839      	ldr	r1, [r7, #0]
 8012cfa:	6878      	ldr	r0, [r7, #4]
 8012cfc:	f000 fa4a 	bl	8013194 <USBD_CtlError>
            err++;
 8012d00:	7afb      	ldrb	r3, [r7, #11]
 8012d02:	3301      	adds	r3, #1
 8012d04:	72fb      	strb	r3, [r7, #11]
          break;
 8012d06:	e021      	b.n	8012d4c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012d0e:	699b      	ldr	r3, [r3, #24]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d00b      	beq.n	8012d2c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012d1a:	699b      	ldr	r3, [r3, #24]
 8012d1c:	687a      	ldr	r2, [r7, #4]
 8012d1e:	7c12      	ldrb	r2, [r2, #16]
 8012d20:	f107 0108 	add.w	r1, r7, #8
 8012d24:	4610      	mov	r0, r2
 8012d26:	4798      	blx	r3
 8012d28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012d2a:	e00f      	b.n	8012d4c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012d2c:	6839      	ldr	r1, [r7, #0]
 8012d2e:	6878      	ldr	r0, [r7, #4]
 8012d30:	f000 fa30 	bl	8013194 <USBD_CtlError>
            err++;
 8012d34:	7afb      	ldrb	r3, [r7, #11]
 8012d36:	3301      	adds	r3, #1
 8012d38:	72fb      	strb	r3, [r7, #11]
          break;
 8012d3a:	e007      	b.n	8012d4c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012d3c:	6839      	ldr	r1, [r7, #0]
 8012d3e:	6878      	ldr	r0, [r7, #4]
 8012d40:	f000 fa28 	bl	8013194 <USBD_CtlError>
          err++;
 8012d44:	7afb      	ldrb	r3, [r7, #11]
 8012d46:	3301      	adds	r3, #1
 8012d48:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8012d4a:	bf00      	nop
      }
      break;
 8012d4c:	e037      	b.n	8012dbe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	7c1b      	ldrb	r3, [r3, #16]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d109      	bne.n	8012d6a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d5e:	f107 0208 	add.w	r2, r7, #8
 8012d62:	4610      	mov	r0, r2
 8012d64:	4798      	blx	r3
 8012d66:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012d68:	e029      	b.n	8012dbe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012d6a:	6839      	ldr	r1, [r7, #0]
 8012d6c:	6878      	ldr	r0, [r7, #4]
 8012d6e:	f000 fa11 	bl	8013194 <USBD_CtlError>
        err++;
 8012d72:	7afb      	ldrb	r3, [r7, #11]
 8012d74:	3301      	adds	r3, #1
 8012d76:	72fb      	strb	r3, [r7, #11]
      break;
 8012d78:	e021      	b.n	8012dbe <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	7c1b      	ldrb	r3, [r3, #16]
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d10d      	bne.n	8012d9e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d8a:	f107 0208 	add.w	r2, r7, #8
 8012d8e:	4610      	mov	r0, r2
 8012d90:	4798      	blx	r3
 8012d92:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	3301      	adds	r3, #1
 8012d98:	2207      	movs	r2, #7
 8012d9a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012d9c:	e00f      	b.n	8012dbe <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012d9e:	6839      	ldr	r1, [r7, #0]
 8012da0:	6878      	ldr	r0, [r7, #4]
 8012da2:	f000 f9f7 	bl	8013194 <USBD_CtlError>
        err++;
 8012da6:	7afb      	ldrb	r3, [r7, #11]
 8012da8:	3301      	adds	r3, #1
 8012daa:	72fb      	strb	r3, [r7, #11]
      break;
 8012dac:	e007      	b.n	8012dbe <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8012dae:	6839      	ldr	r1, [r7, #0]
 8012db0:	6878      	ldr	r0, [r7, #4]
 8012db2:	f000 f9ef 	bl	8013194 <USBD_CtlError>
      err++;
 8012db6:	7afb      	ldrb	r3, [r7, #11]
 8012db8:	3301      	adds	r3, #1
 8012dba:	72fb      	strb	r3, [r7, #11]
      break;
 8012dbc:	bf00      	nop
  }

  if (err != 0U)
 8012dbe:	7afb      	ldrb	r3, [r7, #11]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d11e      	bne.n	8012e02 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8012dc4:	683b      	ldr	r3, [r7, #0]
 8012dc6:	88db      	ldrh	r3, [r3, #6]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d016      	beq.n	8012dfa <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8012dcc:	893b      	ldrh	r3, [r7, #8]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d00e      	beq.n	8012df0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8012dd2:	683b      	ldr	r3, [r7, #0]
 8012dd4:	88da      	ldrh	r2, [r3, #6]
 8012dd6:	893b      	ldrh	r3, [r7, #8]
 8012dd8:	4293      	cmp	r3, r2
 8012dda:	bf28      	it	cs
 8012ddc:	4613      	movcs	r3, r2
 8012dde:	b29b      	uxth	r3, r3
 8012de0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012de2:	893b      	ldrh	r3, [r7, #8]
 8012de4:	461a      	mov	r2, r3
 8012de6:	68f9      	ldr	r1, [r7, #12]
 8012de8:	6878      	ldr	r0, [r7, #4]
 8012dea:	f000 fa44 	bl	8013276 <USBD_CtlSendData>
 8012dee:	e009      	b.n	8012e04 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012df0:	6839      	ldr	r1, [r7, #0]
 8012df2:	6878      	ldr	r0, [r7, #4]
 8012df4:	f000 f9ce 	bl	8013194 <USBD_CtlError>
 8012df8:	e004      	b.n	8012e04 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012dfa:	6878      	ldr	r0, [r7, #4]
 8012dfc:	f000 fa78 	bl	80132f0 <USBD_CtlSendStatus>
 8012e00:	e000      	b.n	8012e04 <USBD_GetDescriptor+0x320>
    return;
 8012e02:	bf00      	nop
  }
}
 8012e04:	3710      	adds	r7, #16
 8012e06:	46bd      	mov	sp, r7
 8012e08:	bd80      	pop	{r7, pc}
 8012e0a:	bf00      	nop

08012e0c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012e0c:	b580      	push	{r7, lr}
 8012e0e:	b084      	sub	sp, #16
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	6078      	str	r0, [r7, #4]
 8012e14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012e16:	683b      	ldr	r3, [r7, #0]
 8012e18:	889b      	ldrh	r3, [r3, #4]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d131      	bne.n	8012e82 <USBD_SetAddress+0x76>
 8012e1e:	683b      	ldr	r3, [r7, #0]
 8012e20:	88db      	ldrh	r3, [r3, #6]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d12d      	bne.n	8012e82 <USBD_SetAddress+0x76>
 8012e26:	683b      	ldr	r3, [r7, #0]
 8012e28:	885b      	ldrh	r3, [r3, #2]
 8012e2a:	2b7f      	cmp	r3, #127	; 0x7f
 8012e2c:	d829      	bhi.n	8012e82 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012e2e:	683b      	ldr	r3, [r7, #0]
 8012e30:	885b      	ldrh	r3, [r3, #2]
 8012e32:	b2db      	uxtb	r3, r3
 8012e34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012e38:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012e40:	b2db      	uxtb	r3, r3
 8012e42:	2b03      	cmp	r3, #3
 8012e44:	d104      	bne.n	8012e50 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012e46:	6839      	ldr	r1, [r7, #0]
 8012e48:	6878      	ldr	r0, [r7, #4]
 8012e4a:	f000 f9a3 	bl	8013194 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e4e:	e01d      	b.n	8012e8c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	7bfa      	ldrb	r2, [r7, #15]
 8012e54:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012e58:	7bfb      	ldrb	r3, [r7, #15]
 8012e5a:	4619      	mov	r1, r3
 8012e5c:	6878      	ldr	r0, [r7, #4]
 8012e5e:	f003 fdce 	bl	80169fe <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012e62:	6878      	ldr	r0, [r7, #4]
 8012e64:	f000 fa44 	bl	80132f0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012e68:	7bfb      	ldrb	r3, [r7, #15]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d004      	beq.n	8012e78 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	2202      	movs	r2, #2
 8012e72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e76:	e009      	b.n	8012e8c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	2201      	movs	r2, #1
 8012e7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e80:	e004      	b.n	8012e8c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012e82:	6839      	ldr	r1, [r7, #0]
 8012e84:	6878      	ldr	r0, [r7, #4]
 8012e86:	f000 f985 	bl	8013194 <USBD_CtlError>
  }
}
 8012e8a:	bf00      	nop
 8012e8c:	bf00      	nop
 8012e8e:	3710      	adds	r7, #16
 8012e90:	46bd      	mov	sp, r7
 8012e92:	bd80      	pop	{r7, pc}

08012e94 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012e94:	b580      	push	{r7, lr}
 8012e96:	b084      	sub	sp, #16
 8012e98:	af00      	add	r7, sp, #0
 8012e9a:	6078      	str	r0, [r7, #4]
 8012e9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012ea2:	683b      	ldr	r3, [r7, #0]
 8012ea4:	885b      	ldrh	r3, [r3, #2]
 8012ea6:	b2da      	uxtb	r2, r3
 8012ea8:	4b4c      	ldr	r3, [pc, #304]	; (8012fdc <USBD_SetConfig+0x148>)
 8012eaa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012eac:	4b4b      	ldr	r3, [pc, #300]	; (8012fdc <USBD_SetConfig+0x148>)
 8012eae:	781b      	ldrb	r3, [r3, #0]
 8012eb0:	2b01      	cmp	r3, #1
 8012eb2:	d905      	bls.n	8012ec0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012eb4:	6839      	ldr	r1, [r7, #0]
 8012eb6:	6878      	ldr	r0, [r7, #4]
 8012eb8:	f000 f96c 	bl	8013194 <USBD_CtlError>
    return USBD_FAIL;
 8012ebc:	2303      	movs	r3, #3
 8012ebe:	e088      	b.n	8012fd2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012ec6:	b2db      	uxtb	r3, r3
 8012ec8:	2b02      	cmp	r3, #2
 8012eca:	d002      	beq.n	8012ed2 <USBD_SetConfig+0x3e>
 8012ecc:	2b03      	cmp	r3, #3
 8012ece:	d025      	beq.n	8012f1c <USBD_SetConfig+0x88>
 8012ed0:	e071      	b.n	8012fb6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8012ed2:	4b42      	ldr	r3, [pc, #264]	; (8012fdc <USBD_SetConfig+0x148>)
 8012ed4:	781b      	ldrb	r3, [r3, #0]
 8012ed6:	2b00      	cmp	r3, #0
 8012ed8:	d01c      	beq.n	8012f14 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8012eda:	4b40      	ldr	r3, [pc, #256]	; (8012fdc <USBD_SetConfig+0x148>)
 8012edc:	781b      	ldrb	r3, [r3, #0]
 8012ede:	461a      	mov	r2, r3
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012ee4:	4b3d      	ldr	r3, [pc, #244]	; (8012fdc <USBD_SetConfig+0x148>)
 8012ee6:	781b      	ldrb	r3, [r3, #0]
 8012ee8:	4619      	mov	r1, r3
 8012eea:	6878      	ldr	r0, [r7, #4]
 8012eec:	f7ff f91f 	bl	801212e <USBD_SetClassConfig>
 8012ef0:	4603      	mov	r3, r0
 8012ef2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012ef4:	7bfb      	ldrb	r3, [r7, #15]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d004      	beq.n	8012f04 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8012efa:	6839      	ldr	r1, [r7, #0]
 8012efc:	6878      	ldr	r0, [r7, #4]
 8012efe:	f000 f949 	bl	8013194 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012f02:	e065      	b.n	8012fd0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8012f04:	6878      	ldr	r0, [r7, #4]
 8012f06:	f000 f9f3 	bl	80132f0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	2203      	movs	r2, #3
 8012f0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012f12:	e05d      	b.n	8012fd0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012f14:	6878      	ldr	r0, [r7, #4]
 8012f16:	f000 f9eb 	bl	80132f0 <USBD_CtlSendStatus>
      break;
 8012f1a:	e059      	b.n	8012fd0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012f1c:	4b2f      	ldr	r3, [pc, #188]	; (8012fdc <USBD_SetConfig+0x148>)
 8012f1e:	781b      	ldrb	r3, [r3, #0]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d112      	bne.n	8012f4a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	2202      	movs	r2, #2
 8012f28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8012f2c:	4b2b      	ldr	r3, [pc, #172]	; (8012fdc <USBD_SetConfig+0x148>)
 8012f2e:	781b      	ldrb	r3, [r3, #0]
 8012f30:	461a      	mov	r2, r3
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012f36:	4b29      	ldr	r3, [pc, #164]	; (8012fdc <USBD_SetConfig+0x148>)
 8012f38:	781b      	ldrb	r3, [r3, #0]
 8012f3a:	4619      	mov	r1, r3
 8012f3c:	6878      	ldr	r0, [r7, #4]
 8012f3e:	f7ff f912 	bl	8012166 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012f42:	6878      	ldr	r0, [r7, #4]
 8012f44:	f000 f9d4 	bl	80132f0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012f48:	e042      	b.n	8012fd0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8012f4a:	4b24      	ldr	r3, [pc, #144]	; (8012fdc <USBD_SetConfig+0x148>)
 8012f4c:	781b      	ldrb	r3, [r3, #0]
 8012f4e:	461a      	mov	r2, r3
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	685b      	ldr	r3, [r3, #4]
 8012f54:	429a      	cmp	r2, r3
 8012f56:	d02a      	beq.n	8012fae <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	685b      	ldr	r3, [r3, #4]
 8012f5c:	b2db      	uxtb	r3, r3
 8012f5e:	4619      	mov	r1, r3
 8012f60:	6878      	ldr	r0, [r7, #4]
 8012f62:	f7ff f900 	bl	8012166 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012f66:	4b1d      	ldr	r3, [pc, #116]	; (8012fdc <USBD_SetConfig+0x148>)
 8012f68:	781b      	ldrb	r3, [r3, #0]
 8012f6a:	461a      	mov	r2, r3
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012f70:	4b1a      	ldr	r3, [pc, #104]	; (8012fdc <USBD_SetConfig+0x148>)
 8012f72:	781b      	ldrb	r3, [r3, #0]
 8012f74:	4619      	mov	r1, r3
 8012f76:	6878      	ldr	r0, [r7, #4]
 8012f78:	f7ff f8d9 	bl	801212e <USBD_SetClassConfig>
 8012f7c:	4603      	mov	r3, r0
 8012f7e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012f80:	7bfb      	ldrb	r3, [r7, #15]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d00f      	beq.n	8012fa6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8012f86:	6839      	ldr	r1, [r7, #0]
 8012f88:	6878      	ldr	r0, [r7, #4]
 8012f8a:	f000 f903 	bl	8013194 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	685b      	ldr	r3, [r3, #4]
 8012f92:	b2db      	uxtb	r3, r3
 8012f94:	4619      	mov	r1, r3
 8012f96:	6878      	ldr	r0, [r7, #4]
 8012f98:	f7ff f8e5 	bl	8012166 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	2202      	movs	r2, #2
 8012fa0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012fa4:	e014      	b.n	8012fd0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8012fa6:	6878      	ldr	r0, [r7, #4]
 8012fa8:	f000 f9a2 	bl	80132f0 <USBD_CtlSendStatus>
      break;
 8012fac:	e010      	b.n	8012fd0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012fae:	6878      	ldr	r0, [r7, #4]
 8012fb0:	f000 f99e 	bl	80132f0 <USBD_CtlSendStatus>
      break;
 8012fb4:	e00c      	b.n	8012fd0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8012fb6:	6839      	ldr	r1, [r7, #0]
 8012fb8:	6878      	ldr	r0, [r7, #4]
 8012fba:	f000 f8eb 	bl	8013194 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012fbe:	4b07      	ldr	r3, [pc, #28]	; (8012fdc <USBD_SetConfig+0x148>)
 8012fc0:	781b      	ldrb	r3, [r3, #0]
 8012fc2:	4619      	mov	r1, r3
 8012fc4:	6878      	ldr	r0, [r7, #4]
 8012fc6:	f7ff f8ce 	bl	8012166 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012fca:	2303      	movs	r3, #3
 8012fcc:	73fb      	strb	r3, [r7, #15]
      break;
 8012fce:	bf00      	nop
  }

  return ret;
 8012fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	3710      	adds	r7, #16
 8012fd6:	46bd      	mov	sp, r7
 8012fd8:	bd80      	pop	{r7, pc}
 8012fda:	bf00      	nop
 8012fdc:	20000200 	.word	0x20000200

08012fe0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012fe0:	b580      	push	{r7, lr}
 8012fe2:	b082      	sub	sp, #8
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	6078      	str	r0, [r7, #4]
 8012fe8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012fea:	683b      	ldr	r3, [r7, #0]
 8012fec:	88db      	ldrh	r3, [r3, #6]
 8012fee:	2b01      	cmp	r3, #1
 8012ff0:	d004      	beq.n	8012ffc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012ff2:	6839      	ldr	r1, [r7, #0]
 8012ff4:	6878      	ldr	r0, [r7, #4]
 8012ff6:	f000 f8cd 	bl	8013194 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012ffa:	e023      	b.n	8013044 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013002:	b2db      	uxtb	r3, r3
 8013004:	2b02      	cmp	r3, #2
 8013006:	dc02      	bgt.n	801300e <USBD_GetConfig+0x2e>
 8013008:	2b00      	cmp	r3, #0
 801300a:	dc03      	bgt.n	8013014 <USBD_GetConfig+0x34>
 801300c:	e015      	b.n	801303a <USBD_GetConfig+0x5a>
 801300e:	2b03      	cmp	r3, #3
 8013010:	d00b      	beq.n	801302a <USBD_GetConfig+0x4a>
 8013012:	e012      	b.n	801303a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	2200      	movs	r2, #0
 8013018:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	3308      	adds	r3, #8
 801301e:	2201      	movs	r2, #1
 8013020:	4619      	mov	r1, r3
 8013022:	6878      	ldr	r0, [r7, #4]
 8013024:	f000 f927 	bl	8013276 <USBD_CtlSendData>
        break;
 8013028:	e00c      	b.n	8013044 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	3304      	adds	r3, #4
 801302e:	2201      	movs	r2, #1
 8013030:	4619      	mov	r1, r3
 8013032:	6878      	ldr	r0, [r7, #4]
 8013034:	f000 f91f 	bl	8013276 <USBD_CtlSendData>
        break;
 8013038:	e004      	b.n	8013044 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801303a:	6839      	ldr	r1, [r7, #0]
 801303c:	6878      	ldr	r0, [r7, #4]
 801303e:	f000 f8a9 	bl	8013194 <USBD_CtlError>
        break;
 8013042:	bf00      	nop
}
 8013044:	bf00      	nop
 8013046:	3708      	adds	r7, #8
 8013048:	46bd      	mov	sp, r7
 801304a:	bd80      	pop	{r7, pc}

0801304c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801304c:	b580      	push	{r7, lr}
 801304e:	b082      	sub	sp, #8
 8013050:	af00      	add	r7, sp, #0
 8013052:	6078      	str	r0, [r7, #4]
 8013054:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801305c:	b2db      	uxtb	r3, r3
 801305e:	3b01      	subs	r3, #1
 8013060:	2b02      	cmp	r3, #2
 8013062:	d81e      	bhi.n	80130a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013064:	683b      	ldr	r3, [r7, #0]
 8013066:	88db      	ldrh	r3, [r3, #6]
 8013068:	2b02      	cmp	r3, #2
 801306a:	d004      	beq.n	8013076 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801306c:	6839      	ldr	r1, [r7, #0]
 801306e:	6878      	ldr	r0, [r7, #4]
 8013070:	f000 f890 	bl	8013194 <USBD_CtlError>
        break;
 8013074:	e01a      	b.n	80130ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	2201      	movs	r2, #1
 801307a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8013082:	2b00      	cmp	r3, #0
 8013084:	d005      	beq.n	8013092 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	68db      	ldr	r3, [r3, #12]
 801308a:	f043 0202 	orr.w	r2, r3, #2
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	330c      	adds	r3, #12
 8013096:	2202      	movs	r2, #2
 8013098:	4619      	mov	r1, r3
 801309a:	6878      	ldr	r0, [r7, #4]
 801309c:	f000 f8eb 	bl	8013276 <USBD_CtlSendData>
      break;
 80130a0:	e004      	b.n	80130ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80130a2:	6839      	ldr	r1, [r7, #0]
 80130a4:	6878      	ldr	r0, [r7, #4]
 80130a6:	f000 f875 	bl	8013194 <USBD_CtlError>
      break;
 80130aa:	bf00      	nop
  }
}
 80130ac:	bf00      	nop
 80130ae:	3708      	adds	r7, #8
 80130b0:	46bd      	mov	sp, r7
 80130b2:	bd80      	pop	{r7, pc}

080130b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b082      	sub	sp, #8
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	6078      	str	r0, [r7, #4]
 80130bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80130be:	683b      	ldr	r3, [r7, #0]
 80130c0:	885b      	ldrh	r3, [r3, #2]
 80130c2:	2b01      	cmp	r3, #1
 80130c4:	d106      	bne.n	80130d4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	2201      	movs	r2, #1
 80130ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80130ce:	6878      	ldr	r0, [r7, #4]
 80130d0:	f000 f90e 	bl	80132f0 <USBD_CtlSendStatus>
  }
}
 80130d4:	bf00      	nop
 80130d6:	3708      	adds	r7, #8
 80130d8:	46bd      	mov	sp, r7
 80130da:	bd80      	pop	{r7, pc}

080130dc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80130dc:	b580      	push	{r7, lr}
 80130de:	b082      	sub	sp, #8
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	6078      	str	r0, [r7, #4]
 80130e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80130ec:	b2db      	uxtb	r3, r3
 80130ee:	3b01      	subs	r3, #1
 80130f0:	2b02      	cmp	r3, #2
 80130f2:	d80b      	bhi.n	801310c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80130f4:	683b      	ldr	r3, [r7, #0]
 80130f6:	885b      	ldrh	r3, [r3, #2]
 80130f8:	2b01      	cmp	r3, #1
 80130fa:	d10c      	bne.n	8013116 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	2200      	movs	r2, #0
 8013100:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8013104:	6878      	ldr	r0, [r7, #4]
 8013106:	f000 f8f3 	bl	80132f0 <USBD_CtlSendStatus>
      }
      break;
 801310a:	e004      	b.n	8013116 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801310c:	6839      	ldr	r1, [r7, #0]
 801310e:	6878      	ldr	r0, [r7, #4]
 8013110:	f000 f840 	bl	8013194 <USBD_CtlError>
      break;
 8013114:	e000      	b.n	8013118 <USBD_ClrFeature+0x3c>
      break;
 8013116:	bf00      	nop
  }
}
 8013118:	bf00      	nop
 801311a:	3708      	adds	r7, #8
 801311c:	46bd      	mov	sp, r7
 801311e:	bd80      	pop	{r7, pc}

08013120 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8013120:	b580      	push	{r7, lr}
 8013122:	b084      	sub	sp, #16
 8013124:	af00      	add	r7, sp, #0
 8013126:	6078      	str	r0, [r7, #4]
 8013128:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801312a:	683b      	ldr	r3, [r7, #0]
 801312c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	781a      	ldrb	r2, [r3, #0]
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	3301      	adds	r3, #1
 801313a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	781a      	ldrb	r2, [r3, #0]
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	3301      	adds	r3, #1
 8013148:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801314a:	68f8      	ldr	r0, [r7, #12]
 801314c:	f7ff fa92 	bl	8012674 <SWAPBYTE>
 8013150:	4603      	mov	r3, r0
 8013152:	461a      	mov	r2, r3
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	3301      	adds	r3, #1
 801315c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	3301      	adds	r3, #1
 8013162:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8013164:	68f8      	ldr	r0, [r7, #12]
 8013166:	f7ff fa85 	bl	8012674 <SWAPBYTE>
 801316a:	4603      	mov	r3, r0
 801316c:	461a      	mov	r2, r3
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8013172:	68fb      	ldr	r3, [r7, #12]
 8013174:	3301      	adds	r3, #1
 8013176:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	3301      	adds	r3, #1
 801317c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801317e:	68f8      	ldr	r0, [r7, #12]
 8013180:	f7ff fa78 	bl	8012674 <SWAPBYTE>
 8013184:	4603      	mov	r3, r0
 8013186:	461a      	mov	r2, r3
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	80da      	strh	r2, [r3, #6]
}
 801318c:	bf00      	nop
 801318e:	3710      	adds	r7, #16
 8013190:	46bd      	mov	sp, r7
 8013192:	bd80      	pop	{r7, pc}

08013194 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013194:	b580      	push	{r7, lr}
 8013196:	b082      	sub	sp, #8
 8013198:	af00      	add	r7, sp, #0
 801319a:	6078      	str	r0, [r7, #4]
 801319c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801319e:	2180      	movs	r1, #128	; 0x80
 80131a0:	6878      	ldr	r0, [r7, #4]
 80131a2:	f003 fbc2 	bl	801692a <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80131a6:	2100      	movs	r1, #0
 80131a8:	6878      	ldr	r0, [r7, #4]
 80131aa:	f003 fbbe 	bl	801692a <USBD_LL_StallEP>
}
 80131ae:	bf00      	nop
 80131b0:	3708      	adds	r7, #8
 80131b2:	46bd      	mov	sp, r7
 80131b4:	bd80      	pop	{r7, pc}

080131b6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80131b6:	b580      	push	{r7, lr}
 80131b8:	b086      	sub	sp, #24
 80131ba:	af00      	add	r7, sp, #0
 80131bc:	60f8      	str	r0, [r7, #12]
 80131be:	60b9      	str	r1, [r7, #8]
 80131c0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80131c2:	2300      	movs	r3, #0
 80131c4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d036      	beq.n	801323a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80131d0:	6938      	ldr	r0, [r7, #16]
 80131d2:	f000 f836 	bl	8013242 <USBD_GetLen>
 80131d6:	4603      	mov	r3, r0
 80131d8:	3301      	adds	r3, #1
 80131da:	b29b      	uxth	r3, r3
 80131dc:	005b      	lsls	r3, r3, #1
 80131de:	b29a      	uxth	r2, r3
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80131e4:	7dfb      	ldrb	r3, [r7, #23]
 80131e6:	68ba      	ldr	r2, [r7, #8]
 80131e8:	4413      	add	r3, r2
 80131ea:	687a      	ldr	r2, [r7, #4]
 80131ec:	7812      	ldrb	r2, [r2, #0]
 80131ee:	701a      	strb	r2, [r3, #0]
  idx++;
 80131f0:	7dfb      	ldrb	r3, [r7, #23]
 80131f2:	3301      	adds	r3, #1
 80131f4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80131f6:	7dfb      	ldrb	r3, [r7, #23]
 80131f8:	68ba      	ldr	r2, [r7, #8]
 80131fa:	4413      	add	r3, r2
 80131fc:	2203      	movs	r2, #3
 80131fe:	701a      	strb	r2, [r3, #0]
  idx++;
 8013200:	7dfb      	ldrb	r3, [r7, #23]
 8013202:	3301      	adds	r3, #1
 8013204:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8013206:	e013      	b.n	8013230 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8013208:	7dfb      	ldrb	r3, [r7, #23]
 801320a:	68ba      	ldr	r2, [r7, #8]
 801320c:	4413      	add	r3, r2
 801320e:	693a      	ldr	r2, [r7, #16]
 8013210:	7812      	ldrb	r2, [r2, #0]
 8013212:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8013214:	693b      	ldr	r3, [r7, #16]
 8013216:	3301      	adds	r3, #1
 8013218:	613b      	str	r3, [r7, #16]
    idx++;
 801321a:	7dfb      	ldrb	r3, [r7, #23]
 801321c:	3301      	adds	r3, #1
 801321e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8013220:	7dfb      	ldrb	r3, [r7, #23]
 8013222:	68ba      	ldr	r2, [r7, #8]
 8013224:	4413      	add	r3, r2
 8013226:	2200      	movs	r2, #0
 8013228:	701a      	strb	r2, [r3, #0]
    idx++;
 801322a:	7dfb      	ldrb	r3, [r7, #23]
 801322c:	3301      	adds	r3, #1
 801322e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8013230:	693b      	ldr	r3, [r7, #16]
 8013232:	781b      	ldrb	r3, [r3, #0]
 8013234:	2b00      	cmp	r3, #0
 8013236:	d1e7      	bne.n	8013208 <USBD_GetString+0x52>
 8013238:	e000      	b.n	801323c <USBD_GetString+0x86>
    return;
 801323a:	bf00      	nop
  }
}
 801323c:	3718      	adds	r7, #24
 801323e:	46bd      	mov	sp, r7
 8013240:	bd80      	pop	{r7, pc}

08013242 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8013242:	b480      	push	{r7}
 8013244:	b085      	sub	sp, #20
 8013246:	af00      	add	r7, sp, #0
 8013248:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801324a:	2300      	movs	r3, #0
 801324c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8013252:	e005      	b.n	8013260 <USBD_GetLen+0x1e>
  {
    len++;
 8013254:	7bfb      	ldrb	r3, [r7, #15]
 8013256:	3301      	adds	r3, #1
 8013258:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801325a:	68bb      	ldr	r3, [r7, #8]
 801325c:	3301      	adds	r3, #1
 801325e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8013260:	68bb      	ldr	r3, [r7, #8]
 8013262:	781b      	ldrb	r3, [r3, #0]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d1f5      	bne.n	8013254 <USBD_GetLen+0x12>
  }

  return len;
 8013268:	7bfb      	ldrb	r3, [r7, #15]
}
 801326a:	4618      	mov	r0, r3
 801326c:	3714      	adds	r7, #20
 801326e:	46bd      	mov	sp, r7
 8013270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013274:	4770      	bx	lr

08013276 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8013276:	b580      	push	{r7, lr}
 8013278:	b084      	sub	sp, #16
 801327a:	af00      	add	r7, sp, #0
 801327c:	60f8      	str	r0, [r7, #12]
 801327e:	60b9      	str	r1, [r7, #8]
 8013280:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	2202      	movs	r2, #2
 8013286:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	687a      	ldr	r2, [r7, #4]
 801328e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	687a      	ldr	r2, [r7, #4]
 8013294:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	68ba      	ldr	r2, [r7, #8]
 801329a:	2100      	movs	r1, #0
 801329c:	68f8      	ldr	r0, [r7, #12]
 801329e:	f003 fbcd 	bl	8016a3c <USBD_LL_Transmit>

  return USBD_OK;
 80132a2:	2300      	movs	r3, #0
}
 80132a4:	4618      	mov	r0, r3
 80132a6:	3710      	adds	r7, #16
 80132a8:	46bd      	mov	sp, r7
 80132aa:	bd80      	pop	{r7, pc}

080132ac <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80132ac:	b580      	push	{r7, lr}
 80132ae:	b084      	sub	sp, #16
 80132b0:	af00      	add	r7, sp, #0
 80132b2:	60f8      	str	r0, [r7, #12]
 80132b4:	60b9      	str	r1, [r7, #8]
 80132b6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	68ba      	ldr	r2, [r7, #8]
 80132bc:	2100      	movs	r1, #0
 80132be:	68f8      	ldr	r0, [r7, #12]
 80132c0:	f003 fbbc 	bl	8016a3c <USBD_LL_Transmit>

  return USBD_OK;
 80132c4:	2300      	movs	r3, #0
}
 80132c6:	4618      	mov	r0, r3
 80132c8:	3710      	adds	r7, #16
 80132ca:	46bd      	mov	sp, r7
 80132cc:	bd80      	pop	{r7, pc}

080132ce <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80132ce:	b580      	push	{r7, lr}
 80132d0:	b084      	sub	sp, #16
 80132d2:	af00      	add	r7, sp, #0
 80132d4:	60f8      	str	r0, [r7, #12]
 80132d6:	60b9      	str	r1, [r7, #8]
 80132d8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	68ba      	ldr	r2, [r7, #8]
 80132de:	2100      	movs	r1, #0
 80132e0:	68f8      	ldr	r0, [r7, #12]
 80132e2:	f003 fbcc 	bl	8016a7e <USBD_LL_PrepareReceive>

  return USBD_OK;
 80132e6:	2300      	movs	r3, #0
}
 80132e8:	4618      	mov	r0, r3
 80132ea:	3710      	adds	r7, #16
 80132ec:	46bd      	mov	sp, r7
 80132ee:	bd80      	pop	{r7, pc}

080132f0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80132f0:	b580      	push	{r7, lr}
 80132f2:	b082      	sub	sp, #8
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	2204      	movs	r2, #4
 80132fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8013300:	2300      	movs	r3, #0
 8013302:	2200      	movs	r2, #0
 8013304:	2100      	movs	r1, #0
 8013306:	6878      	ldr	r0, [r7, #4]
 8013308:	f003 fb98 	bl	8016a3c <USBD_LL_Transmit>

  return USBD_OK;
 801330c:	2300      	movs	r3, #0
}
 801330e:	4618      	mov	r0, r3
 8013310:	3708      	adds	r7, #8
 8013312:	46bd      	mov	sp, r7
 8013314:	bd80      	pop	{r7, pc}

08013316 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8013316:	b580      	push	{r7, lr}
 8013318:	b082      	sub	sp, #8
 801331a:	af00      	add	r7, sp, #0
 801331c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	2205      	movs	r2, #5
 8013322:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013326:	2300      	movs	r3, #0
 8013328:	2200      	movs	r2, #0
 801332a:	2100      	movs	r1, #0
 801332c:	6878      	ldr	r0, [r7, #4]
 801332e:	f003 fba6 	bl	8016a7e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013332:	2300      	movs	r3, #0
}
 8013334:	4618      	mov	r0, r3
 8013336:	3708      	adds	r7, #8
 8013338:	46bd      	mov	sp, r7
 801333a:	bd80      	pop	{r7, pc}

0801333c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801333c:	b580      	push	{r7, lr}
 801333e:	b084      	sub	sp, #16
 8013340:	af00      	add	r7, sp, #0
 8013342:	4603      	mov	r3, r0
 8013344:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8013346:	79fb      	ldrb	r3, [r7, #7]
 8013348:	4a08      	ldr	r2, [pc, #32]	; (801336c <disk_status+0x30>)
 801334a:	009b      	lsls	r3, r3, #2
 801334c:	4413      	add	r3, r2
 801334e:	685b      	ldr	r3, [r3, #4]
 8013350:	685b      	ldr	r3, [r3, #4]
 8013352:	79fa      	ldrb	r2, [r7, #7]
 8013354:	4905      	ldr	r1, [pc, #20]	; (801336c <disk_status+0x30>)
 8013356:	440a      	add	r2, r1
 8013358:	7a12      	ldrb	r2, [r2, #8]
 801335a:	4610      	mov	r0, r2
 801335c:	4798      	blx	r3
 801335e:	4603      	mov	r3, r0
 8013360:	73fb      	strb	r3, [r7, #15]
  return stat;
 8013362:	7bfb      	ldrb	r3, [r7, #15]
}
 8013364:	4618      	mov	r0, r3
 8013366:	3710      	adds	r7, #16
 8013368:	46bd      	mov	sp, r7
 801336a:	bd80      	pop	{r7, pc}
 801336c:	2000040c 	.word	0x2000040c

08013370 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8013370:	b580      	push	{r7, lr}
 8013372:	b084      	sub	sp, #16
 8013374:	af00      	add	r7, sp, #0
 8013376:	4603      	mov	r3, r0
 8013378:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801337a:	2300      	movs	r3, #0
 801337c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801337e:	79fb      	ldrb	r3, [r7, #7]
 8013380:	4a0d      	ldr	r2, [pc, #52]	; (80133b8 <disk_initialize+0x48>)
 8013382:	5cd3      	ldrb	r3, [r2, r3]
 8013384:	2b00      	cmp	r3, #0
 8013386:	d111      	bne.n	80133ac <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8013388:	79fb      	ldrb	r3, [r7, #7]
 801338a:	4a0b      	ldr	r2, [pc, #44]	; (80133b8 <disk_initialize+0x48>)
 801338c:	2101      	movs	r1, #1
 801338e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8013390:	79fb      	ldrb	r3, [r7, #7]
 8013392:	4a09      	ldr	r2, [pc, #36]	; (80133b8 <disk_initialize+0x48>)
 8013394:	009b      	lsls	r3, r3, #2
 8013396:	4413      	add	r3, r2
 8013398:	685b      	ldr	r3, [r3, #4]
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	79fa      	ldrb	r2, [r7, #7]
 801339e:	4906      	ldr	r1, [pc, #24]	; (80133b8 <disk_initialize+0x48>)
 80133a0:	440a      	add	r2, r1
 80133a2:	7a12      	ldrb	r2, [r2, #8]
 80133a4:	4610      	mov	r0, r2
 80133a6:	4798      	blx	r3
 80133a8:	4603      	mov	r3, r0
 80133aa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80133ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80133ae:	4618      	mov	r0, r3
 80133b0:	3710      	adds	r7, #16
 80133b2:	46bd      	mov	sp, r7
 80133b4:	bd80      	pop	{r7, pc}
 80133b6:	bf00      	nop
 80133b8:	2000040c 	.word	0x2000040c

080133bc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80133bc:	b590      	push	{r4, r7, lr}
 80133be:	b087      	sub	sp, #28
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	60b9      	str	r1, [r7, #8]
 80133c4:	607a      	str	r2, [r7, #4]
 80133c6:	603b      	str	r3, [r7, #0]
 80133c8:	4603      	mov	r3, r0
 80133ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80133cc:	7bfb      	ldrb	r3, [r7, #15]
 80133ce:	4a0a      	ldr	r2, [pc, #40]	; (80133f8 <disk_read+0x3c>)
 80133d0:	009b      	lsls	r3, r3, #2
 80133d2:	4413      	add	r3, r2
 80133d4:	685b      	ldr	r3, [r3, #4]
 80133d6:	689c      	ldr	r4, [r3, #8]
 80133d8:	7bfb      	ldrb	r3, [r7, #15]
 80133da:	4a07      	ldr	r2, [pc, #28]	; (80133f8 <disk_read+0x3c>)
 80133dc:	4413      	add	r3, r2
 80133de:	7a18      	ldrb	r0, [r3, #8]
 80133e0:	683b      	ldr	r3, [r7, #0]
 80133e2:	687a      	ldr	r2, [r7, #4]
 80133e4:	68b9      	ldr	r1, [r7, #8]
 80133e6:	47a0      	blx	r4
 80133e8:	4603      	mov	r3, r0
 80133ea:	75fb      	strb	r3, [r7, #23]
  return res;
 80133ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80133ee:	4618      	mov	r0, r3
 80133f0:	371c      	adds	r7, #28
 80133f2:	46bd      	mov	sp, r7
 80133f4:	bd90      	pop	{r4, r7, pc}
 80133f6:	bf00      	nop
 80133f8:	2000040c 	.word	0x2000040c

080133fc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80133fc:	b590      	push	{r4, r7, lr}
 80133fe:	b087      	sub	sp, #28
 8013400:	af00      	add	r7, sp, #0
 8013402:	60b9      	str	r1, [r7, #8]
 8013404:	607a      	str	r2, [r7, #4]
 8013406:	603b      	str	r3, [r7, #0]
 8013408:	4603      	mov	r3, r0
 801340a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801340c:	7bfb      	ldrb	r3, [r7, #15]
 801340e:	4a0a      	ldr	r2, [pc, #40]	; (8013438 <disk_write+0x3c>)
 8013410:	009b      	lsls	r3, r3, #2
 8013412:	4413      	add	r3, r2
 8013414:	685b      	ldr	r3, [r3, #4]
 8013416:	68dc      	ldr	r4, [r3, #12]
 8013418:	7bfb      	ldrb	r3, [r7, #15]
 801341a:	4a07      	ldr	r2, [pc, #28]	; (8013438 <disk_write+0x3c>)
 801341c:	4413      	add	r3, r2
 801341e:	7a18      	ldrb	r0, [r3, #8]
 8013420:	683b      	ldr	r3, [r7, #0]
 8013422:	687a      	ldr	r2, [r7, #4]
 8013424:	68b9      	ldr	r1, [r7, #8]
 8013426:	47a0      	blx	r4
 8013428:	4603      	mov	r3, r0
 801342a:	75fb      	strb	r3, [r7, #23]
  return res;
 801342c:	7dfb      	ldrb	r3, [r7, #23]
}
 801342e:	4618      	mov	r0, r3
 8013430:	371c      	adds	r7, #28
 8013432:	46bd      	mov	sp, r7
 8013434:	bd90      	pop	{r4, r7, pc}
 8013436:	bf00      	nop
 8013438:	2000040c 	.word	0x2000040c

0801343c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801343c:	b580      	push	{r7, lr}
 801343e:	b084      	sub	sp, #16
 8013440:	af00      	add	r7, sp, #0
 8013442:	4603      	mov	r3, r0
 8013444:	603a      	str	r2, [r7, #0]
 8013446:	71fb      	strb	r3, [r7, #7]
 8013448:	460b      	mov	r3, r1
 801344a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801344c:	79fb      	ldrb	r3, [r7, #7]
 801344e:	4a09      	ldr	r2, [pc, #36]	; (8013474 <disk_ioctl+0x38>)
 8013450:	009b      	lsls	r3, r3, #2
 8013452:	4413      	add	r3, r2
 8013454:	685b      	ldr	r3, [r3, #4]
 8013456:	691b      	ldr	r3, [r3, #16]
 8013458:	79fa      	ldrb	r2, [r7, #7]
 801345a:	4906      	ldr	r1, [pc, #24]	; (8013474 <disk_ioctl+0x38>)
 801345c:	440a      	add	r2, r1
 801345e:	7a10      	ldrb	r0, [r2, #8]
 8013460:	79b9      	ldrb	r1, [r7, #6]
 8013462:	683a      	ldr	r2, [r7, #0]
 8013464:	4798      	blx	r3
 8013466:	4603      	mov	r3, r0
 8013468:	73fb      	strb	r3, [r7, #15]
  return res;
 801346a:	7bfb      	ldrb	r3, [r7, #15]
}
 801346c:	4618      	mov	r0, r3
 801346e:	3710      	adds	r7, #16
 8013470:	46bd      	mov	sp, r7
 8013472:	bd80      	pop	{r7, pc}
 8013474:	2000040c 	.word	0x2000040c

08013478 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8013478:	b480      	push	{r7}
 801347a:	b085      	sub	sp, #20
 801347c:	af00      	add	r7, sp, #0
 801347e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	3301      	adds	r3, #1
 8013484:	781b      	ldrb	r3, [r3, #0]
 8013486:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8013488:	89fb      	ldrh	r3, [r7, #14]
 801348a:	021b      	lsls	r3, r3, #8
 801348c:	b21a      	sxth	r2, r3
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	781b      	ldrb	r3, [r3, #0]
 8013492:	b21b      	sxth	r3, r3
 8013494:	4313      	orrs	r3, r2
 8013496:	b21b      	sxth	r3, r3
 8013498:	81fb      	strh	r3, [r7, #14]
	return rv;
 801349a:	89fb      	ldrh	r3, [r7, #14]
}
 801349c:	4618      	mov	r0, r3
 801349e:	3714      	adds	r7, #20
 80134a0:	46bd      	mov	sp, r7
 80134a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a6:	4770      	bx	lr

080134a8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80134a8:	b480      	push	{r7}
 80134aa:	b085      	sub	sp, #20
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	3303      	adds	r3, #3
 80134b4:	781b      	ldrb	r3, [r3, #0]
 80134b6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	021b      	lsls	r3, r3, #8
 80134bc:	687a      	ldr	r2, [r7, #4]
 80134be:	3202      	adds	r2, #2
 80134c0:	7812      	ldrb	r2, [r2, #0]
 80134c2:	4313      	orrs	r3, r2
 80134c4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	021b      	lsls	r3, r3, #8
 80134ca:	687a      	ldr	r2, [r7, #4]
 80134cc:	3201      	adds	r2, #1
 80134ce:	7812      	ldrb	r2, [r2, #0]
 80134d0:	4313      	orrs	r3, r2
 80134d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	021b      	lsls	r3, r3, #8
 80134d8:	687a      	ldr	r2, [r7, #4]
 80134da:	7812      	ldrb	r2, [r2, #0]
 80134dc:	4313      	orrs	r3, r2
 80134de:	60fb      	str	r3, [r7, #12]
	return rv;
 80134e0:	68fb      	ldr	r3, [r7, #12]
}
 80134e2:	4618      	mov	r0, r3
 80134e4:	3714      	adds	r7, #20
 80134e6:	46bd      	mov	sp, r7
 80134e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ec:	4770      	bx	lr

080134ee <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80134ee:	b480      	push	{r7}
 80134f0:	b083      	sub	sp, #12
 80134f2:	af00      	add	r7, sp, #0
 80134f4:	6078      	str	r0, [r7, #4]
 80134f6:	460b      	mov	r3, r1
 80134f8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	1c5a      	adds	r2, r3, #1
 80134fe:	607a      	str	r2, [r7, #4]
 8013500:	887a      	ldrh	r2, [r7, #2]
 8013502:	b2d2      	uxtb	r2, r2
 8013504:	701a      	strb	r2, [r3, #0]
 8013506:	887b      	ldrh	r3, [r7, #2]
 8013508:	0a1b      	lsrs	r3, r3, #8
 801350a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	1c5a      	adds	r2, r3, #1
 8013510:	607a      	str	r2, [r7, #4]
 8013512:	887a      	ldrh	r2, [r7, #2]
 8013514:	b2d2      	uxtb	r2, r2
 8013516:	701a      	strb	r2, [r3, #0]
}
 8013518:	bf00      	nop
 801351a:	370c      	adds	r7, #12
 801351c:	46bd      	mov	sp, r7
 801351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013522:	4770      	bx	lr

08013524 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8013524:	b480      	push	{r7}
 8013526:	b083      	sub	sp, #12
 8013528:	af00      	add	r7, sp, #0
 801352a:	6078      	str	r0, [r7, #4]
 801352c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	1c5a      	adds	r2, r3, #1
 8013532:	607a      	str	r2, [r7, #4]
 8013534:	683a      	ldr	r2, [r7, #0]
 8013536:	b2d2      	uxtb	r2, r2
 8013538:	701a      	strb	r2, [r3, #0]
 801353a:	683b      	ldr	r3, [r7, #0]
 801353c:	0a1b      	lsrs	r3, r3, #8
 801353e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	1c5a      	adds	r2, r3, #1
 8013544:	607a      	str	r2, [r7, #4]
 8013546:	683a      	ldr	r2, [r7, #0]
 8013548:	b2d2      	uxtb	r2, r2
 801354a:	701a      	strb	r2, [r3, #0]
 801354c:	683b      	ldr	r3, [r7, #0]
 801354e:	0a1b      	lsrs	r3, r3, #8
 8013550:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	1c5a      	adds	r2, r3, #1
 8013556:	607a      	str	r2, [r7, #4]
 8013558:	683a      	ldr	r2, [r7, #0]
 801355a:	b2d2      	uxtb	r2, r2
 801355c:	701a      	strb	r2, [r3, #0]
 801355e:	683b      	ldr	r3, [r7, #0]
 8013560:	0a1b      	lsrs	r3, r3, #8
 8013562:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	1c5a      	adds	r2, r3, #1
 8013568:	607a      	str	r2, [r7, #4]
 801356a:	683a      	ldr	r2, [r7, #0]
 801356c:	b2d2      	uxtb	r2, r2
 801356e:	701a      	strb	r2, [r3, #0]
}
 8013570:	bf00      	nop
 8013572:	370c      	adds	r7, #12
 8013574:	46bd      	mov	sp, r7
 8013576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801357a:	4770      	bx	lr

0801357c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801357c:	b480      	push	{r7}
 801357e:	b087      	sub	sp, #28
 8013580:	af00      	add	r7, sp, #0
 8013582:	60f8      	str	r0, [r7, #12]
 8013584:	60b9      	str	r1, [r7, #8]
 8013586:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801358c:	68bb      	ldr	r3, [r7, #8]
 801358e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	2b00      	cmp	r3, #0
 8013594:	d00d      	beq.n	80135b2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8013596:	693a      	ldr	r2, [r7, #16]
 8013598:	1c53      	adds	r3, r2, #1
 801359a:	613b      	str	r3, [r7, #16]
 801359c:	697b      	ldr	r3, [r7, #20]
 801359e:	1c59      	adds	r1, r3, #1
 80135a0:	6179      	str	r1, [r7, #20]
 80135a2:	7812      	ldrb	r2, [r2, #0]
 80135a4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	3b01      	subs	r3, #1
 80135aa:	607b      	str	r3, [r7, #4]
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d1f1      	bne.n	8013596 <mem_cpy+0x1a>
	}
}
 80135b2:	bf00      	nop
 80135b4:	371c      	adds	r7, #28
 80135b6:	46bd      	mov	sp, r7
 80135b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135bc:	4770      	bx	lr

080135be <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80135be:	b480      	push	{r7}
 80135c0:	b087      	sub	sp, #28
 80135c2:	af00      	add	r7, sp, #0
 80135c4:	60f8      	str	r0, [r7, #12]
 80135c6:	60b9      	str	r1, [r7, #8]
 80135c8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80135ce:	697b      	ldr	r3, [r7, #20]
 80135d0:	1c5a      	adds	r2, r3, #1
 80135d2:	617a      	str	r2, [r7, #20]
 80135d4:	68ba      	ldr	r2, [r7, #8]
 80135d6:	b2d2      	uxtb	r2, r2
 80135d8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	3b01      	subs	r3, #1
 80135de:	607b      	str	r3, [r7, #4]
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	d1f3      	bne.n	80135ce <mem_set+0x10>
}
 80135e6:	bf00      	nop
 80135e8:	bf00      	nop
 80135ea:	371c      	adds	r7, #28
 80135ec:	46bd      	mov	sp, r7
 80135ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f2:	4770      	bx	lr

080135f4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80135f4:	b480      	push	{r7}
 80135f6:	b089      	sub	sp, #36	; 0x24
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	60f8      	str	r0, [r7, #12]
 80135fc:	60b9      	str	r1, [r7, #8]
 80135fe:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	61fb      	str	r3, [r7, #28]
 8013604:	68bb      	ldr	r3, [r7, #8]
 8013606:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8013608:	2300      	movs	r3, #0
 801360a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801360c:	69fb      	ldr	r3, [r7, #28]
 801360e:	1c5a      	adds	r2, r3, #1
 8013610:	61fa      	str	r2, [r7, #28]
 8013612:	781b      	ldrb	r3, [r3, #0]
 8013614:	4619      	mov	r1, r3
 8013616:	69bb      	ldr	r3, [r7, #24]
 8013618:	1c5a      	adds	r2, r3, #1
 801361a:	61ba      	str	r2, [r7, #24]
 801361c:	781b      	ldrb	r3, [r3, #0]
 801361e:	1acb      	subs	r3, r1, r3
 8013620:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	3b01      	subs	r3, #1
 8013626:	607b      	str	r3, [r7, #4]
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	2b00      	cmp	r3, #0
 801362c:	d002      	beq.n	8013634 <mem_cmp+0x40>
 801362e:	697b      	ldr	r3, [r7, #20]
 8013630:	2b00      	cmp	r3, #0
 8013632:	d0eb      	beq.n	801360c <mem_cmp+0x18>

	return r;
 8013634:	697b      	ldr	r3, [r7, #20]
}
 8013636:	4618      	mov	r0, r3
 8013638:	3724      	adds	r7, #36	; 0x24
 801363a:	46bd      	mov	sp, r7
 801363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013640:	4770      	bx	lr

08013642 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8013642:	b480      	push	{r7}
 8013644:	b083      	sub	sp, #12
 8013646:	af00      	add	r7, sp, #0
 8013648:	6078      	str	r0, [r7, #4]
 801364a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801364c:	e002      	b.n	8013654 <chk_chr+0x12>
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	3301      	adds	r3, #1
 8013652:	607b      	str	r3, [r7, #4]
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	781b      	ldrb	r3, [r3, #0]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d005      	beq.n	8013668 <chk_chr+0x26>
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	781b      	ldrb	r3, [r3, #0]
 8013660:	461a      	mov	r2, r3
 8013662:	683b      	ldr	r3, [r7, #0]
 8013664:	4293      	cmp	r3, r2
 8013666:	d1f2      	bne.n	801364e <chk_chr+0xc>
	return *str;
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	781b      	ldrb	r3, [r3, #0]
}
 801366c:	4618      	mov	r0, r3
 801366e:	370c      	adds	r7, #12
 8013670:	46bd      	mov	sp, r7
 8013672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013676:	4770      	bx	lr

08013678 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8013678:	b580      	push	{r7, lr}
 801367a:	b086      	sub	sp, #24
 801367c:	af00      	add	r7, sp, #0
 801367e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8013680:	2300      	movs	r3, #0
 8013682:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	78db      	ldrb	r3, [r3, #3]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d034      	beq.n	80136f6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013690:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8013692:	687b      	ldr	r3, [r7, #4]
 8013694:	7858      	ldrb	r0, [r3, #1]
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801369c:	2301      	movs	r3, #1
 801369e:	697a      	ldr	r2, [r7, #20]
 80136a0:	f7ff feac 	bl	80133fc <disk_write>
 80136a4:	4603      	mov	r3, r0
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d002      	beq.n	80136b0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80136aa:	2301      	movs	r3, #1
 80136ac:	73fb      	strb	r3, [r7, #15]
 80136ae:	e022      	b.n	80136f6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	2200      	movs	r2, #0
 80136b4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80136ba:	697a      	ldr	r2, [r7, #20]
 80136bc:	1ad2      	subs	r2, r2, r3
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	6a1b      	ldr	r3, [r3, #32]
 80136c2:	429a      	cmp	r2, r3
 80136c4:	d217      	bcs.n	80136f6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	789b      	ldrb	r3, [r3, #2]
 80136ca:	613b      	str	r3, [r7, #16]
 80136cc:	e010      	b.n	80136f0 <sync_window+0x78>
					wsect += fs->fsize;
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	6a1b      	ldr	r3, [r3, #32]
 80136d2:	697a      	ldr	r2, [r7, #20]
 80136d4:	4413      	add	r3, r2
 80136d6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	7858      	ldrb	r0, [r3, #1]
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80136e2:	2301      	movs	r3, #1
 80136e4:	697a      	ldr	r2, [r7, #20]
 80136e6:	f7ff fe89 	bl	80133fc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80136ea:	693b      	ldr	r3, [r7, #16]
 80136ec:	3b01      	subs	r3, #1
 80136ee:	613b      	str	r3, [r7, #16]
 80136f0:	693b      	ldr	r3, [r7, #16]
 80136f2:	2b01      	cmp	r3, #1
 80136f4:	d8eb      	bhi.n	80136ce <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80136f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80136f8:	4618      	mov	r0, r3
 80136fa:	3718      	adds	r7, #24
 80136fc:	46bd      	mov	sp, r7
 80136fe:	bd80      	pop	{r7, pc}

08013700 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8013700:	b580      	push	{r7, lr}
 8013702:	b084      	sub	sp, #16
 8013704:	af00      	add	r7, sp, #0
 8013706:	6078      	str	r0, [r7, #4]
 8013708:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801370a:	2300      	movs	r3, #0
 801370c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013712:	683a      	ldr	r2, [r7, #0]
 8013714:	429a      	cmp	r2, r3
 8013716:	d01b      	beq.n	8013750 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8013718:	6878      	ldr	r0, [r7, #4]
 801371a:	f7ff ffad 	bl	8013678 <sync_window>
 801371e:	4603      	mov	r3, r0
 8013720:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8013722:	7bfb      	ldrb	r3, [r7, #15]
 8013724:	2b00      	cmp	r3, #0
 8013726:	d113      	bne.n	8013750 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	7858      	ldrb	r0, [r3, #1]
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013732:	2301      	movs	r3, #1
 8013734:	683a      	ldr	r2, [r7, #0]
 8013736:	f7ff fe41 	bl	80133bc <disk_read>
 801373a:	4603      	mov	r3, r0
 801373c:	2b00      	cmp	r3, #0
 801373e:	d004      	beq.n	801374a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8013740:	f04f 33ff 	mov.w	r3, #4294967295
 8013744:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8013746:	2301      	movs	r3, #1
 8013748:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	683a      	ldr	r2, [r7, #0]
 801374e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8013750:	7bfb      	ldrb	r3, [r7, #15]
}
 8013752:	4618      	mov	r0, r3
 8013754:	3710      	adds	r7, #16
 8013756:	46bd      	mov	sp, r7
 8013758:	bd80      	pop	{r7, pc}
	...

0801375c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801375c:	b580      	push	{r7, lr}
 801375e:	b084      	sub	sp, #16
 8013760:	af00      	add	r7, sp, #0
 8013762:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8013764:	6878      	ldr	r0, [r7, #4]
 8013766:	f7ff ff87 	bl	8013678 <sync_window>
 801376a:	4603      	mov	r3, r0
 801376c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801376e:	7bfb      	ldrb	r3, [r7, #15]
 8013770:	2b00      	cmp	r3, #0
 8013772:	d159      	bne.n	8013828 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	781b      	ldrb	r3, [r3, #0]
 8013778:	2b03      	cmp	r3, #3
 801377a:	d149      	bne.n	8013810 <sync_fs+0xb4>
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	791b      	ldrb	r3, [r3, #4]
 8013780:	2b01      	cmp	r3, #1
 8013782:	d145      	bne.n	8013810 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	899b      	ldrh	r3, [r3, #12]
 801378e:	461a      	mov	r2, r3
 8013790:	2100      	movs	r1, #0
 8013792:	f7ff ff14 	bl	80135be <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	3338      	adds	r3, #56	; 0x38
 801379a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801379e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80137a2:	4618      	mov	r0, r3
 80137a4:	f7ff fea3 	bl	80134ee <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	3338      	adds	r3, #56	; 0x38
 80137ac:	4921      	ldr	r1, [pc, #132]	; (8013834 <sync_fs+0xd8>)
 80137ae:	4618      	mov	r0, r3
 80137b0:	f7ff feb8 	bl	8013524 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	3338      	adds	r3, #56	; 0x38
 80137b8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80137bc:	491e      	ldr	r1, [pc, #120]	; (8013838 <sync_fs+0xdc>)
 80137be:	4618      	mov	r0, r3
 80137c0:	f7ff feb0 	bl	8013524 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	3338      	adds	r3, #56	; 0x38
 80137c8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	699b      	ldr	r3, [r3, #24]
 80137d0:	4619      	mov	r1, r3
 80137d2:	4610      	mov	r0, r2
 80137d4:	f7ff fea6 	bl	8013524 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	3338      	adds	r3, #56	; 0x38
 80137dc:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	695b      	ldr	r3, [r3, #20]
 80137e4:	4619      	mov	r1, r3
 80137e6:	4610      	mov	r0, r2
 80137e8:	f7ff fe9c 	bl	8013524 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137f0:	1c5a      	adds	r2, r3, #1
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	7858      	ldrb	r0, [r3, #1]
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013804:	2301      	movs	r3, #1
 8013806:	f7ff fdf9 	bl	80133fc <disk_write>
			fs->fsi_flag = 0;
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	2200      	movs	r2, #0
 801380e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	785b      	ldrb	r3, [r3, #1]
 8013814:	2200      	movs	r2, #0
 8013816:	2100      	movs	r1, #0
 8013818:	4618      	mov	r0, r3
 801381a:	f7ff fe0f 	bl	801343c <disk_ioctl>
 801381e:	4603      	mov	r3, r0
 8013820:	2b00      	cmp	r3, #0
 8013822:	d001      	beq.n	8013828 <sync_fs+0xcc>
 8013824:	2301      	movs	r3, #1
 8013826:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8013828:	7bfb      	ldrb	r3, [r7, #15]
}
 801382a:	4618      	mov	r0, r3
 801382c:	3710      	adds	r7, #16
 801382e:	46bd      	mov	sp, r7
 8013830:	bd80      	pop	{r7, pc}
 8013832:	bf00      	nop
 8013834:	41615252 	.word	0x41615252
 8013838:	61417272 	.word	0x61417272

0801383c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801383c:	b480      	push	{r7}
 801383e:	b083      	sub	sp, #12
 8013840:	af00      	add	r7, sp, #0
 8013842:	6078      	str	r0, [r7, #4]
 8013844:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8013846:	683b      	ldr	r3, [r7, #0]
 8013848:	3b02      	subs	r3, #2
 801384a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	69db      	ldr	r3, [r3, #28]
 8013850:	3b02      	subs	r3, #2
 8013852:	683a      	ldr	r2, [r7, #0]
 8013854:	429a      	cmp	r2, r3
 8013856:	d301      	bcc.n	801385c <clust2sect+0x20>
 8013858:	2300      	movs	r3, #0
 801385a:	e008      	b.n	801386e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	895b      	ldrh	r3, [r3, #10]
 8013860:	461a      	mov	r2, r3
 8013862:	683b      	ldr	r3, [r7, #0]
 8013864:	fb03 f202 	mul.w	r2, r3, r2
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801386c:	4413      	add	r3, r2
}
 801386e:	4618      	mov	r0, r3
 8013870:	370c      	adds	r7, #12
 8013872:	46bd      	mov	sp, r7
 8013874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013878:	4770      	bx	lr

0801387a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801387a:	b580      	push	{r7, lr}
 801387c:	b086      	sub	sp, #24
 801387e:	af00      	add	r7, sp, #0
 8013880:	6078      	str	r0, [r7, #4]
 8013882:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801388a:	683b      	ldr	r3, [r7, #0]
 801388c:	2b01      	cmp	r3, #1
 801388e:	d904      	bls.n	801389a <get_fat+0x20>
 8013890:	693b      	ldr	r3, [r7, #16]
 8013892:	69db      	ldr	r3, [r3, #28]
 8013894:	683a      	ldr	r2, [r7, #0]
 8013896:	429a      	cmp	r2, r3
 8013898:	d302      	bcc.n	80138a0 <get_fat+0x26>
		val = 1;	/* Internal error */
 801389a:	2301      	movs	r3, #1
 801389c:	617b      	str	r3, [r7, #20]
 801389e:	e0bb      	b.n	8013a18 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80138a0:	f04f 33ff 	mov.w	r3, #4294967295
 80138a4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80138a6:	693b      	ldr	r3, [r7, #16]
 80138a8:	781b      	ldrb	r3, [r3, #0]
 80138aa:	2b03      	cmp	r3, #3
 80138ac:	f000 8083 	beq.w	80139b6 <get_fat+0x13c>
 80138b0:	2b03      	cmp	r3, #3
 80138b2:	f300 80a7 	bgt.w	8013a04 <get_fat+0x18a>
 80138b6:	2b01      	cmp	r3, #1
 80138b8:	d002      	beq.n	80138c0 <get_fat+0x46>
 80138ba:	2b02      	cmp	r3, #2
 80138bc:	d056      	beq.n	801396c <get_fat+0xf2>
 80138be:	e0a1      	b.n	8013a04 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80138c0:	683b      	ldr	r3, [r7, #0]
 80138c2:	60fb      	str	r3, [r7, #12]
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	085b      	lsrs	r3, r3, #1
 80138c8:	68fa      	ldr	r2, [r7, #12]
 80138ca:	4413      	add	r3, r2
 80138cc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80138ce:	693b      	ldr	r3, [r7, #16]
 80138d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80138d2:	693b      	ldr	r3, [r7, #16]
 80138d4:	899b      	ldrh	r3, [r3, #12]
 80138d6:	4619      	mov	r1, r3
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	fbb3 f3f1 	udiv	r3, r3, r1
 80138de:	4413      	add	r3, r2
 80138e0:	4619      	mov	r1, r3
 80138e2:	6938      	ldr	r0, [r7, #16]
 80138e4:	f7ff ff0c 	bl	8013700 <move_window>
 80138e8:	4603      	mov	r3, r0
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	f040 808d 	bne.w	8013a0a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	1c5a      	adds	r2, r3, #1
 80138f4:	60fa      	str	r2, [r7, #12]
 80138f6:	693a      	ldr	r2, [r7, #16]
 80138f8:	8992      	ldrh	r2, [r2, #12]
 80138fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80138fe:	fb02 f201 	mul.w	r2, r2, r1
 8013902:	1a9b      	subs	r3, r3, r2
 8013904:	693a      	ldr	r2, [r7, #16]
 8013906:	4413      	add	r3, r2
 8013908:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801390c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801390e:	693b      	ldr	r3, [r7, #16]
 8013910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013912:	693b      	ldr	r3, [r7, #16]
 8013914:	899b      	ldrh	r3, [r3, #12]
 8013916:	4619      	mov	r1, r3
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	fbb3 f3f1 	udiv	r3, r3, r1
 801391e:	4413      	add	r3, r2
 8013920:	4619      	mov	r1, r3
 8013922:	6938      	ldr	r0, [r7, #16]
 8013924:	f7ff feec 	bl	8013700 <move_window>
 8013928:	4603      	mov	r3, r0
 801392a:	2b00      	cmp	r3, #0
 801392c:	d16f      	bne.n	8013a0e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 801392e:	693b      	ldr	r3, [r7, #16]
 8013930:	899b      	ldrh	r3, [r3, #12]
 8013932:	461a      	mov	r2, r3
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	fbb3 f1f2 	udiv	r1, r3, r2
 801393a:	fb02 f201 	mul.w	r2, r2, r1
 801393e:	1a9b      	subs	r3, r3, r2
 8013940:	693a      	ldr	r2, [r7, #16]
 8013942:	4413      	add	r3, r2
 8013944:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013948:	021b      	lsls	r3, r3, #8
 801394a:	461a      	mov	r2, r3
 801394c:	68bb      	ldr	r3, [r7, #8]
 801394e:	4313      	orrs	r3, r2
 8013950:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8013952:	683b      	ldr	r3, [r7, #0]
 8013954:	f003 0301 	and.w	r3, r3, #1
 8013958:	2b00      	cmp	r3, #0
 801395a:	d002      	beq.n	8013962 <get_fat+0xe8>
 801395c:	68bb      	ldr	r3, [r7, #8]
 801395e:	091b      	lsrs	r3, r3, #4
 8013960:	e002      	b.n	8013968 <get_fat+0xee>
 8013962:	68bb      	ldr	r3, [r7, #8]
 8013964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013968:	617b      	str	r3, [r7, #20]
			break;
 801396a:	e055      	b.n	8013a18 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801396c:	693b      	ldr	r3, [r7, #16]
 801396e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013970:	693b      	ldr	r3, [r7, #16]
 8013972:	899b      	ldrh	r3, [r3, #12]
 8013974:	085b      	lsrs	r3, r3, #1
 8013976:	b29b      	uxth	r3, r3
 8013978:	4619      	mov	r1, r3
 801397a:	683b      	ldr	r3, [r7, #0]
 801397c:	fbb3 f3f1 	udiv	r3, r3, r1
 8013980:	4413      	add	r3, r2
 8013982:	4619      	mov	r1, r3
 8013984:	6938      	ldr	r0, [r7, #16]
 8013986:	f7ff febb 	bl	8013700 <move_window>
 801398a:	4603      	mov	r3, r0
 801398c:	2b00      	cmp	r3, #0
 801398e:	d140      	bne.n	8013a12 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8013990:	693b      	ldr	r3, [r7, #16]
 8013992:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013996:	683b      	ldr	r3, [r7, #0]
 8013998:	005b      	lsls	r3, r3, #1
 801399a:	693a      	ldr	r2, [r7, #16]
 801399c:	8992      	ldrh	r2, [r2, #12]
 801399e:	fbb3 f0f2 	udiv	r0, r3, r2
 80139a2:	fb02 f200 	mul.w	r2, r2, r0
 80139a6:	1a9b      	subs	r3, r3, r2
 80139a8:	440b      	add	r3, r1
 80139aa:	4618      	mov	r0, r3
 80139ac:	f7ff fd64 	bl	8013478 <ld_word>
 80139b0:	4603      	mov	r3, r0
 80139b2:	617b      	str	r3, [r7, #20]
			break;
 80139b4:	e030      	b.n	8013a18 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80139b6:	693b      	ldr	r3, [r7, #16]
 80139b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80139ba:	693b      	ldr	r3, [r7, #16]
 80139bc:	899b      	ldrh	r3, [r3, #12]
 80139be:	089b      	lsrs	r3, r3, #2
 80139c0:	b29b      	uxth	r3, r3
 80139c2:	4619      	mov	r1, r3
 80139c4:	683b      	ldr	r3, [r7, #0]
 80139c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80139ca:	4413      	add	r3, r2
 80139cc:	4619      	mov	r1, r3
 80139ce:	6938      	ldr	r0, [r7, #16]
 80139d0:	f7ff fe96 	bl	8013700 <move_window>
 80139d4:	4603      	mov	r3, r0
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d11d      	bne.n	8013a16 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80139da:	693b      	ldr	r3, [r7, #16]
 80139dc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80139e0:	683b      	ldr	r3, [r7, #0]
 80139e2:	009b      	lsls	r3, r3, #2
 80139e4:	693a      	ldr	r2, [r7, #16]
 80139e6:	8992      	ldrh	r2, [r2, #12]
 80139e8:	fbb3 f0f2 	udiv	r0, r3, r2
 80139ec:	fb02 f200 	mul.w	r2, r2, r0
 80139f0:	1a9b      	subs	r3, r3, r2
 80139f2:	440b      	add	r3, r1
 80139f4:	4618      	mov	r0, r3
 80139f6:	f7ff fd57 	bl	80134a8 <ld_dword>
 80139fa:	4603      	mov	r3, r0
 80139fc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8013a00:	617b      	str	r3, [r7, #20]
			break;
 8013a02:	e009      	b.n	8013a18 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8013a04:	2301      	movs	r3, #1
 8013a06:	617b      	str	r3, [r7, #20]
 8013a08:	e006      	b.n	8013a18 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013a0a:	bf00      	nop
 8013a0c:	e004      	b.n	8013a18 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013a0e:	bf00      	nop
 8013a10:	e002      	b.n	8013a18 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013a12:	bf00      	nop
 8013a14:	e000      	b.n	8013a18 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013a16:	bf00      	nop
		}
	}

	return val;
 8013a18:	697b      	ldr	r3, [r7, #20]
}
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	3718      	adds	r7, #24
 8013a1e:	46bd      	mov	sp, r7
 8013a20:	bd80      	pop	{r7, pc}

08013a22 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8013a22:	b590      	push	{r4, r7, lr}
 8013a24:	b089      	sub	sp, #36	; 0x24
 8013a26:	af00      	add	r7, sp, #0
 8013a28:	60f8      	str	r0, [r7, #12]
 8013a2a:	60b9      	str	r1, [r7, #8]
 8013a2c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8013a2e:	2302      	movs	r3, #2
 8013a30:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8013a32:	68bb      	ldr	r3, [r7, #8]
 8013a34:	2b01      	cmp	r3, #1
 8013a36:	f240 8102 	bls.w	8013c3e <put_fat+0x21c>
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	69db      	ldr	r3, [r3, #28]
 8013a3e:	68ba      	ldr	r2, [r7, #8]
 8013a40:	429a      	cmp	r2, r3
 8013a42:	f080 80fc 	bcs.w	8013c3e <put_fat+0x21c>
		switch (fs->fs_type) {
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	781b      	ldrb	r3, [r3, #0]
 8013a4a:	2b03      	cmp	r3, #3
 8013a4c:	f000 80b6 	beq.w	8013bbc <put_fat+0x19a>
 8013a50:	2b03      	cmp	r3, #3
 8013a52:	f300 80fd 	bgt.w	8013c50 <put_fat+0x22e>
 8013a56:	2b01      	cmp	r3, #1
 8013a58:	d003      	beq.n	8013a62 <put_fat+0x40>
 8013a5a:	2b02      	cmp	r3, #2
 8013a5c:	f000 8083 	beq.w	8013b66 <put_fat+0x144>
 8013a60:	e0f6      	b.n	8013c50 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8013a62:	68bb      	ldr	r3, [r7, #8]
 8013a64:	61bb      	str	r3, [r7, #24]
 8013a66:	69bb      	ldr	r3, [r7, #24]
 8013a68:	085b      	lsrs	r3, r3, #1
 8013a6a:	69ba      	ldr	r2, [r7, #24]
 8013a6c:	4413      	add	r3, r2
 8013a6e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	899b      	ldrh	r3, [r3, #12]
 8013a78:	4619      	mov	r1, r3
 8013a7a:	69bb      	ldr	r3, [r7, #24]
 8013a7c:	fbb3 f3f1 	udiv	r3, r3, r1
 8013a80:	4413      	add	r3, r2
 8013a82:	4619      	mov	r1, r3
 8013a84:	68f8      	ldr	r0, [r7, #12]
 8013a86:	f7ff fe3b 	bl	8013700 <move_window>
 8013a8a:	4603      	mov	r3, r0
 8013a8c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013a8e:	7ffb      	ldrb	r3, [r7, #31]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	f040 80d6 	bne.w	8013c42 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013a9c:	69bb      	ldr	r3, [r7, #24]
 8013a9e:	1c5a      	adds	r2, r3, #1
 8013aa0:	61ba      	str	r2, [r7, #24]
 8013aa2:	68fa      	ldr	r2, [r7, #12]
 8013aa4:	8992      	ldrh	r2, [r2, #12]
 8013aa6:	fbb3 f0f2 	udiv	r0, r3, r2
 8013aaa:	fb02 f200 	mul.w	r2, r2, r0
 8013aae:	1a9b      	subs	r3, r3, r2
 8013ab0:	440b      	add	r3, r1
 8013ab2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013ab4:	68bb      	ldr	r3, [r7, #8]
 8013ab6:	f003 0301 	and.w	r3, r3, #1
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d00d      	beq.n	8013ada <put_fat+0xb8>
 8013abe:	697b      	ldr	r3, [r7, #20]
 8013ac0:	781b      	ldrb	r3, [r3, #0]
 8013ac2:	b25b      	sxtb	r3, r3
 8013ac4:	f003 030f 	and.w	r3, r3, #15
 8013ac8:	b25a      	sxtb	r2, r3
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	b2db      	uxtb	r3, r3
 8013ace:	011b      	lsls	r3, r3, #4
 8013ad0:	b25b      	sxtb	r3, r3
 8013ad2:	4313      	orrs	r3, r2
 8013ad4:	b25b      	sxtb	r3, r3
 8013ad6:	b2db      	uxtb	r3, r3
 8013ad8:	e001      	b.n	8013ade <put_fat+0xbc>
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	b2db      	uxtb	r3, r3
 8013ade:	697a      	ldr	r2, [r7, #20]
 8013ae0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	2201      	movs	r2, #1
 8013ae6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	899b      	ldrh	r3, [r3, #12]
 8013af0:	4619      	mov	r1, r3
 8013af2:	69bb      	ldr	r3, [r7, #24]
 8013af4:	fbb3 f3f1 	udiv	r3, r3, r1
 8013af8:	4413      	add	r3, r2
 8013afa:	4619      	mov	r1, r3
 8013afc:	68f8      	ldr	r0, [r7, #12]
 8013afe:	f7ff fdff 	bl	8013700 <move_window>
 8013b02:	4603      	mov	r3, r0
 8013b04:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013b06:	7ffb      	ldrb	r3, [r7, #31]
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	f040 809c 	bne.w	8013c46 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	899b      	ldrh	r3, [r3, #12]
 8013b18:	461a      	mov	r2, r3
 8013b1a:	69bb      	ldr	r3, [r7, #24]
 8013b1c:	fbb3 f0f2 	udiv	r0, r3, r2
 8013b20:	fb02 f200 	mul.w	r2, r2, r0
 8013b24:	1a9b      	subs	r3, r3, r2
 8013b26:	440b      	add	r3, r1
 8013b28:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8013b2a:	68bb      	ldr	r3, [r7, #8]
 8013b2c:	f003 0301 	and.w	r3, r3, #1
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d003      	beq.n	8013b3c <put_fat+0x11a>
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	091b      	lsrs	r3, r3, #4
 8013b38:	b2db      	uxtb	r3, r3
 8013b3a:	e00e      	b.n	8013b5a <put_fat+0x138>
 8013b3c:	697b      	ldr	r3, [r7, #20]
 8013b3e:	781b      	ldrb	r3, [r3, #0]
 8013b40:	b25b      	sxtb	r3, r3
 8013b42:	f023 030f 	bic.w	r3, r3, #15
 8013b46:	b25a      	sxtb	r2, r3
 8013b48:	687b      	ldr	r3, [r7, #4]
 8013b4a:	0a1b      	lsrs	r3, r3, #8
 8013b4c:	b25b      	sxtb	r3, r3
 8013b4e:	f003 030f 	and.w	r3, r3, #15
 8013b52:	b25b      	sxtb	r3, r3
 8013b54:	4313      	orrs	r3, r2
 8013b56:	b25b      	sxtb	r3, r3
 8013b58:	b2db      	uxtb	r3, r3
 8013b5a:	697a      	ldr	r2, [r7, #20]
 8013b5c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	2201      	movs	r2, #1
 8013b62:	70da      	strb	r2, [r3, #3]
			break;
 8013b64:	e074      	b.n	8013c50 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	899b      	ldrh	r3, [r3, #12]
 8013b6e:	085b      	lsrs	r3, r3, #1
 8013b70:	b29b      	uxth	r3, r3
 8013b72:	4619      	mov	r1, r3
 8013b74:	68bb      	ldr	r3, [r7, #8]
 8013b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8013b7a:	4413      	add	r3, r2
 8013b7c:	4619      	mov	r1, r3
 8013b7e:	68f8      	ldr	r0, [r7, #12]
 8013b80:	f7ff fdbe 	bl	8013700 <move_window>
 8013b84:	4603      	mov	r3, r0
 8013b86:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013b88:	7ffb      	ldrb	r3, [r7, #31]
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d15d      	bne.n	8013c4a <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013b94:	68bb      	ldr	r3, [r7, #8]
 8013b96:	005b      	lsls	r3, r3, #1
 8013b98:	68fa      	ldr	r2, [r7, #12]
 8013b9a:	8992      	ldrh	r2, [r2, #12]
 8013b9c:	fbb3 f0f2 	udiv	r0, r3, r2
 8013ba0:	fb02 f200 	mul.w	r2, r2, r0
 8013ba4:	1a9b      	subs	r3, r3, r2
 8013ba6:	440b      	add	r3, r1
 8013ba8:	687a      	ldr	r2, [r7, #4]
 8013baa:	b292      	uxth	r2, r2
 8013bac:	4611      	mov	r1, r2
 8013bae:	4618      	mov	r0, r3
 8013bb0:	f7ff fc9d 	bl	80134ee <st_word>
			fs->wflag = 1;
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	2201      	movs	r2, #1
 8013bb8:	70da      	strb	r2, [r3, #3]
			break;
 8013bba:	e049      	b.n	8013c50 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	899b      	ldrh	r3, [r3, #12]
 8013bc4:	089b      	lsrs	r3, r3, #2
 8013bc6:	b29b      	uxth	r3, r3
 8013bc8:	4619      	mov	r1, r3
 8013bca:	68bb      	ldr	r3, [r7, #8]
 8013bcc:	fbb3 f3f1 	udiv	r3, r3, r1
 8013bd0:	4413      	add	r3, r2
 8013bd2:	4619      	mov	r1, r3
 8013bd4:	68f8      	ldr	r0, [r7, #12]
 8013bd6:	f7ff fd93 	bl	8013700 <move_window>
 8013bda:	4603      	mov	r3, r0
 8013bdc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013bde:	7ffb      	ldrb	r3, [r7, #31]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d134      	bne.n	8013c4e <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013bf0:	68bb      	ldr	r3, [r7, #8]
 8013bf2:	009b      	lsls	r3, r3, #2
 8013bf4:	68fa      	ldr	r2, [r7, #12]
 8013bf6:	8992      	ldrh	r2, [r2, #12]
 8013bf8:	fbb3 f0f2 	udiv	r0, r3, r2
 8013bfc:	fb02 f200 	mul.w	r2, r2, r0
 8013c00:	1a9b      	subs	r3, r3, r2
 8013c02:	440b      	add	r3, r1
 8013c04:	4618      	mov	r0, r3
 8013c06:	f7ff fc4f 	bl	80134a8 <ld_dword>
 8013c0a:	4603      	mov	r3, r0
 8013c0c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8013c10:	4323      	orrs	r3, r4
 8013c12:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013c1a:	68bb      	ldr	r3, [r7, #8]
 8013c1c:	009b      	lsls	r3, r3, #2
 8013c1e:	68fa      	ldr	r2, [r7, #12]
 8013c20:	8992      	ldrh	r2, [r2, #12]
 8013c22:	fbb3 f0f2 	udiv	r0, r3, r2
 8013c26:	fb02 f200 	mul.w	r2, r2, r0
 8013c2a:	1a9b      	subs	r3, r3, r2
 8013c2c:	440b      	add	r3, r1
 8013c2e:	6879      	ldr	r1, [r7, #4]
 8013c30:	4618      	mov	r0, r3
 8013c32:	f7ff fc77 	bl	8013524 <st_dword>
			fs->wflag = 1;
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	2201      	movs	r2, #1
 8013c3a:	70da      	strb	r2, [r3, #3]
			break;
 8013c3c:	e008      	b.n	8013c50 <put_fat+0x22e>
		}
	}
 8013c3e:	bf00      	nop
 8013c40:	e006      	b.n	8013c50 <put_fat+0x22e>
			if (res != FR_OK) break;
 8013c42:	bf00      	nop
 8013c44:	e004      	b.n	8013c50 <put_fat+0x22e>
			if (res != FR_OK) break;
 8013c46:	bf00      	nop
 8013c48:	e002      	b.n	8013c50 <put_fat+0x22e>
			if (res != FR_OK) break;
 8013c4a:	bf00      	nop
 8013c4c:	e000      	b.n	8013c50 <put_fat+0x22e>
			if (res != FR_OK) break;
 8013c4e:	bf00      	nop
	return res;
 8013c50:	7ffb      	ldrb	r3, [r7, #31]
}
 8013c52:	4618      	mov	r0, r3
 8013c54:	3724      	adds	r7, #36	; 0x24
 8013c56:	46bd      	mov	sp, r7
 8013c58:	bd90      	pop	{r4, r7, pc}

08013c5a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8013c5a:	b580      	push	{r7, lr}
 8013c5c:	b088      	sub	sp, #32
 8013c5e:	af00      	add	r7, sp, #0
 8013c60:	60f8      	str	r0, [r7, #12]
 8013c62:	60b9      	str	r1, [r7, #8]
 8013c64:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8013c66:	2300      	movs	r3, #0
 8013c68:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8013c70:	68bb      	ldr	r3, [r7, #8]
 8013c72:	2b01      	cmp	r3, #1
 8013c74:	d904      	bls.n	8013c80 <remove_chain+0x26>
 8013c76:	69bb      	ldr	r3, [r7, #24]
 8013c78:	69db      	ldr	r3, [r3, #28]
 8013c7a:	68ba      	ldr	r2, [r7, #8]
 8013c7c:	429a      	cmp	r2, r3
 8013c7e:	d301      	bcc.n	8013c84 <remove_chain+0x2a>
 8013c80:	2302      	movs	r3, #2
 8013c82:	e04b      	b.n	8013d1c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d00c      	beq.n	8013ca4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8013c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8013c8e:	6879      	ldr	r1, [r7, #4]
 8013c90:	69b8      	ldr	r0, [r7, #24]
 8013c92:	f7ff fec6 	bl	8013a22 <put_fat>
 8013c96:	4603      	mov	r3, r0
 8013c98:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8013c9a:	7ffb      	ldrb	r3, [r7, #31]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d001      	beq.n	8013ca4 <remove_chain+0x4a>
 8013ca0:	7ffb      	ldrb	r3, [r7, #31]
 8013ca2:	e03b      	b.n	8013d1c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8013ca4:	68b9      	ldr	r1, [r7, #8]
 8013ca6:	68f8      	ldr	r0, [r7, #12]
 8013ca8:	f7ff fde7 	bl	801387a <get_fat>
 8013cac:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8013cae:	697b      	ldr	r3, [r7, #20]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d031      	beq.n	8013d18 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8013cb4:	697b      	ldr	r3, [r7, #20]
 8013cb6:	2b01      	cmp	r3, #1
 8013cb8:	d101      	bne.n	8013cbe <remove_chain+0x64>
 8013cba:	2302      	movs	r3, #2
 8013cbc:	e02e      	b.n	8013d1c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8013cbe:	697b      	ldr	r3, [r7, #20]
 8013cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013cc4:	d101      	bne.n	8013cca <remove_chain+0x70>
 8013cc6:	2301      	movs	r3, #1
 8013cc8:	e028      	b.n	8013d1c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8013cca:	2200      	movs	r2, #0
 8013ccc:	68b9      	ldr	r1, [r7, #8]
 8013cce:	69b8      	ldr	r0, [r7, #24]
 8013cd0:	f7ff fea7 	bl	8013a22 <put_fat>
 8013cd4:	4603      	mov	r3, r0
 8013cd6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8013cd8:	7ffb      	ldrb	r3, [r7, #31]
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	d001      	beq.n	8013ce2 <remove_chain+0x88>
 8013cde:	7ffb      	ldrb	r3, [r7, #31]
 8013ce0:	e01c      	b.n	8013d1c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8013ce2:	69bb      	ldr	r3, [r7, #24]
 8013ce4:	699a      	ldr	r2, [r3, #24]
 8013ce6:	69bb      	ldr	r3, [r7, #24]
 8013ce8:	69db      	ldr	r3, [r3, #28]
 8013cea:	3b02      	subs	r3, #2
 8013cec:	429a      	cmp	r2, r3
 8013cee:	d20b      	bcs.n	8013d08 <remove_chain+0xae>
			fs->free_clst++;
 8013cf0:	69bb      	ldr	r3, [r7, #24]
 8013cf2:	699b      	ldr	r3, [r3, #24]
 8013cf4:	1c5a      	adds	r2, r3, #1
 8013cf6:	69bb      	ldr	r3, [r7, #24]
 8013cf8:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8013cfa:	69bb      	ldr	r3, [r7, #24]
 8013cfc:	791b      	ldrb	r3, [r3, #4]
 8013cfe:	f043 0301 	orr.w	r3, r3, #1
 8013d02:	b2da      	uxtb	r2, r3
 8013d04:	69bb      	ldr	r3, [r7, #24]
 8013d06:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8013d08:	697b      	ldr	r3, [r7, #20]
 8013d0a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8013d0c:	69bb      	ldr	r3, [r7, #24]
 8013d0e:	69db      	ldr	r3, [r3, #28]
 8013d10:	68ba      	ldr	r2, [r7, #8]
 8013d12:	429a      	cmp	r2, r3
 8013d14:	d3c6      	bcc.n	8013ca4 <remove_chain+0x4a>
 8013d16:	e000      	b.n	8013d1a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8013d18:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8013d1a:	2300      	movs	r3, #0
}
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	3720      	adds	r7, #32
 8013d20:	46bd      	mov	sp, r7
 8013d22:	bd80      	pop	{r7, pc}

08013d24 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8013d24:	b580      	push	{r7, lr}
 8013d26:	b088      	sub	sp, #32
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
 8013d2c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	681b      	ldr	r3, [r3, #0]
 8013d32:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8013d34:	683b      	ldr	r3, [r7, #0]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d10d      	bne.n	8013d56 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8013d3a:	693b      	ldr	r3, [r7, #16]
 8013d3c:	695b      	ldr	r3, [r3, #20]
 8013d3e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8013d40:	69bb      	ldr	r3, [r7, #24]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d004      	beq.n	8013d50 <create_chain+0x2c>
 8013d46:	693b      	ldr	r3, [r7, #16]
 8013d48:	69db      	ldr	r3, [r3, #28]
 8013d4a:	69ba      	ldr	r2, [r7, #24]
 8013d4c:	429a      	cmp	r2, r3
 8013d4e:	d31b      	bcc.n	8013d88 <create_chain+0x64>
 8013d50:	2301      	movs	r3, #1
 8013d52:	61bb      	str	r3, [r7, #24]
 8013d54:	e018      	b.n	8013d88 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8013d56:	6839      	ldr	r1, [r7, #0]
 8013d58:	6878      	ldr	r0, [r7, #4]
 8013d5a:	f7ff fd8e 	bl	801387a <get_fat>
 8013d5e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	2b01      	cmp	r3, #1
 8013d64:	d801      	bhi.n	8013d6a <create_chain+0x46>
 8013d66:	2301      	movs	r3, #1
 8013d68:	e070      	b.n	8013e4c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d70:	d101      	bne.n	8013d76 <create_chain+0x52>
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	e06a      	b.n	8013e4c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8013d76:	693b      	ldr	r3, [r7, #16]
 8013d78:	69db      	ldr	r3, [r3, #28]
 8013d7a:	68fa      	ldr	r2, [r7, #12]
 8013d7c:	429a      	cmp	r2, r3
 8013d7e:	d201      	bcs.n	8013d84 <create_chain+0x60>
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	e063      	b.n	8013e4c <create_chain+0x128>
		scl = clst;
 8013d84:	683b      	ldr	r3, [r7, #0]
 8013d86:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8013d88:	69bb      	ldr	r3, [r7, #24]
 8013d8a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8013d8c:	69fb      	ldr	r3, [r7, #28]
 8013d8e:	3301      	adds	r3, #1
 8013d90:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8013d92:	693b      	ldr	r3, [r7, #16]
 8013d94:	69db      	ldr	r3, [r3, #28]
 8013d96:	69fa      	ldr	r2, [r7, #28]
 8013d98:	429a      	cmp	r2, r3
 8013d9a:	d307      	bcc.n	8013dac <create_chain+0x88>
				ncl = 2;
 8013d9c:	2302      	movs	r3, #2
 8013d9e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8013da0:	69fa      	ldr	r2, [r7, #28]
 8013da2:	69bb      	ldr	r3, [r7, #24]
 8013da4:	429a      	cmp	r2, r3
 8013da6:	d901      	bls.n	8013dac <create_chain+0x88>
 8013da8:	2300      	movs	r3, #0
 8013daa:	e04f      	b.n	8013e4c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8013dac:	69f9      	ldr	r1, [r7, #28]
 8013dae:	6878      	ldr	r0, [r7, #4]
 8013db0:	f7ff fd63 	bl	801387a <get_fat>
 8013db4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d00e      	beq.n	8013dda <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	2b01      	cmp	r3, #1
 8013dc0:	d003      	beq.n	8013dca <create_chain+0xa6>
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013dc8:	d101      	bne.n	8013dce <create_chain+0xaa>
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	e03e      	b.n	8013e4c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8013dce:	69fa      	ldr	r2, [r7, #28]
 8013dd0:	69bb      	ldr	r3, [r7, #24]
 8013dd2:	429a      	cmp	r2, r3
 8013dd4:	d1da      	bne.n	8013d8c <create_chain+0x68>
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	e038      	b.n	8013e4c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8013dda:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8013ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8013de0:	69f9      	ldr	r1, [r7, #28]
 8013de2:	6938      	ldr	r0, [r7, #16]
 8013de4:	f7ff fe1d 	bl	8013a22 <put_fat>
 8013de8:	4603      	mov	r3, r0
 8013dea:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8013dec:	7dfb      	ldrb	r3, [r7, #23]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d109      	bne.n	8013e06 <create_chain+0xe2>
 8013df2:	683b      	ldr	r3, [r7, #0]
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d006      	beq.n	8013e06 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8013df8:	69fa      	ldr	r2, [r7, #28]
 8013dfa:	6839      	ldr	r1, [r7, #0]
 8013dfc:	6938      	ldr	r0, [r7, #16]
 8013dfe:	f7ff fe10 	bl	8013a22 <put_fat>
 8013e02:	4603      	mov	r3, r0
 8013e04:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8013e06:	7dfb      	ldrb	r3, [r7, #23]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d116      	bne.n	8013e3a <create_chain+0x116>
		fs->last_clst = ncl;
 8013e0c:	693b      	ldr	r3, [r7, #16]
 8013e0e:	69fa      	ldr	r2, [r7, #28]
 8013e10:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8013e12:	693b      	ldr	r3, [r7, #16]
 8013e14:	699a      	ldr	r2, [r3, #24]
 8013e16:	693b      	ldr	r3, [r7, #16]
 8013e18:	69db      	ldr	r3, [r3, #28]
 8013e1a:	3b02      	subs	r3, #2
 8013e1c:	429a      	cmp	r2, r3
 8013e1e:	d804      	bhi.n	8013e2a <create_chain+0x106>
 8013e20:	693b      	ldr	r3, [r7, #16]
 8013e22:	699b      	ldr	r3, [r3, #24]
 8013e24:	1e5a      	subs	r2, r3, #1
 8013e26:	693b      	ldr	r3, [r7, #16]
 8013e28:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8013e2a:	693b      	ldr	r3, [r7, #16]
 8013e2c:	791b      	ldrb	r3, [r3, #4]
 8013e2e:	f043 0301 	orr.w	r3, r3, #1
 8013e32:	b2da      	uxtb	r2, r3
 8013e34:	693b      	ldr	r3, [r7, #16]
 8013e36:	711a      	strb	r2, [r3, #4]
 8013e38:	e007      	b.n	8013e4a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8013e3a:	7dfb      	ldrb	r3, [r7, #23]
 8013e3c:	2b01      	cmp	r3, #1
 8013e3e:	d102      	bne.n	8013e46 <create_chain+0x122>
 8013e40:	f04f 33ff 	mov.w	r3, #4294967295
 8013e44:	e000      	b.n	8013e48 <create_chain+0x124>
 8013e46:	2301      	movs	r3, #1
 8013e48:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8013e4a:	69fb      	ldr	r3, [r7, #28]
}
 8013e4c:	4618      	mov	r0, r3
 8013e4e:	3720      	adds	r7, #32
 8013e50:	46bd      	mov	sp, r7
 8013e52:	bd80      	pop	{r7, pc}

08013e54 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8013e54:	b480      	push	{r7}
 8013e56:	b087      	sub	sp, #28
 8013e58:	af00      	add	r7, sp, #0
 8013e5a:	6078      	str	r0, [r7, #4]
 8013e5c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e68:	3304      	adds	r3, #4
 8013e6a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	899b      	ldrh	r3, [r3, #12]
 8013e70:	461a      	mov	r2, r3
 8013e72:	683b      	ldr	r3, [r7, #0]
 8013e74:	fbb3 f3f2 	udiv	r3, r3, r2
 8013e78:	68fa      	ldr	r2, [r7, #12]
 8013e7a:	8952      	ldrh	r2, [r2, #10]
 8013e7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013e80:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013e82:	693b      	ldr	r3, [r7, #16]
 8013e84:	1d1a      	adds	r2, r3, #4
 8013e86:	613a      	str	r2, [r7, #16]
 8013e88:	681b      	ldr	r3, [r3, #0]
 8013e8a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013e8c:	68bb      	ldr	r3, [r7, #8]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d101      	bne.n	8013e96 <clmt_clust+0x42>
 8013e92:	2300      	movs	r3, #0
 8013e94:	e010      	b.n	8013eb8 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8013e96:	697a      	ldr	r2, [r7, #20]
 8013e98:	68bb      	ldr	r3, [r7, #8]
 8013e9a:	429a      	cmp	r2, r3
 8013e9c:	d307      	bcc.n	8013eae <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8013e9e:	697a      	ldr	r2, [r7, #20]
 8013ea0:	68bb      	ldr	r3, [r7, #8]
 8013ea2:	1ad3      	subs	r3, r2, r3
 8013ea4:	617b      	str	r3, [r7, #20]
 8013ea6:	693b      	ldr	r3, [r7, #16]
 8013ea8:	3304      	adds	r3, #4
 8013eaa:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013eac:	e7e9      	b.n	8013e82 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8013eae:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8013eb0:	693b      	ldr	r3, [r7, #16]
 8013eb2:	681a      	ldr	r2, [r3, #0]
 8013eb4:	697b      	ldr	r3, [r7, #20]
 8013eb6:	4413      	add	r3, r2
}
 8013eb8:	4618      	mov	r0, r3
 8013eba:	371c      	adds	r7, #28
 8013ebc:	46bd      	mov	sp, r7
 8013ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ec2:	4770      	bx	lr

08013ec4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8013ec4:	b580      	push	{r7, lr}
 8013ec6:	b086      	sub	sp, #24
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	6078      	str	r0, [r7, #4]
 8013ecc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8013ed4:	683b      	ldr	r3, [r7, #0]
 8013ed6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013eda:	d204      	bcs.n	8013ee6 <dir_sdi+0x22>
 8013edc:	683b      	ldr	r3, [r7, #0]
 8013ede:	f003 031f 	and.w	r3, r3, #31
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d001      	beq.n	8013eea <dir_sdi+0x26>
		return FR_INT_ERR;
 8013ee6:	2302      	movs	r3, #2
 8013ee8:	e071      	b.n	8013fce <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	683a      	ldr	r2, [r7, #0]
 8013eee:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	689b      	ldr	r3, [r3, #8]
 8013ef4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8013ef6:	697b      	ldr	r3, [r7, #20]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d106      	bne.n	8013f0a <dir_sdi+0x46>
 8013efc:	693b      	ldr	r3, [r7, #16]
 8013efe:	781b      	ldrb	r3, [r3, #0]
 8013f00:	2b02      	cmp	r3, #2
 8013f02:	d902      	bls.n	8013f0a <dir_sdi+0x46>
		clst = fs->dirbase;
 8013f04:	693b      	ldr	r3, [r7, #16]
 8013f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f08:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8013f0a:	697b      	ldr	r3, [r7, #20]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d10c      	bne.n	8013f2a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8013f10:	683b      	ldr	r3, [r7, #0]
 8013f12:	095b      	lsrs	r3, r3, #5
 8013f14:	693a      	ldr	r2, [r7, #16]
 8013f16:	8912      	ldrh	r2, [r2, #8]
 8013f18:	4293      	cmp	r3, r2
 8013f1a:	d301      	bcc.n	8013f20 <dir_sdi+0x5c>
 8013f1c:	2302      	movs	r3, #2
 8013f1e:	e056      	b.n	8013fce <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8013f20:	693b      	ldr	r3, [r7, #16]
 8013f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	619a      	str	r2, [r3, #24]
 8013f28:	e02d      	b.n	8013f86 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8013f2a:	693b      	ldr	r3, [r7, #16]
 8013f2c:	895b      	ldrh	r3, [r3, #10]
 8013f2e:	461a      	mov	r2, r3
 8013f30:	693b      	ldr	r3, [r7, #16]
 8013f32:	899b      	ldrh	r3, [r3, #12]
 8013f34:	fb03 f302 	mul.w	r3, r3, r2
 8013f38:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013f3a:	e019      	b.n	8013f70 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	6979      	ldr	r1, [r7, #20]
 8013f40:	4618      	mov	r0, r3
 8013f42:	f7ff fc9a 	bl	801387a <get_fat>
 8013f46:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013f48:	697b      	ldr	r3, [r7, #20]
 8013f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f4e:	d101      	bne.n	8013f54 <dir_sdi+0x90>
 8013f50:	2301      	movs	r3, #1
 8013f52:	e03c      	b.n	8013fce <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8013f54:	697b      	ldr	r3, [r7, #20]
 8013f56:	2b01      	cmp	r3, #1
 8013f58:	d904      	bls.n	8013f64 <dir_sdi+0xa0>
 8013f5a:	693b      	ldr	r3, [r7, #16]
 8013f5c:	69db      	ldr	r3, [r3, #28]
 8013f5e:	697a      	ldr	r2, [r7, #20]
 8013f60:	429a      	cmp	r2, r3
 8013f62:	d301      	bcc.n	8013f68 <dir_sdi+0xa4>
 8013f64:	2302      	movs	r3, #2
 8013f66:	e032      	b.n	8013fce <dir_sdi+0x10a>
			ofs -= csz;
 8013f68:	683a      	ldr	r2, [r7, #0]
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	1ad3      	subs	r3, r2, r3
 8013f6e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013f70:	683a      	ldr	r2, [r7, #0]
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	429a      	cmp	r2, r3
 8013f76:	d2e1      	bcs.n	8013f3c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8013f78:	6979      	ldr	r1, [r7, #20]
 8013f7a:	6938      	ldr	r0, [r7, #16]
 8013f7c:	f7ff fc5e 	bl	801383c <clust2sect>
 8013f80:	4602      	mov	r2, r0
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	697a      	ldr	r2, [r7, #20]
 8013f8a:	615a      	str	r2, [r3, #20]
	if (!dp->sect) return FR_INT_ERR;
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	699b      	ldr	r3, [r3, #24]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d101      	bne.n	8013f98 <dir_sdi+0xd4>
 8013f94:	2302      	movs	r3, #2
 8013f96:	e01a      	b.n	8013fce <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	699a      	ldr	r2, [r3, #24]
 8013f9c:	693b      	ldr	r3, [r7, #16]
 8013f9e:	899b      	ldrh	r3, [r3, #12]
 8013fa0:	4619      	mov	r1, r3
 8013fa2:	683b      	ldr	r3, [r7, #0]
 8013fa4:	fbb3 f3f1 	udiv	r3, r3, r1
 8013fa8:	441a      	add	r2, r3
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8013fae:	693b      	ldr	r3, [r7, #16]
 8013fb0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013fb4:	693b      	ldr	r3, [r7, #16]
 8013fb6:	899b      	ldrh	r3, [r3, #12]
 8013fb8:	461a      	mov	r2, r3
 8013fba:	683b      	ldr	r3, [r7, #0]
 8013fbc:	fbb3 f0f2 	udiv	r0, r3, r2
 8013fc0:	fb02 f200 	mul.w	r2, r2, r0
 8013fc4:	1a9b      	subs	r3, r3, r2
 8013fc6:	18ca      	adds	r2, r1, r3
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8013fcc:	2300      	movs	r3, #0
}
 8013fce:	4618      	mov	r0, r3
 8013fd0:	3718      	adds	r7, #24
 8013fd2:	46bd      	mov	sp, r7
 8013fd4:	bd80      	pop	{r7, pc}

08013fd6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013fd6:	b580      	push	{r7, lr}
 8013fd8:	b086      	sub	sp, #24
 8013fda:	af00      	add	r7, sp, #0
 8013fdc:	6078      	str	r0, [r7, #4]
 8013fde:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	691b      	ldr	r3, [r3, #16]
 8013fea:	3320      	adds	r3, #32
 8013fec:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	699b      	ldr	r3, [r3, #24]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d003      	beq.n	8013ffe <dir_next+0x28>
 8013ff6:	68bb      	ldr	r3, [r7, #8]
 8013ff8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013ffc:	d301      	bcc.n	8014002 <dir_next+0x2c>
 8013ffe:	2304      	movs	r3, #4
 8014000:	e0bb      	b.n	801417a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8014002:	68fb      	ldr	r3, [r7, #12]
 8014004:	899b      	ldrh	r3, [r3, #12]
 8014006:	461a      	mov	r2, r3
 8014008:	68bb      	ldr	r3, [r7, #8]
 801400a:	fbb3 f1f2 	udiv	r1, r3, r2
 801400e:	fb02 f201 	mul.w	r2, r2, r1
 8014012:	1a9b      	subs	r3, r3, r2
 8014014:	2b00      	cmp	r3, #0
 8014016:	f040 809d 	bne.w	8014154 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	699b      	ldr	r3, [r3, #24]
 801401e:	1c5a      	adds	r2, r3, #1
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	619a      	str	r2, [r3, #24]

		if (!dp->clust) {		/* Static table */
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	695b      	ldr	r3, [r3, #20]
 8014028:	2b00      	cmp	r3, #0
 801402a:	d10b      	bne.n	8014044 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801402c:	68bb      	ldr	r3, [r7, #8]
 801402e:	095b      	lsrs	r3, r3, #5
 8014030:	68fa      	ldr	r2, [r7, #12]
 8014032:	8912      	ldrh	r2, [r2, #8]
 8014034:	4293      	cmp	r3, r2
 8014036:	f0c0 808d 	bcc.w	8014154 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	2200      	movs	r2, #0
 801403e:	619a      	str	r2, [r3, #24]
 8014040:	2304      	movs	r3, #4
 8014042:	e09a      	b.n	801417a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	899b      	ldrh	r3, [r3, #12]
 8014048:	461a      	mov	r2, r3
 801404a:	68bb      	ldr	r3, [r7, #8]
 801404c:	fbb3 f3f2 	udiv	r3, r3, r2
 8014050:	68fa      	ldr	r2, [r7, #12]
 8014052:	8952      	ldrh	r2, [r2, #10]
 8014054:	3a01      	subs	r2, #1
 8014056:	4013      	ands	r3, r2
 8014058:	2b00      	cmp	r3, #0
 801405a:	d17b      	bne.n	8014154 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801405c:	687a      	ldr	r2, [r7, #4]
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	695b      	ldr	r3, [r3, #20]
 8014062:	4619      	mov	r1, r3
 8014064:	4610      	mov	r0, r2
 8014066:	f7ff fc08 	bl	801387a <get_fat>
 801406a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801406c:	697b      	ldr	r3, [r7, #20]
 801406e:	2b01      	cmp	r3, #1
 8014070:	d801      	bhi.n	8014076 <dir_next+0xa0>
 8014072:	2302      	movs	r3, #2
 8014074:	e081      	b.n	801417a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8014076:	697b      	ldr	r3, [r7, #20]
 8014078:	f1b3 3fff 	cmp.w	r3, #4294967295
 801407c:	d101      	bne.n	8014082 <dir_next+0xac>
 801407e:	2301      	movs	r3, #1
 8014080:	e07b      	b.n	801417a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8014082:	68fb      	ldr	r3, [r7, #12]
 8014084:	69db      	ldr	r3, [r3, #28]
 8014086:	697a      	ldr	r2, [r7, #20]
 8014088:	429a      	cmp	r2, r3
 801408a:	d359      	bcc.n	8014140 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801408c:	683b      	ldr	r3, [r7, #0]
 801408e:	2b00      	cmp	r3, #0
 8014090:	d104      	bne.n	801409c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	2200      	movs	r2, #0
 8014096:	619a      	str	r2, [r3, #24]
 8014098:	2304      	movs	r3, #4
 801409a:	e06e      	b.n	801417a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 801409c:	687a      	ldr	r2, [r7, #4]
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	695b      	ldr	r3, [r3, #20]
 80140a2:	4619      	mov	r1, r3
 80140a4:	4610      	mov	r0, r2
 80140a6:	f7ff fe3d 	bl	8013d24 <create_chain>
 80140aa:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80140ac:	697b      	ldr	r3, [r7, #20]
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d101      	bne.n	80140b6 <dir_next+0xe0>
 80140b2:	2307      	movs	r3, #7
 80140b4:	e061      	b.n	801417a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80140b6:	697b      	ldr	r3, [r7, #20]
 80140b8:	2b01      	cmp	r3, #1
 80140ba:	d101      	bne.n	80140c0 <dir_next+0xea>
 80140bc:	2302      	movs	r3, #2
 80140be:	e05c      	b.n	801417a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80140c0:	697b      	ldr	r3, [r7, #20]
 80140c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140c6:	d101      	bne.n	80140cc <dir_next+0xf6>
 80140c8:	2301      	movs	r3, #1
 80140ca:	e056      	b.n	801417a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80140cc:	68f8      	ldr	r0, [r7, #12]
 80140ce:	f7ff fad3 	bl	8013678 <sync_window>
 80140d2:	4603      	mov	r3, r0
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d001      	beq.n	80140dc <dir_next+0x106>
 80140d8:	2301      	movs	r3, #1
 80140da:	e04e      	b.n	801417a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	899b      	ldrh	r3, [r3, #12]
 80140e6:	461a      	mov	r2, r3
 80140e8:	2100      	movs	r1, #0
 80140ea:	f7ff fa68 	bl	80135be <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80140ee:	2300      	movs	r3, #0
 80140f0:	613b      	str	r3, [r7, #16]
 80140f2:	6979      	ldr	r1, [r7, #20]
 80140f4:	68f8      	ldr	r0, [r7, #12]
 80140f6:	f7ff fba1 	bl	801383c <clust2sect>
 80140fa:	4602      	mov	r2, r0
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	635a      	str	r2, [r3, #52]	; 0x34
 8014100:	e012      	b.n	8014128 <dir_next+0x152>
						fs->wflag = 1;
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	2201      	movs	r2, #1
 8014106:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8014108:	68f8      	ldr	r0, [r7, #12]
 801410a:	f7ff fab5 	bl	8013678 <sync_window>
 801410e:	4603      	mov	r3, r0
 8014110:	2b00      	cmp	r3, #0
 8014112:	d001      	beq.n	8014118 <dir_next+0x142>
 8014114:	2301      	movs	r3, #1
 8014116:	e030      	b.n	801417a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8014118:	693b      	ldr	r3, [r7, #16]
 801411a:	3301      	adds	r3, #1
 801411c:	613b      	str	r3, [r7, #16]
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014122:	1c5a      	adds	r2, r3, #1
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	635a      	str	r2, [r3, #52]	; 0x34
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	895b      	ldrh	r3, [r3, #10]
 801412c:	461a      	mov	r2, r3
 801412e:	693b      	ldr	r3, [r7, #16]
 8014130:	4293      	cmp	r3, r2
 8014132:	d3e6      	bcc.n	8014102 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014138:	693b      	ldr	r3, [r7, #16]
 801413a:	1ad2      	subs	r2, r2, r3
 801413c:	68fb      	ldr	r3, [r7, #12]
 801413e:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	697a      	ldr	r2, [r7, #20]
 8014144:	615a      	str	r2, [r3, #20]
				dp->sect = clust2sect(fs, clst);
 8014146:	6979      	ldr	r1, [r7, #20]
 8014148:	68f8      	ldr	r0, [r7, #12]
 801414a:	f7ff fb77 	bl	801383c <clust2sect>
 801414e:	4602      	mov	r2, r0
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	68ba      	ldr	r2, [r7, #8]
 8014158:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	899b      	ldrh	r3, [r3, #12]
 8014164:	461a      	mov	r2, r3
 8014166:	68bb      	ldr	r3, [r7, #8]
 8014168:	fbb3 f0f2 	udiv	r0, r3, r2
 801416c:	fb02 f200 	mul.w	r2, r2, r0
 8014170:	1a9b      	subs	r3, r3, r2
 8014172:	18ca      	adds	r2, r1, r3
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8014178:	2300      	movs	r3, #0
}
 801417a:	4618      	mov	r0, r3
 801417c:	3718      	adds	r7, #24
 801417e:	46bd      	mov	sp, r7
 8014180:	bd80      	pop	{r7, pc}

08014182 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8014182:	b580      	push	{r7, lr}
 8014184:	b086      	sub	sp, #24
 8014186:	af00      	add	r7, sp, #0
 8014188:	6078      	str	r0, [r7, #4]
 801418a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	681b      	ldr	r3, [r3, #0]
 8014190:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8014192:	2100      	movs	r1, #0
 8014194:	6878      	ldr	r0, [r7, #4]
 8014196:	f7ff fe95 	bl	8013ec4 <dir_sdi>
 801419a:	4603      	mov	r3, r0
 801419c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801419e:	7dfb      	ldrb	r3, [r7, #23]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d12b      	bne.n	80141fc <dir_alloc+0x7a>
		n = 0;
 80141a4:	2300      	movs	r3, #0
 80141a6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	699b      	ldr	r3, [r3, #24]
 80141ac:	4619      	mov	r1, r3
 80141ae:	68f8      	ldr	r0, [r7, #12]
 80141b0:	f7ff faa6 	bl	8013700 <move_window>
 80141b4:	4603      	mov	r3, r0
 80141b6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80141b8:	7dfb      	ldrb	r3, [r7, #23]
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d11d      	bne.n	80141fa <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	69db      	ldr	r3, [r3, #28]
 80141c2:	781b      	ldrb	r3, [r3, #0]
 80141c4:	2be5      	cmp	r3, #229	; 0xe5
 80141c6:	d004      	beq.n	80141d2 <dir_alloc+0x50>
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	69db      	ldr	r3, [r3, #28]
 80141cc:	781b      	ldrb	r3, [r3, #0]
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d107      	bne.n	80141e2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80141d2:	693b      	ldr	r3, [r7, #16]
 80141d4:	3301      	adds	r3, #1
 80141d6:	613b      	str	r3, [r7, #16]
 80141d8:	693a      	ldr	r2, [r7, #16]
 80141da:	683b      	ldr	r3, [r7, #0]
 80141dc:	429a      	cmp	r2, r3
 80141de:	d102      	bne.n	80141e6 <dir_alloc+0x64>
 80141e0:	e00c      	b.n	80141fc <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80141e2:	2300      	movs	r3, #0
 80141e4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80141e6:	2101      	movs	r1, #1
 80141e8:	6878      	ldr	r0, [r7, #4]
 80141ea:	f7ff fef4 	bl	8013fd6 <dir_next>
 80141ee:	4603      	mov	r3, r0
 80141f0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80141f2:	7dfb      	ldrb	r3, [r7, #23]
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d0d7      	beq.n	80141a8 <dir_alloc+0x26>
 80141f8:	e000      	b.n	80141fc <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80141fa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80141fc:	7dfb      	ldrb	r3, [r7, #23]
 80141fe:	2b04      	cmp	r3, #4
 8014200:	d101      	bne.n	8014206 <dir_alloc+0x84>
 8014202:	2307      	movs	r3, #7
 8014204:	75fb      	strb	r3, [r7, #23]
	return res;
 8014206:	7dfb      	ldrb	r3, [r7, #23]
}
 8014208:	4618      	mov	r0, r3
 801420a:	3718      	adds	r7, #24
 801420c:	46bd      	mov	sp, r7
 801420e:	bd80      	pop	{r7, pc}

08014210 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8014210:	b580      	push	{r7, lr}
 8014212:	b084      	sub	sp, #16
 8014214:	af00      	add	r7, sp, #0
 8014216:	6078      	str	r0, [r7, #4]
 8014218:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801421a:	683b      	ldr	r3, [r7, #0]
 801421c:	331a      	adds	r3, #26
 801421e:	4618      	mov	r0, r3
 8014220:	f7ff f92a 	bl	8013478 <ld_word>
 8014224:	4603      	mov	r3, r0
 8014226:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	781b      	ldrb	r3, [r3, #0]
 801422c:	2b03      	cmp	r3, #3
 801422e:	d109      	bne.n	8014244 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8014230:	683b      	ldr	r3, [r7, #0]
 8014232:	3314      	adds	r3, #20
 8014234:	4618      	mov	r0, r3
 8014236:	f7ff f91f 	bl	8013478 <ld_word>
 801423a:	4603      	mov	r3, r0
 801423c:	041b      	lsls	r3, r3, #16
 801423e:	68fa      	ldr	r2, [r7, #12]
 8014240:	4313      	orrs	r3, r2
 8014242:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8014244:	68fb      	ldr	r3, [r7, #12]
}
 8014246:	4618      	mov	r0, r3
 8014248:	3710      	adds	r7, #16
 801424a:	46bd      	mov	sp, r7
 801424c:	bd80      	pop	{r7, pc}

0801424e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801424e:	b580      	push	{r7, lr}
 8014250:	b084      	sub	sp, #16
 8014252:	af00      	add	r7, sp, #0
 8014254:	60f8      	str	r0, [r7, #12]
 8014256:	60b9      	str	r1, [r7, #8]
 8014258:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801425a:	68bb      	ldr	r3, [r7, #8]
 801425c:	331a      	adds	r3, #26
 801425e:	687a      	ldr	r2, [r7, #4]
 8014260:	b292      	uxth	r2, r2
 8014262:	4611      	mov	r1, r2
 8014264:	4618      	mov	r0, r3
 8014266:	f7ff f942 	bl	80134ee <st_word>
	if (fs->fs_type == FS_FAT32) {
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	781b      	ldrb	r3, [r3, #0]
 801426e:	2b03      	cmp	r3, #3
 8014270:	d109      	bne.n	8014286 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8014272:	68bb      	ldr	r3, [r7, #8]
 8014274:	f103 0214 	add.w	r2, r3, #20
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	0c1b      	lsrs	r3, r3, #16
 801427c:	b29b      	uxth	r3, r3
 801427e:	4619      	mov	r1, r3
 8014280:	4610      	mov	r0, r2
 8014282:	f7ff f934 	bl	80134ee <st_word>
	}
}
 8014286:	bf00      	nop
 8014288:	3710      	adds	r7, #16
 801428a:	46bd      	mov	sp, r7
 801428c:	bd80      	pop	{r7, pc}
	...

08014290 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8014290:	b590      	push	{r4, r7, lr}
 8014292:	b087      	sub	sp, #28
 8014294:	af00      	add	r7, sp, #0
 8014296:	6078      	str	r0, [r7, #4]
 8014298:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801429a:	683b      	ldr	r3, [r7, #0]
 801429c:	331a      	adds	r3, #26
 801429e:	4618      	mov	r0, r3
 80142a0:	f7ff f8ea 	bl	8013478 <ld_word>
 80142a4:	4603      	mov	r3, r0
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d001      	beq.n	80142ae <cmp_lfn+0x1e>
 80142aa:	2300      	movs	r3, #0
 80142ac:	e059      	b.n	8014362 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80142ae:	683b      	ldr	r3, [r7, #0]
 80142b0:	781b      	ldrb	r3, [r3, #0]
 80142b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80142b6:	1e5a      	subs	r2, r3, #1
 80142b8:	4613      	mov	r3, r2
 80142ba:	005b      	lsls	r3, r3, #1
 80142bc:	4413      	add	r3, r2
 80142be:	009b      	lsls	r3, r3, #2
 80142c0:	4413      	add	r3, r2
 80142c2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80142c4:	2301      	movs	r3, #1
 80142c6:	81fb      	strh	r3, [r7, #14]
 80142c8:	2300      	movs	r3, #0
 80142ca:	613b      	str	r3, [r7, #16]
 80142cc:	e033      	b.n	8014336 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80142ce:	4a27      	ldr	r2, [pc, #156]	; (801436c <cmp_lfn+0xdc>)
 80142d0:	693b      	ldr	r3, [r7, #16]
 80142d2:	4413      	add	r3, r2
 80142d4:	781b      	ldrb	r3, [r3, #0]
 80142d6:	461a      	mov	r2, r3
 80142d8:	683b      	ldr	r3, [r7, #0]
 80142da:	4413      	add	r3, r2
 80142dc:	4618      	mov	r0, r3
 80142de:	f7ff f8cb 	bl	8013478 <ld_word>
 80142e2:	4603      	mov	r3, r0
 80142e4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80142e6:	89fb      	ldrh	r3, [r7, #14]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d01a      	beq.n	8014322 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80142ec:	697b      	ldr	r3, [r7, #20]
 80142ee:	2bfe      	cmp	r3, #254	; 0xfe
 80142f0:	d812      	bhi.n	8014318 <cmp_lfn+0x88>
 80142f2:	89bb      	ldrh	r3, [r7, #12]
 80142f4:	4618      	mov	r0, r3
 80142f6:	f001 feb9 	bl	801606c <ff_wtoupper>
 80142fa:	4603      	mov	r3, r0
 80142fc:	461c      	mov	r4, r3
 80142fe:	697b      	ldr	r3, [r7, #20]
 8014300:	1c5a      	adds	r2, r3, #1
 8014302:	617a      	str	r2, [r7, #20]
 8014304:	005b      	lsls	r3, r3, #1
 8014306:	687a      	ldr	r2, [r7, #4]
 8014308:	4413      	add	r3, r2
 801430a:	881b      	ldrh	r3, [r3, #0]
 801430c:	4618      	mov	r0, r3
 801430e:	f001 fead 	bl	801606c <ff_wtoupper>
 8014312:	4603      	mov	r3, r0
 8014314:	429c      	cmp	r4, r3
 8014316:	d001      	beq.n	801431c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8014318:	2300      	movs	r3, #0
 801431a:	e022      	b.n	8014362 <cmp_lfn+0xd2>
			}
			wc = uc;
 801431c:	89bb      	ldrh	r3, [r7, #12]
 801431e:	81fb      	strh	r3, [r7, #14]
 8014320:	e006      	b.n	8014330 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8014322:	89bb      	ldrh	r3, [r7, #12]
 8014324:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014328:	4293      	cmp	r3, r2
 801432a:	d001      	beq.n	8014330 <cmp_lfn+0xa0>
 801432c:	2300      	movs	r3, #0
 801432e:	e018      	b.n	8014362 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8014330:	693b      	ldr	r3, [r7, #16]
 8014332:	3301      	adds	r3, #1
 8014334:	613b      	str	r3, [r7, #16]
 8014336:	693b      	ldr	r3, [r7, #16]
 8014338:	2b0c      	cmp	r3, #12
 801433a:	d9c8      	bls.n	80142ce <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801433c:	683b      	ldr	r3, [r7, #0]
 801433e:	781b      	ldrb	r3, [r3, #0]
 8014340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014344:	2b00      	cmp	r3, #0
 8014346:	d00b      	beq.n	8014360 <cmp_lfn+0xd0>
 8014348:	89fb      	ldrh	r3, [r7, #14]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d008      	beq.n	8014360 <cmp_lfn+0xd0>
 801434e:	697b      	ldr	r3, [r7, #20]
 8014350:	005b      	lsls	r3, r3, #1
 8014352:	687a      	ldr	r2, [r7, #4]
 8014354:	4413      	add	r3, r2
 8014356:	881b      	ldrh	r3, [r3, #0]
 8014358:	2b00      	cmp	r3, #0
 801435a:	d001      	beq.n	8014360 <cmp_lfn+0xd0>
 801435c:	2300      	movs	r3, #0
 801435e:	e000      	b.n	8014362 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8014360:	2301      	movs	r3, #1
}
 8014362:	4618      	mov	r0, r3
 8014364:	371c      	adds	r7, #28
 8014366:	46bd      	mov	sp, r7
 8014368:	bd90      	pop	{r4, r7, pc}
 801436a:	bf00      	nop
 801436c:	08017658 	.word	0x08017658

08014370 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8014370:	b580      	push	{r7, lr}
 8014372:	b088      	sub	sp, #32
 8014374:	af00      	add	r7, sp, #0
 8014376:	60f8      	str	r0, [r7, #12]
 8014378:	60b9      	str	r1, [r7, #8]
 801437a:	4611      	mov	r1, r2
 801437c:	461a      	mov	r2, r3
 801437e:	460b      	mov	r3, r1
 8014380:	71fb      	strb	r3, [r7, #7]
 8014382:	4613      	mov	r3, r2
 8014384:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8014386:	68bb      	ldr	r3, [r7, #8]
 8014388:	330d      	adds	r3, #13
 801438a:	79ba      	ldrb	r2, [r7, #6]
 801438c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801438e:	68bb      	ldr	r3, [r7, #8]
 8014390:	330b      	adds	r3, #11
 8014392:	220f      	movs	r2, #15
 8014394:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8014396:	68bb      	ldr	r3, [r7, #8]
 8014398:	330c      	adds	r3, #12
 801439a:	2200      	movs	r2, #0
 801439c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801439e:	68bb      	ldr	r3, [r7, #8]
 80143a0:	331a      	adds	r3, #26
 80143a2:	2100      	movs	r1, #0
 80143a4:	4618      	mov	r0, r3
 80143a6:	f7ff f8a2 	bl	80134ee <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80143aa:	79fb      	ldrb	r3, [r7, #7]
 80143ac:	1e5a      	subs	r2, r3, #1
 80143ae:	4613      	mov	r3, r2
 80143b0:	005b      	lsls	r3, r3, #1
 80143b2:	4413      	add	r3, r2
 80143b4:	009b      	lsls	r3, r3, #2
 80143b6:	4413      	add	r3, r2
 80143b8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80143ba:	2300      	movs	r3, #0
 80143bc:	82fb      	strh	r3, [r7, #22]
 80143be:	2300      	movs	r3, #0
 80143c0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80143c2:	8afb      	ldrh	r3, [r7, #22]
 80143c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80143c8:	4293      	cmp	r3, r2
 80143ca:	d007      	beq.n	80143dc <put_lfn+0x6c>
 80143cc:	69fb      	ldr	r3, [r7, #28]
 80143ce:	1c5a      	adds	r2, r3, #1
 80143d0:	61fa      	str	r2, [r7, #28]
 80143d2:	005b      	lsls	r3, r3, #1
 80143d4:	68fa      	ldr	r2, [r7, #12]
 80143d6:	4413      	add	r3, r2
 80143d8:	881b      	ldrh	r3, [r3, #0]
 80143da:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80143dc:	4a17      	ldr	r2, [pc, #92]	; (801443c <put_lfn+0xcc>)
 80143de:	69bb      	ldr	r3, [r7, #24]
 80143e0:	4413      	add	r3, r2
 80143e2:	781b      	ldrb	r3, [r3, #0]
 80143e4:	461a      	mov	r2, r3
 80143e6:	68bb      	ldr	r3, [r7, #8]
 80143e8:	4413      	add	r3, r2
 80143ea:	8afa      	ldrh	r2, [r7, #22]
 80143ec:	4611      	mov	r1, r2
 80143ee:	4618      	mov	r0, r3
 80143f0:	f7ff f87d 	bl	80134ee <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80143f4:	8afb      	ldrh	r3, [r7, #22]
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d102      	bne.n	8014400 <put_lfn+0x90>
 80143fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80143fe:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8014400:	69bb      	ldr	r3, [r7, #24]
 8014402:	3301      	adds	r3, #1
 8014404:	61bb      	str	r3, [r7, #24]
 8014406:	69bb      	ldr	r3, [r7, #24]
 8014408:	2b0c      	cmp	r3, #12
 801440a:	d9da      	bls.n	80143c2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801440c:	8afb      	ldrh	r3, [r7, #22]
 801440e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014412:	4293      	cmp	r3, r2
 8014414:	d006      	beq.n	8014424 <put_lfn+0xb4>
 8014416:	69fb      	ldr	r3, [r7, #28]
 8014418:	005b      	lsls	r3, r3, #1
 801441a:	68fa      	ldr	r2, [r7, #12]
 801441c:	4413      	add	r3, r2
 801441e:	881b      	ldrh	r3, [r3, #0]
 8014420:	2b00      	cmp	r3, #0
 8014422:	d103      	bne.n	801442c <put_lfn+0xbc>
 8014424:	79fb      	ldrb	r3, [r7, #7]
 8014426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801442a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801442c:	68bb      	ldr	r3, [r7, #8]
 801442e:	79fa      	ldrb	r2, [r7, #7]
 8014430:	701a      	strb	r2, [r3, #0]
}
 8014432:	bf00      	nop
 8014434:	3720      	adds	r7, #32
 8014436:	46bd      	mov	sp, r7
 8014438:	bd80      	pop	{r7, pc}
 801443a:	bf00      	nop
 801443c:	08017658 	.word	0x08017658

08014440 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8014440:	b580      	push	{r7, lr}
 8014442:	b08c      	sub	sp, #48	; 0x30
 8014444:	af00      	add	r7, sp, #0
 8014446:	60f8      	str	r0, [r7, #12]
 8014448:	60b9      	str	r1, [r7, #8]
 801444a:	607a      	str	r2, [r7, #4]
 801444c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801444e:	220b      	movs	r2, #11
 8014450:	68b9      	ldr	r1, [r7, #8]
 8014452:	68f8      	ldr	r0, [r7, #12]
 8014454:	f7ff f892 	bl	801357c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8014458:	683b      	ldr	r3, [r7, #0]
 801445a:	2b05      	cmp	r3, #5
 801445c:	d92b      	bls.n	80144b6 <gen_numname+0x76>
		sr = seq;
 801445e:	683b      	ldr	r3, [r7, #0]
 8014460:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8014462:	e022      	b.n	80144aa <gen_numname+0x6a>
			wc = *lfn++;
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	1c9a      	adds	r2, r3, #2
 8014468:	607a      	str	r2, [r7, #4]
 801446a:	881b      	ldrh	r3, [r3, #0]
 801446c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 801446e:	2300      	movs	r3, #0
 8014470:	62bb      	str	r3, [r7, #40]	; 0x28
 8014472:	e017      	b.n	80144a4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8014474:	69fb      	ldr	r3, [r7, #28]
 8014476:	005a      	lsls	r2, r3, #1
 8014478:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801447a:	f003 0301 	and.w	r3, r3, #1
 801447e:	4413      	add	r3, r2
 8014480:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8014482:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014484:	085b      	lsrs	r3, r3, #1
 8014486:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8014488:	69fb      	ldr	r3, [r7, #28]
 801448a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801448e:	2b00      	cmp	r3, #0
 8014490:	d005      	beq.n	801449e <gen_numname+0x5e>
 8014492:	69fb      	ldr	r3, [r7, #28]
 8014494:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8014498:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 801449c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801449e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144a0:	3301      	adds	r3, #1
 80144a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80144a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144a6:	2b0f      	cmp	r3, #15
 80144a8:	d9e4      	bls.n	8014474 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	881b      	ldrh	r3, [r3, #0]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d1d8      	bne.n	8014464 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80144b2:	69fb      	ldr	r3, [r7, #28]
 80144b4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80144b6:	2307      	movs	r3, #7
 80144b8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80144ba:	683b      	ldr	r3, [r7, #0]
 80144bc:	b2db      	uxtb	r3, r3
 80144be:	f003 030f 	and.w	r3, r3, #15
 80144c2:	b2db      	uxtb	r3, r3
 80144c4:	3330      	adds	r3, #48	; 0x30
 80144c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80144ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80144ce:	2b39      	cmp	r3, #57	; 0x39
 80144d0:	d904      	bls.n	80144dc <gen_numname+0x9c>
 80144d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80144d6:	3307      	adds	r3, #7
 80144d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80144dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144de:	1e5a      	subs	r2, r3, #1
 80144e0:	62ba      	str	r2, [r7, #40]	; 0x28
 80144e2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80144e6:	4413      	add	r3, r2
 80144e8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80144ec:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80144f0:	683b      	ldr	r3, [r7, #0]
 80144f2:	091b      	lsrs	r3, r3, #4
 80144f4:	603b      	str	r3, [r7, #0]
	} while (seq);
 80144f6:	683b      	ldr	r3, [r7, #0]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d1de      	bne.n	80144ba <gen_numname+0x7a>
	ns[i] = '~';
 80144fc:	f107 0214 	add.w	r2, r7, #20
 8014500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014502:	4413      	add	r3, r2
 8014504:	227e      	movs	r2, #126	; 0x7e
 8014506:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8014508:	2300      	movs	r3, #0
 801450a:	627b      	str	r3, [r7, #36]	; 0x24
 801450c:	e002      	b.n	8014514 <gen_numname+0xd4>
 801450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014510:	3301      	adds	r3, #1
 8014512:	627b      	str	r3, [r7, #36]	; 0x24
 8014514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014518:	429a      	cmp	r2, r3
 801451a:	d205      	bcs.n	8014528 <gen_numname+0xe8>
 801451c:	68fa      	ldr	r2, [r7, #12]
 801451e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014520:	4413      	add	r3, r2
 8014522:	781b      	ldrb	r3, [r3, #0]
 8014524:	2b20      	cmp	r3, #32
 8014526:	d1f2      	bne.n	801450e <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8014528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801452a:	2b07      	cmp	r3, #7
 801452c:	d808      	bhi.n	8014540 <gen_numname+0x100>
 801452e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014530:	1c5a      	adds	r2, r3, #1
 8014532:	62ba      	str	r2, [r7, #40]	; 0x28
 8014534:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014538:	4413      	add	r3, r2
 801453a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801453e:	e000      	b.n	8014542 <gen_numname+0x102>
 8014540:	2120      	movs	r1, #32
 8014542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014544:	1c5a      	adds	r2, r3, #1
 8014546:	627a      	str	r2, [r7, #36]	; 0x24
 8014548:	68fa      	ldr	r2, [r7, #12]
 801454a:	4413      	add	r3, r2
 801454c:	460a      	mov	r2, r1
 801454e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8014550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014552:	2b07      	cmp	r3, #7
 8014554:	d9e8      	bls.n	8014528 <gen_numname+0xe8>
}
 8014556:	bf00      	nop
 8014558:	bf00      	nop
 801455a:	3730      	adds	r7, #48	; 0x30
 801455c:	46bd      	mov	sp, r7
 801455e:	bd80      	pop	{r7, pc}

08014560 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8014560:	b480      	push	{r7}
 8014562:	b085      	sub	sp, #20
 8014564:	af00      	add	r7, sp, #0
 8014566:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8014568:	2300      	movs	r3, #0
 801456a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801456c:	230b      	movs	r3, #11
 801456e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8014570:	7bfb      	ldrb	r3, [r7, #15]
 8014572:	b2da      	uxtb	r2, r3
 8014574:	0852      	lsrs	r2, r2, #1
 8014576:	01db      	lsls	r3, r3, #7
 8014578:	4313      	orrs	r3, r2
 801457a:	b2da      	uxtb	r2, r3
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	1c59      	adds	r1, r3, #1
 8014580:	6079      	str	r1, [r7, #4]
 8014582:	781b      	ldrb	r3, [r3, #0]
 8014584:	4413      	add	r3, r2
 8014586:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8014588:	68bb      	ldr	r3, [r7, #8]
 801458a:	3b01      	subs	r3, #1
 801458c:	60bb      	str	r3, [r7, #8]
 801458e:	68bb      	ldr	r3, [r7, #8]
 8014590:	2b00      	cmp	r3, #0
 8014592:	d1ed      	bne.n	8014570 <sum_sfn+0x10>
	return sum;
 8014594:	7bfb      	ldrb	r3, [r7, #15]
}
 8014596:	4618      	mov	r0, r3
 8014598:	3714      	adds	r7, #20
 801459a:	46bd      	mov	sp, r7
 801459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145a0:	4770      	bx	lr

080145a2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80145a2:	b580      	push	{r7, lr}
 80145a4:	b086      	sub	sp, #24
 80145a6:	af00      	add	r7, sp, #0
 80145a8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	681b      	ldr	r3, [r3, #0]
 80145ae:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80145b0:	2100      	movs	r1, #0
 80145b2:	6878      	ldr	r0, [r7, #4]
 80145b4:	f7ff fc86 	bl	8013ec4 <dir_sdi>
 80145b8:	4603      	mov	r3, r0
 80145ba:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80145bc:	7dfb      	ldrb	r3, [r7, #23]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	d001      	beq.n	80145c6 <dir_find+0x24>
 80145c2:	7dfb      	ldrb	r3, [r7, #23]
 80145c4:	e0a9      	b.n	801471a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80145c6:	23ff      	movs	r3, #255	; 0xff
 80145c8:	753b      	strb	r3, [r7, #20]
 80145ca:	7d3b      	ldrb	r3, [r7, #20]
 80145cc:	757b      	strb	r3, [r7, #21]
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	f04f 32ff 	mov.w	r2, #4294967295
 80145d4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
	do {
		res = move_window(fs, dp->sect);
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	699b      	ldr	r3, [r3, #24]
 80145da:	4619      	mov	r1, r3
 80145dc:	6938      	ldr	r0, [r7, #16]
 80145de:	f7ff f88f 	bl	8013700 <move_window>
 80145e2:	4603      	mov	r3, r0
 80145e4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80145e6:	7dfb      	ldrb	r3, [r7, #23]
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	f040 8090 	bne.w	801470e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	69db      	ldr	r3, [r3, #28]
 80145f2:	781b      	ldrb	r3, [r3, #0]
 80145f4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80145f6:	7dbb      	ldrb	r3, [r7, #22]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d102      	bne.n	8014602 <dir_find+0x60>
 80145fc:	2304      	movs	r3, #4
 80145fe:	75fb      	strb	r3, [r7, #23]
 8014600:	e08a      	b.n	8014718 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	69db      	ldr	r3, [r3, #28]
 8014606:	330b      	adds	r3, #11
 8014608:	781b      	ldrb	r3, [r3, #0]
 801460a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801460e:	73fb      	strb	r3, [r7, #15]
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	7bfa      	ldrb	r2, [r7, #15]
 8014614:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8014616:	7dbb      	ldrb	r3, [r7, #22]
 8014618:	2be5      	cmp	r3, #229	; 0xe5
 801461a:	d007      	beq.n	801462c <dir_find+0x8a>
 801461c:	7bfb      	ldrb	r3, [r7, #15]
 801461e:	f003 0308 	and.w	r3, r3, #8
 8014622:	2b00      	cmp	r3, #0
 8014624:	d009      	beq.n	801463a <dir_find+0x98>
 8014626:	7bfb      	ldrb	r3, [r7, #15]
 8014628:	2b0f      	cmp	r3, #15
 801462a:	d006      	beq.n	801463a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801462c:	23ff      	movs	r3, #255	; 0xff
 801462e:	757b      	strb	r3, [r7, #21]
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	f04f 32ff 	mov.w	r2, #4294967295
 8014636:	62da      	str	r2, [r3, #44]	; 0x2c
 8014638:	e05e      	b.n	80146f8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801463a:	7bfb      	ldrb	r3, [r7, #15]
 801463c:	2b0f      	cmp	r3, #15
 801463e:	d136      	bne.n	80146ae <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8014646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801464a:	2b00      	cmp	r3, #0
 801464c:	d154      	bne.n	80146f8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801464e:	7dbb      	ldrb	r3, [r7, #22]
 8014650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014654:	2b00      	cmp	r3, #0
 8014656:	d00d      	beq.n	8014674 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	69db      	ldr	r3, [r3, #28]
 801465c:	7b5b      	ldrb	r3, [r3, #13]
 801465e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8014660:	7dbb      	ldrb	r3, [r7, #22]
 8014662:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014666:	75bb      	strb	r3, [r7, #22]
 8014668:	7dbb      	ldrb	r3, [r7, #22]
 801466a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	691a      	ldr	r2, [r3, #16]
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	62da      	str	r2, [r3, #44]	; 0x2c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8014674:	7dba      	ldrb	r2, [r7, #22]
 8014676:	7d7b      	ldrb	r3, [r7, #21]
 8014678:	429a      	cmp	r2, r3
 801467a:	d115      	bne.n	80146a8 <dir_find+0x106>
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	69db      	ldr	r3, [r3, #28]
 8014680:	330d      	adds	r3, #13
 8014682:	781b      	ldrb	r3, [r3, #0]
 8014684:	7d3a      	ldrb	r2, [r7, #20]
 8014686:	429a      	cmp	r2, r3
 8014688:	d10e      	bne.n	80146a8 <dir_find+0x106>
 801468a:	693b      	ldr	r3, [r7, #16]
 801468c:	691a      	ldr	r2, [r3, #16]
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	69db      	ldr	r3, [r3, #28]
 8014692:	4619      	mov	r1, r3
 8014694:	4610      	mov	r0, r2
 8014696:	f7ff fdfb 	bl	8014290 <cmp_lfn>
 801469a:	4603      	mov	r3, r0
 801469c:	2b00      	cmp	r3, #0
 801469e:	d003      	beq.n	80146a8 <dir_find+0x106>
 80146a0:	7d7b      	ldrb	r3, [r7, #21]
 80146a2:	3b01      	subs	r3, #1
 80146a4:	b2db      	uxtb	r3, r3
 80146a6:	e000      	b.n	80146aa <dir_find+0x108>
 80146a8:	23ff      	movs	r3, #255	; 0xff
 80146aa:	757b      	strb	r3, [r7, #21]
 80146ac:	e024      	b.n	80146f8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80146ae:	7d7b      	ldrb	r3, [r7, #21]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d109      	bne.n	80146c8 <dir_find+0x126>
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	69db      	ldr	r3, [r3, #28]
 80146b8:	4618      	mov	r0, r3
 80146ba:	f7ff ff51 	bl	8014560 <sum_sfn>
 80146be:	4603      	mov	r3, r0
 80146c0:	461a      	mov	r2, r3
 80146c2:	7d3b      	ldrb	r3, [r7, #20]
 80146c4:	4293      	cmp	r3, r2
 80146c6:	d024      	beq.n	8014712 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80146ce:	f003 0301 	and.w	r3, r3, #1
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d10a      	bne.n	80146ec <dir_find+0x14a>
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	69d8      	ldr	r0, [r3, #28]
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	3320      	adds	r3, #32
 80146de:	220b      	movs	r2, #11
 80146e0:	4619      	mov	r1, r3
 80146e2:	f7fe ff87 	bl	80135f4 <mem_cmp>
 80146e6:	4603      	mov	r3, r0
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d014      	beq.n	8014716 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80146ec:	23ff      	movs	r3, #255	; 0xff
 80146ee:	757b      	strb	r3, [r7, #21]
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	f04f 32ff 	mov.w	r2, #4294967295
 80146f6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80146f8:	2100      	movs	r1, #0
 80146fa:	6878      	ldr	r0, [r7, #4]
 80146fc:	f7ff fc6b 	bl	8013fd6 <dir_next>
 8014700:	4603      	mov	r3, r0
 8014702:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8014704:	7dfb      	ldrb	r3, [r7, #23]
 8014706:	2b00      	cmp	r3, #0
 8014708:	f43f af65 	beq.w	80145d6 <dir_find+0x34>
 801470c:	e004      	b.n	8014718 <dir_find+0x176>
		if (res != FR_OK) break;
 801470e:	bf00      	nop
 8014710:	e002      	b.n	8014718 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8014712:	bf00      	nop
 8014714:	e000      	b.n	8014718 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8014716:	bf00      	nop

	return res;
 8014718:	7dfb      	ldrb	r3, [r7, #23]
}
 801471a:	4618      	mov	r0, r3
 801471c:	3718      	adds	r7, #24
 801471e:	46bd      	mov	sp, r7
 8014720:	bd80      	pop	{r7, pc}
	...

08014724 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8014724:	b580      	push	{r7, lr}
 8014726:	b08c      	sub	sp, #48	; 0x30
 8014728:	af00      	add	r7, sp, #0
 801472a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8014738:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 801473c:	2b00      	cmp	r3, #0
 801473e:	d001      	beq.n	8014744 <dir_register+0x20>
 8014740:	2306      	movs	r3, #6
 8014742:	e0e0      	b.n	8014906 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8014744:	2300      	movs	r3, #0
 8014746:	627b      	str	r3, [r7, #36]	; 0x24
 8014748:	e002      	b.n	8014750 <dir_register+0x2c>
 801474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801474c:	3301      	adds	r3, #1
 801474e:	627b      	str	r3, [r7, #36]	; 0x24
 8014750:	69fb      	ldr	r3, [r7, #28]
 8014752:	691a      	ldr	r2, [r3, #16]
 8014754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014756:	005b      	lsls	r3, r3, #1
 8014758:	4413      	add	r3, r2
 801475a:	881b      	ldrh	r3, [r3, #0]
 801475c:	2b00      	cmp	r3, #0
 801475e:	d1f4      	bne.n	801474a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	f103 0120 	add.w	r1, r3, #32
 8014766:	f107 030c 	add.w	r3, r7, #12
 801476a:	220c      	movs	r2, #12
 801476c:	4618      	mov	r0, r3
 801476e:	f7fe ff05 	bl	801357c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8014772:	7dfb      	ldrb	r3, [r7, #23]
 8014774:	f003 0301 	and.w	r3, r3, #1
 8014778:	2b00      	cmp	r3, #0
 801477a:	d032      	beq.n	80147e2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	2240      	movs	r2, #64	; 0x40
 8014780:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		for (n = 1; n < 100; n++) {
 8014784:	2301      	movs	r3, #1
 8014786:	62bb      	str	r3, [r7, #40]	; 0x28
 8014788:	e016      	b.n	80147b8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	f103 0020 	add.w	r0, r3, #32
 8014790:	69fb      	ldr	r3, [r7, #28]
 8014792:	691a      	ldr	r2, [r3, #16]
 8014794:	f107 010c 	add.w	r1, r7, #12
 8014798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801479a:	f7ff fe51 	bl	8014440 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801479e:	6878      	ldr	r0, [r7, #4]
 80147a0:	f7ff feff 	bl	80145a2 <dir_find>
 80147a4:	4603      	mov	r3, r0
 80147a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80147aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d106      	bne.n	80147c0 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80147b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147b4:	3301      	adds	r3, #1
 80147b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80147b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147ba:	2b63      	cmp	r3, #99	; 0x63
 80147bc:	d9e5      	bls.n	801478a <dir_register+0x66>
 80147be:	e000      	b.n	80147c2 <dir_register+0x9e>
			if (res != FR_OK) break;
 80147c0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80147c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147c4:	2b64      	cmp	r3, #100	; 0x64
 80147c6:	d101      	bne.n	80147cc <dir_register+0xa8>
 80147c8:	2307      	movs	r3, #7
 80147ca:	e09c      	b.n	8014906 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80147cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80147d0:	2b04      	cmp	r3, #4
 80147d2:	d002      	beq.n	80147da <dir_register+0xb6>
 80147d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80147d8:	e095      	b.n	8014906 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80147da:	7dfa      	ldrb	r2, [r7, #23]
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80147e2:	7dfb      	ldrb	r3, [r7, #23]
 80147e4:	f003 0302 	and.w	r3, r3, #2
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d007      	beq.n	80147fc <dir_register+0xd8>
 80147ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147ee:	330c      	adds	r3, #12
 80147f0:	4a47      	ldr	r2, [pc, #284]	; (8014910 <dir_register+0x1ec>)
 80147f2:	fba2 2303 	umull	r2, r3, r2, r3
 80147f6:	089b      	lsrs	r3, r3, #2
 80147f8:	3301      	adds	r3, #1
 80147fa:	e000      	b.n	80147fe <dir_register+0xda>
 80147fc:	2301      	movs	r3, #1
 80147fe:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8014800:	6a39      	ldr	r1, [r7, #32]
 8014802:	6878      	ldr	r0, [r7, #4]
 8014804:	f7ff fcbd 	bl	8014182 <dir_alloc>
 8014808:	4603      	mov	r3, r0
 801480a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801480e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014812:	2b00      	cmp	r3, #0
 8014814:	d148      	bne.n	80148a8 <dir_register+0x184>
 8014816:	6a3b      	ldr	r3, [r7, #32]
 8014818:	3b01      	subs	r3, #1
 801481a:	623b      	str	r3, [r7, #32]
 801481c:	6a3b      	ldr	r3, [r7, #32]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d042      	beq.n	80148a8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	691a      	ldr	r2, [r3, #16]
 8014826:	6a3b      	ldr	r3, [r7, #32]
 8014828:	015b      	lsls	r3, r3, #5
 801482a:	1ad3      	subs	r3, r2, r3
 801482c:	4619      	mov	r1, r3
 801482e:	6878      	ldr	r0, [r7, #4]
 8014830:	f7ff fb48 	bl	8013ec4 <dir_sdi>
 8014834:	4603      	mov	r3, r0
 8014836:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801483a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801483e:	2b00      	cmp	r3, #0
 8014840:	d132      	bne.n	80148a8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	3320      	adds	r3, #32
 8014846:	4618      	mov	r0, r3
 8014848:	f7ff fe8a 	bl	8014560 <sum_sfn>
 801484c:	4603      	mov	r3, r0
 801484e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	699b      	ldr	r3, [r3, #24]
 8014854:	4619      	mov	r1, r3
 8014856:	69f8      	ldr	r0, [r7, #28]
 8014858:	f7fe ff52 	bl	8013700 <move_window>
 801485c:	4603      	mov	r3, r0
 801485e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8014862:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014866:	2b00      	cmp	r3, #0
 8014868:	d11d      	bne.n	80148a6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801486a:	69fb      	ldr	r3, [r7, #28]
 801486c:	6918      	ldr	r0, [r3, #16]
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	69d9      	ldr	r1, [r3, #28]
 8014872:	6a3b      	ldr	r3, [r7, #32]
 8014874:	b2da      	uxtb	r2, r3
 8014876:	7efb      	ldrb	r3, [r7, #27]
 8014878:	f7ff fd7a 	bl	8014370 <put_lfn>
				fs->wflag = 1;
 801487c:	69fb      	ldr	r3, [r7, #28]
 801487e:	2201      	movs	r2, #1
 8014880:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8014882:	2100      	movs	r1, #0
 8014884:	6878      	ldr	r0, [r7, #4]
 8014886:	f7ff fba6 	bl	8013fd6 <dir_next>
 801488a:	4603      	mov	r3, r0
 801488c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8014890:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014894:	2b00      	cmp	r3, #0
 8014896:	d107      	bne.n	80148a8 <dir_register+0x184>
 8014898:	6a3b      	ldr	r3, [r7, #32]
 801489a:	3b01      	subs	r3, #1
 801489c:	623b      	str	r3, [r7, #32]
 801489e:	6a3b      	ldr	r3, [r7, #32]
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d1d5      	bne.n	8014850 <dir_register+0x12c>
 80148a4:	e000      	b.n	80148a8 <dir_register+0x184>
				if (res != FR_OK) break;
 80148a6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80148a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d128      	bne.n	8014902 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	699b      	ldr	r3, [r3, #24]
 80148b4:	4619      	mov	r1, r3
 80148b6:	69f8      	ldr	r0, [r7, #28]
 80148b8:	f7fe ff22 	bl	8013700 <move_window>
 80148bc:	4603      	mov	r3, r0
 80148be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80148c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d11b      	bne.n	8014902 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	69db      	ldr	r3, [r3, #28]
 80148ce:	2220      	movs	r2, #32
 80148d0:	2100      	movs	r1, #0
 80148d2:	4618      	mov	r0, r3
 80148d4:	f7fe fe73 	bl	80135be <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	69d8      	ldr	r0, [r3, #28]
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	3320      	adds	r3, #32
 80148e0:	220b      	movs	r2, #11
 80148e2:	4619      	mov	r1, r3
 80148e4:	f7fe fe4a 	bl	801357c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	69db      	ldr	r3, [r3, #28]
 80148f2:	330c      	adds	r3, #12
 80148f4:	f002 0218 	and.w	r2, r2, #24
 80148f8:	b2d2      	uxtb	r2, r2
 80148fa:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80148fc:	69fb      	ldr	r3, [r7, #28]
 80148fe:	2201      	movs	r2, #1
 8014900:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8014902:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8014906:	4618      	mov	r0, r3
 8014908:	3730      	adds	r7, #48	; 0x30
 801490a:	46bd      	mov	sp, r7
 801490c:	bd80      	pop	{r7, pc}
 801490e:	bf00      	nop
 8014910:	4ec4ec4f 	.word	0x4ec4ec4f

08014914 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8014914:	b580      	push	{r7, lr}
 8014916:	b08a      	sub	sp, #40	; 0x28
 8014918:	af00      	add	r7, sp, #0
 801491a:	6078      	str	r0, [r7, #4]
 801491c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801491e:	683b      	ldr	r3, [r7, #0]
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	613b      	str	r3, [r7, #16]
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	691b      	ldr	r3, [r3, #16]
 801492a:	60fb      	str	r3, [r7, #12]
 801492c:	2300      	movs	r3, #0
 801492e:	617b      	str	r3, [r7, #20]
 8014930:	697b      	ldr	r3, [r7, #20]
 8014932:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8014934:	69bb      	ldr	r3, [r7, #24]
 8014936:	1c5a      	adds	r2, r3, #1
 8014938:	61ba      	str	r2, [r7, #24]
 801493a:	693a      	ldr	r2, [r7, #16]
 801493c:	4413      	add	r3, r2
 801493e:	781b      	ldrb	r3, [r3, #0]
 8014940:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8014942:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014944:	2b1f      	cmp	r3, #31
 8014946:	d940      	bls.n	80149ca <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8014948:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801494a:	2b2f      	cmp	r3, #47	; 0x2f
 801494c:	d006      	beq.n	801495c <create_name+0x48>
 801494e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014950:	2b5c      	cmp	r3, #92	; 0x5c
 8014952:	d110      	bne.n	8014976 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8014954:	e002      	b.n	801495c <create_name+0x48>
 8014956:	69bb      	ldr	r3, [r7, #24]
 8014958:	3301      	adds	r3, #1
 801495a:	61bb      	str	r3, [r7, #24]
 801495c:	693a      	ldr	r2, [r7, #16]
 801495e:	69bb      	ldr	r3, [r7, #24]
 8014960:	4413      	add	r3, r2
 8014962:	781b      	ldrb	r3, [r3, #0]
 8014964:	2b2f      	cmp	r3, #47	; 0x2f
 8014966:	d0f6      	beq.n	8014956 <create_name+0x42>
 8014968:	693a      	ldr	r2, [r7, #16]
 801496a:	69bb      	ldr	r3, [r7, #24]
 801496c:	4413      	add	r3, r2
 801496e:	781b      	ldrb	r3, [r3, #0]
 8014970:	2b5c      	cmp	r3, #92	; 0x5c
 8014972:	d0f0      	beq.n	8014956 <create_name+0x42>
			break;
 8014974:	e02a      	b.n	80149cc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8014976:	697b      	ldr	r3, [r7, #20]
 8014978:	2bfe      	cmp	r3, #254	; 0xfe
 801497a:	d901      	bls.n	8014980 <create_name+0x6c>
 801497c:	2306      	movs	r3, #6
 801497e:	e177      	b.n	8014c70 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8014980:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014982:	b2db      	uxtb	r3, r3
 8014984:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8014986:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014988:	2101      	movs	r1, #1
 801498a:	4618      	mov	r0, r3
 801498c:	f001 fb32 	bl	8015ff4 <ff_convert>
 8014990:	4603      	mov	r3, r0
 8014992:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8014994:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014996:	2b00      	cmp	r3, #0
 8014998:	d101      	bne.n	801499e <create_name+0x8a>
 801499a:	2306      	movs	r3, #6
 801499c:	e168      	b.n	8014c70 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801499e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80149a0:	2b7f      	cmp	r3, #127	; 0x7f
 80149a2:	d809      	bhi.n	80149b8 <create_name+0xa4>
 80149a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80149a6:	4619      	mov	r1, r3
 80149a8:	48b3      	ldr	r0, [pc, #716]	; (8014c78 <create_name+0x364>)
 80149aa:	f7fe fe4a 	bl	8013642 <chk_chr>
 80149ae:	4603      	mov	r3, r0
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d001      	beq.n	80149b8 <create_name+0xa4>
 80149b4:	2306      	movs	r3, #6
 80149b6:	e15b      	b.n	8014c70 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 80149b8:	697b      	ldr	r3, [r7, #20]
 80149ba:	1c5a      	adds	r2, r3, #1
 80149bc:	617a      	str	r2, [r7, #20]
 80149be:	005b      	lsls	r3, r3, #1
 80149c0:	68fa      	ldr	r2, [r7, #12]
 80149c2:	4413      	add	r3, r2
 80149c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80149c6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80149c8:	e7b4      	b.n	8014934 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80149ca:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80149cc:	693a      	ldr	r2, [r7, #16]
 80149ce:	69bb      	ldr	r3, [r7, #24]
 80149d0:	441a      	add	r2, r3
 80149d2:	683b      	ldr	r3, [r7, #0]
 80149d4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80149d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80149d8:	2b1f      	cmp	r3, #31
 80149da:	d801      	bhi.n	80149e0 <create_name+0xcc>
 80149dc:	2304      	movs	r3, #4
 80149de:	e000      	b.n	80149e2 <create_name+0xce>
 80149e0:	2300      	movs	r3, #0
 80149e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80149e6:	e011      	b.n	8014a0c <create_name+0xf8>
		w = lfn[di - 1];
 80149e8:	697b      	ldr	r3, [r7, #20]
 80149ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80149ee:	3b01      	subs	r3, #1
 80149f0:	005b      	lsls	r3, r3, #1
 80149f2:	68fa      	ldr	r2, [r7, #12]
 80149f4:	4413      	add	r3, r2
 80149f6:	881b      	ldrh	r3, [r3, #0]
 80149f8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80149fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80149fc:	2b20      	cmp	r3, #32
 80149fe:	d002      	beq.n	8014a06 <create_name+0xf2>
 8014a00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014a02:	2b2e      	cmp	r3, #46	; 0x2e
 8014a04:	d106      	bne.n	8014a14 <create_name+0x100>
		di--;
 8014a06:	697b      	ldr	r3, [r7, #20]
 8014a08:	3b01      	subs	r3, #1
 8014a0a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8014a0c:	697b      	ldr	r3, [r7, #20]
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d1ea      	bne.n	80149e8 <create_name+0xd4>
 8014a12:	e000      	b.n	8014a16 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8014a14:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8014a16:	697b      	ldr	r3, [r7, #20]
 8014a18:	005b      	lsls	r3, r3, #1
 8014a1a:	68fa      	ldr	r2, [r7, #12]
 8014a1c:	4413      	add	r3, r2
 8014a1e:	2200      	movs	r2, #0
 8014a20:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8014a22:	697b      	ldr	r3, [r7, #20]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d101      	bne.n	8014a2c <create_name+0x118>
 8014a28:	2306      	movs	r3, #6
 8014a2a:	e121      	b.n	8014c70 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	3320      	adds	r3, #32
 8014a30:	220b      	movs	r2, #11
 8014a32:	2120      	movs	r1, #32
 8014a34:	4618      	mov	r0, r3
 8014a36:	f7fe fdc2 	bl	80135be <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8014a3a:	2300      	movs	r3, #0
 8014a3c:	61bb      	str	r3, [r7, #24]
 8014a3e:	e002      	b.n	8014a46 <create_name+0x132>
 8014a40:	69bb      	ldr	r3, [r7, #24]
 8014a42:	3301      	adds	r3, #1
 8014a44:	61bb      	str	r3, [r7, #24]
 8014a46:	69bb      	ldr	r3, [r7, #24]
 8014a48:	005b      	lsls	r3, r3, #1
 8014a4a:	68fa      	ldr	r2, [r7, #12]
 8014a4c:	4413      	add	r3, r2
 8014a4e:	881b      	ldrh	r3, [r3, #0]
 8014a50:	2b20      	cmp	r3, #32
 8014a52:	d0f5      	beq.n	8014a40 <create_name+0x12c>
 8014a54:	69bb      	ldr	r3, [r7, #24]
 8014a56:	005b      	lsls	r3, r3, #1
 8014a58:	68fa      	ldr	r2, [r7, #12]
 8014a5a:	4413      	add	r3, r2
 8014a5c:	881b      	ldrh	r3, [r3, #0]
 8014a5e:	2b2e      	cmp	r3, #46	; 0x2e
 8014a60:	d0ee      	beq.n	8014a40 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8014a62:	69bb      	ldr	r3, [r7, #24]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d009      	beq.n	8014a7c <create_name+0x168>
 8014a68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014a6c:	f043 0303 	orr.w	r3, r3, #3
 8014a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8014a74:	e002      	b.n	8014a7c <create_name+0x168>
 8014a76:	697b      	ldr	r3, [r7, #20]
 8014a78:	3b01      	subs	r3, #1
 8014a7a:	617b      	str	r3, [r7, #20]
 8014a7c:	697b      	ldr	r3, [r7, #20]
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d009      	beq.n	8014a96 <create_name+0x182>
 8014a82:	697b      	ldr	r3, [r7, #20]
 8014a84:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014a88:	3b01      	subs	r3, #1
 8014a8a:	005b      	lsls	r3, r3, #1
 8014a8c:	68fa      	ldr	r2, [r7, #12]
 8014a8e:	4413      	add	r3, r2
 8014a90:	881b      	ldrh	r3, [r3, #0]
 8014a92:	2b2e      	cmp	r3, #46	; 0x2e
 8014a94:	d1ef      	bne.n	8014a76 <create_name+0x162>

	i = b = 0; ni = 8;
 8014a96:	2300      	movs	r3, #0
 8014a98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014a9c:	2300      	movs	r3, #0
 8014a9e:	623b      	str	r3, [r7, #32]
 8014aa0:	2308      	movs	r3, #8
 8014aa2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8014aa4:	69bb      	ldr	r3, [r7, #24]
 8014aa6:	1c5a      	adds	r2, r3, #1
 8014aa8:	61ba      	str	r2, [r7, #24]
 8014aaa:	005b      	lsls	r3, r3, #1
 8014aac:	68fa      	ldr	r2, [r7, #12]
 8014aae:	4413      	add	r3, r2
 8014ab0:	881b      	ldrh	r3, [r3, #0]
 8014ab2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8014ab4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	f000 8090 	beq.w	8014bdc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8014abc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014abe:	2b20      	cmp	r3, #32
 8014ac0:	d006      	beq.n	8014ad0 <create_name+0x1bc>
 8014ac2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014ac4:	2b2e      	cmp	r3, #46	; 0x2e
 8014ac6:	d10a      	bne.n	8014ade <create_name+0x1ca>
 8014ac8:	69ba      	ldr	r2, [r7, #24]
 8014aca:	697b      	ldr	r3, [r7, #20]
 8014acc:	429a      	cmp	r2, r3
 8014ace:	d006      	beq.n	8014ade <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8014ad0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014ad4:	f043 0303 	orr.w	r3, r3, #3
 8014ad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014adc:	e07d      	b.n	8014bda <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8014ade:	6a3a      	ldr	r2, [r7, #32]
 8014ae0:	69fb      	ldr	r3, [r7, #28]
 8014ae2:	429a      	cmp	r2, r3
 8014ae4:	d203      	bcs.n	8014aee <create_name+0x1da>
 8014ae6:	69ba      	ldr	r2, [r7, #24]
 8014ae8:	697b      	ldr	r3, [r7, #20]
 8014aea:	429a      	cmp	r2, r3
 8014aec:	d123      	bne.n	8014b36 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8014aee:	69fb      	ldr	r3, [r7, #28]
 8014af0:	2b0b      	cmp	r3, #11
 8014af2:	d106      	bne.n	8014b02 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8014af4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014af8:	f043 0303 	orr.w	r3, r3, #3
 8014afc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014b00:	e06f      	b.n	8014be2 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8014b02:	69ba      	ldr	r2, [r7, #24]
 8014b04:	697b      	ldr	r3, [r7, #20]
 8014b06:	429a      	cmp	r2, r3
 8014b08:	d005      	beq.n	8014b16 <create_name+0x202>
 8014b0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b0e:	f043 0303 	orr.w	r3, r3, #3
 8014b12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8014b16:	69ba      	ldr	r2, [r7, #24]
 8014b18:	697b      	ldr	r3, [r7, #20]
 8014b1a:	429a      	cmp	r2, r3
 8014b1c:	d860      	bhi.n	8014be0 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8014b1e:	697b      	ldr	r3, [r7, #20]
 8014b20:	61bb      	str	r3, [r7, #24]
 8014b22:	2308      	movs	r3, #8
 8014b24:	623b      	str	r3, [r7, #32]
 8014b26:	230b      	movs	r3, #11
 8014b28:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8014b2a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014b2e:	009b      	lsls	r3, r3, #2
 8014b30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014b34:	e051      	b.n	8014bda <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8014b36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014b38:	2b7f      	cmp	r3, #127	; 0x7f
 8014b3a:	d914      	bls.n	8014b66 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8014b3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014b3e:	2100      	movs	r1, #0
 8014b40:	4618      	mov	r0, r3
 8014b42:	f001 fa57 	bl	8015ff4 <ff_convert>
 8014b46:	4603      	mov	r3, r0
 8014b48:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8014b4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d004      	beq.n	8014b5a <create_name+0x246>
 8014b50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014b52:	3b80      	subs	r3, #128	; 0x80
 8014b54:	4a49      	ldr	r2, [pc, #292]	; (8014c7c <create_name+0x368>)
 8014b56:	5cd3      	ldrb	r3, [r2, r3]
 8014b58:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8014b5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b5e:	f043 0302 	orr.w	r3, r3, #2
 8014b62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8014b66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d007      	beq.n	8014b7c <create_name+0x268>
 8014b6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014b6e:	4619      	mov	r1, r3
 8014b70:	4843      	ldr	r0, [pc, #268]	; (8014c80 <create_name+0x36c>)
 8014b72:	f7fe fd66 	bl	8013642 <chk_chr>
 8014b76:	4603      	mov	r3, r0
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d008      	beq.n	8014b8e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8014b7c:	235f      	movs	r3, #95	; 0x5f
 8014b7e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8014b80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b84:	f043 0303 	orr.w	r3, r3, #3
 8014b88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014b8c:	e01b      	b.n	8014bc6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8014b8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014b90:	2b40      	cmp	r3, #64	; 0x40
 8014b92:	d909      	bls.n	8014ba8 <create_name+0x294>
 8014b94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014b96:	2b5a      	cmp	r3, #90	; 0x5a
 8014b98:	d806      	bhi.n	8014ba8 <create_name+0x294>
					b |= 2;
 8014b9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014b9e:	f043 0302 	orr.w	r3, r3, #2
 8014ba2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014ba6:	e00e      	b.n	8014bc6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8014ba8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014baa:	2b60      	cmp	r3, #96	; 0x60
 8014bac:	d90b      	bls.n	8014bc6 <create_name+0x2b2>
 8014bae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014bb0:	2b7a      	cmp	r3, #122	; 0x7a
 8014bb2:	d808      	bhi.n	8014bc6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8014bb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014bb8:	f043 0301 	orr.w	r3, r3, #1
 8014bbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014bc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014bc2:	3b20      	subs	r3, #32
 8014bc4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8014bc6:	6a3b      	ldr	r3, [r7, #32]
 8014bc8:	1c5a      	adds	r2, r3, #1
 8014bca:	623a      	str	r2, [r7, #32]
 8014bcc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014bce:	b2d1      	uxtb	r1, r2
 8014bd0:	687a      	ldr	r2, [r7, #4]
 8014bd2:	4413      	add	r3, r2
 8014bd4:	460a      	mov	r2, r1
 8014bd6:	f883 2020 	strb.w	r2, [r3, #32]
		w = lfn[si++];					/* Get an LFN character */
 8014bda:	e763      	b.n	8014aa4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8014bdc:	bf00      	nop
 8014bde:	e000      	b.n	8014be2 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8014be0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014be8:	2be5      	cmp	r3, #229	; 0xe5
 8014bea:	d103      	bne.n	8014bf4 <create_name+0x2e0>
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	2205      	movs	r2, #5
 8014bf0:	f883 2020 	strb.w	r2, [r3, #32]

	if (ni == 8) b <<= 2;
 8014bf4:	69fb      	ldr	r3, [r7, #28]
 8014bf6:	2b08      	cmp	r3, #8
 8014bf8:	d104      	bne.n	8014c04 <create_name+0x2f0>
 8014bfa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014bfe:	009b      	lsls	r3, r3, #2
 8014c00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8014c04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014c08:	f003 030c 	and.w	r3, r3, #12
 8014c0c:	2b0c      	cmp	r3, #12
 8014c0e:	d005      	beq.n	8014c1c <create_name+0x308>
 8014c10:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014c14:	f003 0303 	and.w	r3, r3, #3
 8014c18:	2b03      	cmp	r3, #3
 8014c1a:	d105      	bne.n	8014c28 <create_name+0x314>
 8014c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c20:	f043 0302 	orr.w	r3, r3, #2
 8014c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8014c28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c2c:	f003 0302 	and.w	r3, r3, #2
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d117      	bne.n	8014c64 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8014c34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014c38:	f003 0303 	and.w	r3, r3, #3
 8014c3c:	2b01      	cmp	r3, #1
 8014c3e:	d105      	bne.n	8014c4c <create_name+0x338>
 8014c40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c44:	f043 0310 	orr.w	r3, r3, #16
 8014c48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8014c4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014c50:	f003 030c 	and.w	r3, r3, #12
 8014c54:	2b04      	cmp	r3, #4
 8014c56:	d105      	bne.n	8014c64 <create_name+0x350>
 8014c58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c5c:	f043 0308 	orr.w	r3, r3, #8
 8014c60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014c6a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	return FR_OK;
 8014c6e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8014c70:	4618      	mov	r0, r3
 8014c72:	3728      	adds	r7, #40	; 0x28
 8014c74:	46bd      	mov	sp, r7
 8014c76:	bd80      	pop	{r7, pc}
 8014c78:	08017518 	.word	0x08017518
 8014c7c:	080175d8 	.word	0x080175d8
 8014c80:	08017524 	.word	0x08017524

08014c84 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8014c84:	b580      	push	{r7, lr}
 8014c86:	b086      	sub	sp, #24
 8014c88:	af00      	add	r7, sp, #0
 8014c8a:	6078      	str	r0, [r7, #4]
 8014c8c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8014c92:	693b      	ldr	r3, [r7, #16]
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8014c98:	e002      	b.n	8014ca0 <follow_path+0x1c>
 8014c9a:	683b      	ldr	r3, [r7, #0]
 8014c9c:	3301      	adds	r3, #1
 8014c9e:	603b      	str	r3, [r7, #0]
 8014ca0:	683b      	ldr	r3, [r7, #0]
 8014ca2:	781b      	ldrb	r3, [r3, #0]
 8014ca4:	2b2f      	cmp	r3, #47	; 0x2f
 8014ca6:	d0f8      	beq.n	8014c9a <follow_path+0x16>
 8014ca8:	683b      	ldr	r3, [r7, #0]
 8014caa:	781b      	ldrb	r3, [r3, #0]
 8014cac:	2b5c      	cmp	r3, #92	; 0x5c
 8014cae:	d0f4      	beq.n	8014c9a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8014cb0:	693b      	ldr	r3, [r7, #16]
 8014cb2:	2200      	movs	r2, #0
 8014cb4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8014cb6:	683b      	ldr	r3, [r7, #0]
 8014cb8:	781b      	ldrb	r3, [r3, #0]
 8014cba:	2b1f      	cmp	r3, #31
 8014cbc:	d80a      	bhi.n	8014cd4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	2280      	movs	r2, #128	; 0x80
 8014cc2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 8014cc6:	2100      	movs	r1, #0
 8014cc8:	6878      	ldr	r0, [r7, #4]
 8014cca:	f7ff f8fb 	bl	8013ec4 <dir_sdi>
 8014cce:	4603      	mov	r3, r0
 8014cd0:	75fb      	strb	r3, [r7, #23]
 8014cd2:	e048      	b.n	8014d66 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014cd4:	463b      	mov	r3, r7
 8014cd6:	4619      	mov	r1, r3
 8014cd8:	6878      	ldr	r0, [r7, #4]
 8014cda:	f7ff fe1b 	bl	8014914 <create_name>
 8014cde:	4603      	mov	r3, r0
 8014ce0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8014ce2:	7dfb      	ldrb	r3, [r7, #23]
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d139      	bne.n	8014d5c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8014ce8:	6878      	ldr	r0, [r7, #4]
 8014cea:	f7ff fc5a 	bl	80145a2 <dir_find>
 8014cee:	4603      	mov	r3, r0
 8014cf0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8014cf8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8014cfa:	7dfb      	ldrb	r3, [r7, #23]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d00a      	beq.n	8014d16 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8014d00:	7dfb      	ldrb	r3, [r7, #23]
 8014d02:	2b04      	cmp	r3, #4
 8014d04:	d12c      	bne.n	8014d60 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8014d06:	7afb      	ldrb	r3, [r7, #11]
 8014d08:	f003 0304 	and.w	r3, r3, #4
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d127      	bne.n	8014d60 <follow_path+0xdc>
 8014d10:	2305      	movs	r3, #5
 8014d12:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8014d14:	e024      	b.n	8014d60 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014d16:	7afb      	ldrb	r3, [r7, #11]
 8014d18:	f003 0304 	and.w	r3, r3, #4
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d121      	bne.n	8014d64 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8014d20:	693b      	ldr	r3, [r7, #16]
 8014d22:	799b      	ldrb	r3, [r3, #6]
 8014d24:	f003 0310 	and.w	r3, r3, #16
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d102      	bne.n	8014d32 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8014d2c:	2305      	movs	r3, #5
 8014d2e:	75fb      	strb	r3, [r7, #23]
 8014d30:	e019      	b.n	8014d66 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	691b      	ldr	r3, [r3, #16]
 8014d3c:	68fa      	ldr	r2, [r7, #12]
 8014d3e:	8992      	ldrh	r2, [r2, #12]
 8014d40:	fbb3 f0f2 	udiv	r0, r3, r2
 8014d44:	fb02 f200 	mul.w	r2, r2, r0
 8014d48:	1a9b      	subs	r3, r3, r2
 8014d4a:	440b      	add	r3, r1
 8014d4c:	4619      	mov	r1, r3
 8014d4e:	68f8      	ldr	r0, [r7, #12]
 8014d50:	f7ff fa5e 	bl	8014210 <ld_clust>
 8014d54:	4602      	mov	r2, r0
 8014d56:	693b      	ldr	r3, [r7, #16]
 8014d58:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014d5a:	e7bb      	b.n	8014cd4 <follow_path+0x50>
			if (res != FR_OK) break;
 8014d5c:	bf00      	nop
 8014d5e:	e002      	b.n	8014d66 <follow_path+0xe2>
				break;
 8014d60:	bf00      	nop
 8014d62:	e000      	b.n	8014d66 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014d64:	bf00      	nop
			}
		}
	}

	return res;
 8014d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8014d68:	4618      	mov	r0, r3
 8014d6a:	3718      	adds	r7, #24
 8014d6c:	46bd      	mov	sp, r7
 8014d6e:	bd80      	pop	{r7, pc}

08014d70 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8014d70:	b480      	push	{r7}
 8014d72:	b087      	sub	sp, #28
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8014d78:	f04f 33ff 	mov.w	r3, #4294967295
 8014d7c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d031      	beq.n	8014dea <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	617b      	str	r3, [r7, #20]
 8014d8c:	e002      	b.n	8014d94 <get_ldnumber+0x24>
 8014d8e:	697b      	ldr	r3, [r7, #20]
 8014d90:	3301      	adds	r3, #1
 8014d92:	617b      	str	r3, [r7, #20]
 8014d94:	697b      	ldr	r3, [r7, #20]
 8014d96:	781b      	ldrb	r3, [r3, #0]
 8014d98:	2b1f      	cmp	r3, #31
 8014d9a:	d903      	bls.n	8014da4 <get_ldnumber+0x34>
 8014d9c:	697b      	ldr	r3, [r7, #20]
 8014d9e:	781b      	ldrb	r3, [r3, #0]
 8014da0:	2b3a      	cmp	r3, #58	; 0x3a
 8014da2:	d1f4      	bne.n	8014d8e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8014da4:	697b      	ldr	r3, [r7, #20]
 8014da6:	781b      	ldrb	r3, [r3, #0]
 8014da8:	2b3a      	cmp	r3, #58	; 0x3a
 8014daa:	d11c      	bne.n	8014de6 <get_ldnumber+0x76>
			tp = *path;
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	1c5a      	adds	r2, r3, #1
 8014db6:	60fa      	str	r2, [r7, #12]
 8014db8:	781b      	ldrb	r3, [r3, #0]
 8014dba:	3b30      	subs	r3, #48	; 0x30
 8014dbc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8014dbe:	68bb      	ldr	r3, [r7, #8]
 8014dc0:	2b09      	cmp	r3, #9
 8014dc2:	d80e      	bhi.n	8014de2 <get_ldnumber+0x72>
 8014dc4:	68fa      	ldr	r2, [r7, #12]
 8014dc6:	697b      	ldr	r3, [r7, #20]
 8014dc8:	429a      	cmp	r2, r3
 8014dca:	d10a      	bne.n	8014de2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8014dcc:	68bb      	ldr	r3, [r7, #8]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d107      	bne.n	8014de2 <get_ldnumber+0x72>
					vol = (int)i;
 8014dd2:	68bb      	ldr	r3, [r7, #8]
 8014dd4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8014dd6:	697b      	ldr	r3, [r7, #20]
 8014dd8:	3301      	adds	r3, #1
 8014dda:	617b      	str	r3, [r7, #20]
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	697a      	ldr	r2, [r7, #20]
 8014de0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8014de2:	693b      	ldr	r3, [r7, #16]
 8014de4:	e002      	b.n	8014dec <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8014de6:	2300      	movs	r3, #0
 8014de8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8014dea:	693b      	ldr	r3, [r7, #16]
}
 8014dec:	4618      	mov	r0, r3
 8014dee:	371c      	adds	r7, #28
 8014df0:	46bd      	mov	sp, r7
 8014df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014df6:	4770      	bx	lr

08014df8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8014df8:	b580      	push	{r7, lr}
 8014dfa:	b082      	sub	sp, #8
 8014dfc:	af00      	add	r7, sp, #0
 8014dfe:	6078      	str	r0, [r7, #4]
 8014e00:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	2200      	movs	r2, #0
 8014e06:	70da      	strb	r2, [r3, #3]
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8014e0e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8014e10:	6839      	ldr	r1, [r7, #0]
 8014e12:	6878      	ldr	r0, [r7, #4]
 8014e14:	f7fe fc74 	bl	8013700 <move_window>
 8014e18:	4603      	mov	r3, r0
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d001      	beq.n	8014e22 <check_fs+0x2a>
 8014e1e:	2304      	movs	r3, #4
 8014e20:	e038      	b.n	8014e94 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	3338      	adds	r3, #56	; 0x38
 8014e26:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014e2a:	4618      	mov	r0, r3
 8014e2c:	f7fe fb24 	bl	8013478 <ld_word>
 8014e30:	4603      	mov	r3, r0
 8014e32:	461a      	mov	r2, r3
 8014e34:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014e38:	429a      	cmp	r2, r3
 8014e3a:	d001      	beq.n	8014e40 <check_fs+0x48>
 8014e3c:	2303      	movs	r3, #3
 8014e3e:	e029      	b.n	8014e94 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014e46:	2be9      	cmp	r3, #233	; 0xe9
 8014e48:	d009      	beq.n	8014e5e <check_fs+0x66>
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014e50:	2beb      	cmp	r3, #235	; 0xeb
 8014e52:	d11e      	bne.n	8014e92 <check_fs+0x9a>
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8014e5a:	2b90      	cmp	r3, #144	; 0x90
 8014e5c:	d119      	bne.n	8014e92 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	3338      	adds	r3, #56	; 0x38
 8014e62:	3336      	adds	r3, #54	; 0x36
 8014e64:	4618      	mov	r0, r3
 8014e66:	f7fe fb1f 	bl	80134a8 <ld_dword>
 8014e6a:	4603      	mov	r3, r0
 8014e6c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8014e70:	4a0a      	ldr	r2, [pc, #40]	; (8014e9c <check_fs+0xa4>)
 8014e72:	4293      	cmp	r3, r2
 8014e74:	d101      	bne.n	8014e7a <check_fs+0x82>
 8014e76:	2300      	movs	r3, #0
 8014e78:	e00c      	b.n	8014e94 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	3338      	adds	r3, #56	; 0x38
 8014e7e:	3352      	adds	r3, #82	; 0x52
 8014e80:	4618      	mov	r0, r3
 8014e82:	f7fe fb11 	bl	80134a8 <ld_dword>
 8014e86:	4603      	mov	r3, r0
 8014e88:	4a05      	ldr	r2, [pc, #20]	; (8014ea0 <check_fs+0xa8>)
 8014e8a:	4293      	cmp	r3, r2
 8014e8c:	d101      	bne.n	8014e92 <check_fs+0x9a>
 8014e8e:	2300      	movs	r3, #0
 8014e90:	e000      	b.n	8014e94 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8014e92:	2302      	movs	r3, #2
}
 8014e94:	4618      	mov	r0, r3
 8014e96:	3708      	adds	r7, #8
 8014e98:	46bd      	mov	sp, r7
 8014e9a:	bd80      	pop	{r7, pc}
 8014e9c:	00544146 	.word	0x00544146
 8014ea0:	33544146 	.word	0x33544146

08014ea4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8014ea4:	b580      	push	{r7, lr}
 8014ea6:	b096      	sub	sp, #88	; 0x58
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	60f8      	str	r0, [r7, #12]
 8014eac:	60b9      	str	r1, [r7, #8]
 8014eae:	4613      	mov	r3, r2
 8014eb0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8014eb2:	68bb      	ldr	r3, [r7, #8]
 8014eb4:	2200      	movs	r2, #0
 8014eb6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8014eb8:	68f8      	ldr	r0, [r7, #12]
 8014eba:	f7ff ff59 	bl	8014d70 <get_ldnumber>
 8014ebe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8014ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	da01      	bge.n	8014eca <find_volume+0x26>
 8014ec6:	230b      	movs	r3, #11
 8014ec8:	e265      	b.n	8015396 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8014eca:	4ab0      	ldr	r2, [pc, #704]	; (801518c <find_volume+0x2e8>)
 8014ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014ed2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8014ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d101      	bne.n	8014ede <find_volume+0x3a>
 8014eda:	230c      	movs	r3, #12
 8014edc:	e25b      	b.n	8015396 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8014ede:	68bb      	ldr	r3, [r7, #8]
 8014ee0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014ee2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8014ee4:	79fb      	ldrb	r3, [r7, #7]
 8014ee6:	f023 0301 	bic.w	r3, r3, #1
 8014eea:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8014eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014eee:	781b      	ldrb	r3, [r3, #0]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d01a      	beq.n	8014f2a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8014ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ef6:	785b      	ldrb	r3, [r3, #1]
 8014ef8:	4618      	mov	r0, r3
 8014efa:	f7fe fa1f 	bl	801333c <disk_status>
 8014efe:	4603      	mov	r3, r0
 8014f00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8014f04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014f08:	f003 0301 	and.w	r3, r3, #1
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d10c      	bne.n	8014f2a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8014f10:	79fb      	ldrb	r3, [r7, #7]
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d007      	beq.n	8014f26 <find_volume+0x82>
 8014f16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014f1a:	f003 0304 	and.w	r3, r3, #4
 8014f1e:	2b00      	cmp	r3, #0
 8014f20:	d001      	beq.n	8014f26 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8014f22:	230a      	movs	r3, #10
 8014f24:	e237      	b.n	8015396 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8014f26:	2300      	movs	r3, #0
 8014f28:	e235      	b.n	8015396 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8014f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f2c:	2200      	movs	r2, #0
 8014f2e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8014f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f32:	b2da      	uxtb	r2, r3
 8014f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f36:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8014f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f3a:	785b      	ldrb	r3, [r3, #1]
 8014f3c:	4618      	mov	r0, r3
 8014f3e:	f7fe fa17 	bl	8013370 <disk_initialize>
 8014f42:	4603      	mov	r3, r0
 8014f44:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8014f48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014f4c:	f003 0301 	and.w	r3, r3, #1
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d001      	beq.n	8014f58 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8014f54:	2303      	movs	r3, #3
 8014f56:	e21e      	b.n	8015396 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8014f58:	79fb      	ldrb	r3, [r7, #7]
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d007      	beq.n	8014f6e <find_volume+0xca>
 8014f5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014f62:	f003 0304 	and.w	r3, r3, #4
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d001      	beq.n	8014f6e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8014f6a:	230a      	movs	r3, #10
 8014f6c:	e213      	b.n	8015396 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8014f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f70:	7858      	ldrb	r0, [r3, #1]
 8014f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f74:	330c      	adds	r3, #12
 8014f76:	461a      	mov	r2, r3
 8014f78:	2102      	movs	r1, #2
 8014f7a:	f7fe fa5f 	bl	801343c <disk_ioctl>
 8014f7e:	4603      	mov	r3, r0
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d001      	beq.n	8014f88 <find_volume+0xe4>
 8014f84:	2301      	movs	r3, #1
 8014f86:	e206      	b.n	8015396 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8014f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f8a:	899b      	ldrh	r3, [r3, #12]
 8014f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014f90:	d80d      	bhi.n	8014fae <find_volume+0x10a>
 8014f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f94:	899b      	ldrh	r3, [r3, #12]
 8014f96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014f9a:	d308      	bcc.n	8014fae <find_volume+0x10a>
 8014f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f9e:	899b      	ldrh	r3, [r3, #12]
 8014fa0:	461a      	mov	r2, r3
 8014fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fa4:	899b      	ldrh	r3, [r3, #12]
 8014fa6:	3b01      	subs	r3, #1
 8014fa8:	4013      	ands	r3, r2
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d001      	beq.n	8014fb2 <find_volume+0x10e>
 8014fae:	2301      	movs	r3, #1
 8014fb0:	e1f1      	b.n	8015396 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8014fb6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014fb8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014fba:	f7ff ff1d 	bl	8014df8 <check_fs>
 8014fbe:	4603      	mov	r3, r0
 8014fc0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8014fc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014fc8:	2b02      	cmp	r3, #2
 8014fca:	d14b      	bne.n	8015064 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014fcc:	2300      	movs	r3, #0
 8014fce:	643b      	str	r3, [r7, #64]	; 0x40
 8014fd0:	e01f      	b.n	8015012 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8014fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fd4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8014fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014fda:	011b      	lsls	r3, r3, #4
 8014fdc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8014fe0:	4413      	add	r3, r2
 8014fe2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8014fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fe6:	3304      	adds	r3, #4
 8014fe8:	781b      	ldrb	r3, [r3, #0]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d006      	beq.n	8014ffc <find_volume+0x158>
 8014fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ff0:	3308      	adds	r3, #8
 8014ff2:	4618      	mov	r0, r3
 8014ff4:	f7fe fa58 	bl	80134a8 <ld_dword>
 8014ff8:	4602      	mov	r2, r0
 8014ffa:	e000      	b.n	8014ffe <find_volume+0x15a>
 8014ffc:	2200      	movs	r2, #0
 8014ffe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015000:	009b      	lsls	r3, r3, #2
 8015002:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8015006:	440b      	add	r3, r1
 8015008:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801500c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801500e:	3301      	adds	r3, #1
 8015010:	643b      	str	r3, [r7, #64]	; 0x40
 8015012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015014:	2b03      	cmp	r3, #3
 8015016:	d9dc      	bls.n	8014fd2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8015018:	2300      	movs	r3, #0
 801501a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801501c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801501e:	2b00      	cmp	r3, #0
 8015020:	d002      	beq.n	8015028 <find_volume+0x184>
 8015022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015024:	3b01      	subs	r3, #1
 8015026:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8015028:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801502a:	009b      	lsls	r3, r3, #2
 801502c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8015030:	4413      	add	r3, r2
 8015032:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8015036:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8015038:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801503a:	2b00      	cmp	r3, #0
 801503c:	d005      	beq.n	801504a <find_volume+0x1a6>
 801503e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015040:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015042:	f7ff fed9 	bl	8014df8 <check_fs>
 8015046:	4603      	mov	r3, r0
 8015048:	e000      	b.n	801504c <find_volume+0x1a8>
 801504a:	2303      	movs	r3, #3
 801504c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8015050:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015054:	2b01      	cmp	r3, #1
 8015056:	d905      	bls.n	8015064 <find_volume+0x1c0>
 8015058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801505a:	3301      	adds	r3, #1
 801505c:	643b      	str	r3, [r7, #64]	; 0x40
 801505e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015060:	2b03      	cmp	r3, #3
 8015062:	d9e1      	bls.n	8015028 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8015064:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015068:	2b04      	cmp	r3, #4
 801506a:	d101      	bne.n	8015070 <find_volume+0x1cc>
 801506c:	2301      	movs	r3, #1
 801506e:	e192      	b.n	8015396 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8015070:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015074:	2b01      	cmp	r3, #1
 8015076:	d901      	bls.n	801507c <find_volume+0x1d8>
 8015078:	230d      	movs	r3, #13
 801507a:	e18c      	b.n	8015396 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801507c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801507e:	3338      	adds	r3, #56	; 0x38
 8015080:	330b      	adds	r3, #11
 8015082:	4618      	mov	r0, r3
 8015084:	f7fe f9f8 	bl	8013478 <ld_word>
 8015088:	4603      	mov	r3, r0
 801508a:	461a      	mov	r2, r3
 801508c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801508e:	899b      	ldrh	r3, [r3, #12]
 8015090:	429a      	cmp	r2, r3
 8015092:	d001      	beq.n	8015098 <find_volume+0x1f4>
 8015094:	230d      	movs	r3, #13
 8015096:	e17e      	b.n	8015396 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8015098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801509a:	3338      	adds	r3, #56	; 0x38
 801509c:	3316      	adds	r3, #22
 801509e:	4618      	mov	r0, r3
 80150a0:	f7fe f9ea 	bl	8013478 <ld_word>
 80150a4:	4603      	mov	r3, r0
 80150a6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80150a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d106      	bne.n	80150bc <find_volume+0x218>
 80150ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150b0:	3338      	adds	r3, #56	; 0x38
 80150b2:	3324      	adds	r3, #36	; 0x24
 80150b4:	4618      	mov	r0, r3
 80150b6:	f7fe f9f7 	bl	80134a8 <ld_dword>
 80150ba:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80150bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80150c0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80150c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150c4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80150c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150ca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80150cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150ce:	789b      	ldrb	r3, [r3, #2]
 80150d0:	2b01      	cmp	r3, #1
 80150d2:	d005      	beq.n	80150e0 <find_volume+0x23c>
 80150d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150d6:	789b      	ldrb	r3, [r3, #2]
 80150d8:	2b02      	cmp	r3, #2
 80150da:	d001      	beq.n	80150e0 <find_volume+0x23c>
 80150dc:	230d      	movs	r3, #13
 80150de:	e15a      	b.n	8015396 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80150e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150e2:	789b      	ldrb	r3, [r3, #2]
 80150e4:	461a      	mov	r2, r3
 80150e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80150e8:	fb02 f303 	mul.w	r3, r2, r3
 80150ec:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80150ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80150f4:	b29a      	uxth	r2, r3
 80150f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150f8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80150fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150fc:	895b      	ldrh	r3, [r3, #10]
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d008      	beq.n	8015114 <find_volume+0x270>
 8015102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015104:	895b      	ldrh	r3, [r3, #10]
 8015106:	461a      	mov	r2, r3
 8015108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801510a:	895b      	ldrh	r3, [r3, #10]
 801510c:	3b01      	subs	r3, #1
 801510e:	4013      	ands	r3, r2
 8015110:	2b00      	cmp	r3, #0
 8015112:	d001      	beq.n	8015118 <find_volume+0x274>
 8015114:	230d      	movs	r3, #13
 8015116:	e13e      	b.n	8015396 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8015118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801511a:	3338      	adds	r3, #56	; 0x38
 801511c:	3311      	adds	r3, #17
 801511e:	4618      	mov	r0, r3
 8015120:	f7fe f9aa 	bl	8013478 <ld_word>
 8015124:	4603      	mov	r3, r0
 8015126:	461a      	mov	r2, r3
 8015128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801512a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801512c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801512e:	891b      	ldrh	r3, [r3, #8]
 8015130:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015132:	8992      	ldrh	r2, [r2, #12]
 8015134:	0952      	lsrs	r2, r2, #5
 8015136:	b292      	uxth	r2, r2
 8015138:	fbb3 f1f2 	udiv	r1, r3, r2
 801513c:	fb02 f201 	mul.w	r2, r2, r1
 8015140:	1a9b      	subs	r3, r3, r2
 8015142:	b29b      	uxth	r3, r3
 8015144:	2b00      	cmp	r3, #0
 8015146:	d001      	beq.n	801514c <find_volume+0x2a8>
 8015148:	230d      	movs	r3, #13
 801514a:	e124      	b.n	8015396 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801514c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801514e:	3338      	adds	r3, #56	; 0x38
 8015150:	3313      	adds	r3, #19
 8015152:	4618      	mov	r0, r3
 8015154:	f7fe f990 	bl	8013478 <ld_word>
 8015158:	4603      	mov	r3, r0
 801515a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801515c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801515e:	2b00      	cmp	r3, #0
 8015160:	d106      	bne.n	8015170 <find_volume+0x2cc>
 8015162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015164:	3338      	adds	r3, #56	; 0x38
 8015166:	3320      	adds	r3, #32
 8015168:	4618      	mov	r0, r3
 801516a:	f7fe f99d 	bl	80134a8 <ld_dword>
 801516e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8015170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015172:	3338      	adds	r3, #56	; 0x38
 8015174:	330e      	adds	r3, #14
 8015176:	4618      	mov	r0, r3
 8015178:	f7fe f97e 	bl	8013478 <ld_word>
 801517c:	4603      	mov	r3, r0
 801517e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8015180:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015182:	2b00      	cmp	r3, #0
 8015184:	d104      	bne.n	8015190 <find_volume+0x2ec>
 8015186:	230d      	movs	r3, #13
 8015188:	e105      	b.n	8015396 <find_volume+0x4f2>
 801518a:	bf00      	nop
 801518c:	20000204 	.word	0x20000204

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8015190:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015194:	4413      	add	r3, r2
 8015196:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015198:	8911      	ldrh	r1, [r2, #8]
 801519a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801519c:	8992      	ldrh	r2, [r2, #12]
 801519e:	0952      	lsrs	r2, r2, #5
 80151a0:	b292      	uxth	r2, r2
 80151a2:	fbb1 f2f2 	udiv	r2, r1, r2
 80151a6:	b292      	uxth	r2, r2
 80151a8:	4413      	add	r3, r2
 80151aa:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80151ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80151ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151b0:	429a      	cmp	r2, r3
 80151b2:	d201      	bcs.n	80151b8 <find_volume+0x314>
 80151b4:	230d      	movs	r3, #13
 80151b6:	e0ee      	b.n	8015396 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80151b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80151ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151bc:	1ad3      	subs	r3, r2, r3
 80151be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80151c0:	8952      	ldrh	r2, [r2, #10]
 80151c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80151c6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80151c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d101      	bne.n	80151d2 <find_volume+0x32e>
 80151ce:	230d      	movs	r3, #13
 80151d0:	e0e1      	b.n	8015396 <find_volume+0x4f2>
		fmt = FS_FAT32;
 80151d2:	2303      	movs	r3, #3
 80151d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80151d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151da:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80151de:	4293      	cmp	r3, r2
 80151e0:	d802      	bhi.n	80151e8 <find_volume+0x344>
 80151e2:	2302      	movs	r3, #2
 80151e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80151e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151ea:	f640 72f5 	movw	r2, #4085	; 0xff5
 80151ee:	4293      	cmp	r3, r2
 80151f0:	d802      	bhi.n	80151f8 <find_volume+0x354>
 80151f2:	2301      	movs	r3, #1
 80151f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80151f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151fa:	1c9a      	adds	r2, r3, #2
 80151fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151fe:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8015200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015202:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015204:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8015206:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015208:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801520a:	441a      	add	r2, r3
 801520c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801520e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8015210:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015214:	441a      	add	r2, r3
 8015216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015218:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 801521a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801521e:	2b03      	cmp	r3, #3
 8015220:	d11e      	bne.n	8015260 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8015222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015224:	3338      	adds	r3, #56	; 0x38
 8015226:	332a      	adds	r3, #42	; 0x2a
 8015228:	4618      	mov	r0, r3
 801522a:	f7fe f925 	bl	8013478 <ld_word>
 801522e:	4603      	mov	r3, r0
 8015230:	2b00      	cmp	r3, #0
 8015232:	d001      	beq.n	8015238 <find_volume+0x394>
 8015234:	230d      	movs	r3, #13
 8015236:	e0ae      	b.n	8015396 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8015238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801523a:	891b      	ldrh	r3, [r3, #8]
 801523c:	2b00      	cmp	r3, #0
 801523e:	d001      	beq.n	8015244 <find_volume+0x3a0>
 8015240:	230d      	movs	r3, #13
 8015242:	e0a8      	b.n	8015396 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8015244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015246:	3338      	adds	r3, #56	; 0x38
 8015248:	332c      	adds	r3, #44	; 0x2c
 801524a:	4618      	mov	r0, r3
 801524c:	f7fe f92c 	bl	80134a8 <ld_dword>
 8015250:	4602      	mov	r2, r0
 8015252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015254:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8015256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015258:	69db      	ldr	r3, [r3, #28]
 801525a:	009b      	lsls	r3, r3, #2
 801525c:	647b      	str	r3, [r7, #68]	; 0x44
 801525e:	e01f      	b.n	80152a0 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8015260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015262:	891b      	ldrh	r3, [r3, #8]
 8015264:	2b00      	cmp	r3, #0
 8015266:	d101      	bne.n	801526c <find_volume+0x3c8>
 8015268:	230d      	movs	r3, #13
 801526a:	e094      	b.n	8015396 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801526c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801526e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015272:	441a      	add	r2, r3
 8015274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015276:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8015278:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801527c:	2b02      	cmp	r3, #2
 801527e:	d103      	bne.n	8015288 <find_volume+0x3e4>
 8015280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015282:	69db      	ldr	r3, [r3, #28]
 8015284:	005b      	lsls	r3, r3, #1
 8015286:	e00a      	b.n	801529e <find_volume+0x3fa>
 8015288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801528a:	69da      	ldr	r2, [r3, #28]
 801528c:	4613      	mov	r3, r2
 801528e:	005b      	lsls	r3, r3, #1
 8015290:	4413      	add	r3, r2
 8015292:	085a      	lsrs	r2, r3, #1
 8015294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015296:	69db      	ldr	r3, [r3, #28]
 8015298:	f003 0301 	and.w	r3, r3, #1
 801529c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801529e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80152a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152a2:	6a1a      	ldr	r2, [r3, #32]
 80152a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152a6:	899b      	ldrh	r3, [r3, #12]
 80152a8:	4619      	mov	r1, r3
 80152aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80152ac:	440b      	add	r3, r1
 80152ae:	3b01      	subs	r3, #1
 80152b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80152b2:	8989      	ldrh	r1, [r1, #12]
 80152b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80152b8:	429a      	cmp	r2, r3
 80152ba:	d201      	bcs.n	80152c0 <find_volume+0x41c>
 80152bc:	230d      	movs	r3, #13
 80152be:	e06a      	b.n	8015396 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80152c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152c2:	f04f 32ff 	mov.w	r2, #4294967295
 80152c6:	619a      	str	r2, [r3, #24]
 80152c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152ca:	699a      	ldr	r2, [r3, #24]
 80152cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152ce:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80152d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152d2:	2280      	movs	r2, #128	; 0x80
 80152d4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80152d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80152da:	2b03      	cmp	r3, #3
 80152dc:	d149      	bne.n	8015372 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80152de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152e0:	3338      	adds	r3, #56	; 0x38
 80152e2:	3330      	adds	r3, #48	; 0x30
 80152e4:	4618      	mov	r0, r3
 80152e6:	f7fe f8c7 	bl	8013478 <ld_word>
 80152ea:	4603      	mov	r3, r0
 80152ec:	2b01      	cmp	r3, #1
 80152ee:	d140      	bne.n	8015372 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80152f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80152f2:	3301      	adds	r3, #1
 80152f4:	4619      	mov	r1, r3
 80152f6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80152f8:	f7fe fa02 	bl	8013700 <move_window>
 80152fc:	4603      	mov	r3, r0
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d137      	bne.n	8015372 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8015302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015304:	2200      	movs	r2, #0
 8015306:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8015308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801530a:	3338      	adds	r3, #56	; 0x38
 801530c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015310:	4618      	mov	r0, r3
 8015312:	f7fe f8b1 	bl	8013478 <ld_word>
 8015316:	4603      	mov	r3, r0
 8015318:	461a      	mov	r2, r3
 801531a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801531e:	429a      	cmp	r2, r3
 8015320:	d127      	bne.n	8015372 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8015322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015324:	3338      	adds	r3, #56	; 0x38
 8015326:	4618      	mov	r0, r3
 8015328:	f7fe f8be 	bl	80134a8 <ld_dword>
 801532c:	4603      	mov	r3, r0
 801532e:	4a1c      	ldr	r2, [pc, #112]	; (80153a0 <find_volume+0x4fc>)
 8015330:	4293      	cmp	r3, r2
 8015332:	d11e      	bne.n	8015372 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8015334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015336:	3338      	adds	r3, #56	; 0x38
 8015338:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801533c:	4618      	mov	r0, r3
 801533e:	f7fe f8b3 	bl	80134a8 <ld_dword>
 8015342:	4603      	mov	r3, r0
 8015344:	4a17      	ldr	r2, [pc, #92]	; (80153a4 <find_volume+0x500>)
 8015346:	4293      	cmp	r3, r2
 8015348:	d113      	bne.n	8015372 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801534a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801534c:	3338      	adds	r3, #56	; 0x38
 801534e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8015352:	4618      	mov	r0, r3
 8015354:	f7fe f8a8 	bl	80134a8 <ld_dword>
 8015358:	4602      	mov	r2, r0
 801535a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801535c:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801535e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015360:	3338      	adds	r3, #56	; 0x38
 8015362:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8015366:	4618      	mov	r0, r3
 8015368:	f7fe f89e 	bl	80134a8 <ld_dword>
 801536c:	4602      	mov	r2, r0
 801536e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015370:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8015372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015374:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8015378:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801537a:	4b0b      	ldr	r3, [pc, #44]	; (80153a8 <find_volume+0x504>)
 801537c:	881b      	ldrh	r3, [r3, #0]
 801537e:	3301      	adds	r3, #1
 8015380:	b29a      	uxth	r2, r3
 8015382:	4b09      	ldr	r3, [pc, #36]	; (80153a8 <find_volume+0x504>)
 8015384:	801a      	strh	r2, [r3, #0]
 8015386:	4b08      	ldr	r3, [pc, #32]	; (80153a8 <find_volume+0x504>)
 8015388:	881a      	ldrh	r2, [r3, #0]
 801538a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801538c:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801538e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015390:	4a06      	ldr	r2, [pc, #24]	; (80153ac <find_volume+0x508>)
 8015392:	611a      	str	r2, [r3, #16]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 8015394:	2300      	movs	r3, #0
}
 8015396:	4618      	mov	r0, r3
 8015398:	3758      	adds	r7, #88	; 0x58
 801539a:	46bd      	mov	sp, r7
 801539c:	bd80      	pop	{r7, pc}
 801539e:	bf00      	nop
 80153a0:	41615252 	.word	0x41615252
 80153a4:	61417272 	.word	0x61417272
 80153a8:	20000208 	.word	0x20000208
 80153ac:	2000020c 	.word	0x2000020c

080153b0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80153b0:	b580      	push	{r7, lr}
 80153b2:	b084      	sub	sp, #16
 80153b4:	af00      	add	r7, sp, #0
 80153b6:	6078      	str	r0, [r7, #4]
 80153b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80153ba:	2309      	movs	r3, #9
 80153bc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d01c      	beq.n	80153fe <validate+0x4e>
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	681b      	ldr	r3, [r3, #0]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d018      	beq.n	80153fe <validate+0x4e>
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	781b      	ldrb	r3, [r3, #0]
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d013      	beq.n	80153fe <validate+0x4e>
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	889a      	ldrh	r2, [r3, #4]
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	88db      	ldrh	r3, [r3, #6]
 80153e0:	429a      	cmp	r2, r3
 80153e2:	d10c      	bne.n	80153fe <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	785b      	ldrb	r3, [r3, #1]
 80153ea:	4618      	mov	r0, r3
 80153ec:	f7fd ffa6 	bl	801333c <disk_status>
 80153f0:	4603      	mov	r3, r0
 80153f2:	f003 0301 	and.w	r3, r3, #1
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d101      	bne.n	80153fe <validate+0x4e>
			res = FR_OK;
 80153fa:	2300      	movs	r3, #0
 80153fc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80153fe:	7bfb      	ldrb	r3, [r7, #15]
 8015400:	2b00      	cmp	r3, #0
 8015402:	d102      	bne.n	801540a <validate+0x5a>
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	e000      	b.n	801540c <validate+0x5c>
 801540a:	2300      	movs	r3, #0
 801540c:	683a      	ldr	r2, [r7, #0]
 801540e:	6013      	str	r3, [r2, #0]
	return res;
 8015410:	7bfb      	ldrb	r3, [r7, #15]
}
 8015412:	4618      	mov	r0, r3
 8015414:	3710      	adds	r7, #16
 8015416:	46bd      	mov	sp, r7
 8015418:	bd80      	pop	{r7, pc}
	...

0801541c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801541c:	b580      	push	{r7, lr}
 801541e:	b088      	sub	sp, #32
 8015420:	af00      	add	r7, sp, #0
 8015422:	60f8      	str	r0, [r7, #12]
 8015424:	60b9      	str	r1, [r7, #8]
 8015426:	4613      	mov	r3, r2
 8015428:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801542a:	68bb      	ldr	r3, [r7, #8]
 801542c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801542e:	f107 0310 	add.w	r3, r7, #16
 8015432:	4618      	mov	r0, r3
 8015434:	f7ff fc9c 	bl	8014d70 <get_ldnumber>
 8015438:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801543a:	69fb      	ldr	r3, [r7, #28]
 801543c:	2b00      	cmp	r3, #0
 801543e:	da01      	bge.n	8015444 <f_mount+0x28>
 8015440:	230b      	movs	r3, #11
 8015442:	e028      	b.n	8015496 <f_mount+0x7a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8015444:	4a16      	ldr	r2, [pc, #88]	; (80154a0 <f_mount+0x84>)
 8015446:	69fb      	ldr	r3, [r7, #28]
 8015448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801544c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801544e:	69bb      	ldr	r3, [r7, #24]
 8015450:	2b00      	cmp	r3, #0
 8015452:	d002      	beq.n	801545a <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8015454:	69bb      	ldr	r3, [r7, #24]
 8015456:	2200      	movs	r2, #0
 8015458:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801545a:	68fb      	ldr	r3, [r7, #12]
 801545c:	2b00      	cmp	r3, #0
 801545e:	d002      	beq.n	8015466 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	2200      	movs	r2, #0
 8015464:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8015466:	68fa      	ldr	r2, [r7, #12]
 8015468:	490d      	ldr	r1, [pc, #52]	; (80154a0 <f_mount+0x84>)
 801546a:	69fb      	ldr	r3, [r7, #28]
 801546c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8015470:	68fb      	ldr	r3, [r7, #12]
 8015472:	2b00      	cmp	r3, #0
 8015474:	d002      	beq.n	801547c <f_mount+0x60>
 8015476:	79fb      	ldrb	r3, [r7, #7]
 8015478:	2b01      	cmp	r3, #1
 801547a:	d001      	beq.n	8015480 <f_mount+0x64>
 801547c:	2300      	movs	r3, #0
 801547e:	e00a      	b.n	8015496 <f_mount+0x7a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8015480:	f107 010c 	add.w	r1, r7, #12
 8015484:	f107 0308 	add.w	r3, r7, #8
 8015488:	2200      	movs	r2, #0
 801548a:	4618      	mov	r0, r3
 801548c:	f7ff fd0a 	bl	8014ea4 <find_volume>
 8015490:	4603      	mov	r3, r0
 8015492:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8015494:	7dfb      	ldrb	r3, [r7, #23]
}
 8015496:	4618      	mov	r0, r3
 8015498:	3720      	adds	r7, #32
 801549a:	46bd      	mov	sp, r7
 801549c:	bd80      	pop	{r7, pc}
 801549e:	bf00      	nop
 80154a0:	20000204 	.word	0x20000204

080154a4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80154a4:	b580      	push	{r7, lr}
 80154a6:	b098      	sub	sp, #96	; 0x60
 80154a8:	af00      	add	r7, sp, #0
 80154aa:	60f8      	str	r0, [r7, #12]
 80154ac:	60b9      	str	r1, [r7, #8]
 80154ae:	4613      	mov	r3, r2
 80154b0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d101      	bne.n	80154bc <f_open+0x18>
 80154b8:	2309      	movs	r3, #9
 80154ba:	e188      	b.n	80157ce <f_open+0x32a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80154bc:	79fb      	ldrb	r3, [r7, #7]
 80154be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80154c2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80154c4:	79fa      	ldrb	r2, [r7, #7]
 80154c6:	f107 0110 	add.w	r1, r7, #16
 80154ca:	f107 0308 	add.w	r3, r7, #8
 80154ce:	4618      	mov	r0, r3
 80154d0:	f7ff fce8 	bl	8014ea4 <find_volume>
 80154d4:	4603      	mov	r3, r0
 80154d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80154da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80154de:	2b00      	cmp	r3, #0
 80154e0:	f040 816c 	bne.w	80157bc <f_open+0x318>
		dj.obj.fs = fs;
 80154e4:	693b      	ldr	r3, [r7, #16]
 80154e6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80154e8:	68ba      	ldr	r2, [r7, #8]
 80154ea:	f107 0314 	add.w	r3, r7, #20
 80154ee:	4611      	mov	r1, r2
 80154f0:	4618      	mov	r0, r3
 80154f2:	f7ff fbc7 	bl	8014c84 <follow_path>
 80154f6:	4603      	mov	r3, r0
 80154f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80154fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015500:	2b00      	cmp	r3, #0
 8015502:	d107      	bne.n	8015514 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8015504:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015508:	b25b      	sxtb	r3, r3
 801550a:	2b00      	cmp	r3, #0
 801550c:	da02      	bge.n	8015514 <f_open+0x70>
				res = FR_INVALID_NAME;
 801550e:	2306      	movs	r3, #6
 8015510:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8015514:	79fb      	ldrb	r3, [r7, #7]
 8015516:	f003 031c 	and.w	r3, r3, #28
 801551a:	2b00      	cmp	r3, #0
 801551c:	d078      	beq.n	8015610 <f_open+0x16c>
			if (res != FR_OK) {					/* No file, create new */
 801551e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015522:	2b00      	cmp	r3, #0
 8015524:	d010      	beq.n	8015548 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8015526:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801552a:	2b04      	cmp	r3, #4
 801552c:	d107      	bne.n	801553e <f_open+0x9a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 801552e:	f107 0314 	add.w	r3, r7, #20
 8015532:	4618      	mov	r0, r3
 8015534:	f7ff f8f6 	bl	8014724 <dir_register>
 8015538:	4603      	mov	r3, r0
 801553a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801553e:	79fb      	ldrb	r3, [r7, #7]
 8015540:	f043 0308 	orr.w	r3, r3, #8
 8015544:	71fb      	strb	r3, [r7, #7]
 8015546:	e010      	b.n	801556a <f_open+0xc6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8015548:	7ebb      	ldrb	r3, [r7, #26]
 801554a:	f003 0311 	and.w	r3, r3, #17
 801554e:	2b00      	cmp	r3, #0
 8015550:	d003      	beq.n	801555a <f_open+0xb6>
					res = FR_DENIED;
 8015552:	2307      	movs	r3, #7
 8015554:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8015558:	e007      	b.n	801556a <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801555a:	79fb      	ldrb	r3, [r7, #7]
 801555c:	f003 0304 	and.w	r3, r3, #4
 8015560:	2b00      	cmp	r3, #0
 8015562:	d002      	beq.n	801556a <f_open+0xc6>
 8015564:	2308      	movs	r3, #8
 8015566:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801556a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801556e:	2b00      	cmp	r3, #0
 8015570:	d168      	bne.n	8015644 <f_open+0x1a0>
 8015572:	79fb      	ldrb	r3, [r7, #7]
 8015574:	f003 0308 	and.w	r3, r3, #8
 8015578:	2b00      	cmp	r3, #0
 801557a:	d063      	beq.n	8015644 <f_open+0x1a0>
				dw = GET_FATTIME();
 801557c:	f7fa fd36 	bl	800ffec <get_fattime>
 8015580:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8015582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015584:	330e      	adds	r3, #14
 8015586:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015588:	4618      	mov	r0, r3
 801558a:	f7fd ffcb 	bl	8013524 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801558e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015590:	3316      	adds	r3, #22
 8015592:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015594:	4618      	mov	r0, r3
 8015596:	f7fd ffc5 	bl	8013524 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801559a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801559c:	330b      	adds	r3, #11
 801559e:	2220      	movs	r2, #32
 80155a0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80155a2:	693b      	ldr	r3, [r7, #16]
 80155a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80155a6:	4611      	mov	r1, r2
 80155a8:	4618      	mov	r0, r3
 80155aa:	f7fe fe31 	bl	8014210 <ld_clust>
 80155ae:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80155b0:	693b      	ldr	r3, [r7, #16]
 80155b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80155b4:	2200      	movs	r2, #0
 80155b6:	4618      	mov	r0, r3
 80155b8:	f7fe fe49 	bl	801424e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80155bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155be:	331c      	adds	r3, #28
 80155c0:	2100      	movs	r1, #0
 80155c2:	4618      	mov	r0, r3
 80155c4:	f7fd ffae 	bl	8013524 <st_dword>
					fs->wflag = 1;
 80155c8:	693b      	ldr	r3, [r7, #16]
 80155ca:	2201      	movs	r2, #1
 80155cc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80155ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d037      	beq.n	8015644 <f_open+0x1a0>
						dw = fs->winsect;
 80155d4:	693b      	ldr	r3, [r7, #16]
 80155d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80155d8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80155da:	f107 0314 	add.w	r3, r7, #20
 80155de:	2200      	movs	r2, #0
 80155e0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80155e2:	4618      	mov	r0, r3
 80155e4:	f7fe fb39 	bl	8013c5a <remove_chain>
 80155e8:	4603      	mov	r3, r0
 80155ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80155ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d126      	bne.n	8015644 <f_open+0x1a0>
							res = move_window(fs, dw);
 80155f6:	693b      	ldr	r3, [r7, #16]
 80155f8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80155fa:	4618      	mov	r0, r3
 80155fc:	f7fe f880 	bl	8013700 <move_window>
 8015600:	4603      	mov	r3, r0
 8015602:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8015606:	693b      	ldr	r3, [r7, #16]
 8015608:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801560a:	3a01      	subs	r2, #1
 801560c:	615a      	str	r2, [r3, #20]
 801560e:	e019      	b.n	8015644 <f_open+0x1a0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8015610:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015614:	2b00      	cmp	r3, #0
 8015616:	d115      	bne.n	8015644 <f_open+0x1a0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8015618:	7ebb      	ldrb	r3, [r7, #26]
 801561a:	f003 0310 	and.w	r3, r3, #16
 801561e:	2b00      	cmp	r3, #0
 8015620:	d003      	beq.n	801562a <f_open+0x186>
					res = FR_NO_FILE;
 8015622:	2304      	movs	r3, #4
 8015624:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8015628:	e00c      	b.n	8015644 <f_open+0x1a0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801562a:	79fb      	ldrb	r3, [r7, #7]
 801562c:	f003 0302 	and.w	r3, r3, #2
 8015630:	2b00      	cmp	r3, #0
 8015632:	d007      	beq.n	8015644 <f_open+0x1a0>
 8015634:	7ebb      	ldrb	r3, [r7, #26]
 8015636:	f003 0301 	and.w	r3, r3, #1
 801563a:	2b00      	cmp	r3, #0
 801563c:	d002      	beq.n	8015644 <f_open+0x1a0>
						res = FR_DENIED;
 801563e:	2307      	movs	r3, #7
 8015640:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8015644:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015648:	2b00      	cmp	r3, #0
 801564a:	d10f      	bne.n	801566c <f_open+0x1c8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801564c:	79fb      	ldrb	r3, [r7, #7]
 801564e:	f003 0308 	and.w	r3, r3, #8
 8015652:	2b00      	cmp	r3, #0
 8015654:	d003      	beq.n	801565e <f_open+0x1ba>
				mode |= FA_MODIFIED;
 8015656:	79fb      	ldrb	r3, [r7, #7]
 8015658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801565c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801565e:	693b      	ldr	r3, [r7, #16]
 8015660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 8015666:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 801566c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015670:	2b00      	cmp	r3, #0
 8015672:	f040 80a3 	bne.w	80157bc <f_open+0x318>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8015676:	693b      	ldr	r3, [r7, #16]
 8015678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801567a:	4611      	mov	r1, r2
 801567c:	4618      	mov	r0, r3
 801567e:	f7fe fdc7 	bl	8014210 <ld_clust>
 8015682:	4602      	mov	r2, r0
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8015688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801568a:	331c      	adds	r3, #28
 801568c:	4618      	mov	r0, r3
 801568e:	f7fd ff0b 	bl	80134a8 <ld_dword>
 8015692:	4602      	mov	r2, r0
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	2200      	movs	r2, #0
 801569c:	629a      	str	r2, [r3, #40]	; 0x28
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801569e:	693a      	ldr	r2, [r7, #16]
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80156a4:	693b      	ldr	r3, [r7, #16]
 80156a6:	88da      	ldrh	r2, [r3, #6]
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80156ac:	68fb      	ldr	r3, [r7, #12]
 80156ae:	79fa      	ldrb	r2, [r7, #7]
 80156b0:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 80156b2:	68fb      	ldr	r3, [r7, #12]
 80156b4:	2200      	movs	r2, #0
 80156b6:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	2200      	movs	r2, #0
 80156bc:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80156be:	68fb      	ldr	r3, [r7, #12]
 80156c0:	2200      	movs	r2, #0
 80156c2:	615a      	str	r2, [r3, #20]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	332c      	adds	r3, #44	; 0x2c
 80156c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80156cc:	2100      	movs	r1, #0
 80156ce:	4618      	mov	r0, r3
 80156d0:	f7fd ff75 	bl	80135be <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80156d4:	79fb      	ldrb	r3, [r7, #7]
 80156d6:	f003 0320 	and.w	r3, r3, #32
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d06e      	beq.n	80157bc <f_open+0x318>
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	68db      	ldr	r3, [r3, #12]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d06a      	beq.n	80157bc <f_open+0x318>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	68da      	ldr	r2, [r3, #12]
 80156ea:	68fb      	ldr	r3, [r7, #12]
 80156ec:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80156ee:	693b      	ldr	r3, [r7, #16]
 80156f0:	895b      	ldrh	r3, [r3, #10]
 80156f2:	461a      	mov	r2, r3
 80156f4:	693b      	ldr	r3, [r7, #16]
 80156f6:	899b      	ldrh	r3, [r3, #12]
 80156f8:	fb03 f302 	mul.w	r3, r3, r2
 80156fc:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80156fe:	68fb      	ldr	r3, [r7, #12]
 8015700:	689b      	ldr	r3, [r3, #8]
 8015702:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	68db      	ldr	r3, [r3, #12]
 8015708:	657b      	str	r3, [r7, #84]	; 0x54
 801570a:	e016      	b.n	801573a <f_open+0x296>
					clst = get_fat(&fp->obj, clst);
 801570c:	68fb      	ldr	r3, [r7, #12]
 801570e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015710:	4618      	mov	r0, r3
 8015712:	f7fe f8b2 	bl	801387a <get_fat>
 8015716:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8015718:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801571a:	2b01      	cmp	r3, #1
 801571c:	d802      	bhi.n	8015724 <f_open+0x280>
 801571e:	2302      	movs	r3, #2
 8015720:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8015724:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015726:	f1b3 3fff 	cmp.w	r3, #4294967295
 801572a:	d102      	bne.n	8015732 <f_open+0x28e>
 801572c:	2301      	movs	r3, #1
 801572e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8015732:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015736:	1ad3      	subs	r3, r2, r3
 8015738:	657b      	str	r3, [r7, #84]	; 0x54
 801573a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801573e:	2b00      	cmp	r3, #0
 8015740:	d103      	bne.n	801574a <f_open+0x2a6>
 8015742:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015746:	429a      	cmp	r2, r3
 8015748:	d8e0      	bhi.n	801570c <f_open+0x268>
				}
				fp->clust = clst;
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801574e:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8015750:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015754:	2b00      	cmp	r3, #0
 8015756:	d131      	bne.n	80157bc <f_open+0x318>
 8015758:	693b      	ldr	r3, [r7, #16]
 801575a:	899b      	ldrh	r3, [r3, #12]
 801575c:	461a      	mov	r2, r3
 801575e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015760:	fbb3 f1f2 	udiv	r1, r3, r2
 8015764:	fb02 f201 	mul.w	r2, r2, r1
 8015768:	1a9b      	subs	r3, r3, r2
 801576a:	2b00      	cmp	r3, #0
 801576c:	d026      	beq.n	80157bc <f_open+0x318>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801576e:	693b      	ldr	r3, [r7, #16]
 8015770:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015772:	4618      	mov	r0, r3
 8015774:	f7fe f862 	bl	801383c <clust2sect>
 8015778:	6478      	str	r0, [r7, #68]	; 0x44
 801577a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801577c:	2b00      	cmp	r3, #0
 801577e:	d103      	bne.n	8015788 <f_open+0x2e4>
						res = FR_INT_ERR;
 8015780:	2302      	movs	r3, #2
 8015782:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8015786:	e019      	b.n	80157bc <f_open+0x318>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8015788:	693b      	ldr	r3, [r7, #16]
 801578a:	899b      	ldrh	r3, [r3, #12]
 801578c:	461a      	mov	r2, r3
 801578e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015790:	fbb3 f2f2 	udiv	r2, r3, r2
 8015794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015796:	441a      	add	r2, r3
 8015798:	68fb      	ldr	r3, [r7, #12]
 801579a:	61da      	str	r2, [r3, #28]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801579c:	693b      	ldr	r3, [r7, #16]
 801579e:	7858      	ldrb	r0, [r3, #1]
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	69da      	ldr	r2, [r3, #28]
 80157aa:	2301      	movs	r3, #1
 80157ac:	f7fd fe06 	bl	80133bc <disk_read>
 80157b0:	4603      	mov	r3, r0
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d002      	beq.n	80157bc <f_open+0x318>
 80157b6:	2301      	movs	r3, #1
 80157b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80157bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d002      	beq.n	80157ca <f_open+0x326>
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	2200      	movs	r2, #0
 80157c8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80157ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80157ce:	4618      	mov	r0, r3
 80157d0:	3760      	adds	r7, #96	; 0x60
 80157d2:	46bd      	mov	sp, r7
 80157d4:	bd80      	pop	{r7, pc}

080157d6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80157d6:	b580      	push	{r7, lr}
 80157d8:	b08c      	sub	sp, #48	; 0x30
 80157da:	af00      	add	r7, sp, #0
 80157dc:	60f8      	str	r0, [r7, #12]
 80157de:	60b9      	str	r1, [r7, #8]
 80157e0:	607a      	str	r2, [r7, #4]
 80157e2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80157e4:	68bb      	ldr	r3, [r7, #8]
 80157e6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80157e8:	683b      	ldr	r3, [r7, #0]
 80157ea:	2200      	movs	r2, #0
 80157ec:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	f107 0210 	add.w	r2, r7, #16
 80157f4:	4611      	mov	r1, r2
 80157f6:	4618      	mov	r0, r3
 80157f8:	f7ff fdda 	bl	80153b0 <validate>
 80157fc:	4603      	mov	r3, r0
 80157fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8015802:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015806:	2b00      	cmp	r3, #0
 8015808:	d107      	bne.n	801581a <f_write+0x44>
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	7c5b      	ldrb	r3, [r3, #17]
 801580e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8015812:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015816:	2b00      	cmp	r3, #0
 8015818:	d002      	beq.n	8015820 <f_write+0x4a>
 801581a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801581e:	e16a      	b.n	8015af6 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8015820:	68fb      	ldr	r3, [r7, #12]
 8015822:	7c1b      	ldrb	r3, [r3, #16]
 8015824:	f003 0302 	and.w	r3, r3, #2
 8015828:	2b00      	cmp	r3, #0
 801582a:	d101      	bne.n	8015830 <f_write+0x5a>
 801582c:	2307      	movs	r3, #7
 801582e:	e162      	b.n	8015af6 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8015830:	68fb      	ldr	r3, [r7, #12]
 8015832:	695a      	ldr	r2, [r3, #20]
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	441a      	add	r2, r3
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	695b      	ldr	r3, [r3, #20]
 801583c:	429a      	cmp	r2, r3
 801583e:	f080 814c 	bcs.w	8015ada <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	695b      	ldr	r3, [r3, #20]
 8015846:	43db      	mvns	r3, r3
 8015848:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801584a:	e146      	b.n	8015ada <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	695b      	ldr	r3, [r3, #20]
 8015850:	693a      	ldr	r2, [r7, #16]
 8015852:	8992      	ldrh	r2, [r2, #12]
 8015854:	fbb3 f1f2 	udiv	r1, r3, r2
 8015858:	fb02 f201 	mul.w	r2, r2, r1
 801585c:	1a9b      	subs	r3, r3, r2
 801585e:	2b00      	cmp	r3, #0
 8015860:	f040 80f1 	bne.w	8015a46 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	695b      	ldr	r3, [r3, #20]
 8015868:	693a      	ldr	r2, [r7, #16]
 801586a:	8992      	ldrh	r2, [r2, #12]
 801586c:	fbb3 f3f2 	udiv	r3, r3, r2
 8015870:	693a      	ldr	r2, [r7, #16]
 8015872:	8952      	ldrh	r2, [r2, #10]
 8015874:	3a01      	subs	r2, #1
 8015876:	4013      	ands	r3, r2
 8015878:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801587a:	69bb      	ldr	r3, [r7, #24]
 801587c:	2b00      	cmp	r3, #0
 801587e:	d143      	bne.n	8015908 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	695b      	ldr	r3, [r3, #20]
 8015884:	2b00      	cmp	r3, #0
 8015886:	d10c      	bne.n	80158a2 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	689b      	ldr	r3, [r3, #8]
 801588c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801588e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015890:	2b00      	cmp	r3, #0
 8015892:	d11a      	bne.n	80158ca <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	2100      	movs	r1, #0
 8015898:	4618      	mov	r0, r3
 801589a:	f7fe fa43 	bl	8013d24 <create_chain>
 801589e:	62b8      	str	r0, [r7, #40]	; 0x28
 80158a0:	e013      	b.n	80158ca <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d007      	beq.n	80158ba <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	695b      	ldr	r3, [r3, #20]
 80158ae:	4619      	mov	r1, r3
 80158b0:	68f8      	ldr	r0, [r7, #12]
 80158b2:	f7fe facf 	bl	8013e54 <clmt_clust>
 80158b6:	62b8      	str	r0, [r7, #40]	; 0x28
 80158b8:	e007      	b.n	80158ca <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80158ba:	68fa      	ldr	r2, [r7, #12]
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	699b      	ldr	r3, [r3, #24]
 80158c0:	4619      	mov	r1, r3
 80158c2:	4610      	mov	r0, r2
 80158c4:	f7fe fa2e 	bl	8013d24 <create_chain>
 80158c8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80158ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	f000 8109 	beq.w	8015ae4 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80158d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158d4:	2b01      	cmp	r3, #1
 80158d6:	d104      	bne.n	80158e2 <f_write+0x10c>
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	2202      	movs	r2, #2
 80158dc:	745a      	strb	r2, [r3, #17]
 80158de:	2302      	movs	r3, #2
 80158e0:	e109      	b.n	8015af6 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80158e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158e8:	d104      	bne.n	80158f4 <f_write+0x11e>
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	2201      	movs	r2, #1
 80158ee:	745a      	strb	r2, [r3, #17]
 80158f0:	2301      	movs	r3, #1
 80158f2:	e100      	b.n	8015af6 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80158f8:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	689b      	ldr	r3, [r3, #8]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d102      	bne.n	8015908 <f_write+0x132>
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015906:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	7c1b      	ldrb	r3, [r3, #16]
 801590c:	b25b      	sxtb	r3, r3
 801590e:	2b00      	cmp	r3, #0
 8015910:	da18      	bge.n	8015944 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015912:	693b      	ldr	r3, [r7, #16]
 8015914:	7858      	ldrb	r0, [r3, #1]
 8015916:	68fb      	ldr	r3, [r7, #12]
 8015918:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	69da      	ldr	r2, [r3, #28]
 8015920:	2301      	movs	r3, #1
 8015922:	f7fd fd6b 	bl	80133fc <disk_write>
 8015926:	4603      	mov	r3, r0
 8015928:	2b00      	cmp	r3, #0
 801592a:	d004      	beq.n	8015936 <f_write+0x160>
 801592c:	68fb      	ldr	r3, [r7, #12]
 801592e:	2201      	movs	r2, #1
 8015930:	745a      	strb	r2, [r3, #17]
 8015932:	2301      	movs	r3, #1
 8015934:	e0df      	b.n	8015af6 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	7c1b      	ldrb	r3, [r3, #16]
 801593a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801593e:	b2da      	uxtb	r2, r3
 8015940:	68fb      	ldr	r3, [r7, #12]
 8015942:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8015944:	693a      	ldr	r2, [r7, #16]
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	699b      	ldr	r3, [r3, #24]
 801594a:	4619      	mov	r1, r3
 801594c:	4610      	mov	r0, r2
 801594e:	f7fd ff75 	bl	801383c <clust2sect>
 8015952:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8015954:	697b      	ldr	r3, [r7, #20]
 8015956:	2b00      	cmp	r3, #0
 8015958:	d104      	bne.n	8015964 <f_write+0x18e>
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	2202      	movs	r2, #2
 801595e:	745a      	strb	r2, [r3, #17]
 8015960:	2302      	movs	r3, #2
 8015962:	e0c8      	b.n	8015af6 <f_write+0x320>
			sect += csect;
 8015964:	697a      	ldr	r2, [r7, #20]
 8015966:	69bb      	ldr	r3, [r7, #24]
 8015968:	4413      	add	r3, r2
 801596a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801596c:	693b      	ldr	r3, [r7, #16]
 801596e:	899b      	ldrh	r3, [r3, #12]
 8015970:	461a      	mov	r2, r3
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	fbb3 f3f2 	udiv	r3, r3, r2
 8015978:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801597a:	6a3b      	ldr	r3, [r7, #32]
 801597c:	2b00      	cmp	r3, #0
 801597e:	d043      	beq.n	8015a08 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8015980:	69ba      	ldr	r2, [r7, #24]
 8015982:	6a3b      	ldr	r3, [r7, #32]
 8015984:	4413      	add	r3, r2
 8015986:	693a      	ldr	r2, [r7, #16]
 8015988:	8952      	ldrh	r2, [r2, #10]
 801598a:	4293      	cmp	r3, r2
 801598c:	d905      	bls.n	801599a <f_write+0x1c4>
					cc = fs->csize - csect;
 801598e:	693b      	ldr	r3, [r7, #16]
 8015990:	895b      	ldrh	r3, [r3, #10]
 8015992:	461a      	mov	r2, r3
 8015994:	69bb      	ldr	r3, [r7, #24]
 8015996:	1ad3      	subs	r3, r2, r3
 8015998:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801599a:	693b      	ldr	r3, [r7, #16]
 801599c:	7858      	ldrb	r0, [r3, #1]
 801599e:	6a3b      	ldr	r3, [r7, #32]
 80159a0:	697a      	ldr	r2, [r7, #20]
 80159a2:	69f9      	ldr	r1, [r7, #28]
 80159a4:	f7fd fd2a 	bl	80133fc <disk_write>
 80159a8:	4603      	mov	r3, r0
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d004      	beq.n	80159b8 <f_write+0x1e2>
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	2201      	movs	r2, #1
 80159b2:	745a      	strb	r2, [r3, #17]
 80159b4:	2301      	movs	r3, #1
 80159b6:	e09e      	b.n	8015af6 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	69da      	ldr	r2, [r3, #28]
 80159bc:	697b      	ldr	r3, [r7, #20]
 80159be:	1ad3      	subs	r3, r2, r3
 80159c0:	6a3a      	ldr	r2, [r7, #32]
 80159c2:	429a      	cmp	r2, r3
 80159c4:	d918      	bls.n	80159f8 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80159cc:	68fb      	ldr	r3, [r7, #12]
 80159ce:	69da      	ldr	r2, [r3, #28]
 80159d0:	697b      	ldr	r3, [r7, #20]
 80159d2:	1ad3      	subs	r3, r2, r3
 80159d4:	693a      	ldr	r2, [r7, #16]
 80159d6:	8992      	ldrh	r2, [r2, #12]
 80159d8:	fb02 f303 	mul.w	r3, r2, r3
 80159dc:	69fa      	ldr	r2, [r7, #28]
 80159de:	18d1      	adds	r1, r2, r3
 80159e0:	693b      	ldr	r3, [r7, #16]
 80159e2:	899b      	ldrh	r3, [r3, #12]
 80159e4:	461a      	mov	r2, r3
 80159e6:	f7fd fdc9 	bl	801357c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	7c1b      	ldrb	r3, [r3, #16]
 80159ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80159f2:	b2da      	uxtb	r2, r3
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80159f8:	693b      	ldr	r3, [r7, #16]
 80159fa:	899b      	ldrh	r3, [r3, #12]
 80159fc:	461a      	mov	r2, r3
 80159fe:	6a3b      	ldr	r3, [r7, #32]
 8015a00:	fb02 f303 	mul.w	r3, r2, r3
 8015a04:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8015a06:	e04b      	b.n	8015aa0 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	69db      	ldr	r3, [r3, #28]
 8015a0c:	697a      	ldr	r2, [r7, #20]
 8015a0e:	429a      	cmp	r2, r3
 8015a10:	d016      	beq.n	8015a40 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	695a      	ldr	r2, [r3, #20]
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015a1a:	429a      	cmp	r2, r3
 8015a1c:	d210      	bcs.n	8015a40 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8015a1e:	693b      	ldr	r3, [r7, #16]
 8015a20:	7858      	ldrb	r0, [r3, #1]
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8015a28:	2301      	movs	r3, #1
 8015a2a:	697a      	ldr	r2, [r7, #20]
 8015a2c:	f7fd fcc6 	bl	80133bc <disk_read>
 8015a30:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d004      	beq.n	8015a40 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	2201      	movs	r2, #1
 8015a3a:	745a      	strb	r2, [r3, #17]
 8015a3c:	2301      	movs	r3, #1
 8015a3e:	e05a      	b.n	8015af6 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8015a40:	68fb      	ldr	r3, [r7, #12]
 8015a42:	697a      	ldr	r2, [r7, #20]
 8015a44:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8015a46:	693b      	ldr	r3, [r7, #16]
 8015a48:	899b      	ldrh	r3, [r3, #12]
 8015a4a:	4618      	mov	r0, r3
 8015a4c:	68fb      	ldr	r3, [r7, #12]
 8015a4e:	695b      	ldr	r3, [r3, #20]
 8015a50:	693a      	ldr	r2, [r7, #16]
 8015a52:	8992      	ldrh	r2, [r2, #12]
 8015a54:	fbb3 f1f2 	udiv	r1, r3, r2
 8015a58:	fb02 f201 	mul.w	r2, r2, r1
 8015a5c:	1a9b      	subs	r3, r3, r2
 8015a5e:	1ac3      	subs	r3, r0, r3
 8015a60:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8015a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	429a      	cmp	r2, r3
 8015a68:	d901      	bls.n	8015a6e <f_write+0x298>
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8015a74:	68fb      	ldr	r3, [r7, #12]
 8015a76:	695b      	ldr	r3, [r3, #20]
 8015a78:	693a      	ldr	r2, [r7, #16]
 8015a7a:	8992      	ldrh	r2, [r2, #12]
 8015a7c:	fbb3 f0f2 	udiv	r0, r3, r2
 8015a80:	fb02 f200 	mul.w	r2, r2, r0
 8015a84:	1a9b      	subs	r3, r3, r2
 8015a86:	440b      	add	r3, r1
 8015a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a8a:	69f9      	ldr	r1, [r7, #28]
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	f7fd fd75 	bl	801357c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	7c1b      	ldrb	r3, [r3, #16]
 8015a96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015a9a:	b2da      	uxtb	r2, r3
 8015a9c:	68fb      	ldr	r3, [r7, #12]
 8015a9e:	741a      	strb	r2, [r3, #16]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8015aa0:	69fa      	ldr	r2, [r7, #28]
 8015aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015aa4:	4413      	add	r3, r2
 8015aa6:	61fb      	str	r3, [r7, #28]
 8015aa8:	68fb      	ldr	r3, [r7, #12]
 8015aaa:	695a      	ldr	r2, [r3, #20]
 8015aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015aae:	441a      	add	r2, r3
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	615a      	str	r2, [r3, #20]
 8015ab4:	68fb      	ldr	r3, [r7, #12]
 8015ab6:	68da      	ldr	r2, [r3, #12]
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	695b      	ldr	r3, [r3, #20]
 8015abc:	429a      	cmp	r2, r3
 8015abe:	bf38      	it	cc
 8015ac0:	461a      	movcc	r2, r3
 8015ac2:	68fb      	ldr	r3, [r7, #12]
 8015ac4:	60da      	str	r2, [r3, #12]
 8015ac6:	683b      	ldr	r3, [r7, #0]
 8015ac8:	681a      	ldr	r2, [r3, #0]
 8015aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015acc:	441a      	add	r2, r3
 8015ace:	683b      	ldr	r3, [r7, #0]
 8015ad0:	601a      	str	r2, [r3, #0]
 8015ad2:	687a      	ldr	r2, [r7, #4]
 8015ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ad6:	1ad3      	subs	r3, r2, r3
 8015ad8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	f47f aeb5 	bne.w	801584c <f_write+0x76>
 8015ae2:	e000      	b.n	8015ae6 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8015ae4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	7c1b      	ldrb	r3, [r3, #16]
 8015aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015aee:	b2da      	uxtb	r2, r3
 8015af0:	68fb      	ldr	r3, [r7, #12]
 8015af2:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 8015af4:	2300      	movs	r3, #0
}
 8015af6:	4618      	mov	r0, r3
 8015af8:	3730      	adds	r7, #48	; 0x30
 8015afa:	46bd      	mov	sp, r7
 8015afc:	bd80      	pop	{r7, pc}

08015afe <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8015afe:	b580      	push	{r7, lr}
 8015b00:	b086      	sub	sp, #24
 8015b02:	af00      	add	r7, sp, #0
 8015b04:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	f107 0208 	add.w	r2, r7, #8
 8015b0c:	4611      	mov	r1, r2
 8015b0e:	4618      	mov	r0, r3
 8015b10:	f7ff fc4e 	bl	80153b0 <validate>
 8015b14:	4603      	mov	r3, r0
 8015b16:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015b18:	7dfb      	ldrb	r3, [r7, #23]
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d168      	bne.n	8015bf0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	7c1b      	ldrb	r3, [r3, #16]
 8015b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d062      	beq.n	8015bf0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	7c1b      	ldrb	r3, [r3, #16]
 8015b2e:	b25b      	sxtb	r3, r3
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	da15      	bge.n	8015b60 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8015b34:	68bb      	ldr	r3, [r7, #8]
 8015b36:	7858      	ldrb	r0, [r3, #1]
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	69da      	ldr	r2, [r3, #28]
 8015b42:	2301      	movs	r3, #1
 8015b44:	f7fd fc5a 	bl	80133fc <disk_write>
 8015b48:	4603      	mov	r3, r0
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d001      	beq.n	8015b52 <f_sync+0x54>
 8015b4e:	2301      	movs	r3, #1
 8015b50:	e04f      	b.n	8015bf2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	7c1b      	ldrb	r3, [r3, #16]
 8015b56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015b5a:	b2da      	uxtb	r2, r3
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8015b60:	f7fa fa44 	bl	800ffec <get_fattime>
 8015b64:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8015b66:	68ba      	ldr	r2, [r7, #8]
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	6a1b      	ldr	r3, [r3, #32]
 8015b6c:	4619      	mov	r1, r3
 8015b6e:	4610      	mov	r0, r2
 8015b70:	f7fd fdc6 	bl	8013700 <move_window>
 8015b74:	4603      	mov	r3, r0
 8015b76:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8015b78:	7dfb      	ldrb	r3, [r7, #23]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d138      	bne.n	8015bf0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b82:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	330b      	adds	r3, #11
 8015b88:	781a      	ldrb	r2, [r3, #0]
 8015b8a:	68fb      	ldr	r3, [r7, #12]
 8015b8c:	330b      	adds	r3, #11
 8015b8e:	f042 0220 	orr.w	r2, r2, #32
 8015b92:	b2d2      	uxtb	r2, r2
 8015b94:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	6818      	ldr	r0, [r3, #0]
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	689b      	ldr	r3, [r3, #8]
 8015b9e:	461a      	mov	r2, r3
 8015ba0:	68f9      	ldr	r1, [r7, #12]
 8015ba2:	f7fe fb54 	bl	801424e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8015ba6:	68fb      	ldr	r3, [r7, #12]
 8015ba8:	f103 021c 	add.w	r2, r3, #28
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	68db      	ldr	r3, [r3, #12]
 8015bb0:	4619      	mov	r1, r3
 8015bb2:	4610      	mov	r0, r2
 8015bb4:	f7fd fcb6 	bl	8013524 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8015bb8:	68fb      	ldr	r3, [r7, #12]
 8015bba:	3316      	adds	r3, #22
 8015bbc:	6939      	ldr	r1, [r7, #16]
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	f7fd fcb0 	bl	8013524 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8015bc4:	68fb      	ldr	r3, [r7, #12]
 8015bc6:	3312      	adds	r3, #18
 8015bc8:	2100      	movs	r1, #0
 8015bca:	4618      	mov	r0, r3
 8015bcc:	f7fd fc8f 	bl	80134ee <st_word>
					fs->wflag = 1;
 8015bd0:	68bb      	ldr	r3, [r7, #8]
 8015bd2:	2201      	movs	r2, #1
 8015bd4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8015bd6:	68bb      	ldr	r3, [r7, #8]
 8015bd8:	4618      	mov	r0, r3
 8015bda:	f7fd fdbf 	bl	801375c <sync_fs>
 8015bde:	4603      	mov	r3, r0
 8015be0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	7c1b      	ldrb	r3, [r3, #16]
 8015be6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015bea:	b2da      	uxtb	r2, r3
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8015bf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	3718      	adds	r7, #24
 8015bf6:	46bd      	mov	sp, r7
 8015bf8:	bd80      	pop	{r7, pc}

08015bfa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8015bfa:	b580      	push	{r7, lr}
 8015bfc:	b084      	sub	sp, #16
 8015bfe:	af00      	add	r7, sp, #0
 8015c00:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8015c02:	6878      	ldr	r0, [r7, #4]
 8015c04:	f7ff ff7b 	bl	8015afe <f_sync>
 8015c08:	4603      	mov	r3, r0
 8015c0a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8015c0c:	7bfb      	ldrb	r3, [r7, #15]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d10e      	bne.n	8015c30 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	f107 0208 	add.w	r2, r7, #8
 8015c18:	4611      	mov	r1, r2
 8015c1a:	4618      	mov	r0, r3
 8015c1c:	f7ff fbc8 	bl	80153b0 <validate>
 8015c20:	4603      	mov	r3, r0
 8015c22:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8015c24:	7bfb      	ldrb	r3, [r7, #15]
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d102      	bne.n	8015c30 <f_close+0x36>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	2200      	movs	r2, #0
 8015c2e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8015c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c32:	4618      	mov	r0, r3
 8015c34:	3710      	adds	r7, #16
 8015c36:	46bd      	mov	sp, r7
 8015c38:	bd80      	pop	{r7, pc}

08015c3a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8015c3a:	b580      	push	{r7, lr}
 8015c3c:	b086      	sub	sp, #24
 8015c3e:	af00      	add	r7, sp, #0
 8015c40:	6078      	str	r0, [r7, #4]
 8015c42:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d101      	bne.n	8015c4e <f_opendir+0x14>
 8015c4a:	2309      	movs	r3, #9
 8015c4c:	e04c      	b.n	8015ce8 <f_opendir+0xae>

	/* Get logical drive */
	obj = &dp->obj;
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8015c52:	f107 010c 	add.w	r1, r7, #12
 8015c56:	463b      	mov	r3, r7
 8015c58:	2200      	movs	r2, #0
 8015c5a:	4618      	mov	r0, r3
 8015c5c:	f7ff f922 	bl	8014ea4 <find_volume>
 8015c60:	4603      	mov	r3, r0
 8015c62:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015c64:	7dfb      	ldrb	r3, [r7, #23]
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d137      	bne.n	8015cda <f_opendir+0xa0>
		obj->fs = fs;
 8015c6a:	68fa      	ldr	r2, [r7, #12]
 8015c6c:	693b      	ldr	r3, [r7, #16]
 8015c6e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8015c70:	683b      	ldr	r3, [r7, #0]
 8015c72:	4619      	mov	r1, r3
 8015c74:	6878      	ldr	r0, [r7, #4]
 8015c76:	f7ff f805 	bl	8014c84 <follow_path>
 8015c7a:	4603      	mov	r3, r0
 8015c7c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8015c7e:	7dfb      	ldrb	r3, [r7, #23]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d125      	bne.n	8015cd0 <f_opendir+0x96>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8015c8a:	b25b      	sxtb	r3, r3
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	db12      	blt.n	8015cb6 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8015c90:	693b      	ldr	r3, [r7, #16]
 8015c92:	799b      	ldrb	r3, [r3, #6]
 8015c94:	f003 0310 	and.w	r3, r3, #16
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d00a      	beq.n	8015cb2 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8015c9c:	68fa      	ldr	r2, [r7, #12]
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	69db      	ldr	r3, [r3, #28]
 8015ca2:	4619      	mov	r1, r3
 8015ca4:	4610      	mov	r0, r2
 8015ca6:	f7fe fab3 	bl	8014210 <ld_clust>
 8015caa:	4602      	mov	r2, r0
 8015cac:	693b      	ldr	r3, [r7, #16]
 8015cae:	609a      	str	r2, [r3, #8]
 8015cb0:	e001      	b.n	8015cb6 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8015cb2:	2305      	movs	r3, #5
 8015cb4:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8015cb6:	7dfb      	ldrb	r3, [r7, #23]
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d109      	bne.n	8015cd0 <f_opendir+0x96>
				obj->id = fs->id;
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	88da      	ldrh	r2, [r3, #6]
 8015cc0:	693b      	ldr	r3, [r7, #16]
 8015cc2:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8015cc4:	2100      	movs	r1, #0
 8015cc6:	6878      	ldr	r0, [r7, #4]
 8015cc8:	f7fe f8fc 	bl	8013ec4 <dir_sdi>
 8015ccc:	4603      	mov	r3, r0
 8015cce:	75fb      	strb	r3, [r7, #23]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8015cd0:	7dfb      	ldrb	r3, [r7, #23]
 8015cd2:	2b04      	cmp	r3, #4
 8015cd4:	d101      	bne.n	8015cda <f_opendir+0xa0>
 8015cd6:	2305      	movs	r3, #5
 8015cd8:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8015cda:	7dfb      	ldrb	r3, [r7, #23]
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d002      	beq.n	8015ce6 <f_opendir+0xac>
 8015ce0:	693b      	ldr	r3, [r7, #16]
 8015ce2:	2200      	movs	r2, #0
 8015ce4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8015ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8015ce8:	4618      	mov	r0, r3
 8015cea:	3718      	adds	r7, #24
 8015cec:	46bd      	mov	sp, r7
 8015cee:	bd80      	pop	{r7, pc}

08015cf0 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8015cf0:	b580      	push	{r7, lr}
 8015cf2:	b084      	sub	sp, #16
 8015cf4:	af00      	add	r7, sp, #0
 8015cf6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	f107 0208 	add.w	r2, r7, #8
 8015cfe:	4611      	mov	r1, r2
 8015d00:	4618      	mov	r0, r3
 8015d02:	f7ff fb55 	bl	80153b0 <validate>
 8015d06:	4603      	mov	r3, r0
 8015d08:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015d0a:	7bfb      	ldrb	r3, [r7, #15]
 8015d0c:	2b00      	cmp	r3, #0
 8015d0e:	d102      	bne.n	8015d16 <f_closedir+0x26>
			res = dec_lock(dp->obj.lockid);
		}
		if (res == FR_OK)
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	2200      	movs	r2, #0
 8015d14:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8015d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d18:	4618      	mov	r0, r3
 8015d1a:	3710      	adds	r7, #16
 8015d1c:	46bd      	mov	sp, r7
 8015d1e:	bd80      	pop	{r7, pc}

08015d20 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8015d20:	b580      	push	{r7, lr}
 8015d22:	b096      	sub	sp, #88	; 0x58
 8015d24:	af00      	add	r7, sp, #0
 8015d26:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8015d28:	f107 0108 	add.w	r1, r7, #8
 8015d2c:	1d3b      	adds	r3, r7, #4
 8015d2e:	2202      	movs	r2, #2
 8015d30:	4618      	mov	r0, r3
 8015d32:	f7ff f8b7 	bl	8014ea4 <find_volume>
 8015d36:	4603      	mov	r3, r0
 8015d38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8015d3c:	68bb      	ldr	r3, [r7, #8]
 8015d3e:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8015d40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	f040 80f2 	bne.w	8015f2e <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8015d4a:	687a      	ldr	r2, [r7, #4]
 8015d4c:	f107 030c 	add.w	r3, r7, #12
 8015d50:	4611      	mov	r1, r2
 8015d52:	4618      	mov	r0, r3
 8015d54:	f7fe ff96 	bl	8014c84 <follow_path>
 8015d58:	4603      	mov	r3, r0
 8015d5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8015d5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d102      	bne.n	8015d6c <f_mkdir+0x4c>
 8015d66:	2308      	movs	r3, #8
 8015d68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8015d6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015d70:	2b04      	cmp	r3, #4
 8015d72:	f040 80dc 	bne.w	8015f2e <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8015d76:	f107 030c 	add.w	r3, r7, #12
 8015d7a:	2100      	movs	r1, #0
 8015d7c:	4618      	mov	r0, r3
 8015d7e:	f7fd ffd1 	bl	8013d24 <create_chain>
 8015d82:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8015d84:	68bb      	ldr	r3, [r7, #8]
 8015d86:	895b      	ldrh	r3, [r3, #10]
 8015d88:	461a      	mov	r2, r3
 8015d8a:	68bb      	ldr	r3, [r7, #8]
 8015d8c:	899b      	ldrh	r3, [r3, #12]
 8015d8e:	fb03 f302 	mul.w	r3, r3, r2
 8015d92:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8015d94:	2300      	movs	r3, #0
 8015d96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8015d9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d102      	bne.n	8015da6 <f_mkdir+0x86>
 8015da0:	2307      	movs	r3, #7
 8015da2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8015da6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015da8:	2b01      	cmp	r3, #1
 8015daa:	d102      	bne.n	8015db2 <f_mkdir+0x92>
 8015dac:	2302      	movs	r3, #2
 8015dae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8015db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015db8:	d102      	bne.n	8015dc0 <f_mkdir+0xa0>
 8015dba:	2301      	movs	r3, #1
 8015dbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8015dc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d106      	bne.n	8015dd6 <f_mkdir+0xb6>
 8015dc8:	68bb      	ldr	r3, [r7, #8]
 8015dca:	4618      	mov	r0, r3
 8015dcc:	f7fd fc54 	bl	8013678 <sync_window>
 8015dd0:	4603      	mov	r3, r0
 8015dd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8015dd6:	f7fa f909 	bl	800ffec <get_fattime>
 8015dda:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8015ddc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d16c      	bne.n	8015ebe <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 8015de4:	68bb      	ldr	r3, [r7, #8]
 8015de6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015de8:	4618      	mov	r0, r3
 8015dea:	f7fd fd27 	bl	801383c <clust2sect>
 8015dee:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8015df0:	68bb      	ldr	r3, [r7, #8]
 8015df2:	3338      	adds	r3, #56	; 0x38
 8015df4:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8015df6:	68bb      	ldr	r3, [r7, #8]
 8015df8:	899b      	ldrh	r3, [r3, #12]
 8015dfa:	461a      	mov	r2, r3
 8015dfc:	2100      	movs	r1, #0
 8015dfe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015e00:	f7fd fbdd 	bl	80135be <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8015e04:	220b      	movs	r2, #11
 8015e06:	2120      	movs	r1, #32
 8015e08:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015e0a:	f7fd fbd8 	bl	80135be <mem_set>
					dir[DIR_Name] = '.';
 8015e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e10:	222e      	movs	r2, #46	; 0x2e
 8015e12:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8015e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e16:	330b      	adds	r3, #11
 8015e18:	2210      	movs	r2, #16
 8015e1a:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8015e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e1e:	3316      	adds	r3, #22
 8015e20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015e22:	4618      	mov	r0, r3
 8015e24:	f7fd fb7e 	bl	8013524 <st_dword>
					st_clust(fs, dir, dcl);
 8015e28:	68bb      	ldr	r3, [r7, #8]
 8015e2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015e2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015e2e:	4618      	mov	r0, r3
 8015e30:	f7fe fa0d 	bl	801424e <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8015e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e36:	3320      	adds	r3, #32
 8015e38:	2220      	movs	r2, #32
 8015e3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015e3c:	4618      	mov	r0, r3
 8015e3e:	f7fd fb9d 	bl	801357c <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8015e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e44:	3321      	adds	r3, #33	; 0x21
 8015e46:	222e      	movs	r2, #46	; 0x2e
 8015e48:	701a      	strb	r2, [r3, #0]
 8015e4a:	697b      	ldr	r3, [r7, #20]
 8015e4c:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8015e4e:	68bb      	ldr	r3, [r7, #8]
 8015e50:	781b      	ldrb	r3, [r3, #0]
 8015e52:	2b03      	cmp	r3, #3
 8015e54:	d106      	bne.n	8015e64 <f_mkdir+0x144>
 8015e56:	68bb      	ldr	r3, [r7, #8]
 8015e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015e5c:	429a      	cmp	r2, r3
 8015e5e:	d101      	bne.n	8015e64 <f_mkdir+0x144>
 8015e60:	2300      	movs	r3, #0
 8015e62:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8015e64:	68b8      	ldr	r0, [r7, #8]
 8015e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e68:	3320      	adds	r3, #32
 8015e6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015e6c:	4619      	mov	r1, r3
 8015e6e:	f7fe f9ee 	bl	801424e <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8015e72:	68bb      	ldr	r3, [r7, #8]
 8015e74:	895b      	ldrh	r3, [r3, #10]
 8015e76:	653b      	str	r3, [r7, #80]	; 0x50
 8015e78:	e01c      	b.n	8015eb4 <f_mkdir+0x194>
					fs->winsect = dsc++;
 8015e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015e7c:	1c5a      	adds	r2, r3, #1
 8015e7e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8015e80:	68ba      	ldr	r2, [r7, #8]
 8015e82:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8015e84:	68bb      	ldr	r3, [r7, #8]
 8015e86:	2201      	movs	r2, #1
 8015e88:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8015e8a:	68bb      	ldr	r3, [r7, #8]
 8015e8c:	4618      	mov	r0, r3
 8015e8e:	f7fd fbf3 	bl	8013678 <sync_window>
 8015e92:	4603      	mov	r3, r0
 8015e94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8015e98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d10d      	bne.n	8015ebc <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 8015ea0:	68bb      	ldr	r3, [r7, #8]
 8015ea2:	899b      	ldrh	r3, [r3, #12]
 8015ea4:	461a      	mov	r2, r3
 8015ea6:	2100      	movs	r1, #0
 8015ea8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015eaa:	f7fd fb88 	bl	80135be <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8015eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015eb0:	3b01      	subs	r3, #1
 8015eb2:	653b      	str	r3, [r7, #80]	; 0x50
 8015eb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d1df      	bne.n	8015e7a <f_mkdir+0x15a>
 8015eba:	e000      	b.n	8015ebe <f_mkdir+0x19e>
					if (res != FR_OK) break;
 8015ebc:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8015ebe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d107      	bne.n	8015ed6 <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8015ec6:	f107 030c 	add.w	r3, r7, #12
 8015eca:	4618      	mov	r0, r3
 8015ecc:	f7fe fc2a 	bl	8014724 <dir_register>
 8015ed0:	4603      	mov	r3, r0
 8015ed2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8015ed6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d120      	bne.n	8015f20 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8015ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8015ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ee4:	3316      	adds	r3, #22
 8015ee6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015ee8:	4618      	mov	r0, r3
 8015eea:	f7fd fb1b 	bl	8013524 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8015eee:	68bb      	ldr	r3, [r7, #8]
 8015ef0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015ef2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015ef4:	4618      	mov	r0, r3
 8015ef6:	f7fe f9aa 	bl	801424e <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8015efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015efc:	330b      	adds	r3, #11
 8015efe:	2210      	movs	r2, #16
 8015f00:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8015f02:	68bb      	ldr	r3, [r7, #8]
 8015f04:	2201      	movs	r2, #1
 8015f06:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8015f08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d10e      	bne.n	8015f2e <f_mkdir+0x20e>
					res = sync_fs(fs);
 8015f10:	68bb      	ldr	r3, [r7, #8]
 8015f12:	4618      	mov	r0, r3
 8015f14:	f7fd fc22 	bl	801375c <sync_fs>
 8015f18:	4603      	mov	r3, r0
 8015f1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8015f1e:	e006      	b.n	8015f2e <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8015f20:	f107 030c 	add.w	r3, r7, #12
 8015f24:	2200      	movs	r2, #0
 8015f26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015f28:	4618      	mov	r0, r3
 8015f2a:	f7fd fe96 	bl	8013c5a <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8015f2e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8015f32:	4618      	mov	r0, r3
 8015f34:	3758      	adds	r7, #88	; 0x58
 8015f36:	46bd      	mov	sp, r7
 8015f38:	bd80      	pop	{r7, pc}
	...

08015f3c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015f3c:	b480      	push	{r7}
 8015f3e:	b087      	sub	sp, #28
 8015f40:	af00      	add	r7, sp, #0
 8015f42:	60f8      	str	r0, [r7, #12]
 8015f44:	60b9      	str	r1, [r7, #8]
 8015f46:	4613      	mov	r3, r2
 8015f48:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015f4a:	2301      	movs	r3, #1
 8015f4c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8015f4e:	2300      	movs	r3, #0
 8015f50:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015f52:	4b1f      	ldr	r3, [pc, #124]	; (8015fd0 <FATFS_LinkDriverEx+0x94>)
 8015f54:	7a5b      	ldrb	r3, [r3, #9]
 8015f56:	b2db      	uxtb	r3, r3
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d131      	bne.n	8015fc0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015f5c:	4b1c      	ldr	r3, [pc, #112]	; (8015fd0 <FATFS_LinkDriverEx+0x94>)
 8015f5e:	7a5b      	ldrb	r3, [r3, #9]
 8015f60:	b2db      	uxtb	r3, r3
 8015f62:	461a      	mov	r2, r3
 8015f64:	4b1a      	ldr	r3, [pc, #104]	; (8015fd0 <FATFS_LinkDriverEx+0x94>)
 8015f66:	2100      	movs	r1, #0
 8015f68:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015f6a:	4b19      	ldr	r3, [pc, #100]	; (8015fd0 <FATFS_LinkDriverEx+0x94>)
 8015f6c:	7a5b      	ldrb	r3, [r3, #9]
 8015f6e:	b2db      	uxtb	r3, r3
 8015f70:	4a17      	ldr	r2, [pc, #92]	; (8015fd0 <FATFS_LinkDriverEx+0x94>)
 8015f72:	009b      	lsls	r3, r3, #2
 8015f74:	4413      	add	r3, r2
 8015f76:	68fa      	ldr	r2, [r7, #12]
 8015f78:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015f7a:	4b15      	ldr	r3, [pc, #84]	; (8015fd0 <FATFS_LinkDriverEx+0x94>)
 8015f7c:	7a5b      	ldrb	r3, [r3, #9]
 8015f7e:	b2db      	uxtb	r3, r3
 8015f80:	461a      	mov	r2, r3
 8015f82:	4b13      	ldr	r3, [pc, #76]	; (8015fd0 <FATFS_LinkDriverEx+0x94>)
 8015f84:	4413      	add	r3, r2
 8015f86:	79fa      	ldrb	r2, [r7, #7]
 8015f88:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8015f8a:	4b11      	ldr	r3, [pc, #68]	; (8015fd0 <FATFS_LinkDriverEx+0x94>)
 8015f8c:	7a5b      	ldrb	r3, [r3, #9]
 8015f8e:	b2db      	uxtb	r3, r3
 8015f90:	1c5a      	adds	r2, r3, #1
 8015f92:	b2d1      	uxtb	r1, r2
 8015f94:	4a0e      	ldr	r2, [pc, #56]	; (8015fd0 <FATFS_LinkDriverEx+0x94>)
 8015f96:	7251      	strb	r1, [r2, #9]
 8015f98:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8015f9a:	7dbb      	ldrb	r3, [r7, #22]
 8015f9c:	3330      	adds	r3, #48	; 0x30
 8015f9e:	b2da      	uxtb	r2, r3
 8015fa0:	68bb      	ldr	r3, [r7, #8]
 8015fa2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015fa4:	68bb      	ldr	r3, [r7, #8]
 8015fa6:	3301      	adds	r3, #1
 8015fa8:	223a      	movs	r2, #58	; 0x3a
 8015faa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015fac:	68bb      	ldr	r3, [r7, #8]
 8015fae:	3302      	adds	r3, #2
 8015fb0:	222f      	movs	r2, #47	; 0x2f
 8015fb2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015fb4:	68bb      	ldr	r3, [r7, #8]
 8015fb6:	3303      	adds	r3, #3
 8015fb8:	2200      	movs	r2, #0
 8015fba:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015fbc:	2300      	movs	r3, #0
 8015fbe:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015fc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8015fc2:	4618      	mov	r0, r3
 8015fc4:	371c      	adds	r7, #28
 8015fc6:	46bd      	mov	sp, r7
 8015fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fcc:	4770      	bx	lr
 8015fce:	bf00      	nop
 8015fd0:	2000040c 	.word	0x2000040c

08015fd4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015fd4:	b580      	push	{r7, lr}
 8015fd6:	b082      	sub	sp, #8
 8015fd8:	af00      	add	r7, sp, #0
 8015fda:	6078      	str	r0, [r7, #4]
 8015fdc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8015fde:	2200      	movs	r2, #0
 8015fe0:	6839      	ldr	r1, [r7, #0]
 8015fe2:	6878      	ldr	r0, [r7, #4]
 8015fe4:	f7ff ffaa 	bl	8015f3c <FATFS_LinkDriverEx>
 8015fe8:	4603      	mov	r3, r0
}
 8015fea:	4618      	mov	r0, r3
 8015fec:	3708      	adds	r7, #8
 8015fee:	46bd      	mov	sp, r7
 8015ff0:	bd80      	pop	{r7, pc}
	...

08015ff4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8015ff4:	b480      	push	{r7}
 8015ff6:	b085      	sub	sp, #20
 8015ff8:	af00      	add	r7, sp, #0
 8015ffa:	4603      	mov	r3, r0
 8015ffc:	6039      	str	r1, [r7, #0]
 8015ffe:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8016000:	88fb      	ldrh	r3, [r7, #6]
 8016002:	2b7f      	cmp	r3, #127	; 0x7f
 8016004:	d802      	bhi.n	801600c <ff_convert+0x18>
		c = chr;
 8016006:	88fb      	ldrh	r3, [r7, #6]
 8016008:	81fb      	strh	r3, [r7, #14]
 801600a:	e025      	b.n	8016058 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801600c:	683b      	ldr	r3, [r7, #0]
 801600e:	2b00      	cmp	r3, #0
 8016010:	d00b      	beq.n	801602a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8016012:	88fb      	ldrh	r3, [r7, #6]
 8016014:	2bff      	cmp	r3, #255	; 0xff
 8016016:	d805      	bhi.n	8016024 <ff_convert+0x30>
 8016018:	88fb      	ldrh	r3, [r7, #6]
 801601a:	3b80      	subs	r3, #128	; 0x80
 801601c:	4a12      	ldr	r2, [pc, #72]	; (8016068 <ff_convert+0x74>)
 801601e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016022:	e000      	b.n	8016026 <ff_convert+0x32>
 8016024:	2300      	movs	r3, #0
 8016026:	81fb      	strh	r3, [r7, #14]
 8016028:	e016      	b.n	8016058 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801602a:	2300      	movs	r3, #0
 801602c:	81fb      	strh	r3, [r7, #14]
 801602e:	e009      	b.n	8016044 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8016030:	89fb      	ldrh	r3, [r7, #14]
 8016032:	4a0d      	ldr	r2, [pc, #52]	; (8016068 <ff_convert+0x74>)
 8016034:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016038:	88fa      	ldrh	r2, [r7, #6]
 801603a:	429a      	cmp	r2, r3
 801603c:	d006      	beq.n	801604c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801603e:	89fb      	ldrh	r3, [r7, #14]
 8016040:	3301      	adds	r3, #1
 8016042:	81fb      	strh	r3, [r7, #14]
 8016044:	89fb      	ldrh	r3, [r7, #14]
 8016046:	2b7f      	cmp	r3, #127	; 0x7f
 8016048:	d9f2      	bls.n	8016030 <ff_convert+0x3c>
 801604a:	e000      	b.n	801604e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801604c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801604e:	89fb      	ldrh	r3, [r7, #14]
 8016050:	3380      	adds	r3, #128	; 0x80
 8016052:	b29b      	uxth	r3, r3
 8016054:	b2db      	uxtb	r3, r3
 8016056:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8016058:	89fb      	ldrh	r3, [r7, #14]
}
 801605a:	4618      	mov	r0, r3
 801605c:	3714      	adds	r7, #20
 801605e:	46bd      	mov	sp, r7
 8016060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016064:	4770      	bx	lr
 8016066:	bf00      	nop
 8016068:	08017668 	.word	0x08017668

0801606c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801606c:	b480      	push	{r7}
 801606e:	b087      	sub	sp, #28
 8016070:	af00      	add	r7, sp, #0
 8016072:	4603      	mov	r3, r0
 8016074:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8016076:	88fb      	ldrh	r3, [r7, #6]
 8016078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801607c:	d201      	bcs.n	8016082 <ff_wtoupper+0x16>
 801607e:	4b3e      	ldr	r3, [pc, #248]	; (8016178 <ff_wtoupper+0x10c>)
 8016080:	e000      	b.n	8016084 <ff_wtoupper+0x18>
 8016082:	4b3e      	ldr	r3, [pc, #248]	; (801617c <ff_wtoupper+0x110>)
 8016084:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8016086:	697b      	ldr	r3, [r7, #20]
 8016088:	1c9a      	adds	r2, r3, #2
 801608a:	617a      	str	r2, [r7, #20]
 801608c:	881b      	ldrh	r3, [r3, #0]
 801608e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8016090:	8a7b      	ldrh	r3, [r7, #18]
 8016092:	2b00      	cmp	r3, #0
 8016094:	d068      	beq.n	8016168 <ff_wtoupper+0xfc>
 8016096:	88fa      	ldrh	r2, [r7, #6]
 8016098:	8a7b      	ldrh	r3, [r7, #18]
 801609a:	429a      	cmp	r2, r3
 801609c:	d364      	bcc.n	8016168 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801609e:	697b      	ldr	r3, [r7, #20]
 80160a0:	1c9a      	adds	r2, r3, #2
 80160a2:	617a      	str	r2, [r7, #20]
 80160a4:	881b      	ldrh	r3, [r3, #0]
 80160a6:	823b      	strh	r3, [r7, #16]
 80160a8:	8a3b      	ldrh	r3, [r7, #16]
 80160aa:	0a1b      	lsrs	r3, r3, #8
 80160ac:	81fb      	strh	r3, [r7, #14]
 80160ae:	8a3b      	ldrh	r3, [r7, #16]
 80160b0:	b2db      	uxtb	r3, r3
 80160b2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80160b4:	88fa      	ldrh	r2, [r7, #6]
 80160b6:	8a79      	ldrh	r1, [r7, #18]
 80160b8:	8a3b      	ldrh	r3, [r7, #16]
 80160ba:	440b      	add	r3, r1
 80160bc:	429a      	cmp	r2, r3
 80160be:	da49      	bge.n	8016154 <ff_wtoupper+0xe8>
			switch (cmd) {
 80160c0:	89fb      	ldrh	r3, [r7, #14]
 80160c2:	2b08      	cmp	r3, #8
 80160c4:	d84f      	bhi.n	8016166 <ff_wtoupper+0xfa>
 80160c6:	a201      	add	r2, pc, #4	; (adr r2, 80160cc <ff_wtoupper+0x60>)
 80160c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80160cc:	080160f1 	.word	0x080160f1
 80160d0:	08016103 	.word	0x08016103
 80160d4:	08016119 	.word	0x08016119
 80160d8:	08016121 	.word	0x08016121
 80160dc:	08016129 	.word	0x08016129
 80160e0:	08016131 	.word	0x08016131
 80160e4:	08016139 	.word	0x08016139
 80160e8:	08016141 	.word	0x08016141
 80160ec:	08016149 	.word	0x08016149
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80160f0:	88fa      	ldrh	r2, [r7, #6]
 80160f2:	8a7b      	ldrh	r3, [r7, #18]
 80160f4:	1ad3      	subs	r3, r2, r3
 80160f6:	005b      	lsls	r3, r3, #1
 80160f8:	697a      	ldr	r2, [r7, #20]
 80160fa:	4413      	add	r3, r2
 80160fc:	881b      	ldrh	r3, [r3, #0]
 80160fe:	80fb      	strh	r3, [r7, #6]
 8016100:	e027      	b.n	8016152 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8016102:	88fa      	ldrh	r2, [r7, #6]
 8016104:	8a7b      	ldrh	r3, [r7, #18]
 8016106:	1ad3      	subs	r3, r2, r3
 8016108:	b29b      	uxth	r3, r3
 801610a:	f003 0301 	and.w	r3, r3, #1
 801610e:	b29b      	uxth	r3, r3
 8016110:	88fa      	ldrh	r2, [r7, #6]
 8016112:	1ad3      	subs	r3, r2, r3
 8016114:	80fb      	strh	r3, [r7, #6]
 8016116:	e01c      	b.n	8016152 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8016118:	88fb      	ldrh	r3, [r7, #6]
 801611a:	3b10      	subs	r3, #16
 801611c:	80fb      	strh	r3, [r7, #6]
 801611e:	e018      	b.n	8016152 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8016120:	88fb      	ldrh	r3, [r7, #6]
 8016122:	3b20      	subs	r3, #32
 8016124:	80fb      	strh	r3, [r7, #6]
 8016126:	e014      	b.n	8016152 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8016128:	88fb      	ldrh	r3, [r7, #6]
 801612a:	3b30      	subs	r3, #48	; 0x30
 801612c:	80fb      	strh	r3, [r7, #6]
 801612e:	e010      	b.n	8016152 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8016130:	88fb      	ldrh	r3, [r7, #6]
 8016132:	3b1a      	subs	r3, #26
 8016134:	80fb      	strh	r3, [r7, #6]
 8016136:	e00c      	b.n	8016152 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8016138:	88fb      	ldrh	r3, [r7, #6]
 801613a:	3308      	adds	r3, #8
 801613c:	80fb      	strh	r3, [r7, #6]
 801613e:	e008      	b.n	8016152 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8016140:	88fb      	ldrh	r3, [r7, #6]
 8016142:	3b50      	subs	r3, #80	; 0x50
 8016144:	80fb      	strh	r3, [r7, #6]
 8016146:	e004      	b.n	8016152 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8016148:	88fb      	ldrh	r3, [r7, #6]
 801614a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801614e:	80fb      	strh	r3, [r7, #6]
 8016150:	bf00      	nop
			}
			break;
 8016152:	e008      	b.n	8016166 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8016154:	89fb      	ldrh	r3, [r7, #14]
 8016156:	2b00      	cmp	r3, #0
 8016158:	d195      	bne.n	8016086 <ff_wtoupper+0x1a>
 801615a:	8a3b      	ldrh	r3, [r7, #16]
 801615c:	005b      	lsls	r3, r3, #1
 801615e:	697a      	ldr	r2, [r7, #20]
 8016160:	4413      	add	r3, r2
 8016162:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8016164:	e78f      	b.n	8016086 <ff_wtoupper+0x1a>
			break;
 8016166:	bf00      	nop
	}

	return chr;
 8016168:	88fb      	ldrh	r3, [r7, #6]
}
 801616a:	4618      	mov	r0, r3
 801616c:	371c      	adds	r7, #28
 801616e:	46bd      	mov	sp, r7
 8016170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016174:	4770      	bx	lr
 8016176:	bf00      	nop
 8016178:	08017768 	.word	0x08017768
 801617c:	0801795c 	.word	0x0801795c

08016180 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016180:	b580      	push	{r7, lr}
 8016182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016184:	2200      	movs	r2, #0
 8016186:	4912      	ldr	r1, [pc, #72]	; (80161d0 <MX_USB_DEVICE_Init+0x50>)
 8016188:	4812      	ldr	r0, [pc, #72]	; (80161d4 <MX_USB_DEVICE_Init+0x54>)
 801618a:	f7fb ff62 	bl	8012052 <USBD_Init>
 801618e:	4603      	mov	r3, r0
 8016190:	2b00      	cmp	r3, #0
 8016192:	d001      	beq.n	8016198 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016194:	f7eb fd36 	bl	8001c04 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8016198:	490f      	ldr	r1, [pc, #60]	; (80161d8 <MX_USB_DEVICE_Init+0x58>)
 801619a:	480e      	ldr	r0, [pc, #56]	; (80161d4 <MX_USB_DEVICE_Init+0x54>)
 801619c:	f7fb ff89 	bl	80120b2 <USBD_RegisterClass>
 80161a0:	4603      	mov	r3, r0
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d001      	beq.n	80161aa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80161a6:	f7eb fd2d 	bl	8001c04 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80161aa:	490c      	ldr	r1, [pc, #48]	; (80161dc <MX_USB_DEVICE_Init+0x5c>)
 80161ac:	4809      	ldr	r0, [pc, #36]	; (80161d4 <MX_USB_DEVICE_Init+0x54>)
 80161ae:	f7fa fb39 	bl	8010824 <USBD_MSC_RegisterStorage>
 80161b2:	4603      	mov	r3, r0
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d001      	beq.n	80161bc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80161b8:	f7eb fd24 	bl	8001c04 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80161bc:	4805      	ldr	r0, [pc, #20]	; (80161d4 <MX_USB_DEVICE_Init+0x54>)
 80161be:	f7fb ff9f 	bl	8012100 <USBD_Start>
 80161c2:	4603      	mov	r3, r0
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d001      	beq.n	80161cc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80161c8:	f7eb fd1c 	bl	8001c04 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80161cc:	bf00      	nop
 80161ce:	bd80      	pop	{r7, pc}
 80161d0:	200000f4 	.word	0x200000f4
 80161d4:	20004f04 	.word	0x20004f04
 80161d8:	2000000c 	.word	0x2000000c
 80161dc:	20000154 	.word	0x20000154

080161e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80161e0:	b480      	push	{r7}
 80161e2:	b083      	sub	sp, #12
 80161e4:	af00      	add	r7, sp, #0
 80161e6:	4603      	mov	r3, r0
 80161e8:	6039      	str	r1, [r7, #0]
 80161ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80161ec:	683b      	ldr	r3, [r7, #0]
 80161ee:	2212      	movs	r2, #18
 80161f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80161f2:	4b03      	ldr	r3, [pc, #12]	; (8016200 <USBD_FS_DeviceDescriptor+0x20>)
}
 80161f4:	4618      	mov	r0, r3
 80161f6:	370c      	adds	r7, #12
 80161f8:	46bd      	mov	sp, r7
 80161fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161fe:	4770      	bx	lr
 8016200:	20000114 	.word	0x20000114

08016204 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016204:	b480      	push	{r7}
 8016206:	b083      	sub	sp, #12
 8016208:	af00      	add	r7, sp, #0
 801620a:	4603      	mov	r3, r0
 801620c:	6039      	str	r1, [r7, #0]
 801620e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016210:	683b      	ldr	r3, [r7, #0]
 8016212:	2204      	movs	r2, #4
 8016214:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016216:	4b03      	ldr	r3, [pc, #12]	; (8016224 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016218:	4618      	mov	r0, r3
 801621a:	370c      	adds	r7, #12
 801621c:	46bd      	mov	sp, r7
 801621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016222:	4770      	bx	lr
 8016224:	20000134 	.word	0x20000134

08016228 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016228:	b580      	push	{r7, lr}
 801622a:	b082      	sub	sp, #8
 801622c:	af00      	add	r7, sp, #0
 801622e:	4603      	mov	r3, r0
 8016230:	6039      	str	r1, [r7, #0]
 8016232:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016234:	79fb      	ldrb	r3, [r7, #7]
 8016236:	2b00      	cmp	r3, #0
 8016238:	d105      	bne.n	8016246 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801623a:	683a      	ldr	r2, [r7, #0]
 801623c:	4907      	ldr	r1, [pc, #28]	; (801625c <USBD_FS_ProductStrDescriptor+0x34>)
 801623e:	4808      	ldr	r0, [pc, #32]	; (8016260 <USBD_FS_ProductStrDescriptor+0x38>)
 8016240:	f7fc ffb9 	bl	80131b6 <USBD_GetString>
 8016244:	e004      	b.n	8016250 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016246:	683a      	ldr	r2, [r7, #0]
 8016248:	4904      	ldr	r1, [pc, #16]	; (801625c <USBD_FS_ProductStrDescriptor+0x34>)
 801624a:	4805      	ldr	r0, [pc, #20]	; (8016260 <USBD_FS_ProductStrDescriptor+0x38>)
 801624c:	f7fc ffb3 	bl	80131b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016250:	4b02      	ldr	r3, [pc, #8]	; (801625c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8016252:	4618      	mov	r0, r3
 8016254:	3708      	adds	r7, #8
 8016256:	46bd      	mov	sp, r7
 8016258:	bd80      	pop	{r7, pc}
 801625a:	bf00      	nop
 801625c:	200051d4 	.word	0x200051d4
 8016260:	08017560 	.word	0x08017560

08016264 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016264:	b580      	push	{r7, lr}
 8016266:	b082      	sub	sp, #8
 8016268:	af00      	add	r7, sp, #0
 801626a:	4603      	mov	r3, r0
 801626c:	6039      	str	r1, [r7, #0]
 801626e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016270:	683a      	ldr	r2, [r7, #0]
 8016272:	4904      	ldr	r1, [pc, #16]	; (8016284 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016274:	4804      	ldr	r0, [pc, #16]	; (8016288 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8016276:	f7fc ff9e 	bl	80131b6 <USBD_GetString>
  return USBD_StrDesc;
 801627a:	4b02      	ldr	r3, [pc, #8]	; (8016284 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801627c:	4618      	mov	r0, r3
 801627e:	3708      	adds	r7, #8
 8016280:	46bd      	mov	sp, r7
 8016282:	bd80      	pop	{r7, pc}
 8016284:	200051d4 	.word	0x200051d4
 8016288:	08017574 	.word	0x08017574

0801628c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801628c:	b580      	push	{r7, lr}
 801628e:	b082      	sub	sp, #8
 8016290:	af00      	add	r7, sp, #0
 8016292:	4603      	mov	r3, r0
 8016294:	6039      	str	r1, [r7, #0]
 8016296:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016298:	683b      	ldr	r3, [r7, #0]
 801629a:	221a      	movs	r2, #26
 801629c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801629e:	f000 f855 	bl	801634c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80162a2:	4b02      	ldr	r3, [pc, #8]	; (80162ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 80162a4:	4618      	mov	r0, r3
 80162a6:	3708      	adds	r7, #8
 80162a8:	46bd      	mov	sp, r7
 80162aa:	bd80      	pop	{r7, pc}
 80162ac:	20000138 	.word	0x20000138

080162b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80162b0:	b580      	push	{r7, lr}
 80162b2:	b082      	sub	sp, #8
 80162b4:	af00      	add	r7, sp, #0
 80162b6:	4603      	mov	r3, r0
 80162b8:	6039      	str	r1, [r7, #0]
 80162ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80162bc:	79fb      	ldrb	r3, [r7, #7]
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d105      	bne.n	80162ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80162c2:	683a      	ldr	r2, [r7, #0]
 80162c4:	4907      	ldr	r1, [pc, #28]	; (80162e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80162c6:	4808      	ldr	r0, [pc, #32]	; (80162e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80162c8:	f7fc ff75 	bl	80131b6 <USBD_GetString>
 80162cc:	e004      	b.n	80162d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80162ce:	683a      	ldr	r2, [r7, #0]
 80162d0:	4904      	ldr	r1, [pc, #16]	; (80162e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80162d2:	4805      	ldr	r0, [pc, #20]	; (80162e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80162d4:	f7fc ff6f 	bl	80131b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80162d8:	4b02      	ldr	r3, [pc, #8]	; (80162e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80162da:	4618      	mov	r0, r3
 80162dc:	3708      	adds	r7, #8
 80162de:	46bd      	mov	sp, r7
 80162e0:	bd80      	pop	{r7, pc}
 80162e2:	bf00      	nop
 80162e4:	200051d4 	.word	0x200051d4
 80162e8:	08017588 	.word	0x08017588

080162ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80162ec:	b580      	push	{r7, lr}
 80162ee:	b082      	sub	sp, #8
 80162f0:	af00      	add	r7, sp, #0
 80162f2:	4603      	mov	r3, r0
 80162f4:	6039      	str	r1, [r7, #0]
 80162f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80162f8:	79fb      	ldrb	r3, [r7, #7]
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d105      	bne.n	801630a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80162fe:	683a      	ldr	r2, [r7, #0]
 8016300:	4907      	ldr	r1, [pc, #28]	; (8016320 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016302:	4808      	ldr	r0, [pc, #32]	; (8016324 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016304:	f7fc ff57 	bl	80131b6 <USBD_GetString>
 8016308:	e004      	b.n	8016314 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801630a:	683a      	ldr	r2, [r7, #0]
 801630c:	4904      	ldr	r1, [pc, #16]	; (8016320 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801630e:	4805      	ldr	r0, [pc, #20]	; (8016324 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016310:	f7fc ff51 	bl	80131b6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016314:	4b02      	ldr	r3, [pc, #8]	; (8016320 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8016316:	4618      	mov	r0, r3
 8016318:	3708      	adds	r7, #8
 801631a:	46bd      	mov	sp, r7
 801631c:	bd80      	pop	{r7, pc}
 801631e:	bf00      	nop
 8016320:	200051d4 	.word	0x200051d4
 8016324:	08017594 	.word	0x08017594

08016328 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016328:	b480      	push	{r7}
 801632a:	b083      	sub	sp, #12
 801632c:	af00      	add	r7, sp, #0
 801632e:	4603      	mov	r3, r0
 8016330:	6039      	str	r1, [r7, #0]
 8016332:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8016334:	683b      	ldr	r3, [r7, #0]
 8016336:	220c      	movs	r2, #12
 8016338:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801633a:	4b03      	ldr	r3, [pc, #12]	; (8016348 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 801633c:	4618      	mov	r0, r3
 801633e:	370c      	adds	r7, #12
 8016340:	46bd      	mov	sp, r7
 8016342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016346:	4770      	bx	lr
 8016348:	20000128 	.word	0x20000128

0801634c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801634c:	b580      	push	{r7, lr}
 801634e:	b084      	sub	sp, #16
 8016350:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016352:	4b0f      	ldr	r3, [pc, #60]	; (8016390 <Get_SerialNum+0x44>)
 8016354:	681b      	ldr	r3, [r3, #0]
 8016356:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016358:	4b0e      	ldr	r3, [pc, #56]	; (8016394 <Get_SerialNum+0x48>)
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801635e:	4b0e      	ldr	r3, [pc, #56]	; (8016398 <Get_SerialNum+0x4c>)
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016364:	68fa      	ldr	r2, [r7, #12]
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	4413      	add	r3, r2
 801636a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801636c:	68fb      	ldr	r3, [r7, #12]
 801636e:	2b00      	cmp	r3, #0
 8016370:	d009      	beq.n	8016386 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016372:	2208      	movs	r2, #8
 8016374:	4909      	ldr	r1, [pc, #36]	; (801639c <Get_SerialNum+0x50>)
 8016376:	68f8      	ldr	r0, [r7, #12]
 8016378:	f000 f814 	bl	80163a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801637c:	2204      	movs	r2, #4
 801637e:	4908      	ldr	r1, [pc, #32]	; (80163a0 <Get_SerialNum+0x54>)
 8016380:	68b8      	ldr	r0, [r7, #8]
 8016382:	f000 f80f 	bl	80163a4 <IntToUnicode>
  }
}
 8016386:	bf00      	nop
 8016388:	3710      	adds	r7, #16
 801638a:	46bd      	mov	sp, r7
 801638c:	bd80      	pop	{r7, pc}
 801638e:	bf00      	nop
 8016390:	1fff7a10 	.word	0x1fff7a10
 8016394:	1fff7a14 	.word	0x1fff7a14
 8016398:	1fff7a18 	.word	0x1fff7a18
 801639c:	2000013a 	.word	0x2000013a
 80163a0:	2000014a 	.word	0x2000014a

080163a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80163a4:	b480      	push	{r7}
 80163a6:	b087      	sub	sp, #28
 80163a8:	af00      	add	r7, sp, #0
 80163aa:	60f8      	str	r0, [r7, #12]
 80163ac:	60b9      	str	r1, [r7, #8]
 80163ae:	4613      	mov	r3, r2
 80163b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80163b2:	2300      	movs	r3, #0
 80163b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80163b6:	2300      	movs	r3, #0
 80163b8:	75fb      	strb	r3, [r7, #23]
 80163ba:	e027      	b.n	801640c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80163bc:	68fb      	ldr	r3, [r7, #12]
 80163be:	0f1b      	lsrs	r3, r3, #28
 80163c0:	2b09      	cmp	r3, #9
 80163c2:	d80b      	bhi.n	80163dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	0f1b      	lsrs	r3, r3, #28
 80163c8:	b2da      	uxtb	r2, r3
 80163ca:	7dfb      	ldrb	r3, [r7, #23]
 80163cc:	005b      	lsls	r3, r3, #1
 80163ce:	4619      	mov	r1, r3
 80163d0:	68bb      	ldr	r3, [r7, #8]
 80163d2:	440b      	add	r3, r1
 80163d4:	3230      	adds	r2, #48	; 0x30
 80163d6:	b2d2      	uxtb	r2, r2
 80163d8:	701a      	strb	r2, [r3, #0]
 80163da:	e00a      	b.n	80163f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	0f1b      	lsrs	r3, r3, #28
 80163e0:	b2da      	uxtb	r2, r3
 80163e2:	7dfb      	ldrb	r3, [r7, #23]
 80163e4:	005b      	lsls	r3, r3, #1
 80163e6:	4619      	mov	r1, r3
 80163e8:	68bb      	ldr	r3, [r7, #8]
 80163ea:	440b      	add	r3, r1
 80163ec:	3237      	adds	r2, #55	; 0x37
 80163ee:	b2d2      	uxtb	r2, r2
 80163f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80163f2:	68fb      	ldr	r3, [r7, #12]
 80163f4:	011b      	lsls	r3, r3, #4
 80163f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80163f8:	7dfb      	ldrb	r3, [r7, #23]
 80163fa:	005b      	lsls	r3, r3, #1
 80163fc:	3301      	adds	r3, #1
 80163fe:	68ba      	ldr	r2, [r7, #8]
 8016400:	4413      	add	r3, r2
 8016402:	2200      	movs	r2, #0
 8016404:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016406:	7dfb      	ldrb	r3, [r7, #23]
 8016408:	3301      	adds	r3, #1
 801640a:	75fb      	strb	r3, [r7, #23]
 801640c:	7dfa      	ldrb	r2, [r7, #23]
 801640e:	79fb      	ldrb	r3, [r7, #7]
 8016410:	429a      	cmp	r2, r3
 8016412:	d3d3      	bcc.n	80163bc <IntToUnicode+0x18>
  }
}
 8016414:	bf00      	nop
 8016416:	bf00      	nop
 8016418:	371c      	adds	r7, #28
 801641a:	46bd      	mov	sp, r7
 801641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016420:	4770      	bx	lr

08016422 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8016422:	b480      	push	{r7}
 8016424:	b083      	sub	sp, #12
 8016426:	af00      	add	r7, sp, #0
 8016428:	4603      	mov	r3, r0
 801642a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 801642c:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801642e:	4618      	mov	r0, r3
 8016430:	370c      	adds	r7, #12
 8016432:	46bd      	mov	sp, r7
 8016434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016438:	4770      	bx	lr

0801643a <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 801643a:	b480      	push	{r7}
 801643c:	b085      	sub	sp, #20
 801643e:	af00      	add	r7, sp, #0
 8016440:	4603      	mov	r3, r0
 8016442:	60b9      	str	r1, [r7, #8]
 8016444:	607a      	str	r2, [r7, #4]
 8016446:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8016448:	68bb      	ldr	r3, [r7, #8]
 801644a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801644e:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016456:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8016458:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801645a:	4618      	mov	r0, r3
 801645c:	3714      	adds	r7, #20
 801645e:	46bd      	mov	sp, r7
 8016460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016464:	4770      	bx	lr

08016466 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8016466:	b480      	push	{r7}
 8016468:	b083      	sub	sp, #12
 801646a:	af00      	add	r7, sp, #0
 801646c:	4603      	mov	r3, r0
 801646e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016470:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8016472:	4618      	mov	r0, r3
 8016474:	370c      	adds	r7, #12
 8016476:	46bd      	mov	sp, r7
 8016478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801647c:	4770      	bx	lr

0801647e <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 801647e:	b480      	push	{r7}
 8016480:	b083      	sub	sp, #12
 8016482:	af00      	add	r7, sp, #0
 8016484:	4603      	mov	r3, r0
 8016486:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8016488:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801648a:	4618      	mov	r0, r3
 801648c:	370c      	adds	r7, #12
 801648e:	46bd      	mov	sp, r7
 8016490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016494:	4770      	bx	lr

08016496 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8016496:	b480      	push	{r7}
 8016498:	b085      	sub	sp, #20
 801649a:	af00      	add	r7, sp, #0
 801649c:	60b9      	str	r1, [r7, #8]
 801649e:	607a      	str	r2, [r7, #4]
 80164a0:	461a      	mov	r2, r3
 80164a2:	4603      	mov	r3, r0
 80164a4:	73fb      	strb	r3, [r7, #15]
 80164a6:	4613      	mov	r3, r2
 80164a8:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 80164aa:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80164ac:	4618      	mov	r0, r3
 80164ae:	3714      	adds	r7, #20
 80164b0:	46bd      	mov	sp, r7
 80164b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164b6:	4770      	bx	lr

080164b8 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80164b8:	b480      	push	{r7}
 80164ba:	b085      	sub	sp, #20
 80164bc:	af00      	add	r7, sp, #0
 80164be:	60b9      	str	r1, [r7, #8]
 80164c0:	607a      	str	r2, [r7, #4]
 80164c2:	461a      	mov	r2, r3
 80164c4:	4603      	mov	r3, r0
 80164c6:	73fb      	strb	r3, [r7, #15]
 80164c8:	4613      	mov	r3, r2
 80164ca:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 80164cc:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 80164ce:	4618      	mov	r0, r3
 80164d0:	3714      	adds	r7, #20
 80164d2:	46bd      	mov	sp, r7
 80164d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164d8:	4770      	bx	lr

080164da <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 80164da:	b480      	push	{r7}
 80164dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80164de:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80164e0:	4618      	mov	r0, r3
 80164e2:	46bd      	mov	sp, r7
 80164e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164e8:	4770      	bx	lr
	...

080164ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80164ec:	b580      	push	{r7, lr}
 80164ee:	b08a      	sub	sp, #40	; 0x28
 80164f0:	af00      	add	r7, sp, #0
 80164f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80164f4:	f107 0314 	add.w	r3, r7, #20
 80164f8:	2200      	movs	r2, #0
 80164fa:	601a      	str	r2, [r3, #0]
 80164fc:	605a      	str	r2, [r3, #4]
 80164fe:	609a      	str	r2, [r3, #8]
 8016500:	60da      	str	r2, [r3, #12]
 8016502:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801650c:	d147      	bne.n	801659e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801650e:	2300      	movs	r3, #0
 8016510:	613b      	str	r3, [r7, #16]
 8016512:	4b25      	ldr	r3, [pc, #148]	; (80165a8 <HAL_PCD_MspInit+0xbc>)
 8016514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016516:	4a24      	ldr	r2, [pc, #144]	; (80165a8 <HAL_PCD_MspInit+0xbc>)
 8016518:	f043 0301 	orr.w	r3, r3, #1
 801651c:	6313      	str	r3, [r2, #48]	; 0x30
 801651e:	4b22      	ldr	r3, [pc, #136]	; (80165a8 <HAL_PCD_MspInit+0xbc>)
 8016520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016522:	f003 0301 	and.w	r3, r3, #1
 8016526:	613b      	str	r3, [r7, #16]
 8016528:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801652a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801652e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8016530:	2300      	movs	r3, #0
 8016532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016534:	2300      	movs	r3, #0
 8016536:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016538:	f107 0314 	add.w	r3, r7, #20
 801653c:	4619      	mov	r1, r3
 801653e:	481b      	ldr	r0, [pc, #108]	; (80165ac <HAL_PCD_MspInit+0xc0>)
 8016540:	f7f1 ffae 	bl	80084a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8016544:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8016548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801654a:	2302      	movs	r3, #2
 801654c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801654e:	2300      	movs	r3, #0
 8016550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016552:	2303      	movs	r3, #3
 8016554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8016556:	230a      	movs	r3, #10
 8016558:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801655a:	f107 0314 	add.w	r3, r7, #20
 801655e:	4619      	mov	r1, r3
 8016560:	4812      	ldr	r0, [pc, #72]	; (80165ac <HAL_PCD_MspInit+0xc0>)
 8016562:	f7f1 ff9d 	bl	80084a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8016566:	4b10      	ldr	r3, [pc, #64]	; (80165a8 <HAL_PCD_MspInit+0xbc>)
 8016568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801656a:	4a0f      	ldr	r2, [pc, #60]	; (80165a8 <HAL_PCD_MspInit+0xbc>)
 801656c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016570:	6353      	str	r3, [r2, #52]	; 0x34
 8016572:	2300      	movs	r3, #0
 8016574:	60fb      	str	r3, [r7, #12]
 8016576:	4b0c      	ldr	r3, [pc, #48]	; (80165a8 <HAL_PCD_MspInit+0xbc>)
 8016578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801657a:	4a0b      	ldr	r2, [pc, #44]	; (80165a8 <HAL_PCD_MspInit+0xbc>)
 801657c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016580:	6453      	str	r3, [r2, #68]	; 0x44
 8016582:	4b09      	ldr	r3, [pc, #36]	; (80165a8 <HAL_PCD_MspInit+0xbc>)
 8016584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016586:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801658a:	60fb      	str	r3, [r7, #12]
 801658c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801658e:	2200      	movs	r2, #0
 8016590:	2100      	movs	r1, #0
 8016592:	2043      	movs	r0, #67	; 0x43
 8016594:	f7f1 fbaf 	bl	8007cf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8016598:	2043      	movs	r0, #67	; 0x43
 801659a:	f7f1 fbc8 	bl	8007d2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801659e:	bf00      	nop
 80165a0:	3728      	adds	r7, #40	; 0x28
 80165a2:	46bd      	mov	sp, r7
 80165a4:	bd80      	pop	{r7, pc}
 80165a6:	bf00      	nop
 80165a8:	40023800 	.word	0x40023800
 80165ac:	40020000 	.word	0x40020000

080165b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80165b0:	b580      	push	{r7, lr}
 80165b2:	b082      	sub	sp, #8
 80165b4:	af00      	add	r7, sp, #0
 80165b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80165c4:	4619      	mov	r1, r3
 80165c6:	4610      	mov	r0, r2
 80165c8:	f7fb fde5 	bl	8012196 <USBD_LL_SetupStage>
}
 80165cc:	bf00      	nop
 80165ce:	3708      	adds	r7, #8
 80165d0:	46bd      	mov	sp, r7
 80165d2:	bd80      	pop	{r7, pc}

080165d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80165d4:	b580      	push	{r7, lr}
 80165d6:	b082      	sub	sp, #8
 80165d8:	af00      	add	r7, sp, #0
 80165da:	6078      	str	r0, [r7, #4]
 80165dc:	460b      	mov	r3, r1
 80165de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80165e0:	687b      	ldr	r3, [r7, #4]
 80165e2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80165e6:	78fa      	ldrb	r2, [r7, #3]
 80165e8:	6879      	ldr	r1, [r7, #4]
 80165ea:	4613      	mov	r3, r2
 80165ec:	00db      	lsls	r3, r3, #3
 80165ee:	1a9b      	subs	r3, r3, r2
 80165f0:	009b      	lsls	r3, r3, #2
 80165f2:	440b      	add	r3, r1
 80165f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80165f8:	681a      	ldr	r2, [r3, #0]
 80165fa:	78fb      	ldrb	r3, [r7, #3]
 80165fc:	4619      	mov	r1, r3
 80165fe:	f7fb fe1f 	bl	8012240 <USBD_LL_DataOutStage>
}
 8016602:	bf00      	nop
 8016604:	3708      	adds	r7, #8
 8016606:	46bd      	mov	sp, r7
 8016608:	bd80      	pop	{r7, pc}

0801660a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801660a:	b580      	push	{r7, lr}
 801660c:	b082      	sub	sp, #8
 801660e:	af00      	add	r7, sp, #0
 8016610:	6078      	str	r0, [r7, #4]
 8016612:	460b      	mov	r3, r1
 8016614:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801661c:	78fa      	ldrb	r2, [r7, #3]
 801661e:	6879      	ldr	r1, [r7, #4]
 8016620:	4613      	mov	r3, r2
 8016622:	00db      	lsls	r3, r3, #3
 8016624:	1a9b      	subs	r3, r3, r2
 8016626:	009b      	lsls	r3, r3, #2
 8016628:	440b      	add	r3, r1
 801662a:	3348      	adds	r3, #72	; 0x48
 801662c:	681a      	ldr	r2, [r3, #0]
 801662e:	78fb      	ldrb	r3, [r7, #3]
 8016630:	4619      	mov	r1, r3
 8016632:	f7fb fe68 	bl	8012306 <USBD_LL_DataInStage>
}
 8016636:	bf00      	nop
 8016638:	3708      	adds	r7, #8
 801663a:	46bd      	mov	sp, r7
 801663c:	bd80      	pop	{r7, pc}

0801663e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801663e:	b580      	push	{r7, lr}
 8016640:	b082      	sub	sp, #8
 8016642:	af00      	add	r7, sp, #0
 8016644:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801664c:	4618      	mov	r0, r3
 801664e:	f7fb ff7c 	bl	801254a <USBD_LL_SOF>
}
 8016652:	bf00      	nop
 8016654:	3708      	adds	r7, #8
 8016656:	46bd      	mov	sp, r7
 8016658:	bd80      	pop	{r7, pc}

0801665a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801665a:	b580      	push	{r7, lr}
 801665c:	b084      	sub	sp, #16
 801665e:	af00      	add	r7, sp, #0
 8016660:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016662:	2301      	movs	r3, #1
 8016664:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	68db      	ldr	r3, [r3, #12]
 801666a:	2b00      	cmp	r3, #0
 801666c:	d102      	bne.n	8016674 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801666e:	2300      	movs	r3, #0
 8016670:	73fb      	strb	r3, [r7, #15]
 8016672:	e008      	b.n	8016686 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	68db      	ldr	r3, [r3, #12]
 8016678:	2b02      	cmp	r3, #2
 801667a:	d102      	bne.n	8016682 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801667c:	2301      	movs	r3, #1
 801667e:	73fb      	strb	r3, [r7, #15]
 8016680:	e001      	b.n	8016686 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016682:	f7eb fabf 	bl	8001c04 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801668c:	7bfa      	ldrb	r2, [r7, #15]
 801668e:	4611      	mov	r1, r2
 8016690:	4618      	mov	r0, r3
 8016692:	f7fb ff1c 	bl	80124ce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801669c:	4618      	mov	r0, r3
 801669e:	f7fb fec8 	bl	8012432 <USBD_LL_Reset>
}
 80166a2:	bf00      	nop
 80166a4:	3710      	adds	r7, #16
 80166a6:	46bd      	mov	sp, r7
 80166a8:	bd80      	pop	{r7, pc}
	...

080166ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80166ac:	b580      	push	{r7, lr}
 80166ae:	b082      	sub	sp, #8
 80166b0:	af00      	add	r7, sp, #0
 80166b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80166ba:	4618      	mov	r0, r3
 80166bc:	f7fb ff17 	bl	80124ee <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	687a      	ldr	r2, [r7, #4]
 80166cc:	6812      	ldr	r2, [r2, #0]
 80166ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80166d2:	f043 0301 	orr.w	r3, r3, #1
 80166d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	6a1b      	ldr	r3, [r3, #32]
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d005      	beq.n	80166ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80166e0:	4b04      	ldr	r3, [pc, #16]	; (80166f4 <HAL_PCD_SuspendCallback+0x48>)
 80166e2:	691b      	ldr	r3, [r3, #16]
 80166e4:	4a03      	ldr	r2, [pc, #12]	; (80166f4 <HAL_PCD_SuspendCallback+0x48>)
 80166e6:	f043 0306 	orr.w	r3, r3, #6
 80166ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80166ec:	bf00      	nop
 80166ee:	3708      	adds	r7, #8
 80166f0:	46bd      	mov	sp, r7
 80166f2:	bd80      	pop	{r7, pc}
 80166f4:	e000ed00 	.word	0xe000ed00

080166f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80166f8:	b580      	push	{r7, lr}
 80166fa:	b082      	sub	sp, #8
 80166fc:	af00      	add	r7, sp, #0
 80166fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016706:	4618      	mov	r0, r3
 8016708:	f7fb ff07 	bl	801251a <USBD_LL_Resume>
}
 801670c:	bf00      	nop
 801670e:	3708      	adds	r7, #8
 8016710:	46bd      	mov	sp, r7
 8016712:	bd80      	pop	{r7, pc}

08016714 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016714:	b580      	push	{r7, lr}
 8016716:	b082      	sub	sp, #8
 8016718:	af00      	add	r7, sp, #0
 801671a:	6078      	str	r0, [r7, #4]
 801671c:	460b      	mov	r3, r1
 801671e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016726:	78fa      	ldrb	r2, [r7, #3]
 8016728:	4611      	mov	r1, r2
 801672a:	4618      	mov	r0, r3
 801672c:	f7fb ff55 	bl	80125da <USBD_LL_IsoOUTIncomplete>
}
 8016730:	bf00      	nop
 8016732:	3708      	adds	r7, #8
 8016734:	46bd      	mov	sp, r7
 8016736:	bd80      	pop	{r7, pc}

08016738 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016738:	b580      	push	{r7, lr}
 801673a:	b082      	sub	sp, #8
 801673c:	af00      	add	r7, sp, #0
 801673e:	6078      	str	r0, [r7, #4]
 8016740:	460b      	mov	r3, r1
 8016742:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801674a:	78fa      	ldrb	r2, [r7, #3]
 801674c:	4611      	mov	r1, r2
 801674e:	4618      	mov	r0, r3
 8016750:	f7fb ff1d 	bl	801258e <USBD_LL_IsoINIncomplete>
}
 8016754:	bf00      	nop
 8016756:	3708      	adds	r7, #8
 8016758:	46bd      	mov	sp, r7
 801675a:	bd80      	pop	{r7, pc}

0801675c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801675c:	b580      	push	{r7, lr}
 801675e:	b082      	sub	sp, #8
 8016760:	af00      	add	r7, sp, #0
 8016762:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801676a:	4618      	mov	r0, r3
 801676c:	f7fb ff5b 	bl	8012626 <USBD_LL_DevConnected>
}
 8016770:	bf00      	nop
 8016772:	3708      	adds	r7, #8
 8016774:	46bd      	mov	sp, r7
 8016776:	bd80      	pop	{r7, pc}

08016778 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016778:	b580      	push	{r7, lr}
 801677a:	b082      	sub	sp, #8
 801677c:	af00      	add	r7, sp, #0
 801677e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016786:	4618      	mov	r0, r3
 8016788:	f7fb ff58 	bl	801263c <USBD_LL_DevDisconnected>
}
 801678c:	bf00      	nop
 801678e:	3708      	adds	r7, #8
 8016790:	46bd      	mov	sp, r7
 8016792:	bd80      	pop	{r7, pc}

08016794 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016794:	b580      	push	{r7, lr}
 8016796:	b082      	sub	sp, #8
 8016798:	af00      	add	r7, sp, #0
 801679a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	781b      	ldrb	r3, [r3, #0]
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d13c      	bne.n	801681e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80167a4:	4a20      	ldr	r2, [pc, #128]	; (8016828 <USBD_LL_Init+0x94>)
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	4a1e      	ldr	r2, [pc, #120]	; (8016828 <USBD_LL_Init+0x94>)
 80167b0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80167b4:	4b1c      	ldr	r3, [pc, #112]	; (8016828 <USBD_LL_Init+0x94>)
 80167b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80167ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80167bc:	4b1a      	ldr	r3, [pc, #104]	; (8016828 <USBD_LL_Init+0x94>)
 80167be:	2206      	movs	r2, #6
 80167c0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80167c2:	4b19      	ldr	r3, [pc, #100]	; (8016828 <USBD_LL_Init+0x94>)
 80167c4:	2202      	movs	r2, #2
 80167c6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80167c8:	4b17      	ldr	r3, [pc, #92]	; (8016828 <USBD_LL_Init+0x94>)
 80167ca:	2200      	movs	r2, #0
 80167cc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80167ce:	4b16      	ldr	r3, [pc, #88]	; (8016828 <USBD_LL_Init+0x94>)
 80167d0:	2202      	movs	r2, #2
 80167d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80167d4:	4b14      	ldr	r3, [pc, #80]	; (8016828 <USBD_LL_Init+0x94>)
 80167d6:	2200      	movs	r2, #0
 80167d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80167da:	4b13      	ldr	r3, [pc, #76]	; (8016828 <USBD_LL_Init+0x94>)
 80167dc:	2200      	movs	r2, #0
 80167de:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80167e0:	4b11      	ldr	r3, [pc, #68]	; (8016828 <USBD_LL_Init+0x94>)
 80167e2:	2200      	movs	r2, #0
 80167e4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80167e6:	4b10      	ldr	r3, [pc, #64]	; (8016828 <USBD_LL_Init+0x94>)
 80167e8:	2201      	movs	r2, #1
 80167ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80167ec:	4b0e      	ldr	r3, [pc, #56]	; (8016828 <USBD_LL_Init+0x94>)
 80167ee:	2200      	movs	r2, #0
 80167f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80167f2:	480d      	ldr	r0, [pc, #52]	; (8016828 <USBD_LL_Init+0x94>)
 80167f4:	f7f3 f833 	bl	800985e <HAL_PCD_Init>
 80167f8:	4603      	mov	r3, r0
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d001      	beq.n	8016802 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80167fe:	f7eb fa01 	bl	8001c04 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016802:	2180      	movs	r1, #128	; 0x80
 8016804:	4808      	ldr	r0, [pc, #32]	; (8016828 <USBD_LL_Init+0x94>)
 8016806:	f7f4 f9f2 	bl	800abee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801680a:	2240      	movs	r2, #64	; 0x40
 801680c:	2100      	movs	r1, #0
 801680e:	4806      	ldr	r0, [pc, #24]	; (8016828 <USBD_LL_Init+0x94>)
 8016810:	f7f4 f9a6 	bl	800ab60 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016814:	2280      	movs	r2, #128	; 0x80
 8016816:	2101      	movs	r1, #1
 8016818:	4803      	ldr	r0, [pc, #12]	; (8016828 <USBD_LL_Init+0x94>)
 801681a:	f7f4 f9a1 	bl	800ab60 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801681e:	2300      	movs	r3, #0
}
 8016820:	4618      	mov	r0, r3
 8016822:	3708      	adds	r7, #8
 8016824:	46bd      	mov	sp, r7
 8016826:	bd80      	pop	{r7, pc}
 8016828:	200053d4 	.word	0x200053d4

0801682c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801682c:	b580      	push	{r7, lr}
 801682e:	b084      	sub	sp, #16
 8016830:	af00      	add	r7, sp, #0
 8016832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016834:	2300      	movs	r3, #0
 8016836:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016838:	2300      	movs	r3, #0
 801683a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016842:	4618      	mov	r0, r3
 8016844:	f7f3 f92f 	bl	8009aa6 <HAL_PCD_Start>
 8016848:	4603      	mov	r3, r0
 801684a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801684c:	7bfb      	ldrb	r3, [r7, #15]
 801684e:	4618      	mov	r0, r3
 8016850:	f000 f9b0 	bl	8016bb4 <USBD_Get_USB_Status>
 8016854:	4603      	mov	r3, r0
 8016856:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016858:	7bbb      	ldrb	r3, [r7, #14]
}
 801685a:	4618      	mov	r0, r3
 801685c:	3710      	adds	r7, #16
 801685e:	46bd      	mov	sp, r7
 8016860:	bd80      	pop	{r7, pc}

08016862 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016862:	b580      	push	{r7, lr}
 8016864:	b084      	sub	sp, #16
 8016866:	af00      	add	r7, sp, #0
 8016868:	6078      	str	r0, [r7, #4]
 801686a:	4608      	mov	r0, r1
 801686c:	4611      	mov	r1, r2
 801686e:	461a      	mov	r2, r3
 8016870:	4603      	mov	r3, r0
 8016872:	70fb      	strb	r3, [r7, #3]
 8016874:	460b      	mov	r3, r1
 8016876:	70bb      	strb	r3, [r7, #2]
 8016878:	4613      	mov	r3, r2
 801687a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801687c:	2300      	movs	r3, #0
 801687e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016880:	2300      	movs	r3, #0
 8016882:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801688a:	78bb      	ldrb	r3, [r7, #2]
 801688c:	883a      	ldrh	r2, [r7, #0]
 801688e:	78f9      	ldrb	r1, [r7, #3]
 8016890:	f7f3 fd40 	bl	800a314 <HAL_PCD_EP_Open>
 8016894:	4603      	mov	r3, r0
 8016896:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016898:	7bfb      	ldrb	r3, [r7, #15]
 801689a:	4618      	mov	r0, r3
 801689c:	f000 f98a 	bl	8016bb4 <USBD_Get_USB_Status>
 80168a0:	4603      	mov	r3, r0
 80168a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80168a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80168a6:	4618      	mov	r0, r3
 80168a8:	3710      	adds	r7, #16
 80168aa:	46bd      	mov	sp, r7
 80168ac:	bd80      	pop	{r7, pc}

080168ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80168ae:	b580      	push	{r7, lr}
 80168b0:	b084      	sub	sp, #16
 80168b2:	af00      	add	r7, sp, #0
 80168b4:	6078      	str	r0, [r7, #4]
 80168b6:	460b      	mov	r3, r1
 80168b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80168ba:	2300      	movs	r3, #0
 80168bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80168be:	2300      	movs	r3, #0
 80168c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80168c8:	78fa      	ldrb	r2, [r7, #3]
 80168ca:	4611      	mov	r1, r2
 80168cc:	4618      	mov	r0, r3
 80168ce:	f7f3 fd89 	bl	800a3e4 <HAL_PCD_EP_Close>
 80168d2:	4603      	mov	r3, r0
 80168d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80168d6:	7bfb      	ldrb	r3, [r7, #15]
 80168d8:	4618      	mov	r0, r3
 80168da:	f000 f96b 	bl	8016bb4 <USBD_Get_USB_Status>
 80168de:	4603      	mov	r3, r0
 80168e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80168e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80168e4:	4618      	mov	r0, r3
 80168e6:	3710      	adds	r7, #16
 80168e8:	46bd      	mov	sp, r7
 80168ea:	bd80      	pop	{r7, pc}

080168ec <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80168ec:	b580      	push	{r7, lr}
 80168ee:	b084      	sub	sp, #16
 80168f0:	af00      	add	r7, sp, #0
 80168f2:	6078      	str	r0, [r7, #4]
 80168f4:	460b      	mov	r3, r1
 80168f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80168f8:	2300      	movs	r3, #0
 80168fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80168fc:	2300      	movs	r3, #0
 80168fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016906:	78fa      	ldrb	r2, [r7, #3]
 8016908:	4611      	mov	r1, r2
 801690a:	4618      	mov	r0, r3
 801690c:	f7f3 ff1b 	bl	800a746 <HAL_PCD_EP_Flush>
 8016910:	4603      	mov	r3, r0
 8016912:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016914:	7bfb      	ldrb	r3, [r7, #15]
 8016916:	4618      	mov	r0, r3
 8016918:	f000 f94c 	bl	8016bb4 <USBD_Get_USB_Status>
 801691c:	4603      	mov	r3, r0
 801691e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016920:	7bbb      	ldrb	r3, [r7, #14]
}
 8016922:	4618      	mov	r0, r3
 8016924:	3710      	adds	r7, #16
 8016926:	46bd      	mov	sp, r7
 8016928:	bd80      	pop	{r7, pc}

0801692a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801692a:	b580      	push	{r7, lr}
 801692c:	b084      	sub	sp, #16
 801692e:	af00      	add	r7, sp, #0
 8016930:	6078      	str	r0, [r7, #4]
 8016932:	460b      	mov	r3, r1
 8016934:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016936:	2300      	movs	r3, #0
 8016938:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801693a:	2300      	movs	r3, #0
 801693c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016944:	78fa      	ldrb	r2, [r7, #3]
 8016946:	4611      	mov	r1, r2
 8016948:	4618      	mov	r0, r3
 801694a:	f7f3 fe42 	bl	800a5d2 <HAL_PCD_EP_SetStall>
 801694e:	4603      	mov	r3, r0
 8016950:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016952:	7bfb      	ldrb	r3, [r7, #15]
 8016954:	4618      	mov	r0, r3
 8016956:	f000 f92d 	bl	8016bb4 <USBD_Get_USB_Status>
 801695a:	4603      	mov	r3, r0
 801695c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801695e:	7bbb      	ldrb	r3, [r7, #14]
}
 8016960:	4618      	mov	r0, r3
 8016962:	3710      	adds	r7, #16
 8016964:	46bd      	mov	sp, r7
 8016966:	bd80      	pop	{r7, pc}

08016968 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016968:	b580      	push	{r7, lr}
 801696a:	b084      	sub	sp, #16
 801696c:	af00      	add	r7, sp, #0
 801696e:	6078      	str	r0, [r7, #4]
 8016970:	460b      	mov	r3, r1
 8016972:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016974:	2300      	movs	r3, #0
 8016976:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016978:	2300      	movs	r3, #0
 801697a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016982:	78fa      	ldrb	r2, [r7, #3]
 8016984:	4611      	mov	r1, r2
 8016986:	4618      	mov	r0, r3
 8016988:	f7f3 fe87 	bl	800a69a <HAL_PCD_EP_ClrStall>
 801698c:	4603      	mov	r3, r0
 801698e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016990:	7bfb      	ldrb	r3, [r7, #15]
 8016992:	4618      	mov	r0, r3
 8016994:	f000 f90e 	bl	8016bb4 <USBD_Get_USB_Status>
 8016998:	4603      	mov	r3, r0
 801699a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801699c:	7bbb      	ldrb	r3, [r7, #14]
}
 801699e:	4618      	mov	r0, r3
 80169a0:	3710      	adds	r7, #16
 80169a2:	46bd      	mov	sp, r7
 80169a4:	bd80      	pop	{r7, pc}

080169a6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80169a6:	b480      	push	{r7}
 80169a8:	b085      	sub	sp, #20
 80169aa:	af00      	add	r7, sp, #0
 80169ac:	6078      	str	r0, [r7, #4]
 80169ae:	460b      	mov	r3, r1
 80169b0:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80169b8:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80169ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80169be:	2b00      	cmp	r3, #0
 80169c0:	da0b      	bge.n	80169da <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80169c2:	78fb      	ldrb	r3, [r7, #3]
 80169c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80169c8:	68f9      	ldr	r1, [r7, #12]
 80169ca:	4613      	mov	r3, r2
 80169cc:	00db      	lsls	r3, r3, #3
 80169ce:	1a9b      	subs	r3, r3, r2
 80169d0:	009b      	lsls	r3, r3, #2
 80169d2:	440b      	add	r3, r1
 80169d4:	333e      	adds	r3, #62	; 0x3e
 80169d6:	781b      	ldrb	r3, [r3, #0]
 80169d8:	e00b      	b.n	80169f2 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80169da:	78fb      	ldrb	r3, [r7, #3]
 80169dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80169e0:	68f9      	ldr	r1, [r7, #12]
 80169e2:	4613      	mov	r3, r2
 80169e4:	00db      	lsls	r3, r3, #3
 80169e6:	1a9b      	subs	r3, r3, r2
 80169e8:	009b      	lsls	r3, r3, #2
 80169ea:	440b      	add	r3, r1
 80169ec:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80169f0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80169f2:	4618      	mov	r0, r3
 80169f4:	3714      	adds	r7, #20
 80169f6:	46bd      	mov	sp, r7
 80169f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169fc:	4770      	bx	lr

080169fe <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80169fe:	b580      	push	{r7, lr}
 8016a00:	b084      	sub	sp, #16
 8016a02:	af00      	add	r7, sp, #0
 8016a04:	6078      	str	r0, [r7, #4]
 8016a06:	460b      	mov	r3, r1
 8016a08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a0a:	2300      	movs	r3, #0
 8016a0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a0e:	2300      	movs	r3, #0
 8016a10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016a18:	78fa      	ldrb	r2, [r7, #3]
 8016a1a:	4611      	mov	r1, r2
 8016a1c:	4618      	mov	r0, r3
 8016a1e:	f7f3 fc54 	bl	800a2ca <HAL_PCD_SetAddress>
 8016a22:	4603      	mov	r3, r0
 8016a24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a26:	7bfb      	ldrb	r3, [r7, #15]
 8016a28:	4618      	mov	r0, r3
 8016a2a:	f000 f8c3 	bl	8016bb4 <USBD_Get_USB_Status>
 8016a2e:	4603      	mov	r3, r0
 8016a30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016a32:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a34:	4618      	mov	r0, r3
 8016a36:	3710      	adds	r7, #16
 8016a38:	46bd      	mov	sp, r7
 8016a3a:	bd80      	pop	{r7, pc}

08016a3c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016a3c:	b580      	push	{r7, lr}
 8016a3e:	b086      	sub	sp, #24
 8016a40:	af00      	add	r7, sp, #0
 8016a42:	60f8      	str	r0, [r7, #12]
 8016a44:	607a      	str	r2, [r7, #4]
 8016a46:	603b      	str	r3, [r7, #0]
 8016a48:	460b      	mov	r3, r1
 8016a4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a4c:	2300      	movs	r3, #0
 8016a4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a50:	2300      	movs	r3, #0
 8016a52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016a54:	68fb      	ldr	r3, [r7, #12]
 8016a56:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016a5a:	7af9      	ldrb	r1, [r7, #11]
 8016a5c:	683b      	ldr	r3, [r7, #0]
 8016a5e:	687a      	ldr	r2, [r7, #4]
 8016a60:	f7f3 fd6d 	bl	800a53e <HAL_PCD_EP_Transmit>
 8016a64:	4603      	mov	r3, r0
 8016a66:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a68:	7dfb      	ldrb	r3, [r7, #23]
 8016a6a:	4618      	mov	r0, r3
 8016a6c:	f000 f8a2 	bl	8016bb4 <USBD_Get_USB_Status>
 8016a70:	4603      	mov	r3, r0
 8016a72:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016a74:	7dbb      	ldrb	r3, [r7, #22]
}
 8016a76:	4618      	mov	r0, r3
 8016a78:	3718      	adds	r7, #24
 8016a7a:	46bd      	mov	sp, r7
 8016a7c:	bd80      	pop	{r7, pc}

08016a7e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016a7e:	b580      	push	{r7, lr}
 8016a80:	b086      	sub	sp, #24
 8016a82:	af00      	add	r7, sp, #0
 8016a84:	60f8      	str	r0, [r7, #12]
 8016a86:	607a      	str	r2, [r7, #4]
 8016a88:	603b      	str	r3, [r7, #0]
 8016a8a:	460b      	mov	r3, r1
 8016a8c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a8e:	2300      	movs	r3, #0
 8016a90:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a92:	2300      	movs	r3, #0
 8016a94:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016a96:	68fb      	ldr	r3, [r7, #12]
 8016a98:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016a9c:	7af9      	ldrb	r1, [r7, #11]
 8016a9e:	683b      	ldr	r3, [r7, #0]
 8016aa0:	687a      	ldr	r2, [r7, #4]
 8016aa2:	f7f3 fce9 	bl	800a478 <HAL_PCD_EP_Receive>
 8016aa6:	4603      	mov	r3, r0
 8016aa8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016aaa:	7dfb      	ldrb	r3, [r7, #23]
 8016aac:	4618      	mov	r0, r3
 8016aae:	f000 f881 	bl	8016bb4 <USBD_Get_USB_Status>
 8016ab2:	4603      	mov	r3, r0
 8016ab4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016ab6:	7dbb      	ldrb	r3, [r7, #22]
}
 8016ab8:	4618      	mov	r0, r3
 8016aba:	3718      	adds	r7, #24
 8016abc:	46bd      	mov	sp, r7
 8016abe:	bd80      	pop	{r7, pc}

08016ac0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016ac0:	b580      	push	{r7, lr}
 8016ac2:	b082      	sub	sp, #8
 8016ac4:	af00      	add	r7, sp, #0
 8016ac6:	6078      	str	r0, [r7, #4]
 8016ac8:	460b      	mov	r3, r1
 8016aca:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016ad2:	78fa      	ldrb	r2, [r7, #3]
 8016ad4:	4611      	mov	r1, r2
 8016ad6:	4618      	mov	r0, r3
 8016ad8:	f7f3 fd19 	bl	800a50e <HAL_PCD_EP_GetRxCount>
 8016adc:	4603      	mov	r3, r0
}
 8016ade:	4618      	mov	r0, r3
 8016ae0:	3708      	adds	r7, #8
 8016ae2:	46bd      	mov	sp, r7
 8016ae4:	bd80      	pop	{r7, pc}
	...

08016ae8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8016ae8:	b580      	push	{r7, lr}
 8016aea:	b082      	sub	sp, #8
 8016aec:	af00      	add	r7, sp, #0
 8016aee:	6078      	str	r0, [r7, #4]
 8016af0:	460b      	mov	r3, r1
 8016af2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8016af4:	78fb      	ldrb	r3, [r7, #3]
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d002      	beq.n	8016b00 <HAL_PCDEx_LPM_Callback+0x18>
 8016afa:	2b01      	cmp	r3, #1
 8016afc:	d01f      	beq.n	8016b3e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8016afe:	e03b      	b.n	8016b78 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	6a1b      	ldr	r3, [r3, #32]
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	d007      	beq.n	8016b18 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8016b08:	f7ea fcbc 	bl	8001484 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016b0c:	4b1c      	ldr	r3, [pc, #112]	; (8016b80 <HAL_PCDEx_LPM_Callback+0x98>)
 8016b0e:	691b      	ldr	r3, [r3, #16]
 8016b10:	4a1b      	ldr	r2, [pc, #108]	; (8016b80 <HAL_PCDEx_LPM_Callback+0x98>)
 8016b12:	f023 0306 	bic.w	r3, r3, #6
 8016b16:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016b20:	681b      	ldr	r3, [r3, #0]
 8016b22:	687a      	ldr	r2, [r7, #4]
 8016b24:	6812      	ldr	r2, [r2, #0]
 8016b26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016b2a:	f023 0301 	bic.w	r3, r3, #1
 8016b2e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016b36:	4618      	mov	r0, r3
 8016b38:	f7fb fcef 	bl	801251a <USBD_LL_Resume>
    break;
 8016b3c:	e01c      	b.n	8016b78 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	681b      	ldr	r3, [r3, #0]
 8016b42:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016b46:	681b      	ldr	r3, [r3, #0]
 8016b48:	687a      	ldr	r2, [r7, #4]
 8016b4a:	6812      	ldr	r2, [r2, #0]
 8016b4c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016b50:	f043 0301 	orr.w	r3, r3, #1
 8016b54:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016b5c:	4618      	mov	r0, r3
 8016b5e:	f7fb fcc6 	bl	80124ee <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	6a1b      	ldr	r3, [r3, #32]
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d005      	beq.n	8016b76 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016b6a:	4b05      	ldr	r3, [pc, #20]	; (8016b80 <HAL_PCDEx_LPM_Callback+0x98>)
 8016b6c:	691b      	ldr	r3, [r3, #16]
 8016b6e:	4a04      	ldr	r2, [pc, #16]	; (8016b80 <HAL_PCDEx_LPM_Callback+0x98>)
 8016b70:	f043 0306 	orr.w	r3, r3, #6
 8016b74:	6113      	str	r3, [r2, #16]
    break;
 8016b76:	bf00      	nop
}
 8016b78:	bf00      	nop
 8016b7a:	3708      	adds	r7, #8
 8016b7c:	46bd      	mov	sp, r7
 8016b7e:	bd80      	pop	{r7, pc}
 8016b80:	e000ed00 	.word	0xe000ed00

08016b84 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016b84:	b480      	push	{r7}
 8016b86:	b083      	sub	sp, #12
 8016b88:	af00      	add	r7, sp, #0
 8016b8a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016b8c:	4b03      	ldr	r3, [pc, #12]	; (8016b9c <USBD_static_malloc+0x18>)
}
 8016b8e:	4618      	mov	r0, r3
 8016b90:	370c      	adds	r7, #12
 8016b92:	46bd      	mov	sp, r7
 8016b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b98:	4770      	bx	lr
 8016b9a:	bf00      	nop
 8016b9c:	20000418 	.word	0x20000418

08016ba0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016ba0:	b480      	push	{r7}
 8016ba2:	b083      	sub	sp, #12
 8016ba4:	af00      	add	r7, sp, #0
 8016ba6:	6078      	str	r0, [r7, #4]

}
 8016ba8:	bf00      	nop
 8016baa:	370c      	adds	r7, #12
 8016bac:	46bd      	mov	sp, r7
 8016bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bb2:	4770      	bx	lr

08016bb4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016bb4:	b480      	push	{r7}
 8016bb6:	b085      	sub	sp, #20
 8016bb8:	af00      	add	r7, sp, #0
 8016bba:	4603      	mov	r3, r0
 8016bbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016bbe:	2300      	movs	r3, #0
 8016bc0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016bc2:	79fb      	ldrb	r3, [r7, #7]
 8016bc4:	2b03      	cmp	r3, #3
 8016bc6:	d817      	bhi.n	8016bf8 <USBD_Get_USB_Status+0x44>
 8016bc8:	a201      	add	r2, pc, #4	; (adr r2, 8016bd0 <USBD_Get_USB_Status+0x1c>)
 8016bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016bce:	bf00      	nop
 8016bd0:	08016be1 	.word	0x08016be1
 8016bd4:	08016be7 	.word	0x08016be7
 8016bd8:	08016bed 	.word	0x08016bed
 8016bdc:	08016bf3 	.word	0x08016bf3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016be0:	2300      	movs	r3, #0
 8016be2:	73fb      	strb	r3, [r7, #15]
    break;
 8016be4:	e00b      	b.n	8016bfe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016be6:	2303      	movs	r3, #3
 8016be8:	73fb      	strb	r3, [r7, #15]
    break;
 8016bea:	e008      	b.n	8016bfe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016bec:	2301      	movs	r3, #1
 8016bee:	73fb      	strb	r3, [r7, #15]
    break;
 8016bf0:	e005      	b.n	8016bfe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016bf2:	2303      	movs	r3, #3
 8016bf4:	73fb      	strb	r3, [r7, #15]
    break;
 8016bf6:	e002      	b.n	8016bfe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016bf8:	2303      	movs	r3, #3
 8016bfa:	73fb      	strb	r3, [r7, #15]
    break;
 8016bfc:	bf00      	nop
  }
  return usb_status;
 8016bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c00:	4618      	mov	r0, r3
 8016c02:	3714      	adds	r7, #20
 8016c04:	46bd      	mov	sp, r7
 8016c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c0a:	4770      	bx	lr

08016c0c <__errno>:
 8016c0c:	4b01      	ldr	r3, [pc, #4]	; (8016c14 <__errno+0x8>)
 8016c0e:	6818      	ldr	r0, [r3, #0]
 8016c10:	4770      	bx	lr
 8016c12:	bf00      	nop
 8016c14:	20000174 	.word	0x20000174

08016c18 <__libc_init_array>:
 8016c18:	b570      	push	{r4, r5, r6, lr}
 8016c1a:	4d0d      	ldr	r5, [pc, #52]	; (8016c50 <__libc_init_array+0x38>)
 8016c1c:	4c0d      	ldr	r4, [pc, #52]	; (8016c54 <__libc_init_array+0x3c>)
 8016c1e:	1b64      	subs	r4, r4, r5
 8016c20:	10a4      	asrs	r4, r4, #2
 8016c22:	2600      	movs	r6, #0
 8016c24:	42a6      	cmp	r6, r4
 8016c26:	d109      	bne.n	8016c3c <__libc_init_array+0x24>
 8016c28:	4d0b      	ldr	r5, [pc, #44]	; (8016c58 <__libc_init_array+0x40>)
 8016c2a:	4c0c      	ldr	r4, [pc, #48]	; (8016c5c <__libc_init_array+0x44>)
 8016c2c:	f000 fc4e 	bl	80174cc <_init>
 8016c30:	1b64      	subs	r4, r4, r5
 8016c32:	10a4      	asrs	r4, r4, #2
 8016c34:	2600      	movs	r6, #0
 8016c36:	42a6      	cmp	r6, r4
 8016c38:	d105      	bne.n	8016c46 <__libc_init_array+0x2e>
 8016c3a:	bd70      	pop	{r4, r5, r6, pc}
 8016c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016c40:	4798      	blx	r3
 8016c42:	3601      	adds	r6, #1
 8016c44:	e7ee      	b.n	8016c24 <__libc_init_array+0xc>
 8016c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8016c4a:	4798      	blx	r3
 8016c4c:	3601      	adds	r6, #1
 8016c4e:	e7f2      	b.n	8016c36 <__libc_init_array+0x1e>
 8016c50:	08017a78 	.word	0x08017a78
 8016c54:	08017a78 	.word	0x08017a78
 8016c58:	08017a78 	.word	0x08017a78
 8016c5c:	08017a7c 	.word	0x08017a7c

08016c60 <memcpy>:
 8016c60:	440a      	add	r2, r1
 8016c62:	4291      	cmp	r1, r2
 8016c64:	f100 33ff 	add.w	r3, r0, #4294967295
 8016c68:	d100      	bne.n	8016c6c <memcpy+0xc>
 8016c6a:	4770      	bx	lr
 8016c6c:	b510      	push	{r4, lr}
 8016c6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016c72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016c76:	4291      	cmp	r1, r2
 8016c78:	d1f9      	bne.n	8016c6e <memcpy+0xe>
 8016c7a:	bd10      	pop	{r4, pc}

08016c7c <memset>:
 8016c7c:	4402      	add	r2, r0
 8016c7e:	4603      	mov	r3, r0
 8016c80:	4293      	cmp	r3, r2
 8016c82:	d100      	bne.n	8016c86 <memset+0xa>
 8016c84:	4770      	bx	lr
 8016c86:	f803 1b01 	strb.w	r1, [r3], #1
 8016c8a:	e7f9      	b.n	8016c80 <memset+0x4>

08016c8c <siprintf>:
 8016c8c:	b40e      	push	{r1, r2, r3}
 8016c8e:	b500      	push	{lr}
 8016c90:	b09c      	sub	sp, #112	; 0x70
 8016c92:	ab1d      	add	r3, sp, #116	; 0x74
 8016c94:	9002      	str	r0, [sp, #8]
 8016c96:	9006      	str	r0, [sp, #24]
 8016c98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016c9c:	4809      	ldr	r0, [pc, #36]	; (8016cc4 <siprintf+0x38>)
 8016c9e:	9107      	str	r1, [sp, #28]
 8016ca0:	9104      	str	r1, [sp, #16]
 8016ca2:	4909      	ldr	r1, [pc, #36]	; (8016cc8 <siprintf+0x3c>)
 8016ca4:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ca8:	9105      	str	r1, [sp, #20]
 8016caa:	6800      	ldr	r0, [r0, #0]
 8016cac:	9301      	str	r3, [sp, #4]
 8016cae:	a902      	add	r1, sp, #8
 8016cb0:	f000 f868 	bl	8016d84 <_svfiprintf_r>
 8016cb4:	9b02      	ldr	r3, [sp, #8]
 8016cb6:	2200      	movs	r2, #0
 8016cb8:	701a      	strb	r2, [r3, #0]
 8016cba:	b01c      	add	sp, #112	; 0x70
 8016cbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8016cc0:	b003      	add	sp, #12
 8016cc2:	4770      	bx	lr
 8016cc4:	20000174 	.word	0x20000174
 8016cc8:	ffff0208 	.word	0xffff0208

08016ccc <__ssputs_r>:
 8016ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016cd0:	688e      	ldr	r6, [r1, #8]
 8016cd2:	429e      	cmp	r6, r3
 8016cd4:	4682      	mov	sl, r0
 8016cd6:	460c      	mov	r4, r1
 8016cd8:	4690      	mov	r8, r2
 8016cda:	461f      	mov	r7, r3
 8016cdc:	d838      	bhi.n	8016d50 <__ssputs_r+0x84>
 8016cde:	898a      	ldrh	r2, [r1, #12]
 8016ce0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016ce4:	d032      	beq.n	8016d4c <__ssputs_r+0x80>
 8016ce6:	6825      	ldr	r5, [r4, #0]
 8016ce8:	6909      	ldr	r1, [r1, #16]
 8016cea:	eba5 0901 	sub.w	r9, r5, r1
 8016cee:	6965      	ldr	r5, [r4, #20]
 8016cf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016cf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016cf8:	3301      	adds	r3, #1
 8016cfa:	444b      	add	r3, r9
 8016cfc:	106d      	asrs	r5, r5, #1
 8016cfe:	429d      	cmp	r5, r3
 8016d00:	bf38      	it	cc
 8016d02:	461d      	movcc	r5, r3
 8016d04:	0553      	lsls	r3, r2, #21
 8016d06:	d531      	bpl.n	8016d6c <__ssputs_r+0xa0>
 8016d08:	4629      	mov	r1, r5
 8016d0a:	f000 fb39 	bl	8017380 <_malloc_r>
 8016d0e:	4606      	mov	r6, r0
 8016d10:	b950      	cbnz	r0, 8016d28 <__ssputs_r+0x5c>
 8016d12:	230c      	movs	r3, #12
 8016d14:	f8ca 3000 	str.w	r3, [sl]
 8016d18:	89a3      	ldrh	r3, [r4, #12]
 8016d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016d1e:	81a3      	strh	r3, [r4, #12]
 8016d20:	f04f 30ff 	mov.w	r0, #4294967295
 8016d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d28:	6921      	ldr	r1, [r4, #16]
 8016d2a:	464a      	mov	r2, r9
 8016d2c:	f7ff ff98 	bl	8016c60 <memcpy>
 8016d30:	89a3      	ldrh	r3, [r4, #12]
 8016d32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016d3a:	81a3      	strh	r3, [r4, #12]
 8016d3c:	6126      	str	r6, [r4, #16]
 8016d3e:	6165      	str	r5, [r4, #20]
 8016d40:	444e      	add	r6, r9
 8016d42:	eba5 0509 	sub.w	r5, r5, r9
 8016d46:	6026      	str	r6, [r4, #0]
 8016d48:	60a5      	str	r5, [r4, #8]
 8016d4a:	463e      	mov	r6, r7
 8016d4c:	42be      	cmp	r6, r7
 8016d4e:	d900      	bls.n	8016d52 <__ssputs_r+0x86>
 8016d50:	463e      	mov	r6, r7
 8016d52:	4632      	mov	r2, r6
 8016d54:	6820      	ldr	r0, [r4, #0]
 8016d56:	4641      	mov	r1, r8
 8016d58:	f000 faa8 	bl	80172ac <memmove>
 8016d5c:	68a3      	ldr	r3, [r4, #8]
 8016d5e:	6822      	ldr	r2, [r4, #0]
 8016d60:	1b9b      	subs	r3, r3, r6
 8016d62:	4432      	add	r2, r6
 8016d64:	60a3      	str	r3, [r4, #8]
 8016d66:	6022      	str	r2, [r4, #0]
 8016d68:	2000      	movs	r0, #0
 8016d6a:	e7db      	b.n	8016d24 <__ssputs_r+0x58>
 8016d6c:	462a      	mov	r2, r5
 8016d6e:	f000 fb61 	bl	8017434 <_realloc_r>
 8016d72:	4606      	mov	r6, r0
 8016d74:	2800      	cmp	r0, #0
 8016d76:	d1e1      	bne.n	8016d3c <__ssputs_r+0x70>
 8016d78:	6921      	ldr	r1, [r4, #16]
 8016d7a:	4650      	mov	r0, sl
 8016d7c:	f000 fab0 	bl	80172e0 <_free_r>
 8016d80:	e7c7      	b.n	8016d12 <__ssputs_r+0x46>
	...

08016d84 <_svfiprintf_r>:
 8016d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d88:	4698      	mov	r8, r3
 8016d8a:	898b      	ldrh	r3, [r1, #12]
 8016d8c:	061b      	lsls	r3, r3, #24
 8016d8e:	b09d      	sub	sp, #116	; 0x74
 8016d90:	4607      	mov	r7, r0
 8016d92:	460d      	mov	r5, r1
 8016d94:	4614      	mov	r4, r2
 8016d96:	d50e      	bpl.n	8016db6 <_svfiprintf_r+0x32>
 8016d98:	690b      	ldr	r3, [r1, #16]
 8016d9a:	b963      	cbnz	r3, 8016db6 <_svfiprintf_r+0x32>
 8016d9c:	2140      	movs	r1, #64	; 0x40
 8016d9e:	f000 faef 	bl	8017380 <_malloc_r>
 8016da2:	6028      	str	r0, [r5, #0]
 8016da4:	6128      	str	r0, [r5, #16]
 8016da6:	b920      	cbnz	r0, 8016db2 <_svfiprintf_r+0x2e>
 8016da8:	230c      	movs	r3, #12
 8016daa:	603b      	str	r3, [r7, #0]
 8016dac:	f04f 30ff 	mov.w	r0, #4294967295
 8016db0:	e0d1      	b.n	8016f56 <_svfiprintf_r+0x1d2>
 8016db2:	2340      	movs	r3, #64	; 0x40
 8016db4:	616b      	str	r3, [r5, #20]
 8016db6:	2300      	movs	r3, #0
 8016db8:	9309      	str	r3, [sp, #36]	; 0x24
 8016dba:	2320      	movs	r3, #32
 8016dbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016dc0:	f8cd 800c 	str.w	r8, [sp, #12]
 8016dc4:	2330      	movs	r3, #48	; 0x30
 8016dc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016f70 <_svfiprintf_r+0x1ec>
 8016dca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016dce:	f04f 0901 	mov.w	r9, #1
 8016dd2:	4623      	mov	r3, r4
 8016dd4:	469a      	mov	sl, r3
 8016dd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016dda:	b10a      	cbz	r2, 8016de0 <_svfiprintf_r+0x5c>
 8016ddc:	2a25      	cmp	r2, #37	; 0x25
 8016dde:	d1f9      	bne.n	8016dd4 <_svfiprintf_r+0x50>
 8016de0:	ebba 0b04 	subs.w	fp, sl, r4
 8016de4:	d00b      	beq.n	8016dfe <_svfiprintf_r+0x7a>
 8016de6:	465b      	mov	r3, fp
 8016de8:	4622      	mov	r2, r4
 8016dea:	4629      	mov	r1, r5
 8016dec:	4638      	mov	r0, r7
 8016dee:	f7ff ff6d 	bl	8016ccc <__ssputs_r>
 8016df2:	3001      	adds	r0, #1
 8016df4:	f000 80aa 	beq.w	8016f4c <_svfiprintf_r+0x1c8>
 8016df8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016dfa:	445a      	add	r2, fp
 8016dfc:	9209      	str	r2, [sp, #36]	; 0x24
 8016dfe:	f89a 3000 	ldrb.w	r3, [sl]
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	f000 80a2 	beq.w	8016f4c <_svfiprintf_r+0x1c8>
 8016e08:	2300      	movs	r3, #0
 8016e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8016e0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016e12:	f10a 0a01 	add.w	sl, sl, #1
 8016e16:	9304      	str	r3, [sp, #16]
 8016e18:	9307      	str	r3, [sp, #28]
 8016e1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016e1e:	931a      	str	r3, [sp, #104]	; 0x68
 8016e20:	4654      	mov	r4, sl
 8016e22:	2205      	movs	r2, #5
 8016e24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016e28:	4851      	ldr	r0, [pc, #324]	; (8016f70 <_svfiprintf_r+0x1ec>)
 8016e2a:	f7e9 f9f1 	bl	8000210 <memchr>
 8016e2e:	9a04      	ldr	r2, [sp, #16]
 8016e30:	b9d8      	cbnz	r0, 8016e6a <_svfiprintf_r+0xe6>
 8016e32:	06d0      	lsls	r0, r2, #27
 8016e34:	bf44      	itt	mi
 8016e36:	2320      	movmi	r3, #32
 8016e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016e3c:	0711      	lsls	r1, r2, #28
 8016e3e:	bf44      	itt	mi
 8016e40:	232b      	movmi	r3, #43	; 0x2b
 8016e42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016e46:	f89a 3000 	ldrb.w	r3, [sl]
 8016e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8016e4c:	d015      	beq.n	8016e7a <_svfiprintf_r+0xf6>
 8016e4e:	9a07      	ldr	r2, [sp, #28]
 8016e50:	4654      	mov	r4, sl
 8016e52:	2000      	movs	r0, #0
 8016e54:	f04f 0c0a 	mov.w	ip, #10
 8016e58:	4621      	mov	r1, r4
 8016e5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016e5e:	3b30      	subs	r3, #48	; 0x30
 8016e60:	2b09      	cmp	r3, #9
 8016e62:	d94e      	bls.n	8016f02 <_svfiprintf_r+0x17e>
 8016e64:	b1b0      	cbz	r0, 8016e94 <_svfiprintf_r+0x110>
 8016e66:	9207      	str	r2, [sp, #28]
 8016e68:	e014      	b.n	8016e94 <_svfiprintf_r+0x110>
 8016e6a:	eba0 0308 	sub.w	r3, r0, r8
 8016e6e:	fa09 f303 	lsl.w	r3, r9, r3
 8016e72:	4313      	orrs	r3, r2
 8016e74:	9304      	str	r3, [sp, #16]
 8016e76:	46a2      	mov	sl, r4
 8016e78:	e7d2      	b.n	8016e20 <_svfiprintf_r+0x9c>
 8016e7a:	9b03      	ldr	r3, [sp, #12]
 8016e7c:	1d19      	adds	r1, r3, #4
 8016e7e:	681b      	ldr	r3, [r3, #0]
 8016e80:	9103      	str	r1, [sp, #12]
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	bfbb      	ittet	lt
 8016e86:	425b      	neglt	r3, r3
 8016e88:	f042 0202 	orrlt.w	r2, r2, #2
 8016e8c:	9307      	strge	r3, [sp, #28]
 8016e8e:	9307      	strlt	r3, [sp, #28]
 8016e90:	bfb8      	it	lt
 8016e92:	9204      	strlt	r2, [sp, #16]
 8016e94:	7823      	ldrb	r3, [r4, #0]
 8016e96:	2b2e      	cmp	r3, #46	; 0x2e
 8016e98:	d10c      	bne.n	8016eb4 <_svfiprintf_r+0x130>
 8016e9a:	7863      	ldrb	r3, [r4, #1]
 8016e9c:	2b2a      	cmp	r3, #42	; 0x2a
 8016e9e:	d135      	bne.n	8016f0c <_svfiprintf_r+0x188>
 8016ea0:	9b03      	ldr	r3, [sp, #12]
 8016ea2:	1d1a      	adds	r2, r3, #4
 8016ea4:	681b      	ldr	r3, [r3, #0]
 8016ea6:	9203      	str	r2, [sp, #12]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	bfb8      	it	lt
 8016eac:	f04f 33ff 	movlt.w	r3, #4294967295
 8016eb0:	3402      	adds	r4, #2
 8016eb2:	9305      	str	r3, [sp, #20]
 8016eb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016f80 <_svfiprintf_r+0x1fc>
 8016eb8:	7821      	ldrb	r1, [r4, #0]
 8016eba:	2203      	movs	r2, #3
 8016ebc:	4650      	mov	r0, sl
 8016ebe:	f7e9 f9a7 	bl	8000210 <memchr>
 8016ec2:	b140      	cbz	r0, 8016ed6 <_svfiprintf_r+0x152>
 8016ec4:	2340      	movs	r3, #64	; 0x40
 8016ec6:	eba0 000a 	sub.w	r0, r0, sl
 8016eca:	fa03 f000 	lsl.w	r0, r3, r0
 8016ece:	9b04      	ldr	r3, [sp, #16]
 8016ed0:	4303      	orrs	r3, r0
 8016ed2:	3401      	adds	r4, #1
 8016ed4:	9304      	str	r3, [sp, #16]
 8016ed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016eda:	4826      	ldr	r0, [pc, #152]	; (8016f74 <_svfiprintf_r+0x1f0>)
 8016edc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016ee0:	2206      	movs	r2, #6
 8016ee2:	f7e9 f995 	bl	8000210 <memchr>
 8016ee6:	2800      	cmp	r0, #0
 8016ee8:	d038      	beq.n	8016f5c <_svfiprintf_r+0x1d8>
 8016eea:	4b23      	ldr	r3, [pc, #140]	; (8016f78 <_svfiprintf_r+0x1f4>)
 8016eec:	bb1b      	cbnz	r3, 8016f36 <_svfiprintf_r+0x1b2>
 8016eee:	9b03      	ldr	r3, [sp, #12]
 8016ef0:	3307      	adds	r3, #7
 8016ef2:	f023 0307 	bic.w	r3, r3, #7
 8016ef6:	3308      	adds	r3, #8
 8016ef8:	9303      	str	r3, [sp, #12]
 8016efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016efc:	4433      	add	r3, r6
 8016efe:	9309      	str	r3, [sp, #36]	; 0x24
 8016f00:	e767      	b.n	8016dd2 <_svfiprintf_r+0x4e>
 8016f02:	fb0c 3202 	mla	r2, ip, r2, r3
 8016f06:	460c      	mov	r4, r1
 8016f08:	2001      	movs	r0, #1
 8016f0a:	e7a5      	b.n	8016e58 <_svfiprintf_r+0xd4>
 8016f0c:	2300      	movs	r3, #0
 8016f0e:	3401      	adds	r4, #1
 8016f10:	9305      	str	r3, [sp, #20]
 8016f12:	4619      	mov	r1, r3
 8016f14:	f04f 0c0a 	mov.w	ip, #10
 8016f18:	4620      	mov	r0, r4
 8016f1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016f1e:	3a30      	subs	r2, #48	; 0x30
 8016f20:	2a09      	cmp	r2, #9
 8016f22:	d903      	bls.n	8016f2c <_svfiprintf_r+0x1a8>
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	d0c5      	beq.n	8016eb4 <_svfiprintf_r+0x130>
 8016f28:	9105      	str	r1, [sp, #20]
 8016f2a:	e7c3      	b.n	8016eb4 <_svfiprintf_r+0x130>
 8016f2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8016f30:	4604      	mov	r4, r0
 8016f32:	2301      	movs	r3, #1
 8016f34:	e7f0      	b.n	8016f18 <_svfiprintf_r+0x194>
 8016f36:	ab03      	add	r3, sp, #12
 8016f38:	9300      	str	r3, [sp, #0]
 8016f3a:	462a      	mov	r2, r5
 8016f3c:	4b0f      	ldr	r3, [pc, #60]	; (8016f7c <_svfiprintf_r+0x1f8>)
 8016f3e:	a904      	add	r1, sp, #16
 8016f40:	4638      	mov	r0, r7
 8016f42:	f3af 8000 	nop.w
 8016f46:	1c42      	adds	r2, r0, #1
 8016f48:	4606      	mov	r6, r0
 8016f4a:	d1d6      	bne.n	8016efa <_svfiprintf_r+0x176>
 8016f4c:	89ab      	ldrh	r3, [r5, #12]
 8016f4e:	065b      	lsls	r3, r3, #25
 8016f50:	f53f af2c 	bmi.w	8016dac <_svfiprintf_r+0x28>
 8016f54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016f56:	b01d      	add	sp, #116	; 0x74
 8016f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f5c:	ab03      	add	r3, sp, #12
 8016f5e:	9300      	str	r3, [sp, #0]
 8016f60:	462a      	mov	r2, r5
 8016f62:	4b06      	ldr	r3, [pc, #24]	; (8016f7c <_svfiprintf_r+0x1f8>)
 8016f64:	a904      	add	r1, sp, #16
 8016f66:	4638      	mov	r0, r7
 8016f68:	f000 f87a 	bl	8017060 <_printf_i>
 8016f6c:	e7eb      	b.n	8016f46 <_svfiprintf_r+0x1c2>
 8016f6e:	bf00      	nop
 8016f70:	08017a3c 	.word	0x08017a3c
 8016f74:	08017a46 	.word	0x08017a46
 8016f78:	00000000 	.word	0x00000000
 8016f7c:	08016ccd 	.word	0x08016ccd
 8016f80:	08017a42 	.word	0x08017a42

08016f84 <_printf_common>:
 8016f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f88:	4616      	mov	r6, r2
 8016f8a:	4699      	mov	r9, r3
 8016f8c:	688a      	ldr	r2, [r1, #8]
 8016f8e:	690b      	ldr	r3, [r1, #16]
 8016f90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016f94:	4293      	cmp	r3, r2
 8016f96:	bfb8      	it	lt
 8016f98:	4613      	movlt	r3, r2
 8016f9a:	6033      	str	r3, [r6, #0]
 8016f9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016fa0:	4607      	mov	r7, r0
 8016fa2:	460c      	mov	r4, r1
 8016fa4:	b10a      	cbz	r2, 8016faa <_printf_common+0x26>
 8016fa6:	3301      	adds	r3, #1
 8016fa8:	6033      	str	r3, [r6, #0]
 8016faa:	6823      	ldr	r3, [r4, #0]
 8016fac:	0699      	lsls	r1, r3, #26
 8016fae:	bf42      	ittt	mi
 8016fb0:	6833      	ldrmi	r3, [r6, #0]
 8016fb2:	3302      	addmi	r3, #2
 8016fb4:	6033      	strmi	r3, [r6, #0]
 8016fb6:	6825      	ldr	r5, [r4, #0]
 8016fb8:	f015 0506 	ands.w	r5, r5, #6
 8016fbc:	d106      	bne.n	8016fcc <_printf_common+0x48>
 8016fbe:	f104 0a19 	add.w	sl, r4, #25
 8016fc2:	68e3      	ldr	r3, [r4, #12]
 8016fc4:	6832      	ldr	r2, [r6, #0]
 8016fc6:	1a9b      	subs	r3, r3, r2
 8016fc8:	42ab      	cmp	r3, r5
 8016fca:	dc26      	bgt.n	801701a <_printf_common+0x96>
 8016fcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016fd0:	1e13      	subs	r3, r2, #0
 8016fd2:	6822      	ldr	r2, [r4, #0]
 8016fd4:	bf18      	it	ne
 8016fd6:	2301      	movne	r3, #1
 8016fd8:	0692      	lsls	r2, r2, #26
 8016fda:	d42b      	bmi.n	8017034 <_printf_common+0xb0>
 8016fdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016fe0:	4649      	mov	r1, r9
 8016fe2:	4638      	mov	r0, r7
 8016fe4:	47c0      	blx	r8
 8016fe6:	3001      	adds	r0, #1
 8016fe8:	d01e      	beq.n	8017028 <_printf_common+0xa4>
 8016fea:	6823      	ldr	r3, [r4, #0]
 8016fec:	68e5      	ldr	r5, [r4, #12]
 8016fee:	6832      	ldr	r2, [r6, #0]
 8016ff0:	f003 0306 	and.w	r3, r3, #6
 8016ff4:	2b04      	cmp	r3, #4
 8016ff6:	bf08      	it	eq
 8016ff8:	1aad      	subeq	r5, r5, r2
 8016ffa:	68a3      	ldr	r3, [r4, #8]
 8016ffc:	6922      	ldr	r2, [r4, #16]
 8016ffe:	bf0c      	ite	eq
 8017000:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017004:	2500      	movne	r5, #0
 8017006:	4293      	cmp	r3, r2
 8017008:	bfc4      	itt	gt
 801700a:	1a9b      	subgt	r3, r3, r2
 801700c:	18ed      	addgt	r5, r5, r3
 801700e:	2600      	movs	r6, #0
 8017010:	341a      	adds	r4, #26
 8017012:	42b5      	cmp	r5, r6
 8017014:	d11a      	bne.n	801704c <_printf_common+0xc8>
 8017016:	2000      	movs	r0, #0
 8017018:	e008      	b.n	801702c <_printf_common+0xa8>
 801701a:	2301      	movs	r3, #1
 801701c:	4652      	mov	r2, sl
 801701e:	4649      	mov	r1, r9
 8017020:	4638      	mov	r0, r7
 8017022:	47c0      	blx	r8
 8017024:	3001      	adds	r0, #1
 8017026:	d103      	bne.n	8017030 <_printf_common+0xac>
 8017028:	f04f 30ff 	mov.w	r0, #4294967295
 801702c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017030:	3501      	adds	r5, #1
 8017032:	e7c6      	b.n	8016fc2 <_printf_common+0x3e>
 8017034:	18e1      	adds	r1, r4, r3
 8017036:	1c5a      	adds	r2, r3, #1
 8017038:	2030      	movs	r0, #48	; 0x30
 801703a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801703e:	4422      	add	r2, r4
 8017040:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017044:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017048:	3302      	adds	r3, #2
 801704a:	e7c7      	b.n	8016fdc <_printf_common+0x58>
 801704c:	2301      	movs	r3, #1
 801704e:	4622      	mov	r2, r4
 8017050:	4649      	mov	r1, r9
 8017052:	4638      	mov	r0, r7
 8017054:	47c0      	blx	r8
 8017056:	3001      	adds	r0, #1
 8017058:	d0e6      	beq.n	8017028 <_printf_common+0xa4>
 801705a:	3601      	adds	r6, #1
 801705c:	e7d9      	b.n	8017012 <_printf_common+0x8e>
	...

08017060 <_printf_i>:
 8017060:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017064:	460c      	mov	r4, r1
 8017066:	4691      	mov	r9, r2
 8017068:	7e27      	ldrb	r7, [r4, #24]
 801706a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801706c:	2f78      	cmp	r7, #120	; 0x78
 801706e:	4680      	mov	r8, r0
 8017070:	469a      	mov	sl, r3
 8017072:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017076:	d807      	bhi.n	8017088 <_printf_i+0x28>
 8017078:	2f62      	cmp	r7, #98	; 0x62
 801707a:	d80a      	bhi.n	8017092 <_printf_i+0x32>
 801707c:	2f00      	cmp	r7, #0
 801707e:	f000 80d8 	beq.w	8017232 <_printf_i+0x1d2>
 8017082:	2f58      	cmp	r7, #88	; 0x58
 8017084:	f000 80a3 	beq.w	80171ce <_printf_i+0x16e>
 8017088:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801708c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017090:	e03a      	b.n	8017108 <_printf_i+0xa8>
 8017092:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017096:	2b15      	cmp	r3, #21
 8017098:	d8f6      	bhi.n	8017088 <_printf_i+0x28>
 801709a:	a001      	add	r0, pc, #4	; (adr r0, 80170a0 <_printf_i+0x40>)
 801709c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80170a0:	080170f9 	.word	0x080170f9
 80170a4:	0801710d 	.word	0x0801710d
 80170a8:	08017089 	.word	0x08017089
 80170ac:	08017089 	.word	0x08017089
 80170b0:	08017089 	.word	0x08017089
 80170b4:	08017089 	.word	0x08017089
 80170b8:	0801710d 	.word	0x0801710d
 80170bc:	08017089 	.word	0x08017089
 80170c0:	08017089 	.word	0x08017089
 80170c4:	08017089 	.word	0x08017089
 80170c8:	08017089 	.word	0x08017089
 80170cc:	08017219 	.word	0x08017219
 80170d0:	0801713d 	.word	0x0801713d
 80170d4:	080171fb 	.word	0x080171fb
 80170d8:	08017089 	.word	0x08017089
 80170dc:	08017089 	.word	0x08017089
 80170e0:	0801723b 	.word	0x0801723b
 80170e4:	08017089 	.word	0x08017089
 80170e8:	0801713d 	.word	0x0801713d
 80170ec:	08017089 	.word	0x08017089
 80170f0:	08017089 	.word	0x08017089
 80170f4:	08017203 	.word	0x08017203
 80170f8:	680b      	ldr	r3, [r1, #0]
 80170fa:	1d1a      	adds	r2, r3, #4
 80170fc:	681b      	ldr	r3, [r3, #0]
 80170fe:	600a      	str	r2, [r1, #0]
 8017100:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017104:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017108:	2301      	movs	r3, #1
 801710a:	e0a3      	b.n	8017254 <_printf_i+0x1f4>
 801710c:	6825      	ldr	r5, [r4, #0]
 801710e:	6808      	ldr	r0, [r1, #0]
 8017110:	062e      	lsls	r6, r5, #24
 8017112:	f100 0304 	add.w	r3, r0, #4
 8017116:	d50a      	bpl.n	801712e <_printf_i+0xce>
 8017118:	6805      	ldr	r5, [r0, #0]
 801711a:	600b      	str	r3, [r1, #0]
 801711c:	2d00      	cmp	r5, #0
 801711e:	da03      	bge.n	8017128 <_printf_i+0xc8>
 8017120:	232d      	movs	r3, #45	; 0x2d
 8017122:	426d      	negs	r5, r5
 8017124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017128:	485e      	ldr	r0, [pc, #376]	; (80172a4 <_printf_i+0x244>)
 801712a:	230a      	movs	r3, #10
 801712c:	e019      	b.n	8017162 <_printf_i+0x102>
 801712e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8017132:	6805      	ldr	r5, [r0, #0]
 8017134:	600b      	str	r3, [r1, #0]
 8017136:	bf18      	it	ne
 8017138:	b22d      	sxthne	r5, r5
 801713a:	e7ef      	b.n	801711c <_printf_i+0xbc>
 801713c:	680b      	ldr	r3, [r1, #0]
 801713e:	6825      	ldr	r5, [r4, #0]
 8017140:	1d18      	adds	r0, r3, #4
 8017142:	6008      	str	r0, [r1, #0]
 8017144:	0628      	lsls	r0, r5, #24
 8017146:	d501      	bpl.n	801714c <_printf_i+0xec>
 8017148:	681d      	ldr	r5, [r3, #0]
 801714a:	e002      	b.n	8017152 <_printf_i+0xf2>
 801714c:	0669      	lsls	r1, r5, #25
 801714e:	d5fb      	bpl.n	8017148 <_printf_i+0xe8>
 8017150:	881d      	ldrh	r5, [r3, #0]
 8017152:	4854      	ldr	r0, [pc, #336]	; (80172a4 <_printf_i+0x244>)
 8017154:	2f6f      	cmp	r7, #111	; 0x6f
 8017156:	bf0c      	ite	eq
 8017158:	2308      	moveq	r3, #8
 801715a:	230a      	movne	r3, #10
 801715c:	2100      	movs	r1, #0
 801715e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017162:	6866      	ldr	r6, [r4, #4]
 8017164:	60a6      	str	r6, [r4, #8]
 8017166:	2e00      	cmp	r6, #0
 8017168:	bfa2      	ittt	ge
 801716a:	6821      	ldrge	r1, [r4, #0]
 801716c:	f021 0104 	bicge.w	r1, r1, #4
 8017170:	6021      	strge	r1, [r4, #0]
 8017172:	b90d      	cbnz	r5, 8017178 <_printf_i+0x118>
 8017174:	2e00      	cmp	r6, #0
 8017176:	d04d      	beq.n	8017214 <_printf_i+0x1b4>
 8017178:	4616      	mov	r6, r2
 801717a:	fbb5 f1f3 	udiv	r1, r5, r3
 801717e:	fb03 5711 	mls	r7, r3, r1, r5
 8017182:	5dc7      	ldrb	r7, [r0, r7]
 8017184:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017188:	462f      	mov	r7, r5
 801718a:	42bb      	cmp	r3, r7
 801718c:	460d      	mov	r5, r1
 801718e:	d9f4      	bls.n	801717a <_printf_i+0x11a>
 8017190:	2b08      	cmp	r3, #8
 8017192:	d10b      	bne.n	80171ac <_printf_i+0x14c>
 8017194:	6823      	ldr	r3, [r4, #0]
 8017196:	07df      	lsls	r7, r3, #31
 8017198:	d508      	bpl.n	80171ac <_printf_i+0x14c>
 801719a:	6923      	ldr	r3, [r4, #16]
 801719c:	6861      	ldr	r1, [r4, #4]
 801719e:	4299      	cmp	r1, r3
 80171a0:	bfde      	ittt	le
 80171a2:	2330      	movle	r3, #48	; 0x30
 80171a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80171a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80171ac:	1b92      	subs	r2, r2, r6
 80171ae:	6122      	str	r2, [r4, #16]
 80171b0:	f8cd a000 	str.w	sl, [sp]
 80171b4:	464b      	mov	r3, r9
 80171b6:	aa03      	add	r2, sp, #12
 80171b8:	4621      	mov	r1, r4
 80171ba:	4640      	mov	r0, r8
 80171bc:	f7ff fee2 	bl	8016f84 <_printf_common>
 80171c0:	3001      	adds	r0, #1
 80171c2:	d14c      	bne.n	801725e <_printf_i+0x1fe>
 80171c4:	f04f 30ff 	mov.w	r0, #4294967295
 80171c8:	b004      	add	sp, #16
 80171ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171ce:	4835      	ldr	r0, [pc, #212]	; (80172a4 <_printf_i+0x244>)
 80171d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80171d4:	6823      	ldr	r3, [r4, #0]
 80171d6:	680e      	ldr	r6, [r1, #0]
 80171d8:	061f      	lsls	r7, r3, #24
 80171da:	f856 5b04 	ldr.w	r5, [r6], #4
 80171de:	600e      	str	r6, [r1, #0]
 80171e0:	d514      	bpl.n	801720c <_printf_i+0x1ac>
 80171e2:	07d9      	lsls	r1, r3, #31
 80171e4:	bf44      	itt	mi
 80171e6:	f043 0320 	orrmi.w	r3, r3, #32
 80171ea:	6023      	strmi	r3, [r4, #0]
 80171ec:	b91d      	cbnz	r5, 80171f6 <_printf_i+0x196>
 80171ee:	6823      	ldr	r3, [r4, #0]
 80171f0:	f023 0320 	bic.w	r3, r3, #32
 80171f4:	6023      	str	r3, [r4, #0]
 80171f6:	2310      	movs	r3, #16
 80171f8:	e7b0      	b.n	801715c <_printf_i+0xfc>
 80171fa:	6823      	ldr	r3, [r4, #0]
 80171fc:	f043 0320 	orr.w	r3, r3, #32
 8017200:	6023      	str	r3, [r4, #0]
 8017202:	2378      	movs	r3, #120	; 0x78
 8017204:	4828      	ldr	r0, [pc, #160]	; (80172a8 <_printf_i+0x248>)
 8017206:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801720a:	e7e3      	b.n	80171d4 <_printf_i+0x174>
 801720c:	065e      	lsls	r6, r3, #25
 801720e:	bf48      	it	mi
 8017210:	b2ad      	uxthmi	r5, r5
 8017212:	e7e6      	b.n	80171e2 <_printf_i+0x182>
 8017214:	4616      	mov	r6, r2
 8017216:	e7bb      	b.n	8017190 <_printf_i+0x130>
 8017218:	680b      	ldr	r3, [r1, #0]
 801721a:	6826      	ldr	r6, [r4, #0]
 801721c:	6960      	ldr	r0, [r4, #20]
 801721e:	1d1d      	adds	r5, r3, #4
 8017220:	600d      	str	r5, [r1, #0]
 8017222:	0635      	lsls	r5, r6, #24
 8017224:	681b      	ldr	r3, [r3, #0]
 8017226:	d501      	bpl.n	801722c <_printf_i+0x1cc>
 8017228:	6018      	str	r0, [r3, #0]
 801722a:	e002      	b.n	8017232 <_printf_i+0x1d2>
 801722c:	0671      	lsls	r1, r6, #25
 801722e:	d5fb      	bpl.n	8017228 <_printf_i+0x1c8>
 8017230:	8018      	strh	r0, [r3, #0]
 8017232:	2300      	movs	r3, #0
 8017234:	6123      	str	r3, [r4, #16]
 8017236:	4616      	mov	r6, r2
 8017238:	e7ba      	b.n	80171b0 <_printf_i+0x150>
 801723a:	680b      	ldr	r3, [r1, #0]
 801723c:	1d1a      	adds	r2, r3, #4
 801723e:	600a      	str	r2, [r1, #0]
 8017240:	681e      	ldr	r6, [r3, #0]
 8017242:	6862      	ldr	r2, [r4, #4]
 8017244:	2100      	movs	r1, #0
 8017246:	4630      	mov	r0, r6
 8017248:	f7e8 ffe2 	bl	8000210 <memchr>
 801724c:	b108      	cbz	r0, 8017252 <_printf_i+0x1f2>
 801724e:	1b80      	subs	r0, r0, r6
 8017250:	6060      	str	r0, [r4, #4]
 8017252:	6863      	ldr	r3, [r4, #4]
 8017254:	6123      	str	r3, [r4, #16]
 8017256:	2300      	movs	r3, #0
 8017258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801725c:	e7a8      	b.n	80171b0 <_printf_i+0x150>
 801725e:	6923      	ldr	r3, [r4, #16]
 8017260:	4632      	mov	r2, r6
 8017262:	4649      	mov	r1, r9
 8017264:	4640      	mov	r0, r8
 8017266:	47d0      	blx	sl
 8017268:	3001      	adds	r0, #1
 801726a:	d0ab      	beq.n	80171c4 <_printf_i+0x164>
 801726c:	6823      	ldr	r3, [r4, #0]
 801726e:	079b      	lsls	r3, r3, #30
 8017270:	d413      	bmi.n	801729a <_printf_i+0x23a>
 8017272:	68e0      	ldr	r0, [r4, #12]
 8017274:	9b03      	ldr	r3, [sp, #12]
 8017276:	4298      	cmp	r0, r3
 8017278:	bfb8      	it	lt
 801727a:	4618      	movlt	r0, r3
 801727c:	e7a4      	b.n	80171c8 <_printf_i+0x168>
 801727e:	2301      	movs	r3, #1
 8017280:	4632      	mov	r2, r6
 8017282:	4649      	mov	r1, r9
 8017284:	4640      	mov	r0, r8
 8017286:	47d0      	blx	sl
 8017288:	3001      	adds	r0, #1
 801728a:	d09b      	beq.n	80171c4 <_printf_i+0x164>
 801728c:	3501      	adds	r5, #1
 801728e:	68e3      	ldr	r3, [r4, #12]
 8017290:	9903      	ldr	r1, [sp, #12]
 8017292:	1a5b      	subs	r3, r3, r1
 8017294:	42ab      	cmp	r3, r5
 8017296:	dcf2      	bgt.n	801727e <_printf_i+0x21e>
 8017298:	e7eb      	b.n	8017272 <_printf_i+0x212>
 801729a:	2500      	movs	r5, #0
 801729c:	f104 0619 	add.w	r6, r4, #25
 80172a0:	e7f5      	b.n	801728e <_printf_i+0x22e>
 80172a2:	bf00      	nop
 80172a4:	08017a4d 	.word	0x08017a4d
 80172a8:	08017a5e 	.word	0x08017a5e

080172ac <memmove>:
 80172ac:	4288      	cmp	r0, r1
 80172ae:	b510      	push	{r4, lr}
 80172b0:	eb01 0402 	add.w	r4, r1, r2
 80172b4:	d902      	bls.n	80172bc <memmove+0x10>
 80172b6:	4284      	cmp	r4, r0
 80172b8:	4623      	mov	r3, r4
 80172ba:	d807      	bhi.n	80172cc <memmove+0x20>
 80172bc:	1e43      	subs	r3, r0, #1
 80172be:	42a1      	cmp	r1, r4
 80172c0:	d008      	beq.n	80172d4 <memmove+0x28>
 80172c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80172c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80172ca:	e7f8      	b.n	80172be <memmove+0x12>
 80172cc:	4402      	add	r2, r0
 80172ce:	4601      	mov	r1, r0
 80172d0:	428a      	cmp	r2, r1
 80172d2:	d100      	bne.n	80172d6 <memmove+0x2a>
 80172d4:	bd10      	pop	{r4, pc}
 80172d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80172da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80172de:	e7f7      	b.n	80172d0 <memmove+0x24>

080172e0 <_free_r>:
 80172e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80172e2:	2900      	cmp	r1, #0
 80172e4:	d048      	beq.n	8017378 <_free_r+0x98>
 80172e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80172ea:	9001      	str	r0, [sp, #4]
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	f1a1 0404 	sub.w	r4, r1, #4
 80172f2:	bfb8      	it	lt
 80172f4:	18e4      	addlt	r4, r4, r3
 80172f6:	f000 f8d3 	bl	80174a0 <__malloc_lock>
 80172fa:	4a20      	ldr	r2, [pc, #128]	; (801737c <_free_r+0x9c>)
 80172fc:	9801      	ldr	r0, [sp, #4]
 80172fe:	6813      	ldr	r3, [r2, #0]
 8017300:	4615      	mov	r5, r2
 8017302:	b933      	cbnz	r3, 8017312 <_free_r+0x32>
 8017304:	6063      	str	r3, [r4, #4]
 8017306:	6014      	str	r4, [r2, #0]
 8017308:	b003      	add	sp, #12
 801730a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801730e:	f000 b8cd 	b.w	80174ac <__malloc_unlock>
 8017312:	42a3      	cmp	r3, r4
 8017314:	d90b      	bls.n	801732e <_free_r+0x4e>
 8017316:	6821      	ldr	r1, [r4, #0]
 8017318:	1862      	adds	r2, r4, r1
 801731a:	4293      	cmp	r3, r2
 801731c:	bf04      	itt	eq
 801731e:	681a      	ldreq	r2, [r3, #0]
 8017320:	685b      	ldreq	r3, [r3, #4]
 8017322:	6063      	str	r3, [r4, #4]
 8017324:	bf04      	itt	eq
 8017326:	1852      	addeq	r2, r2, r1
 8017328:	6022      	streq	r2, [r4, #0]
 801732a:	602c      	str	r4, [r5, #0]
 801732c:	e7ec      	b.n	8017308 <_free_r+0x28>
 801732e:	461a      	mov	r2, r3
 8017330:	685b      	ldr	r3, [r3, #4]
 8017332:	b10b      	cbz	r3, 8017338 <_free_r+0x58>
 8017334:	42a3      	cmp	r3, r4
 8017336:	d9fa      	bls.n	801732e <_free_r+0x4e>
 8017338:	6811      	ldr	r1, [r2, #0]
 801733a:	1855      	adds	r5, r2, r1
 801733c:	42a5      	cmp	r5, r4
 801733e:	d10b      	bne.n	8017358 <_free_r+0x78>
 8017340:	6824      	ldr	r4, [r4, #0]
 8017342:	4421      	add	r1, r4
 8017344:	1854      	adds	r4, r2, r1
 8017346:	42a3      	cmp	r3, r4
 8017348:	6011      	str	r1, [r2, #0]
 801734a:	d1dd      	bne.n	8017308 <_free_r+0x28>
 801734c:	681c      	ldr	r4, [r3, #0]
 801734e:	685b      	ldr	r3, [r3, #4]
 8017350:	6053      	str	r3, [r2, #4]
 8017352:	4421      	add	r1, r4
 8017354:	6011      	str	r1, [r2, #0]
 8017356:	e7d7      	b.n	8017308 <_free_r+0x28>
 8017358:	d902      	bls.n	8017360 <_free_r+0x80>
 801735a:	230c      	movs	r3, #12
 801735c:	6003      	str	r3, [r0, #0]
 801735e:	e7d3      	b.n	8017308 <_free_r+0x28>
 8017360:	6825      	ldr	r5, [r4, #0]
 8017362:	1961      	adds	r1, r4, r5
 8017364:	428b      	cmp	r3, r1
 8017366:	bf04      	itt	eq
 8017368:	6819      	ldreq	r1, [r3, #0]
 801736a:	685b      	ldreq	r3, [r3, #4]
 801736c:	6063      	str	r3, [r4, #4]
 801736e:	bf04      	itt	eq
 8017370:	1949      	addeq	r1, r1, r5
 8017372:	6021      	streq	r1, [r4, #0]
 8017374:	6054      	str	r4, [r2, #4]
 8017376:	e7c7      	b.n	8017308 <_free_r+0x28>
 8017378:	b003      	add	sp, #12
 801737a:	bd30      	pop	{r4, r5, pc}
 801737c:	20000690 	.word	0x20000690

08017380 <_malloc_r>:
 8017380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017382:	1ccd      	adds	r5, r1, #3
 8017384:	f025 0503 	bic.w	r5, r5, #3
 8017388:	3508      	adds	r5, #8
 801738a:	2d0c      	cmp	r5, #12
 801738c:	bf38      	it	cc
 801738e:	250c      	movcc	r5, #12
 8017390:	2d00      	cmp	r5, #0
 8017392:	4606      	mov	r6, r0
 8017394:	db01      	blt.n	801739a <_malloc_r+0x1a>
 8017396:	42a9      	cmp	r1, r5
 8017398:	d903      	bls.n	80173a2 <_malloc_r+0x22>
 801739a:	230c      	movs	r3, #12
 801739c:	6033      	str	r3, [r6, #0]
 801739e:	2000      	movs	r0, #0
 80173a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80173a2:	f000 f87d 	bl	80174a0 <__malloc_lock>
 80173a6:	4921      	ldr	r1, [pc, #132]	; (801742c <_malloc_r+0xac>)
 80173a8:	680a      	ldr	r2, [r1, #0]
 80173aa:	4614      	mov	r4, r2
 80173ac:	b99c      	cbnz	r4, 80173d6 <_malloc_r+0x56>
 80173ae:	4f20      	ldr	r7, [pc, #128]	; (8017430 <_malloc_r+0xb0>)
 80173b0:	683b      	ldr	r3, [r7, #0]
 80173b2:	b923      	cbnz	r3, 80173be <_malloc_r+0x3e>
 80173b4:	4621      	mov	r1, r4
 80173b6:	4630      	mov	r0, r6
 80173b8:	f000 f862 	bl	8017480 <_sbrk_r>
 80173bc:	6038      	str	r0, [r7, #0]
 80173be:	4629      	mov	r1, r5
 80173c0:	4630      	mov	r0, r6
 80173c2:	f000 f85d 	bl	8017480 <_sbrk_r>
 80173c6:	1c43      	adds	r3, r0, #1
 80173c8:	d123      	bne.n	8017412 <_malloc_r+0x92>
 80173ca:	230c      	movs	r3, #12
 80173cc:	6033      	str	r3, [r6, #0]
 80173ce:	4630      	mov	r0, r6
 80173d0:	f000 f86c 	bl	80174ac <__malloc_unlock>
 80173d4:	e7e3      	b.n	801739e <_malloc_r+0x1e>
 80173d6:	6823      	ldr	r3, [r4, #0]
 80173d8:	1b5b      	subs	r3, r3, r5
 80173da:	d417      	bmi.n	801740c <_malloc_r+0x8c>
 80173dc:	2b0b      	cmp	r3, #11
 80173de:	d903      	bls.n	80173e8 <_malloc_r+0x68>
 80173e0:	6023      	str	r3, [r4, #0]
 80173e2:	441c      	add	r4, r3
 80173e4:	6025      	str	r5, [r4, #0]
 80173e6:	e004      	b.n	80173f2 <_malloc_r+0x72>
 80173e8:	6863      	ldr	r3, [r4, #4]
 80173ea:	42a2      	cmp	r2, r4
 80173ec:	bf0c      	ite	eq
 80173ee:	600b      	streq	r3, [r1, #0]
 80173f0:	6053      	strne	r3, [r2, #4]
 80173f2:	4630      	mov	r0, r6
 80173f4:	f000 f85a 	bl	80174ac <__malloc_unlock>
 80173f8:	f104 000b 	add.w	r0, r4, #11
 80173fc:	1d23      	adds	r3, r4, #4
 80173fe:	f020 0007 	bic.w	r0, r0, #7
 8017402:	1ac2      	subs	r2, r0, r3
 8017404:	d0cc      	beq.n	80173a0 <_malloc_r+0x20>
 8017406:	1a1b      	subs	r3, r3, r0
 8017408:	50a3      	str	r3, [r4, r2]
 801740a:	e7c9      	b.n	80173a0 <_malloc_r+0x20>
 801740c:	4622      	mov	r2, r4
 801740e:	6864      	ldr	r4, [r4, #4]
 8017410:	e7cc      	b.n	80173ac <_malloc_r+0x2c>
 8017412:	1cc4      	adds	r4, r0, #3
 8017414:	f024 0403 	bic.w	r4, r4, #3
 8017418:	42a0      	cmp	r0, r4
 801741a:	d0e3      	beq.n	80173e4 <_malloc_r+0x64>
 801741c:	1a21      	subs	r1, r4, r0
 801741e:	4630      	mov	r0, r6
 8017420:	f000 f82e 	bl	8017480 <_sbrk_r>
 8017424:	3001      	adds	r0, #1
 8017426:	d1dd      	bne.n	80173e4 <_malloc_r+0x64>
 8017428:	e7cf      	b.n	80173ca <_malloc_r+0x4a>
 801742a:	bf00      	nop
 801742c:	20000690 	.word	0x20000690
 8017430:	20000694 	.word	0x20000694

08017434 <_realloc_r>:
 8017434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017436:	4607      	mov	r7, r0
 8017438:	4614      	mov	r4, r2
 801743a:	460e      	mov	r6, r1
 801743c:	b921      	cbnz	r1, 8017448 <_realloc_r+0x14>
 801743e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017442:	4611      	mov	r1, r2
 8017444:	f7ff bf9c 	b.w	8017380 <_malloc_r>
 8017448:	b922      	cbnz	r2, 8017454 <_realloc_r+0x20>
 801744a:	f7ff ff49 	bl	80172e0 <_free_r>
 801744e:	4625      	mov	r5, r4
 8017450:	4628      	mov	r0, r5
 8017452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017454:	f000 f830 	bl	80174b8 <_malloc_usable_size_r>
 8017458:	42a0      	cmp	r0, r4
 801745a:	d20f      	bcs.n	801747c <_realloc_r+0x48>
 801745c:	4621      	mov	r1, r4
 801745e:	4638      	mov	r0, r7
 8017460:	f7ff ff8e 	bl	8017380 <_malloc_r>
 8017464:	4605      	mov	r5, r0
 8017466:	2800      	cmp	r0, #0
 8017468:	d0f2      	beq.n	8017450 <_realloc_r+0x1c>
 801746a:	4631      	mov	r1, r6
 801746c:	4622      	mov	r2, r4
 801746e:	f7ff fbf7 	bl	8016c60 <memcpy>
 8017472:	4631      	mov	r1, r6
 8017474:	4638      	mov	r0, r7
 8017476:	f7ff ff33 	bl	80172e0 <_free_r>
 801747a:	e7e9      	b.n	8017450 <_realloc_r+0x1c>
 801747c:	4635      	mov	r5, r6
 801747e:	e7e7      	b.n	8017450 <_realloc_r+0x1c>

08017480 <_sbrk_r>:
 8017480:	b538      	push	{r3, r4, r5, lr}
 8017482:	4d06      	ldr	r5, [pc, #24]	; (801749c <_sbrk_r+0x1c>)
 8017484:	2300      	movs	r3, #0
 8017486:	4604      	mov	r4, r0
 8017488:	4608      	mov	r0, r1
 801748a:	602b      	str	r3, [r5, #0]
 801748c:	f7ee ff96 	bl	80063bc <_sbrk>
 8017490:	1c43      	adds	r3, r0, #1
 8017492:	d102      	bne.n	801749a <_sbrk_r+0x1a>
 8017494:	682b      	ldr	r3, [r5, #0]
 8017496:	b103      	cbz	r3, 801749a <_sbrk_r+0x1a>
 8017498:	6023      	str	r3, [r4, #0]
 801749a:	bd38      	pop	{r3, r4, r5, pc}
 801749c:	200057dc 	.word	0x200057dc

080174a0 <__malloc_lock>:
 80174a0:	4801      	ldr	r0, [pc, #4]	; (80174a8 <__malloc_lock+0x8>)
 80174a2:	f000 b811 	b.w	80174c8 <__retarget_lock_acquire_recursive>
 80174a6:	bf00      	nop
 80174a8:	200057e4 	.word	0x200057e4

080174ac <__malloc_unlock>:
 80174ac:	4801      	ldr	r0, [pc, #4]	; (80174b4 <__malloc_unlock+0x8>)
 80174ae:	f000 b80c 	b.w	80174ca <__retarget_lock_release_recursive>
 80174b2:	bf00      	nop
 80174b4:	200057e4 	.word	0x200057e4

080174b8 <_malloc_usable_size_r>:
 80174b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80174bc:	1f18      	subs	r0, r3, #4
 80174be:	2b00      	cmp	r3, #0
 80174c0:	bfbc      	itt	lt
 80174c2:	580b      	ldrlt	r3, [r1, r0]
 80174c4:	18c0      	addlt	r0, r0, r3
 80174c6:	4770      	bx	lr

080174c8 <__retarget_lock_acquire_recursive>:
 80174c8:	4770      	bx	lr

080174ca <__retarget_lock_release_recursive>:
 80174ca:	4770      	bx	lr

080174cc <_init>:
 80174cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174ce:	bf00      	nop
 80174d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80174d2:	bc08      	pop	{r3}
 80174d4:	469e      	mov	lr, r3
 80174d6:	4770      	bx	lr

080174d8 <_fini>:
 80174d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174da:	bf00      	nop
 80174dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80174de:	bc08      	pop	{r3}
 80174e0:	469e      	mov	lr, r3
 80174e2:	4770      	bx	lr
